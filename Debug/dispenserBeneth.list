
dispenserBeneth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001f2f0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004b1c  0801f480  0801f480  00020480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08023f9c  08023f9c  00025170  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08023f9c  08023f9c  00024f9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08023fa4  08023fa4  00025170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08023fa4  08023fa4  00024fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08023fa8  08023fa8  00024fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000170  20000000  08023fac  00025000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00025170  2**0
                  CONTENTS
 10 .bss          0000e7ec  20000170  20000170  00025170  2**2
                  ALLOC
 11 .eth_desc     00000004  2000e95c  2000e95c  00025170  2**0
                  ALLOC
 12 .eth_buf      00000000  2000e960  2000e960  00025170  2**0
                  CONTENTS
 13 ._user_heap_stack 00000600  2000e960  2000e960  00025170  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  00025170  2**0
                  CONTENTS, READONLY
 15 .debug_info   0003d978  00000000  00000000  000251a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000a4cc  00000000  00000000  00062b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002cc8  00000000  00000000  0006cfe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00002328  00000000  00000000  0006fcb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00037e4b  00000000  00000000  00071fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000483e0  00000000  00000000  000a9e23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000f7827  00000000  00000000  000f2203  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  001e9a2a  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000c310  00000000  00000000  001e9a70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000006b  00000000  00000000  001f5d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000170 	.word	0x20000170
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801f468 	.word	0x0801f468

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000174 	.word	0x20000174
 80001cc:	0801f468 	.word	0x0801f468

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <app_business_init>:

/**
  * @brief  初始化应用层业务逻辑
  * @retval None
  */
void app_business_init(void) {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
    // 初始化寄存器默认值
    
    // 初始化舵机相关寄存器
    holding_regs[REG_ROTATION_TRIGGER] = 3;               // 40023 转动触发：3=上电初始化值
 80005b2:	4b32      	ldr	r3, [pc, #200]	@ (800067c <app_business_init+0xd0>)
 80005b4:	2203      	movs	r2, #3
 80005b6:	85da      	strh	r2, [r3, #46]	@ 0x2e
    // 初始化当前角度寄存器为默认值500 (40017-40022)
    holding_regs[REG_CURRENT_ANGLE1] = 500;
 80005b8:	4b30      	ldr	r3, [pc, #192]	@ (800067c <app_business_init+0xd0>)
 80005ba:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80005be:	845a      	strh	r2, [r3, #34]	@ 0x22
    holding_regs[REG_CURRENT_ANGLE2] = 500;
 80005c0:	4b2e      	ldr	r3, [pc, #184]	@ (800067c <app_business_init+0xd0>)
 80005c2:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80005c6:	849a      	strh	r2, [r3, #36]	@ 0x24
    holding_regs[REG_CURRENT_ANGLE3] = 500;
 80005c8:	4b2c      	ldr	r3, [pc, #176]	@ (800067c <app_business_init+0xd0>)
 80005ca:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80005ce:	84da      	strh	r2, [r3, #38]	@ 0x26
    holding_regs[REG_CURRENT_ANGLE4] = 500;
 80005d0:	4b2a      	ldr	r3, [pc, #168]	@ (800067c <app_business_init+0xd0>)
 80005d2:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80005d6:	851a      	strh	r2, [r3, #40]	@ 0x28
    holding_regs[REG_CURRENT_ANGLE5] = 500;
 80005d8:	4b28      	ldr	r3, [pc, #160]	@ (800067c <app_business_init+0xd0>)
 80005da:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80005de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    holding_regs[REG_CURRENT_ANGLE6] = 500;
 80005e0:	4b26      	ldr	r3, [pc, #152]	@ (800067c <app_business_init+0xd0>)
 80005e2:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80005e6:	859a      	strh	r2, [r3, #44]	@ 0x2c
    
    // 初始化泵相关寄存器
    holding_regs[REG_PUMP1_STATUS] = 999;                 // 40029 泵1状态：999=未知状态，等待查询
 80005e8:	4b24      	ldr	r3, [pc, #144]	@ (800067c <app_business_init+0xd0>)
 80005ea:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80005ee:	875a      	strh	r2, [r3, #58]	@ 0x3a
    holding_regs[REG_PUMP2_STATUS] = 999;                 // 40034 泵2状态：999=未知状态，等待查询
 80005f0:	4b22      	ldr	r3, [pc, #136]	@ (800067c <app_business_init+0xd0>)
 80005f2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80005f6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    
    // 初始化业务状态变量
    last_rotation_trigger = 3;    // 对应寄存器的初始值
 80005fa:	4b21      	ldr	r3, [pc, #132]	@ (8000680 <app_business_init+0xd4>)
 80005fc:	2203      	movs	r2, #3
 80005fe:	601a      	str	r2, [r3, #0]
    last_weight_control = 0;
 8000600:	4b20      	ldr	r3, [pc, #128]	@ (8000684 <app_business_init+0xd8>)
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]
    last_pump1_init_trigger = 0;
 8000606:	4b20      	ldr	r3, [pc, #128]	@ (8000688 <app_business_init+0xdc>)
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
    last_pump1_control_trigger = 0;
 800060c:	4b1f      	ldr	r3, [pc, #124]	@ (800068c <app_business_init+0xe0>)
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
    last_pump2_init_trigger = 0;
 8000612:	4b1f      	ldr	r3, [pc, #124]	@ (8000690 <app_business_init+0xe4>)
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
    last_pump2_control_trigger = 0;
 8000618:	4b1e      	ldr	r3, [pc, #120]	@ (8000694 <app_business_init+0xe8>)
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
    
    // 初始化泵状态变量
    pump1_busy = 0;
 800061e:	4b1e      	ldr	r3, [pc, #120]	@ (8000698 <app_business_init+0xec>)
 8000620:	2200      	movs	r2, #0
 8000622:	701a      	strb	r2, [r3, #0]
    pump2_busy = 0;
 8000624:	4b1d      	ldr	r3, [pc, #116]	@ (800069c <app_business_init+0xf0>)
 8000626:	2200      	movs	r2, #0
 8000628:	701a      	strb	r2, [r3, #0]
    pump1_current_pos = 0;
 800062a:	4b1d      	ldr	r3, [pc, #116]	@ (80006a0 <app_business_init+0xf4>)
 800062c:	2200      	movs	r2, #0
 800062e:	801a      	strh	r2, [r3, #0]
    pump2_current_pos = 0;
 8000630:	4b1c      	ldr	r3, [pc, #112]	@ (80006a4 <app_business_init+0xf8>)
 8000632:	2200      	movs	r2, #0
 8000634:	801a      	strh	r2, [r3, #0]
    pump1_move_start_time = 0;
 8000636:	4b1c      	ldr	r3, [pc, #112]	@ (80006a8 <app_business_init+0xfc>)
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
    pump2_move_start_time = 0;
 800063c:	4b1b      	ldr	r3, [pc, #108]	@ (80006ac <app_business_init+0x100>)
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
    
    // 初始化舵机状态变量
    servo_moving = 0;
 8000642:	4b1b      	ldr	r3, [pc, #108]	@ (80006b0 <app_business_init+0x104>)
 8000644:	2200      	movs	r2, #0
 8000646:	701a      	strb	r2, [r3, #0]
    servo_move_start_time = 0;
 8000648:	4b1a      	ldr	r3, [pc, #104]	@ (80006b4 <app_business_init+0x108>)
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 6; i++) {
 800064e:	2300      	movs	r3, #0
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	e008      	b.n	8000666 <app_business_init+0xba>
        servo_current_positions[i] = 9999;  // 默认位置9999，表示未读取
 8000654:	4a18      	ldr	r2, [pc, #96]	@ (80006b8 <app_business_init+0x10c>)
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	f242 710f 	movw	r1, #9999	@ 0x270f
 800065c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < 6; i++) {
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	3301      	adds	r3, #1
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	2b05      	cmp	r3, #5
 800066a:	ddf3      	ble.n	8000654 <app_business_init+0xa8>
    }
    
    cdc_debug_print("Business logic initialized");
 800066c:	4813      	ldr	r0, [pc, #76]	@ (80006bc <app_business_init+0x110>)
 800066e:	f000 f833 	bl	80006d8 <cdc_debug_print>
}
 8000672:	bf00      	nop
 8000674:	3708      	adds	r7, #8
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	200006c0 	.word	0x200006c0
 8000680:	2000018c 	.word	0x2000018c
 8000684:	20000190 	.word	0x20000190
 8000688:	20000194 	.word	0x20000194
 800068c:	20000198 	.word	0x20000198
 8000690:	2000019c 	.word	0x2000019c
 8000694:	200001a0 	.word	0x200001a0
 8000698:	20000224 	.word	0x20000224
 800069c:	20000225 	.word	0x20000225
 80006a0:	20000226 	.word	0x20000226
 80006a4:	20000228 	.word	0x20000228
 80006a8:	2000022c 	.word	0x2000022c
 80006ac:	20000230 	.word	0x20000230
 80006b0:	20000234 	.word	0x20000234
 80006b4:	20000238 	.word	0x20000238
 80006b8:	2000023c 	.word	0x2000023c
 80006bc:	0801f480 	.word	0x0801f480

080006c0 <app_business_process>:

/**
  * @brief  主业务逻辑处理函数 - 每100ms调用一次
  * @retval None
  */
void app_business_process(void) {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
    // 1. 处理舵机相关命令
    process_servo_commands();
 80006c4:	f000 f828 	bl	8000718 <process_servo_commands>
    
    // 2. 处理称重相关命令
    process_weight_commands();
 80006c8:	f000 f906 	bl	80008d8 <process_weight_commands>
    
    // 3. 处理泵相关命令
    process_pump_commands();
 80006cc:	f000 f926 	bl	800091c <process_pump_commands>
    
    // 4. 更新传感器数据 (只读寄存器)
    update_sensor_data();
 80006d0:	f000 fa76 	bl	8000bc0 <update_sensor_data>
}
 80006d4:	bf00      	nop
 80006d6:	bd80      	pop	{r7, pc}

080006d8 <cdc_debug_print>:
/**
  * @brief  调试信息输出函数
  * @param  message: 要输出的调试信息
  * @retval None
  */
void cdc_debug_print(const char* message) {
 80006d8:	b580      	push	{r7, lr}
 80006da:	b084      	sub	sp, #16
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
    int len = snprintf(debug_buf, sizeof(debug_buf), "[BUSINESS] %s\r\n", message);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	4a0b      	ldr	r2, [pc, #44]	@ (8000710 <cdc_debug_print+0x38>)
 80006e4:	2180      	movs	r1, #128	@ 0x80
 80006e6:	480b      	ldr	r0, [pc, #44]	@ (8000714 <cdc_debug_print+0x3c>)
 80006e8:	f01d fd62 	bl	801e1b0 <sniprintf>
 80006ec:	60f8      	str	r0, [r7, #12]
    if (len > 0 && len < sizeof(debug_buf)) {
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	dd08      	ble.n	8000706 <cdc_debug_print+0x2e>
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	2b7f      	cmp	r3, #127	@ 0x7f
 80006f8:	d805      	bhi.n	8000706 <cdc_debug_print+0x2e>
        CDC_Transmit_FS((uint8_t*)debug_buf, len);  // 暂时启用调试输出
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	b29b      	uxth	r3, r3
 80006fe:	4619      	mov	r1, r3
 8000700:	4804      	ldr	r0, [pc, #16]	@ (8000714 <cdc_debug_print+0x3c>)
 8000702:	f01c ff5f 	bl	801d5c4 <CDC_Transmit_FS>
    }
}
 8000706:	bf00      	nop
 8000708:	3710      	adds	r7, #16
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	0801f49c 	.word	0x0801f49c
 8000714:	200001a4 	.word	0x200001a4

08000718 <process_servo_commands>:

/**
  * @brief  处理舵机相关命令
  * @retval None
  */
static void process_servo_commands(void) {
 8000718:	b5f0      	push	{r4, r5, r6, r7, lr}
 800071a:	b0ad      	sub	sp, #180	@ 0xb4
 800071c:	af06      	add	r7, sp, #24
    // 状态机逻辑：
    // 1 = 正在执行任务（忙）
    // 2 = 任务完成，可重新写入1开始新任务
    // 3 = 上电初始化值，可接受写入1
    // 当写入1时执行移动，执行期间保持状态1，完成后置为状态2
    if (holding_regs[REG_ROTATION_TRIGGER] == 1 && 
 800071e:	4b63      	ldr	r3, [pc, #396]	@ (80008ac <process_servo_commands+0x194>)
 8000720:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8000722:	2b01      	cmp	r3, #1
 8000724:	f040 80ac 	bne.w	8000880 <process_servo_commands+0x168>
        (last_rotation_trigger == 2 || last_rotation_trigger == 3)) {  // 只有从状态2或3才能接受状态1
 8000728:	4b61      	ldr	r3, [pc, #388]	@ (80008b0 <process_servo_commands+0x198>)
 800072a:	681b      	ldr	r3, [r3, #0]
    if (holding_regs[REG_ROTATION_TRIGGER] == 1 && 
 800072c:	2b02      	cmp	r3, #2
 800072e:	d004      	beq.n	800073a <process_servo_commands+0x22>
        (last_rotation_trigger == 2 || last_rotation_trigger == 3)) {  // 只有从状态2或3才能接受状态1
 8000730:	4b5f      	ldr	r3, [pc, #380]	@ (80008b0 <process_servo_commands+0x198>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	2b03      	cmp	r3, #3
 8000736:	f040 80a3 	bne.w	8000880 <process_servo_commands+0x168>
        if (!servo_moving) {  // 只有在舵机不在移动时才处理新命令
 800073a:	4b5e      	ldr	r3, [pc, #376]	@ (80008b4 <process_servo_commands+0x19c>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	2b00      	cmp	r3, #0
 8000740:	f040 809a 	bne.w	8000878 <process_servo_commands+0x160>
            cdc_debug_print("Servo rotation triggered, status 1 (busy)");
 8000744:	485c      	ldr	r0, [pc, #368]	@ (80008b8 <process_servo_commands+0x1a0>)
 8000746:	f7ff ffc7 	bl	80006d8 <cdc_debug_print>
            
            // 获取转动时间 (40010) - 现在只用一个寄存器
            uint16_t rotation_time = holding_regs[REG_ROTATION_TIME];
 800074a:	4b58      	ldr	r3, [pc, #352]	@ (80008ac <process_servo_commands+0x194>)
 800074c:	8a9b      	ldrh	r3, [r3, #20]
 800074e:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
            
            // 验证转动时间范围 (1-65535ms)
            if (rotation_time == 0) {
 8000752:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8000756:	2b00      	cmp	r3, #0
 8000758:	d106      	bne.n	8000768 <process_servo_commands+0x50>
                rotation_time = 1000;  // 默认1秒
 800075a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800075e:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
                cdc_debug_print("Using default rotation time: 1000ms");
 8000762:	4856      	ldr	r0, [pc, #344]	@ (80008bc <process_servo_commands+0x1a4>)
 8000764:	f7ff ffb8 	bl	80006d8 <cdc_debug_print>
            }
            
            // 获取目标角度 (40011-40016，每个角度占用1个寄存器)
            uint16_t target_angles[6];
            target_angles[0] = holding_regs[REG_TARGET_ANGLE1];
 8000768:	4b50      	ldr	r3, [pc, #320]	@ (80008ac <process_servo_commands+0x194>)
 800076a:	8adb      	ldrh	r3, [r3, #22]
 800076c:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
            target_angles[1] = holding_regs[REG_TARGET_ANGLE2];
 8000770:	4b4e      	ldr	r3, [pc, #312]	@ (80008ac <process_servo_commands+0x194>)
 8000772:	8b1b      	ldrh	r3, [r3, #24]
 8000774:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
            target_angles[2] = holding_regs[REG_TARGET_ANGLE3];
 8000778:	4b4c      	ldr	r3, [pc, #304]	@ (80008ac <process_servo_commands+0x194>)
 800077a:	8b5b      	ldrh	r3, [r3, #26]
 800077c:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
            target_angles[3] = holding_regs[REG_TARGET_ANGLE4];
 8000780:	4b4a      	ldr	r3, [pc, #296]	@ (80008ac <process_servo_commands+0x194>)
 8000782:	8b9b      	ldrh	r3, [r3, #28]
 8000784:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
            target_angles[4] = holding_regs[REG_TARGET_ANGLE5];
 8000788:	4b48      	ldr	r3, [pc, #288]	@ (80008ac <process_servo_commands+0x194>)
 800078a:	8bdb      	ldrh	r3, [r3, #30]
 800078c:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
            target_angles[5] = holding_regs[REG_TARGET_ANGLE6];
 8000790:	4b46      	ldr	r3, [pc, #280]	@ (80008ac <process_servo_commands+0x194>)
 8000792:	8c1b      	ldrh	r3, [r3, #32]
 8000794:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
            
            // 验证角度范围 (0-1000)
            for (int i = 0; i < 6; i++) {
 8000798:	2300      	movs	r3, #0
 800079a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800079e:	e02c      	b.n	80007fa <process_servo_commands+0xe2>
                if (target_angles[i] > 1000) {
 80007a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80007a4:	005b      	lsls	r3, r3, #1
 80007a6:	3398      	adds	r3, #152	@ 0x98
 80007a8:	443b      	add	r3, r7
 80007aa:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80007ae:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80007b2:	d91d      	bls.n	80007f0 <process_servo_commands+0xd8>
                    char warning_msg[60];
                    snprintf(warning_msg, sizeof(warning_msg), "Servo%d angle limited to 1000 (was %d)", i+1, target_angles[i]);
 80007b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80007b8:	1c5a      	adds	r2, r3, #1
 80007ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80007be:	005b      	lsls	r3, r3, #1
 80007c0:	3398      	adds	r3, #152	@ 0x98
 80007c2:	443b      	add	r3, r7
 80007c4:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80007c8:	1d38      	adds	r0, r7, #4
 80007ca:	9300      	str	r3, [sp, #0]
 80007cc:	4613      	mov	r3, r2
 80007ce:	4a3c      	ldr	r2, [pc, #240]	@ (80008c0 <process_servo_commands+0x1a8>)
 80007d0:	213c      	movs	r1, #60	@ 0x3c
 80007d2:	f01d fced 	bl	801e1b0 <sniprintf>
                    cdc_debug_print(warning_msg);
 80007d6:	1d3b      	adds	r3, r7, #4
 80007d8:	4618      	mov	r0, r3
 80007da:	f7ff ff7d 	bl	80006d8 <cdc_debug_print>
                    target_angles[i] = 1000;
 80007de:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80007e2:	005b      	lsls	r3, r3, #1
 80007e4:	3398      	adds	r3, #152	@ 0x98
 80007e6:	443b      	add	r3, r7
 80007e8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80007ec:	f823 2c14 	strh.w	r2, [r3, #-20]
            for (int i = 0; i < 6; i++) {
 80007f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80007f4:	3301      	adds	r3, #1
 80007f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80007fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80007fe:	2b05      	cmp	r3, #5
 8000800:	ddce      	ble.n	80007a0 <process_servo_commands+0x88>
            }
            
            // 调试信息：显示所有目标角度
            char angles_msg[128];
            snprintf(angles_msg, sizeof(angles_msg), "Target angles: [%d,%d,%d,%d,%d,%d] Time:%dms", 
                    target_angles[0], target_angles[1], target_angles[2], 
 8000802:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
            snprintf(angles_msg, sizeof(angles_msg), "Target angles: [%d,%d,%d,%d,%d,%d] Time:%dms", 
 8000806:	469c      	mov	ip, r3
                    target_angles[0], target_angles[1], target_angles[2], 
 8000808:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
            snprintf(angles_msg, sizeof(angles_msg), "Target angles: [%d,%d,%d,%d,%d,%d] Time:%dms", 
 800080c:	461a      	mov	r2, r3
                    target_angles[0], target_angles[1], target_angles[2], 
 800080e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
            snprintf(angles_msg, sizeof(angles_msg), "Target angles: [%d,%d,%d,%d,%d,%d] Time:%dms", 
 8000812:	4619      	mov	r1, r3
                    target_angles[3], target_angles[4], target_angles[5], rotation_time);
 8000814:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
            snprintf(angles_msg, sizeof(angles_msg), "Target angles: [%d,%d,%d,%d,%d,%d] Time:%dms", 
 8000818:	461c      	mov	r4, r3
                    target_angles[3], target_angles[4], target_angles[5], rotation_time);
 800081a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
            snprintf(angles_msg, sizeof(angles_msg), "Target angles: [%d,%d,%d,%d,%d,%d] Time:%dms", 
 800081e:	461d      	mov	r5, r3
                    target_angles[3], target_angles[4], target_angles[5], rotation_time);
 8000820:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
            snprintf(angles_msg, sizeof(angles_msg), "Target angles: [%d,%d,%d,%d,%d,%d] Time:%dms", 
 8000824:	461e      	mov	r6, r3
 8000826:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800082a:	1d38      	adds	r0, r7, #4
 800082c:	9305      	str	r3, [sp, #20]
 800082e:	9604      	str	r6, [sp, #16]
 8000830:	9503      	str	r5, [sp, #12]
 8000832:	9402      	str	r4, [sp, #8]
 8000834:	9101      	str	r1, [sp, #4]
 8000836:	9200      	str	r2, [sp, #0]
 8000838:	4663      	mov	r3, ip
 800083a:	4a22      	ldr	r2, [pc, #136]	@ (80008c4 <process_servo_commands+0x1ac>)
 800083c:	2180      	movs	r1, #128	@ 0x80
 800083e:	f01d fcb7 	bl	801e1b0 <sniprintf>
            cdc_debug_print(angles_msg);
 8000842:	1d3b      	adds	r3, r7, #4
 8000844:	4618      	mov	r0, r3
 8000846:	f7ff ff47 	bl	80006d8 <cdc_debug_print>
            
            // 发送舵机控制命令到各个舵机 (ID 1-6)
            servo_move_all(target_angles, rotation_time);
 800084a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	@ 0x96
 800084e:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000852:	4611      	mov	r1, r2
 8000854:	4618      	mov	r0, r3
 8000856:	f000 fb69 	bl	8000f2c <servo_move_all>
            
            // 设置移动状态
            servo_moving = 1;
 800085a:	4b16      	ldr	r3, [pc, #88]	@ (80008b4 <process_servo_commands+0x19c>)
 800085c:	2201      	movs	r2, #1
 800085e:	701a      	strb	r2, [r3, #0]
            servo_move_start_time = HAL_GetTick();
 8000860:	f004 f9ec 	bl	8004c3c <HAL_GetTick>
 8000864:	4603      	mov	r3, r0
 8000866:	4a18      	ldr	r2, [pc, #96]	@ (80008c8 <process_servo_commands+0x1b0>)
 8000868:	6013      	str	r3, [r2, #0]
            
            // 状态保持为1表示正在执行任务（忙）
            // holding_regs[REG_ROTATION_TRIGGER] = 1;  // 状态已经是1，不需要改变
            last_rotation_trigger = 1;
 800086a:	4b11      	ldr	r3, [pc, #68]	@ (80008b0 <process_servo_commands+0x198>)
 800086c:	2201      	movs	r2, #1
 800086e:	601a      	str	r2, [r3, #0]
            
            cdc_debug_print("Servo rotation commands sent, status remains 1 (busy)");
 8000870:	4816      	ldr	r0, [pc, #88]	@ (80008cc <process_servo_commands+0x1b4>)
 8000872:	f7ff ff31 	bl	80006d8 <cdc_debug_print>
        if (!servo_moving) {  // 只有在舵机不在移动时才处理新命令
 8000876:	e00e      	b.n	8000896 <process_servo_commands+0x17e>
        } else {
            cdc_debug_print("Servos are busy, ignoring rotation command");
 8000878:	4815      	ldr	r0, [pc, #84]	@ (80008d0 <process_servo_commands+0x1b8>)
 800087a:	f7ff ff2d 	bl	80006d8 <cdc_debug_print>
        if (!servo_moving) {  // 只有在舵机不在移动时才处理新命令
 800087e:	e00a      	b.n	8000896 <process_servo_commands+0x17e>
        }
    } else if (holding_regs[REG_ROTATION_TRIGGER] == 1 && last_rotation_trigger == 1) {
 8000880:	4b0a      	ldr	r3, [pc, #40]	@ (80008ac <process_servo_commands+0x194>)
 8000882:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8000884:	2b01      	cmp	r3, #1
 8000886:	d106      	bne.n	8000896 <process_servo_commands+0x17e>
 8000888:	4b09      	ldr	r3, [pc, #36]	@ (80008b0 <process_servo_commands+0x198>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	2b01      	cmp	r3, #1
 800088e:	d102      	bne.n	8000896 <process_servo_commands+0x17e>
        // 如果连续写入1，给出警告（系统正忙）
        cdc_debug_print("Warning: Servo rotation command ignored - system busy (status 1)");
 8000890:	4810      	ldr	r0, [pc, #64]	@ (80008d4 <process_servo_commands+0x1bc>)
 8000892:	f7ff ff21 	bl	80006d8 <cdc_debug_print>
    }
    
    // 更新舵机状态（检查是否完成移动）
    servo_update_status();
 8000896:	f000 fc7d 	bl	8001194 <servo_update_status>
    
    // 更新上次状态
    last_rotation_trigger = holding_regs[REG_ROTATION_TRIGGER];
 800089a:	4b04      	ldr	r3, [pc, #16]	@ (80008ac <process_servo_commands+0x194>)
 800089c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800089e:	461a      	mov	r2, r3
 80008a0:	4b03      	ldr	r3, [pc, #12]	@ (80008b0 <process_servo_commands+0x198>)
 80008a2:	601a      	str	r2, [r3, #0]
}
 80008a4:	bf00      	nop
 80008a6:	379c      	adds	r7, #156	@ 0x9c
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008ac:	200006c0 	.word	0x200006c0
 80008b0:	2000018c 	.word	0x2000018c
 80008b4:	20000234 	.word	0x20000234
 80008b8:	0801f4ac 	.word	0x0801f4ac
 80008bc:	0801f4d8 	.word	0x0801f4d8
 80008c0:	0801f4fc 	.word	0x0801f4fc
 80008c4:	0801f524 	.word	0x0801f524
 80008c8:	20000238 	.word	0x20000238
 80008cc:	0801f554 	.word	0x0801f554
 80008d0:	0801f58c 	.word	0x0801f58c
 80008d4:	0801f5b8 	.word	0x0801f5b8

080008d8 <process_weight_commands>:

/**
  * @brief  处理称重相关命令
  * @retval None
  */
static void process_weight_commands(void) {
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
    // 检查称重控制位 (40040)
    if (holding_regs[REG_WEIGHT_CONTROL] == 1 && last_weight_control != 1) {
 80008dc:	4b0b      	ldr	r3, [pc, #44]	@ (800090c <process_weight_commands+0x34>)
 80008de:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80008e0:	2b01      	cmp	r3, #1
 80008e2:	d10c      	bne.n	80008fe <process_weight_commands+0x26>
 80008e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000910 <process_weight_commands+0x38>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	d008      	beq.n	80008fe <process_weight_commands+0x26>
        cdc_debug_print("Weight measurement started");
 80008ec:	4809      	ldr	r0, [pc, #36]	@ (8000914 <process_weight_commands+0x3c>)
 80008ee:	f7ff fef3 	bl	80006d8 <cdc_debug_print>
        
        // 置为忙状态
        holding_regs[REG_WEIGHT_CONTROL] = 2;
 80008f2:	4b06      	ldr	r3, [pc, #24]	@ (800090c <process_weight_commands+0x34>)
 80008f4:	2202      	movs	r2, #2
 80008f6:	865a      	strh	r2, [r3, #50]	@ 0x32
        
        // 4. 称重完成，置状态为3
        holding_regs[REG_WEIGHT_CONTROL] = 3;
        */
        
        cdc_debug_print("Weight measurement in progress");
 80008f8:	4807      	ldr	r0, [pc, #28]	@ (8000918 <process_weight_commands+0x40>)
 80008fa:	f7ff feed 	bl	80006d8 <cdc_debug_print>
    }
    
    // 更新上次状态
    last_weight_control = holding_regs[REG_WEIGHT_CONTROL];
 80008fe:	4b03      	ldr	r3, [pc, #12]	@ (800090c <process_weight_commands+0x34>)
 8000900:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8000902:	461a      	mov	r2, r3
 8000904:	4b02      	ldr	r3, [pc, #8]	@ (8000910 <process_weight_commands+0x38>)
 8000906:	601a      	str	r2, [r3, #0]
}
 8000908:	bf00      	nop
 800090a:	bd80      	pop	{r7, pc}
 800090c:	200006c0 	.word	0x200006c0
 8000910:	20000190 	.word	0x20000190
 8000914:	0801f5fc 	.word	0x0801f5fc
 8000918:	0801f618 	.word	0x0801f618

0800091c <process_pump_commands>:

/**
  * @brief  处理泵相关命令
  * @retval None
  */
static void process_pump_commands(void) {
 800091c:	b580      	push	{r7, lr}
 800091e:	b098      	sub	sp, #96	@ 0x60
 8000920:	af02      	add	r7, sp, #8
    // 处理泵1命令
    // 检查泵1初始化触发 (40026) - 只有当错误码为0且不忙时才允许
    if (holding_regs[REG_PUMP1_INIT_TRIGGER] == 1 && 
 8000922:	4b98      	ldr	r3, [pc, #608]	@ (8000b84 <process_pump_commands+0x268>)
 8000924:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8000926:	2b01      	cmp	r3, #1
 8000928:	d118      	bne.n	800095c <process_pump_commands+0x40>
        holding_regs[REG_PUMP1_STATUS] == 0 && pump1_busy == 0) {  // 错误码为0且不忙
 800092a:	4b96      	ldr	r3, [pc, #600]	@ (8000b84 <process_pump_commands+0x268>)
 800092c:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
    if (holding_regs[REG_PUMP1_INIT_TRIGGER] == 1 && 
 800092e:	2b00      	cmp	r3, #0
 8000930:	d114      	bne.n	800095c <process_pump_commands+0x40>
        holding_regs[REG_PUMP1_STATUS] == 0 && pump1_busy == 0) {  // 错误码为0且不忙
 8000932:	4b95      	ldr	r3, [pc, #596]	@ (8000b88 <process_pump_commands+0x26c>)
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d110      	bne.n	800095c <process_pump_commands+0x40>
        // cdc_debug_print("Pump1 initialization triggered (idle & no error)");
        
        // 发送泵1初始化命令
        if (pump_init_device(1) == 0) {
 800093a:	2001      	movs	r0, #1
 800093c:	f000 f986 	bl	8000c4c <pump_init_device>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d106      	bne.n	8000954 <process_pump_commands+0x38>
            // cdc_debug_print("Pump1 init command sent successfully");
            // 发送后立即置状态为2
            holding_regs[REG_PUMP1_INIT_TRIGGER] = 2;
 8000946:	4b8f      	ldr	r3, [pc, #572]	@ (8000b84 <process_pump_commands+0x268>)
 8000948:	2202      	movs	r2, #2
 800094a:	869a      	strh	r2, [r3, #52]	@ 0x34
            last_pump1_init_trigger = 2;
 800094c:	4b8f      	ldr	r3, [pc, #572]	@ (8000b8c <process_pump_commands+0x270>)
 800094e:	2202      	movs	r2, #2
 8000950:	601a      	str	r2, [r3, #0]
        if (pump_init_device(1) == 0) {
 8000952:	e01e      	b.n	8000992 <process_pump_commands+0x76>
        } else {
            // cdc_debug_print("Pump1 init command failed");
            // 发送失败也置状态为2
            holding_regs[REG_PUMP1_INIT_TRIGGER] = 2;
 8000954:	4b8b      	ldr	r3, [pc, #556]	@ (8000b84 <process_pump_commands+0x268>)
 8000956:	2202      	movs	r2, #2
 8000958:	869a      	strh	r2, [r3, #52]	@ 0x34
        if (pump_init_device(1) == 0) {
 800095a:	e01a      	b.n	8000992 <process_pump_commands+0x76>
        }
    } else if (holding_regs[REG_PUMP1_INIT_TRIGGER] == 1 && 
 800095c:	4b89      	ldr	r3, [pc, #548]	@ (8000b84 <process_pump_commands+0x268>)
 800095e:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8000960:	2b01      	cmp	r3, #1
 8000962:	d116      	bne.n	8000992 <process_pump_commands+0x76>
               (holding_regs[REG_PUMP1_STATUS] != 0 || pump1_busy == 1)) {
 8000964:	4b87      	ldr	r3, [pc, #540]	@ (8000b84 <process_pump_commands+0x268>)
 8000966:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
    } else if (holding_regs[REG_PUMP1_INIT_TRIGGER] == 1 && 
 8000968:	2b00      	cmp	r3, #0
 800096a:	d103      	bne.n	8000974 <process_pump_commands+0x58>
               (holding_regs[REG_PUMP1_STATUS] != 0 || pump1_busy == 1)) {
 800096c:	4b86      	ldr	r3, [pc, #536]	@ (8000b88 <process_pump_commands+0x26c>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	2b01      	cmp	r3, #1
 8000972:	d10e      	bne.n	8000992 <process_pump_commands+0x76>
        char reject_msg[80];
        snprintf(reject_msg, sizeof(reject_msg), "Pump1 init rejected: error=%d, busy=%d", 
                holding_regs[REG_PUMP1_STATUS], pump1_busy);
 8000974:	4b83      	ldr	r3, [pc, #524]	@ (8000b84 <process_pump_commands+0x268>)
 8000976:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
        snprintf(reject_msg, sizeof(reject_msg), "Pump1 init rejected: error=%d, busy=%d", 
 8000978:	461a      	mov	r2, r3
 800097a:	4b83      	ldr	r3, [pc, #524]	@ (8000b88 <process_pump_commands+0x26c>)
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	1d38      	adds	r0, r7, #4
 8000980:	9300      	str	r3, [sp, #0]
 8000982:	4613      	mov	r3, r2
 8000984:	4a82      	ldr	r2, [pc, #520]	@ (8000b90 <process_pump_commands+0x274>)
 8000986:	2150      	movs	r1, #80	@ 0x50
 8000988:	f01d fc12 	bl	801e1b0 <sniprintf>
        // cdc_debug_print(reject_msg);
        // 立即置初始化位为2，表示无法执行
        holding_regs[REG_PUMP1_INIT_TRIGGER] = 2;
 800098c:	4b7d      	ldr	r3, [pc, #500]	@ (8000b84 <process_pump_commands+0x268>)
 800098e:	2202      	movs	r2, #2
 8000990:	869a      	strh	r2, [r3, #52]	@ 0x34
    }
    
    // 检查泵1控制触发 (40028) - 只有当错误码为0且不忙时才允许
    if (holding_regs[REG_PUMP1_CONTROL_TRIGGER] == 1 && 
 8000992:	4b7c      	ldr	r3, [pc, #496]	@ (8000b84 <process_pump_commands+0x268>)
 8000994:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8000996:	2b01      	cmp	r3, #1
 8000998:	d135      	bne.n	8000a06 <process_pump_commands+0xea>
        holding_regs[REG_PUMP1_STATUS] == 0 && pump1_busy == 0) {  // 错误码为0且不忙
 800099a:	4b7a      	ldr	r3, [pc, #488]	@ (8000b84 <process_pump_commands+0x268>)
 800099c:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
    if (holding_regs[REG_PUMP1_CONTROL_TRIGGER] == 1 && 
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d131      	bne.n	8000a06 <process_pump_commands+0xea>
        holding_regs[REG_PUMP1_STATUS] == 0 && pump1_busy == 0) {  // 错误码为0且不忙
 80009a2:	4b79      	ldr	r3, [pc, #484]	@ (8000b88 <process_pump_commands+0x26c>)
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d12d      	bne.n	8000a06 <process_pump_commands+0xea>
        // cdc_debug_print("Pump1 control triggered (idle & no error)");
        
        // 获取目标位置 (40027)
        uint16_t target_position = holding_regs[REG_PUMP1_ABS_POSITION];
 80009aa:	4b76      	ldr	r3, [pc, #472]	@ (8000b84 <process_pump_commands+0x268>)
 80009ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80009ae:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
        
        // 验证目标位置范围 (0-6000)
        if (target_position <= 6000) {
 80009b2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80009b6:	f241 7270 	movw	r2, #6000	@ 0x1770
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d81f      	bhi.n	80009fe <process_pump_commands+0xe2>
            // 发送泵1移动命令
            if (pump_move_absolute_device(1, target_position) == 0) {
 80009be:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80009c2:	4619      	mov	r1, r3
 80009c4:	2001      	movs	r0, #1
 80009c6:	f000 f94f 	bl	8000c68 <pump_move_absolute_device>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d112      	bne.n	80009f6 <process_pump_commands+0xda>
                pump1_move_start_time = HAL_GetTick();  // 记录开始时间
 80009d0:	f004 f934 	bl	8004c3c <HAL_GetTick>
 80009d4:	4603      	mov	r3, r0
 80009d6:	4a6f      	ldr	r2, [pc, #444]	@ (8000b94 <process_pump_commands+0x278>)
 80009d8:	6013      	str	r3, [r2, #0]
                // cdc_debug_print("Pump1 move command sent successfully");
                
                // 调试信息：显示目标位置
                char pos_msg[50];
                snprintf(pos_msg, sizeof(pos_msg), "Pump1 moving to position: %d", target_position);
 80009da:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80009de:	1d38      	adds	r0, r7, #4
 80009e0:	4a6d      	ldr	r2, [pc, #436]	@ (8000b98 <process_pump_commands+0x27c>)
 80009e2:	2132      	movs	r1, #50	@ 0x32
 80009e4:	f01d fbe4 	bl	801e1b0 <sniprintf>
                // cdc_debug_print(pos_msg);
                
                // 发送后立即置状态为2
                holding_regs[REG_PUMP1_CONTROL_TRIGGER] = 2;
 80009e8:	4b66      	ldr	r3, [pc, #408]	@ (8000b84 <process_pump_commands+0x268>)
 80009ea:	2202      	movs	r2, #2
 80009ec:	871a      	strh	r2, [r3, #56]	@ 0x38
                last_pump1_control_trigger = 2;
 80009ee:	4b6b      	ldr	r3, [pc, #428]	@ (8000b9c <process_pump_commands+0x280>)
 80009f0:	2202      	movs	r2, #2
 80009f2:	601a      	str	r2, [r3, #0]
        holding_regs[REG_PUMP1_STATUS] == 0 && pump1_busy == 0) {  // 错误码为0且不忙
 80009f4:	e022      	b.n	8000a3c <process_pump_commands+0x120>
            } else {
                // cdc_debug_print("Pump1 move command failed");
                // 发送失败也置状态为2
                holding_regs[REG_PUMP1_CONTROL_TRIGGER] = 2;
 80009f6:	4b63      	ldr	r3, [pc, #396]	@ (8000b84 <process_pump_commands+0x268>)
 80009f8:	2202      	movs	r2, #2
 80009fa:	871a      	strh	r2, [r3, #56]	@ 0x38
        holding_regs[REG_PUMP1_STATUS] == 0 && pump1_busy == 0) {  // 错误码为0且不忙
 80009fc:	e01e      	b.n	8000a3c <process_pump_commands+0x120>
            }
        } else {
            // cdc_debug_print("Pump1 target position out of range (0-6000)");
            // 参数错误也置状态为2
            holding_regs[REG_PUMP1_CONTROL_TRIGGER] = 2;
 80009fe:	4b61      	ldr	r3, [pc, #388]	@ (8000b84 <process_pump_commands+0x268>)
 8000a00:	2202      	movs	r2, #2
 8000a02:	871a      	strh	r2, [r3, #56]	@ 0x38
        holding_regs[REG_PUMP1_STATUS] == 0 && pump1_busy == 0) {  // 错误码为0且不忙
 8000a04:	e01a      	b.n	8000a3c <process_pump_commands+0x120>
        }
    } else if (holding_regs[REG_PUMP1_CONTROL_TRIGGER] == 1 && 
 8000a06:	4b5f      	ldr	r3, [pc, #380]	@ (8000b84 <process_pump_commands+0x268>)
 8000a08:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8000a0a:	2b01      	cmp	r3, #1
 8000a0c:	d116      	bne.n	8000a3c <process_pump_commands+0x120>
               (holding_regs[REG_PUMP1_STATUS] != 0 || pump1_busy == 1)) {
 8000a0e:	4b5d      	ldr	r3, [pc, #372]	@ (8000b84 <process_pump_commands+0x268>)
 8000a10:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
    } else if (holding_regs[REG_PUMP1_CONTROL_TRIGGER] == 1 && 
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d103      	bne.n	8000a1e <process_pump_commands+0x102>
               (holding_regs[REG_PUMP1_STATUS] != 0 || pump1_busy == 1)) {
 8000a16:	4b5c      	ldr	r3, [pc, #368]	@ (8000b88 <process_pump_commands+0x26c>)
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	2b01      	cmp	r3, #1
 8000a1c:	d10e      	bne.n	8000a3c <process_pump_commands+0x120>
        char reject_msg[80];
        snprintf(reject_msg, sizeof(reject_msg), "Pump1 control rejected: error=%d, busy=%d", 
                holding_regs[REG_PUMP1_STATUS], pump1_busy);
 8000a1e:	4b59      	ldr	r3, [pc, #356]	@ (8000b84 <process_pump_commands+0x268>)
 8000a20:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
        snprintf(reject_msg, sizeof(reject_msg), "Pump1 control rejected: error=%d, busy=%d", 
 8000a22:	461a      	mov	r2, r3
 8000a24:	4b58      	ldr	r3, [pc, #352]	@ (8000b88 <process_pump_commands+0x26c>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	1d38      	adds	r0, r7, #4
 8000a2a:	9300      	str	r3, [sp, #0]
 8000a2c:	4613      	mov	r3, r2
 8000a2e:	4a5c      	ldr	r2, [pc, #368]	@ (8000ba0 <process_pump_commands+0x284>)
 8000a30:	2150      	movs	r1, #80	@ 0x50
 8000a32:	f01d fbbd 	bl	801e1b0 <sniprintf>
        // cdc_debug_print(reject_msg);
        // 立即置控制位为2，表示无法执行
        holding_regs[REG_PUMP1_CONTROL_TRIGGER] = 2;
 8000a36:	4b53      	ldr	r3, [pc, #332]	@ (8000b84 <process_pump_commands+0x268>)
 8000a38:	2202      	movs	r2, #2
 8000a3a:	871a      	strh	r2, [r3, #56]	@ 0x38
    }
    
    // 处理泵2命令 (类似泵1)
    // 检查泵2初始化触发 (40031) - 只有当错误码为0且不忙时才允许
    if (holding_regs[REG_PUMP2_INIT_TRIGGER] == 1 && 
 8000a3c:	4b51      	ldr	r3, [pc, #324]	@ (8000b84 <process_pump_commands+0x268>)
 8000a3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d119      	bne.n	8000a78 <process_pump_commands+0x15c>
        holding_regs[REG_PUMP2_STATUS] == 0 && pump2_busy == 0) {  // 错误码为0且不忙
 8000a44:	4b4f      	ldr	r3, [pc, #316]	@ (8000b84 <process_pump_commands+0x268>)
 8000a46:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
    if (holding_regs[REG_PUMP2_INIT_TRIGGER] == 1 && 
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d114      	bne.n	8000a78 <process_pump_commands+0x15c>
        holding_regs[REG_PUMP2_STATUS] == 0 && pump2_busy == 0) {  // 错误码为0且不忙
 8000a4e:	4b55      	ldr	r3, [pc, #340]	@ (8000ba4 <process_pump_commands+0x288>)
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d110      	bne.n	8000a78 <process_pump_commands+0x15c>
        // cdc_debug_print("Pump2 initialization triggered (idle & no error)");
        
        // 发送泵2初始化命令
        if (pump_init_device(2) == 0) {
 8000a56:	2002      	movs	r0, #2
 8000a58:	f000 f8f8 	bl	8000c4c <pump_init_device>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d106      	bne.n	8000a70 <process_pump_commands+0x154>
            // cdc_debug_print("Pump2 init command sent successfully");
            // 发送后立即置状态为2
            holding_regs[REG_PUMP2_INIT_TRIGGER] = 2;
 8000a62:	4b48      	ldr	r3, [pc, #288]	@ (8000b84 <process_pump_commands+0x268>)
 8000a64:	2202      	movs	r2, #2
 8000a66:	87da      	strh	r2, [r3, #62]	@ 0x3e
            last_pump2_init_trigger = 2;
 8000a68:	4b4f      	ldr	r3, [pc, #316]	@ (8000ba8 <process_pump_commands+0x28c>)
 8000a6a:	2202      	movs	r2, #2
 8000a6c:	601a      	str	r2, [r3, #0]
        if (pump_init_device(2) == 0) {
 8000a6e:	e020      	b.n	8000ab2 <process_pump_commands+0x196>
        } else {
            // cdc_debug_print("Pump2 init command failed");
            // 发送失败也置状态为2
            holding_regs[REG_PUMP2_INIT_TRIGGER] = 2;
 8000a70:	4b44      	ldr	r3, [pc, #272]	@ (8000b84 <process_pump_commands+0x268>)
 8000a72:	2202      	movs	r2, #2
 8000a74:	87da      	strh	r2, [r3, #62]	@ 0x3e
        if (pump_init_device(2) == 0) {
 8000a76:	e01c      	b.n	8000ab2 <process_pump_commands+0x196>
        }
    } else if (holding_regs[REG_PUMP2_INIT_TRIGGER] == 1 && 
 8000a78:	4b42      	ldr	r3, [pc, #264]	@ (8000b84 <process_pump_commands+0x268>)
 8000a7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d118      	bne.n	8000ab2 <process_pump_commands+0x196>
               (holding_regs[REG_PUMP2_STATUS] != 0 || pump2_busy == 1)) {
 8000a80:	4b40      	ldr	r3, [pc, #256]	@ (8000b84 <process_pump_commands+0x268>)
 8000a82:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
    } else if (holding_regs[REG_PUMP2_INIT_TRIGGER] == 1 && 
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d103      	bne.n	8000a92 <process_pump_commands+0x176>
               (holding_regs[REG_PUMP2_STATUS] != 0 || pump2_busy == 1)) {
 8000a8a:	4b46      	ldr	r3, [pc, #280]	@ (8000ba4 <process_pump_commands+0x288>)
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d10f      	bne.n	8000ab2 <process_pump_commands+0x196>
        char reject_msg[80];
        snprintf(reject_msg, sizeof(reject_msg), "Pump2 init rejected: error=%d, busy=%d", 
                holding_regs[REG_PUMP2_STATUS], pump2_busy);
 8000a92:	4b3c      	ldr	r3, [pc, #240]	@ (8000b84 <process_pump_commands+0x268>)
 8000a94:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
        snprintf(reject_msg, sizeof(reject_msg), "Pump2 init rejected: error=%d, busy=%d", 
 8000a98:	461a      	mov	r2, r3
 8000a9a:	4b42      	ldr	r3, [pc, #264]	@ (8000ba4 <process_pump_commands+0x288>)
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	1d38      	adds	r0, r7, #4
 8000aa0:	9300      	str	r3, [sp, #0]
 8000aa2:	4613      	mov	r3, r2
 8000aa4:	4a41      	ldr	r2, [pc, #260]	@ (8000bac <process_pump_commands+0x290>)
 8000aa6:	2150      	movs	r1, #80	@ 0x50
 8000aa8:	f01d fb82 	bl	801e1b0 <sniprintf>
        // cdc_debug_print(reject_msg);
        // 立即置初始化位为2，表示无法执行
        holding_regs[REG_PUMP2_INIT_TRIGGER] = 2;
 8000aac:	4b35      	ldr	r3, [pc, #212]	@ (8000b84 <process_pump_commands+0x268>)
 8000aae:	2202      	movs	r2, #2
 8000ab0:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    
    // 检查泵2控制触发 (40033) - 只有当错误码为0且不忙时才允许
    if (holding_regs[REG_PUMP2_CONTROL_TRIGGER] == 1 && 
 8000ab2:	4b34      	ldr	r3, [pc, #208]	@ (8000b84 <process_pump_commands+0x268>)
 8000ab4:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8000ab8:	2b01      	cmp	r3, #1
 8000aba:	d13a      	bne.n	8000b32 <process_pump_commands+0x216>
        holding_regs[REG_PUMP2_STATUS] == 0 && pump2_busy == 0) {  // 错误码为0且不忙
 8000abc:	4b31      	ldr	r3, [pc, #196]	@ (8000b84 <process_pump_commands+0x268>)
 8000abe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
    if (holding_regs[REG_PUMP2_CONTROL_TRIGGER] == 1 && 
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d135      	bne.n	8000b32 <process_pump_commands+0x216>
        holding_regs[REG_PUMP2_STATUS] == 0 && pump2_busy == 0) {  // 错误码为0且不忙
 8000ac6:	4b37      	ldr	r3, [pc, #220]	@ (8000ba4 <process_pump_commands+0x288>)
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d131      	bne.n	8000b32 <process_pump_commands+0x216>
            // cdc_debug_print("Pump2 control triggered (idle & no error)");
            
            // 获取目标位置 (40032)
            uint16_t target_position = holding_regs[REG_PUMP2_ABS_POSITION];
 8000ace:	4b2d      	ldr	r3, [pc, #180]	@ (8000b84 <process_pump_commands+0x268>)
 8000ad0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000ad4:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
            
            // 验证目标位置范围 (0-6000)
            if (target_position <= 6000) {
 8000ad8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8000adc:	f241 7270 	movw	r2, #6000	@ 0x1770
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d821      	bhi.n	8000b28 <process_pump_commands+0x20c>
                // 发送泵2移动命令
                if (pump_move_absolute_device(2, target_position) == 0) {
 8000ae4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8000ae8:	4619      	mov	r1, r3
 8000aea:	2002      	movs	r0, #2
 8000aec:	f000 f8bc 	bl	8000c68 <pump_move_absolute_device>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d113      	bne.n	8000b1e <process_pump_commands+0x202>
                    pump2_move_start_time = HAL_GetTick();  // 记录开始时间
 8000af6:	f004 f8a1 	bl	8004c3c <HAL_GetTick>
 8000afa:	4603      	mov	r3, r0
 8000afc:	4a2c      	ldr	r2, [pc, #176]	@ (8000bb0 <process_pump_commands+0x294>)
 8000afe:	6013      	str	r3, [r2, #0]
                    // cdc_debug_print("Pump2 move command sent successfully");
                    
                    // 调试信息：显示目标位置
                    char pos_msg[50];
                    snprintf(pos_msg, sizeof(pos_msg), "Pump2 moving to position: %d", target_position);
 8000b00:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8000b04:	1d38      	adds	r0, r7, #4
 8000b06:	4a2b      	ldr	r2, [pc, #172]	@ (8000bb4 <process_pump_commands+0x298>)
 8000b08:	2132      	movs	r1, #50	@ 0x32
 8000b0a:	f01d fb51 	bl	801e1b0 <sniprintf>
                    // cdc_debug_print(pos_msg);
                    
                    // 发送后立即置状态为2
                    holding_regs[REG_PUMP2_CONTROL_TRIGGER] = 2;
 8000b0e:	4b1d      	ldr	r3, [pc, #116]	@ (8000b84 <process_pump_commands+0x268>)
 8000b10:	2202      	movs	r2, #2
 8000b12:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
                    last_pump2_control_trigger = 2;
 8000b16:	4b28      	ldr	r3, [pc, #160]	@ (8000bb8 <process_pump_commands+0x29c>)
 8000b18:	2202      	movs	r2, #2
 8000b1a:	601a      	str	r2, [r3, #0]
        holding_regs[REG_PUMP2_STATUS] == 0 && pump2_busy == 0) {  // 错误码为0且不忙
 8000b1c:	e028      	b.n	8000b70 <process_pump_commands+0x254>
                } else {
                    // cdc_debug_print("Pump2 move command failed");
                    // 发送失败也置状态为2
                    holding_regs[REG_PUMP2_CONTROL_TRIGGER] = 2;
 8000b1e:	4b19      	ldr	r3, [pc, #100]	@ (8000b84 <process_pump_commands+0x268>)
 8000b20:	2202      	movs	r2, #2
 8000b22:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
        holding_regs[REG_PUMP2_STATUS] == 0 && pump2_busy == 0) {  // 错误码为0且不忙
 8000b26:	e023      	b.n	8000b70 <process_pump_commands+0x254>
                }
            } else {
                // cdc_debug_print("Pump2 target position out of range (0-6000)");
                // 参数错误也置状态为2
                holding_regs[REG_PUMP2_CONTROL_TRIGGER] = 2;
 8000b28:	4b16      	ldr	r3, [pc, #88]	@ (8000b84 <process_pump_commands+0x268>)
 8000b2a:	2202      	movs	r2, #2
 8000b2c:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
        holding_regs[REG_PUMP2_STATUS] == 0 && pump2_busy == 0) {  // 错误码为0且不忙
 8000b30:	e01e      	b.n	8000b70 <process_pump_commands+0x254>
            }
    } else if (holding_regs[REG_PUMP2_CONTROL_TRIGGER] == 1 && 
 8000b32:	4b14      	ldr	r3, [pc, #80]	@ (8000b84 <process_pump_commands+0x268>)
 8000b34:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8000b38:	2b01      	cmp	r3, #1
 8000b3a:	d119      	bne.n	8000b70 <process_pump_commands+0x254>
               (holding_regs[REG_PUMP2_STATUS] != 0 || pump2_busy == 1)) {
 8000b3c:	4b11      	ldr	r3, [pc, #68]	@ (8000b84 <process_pump_commands+0x268>)
 8000b3e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
    } else if (holding_regs[REG_PUMP2_CONTROL_TRIGGER] == 1 && 
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d103      	bne.n	8000b4e <process_pump_commands+0x232>
               (holding_regs[REG_PUMP2_STATUS] != 0 || pump2_busy == 1)) {
 8000b46:	4b17      	ldr	r3, [pc, #92]	@ (8000ba4 <process_pump_commands+0x288>)
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	2b01      	cmp	r3, #1
 8000b4c:	d110      	bne.n	8000b70 <process_pump_commands+0x254>
        char reject_msg[80];
        snprintf(reject_msg, sizeof(reject_msg), "Pump2 control rejected: error=%d, busy=%d", 
                holding_regs[REG_PUMP2_STATUS], pump2_busy);
 8000b4e:	4b0d      	ldr	r3, [pc, #52]	@ (8000b84 <process_pump_commands+0x268>)
 8000b50:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
        snprintf(reject_msg, sizeof(reject_msg), "Pump2 control rejected: error=%d, busy=%d", 
 8000b54:	461a      	mov	r2, r3
 8000b56:	4b13      	ldr	r3, [pc, #76]	@ (8000ba4 <process_pump_commands+0x288>)
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	1d38      	adds	r0, r7, #4
 8000b5c:	9300      	str	r3, [sp, #0]
 8000b5e:	4613      	mov	r3, r2
 8000b60:	4a16      	ldr	r2, [pc, #88]	@ (8000bbc <process_pump_commands+0x2a0>)
 8000b62:	2150      	movs	r1, #80	@ 0x50
 8000b64:	f01d fb24 	bl	801e1b0 <sniprintf>
        // cdc_debug_print(reject_msg);
        // 立即置控制位为2，表示无法执行
        holding_regs[REG_PUMP2_CONTROL_TRIGGER] = 2;
 8000b68:	4b06      	ldr	r3, [pc, #24]	@ (8000b84 <process_pump_commands+0x268>)
 8000b6a:	2202      	movs	r2, #2
 8000b6c:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
    }
    
    // 更新泵状态（检查是否完成移动）
    pump_update_status(1);  // 更新泵1状态
 8000b70:	2001      	movs	r0, #1
 8000b72:	f000 f88d 	bl	8000c90 <pump_update_status>
    pump_update_status(2);  // 更新泵2状态
 8000b76:	2002      	movs	r0, #2
 8000b78:	f000 f88a 	bl	8000c90 <pump_update_status>
}
 8000b7c:	bf00      	nop
 8000b7e:	3758      	adds	r7, #88	@ 0x58
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	200006c0 	.word	0x200006c0
 8000b88:	20000224 	.word	0x20000224
 8000b8c:	20000194 	.word	0x20000194
 8000b90:	0801f638 	.word	0x0801f638
 8000b94:	2000022c 	.word	0x2000022c
 8000b98:	0801f660 	.word	0x0801f660
 8000b9c:	20000198 	.word	0x20000198
 8000ba0:	0801f680 	.word	0x0801f680
 8000ba4:	20000225 	.word	0x20000225
 8000ba8:	2000019c 	.word	0x2000019c
 8000bac:	0801f6ac 	.word	0x0801f6ac
 8000bb0:	20000230 	.word	0x20000230
 8000bb4:	0801f6d4 	.word	0x0801f6d4
 8000bb8:	200001a0 	.word	0x200001a0
 8000bbc:	0801f6f4 	.word	0x0801f6f4

08000bc0 <update_sensor_data>:

/**
  * @brief  更新传感器数据 (只读寄存器)
  * @retval None
  */
static void update_sensor_data(void) {
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
    // TODO: 在这里添加传感器数据更新业务代码
    
    // 示例1：更新舵机当前角度 (40017-40022，每个角度占用1个寄存器)
    // 注意：舵机位置已在servo_update_status中更新，这里做周期性验证
    static uint32_t servo_read_counter = 0;
    if (servo_read_counter % 10 == 0 && !servo_moving) {  // 每1秒更新一次，且不在移动时
 8000bc4:	4b1b      	ldr	r3, [pc, #108]	@ (8000c34 <update_sensor_data+0x74>)
 8000bc6:	6819      	ldr	r1, [r3, #0]
 8000bc8:	4b1b      	ldr	r3, [pc, #108]	@ (8000c38 <update_sensor_data+0x78>)
 8000bca:	fba3 2301 	umull	r2, r3, r3, r1
 8000bce:	08da      	lsrs	r2, r3, #3
 8000bd0:	4613      	mov	r3, r2
 8000bd2:	009b      	lsls	r3, r3, #2
 8000bd4:	4413      	add	r3, r2
 8000bd6:	005b      	lsls	r3, r3, #1
 8000bd8:	1aca      	subs	r2, r1, r3
 8000bda:	2a00      	cmp	r2, #0
 8000bdc:	d11d      	bne.n	8000c1a <update_sensor_data+0x5a>
 8000bde:	4b17      	ldr	r3, [pc, #92]	@ (8000c3c <update_sensor_data+0x7c>)
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d119      	bne.n	8000c1a <update_sensor_data+0x5a>
        // 周期性读取舵机位置进行验证
        servo_read_all_positions();
 8000be6:	f000 f9e9 	bl	8000fbc <servo_read_all_positions>
        // 更新当前角度寄存器 (40017-40022)
        holding_regs[REG_CURRENT_ANGLE1] = servo_current_positions[0];
 8000bea:	4b15      	ldr	r3, [pc, #84]	@ (8000c40 <update_sensor_data+0x80>)
 8000bec:	881a      	ldrh	r2, [r3, #0]
 8000bee:	4b15      	ldr	r3, [pc, #84]	@ (8000c44 <update_sensor_data+0x84>)
 8000bf0:	845a      	strh	r2, [r3, #34]	@ 0x22
        holding_regs[REG_CURRENT_ANGLE2] = servo_current_positions[1];
 8000bf2:	4b13      	ldr	r3, [pc, #76]	@ (8000c40 <update_sensor_data+0x80>)
 8000bf4:	885a      	ldrh	r2, [r3, #2]
 8000bf6:	4b13      	ldr	r3, [pc, #76]	@ (8000c44 <update_sensor_data+0x84>)
 8000bf8:	849a      	strh	r2, [r3, #36]	@ 0x24
        holding_regs[REG_CURRENT_ANGLE3] = servo_current_positions[2];
 8000bfa:	4b11      	ldr	r3, [pc, #68]	@ (8000c40 <update_sensor_data+0x80>)
 8000bfc:	889a      	ldrh	r2, [r3, #4]
 8000bfe:	4b11      	ldr	r3, [pc, #68]	@ (8000c44 <update_sensor_data+0x84>)
 8000c00:	84da      	strh	r2, [r3, #38]	@ 0x26
        holding_regs[REG_CURRENT_ANGLE4] = servo_current_positions[3];
 8000c02:	4b0f      	ldr	r3, [pc, #60]	@ (8000c40 <update_sensor_data+0x80>)
 8000c04:	88da      	ldrh	r2, [r3, #6]
 8000c06:	4b0f      	ldr	r3, [pc, #60]	@ (8000c44 <update_sensor_data+0x84>)
 8000c08:	851a      	strh	r2, [r3, #40]	@ 0x28
        holding_regs[REG_CURRENT_ANGLE5] = servo_current_positions[4];
 8000c0a:	4b0d      	ldr	r3, [pc, #52]	@ (8000c40 <update_sensor_data+0x80>)
 8000c0c:	891a      	ldrh	r2, [r3, #8]
 8000c0e:	4b0d      	ldr	r3, [pc, #52]	@ (8000c44 <update_sensor_data+0x84>)
 8000c10:	855a      	strh	r2, [r3, #42]	@ 0x2a
        holding_regs[REG_CURRENT_ANGLE6] = servo_current_positions[5];
 8000c12:	4b0b      	ldr	r3, [pc, #44]	@ (8000c40 <update_sensor_data+0x80>)
 8000c14:	895a      	ldrh	r2, [r3, #10]
 8000c16:	4b0b      	ldr	r3, [pc, #44]	@ (8000c44 <update_sensor_data+0x84>)
 8000c18:	859a      	strh	r2, [r3, #44]	@ 0x2c
    }
    servo_read_counter++;
 8000c1a:	4b06      	ldr	r3, [pc, #24]	@ (8000c34 <update_sensor_data+0x74>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	3301      	adds	r3, #1
 8000c20:	4a04      	ldr	r2, [pc, #16]	@ (8000c34 <update_sensor_data+0x74>)
 8000c22:	6013      	str	r3, [r2, #0]
        /*
        pump_get_status_device(1);
        pump_get_status_device(2);
        */
    }
    pump_read_counter++;
 8000c24:	4b08      	ldr	r3, [pc, #32]	@ (8000c48 <update_sensor_data+0x88>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	3301      	adds	r3, #1
 8000c2a:	4a07      	ldr	r2, [pc, #28]	@ (8000c48 <update_sensor_data+0x88>)
 8000c2c:	6013      	str	r3, [r2, #0]
        uint8_t object_detected = gpio_read_object_sensor();
        holding_regs[REG_OBJECT_DETECTION] = object_detected ? 2 : 1;  // 1=无物体；2=有
    }
    detection_read_counter++;
    */
}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20000248 	.word	0x20000248
 8000c38:	cccccccd 	.word	0xcccccccd
 8000c3c:	20000234 	.word	0x20000234
 8000c40:	2000023c 	.word	0x2000023c
 8000c44:	200006c0 	.word	0x200006c0
 8000c48:	2000024c 	.word	0x2000024c

08000c4c <pump_init_device>:
/**
  * @brief  初始化指定泵
  * @param  pump_id: 泵ID (1或2)
  * @retval 0: 成功, -1: 失败
  */
static int pump_init_device(uint8_t pump_id) {
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	71fb      	strb	r3, [r7, #7]
    return pump_init(pump_id);
 8000c56:	79fb      	ldrb	r3, [r7, #7]
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f003 f989 	bl	8003f70 <pump_init>
 8000c5e:	4603      	mov	r3, r0
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <pump_move_absolute_device>:
  * @brief  泵移动到绝对位置
  * @param  pump_id: 泵ID (1或2)
  * @param  position: 目标位置 (0-6000步)
  * @retval 0: 成功, -1: 失败
  */
static int pump_move_absolute_device(uint8_t pump_id, uint16_t position) {
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4603      	mov	r3, r0
 8000c70:	460a      	mov	r2, r1
 8000c72:	71fb      	strb	r3, [r7, #7]
 8000c74:	4613      	mov	r3, r2
 8000c76:	80bb      	strh	r3, [r7, #4]
    return pump_move_absolute(pump_id, position);
 8000c78:	79fb      	ldrb	r3, [r7, #7]
 8000c7a:	88ba      	ldrh	r2, [r7, #4]
 8000c7c:	4611      	mov	r1, r2
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f003 f988 	bl	8003f94 <pump_move_absolute>
 8000c84:	4603      	mov	r3, r0
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
	...

08000c90 <pump_update_status>:
/**
  * @brief  更新泵状态 - 使用实际的DT协议查询
  * @param  pump_id: 泵ID (1或2)
  * @retval None
  */
static void pump_update_status(uint8_t pump_id) {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b0e4      	sub	sp, #400	@ 0x190
 8000c94:	af02      	add	r7, sp, #8
 8000c96:	4602      	mov	r2, r0
 8000c98:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8000c9c:	f2a3 1381 	subw	r3, r3, #385	@ 0x181
 8000ca0:	701a      	strb	r2, [r3, #0]
    static uint32_t last_update_time1 = 0;  // 泵1的时间控制
    static uint32_t last_update_time2 = 0;  // 泵2的时间控制
    uint32_t current_time = HAL_GetTick();
 8000ca2:	f003 ffcb 	bl	8004c3c <HAL_GetTick>
 8000ca6:	f8c7 0184 	str.w	r0, [r7, #388]	@ 0x184
    
    // 根据泵ID选择对应的时间控制变量
    uint32_t* last_time_ptr = (pump_id == 1) ? &last_update_time1 : &last_update_time2;
 8000caa:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8000cae:	f2a3 1381 	subw	r3, r3, #385	@ 0x181
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	d101      	bne.n	8000cbc <pump_update_status+0x2c>
 8000cb8:	4b8f      	ldr	r3, [pc, #572]	@ (8000ef8 <pump_update_status+0x268>)
 8000cba:	e000      	b.n	8000cbe <pump_update_status+0x2e>
 8000cbc:	4b8f      	ldr	r3, [pc, #572]	@ (8000efc <pump_update_status+0x26c>)
 8000cbe:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
    
    // 降低查询频率，每1秒查询一次
    if (current_time - *last_time_ptr < 1000) {
 8000cc2:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 8000ccc:	1ad3      	subs	r3, r2, r3
 8000cce:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000cd2:	f0c0 810b 	bcc.w	8000eec <pump_update_status+0x25c>
        return;
    }
    *last_time_ptr = current_time;
 8000cd6:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8000cda:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 8000cde:	601a      	str	r2, [r3, #0]
    
    char error_response[256];
    int current_position;
    
    if (pump_id == 1) {
 8000ce0:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8000ce4:	f2a3 1381 	subw	r3, r3, #385	@ 0x181
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d17a      	bne.n	8000de4 <pump_update_status+0x154>
        // 查询错误码 (/1QR)
        if (pump_query_error(1, error_response) == 0) {
 8000cee:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	2001      	movs	r0, #1
 8000cf6:	f003 f967 	bl	8003fc8 <pump_query_error>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d144      	bne.n	8000d8a <pump_update_status+0xfa>
            // 从响应中解析状态字节
            // 响应格式：FF /0`3000 03 0D 0A
            // 第3个字节（'`'字符）是状态字节的HEX值
            char* status_byte_ptr = strchr(error_response, '`');
 8000d00:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000d04:	2160      	movs	r1, #96	@ 0x60
 8000d06:	4618      	mov	r0, r3
 8000d08:	f01d fb0c 	bl	801e324 <strchr>
 8000d0c:	f8c7 0174 	str.w	r0, [r7, #372]	@ 0x174
            if (status_byte_ptr != NULL) {
 8000d10:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d03f      	beq.n	8000d98 <pump_update_status+0x108>
                // 提取状态字节
                uint8_t status_byte = (uint8_t)(*status_byte_ptr);
 8000d18:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	f887 3173 	strb.w	r3, [r7, #371]	@ 0x173
                
                // 使用枚举解析状态字节，转换为错误编号
                PumpErrorCode_t error_code = pump_parse_status_byte(status_byte);
 8000d22:	f897 3173 	ldrb.w	r3, [r7, #371]	@ 0x173
 8000d26:	4618      	mov	r0, r3
 8000d28:	f003 fa04 	bl	8004134 <pump_parse_status_byte>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	f887 3172 	strb.w	r3, [r7, #370]	@ 0x172
                PumpBusyState_t busy_state = pump_parse_busy_state(status_byte);
 8000d32:	f897 3173 	ldrb.w	r3, [r7, #371]	@ 0x173
 8000d36:	4618      	mov	r0, r3
 8000d38:	f003 fa4c 	bl	80041d4 <pump_parse_busy_state>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	f887 3171 	strb.w	r3, [r7, #369]	@ 0x171
                
                // 直接将错误码写入状态寄存器
                holding_regs[REG_PUMP1_STATUS] = (uint16_t)error_code;
 8000d42:	f897 3172 	ldrb.w	r3, [r7, #370]	@ 0x172
 8000d46:	b29a      	uxth	r2, r3
 8000d48:	4b6d      	ldr	r3, [pc, #436]	@ (8000f00 <pump_update_status+0x270>)
 8000d4a:	875a      	strh	r2, [r3, #58]	@ 0x3a
                
                // 更新内部忙状态逻辑
                pump1_busy = (busy_state == PUMP_STATE_BUSY) ? 1 : 0;
 8000d4c:	f897 3171 	ldrb.w	r3, [r7, #369]	@ 0x171
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	bf0c      	ite	eq
 8000d54:	2301      	moveq	r3, #1
 8000d56:	2300      	movne	r3, #0
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	4b69      	ldr	r3, [pc, #420]	@ (8000f04 <pump_update_status+0x274>)
 8000d5e:	701a      	strb	r2, [r3, #0]
                
                char debug_msg[100];
                snprintf(debug_msg, sizeof(debug_msg), "Pump1: byte=0x%02X, error=%d, busy=%s", 
 8000d60:	f897 1173 	ldrb.w	r1, [r7, #371]	@ 0x173
 8000d64:	f897 3172 	ldrb.w	r3, [r7, #370]	@ 0x172
 8000d68:	f897 2171 	ldrb.w	r2, [r7, #369]	@ 0x171
 8000d6c:	2a01      	cmp	r2, #1
 8000d6e:	d101      	bne.n	8000d74 <pump_update_status+0xe4>
 8000d70:	4a65      	ldr	r2, [pc, #404]	@ (8000f08 <pump_update_status+0x278>)
 8000d72:	e000      	b.n	8000d76 <pump_update_status+0xe6>
 8000d74:	4a65      	ldr	r2, [pc, #404]	@ (8000f0c <pump_update_status+0x27c>)
 8000d76:	f107 0008 	add.w	r0, r7, #8
 8000d7a:	9201      	str	r2, [sp, #4]
 8000d7c:	9300      	str	r3, [sp, #0]
 8000d7e:	460b      	mov	r3, r1
 8000d80:	4a63      	ldr	r2, [pc, #396]	@ (8000f10 <pump_update_status+0x280>)
 8000d82:	2164      	movs	r1, #100	@ 0x64
 8000d84:	f01d fa14 	bl	801e1b0 <sniprintf>
 8000d88:	e006      	b.n	8000d98 <pump_update_status+0x108>
                // cdc_debug_print(debug_msg);
            }
        } else {
            // cdc_debug_print("Pump1 query error failed");
            // 通信失败，设置为通信错误状态
            holding_regs[REG_PUMP1_STATUS] = 999;  // 999 = 通信失败
 8000d8a:	4b5d      	ldr	r3, [pc, #372]	@ (8000f00 <pump_update_status+0x270>)
 8000d8c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d90:	875a      	strh	r2, [r3, #58]	@ 0x3a
            pump1_busy = 1;  // 通信失败时认为忙碌（安全考虑）
 8000d92:	4b5c      	ldr	r3, [pc, #368]	@ (8000f04 <pump_update_status+0x274>)
 8000d94:	2201      	movs	r2, #1
 8000d96:	701a      	strb	r2, [r3, #0]
        }
        
        // 查询当前活塞位置 (/1?4R)
        if (pump_query_position(1, &current_position) == 0) {
 8000d98:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	2001      	movs	r0, #1
 8000da0:	f003 f926 	bl	8003ff0 <pump_query_position>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	f040 80a1 	bne.w	8000eee <pump_update_status+0x25e>
            pump1_current_pos = current_position;
 8000dac:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8000db0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	b29a      	uxth	r2, r3
 8000db8:	4b56      	ldr	r3, [pc, #344]	@ (8000f14 <pump_update_status+0x284>)
 8000dba:	801a      	strh	r2, [r3, #0]
            holding_regs[REG_PUMP1_CURRENT_POSITION] = current_position;
 8000dbc:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8000dc0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	b29a      	uxth	r2, r3
 8000dc8:	4b4d      	ldr	r3, [pc, #308]	@ (8000f00 <pump_update_status+0x270>)
 8000dca:	879a      	strh	r2, [r3, #60]	@ 0x3c
            
            char pos_msg[50];
            snprintf(pos_msg, sizeof(pos_msg), "Pump1 position: %d", current_position);
 8000dcc:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8000dd0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f107 0008 	add.w	r0, r7, #8
 8000dda:	4a4f      	ldr	r2, [pc, #316]	@ (8000f18 <pump_update_status+0x288>)
 8000ddc:	2132      	movs	r1, #50	@ 0x32
 8000dde:	f01d f9e7 	bl	801e1b0 <sniprintf>
 8000de2:	e084      	b.n	8000eee <pump_update_status+0x25e>
            // cdc_debug_print(pos_msg);
        } else {
            // cdc_debug_print("Pump1 position query failed");
        }
        
    } else if (pump_id == 2) {
 8000de4:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8000de8:	f2a3 1381 	subw	r3, r3, #385	@ 0x181
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	2b02      	cmp	r3, #2
 8000df0:	d17d      	bne.n	8000eee <pump_update_status+0x25e>
        // 查询错误码 (/2QR)
        if (pump_query_error(2, error_response) == 0) {
 8000df2:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000df6:	4619      	mov	r1, r3
 8000df8:	2002      	movs	r0, #2
 8000dfa:	f003 f8e5 	bl	8003fc8 <pump_query_error>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d145      	bne.n	8000e90 <pump_update_status+0x200>
            // 从响应中解析状态字节
            // 响应格式：FF /0`3000 03 0D 0A
            // 第3个字节（'`'字符）是状态字节的HEX值
            char* status_byte_ptr = strchr(error_response, '`');
 8000e04:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000e08:	2160      	movs	r1, #96	@ 0x60
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f01d fa8a 	bl	801e324 <strchr>
 8000e10:	f8c7 017c 	str.w	r0, [r7, #380]	@ 0x17c
            if (status_byte_ptr != NULL) {
 8000e14:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d041      	beq.n	8000ea0 <pump_update_status+0x210>
                // 提取状态字节
                uint8_t status_byte = (uint8_t)(*status_byte_ptr);
 8000e1c:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	f887 317b 	strb.w	r3, [r7, #379]	@ 0x17b
                
                // 使用枚举解析状态字节，转换为错误编号
                PumpErrorCode_t error_code = pump_parse_status_byte(status_byte);
 8000e26:	f897 317b 	ldrb.w	r3, [r7, #379]	@ 0x17b
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f003 f982 	bl	8004134 <pump_parse_status_byte>
 8000e30:	4603      	mov	r3, r0
 8000e32:	f887 317a 	strb.w	r3, [r7, #378]	@ 0x17a
                PumpBusyState_t busy_state = pump_parse_busy_state(status_byte);
 8000e36:	f897 317b 	ldrb.w	r3, [r7, #379]	@ 0x17b
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f003 f9ca 	bl	80041d4 <pump_parse_busy_state>
 8000e40:	4603      	mov	r3, r0
 8000e42:	f887 3179 	strb.w	r3, [r7, #377]	@ 0x179
                
                // 直接将错误码写入状态寄存器
                holding_regs[REG_PUMP2_STATUS] = (uint16_t)error_code;
 8000e46:	f897 317a 	ldrb.w	r3, [r7, #378]	@ 0x17a
 8000e4a:	b29a      	uxth	r2, r3
 8000e4c:	4b2c      	ldr	r3, [pc, #176]	@ (8000f00 <pump_update_status+0x270>)
 8000e4e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
                
                // 更新内部忙状态逻辑
                pump2_busy = (busy_state == PUMP_STATE_BUSY) ? 1 : 0;
 8000e52:	f897 3179 	ldrb.w	r3, [r7, #377]	@ 0x179
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	bf0c      	ite	eq
 8000e5a:	2301      	moveq	r3, #1
 8000e5c:	2300      	movne	r3, #0
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	461a      	mov	r2, r3
 8000e62:	4b2e      	ldr	r3, [pc, #184]	@ (8000f1c <pump_update_status+0x28c>)
 8000e64:	701a      	strb	r2, [r3, #0]
                
                char debug_msg[100];
                snprintf(debug_msg, sizeof(debug_msg), "Pump2: byte=0x%02X, error=%d, busy=%s", 
 8000e66:	f897 117b 	ldrb.w	r1, [r7, #379]	@ 0x17b
 8000e6a:	f897 317a 	ldrb.w	r3, [r7, #378]	@ 0x17a
 8000e6e:	f897 2179 	ldrb.w	r2, [r7, #377]	@ 0x179
 8000e72:	2a01      	cmp	r2, #1
 8000e74:	d101      	bne.n	8000e7a <pump_update_status+0x1ea>
 8000e76:	4a24      	ldr	r2, [pc, #144]	@ (8000f08 <pump_update_status+0x278>)
 8000e78:	e000      	b.n	8000e7c <pump_update_status+0x1ec>
 8000e7a:	4a24      	ldr	r2, [pc, #144]	@ (8000f0c <pump_update_status+0x27c>)
 8000e7c:	f107 0008 	add.w	r0, r7, #8
 8000e80:	9201      	str	r2, [sp, #4]
 8000e82:	9300      	str	r3, [sp, #0]
 8000e84:	460b      	mov	r3, r1
 8000e86:	4a26      	ldr	r2, [pc, #152]	@ (8000f20 <pump_update_status+0x290>)
 8000e88:	2164      	movs	r1, #100	@ 0x64
 8000e8a:	f01d f991 	bl	801e1b0 <sniprintf>
 8000e8e:	e007      	b.n	8000ea0 <pump_update_status+0x210>
                // cdc_debug_print(debug_msg);
            }
        } else {
            // cdc_debug_print("Pump2 UART RX timeout");
            // 通信失败，设置为通信错误状态
            holding_regs[REG_PUMP2_STATUS] = 999;  // 999 = 通信失败
 8000e90:	4b1b      	ldr	r3, [pc, #108]	@ (8000f00 <pump_update_status+0x270>)
 8000e92:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e96:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
            pump2_busy = 1;  // 通信失败时认为忙碌（安全考虑）
 8000e9a:	4b20      	ldr	r3, [pc, #128]	@ (8000f1c <pump_update_status+0x28c>)
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	701a      	strb	r2, [r3, #0]
        }
        
        // 查询当前活塞位置 (/2?4R)
        if (pump_query_position(2, &current_position) == 0) {
 8000ea0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	2002      	movs	r0, #2
 8000ea8:	f003 f8a2 	bl	8003ff0 <pump_query_position>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d11d      	bne.n	8000eee <pump_update_status+0x25e>
            pump2_current_pos = current_position;
 8000eb2:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8000eb6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	b29a      	uxth	r2, r3
 8000ebe:	4b19      	ldr	r3, [pc, #100]	@ (8000f24 <pump_update_status+0x294>)
 8000ec0:	801a      	strh	r2, [r3, #0]
            holding_regs[REG_PUMP2_CURRENT_POSITION] = current_position;
 8000ec2:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8000ec6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	b29a      	uxth	r2, r3
 8000ece:	4b0c      	ldr	r3, [pc, #48]	@ (8000f00 <pump_update_status+0x270>)
 8000ed0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
            
            char pos_msg[50];
            snprintf(pos_msg, sizeof(pos_msg), "Pump2 position: %d", current_position);
 8000ed4:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8000ed8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f107 0008 	add.w	r0, r7, #8
 8000ee2:	4a11      	ldr	r2, [pc, #68]	@ (8000f28 <pump_update_status+0x298>)
 8000ee4:	2132      	movs	r1, #50	@ 0x32
 8000ee6:	f01d f963 	bl	801e1b0 <sniprintf>
 8000eea:	e000      	b.n	8000eee <pump_update_status+0x25e>
        return;
 8000eec:	bf00      	nop
            // cdc_debug_print(pos_msg);
        } else {
            // cdc_debug_print("Pump2 position query failed");
        }
    }
}
 8000eee:	f507 77c4 	add.w	r7, r7, #392	@ 0x188
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000250 	.word	0x20000250
 8000efc:	20000254 	.word	0x20000254
 8000f00:	200006c0 	.word	0x200006c0
 8000f04:	20000224 	.word	0x20000224
 8000f08:	0801f720 	.word	0x0801f720
 8000f0c:	0801f724 	.word	0x0801f724
 8000f10:	0801f728 	.word	0x0801f728
 8000f14:	20000226 	.word	0x20000226
 8000f18:	0801f750 	.word	0x0801f750
 8000f1c:	20000225 	.word	0x20000225
 8000f20:	0801f764 	.word	0x0801f764
 8000f24:	20000228 	.word	0x20000228
 8000f28:	0801f78c 	.word	0x0801f78c

08000f2c <servo_move_all>:
  * @brief  控制所有舵机移动到目标位置
  * @param  target_angles: 6个舵机的目标角度数组
  * @param  move_time: 移动时间(ms)
  * @retval None
  */
static void servo_move_all(uint16_t* target_angles, uint32_t move_time) {
 8000f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f2e:	b0ab      	sub	sp, #172	@ 0xac
 8000f30:	af06      	add	r7, sp, #24
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	6039      	str	r1, [r7, #0]
    // 使用多舵机同时移动命令 - 更高效的方式
    uint8_t servo_ids[6] = {1, 2, 3, 4, 5, 6};
 8000f36:	4a1f      	ldr	r2, [pc, #124]	@ (8000fb4 <servo_move_all+0x88>)
 8000f38:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8000f3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f40:	6018      	str	r0, [r3, #0]
 8000f42:	3304      	adds	r3, #4
 8000f44:	8019      	strh	r1, [r3, #0]
    BusServo_MultMove(servo_ids, target_angles, 6, (uint16_t)move_time);
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	f107 0088 	add.w	r0, r7, #136	@ 0x88
 8000f4e:	2206      	movs	r2, #6
 8000f50:	6879      	ldr	r1, [r7, #4]
 8000f52:	f000 fa6f 	bl	8001434 <BusServo_MultMove>
    
    // 调试信息：显示发送的命令
    char move_msg[128];
    snprintf(move_msg, sizeof(move_msg), "MultMove sent: [%d,%d,%d,%d,%d,%d] time:%lums", 
            target_angles[0], target_angles[1], target_angles[2], 
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	881b      	ldrh	r3, [r3, #0]
    snprintf(move_msg, sizeof(move_msg), "MultMove sent: [%d,%d,%d,%d,%d,%d] time:%lums", 
 8000f5a:	469c      	mov	ip, r3
            target_angles[0], target_angles[1], target_angles[2], 
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	3302      	adds	r3, #2
 8000f60:	881b      	ldrh	r3, [r3, #0]
    snprintf(move_msg, sizeof(move_msg), "MultMove sent: [%d,%d,%d,%d,%d,%d] time:%lums", 
 8000f62:	461a      	mov	r2, r3
            target_angles[0], target_angles[1], target_angles[2], 
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	3304      	adds	r3, #4
 8000f68:	881b      	ldrh	r3, [r3, #0]
    snprintf(move_msg, sizeof(move_msg), "MultMove sent: [%d,%d,%d,%d,%d,%d] time:%lums", 
 8000f6a:	4619      	mov	r1, r3
            target_angles[3], target_angles[4], target_angles[5], move_time);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	3306      	adds	r3, #6
 8000f70:	881b      	ldrh	r3, [r3, #0]
    snprintf(move_msg, sizeof(move_msg), "MultMove sent: [%d,%d,%d,%d,%d,%d] time:%lums", 
 8000f72:	461c      	mov	r4, r3
            target_angles[3], target_angles[4], target_angles[5], move_time);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	3308      	adds	r3, #8
 8000f78:	881b      	ldrh	r3, [r3, #0]
    snprintf(move_msg, sizeof(move_msg), "MultMove sent: [%d,%d,%d,%d,%d,%d] time:%lums", 
 8000f7a:	461d      	mov	r5, r3
            target_angles[3], target_angles[4], target_angles[5], move_time);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	330a      	adds	r3, #10
 8000f80:	881b      	ldrh	r3, [r3, #0]
    snprintf(move_msg, sizeof(move_msg), "MultMove sent: [%d,%d,%d,%d,%d,%d] time:%lums", 
 8000f82:	461e      	mov	r6, r3
 8000f84:	f107 0008 	add.w	r0, r7, #8
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	9305      	str	r3, [sp, #20]
 8000f8c:	9604      	str	r6, [sp, #16]
 8000f8e:	9503      	str	r5, [sp, #12]
 8000f90:	9402      	str	r4, [sp, #8]
 8000f92:	9101      	str	r1, [sp, #4]
 8000f94:	9200      	str	r2, [sp, #0]
 8000f96:	4663      	mov	r3, ip
 8000f98:	4a07      	ldr	r2, [pc, #28]	@ (8000fb8 <servo_move_all+0x8c>)
 8000f9a:	2180      	movs	r1, #128	@ 0x80
 8000f9c:	f01d f908 	bl	801e1b0 <sniprintf>
    cdc_debug_print(move_msg);
 8000fa0:	f107 0308 	add.w	r3, r7, #8
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff fb97 	bl	80006d8 <cdc_debug_print>
        snprintf(move_msg, sizeof(move_msg), "Servo%d -> %d (time:%lums) sent", 
                servo_id, target_angles[servo_id-1], move_time);
        cdc_debug_print(move_msg);
    }
    */
}
 8000faa:	bf00      	nop
 8000fac:	3794      	adds	r7, #148	@ 0x94
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	0801f7d0 	.word	0x0801f7d0
 8000fb8:	0801f7a0 	.word	0x0801f7a0

08000fbc <servo_read_all_positions>:

/**
  * @brief  读取所有舵机的当前位置（统一发送统一接收）
  * @retval None
  */
static void servo_read_all_positions(void) {
 8000fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fbe:	b0c7      	sub	sp, #284	@ 0x11c
 8000fc0:	af06      	add	r7, sp, #24
    static uint8_t servo_ids[6] = {1, 2, 3, 4, 5, 6};
    static uint16_t positions[6];
    static uint8_t read_state = 0;  // 0=空闲, 1=已启动读取, 2=等待结果
    
    if (read_state == 0) {
 8000fc2:	4b69      	ldr	r3, [pc, #420]	@ (8001168 <servo_read_all_positions+0x1ac>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d108      	bne.n	8000fdc <servo_read_all_positions+0x20>
        // 启动非阻塞读取
        BusServo_MultPosRead(servo_ids, 6, positions);
 8000fca:	4a68      	ldr	r2, [pc, #416]	@ (800116c <servo_read_all_positions+0x1b0>)
 8000fcc:	2106      	movs	r1, #6
 8000fce:	4868      	ldr	r0, [pc, #416]	@ (8001170 <servo_read_all_positions+0x1b4>)
 8000fd0:	f000 fae2 	bl	8001598 <BusServo_MultPosRead>
        read_state = 1;
 8000fd4:	4b64      	ldr	r3, [pc, #400]	@ (8001168 <servo_read_all_positions+0x1ac>)
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	701a      	strb	r2, [r3, #0]
            case 3:  // 正在接收中
                // 继续等待，不做任何操作
                break;
        }
    }
}
 8000fda:	e0bf      	b.n	800115c <servo_read_all_positions+0x1a0>
        uint8_t status = BusServo_CheckReadStatus();
 8000fdc:	f000 fbb4 	bl	8001748 <BusServo_CheckReadStatus>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	f887 30fb 	strb.w	r3, [r7, #251]	@ 0xfb
        switch(status) {
 8000fe6:	f897 30fb 	ldrb.w	r3, [r7, #251]	@ 0xfb
 8000fea:	2b03      	cmp	r3, #3
 8000fec:	f200 80b6 	bhi.w	800115c <servo_read_all_positions+0x1a0>
 8000ff0:	a201      	add	r2, pc, #4	@ (adr r2, 8000ff8 <servo_read_all_positions+0x3c>)
 8000ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ff6:	bf00      	nop
 8000ff8:	08001009 	.word	0x08001009
 8000ffc:	08001017 	.word	0x08001017
 8001000:	0800114d 	.word	0x0800114d
 8001004:	0800115b 	.word	0x0800115b
                cdc_debug_print("Servo: Unexpected idle state");
 8001008:	485a      	ldr	r0, [pc, #360]	@ (8001174 <servo_read_all_positions+0x1b8>)
 800100a:	f7ff fb65 	bl	80006d8 <cdc_debug_print>
                read_state = 0;
 800100e:	4b56      	ldr	r3, [pc, #344]	@ (8001168 <servo_read_all_positions+0x1ac>)
 8001010:	2200      	movs	r2, #0
 8001012:	701a      	strb	r2, [r3, #0]
                break;
 8001014:	e0a2      	b.n	800115c <servo_read_all_positions+0x1a0>
                cdc_debug_print("Servo positions read with DMA success");
 8001016:	4858      	ldr	r0, [pc, #352]	@ (8001178 <servo_read_all_positions+0x1bc>)
 8001018:	f7ff fb5e 	bl	80006d8 <cdc_debug_print>
                        positions[0], positions[1], positions[2], positions[3], positions[4], positions[5]);
 800101c:	4b53      	ldr	r3, [pc, #332]	@ (800116c <servo_read_all_positions+0x1b0>)
 800101e:	881b      	ldrh	r3, [r3, #0]
                snprintf(pos_debug, sizeof(pos_debug), "Raw read result: [%d,%d,%d,%d,%d,%d]", 
 8001020:	461e      	mov	r6, r3
                        positions[0], positions[1], positions[2], positions[3], positions[4], positions[5]);
 8001022:	4b52      	ldr	r3, [pc, #328]	@ (800116c <servo_read_all_positions+0x1b0>)
 8001024:	885b      	ldrh	r3, [r3, #2]
                snprintf(pos_debug, sizeof(pos_debug), "Raw read result: [%d,%d,%d,%d,%d,%d]", 
 8001026:	461a      	mov	r2, r3
                        positions[0], positions[1], positions[2], positions[3], positions[4], positions[5]);
 8001028:	4b50      	ldr	r3, [pc, #320]	@ (800116c <servo_read_all_positions+0x1b0>)
 800102a:	889b      	ldrh	r3, [r3, #4]
                snprintf(pos_debug, sizeof(pos_debug), "Raw read result: [%d,%d,%d,%d,%d,%d]", 
 800102c:	4619      	mov	r1, r3
                        positions[0], positions[1], positions[2], positions[3], positions[4], positions[5]);
 800102e:	4b4f      	ldr	r3, [pc, #316]	@ (800116c <servo_read_all_positions+0x1b0>)
 8001030:	88db      	ldrh	r3, [r3, #6]
                snprintf(pos_debug, sizeof(pos_debug), "Raw read result: [%d,%d,%d,%d,%d,%d]", 
 8001032:	461c      	mov	r4, r3
                        positions[0], positions[1], positions[2], positions[3], positions[4], positions[5]);
 8001034:	4b4d      	ldr	r3, [pc, #308]	@ (800116c <servo_read_all_positions+0x1b0>)
 8001036:	891b      	ldrh	r3, [r3, #8]
                snprintf(pos_debug, sizeof(pos_debug), "Raw read result: [%d,%d,%d,%d,%d,%d]", 
 8001038:	461d      	mov	r5, r3
                        positions[0], positions[1], positions[2], positions[3], positions[4], positions[5]);
 800103a:	4b4c      	ldr	r3, [pc, #304]	@ (800116c <servo_read_all_positions+0x1b0>)
 800103c:	895b      	ldrh	r3, [r3, #10]
                snprintf(pos_debug, sizeof(pos_debug), "Raw read result: [%d,%d,%d,%d,%d,%d]", 
 800103e:	f107 0078 	add.w	r0, r7, #120	@ 0x78
 8001042:	9304      	str	r3, [sp, #16]
 8001044:	9503      	str	r5, [sp, #12]
 8001046:	9402      	str	r4, [sp, #8]
 8001048:	9101      	str	r1, [sp, #4]
 800104a:	9200      	str	r2, [sp, #0]
 800104c:	4633      	mov	r3, r6
 800104e:	4a4b      	ldr	r2, [pc, #300]	@ (800117c <servo_read_all_positions+0x1c0>)
 8001050:	2180      	movs	r1, #128	@ 0x80
 8001052:	f01d f8ad 	bl	801e1b0 <sniprintf>
                cdc_debug_print(pos_debug);
 8001056:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff fb3c 	bl	80006d8 <cdc_debug_print>
                for (int i = 0; i < 6; i++) {
 8001060:	2300      	movs	r3, #0
 8001062:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001066:	e031      	b.n	80010cc <servo_read_all_positions+0x110>
                    if (positions[i] <= 1000) {
 8001068:	4a40      	ldr	r2, [pc, #256]	@ (800116c <servo_read_all_positions+0x1b0>)
 800106a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800106e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001072:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001076:	d80a      	bhi.n	800108e <servo_read_all_positions+0xd2>
                        servo_current_positions[i] = positions[i];
 8001078:	4a3c      	ldr	r2, [pc, #240]	@ (800116c <servo_read_all_positions+0x1b0>)
 800107a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800107e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001082:	4a3f      	ldr	r2, [pc, #252]	@ (8001180 <servo_read_all_positions+0x1c4>)
 8001084:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001088:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800108c:	e019      	b.n	80010c2 <servo_read_all_positions+0x106>
                        snprintf(warning, sizeof(warning), "Servo%d invalid position %d, keeping %d", 
 800108e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001092:	1c5a      	adds	r2, r3, #1
                                i+1, positions[i], servo_current_positions[i]);
 8001094:	4935      	ldr	r1, [pc, #212]	@ (800116c <servo_read_all_positions+0x1b0>)
 8001096:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800109a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
                        snprintf(warning, sizeof(warning), "Servo%d invalid position %d, keeping %d", 
 800109e:	461c      	mov	r4, r3
                                i+1, positions[i], servo_current_positions[i]);
 80010a0:	4937      	ldr	r1, [pc, #220]	@ (8001180 <servo_read_all_positions+0x1c4>)
 80010a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80010a6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
                        snprintf(warning, sizeof(warning), "Servo%d invalid position %d, keeping %d", 
 80010aa:	4638      	mov	r0, r7
 80010ac:	9301      	str	r3, [sp, #4]
 80010ae:	9400      	str	r4, [sp, #0]
 80010b0:	4613      	mov	r3, r2
 80010b2:	4a34      	ldr	r2, [pc, #208]	@ (8001184 <servo_read_all_positions+0x1c8>)
 80010b4:	213c      	movs	r1, #60	@ 0x3c
 80010b6:	f01d f87b 	bl	801e1b0 <sniprintf>
                        cdc_debug_print(warning);
 80010ba:	463b      	mov	r3, r7
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff fb0b 	bl	80006d8 <cdc_debug_print>
                for (int i = 0; i < 6; i++) {
 80010c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80010c6:	3301      	adds	r3, #1
 80010c8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80010cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80010d0:	2b05      	cmp	r3, #5
 80010d2:	ddc9      	ble.n	8001068 <servo_read_all_positions+0xac>
                holding_regs[REG_CURRENT_ANGLE1] = servo_current_positions[0];
 80010d4:	4b2a      	ldr	r3, [pc, #168]	@ (8001180 <servo_read_all_positions+0x1c4>)
 80010d6:	881a      	ldrh	r2, [r3, #0]
 80010d8:	4b2b      	ldr	r3, [pc, #172]	@ (8001188 <servo_read_all_positions+0x1cc>)
 80010da:	845a      	strh	r2, [r3, #34]	@ 0x22
                holding_regs[REG_CURRENT_ANGLE2] = servo_current_positions[1];
 80010dc:	4b28      	ldr	r3, [pc, #160]	@ (8001180 <servo_read_all_positions+0x1c4>)
 80010de:	885a      	ldrh	r2, [r3, #2]
 80010e0:	4b29      	ldr	r3, [pc, #164]	@ (8001188 <servo_read_all_positions+0x1cc>)
 80010e2:	849a      	strh	r2, [r3, #36]	@ 0x24
                holding_regs[REG_CURRENT_ANGLE3] = servo_current_positions[2];
 80010e4:	4b26      	ldr	r3, [pc, #152]	@ (8001180 <servo_read_all_positions+0x1c4>)
 80010e6:	889a      	ldrh	r2, [r3, #4]
 80010e8:	4b27      	ldr	r3, [pc, #156]	@ (8001188 <servo_read_all_positions+0x1cc>)
 80010ea:	84da      	strh	r2, [r3, #38]	@ 0x26
                holding_regs[REG_CURRENT_ANGLE4] = servo_current_positions[3];
 80010ec:	4b24      	ldr	r3, [pc, #144]	@ (8001180 <servo_read_all_positions+0x1c4>)
 80010ee:	88da      	ldrh	r2, [r3, #6]
 80010f0:	4b25      	ldr	r3, [pc, #148]	@ (8001188 <servo_read_all_positions+0x1cc>)
 80010f2:	851a      	strh	r2, [r3, #40]	@ 0x28
                holding_regs[REG_CURRENT_ANGLE5] = servo_current_positions[4];
 80010f4:	4b22      	ldr	r3, [pc, #136]	@ (8001180 <servo_read_all_positions+0x1c4>)
 80010f6:	891a      	ldrh	r2, [r3, #8]
 80010f8:	4b23      	ldr	r3, [pc, #140]	@ (8001188 <servo_read_all_positions+0x1cc>)
 80010fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
                holding_regs[REG_CURRENT_ANGLE6] = servo_current_positions[5];
 80010fc:	4b20      	ldr	r3, [pc, #128]	@ (8001180 <servo_read_all_positions+0x1c4>)
 80010fe:	895a      	ldrh	r2, [r3, #10]
 8001100:	4b21      	ldr	r3, [pc, #132]	@ (8001188 <servo_read_all_positions+0x1cc>)
 8001102:	859a      	strh	r2, [r3, #44]	@ 0x2c
                        holding_regs[REG_CURRENT_ANGLE1], holding_regs[REG_CURRENT_ANGLE2], holding_regs[REG_CURRENT_ANGLE3],
 8001104:	4b20      	ldr	r3, [pc, #128]	@ (8001188 <servo_read_all_positions+0x1cc>)
 8001106:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
                snprintf(reg_update_msg, sizeof(reg_update_msg), "Updated registers: [%d,%d,%d,%d,%d,%d]", 
 8001108:	461e      	mov	r6, r3
                        holding_regs[REG_CURRENT_ANGLE1], holding_regs[REG_CURRENT_ANGLE2], holding_regs[REG_CURRENT_ANGLE3],
 800110a:	4b1f      	ldr	r3, [pc, #124]	@ (8001188 <servo_read_all_positions+0x1cc>)
 800110c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
                snprintf(reg_update_msg, sizeof(reg_update_msg), "Updated registers: [%d,%d,%d,%d,%d,%d]", 
 800110e:	461a      	mov	r2, r3
                        holding_regs[REG_CURRENT_ANGLE1], holding_regs[REG_CURRENT_ANGLE2], holding_regs[REG_CURRENT_ANGLE3],
 8001110:	4b1d      	ldr	r3, [pc, #116]	@ (8001188 <servo_read_all_positions+0x1cc>)
 8001112:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
                snprintf(reg_update_msg, sizeof(reg_update_msg), "Updated registers: [%d,%d,%d,%d,%d,%d]", 
 8001114:	4619      	mov	r1, r3
                        holding_regs[REG_CURRENT_ANGLE4], holding_regs[REG_CURRENT_ANGLE5], holding_regs[REG_CURRENT_ANGLE6]);
 8001116:	4b1c      	ldr	r3, [pc, #112]	@ (8001188 <servo_read_all_positions+0x1cc>)
 8001118:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
                snprintf(reg_update_msg, sizeof(reg_update_msg), "Updated registers: [%d,%d,%d,%d,%d,%d]", 
 800111a:	461c      	mov	r4, r3
                        holding_regs[REG_CURRENT_ANGLE4], holding_regs[REG_CURRENT_ANGLE5], holding_regs[REG_CURRENT_ANGLE6]);
 800111c:	4b1a      	ldr	r3, [pc, #104]	@ (8001188 <servo_read_all_positions+0x1cc>)
 800111e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
                snprintf(reg_update_msg, sizeof(reg_update_msg), "Updated registers: [%d,%d,%d,%d,%d,%d]", 
 8001120:	461d      	mov	r5, r3
                        holding_regs[REG_CURRENT_ANGLE4], holding_regs[REG_CURRENT_ANGLE5], holding_regs[REG_CURRENT_ANGLE6]);
 8001122:	4b19      	ldr	r3, [pc, #100]	@ (8001188 <servo_read_all_positions+0x1cc>)
 8001124:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
                snprintf(reg_update_msg, sizeof(reg_update_msg), "Updated registers: [%d,%d,%d,%d,%d,%d]", 
 8001126:	4638      	mov	r0, r7
 8001128:	9304      	str	r3, [sp, #16]
 800112a:	9503      	str	r5, [sp, #12]
 800112c:	9402      	str	r4, [sp, #8]
 800112e:	9101      	str	r1, [sp, #4]
 8001130:	9200      	str	r2, [sp, #0]
 8001132:	4633      	mov	r3, r6
 8001134:	4a15      	ldr	r2, [pc, #84]	@ (800118c <servo_read_all_positions+0x1d0>)
 8001136:	2178      	movs	r1, #120	@ 0x78
 8001138:	f01d f83a 	bl	801e1b0 <sniprintf>
                cdc_debug_print(reg_update_msg);
 800113c:	463b      	mov	r3, r7
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff faca 	bl	80006d8 <cdc_debug_print>
                read_state = 0;  // 重置状态，准备下次读取
 8001144:	4b08      	ldr	r3, [pc, #32]	@ (8001168 <servo_read_all_positions+0x1ac>)
 8001146:	2200      	movs	r2, #0
 8001148:	701a      	strb	r2, [r3, #0]
                break;
 800114a:	e007      	b.n	800115c <servo_read_all_positions+0x1a0>
                cdc_debug_print("Servo positions read with timeout protection");
 800114c:	4810      	ldr	r0, [pc, #64]	@ (8001190 <servo_read_all_positions+0x1d4>)
 800114e:	f7ff fac3 	bl	80006d8 <cdc_debug_print>
                read_state = 0;  // 重置状态，准备下次读取
 8001152:	4b05      	ldr	r3, [pc, #20]	@ (8001168 <servo_read_all_positions+0x1ac>)
 8001154:	2200      	movs	r2, #0
 8001156:	701a      	strb	r2, [r3, #0]
                break;
 8001158:	e000      	b.n	800115c <servo_read_all_positions+0x1a0>
                break;
 800115a:	bf00      	nop
}
 800115c:	bf00      	nop
 800115e:	f507 7782 	add.w	r7, r7, #260	@ 0x104
 8001162:	46bd      	mov	sp, r7
 8001164:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001166:	bf00      	nop
 8001168:	20000258 	.word	0x20000258
 800116c:	2000025c 	.word	0x2000025c
 8001170:	20000000 	.word	0x20000000
 8001174:	0801f7d8 	.word	0x0801f7d8
 8001178:	0801f7f8 	.word	0x0801f7f8
 800117c:	0801f820 	.word	0x0801f820
 8001180:	2000023c 	.word	0x2000023c
 8001184:	0801f848 	.word	0x0801f848
 8001188:	200006c0 	.word	0x200006c0
 800118c:	0801f870 	.word	0x0801f870
 8001190:	0801f898 	.word	0x0801f898

08001194 <servo_update_status>:

/**
  * @brief  更新舵机状态
  * @retval None
  */
static void servo_update_status(void) {
 8001194:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001196:	b0ab      	sub	sp, #172	@ 0xac
 8001198:	af06      	add	r7, sp, #24
    if (servo_moving) {
 800119a:	4b38      	ldr	r3, [pc, #224]	@ (800127c <servo_update_status+0xe8>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d068      	beq.n	8001274 <servo_update_status+0xe0>
        uint32_t current_time = HAL_GetTick();
 80011a2:	f003 fd4b 	bl	8004c3c <HAL_GetTick>
 80011a6:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
        uint32_t elapsed_time = current_time - servo_move_start_time;
 80011aa:	4b35      	ldr	r3, [pc, #212]	@ (8001280 <servo_update_status+0xec>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        
        // 获取当前设置的移动时间
        uint32_t expected_move_time = holding_regs[REG_ROTATION_TIME];
 80011b8:	4b32      	ldr	r3, [pc, #200]	@ (8001284 <servo_update_status+0xf0>)
 80011ba:	8a9b      	ldrh	r3, [r3, #20]
 80011bc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
        
        if (expected_move_time == 0) {
 80011c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d103      	bne.n	80011d0 <servo_update_status+0x3c>
            expected_move_time = 1000;  // 默认1秒
 80011c8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011cc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
        }
        
        // 添加500ms缓冲时间，确保舵机完全到位
        uint32_t timeout_time = expected_move_time + 500;
 80011d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80011d4:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80011d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        
        if (elapsed_time >= timeout_time) {
 80011dc:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80011e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d345      	bcc.n	8001274 <servo_update_status+0xe0>
            servo_moving = 0;
 80011e8:	4b24      	ldr	r3, [pc, #144]	@ (800127c <servo_update_status+0xe8>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	701a      	strb	r2, [r3, #0]
            
            // 读取当前位置并更新寄存器
            servo_read_all_positions();
 80011ee:	f7ff fee5 	bl	8000fbc <servo_read_all_positions>
            // 更新当前角度寄存器 (40017-40022)
            holding_regs[REG_CURRENT_ANGLE1] = servo_current_positions[0];
 80011f2:	4b25      	ldr	r3, [pc, #148]	@ (8001288 <servo_update_status+0xf4>)
 80011f4:	881a      	ldrh	r2, [r3, #0]
 80011f6:	4b23      	ldr	r3, [pc, #140]	@ (8001284 <servo_update_status+0xf0>)
 80011f8:	845a      	strh	r2, [r3, #34]	@ 0x22
            holding_regs[REG_CURRENT_ANGLE2] = servo_current_positions[1];
 80011fa:	4b23      	ldr	r3, [pc, #140]	@ (8001288 <servo_update_status+0xf4>)
 80011fc:	885a      	ldrh	r2, [r3, #2]
 80011fe:	4b21      	ldr	r3, [pc, #132]	@ (8001284 <servo_update_status+0xf0>)
 8001200:	849a      	strh	r2, [r3, #36]	@ 0x24
            holding_regs[REG_CURRENT_ANGLE3] = servo_current_positions[2];
 8001202:	4b21      	ldr	r3, [pc, #132]	@ (8001288 <servo_update_status+0xf4>)
 8001204:	889a      	ldrh	r2, [r3, #4]
 8001206:	4b1f      	ldr	r3, [pc, #124]	@ (8001284 <servo_update_status+0xf0>)
 8001208:	84da      	strh	r2, [r3, #38]	@ 0x26
            holding_regs[REG_CURRENT_ANGLE4] = servo_current_positions[3];
 800120a:	4b1f      	ldr	r3, [pc, #124]	@ (8001288 <servo_update_status+0xf4>)
 800120c:	88da      	ldrh	r2, [r3, #6]
 800120e:	4b1d      	ldr	r3, [pc, #116]	@ (8001284 <servo_update_status+0xf0>)
 8001210:	851a      	strh	r2, [r3, #40]	@ 0x28
            holding_regs[REG_CURRENT_ANGLE5] = servo_current_positions[4];
 8001212:	4b1d      	ldr	r3, [pc, #116]	@ (8001288 <servo_update_status+0xf4>)
 8001214:	891a      	ldrh	r2, [r3, #8]
 8001216:	4b1b      	ldr	r3, [pc, #108]	@ (8001284 <servo_update_status+0xf0>)
 8001218:	855a      	strh	r2, [r3, #42]	@ 0x2a
            holding_regs[REG_CURRENT_ANGLE6] = servo_current_positions[5];
 800121a:	4b1b      	ldr	r3, [pc, #108]	@ (8001288 <servo_update_status+0xf4>)
 800121c:	895a      	ldrh	r2, [r3, #10]
 800121e:	4b19      	ldr	r3, [pc, #100]	@ (8001284 <servo_update_status+0xf0>)
 8001220:	859a      	strh	r2, [r3, #44]	@ 0x2c
            
            // 转动时间到达后，置状态为2（完成状态，可以重新写1进行新转动）
            holding_regs[REG_ROTATION_TRIGGER] = 2;
 8001222:	4b18      	ldr	r3, [pc, #96]	@ (8001284 <servo_update_status+0xf0>)
 8001224:	2202      	movs	r2, #2
 8001226:	85da      	strh	r2, [r3, #46]	@ 0x2e
            last_rotation_trigger = 2;
 8001228:	4b18      	ldr	r3, [pc, #96]	@ (800128c <servo_update_status+0xf8>)
 800122a:	2202      	movs	r2, #2
 800122c:	601a      	str	r2, [r3, #0]
            
            cdc_debug_print("Servo movement completed, status set to 2 (ready for new command)");
 800122e:	4818      	ldr	r0, [pc, #96]	@ (8001290 <servo_update_status+0xfc>)
 8001230:	f7ff fa52 	bl	80006d8 <cdc_debug_print>
            
            // 调试信息：显示最终位置
            char final_pos_msg[128];
            snprintf(final_pos_msg, sizeof(final_pos_msg), "Final positions: [%d,%d,%d,%d,%d,%d]", 
                    servo_current_positions[0], servo_current_positions[1], servo_current_positions[2],
 8001234:	4b14      	ldr	r3, [pc, #80]	@ (8001288 <servo_update_status+0xf4>)
 8001236:	881b      	ldrh	r3, [r3, #0]
            snprintf(final_pos_msg, sizeof(final_pos_msg), "Final positions: [%d,%d,%d,%d,%d,%d]", 
 8001238:	461e      	mov	r6, r3
                    servo_current_positions[0], servo_current_positions[1], servo_current_positions[2],
 800123a:	4b13      	ldr	r3, [pc, #76]	@ (8001288 <servo_update_status+0xf4>)
 800123c:	885b      	ldrh	r3, [r3, #2]
            snprintf(final_pos_msg, sizeof(final_pos_msg), "Final positions: [%d,%d,%d,%d,%d,%d]", 
 800123e:	461a      	mov	r2, r3
                    servo_current_positions[0], servo_current_positions[1], servo_current_positions[2],
 8001240:	4b11      	ldr	r3, [pc, #68]	@ (8001288 <servo_update_status+0xf4>)
 8001242:	889b      	ldrh	r3, [r3, #4]
            snprintf(final_pos_msg, sizeof(final_pos_msg), "Final positions: [%d,%d,%d,%d,%d,%d]", 
 8001244:	4619      	mov	r1, r3
                    servo_current_positions[3], servo_current_positions[4], servo_current_positions[5]);
 8001246:	4b10      	ldr	r3, [pc, #64]	@ (8001288 <servo_update_status+0xf4>)
 8001248:	88db      	ldrh	r3, [r3, #6]
            snprintf(final_pos_msg, sizeof(final_pos_msg), "Final positions: [%d,%d,%d,%d,%d,%d]", 
 800124a:	461c      	mov	r4, r3
                    servo_current_positions[3], servo_current_positions[4], servo_current_positions[5]);
 800124c:	4b0e      	ldr	r3, [pc, #56]	@ (8001288 <servo_update_status+0xf4>)
 800124e:	891b      	ldrh	r3, [r3, #8]
            snprintf(final_pos_msg, sizeof(final_pos_msg), "Final positions: [%d,%d,%d,%d,%d,%d]", 
 8001250:	461d      	mov	r5, r3
                    servo_current_positions[3], servo_current_positions[4], servo_current_positions[5]);
 8001252:	4b0d      	ldr	r3, [pc, #52]	@ (8001288 <servo_update_status+0xf4>)
 8001254:	895b      	ldrh	r3, [r3, #10]
            snprintf(final_pos_msg, sizeof(final_pos_msg), "Final positions: [%d,%d,%d,%d,%d,%d]", 
 8001256:	4638      	mov	r0, r7
 8001258:	9304      	str	r3, [sp, #16]
 800125a:	9503      	str	r5, [sp, #12]
 800125c:	9402      	str	r4, [sp, #8]
 800125e:	9101      	str	r1, [sp, #4]
 8001260:	9200      	str	r2, [sp, #0]
 8001262:	4633      	mov	r3, r6
 8001264:	4a0b      	ldr	r2, [pc, #44]	@ (8001294 <servo_update_status+0x100>)
 8001266:	2180      	movs	r1, #128	@ 0x80
 8001268:	f01c ffa2 	bl	801e1b0 <sniprintf>
            cdc_debug_print(final_pos_msg);
 800126c:	463b      	mov	r3, r7
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff fa32 	bl	80006d8 <cdc_debug_print>
        }
    }
}
 8001274:	bf00      	nop
 8001276:	3794      	adds	r7, #148	@ 0x94
 8001278:	46bd      	mov	sp, r7
 800127a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800127c:	20000234 	.word	0x20000234
 8001280:	20000238 	.word	0x20000238
 8001284:	200006c0 	.word	0x200006c0
 8001288:	2000023c 	.word	0x2000023c
 800128c:	2000018c 	.word	0x2000018c
 8001290:	0801f8c8 	.word	0x0801f8c8
 8001294:	0801f90c 	.word	0x0801f90c

08001298 <BusServo_SendCmd>:
#include "app_business.h"
#include <string.h>
#include <stdio.h>

// 发送通用指令
void BusServo_SendCmd(uint8_t cmd, uint8_t *params, uint8_t param_cnt) {
 8001298:	b580      	push	{r7, lr}
 800129a:	b0f8      	sub	sp, #480	@ 0x1e0
 800129c:	af00      	add	r7, sp, #0
 800129e:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 80012a2:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80012a6:	6019      	str	r1, [r3, #0]
 80012a8:	4611      	mov	r1, r2
 80012aa:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 80012ae:	f2a3 13d9 	subw	r3, r3, #473	@ 0x1d9
 80012b2:	4602      	mov	r2, r0
 80012b4:	701a      	strb	r2, [r3, #0]
 80012b6:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 80012ba:	f5a3 73ed 	sub.w	r3, r3, #474	@ 0x1da
 80012be:	460a      	mov	r2, r1
 80012c0:	701a      	strb	r2, [r3, #0]
    uint8_t buf[256];  // 缓冲区，足够大
    uint8_t idx = 0;
 80012c2:	2300      	movs	r3, #0
 80012c4:	f887 31df 	strb.w	r3, [r7, #479]	@ 0x1df
    buf[idx++] = 0x55;  // 帧头
 80012c8:	f897 31df 	ldrb.w	r3, [r7, #479]	@ 0x1df
 80012cc:	1c5a      	adds	r2, r3, #1
 80012ce:	f887 21df 	strb.w	r2, [r7, #479]	@ 0x1df
 80012d2:	461a      	mov	r2, r3
 80012d4:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 80012d8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80012dc:	2155      	movs	r1, #85	@ 0x55
 80012de:	5499      	strb	r1, [r3, r2]
    buf[idx++] = 0x55;
 80012e0:	f897 31df 	ldrb.w	r3, [r7, #479]	@ 0x1df
 80012e4:	1c5a      	adds	r2, r3, #1
 80012e6:	f887 21df 	strb.w	r2, [r7, #479]	@ 0x1df
 80012ea:	461a      	mov	r2, r3
 80012ec:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 80012f0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80012f4:	2155      	movs	r1, #85	@ 0x55
 80012f6:	5499      	strb	r1, [r3, r2]
    buf[idx++] = param_cnt + 2;  // Length = N + 2
 80012f8:	f897 31df 	ldrb.w	r3, [r7, #479]	@ 0x1df
 80012fc:	1c5a      	adds	r2, r3, #1
 80012fe:	f887 21df 	strb.w	r2, [r7, #479]	@ 0x1df
 8001302:	461a      	mov	r2, r3
 8001304:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8001308:	f5a3 73ed 	sub.w	r3, r3, #474	@ 0x1da
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	3302      	adds	r3, #2
 8001310:	b2d9      	uxtb	r1, r3
 8001312:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8001316:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800131a:	5499      	strb	r1, [r3, r2]
    buf[idx++] = cmd;
 800131c:	f897 31df 	ldrb.w	r3, [r7, #479]	@ 0x1df
 8001320:	1c5a      	adds	r2, r3, #1
 8001322:	f887 21df 	strb.w	r2, [r7, #479]	@ 0x1df
 8001326:	4619      	mov	r1, r3
 8001328:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800132c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001330:	f507 72f0 	add.w	r2, r7, #480	@ 0x1e0
 8001334:	f2a2 12d9 	subw	r2, r2, #473	@ 0x1d9
 8001338:	7812      	ldrb	r2, [r2, #0]
 800133a:	545a      	strb	r2, [r3, r1]
    if (params && param_cnt > 0) {
 800133c:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8001340:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d021      	beq.n	800138e <BusServo_SendCmd+0xf6>
 800134a:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800134e:	f5a3 73ed 	sub.w	r3, r3, #474	@ 0x1da
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d01a      	beq.n	800138e <BusServo_SendCmd+0xf6>
        memcpy(&buf[idx], params, param_cnt);
 8001358:	f897 31df 	ldrb.w	r3, [r7, #479]	@ 0x1df
 800135c:	f107 02d4 	add.w	r2, r7, #212	@ 0xd4
 8001360:	18d0      	adds	r0, r2, r3
 8001362:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8001366:	f5a3 73ed 	sub.w	r3, r3, #474	@ 0x1da
 800136a:	781a      	ldrb	r2, [r3, #0]
 800136c:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8001370:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001374:	6819      	ldr	r1, [r3, #0]
 8001376:	f01d f8bc 	bl	801e4f2 <memcpy>
        idx += param_cnt;
 800137a:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800137e:	f5a3 73ed 	sub.w	r3, r3, #474	@ 0x1da
 8001382:	f897 21df 	ldrb.w	r2, [r7, #479]	@ 0x1df
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	4413      	add	r3, r2
 800138a:	f887 31df 	strb.w	r3, [r7, #479]	@ 0x1df
    }
    
    // 添加调试信息 - 显示发送的数据
    char debug_msg[200];
    int offset = snprintf(debug_msg, sizeof(debug_msg), "TX Servo: ");
 800138e:	f107 030c 	add.w	r3, r7, #12
 8001392:	4a25      	ldr	r2, [pc, #148]	@ (8001428 <BusServo_SendCmd+0x190>)
 8001394:	21c8      	movs	r1, #200	@ 0xc8
 8001396:	4618      	mov	r0, r3
 8001398:	f01c ff0a 	bl	801e1b0 <sniprintf>
 800139c:	f8c7 01d8 	str.w	r0, [r7, #472]	@ 0x1d8
    for (int i = 0; i < idx && i < 20; i++) {  // 最多显示20字节
 80013a0:	2300      	movs	r3, #0
 80013a2:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 80013a6:	e01e      	b.n	80013e6 <BusServo_SendCmd+0x14e>
        offset += snprintf(debug_msg + offset, sizeof(debug_msg) - offset, "%02X ", buf[i]);
 80013a8:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 80013ac:	f107 020c 	add.w	r2, r7, #12
 80013b0:	18d0      	adds	r0, r2, r3
 80013b2:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 80013b6:	f1c3 01c8 	rsb	r1, r3, #200	@ 0xc8
 80013ba:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 80013be:	f5a3 7286 	sub.w	r2, r3, #268	@ 0x10c
 80013c2:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80013c6:	4413      	add	r3, r2
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	4a18      	ldr	r2, [pc, #96]	@ (800142c <BusServo_SendCmd+0x194>)
 80013cc:	f01c fef0 	bl	801e1b0 <sniprintf>
 80013d0:	4602      	mov	r2, r0
 80013d2:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 80013d6:	4413      	add	r3, r2
 80013d8:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
    for (int i = 0; i < idx && i < 20; i++) {  // 最多显示20字节
 80013dc:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80013e0:	3301      	adds	r3, #1
 80013e2:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 80013e6:	f897 31df 	ldrb.w	r3, [r7, #479]	@ 0x1df
 80013ea:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80013ee:	429a      	cmp	r2, r3
 80013f0:	da03      	bge.n	80013fa <BusServo_SendCmd+0x162>
 80013f2:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80013f6:	2b13      	cmp	r3, #19
 80013f8:	ddd6      	ble.n	80013a8 <BusServo_SendCmd+0x110>
    }
    cdc_debug_print(debug_msg);
 80013fa:	f107 030c 	add.w	r3, r7, #12
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff f96a 	bl	80006d8 <cdc_debug_print>
    
    HAL_UART_Transmit(&huart6, buf, idx, HAL_MAX_DELAY);  // 发送
 8001404:	f897 31df 	ldrb.w	r3, [r7, #479]	@ 0x1df
 8001408:	b29a      	uxth	r2, r3
 800140a:	f107 01d4 	add.w	r1, r7, #212	@ 0xd4
 800140e:	f04f 33ff 	mov.w	r3, #4294967295
 8001412:	4807      	ldr	r0, [pc, #28]	@ (8001430 <BusServo_SendCmd+0x198>)
 8001414:	f007 ff92 	bl	800933c <HAL_UART_Transmit>
    
    // 发送完成后短暂延时，让舵机处理命令
    HAL_Delay(10);
 8001418:	200a      	movs	r0, #10
 800141a:	f003 fc1b 	bl	8004c54 <HAL_Delay>
}
 800141e:	bf00      	nop
 8001420:	f507 77f0 	add.w	r7, r7, #480	@ 0x1e0
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	0801f934 	.word	0x0801f934
 800142c:	0801f940 	.word	0x0801f940
 8001430:	200008b0 	.word	0x200008b0

08001434 <BusServo_MultMove>:
    params[5] = (position >> 8) & 0xFF;  // 高8位
    BusServo_SendCmd(CMD_SERVO_MOVE, params, 6);
}

// 控制多舵机同时转动
void BusServo_MultMove(uint8_t *ids, uint16_t *positions, uint8_t servo_count, uint16_t time) {
 8001434:	b590      	push	{r4, r7, lr}
 8001436:	b0c7      	sub	sp, #284	@ 0x11c
 8001438:	af00      	add	r7, sp, #0
 800143a:	f507 748c 	add.w	r4, r7, #280	@ 0x118
 800143e:	f5a4 7486 	sub.w	r4, r4, #268	@ 0x10c
 8001442:	6020      	str	r0, [r4, #0]
 8001444:	f507 708c 	add.w	r0, r7, #280	@ 0x118
 8001448:	f5a0 7088 	sub.w	r0, r0, #272	@ 0x110
 800144c:	6001      	str	r1, [r0, #0]
 800144e:	4619      	mov	r1, r3
 8001450:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001454:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8001458:	701a      	strb	r2, [r3, #0]
 800145a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800145e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001462:	460a      	mov	r2, r1
 8001464:	801a      	strh	r2, [r3, #0]
    uint8_t params[256];  // 足够大的缓冲区
    uint8_t idx = 0;
 8001466:	2300      	movs	r3, #0
 8001468:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    params[idx++] = servo_count;    // 舵机数量
 800146c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8001470:	1c5a      	adds	r2, r3, #1
 8001472:	f887 2117 	strb.w	r2, [r7, #279]	@ 0x117
 8001476:	4619      	mov	r1, r3
 8001478:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800147c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001480:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8001484:	f2a2 1211 	subw	r2, r2, #273	@ 0x111
 8001488:	7812      	ldrb	r2, [r2, #0]
 800148a:	545a      	strb	r2, [r3, r1]
    params[idx++] = time & 0xFF;    // 时间低8位  
 800148c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8001490:	1c5a      	adds	r2, r3, #1
 8001492:	f887 2117 	strb.w	r2, [r7, #279]	@ 0x117
 8001496:	461a      	mov	r2, r3
 8001498:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800149c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80014a0:	881b      	ldrh	r3, [r3, #0]
 80014a2:	b2d9      	uxtb	r1, r3
 80014a4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80014a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80014ac:	5499      	strb	r1, [r3, r2]
    params[idx++] = (time >> 8) & 0xFF;  // 时间高8位
 80014ae:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80014b2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80014b6:	881b      	ldrh	r3, [r3, #0]
 80014b8:	0a1b      	lsrs	r3, r3, #8
 80014ba:	b299      	uxth	r1, r3
 80014bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80014c0:	1c5a      	adds	r2, r3, #1
 80014c2:	f887 2117 	strb.w	r2, [r7, #279]	@ 0x117
 80014c6:	461a      	mov	r2, r3
 80014c8:	b2c9      	uxtb	r1, r1
 80014ca:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80014ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80014d2:	5499      	strb	r1, [r3, r2]
    
    // 添加每个舵机的ID和位置
    for (uint8_t i = 0; i < servo_count; i++) {
 80014d4:	2300      	movs	r3, #0
 80014d6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80014da:	e046      	b.n	800156a <BusServo_MultMove+0x136>
        params[idx++] = ids[i];     // 舵机ID
 80014dc:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80014e0:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80014e4:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80014e8:	6812      	ldr	r2, [r2, #0]
 80014ea:	441a      	add	r2, r3
 80014ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80014f0:	1c59      	adds	r1, r3, #1
 80014f2:	f887 1117 	strb.w	r1, [r7, #279]	@ 0x117
 80014f6:	4619      	mov	r1, r3
 80014f8:	7812      	ldrb	r2, [r2, #0]
 80014fa:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80014fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001502:	545a      	strb	r2, [r3, r1]
        params[idx++] = positions[i] & 0xFF;        // 位置低8位
 8001504:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 800150e:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001512:	6812      	ldr	r2, [r2, #0]
 8001514:	4413      	add	r3, r2
 8001516:	8819      	ldrh	r1, [r3, #0]
 8001518:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800151c:	1c5a      	adds	r2, r3, #1
 800151e:	f887 2117 	strb.w	r2, [r7, #279]	@ 0x117
 8001522:	461a      	mov	r2, r3
 8001524:	b2c9      	uxtb	r1, r1
 8001526:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800152a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800152e:	5499      	strb	r1, [r3, r2]
        params[idx++] = (positions[i] >> 8) & 0xFF; // 位置高8位
 8001530:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 800153a:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 800153e:	6812      	ldr	r2, [r2, #0]
 8001540:	4413      	add	r3, r2
 8001542:	881b      	ldrh	r3, [r3, #0]
 8001544:	0a1b      	lsrs	r3, r3, #8
 8001546:	b299      	uxth	r1, r3
 8001548:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800154c:	1c5a      	adds	r2, r3, #1
 800154e:	f887 2117 	strb.w	r2, [r7, #279]	@ 0x117
 8001552:	461a      	mov	r2, r3
 8001554:	b2c9      	uxtb	r1, r1
 8001556:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800155a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800155e:	5499      	strb	r1, [r3, r2]
    for (uint8_t i = 0; i < servo_count; i++) {
 8001560:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8001564:	3301      	adds	r3, #1
 8001566:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800156a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800156e:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8001572:	f897 2116 	ldrb.w	r2, [r7, #278]	@ 0x116
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	429a      	cmp	r2, r3
 800157a:	d3af      	bcc.n	80014dc <BusServo_MultMove+0xa8>
    }
    
    BusServo_SendCmd(CMD_SERVO_MOVE, params, idx);
 800157c:	f897 2117 	ldrb.w	r2, [r7, #279]	@ 0x117
 8001580:	f107 0314 	add.w	r3, r7, #20
 8001584:	4619      	mov	r1, r3
 8001586:	2003      	movs	r0, #3
 8001588:	f7ff fe86 	bl	8001298 <BusServo_SendCmd>
}
 800158c:	bf00      	nop
 800158e:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 8001592:	46bd      	mov	sp, r7
 8001594:	bd90      	pop	{r4, r7, pc}
	...

08001598 <BusServo_MultPosRead>:
static uint32_t batch_start_time = 0;
static uint16_t batch_positions[6];  // 存储6个舵机的位置
static uint8_t batch_received_count = 0;  // 已接收到的舵机数量

// 读取多舵机位置（非阻塞版本）
void BusServo_MultPosRead(uint8_t *ids, uint8_t id_cnt, uint16_t *positions) {
 8001598:	b580      	push	{r7, lr}
 800159a:	b0dc      	sub	sp, #368	@ 0x170
 800159c:	af02      	add	r7, sp, #8
 800159e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80015a2:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80015a6:	6018      	str	r0, [r3, #0]
 80015a8:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80015ac:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80015b0:	601a      	str	r2, [r3, #0]
 80015b2:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80015b6:	f2a3 135d 	subw	r3, r3, #349	@ 0x15d
 80015ba:	460a      	mov	r2, r1
 80015bc:	701a      	strb	r2, [r3, #0]
    uint8_t params[256];
    params[0] = id_cnt;
 80015be:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80015c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80015c6:	f507 72b4 	add.w	r2, r7, #360	@ 0x168
 80015ca:	f2a2 125d 	subw	r2, r2, #349	@ 0x15d
 80015ce:	7812      	ldrb	r2, [r2, #0]
 80015d0:	701a      	strb	r2, [r3, #0]
    memcpy(&params[1], ids, id_cnt);
 80015d2:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80015d6:	f2a3 135d 	subw	r3, r3, #349	@ 0x15d
 80015da:	7819      	ldrb	r1, [r3, #0]
 80015dc:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80015e0:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80015e4:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 80015e8:	1c50      	adds	r0, r2, #1
 80015ea:	460a      	mov	r2, r1
 80015ec:	6819      	ldr	r1, [r3, #0]
 80015ee:	f01c ff80 	bl	801e4f2 <memcpy>
    
    // 保存参数供后续处理使用
    servo_ids_ptr = ids;
 80015f2:	4a4a      	ldr	r2, [pc, #296]	@ (800171c <BusServo_MultPosRead+0x184>)
 80015f4:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80015f8:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	6013      	str	r3, [r2, #0]
    servo_id_count = id_cnt;
 8001600:	4a47      	ldr	r2, [pc, #284]	@ (8001720 <BusServo_MultPosRead+0x188>)
 8001602:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001606:	f2a3 135d 	subw	r3, r3, #349	@ 0x15d
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	7013      	strb	r3, [r2, #0]
    servo_positions_ptr = positions;
 800160e:	4a45      	ldr	r2, [pc, #276]	@ (8001724 <BusServo_MultPosRead+0x18c>)
 8001610:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001614:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	6013      	str	r3, [r2, #0]
    
    // 初始化位置数组为默认值9999（表示读取失败）
    for (uint8_t i = 0; i < id_cnt; i++) {
 800161c:	2300      	movs	r3, #0
 800161e:	f887 3167 	strb.w	r3, [r7, #359]	@ 0x167
 8001622:	e010      	b.n	8001646 <BusServo_MultPosRead+0xae>
        positions[i] = 9999;  // 默认位置9999代表读取失败
 8001624:	f897 3167 	ldrb.w	r3, [r7, #359]	@ 0x167
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	f507 72b4 	add.w	r2, r7, #360	@ 0x168
 800162e:	f5a2 72b2 	sub.w	r2, r2, #356	@ 0x164
 8001632:	6812      	ldr	r2, [r2, #0]
 8001634:	4413      	add	r3, r2
 8001636:	f242 720f 	movw	r2, #9999	@ 0x270f
 800163a:	801a      	strh	r2, [r3, #0]
    for (uint8_t i = 0; i < id_cnt; i++) {
 800163c:	f897 3167 	ldrb.w	r3, [r7, #359]	@ 0x167
 8001640:	3301      	adds	r3, #1
 8001642:	f887 3167 	strb.w	r3, [r7, #359]	@ 0x167
 8001646:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800164a:	f2a3 135d 	subw	r3, r3, #349	@ 0x15d
 800164e:	f897 2167 	ldrb.w	r2, [r7, #359]	@ 0x167
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	429a      	cmp	r2, r3
 8001656:	d3e5      	bcc.n	8001624 <BusServo_MultPosRead+0x8c>
    }
    
    // 发送读取命令
    BusServo_SendCmd(CMD_MULT_SERVO_POS_READ, params, id_cnt + 1);
 8001658:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800165c:	f2a3 135d 	subw	r3, r3, #349	@ 0x15d
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	3301      	adds	r3, #1
 8001664:	b2da      	uxtb	r2, r3
 8001666:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800166a:	4619      	mov	r1, r3
 800166c:	2015      	movs	r0, #21
 800166e:	f7ff fe13 	bl	8001298 <BusServo_SendCmd>
    
    // 简单策略：固定接收舵机数据
    servo_expected_len = id_cnt * 3 + 5;  // 按请求的舵机数量计算最大长度
 8001672:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001676:	f2a3 135d 	subw	r3, r3, #349	@ 0x15d
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	461a      	mov	r2, r3
 800167e:	0052      	lsls	r2, r2, #1
 8001680:	4413      	add	r3, r2
 8001682:	b2db      	uxtb	r3, r3
 8001684:	3305      	adds	r3, #5
 8001686:	b2da      	uxtb	r2, r3
 8001688:	4b27      	ldr	r3, [pc, #156]	@ (8001728 <BusServo_MultPosRead+0x190>)
 800168a:	701a      	strb	r2, [r3, #0]
    
    char len_msg[80];
    snprintf(len_msg, sizeof(len_msg), "Expecting %d bytes for %d servos", servo_expected_len, id_cnt);
 800168c:	4b26      	ldr	r3, [pc, #152]	@ (8001728 <BusServo_MultPosRead+0x190>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	461a      	mov	r2, r3
 8001692:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001696:	f2a3 135d 	subw	r3, r3, #349	@ 0x15d
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	f107 0014 	add.w	r0, r7, #20
 80016a0:	9300      	str	r3, [sp, #0]
 80016a2:	4613      	mov	r3, r2
 80016a4:	4a21      	ldr	r2, [pc, #132]	@ (800172c <BusServo_MultPosRead+0x194>)
 80016a6:	2150      	movs	r1, #80	@ 0x50
 80016a8:	f01c fd82 	bl	801e1b0 <sniprintf>
    cdc_debug_print(len_msg);
 80016ac:	f107 0314 	add.w	r3, r7, #20
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7ff f811 	bl	80006d8 <cdc_debug_print>
    
    // 清零接收缓冲区
    memset(servo_rx_buf, 0, sizeof(servo_rx_buf));
 80016b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016ba:	2100      	movs	r1, #0
 80016bc:	481c      	ldr	r0, [pc, #112]	@ (8001730 <BusServo_MultPosRead+0x198>)
 80016be:	f01c fe1a 	bl	801e2f6 <memset>
    
    // 确保UART DMA处于空闲状态
    if (huart6.RxState != HAL_UART_STATE_READY) {
 80016c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001734 <BusServo_MultPosRead+0x19c>)
 80016c4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	2b20      	cmp	r3, #32
 80016cc:	d005      	beq.n	80016da <BusServo_MultPosRead+0x142>
        HAL_UART_DMAStop(&huart6);
 80016ce:	4819      	ldr	r0, [pc, #100]	@ (8001734 <BusServo_MultPosRead+0x19c>)
 80016d0:	f007 ff7b 	bl	80095ca <HAL_UART_DMAStop>
        HAL_Delay(5);
 80016d4:	2005      	movs	r0, #5
 80016d6:	f003 fabd 	bl	8004c54 <HAL_Delay>
    }
    
    // 启动DMA接收固定长度，允许较长的超时时间
    if (HAL_UART_Receive_DMA(&huart6, servo_rx_buf, servo_expected_len) == HAL_OK) {
 80016da:	4b13      	ldr	r3, [pc, #76]	@ (8001728 <BusServo_MultPosRead+0x190>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	461a      	mov	r2, r3
 80016e0:	4913      	ldr	r1, [pc, #76]	@ (8001730 <BusServo_MultPosRead+0x198>)
 80016e2:	4814      	ldr	r0, [pc, #80]	@ (8001734 <BusServo_MultPosRead+0x19c>)
 80016e4:	f007 ff4c 	bl	8009580 <HAL_UART_Receive_DMA>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d10b      	bne.n	8001706 <BusServo_MultPosRead+0x16e>
        servo_start_time = HAL_GetTick();
 80016ee:	f003 faa5 	bl	8004c3c <HAL_GetTick>
 80016f2:	4603      	mov	r3, r0
 80016f4:	4a10      	ldr	r2, [pc, #64]	@ (8001738 <BusServo_MultPosRead+0x1a0>)
 80016f6:	6013      	str	r3, [r2, #0]
        servo_reading_flag = 1;
 80016f8:	4b10      	ldr	r3, [pc, #64]	@ (800173c <BusServo_MultPosRead+0x1a4>)
 80016fa:	2201      	movs	r2, #1
 80016fc:	701a      	strb	r2, [r3, #0]
        cdc_debug_print("Servo: Started DMA receive with long timeout");
 80016fe:	4810      	ldr	r0, [pc, #64]	@ (8001740 <BusServo_MultPosRead+0x1a8>)
 8001700:	f7fe ffea 	bl	80006d8 <cdc_debug_print>
    } else {
        cdc_debug_print("Servo: Failed to start DMA receive");
        servo_reading_flag = 0;
    }
}
 8001704:	e005      	b.n	8001712 <BusServo_MultPosRead+0x17a>
        cdc_debug_print("Servo: Failed to start DMA receive");
 8001706:	480f      	ldr	r0, [pc, #60]	@ (8001744 <BusServo_MultPosRead+0x1ac>)
 8001708:	f7fe ffe6 	bl	80006d8 <cdc_debug_print>
        servo_reading_flag = 0;
 800170c:	4b0b      	ldr	r3, [pc, #44]	@ (800173c <BusServo_MultPosRead+0x1a4>)
 800170e:	2200      	movs	r2, #0
 8001710:	701a      	strb	r2, [r3, #0]
}
 8001712:	bf00      	nop
 8001714:	f507 77b4 	add.w	r7, r7, #360	@ 0x168
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	20000374 	.word	0x20000374
 8001720:	20000378 	.word	0x20000378
 8001724:	2000037c 	.word	0x2000037c
 8001728:	20000368 	.word	0x20000368
 800172c:	0801f948 	.word	0x0801f948
 8001730:	20000268 	.word	0x20000268
 8001734:	200008b0 	.word	0x200008b0
 8001738:	2000036c 	.word	0x2000036c
 800173c:	20000370 	.word	0x20000370
 8001740:	0801f96c 	.word	0x0801f96c
 8001744:	0801f99c 	.word	0x0801f99c

08001748 <BusServo_CheckReadStatus>:

// 检查舵机读取状态（需要在主循环中定期调用）
uint8_t BusServo_CheckReadStatus(void) {
 8001748:	b580      	push	{r7, lr}
 800174a:	b0ca      	sub	sp, #296	@ 0x128
 800174c:	af00      	add	r7, sp, #0
    if (!servo_reading_flag) {
 800174e:	4b3f      	ldr	r3, [pc, #252]	@ (800184c <BusServo_CheckReadStatus+0x104>)
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d101      	bne.n	800175a <BusServo_CheckReadStatus+0x12>
        return 0;  // 没有正在读取
 8001756:	2300      	movs	r3, #0
 8001758:	e072      	b.n	8001840 <BusServo_CheckReadStatus+0xf8>
    }
    
    uint32_t elapsed = HAL_GetTick() - servo_start_time;
 800175a:	f003 fa6f 	bl	8004c3c <HAL_GetTick>
 800175e:	4602      	mov	r2, r0
 8001760:	4b3b      	ldr	r3, [pc, #236]	@ (8001850 <BusServo_CheckReadStatus+0x108>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    
    // 检查DMA是否完成
    if (huart6.RxXferCount == 0) {
 800176a:	4b3a      	ldr	r3, [pc, #232]	@ (8001854 <BusServo_CheckReadStatus+0x10c>)
 800176c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800176e:	b29b      	uxth	r3, r3
 8001770:	2b00      	cmp	r3, #0
 8001772:	d14a      	bne.n	800180a <BusServo_CheckReadStatus+0xc2>
        char complete_msg[80];
        snprintf(complete_msg, sizeof(complete_msg), "Receive complete in %ldms", elapsed);
 8001774:	1d38      	adds	r0, r7, #4
 8001776:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800177a:	4a37      	ldr	r2, [pc, #220]	@ (8001858 <BusServo_CheckReadStatus+0x110>)
 800177c:	2150      	movs	r1, #80	@ 0x50
 800177e:	f01c fd17 	bl	801e1b0 <sniprintf>
        cdc_debug_print(complete_msg);
 8001782:	1d3b      	adds	r3, r7, #4
 8001784:	4618      	mov	r0, r3
 8001786:	f7fe ffa7 	bl	80006d8 <cdc_debug_print>
        
        // 打印接收数据
        char hex_msg[200];
        int offset = snprintf(hex_msg, sizeof(hex_msg), "RX data: ");
 800178a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800178e:	4a33      	ldr	r2, [pc, #204]	@ (800185c <BusServo_CheckReadStatus+0x114>)
 8001790:	21c8      	movs	r1, #200	@ 0xc8
 8001792:	4618      	mov	r0, r3
 8001794:	f01c fd0c 	bl	801e1b0 <sniprintf>
 8001798:	f8c7 0124 	str.w	r0, [r7, #292]	@ 0x124
        for (int i = 0; i < servo_expected_len && i < 30; i++) {
 800179c:	2300      	movs	r3, #0
 800179e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80017a2:	e01b      	b.n	80017dc <BusServo_CheckReadStatus+0x94>
            offset += snprintf(hex_msg + offset, sizeof(hex_msg) - offset, "%02X ", servo_rx_buf[i]);
 80017a4:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80017a8:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 80017ac:	18d0      	adds	r0, r2, r3
 80017ae:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80017b2:	f1c3 01c8 	rsb	r1, r3, #200	@ 0xc8
 80017b6:	4a2a      	ldr	r2, [pc, #168]	@ (8001860 <BusServo_CheckReadStatus+0x118>)
 80017b8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80017bc:	4413      	add	r3, r2
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	4a28      	ldr	r2, [pc, #160]	@ (8001864 <BusServo_CheckReadStatus+0x11c>)
 80017c2:	f01c fcf5 	bl	801e1b0 <sniprintf>
 80017c6:	4602      	mov	r2, r0
 80017c8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80017cc:	4413      	add	r3, r2
 80017ce:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        for (int i = 0; i < servo_expected_len && i < 30; i++) {
 80017d2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80017d6:	3301      	adds	r3, #1
 80017d8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80017dc:	4b22      	ldr	r3, [pc, #136]	@ (8001868 <BusServo_CheckReadStatus+0x120>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	461a      	mov	r2, r3
 80017e2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80017e6:	4293      	cmp	r3, r2
 80017e8:	da03      	bge.n	80017f2 <BusServo_CheckReadStatus+0xaa>
 80017ea:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80017ee:	2b1d      	cmp	r3, #29
 80017f0:	ddd8      	ble.n	80017a4 <BusServo_CheckReadStatus+0x5c>
        }
        cdc_debug_print(hex_msg);
 80017f2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7fe ff6e 	bl	80006d8 <cdc_debug_print>
        
        BusServo_ParseResponse();
 80017fc:	f000 f838 	bl	8001870 <BusServo_ParseResponse>
        servo_reading_flag = 0;
 8001800:	4b12      	ldr	r3, [pc, #72]	@ (800184c <BusServo_CheckReadStatus+0x104>)
 8001802:	2200      	movs	r2, #0
 8001804:	701a      	strb	r2, [r3, #0]
        return 1;  // 成功完成
 8001806:	2301      	movs	r3, #1
 8001808:	e01a      	b.n	8001840 <BusServo_CheckReadStatus+0xf8>
    }
    
    // 超时检查 - 500ms超时
    if (elapsed > 500) {
 800180a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800180e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001812:	d914      	bls.n	800183e <BusServo_CheckReadStatus+0xf6>
        HAL_UART_DMAStop(&huart6);
 8001814:	480f      	ldr	r0, [pc, #60]	@ (8001854 <BusServo_CheckReadStatus+0x10c>)
 8001816:	f007 fed8 	bl	80095ca <HAL_UART_DMAStop>
        
        char timeout_msg[80];
        snprintf(timeout_msg, sizeof(timeout_msg), "Timeout after %ldms", elapsed);
 800181a:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 800181e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001822:	4a12      	ldr	r2, [pc, #72]	@ (800186c <BusServo_CheckReadStatus+0x124>)
 8001824:	2150      	movs	r1, #80	@ 0x50
 8001826:	f01c fcc3 	bl	801e1b0 <sniprintf>
        cdc_debug_print(timeout_msg);
 800182a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800182e:	4618      	mov	r0, r3
 8001830:	f7fe ff52 	bl	80006d8 <cdc_debug_print>
        
        servo_reading_flag = 0;
 8001834:	4b05      	ldr	r3, [pc, #20]	@ (800184c <BusServo_CheckReadStatus+0x104>)
 8001836:	2200      	movs	r2, #0
 8001838:	701a      	strb	r2, [r3, #0]
        return 2;  // 超时
 800183a:	2302      	movs	r3, #2
 800183c:	e000      	b.n	8001840 <BusServo_CheckReadStatus+0xf8>
    }
    
    return 3;  // 正在接收中
 800183e:	2303      	movs	r3, #3
}
 8001840:	4618      	mov	r0, r3
 8001842:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20000370 	.word	0x20000370
 8001850:	2000036c 	.word	0x2000036c
 8001854:	200008b0 	.word	0x200008b0
 8001858:	0801f9c0 	.word	0x0801f9c0
 800185c:	0801f9dc 	.word	0x0801f9dc
 8001860:	20000268 	.word	0x20000268
 8001864:	0801f940 	.word	0x0801f940
 8001868:	20000368 	.word	0x20000368
 800186c:	0801f9e8 	.word	0x0801f9e8

08001870 <BusServo_ParseResponse>:

// 解析舵机响应数据
void BusServo_ParseResponse(void) {
 8001870:	b590      	push	{r4, r7, lr}
 8001872:	f5ad 7d03 	sub.w	sp, sp, #524	@ 0x20c
 8001876:	af04      	add	r7, sp, #16
    // 首先打印接收到的所有数据用于调试
    char all_data_msg[200];
    int offset = snprintf(all_data_msg, sizeof(all_data_msg), "Parse RX: ");
 8001878:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 800187c:	4a8e      	ldr	r2, [pc, #568]	@ (8001ab8 <BusServo_ParseResponse+0x248>)
 800187e:	21c8      	movs	r1, #200	@ 0xc8
 8001880:	4618      	mov	r0, r3
 8001882:	f01c fc95 	bl	801e1b0 <sniprintf>
 8001886:	f8c7 01f4 	str.w	r0, [r7, #500]	@ 0x1f4
    for (int i = 0; i < 16 && i < sizeof(servo_rx_buf); i++) {  // 显示前16字节
 800188a:	2300      	movs	r3, #0
 800188c:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
 8001890:	e01b      	b.n	80018ca <BusServo_ParseResponse+0x5a>
        offset += snprintf(all_data_msg + offset, sizeof(all_data_msg) - offset, "%02X ", servo_rx_buf[i]);
 8001892:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001896:	f507 728e 	add.w	r2, r7, #284	@ 0x11c
 800189a:	18d0      	adds	r0, r2, r3
 800189c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80018a0:	f1c3 01c8 	rsb	r1, r3, #200	@ 0xc8
 80018a4:	4a85      	ldr	r2, [pc, #532]	@ (8001abc <BusServo_ParseResponse+0x24c>)
 80018a6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80018aa:	4413      	add	r3, r2
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	4a84      	ldr	r2, [pc, #528]	@ (8001ac0 <BusServo_ParseResponse+0x250>)
 80018b0:	f01c fc7e 	bl	801e1b0 <sniprintf>
 80018b4:	4602      	mov	r2, r0
 80018b6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80018ba:	4413      	add	r3, r2
 80018bc:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
    for (int i = 0; i < 16 && i < sizeof(servo_rx_buf); i++) {  // 显示前16字节
 80018c0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80018c4:	3301      	adds	r3, #1
 80018c6:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
 80018ca:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80018ce:	2b0f      	cmp	r3, #15
 80018d0:	dc03      	bgt.n	80018da <BusServo_ParseResponse+0x6a>
 80018d2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80018d6:	2bff      	cmp	r3, #255	@ 0xff
 80018d8:	d9db      	bls.n	8001892 <BusServo_ParseResponse+0x22>
    }
    cdc_debug_print(all_data_msg);
 80018da:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 80018de:	4618      	mov	r0, r3
 80018e0:	f7fe fefa 	bl	80006d8 <cdc_debug_print>
    
    // 检查帧头和命令码
    if (servo_rx_buf[0] == 0x55 && servo_rx_buf[1] == 0x55 && 
 80018e4:	4b75      	ldr	r3, [pc, #468]	@ (8001abc <BusServo_ParseResponse+0x24c>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	2b55      	cmp	r3, #85	@ 0x55
 80018ea:	f040 80c4 	bne.w	8001a76 <BusServo_ParseResponse+0x206>
 80018ee:	4b73      	ldr	r3, [pc, #460]	@ (8001abc <BusServo_ParseResponse+0x24c>)
 80018f0:	785b      	ldrb	r3, [r3, #1]
 80018f2:	2b55      	cmp	r3, #85	@ 0x55
 80018f4:	f040 80bf 	bne.w	8001a76 <BusServo_ParseResponse+0x206>
        servo_rx_buf[3] == CMD_MULT_SERVO_POS_READ) {
 80018f8:	4b70      	ldr	r3, [pc, #448]	@ (8001abc <BusServo_ParseResponse+0x24c>)
 80018fa:	78db      	ldrb	r3, [r3, #3]
    if (servo_rx_buf[0] == 0x55 && servo_rx_buf[1] == 0x55 && 
 80018fc:	2b15      	cmp	r3, #21
 80018fe:	f040 80ba 	bne.w	8001a76 <BusServo_ParseResponse+0x206>
        
        uint8_t data_length = servo_rx_buf[2];  // 数据长度字段
 8001902:	4b6e      	ldr	r3, [pc, #440]	@ (8001abc <BusServo_ParseResponse+0x24c>)
 8001904:	789b      	ldrb	r3, [r3, #2]
 8001906:	f887 31ed 	strb.w	r3, [r7, #493]	@ 0x1ed
        uint8_t returned_count = servo_rx_buf[4];  // 返回的舵机个数
 800190a:	4b6c      	ldr	r3, [pc, #432]	@ (8001abc <BusServo_ParseResponse+0x24c>)
 800190c:	791b      	ldrb	r3, [r3, #4]
 800190e:	f887 31ec 	strb.w	r3, [r7, #492]	@ 0x1ec
        
        char debug_msg[100];
        snprintf(debug_msg, sizeof(debug_msg), "Valid frame: data_len=%d, returned_count=%d, expected=%d", 
 8001912:	f897 21ed 	ldrb.w	r2, [r7, #493]	@ 0x1ed
 8001916:	f897 31ec 	ldrb.w	r3, [r7, #492]	@ 0x1ec
 800191a:	496a      	ldr	r1, [pc, #424]	@ (8001ac4 <BusServo_ParseResponse+0x254>)
 800191c:	7809      	ldrb	r1, [r1, #0]
 800191e:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8001922:	9101      	str	r1, [sp, #4]
 8001924:	9300      	str	r3, [sp, #0]
 8001926:	4613      	mov	r3, r2
 8001928:	4a67      	ldr	r2, [pc, #412]	@ (8001ac8 <BusServo_ParseResponse+0x258>)
 800192a:	2164      	movs	r1, #100	@ 0x64
 800192c:	f01c fc40 	bl	801e1b0 <sniprintf>
                 data_length, returned_count, servo_id_count);
        cdc_debug_print(debug_msg);
 8001930:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001934:	4618      	mov	r0, r3
 8001936:	f7fe fecf 	bl	80006d8 <cdc_debug_print>
        
        // 解析实际返回的舵机数据
        for (uint8_t i = 0; i < returned_count; i++) {
 800193a:	2300      	movs	r3, #0
 800193c:	f887 31ef 	strb.w	r3, [r7, #495]	@ 0x1ef
 8001940:	e091      	b.n	8001a66 <BusServo_ParseResponse+0x1f6>
            uint8_t offset = 5 + i * 3;  // 数据从servo_rx_buf[5]开始，每个舵机3字节
 8001942:	f897 31ef 	ldrb.w	r3, [r7, #495]	@ 0x1ef
 8001946:	461a      	mov	r2, r3
 8001948:	0052      	lsls	r2, r2, #1
 800194a:	4413      	add	r3, r2
 800194c:	b2db      	uxtb	r3, r3
 800194e:	3305      	adds	r3, #5
 8001950:	f887 31eb 	strb.w	r3, [r7, #491]	@ 0x1eb
            
            // 检查数据边界
            if (offset + 2 <= data_length + 2) {  // 确保不超出数据长度
 8001954:	f897 21eb 	ldrb.w	r2, [r7, #491]	@ 0x1eb
 8001958:	f897 31ed 	ldrb.w	r3, [r7, #493]	@ 0x1ed
 800195c:	429a      	cmp	r2, r3
 800195e:	d86c      	bhi.n	8001a3a <BusServo_ParseResponse+0x1ca>
                uint8_t servo_id = servo_rx_buf[offset];      // 舵机ID
 8001960:	f897 31eb 	ldrb.w	r3, [r7, #491]	@ 0x1eb
 8001964:	4a55      	ldr	r2, [pc, #340]	@ (8001abc <BusServo_ParseResponse+0x24c>)
 8001966:	5cd3      	ldrb	r3, [r2, r3]
 8001968:	f887 31ea 	strb.w	r3, [r7, #490]	@ 0x1ea
                uint8_t pos_low = servo_rx_buf[offset + 1];   // 位置低位
 800196c:	f897 31eb 	ldrb.w	r3, [r7, #491]	@ 0x1eb
 8001970:	3301      	adds	r3, #1
 8001972:	4a52      	ldr	r2, [pc, #328]	@ (8001abc <BusServo_ParseResponse+0x24c>)
 8001974:	5cd3      	ldrb	r3, [r2, r3]
 8001976:	f887 31e9 	strb.w	r3, [r7, #489]	@ 0x1e9
                uint8_t pos_high = servo_rx_buf[offset + 2];  // 位置高位
 800197a:	f897 31eb 	ldrb.w	r3, [r7, #491]	@ 0x1eb
 800197e:	3302      	adds	r3, #2
 8001980:	4a4e      	ldr	r2, [pc, #312]	@ (8001abc <BusServo_ParseResponse+0x24c>)
 8001982:	5cd3      	ldrb	r3, [r2, r3]
 8001984:	f887 31e8 	strb.w	r3, [r7, #488]	@ 0x1e8
                uint16_t position = (pos_high << 8) | pos_low;
 8001988:	f897 31e8 	ldrb.w	r3, [r7, #488]	@ 0x1e8
 800198c:	b21b      	sxth	r3, r3
 800198e:	021b      	lsls	r3, r3, #8
 8001990:	b21a      	sxth	r2, r3
 8001992:	f897 31e9 	ldrb.w	r3, [r7, #489]	@ 0x1e9
 8001996:	b21b      	sxth	r3, r3
 8001998:	4313      	orrs	r3, r2
 800199a:	b21b      	sxth	r3, r3
 800199c:	f8a7 31e6 	strh.w	r3, [r7, #486]	@ 0x1e6
                
                char parse_msg[100];
                snprintf(parse_msg, sizeof(parse_msg), "Parse: ID=%d, low=0x%02X, high=0x%02X, pos=%d", 
 80019a0:	f897 41ea 	ldrb.w	r4, [r7, #490]	@ 0x1ea
 80019a4:	f897 31e9 	ldrb.w	r3, [r7, #489]	@ 0x1e9
 80019a8:	f897 21e8 	ldrb.w	r2, [r7, #488]	@ 0x1e8
 80019ac:	f8b7 11e6 	ldrh.w	r1, [r7, #486]	@ 0x1e6
 80019b0:	f107 00b8 	add.w	r0, r7, #184	@ 0xb8
 80019b4:	9102      	str	r1, [sp, #8]
 80019b6:	9201      	str	r2, [sp, #4]
 80019b8:	9300      	str	r3, [sp, #0]
 80019ba:	4623      	mov	r3, r4
 80019bc:	4a43      	ldr	r2, [pc, #268]	@ (8001acc <BusServo_ParseResponse+0x25c>)
 80019be:	2164      	movs	r1, #100	@ 0x64
 80019c0:	f01c fbf6 	bl	801e1b0 <sniprintf>
                         servo_id, pos_low, pos_high, position);
                cdc_debug_print(parse_msg);
 80019c4:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7fe fe85 	bl	80006d8 <cdc_debug_print>
                
                // 找到对应的舵机ID在请求数组中的位置并更新
                for (uint8_t j = 0; j < servo_id_count; j++) {
 80019ce:	2300      	movs	r3, #0
 80019d0:	f887 31ee 	strb.w	r3, [r7, #494]	@ 0x1ee
 80019d4:	e02a      	b.n	8001a2c <BusServo_ParseResponse+0x1bc>
                    if (servo_ids_ptr[j] == servo_id) {
 80019d6:	4b3e      	ldr	r3, [pc, #248]	@ (8001ad0 <BusServo_ParseResponse+0x260>)
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	f897 31ee 	ldrb.w	r3, [r7, #494]	@ 0x1ee
 80019de:	4413      	add	r3, r2
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	f897 21ea 	ldrb.w	r2, [r7, #490]	@ 0x1ea
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d11b      	bne.n	8001a22 <BusServo_ParseResponse+0x1b2>
                        servo_positions_ptr[j] = position;
 80019ea:	4b3a      	ldr	r3, [pc, #232]	@ (8001ad4 <BusServo_ParseResponse+0x264>)
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	f897 31ee 	ldrb.w	r3, [r7, #494]	@ 0x1ee
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	4413      	add	r3, r2
 80019f6:	f8b7 21e6 	ldrh.w	r2, [r7, #486]	@ 0x1e6
 80019fa:	801a      	strh	r2, [r3, #0]
                        char update_msg[80];
                        snprintf(update_msg, sizeof(update_msg), "Updated: positions[%d] = %d for servo ID %d", 
 80019fc:	f897 11ee 	ldrb.w	r1, [r7, #494]	@ 0x1ee
 8001a00:	f8b7 31e6 	ldrh.w	r3, [r7, #486]	@ 0x1e6
 8001a04:	f897 21ea 	ldrb.w	r2, [r7, #490]	@ 0x1ea
 8001a08:	1d38      	adds	r0, r7, #4
 8001a0a:	9201      	str	r2, [sp, #4]
 8001a0c:	9300      	str	r3, [sp, #0]
 8001a0e:	460b      	mov	r3, r1
 8001a10:	4a31      	ldr	r2, [pc, #196]	@ (8001ad8 <BusServo_ParseResponse+0x268>)
 8001a12:	2150      	movs	r1, #80	@ 0x50
 8001a14:	f01c fbcc 	bl	801e1b0 <sniprintf>
                                 j, position, servo_id);
                        cdc_debug_print(update_msg);
 8001a18:	1d3b      	adds	r3, r7, #4
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7fe fe5c 	bl	80006d8 <cdc_debug_print>
                        break;
 8001a20:	e01c      	b.n	8001a5c <BusServo_ParseResponse+0x1ec>
                for (uint8_t j = 0; j < servo_id_count; j++) {
 8001a22:	f897 31ee 	ldrb.w	r3, [r7, #494]	@ 0x1ee
 8001a26:	3301      	adds	r3, #1
 8001a28:	f887 31ee 	strb.w	r3, [r7, #494]	@ 0x1ee
 8001a2c:	4b25      	ldr	r3, [pc, #148]	@ (8001ac4 <BusServo_ParseResponse+0x254>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	f897 21ee 	ldrb.w	r2, [r7, #494]	@ 0x1ee
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d3ce      	bcc.n	80019d6 <BusServo_ParseResponse+0x166>
 8001a38:	e010      	b.n	8001a5c <BusServo_ParseResponse+0x1ec>
                    }
                }
            } else {
                char boundary_msg[80];
                snprintf(boundary_msg, sizeof(boundary_msg), "Data boundary exceeded at servo %d, offset=%d", i, offset);
 8001a3a:	f897 21ef 	ldrb.w	r2, [r7, #495]	@ 0x1ef
 8001a3e:	f897 31eb 	ldrb.w	r3, [r7, #491]	@ 0x1eb
 8001a42:	f107 00b8 	add.w	r0, r7, #184	@ 0xb8
 8001a46:	9300      	str	r3, [sp, #0]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	4a24      	ldr	r2, [pc, #144]	@ (8001adc <BusServo_ParseResponse+0x26c>)
 8001a4c:	2150      	movs	r1, #80	@ 0x50
 8001a4e:	f01c fbaf 	bl	801e1b0 <sniprintf>
                cdc_debug_print(boundary_msg);
 8001a52:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7fe fe3e 	bl	80006d8 <cdc_debug_print>
        for (uint8_t i = 0; i < returned_count; i++) {
 8001a5c:	f897 31ef 	ldrb.w	r3, [r7, #495]	@ 0x1ef
 8001a60:	3301      	adds	r3, #1
 8001a62:	f887 31ef 	strb.w	r3, [r7, #495]	@ 0x1ef
 8001a66:	f897 21ef 	ldrb.w	r2, [r7, #495]	@ 0x1ef
 8001a6a:	f897 31ec 	ldrb.w	r3, [r7, #492]	@ 0x1ec
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	f4ff af67 	bcc.w	8001942 <BusServo_ParseResponse+0xd2>
        servo_rx_buf[3] == CMD_MULT_SERVO_POS_READ) {
 8001a74:	e01a      	b.n	8001aac <BusServo_ParseResponse+0x23c>
            }
        }
    } else {
        char debug_msg[100];
        snprintf(debug_msg, sizeof(debug_msg), "Invalid frame: h1=0x%02X h2=0x%02X len=0x%02X cmd=0x%02X", 
                 servo_rx_buf[0], servo_rx_buf[1], servo_rx_buf[2], servo_rx_buf[3]);
 8001a76:	4b11      	ldr	r3, [pc, #68]	@ (8001abc <BusServo_ParseResponse+0x24c>)
 8001a78:	781b      	ldrb	r3, [r3, #0]
        snprintf(debug_msg, sizeof(debug_msg), "Invalid frame: h1=0x%02X h2=0x%02X len=0x%02X cmd=0x%02X", 
 8001a7a:	461c      	mov	r4, r3
                 servo_rx_buf[0], servo_rx_buf[1], servo_rx_buf[2], servo_rx_buf[3]);
 8001a7c:	4b0f      	ldr	r3, [pc, #60]	@ (8001abc <BusServo_ParseResponse+0x24c>)
 8001a7e:	785b      	ldrb	r3, [r3, #1]
        snprintf(debug_msg, sizeof(debug_msg), "Invalid frame: h1=0x%02X h2=0x%02X len=0x%02X cmd=0x%02X", 
 8001a80:	461a      	mov	r2, r3
                 servo_rx_buf[0], servo_rx_buf[1], servo_rx_buf[2], servo_rx_buf[3]);
 8001a82:	4b0e      	ldr	r3, [pc, #56]	@ (8001abc <BusServo_ParseResponse+0x24c>)
 8001a84:	789b      	ldrb	r3, [r3, #2]
        snprintf(debug_msg, sizeof(debug_msg), "Invalid frame: h1=0x%02X h2=0x%02X len=0x%02X cmd=0x%02X", 
 8001a86:	4619      	mov	r1, r3
                 servo_rx_buf[0], servo_rx_buf[1], servo_rx_buf[2], servo_rx_buf[3]);
 8001a88:	4b0c      	ldr	r3, [pc, #48]	@ (8001abc <BusServo_ParseResponse+0x24c>)
 8001a8a:	78db      	ldrb	r3, [r3, #3]
        snprintf(debug_msg, sizeof(debug_msg), "Invalid frame: h1=0x%02X h2=0x%02X len=0x%02X cmd=0x%02X", 
 8001a8c:	f107 00b8 	add.w	r0, r7, #184	@ 0xb8
 8001a90:	9302      	str	r3, [sp, #8]
 8001a92:	9101      	str	r1, [sp, #4]
 8001a94:	9200      	str	r2, [sp, #0]
 8001a96:	4623      	mov	r3, r4
 8001a98:	4a11      	ldr	r2, [pc, #68]	@ (8001ae0 <BusServo_ParseResponse+0x270>)
 8001a9a:	2164      	movs	r1, #100	@ 0x64
 8001a9c:	f01c fb88 	bl	801e1b0 <sniprintf>
        cdc_debug_print(debug_msg);
 8001aa0:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7fe fe17 	bl	80006d8 <cdc_debug_print>
    }
}
 8001aaa:	bf00      	nop
 8001aac:	bf00      	nop
 8001aae:	f507 77fe 	add.w	r7, r7, #508	@ 0x1fc
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd90      	pop	{r4, r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	0801f9fc 	.word	0x0801f9fc
 8001abc:	20000268 	.word	0x20000268
 8001ac0:	0801f940 	.word	0x0801f940
 8001ac4:	20000378 	.word	0x20000378
 8001ac8:	0801fa08 	.word	0x0801fa08
 8001acc:	0801fa44 	.word	0x0801fa44
 8001ad0:	20000374 	.word	0x20000374
 8001ad4:	2000037c 	.word	0x2000037c
 8001ad8:	0801fa74 	.word	0x0801fa74
 8001adc:	0801faa0 	.word	0x0801faa0
 8001ae0:	0801fad0 	.word	0x0801fad0

08001ae4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	607b      	str	r3, [r7, #4]
 8001aee:	4b17      	ldr	r3, [pc, #92]	@ (8001b4c <MX_DMA_Init+0x68>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af2:	4a16      	ldr	r2, [pc, #88]	@ (8001b4c <MX_DMA_Init+0x68>)
 8001af4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001af8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001afa:	4b14      	ldr	r3, [pc, #80]	@ (8001b4c <MX_DMA_Init+0x68>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b02:	607b      	str	r3, [r7, #4]
 8001b04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	603b      	str	r3, [r7, #0]
 8001b0a:	4b10      	ldr	r3, [pc, #64]	@ (8001b4c <MX_DMA_Init+0x68>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b0e:	4a0f      	ldr	r2, [pc, #60]	@ (8001b4c <MX_DMA_Init+0x68>)
 8001b10:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001b14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b16:	4b0d      	ldr	r3, [pc, #52]	@ (8001b4c <MX_DMA_Init+0x68>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b1e:	603b      	str	r3, [r7, #0]
 8001b20:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001b22:	2200      	movs	r2, #0
 8001b24:	2105      	movs	r1, #5
 8001b26:	200c      	movs	r0, #12
 8001b28:	f003 f970 	bl	8004e0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001b2c:	200c      	movs	r0, #12
 8001b2e:	f003 f989 	bl	8004e44 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8001b32:	2200      	movs	r2, #0
 8001b34:	2105      	movs	r1, #5
 8001b36:	2039      	movs	r0, #57	@ 0x39
 8001b38:	f003 f968 	bl	8004e0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001b3c:	2039      	movs	r0, #57	@ 0x39
 8001b3e:	f003 f981 	bl	8004e44 <HAL_NVIC_EnableIRQ>

}
 8001b42:	bf00      	nop
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40023800 	.word	0x40023800

08001b50 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	4a07      	ldr	r2, [pc, #28]	@ (8001b7c <vApplicationGetIdleTaskMemory+0x2c>)
 8001b60:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	4a06      	ldr	r2, [pc, #24]	@ (8001b80 <vApplicationGetIdleTaskMemory+0x30>)
 8001b66:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2280      	movs	r2, #128	@ 0x80
 8001b6c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001b6e:	bf00      	nop
 8001b70:	3714      	adds	r7, #20
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	200003cc 	.word	0x200003cc
 8001b80:	2000046c 	.word	0x2000046c

08001b84 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001b84:	b5b0      	push	{r4, r5, r7, lr}
 8001b86:	b088      	sub	sp, #32
 8001b88:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 8001b8a:	4b0a      	ldr	r3, [pc, #40]	@ (8001bb4 <MX_FREERTOS_Init+0x30>)
 8001b8c:	1d3c      	adds	r4, r7, #4
 8001b8e:	461d      	mov	r5, r3
 8001b90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b94:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b98:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001b9c:	1d3b      	adds	r3, r7, #4
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f00d fdb1 	bl	800f708 <osThreadCreate>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	4a03      	ldr	r2, [pc, #12]	@ (8001bb8 <MX_FREERTOS_Init+0x34>)
 8001baa:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001bac:	bf00      	nop
 8001bae:	3720      	adds	r7, #32
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bdb0      	pop	{r4, r5, r7, pc}
 8001bb4:	0801fd4c 	.word	0x0801fd4c
 8001bb8:	200003c8 	.word	0x200003c8

08001bbc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001bc4:	f01b fc40 	bl	801d448 <MX_USB_DEVICE_Init>

  /* init code for LWIP */
  MX_LWIP_Init();
 8001bc8:	f00a fadc 	bl	800c184 <MX_LWIP_Init>
  /* USER CODE BEGIN StartDefaultTask */
  modbus_tcp_init();
 8001bcc:	f001 fa34 	bl	8003038 <modbus_tcp_init>
  app_business_init();
 8001bd0:	f7fe fcec 	bl	80005ac <app_business_init>
  
  /* Infinite loop */
  for(;;)
  {
    // 每100ms执行一次业务逻辑处理
    if (business_cycle_counter % BUSINESS_PROCESS_CYCLE_MS == 0) {
 8001bd4:	4b1d      	ldr	r3, [pc, #116]	@ (8001c4c <StartDefaultTask+0x90>)
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	4b1d      	ldr	r3, [pc, #116]	@ (8001c50 <StartDefaultTask+0x94>)
 8001bda:	fba3 1302 	umull	r1, r3, r3, r2
 8001bde:	095b      	lsrs	r3, r3, #5
 8001be0:	2164      	movs	r1, #100	@ 0x64
 8001be2:	fb01 f303 	mul.w	r3, r1, r3
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d101      	bne.n	8001bf0 <StartDefaultTask+0x34>
      app_business_process();
 8001bec:	f7fe fd68 	bl	80006c0 <app_business_process>
    }
    
    // Keep alive 消息每1000ms（约1秒）发送一次 - 暂时注释掉避免调试信息过载
    
    if (keep_alive_counter % 1000 == 0) {
 8001bf0:	4b18      	ldr	r3, [pc, #96]	@ (8001c54 <StartDefaultTask+0x98>)
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	4b18      	ldr	r3, [pc, #96]	@ (8001c58 <StartDefaultTask+0x9c>)
 8001bf6:	fba3 1302 	umull	r1, r3, r3, r2
 8001bfa:	099b      	lsrs	r3, r3, #6
 8001bfc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001c00:	fb01 f303 	mul.w	r3, r1, r3
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d111      	bne.n	8001c2e <StartDefaultTask+0x72>
      int len = snprintf(debug_buf, sizeof(debug_buf), "Keep Alive: %lu\r\n", keep_alive_counter / 1000);
 8001c0a:	4b12      	ldr	r3, [pc, #72]	@ (8001c54 <StartDefaultTask+0x98>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a12      	ldr	r2, [pc, #72]	@ (8001c58 <StartDefaultTask+0x9c>)
 8001c10:	fba2 2303 	umull	r2, r3, r2, r3
 8001c14:	099b      	lsrs	r3, r3, #6
 8001c16:	4a11      	ldr	r2, [pc, #68]	@ (8001c5c <StartDefaultTask+0xa0>)
 8001c18:	2140      	movs	r1, #64	@ 0x40
 8001c1a:	4811      	ldr	r0, [pc, #68]	@ (8001c60 <StartDefaultTask+0xa4>)
 8001c1c:	f01c fac8 	bl	801e1b0 <sniprintf>
 8001c20:	60f8      	str	r0, [r7, #12]
      CDC_Transmit_FS((uint8_t*)debug_buf, len);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	4619      	mov	r1, r3
 8001c28:	480d      	ldr	r0, [pc, #52]	@ (8001c60 <StartDefaultTask+0xa4>)
 8001c2a:	f01b fccb 	bl	801d5c4 <CDC_Transmit_FS>
    }
    
    
    business_cycle_counter++;
 8001c2e:	4b07      	ldr	r3, [pc, #28]	@ (8001c4c <StartDefaultTask+0x90>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	3301      	adds	r3, #1
 8001c34:	4a05      	ldr	r2, [pc, #20]	@ (8001c4c <StartDefaultTask+0x90>)
 8001c36:	6013      	str	r3, [r2, #0]
    keep_alive_counter++;
 8001c38:	4b06      	ldr	r3, [pc, #24]	@ (8001c54 <StartDefaultTask+0x98>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	4a05      	ldr	r2, [pc, #20]	@ (8001c54 <StartDefaultTask+0x98>)
 8001c40:	6013      	str	r3, [r2, #0]
    osDelay(1);  // 1ms延时
 8001c42:	2001      	movs	r0, #1
 8001c44:	f00d fdac 	bl	800f7a0 <osDelay>
    if (business_cycle_counter % BUSINESS_PROCESS_CYCLE_MS == 0) {
 8001c48:	e7c4      	b.n	8001bd4 <StartDefaultTask+0x18>
 8001c4a:	bf00      	nop
 8001c4c:	20000380 	.word	0x20000380
 8001c50:	51eb851f 	.word	0x51eb851f
 8001c54:	200003c4 	.word	0x200003c4
 8001c58:	10624dd3 	.word	0x10624dd3
 8001c5c:	0801fd68 	.word	0x0801fd68
 8001c60:	20000384 	.word	0x20000384

08001c64 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram3;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b088      	sub	sp, #32
 8001c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001c6a:	1d3b      	adds	r3, r7, #4
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	605a      	str	r2, [r3, #4]
 8001c72:	609a      	str	r2, [r3, #8]
 8001c74:	60da      	str	r2, [r3, #12]
 8001c76:	611a      	str	r2, [r3, #16]
 8001c78:	615a      	str	r2, [r3, #20]
 8001c7a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM3 memory initialization sequence
  */
  hsram3.Instance = FSMC_NORSRAM_DEVICE;
 8001c7c:	4b26      	ldr	r3, [pc, #152]	@ (8001d18 <MX_FSMC_Init+0xb4>)
 8001c7e:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 8001c82:	601a      	str	r2, [r3, #0]
  hsram3.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001c84:	4b24      	ldr	r3, [pc, #144]	@ (8001d18 <MX_FSMC_Init+0xb4>)
 8001c86:	4a25      	ldr	r2, [pc, #148]	@ (8001d1c <MX_FSMC_Init+0xb8>)
 8001c88:	605a      	str	r2, [r3, #4]
  /* hsram3.Init */
  hsram3.Init.NSBank = FSMC_NORSRAM_BANK3;
 8001c8a:	4b23      	ldr	r3, [pc, #140]	@ (8001d18 <MX_FSMC_Init+0xb4>)
 8001c8c:	2204      	movs	r2, #4
 8001c8e:	609a      	str	r2, [r3, #8]
  hsram3.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001c90:	4b21      	ldr	r3, [pc, #132]	@ (8001d18 <MX_FSMC_Init+0xb4>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	60da      	str	r2, [r3, #12]
  hsram3.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001c96:	4b20      	ldr	r3, [pc, #128]	@ (8001d18 <MX_FSMC_Init+0xb4>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	611a      	str	r2, [r3, #16]
  hsram3.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001c9c:	4b1e      	ldr	r3, [pc, #120]	@ (8001d18 <MX_FSMC_Init+0xb4>)
 8001c9e:	2210      	movs	r2, #16
 8001ca0:	615a      	str	r2, [r3, #20]
  hsram3.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001ca2:	4b1d      	ldr	r3, [pc, #116]	@ (8001d18 <MX_FSMC_Init+0xb4>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	619a      	str	r2, [r3, #24]
  hsram3.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001ca8:	4b1b      	ldr	r3, [pc, #108]	@ (8001d18 <MX_FSMC_Init+0xb4>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	61da      	str	r2, [r3, #28]
  hsram3.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001cae:	4b1a      	ldr	r3, [pc, #104]	@ (8001d18 <MX_FSMC_Init+0xb4>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	621a      	str	r2, [r3, #32]
  hsram3.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001cb4:	4b18      	ldr	r3, [pc, #96]	@ (8001d18 <MX_FSMC_Init+0xb4>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram3.Init.WriteOperation = FSMC_WRITE_OPERATION_DISABLE;
 8001cba:	4b17      	ldr	r3, [pc, #92]	@ (8001d18 <MX_FSMC_Init+0xb4>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram3.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001cc0:	4b15      	ldr	r3, [pc, #84]	@ (8001d18 <MX_FSMC_Init+0xb4>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram3.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8001cc6:	4b14      	ldr	r3, [pc, #80]	@ (8001d18 <MX_FSMC_Init+0xb4>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram3.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001ccc:	4b12      	ldr	r3, [pc, #72]	@ (8001d18 <MX_FSMC_Init+0xb4>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram3.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001cd2:	4b11      	ldr	r3, [pc, #68]	@ (8001d18 <MX_FSMC_Init+0xb4>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram3.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001cd8:	4b0f      	ldr	r3, [pc, #60]	@ (8001d18 <MX_FSMC_Init+0xb4>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8001cde:	230f      	movs	r3, #15
 8001ce0:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001ce2:	230f      	movs	r3, #15
 8001ce4:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8001ce6:	23ff      	movs	r3, #255	@ 0xff
 8001ce8:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8001cea:	230f      	movs	r3, #15
 8001cec:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001cee:	2310      	movs	r3, #16
 8001cf0:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001cf2:	2311      	movs	r3, #17
 8001cf4:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram3, &Timing, NULL) != HAL_OK)
 8001cfa:	1d3b      	adds	r3, r7, #4
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4805      	ldr	r0, [pc, #20]	@ (8001d18 <MX_FSMC_Init+0xb4>)
 8001d02:	f006 ff75 	bl	8008bf0 <HAL_SRAM_Init>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <MX_FSMC_Init+0xac>
  {
    Error_Handler( );
 8001d0c:	f000 f996 	bl	800203c <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001d10:	bf00      	nop
 8001d12:	3720      	adds	r7, #32
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	2000066c 	.word	0x2000066c
 8001d1c:	a0000104 	.word	0xa0000104

08001d20 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d26:	1d3b      	adds	r3, r7, #4
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	605a      	str	r2, [r3, #4]
 8001d2e:	609a      	str	r2, [r3, #8]
 8001d30:	60da      	str	r2, [r3, #12]
 8001d32:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001d34:	4b2c      	ldr	r3, [pc, #176]	@ (8001de8 <HAL_FSMC_MspInit+0xc8>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d151      	bne.n	8001de0 <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 8001d3c:	4b2a      	ldr	r3, [pc, #168]	@ (8001de8 <HAL_FSMC_MspInit+0xc8>)
 8001d3e:	2201      	movs	r2, #1
 8001d40:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	603b      	str	r3, [r7, #0]
 8001d46:	4b29      	ldr	r3, [pc, #164]	@ (8001dec <HAL_FSMC_MspInit+0xcc>)
 8001d48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d4a:	4a28      	ldr	r2, [pc, #160]	@ (8001dec <HAL_FSMC_MspInit+0xcc>)
 8001d4c:	f043 0301 	orr.w	r3, r3, #1
 8001d50:	6393      	str	r3, [r2, #56]	@ 0x38
 8001d52:	4b26      	ldr	r3, [pc, #152]	@ (8001dec <HAL_FSMC_MspInit+0xcc>)
 8001d54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	603b      	str	r3, [r7, #0]
 8001d5c:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PG10   ------> FSMC_NE3
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001d5e:	f24f 033f 	movw	r3, #61503	@ 0xf03f
 8001d62:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d64:	2302      	movs	r3, #2
 8001d66:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001d70:	230c      	movs	r3, #12
 8001d72:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d74:	1d3b      	adds	r3, r7, #4
 8001d76:	4619      	mov	r1, r3
 8001d78:	481d      	ldr	r0, [pc, #116]	@ (8001df0 <HAL_FSMC_MspInit+0xd0>)
 8001d7a:	f004 fea7 	bl	8006acc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001d7e:	f240 433f 	movw	r3, #1087	@ 0x43f
 8001d82:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d84:	2302      	movs	r3, #2
 8001d86:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001d90:	230c      	movs	r3, #12
 8001d92:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d94:	1d3b      	adds	r3, r7, #4
 8001d96:	4619      	mov	r1, r3
 8001d98:	4816      	ldr	r0, [pc, #88]	@ (8001df4 <HAL_FSMC_MspInit+0xd4>)
 8001d9a:	f004 fe97 	bl	8006acc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001d9e:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8001da2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da4:	2302      	movs	r3, #2
 8001da6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da8:	2300      	movs	r3, #0
 8001daa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dac:	2303      	movs	r3, #3
 8001dae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001db0:	230c      	movs	r3, #12
 8001db2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001db4:	1d3b      	adds	r3, r7, #4
 8001db6:	4619      	mov	r1, r3
 8001db8:	480f      	ldr	r0, [pc, #60]	@ (8001df8 <HAL_FSMC_MspInit+0xd8>)
 8001dba:	f004 fe87 	bl	8006acc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001dbe:	f64f 7333 	movw	r3, #65331	@ 0xff33
 8001dc2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001dd0:	230c      	movs	r3, #12
 8001dd2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dd4:	1d3b      	adds	r3, r7, #4
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	4808      	ldr	r0, [pc, #32]	@ (8001dfc <HAL_FSMC_MspInit+0xdc>)
 8001dda:	f004 fe77 	bl	8006acc <HAL_GPIO_Init>
 8001dde:	e000      	b.n	8001de2 <HAL_FSMC_MspInit+0xc2>
    return;
 8001de0:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001de2:	3718      	adds	r7, #24
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	200006bc 	.word	0x200006bc
 8001dec:	40023800 	.word	0x40023800
 8001df0:	40021400 	.word	0x40021400
 8001df4:	40021800 	.word	0x40021800
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	40020c00 	.word	0x40020c00

08001e00 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001e08:	f7ff ff8a 	bl	8001d20 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001e0c:	bf00      	nop
 8001e0e:	3708      	adds	r7, #8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b089      	sub	sp, #36	@ 0x24
 8001e18:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	61fb      	str	r3, [r7, #28]
 8001e1e:	4b3a      	ldr	r3, [pc, #232]	@ (8001f08 <MX_GPIO_Init+0xf4>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e22:	4a39      	ldr	r2, [pc, #228]	@ (8001f08 <MX_GPIO_Init+0xf4>)
 8001e24:	f043 0304 	orr.w	r3, r3, #4
 8001e28:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e2a:	4b37      	ldr	r3, [pc, #220]	@ (8001f08 <MX_GPIO_Init+0xf4>)
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e2e:	f003 0304 	and.w	r3, r3, #4
 8001e32:	61fb      	str	r3, [r7, #28]
 8001e34:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	61bb      	str	r3, [r7, #24]
 8001e3a:	4b33      	ldr	r3, [pc, #204]	@ (8001f08 <MX_GPIO_Init+0xf4>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e3e:	4a32      	ldr	r2, [pc, #200]	@ (8001f08 <MX_GPIO_Init+0xf4>)
 8001e40:	f043 0320 	orr.w	r3, r3, #32
 8001e44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e46:	4b30      	ldr	r3, [pc, #192]	@ (8001f08 <MX_GPIO_Init+0xf4>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e4a:	f003 0320 	and.w	r3, r3, #32
 8001e4e:	61bb      	str	r3, [r7, #24]
 8001e50:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	617b      	str	r3, [r7, #20]
 8001e56:	4b2c      	ldr	r3, [pc, #176]	@ (8001f08 <MX_GPIO_Init+0xf4>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e5a:	4a2b      	ldr	r2, [pc, #172]	@ (8001f08 <MX_GPIO_Init+0xf4>)
 8001e5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e60:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e62:	4b29      	ldr	r3, [pc, #164]	@ (8001f08 <MX_GPIO_Init+0xf4>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e6a:	617b      	str	r3, [r7, #20]
 8001e6c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	613b      	str	r3, [r7, #16]
 8001e72:	4b25      	ldr	r3, [pc, #148]	@ (8001f08 <MX_GPIO_Init+0xf4>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e76:	4a24      	ldr	r2, [pc, #144]	@ (8001f08 <MX_GPIO_Init+0xf4>)
 8001e78:	f043 0301 	orr.w	r3, r3, #1
 8001e7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e7e:	4b22      	ldr	r3, [pc, #136]	@ (8001f08 <MX_GPIO_Init+0xf4>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	613b      	str	r3, [r7, #16]
 8001e88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	60fb      	str	r3, [r7, #12]
 8001e8e:	4b1e      	ldr	r3, [pc, #120]	@ (8001f08 <MX_GPIO_Init+0xf4>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e92:	4a1d      	ldr	r2, [pc, #116]	@ (8001f08 <MX_GPIO_Init+0xf4>)
 8001e94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e98:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e9a:	4b1b      	ldr	r3, [pc, #108]	@ (8001f08 <MX_GPIO_Init+0xf4>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ea2:	60fb      	str	r3, [r7, #12]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	60bb      	str	r3, [r7, #8]
 8001eaa:	4b17      	ldr	r3, [pc, #92]	@ (8001f08 <MX_GPIO_Init+0xf4>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eae:	4a16      	ldr	r2, [pc, #88]	@ (8001f08 <MX_GPIO_Init+0xf4>)
 8001eb0:	f043 0310 	orr.w	r3, r3, #16
 8001eb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eb6:	4b14      	ldr	r3, [pc, #80]	@ (8001f08 <MX_GPIO_Init+0xf4>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eba:	f003 0310 	and.w	r3, r3, #16
 8001ebe:	60bb      	str	r3, [r7, #8]
 8001ec0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	607b      	str	r3, [r7, #4]
 8001ec6:	4b10      	ldr	r3, [pc, #64]	@ (8001f08 <MX_GPIO_Init+0xf4>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eca:	4a0f      	ldr	r2, [pc, #60]	@ (8001f08 <MX_GPIO_Init+0xf4>)
 8001ecc:	f043 0302 	orr.w	r3, r3, #2
 8001ed0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ed2:	4b0d      	ldr	r3, [pc, #52]	@ (8001f08 <MX_GPIO_Init+0xf4>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	607b      	str	r3, [r7, #4]
 8001edc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ede:	2300      	movs	r3, #0
 8001ee0:	603b      	str	r3, [r7, #0]
 8001ee2:	4b09      	ldr	r3, [pc, #36]	@ (8001f08 <MX_GPIO_Init+0xf4>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee6:	4a08      	ldr	r2, [pc, #32]	@ (8001f08 <MX_GPIO_Init+0xf4>)
 8001ee8:	f043 0308 	orr.w	r3, r3, #8
 8001eec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eee:	4b06      	ldr	r3, [pc, #24]	@ (8001f08 <MX_GPIO_Init+0xf4>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef2:	f003 0308 	and.w	r3, r3, #8
 8001ef6:	603b      	str	r3, [r7, #0]
 8001ef8:	683b      	ldr	r3, [r7, #0]

}
 8001efa:	bf00      	nop
 8001efc:	3724      	adds	r7, #36	@ 0x24
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	40023800 	.word	0x40023800

08001f0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f10:	f002 fe5e 	bl	8004bd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f14:	f000 f816 	bl	8001f44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f18:	f7ff ff7c 	bl	8001e14 <MX_GPIO_Init>
  MX_DMA_Init();
 8001f1c:	f7ff fde2 	bl	8001ae4 <MX_DMA_Init>
  MX_FSMC_Init();
 8001f20:	f7ff fea0 	bl	8001c64 <MX_FSMC_Init>
  MX_USART1_UART_Init();
 8001f24:	f002 faaa 	bl	800447c <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8001f28:	f002 fafc 	bl	8004524 <MX_USART6_UART_Init>
  MX_TIM7_Init();
 8001f2c:	f002 fa48 	bl	80043c0 <MX_TIM7_Init>
  MX_USART3_UART_Init();
 8001f30:	f002 face 	bl	80044d0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001f34:	f7ff fe26 	bl	8001b84 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001f38:	f00d fbcf 	bl	800f6da <osKernelStart>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_Delay(100);
 8001f3c:	2064      	movs	r0, #100	@ 0x64
 8001f3e:	f002 fe89 	bl	8004c54 <HAL_Delay>
 8001f42:	e7fb      	b.n	8001f3c <main+0x30>

08001f44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b094      	sub	sp, #80	@ 0x50
 8001f48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f4a:	f107 0320 	add.w	r3, r7, #32
 8001f4e:	2230      	movs	r2, #48	@ 0x30
 8001f50:	2100      	movs	r1, #0
 8001f52:	4618      	mov	r0, r3
 8001f54:	f01c f9cf 	bl	801e2f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f58:	f107 030c 	add.w	r3, r7, #12
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	605a      	str	r2, [r3, #4]
 8001f62:	609a      	str	r2, [r3, #8]
 8001f64:	60da      	str	r2, [r3, #12]
 8001f66:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f68:	2300      	movs	r3, #0
 8001f6a:	60bb      	str	r3, [r7, #8]
 8001f6c:	4b28      	ldr	r3, [pc, #160]	@ (8002010 <SystemClock_Config+0xcc>)
 8001f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f70:	4a27      	ldr	r2, [pc, #156]	@ (8002010 <SystemClock_Config+0xcc>)
 8001f72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f76:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f78:	4b25      	ldr	r3, [pc, #148]	@ (8002010 <SystemClock_Config+0xcc>)
 8001f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f80:	60bb      	str	r3, [r7, #8]
 8001f82:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f84:	2300      	movs	r3, #0
 8001f86:	607b      	str	r3, [r7, #4]
 8001f88:	4b22      	ldr	r3, [pc, #136]	@ (8002014 <SystemClock_Config+0xd0>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a21      	ldr	r2, [pc, #132]	@ (8002014 <SystemClock_Config+0xd0>)
 8001f8e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f92:	6013      	str	r3, [r2, #0]
 8001f94:	4b1f      	ldr	r3, [pc, #124]	@ (8002014 <SystemClock_Config+0xd0>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f9c:	607b      	str	r3, [r7, #4]
 8001f9e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001fa4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001fa8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001faa:	2302      	movs	r3, #2
 8001fac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001fae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001fb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001fb4:	2319      	movs	r3, #25
 8001fb6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001fb8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001fbc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001fc2:	2307      	movs	r3, #7
 8001fc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fc6:	f107 0320 	add.w	r3, r7, #32
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f006 f986 	bl	80082dc <HAL_RCC_OscConfig>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001fd6:	f000 f831 	bl	800203c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fda:	230f      	movs	r3, #15
 8001fdc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fde:	2302      	movs	r3, #2
 8001fe0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001fe6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001fea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001fec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ff0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001ff2:	f107 030c 	add.w	r3, r7, #12
 8001ff6:	2105      	movs	r1, #5
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f006 fbe7 	bl	80087cc <HAL_RCC_ClockConfig>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d001      	beq.n	8002008 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002004:	f000 f81a 	bl	800203c <Error_Handler>
  }
}
 8002008:	bf00      	nop
 800200a:	3750      	adds	r7, #80	@ 0x50
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	40023800 	.word	0x40023800
 8002014:	40007000 	.word	0x40007000

08002018 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a04      	ldr	r2, [pc, #16]	@ (8002038 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d101      	bne.n	800202e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800202a:	f002 fdf3 	bl	8004c14 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800202e:	bf00      	nop
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	40002000 	.word	0x40002000

0800203c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002040:	b672      	cpsid	i
}
 8002042:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002044:	bf00      	nop
 8002046:	e7fd      	b.n	8002044 <Error_Handler+0x8>

08002048 <cdc_debug_log>:
#include <string.h>
#include "usbd_cdc_if.h"  // 包含CDC传输函数

// 简单的调试日志函数，输出到CDC
static void cdc_debug_log(const char* tag, const char* message)
{
 8002048:	b480      	push	{r7}
 800204a:	b0a5      	sub	sp, #148	@ 0x94
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
    char debug_buf[128];
    uint32_t len = 0;
 8002052:	2300      	movs	r3, #0
 8002054:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    
    // 手动拼接字符串，避免使用sprintf
    const char* ptr;
    
    // 复制tag
    ptr = tag;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    while (*ptr && len < 20) {
 800205e:	e00e      	b.n	800207e <cdc_debug_log+0x36>
        debug_buf[len++] = *ptr++;
 8002060:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8002064:	1c53      	adds	r3, r2, #1
 8002066:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800206a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800206e:	1c59      	adds	r1, r3, #1
 8002070:	f8c7 108c 	str.w	r1, [r7, #140]	@ 0x8c
 8002074:	7812      	ldrb	r2, [r2, #0]
 8002076:	3390      	adds	r3, #144	@ 0x90
 8002078:	443b      	add	r3, r7
 800207a:	f803 2c88 	strb.w	r2, [r3, #-136]
    while (*ptr && len < 20) {
 800207e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d003      	beq.n	8002090 <cdc_debug_log+0x48>
 8002088:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800208c:	2b13      	cmp	r3, #19
 800208e:	d9e7      	bls.n	8002060 <cdc_debug_log+0x18>
    }
    
    // 添加分隔符
    debug_buf[len++] = ':';
 8002090:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002094:	1c5a      	adds	r2, r3, #1
 8002096:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800209a:	3390      	adds	r3, #144	@ 0x90
 800209c:	443b      	add	r3, r7
 800209e:	223a      	movs	r2, #58	@ 0x3a
 80020a0:	f803 2c88 	strb.w	r2, [r3, #-136]
    debug_buf[len++] = ' ';
 80020a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80020a8:	1c5a      	adds	r2, r3, #1
 80020aa:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80020ae:	3390      	adds	r3, #144	@ 0x90
 80020b0:	443b      	add	r3, r7
 80020b2:	2220      	movs	r2, #32
 80020b4:	f803 2c88 	strb.w	r2, [r3, #-136]
    
    // 复制message
    ptr = message;
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    while (*ptr && len < 120) {
 80020be:	e00e      	b.n	80020de <cdc_debug_log+0x96>
        debug_buf[len++] = *ptr++;
 80020c0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80020c4:	1c53      	adds	r3, r2, #1
 80020c6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80020ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80020ce:	1c59      	adds	r1, r3, #1
 80020d0:	f8c7 108c 	str.w	r1, [r7, #140]	@ 0x8c
 80020d4:	7812      	ldrb	r2, [r2, #0]
 80020d6:	3390      	adds	r3, #144	@ 0x90
 80020d8:	443b      	add	r3, r7
 80020da:	f803 2c88 	strb.w	r2, [r3, #-136]
    while (*ptr && len < 120) {
 80020de:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d003      	beq.n	80020f0 <cdc_debug_log+0xa8>
 80020e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80020ec:	2b77      	cmp	r3, #119	@ 0x77
 80020ee:	d9e7      	bls.n	80020c0 <cdc_debug_log+0x78>
    }
    
    // 添加换行
    debug_buf[len++] = '\r';
 80020f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80020f4:	1c5a      	adds	r2, r3, #1
 80020f6:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80020fa:	3390      	adds	r3, #144	@ 0x90
 80020fc:	443b      	add	r3, r7
 80020fe:	220d      	movs	r2, #13
 8002100:	f803 2c88 	strb.w	r2, [r3, #-136]
    debug_buf[len++] = '\n';
 8002104:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002108:	1c5a      	adds	r2, r3, #1
 800210a:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800210e:	3390      	adds	r3, #144	@ 0x90
 8002110:	443b      	add	r3, r7
 8002112:	220a      	movs	r2, #10
 8002114:	f803 2c88 	strb.w	r2, [r3, #-136]
    
    // 通过CDC发送
    /*if (len < sizeof(debug_buf)) {
        CDC_Transmit_FS((uint8_t*)debug_buf, len);
    }*/
}
 8002118:	bf00      	nop
 800211a:	3794      	adds	r7, #148	@ 0x94
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <int_to_str>:

// 简单的整数转字符串函数
static void int_to_str(int value, char* str, int max_len)
{
 8002124:	b480      	push	{r7}
 8002126:	b08b      	sub	sp, #44	@ 0x2c
 8002128:	af00      	add	r7, sp, #0
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	60b9      	str	r1, [r7, #8]
 800212e:	607a      	str	r2, [r7, #4]
    int i = 0;
 8002130:	2300      	movs	r3, #0
 8002132:	627b      	str	r3, [r7, #36]	@ 0x24
    int is_negative = 0;
 8002134:	2300      	movs	r3, #0
 8002136:	623b      	str	r3, [r7, #32]
    
    if (value < 0) {
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2b00      	cmp	r3, #0
 800213c:	da04      	bge.n	8002148 <int_to_str+0x24>
        is_negative = 1;
 800213e:	2301      	movs	r3, #1
 8002140:	623b      	str	r3, [r7, #32]
        value = -value;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	425b      	negs	r3, r3
 8002146:	60fb      	str	r3, [r7, #12]
    }
    
    // 处理特殊情况0
    if (value == 0) {
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d12b      	bne.n	80021a6 <int_to_str+0x82>
        str[i++] = '0';
 800214e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002150:	1c5a      	adds	r2, r3, #1
 8002152:	627a      	str	r2, [r7, #36]	@ 0x24
 8002154:	461a      	mov	r2, r3
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	4413      	add	r3, r2
 800215a:	2230      	movs	r2, #48	@ 0x30
 800215c:	701a      	strb	r2, [r3, #0]
        str[i] = '\0';
 800215e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002160:	68ba      	ldr	r2, [r7, #8]
 8002162:	4413      	add	r3, r2
 8002164:	2200      	movs	r2, #0
 8002166:	701a      	strb	r2, [r3, #0]
        return;
 8002168:	e05c      	b.n	8002224 <int_to_str+0x100>
    }
    
    // 转换数字
    while (value > 0 && i < max_len - 2) {
        str[i++] = '0' + (value % 10);
 800216a:	68fa      	ldr	r2, [r7, #12]
 800216c:	4b30      	ldr	r3, [pc, #192]	@ (8002230 <int_to_str+0x10c>)
 800216e:	fb83 1302 	smull	r1, r3, r3, r2
 8002172:	1099      	asrs	r1, r3, #2
 8002174:	17d3      	asrs	r3, r2, #31
 8002176:	1ac9      	subs	r1, r1, r3
 8002178:	460b      	mov	r3, r1
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	440b      	add	r3, r1
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	1ad1      	subs	r1, r2, r3
 8002182:	b2ca      	uxtb	r2, r1
 8002184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002186:	1c59      	adds	r1, r3, #1
 8002188:	6279      	str	r1, [r7, #36]	@ 0x24
 800218a:	4619      	mov	r1, r3
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	440b      	add	r3, r1
 8002190:	3230      	adds	r2, #48	@ 0x30
 8002192:	b2d2      	uxtb	r2, r2
 8002194:	701a      	strb	r2, [r3, #0]
        value /= 10;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	4a25      	ldr	r2, [pc, #148]	@ (8002230 <int_to_str+0x10c>)
 800219a:	fb82 1203 	smull	r1, r2, r2, r3
 800219e:	1092      	asrs	r2, r2, #2
 80021a0:	17db      	asrs	r3, r3, #31
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	60fb      	str	r3, [r7, #12]
    while (value > 0 && i < max_len - 2) {
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	dd04      	ble.n	80021b6 <int_to_str+0x92>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	3b02      	subs	r3, #2
 80021b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021b2:	429a      	cmp	r2, r3
 80021b4:	dbd9      	blt.n	800216a <int_to_str+0x46>
    }
    
    // 添加负号
    if (is_negative && i < max_len - 1) {
 80021b6:	6a3b      	ldr	r3, [r7, #32]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d00c      	beq.n	80021d6 <int_to_str+0xb2>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	3b01      	subs	r3, #1
 80021c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021c2:	429a      	cmp	r2, r3
 80021c4:	da07      	bge.n	80021d6 <int_to_str+0xb2>
        str[i++] = '-';
 80021c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c8:	1c5a      	adds	r2, r3, #1
 80021ca:	627a      	str	r2, [r7, #36]	@ 0x24
 80021cc:	461a      	mov	r2, r3
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	4413      	add	r3, r2
 80021d2:	222d      	movs	r2, #45	@ 0x2d
 80021d4:	701a      	strb	r2, [r3, #0]
    }
    
    str[i] = '\0';
 80021d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d8:	68ba      	ldr	r2, [r7, #8]
 80021da:	4413      	add	r3, r2
 80021dc:	2200      	movs	r2, #0
 80021de:	701a      	strb	r2, [r3, #0]
    
    // 反转字符串
    int start = 0;
 80021e0:	2300      	movs	r3, #0
 80021e2:	61fb      	str	r3, [r7, #28]
    int end = i - 1;
 80021e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e6:	3b01      	subs	r3, #1
 80021e8:	61bb      	str	r3, [r7, #24]
    while (start < end) {
 80021ea:	e017      	b.n	800221c <int_to_str+0xf8>
        char temp = str[start];
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	68ba      	ldr	r2, [r7, #8]
 80021f0:	4413      	add	r3, r2
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	75fb      	strb	r3, [r7, #23]
        str[start] = str[end];
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	68ba      	ldr	r2, [r7, #8]
 80021fa:	441a      	add	r2, r3
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	68b9      	ldr	r1, [r7, #8]
 8002200:	440b      	add	r3, r1
 8002202:	7812      	ldrb	r2, [r2, #0]
 8002204:	701a      	strb	r2, [r3, #0]
        str[end] = temp;
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	68ba      	ldr	r2, [r7, #8]
 800220a:	4413      	add	r3, r2
 800220c:	7dfa      	ldrb	r2, [r7, #23]
 800220e:	701a      	strb	r2, [r3, #0]
        start++;
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	3301      	adds	r3, #1
 8002214:	61fb      	str	r3, [r7, #28]
        end--;
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	3b01      	subs	r3, #1
 800221a:	61bb      	str	r3, [r7, #24]
    while (start < end) {
 800221c:	69fa      	ldr	r2, [r7, #28]
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	429a      	cmp	r2, r3
 8002222:	dbe3      	blt.n	80021ec <int_to_str+0xc8>
    }
}
 8002224:	372c      	adds	r7, #44	@ 0x2c
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	66666667 	.word	0x66666667

08002234 <hex_to_str>:

// 十六进制转换函数
static void hex_to_str(uint8_t value, char* str)
{
 8002234:	b4b0      	push	{r4, r5, r7}
 8002236:	b089      	sub	sp, #36	@ 0x24
 8002238:	af00      	add	r7, sp, #0
 800223a:	4603      	mov	r3, r0
 800223c:	6039      	str	r1, [r7, #0]
 800223e:	71fb      	strb	r3, [r7, #7]
    const char hex_chars[] = "0123456789ABCDEF";
 8002240:	4b11      	ldr	r3, [pc, #68]	@ (8002288 <hex_to_str+0x54>)
 8002242:	f107 040c 	add.w	r4, r7, #12
 8002246:	461d      	mov	r5, r3
 8002248:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800224a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800224c:	682b      	ldr	r3, [r5, #0]
 800224e:	7023      	strb	r3, [r4, #0]
    str[0] = hex_chars[value >> 4];
 8002250:	79fb      	ldrb	r3, [r7, #7]
 8002252:	091b      	lsrs	r3, r3, #4
 8002254:	b2db      	uxtb	r3, r3
 8002256:	3320      	adds	r3, #32
 8002258:	443b      	add	r3, r7
 800225a:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	701a      	strb	r2, [r3, #0]
    str[1] = hex_chars[value & 0x0F];
 8002262:	79fb      	ldrb	r3, [r7, #7]
 8002264:	f003 020f 	and.w	r2, r3, #15
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	3301      	adds	r3, #1
 800226c:	3220      	adds	r2, #32
 800226e:	443a      	add	r2, r7
 8002270:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8002274:	701a      	strb	r2, [r3, #0]
    str[2] = '\0';
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	3302      	adds	r3, #2
 800227a:	2200      	movs	r2, #0
 800227c:	701a      	strb	r2, [r3, #0]
}
 800227e:	bf00      	nop
 8002280:	3724      	adds	r7, #36	@ 0x24
 8002282:	46bd      	mov	sp, r7
 8002284:	bcb0      	pop	{r4, r5, r7}
 8002286:	4770      	bx	lr
 8002288:	0801fd7c 	.word	0x0801fd7c

0800228c <dump_data>:

// 数据转储函数 - 显示接收到的原始数据
static void dump_data(const uint8_t* data, uint16_t len)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b0a8      	sub	sp, #160	@ 0xa0
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	460b      	mov	r3, r1
 8002296:	807b      	strh	r3, [r7, #2]
    char dump_buf[128];
    char hex_str[3];
    uint16_t dump_len = 0;
 8002298:	2300      	movs	r3, #0
 800229a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    
    // 添加前缀
    const char* prefix = "Data: ";
 800229e:	4b3d      	ldr	r3, [pc, #244]	@ (8002394 <dump_data+0x108>)
 80022a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    strcpy(dump_buf, prefix);
 80022a4:	f107 0310 	add.w	r3, r7, #16
 80022a8:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 80022ac:	4618      	mov	r0, r3
 80022ae:	f01c f918 	bl	801e4e2 <strcpy>
    dump_len = strlen(prefix);
 80022b2:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 80022b6:	f7fd ff8b 	bl	80001d0 <strlen>
 80022ba:	4603      	mov	r3, r0
 80022bc:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    
    // 最多显示前16字节的数据
    uint16_t max_bytes = (len > 16) ? 16 : len;
 80022c0:	887b      	ldrh	r3, [r7, #2]
 80022c2:	2b10      	cmp	r3, #16
 80022c4:	bf28      	it	cs
 80022c6:	2310      	movcs	r3, #16
 80022c8:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
    
    for (uint16_t i = 0; i < max_bytes && dump_len < 120; i++) {
 80022cc:	2300      	movs	r3, #0
 80022ce:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
 80022d2:	e032      	b.n	800233a <dump_data+0xae>
        hex_to_str(data[i], hex_str);
 80022d4:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	4413      	add	r3, r2
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	f107 020c 	add.w	r2, r7, #12
 80022e2:	4611      	mov	r1, r2
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7ff ffa5 	bl	8002234 <hex_to_str>
        if (dump_len + 3 < sizeof(dump_buf)) {
 80022ea:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80022ee:	3303      	adds	r3, #3
 80022f0:	2b7f      	cmp	r3, #127	@ 0x7f
 80022f2:	d81d      	bhi.n	8002330 <dump_data+0xa4>
            dump_buf[dump_len++] = hex_str[0];
 80022f4:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80022f8:	1c5a      	adds	r2, r3, #1
 80022fa:	f8a7 209e 	strh.w	r2, [r7, #158]	@ 0x9e
 80022fe:	7b3a      	ldrb	r2, [r7, #12]
 8002300:	33a0      	adds	r3, #160	@ 0xa0
 8002302:	443b      	add	r3, r7
 8002304:	f803 2c90 	strb.w	r2, [r3, #-144]
            dump_buf[dump_len++] = hex_str[1];
 8002308:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800230c:	1c5a      	adds	r2, r3, #1
 800230e:	f8a7 209e 	strh.w	r2, [r7, #158]	@ 0x9e
 8002312:	7b7a      	ldrb	r2, [r7, #13]
 8002314:	33a0      	adds	r3, #160	@ 0xa0
 8002316:	443b      	add	r3, r7
 8002318:	f803 2c90 	strb.w	r2, [r3, #-144]
            dump_buf[dump_len++] = ' ';
 800231c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8002320:	1c5a      	adds	r2, r3, #1
 8002322:	f8a7 209e 	strh.w	r2, [r7, #158]	@ 0x9e
 8002326:	33a0      	adds	r3, #160	@ 0xa0
 8002328:	443b      	add	r3, r7
 800232a:	2220      	movs	r2, #32
 800232c:	f803 2c90 	strb.w	r2, [r3, #-144]
    for (uint16_t i = 0; i < max_bytes && dump_len < 120; i++) {
 8002330:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8002334:	3301      	adds	r3, #1
 8002336:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
 800233a:	f8b7 209c 	ldrh.w	r2, [r7, #156]	@ 0x9c
 800233e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002342:	429a      	cmp	r2, r3
 8002344:	d203      	bcs.n	800234e <dump_data+0xc2>
 8002346:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800234a:	2b77      	cmp	r3, #119	@ 0x77
 800234c:	d9c2      	bls.n	80022d4 <dump_data+0x48>
        }
    }
    
    if (len > 16) {
 800234e:	887b      	ldrh	r3, [r7, #2]
 8002350:	2b10      	cmp	r3, #16
 8002352:	d90e      	bls.n	8002372 <dump_data+0xe6>
        const char* more = "...";
 8002354:	4b10      	ldr	r3, [pc, #64]	@ (8002398 <dump_data+0x10c>)
 8002356:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
        strcat(dump_buf, more);
 800235a:	f107 0310 	add.w	r3, r7, #16
 800235e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002362:	4618      	mov	r0, r3
 8002364:	f01b ffcf 	bl	801e306 <strcat>
        dump_len += 3;
 8002368:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800236c:	3303      	adds	r3, #3
 800236e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    }
    
    dump_buf[dump_len] = '\0';
 8002372:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8002376:	33a0      	adds	r3, #160	@ 0xa0
 8002378:	443b      	add	r3, r7
 800237a:	2200      	movs	r2, #0
 800237c:	f803 2c90 	strb.w	r2, [r3, #-144]
    cdc_debug_log("MODBUS_TCP", dump_buf);
 8002380:	f107 0310 	add.w	r3, r7, #16
 8002384:	4619      	mov	r1, r3
 8002386:	4805      	ldr	r0, [pc, #20]	@ (800239c <dump_data+0x110>)
 8002388:	f7ff fe5e 	bl	8002048 <cdc_debug_log>
}
 800238c:	bf00      	nop
 800238e:	37a0      	adds	r7, #160	@ 0xa0
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	0801fd90 	.word	0x0801fd90
 8002398:	0801fd98 	.word	0x0801fd98
 800239c:	0801fd9c 	.word	0x0801fd9c

080023a0 <process_modbus_request>:
// Holding Registers数组（根据PDF初始化默认值）
uint16_t holding_regs[100]; // 100个寄存器足够使用

// 处理单个Modbus TCP请求
static err_t process_modbus_request(struct tcp_pcb *tpcb, uint8_t* buf, uint16_t offset)
{
 80023a0:	b5b0      	push	{r4, r5, r7, lr}
 80023a2:	f5ad 6d9e 	sub.w	sp, sp, #1264	@ 0x4f0
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80023ac:	f2a3 43e4 	subw	r3, r3, #1252	@ 0x4e4
 80023b0:	6018      	str	r0, [r3, #0]
 80023b2:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80023b6:	f5a3 639d 	sub.w	r3, r3, #1256	@ 0x4e8
 80023ba:	6019      	str	r1, [r3, #0]
 80023bc:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80023c0:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 80023c4:	801a      	strh	r2, [r3, #0]
    // 解析Modbus TCP帧头
    uint16_t trans_id = (buf[offset] << 8) | buf[offset+1];     // 事务ID
 80023c6:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80023ca:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 80023ce:	881b      	ldrh	r3, [r3, #0]
 80023d0:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 80023d4:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 80023d8:	6812      	ldr	r2, [r2, #0]
 80023da:	4413      	add	r3, r2
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	b21b      	sxth	r3, r3
 80023e0:	021b      	lsls	r3, r3, #8
 80023e2:	b21a      	sxth	r2, r3
 80023e4:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80023e8:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 80023ec:	881b      	ldrh	r3, [r3, #0]
 80023ee:	3301      	adds	r3, #1
 80023f0:	f507 619e 	add.w	r1, r7, #1264	@ 0x4f0
 80023f4:	f5a1 619d 	sub.w	r1, r1, #1256	@ 0x4e8
 80023f8:	6809      	ldr	r1, [r1, #0]
 80023fa:	440b      	add	r3, r1
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	b21b      	sxth	r3, r3
 8002400:	4313      	orrs	r3, r2
 8002402:	b21b      	sxth	r3, r3
 8002404:	f8a7 34e4 	strh.w	r3, [r7, #1252]	@ 0x4e4
    uint16_t protocol_id = (buf[offset+2] << 8) | buf[offset+3];  // 协议ID (应该是0)
 8002408:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 800240c:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8002410:	881b      	ldrh	r3, [r3, #0]
 8002412:	3302      	adds	r3, #2
 8002414:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 8002418:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 800241c:	6812      	ldr	r2, [r2, #0]
 800241e:	4413      	add	r3, r2
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	b21b      	sxth	r3, r3
 8002424:	021b      	lsls	r3, r3, #8
 8002426:	b21a      	sxth	r2, r3
 8002428:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 800242c:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8002430:	881b      	ldrh	r3, [r3, #0]
 8002432:	3303      	adds	r3, #3
 8002434:	f507 619e 	add.w	r1, r7, #1264	@ 0x4f0
 8002438:	f5a1 619d 	sub.w	r1, r1, #1256	@ 0x4e8
 800243c:	6809      	ldr	r1, [r1, #0]
 800243e:	440b      	add	r3, r1
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	b21b      	sxth	r3, r3
 8002444:	4313      	orrs	r3, r2
 8002446:	b21b      	sxth	r3, r3
 8002448:	f8a7 34e2 	strh.w	r3, [r7, #1250]	@ 0x4e2
    uint16_t length = (buf[offset+4] << 8) | buf[offset+5];       // 长度字段
 800244c:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002450:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8002454:	881b      	ldrh	r3, [r3, #0]
 8002456:	3304      	adds	r3, #4
 8002458:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 800245c:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 8002460:	6812      	ldr	r2, [r2, #0]
 8002462:	4413      	add	r3, r2
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	b21b      	sxth	r3, r3
 8002468:	021b      	lsls	r3, r3, #8
 800246a:	b21a      	sxth	r2, r3
 800246c:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002470:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8002474:	881b      	ldrh	r3, [r3, #0]
 8002476:	3305      	adds	r3, #5
 8002478:	f507 619e 	add.w	r1, r7, #1264	@ 0x4f0
 800247c:	f5a1 619d 	sub.w	r1, r1, #1256	@ 0x4e8
 8002480:	6809      	ldr	r1, [r1, #0]
 8002482:	440b      	add	r3, r1
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	b21b      	sxth	r3, r3
 8002488:	4313      	orrs	r3, r2
 800248a:	b21b      	sxth	r3, r3
 800248c:	f8a7 34e0 	strh.w	r3, [r7, #1248]	@ 0x4e0
    
    // 验证协议ID
    if (protocol_id != 0) {
 8002490:	f8b7 34e2 	ldrh.w	r3, [r7, #1250]	@ 0x4e2
 8002494:	2b00      	cmp	r3, #0
 8002496:	d007      	beq.n	80024a8 <process_modbus_request+0x108>
        cdc_debug_log("MODBUS_TCP", "Invalid protocol ID");
 8002498:	49d7      	ldr	r1, [pc, #860]	@ (80027f8 <process_modbus_request+0x458>)
 800249a:	48d8      	ldr	r0, [pc, #864]	@ (80027fc <process_modbus_request+0x45c>)
 800249c:	f7ff fdd4 	bl	8002048 <cdc_debug_log>
        return ERR_VAL;
 80024a0:	f06f 0305 	mvn.w	r3, #5
 80024a4:	f000 bdb5 	b.w	8003012 <process_modbus_request+0xc72>
    }
    
    // 验证最小长度（至少要有单元ID和功能码）
    if (length < 2) {
 80024a8:	f8b7 34e0 	ldrh.w	r3, [r7, #1248]	@ 0x4e0
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d807      	bhi.n	80024c0 <process_modbus_request+0x120>
        cdc_debug_log("MODBUS_TCP", "Invalid length field");
 80024b0:	49d3      	ldr	r1, [pc, #844]	@ (8002800 <process_modbus_request+0x460>)
 80024b2:	48d2      	ldr	r0, [pc, #840]	@ (80027fc <process_modbus_request+0x45c>)
 80024b4:	f7ff fdc8 	bl	8002048 <cdc_debug_log>
        return ERR_VAL;
 80024b8:	f06f 0305 	mvn.w	r3, #5
 80024bc:	f000 bda9 	b.w	8003012 <process_modbus_request+0xc72>
    }

    uint8_t unit_id = buf[offset+6];                       // 单元ID
 80024c0:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80024c4:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 80024c8:	881b      	ldrh	r3, [r3, #0]
 80024ca:	3306      	adds	r3, #6
 80024cc:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 80024d0:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 80024d4:	6812      	ldr	r2, [r2, #0]
 80024d6:	4413      	add	r3, r2
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	f887 34df 	strb.w	r3, [r7, #1247]	@ 0x4df
    uint8_t fc = buf[offset+7];                            // 函数码
 80024de:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80024e2:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 80024e6:	881b      	ldrh	r3, [r3, #0]
 80024e8:	3307      	adds	r3, #7
 80024ea:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 80024ee:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 80024f2:	6812      	ldr	r2, [r2, #0]
 80024f4:	4413      	add	r3, r2
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	f887 34de 	strb.w	r3, [r7, #1246]	@ 0x4de

    // 添加调试信息
    char frame_info[80];
    strcpy(frame_info, "Frame: TID=");
 80024fc:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8002500:	4ac0      	ldr	r2, [pc, #768]	@ (8002804 <process_modbus_request+0x464>)
 8002502:	ca07      	ldmia	r2, {r0, r1, r2}
 8002504:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    int_to_str(trans_id, frame_info + strlen(frame_info), 10);
 8002508:	f8b7 44e4 	ldrh.w	r4, [r7, #1252]	@ 0x4e4
 800250c:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8002510:	4618      	mov	r0, r3
 8002512:	f7fd fe5d 	bl	80001d0 <strlen>
 8002516:	4602      	mov	r2, r0
 8002518:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800251c:	4413      	add	r3, r2
 800251e:	220a      	movs	r2, #10
 8002520:	4619      	mov	r1, r3
 8002522:	4620      	mov	r0, r4
 8002524:	f7ff fdfe 	bl	8002124 <int_to_str>
    const char* len_prefix = " Len=";
 8002528:	4bb7      	ldr	r3, [pc, #732]	@ (8002808 <process_modbus_request+0x468>)
 800252a:	f8c7 34d8 	str.w	r3, [r7, #1240]	@ 0x4d8
    strcat(frame_info, len_prefix);
 800252e:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8002532:	f8d7 14d8 	ldr.w	r1, [r7, #1240]	@ 0x4d8
 8002536:	4618      	mov	r0, r3
 8002538:	f01b fee5 	bl	801e306 <strcat>
    int_to_str(length, frame_info + strlen(frame_info), 10);
 800253c:	f8b7 44e0 	ldrh.w	r4, [r7, #1248]	@ 0x4e0
 8002540:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8002544:	4618      	mov	r0, r3
 8002546:	f7fd fe43 	bl	80001d0 <strlen>
 800254a:	4602      	mov	r2, r0
 800254c:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8002550:	4413      	add	r3, r2
 8002552:	220a      	movs	r2, #10
 8002554:	4619      	mov	r1, r3
 8002556:	4620      	mov	r0, r4
 8002558:	f7ff fde4 	bl	8002124 <int_to_str>
    const char* fc_prefix = " FC=";
 800255c:	4bab      	ldr	r3, [pc, #684]	@ (800280c <process_modbus_request+0x46c>)
 800255e:	f8c7 34d4 	str.w	r3, [r7, #1236]	@ 0x4d4
    strcat(frame_info, fc_prefix);
 8002562:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8002566:	f8d7 14d4 	ldr.w	r1, [r7, #1236]	@ 0x4d4
 800256a:	4618      	mov	r0, r3
 800256c:	f01b fecb 	bl	801e306 <strcat>
    int_to_str(fc, frame_info + strlen(frame_info), 10);
 8002570:	f897 44de 	ldrb.w	r4, [r7, #1246]	@ 0x4de
 8002574:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8002578:	4618      	mov	r0, r3
 800257a:	f7fd fe29 	bl	80001d0 <strlen>
 800257e:	4602      	mov	r2, r0
 8002580:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8002584:	4413      	add	r3, r2
 8002586:	220a      	movs	r2, #10
 8002588:	4619      	mov	r1, r3
 800258a:	4620      	mov	r0, r4
 800258c:	f7ff fdca 	bl	8002124 <int_to_str>
    cdc_debug_log("MODBUS_TCP", frame_info);
 8002590:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8002594:	4619      	mov	r1, r3
 8002596:	4899      	ldr	r0, [pc, #612]	@ (80027fc <process_modbus_request+0x45c>)
 8002598:	f7ff fd56 	bl	8002048 <cdc_debug_log>

    uint8_t reply[1024];
    reply[0] = buf[offset]; reply[1] = buf[offset+1]; // 事务ID
 800259c:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80025a0:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 80025a4:	881b      	ldrh	r3, [r3, #0]
 80025a6:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 80025aa:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 80025ae:	6812      	ldr	r2, [r2, #0]
 80025b0:	4413      	add	r3, r2
 80025b2:	781a      	ldrb	r2, [r3, #0]
 80025b4:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80025b8:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 80025bc:	701a      	strb	r2, [r3, #0]
 80025be:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80025c2:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 80025c6:	881b      	ldrh	r3, [r3, #0]
 80025c8:	3301      	adds	r3, #1
 80025ca:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 80025ce:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 80025d2:	6812      	ldr	r2, [r2, #0]
 80025d4:	4413      	add	r3, r2
 80025d6:	781a      	ldrb	r2, [r3, #0]
 80025d8:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80025dc:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 80025e0:	705a      	strb	r2, [r3, #1]
    reply[2] = 0; reply[3] = 0;           // 协议ID (0)
 80025e2:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80025e6:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 80025ea:	2200      	movs	r2, #0
 80025ec:	709a      	strb	r2, [r3, #2]
 80025ee:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80025f2:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 80025f6:	2200      	movs	r2, #0
 80025f8:	70da      	strb	r2, [r3, #3]
    reply[6] = unit_id;                   // 单元ID
 80025fa:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80025fe:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002602:	f897 24df 	ldrb.w	r2, [r7, #1247]	@ 0x4df
 8002606:	719a      	strb	r2, [r3, #6]
    uint16_t reply_data_len = 0;          // 数据部分长度（不包含单元ID）
 8002608:	2300      	movs	r3, #0
 800260a:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee

    if (fc == FC_READ_HOLDING) {
 800260e:	f897 34de 	ldrb.w	r3, [r7, #1246]	@ 0x4de
 8002612:	2b03      	cmp	r3, #3
 8002614:	f040 8145 	bne.w	80028a2 <process_modbus_request+0x502>
        cdc_debug_log("MODBUS_TCP", "Processing read holding");
 8002618:	497d      	ldr	r1, [pc, #500]	@ (8002810 <process_modbus_request+0x470>)
 800261a:	4878      	ldr	r0, [pc, #480]	@ (80027fc <process_modbus_request+0x45c>)
 800261c:	f7ff fd14 	bl	8002048 <cdc_debug_log>
        
        // 检查数据长度是否足够
        if (length < 6) { // 单元ID + 功能码 + 起始地址 + 数量 = 1+1+2+2 = 6
 8002620:	f8b7 34e0 	ldrh.w	r3, [r7, #1248]	@ 0x4e0
 8002624:	2b05      	cmp	r3, #5
 8002626:	d817      	bhi.n	8002658 <process_modbus_request+0x2b8>
            cdc_debug_log("MODBUS_TCP", "Read request too short");
 8002628:	497a      	ldr	r1, [pc, #488]	@ (8002814 <process_modbus_request+0x474>)
 800262a:	4874      	ldr	r0, [pc, #464]	@ (80027fc <process_modbus_request+0x45c>)
 800262c:	f7ff fd0c 	bl	8002048 <cdc_debug_log>
            reply[7] = fc + 0x80;  // 异常函数码
 8002630:	f897 34de 	ldrb.w	r3, [r7, #1246]	@ 0x4de
 8002634:	3b80      	subs	r3, #128	@ 0x80
 8002636:	b2da      	uxtb	r2, r3
 8002638:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 800263c:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002640:	71da      	strb	r2, [r3, #7]
            reply[8] = 0x03;       // 异常代码：非法数据值
 8002642:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002646:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 800264a:	2203      	movs	r2, #3
 800264c:	721a      	strb	r2, [r3, #8]
            reply_data_len = 2;
 800264e:	2302      	movs	r3, #2
 8002650:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee
 8002654:	f000 bc0e 	b.w	8002e74 <process_modbus_request+0xad4>
        } else {
            uint16_t addr = (buf[offset+8] << 8) | buf[offset+9]; // 起始地址
 8002658:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 800265c:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8002660:	881b      	ldrh	r3, [r3, #0]
 8002662:	3308      	adds	r3, #8
 8002664:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 8002668:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 800266c:	6812      	ldr	r2, [r2, #0]
 800266e:	4413      	add	r3, r2
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	b21b      	sxth	r3, r3
 8002674:	021b      	lsls	r3, r3, #8
 8002676:	b21a      	sxth	r2, r3
 8002678:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 800267c:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8002680:	881b      	ldrh	r3, [r3, #0]
 8002682:	3309      	adds	r3, #9
 8002684:	f507 619e 	add.w	r1, r7, #1264	@ 0x4f0
 8002688:	f5a1 619d 	sub.w	r1, r1, #1256	@ 0x4e8
 800268c:	6809      	ldr	r1, [r1, #0]
 800268e:	440b      	add	r3, r1
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	b21b      	sxth	r3, r3
 8002694:	4313      	orrs	r3, r2
 8002696:	b21b      	sxth	r3, r3
 8002698:	f8a7 34b6 	strh.w	r3, [r7, #1206]	@ 0x4b6
            uint16_t qty = (buf[offset+10] << 8) | buf[offset+11]; // 数量
 800269c:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80026a0:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 80026a4:	881b      	ldrh	r3, [r3, #0]
 80026a6:	330a      	adds	r3, #10
 80026a8:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 80026ac:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 80026b0:	6812      	ldr	r2, [r2, #0]
 80026b2:	4413      	add	r3, r2
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	b21b      	sxth	r3, r3
 80026b8:	021b      	lsls	r3, r3, #8
 80026ba:	b21a      	sxth	r2, r3
 80026bc:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80026c0:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 80026c4:	881b      	ldrh	r3, [r3, #0]
 80026c6:	330b      	adds	r3, #11
 80026c8:	f507 619e 	add.w	r1, r7, #1264	@ 0x4f0
 80026cc:	f5a1 619d 	sub.w	r1, r1, #1256	@ 0x4e8
 80026d0:	6809      	ldr	r1, [r1, #0]
 80026d2:	440b      	add	r3, r1
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	b21b      	sxth	r3, r3
 80026d8:	4313      	orrs	r3, r2
 80026da:	b21b      	sxth	r3, r3
 80026dc:	f8a7 34b4 	strh.w	r3, [r7, #1204]	@ 0x4b4
            
            char addr_info[50];
            strcpy(addr_info, "Read addr=");
 80026e0:	f107 0314 	add.w	r3, r7, #20
 80026e4:	4a4c      	ldr	r2, [pc, #304]	@ (8002818 <process_modbus_request+0x478>)
 80026e6:	ca07      	ldmia	r2, {r0, r1, r2}
 80026e8:	c303      	stmia	r3!, {r0, r1}
 80026ea:	801a      	strh	r2, [r3, #0]
 80026ec:	3302      	adds	r3, #2
 80026ee:	0c12      	lsrs	r2, r2, #16
 80026f0:	701a      	strb	r2, [r3, #0]
            int_to_str(addr, addr_info + strlen(addr_info), 10);
 80026f2:	f8b7 44b6 	ldrh.w	r4, [r7, #1206]	@ 0x4b6
 80026f6:	f107 0314 	add.w	r3, r7, #20
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7fd fd68 	bl	80001d0 <strlen>
 8002700:	4602      	mov	r2, r0
 8002702:	f107 0314 	add.w	r3, r7, #20
 8002706:	4413      	add	r3, r2
 8002708:	220a      	movs	r2, #10
 800270a:	4619      	mov	r1, r3
 800270c:	4620      	mov	r0, r4
 800270e:	f7ff fd09 	bl	8002124 <int_to_str>
            const char* qty_prefix = " qty=";
 8002712:	4b42      	ldr	r3, [pc, #264]	@ (800281c <process_modbus_request+0x47c>)
 8002714:	f8c7 34b0 	str.w	r3, [r7, #1200]	@ 0x4b0
            strcat(addr_info, qty_prefix);
 8002718:	f107 0314 	add.w	r3, r7, #20
 800271c:	f8d7 14b0 	ldr.w	r1, [r7, #1200]	@ 0x4b0
 8002720:	4618      	mov	r0, r3
 8002722:	f01b fdf0 	bl	801e306 <strcat>
            int_to_str(qty, addr_info + strlen(addr_info), 10);
 8002726:	f8b7 44b4 	ldrh.w	r4, [r7, #1204]	@ 0x4b4
 800272a:	f107 0314 	add.w	r3, r7, #20
 800272e:	4618      	mov	r0, r3
 8002730:	f7fd fd4e 	bl	80001d0 <strlen>
 8002734:	4602      	mov	r2, r0
 8002736:	f107 0314 	add.w	r3, r7, #20
 800273a:	4413      	add	r3, r2
 800273c:	220a      	movs	r2, #10
 800273e:	4619      	mov	r1, r3
 8002740:	4620      	mov	r0, r4
 8002742:	f7ff fcef 	bl	8002124 <int_to_str>
            cdc_debug_log("MODBUS_TCP", addr_info);
 8002746:	f107 0314 	add.w	r3, r7, #20
 800274a:	4619      	mov	r1, r3
 800274c:	482b      	ldr	r0, [pc, #172]	@ (80027fc <process_modbus_request+0x45c>)
 800274e:	f7ff fc7b 	bl	8002048 <cdc_debug_log>
            
            // 验证数量范围
            if (qty == 0 || qty > 125) { // Modbus标准限制单次最多读125个寄存器
 8002752:	f8b7 34b4 	ldrh.w	r3, [r7, #1204]	@ 0x4b4
 8002756:	2b00      	cmp	r3, #0
 8002758:	d003      	beq.n	8002762 <process_modbus_request+0x3c2>
 800275a:	f8b7 34b4 	ldrh.w	r3, [r7, #1204]	@ 0x4b4
 800275e:	2b7d      	cmp	r3, #125	@ 0x7d
 8002760:	d916      	bls.n	8002790 <process_modbus_request+0x3f0>
                cdc_debug_log("MODBUS_TCP", "Invalid quantity");
 8002762:	492f      	ldr	r1, [pc, #188]	@ (8002820 <process_modbus_request+0x480>)
 8002764:	4825      	ldr	r0, [pc, #148]	@ (80027fc <process_modbus_request+0x45c>)
 8002766:	f7ff fc6f 	bl	8002048 <cdc_debug_log>
                reply[7] = fc + 0x80;  // 异常函数码
 800276a:	f897 34de 	ldrb.w	r3, [r7, #1246]	@ 0x4de
 800276e:	3b80      	subs	r3, #128	@ 0x80
 8002770:	b2da      	uxtb	r2, r3
 8002772:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002776:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 800277a:	71da      	strb	r2, [r3, #7]
                reply[8] = 0x03;       // 异常代码：非法数据值
 800277c:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002780:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002784:	2203      	movs	r2, #3
 8002786:	721a      	strb	r2, [r3, #8]
                reply_data_len = 2;
 8002788:	2302      	movs	r3, #2
 800278a:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee
 800278e:	e371      	b.n	8002e74 <process_modbus_request+0xad4>
            } else if (addr + qty > 100) { // 错误：越界，现在只有100个寄存器
 8002790:	f8b7 24b6 	ldrh.w	r2, [r7, #1206]	@ 0x4b6
 8002794:	f8b7 34b4 	ldrh.w	r3, [r7, #1204]	@ 0x4b4
 8002798:	4413      	add	r3, r2
 800279a:	2b64      	cmp	r3, #100	@ 0x64
 800279c:	dd16      	ble.n	80027cc <process_modbus_request+0x42c>
                cdc_debug_log("MODBUS_TCP", "Address out of bounds");
 800279e:	4921      	ldr	r1, [pc, #132]	@ (8002824 <process_modbus_request+0x484>)
 80027a0:	4816      	ldr	r0, [pc, #88]	@ (80027fc <process_modbus_request+0x45c>)
 80027a2:	f7ff fc51 	bl	8002048 <cdc_debug_log>
                reply[7] = fc + 0x80;  // 异常函数码
 80027a6:	f897 34de 	ldrb.w	r3, [r7, #1246]	@ 0x4de
 80027aa:	3b80      	subs	r3, #128	@ 0x80
 80027ac:	b2da      	uxtb	r2, r3
 80027ae:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80027b2:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 80027b6:	71da      	strb	r2, [r3, #7]
                reply[8] = 0x02;       // 异常代码：非法数据地址
 80027b8:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80027bc:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 80027c0:	2202      	movs	r2, #2
 80027c2:	721a      	strb	r2, [r3, #8]
                reply_data_len = 2;
 80027c4:	2302      	movs	r3, #2
 80027c6:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee
 80027ca:	e353      	b.n	8002e74 <process_modbus_request+0xad4>
            } else {
                reply[7] = fc;              // 函数码
 80027cc:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80027d0:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 80027d4:	f897 24de 	ldrb.w	r2, [r7, #1246]	@ 0x4de
 80027d8:	71da      	strb	r2, [r3, #7]
                reply[8] = qty * 2;         // 字节数
 80027da:	f8b7 34b4 	ldrh.w	r3, [r7, #1204]	@ 0x4b4
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	b2da      	uxtb	r2, r3
 80027e4:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80027e8:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 80027ec:	721a      	strb	r2, [r3, #8]
                for (uint16_t i = 0; i < qty; i++) {
 80027ee:	2300      	movs	r3, #0
 80027f0:	f8a7 34ec 	strh.w	r3, [r7, #1260]	@ 0x4ec
 80027f4:	e043      	b.n	800287e <process_modbus_request+0x4de>
 80027f6:	bf00      	nop
 80027f8:	0801fda8 	.word	0x0801fda8
 80027fc:	0801fd9c 	.word	0x0801fd9c
 8002800:	0801fdbc 	.word	0x0801fdbc
 8002804:	0801fdd4 	.word	0x0801fdd4
 8002808:	0801fde0 	.word	0x0801fde0
 800280c:	0801fde8 	.word	0x0801fde8
 8002810:	0801fdf0 	.word	0x0801fdf0
 8002814:	0801fe08 	.word	0x0801fe08
 8002818:	0801fe20 	.word	0x0801fe20
 800281c:	0801fe2c 	.word	0x0801fe2c
 8002820:	0801fe34 	.word	0x0801fe34
 8002824:	0801fe48 	.word	0x0801fe48
                    reply[9 + i*2] = holding_regs[addr + i] >> 8;
 8002828:	f8b7 24b6 	ldrh.w	r2, [r7, #1206]	@ 0x4b6
 800282c:	f8b7 34ec 	ldrh.w	r3, [r7, #1260]	@ 0x4ec
 8002830:	4413      	add	r3, r2
 8002832:	4abe      	ldr	r2, [pc, #760]	@ (8002b2c <process_modbus_request+0x78c>)
 8002834:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002838:	0a1b      	lsrs	r3, r3, #8
 800283a:	b29a      	uxth	r2, r3
 800283c:	f8b7 34ec 	ldrh.w	r3, [r7, #1260]	@ 0x4ec
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	3309      	adds	r3, #9
 8002844:	b2d1      	uxtb	r1, r2
 8002846:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 800284a:	f5a2 6293 	sub.w	r2, r2, #1176	@ 0x498
 800284e:	54d1      	strb	r1, [r2, r3]
                    reply[10 + i*2] = holding_regs[addr + i] & 0xFF;
 8002850:	f8b7 24b6 	ldrh.w	r2, [r7, #1206]	@ 0x4b6
 8002854:	f8b7 34ec 	ldrh.w	r3, [r7, #1260]	@ 0x4ec
 8002858:	4413      	add	r3, r2
 800285a:	4ab4      	ldr	r2, [pc, #720]	@ (8002b2c <process_modbus_request+0x78c>)
 800285c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002860:	f8b7 34ec 	ldrh.w	r3, [r7, #1260]	@ 0x4ec
 8002864:	3305      	adds	r3, #5
 8002866:	005b      	lsls	r3, r3, #1
 8002868:	b2d1      	uxtb	r1, r2
 800286a:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 800286e:	f5a2 6293 	sub.w	r2, r2, #1176	@ 0x498
 8002872:	54d1      	strb	r1, [r2, r3]
                for (uint16_t i = 0; i < qty; i++) {
 8002874:	f8b7 34ec 	ldrh.w	r3, [r7, #1260]	@ 0x4ec
 8002878:	3301      	adds	r3, #1
 800287a:	f8a7 34ec 	strh.w	r3, [r7, #1260]	@ 0x4ec
 800287e:	f8b7 24ec 	ldrh.w	r2, [r7, #1260]	@ 0x4ec
 8002882:	f8b7 34b4 	ldrh.w	r3, [r7, #1204]	@ 0x4b4
 8002886:	429a      	cmp	r2, r3
 8002888:	d3ce      	bcc.n	8002828 <process_modbus_request+0x488>
                }
                reply_data_len = 2 + qty * 2; // 单元ID + 函数码 + 字节数 + 数据
 800288a:	f8b7 34b4 	ldrh.w	r3, [r7, #1204]	@ 0x4b4
 800288e:	3301      	adds	r3, #1
 8002890:	b29b      	uxth	r3, r3
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee
                cdc_debug_log("MODBUS_TCP", "Read success");
 8002898:	49a5      	ldr	r1, [pc, #660]	@ (8002b30 <process_modbus_request+0x790>)
 800289a:	48a6      	ldr	r0, [pc, #664]	@ (8002b34 <process_modbus_request+0x794>)
 800289c:	f7ff fbd4 	bl	8002048 <cdc_debug_log>
 80028a0:	e2e8      	b.n	8002e74 <process_modbus_request+0xad4>
            }
        }
    } else if (fc == FC_WRITE_SINGLE) {
 80028a2:	f897 34de 	ldrb.w	r3, [r7, #1246]	@ 0x4de
 80028a6:	2b06      	cmp	r3, #6
 80028a8:	f040 811c 	bne.w	8002ae4 <process_modbus_request+0x744>
        cdc_debug_log("MODBUS_TCP", "Processing write single");
 80028ac:	49a2      	ldr	r1, [pc, #648]	@ (8002b38 <process_modbus_request+0x798>)
 80028ae:	48a1      	ldr	r0, [pc, #644]	@ (8002b34 <process_modbus_request+0x794>)
 80028b0:	f7ff fbca 	bl	8002048 <cdc_debug_log>
        
        // 检查数据长度是否足够：单元ID + 功能码 + 地址 + 值 = 1+1+2+2 = 6
        if (length < 6) {
 80028b4:	f8b7 34e0 	ldrh.w	r3, [r7, #1248]	@ 0x4e0
 80028b8:	2b05      	cmp	r3, #5
 80028ba:	d816      	bhi.n	80028ea <process_modbus_request+0x54a>
            cdc_debug_log("MODBUS_TCP", "Write single request too short");
 80028bc:	499f      	ldr	r1, [pc, #636]	@ (8002b3c <process_modbus_request+0x79c>)
 80028be:	489d      	ldr	r0, [pc, #628]	@ (8002b34 <process_modbus_request+0x794>)
 80028c0:	f7ff fbc2 	bl	8002048 <cdc_debug_log>
            reply[7] = fc + 0x80;  // 异常函数码
 80028c4:	f897 34de 	ldrb.w	r3, [r7, #1246]	@ 0x4de
 80028c8:	3b80      	subs	r3, #128	@ 0x80
 80028ca:	b2da      	uxtb	r2, r3
 80028cc:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80028d0:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 80028d4:	71da      	strb	r2, [r3, #7]
            reply[8] = 0x03;       // 异常代码：非法数据值
 80028d6:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80028da:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 80028de:	2203      	movs	r2, #3
 80028e0:	721a      	strb	r2, [r3, #8]
            reply_data_len = 2;
 80028e2:	2302      	movs	r3, #2
 80028e4:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee
 80028e8:	e2c4      	b.n	8002e74 <process_modbus_request+0xad4>
        } else {
            uint16_t addr = (buf[offset+8] << 8) | buf[offset+9];   // 寄存器地址
 80028ea:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80028ee:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 80028f2:	881b      	ldrh	r3, [r3, #0]
 80028f4:	3308      	adds	r3, #8
 80028f6:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 80028fa:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 80028fe:	6812      	ldr	r2, [r2, #0]
 8002900:	4413      	add	r3, r2
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	b21b      	sxth	r3, r3
 8002906:	021b      	lsls	r3, r3, #8
 8002908:	b21a      	sxth	r2, r3
 800290a:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 800290e:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8002912:	881b      	ldrh	r3, [r3, #0]
 8002914:	3309      	adds	r3, #9
 8002916:	f507 619e 	add.w	r1, r7, #1264	@ 0x4f0
 800291a:	f5a1 619d 	sub.w	r1, r1, #1256	@ 0x4e8
 800291e:	6809      	ldr	r1, [r1, #0]
 8002920:	440b      	add	r3, r1
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	b21b      	sxth	r3, r3
 8002926:	4313      	orrs	r3, r2
 8002928:	b21b      	sxth	r3, r3
 800292a:	f8a7 34c4 	strh.w	r3, [r7, #1220]	@ 0x4c4
            uint16_t value = (buf[offset+10] << 8) | buf[offset+11]; // 要写入的值
 800292e:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002932:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8002936:	881b      	ldrh	r3, [r3, #0]
 8002938:	330a      	adds	r3, #10
 800293a:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 800293e:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 8002942:	6812      	ldr	r2, [r2, #0]
 8002944:	4413      	add	r3, r2
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	b21b      	sxth	r3, r3
 800294a:	021b      	lsls	r3, r3, #8
 800294c:	b21a      	sxth	r2, r3
 800294e:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002952:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8002956:	881b      	ldrh	r3, [r3, #0]
 8002958:	330b      	adds	r3, #11
 800295a:	f507 619e 	add.w	r1, r7, #1264	@ 0x4f0
 800295e:	f5a1 619d 	sub.w	r1, r1, #1256	@ 0x4e8
 8002962:	6809      	ldr	r1, [r1, #0]
 8002964:	440b      	add	r3, r1
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	b21b      	sxth	r3, r3
 800296a:	4313      	orrs	r3, r2
 800296c:	b21b      	sxth	r3, r3
 800296e:	f8a7 34c2 	strh.w	r3, [r7, #1218]	@ 0x4c2
            
            char write_info[60];
            strcpy(write_info, "Write addr=");
 8002972:	f107 0314 	add.w	r3, r7, #20
 8002976:	4a72      	ldr	r2, [pc, #456]	@ (8002b40 <process_modbus_request+0x7a0>)
 8002978:	ca07      	ldmia	r2, {r0, r1, r2}
 800297a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            int_to_str(addr, write_info + strlen(write_info), 10);
 800297e:	f8b7 44c4 	ldrh.w	r4, [r7, #1220]	@ 0x4c4
 8002982:	f107 0314 	add.w	r3, r7, #20
 8002986:	4618      	mov	r0, r3
 8002988:	f7fd fc22 	bl	80001d0 <strlen>
 800298c:	4602      	mov	r2, r0
 800298e:	f107 0314 	add.w	r3, r7, #20
 8002992:	4413      	add	r3, r2
 8002994:	220a      	movs	r2, #10
 8002996:	4619      	mov	r1, r3
 8002998:	4620      	mov	r0, r4
 800299a:	f7ff fbc3 	bl	8002124 <int_to_str>
            const char* val_prefix = " val=0x";
 800299e:	4b69      	ldr	r3, [pc, #420]	@ (8002b44 <process_modbus_request+0x7a4>)
 80029a0:	f8c7 34bc 	str.w	r3, [r7, #1212]	@ 0x4bc
            strcat(write_info, val_prefix);
 80029a4:	f107 0314 	add.w	r3, r7, #20
 80029a8:	f8d7 14bc 	ldr.w	r1, [r7, #1212]	@ 0x4bc
 80029ac:	4618      	mov	r0, r3
 80029ae:	f01b fcaa 	bl	801e306 <strcat>
            // 简单的十六进制转换
            char hex_str[5];
            hex_str[4] = '\0';
 80029b2:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80029b6:	f5a3 6394 	sub.w	r3, r3, #1184	@ 0x4a0
 80029ba:	2200      	movs	r2, #0
 80029bc:	711a      	strb	r2, [r3, #4]
            for (int j = 3; j >= 0; j--) {
 80029be:	2303      	movs	r3, #3
 80029c0:	f8c7 34e8 	str.w	r3, [r7, #1256]	@ 0x4e8
 80029c4:	e027      	b.n	8002a16 <process_modbus_request+0x676>
                int nibble = (value >> (j * 4)) & 0xF;
 80029c6:	f8b7 24c2 	ldrh.w	r2, [r7, #1218]	@ 0x4c2
 80029ca:	f8d7 34e8 	ldr.w	r3, [r7, #1256]	@ 0x4e8
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	fa42 f303 	asr.w	r3, r2, r3
 80029d4:	f003 030f 	and.w	r3, r3, #15
 80029d8:	f8c7 34b8 	str.w	r3, [r7, #1208]	@ 0x4b8
                hex_str[3-j] = (nibble < 10) ? ('0' + nibble) : ('A' + nibble - 10);
 80029dc:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 80029e0:	2b09      	cmp	r3, #9
 80029e2:	dc05      	bgt.n	80029f0 <process_modbus_request+0x650>
 80029e4:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	3330      	adds	r3, #48	@ 0x30
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	e004      	b.n	80029fa <process_modbus_request+0x65a>
 80029f0:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	3337      	adds	r3, #55	@ 0x37
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	f8d7 24e8 	ldr.w	r2, [r7, #1256]	@ 0x4e8
 80029fe:	f1c2 0203 	rsb	r2, r2, #3
 8002a02:	f507 619e 	add.w	r1, r7, #1264	@ 0x4f0
 8002a06:	f5a1 6194 	sub.w	r1, r1, #1184	@ 0x4a0
 8002a0a:	548b      	strb	r3, [r1, r2]
            for (int j = 3; j >= 0; j--) {
 8002a0c:	f8d7 34e8 	ldr.w	r3, [r7, #1256]	@ 0x4e8
 8002a10:	3b01      	subs	r3, #1
 8002a12:	f8c7 34e8 	str.w	r3, [r7, #1256]	@ 0x4e8
 8002a16:	f8d7 34e8 	ldr.w	r3, [r7, #1256]	@ 0x4e8
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	dad3      	bge.n	80029c6 <process_modbus_request+0x626>
            }
            strcat(write_info, hex_str);
 8002a1e:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8002a22:	f107 0314 	add.w	r3, r7, #20
 8002a26:	4611      	mov	r1, r2
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f01b fc6c 	bl	801e306 <strcat>
            cdc_debug_log("MODBUS_TCP", write_info);
 8002a2e:	f107 0314 	add.w	r3, r7, #20
 8002a32:	4619      	mov	r1, r3
 8002a34:	483f      	ldr	r0, [pc, #252]	@ (8002b34 <process_modbus_request+0x794>)
 8002a36:	f7ff fb07 	bl	8002048 <cdc_debug_log>
            
            // 验证地址范围
            if (addr >= 100) {
 8002a3a:	f8b7 34c4 	ldrh.w	r3, [r7, #1220]	@ 0x4c4
 8002a3e:	2b63      	cmp	r3, #99	@ 0x63
 8002a40:	d916      	bls.n	8002a70 <process_modbus_request+0x6d0>
                cdc_debug_log("MODBUS_TCP", "Write address out of bounds");
 8002a42:	4941      	ldr	r1, [pc, #260]	@ (8002b48 <process_modbus_request+0x7a8>)
 8002a44:	483b      	ldr	r0, [pc, #236]	@ (8002b34 <process_modbus_request+0x794>)
 8002a46:	f7ff faff 	bl	8002048 <cdc_debug_log>
                reply[7] = fc + 0x80;  // 异常函数码
 8002a4a:	f897 34de 	ldrb.w	r3, [r7, #1246]	@ 0x4de
 8002a4e:	3b80      	subs	r3, #128	@ 0x80
 8002a50:	b2da      	uxtb	r2, r3
 8002a52:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002a56:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002a5a:	71da      	strb	r2, [r3, #7]
                reply[8] = 0x02;       // 异常代码：非法数据地址
 8002a5c:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002a60:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002a64:	2202      	movs	r2, #2
 8002a66:	721a      	strb	r2, [r3, #8]
                reply_data_len = 2;
 8002a68:	2302      	movs	r3, #2
 8002a6a:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee
 8002a6e:	e201      	b.n	8002e74 <process_modbus_request+0xad4>
            } else {
                // 写入寄存器
                holding_regs[addr] = value;
 8002a70:	f8b7 34c4 	ldrh.w	r3, [r7, #1220]	@ 0x4c4
 8002a74:	492d      	ldr	r1, [pc, #180]	@ (8002b2c <process_modbus_request+0x78c>)
 8002a76:	f8b7 24c2 	ldrh.w	r2, [r7, #1218]	@ 0x4c2
 8002a7a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
                
                // 回显请求（标准Modbus写单个寄存器响应）
                reply[7] = fc;                           // 函数码
 8002a7e:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002a82:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002a86:	f897 24de 	ldrb.w	r2, [r7, #1246]	@ 0x4de
 8002a8a:	71da      	strb	r2, [r3, #7]
                reply[8] = (addr >> 8) & 0xFF;          // 地址高字节
 8002a8c:	f8b7 34c4 	ldrh.w	r3, [r7, #1220]	@ 0x4c4
 8002a90:	0a1b      	lsrs	r3, r3, #8
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	b2da      	uxtb	r2, r3
 8002a96:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002a9a:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002a9e:	721a      	strb	r2, [r3, #8]
                reply[9] = addr & 0xFF;                 // 地址低字节
 8002aa0:	f8b7 34c4 	ldrh.w	r3, [r7, #1220]	@ 0x4c4
 8002aa4:	b2da      	uxtb	r2, r3
 8002aa6:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002aaa:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002aae:	725a      	strb	r2, [r3, #9]
                reply[10] = (value >> 8) & 0xFF;        // 值高字节
 8002ab0:	f8b7 34c2 	ldrh.w	r3, [r7, #1218]	@ 0x4c2
 8002ab4:	0a1b      	lsrs	r3, r3, #8
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	b2da      	uxtb	r2, r3
 8002aba:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002abe:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002ac2:	729a      	strb	r2, [r3, #10]
                reply[11] = value & 0xFF;               // 值低字节
 8002ac4:	f8b7 34c2 	ldrh.w	r3, [r7, #1218]	@ 0x4c2
 8002ac8:	b2da      	uxtb	r2, r3
 8002aca:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002ace:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002ad2:	72da      	strb	r2, [r3, #11]
                reply_data_len = 5; // 功能码 + 地址 + 值 = 1+2+2 = 5
 8002ad4:	2305      	movs	r3, #5
 8002ad6:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee
                cdc_debug_log("MODBUS_TCP", "Write single success");
 8002ada:	491c      	ldr	r1, [pc, #112]	@ (8002b4c <process_modbus_request+0x7ac>)
 8002adc:	4815      	ldr	r0, [pc, #84]	@ (8002b34 <process_modbus_request+0x794>)
 8002ade:	f7ff fab3 	bl	8002048 <cdc_debug_log>
 8002ae2:	e1c7      	b.n	8002e74 <process_modbus_request+0xad4>
            }
        }
    } else if (fc == FC_WRITE_MULTIPLE) {
 8002ae4:	f897 34de 	ldrb.w	r3, [r7, #1246]	@ 0x4de
 8002ae8:	2b10      	cmp	r3, #16
 8002aea:	f040 81ad 	bne.w	8002e48 <process_modbus_request+0xaa8>
        cdc_debug_log("MODBUS_TCP", "Processing write multiple");
 8002aee:	4918      	ldr	r1, [pc, #96]	@ (8002b50 <process_modbus_request+0x7b0>)
 8002af0:	4810      	ldr	r0, [pc, #64]	@ (8002b34 <process_modbus_request+0x794>)
 8002af2:	f7ff faa9 	bl	8002048 <cdc_debug_log>
        
        // 检查数据长度是否足够：单元ID + 功能码 + 起始地址 + 数量 + 字节数 = 1+1+2+2+1 = 7
        if (length < 7) {
 8002af6:	f8b7 34e0 	ldrh.w	r3, [r7, #1248]	@ 0x4e0
 8002afa:	2b06      	cmp	r3, #6
 8002afc:	d82c      	bhi.n	8002b58 <process_modbus_request+0x7b8>
            cdc_debug_log("MODBUS_TCP", "Write multiple request too short");
 8002afe:	4915      	ldr	r1, [pc, #84]	@ (8002b54 <process_modbus_request+0x7b4>)
 8002b00:	480c      	ldr	r0, [pc, #48]	@ (8002b34 <process_modbus_request+0x794>)
 8002b02:	f7ff faa1 	bl	8002048 <cdc_debug_log>
            reply[7] = fc + 0x80;  // 异常函数码
 8002b06:	f897 34de 	ldrb.w	r3, [r7, #1246]	@ 0x4de
 8002b0a:	3b80      	subs	r3, #128	@ 0x80
 8002b0c:	b2da      	uxtb	r2, r3
 8002b0e:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002b12:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002b16:	71da      	strb	r2, [r3, #7]
            reply[8] = 0x03;       // 异常代码：非法数据值
 8002b18:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002b1c:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002b20:	2203      	movs	r2, #3
 8002b22:	721a      	strb	r2, [r3, #8]
            reply_data_len = 2;
 8002b24:	2302      	movs	r3, #2
 8002b26:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee
 8002b2a:	e1a3      	b.n	8002e74 <process_modbus_request+0xad4>
 8002b2c:	200006c0 	.word	0x200006c0
 8002b30:	0801fe60 	.word	0x0801fe60
 8002b34:	0801fd9c 	.word	0x0801fd9c
 8002b38:	0801fe70 	.word	0x0801fe70
 8002b3c:	0801fe88 	.word	0x0801fe88
 8002b40:	0801fea8 	.word	0x0801fea8
 8002b44:	0801feb4 	.word	0x0801feb4
 8002b48:	0801febc 	.word	0x0801febc
 8002b4c:	0801fed8 	.word	0x0801fed8
 8002b50:	0801fef0 	.word	0x0801fef0
 8002b54:	0801ff0c 	.word	0x0801ff0c
        } else {
            uint16_t addr = (buf[offset+8] << 8) | buf[offset+9];   // 起始地址
 8002b58:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002b5c:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8002b60:	881b      	ldrh	r3, [r3, #0]
 8002b62:	3308      	adds	r3, #8
 8002b64:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 8002b68:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 8002b6c:	6812      	ldr	r2, [r2, #0]
 8002b6e:	4413      	add	r3, r2
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	b21b      	sxth	r3, r3
 8002b74:	021b      	lsls	r3, r3, #8
 8002b76:	b21a      	sxth	r2, r3
 8002b78:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002b7c:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8002b80:	881b      	ldrh	r3, [r3, #0]
 8002b82:	3309      	adds	r3, #9
 8002b84:	f507 619e 	add.w	r1, r7, #1264	@ 0x4f0
 8002b88:	f5a1 619d 	sub.w	r1, r1, #1256	@ 0x4e8
 8002b8c:	6809      	ldr	r1, [r1, #0]
 8002b8e:	440b      	add	r3, r1
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	b21b      	sxth	r3, r3
 8002b94:	4313      	orrs	r3, r2
 8002b96:	b21b      	sxth	r3, r3
 8002b98:	f8a7 34d2 	strh.w	r3, [r7, #1234]	@ 0x4d2
            uint16_t qty = (buf[offset+10] << 8) | buf[offset+11];  // 寄存器数量
 8002b9c:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002ba0:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8002ba4:	881b      	ldrh	r3, [r3, #0]
 8002ba6:	330a      	adds	r3, #10
 8002ba8:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 8002bac:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 8002bb0:	6812      	ldr	r2, [r2, #0]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	b21b      	sxth	r3, r3
 8002bb8:	021b      	lsls	r3, r3, #8
 8002bba:	b21a      	sxth	r2, r3
 8002bbc:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002bc0:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8002bc4:	881b      	ldrh	r3, [r3, #0]
 8002bc6:	330b      	adds	r3, #11
 8002bc8:	f507 619e 	add.w	r1, r7, #1264	@ 0x4f0
 8002bcc:	f5a1 619d 	sub.w	r1, r1, #1256	@ 0x4e8
 8002bd0:	6809      	ldr	r1, [r1, #0]
 8002bd2:	440b      	add	r3, r1
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	b21b      	sxth	r3, r3
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	b21b      	sxth	r3, r3
 8002bdc:	f8a7 34d0 	strh.w	r3, [r7, #1232]	@ 0x4d0
            uint8_t byte_count = buf[offset+12];                    // 字节数
 8002be0:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002be4:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8002be8:	881b      	ldrh	r3, [r3, #0]
 8002bea:	330c      	adds	r3, #12
 8002bec:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 8002bf0:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 8002bf4:	6812      	ldr	r2, [r2, #0]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	f887 34cf 	strb.w	r3, [r7, #1231]	@ 0x4cf
            
            char write_info[60];
            strcpy(write_info, "Write mult addr=");
 8002bfe:	f107 0314 	add.w	r3, r7, #20
 8002c02:	4a89      	ldr	r2, [pc, #548]	@ (8002e28 <process_modbus_request+0xa88>)
 8002c04:	461c      	mov	r4, r3
 8002c06:	4615      	mov	r5, r2
 8002c08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c0c:	682b      	ldr	r3, [r5, #0]
 8002c0e:	7023      	strb	r3, [r4, #0]
            int_to_str(addr, write_info + strlen(write_info), 10);
 8002c10:	f8b7 44d2 	ldrh.w	r4, [r7, #1234]	@ 0x4d2
 8002c14:	f107 0314 	add.w	r3, r7, #20
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7fd fad9 	bl	80001d0 <strlen>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	f107 0314 	add.w	r3, r7, #20
 8002c24:	4413      	add	r3, r2
 8002c26:	220a      	movs	r2, #10
 8002c28:	4619      	mov	r1, r3
 8002c2a:	4620      	mov	r0, r4
 8002c2c:	f7ff fa7a 	bl	8002124 <int_to_str>
            const char* qty_prefix = " qty=";
 8002c30:	4b7e      	ldr	r3, [pc, #504]	@ (8002e2c <process_modbus_request+0xa8c>)
 8002c32:	f8c7 34c8 	str.w	r3, [r7, #1224]	@ 0x4c8
            strcat(write_info, qty_prefix);
 8002c36:	f107 0314 	add.w	r3, r7, #20
 8002c3a:	f8d7 14c8 	ldr.w	r1, [r7, #1224]	@ 0x4c8
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f01b fb61 	bl	801e306 <strcat>
            int_to_str(qty, write_info + strlen(write_info), 10);
 8002c44:	f8b7 44d0 	ldrh.w	r4, [r7, #1232]	@ 0x4d0
 8002c48:	f107 0314 	add.w	r3, r7, #20
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7fd fabf 	bl	80001d0 <strlen>
 8002c52:	4602      	mov	r2, r0
 8002c54:	f107 0314 	add.w	r3, r7, #20
 8002c58:	4413      	add	r3, r2
 8002c5a:	220a      	movs	r2, #10
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	4620      	mov	r0, r4
 8002c60:	f7ff fa60 	bl	8002124 <int_to_str>
            cdc_debug_log("MODBUS_TCP", write_info);
 8002c64:	f107 0314 	add.w	r3, r7, #20
 8002c68:	4619      	mov	r1, r3
 8002c6a:	4871      	ldr	r0, [pc, #452]	@ (8002e30 <process_modbus_request+0xa90>)
 8002c6c:	f7ff f9ec 	bl	8002048 <cdc_debug_log>
            
            // 验证参数
            if (qty == 0 || qty > 123 || byte_count != qty * 2) { // Modbus标准限制
 8002c70:	f8b7 34d0 	ldrh.w	r3, [r7, #1232]	@ 0x4d0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d00a      	beq.n	8002c8e <process_modbus_request+0x8ee>
 8002c78:	f8b7 34d0 	ldrh.w	r3, [r7, #1232]	@ 0x4d0
 8002c7c:	2b7b      	cmp	r3, #123	@ 0x7b
 8002c7e:	d806      	bhi.n	8002c8e <process_modbus_request+0x8ee>
 8002c80:	f897 24cf 	ldrb.w	r2, [r7, #1231]	@ 0x4cf
 8002c84:	f8b7 34d0 	ldrh.w	r3, [r7, #1232]	@ 0x4d0
 8002c88:	005b      	lsls	r3, r3, #1
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d016      	beq.n	8002cbc <process_modbus_request+0x91c>
                cdc_debug_log("MODBUS_TCP", "Invalid write multiple parameters");
 8002c8e:	4969      	ldr	r1, [pc, #420]	@ (8002e34 <process_modbus_request+0xa94>)
 8002c90:	4867      	ldr	r0, [pc, #412]	@ (8002e30 <process_modbus_request+0xa90>)
 8002c92:	f7ff f9d9 	bl	8002048 <cdc_debug_log>
                reply[7] = fc + 0x80;  // 异常函数码
 8002c96:	f897 34de 	ldrb.w	r3, [r7, #1246]	@ 0x4de
 8002c9a:	3b80      	subs	r3, #128	@ 0x80
 8002c9c:	b2da      	uxtb	r2, r3
 8002c9e:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002ca2:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002ca6:	71da      	strb	r2, [r3, #7]
                reply[8] = 0x03;       // 异常代码：非法数据值
 8002ca8:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002cac:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002cb0:	2203      	movs	r2, #3
 8002cb2:	721a      	strb	r2, [r3, #8]
                reply_data_len = 2;
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee
 8002cba:	e0db      	b.n	8002e74 <process_modbus_request+0xad4>
            } else if (addr + qty > 100) { // 地址越界检查
 8002cbc:	f8b7 24d2 	ldrh.w	r2, [r7, #1234]	@ 0x4d2
 8002cc0:	f8b7 34d0 	ldrh.w	r3, [r7, #1232]	@ 0x4d0
 8002cc4:	4413      	add	r3, r2
 8002cc6:	2b64      	cmp	r3, #100	@ 0x64
 8002cc8:	dd16      	ble.n	8002cf8 <process_modbus_request+0x958>
                cdc_debug_log("MODBUS_TCP", "Write multiple address out of bounds");
 8002cca:	495b      	ldr	r1, [pc, #364]	@ (8002e38 <process_modbus_request+0xa98>)
 8002ccc:	4858      	ldr	r0, [pc, #352]	@ (8002e30 <process_modbus_request+0xa90>)
 8002cce:	f7ff f9bb 	bl	8002048 <cdc_debug_log>
                reply[7] = fc + 0x80;  // 异常函数码
 8002cd2:	f897 34de 	ldrb.w	r3, [r7, #1246]	@ 0x4de
 8002cd6:	3b80      	subs	r3, #128	@ 0x80
 8002cd8:	b2da      	uxtb	r2, r3
 8002cda:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002cde:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002ce2:	71da      	strb	r2, [r3, #7]
                reply[8] = 0x02;       // 异常代码：非法数据地址
 8002ce4:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002ce8:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002cec:	2202      	movs	r2, #2
 8002cee:	721a      	strb	r2, [r3, #8]
                reply_data_len = 2;
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee
 8002cf6:	e0bd      	b.n	8002e74 <process_modbus_request+0xad4>
            } else if (length < 7 + byte_count) { // 检查是否有足够的数据
 8002cf8:	f897 34cf 	ldrb.w	r3, [r7, #1231]	@ 0x4cf
 8002cfc:	1d9a      	adds	r2, r3, #6
 8002cfe:	f8b7 34e0 	ldrh.w	r3, [r7, #1248]	@ 0x4e0
 8002d02:	429a      	cmp	r2, r3
 8002d04:	db16      	blt.n	8002d34 <process_modbus_request+0x994>
                cdc_debug_log("MODBUS_TCP", "Write multiple data incomplete");
 8002d06:	494d      	ldr	r1, [pc, #308]	@ (8002e3c <process_modbus_request+0xa9c>)
 8002d08:	4849      	ldr	r0, [pc, #292]	@ (8002e30 <process_modbus_request+0xa90>)
 8002d0a:	f7ff f99d 	bl	8002048 <cdc_debug_log>
                reply[7] = fc + 0x80;  // 异常函数码
 8002d0e:	f897 34de 	ldrb.w	r3, [r7, #1246]	@ 0x4de
 8002d12:	3b80      	subs	r3, #128	@ 0x80
 8002d14:	b2da      	uxtb	r2, r3
 8002d16:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002d1a:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002d1e:	71da      	strb	r2, [r3, #7]
                reply[8] = 0x03;       // 异常代码：非法数据值
 8002d20:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002d24:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002d28:	2203      	movs	r2, #3
 8002d2a:	721a      	strb	r2, [r3, #8]
                reply_data_len = 2;
 8002d2c:	2302      	movs	r3, #2
 8002d2e:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee
 8002d32:	e09f      	b.n	8002e74 <process_modbus_request+0xad4>
            } else {
                // 写入多个寄存器
                for (uint16_t i = 0; i < qty; i++) {
 8002d34:	2300      	movs	r3, #0
 8002d36:	f8a7 34e6 	strh.w	r3, [r7, #1254]	@ 0x4e6
 8002d3a:	e03c      	b.n	8002db6 <process_modbus_request+0xa16>
                    uint16_t value = (buf[offset+13+i*2] << 8) | buf[offset+14+i*2];
 8002d3c:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002d40:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8002d44:	881b      	ldrh	r3, [r3, #0]
 8002d46:	f103 020d 	add.w	r2, r3, #13
 8002d4a:	f8b7 34e6 	ldrh.w	r3, [r7, #1254]	@ 0x4e6
 8002d4e:	005b      	lsls	r3, r3, #1
 8002d50:	4413      	add	r3, r2
 8002d52:	461a      	mov	r2, r3
 8002d54:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002d58:	f5a3 639d 	sub.w	r3, r3, #1256	@ 0x4e8
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4413      	add	r3, r2
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	b21b      	sxth	r3, r3
 8002d64:	021b      	lsls	r3, r3, #8
 8002d66:	b21a      	sxth	r2, r3
 8002d68:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002d6c:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8002d70:	881b      	ldrh	r3, [r3, #0]
 8002d72:	f103 010e 	add.w	r1, r3, #14
 8002d76:	f8b7 34e6 	ldrh.w	r3, [r7, #1254]	@ 0x4e6
 8002d7a:	005b      	lsls	r3, r3, #1
 8002d7c:	440b      	add	r3, r1
 8002d7e:	4619      	mov	r1, r3
 8002d80:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002d84:	f5a3 639d 	sub.w	r3, r3, #1256	@ 0x4e8
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	440b      	add	r3, r1
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	b21b      	sxth	r3, r3
 8002d90:	4313      	orrs	r3, r2
 8002d92:	b21b      	sxth	r3, r3
 8002d94:	f8a7 34c6 	strh.w	r3, [r7, #1222]	@ 0x4c6
                    holding_regs[addr + i] = value;
 8002d98:	f8b7 24d2 	ldrh.w	r2, [r7, #1234]	@ 0x4d2
 8002d9c:	f8b7 34e6 	ldrh.w	r3, [r7, #1254]	@ 0x4e6
 8002da0:	4413      	add	r3, r2
 8002da2:	4927      	ldr	r1, [pc, #156]	@ (8002e40 <process_modbus_request+0xaa0>)
 8002da4:	f8b7 24c6 	ldrh.w	r2, [r7, #1222]	@ 0x4c6
 8002da8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
                for (uint16_t i = 0; i < qty; i++) {
 8002dac:	f8b7 34e6 	ldrh.w	r3, [r7, #1254]	@ 0x4e6
 8002db0:	3301      	adds	r3, #1
 8002db2:	f8a7 34e6 	strh.w	r3, [r7, #1254]	@ 0x4e6
 8002db6:	f8b7 24e6 	ldrh.w	r2, [r7, #1254]	@ 0x4e6
 8002dba:	f8b7 34d0 	ldrh.w	r3, [r7, #1232]	@ 0x4d0
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d3bc      	bcc.n	8002d3c <process_modbus_request+0x99c>
                }
                
                // 响应：功能码 + 起始地址 + 寄存器数量
                reply[7] = fc;                          // 函数码
 8002dc2:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002dc6:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002dca:	f897 24de 	ldrb.w	r2, [r7, #1246]	@ 0x4de
 8002dce:	71da      	strb	r2, [r3, #7]
                reply[8] = (addr >> 8) & 0xFF;         // 起始地址高字节
 8002dd0:	f8b7 34d2 	ldrh.w	r3, [r7, #1234]	@ 0x4d2
 8002dd4:	0a1b      	lsrs	r3, r3, #8
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	b2da      	uxtb	r2, r3
 8002dda:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002dde:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002de2:	721a      	strb	r2, [r3, #8]
                reply[9] = addr & 0xFF;                // 起始地址低字节
 8002de4:	f8b7 34d2 	ldrh.w	r3, [r7, #1234]	@ 0x4d2
 8002de8:	b2da      	uxtb	r2, r3
 8002dea:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002dee:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002df2:	725a      	strb	r2, [r3, #9]
                reply[10] = (qty >> 8) & 0xFF;         // 数量高字节
 8002df4:	f8b7 34d0 	ldrh.w	r3, [r7, #1232]	@ 0x4d0
 8002df8:	0a1b      	lsrs	r3, r3, #8
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	b2da      	uxtb	r2, r3
 8002dfe:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002e02:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002e06:	729a      	strb	r2, [r3, #10]
                reply[11] = qty & 0xFF;                // 数量低字节
 8002e08:	f8b7 34d0 	ldrh.w	r3, [r7, #1232]	@ 0x4d0
 8002e0c:	b2da      	uxtb	r2, r3
 8002e0e:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002e12:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002e16:	72da      	strb	r2, [r3, #11]
                reply_data_len = 5; // 功能码 + 地址 + 数量 = 1+2+2 = 5
 8002e18:	2305      	movs	r3, #5
 8002e1a:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee
                cdc_debug_log("MODBUS_TCP", "Write multiple success");
 8002e1e:	4909      	ldr	r1, [pc, #36]	@ (8002e44 <process_modbus_request+0xaa4>)
 8002e20:	4803      	ldr	r0, [pc, #12]	@ (8002e30 <process_modbus_request+0xa90>)
 8002e22:	f7ff f911 	bl	8002048 <cdc_debug_log>
 8002e26:	e025      	b.n	8002e74 <process_modbus_request+0xad4>
 8002e28:	0801ff30 	.word	0x0801ff30
 8002e2c:	0801fe2c 	.word	0x0801fe2c
 8002e30:	0801fd9c 	.word	0x0801fd9c
 8002e34:	0801ff44 	.word	0x0801ff44
 8002e38:	0801ff68 	.word	0x0801ff68
 8002e3c:	0801ff90 	.word	0x0801ff90
 8002e40:	200006c0 	.word	0x200006c0
 8002e44:	0801ffb0 	.word	0x0801ffb0
            }
        }
    } else {
        // 其他功能码暂时返回不支持
        cdc_debug_log("MODBUS_TCP", "Unsupported function code");
 8002e48:	4974      	ldr	r1, [pc, #464]	@ (800301c <process_modbus_request+0xc7c>)
 8002e4a:	4875      	ldr	r0, [pc, #468]	@ (8003020 <process_modbus_request+0xc80>)
 8002e4c:	f7ff f8fc 	bl	8002048 <cdc_debug_log>
        reply[7] = fc + 0x80;  // 异常函数码
 8002e50:	f897 34de 	ldrb.w	r3, [r7, #1246]	@ 0x4de
 8002e54:	3b80      	subs	r3, #128	@ 0x80
 8002e56:	b2da      	uxtb	r2, r3
 8002e58:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002e5c:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002e60:	71da      	strb	r2, [r3, #7]
        reply[8] = 0x01;       // 异常代码：非法函数码
 8002e62:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002e66:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	721a      	strb	r2, [r3, #8]
        reply_data_len = 2;
 8002e6e:	2302      	movs	r3, #2
 8002e70:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee
    }

    // 设置长度字段 (包含单元ID + 数据部分)
    uint16_t total_length = reply_data_len + 1; // +1 for unit_id
 8002e74:	f8b7 34ee 	ldrh.w	r3, [r7, #1262]	@ 0x4ee
 8002e78:	3301      	adds	r3, #1
 8002e7a:	f8a7 34ae 	strh.w	r3, [r7, #1198]	@ 0x4ae
    reply[4] = (total_length >> 8) & 0xFF; 
 8002e7e:	f8b7 34ae 	ldrh.w	r3, [r7, #1198]	@ 0x4ae
 8002e82:	0a1b      	lsrs	r3, r3, #8
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	b2da      	uxtb	r2, r3
 8002e88:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002e8c:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002e90:	711a      	strb	r2, [r3, #4]
    reply[5] = total_length & 0xFF;
 8002e92:	f8b7 34ae 	ldrh.w	r3, [r7, #1198]	@ 0x4ae
 8002e96:	b2da      	uxtb	r2, r3
 8002e98:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002e9c:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002ea0:	715a      	strb	r2, [r3, #5]
    
    cdc_debug_log("MODBUS_TCP", "Sending reply");
 8002ea2:	4960      	ldr	r1, [pc, #384]	@ (8003024 <process_modbus_request+0xc84>)
 8002ea4:	485e      	ldr	r0, [pc, #376]	@ (8003020 <process_modbus_request+0xc80>)
 8002ea6:	f7ff f8cf 	bl	8002048 <cdc_debug_log>
    
    // 发送完整的TCP帧 (6字节头 + 数据部分)
    uint16_t total_frame_len = 6 + total_length;
 8002eaa:	f8b7 34ae 	ldrh.w	r3, [r7, #1198]	@ 0x4ae
 8002eae:	3306      	adds	r3, #6
 8002eb0:	f8a7 34ac 	strh.w	r3, [r7, #1196]	@ 0x4ac
    
    // 检查TCP发送缓冲区是否有足够空间
    u16_t available_space = tcp_sndbuf(tpcb);
 8002eb4:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002eb8:	f2a3 43e4 	subw	r3, r3, #1252	@ 0x4e4
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8002ec2:	f8a7 34aa 	strh.w	r3, [r7, #1194]	@ 0x4aa
    if (available_space < total_frame_len) {
 8002ec6:	f8b7 24aa 	ldrh.w	r2, [r7, #1194]	@ 0x4aa
 8002eca:	f8b7 34ac 	ldrh.w	r3, [r7, #1196]	@ 0x4ac
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d223      	bcs.n	8002f1a <process_modbus_request+0xb7a>
        char space_msg[50];
        strcpy(space_msg, "TCP buffer low: available=");
 8002ed2:	f107 0314 	add.w	r3, r7, #20
 8002ed6:	4a54      	ldr	r2, [pc, #336]	@ (8003028 <process_modbus_request+0xc88>)
 8002ed8:	461c      	mov	r4, r3
 8002eda:	4615      	mov	r5, r2
 8002edc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ede:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ee0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002ee4:	c403      	stmia	r4!, {r0, r1}
 8002ee6:	8022      	strh	r2, [r4, #0]
 8002ee8:	3402      	adds	r4, #2
 8002eea:	0c13      	lsrs	r3, r2, #16
 8002eec:	7023      	strb	r3, [r4, #0]
        int_to_str(available_space, space_msg + strlen(space_msg), 10);
 8002eee:	f8b7 44aa 	ldrh.w	r4, [r7, #1194]	@ 0x4aa
 8002ef2:	f107 0314 	add.w	r3, r7, #20
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7fd f96a 	bl	80001d0 <strlen>
 8002efc:	4602      	mov	r2, r0
 8002efe:	f107 0314 	add.w	r3, r7, #20
 8002f02:	4413      	add	r3, r2
 8002f04:	220a      	movs	r2, #10
 8002f06:	4619      	mov	r1, r3
 8002f08:	4620      	mov	r0, r4
 8002f0a:	f7ff f90b 	bl	8002124 <int_to_str>
        cdc_debug_log("MODBUS_TCP", space_msg);
 8002f0e:	f107 0314 	add.w	r3, r7, #20
 8002f12:	4619      	mov	r1, r3
 8002f14:	4842      	ldr	r0, [pc, #264]	@ (8003020 <process_modbus_request+0xc80>)
 8002f16:	f7ff f897 	bl	8002048 <cdc_debug_log>
        // 仍然尝试发送，但记录警告
    }
    
    err_t write_err = tcp_write(tpcb, reply, total_frame_len, TCP_WRITE_FLAG_COPY);
 8002f1a:	f8b7 24ac 	ldrh.w	r2, [r7, #1196]	@ 0x4ac
 8002f1e:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8002f22:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002f26:	f2a3 40e4 	subw	r0, r3, #1252	@ 0x4e4
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	6800      	ldr	r0, [r0, #0]
 8002f2e:	f015 fdbd 	bl	8018aac <tcp_write>
 8002f32:	4603      	mov	r3, r0
 8002f34:	f887 34a9 	strb.w	r3, [r7, #1193]	@ 0x4a9
    if (write_err != ERR_OK) {
 8002f38:	f997 34a9 	ldrsb.w	r3, [r7, #1193]	@ 0x4a9
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d02f      	beq.n	8002fa0 <process_modbus_request+0xc00>
        char write_err_msg[40];
        strcpy(write_err_msg, "TCP write failed err=");
 8002f40:	f107 0314 	add.w	r3, r7, #20
 8002f44:	4a39      	ldr	r2, [pc, #228]	@ (800302c <process_modbus_request+0xc8c>)
 8002f46:	461c      	mov	r4, r3
 8002f48:	4615      	mov	r5, r2
 8002f4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f4e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002f52:	6020      	str	r0, [r4, #0]
 8002f54:	3404      	adds	r4, #4
 8002f56:	8021      	strh	r1, [r4, #0]
        int_to_str(write_err, write_err_msg + strlen(write_err_msg), 10);
 8002f58:	f997 44a9 	ldrsb.w	r4, [r7, #1193]	@ 0x4a9
 8002f5c:	f107 0314 	add.w	r3, r7, #20
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7fd f935 	bl	80001d0 <strlen>
 8002f66:	4602      	mov	r2, r0
 8002f68:	f107 0314 	add.w	r3, r7, #20
 8002f6c:	4413      	add	r3, r2
 8002f6e:	220a      	movs	r2, #10
 8002f70:	4619      	mov	r1, r3
 8002f72:	4620      	mov	r0, r4
 8002f74:	f7ff f8d6 	bl	8002124 <int_to_str>
        cdc_debug_log("MODBUS_TCP", write_err_msg);
 8002f78:	f107 0314 	add.w	r3, r7, #20
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	4828      	ldr	r0, [pc, #160]	@ (8003020 <process_modbus_request+0xc80>)
 8002f80:	f7ff f862 	bl	8002048 <cdc_debug_log>
        
        // 如果发送缓冲区满了，强制输出
        if (write_err == ERR_MEM) {
 8002f84:	f997 34a9 	ldrsb.w	r3, [r7, #1193]	@ 0x4a9
 8002f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f8c:	d106      	bne.n	8002f9c <process_modbus_request+0xbfc>
            tcp_output(tpcb);
 8002f8e:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002f92:	f2a3 43e4 	subw	r3, r3, #1252	@ 0x4e4
 8002f96:	6818      	ldr	r0, [r3, #0]
 8002f98:	f016 fb72 	bl	8019680 <tcp_output>
        }
        return ERR_OK; // 即使写入失败也返回OK，避免连接中断
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	e038      	b.n	8003012 <process_modbus_request+0xc72>
    }
    
    err_t output_err = tcp_output(tpcb);
 8002fa0:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002fa4:	f2a3 43e4 	subw	r3, r3, #1252	@ 0x4e4
 8002fa8:	6818      	ldr	r0, [r3, #0]
 8002faa:	f016 fb69 	bl	8019680 <tcp_output>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	f887 34a8 	strb.w	r3, [r7, #1192]	@ 0x4a8
    if (output_err != ERR_OK) {
 8002fb4:	f997 34a8 	ldrsb.w	r3, [r7, #1192]	@ 0x4a8
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d025      	beq.n	8003008 <process_modbus_request+0xc68>
        char output_err_msg[40];
        strcpy(output_err_msg, "TCP output failed err=");
 8002fbc:	f107 0314 	add.w	r3, r7, #20
 8002fc0:	4a1b      	ldr	r2, [pc, #108]	@ (8003030 <process_modbus_request+0xc90>)
 8002fc2:	461c      	mov	r4, r3
 8002fc4:	4615      	mov	r5, r2
 8002fc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002fc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002fca:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002fce:	6020      	str	r0, [r4, #0]
 8002fd0:	3404      	adds	r4, #4
 8002fd2:	8021      	strh	r1, [r4, #0]
 8002fd4:	3402      	adds	r4, #2
 8002fd6:	0c0b      	lsrs	r3, r1, #16
 8002fd8:	7023      	strb	r3, [r4, #0]
        int_to_str(output_err, output_err_msg + strlen(output_err_msg), 10);
 8002fda:	f997 44a8 	ldrsb.w	r4, [r7, #1192]	@ 0x4a8
 8002fde:	f107 0314 	add.w	r3, r7, #20
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7fd f8f4 	bl	80001d0 <strlen>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	f107 0314 	add.w	r3, r7, #20
 8002fee:	4413      	add	r3, r2
 8002ff0:	220a      	movs	r2, #10
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	4620      	mov	r0, r4
 8002ff6:	f7ff f895 	bl	8002124 <int_to_str>
        cdc_debug_log("MODBUS_TCP", output_err_msg);
 8002ffa:	f107 0314 	add.w	r3, r7, #20
 8002ffe:	4619      	mov	r1, r3
 8003000:	4807      	ldr	r0, [pc, #28]	@ (8003020 <process_modbus_request+0xc80>)
 8003002:	f7ff f821 	bl	8002048 <cdc_debug_log>
 8003006:	e003      	b.n	8003010 <process_modbus_request+0xc70>
    } else {
        cdc_debug_log("MODBUS_TCP", "Reply sent successfully");
 8003008:	490a      	ldr	r1, [pc, #40]	@ (8003034 <process_modbus_request+0xc94>)
 800300a:	4805      	ldr	r0, [pc, #20]	@ (8003020 <process_modbus_request+0xc80>)
 800300c:	f7ff f81c 	bl	8002048 <cdc_debug_log>
    }
    
    return ERR_OK;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	f507 679e 	add.w	r7, r7, #1264	@ 0x4f0
 8003018:	46bd      	mov	sp, r7
 800301a:	bdb0      	pop	{r4, r5, r7, pc}
 800301c:	0801ffc8 	.word	0x0801ffc8
 8003020:	0801fd9c 	.word	0x0801fd9c
 8003024:	0801ffe4 	.word	0x0801ffe4
 8003028:	0801fff4 	.word	0x0801fff4
 800302c:	08020010 	.word	0x08020010
 8003030:	08020028 	.word	0x08020028
 8003034:	08020040 	.word	0x08020040

08003038 <modbus_tcp_init>:

// 初始化TCP Server
void modbus_tcp_init(void) {
 8003038:	b5b0      	push	{r4, r5, r7, lr}
 800303a:	b0ac      	sub	sp, #176	@ 0xb0
 800303c:	af00      	add	r7, sp, #0
    // 首先清零所有寄存器
    for (int i = 0; i < 100; i++) {
 800303e:	2300      	movs	r3, #0
 8003040:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003044:	e00a      	b.n	800305c <modbus_tcp_init+0x24>
        holding_regs[i] = 3;
 8003046:	4a8f      	ldr	r2, [pc, #572]	@ (8003284 <modbus_tcp_init+0x24c>)
 8003048:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800304c:	2103      	movs	r1, #3
 800304e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < 100; i++) {
 8003052:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003056:	3301      	adds	r3, #1
 8003058:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800305c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003060:	2b63      	cmp	r3, #99	@ 0x63
 8003062:	ddf0      	ble.n	8003046 <modbus_tcp_init+0xe>
    }
    

    
    cdc_debug_log("MODBUS_TCP", "Clearing and initializing registers");
 8003064:	4988      	ldr	r1, [pc, #544]	@ (8003288 <modbus_tcp_init+0x250>)
 8003066:	4889      	ldr	r0, [pc, #548]	@ (800328c <modbus_tcp_init+0x254>)
 8003068:	f7fe ffee 	bl	8002048 <cdc_debug_log>
    
    // 验证寄存器初始值并输出调试信息
    char reg_info[80];
    for (int i = 0; i < 4; i++) {
 800306c:	2300      	movs	r3, #0
 800306e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003072:	e09f      	b.n	80031b4 <modbus_tcp_init+0x17c>
        strcpy(reg_info, "Reg[");
 8003074:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003078:	4a85      	ldr	r2, [pc, #532]	@ (8003290 <modbus_tcp_init+0x258>)
 800307a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800307e:	6018      	str	r0, [r3, #0]
 8003080:	3304      	adds	r3, #4
 8003082:	7019      	strb	r1, [r3, #0]
        int_to_str(i, reg_info + strlen(reg_info), 10);
 8003084:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003088:	4618      	mov	r0, r3
 800308a:	f7fd f8a1 	bl	80001d0 <strlen>
 800308e:	4602      	mov	r2, r0
 8003090:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003094:	4413      	add	r3, r2
 8003096:	220a      	movs	r2, #10
 8003098:	4619      	mov	r1, r3
 800309a:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 800309e:	f7ff f841 	bl	8002124 <int_to_str>
        strcat(reg_info, "]=0x");
 80030a2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7fd f892 	bl	80001d0 <strlen>
 80030ac:	4603      	mov	r3, r0
 80030ae:	461a      	mov	r2, r3
 80030b0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80030b4:	4413      	add	r3, r2
 80030b6:	4a77      	ldr	r2, [pc, #476]	@ (8003294 <modbus_tcp_init+0x25c>)
 80030b8:	6810      	ldr	r0, [r2, #0]
 80030ba:	6018      	str	r0, [r3, #0]
 80030bc:	7912      	ldrb	r2, [r2, #4]
 80030be:	711a      	strb	r2, [r3, #4]
        // 简单的十六进制转换
        uint16_t val = holding_regs[i];
 80030c0:	4a70      	ldr	r2, [pc, #448]	@ (8003284 <modbus_tcp_init+0x24c>)
 80030c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80030c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030ca:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
        char hex_str[5];
        hex_str[4] = '\0';
 80030ce:	2300      	movs	r3, #0
 80030d0:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
        for (int j = 3; j >= 0; j--) {
 80030d4:	2303      	movs	r3, #3
 80030d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80030da:	e026      	b.n	800312a <modbus_tcp_init+0xf2>
            int nibble = (val >> (j * 4)) & 0xF;
 80030dc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	@ 0x96
 80030e0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	fa42 f303 	asr.w	r3, r2, r3
 80030ea:	f003 030f 	and.w	r3, r3, #15
 80030ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
            hex_str[3-j] = (nibble < 10) ? ('0' + nibble) : ('A' + nibble - 10);
 80030f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80030f6:	2b09      	cmp	r3, #9
 80030f8:	dc05      	bgt.n	8003106 <modbus_tcp_init+0xce>
 80030fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	3330      	adds	r3, #48	@ 0x30
 8003102:	b2db      	uxtb	r3, r3
 8003104:	e004      	b.n	8003110 <modbus_tcp_init+0xd8>
 8003106:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800310a:	b2db      	uxtb	r3, r3
 800310c:	3337      	adds	r3, #55	@ 0x37
 800310e:	b2db      	uxtb	r3, r3
 8003110:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8003114:	f1c2 0203 	rsb	r2, r2, #3
 8003118:	32b0      	adds	r2, #176	@ 0xb0
 800311a:	443a      	add	r2, r7
 800311c:	f802 3c78 	strb.w	r3, [r2, #-120]
        for (int j = 3; j >= 0; j--) {
 8003120:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003124:	3b01      	subs	r3, #1
 8003126:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800312a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800312e:	2b00      	cmp	r3, #0
 8003130:	dad4      	bge.n	80030dc <modbus_tcp_init+0xa4>
        }
        strcat(reg_info, hex_str);
 8003132:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8003136:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800313a:	4611      	mov	r1, r2
 800313c:	4618      	mov	r0, r3
 800313e:	f01b f8e2 	bl	801e306 <strcat>
        strcat(reg_info, " (");
 8003142:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003146:	4618      	mov	r0, r3
 8003148:	f7fd f842 	bl	80001d0 <strlen>
 800314c:	4603      	mov	r3, r0
 800314e:	461a      	mov	r2, r3
 8003150:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003154:	4413      	add	r3, r2
 8003156:	4a50      	ldr	r2, [pc, #320]	@ (8003298 <modbus_tcp_init+0x260>)
 8003158:	8811      	ldrh	r1, [r2, #0]
 800315a:	7892      	ldrb	r2, [r2, #2]
 800315c:	8019      	strh	r1, [r3, #0]
 800315e:	709a      	strb	r2, [r3, #2]
        int_to_str(val, reg_info + strlen(reg_info), 10);
 8003160:	f8b7 4096 	ldrh.w	r4, [r7, #150]	@ 0x96
 8003164:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003168:	4618      	mov	r0, r3
 800316a:	f7fd f831 	bl	80001d0 <strlen>
 800316e:	4602      	mov	r2, r0
 8003170:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003174:	4413      	add	r3, r2
 8003176:	220a      	movs	r2, #10
 8003178:	4619      	mov	r1, r3
 800317a:	4620      	mov	r0, r4
 800317c:	f7fe ffd2 	bl	8002124 <int_to_str>
        strcat(reg_info, ")");
 8003180:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003184:	4618      	mov	r0, r3
 8003186:	f7fd f823 	bl	80001d0 <strlen>
 800318a:	4603      	mov	r3, r0
 800318c:	461a      	mov	r2, r3
 800318e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003192:	4413      	add	r3, r2
 8003194:	4941      	ldr	r1, [pc, #260]	@ (800329c <modbus_tcp_init+0x264>)
 8003196:	461a      	mov	r2, r3
 8003198:	460b      	mov	r3, r1
 800319a:	881b      	ldrh	r3, [r3, #0]
 800319c:	8013      	strh	r3, [r2, #0]
        cdc_debug_log("MODBUS_TCP", reg_info);
 800319e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80031a2:	4619      	mov	r1, r3
 80031a4:	4839      	ldr	r0, [pc, #228]	@ (800328c <modbus_tcp_init+0x254>)
 80031a6:	f7fe ff4f 	bl	8002048 <cdc_debug_log>
    for (int i = 0; i < 4; i++) {
 80031aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80031ae:	3301      	adds	r3, #1
 80031b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80031b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80031b8:	2b03      	cmp	r3, #3
 80031ba:	f77f af5b 	ble.w	8003074 <modbus_tcp_init+0x3c>
    }
    
    cdc_debug_log("MODBUS_TCP", "Register initialization verified");
 80031be:	4938      	ldr	r1, [pc, #224]	@ (80032a0 <modbus_tcp_init+0x268>)
 80031c0:	4832      	ldr	r0, [pc, #200]	@ (800328c <modbus_tcp_init+0x254>)
 80031c2:	f7fe ff41 	bl	8002048 <cdc_debug_log>
    
    struct tcp_pcb *tpcb = tcp_new();
 80031c6:	f012 fd6f 	bl	8015ca8 <tcp_new>
 80031ca:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
    if (tpcb == NULL) {
 80031ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d104      	bne.n	80031e0 <modbus_tcp_init+0x1a8>
        cdc_debug_log("MODBUS_TCP", "Failed to create TCP PCB");
 80031d6:	4933      	ldr	r1, [pc, #204]	@ (80032a4 <modbus_tcp_init+0x26c>)
 80031d8:	482c      	ldr	r0, [pc, #176]	@ (800328c <modbus_tcp_init+0x254>)
 80031da:	f7fe ff35 	bl	8002048 <cdc_debug_log>
        return;
 80031de:	e04e      	b.n	800327e <modbus_tcp_init+0x246>
    }
    
    err_t bind_err = tcp_bind(tpcb, IP_ADDR_ANY, 502); // Modbus TCP端口502
 80031e0:	f44f 72fb 	mov.w	r2, #502	@ 0x1f6
 80031e4:	4930      	ldr	r1, [pc, #192]	@ (80032a8 <modbus_tcp_init+0x270>)
 80031e6:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 80031ea:	f011 fcb7 	bl	8014b5c <tcp_bind>
 80031ee:	4603      	mov	r3, r0
 80031f0:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
    if (bind_err != ERR_OK) {
 80031f4:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d027      	beq.n	800324c <modbus_tcp_init+0x214>
        char err_msg[50];
        const char* prefix = "TCP bind failed: ";
 80031fc:	4b2b      	ldr	r3, [pc, #172]	@ (80032ac <modbus_tcp_init+0x274>)
 80031fe:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        strcpy(err_msg, prefix);
 8003202:	1d3b      	adds	r3, r7, #4
 8003204:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8003208:	4618      	mov	r0, r3
 800320a:	f01b f96a 	bl	801e4e2 <strcpy>
        int_to_str(bind_err, err_msg + strlen(prefix), sizeof(err_msg) - strlen(prefix));
 800320e:	f997 409f 	ldrsb.w	r4, [r7, #159]	@ 0x9f
 8003212:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8003216:	f7fc ffdb 	bl	80001d0 <strlen>
 800321a:	4602      	mov	r2, r0
 800321c:	1d3b      	adds	r3, r7, #4
 800321e:	189d      	adds	r5, r3, r2
 8003220:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8003224:	f7fc ffd4 	bl	80001d0 <strlen>
 8003228:	4603      	mov	r3, r0
 800322a:	f1c3 0332 	rsb	r3, r3, #50	@ 0x32
 800322e:	461a      	mov	r2, r3
 8003230:	4629      	mov	r1, r5
 8003232:	4620      	mov	r0, r4
 8003234:	f7fe ff76 	bl	8002124 <int_to_str>
        cdc_debug_log("MODBUS_TCP", err_msg);
 8003238:	1d3b      	adds	r3, r7, #4
 800323a:	4619      	mov	r1, r3
 800323c:	4813      	ldr	r0, [pc, #76]	@ (800328c <modbus_tcp_init+0x254>)
 800323e:	f7fe ff03 	bl	8002048 <cdc_debug_log>
        tcp_close(tpcb);
 8003242:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8003246:	f011 fb93 	bl	8014970 <tcp_close>
 800324a:	e018      	b.n	800327e <modbus_tcp_init+0x246>
        return;
    }
    
    tpcb = tcp_listen(tpcb);
 800324c:	21ff      	movs	r1, #255	@ 0xff
 800324e:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8003252:	f011 fd3b 	bl	8014ccc <tcp_listen_with_backlog>
 8003256:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
    if (tpcb == NULL) {
 800325a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d104      	bne.n	800326c <modbus_tcp_init+0x234>
        cdc_debug_log("MODBUS_TCP", "Failed to set TCP to listen mode");
 8003262:	4913      	ldr	r1, [pc, #76]	@ (80032b0 <modbus_tcp_init+0x278>)
 8003264:	4809      	ldr	r0, [pc, #36]	@ (800328c <modbus_tcp_init+0x254>)
 8003266:	f7fe feef 	bl	8002048 <cdc_debug_log>
        return;
 800326a:	e008      	b.n	800327e <modbus_tcp_init+0x246>
    }
    
    tcp_accept(tpcb, modbus_tcp_accept);
 800326c:	4911      	ldr	r1, [pc, #68]	@ (80032b4 <modbus_tcp_init+0x27c>)
 800326e:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8003272:	f012 fd87 	bl	8015d84 <tcp_accept>
    cdc_debug_log("MODBUS_TCP", "TCP server started on port 502");
 8003276:	4910      	ldr	r1, [pc, #64]	@ (80032b8 <modbus_tcp_init+0x280>)
 8003278:	4804      	ldr	r0, [pc, #16]	@ (800328c <modbus_tcp_init+0x254>)
 800327a:	f7fe fee5 	bl	8002048 <cdc_debug_log>
}
 800327e:	37b0      	adds	r7, #176	@ 0xb0
 8003280:	46bd      	mov	sp, r7
 8003282:	bdb0      	pop	{r4, r5, r7, pc}
 8003284:	200006c0 	.word	0x200006c0
 8003288:	08020058 	.word	0x08020058
 800328c:	0801fd9c 	.word	0x0801fd9c
 8003290:	0802007c 	.word	0x0802007c
 8003294:	08020084 	.word	0x08020084
 8003298:	0802008c 	.word	0x0802008c
 800329c:	08020090 	.word	0x08020090
 80032a0:	08020094 	.word	0x08020094
 80032a4:	080200b8 	.word	0x080200b8
 80032a8:	08023da0 	.word	0x08023da0
 80032ac:	080200d4 	.word	0x080200d4
 80032b0:	080200e8 	.word	0x080200e8
 80032b4:	0800338d 	.word	0x0800338d
 80032b8:	0802010c 	.word	0x0802010c

080032bc <modbus_tcp_sent>:

// 发送确认回调
err_t modbus_tcp_sent(void *arg, struct tcp_pcb *tpcb, u16_t len) {
 80032bc:	b590      	push	{r4, r7, lr}
 80032be:	b08f      	sub	sp, #60	@ 0x3c
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	60b9      	str	r1, [r7, #8]
 80032c6:	4613      	mov	r3, r2
 80032c8:	80fb      	strh	r3, [r7, #6]
    // 简单记录发送确认
    char sent_msg[40];
    strcpy(sent_msg, "TCP sent ");
 80032ca:	f107 0310 	add.w	r3, r7, #16
 80032ce:	4a17      	ldr	r2, [pc, #92]	@ (800332c <modbus_tcp_sent+0x70>)
 80032d0:	ca07      	ldmia	r2, {r0, r1, r2}
 80032d2:	c303      	stmia	r3!, {r0, r1}
 80032d4:	801a      	strh	r2, [r3, #0]
    int_to_str(len, sent_msg + strlen(sent_msg), 10);
 80032d6:	88fc      	ldrh	r4, [r7, #6]
 80032d8:	f107 0310 	add.w	r3, r7, #16
 80032dc:	4618      	mov	r0, r3
 80032de:	f7fc ff77 	bl	80001d0 <strlen>
 80032e2:	4602      	mov	r2, r0
 80032e4:	f107 0310 	add.w	r3, r7, #16
 80032e8:	4413      	add	r3, r2
 80032ea:	220a      	movs	r2, #10
 80032ec:	4619      	mov	r1, r3
 80032ee:	4620      	mov	r0, r4
 80032f0:	f7fe ff18 	bl	8002124 <int_to_str>
    strcat(sent_msg, " bytes");
 80032f4:	f107 0310 	add.w	r3, r7, #16
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7fc ff69 	bl	80001d0 <strlen>
 80032fe:	4603      	mov	r3, r0
 8003300:	461a      	mov	r2, r3
 8003302:	f107 0310 	add.w	r3, r7, #16
 8003306:	4413      	add	r3, r2
 8003308:	4a09      	ldr	r2, [pc, #36]	@ (8003330 <modbus_tcp_sent+0x74>)
 800330a:	6810      	ldr	r0, [r2, #0]
 800330c:	6018      	str	r0, [r3, #0]
 800330e:	8891      	ldrh	r1, [r2, #4]
 8003310:	7992      	ldrb	r2, [r2, #6]
 8003312:	8099      	strh	r1, [r3, #4]
 8003314:	719a      	strb	r2, [r3, #6]
    cdc_debug_log("MODBUS_TCP", sent_msg);
 8003316:	f107 0310 	add.w	r3, r7, #16
 800331a:	4619      	mov	r1, r3
 800331c:	4805      	ldr	r0, [pc, #20]	@ (8003334 <modbus_tcp_sent+0x78>)
 800331e:	f7fe fe93 	bl	8002048 <cdc_debug_log>
    return ERR_OK;
 8003322:	2300      	movs	r3, #0
}
 8003324:	4618      	mov	r0, r3
 8003326:	373c      	adds	r7, #60	@ 0x3c
 8003328:	46bd      	mov	sp, r7
 800332a:	bd90      	pop	{r4, r7, pc}
 800332c:	0802012c 	.word	0x0802012c
 8003330:	08020138 	.word	0x08020138
 8003334:	0801fd9c 	.word	0x0801fd9c

08003338 <modbus_tcp_error>:

// 连接错误回调
void modbus_tcp_error(void *arg, err_t err) {
 8003338:	b590      	push	{r4, r7, lr}
 800333a:	b08d      	sub	sp, #52	@ 0x34
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	460b      	mov	r3, r1
 8003342:	70fb      	strb	r3, [r7, #3]
    char err_msg[40];
    strcpy(err_msg, "TCP error: ");
 8003344:	f107 0308 	add.w	r3, r7, #8
 8003348:	4a0e      	ldr	r2, [pc, #56]	@ (8003384 <modbus_tcp_error+0x4c>)
 800334a:	ca07      	ldmia	r2, {r0, r1, r2}
 800334c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    int_to_str(err, err_msg + strlen(err_msg), 10);
 8003350:	f997 4003 	ldrsb.w	r4, [r7, #3]
 8003354:	f107 0308 	add.w	r3, r7, #8
 8003358:	4618      	mov	r0, r3
 800335a:	f7fc ff39 	bl	80001d0 <strlen>
 800335e:	4602      	mov	r2, r0
 8003360:	f107 0308 	add.w	r3, r7, #8
 8003364:	4413      	add	r3, r2
 8003366:	220a      	movs	r2, #10
 8003368:	4619      	mov	r1, r3
 800336a:	4620      	mov	r0, r4
 800336c:	f7fe feda 	bl	8002124 <int_to_str>
    cdc_debug_log("MODBUS_TCP", err_msg);
 8003370:	f107 0308 	add.w	r3, r7, #8
 8003374:	4619      	mov	r1, r3
 8003376:	4804      	ldr	r0, [pc, #16]	@ (8003388 <modbus_tcp_error+0x50>)
 8003378:	f7fe fe66 	bl	8002048 <cdc_debug_log>
}
 800337c:	bf00      	nop
 800337e:	3734      	adds	r7, #52	@ 0x34
 8003380:	46bd      	mov	sp, r7
 8003382:	bd90      	pop	{r4, r7, pc}
 8003384:	08020140 	.word	0x08020140
 8003388:	0801fd9c 	.word	0x0801fd9c

0800338c <modbus_tcp_accept>:

// Accept回调
err_t modbus_tcp_accept(void *arg, struct tcp_pcb *newpcb, err_t err) {
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	60b9      	str	r1, [r7, #8]
 8003396:	4613      	mov	r3, r2
 8003398:	71fb      	strb	r3, [r7, #7]
    if (err != ERR_OK || newpcb == NULL) {
 800339a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d102      	bne.n	80033a8 <modbus_tcp_accept+0x1c>
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d106      	bne.n	80033b6 <modbus_tcp_accept+0x2a>
        cdc_debug_log("MODBUS_TCP", "Accept failed");
 80033a8:	4911      	ldr	r1, [pc, #68]	@ (80033f0 <modbus_tcp_accept+0x64>)
 80033aa:	4812      	ldr	r0, [pc, #72]	@ (80033f4 <modbus_tcp_accept+0x68>)
 80033ac:	f7fe fe4c 	bl	8002048 <cdc_debug_log>
        return err;
 80033b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033b4:	e017      	b.n	80033e6 <modbus_tcp_accept+0x5a>
    }
    
    cdc_debug_log("MODBUS_TCP", "Client connected");
 80033b6:	4910      	ldr	r1, [pc, #64]	@ (80033f8 <modbus_tcp_accept+0x6c>)
 80033b8:	480e      	ldr	r0, [pc, #56]	@ (80033f4 <modbus_tcp_accept+0x68>)
 80033ba:	f7fe fe45 	bl	8002048 <cdc_debug_log>
    
    // 设置连接参数
    tcp_setprio(newpcb, TCP_PRIO_MIN);
 80033be:	2101      	movs	r1, #1
 80033c0:	68b8      	ldr	r0, [r7, #8]
 80033c2:	f012 fa7f 	bl	80158c4 <tcp_setprio>
    tcp_recv(newpcb, modbus_tcp_recv);
 80033c6:	490d      	ldr	r1, [pc, #52]	@ (80033fc <modbus_tcp_accept+0x70>)
 80033c8:	68b8      	ldr	r0, [r7, #8]
 80033ca:	f012 fc75 	bl	8015cb8 <tcp_recv>
    tcp_sent(newpcb, modbus_tcp_sent);  // 添加发送确认回调
 80033ce:	490c      	ldr	r1, [pc, #48]	@ (8003400 <modbus_tcp_accept+0x74>)
 80033d0:	68b8      	ldr	r0, [r7, #8]
 80033d2:	f012 fc93 	bl	8015cfc <tcp_sent>
    tcp_err(newpcb, modbus_tcp_error);
 80033d6:	490b      	ldr	r1, [pc, #44]	@ (8003404 <modbus_tcp_accept+0x78>)
 80033d8:	68b8      	ldr	r0, [r7, #8]
 80033da:	f012 fcb1 	bl	8015d40 <tcp_err>
    
    // 设置保活参数，防止连接超时
    tcp_keepalive(newpcb);
 80033de:	68b8      	ldr	r0, [r7, #8]
 80033e0:	f016 ffb6 	bl	801a350 <tcp_keepalive>
    
    return ERR_OK;
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3710      	adds	r7, #16
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	0802014c 	.word	0x0802014c
 80033f4:	0801fd9c 	.word	0x0801fd9c
 80033f8:	0802015c 	.word	0x0802015c
 80033fc:	08003409 	.word	0x08003409
 8003400:	080032bd 	.word	0x080032bd
 8003404:	08003339 	.word	0x08003339

08003408 <modbus_tcp_recv>:

// Recv回调：处理Modbus请求
err_t modbus_tcp_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err) {
 8003408:	b5b0      	push	{r4, r5, r7, lr}
 800340a:	f5ad 6d9c 	sub.w	sp, sp, #1248	@ 0x4e0
 800340e:	af00      	add	r7, sp, #0
 8003410:	f507 649c 	add.w	r4, r7, #1248	@ 0x4e0
 8003414:	f2a4 44d4 	subw	r4, r4, #1236	@ 0x4d4
 8003418:	6020      	str	r0, [r4, #0]
 800341a:	f507 609c 	add.w	r0, r7, #1248	@ 0x4e0
 800341e:	f5a0 609b 	sub.w	r0, r0, #1240	@ 0x4d8
 8003422:	6001      	str	r1, [r0, #0]
 8003424:	f507 619c 	add.w	r1, r7, #1248	@ 0x4e0
 8003428:	f2a1 41dc 	subw	r1, r1, #1244	@ 0x4dc
 800342c:	600a      	str	r2, [r1, #0]
 800342e:	461a      	mov	r2, r3
 8003430:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8003434:	f2a3 43dd 	subw	r3, r3, #1245	@ 0x4dd
 8003438:	701a      	strb	r2, [r3, #0]
    if (err != ERR_OK) {
 800343a:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 800343e:	f2a3 43dd 	subw	r3, r3, #1245	@ 0x4dd
 8003442:	f993 3000 	ldrsb.w	r3, [r3]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d018      	beq.n	800347c <modbus_tcp_recv+0x74>
        cdc_debug_log("MODBUS_TCP", "Receive error");
 800344a:	49bf      	ldr	r1, [pc, #764]	@ (8003748 <modbus_tcp_recv+0x340>)
 800344c:	48bf      	ldr	r0, [pc, #764]	@ (800374c <modbus_tcp_recv+0x344>)
 800344e:	f7fe fdfb 	bl	8002048 <cdc_debug_log>
        if (p != NULL) {
 8003452:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8003456:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d006      	beq.n	800346e <modbus_tcp_recv+0x66>
            pbuf_free(p);
 8003460:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8003464:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8003468:	6818      	ldr	r0, [r3, #0]
 800346a:	f010 fdd7 	bl	801401c <pbuf_free>
        }
        return err;
 800346e:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8003472:	f2a3 43dd 	subw	r3, r3, #1245	@ 0x4dd
 8003476:	f993 3000 	ldrsb.w	r3, [r3]
 800347a:	e15f      	b.n	800373c <modbus_tcp_recv+0x334>
    }
    
    if (p == NULL) { // 连接关闭
 800347c:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8003480:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d10c      	bne.n	80034a4 <modbus_tcp_recv+0x9c>
        cdc_debug_log("MODBUS_TCP", "Client disconnected");
 800348a:	49b1      	ldr	r1, [pc, #708]	@ (8003750 <modbus_tcp_recv+0x348>)
 800348c:	48af      	ldr	r0, [pc, #700]	@ (800374c <modbus_tcp_recv+0x344>)
 800348e:	f7fe fddb 	bl	8002048 <cdc_debug_log>
        tcp_close(tpcb);
 8003492:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8003496:	f5a3 639b 	sub.w	r3, r3, #1240	@ 0x4d8
 800349a:	6818      	ldr	r0, [r3, #0]
 800349c:	f011 fa68 	bl	8014970 <tcp_close>
        return ERR_OK;
 80034a0:	2300      	movs	r3, #0
 80034a2:	e14b      	b.n	800373c <modbus_tcp_recv+0x334>
    }

    // 获取数据长度并通知TCP栈已接收
    uint16_t data_len = p->tot_len;
 80034a4:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 80034a8:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	891b      	ldrh	r3, [r3, #8]
 80034b0:	f8a7 34da 	strh.w	r3, [r7, #1242]	@ 0x4da
    tcp_recved(tpcb, data_len); // 重要：通知LwIP已处理数据
 80034b4:	f8b7 24da 	ldrh.w	r2, [r7, #1242]	@ 0x4da
 80034b8:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 80034bc:	f5a3 639b 	sub.w	r3, r3, #1240	@ 0x4d8
 80034c0:	4611      	mov	r1, r2
 80034c2:	6818      	ldr	r0, [r3, #0]
 80034c4:	f011 fd18 	bl	8014ef8 <tcp_recved>
    
    // 添加更详细的接收数据信息
    char recv_info[60];
    const char* prefix = "Received data len=";
 80034c8:	4ba2      	ldr	r3, [pc, #648]	@ (8003754 <modbus_tcp_recv+0x34c>)
 80034ca:	f8c7 34d4 	str.w	r3, [r7, #1236]	@ 0x4d4
    strcpy(recv_info, prefix);
 80034ce:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 80034d2:	f8d7 14d4 	ldr.w	r1, [r7, #1236]	@ 0x4d4
 80034d6:	4618      	mov	r0, r3
 80034d8:	f01b f803 	bl	801e4e2 <strcpy>
    int_to_str(data_len, recv_info + strlen(prefix), sizeof(recv_info) - strlen(prefix));
 80034dc:	f8b7 44da 	ldrh.w	r4, [r7, #1242]	@ 0x4da
 80034e0:	f8d7 04d4 	ldr.w	r0, [r7, #1236]	@ 0x4d4
 80034e4:	f7fc fe74 	bl	80001d0 <strlen>
 80034e8:	4602      	mov	r2, r0
 80034ea:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 80034ee:	189d      	adds	r5, r3, r2
 80034f0:	f8d7 04d4 	ldr.w	r0, [r7, #1236]	@ 0x4d4
 80034f4:	f7fc fe6c 	bl	80001d0 <strlen>
 80034f8:	4603      	mov	r3, r0
 80034fa:	f1c3 033c 	rsb	r3, r3, #60	@ 0x3c
 80034fe:	461a      	mov	r2, r3
 8003500:	4629      	mov	r1, r5
 8003502:	4620      	mov	r0, r4
 8003504:	f7fe fe0e 	bl	8002124 <int_to_str>
    cdc_debug_log("MODBUS_TCP", recv_info);
 8003508:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 800350c:	4619      	mov	r1, r3
 800350e:	488f      	ldr	r0, [pc, #572]	@ (800374c <modbus_tcp_recv+0x344>)
 8003510:	f7fe fd9a 	bl	8002048 <cdc_debug_log>

    uint8_t buf[1024];
    uint16_t len = pbuf_copy_partial(p, buf, data_len, 0);
 8003514:	f8b7 24da 	ldrh.w	r2, [r7, #1242]	@ 0x4da
 8003518:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 800351c:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8003520:	f2a3 40dc 	subw	r0, r3, #1244	@ 0x4dc
 8003524:	2300      	movs	r3, #0
 8003526:	6800      	ldr	r0, [r0, #0]
 8003528:	f010 ff6e 	bl	8014408 <pbuf_copy_partial>
 800352c:	4603      	mov	r3, r0
 800352e:	f8a7 34d2 	strh.w	r3, [r7, #1234]	@ 0x4d2
    pbuf_free(p);
 8003532:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8003536:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800353a:	6818      	ldr	r0, [r3, #0]
 800353c:	f010 fd6e 	bl	801401c <pbuf_free>

    // 转储接收到的原始数据用于调试
    dump_data(buf, len);
 8003540:	f8b7 24d2 	ldrh.w	r2, [r7, #1234]	@ 0x4d2
 8003544:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8003548:	4611      	mov	r1, r2
 800354a:	4618      	mov	r0, r3
 800354c:	f7fe fe9e 	bl	800228c <dump_data>

    // 检查最小帧长度
    if (len < 8) { // Modbus TCP最小长度: 6字节头 + 2字节最小数据
 8003550:	f8b7 34d2 	ldrh.w	r3, [r7, #1234]	@ 0x4d2
 8003554:	2b07      	cmp	r3, #7
 8003556:	d806      	bhi.n	8003566 <modbus_tcp_recv+0x15e>
        cdc_debug_log("MODBUS_TCP", "Frame too short");
 8003558:	497f      	ldr	r1, [pc, #508]	@ (8003758 <modbus_tcp_recv+0x350>)
 800355a:	487c      	ldr	r0, [pc, #496]	@ (800374c <modbus_tcp_recv+0x344>)
 800355c:	f7fe fd74 	bl	8002048 <cdc_debug_log>
        return ERR_VAL;
 8003560:	f06f 0305 	mvn.w	r3, #5
 8003564:	e0ea      	b.n	800373c <modbus_tcp_recv+0x334>
    }

    // 处理可能包含多个Modbus请求的数据包
    uint16_t offset = 0;
 8003566:	2300      	movs	r3, #0
 8003568:	f8a7 34de 	strh.w	r3, [r7, #1246]	@ 0x4de
    uint16_t processed_frames = 0;
 800356c:	2300      	movs	r3, #0
 800356e:	f8a7 34dc 	strh.w	r3, [r7, #1244]	@ 0x4dc
    
    while (offset < len && processed_frames < 10) { // 最多处理10个帧，防止无限循环
 8003572:	e092      	b.n	800369a <modbus_tcp_recv+0x292>
        // 检查是否还有足够的数据读取帧头
        if (offset + 6 > len) {
 8003574:	f8b7 34de 	ldrh.w	r3, [r7, #1246]	@ 0x4de
 8003578:	1d5a      	adds	r2, r3, #5
 800357a:	f8b7 34d2 	ldrh.w	r3, [r7, #1234]	@ 0x4d2
 800357e:	429a      	cmp	r2, r3
 8003580:	db04      	blt.n	800358c <modbus_tcp_recv+0x184>
            cdc_debug_log("MODBUS_TCP", "No more complete frames");
 8003582:	4976      	ldr	r1, [pc, #472]	@ (800375c <modbus_tcp_recv+0x354>)
 8003584:	4871      	ldr	r0, [pc, #452]	@ (800374c <modbus_tcp_recv+0x344>)
 8003586:	f7fe fd5f 	bl	8002048 <cdc_debug_log>
            break;
 800358a:	e093      	b.n	80036b4 <modbus_tcp_recv+0x2ac>
        }
        
        // 获取长度字段
        uint16_t frame_length = (buf[offset+4] << 8) | buf[offset+5];
 800358c:	f8b7 34de 	ldrh.w	r3, [r7, #1246]	@ 0x4de
 8003590:	3304      	adds	r3, #4
 8003592:	f507 629c 	add.w	r2, r7, #1248	@ 0x4e0
 8003596:	f5a2 628b 	sub.w	r2, r2, #1112	@ 0x458
 800359a:	5cd3      	ldrb	r3, [r2, r3]
 800359c:	b21b      	sxth	r3, r3
 800359e:	021b      	lsls	r3, r3, #8
 80035a0:	b21a      	sxth	r2, r3
 80035a2:	f8b7 34de 	ldrh.w	r3, [r7, #1246]	@ 0x4de
 80035a6:	3305      	adds	r3, #5
 80035a8:	f507 619c 	add.w	r1, r7, #1248	@ 0x4e0
 80035ac:	f5a1 618b 	sub.w	r1, r1, #1112	@ 0x458
 80035b0:	5ccb      	ldrb	r3, [r1, r3]
 80035b2:	b21b      	sxth	r3, r3
 80035b4:	4313      	orrs	r3, r2
 80035b6:	b21b      	sxth	r3, r3
 80035b8:	f8a7 34d0 	strh.w	r3, [r7, #1232]	@ 0x4d0
        uint16_t total_frame_size = 6 + frame_length; // 6字节头 + 数据部分
 80035bc:	f8b7 34d0 	ldrh.w	r3, [r7, #1232]	@ 0x4d0
 80035c0:	3306      	adds	r3, #6
 80035c2:	f8a7 34ce 	strh.w	r3, [r7, #1230]	@ 0x4ce
        
        // 检查是否有完整的帧
        if (offset + total_frame_size > len) {
 80035c6:	f8b7 24de 	ldrh.w	r2, [r7, #1246]	@ 0x4de
 80035ca:	f8b7 34ce 	ldrh.w	r3, [r7, #1230]	@ 0x4ce
 80035ce:	441a      	add	r2, r3
 80035d0:	f8b7 34d2 	ldrh.w	r3, [r7, #1234]	@ 0x4d2
 80035d4:	429a      	cmp	r2, r3
 80035d6:	dd21      	ble.n	800361c <modbus_tcp_recv+0x214>
            char incomplete_msg[60];
            strcpy(incomplete_msg, "Incomplete frame at offset=");
 80035d8:	f107 0310 	add.w	r3, r7, #16
 80035dc:	4a60      	ldr	r2, [pc, #384]	@ (8003760 <modbus_tcp_recv+0x358>)
 80035de:	461c      	mov	r4, r3
 80035e0:	4615      	mov	r5, r2
 80035e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035e6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80035ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            int_to_str(offset, incomplete_msg + strlen(incomplete_msg), 10);
 80035ee:	f8b7 44de 	ldrh.w	r4, [r7, #1246]	@ 0x4de
 80035f2:	f107 0310 	add.w	r3, r7, #16
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7fc fdea 	bl	80001d0 <strlen>
 80035fc:	4602      	mov	r2, r0
 80035fe:	f107 0310 	add.w	r3, r7, #16
 8003602:	4413      	add	r3, r2
 8003604:	220a      	movs	r2, #10
 8003606:	4619      	mov	r1, r3
 8003608:	4620      	mov	r0, r4
 800360a:	f7fe fd8b 	bl	8002124 <int_to_str>
            cdc_debug_log("MODBUS_TCP", incomplete_msg);
 800360e:	f107 0310 	add.w	r3, r7, #16
 8003612:	4619      	mov	r1, r3
 8003614:	484d      	ldr	r0, [pc, #308]	@ (800374c <modbus_tcp_recv+0x344>)
 8003616:	f7fe fd17 	bl	8002048 <cdc_debug_log>
            break;
 800361a:	e04b      	b.n	80036b4 <modbus_tcp_recv+0x2ac>
        }
        
        // 处理这个帧
        char frame_msg[50];
        strcpy(frame_msg, "Processing frame ");
 800361c:	f107 0310 	add.w	r3, r7, #16
 8003620:	4a50      	ldr	r2, [pc, #320]	@ (8003764 <modbus_tcp_recv+0x35c>)
 8003622:	461c      	mov	r4, r3
 8003624:	4615      	mov	r5, r2
 8003626:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003628:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800362a:	682b      	ldr	r3, [r5, #0]
 800362c:	8023      	strh	r3, [r4, #0]
        int_to_str(processed_frames + 1, frame_msg + strlen(frame_msg), 10);
 800362e:	f8b7 34dc 	ldrh.w	r3, [r7, #1244]	@ 0x4dc
 8003632:	1c5c      	adds	r4, r3, #1
 8003634:	f107 0310 	add.w	r3, r7, #16
 8003638:	4618      	mov	r0, r3
 800363a:	f7fc fdc9 	bl	80001d0 <strlen>
 800363e:	4602      	mov	r2, r0
 8003640:	f107 0310 	add.w	r3, r7, #16
 8003644:	4413      	add	r3, r2
 8003646:	220a      	movs	r2, #10
 8003648:	4619      	mov	r1, r3
 800364a:	4620      	mov	r0, r4
 800364c:	f7fe fd6a 	bl	8002124 <int_to_str>
        cdc_debug_log("MODBUS_TCP", frame_msg);
 8003650:	f107 0310 	add.w	r3, r7, #16
 8003654:	4619      	mov	r1, r3
 8003656:	483d      	ldr	r0, [pc, #244]	@ (800374c <modbus_tcp_recv+0x344>)
 8003658:	f7fe fcf6 	bl	8002048 <cdc_debug_log>
        
        process_modbus_request(tpcb, buf, offset);
 800365c:	f8b7 24de 	ldrh.w	r2, [r7, #1246]	@ 0x4de
 8003660:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 8003664:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8003668:	f5a3 639b 	sub.w	r3, r3, #1240	@ 0x4d8
 800366c:	6818      	ldr	r0, [r3, #0]
 800366e:	f7fe fe97 	bl	80023a0 <process_modbus_request>
        
        // 移动到下一个帧
        offset += total_frame_size;
 8003672:	f8b7 24de 	ldrh.w	r2, [r7, #1246]	@ 0x4de
 8003676:	f8b7 34ce 	ldrh.w	r3, [r7, #1230]	@ 0x4ce
 800367a:	4413      	add	r3, r2
 800367c:	f8a7 34de 	strh.w	r3, [r7, #1246]	@ 0x4de
        processed_frames++;
 8003680:	f8b7 34dc 	ldrh.w	r3, [r7, #1244]	@ 0x4dc
 8003684:	3301      	adds	r3, #1
 8003686:	f8a7 34dc 	strh.w	r3, [r7, #1244]	@ 0x4dc
        
        // 如果只有一个标准的12字节请求，直接退出
        if (len == 12 && processed_frames == 1) {
 800368a:	f8b7 34d2 	ldrh.w	r3, [r7, #1234]	@ 0x4d2
 800368e:	2b0c      	cmp	r3, #12
 8003690:	d103      	bne.n	800369a <modbus_tcp_recv+0x292>
 8003692:	f8b7 34dc 	ldrh.w	r3, [r7, #1244]	@ 0x4dc
 8003696:	2b01      	cmp	r3, #1
 8003698:	d00b      	beq.n	80036b2 <modbus_tcp_recv+0x2aa>
    while (offset < len && processed_frames < 10) { // 最多处理10个帧，防止无限循环
 800369a:	f8b7 24de 	ldrh.w	r2, [r7, #1246]	@ 0x4de
 800369e:	f8b7 34d2 	ldrh.w	r3, [r7, #1234]	@ 0x4d2
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d206      	bcs.n	80036b4 <modbus_tcp_recv+0x2ac>
 80036a6:	f8b7 34dc 	ldrh.w	r3, [r7, #1244]	@ 0x4dc
 80036aa:	2b09      	cmp	r3, #9
 80036ac:	f67f af62 	bls.w	8003574 <modbus_tcp_recv+0x16c>
 80036b0:	e000      	b.n	80036b4 <modbus_tcp_recv+0x2ac>
            break;
 80036b2:	bf00      	nop
        }
    }
    
    char summary_msg[60];
    strcpy(summary_msg, "Processed ");
 80036b4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80036b8:	4a2b      	ldr	r2, [pc, #172]	@ (8003768 <modbus_tcp_recv+0x360>)
 80036ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80036bc:	c303      	stmia	r3!, {r0, r1}
 80036be:	801a      	strh	r2, [r3, #0]
 80036c0:	3302      	adds	r3, #2
 80036c2:	0c12      	lsrs	r2, r2, #16
 80036c4:	701a      	strb	r2, [r3, #0]
    int_to_str(processed_frames, summary_msg + strlen(summary_msg), 10);
 80036c6:	f8b7 44dc 	ldrh.w	r4, [r7, #1244]	@ 0x4dc
 80036ca:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80036ce:	4618      	mov	r0, r3
 80036d0:	f7fc fd7e 	bl	80001d0 <strlen>
 80036d4:	4602      	mov	r2, r0
 80036d6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80036da:	4413      	add	r3, r2
 80036dc:	220a      	movs	r2, #10
 80036de:	4619      	mov	r1, r3
 80036e0:	4620      	mov	r0, r4
 80036e2:	f7fe fd1f 	bl	8002124 <int_to_str>
    const char* frames_suffix = " frames from ";
 80036e6:	4b21      	ldr	r3, [pc, #132]	@ (800376c <modbus_tcp_recv+0x364>)
 80036e8:	f8c7 34c8 	str.w	r3, [r7, #1224]	@ 0x4c8
    strcat(summary_msg, frames_suffix);
 80036ec:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80036f0:	f8d7 14c8 	ldr.w	r1, [r7, #1224]	@ 0x4c8
 80036f4:	4618      	mov	r0, r3
 80036f6:	f01a fe06 	bl	801e306 <strcat>
    int_to_str(len, summary_msg + strlen(summary_msg), 10);
 80036fa:	f8b7 44d2 	ldrh.w	r4, [r7, #1234]	@ 0x4d2
 80036fe:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003702:	4618      	mov	r0, r3
 8003704:	f7fc fd64 	bl	80001d0 <strlen>
 8003708:	4602      	mov	r2, r0
 800370a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800370e:	4413      	add	r3, r2
 8003710:	220a      	movs	r2, #10
 8003712:	4619      	mov	r1, r3
 8003714:	4620      	mov	r0, r4
 8003716:	f7fe fd05 	bl	8002124 <int_to_str>
    const char* bytes_suffix = " bytes";
 800371a:	4b15      	ldr	r3, [pc, #84]	@ (8003770 <modbus_tcp_recv+0x368>)
 800371c:	f8c7 34c4 	str.w	r3, [r7, #1220]	@ 0x4c4
    strcat(summary_msg, bytes_suffix);
 8003720:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003724:	f8d7 14c4 	ldr.w	r1, [r7, #1220]	@ 0x4c4
 8003728:	4618      	mov	r0, r3
 800372a:	f01a fdec 	bl	801e306 <strcat>
    cdc_debug_log("MODBUS_TCP", summary_msg);
 800372e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003732:	4619      	mov	r1, r3
 8003734:	4805      	ldr	r0, [pc, #20]	@ (800374c <modbus_tcp_recv+0x344>)
 8003736:	f7fe fc87 	bl	8002048 <cdc_debug_log>

    return ERR_OK;
 800373a:	2300      	movs	r3, #0
 800373c:	4618      	mov	r0, r3
 800373e:	f507 679c 	add.w	r7, r7, #1248	@ 0x4e0
 8003742:	46bd      	mov	sp, r7
 8003744:	bdb0      	pop	{r4, r5, r7, pc}
 8003746:	bf00      	nop
 8003748:	08020170 	.word	0x08020170
 800374c:	0801fd9c 	.word	0x0801fd9c
 8003750:	08020180 	.word	0x08020180
 8003754:	08020194 	.word	0x08020194
 8003758:	080201a8 	.word	0x080201a8
 800375c:	080201b8 	.word	0x080201b8
 8003760:	080201d0 	.word	0x080201d0
 8003764:	080201ec 	.word	0x080201ec
 8003768:	08020200 	.word	0x08020200
 800376c:	0802020c 	.word	0x0802020c
 8003770:	08020138 	.word	0x08020138

08003774 <HAL_ETH_MspInit>:
  *   - Peripheral's GPIO Configuration  
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b092      	sub	sp, #72	@ 0x48
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800377c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003780:	2200      	movs	r2, #0
 8003782:	601a      	str	r2, [r3, #0]
 8003784:	605a      	str	r2, [r3, #4]
 8003786:	609a      	str	r2, [r3, #8]
 8003788:	60da      	str	r2, [r3, #12]
 800378a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a84      	ldr	r2, [pc, #528]	@ (80039a4 <HAL_ETH_MspInit+0x230>)
 8003792:	4293      	cmp	r3, r2
 8003794:	f040 8101 	bne.w	800399a <HAL_ETH_MspInit+0x226>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8003798:	2300      	movs	r3, #0
 800379a:	633b      	str	r3, [r7, #48]	@ 0x30
 800379c:	4b82      	ldr	r3, [pc, #520]	@ (80039a8 <HAL_ETH_MspInit+0x234>)
 800379e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037a0:	4a81      	ldr	r2, [pc, #516]	@ (80039a8 <HAL_ETH_MspInit+0x234>)
 80037a2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80037a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80037a8:	4b7f      	ldr	r3, [pc, #508]	@ (80039a8 <HAL_ETH_MspInit+0x234>)
 80037aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80037b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037b4:	2300      	movs	r3, #0
 80037b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80037b8:	4b7b      	ldr	r3, [pc, #492]	@ (80039a8 <HAL_ETH_MspInit+0x234>)
 80037ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037bc:	4a7a      	ldr	r2, [pc, #488]	@ (80039a8 <HAL_ETH_MspInit+0x234>)
 80037be:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80037c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80037c4:	4b78      	ldr	r3, [pc, #480]	@ (80039a8 <HAL_ETH_MspInit+0x234>)
 80037c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037c8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80037cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80037ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037d0:	2300      	movs	r3, #0
 80037d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80037d4:	4b74      	ldr	r3, [pc, #464]	@ (80039a8 <HAL_ETH_MspInit+0x234>)
 80037d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037d8:	4a73      	ldr	r2, [pc, #460]	@ (80039a8 <HAL_ETH_MspInit+0x234>)
 80037da:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80037de:	6313      	str	r3, [r2, #48]	@ 0x30
 80037e0:	4b71      	ldr	r3, [pc, #452]	@ (80039a8 <HAL_ETH_MspInit+0x234>)
 80037e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80037e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80037ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_ETHMAC_CLK_ENABLE();
 80037ec:	2300      	movs	r3, #0
 80037ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80037f0:	4b6d      	ldr	r3, [pc, #436]	@ (80039a8 <HAL_ETH_MspInit+0x234>)
 80037f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037f4:	4a6c      	ldr	r2, [pc, #432]	@ (80039a8 <HAL_ETH_MspInit+0x234>)
 80037f6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80037fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80037fc:	4b6a      	ldr	r3, [pc, #424]	@ (80039a8 <HAL_ETH_MspInit+0x234>)
 80037fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003800:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003804:	627b      	str	r3, [r7, #36]	@ 0x24
 8003806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_ETHMACTX_CLK_ENABLE();
 8003808:	2300      	movs	r3, #0
 800380a:	623b      	str	r3, [r7, #32]
 800380c:	4b66      	ldr	r3, [pc, #408]	@ (80039a8 <HAL_ETH_MspInit+0x234>)
 800380e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003810:	4a65      	ldr	r2, [pc, #404]	@ (80039a8 <HAL_ETH_MspInit+0x234>)
 8003812:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003816:	6313      	str	r3, [r2, #48]	@ 0x30
 8003818:	4b63      	ldr	r3, [pc, #396]	@ (80039a8 <HAL_ETH_MspInit+0x234>)
 800381a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800381c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003820:	623b      	str	r3, [r7, #32]
 8003822:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETHMACRX_CLK_ENABLE();
 8003824:	2300      	movs	r3, #0
 8003826:	61fb      	str	r3, [r7, #28]
 8003828:	4b5f      	ldr	r3, [pc, #380]	@ (80039a8 <HAL_ETH_MspInit+0x234>)
 800382a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800382c:	4a5e      	ldr	r2, [pc, #376]	@ (80039a8 <HAL_ETH_MspInit+0x234>)
 800382e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003832:	6313      	str	r3, [r2, #48]	@ 0x30
 8003834:	4b5c      	ldr	r3, [pc, #368]	@ (80039a8 <HAL_ETH_MspInit+0x234>)
 8003836:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003838:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800383c:	61fb      	str	r3, [r7, #28]
 800383e:	69fb      	ldr	r3, [r7, #28]
    
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003840:	2300      	movs	r3, #0
 8003842:	61bb      	str	r3, [r7, #24]
 8003844:	4b58      	ldr	r3, [pc, #352]	@ (80039a8 <HAL_ETH_MspInit+0x234>)
 8003846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003848:	4a57      	ldr	r2, [pc, #348]	@ (80039a8 <HAL_ETH_MspInit+0x234>)
 800384a:	f043 0301 	orr.w	r3, r3, #1
 800384e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003850:	4b55      	ldr	r3, [pc, #340]	@ (80039a8 <HAL_ETH_MspInit+0x234>)
 8003852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003854:	f003 0301 	and.w	r3, r3, #1
 8003858:	61bb      	str	r3, [r7, #24]
 800385a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800385c:	2300      	movs	r3, #0
 800385e:	617b      	str	r3, [r7, #20]
 8003860:	4b51      	ldr	r3, [pc, #324]	@ (80039a8 <HAL_ETH_MspInit+0x234>)
 8003862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003864:	4a50      	ldr	r2, [pc, #320]	@ (80039a8 <HAL_ETH_MspInit+0x234>)
 8003866:	f043 0302 	orr.w	r3, r3, #2
 800386a:	6313      	str	r3, [r2, #48]	@ 0x30
 800386c:	4b4e      	ldr	r3, [pc, #312]	@ (80039a8 <HAL_ETH_MspInit+0x234>)
 800386e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003870:	f003 0302 	and.w	r3, r3, #2
 8003874:	617b      	str	r3, [r7, #20]
 8003876:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003878:	2300      	movs	r3, #0
 800387a:	613b      	str	r3, [r7, #16]
 800387c:	4b4a      	ldr	r3, [pc, #296]	@ (80039a8 <HAL_ETH_MspInit+0x234>)
 800387e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003880:	4a49      	ldr	r2, [pc, #292]	@ (80039a8 <HAL_ETH_MspInit+0x234>)
 8003882:	f043 0304 	orr.w	r3, r3, #4
 8003886:	6313      	str	r3, [r2, #48]	@ 0x30
 8003888:	4b47      	ldr	r3, [pc, #284]	@ (80039a8 <HAL_ETH_MspInit+0x234>)
 800388a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800388c:	f003 0304 	and.w	r3, r3, #4
 8003890:	613b      	str	r3, [r7, #16]
 8003892:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003894:	2300      	movs	r3, #0
 8003896:	60fb      	str	r3, [r7, #12]
 8003898:	4b43      	ldr	r3, [pc, #268]	@ (80039a8 <HAL_ETH_MspInit+0x234>)
 800389a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800389c:	4a42      	ldr	r2, [pc, #264]	@ (80039a8 <HAL_ETH_MspInit+0x234>)
 800389e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80038a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80038a4:	4b40      	ldr	r3, [pc, #256]	@ (80039a8 <HAL_ETH_MspInit+0x234>)
 80038a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038ac:	60fb      	str	r3, [r7, #12]
 80038ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80038b0:	2300      	movs	r3, #0
 80038b2:	60bb      	str	r3, [r7, #8]
 80038b4:	4b3c      	ldr	r3, [pc, #240]	@ (80039a8 <HAL_ETH_MspInit+0x234>)
 80038b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038b8:	4a3b      	ldr	r2, [pc, #236]	@ (80039a8 <HAL_ETH_MspInit+0x234>)
 80038ba:	f043 0308 	orr.w	r3, r3, #8
 80038be:	6313      	str	r3, [r2, #48]	@ 0x30
 80038c0:	4b39      	ldr	r3, [pc, #228]	@ (80039a8 <HAL_ETH_MspInit+0x234>)
 80038c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038c4:	f003 0308 	and.w	r3, r3, #8
 80038c8:	60bb      	str	r3, [r7, #8]
 80038ca:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    PG14     ------> ETH_TXD1
    PD3      ------> ETH_RESET
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80038cc:	2302      	movs	r3, #2
 80038ce:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038d0:	2302      	movs	r3, #2
 80038d2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038d4:	2300      	movs	r3, #0
 80038d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038d8:	2303      	movs	r3, #3
 80038da:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80038dc:	230b      	movs	r3, #11
 80038de:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038e0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80038e4:	4619      	mov	r1, r3
 80038e6:	4831      	ldr	r0, [pc, #196]	@ (80039ac <HAL_ETH_MspInit+0x238>)
 80038e8:	f003 f8f0 	bl	8006acc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80038ec:	2386      	movs	r3, #134	@ 0x86
 80038ee:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038f0:	2302      	movs	r3, #2
 80038f2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038f4:	2300      	movs	r3, #0
 80038f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038f8:	2303      	movs	r3, #3
 80038fa:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80038fc:	230b      	movs	r3, #11
 80038fe:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003900:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003904:	4619      	mov	r1, r3
 8003906:	482a      	ldr	r0, [pc, #168]	@ (80039b0 <HAL_ETH_MspInit+0x23c>)
 8003908:	f003 f8e0 	bl	8006acc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800390c:	2330      	movs	r3, #48	@ 0x30
 800390e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003910:	2302      	movs	r3, #2
 8003912:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003914:	2300      	movs	r3, #0
 8003916:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003918:	2303      	movs	r3, #3
 800391a:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800391c:	230b      	movs	r3, #11
 800391e:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003920:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003924:	4619      	mov	r1, r3
 8003926:	4821      	ldr	r0, [pc, #132]	@ (80039ac <HAL_ETH_MspInit+0x238>)
 8003928:	f003 f8d0 	bl	8006acc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 800392c:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8003930:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003932:	2302      	movs	r3, #2
 8003934:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003936:	2300      	movs	r3, #0
 8003938:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800393a:	2303      	movs	r3, #3
 800393c:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800393e:	230b      	movs	r3, #11
 8003940:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003942:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003946:	4619      	mov	r1, r3
 8003948:	481a      	ldr	r0, [pc, #104]	@ (80039b4 <HAL_ETH_MspInit+0x240>)
 800394a:	f003 f8bf 	bl	8006acc <HAL_GPIO_Init>

    /* Configure ETH_RESET Pin (PD3) */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800394e:	2308      	movs	r3, #8
 8003950:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003952:	2301      	movs	r3, #1
 8003954:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003956:	2301      	movs	r3, #1
 8003958:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800395a:	2300      	movs	r3, #0
 800395c:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800395e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003962:	4619      	mov	r1, r3
 8003964:	4814      	ldr	r0, [pc, #80]	@ (80039b8 <HAL_ETH_MspInit+0x244>)
 8003966:	f003 f8b1 	bl	8006acc <HAL_GPIO_Init>
    
    /* Reset PHY */

    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);
 800396a:	2200      	movs	r2, #0
 800396c:	2108      	movs	r1, #8
 800396e:	4812      	ldr	r0, [pc, #72]	@ (80039b8 <HAL_ETH_MspInit+0x244>)
 8003970:	f003 fa48 	bl	8006e04 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8003974:	200a      	movs	r0, #10
 8003976:	f001 f96d 	bl	8004c54 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET);
 800397a:	2201      	movs	r2, #1
 800397c:	2108      	movs	r1, #8
 800397e:	480e      	ldr	r0, [pc, #56]	@ (80039b8 <HAL_ETH_MspInit+0x244>)
 8003980:	f003 fa40 	bl	8006e04 <HAL_GPIO_WritePin>

    HAL_Delay(100);
 8003984:	2064      	movs	r0, #100	@ 0x64
 8003986:	f001 f965 	bl	8004c54 <HAL_Delay>

    /* USER CODE BEGIN ETH_MspInit 1 */
    /* Configure ETH interrupt */
    HAL_NVIC_SetPriority(ETH_IRQn, 6, 0);
 800398a:	2200      	movs	r2, #0
 800398c:	2106      	movs	r1, #6
 800398e:	203d      	movs	r0, #61	@ 0x3d
 8003990:	f001 fa3c 	bl	8004e0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8003994:	203d      	movs	r0, #61	@ 0x3d
 8003996:	f001 fa55 	bl	8004e44 <HAL_NVIC_EnableIRQ>
    /* USER CODE END ETH_MspInit 1 */
  }
}
 800399a:	bf00      	nop
 800399c:	3748      	adds	r7, #72	@ 0x48
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	40028000 	.word	0x40028000
 80039a8:	40023800 	.word	0x40023800
 80039ac:	40020800 	.word	0x40020800
 80039b0:	40020000 	.word	0x40020000
 80039b4:	40021800 	.word	0x40021800
 80039b8:	40020c00 	.word	0x40020c00

080039bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039c2:	2300      	movs	r3, #0
 80039c4:	607b      	str	r3, [r7, #4]
 80039c6:	4b12      	ldr	r3, [pc, #72]	@ (8003a10 <HAL_MspInit+0x54>)
 80039c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ca:	4a11      	ldr	r2, [pc, #68]	@ (8003a10 <HAL_MspInit+0x54>)
 80039cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80039d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80039d2:	4b0f      	ldr	r3, [pc, #60]	@ (8003a10 <HAL_MspInit+0x54>)
 80039d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039da:	607b      	str	r3, [r7, #4]
 80039dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80039de:	2300      	movs	r3, #0
 80039e0:	603b      	str	r3, [r7, #0]
 80039e2:	4b0b      	ldr	r3, [pc, #44]	@ (8003a10 <HAL_MspInit+0x54>)
 80039e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e6:	4a0a      	ldr	r2, [pc, #40]	@ (8003a10 <HAL_MspInit+0x54>)
 80039e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80039ee:	4b08      	ldr	r3, [pc, #32]	@ (8003a10 <HAL_MspInit+0x54>)
 80039f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039f6:	603b      	str	r3, [r7, #0]
 80039f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80039fa:	2200      	movs	r2, #0
 80039fc:	210f      	movs	r1, #15
 80039fe:	f06f 0001 	mvn.w	r0, #1
 8003a02:	f001 fa03 	bl	8004e0c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a06:	bf00      	nop
 8003a08:	3708      	adds	r7, #8
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	40023800 	.word	0x40023800

08003a14 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b08e      	sub	sp, #56	@ 0x38
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003a20:	2300      	movs	r3, #0
 8003a22:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8003a24:	2300      	movs	r3, #0
 8003a26:	60fb      	str	r3, [r7, #12]
 8003a28:	4b33      	ldr	r3, [pc, #204]	@ (8003af8 <HAL_InitTick+0xe4>)
 8003a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a2c:	4a32      	ldr	r2, [pc, #200]	@ (8003af8 <HAL_InitTick+0xe4>)
 8003a2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a32:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a34:	4b30      	ldr	r3, [pc, #192]	@ (8003af8 <HAL_InitTick+0xe4>)
 8003a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a3c:	60fb      	str	r3, [r7, #12]
 8003a3e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003a40:	f107 0210 	add.w	r2, r7, #16
 8003a44:	f107 0314 	add.w	r3, r7, #20
 8003a48:	4611      	mov	r1, r2
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f005 f89e 	bl	8008b8c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003a50:	6a3b      	ldr	r3, [r7, #32]
 8003a52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003a54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d103      	bne.n	8003a62 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003a5a:	f005 f86f 	bl	8008b3c <HAL_RCC_GetPCLK1Freq>
 8003a5e:	6378      	str	r0, [r7, #52]	@ 0x34
 8003a60:	e004      	b.n	8003a6c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003a62:	f005 f86b 	bl	8008b3c <HAL_RCC_GetPCLK1Freq>
 8003a66:	4603      	mov	r3, r0
 8003a68:	005b      	lsls	r3, r3, #1
 8003a6a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003a6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a6e:	4a23      	ldr	r2, [pc, #140]	@ (8003afc <HAL_InitTick+0xe8>)
 8003a70:	fba2 2303 	umull	r2, r3, r2, r3
 8003a74:	0c9b      	lsrs	r3, r3, #18
 8003a76:	3b01      	subs	r3, #1
 8003a78:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8003a7a:	4b21      	ldr	r3, [pc, #132]	@ (8003b00 <HAL_InitTick+0xec>)
 8003a7c:	4a21      	ldr	r2, [pc, #132]	@ (8003b04 <HAL_InitTick+0xf0>)
 8003a7e:	601a      	str	r2, [r3, #0]
   * Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8003a80:	4b1f      	ldr	r3, [pc, #124]	@ (8003b00 <HAL_InitTick+0xec>)
 8003a82:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003a86:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8003a88:	4a1d      	ldr	r2, [pc, #116]	@ (8003b00 <HAL_InitTick+0xec>)
 8003a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a8c:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8003a8e:	4b1c      	ldr	r3, [pc, #112]	@ (8003b00 <HAL_InitTick+0xec>)
 8003a90:	2200      	movs	r2, #0
 8003a92:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a94:	4b1a      	ldr	r3, [pc, #104]	@ (8003b00 <HAL_InitTick+0xec>)
 8003a96:	2200      	movs	r2, #0
 8003a98:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a9a:	4b19      	ldr	r3, [pc, #100]	@ (8003b00 <HAL_InitTick+0xec>)
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8003aa0:	4817      	ldr	r0, [pc, #92]	@ (8003b00 <HAL_InitTick+0xec>)
 8003aa2:	f005 f8ed 	bl	8008c80 <HAL_TIM_Base_Init>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8003aac:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d11b      	bne.n	8003aec <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8003ab4:	4812      	ldr	r0, [pc, #72]	@ (8003b00 <HAL_InitTick+0xec>)
 8003ab6:	f005 f933 	bl	8008d20 <HAL_TIM_Base_Start_IT>
 8003aba:	4603      	mov	r3, r0
 8003abc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8003ac0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d111      	bne.n	8003aec <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8003ac8:	202d      	movs	r0, #45	@ 0x2d
 8003aca:	f001 f9bb 	bl	8004e44 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2b0f      	cmp	r3, #15
 8003ad2:	d808      	bhi.n	8003ae6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	6879      	ldr	r1, [r7, #4]
 8003ad8:	202d      	movs	r0, #45	@ 0x2d
 8003ada:	f001 f997 	bl	8004e0c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003ade:	4a0a      	ldr	r2, [pc, #40]	@ (8003b08 <HAL_InitTick+0xf4>)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6013      	str	r3, [r2, #0]
 8003ae4:	e002      	b.n	8003aec <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003aec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3738      	adds	r7, #56	@ 0x38
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	40023800 	.word	0x40023800
 8003afc:	431bde83 	.word	0x431bde83
 8003b00:	20000788 	.word	0x20000788
 8003b04:	40002000 	.word	0x40002000
 8003b08:	2000000c 	.word	0x2000000c

08003b0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003b10:	bf00      	nop
 8003b12:	e7fd      	b.n	8003b10 <NMI_Handler+0x4>

08003b14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b14:	b480      	push	{r7}
 8003b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b18:	bf00      	nop
 8003b1a:	e7fd      	b.n	8003b18 <HardFault_Handler+0x4>

08003b1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b20:	bf00      	nop
 8003b22:	e7fd      	b.n	8003b20 <MemManage_Handler+0x4>

08003b24 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b24:	b480      	push	{r7}
 8003b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b28:	bf00      	nop
 8003b2a:	e7fd      	b.n	8003b28 <BusFault_Handler+0x4>

08003b2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b30:	bf00      	nop
 8003b32:	e7fd      	b.n	8003b30 <UsageFault_Handler+0x4>

08003b34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b34:	b480      	push	{r7}
 8003b36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b38:	bf00      	nop
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr
	...

08003b44 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003b48:	4802      	ldr	r0, [pc, #8]	@ (8003b54 <DMA1_Stream1_IRQHandler+0x10>)
 8003b4a:	f001 fb21 	bl	8005190 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003b4e:	bf00      	nop
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	200008f8 	.word	0x200008f8

08003b58 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003b5c:	4802      	ldr	r0, [pc, #8]	@ (8003b68 <USART3_IRQHandler+0x10>)
 8003b5e:	f005 fdb3 	bl	80096c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003b62:	bf00      	nop
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	20000868 	.word	0x20000868

08003b6c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8003b70:	4802      	ldr	r0, [pc, #8]	@ (8003b7c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8003b72:	f005 f945 	bl	8008e00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8003b76:	bf00      	nop
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	20000788 	.word	0x20000788

08003b80 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003b84:	4802      	ldr	r0, [pc, #8]	@ (8003b90 <TIM7_IRQHandler+0x10>)
 8003b86:	f005 f93b 	bl	8008e00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003b8a:	bf00      	nop
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	200007d8 	.word	0x200007d8

08003b94 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8003b98:	4802      	ldr	r0, [pc, #8]	@ (8003ba4 <DMA2_Stream1_IRQHandler+0x10>)
 8003b9a:	f001 faf9 	bl	8005190 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003b9e:	bf00      	nop
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	20000958 	.word	0x20000958

08003ba8 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	af00      	add	r7, sp, #0
           (dma_status & ETH_DMASR_TS) ? 1UL : 0UL);  // Transmit status
  
  CDC_Transmit_FS((uint8_t*)debug_msg, strlen(debug_msg));
  */
  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8003bac:	4802      	ldr	r0, [pc, #8]	@ (8003bb8 <ETH_IRQHandler+0x10>)
 8003bae:	f002 f8e7 	bl	8005d80 <HAL_ETH_IRQHandler>
  /*
  char completion_msg[] = "[ETH_IRQ] IRQ Handler completed\r\n";
  CDC_Transmit_FS((uint8_t*)completion_msg, strlen(completion_msg));
  */
  /* USER CODE END ETH_IRQn 1 */
}
 8003bb2:	bf00      	nop
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	2000551c 	.word	0x2000551c

08003bbc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003bc0:	4802      	ldr	r0, [pc, #8]	@ (8003bcc <OTG_FS_IRQHandler+0x10>)
 8003bc2:	f003 fa7c 	bl	80070be <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003bc6:	bf00      	nop
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	2000e10c 	.word	0x2000e10c

08003bd0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003bd4:	4802      	ldr	r0, [pc, #8]	@ (8003be0 <USART6_IRQHandler+0x10>)
 8003bd6:	f005 fd77 	bl	80096c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003bda:	bf00      	nop
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	200008b0 	.word	0x200008b0

08003be4 <pump_debug_print>:
/**
  * @brief  泵驱动调试输出函数
  * @param  message: 调试信息字符串
  * @retval None
  */
static void pump_debug_print(const char* message) {
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
    int len = snprintf(pump_debug_buf, sizeof(pump_debug_buf), "[PUMP] %s\r\n", message);
    if (len > 0 && len < sizeof(pump_debug_buf)) {
        CDC_Transmit_FS((uint8_t*)pump_debug_buf, len);  // 暂时启用调试输出
    }
    */
}
 8003bec:	bf00      	nop
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <send_command>:

// 发送命令并读取响应 - STM32 USART3版本 - 简化的不定长接收
int send_command(int pump_id, const char* cmd, char* response, size_t resp_size) {
 8003bf8:	b590      	push	{r4, r7, lr}
 8003bfa:	f5ad 7d31 	sub.w	sp, sp, #708	@ 0x2c4
 8003bfe:	af02      	add	r7, sp, #8
 8003c00:	f507 742e 	add.w	r4, r7, #696	@ 0x2b8
 8003c04:	f5a4 742b 	sub.w	r4, r4, #684	@ 0x2ac
 8003c08:	6020      	str	r0, [r4, #0]
 8003c0a:	f507 702e 	add.w	r0, r7, #696	@ 0x2b8
 8003c0e:	f5a0 702c 	sub.w	r0, r0, #688	@ 0x2b0
 8003c12:	6001      	str	r1, [r0, #0]
 8003c14:	f507 712e 	add.w	r1, r7, #696	@ 0x2b8
 8003c18:	f5a1 712d 	sub.w	r1, r1, #692	@ 0x2b4
 8003c1c:	600a      	str	r2, [r1, #0]
 8003c1e:	f507 722e 	add.w	r2, r7, #696	@ 0x2b8
 8003c22:	f5a2 722e 	sub.w	r2, r2, #696	@ 0x2b8
 8003c26:	6013      	str	r3, [r2, #0]
    char debug_msg[128];
    char pump_address;
    HAL_StatusTypeDef status;
    
    // 根据pump_id选择地址
    if (pump_id == 1) {
 8003c28:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003c2c:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d103      	bne.n	8003c3e <send_command+0x46>
        pump_address = '1';  // 泵1地址为'1'
 8003c36:	2331      	movs	r3, #49	@ 0x31
 8003c38:	f887 32b7 	strb.w	r3, [r7, #695]	@ 0x2b7
 8003c3c:	e01d      	b.n	8003c7a <send_command+0x82>
    } else if (pump_id == 2) {
 8003c3e:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003c42:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d103      	bne.n	8003c54 <send_command+0x5c>
        pump_address = '2';  // 泵2地址为'2'
 8003c4c:	2332      	movs	r3, #50	@ 0x32
 8003c4e:	f887 32b7 	strb.w	r3, [r7, #695]	@ 0x2b7
 8003c52:	e012      	b.n	8003c7a <send_command+0x82>
    } else {
        snprintf(debug_msg, sizeof(debug_msg), "Invalid pump_id: %d", pump_id);
 8003c54:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003c58:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003c5c:	f507 708e 	add.w	r0, r7, #284	@ 0x11c
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4ab9      	ldr	r2, [pc, #740]	@ (8003f48 <send_command+0x350>)
 8003c64:	2180      	movs	r1, #128	@ 0x80
 8003c66:	f01a faa3 	bl	801e1b0 <sniprintf>
        pump_debug_print(debug_msg);
 8003c6a:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7ff ffb8 	bl	8003be4 <pump_debug_print>
        return -1;
 8003c74:	f04f 33ff 	mov.w	r3, #4294967295
 8003c78:	e160      	b.n	8003f3c <send_command+0x344>
    }
    
    // 格式化命令: /地址命令CR+LF (根据手册需要CRLF结尾)
    snprintf(buffer, sizeof(buffer), "/%c%s\r\n", pump_address, cmd);
 8003c7a:	f897 22b7 	ldrb.w	r2, [r7, #695]	@ 0x2b7
 8003c7e:	f507 70ce 	add.w	r0, r7, #412	@ 0x19c
 8003c82:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003c86:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	9300      	str	r3, [sp, #0]
 8003c8e:	4613      	mov	r3, r2
 8003c90:	4aae      	ldr	r2, [pc, #696]	@ (8003f4c <send_command+0x354>)
 8003c92:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003c96:	f01a fa8b 	bl	801e1b0 <sniprintf>
    
    // 调试信息
    snprintf(debug_msg, sizeof(debug_msg), "Pump%d TX: %s", pump_id, buffer);
 8003c9a:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003c9e:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003ca2:	f507 708e 	add.w	r0, r7, #284	@ 0x11c
 8003ca6:	f507 72ce 	add.w	r2, r7, #412	@ 0x19c
 8003caa:	9200      	str	r2, [sp, #0]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4aa8      	ldr	r2, [pc, #672]	@ (8003f50 <send_command+0x358>)
 8003cb0:	2180      	movs	r1, #128	@ 0x80
 8003cb2:	f01a fa7d 	bl	801e1b0 <sniprintf>
    pump_debug_print(debug_msg);
 8003cb6:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7ff ff92 	bl	8003be4 <pump_debug_print>
    
    // 通过USART3发送命令
    status = HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), 1000);
 8003cc0:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f7fc fa83 	bl	80001d0 <strlen>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	b29a      	uxth	r2, r3
 8003cce:	f507 71ce 	add.w	r1, r7, #412	@ 0x19c
 8003cd2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003cd6:	489f      	ldr	r0, [pc, #636]	@ (8003f54 <send_command+0x35c>)
 8003cd8:	f005 fb30 	bl	800933c <HAL_UART_Transmit>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
    if (status != HAL_OK) {
 8003ce2:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d015      	beq.n	8003d16 <send_command+0x11e>
        snprintf(debug_msg, sizeof(debug_msg), "Pump%d UART TX failed: %d", pump_id, status);
 8003cea:	f897 22a7 	ldrb.w	r2, [r7, #679]	@ 0x2a7
 8003cee:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003cf2:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003cf6:	f507 708e 	add.w	r0, r7, #284	@ 0x11c
 8003cfa:	9200      	str	r2, [sp, #0]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a96      	ldr	r2, [pc, #600]	@ (8003f58 <send_command+0x360>)
 8003d00:	2180      	movs	r1, #128	@ 0x80
 8003d02:	f01a fa55 	bl	801e1b0 <sniprintf>
        pump_debug_print(debug_msg);
 8003d06:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7ff ff6a 	bl	8003be4 <pump_debug_print>
        return -1;
 8003d10:	f04f 33ff 	mov.w	r3, #4294967295
 8003d14:	e112      	b.n	8003f3c <send_command+0x344>
    }
    
    // 读取响应（如果需要）- 使用逐字节接收
    if (response && resp_size > 0) {
 8003d16:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003d1a:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	f000 810a 	beq.w	8003f3a <send_command+0x342>
 8003d26:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003d2a:	f5a3 732e 	sub.w	r3, r3, #696	@ 0x2b8
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	f000 8102 	beq.w	8003f3a <send_command+0x342>
        memset(response, 0, resp_size);
 8003d36:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003d3a:	f5a3 722e 	sub.w	r2, r3, #696	@ 0x2b8
 8003d3e:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003d42:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8003d46:	6812      	ldr	r2, [r2, #0]
 8003d48:	2100      	movs	r1, #0
 8003d4a:	6818      	ldr	r0, [r3, #0]
 8003d4c:	f01a fad3 	bl	801e2f6 <memset>
        
        uint8_t rx_char;
        size_t received_count = 0;
 8003d50:	2300      	movs	r3, #0
 8003d52:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
        uint32_t start_time = HAL_GetTick();
 8003d56:	f000 ff71 	bl	8004c3c <HAL_GetTick>
 8003d5a:	f8c7 02ac 	str.w	r0, [r7, #684]	@ 0x2ac
        uint32_t timeout_ms = 200;  // 总超时200ms
 8003d5e:	23c8      	movs	r3, #200	@ 0xc8
 8003d60:	f8c7 32a0 	str.w	r3, [r7, #672]	@ 0x2a0
        uint32_t char_timeout_ms = 50;  // 单字符超时50ms
 8003d64:	2332      	movs	r3, #50	@ 0x32
 8003d66:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
        
        // 逐字节接收，直到遇到结束符或超时
        while (received_count < (resp_size - 1)) {
 8003d6a:	e05f      	b.n	8003e2c <send_command+0x234>
            status = HAL_UART_Receive(&huart3, &rx_char, 1, char_timeout_ms);
 8003d6c:	f207 111b 	addw	r1, r7, #283	@ 0x11b
 8003d70:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 8003d74:	2201      	movs	r2, #1
 8003d76:	4877      	ldr	r0, [pc, #476]	@ (8003f54 <send_command+0x35c>)
 8003d78:	f005 fb6b 	bl	8009452 <HAL_UART_Receive>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
            
            if (status == HAL_OK) {
 8003d82:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d12e      	bne.n	8003de8 <send_command+0x1f0>
                response[received_count] = rx_char;
 8003d8a:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003d8e:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	f8d7 32b0 	ldr.w	r3, [r7, #688]	@ 0x2b0
 8003d98:	4413      	add	r3, r2
 8003d9a:	f507 722e 	add.w	r2, r7, #696	@ 0x2b8
 8003d9e:	f2a2 129d 	subw	r2, r2, #413	@ 0x19d
 8003da2:	7812      	ldrb	r2, [r2, #0]
 8003da4:	701a      	strb	r2, [r3, #0]
                received_count++;
 8003da6:	f8d7 32b0 	ldr.w	r3, [r7, #688]	@ 0x2b0
 8003daa:	3301      	adds	r3, #1
 8003dac:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
                
                // 检查是否收到完整的结束符序列 (CRLF)
                // 只有当收到LF并且前一个字符是CR时才结束
                if (received_count >= 2 && 
 8003db0:	f8d7 32b0 	ldr.w	r3, [r7, #688]	@ 0x2b0
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d912      	bls.n	8003dde <send_command+0x1e6>
                    rx_char == 0x0A && 
 8003db8:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003dbc:	f2a3 139d 	subw	r3, r3, #413	@ 0x19d
 8003dc0:	781b      	ldrb	r3, [r3, #0]
                if (received_count >= 2 && 
 8003dc2:	2b0a      	cmp	r3, #10
 8003dc4:	d10b      	bne.n	8003dde <send_command+0x1e6>
                    response[received_count-2] == 0x0D) {
 8003dc6:	f8d7 32b0 	ldr.w	r3, [r7, #688]	@ 0x2b0
 8003dca:	3b02      	subs	r3, #2
 8003dcc:	f507 722e 	add.w	r2, r7, #696	@ 0x2b8
 8003dd0:	f5a2 722d 	sub.w	r2, r2, #692	@ 0x2b4
 8003dd4:	6812      	ldr	r2, [r2, #0]
 8003dd6:	4413      	add	r3, r2
 8003dd8:	781b      	ldrb	r3, [r3, #0]
                    rx_char == 0x0A && 
 8003dda:	2b0d      	cmp	r3, #13
 8003ddc:	d031      	beq.n	8003e42 <send_command+0x24a>
                    break;
                }
                
                // 重置总超时计时器（收到数据说明设备在响应）
                start_time = HAL_GetTick();
 8003dde:	f000 ff2d 	bl	8004c3c <HAL_GetTick>
 8003de2:	f8c7 02ac 	str.w	r0, [r7, #684]	@ 0x2ac
 8003de6:	e021      	b.n	8003e2c <send_command+0x234>
            } else if (status == HAL_TIMEOUT) {
 8003de8:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 8003dec:	2b03      	cmp	r3, #3
 8003dee:	d12a      	bne.n	8003e46 <send_command+0x24e>
                // 单字符超时，检查是否已经接收到数据
                if (received_count > 0) {
 8003df0:	f8d7 32b0 	ldr.w	r3, [r7, #688]	@ 0x2b0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d00f      	beq.n	8003e18 <send_command+0x220>
                    // 已有数据，可能接收完成，等待一下看是否还有数据
                    HAL_Delay(5);  // 减少延时时间
 8003df8:	2005      	movs	r0, #5
 8003dfa:	f000 ff2b 	bl	8004c54 <HAL_Delay>
                    // 给已收到数据情况下额外3次重试机会
                    static int retry_count = 0;
                    retry_count++;
 8003dfe:	4b57      	ldr	r3, [pc, #348]	@ (8003f5c <send_command+0x364>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	3301      	adds	r3, #1
 8003e04:	4a55      	ldr	r2, [pc, #340]	@ (8003f5c <send_command+0x364>)
 8003e06:	6013      	str	r3, [r2, #0]
                    if (retry_count > 3) {
 8003e08:	4b54      	ldr	r3, [pc, #336]	@ (8003f5c <send_command+0x364>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2b03      	cmp	r3, #3
 8003e0e:	dd03      	ble.n	8003e18 <send_command+0x220>
                        retry_count = 0;
 8003e10:	4b52      	ldr	r3, [pc, #328]	@ (8003f5c <send_command+0x364>)
 8003e12:	2200      	movs	r2, #0
 8003e14:	601a      	str	r2, [r3, #0]
                        break;  // 重试次数用完，退出
 8003e16:	e019      	b.n	8003e4c <send_command+0x254>
                    }
                }
                
                // 检查总超时
                if (HAL_GetTick() - start_time > timeout_ms) {
 8003e18:	f000 ff10 	bl	8004c3c <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	f8d7 22a0 	ldr.w	r2, [r7, #672]	@ 0x2a0
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d30e      	bcc.n	8003e4a <send_command+0x252>
        while (received_count < (resp_size - 1)) {
 8003e2c:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003e30:	f5a3 732e 	sub.w	r3, r3, #696	@ 0x2b8
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	3b01      	subs	r3, #1
 8003e38:	f8d7 22b0 	ldr.w	r2, [r7, #688]	@ 0x2b0
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d395      	bcc.n	8003d6c <send_command+0x174>
 8003e40:	e004      	b.n	8003e4c <send_command+0x254>
                    break;
 8003e42:	bf00      	nop
 8003e44:	e002      	b.n	8003e4c <send_command+0x254>
                    break;  // 总超时，退出
                }
            } else {
                // 其他错误，退出
                break;
 8003e46:	bf00      	nop
 8003e48:	e000      	b.n	8003e4c <send_command+0x254>
                    break;  // 总超时，退出
 8003e4a:	bf00      	nop
            }
        }
        
        // 确保字符串结束
        response[received_count] = '\0';
 8003e4c:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003e50:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	f8d7 32b0 	ldr.w	r3, [r7, #688]	@ 0x2b0
 8003e5a:	4413      	add	r3, r2
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	701a      	strb	r2, [r3, #0]
        
        if (received_count > 0) {
 8003e60:	f8d7 32b0 	ldr.w	r3, [r7, #688]	@ 0x2b0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d055      	beq.n	8003f14 <send_command+0x31c>
            // 调试信息：显示响应 (修复格式化问题)
            snprintf(debug_msg, sizeof(debug_msg), "Pump%d RX (%u bytes): [%s]", pump_id, (unsigned int)received_count, response);
 8003e68:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003e6c:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003e70:	f507 708e 	add.w	r0, r7, #284	@ 0x11c
 8003e74:	f507 722e 	add.w	r2, r7, #696	@ 0x2b8
 8003e78:	f5a2 722d 	sub.w	r2, r2, #692	@ 0x2b4
 8003e7c:	6812      	ldr	r2, [r2, #0]
 8003e7e:	9201      	str	r2, [sp, #4]
 8003e80:	f8d7 22b0 	ldr.w	r2, [r7, #688]	@ 0x2b0
 8003e84:	9200      	str	r2, [sp, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a35      	ldr	r2, [pc, #212]	@ (8003f60 <send_command+0x368>)
 8003e8a:	2180      	movs	r1, #128	@ 0x80
 8003e8c:	f01a f990 	bl	801e1b0 <sniprintf>
            pump_debug_print(debug_msg);
 8003e90:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8003e94:	4618      	mov	r0, r3
 8003e96:	f7ff fea5 	bl	8003be4 <pump_debug_print>
            
            // 添加十六进制显示，帮助调试
            char hex_debug[256];
            snprintf(hex_debug, sizeof(hex_debug), "Pump%d RX_HEX: ", pump_id);
 8003e9a:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003e9e:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003ea2:	f107 0014 	add.w	r0, r7, #20
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a2e      	ldr	r2, [pc, #184]	@ (8003f64 <send_command+0x36c>)
 8003eaa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003eae:	f01a f97f 	bl	801e1b0 <sniprintf>
            for (size_t i = 0; i < received_count && i < 20; i++) {  // 只显示前20个字节
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8
 8003eb8:	e01b      	b.n	8003ef2 <send_command+0x2fa>
                char hex_byte[4];
                snprintf(hex_byte, sizeof(hex_byte), "%02X ", (unsigned char)response[i]);
 8003eba:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003ebe:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	f8d7 32a8 	ldr.w	r3, [r7, #680]	@ 0x2a8
 8003ec8:	4413      	add	r3, r2
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	f507 708a 	add.w	r0, r7, #276	@ 0x114
 8003ed0:	4a25      	ldr	r2, [pc, #148]	@ (8003f68 <send_command+0x370>)
 8003ed2:	2104      	movs	r1, #4
 8003ed4:	f01a f96c 	bl	801e1b0 <sniprintf>
                strcat(hex_debug, hex_byte);
 8003ed8:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 8003edc:	f107 0314 	add.w	r3, r7, #20
 8003ee0:	4611      	mov	r1, r2
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f01a fa0f 	bl	801e306 <strcat>
            for (size_t i = 0; i < received_count && i < 20; i++) {  // 只显示前20个字节
 8003ee8:	f8d7 32a8 	ldr.w	r3, [r7, #680]	@ 0x2a8
 8003eec:	3301      	adds	r3, #1
 8003eee:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8
 8003ef2:	f8d7 22a8 	ldr.w	r2, [r7, #680]	@ 0x2a8
 8003ef6:	f8d7 32b0 	ldr.w	r3, [r7, #688]	@ 0x2b0
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d203      	bcs.n	8003f06 <send_command+0x30e>
 8003efe:	f8d7 32a8 	ldr.w	r3, [r7, #680]	@ 0x2a8
 8003f02:	2b13      	cmp	r3, #19
 8003f04:	d9d9      	bls.n	8003eba <send_command+0x2c2>
            }
            pump_debug_print(hex_debug);
 8003f06:	f107 0314 	add.w	r3, r7, #20
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f7ff fe6a 	bl	8003be4 <pump_debug_print>
            
            return 0;  // 成功
 8003f10:	2300      	movs	r3, #0
 8003f12:	e013      	b.n	8003f3c <send_command+0x344>
        } else {
            snprintf(debug_msg, sizeof(debug_msg), "Pump%d RX: No data received", pump_id);
 8003f14:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003f18:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003f1c:	f507 708e 	add.w	r0, r7, #284	@ 0x11c
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a12      	ldr	r2, [pc, #72]	@ (8003f6c <send_command+0x374>)
 8003f24:	2180      	movs	r1, #128	@ 0x80
 8003f26:	f01a f943 	bl	801e1b0 <sniprintf>
            pump_debug_print(debug_msg);
 8003f2a:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f7ff fe58 	bl	8003be4 <pump_debug_print>
            return -1;  // 超时无数据
 8003f34:	f04f 33ff 	mov.w	r3, #4294967295
 8003f38:	e000      	b.n	8003f3c <send_command+0x344>
        }
    }

    return 0;  // 只发送，不接收
 8003f3a:	2300      	movs	r3, #0
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f507 772f 	add.w	r7, r7, #700	@ 0x2bc
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd90      	pop	{r4, r7, pc}
 8003f46:	bf00      	nop
 8003f48:	0802021c 	.word	0x0802021c
 8003f4c:	08020230 	.word	0x08020230
 8003f50:	08020238 	.word	0x08020238
 8003f54:	20000868 	.word	0x20000868
 8003f58:	08020248 	.word	0x08020248
 8003f5c:	200007d0 	.word	0x200007d0
 8003f60:	08020264 	.word	0x08020264
 8003f64:	08020280 	.word	0x08020280
 8003f68:	08020290 	.word	0x08020290
 8003f6c:	08020298 	.word	0x08020298

08003f70 <pump_init>:

// 初始化泵
int pump_init(int pump_id) {
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b082      	sub	sp, #8
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
    return send_command(pump_id, CMD_INIT, NULL, 0);
 8003f78:	2300      	movs	r3, #0
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	4904      	ldr	r1, [pc, #16]	@ (8003f90 <pump_init+0x20>)
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f7ff fe3a 	bl	8003bf8 <send_command>
 8003f84:	4603      	mov	r3, r0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3708      	adds	r7, #8
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	080202b4 	.word	0x080202b4

08003f94 <pump_move_absolute>:

// 绝对位置移动
int pump_move_absolute(int pump_id, int position) {
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b08a      	sub	sp, #40	@ 0x28
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
    char cmd[32];
    snprintf(cmd, sizeof(cmd), CMD_ABS_MOVE, position);
 8003f9e:	f107 0008 	add.w	r0, r7, #8
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	4a07      	ldr	r2, [pc, #28]	@ (8003fc4 <pump_move_absolute+0x30>)
 8003fa6:	2120      	movs	r1, #32
 8003fa8:	f01a f902 	bl	801e1b0 <sniprintf>
    return send_command(pump_id, cmd, NULL, 0);
 8003fac:	f107 0108 	add.w	r1, r7, #8
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f7ff fe1f 	bl	8003bf8 <send_command>
 8003fba:	4603      	mov	r3, r0
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3728      	adds	r7, #40	@ 0x28
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	080202b8 	.word	0x080202b8

08003fc8 <pump_query_error>:
int pump_get_status(int pump_id, char* status) {
    return send_command(pump_id, CMD_STATUS, status, 256);
}

// 查询错误码
int pump_query_error(int pump_id, char* error_code) {
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
    return send_command(pump_id, CMD_ERROR_QUERY, error_code, 256);
 8003fd2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003fd6:	683a      	ldr	r2, [r7, #0]
 8003fd8:	4904      	ldr	r1, [pc, #16]	@ (8003fec <pump_query_error+0x24>)
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f7ff fe0c 	bl	8003bf8 <send_command>
 8003fe0:	4603      	mov	r3, r0
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3708      	adds	r7, #8
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	bf00      	nop
 8003fec:	080202e0 	.word	0x080202e0

08003ff0 <pump_query_position>:

// 查询当前活塞位置
int pump_query_position(int pump_id, int* position) {
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b0e6      	sub	sp, #408	@ 0x198
 8003ff4:	af02      	add	r7, sp, #8
 8003ff6:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8003ffa:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003ffe:	6018      	str	r0, [r3, #0]
 8004000:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8004004:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004008:	6019      	str	r1, [r3, #0]
    char response[256];
    char debug_msg[128];
    
    int result = send_command(pump_id, CMD_POSITION_QUERY, response, sizeof(response));
 800400a:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 800400e:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8004012:	f5a3 70c6 	sub.w	r0, r3, #396	@ 0x18c
 8004016:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800401a:	4940      	ldr	r1, [pc, #256]	@ (800411c <pump_query_position+0x12c>)
 800401c:	6800      	ldr	r0, [r0, #0]
 800401e:	f7ff fdeb 	bl	8003bf8 <send_command>
 8004022:	f8c7 018c 	str.w	r0, [r7, #396]	@ 0x18c
    
    // 添加详细的调试信息
    snprintf(debug_msg, sizeof(debug_msg), "Position query result: %d", result);
 8004026:	f107 0008 	add.w	r0, r7, #8
 800402a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800402e:	4a3c      	ldr	r2, [pc, #240]	@ (8004120 <pump_query_position+0x130>)
 8004030:	2180      	movs	r1, #128	@ 0x80
 8004032:	f01a f8bd 	bl	801e1b0 <sniprintf>
    pump_debug_print(debug_msg);
 8004036:	f107 0308 	add.w	r3, r7, #8
 800403a:	4618      	mov	r0, r3
 800403c:	f7ff fdd2 	bl	8003be4 <pump_debug_print>
    
    if (result == 0 && position != NULL) {
 8004040:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8004044:	2b00      	cmp	r3, #0
 8004046:	d14f      	bne.n	80040e8 <pump_query_position+0xf8>
 8004048:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800404c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d048      	beq.n	80040e8 <pump_query_position+0xf8>
        // 解析响应，从类似 "FF /0`3000 03 0D 0A" 格式中提取位置
        snprintf(debug_msg, sizeof(debug_msg), "Parsing response: [%s]", response);
 8004056:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800405a:	f107 0008 	add.w	r0, r7, #8
 800405e:	4a31      	ldr	r2, [pc, #196]	@ (8004124 <pump_query_position+0x134>)
 8004060:	2180      	movs	r1, #128	@ 0x80
 8004062:	f01a f8a5 	bl	801e1b0 <sniprintf>
        pump_debug_print(debug_msg);
 8004066:	f107 0308 	add.w	r3, r7, #8
 800406a:	4618      	mov	r0, r3
 800406c:	f7ff fdba 	bl	8003be4 <pump_debug_print>
        
        // 寻找 '`' 字符后的数字
        char* pos_start = strchr(response, '`');
 8004070:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8004074:	2160      	movs	r1, #96	@ 0x60
 8004076:	4618      	mov	r0, r3
 8004078:	f01a f954 	bl	801e324 <strchr>
 800407c:	f8c7 0188 	str.w	r0, [r7, #392]	@ 0x188
        if (pos_start != NULL) {
 8004080:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8004084:	2b00      	cmp	r3, #0
 8004086:	d021      	beq.n	80040cc <pump_query_position+0xdc>
            pos_start++; // 跳过 '`' 字符
 8004088:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800408c:	3301      	adds	r3, #1
 800408e:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
            *position = atoi(pos_start);
 8004092:	f8d7 0188 	ldr.w	r0, [r7, #392]	@ 0x188
 8004096:	f019 fef1 	bl	801de7c <atoi>
 800409a:	4602      	mov	r2, r0
 800409c:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80040a0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	601a      	str	r2, [r3, #0]
            snprintf(debug_msg, sizeof(debug_msg), "Parsed position: %d", *position);
 80040a8:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80040ac:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f107 0008 	add.w	r0, r7, #8
 80040b8:	4a1b      	ldr	r2, [pc, #108]	@ (8004128 <pump_query_position+0x138>)
 80040ba:	2180      	movs	r1, #128	@ 0x80
 80040bc:	f01a f878 	bl	801e1b0 <sniprintf>
            pump_debug_print(debug_msg);
 80040c0:	f107 0308 	add.w	r3, r7, #8
 80040c4:	4618      	mov	r0, r3
 80040c6:	f7ff fd8d 	bl	8003be4 <pump_debug_print>
    if (result == 0 && position != NULL) {
 80040ca:	e020      	b.n	800410e <pump_query_position+0x11e>
        } else {
            pump_debug_print("Error: No '`' character found in response");
 80040cc:	4817      	ldr	r0, [pc, #92]	@ (800412c <pump_query_position+0x13c>)
 80040ce:	f7ff fd89 	bl	8003be4 <pump_debug_print>
            *position = -1;  // 解析失败
 80040d2:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80040d6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f04f 32ff 	mov.w	r2, #4294967295
 80040e0:	601a      	str	r2, [r3, #0]
            return -1;
 80040e2:	f04f 33ff 	mov.w	r3, #4294967295
 80040e6:	e014      	b.n	8004112 <pump_query_position+0x122>
        }
    } else {
        snprintf(debug_msg, sizeof(debug_msg), "Position query failed: result=%d, position=%p", 
 80040e8:	f107 0008 	add.w	r0, r7, #8
 80040ec:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80040f0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	9300      	str	r3, [sp, #0]
 80040f8:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80040fc:	4a0c      	ldr	r2, [pc, #48]	@ (8004130 <pump_query_position+0x140>)
 80040fe:	2180      	movs	r1, #128	@ 0x80
 8004100:	f01a f856 	bl	801e1b0 <sniprintf>
                result, (void*)position);
        pump_debug_print(debug_msg);
 8004104:	f107 0308 	add.w	r3, r7, #8
 8004108:	4618      	mov	r0, r3
 800410a:	f7ff fd6b 	bl	8003be4 <pump_debug_print>
    }
    
    return result;
 800410e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
}
 8004112:	4618      	mov	r0, r3
 8004114:	f507 77c8 	add.w	r7, r7, #400	@ 0x190
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}
 800411c:	080202e4 	.word	0x080202e4
 8004120:	080202e8 	.word	0x080202e8
 8004124:	08020304 	.word	0x08020304
 8004128:	0802031c 	.word	0x0802031c
 800412c:	08020330 	.word	0x08020330
 8004130:	0802035c 	.word	0x0802035c

08004134 <pump_parse_status_byte>:
  * @brief  解析DT协议状态字节，转换为错误编号
  * @param  status_byte: 从泵响应中提取的状态字节（HEX值）
  * @retval 对应的错误编号
  * @note   根据DT协议状态字节表进行映射，忙碌和空闲状态的错误编号相同
  */
PumpErrorCode_t pump_parse_status_byte(uint8_t status_byte) {
 8004134:	b480      	push	{r7}
 8004136:	b085      	sub	sp, #20
 8004138:	af00      	add	r7, sp, #0
 800413a:	4603      	mov	r3, r0
 800413c:	71fb      	strb	r3, [r7, #7]
    // 提取低4位作为错误编号
    uint8_t error_bits = status_byte & 0x0F;
 800413e:	79fb      	ldrb	r3, [r7, #7]
 8004140:	f003 030f 	and.w	r3, r3, #15
 8004144:	73fb      	strb	r3, [r7, #15]
    
    switch (error_bits) {
 8004146:	7bfb      	ldrb	r3, [r7, #15]
 8004148:	2b0f      	cmp	r3, #15
 800414a:	d83b      	bhi.n	80041c4 <pump_parse_status_byte+0x90>
 800414c:	a201      	add	r2, pc, #4	@ (adr r2, 8004154 <pump_parse_status_byte+0x20>)
 800414e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004152:	bf00      	nop
 8004154:	08004195 	.word	0x08004195
 8004158:	08004199 	.word	0x08004199
 800415c:	0800419d 	.word	0x0800419d
 8004160:	080041a1 	.word	0x080041a1
 8004164:	080041c5 	.word	0x080041c5
 8004168:	080041c5 	.word	0x080041c5
 800416c:	080041a5 	.word	0x080041a5
 8004170:	080041a9 	.word	0x080041a9
 8004174:	080041c5 	.word	0x080041c5
 8004178:	080041ad 	.word	0x080041ad
 800417c:	080041b1 	.word	0x080041b1
 8004180:	080041b5 	.word	0x080041b5
 8004184:	080041b9 	.word	0x080041b9
 8004188:	080041c5 	.word	0x080041c5
 800418c:	080041bd 	.word	0x080041bd
 8004190:	080041c1 	.word	0x080041c1
        case 0x00:  // 0000 - 无误
            return PUMP_ERROR_NO_ERROR;         // 0
 8004194:	2300      	movs	r3, #0
 8004196:	e016      	b.n	80041c6 <pump_parse_status_byte+0x92>
            
        case 0x01:  // 0001 - 初始化
            return PUMP_ERROR_INITIALIZED;      // 1
 8004198:	2301      	movs	r3, #1
 800419a:	e014      	b.n	80041c6 <pump_parse_status_byte+0x92>
            
        case 0x02:  // 0010 - 无效指令
            return PUMP_ERROR_NO_COMMAND;       // 2
 800419c:	2302      	movs	r3, #2
 800419e:	e012      	b.n	80041c6 <pump_parse_status_byte+0x92>
            
        case 0x03:  // 0011 - 无效参数
            return PUMP_ERROR_INVALID_PARAM;    // 3
 80041a0:	2303      	movs	r3, #3
 80041a2:	e010      	b.n	80041c6 <pump_parse_status_byte+0x92>
            
        case 0x06:  // 0110 - EEPROM故障
            return PUMP_ERROR_EEPROM_FAULT;     // 6
 80041a4:	2306      	movs	r3, #6
 80041a6:	e00e      	b.n	80041c6 <pump_parse_status_byte+0x92>
            
        case 0x07:  // 0111 - 设备未初始化
            return PUMP_ERROR_DEVICE_NOT_INIT;  // 7
 80041a8:	2307      	movs	r3, #7
 80041aa:	e00c      	b.n	80041c6 <pump_parse_status_byte+0x92>
            
        case 0x09:  // 1001 - 柱塞过载
            return PUMP_ERROR_OVERLOAD;         // 9
 80041ac:	2309      	movs	r3, #9
 80041ae:	e00a      	b.n	80041c6 <pump_parse_status_byte+0x92>
            
        case 0x0A:  // 1010 - 阀过载
            return PUMP_ERROR_VALVE_OVERLOAD;   // 10
 80041b0:	230a      	movs	r3, #10
 80041b2:	e008      	b.n	80041c6 <pump_parse_status_byte+0x92>
            
        case 0x0B:  // 1011 - 不支持柱移动
            return PUMP_ERROR_PLUNGER_MOVE_NOT_ALLOWED; // 11
 80041b4:	230b      	movs	r3, #11
 80041b6:	e006      	b.n	80041c6 <pump_parse_status_byte+0x92>
            
        case 0x0C:  // 1100 - 内部故障
            return PUMP_ERROR_INTERNAL_FAULT;   // 12
 80041b8:	230c      	movs	r3, #12
 80041ba:	e004      	b.n	80041c6 <pump_parse_status_byte+0x92>
            
        case 0x0E:  // 1110 - A/D转换器故障
            return PUMP_ERROR_AD_FAULT;         // 14
 80041bc:	230e      	movs	r3, #14
 80041be:	e002      	b.n	80041c6 <pump_parse_status_byte+0x92>
            
        case 0x0F:  // 1111 - 指令溢出
            return PUMP_ERROR_CMD_OVERFLOW;     // 15
 80041c0:	230f      	movs	r3, #15
 80041c2:	e000      	b.n	80041c6 <pump_parse_status_byte+0x92>
            
        default:
            // 未知错误码，默认返回内部故障
            return PUMP_ERROR_INTERNAL_FAULT;
 80041c4:	230c      	movs	r3, #12
    }
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3714      	adds	r7, #20
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop

080041d4 <pump_parse_busy_state>:
  * @brief  解析DT协议状态字节，提取忙碌状态
  * @param  status_byte: 从泵响应中提取的状态字节（HEX值）
  * @retval 忙碌状态 (PUMP_STATE_IDLE 或 PUMP_STATE_BUSY)
  * @note   高4位表示忙碌状态：0x4X=忙碌，0x6X=空闲
  */
PumpBusyState_t pump_parse_busy_state(uint8_t status_byte) {
 80041d4:	b480      	push	{r7}
 80041d6:	b085      	sub	sp, #20
 80041d8:	af00      	add	r7, sp, #0
 80041da:	4603      	mov	r3, r0
 80041dc:	71fb      	strb	r3, [r7, #7]
    // 检查高4位
    uint8_t busy_bits = status_byte & 0xF0;
 80041de:	79fb      	ldrb	r3, [r7, #7]
 80041e0:	f023 030f 	bic.w	r3, r3, #15
 80041e4:	73fb      	strb	r3, [r7, #15]
    
    if (busy_bits == 0x40) {
 80041e6:	7bfb      	ldrb	r3, [r7, #15]
 80041e8:	2b40      	cmp	r3, #64	@ 0x40
 80041ea:	d101      	bne.n	80041f0 <pump_parse_busy_state+0x1c>
        return PUMP_STATE_BUSY;   // 0x4X = 忙碌
 80041ec:	2301      	movs	r3, #1
 80041ee:	e005      	b.n	80041fc <pump_parse_busy_state+0x28>
    } else if (busy_bits == 0x60) {
 80041f0:	7bfb      	ldrb	r3, [r7, #15]
 80041f2:	2b60      	cmp	r3, #96	@ 0x60
 80041f4:	d101      	bne.n	80041fa <pump_parse_busy_state+0x26>
        return PUMP_STATE_IDLE;   // 0x6X = 空闲
 80041f6:	2300      	movs	r3, #0
 80041f8:	e000      	b.n	80041fc <pump_parse_busy_state+0x28>
    } else {
        // 未知状态，默认为忙碌（安全考虑）
        return PUMP_STATE_BUSY;
 80041fa:	2301      	movs	r3, #1
    }
 80041fc:	4618      	mov	r0, r3
 80041fe:	3714      	adds	r7, #20
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004208:	b480      	push	{r7}
 800420a:	af00      	add	r7, sp, #0
  return 1;
 800420c:	2301      	movs	r3, #1
}
 800420e:	4618      	mov	r0, r3
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <_kill>:

int _kill(int pid, int sig)
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004222:	4b05      	ldr	r3, [pc, #20]	@ (8004238 <_kill+0x20>)
 8004224:	2216      	movs	r2, #22
 8004226:	601a      	str	r2, [r3, #0]
  return -1;
 8004228:	f04f 33ff 	mov.w	r3, #4294967295
}
 800422c:	4618      	mov	r0, r3
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr
 8004238:	2000e94c 	.word	0x2000e94c

0800423c <_exit>:

void _exit (int status)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004244:	f04f 31ff 	mov.w	r1, #4294967295
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f7ff ffe5 	bl	8004218 <_kill>
  while (1) {}    /* Make sure we hang here */
 800424e:	bf00      	nop
 8004250:	e7fd      	b.n	800424e <_exit+0x12>

08004252 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004252:	b580      	push	{r7, lr}
 8004254:	b086      	sub	sp, #24
 8004256:	af00      	add	r7, sp, #0
 8004258:	60f8      	str	r0, [r7, #12]
 800425a:	60b9      	str	r1, [r7, #8]
 800425c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800425e:	2300      	movs	r3, #0
 8004260:	617b      	str	r3, [r7, #20]
 8004262:	e00a      	b.n	800427a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004264:	f3af 8000 	nop.w
 8004268:	4601      	mov	r1, r0
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	1c5a      	adds	r2, r3, #1
 800426e:	60ba      	str	r2, [r7, #8]
 8004270:	b2ca      	uxtb	r2, r1
 8004272:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	3301      	adds	r3, #1
 8004278:	617b      	str	r3, [r7, #20]
 800427a:	697a      	ldr	r2, [r7, #20]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	429a      	cmp	r2, r3
 8004280:	dbf0      	blt.n	8004264 <_read+0x12>
  }

  return len;
 8004282:	687b      	ldr	r3, [r7, #4]
}
 8004284:	4618      	mov	r0, r3
 8004286:	3718      	adds	r7, #24
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b086      	sub	sp, #24
 8004290:	af00      	add	r7, sp, #0
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004298:	2300      	movs	r3, #0
 800429a:	617b      	str	r3, [r7, #20]
 800429c:	e009      	b.n	80042b2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	1c5a      	adds	r2, r3, #1
 80042a2:	60ba      	str	r2, [r7, #8]
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	4618      	mov	r0, r3
 80042a8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	3301      	adds	r3, #1
 80042b0:	617b      	str	r3, [r7, #20]
 80042b2:	697a      	ldr	r2, [r7, #20]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	429a      	cmp	r2, r3
 80042b8:	dbf1      	blt.n	800429e <_write+0x12>
  }
  return len;
 80042ba:	687b      	ldr	r3, [r7, #4]
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3718      	adds	r7, #24
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <_close>:

int _close(int file)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80042cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80042ec:	605a      	str	r2, [r3, #4]
  return 0;
 80042ee:	2300      	movs	r3, #0
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	370c      	adds	r7, #12
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <_isatty>:

int _isatty(int file)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004304:	2301      	movs	r3, #1
}
 8004306:	4618      	mov	r0, r3
 8004308:	370c      	adds	r7, #12
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr

08004312 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004312:	b480      	push	{r7}
 8004314:	b085      	sub	sp, #20
 8004316:	af00      	add	r7, sp, #0
 8004318:	60f8      	str	r0, [r7, #12]
 800431a:	60b9      	str	r1, [r7, #8]
 800431c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800431e:	2300      	movs	r3, #0
}
 8004320:	4618      	mov	r0, r3
 8004322:	3714      	adds	r7, #20
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800432c:	b480      	push	{r7}
 800432e:	b087      	sub	sp, #28
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004334:	4a14      	ldr	r2, [pc, #80]	@ (8004388 <_sbrk+0x5c>)
 8004336:	4b15      	ldr	r3, [pc, #84]	@ (800438c <_sbrk+0x60>)
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004340:	4b13      	ldr	r3, [pc, #76]	@ (8004390 <_sbrk+0x64>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d102      	bne.n	800434e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004348:	4b11      	ldr	r3, [pc, #68]	@ (8004390 <_sbrk+0x64>)
 800434a:	4a12      	ldr	r2, [pc, #72]	@ (8004394 <_sbrk+0x68>)
 800434c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800434e:	4b10      	ldr	r3, [pc, #64]	@ (8004390 <_sbrk+0x64>)
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4413      	add	r3, r2
 8004356:	693a      	ldr	r2, [r7, #16]
 8004358:	429a      	cmp	r2, r3
 800435a:	d205      	bcs.n	8004368 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 800435c:	4b0e      	ldr	r3, [pc, #56]	@ (8004398 <_sbrk+0x6c>)
 800435e:	220c      	movs	r2, #12
 8004360:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004362:	f04f 33ff 	mov.w	r3, #4294967295
 8004366:	e009      	b.n	800437c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8004368:	4b09      	ldr	r3, [pc, #36]	@ (8004390 <_sbrk+0x64>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800436e:	4b08      	ldr	r3, [pc, #32]	@ (8004390 <_sbrk+0x64>)
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4413      	add	r3, r2
 8004376:	4a06      	ldr	r2, [pc, #24]	@ (8004390 <_sbrk+0x64>)
 8004378:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800437a:	68fb      	ldr	r3, [r7, #12]
}
 800437c:	4618      	mov	r0, r3
 800437e:	371c      	adds	r7, #28
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr
 8004388:	20020000 	.word	0x20020000
 800438c:	00000400 	.word	0x00000400
 8004390:	200007d4 	.word	0x200007d4
 8004394:	2000e960 	.word	0x2000e960
 8004398:	2000e94c 	.word	0x2000e94c

0800439c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800439c:	b480      	push	{r7}
 800439e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80043a0:	4b06      	ldr	r3, [pc, #24]	@ (80043bc <SystemInit+0x20>)
 80043a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043a6:	4a05      	ldr	r2, [pc, #20]	@ (80043bc <SystemInit+0x20>)
 80043a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80043ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80043b0:	bf00      	nop
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop
 80043bc:	e000ed00 	.word	0xe000ed00

080043c0 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b082      	sub	sp, #8
 80043c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043c6:	463b      	mov	r3, r7
 80043c8:	2200      	movs	r2, #0
 80043ca:	601a      	str	r2, [r3, #0]
 80043cc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80043ce:	4b15      	ldr	r3, [pc, #84]	@ (8004424 <MX_TIM7_Init+0x64>)
 80043d0:	4a15      	ldr	r2, [pc, #84]	@ (8004428 <MX_TIM7_Init+0x68>)
 80043d2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7999;
 80043d4:	4b13      	ldr	r3, [pc, #76]	@ (8004424 <MX_TIM7_Init+0x64>)
 80043d6:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80043da:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043dc:	4b11      	ldr	r3, [pc, #68]	@ (8004424 <MX_TIM7_Init+0x64>)
 80043de:	2200      	movs	r2, #0
 80043e0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80043e2:	4b10      	ldr	r3, [pc, #64]	@ (8004424 <MX_TIM7_Init+0x64>)
 80043e4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80043e8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80043ea:	4b0e      	ldr	r3, [pc, #56]	@ (8004424 <MX_TIM7_Init+0x64>)
 80043ec:	2200      	movs	r2, #0
 80043ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80043f0:	480c      	ldr	r0, [pc, #48]	@ (8004424 <MX_TIM7_Init+0x64>)
 80043f2:	f004 fc45 	bl	8008c80 <HAL_TIM_Base_Init>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d001      	beq.n	8004400 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80043fc:	f7fd fe1e 	bl	800203c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004400:	2300      	movs	r3, #0
 8004402:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004404:	2300      	movs	r3, #0
 8004406:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004408:	463b      	mov	r3, r7
 800440a:	4619      	mov	r1, r3
 800440c:	4805      	ldr	r0, [pc, #20]	@ (8004424 <MX_TIM7_Init+0x64>)
 800440e:	f004 feb5 	bl	800917c <HAL_TIMEx_MasterConfigSynchronization>
 8004412:	4603      	mov	r3, r0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d001      	beq.n	800441c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8004418:	f7fd fe10 	bl	800203c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800441c:	bf00      	nop
 800441e:	3708      	adds	r7, #8
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	200007d8 	.word	0x200007d8
 8004428:	40001400 	.word	0x40001400

0800442c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a0e      	ldr	r2, [pc, #56]	@ (8004474 <HAL_TIM_Base_MspInit+0x48>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d115      	bne.n	800446a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800443e:	2300      	movs	r3, #0
 8004440:	60fb      	str	r3, [r7, #12]
 8004442:	4b0d      	ldr	r3, [pc, #52]	@ (8004478 <HAL_TIM_Base_MspInit+0x4c>)
 8004444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004446:	4a0c      	ldr	r2, [pc, #48]	@ (8004478 <HAL_TIM_Base_MspInit+0x4c>)
 8004448:	f043 0320 	orr.w	r3, r3, #32
 800444c:	6413      	str	r3, [r2, #64]	@ 0x40
 800444e:	4b0a      	ldr	r3, [pc, #40]	@ (8004478 <HAL_TIM_Base_MspInit+0x4c>)
 8004450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004452:	f003 0320 	and.w	r3, r3, #32
 8004456:	60fb      	str	r3, [r7, #12]
 8004458:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 800445a:	2200      	movs	r2, #0
 800445c:	2105      	movs	r1, #5
 800445e:	2037      	movs	r0, #55	@ 0x37
 8004460:	f000 fcd4 	bl	8004e0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004464:	2037      	movs	r0, #55	@ 0x37
 8004466:	f000 fced 	bl	8004e44 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800446a:	bf00      	nop
 800446c:	3710      	adds	r7, #16
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	40001400 	.word	0x40001400
 8004478:	40023800 	.word	0x40023800

0800447c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart6_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004480:	4b11      	ldr	r3, [pc, #68]	@ (80044c8 <MX_USART1_UART_Init+0x4c>)
 8004482:	4a12      	ldr	r2, [pc, #72]	@ (80044cc <MX_USART1_UART_Init+0x50>)
 8004484:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004486:	4b10      	ldr	r3, [pc, #64]	@ (80044c8 <MX_USART1_UART_Init+0x4c>)
 8004488:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800448c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800448e:	4b0e      	ldr	r3, [pc, #56]	@ (80044c8 <MX_USART1_UART_Init+0x4c>)
 8004490:	2200      	movs	r2, #0
 8004492:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004494:	4b0c      	ldr	r3, [pc, #48]	@ (80044c8 <MX_USART1_UART_Init+0x4c>)
 8004496:	2200      	movs	r2, #0
 8004498:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800449a:	4b0b      	ldr	r3, [pc, #44]	@ (80044c8 <MX_USART1_UART_Init+0x4c>)
 800449c:	2200      	movs	r2, #0
 800449e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80044a0:	4b09      	ldr	r3, [pc, #36]	@ (80044c8 <MX_USART1_UART_Init+0x4c>)
 80044a2:	220c      	movs	r2, #12
 80044a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80044a6:	4b08      	ldr	r3, [pc, #32]	@ (80044c8 <MX_USART1_UART_Init+0x4c>)
 80044a8:	2200      	movs	r2, #0
 80044aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80044ac:	4b06      	ldr	r3, [pc, #24]	@ (80044c8 <MX_USART1_UART_Init+0x4c>)
 80044ae:	2200      	movs	r2, #0
 80044b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80044b2:	4805      	ldr	r0, [pc, #20]	@ (80044c8 <MX_USART1_UART_Init+0x4c>)
 80044b4:	f004 fef2 	bl	800929c <HAL_UART_Init>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d001      	beq.n	80044c2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80044be:	f7fd fdbd 	bl	800203c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80044c2:	bf00      	nop
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	20000820 	.word	0x20000820
 80044cc:	40011000 	.word	0x40011000

080044d0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80044d4:	4b11      	ldr	r3, [pc, #68]	@ (800451c <MX_USART3_UART_Init+0x4c>)
 80044d6:	4a12      	ldr	r2, [pc, #72]	@ (8004520 <MX_USART3_UART_Init+0x50>)
 80044d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80044da:	4b10      	ldr	r3, [pc, #64]	@ (800451c <MX_USART3_UART_Init+0x4c>)
 80044dc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80044e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80044e2:	4b0e      	ldr	r3, [pc, #56]	@ (800451c <MX_USART3_UART_Init+0x4c>)
 80044e4:	2200      	movs	r2, #0
 80044e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80044e8:	4b0c      	ldr	r3, [pc, #48]	@ (800451c <MX_USART3_UART_Init+0x4c>)
 80044ea:	2200      	movs	r2, #0
 80044ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80044ee:	4b0b      	ldr	r3, [pc, #44]	@ (800451c <MX_USART3_UART_Init+0x4c>)
 80044f0:	2200      	movs	r2, #0
 80044f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80044f4:	4b09      	ldr	r3, [pc, #36]	@ (800451c <MX_USART3_UART_Init+0x4c>)
 80044f6:	220c      	movs	r2, #12
 80044f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80044fa:	4b08      	ldr	r3, [pc, #32]	@ (800451c <MX_USART3_UART_Init+0x4c>)
 80044fc:	2200      	movs	r2, #0
 80044fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004500:	4b06      	ldr	r3, [pc, #24]	@ (800451c <MX_USART3_UART_Init+0x4c>)
 8004502:	2200      	movs	r2, #0
 8004504:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004506:	4805      	ldr	r0, [pc, #20]	@ (800451c <MX_USART3_UART_Init+0x4c>)
 8004508:	f004 fec8 	bl	800929c <HAL_UART_Init>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d001      	beq.n	8004516 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8004512:	f7fd fd93 	bl	800203c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004516:	bf00      	nop
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	20000868 	.word	0x20000868
 8004520:	40004800 	.word	0x40004800

08004524 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8004528:	4b11      	ldr	r3, [pc, #68]	@ (8004570 <MX_USART6_UART_Init+0x4c>)
 800452a:	4a12      	ldr	r2, [pc, #72]	@ (8004574 <MX_USART6_UART_Init+0x50>)
 800452c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800452e:	4b10      	ldr	r3, [pc, #64]	@ (8004570 <MX_USART6_UART_Init+0x4c>)
 8004530:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8004534:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8004536:	4b0e      	ldr	r3, [pc, #56]	@ (8004570 <MX_USART6_UART_Init+0x4c>)
 8004538:	2200      	movs	r2, #0
 800453a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800453c:	4b0c      	ldr	r3, [pc, #48]	@ (8004570 <MX_USART6_UART_Init+0x4c>)
 800453e:	2200      	movs	r2, #0
 8004540:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8004542:	4b0b      	ldr	r3, [pc, #44]	@ (8004570 <MX_USART6_UART_Init+0x4c>)
 8004544:	2200      	movs	r2, #0
 8004546:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004548:	4b09      	ldr	r3, [pc, #36]	@ (8004570 <MX_USART6_UART_Init+0x4c>)
 800454a:	220c      	movs	r2, #12
 800454c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800454e:	4b08      	ldr	r3, [pc, #32]	@ (8004570 <MX_USART6_UART_Init+0x4c>)
 8004550:	2200      	movs	r2, #0
 8004552:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004554:	4b06      	ldr	r3, [pc, #24]	@ (8004570 <MX_USART6_UART_Init+0x4c>)
 8004556:	2200      	movs	r2, #0
 8004558:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800455a:	4805      	ldr	r0, [pc, #20]	@ (8004570 <MX_USART6_UART_Init+0x4c>)
 800455c:	f004 fe9e 	bl	800929c <HAL_UART_Init>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d001      	beq.n	800456a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8004566:	f7fd fd69 	bl	800203c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800456a:	bf00      	nop
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	200008b0 	.word	0x200008b0
 8004574:	40011400 	.word	0x40011400

08004578 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b08e      	sub	sp, #56	@ 0x38
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004580:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004584:	2200      	movs	r2, #0
 8004586:	601a      	str	r2, [r3, #0]
 8004588:	605a      	str	r2, [r3, #4]
 800458a:	609a      	str	r2, [r3, #8]
 800458c:	60da      	str	r2, [r3, #12]
 800458e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a82      	ldr	r2, [pc, #520]	@ (80047a0 <HAL_UART_MspInit+0x228>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d12d      	bne.n	80045f6 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800459a:	2300      	movs	r3, #0
 800459c:	623b      	str	r3, [r7, #32]
 800459e:	4b81      	ldr	r3, [pc, #516]	@ (80047a4 <HAL_UART_MspInit+0x22c>)
 80045a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045a2:	4a80      	ldr	r2, [pc, #512]	@ (80047a4 <HAL_UART_MspInit+0x22c>)
 80045a4:	f043 0310 	orr.w	r3, r3, #16
 80045a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80045aa:	4b7e      	ldr	r3, [pc, #504]	@ (80047a4 <HAL_UART_MspInit+0x22c>)
 80045ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045ae:	f003 0310 	and.w	r3, r3, #16
 80045b2:	623b      	str	r3, [r7, #32]
 80045b4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045b6:	2300      	movs	r3, #0
 80045b8:	61fb      	str	r3, [r7, #28]
 80045ba:	4b7a      	ldr	r3, [pc, #488]	@ (80047a4 <HAL_UART_MspInit+0x22c>)
 80045bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045be:	4a79      	ldr	r2, [pc, #484]	@ (80047a4 <HAL_UART_MspInit+0x22c>)
 80045c0:	f043 0301 	orr.w	r3, r3, #1
 80045c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80045c6:	4b77      	ldr	r3, [pc, #476]	@ (80047a4 <HAL_UART_MspInit+0x22c>)
 80045c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ca:	f003 0301 	and.w	r3, r3, #1
 80045ce:	61fb      	str	r3, [r7, #28]
 80045d0:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80045d2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80045d6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045d8:	2302      	movs	r3, #2
 80045da:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045dc:	2300      	movs	r3, #0
 80045de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045e0:	2303      	movs	r3, #3
 80045e2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80045e4:	2307      	movs	r3, #7
 80045e6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80045ec:	4619      	mov	r1, r3
 80045ee:	486e      	ldr	r0, [pc, #440]	@ (80047a8 <HAL_UART_MspInit+0x230>)
 80045f0:	f002 fa6c 	bl	8006acc <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80045f4:	e0cf      	b.n	8004796 <HAL_UART_MspInit+0x21e>
  else if(uartHandle->Instance==USART3)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a6c      	ldr	r2, [pc, #432]	@ (80047ac <HAL_UART_MspInit+0x234>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d163      	bne.n	80046c8 <HAL_UART_MspInit+0x150>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004600:	2300      	movs	r3, #0
 8004602:	61bb      	str	r3, [r7, #24]
 8004604:	4b67      	ldr	r3, [pc, #412]	@ (80047a4 <HAL_UART_MspInit+0x22c>)
 8004606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004608:	4a66      	ldr	r2, [pc, #408]	@ (80047a4 <HAL_UART_MspInit+0x22c>)
 800460a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800460e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004610:	4b64      	ldr	r3, [pc, #400]	@ (80047a4 <HAL_UART_MspInit+0x22c>)
 8004612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004614:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004618:	61bb      	str	r3, [r7, #24]
 800461a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800461c:	2300      	movs	r3, #0
 800461e:	617b      	str	r3, [r7, #20]
 8004620:	4b60      	ldr	r3, [pc, #384]	@ (80047a4 <HAL_UART_MspInit+0x22c>)
 8004622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004624:	4a5f      	ldr	r2, [pc, #380]	@ (80047a4 <HAL_UART_MspInit+0x22c>)
 8004626:	f043 0302 	orr.w	r3, r3, #2
 800462a:	6313      	str	r3, [r2, #48]	@ 0x30
 800462c:	4b5d      	ldr	r3, [pc, #372]	@ (80047a4 <HAL_UART_MspInit+0x22c>)
 800462e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004630:	f003 0302 	and.w	r3, r3, #2
 8004634:	617b      	str	r3, [r7, #20]
 8004636:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004638:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800463c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800463e:	2302      	movs	r3, #2
 8004640:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004642:	2300      	movs	r3, #0
 8004644:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004646:	2303      	movs	r3, #3
 8004648:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800464a:	2307      	movs	r3, #7
 800464c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800464e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004652:	4619      	mov	r1, r3
 8004654:	4856      	ldr	r0, [pc, #344]	@ (80047b0 <HAL_UART_MspInit+0x238>)
 8004656:	f002 fa39 	bl	8006acc <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800465a:	4b56      	ldr	r3, [pc, #344]	@ (80047b4 <HAL_UART_MspInit+0x23c>)
 800465c:	4a56      	ldr	r2, [pc, #344]	@ (80047b8 <HAL_UART_MspInit+0x240>)
 800465e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8004660:	4b54      	ldr	r3, [pc, #336]	@ (80047b4 <HAL_UART_MspInit+0x23c>)
 8004662:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004666:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004668:	4b52      	ldr	r3, [pc, #328]	@ (80047b4 <HAL_UART_MspInit+0x23c>)
 800466a:	2200      	movs	r2, #0
 800466c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800466e:	4b51      	ldr	r3, [pc, #324]	@ (80047b4 <HAL_UART_MspInit+0x23c>)
 8004670:	2200      	movs	r2, #0
 8004672:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004674:	4b4f      	ldr	r3, [pc, #316]	@ (80047b4 <HAL_UART_MspInit+0x23c>)
 8004676:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800467a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800467c:	4b4d      	ldr	r3, [pc, #308]	@ (80047b4 <HAL_UART_MspInit+0x23c>)
 800467e:	2200      	movs	r2, #0
 8004680:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004682:	4b4c      	ldr	r3, [pc, #304]	@ (80047b4 <HAL_UART_MspInit+0x23c>)
 8004684:	2200      	movs	r2, #0
 8004686:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8004688:	4b4a      	ldr	r3, [pc, #296]	@ (80047b4 <HAL_UART_MspInit+0x23c>)
 800468a:	2200      	movs	r2, #0
 800468c:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800468e:	4b49      	ldr	r3, [pc, #292]	@ (80047b4 <HAL_UART_MspInit+0x23c>)
 8004690:	2200      	movs	r2, #0
 8004692:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004694:	4b47      	ldr	r3, [pc, #284]	@ (80047b4 <HAL_UART_MspInit+0x23c>)
 8004696:	2200      	movs	r2, #0
 8004698:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800469a:	4846      	ldr	r0, [pc, #280]	@ (80047b4 <HAL_UART_MspInit+0x23c>)
 800469c:	f000 fbe0 	bl	8004e60 <HAL_DMA_Init>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d001      	beq.n	80046aa <HAL_UART_MspInit+0x132>
      Error_Handler();
 80046a6:	f7fd fcc9 	bl	800203c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4a41      	ldr	r2, [pc, #260]	@ (80047b4 <HAL_UART_MspInit+0x23c>)
 80046ae:	63da      	str	r2, [r3, #60]	@ 0x3c
 80046b0:	4a40      	ldr	r2, [pc, #256]	@ (80047b4 <HAL_UART_MspInit+0x23c>)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80046b6:	2200      	movs	r2, #0
 80046b8:	2105      	movs	r1, #5
 80046ba:	2027      	movs	r0, #39	@ 0x27
 80046bc:	f000 fba6 	bl	8004e0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80046c0:	2027      	movs	r0, #39	@ 0x27
 80046c2:	f000 fbbf 	bl	8004e44 <HAL_NVIC_EnableIRQ>
}
 80046c6:	e066      	b.n	8004796 <HAL_UART_MspInit+0x21e>
  else if(uartHandle->Instance==USART6)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a3b      	ldr	r2, [pc, #236]	@ (80047bc <HAL_UART_MspInit+0x244>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d161      	bne.n	8004796 <HAL_UART_MspInit+0x21e>
    __HAL_RCC_USART6_CLK_ENABLE();
 80046d2:	2300      	movs	r3, #0
 80046d4:	613b      	str	r3, [r7, #16]
 80046d6:	4b33      	ldr	r3, [pc, #204]	@ (80047a4 <HAL_UART_MspInit+0x22c>)
 80046d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046da:	4a32      	ldr	r2, [pc, #200]	@ (80047a4 <HAL_UART_MspInit+0x22c>)
 80046dc:	f043 0320 	orr.w	r3, r3, #32
 80046e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80046e2:	4b30      	ldr	r3, [pc, #192]	@ (80047a4 <HAL_UART_MspInit+0x22c>)
 80046e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046e6:	f003 0320 	and.w	r3, r3, #32
 80046ea:	613b      	str	r3, [r7, #16]
 80046ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80046ee:	2300      	movs	r3, #0
 80046f0:	60fb      	str	r3, [r7, #12]
 80046f2:	4b2c      	ldr	r3, [pc, #176]	@ (80047a4 <HAL_UART_MspInit+0x22c>)
 80046f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046f6:	4a2b      	ldr	r2, [pc, #172]	@ (80047a4 <HAL_UART_MspInit+0x22c>)
 80046f8:	f043 0304 	orr.w	r3, r3, #4
 80046fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80046fe:	4b29      	ldr	r3, [pc, #164]	@ (80047a4 <HAL_UART_MspInit+0x22c>)
 8004700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004702:	f003 0304 	and.w	r3, r3, #4
 8004706:	60fb      	str	r3, [r7, #12]
 8004708:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800470a:	23c0      	movs	r3, #192	@ 0xc0
 800470c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800470e:	2302      	movs	r3, #2
 8004710:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004712:	2300      	movs	r3, #0
 8004714:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004716:	2303      	movs	r3, #3
 8004718:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800471a:	2308      	movs	r3, #8
 800471c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800471e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004722:	4619      	mov	r1, r3
 8004724:	4826      	ldr	r0, [pc, #152]	@ (80047c0 <HAL_UART_MspInit+0x248>)
 8004726:	f002 f9d1 	bl	8006acc <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 800472a:	4b26      	ldr	r3, [pc, #152]	@ (80047c4 <HAL_UART_MspInit+0x24c>)
 800472c:	4a26      	ldr	r2, [pc, #152]	@ (80047c8 <HAL_UART_MspInit+0x250>)
 800472e:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8004730:	4b24      	ldr	r3, [pc, #144]	@ (80047c4 <HAL_UART_MspInit+0x24c>)
 8004732:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8004736:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004738:	4b22      	ldr	r3, [pc, #136]	@ (80047c4 <HAL_UART_MspInit+0x24c>)
 800473a:	2200      	movs	r2, #0
 800473c:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800473e:	4b21      	ldr	r3, [pc, #132]	@ (80047c4 <HAL_UART_MspInit+0x24c>)
 8004740:	2200      	movs	r2, #0
 8004742:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004744:	4b1f      	ldr	r3, [pc, #124]	@ (80047c4 <HAL_UART_MspInit+0x24c>)
 8004746:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800474a:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800474c:	4b1d      	ldr	r3, [pc, #116]	@ (80047c4 <HAL_UART_MspInit+0x24c>)
 800474e:	2200      	movs	r2, #0
 8004750:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004752:	4b1c      	ldr	r3, [pc, #112]	@ (80047c4 <HAL_UART_MspInit+0x24c>)
 8004754:	2200      	movs	r2, #0
 8004756:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8004758:	4b1a      	ldr	r3, [pc, #104]	@ (80047c4 <HAL_UART_MspInit+0x24c>)
 800475a:	2200      	movs	r2, #0
 800475c:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 800475e:	4b19      	ldr	r3, [pc, #100]	@ (80047c4 <HAL_UART_MspInit+0x24c>)
 8004760:	2200      	movs	r2, #0
 8004762:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004764:	4b17      	ldr	r3, [pc, #92]	@ (80047c4 <HAL_UART_MspInit+0x24c>)
 8004766:	2200      	movs	r2, #0
 8004768:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 800476a:	4816      	ldr	r0, [pc, #88]	@ (80047c4 <HAL_UART_MspInit+0x24c>)
 800476c:	f000 fb78 	bl	8004e60 <HAL_DMA_Init>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d001      	beq.n	800477a <HAL_UART_MspInit+0x202>
      Error_Handler();
 8004776:	f7fd fc61 	bl	800203c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a11      	ldr	r2, [pc, #68]	@ (80047c4 <HAL_UART_MspInit+0x24c>)
 800477e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004780:	4a10      	ldr	r2, [pc, #64]	@ (80047c4 <HAL_UART_MspInit+0x24c>)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8004786:	2200      	movs	r2, #0
 8004788:	2105      	movs	r1, #5
 800478a:	2047      	movs	r0, #71	@ 0x47
 800478c:	f000 fb3e 	bl	8004e0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8004790:	2047      	movs	r0, #71	@ 0x47
 8004792:	f000 fb57 	bl	8004e44 <HAL_NVIC_EnableIRQ>
}
 8004796:	bf00      	nop
 8004798:	3738      	adds	r7, #56	@ 0x38
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop
 80047a0:	40011000 	.word	0x40011000
 80047a4:	40023800 	.word	0x40023800
 80047a8:	40020000 	.word	0x40020000
 80047ac:	40004800 	.word	0x40004800
 80047b0:	40020400 	.word	0x40020400
 80047b4:	200008f8 	.word	0x200008f8
 80047b8:	40026028 	.word	0x40026028
 80047bc:	40011400 	.word	0x40011400
 80047c0:	40020800 	.word	0x40020800
 80047c4:	20000958 	.word	0x20000958
 80047c8:	40026428 	.word	0x40026428

080047cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80047cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004804 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80047d0:	f7ff fde4 	bl	800439c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80047d4:	480c      	ldr	r0, [pc, #48]	@ (8004808 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80047d6:	490d      	ldr	r1, [pc, #52]	@ (800480c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80047d8:	4a0d      	ldr	r2, [pc, #52]	@ (8004810 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80047da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80047dc:	e002      	b.n	80047e4 <LoopCopyDataInit>

080047de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80047de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80047e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80047e2:	3304      	adds	r3, #4

080047e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80047e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80047e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80047e8:	d3f9      	bcc.n	80047de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80047ea:	4a0a      	ldr	r2, [pc, #40]	@ (8004814 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80047ec:	4c0a      	ldr	r4, [pc, #40]	@ (8004818 <LoopFillZerobss+0x22>)
  movs r3, #0
 80047ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80047f0:	e001      	b.n	80047f6 <LoopFillZerobss>

080047f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80047f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80047f4:	3204      	adds	r2, #4

080047f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80047f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80047f8:	d3fb      	bcc.n	80047f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80047fa:	f019 fe4b 	bl	801e494 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80047fe:	f7fd fb85 	bl	8001f0c <main>
  bx  lr    
 8004802:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004804:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004808:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800480c:	20000170 	.word	0x20000170
  ldr r2, =_sidata
 8004810:	08023fac 	.word	0x08023fac
  ldr r2, =_sbss
 8004814:	20000170 	.word	0x20000170
  ldr r4, =_ebss
 8004818:	2000e95c 	.word	0x2000e95c

0800481c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800481c:	e7fe      	b.n	800481c <ADC_IRQHandler>

0800481e <eth_chip_regster_bus_io>:
  * @param       ioctx�������豸IO����
  * @retval      ETH_CHIP_STATUS_OK��OK
  *              ETH_CHIP_STATUS_ERROR��ȱ�ٹ���
  */
int32_t  eth_chip_regster_bus_io(eth_chip_object_t *pobj, eth_chip_ioc_tx_t *ioctx)
{
 800481e:	b480      	push	{r7}
 8004820:	b083      	sub	sp, #12
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
 8004826:	6039      	str	r1, [r7, #0]
    if (!pobj || !ioctx->readreg || !ioctx->writereg || !ioctx->gettick)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d00b      	beq.n	8004846 <eth_chip_regster_bus_io+0x28>
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d007      	beq.n	8004846 <eth_chip_regster_bus_io+0x28>
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d003      	beq.n	8004846 <eth_chip_regster_bus_io+0x28>
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d102      	bne.n	800484c <eth_chip_regster_bus_io+0x2e>
    {
        return ETH_CHIP_STATUS_ERROR;
 8004846:	f04f 33ff 	mov.w	r3, #4294967295
 800484a:	e014      	b.n	8004876 <eth_chip_regster_bus_io+0x58>
    }

    pobj->io.init = ioctx->init;
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	609a      	str	r2, [r3, #8]
    pobj->io.deinit = ioctx->deinit;
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	685a      	ldr	r2, [r3, #4]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	60da      	str	r2, [r3, #12]
    pobj->io.readreg = ioctx->readreg;
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	68da      	ldr	r2, [r3, #12]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	615a      	str	r2, [r3, #20]
    pobj->io.writereg = ioctx->writereg;
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	689a      	ldr	r2, [r3, #8]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	611a      	str	r2, [r3, #16]
    pobj->io.gettick = ioctx->gettick;
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	691a      	ldr	r2, [r3, #16]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	619a      	str	r2, [r3, #24]

    return ETH_CHIP_STATUS_OK;
 8004874:	2300      	movs	r3, #0
}
 8004876:	4618      	mov	r0, r3
 8004878:	370c      	adds	r7, #12
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
	...

08004884 <eth_chip_init>:
                 ETH_CHIP_STATUS_READ_ERROR�����ܶ�ȡ�Ĵ���
                 ETH_CHIP_STATUS_WRITE_ERROR������д��Ĵ���
                 ETH_CHIP_STATUS_RESET_TIMEOUT���޷�ִ��������λ
  */
int32_t eth_chip_init(eth_chip_object_t *pobj)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b086      	sub	sp, #24
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = 0, regvalue = 0, addr = 0;
 800488c:	2300      	movs	r3, #0
 800488e:	60fb      	str	r3, [r7, #12]
 8004890:	2300      	movs	r3, #0
 8004892:	60bb      	str	r3, [r7, #8]
 8004894:	2300      	movs	r3, #0
 8004896:	617b      	str	r3, [r7, #20]
    int32_t status = ETH_CHIP_STATUS_OK;
 8004898:	2300      	movs	r3, #0
 800489a:	613b      	str	r3, [r7, #16]
        LAN8720A    Register 2    0x0007
                    Register 3    0xC0F0

        RTL8201BL   Register 2    0x0000
                    Register 3    0x8201 */
    pobj->io.readreg(addr, PHY_REGISTER2, &regvalue);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	695b      	ldr	r3, [r3, #20]
 80048a0:	f107 0208 	add.w	r2, r7, #8
 80048a4:	2102      	movs	r1, #2
 80048a6:	6978      	ldr	r0, [r7, #20]
 80048a8:	4798      	blx	r3

    switch (regvalue)
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	2b1c      	cmp	r3, #28
 80048ae:	d02d      	beq.n	800490c <eth_chip_init+0x88>
 80048b0:	2b1c      	cmp	r3, #28
 80048b2:	d847      	bhi.n	8004944 <eth_chip_init+0xc0>
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d002      	beq.n	80048be <eth_chip_init+0x3a>
 80048b8:	2b07      	cmp	r3, #7
 80048ba:	d036      	beq.n	800492a <eth_chip_init+0xa6>
 80048bc:	e042      	b.n	8004944 <eth_chip_init+0xc0>
    {
        case YT8512C_AND_RTL8201BL_PHYREGISTER2:
            pobj->io.readreg(addr, PHY_REGISTER3, &regvalue);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	695b      	ldr	r3, [r3, #20]
 80048c2:	f107 0208 	add.w	r2, r7, #8
 80048c6:	2103      	movs	r1, #3
 80048c8:	6978      	ldr	r0, [r7, #20]
 80048ca:	4798      	blx	r3

            if (regvalue == 0x128)
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	f5b3 7f94 	cmp.w	r3, #296	@ 0x128
 80048d2:	d10e      	bne.n	80048f2 <eth_chip_init+0x6e>
            {
                ETH_CHIP_PHYSCSR  = ((uint16_t)0x11);
 80048d4:	4b6a      	ldr	r3, [pc, #424]	@ (8004a80 <eth_chip_init+0x1fc>)
 80048d6:	2211      	movs	r2, #17
 80048d8:	801a      	strh	r2, [r3, #0]
                ETH_CHIP_SPEED_STATUS = ((uint16_t)0x4010);
 80048da:	4b6a      	ldr	r3, [pc, #424]	@ (8004a84 <eth_chip_init+0x200>)
 80048dc:	f244 0210 	movw	r2, #16400	@ 0x4010
 80048e0:	801a      	strh	r2, [r3, #0]
                ETH_CHIP_DUPLEX_STATUS = ((uint16_t)0x2000);
 80048e2:	4b69      	ldr	r3, [pc, #420]	@ (8004a88 <eth_chip_init+0x204>)
 80048e4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80048e8:	801a      	strh	r2, [r3, #0]
                PHY_TYPE = YT8512C;
 80048ea:	4b68      	ldr	r3, [pc, #416]	@ (8004a8c <eth_chip_init+0x208>)
 80048ec:	2202      	movs	r2, #2
 80048ee:	601a      	str	r2, [r3, #0]
                ETH_CHIP_PHYSCSR  = ((uint16_t)0x10);
                ETH_CHIP_SPEED_STATUS = ((uint16_t)0x0022);
                ETH_CHIP_DUPLEX_STATUS = ((uint16_t)0x0004);
                PHY_TYPE = RTL8201;
            }
            break;
 80048f0:	e028      	b.n	8004944 <eth_chip_init+0xc0>
                ETH_CHIP_PHYSCSR  = ((uint16_t)0x10);
 80048f2:	4b63      	ldr	r3, [pc, #396]	@ (8004a80 <eth_chip_init+0x1fc>)
 80048f4:	2210      	movs	r2, #16
 80048f6:	801a      	strh	r2, [r3, #0]
                ETH_CHIP_SPEED_STATUS = ((uint16_t)0x0022);
 80048f8:	4b62      	ldr	r3, [pc, #392]	@ (8004a84 <eth_chip_init+0x200>)
 80048fa:	2222      	movs	r2, #34	@ 0x22
 80048fc:	801a      	strh	r2, [r3, #0]
                ETH_CHIP_DUPLEX_STATUS = ((uint16_t)0x0004);
 80048fe:	4b62      	ldr	r3, [pc, #392]	@ (8004a88 <eth_chip_init+0x204>)
 8004900:	2204      	movs	r2, #4
 8004902:	801a      	strh	r2, [r3, #0]
                PHY_TYPE = RTL8201;
 8004904:	4b61      	ldr	r3, [pc, #388]	@ (8004a8c <eth_chip_init+0x208>)
 8004906:	2203      	movs	r2, #3
 8004908:	601a      	str	r2, [r3, #0]
            break;
 800490a:	e01b      	b.n	8004944 <eth_chip_init+0xc0>
        case SR8201F_PHYREGISTER2:
            ETH_CHIP_PHYSCSR  = ((uint16_t)0x00);
 800490c:	4b5c      	ldr	r3, [pc, #368]	@ (8004a80 <eth_chip_init+0x1fc>)
 800490e:	2200      	movs	r2, #0
 8004910:	801a      	strh	r2, [r3, #0]
            ETH_CHIP_SPEED_STATUS = ((uint16_t)0x2020);
 8004912:	4b5c      	ldr	r3, [pc, #368]	@ (8004a84 <eth_chip_init+0x200>)
 8004914:	f242 0220 	movw	r2, #8224	@ 0x2020
 8004918:	801a      	strh	r2, [r3, #0]
            ETH_CHIP_DUPLEX_STATUS = ((uint16_t)0x0100);
 800491a:	4b5b      	ldr	r3, [pc, #364]	@ (8004a88 <eth_chip_init+0x204>)
 800491c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004920:	801a      	strh	r2, [r3, #0]
            PHY_TYPE = SR8201F;
 8004922:	4b5a      	ldr	r3, [pc, #360]	@ (8004a8c <eth_chip_init+0x208>)
 8004924:	2201      	movs	r2, #1
 8004926:	601a      	str	r2, [r3, #0]
            break;
 8004928:	e00c      	b.n	8004944 <eth_chip_init+0xc0>
        case LAN8720A_PHYREGISTER2:
            ETH_CHIP_PHYSCSR  = ((uint16_t)0x1F);
 800492a:	4b55      	ldr	r3, [pc, #340]	@ (8004a80 <eth_chip_init+0x1fc>)
 800492c:	221f      	movs	r2, #31
 800492e:	801a      	strh	r2, [r3, #0]
            ETH_CHIP_SPEED_STATUS = ((uint16_t)0x0004);
 8004930:	4b54      	ldr	r3, [pc, #336]	@ (8004a84 <eth_chip_init+0x200>)
 8004932:	2204      	movs	r2, #4
 8004934:	801a      	strh	r2, [r3, #0]
            ETH_CHIP_DUPLEX_STATUS = ((uint16_t)0x0010);
 8004936:	4b54      	ldr	r3, [pc, #336]	@ (8004a88 <eth_chip_init+0x204>)
 8004938:	2210      	movs	r2, #16
 800493a:	801a      	strh	r2, [r3, #0]
            PHY_TYPE = LAN8720;
 800493c:	4b53      	ldr	r3, [pc, #332]	@ (8004a8c <eth_chip_init+0x208>)
 800493e:	2200      	movs	r2, #0
 8004940:	601a      	str	r2, [r3, #0]
            break;
 8004942:	bf00      	nop
    }
#endif

    if (pobj->is_initialized == 0)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d17e      	bne.n	8004a4a <eth_chip_init+0x1c6>
    {
        if (pobj->io.init != 0)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d002      	beq.n	800495a <eth_chip_init+0xd6>
        {
            /* MDCʱ�� */
            pobj->io.init();
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	4798      	blx	r3
        }

        /* ����PHY��ַΪ32 */
        pobj->devaddr = ETH_CHIP_MAX_DEV_ADDR + 1;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2220      	movs	r2, #32
 800495e:	601a      	str	r2, [r3, #0]

        /* ��ҪΪ�˲���PHY��ַ */
        for (addr = 0; addr <= ETH_CHIP_MAX_DEV_ADDR; addr ++)
 8004960:	2300      	movs	r3, #0
 8004962:	617b      	str	r3, [r7, #20]
 8004964:	e01e      	b.n	80049a4 <eth_chip_init+0x120>
        {
            if (pobj->io.readreg(addr, ETH_CHIP_PHYSCSR, &regvalue) < 0)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	695b      	ldr	r3, [r3, #20]
 800496a:	4a45      	ldr	r2, [pc, #276]	@ (8004a80 <eth_chip_init+0x1fc>)
 800496c:	8812      	ldrh	r2, [r2, #0]
 800496e:	4611      	mov	r1, r2
 8004970:	f107 0208 	add.w	r2, r7, #8
 8004974:	6978      	ldr	r0, [r7, #20]
 8004976:	4798      	blx	r3
 8004978:	4603      	mov	r3, r0
 800497a:	2b00      	cmp	r3, #0
 800497c:	da03      	bge.n	8004986 <eth_chip_init+0x102>
            {
                status = ETH_CHIP_STATUS_READ_ERROR;
 800497e:	f06f 0304 	mvn.w	r3, #4
 8004982:	613b      	str	r3, [r7, #16]
                /* �޷���ȡ����豸��ַ������һ����ַ */
                continue;
 8004984:	e00b      	b.n	800499e <eth_chip_init+0x11a>
            }
            /* �Ѿ��ҵ�PHY��ַ�� */
            if ((regvalue & ETH_CHIP_PHY_COUNT) == addr)
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	f003 031f 	and.w	r3, r3, #31
 800498c:	697a      	ldr	r2, [r7, #20]
 800498e:	429a      	cmp	r2, r3
 8004990:	d105      	bne.n	800499e <eth_chip_init+0x11a>
            {
                pobj->devaddr = addr;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	697a      	ldr	r2, [r7, #20]
 8004996:	601a      	str	r2, [r3, #0]
                status = ETH_CHIP_STATUS_OK;
 8004998:	2300      	movs	r3, #0
 800499a:	613b      	str	r3, [r7, #16]
                break;
 800499c:	e005      	b.n	80049aa <eth_chip_init+0x126>
        for (addr = 0; addr <= ETH_CHIP_MAX_DEV_ADDR; addr ++)
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	3301      	adds	r3, #1
 80049a2:	617b      	str	r3, [r7, #20]
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	2b1f      	cmp	r3, #31
 80049a8:	d9dd      	bls.n	8004966 <eth_chip_init+0xe2>
            }
        }

        /* �ж����PHY��ַ�Ƿ����32��2^5��*/
        if (pobj->devaddr > ETH_CHIP_MAX_DEV_ADDR)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2b1f      	cmp	r3, #31
 80049b0:	d902      	bls.n	80049b8 <eth_chip_init+0x134>
        {
            status = ETH_CHIP_STATUS_ADDRESS_ERROR;
 80049b2:	f06f 0302 	mvn.w	r3, #2
 80049b6:	613b      	str	r3, [r7, #16]
        }

        /* ���PHY��ַ��Ч */
        if (status == ETH_CHIP_STATUS_OK)
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d145      	bne.n	8004a4a <eth_chip_init+0x1c6>
        {
            /* ����������λ  */
            if (pobj->io.writereg(pobj->devaddr, ETH_CHIP_BCR, ETH_CHIP_BCR_SOFT_RESET) >= 0)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	6810      	ldr	r0, [r2, #0]
 80049c6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80049ca:	2100      	movs	r1, #0
 80049cc:	4798      	blx	r3
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	db37      	blt.n	8004a44 <eth_chip_init+0x1c0>
            {
                /* ��ȡ��������״̬ */
                if (pobj->io.readreg(pobj->devaddr, ETH_CHIP_BCR, &regvalue) >= 0)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	695b      	ldr	r3, [r3, #20]
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	6810      	ldr	r0, [r2, #0]
 80049dc:	f107 0208 	add.w	r2, r7, #8
 80049e0:	2100      	movs	r1, #0
 80049e2:	4798      	blx	r3
 80049e4:	4603      	mov	r3, r0
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	db28      	blt.n	8004a3c <eth_chip_init+0x1b8>
                {
                    tickstart = pobj->io.gettick();
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	699b      	ldr	r3, [r3, #24]
 80049ee:	4798      	blx	r3
 80049f0:	4603      	mov	r3, r0
 80049f2:	60fb      	str	r3, [r7, #12]

                    /* �ȴ�������λ��ɻ�ʱ  */
                    while (regvalue & ETH_CHIP_BCR_SOFT_RESET)
 80049f4:	e01c      	b.n	8004a30 <eth_chip_init+0x1ac>
                    {
                        if ((pobj->io.gettick() - tickstart) <= ETH_CHIP_SW_RESET_TO)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	699b      	ldr	r3, [r3, #24]
 80049fa:	4798      	blx	r3
 80049fc:	4603      	mov	r3, r0
 80049fe:	461a      	mov	r2, r3
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	1ad3      	subs	r3, r2, r3
 8004a04:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8004a08:	d80e      	bhi.n	8004a28 <eth_chip_init+0x1a4>
                        {
                            if (pobj->io.readreg(pobj->devaddr, ETH_CHIP_BCR, &regvalue) < 0)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	695b      	ldr	r3, [r3, #20]
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	6810      	ldr	r0, [r2, #0]
 8004a12:	f107 0208 	add.w	r2, r7, #8
 8004a16:	2100      	movs	r1, #0
 8004a18:	4798      	blx	r3
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	da07      	bge.n	8004a30 <eth_chip_init+0x1ac>
                            {
                                status = ETH_CHIP_STATUS_READ_ERROR;
 8004a20:	f06f 0304 	mvn.w	r3, #4
 8004a24:	613b      	str	r3, [r7, #16]
                                break;
 8004a26:	e010      	b.n	8004a4a <eth_chip_init+0x1c6>
                            }
                        }
                        else
                        {
                            status = ETH_CHIP_STATUS_RESET_TIMEOUT;
 8004a28:	f06f 0301 	mvn.w	r3, #1
 8004a2c:	613b      	str	r3, [r7, #16]
                            break;
 8004a2e:	e00c      	b.n	8004a4a <eth_chip_init+0x1c6>
                    while (regvalue & ETH_CHIP_BCR_SOFT_RESET)
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d1dd      	bne.n	80049f6 <eth_chip_init+0x172>
 8004a3a:	e006      	b.n	8004a4a <eth_chip_init+0x1c6>
                        }
                    }
                }
                else
                {
                    status = ETH_CHIP_STATUS_READ_ERROR;
 8004a3c:	f06f 0304 	mvn.w	r3, #4
 8004a40:	613b      	str	r3, [r7, #16]
 8004a42:	e002      	b.n	8004a4a <eth_chip_init+0x1c6>
                }
            }
            else
            {
                status = ETH_CHIP_STATUS_WRITE_ERROR;
 8004a44:	f06f 0303 	mvn.w	r3, #3
 8004a48:	613b      	str	r3, [r7, #16]
            }
        }
    }

    /* ���������ʼ����ɣ����� */
    if (status == ETH_CHIP_STATUS_OK)
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d112      	bne.n	8004a76 <eth_chip_init+0x1f2>
    {
        tickstart =  pobj->io.gettick();
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	699b      	ldr	r3, [r3, #24]
 8004a54:	4798      	blx	r3
 8004a56:	4603      	mov	r3, r0
 8004a58:	60fb      	str	r3, [r7, #12]

        /* �ȴ�2s���г�ʼ�� */
        while ((pobj->io.gettick() - tickstart) <= ETH_CHIP_INIT_TO)
 8004a5a:	bf00      	nop
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	699b      	ldr	r3, [r3, #24]
 8004a60:	4798      	blx	r3
 8004a62:	4603      	mov	r3, r0
 8004a64:	461a      	mov	r2, r3
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8004a6e:	d9f5      	bls.n	8004a5c <eth_chip_init+0x1d8>
        {
        }
        pobj->is_initialized = 1;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	605a      	str	r2, [r3, #4]
    }

    return status;
 8004a76:	693b      	ldr	r3, [r7, #16]
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3718      	adds	r7, #24
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	200009bc 	.word	0x200009bc
 8004a84:	200009be 	.word	0x200009be
 8004a88:	200009c0 	.word	0x200009c0
 8004a8c:	200009b8 	.word	0x200009b8

08004a90 <eth_chip_disable_power_down_mode>:
  * @retval      ETH_CHIP_STATUS_OK���رճɹ�
                 ETH_CHIP_STATUS_READ_ERROR�����ܶ�ȡ�Ĵ���
                 ETH_CHIP_STATUS_WRITE_ERROR������д�Ĵ���
  */
int32_t eth_chip_disable_power_down_mode(eth_chip_object_t *pobj)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b084      	sub	sp, #16
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
    uint32_t readval = 0;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	60bb      	str	r3, [r7, #8]
    int32_t status = ETH_CHIP_STATUS_OK;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	60fb      	str	r3, [r7, #12]

    if (pobj->io.readreg(pobj->devaddr, ETH_CHIP_BCR, &readval) >= 0)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	695b      	ldr	r3, [r3, #20]
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	6810      	ldr	r0, [r2, #0]
 8004aa8:	f107 0208 	add.w	r2, r7, #8
 8004aac:	2100      	movs	r1, #0
 8004aae:	4798      	blx	r3
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	db11      	blt.n	8004ada <eth_chip_disable_power_down_mode+0x4a>
    {
        readval &= ~ETH_CHIP_BCR_POWER_DOWN;
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004abc:	60bb      	str	r3, [r7, #8]

        /* ����µ�ģʽ */
        if (pobj->io.writereg(pobj->devaddr, ETH_CHIP_BCR, readval) < 0)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	6810      	ldr	r0, [r2, #0]
 8004ac6:	68ba      	ldr	r2, [r7, #8]
 8004ac8:	2100      	movs	r1, #0
 8004aca:	4798      	blx	r3
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	da06      	bge.n	8004ae0 <eth_chip_disable_power_down_mode+0x50>
        {
            status =  ETH_CHIP_STATUS_WRITE_ERROR;
 8004ad2:	f06f 0303 	mvn.w	r3, #3
 8004ad6:	60fb      	str	r3, [r7, #12]
 8004ad8:	e002      	b.n	8004ae0 <eth_chip_disable_power_down_mode+0x50>
        }
    }
    else
    {
        status = ETH_CHIP_STATUS_READ_ERROR;
 8004ada:	f06f 0304 	mvn.w	r3, #4
 8004ade:	60fb      	str	r3, [r7, #12]
    }

    return status;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3710      	adds	r7, #16
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}

08004aea <eth_chip_start_auto_nego>:
  * @retval      ETH_CHIP_STATUS_OK���رճɹ�
                 ETH_CHIP_STATUS_READ_ERROR�����ܶ�ȡ�Ĵ���
                 ETH_CHIP_STATUS_WRITE_ERROR������д�Ĵ���
  */
int32_t eth_chip_start_auto_nego(eth_chip_object_t *pobj)
{
 8004aea:	b580      	push	{r7, lr}
 8004aec:	b084      	sub	sp, #16
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
    uint32_t readval = 0;
 8004af2:	2300      	movs	r3, #0
 8004af4:	60bb      	str	r3, [r7, #8]
    int32_t status = ETH_CHIP_STATUS_OK;
 8004af6:	2300      	movs	r3, #0
 8004af8:	60fb      	str	r3, [r7, #12]

    if (pobj->io.readreg(pobj->devaddr, ETH_CHIP_BCR, &readval) >= 0)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	695b      	ldr	r3, [r3, #20]
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	6810      	ldr	r0, [r2, #0]
 8004b02:	f107 0208 	add.w	r2, r7, #8
 8004b06:	2100      	movs	r1, #0
 8004b08:	4798      	blx	r3
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	db11      	blt.n	8004b34 <eth_chip_start_auto_nego+0x4a>
    {
        readval |= ETH_CHIP_BCR_AUTONEGO_EN;
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004b16:	60bb      	str	r3, [r7, #8]

        /* �����Զ�Э�� */
        if (pobj->io.writereg(pobj->devaddr, ETH_CHIP_BCR, readval) < 0)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	691b      	ldr	r3, [r3, #16]
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	6810      	ldr	r0, [r2, #0]
 8004b20:	68ba      	ldr	r2, [r7, #8]
 8004b22:	2100      	movs	r1, #0
 8004b24:	4798      	blx	r3
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	da06      	bge.n	8004b3a <eth_chip_start_auto_nego+0x50>
        {
            status =  ETH_CHIP_STATUS_WRITE_ERROR;
 8004b2c:	f06f 0303 	mvn.w	r3, #3
 8004b30:	60fb      	str	r3, [r7, #12]
 8004b32:	e002      	b.n	8004b3a <eth_chip_start_auto_nego+0x50>
        }
    }
    else
    {
        status = ETH_CHIP_STATUS_READ_ERROR;
 8004b34:	f06f 0304 	mvn.w	r3, #4
 8004b38:	60fb      	str	r3, [r7, #12]
    }

    return status;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3710      	adds	r7, #16
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <eth_chip_get_link_state>:
                 ETH_CHIP_STATUS_10MBITS_FULLDUPLEX��10M��ȫ˫��
                 ETH_CHIP_STATUS_10MBITS_HALFDUPLEX ��10M����˫��
                 ETH_CHIP_STATUS_READ_ERROR�����ܶ�ȡ�Ĵ���
  */
int32_t eth_chip_get_link_state(eth_chip_object_t *pobj)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
    uint32_t readval = 0;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	60fb      	str	r3, [r7, #12]

    /* ������⹦�ܼĴ�������ֵ */
    if (pobj->io.readreg(pobj->devaddr, ETH_CHIP_PHYSCSR, &readval) < 0)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	695b      	ldr	r3, [r3, #20]
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	6810      	ldr	r0, [r2, #0]
 8004b58:	4a1a      	ldr	r2, [pc, #104]	@ (8004bc4 <eth_chip_get_link_state+0x80>)
 8004b5a:	8812      	ldrh	r2, [r2, #0]
 8004b5c:	4611      	mov	r1, r2
 8004b5e:	f107 020c 	add.w	r2, r7, #12
 8004b62:	4798      	blx	r3
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	da02      	bge.n	8004b70 <eth_chip_get_link_state+0x2c>
    {
        return ETH_CHIP_STATUS_READ_ERROR;
 8004b6a:	f06f 0304 	mvn.w	r3, #4
 8004b6e:	e024      	b.n	8004bba <eth_chip_get_link_state+0x76>
    }

    if (((readval & ETH_CHIP_SPEED_STATUS) != ETH_CHIP_SPEED_STATUS) && ((readval & ETH_CHIP_DUPLEX_STATUS) != 0))
 8004b70:	4b15      	ldr	r3, [pc, #84]	@ (8004bc8 <eth_chip_get_link_state+0x84>)
 8004b72:	881b      	ldrh	r3, [r3, #0]
 8004b74:	461a      	mov	r2, r3
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	4013      	ands	r3, r2
 8004b7a:	4a13      	ldr	r2, [pc, #76]	@ (8004bc8 <eth_chip_get_link_state+0x84>)
 8004b7c:	8812      	ldrh	r2, [r2, #0]
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d008      	beq.n	8004b94 <eth_chip_get_link_state+0x50>
 8004b82:	4b12      	ldr	r3, [pc, #72]	@ (8004bcc <eth_chip_get_link_state+0x88>)
 8004b84:	881b      	ldrh	r3, [r3, #0]
 8004b86:	461a      	mov	r2, r3
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d001      	beq.n	8004b94 <eth_chip_get_link_state+0x50>
    {
        return ETH_CHIP_STATUS_100MBITS_FULLDUPLEX;
 8004b90:	2302      	movs	r3, #2
 8004b92:	e012      	b.n	8004bba <eth_chip_get_link_state+0x76>
    }
    else if (((readval & ETH_CHIP_SPEED_STATUS) != ETH_CHIP_SPEED_STATUS))
 8004b94:	4b0c      	ldr	r3, [pc, #48]	@ (8004bc8 <eth_chip_get_link_state+0x84>)
 8004b96:	881b      	ldrh	r3, [r3, #0]
 8004b98:	461a      	mov	r2, r3
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	4a0a      	ldr	r2, [pc, #40]	@ (8004bc8 <eth_chip_get_link_state+0x84>)
 8004ba0:	8812      	ldrh	r2, [r2, #0]
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d001      	beq.n	8004baa <eth_chip_get_link_state+0x66>
    {
        return ETH_CHIP_STATUS_100MBITS_HALFDUPLEX;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	e007      	b.n	8004bba <eth_chip_get_link_state+0x76>
    }
    else if (((readval & ETH_CHIP_BCR_DUPLEX_MODE) != ETH_CHIP_BCR_DUPLEX_MODE))
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d101      	bne.n	8004bb8 <eth_chip_get_link_state+0x74>
    {
        return ETH_CHIP_STATUS_10MBITS_FULLDUPLEX;
 8004bb4:	2304      	movs	r3, #4
 8004bb6:	e000      	b.n	8004bba <eth_chip_get_link_state+0x76>
    }
    else
    {
        return ETH_CHIP_STATUS_10MBITS_HALFDUPLEX;
 8004bb8:	2305      	movs	r3, #5
    }
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3710      	adds	r7, #16
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	200009bc 	.word	0x200009bc
 8004bc8:	200009be 	.word	0x200009be
 8004bcc:	200009c0 	.word	0x200009c0

08004bd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004bd4:	4b0e      	ldr	r3, [pc, #56]	@ (8004c10 <HAL_Init+0x40>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a0d      	ldr	r2, [pc, #52]	@ (8004c10 <HAL_Init+0x40>)
 8004bda:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004bde:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004be0:	4b0b      	ldr	r3, [pc, #44]	@ (8004c10 <HAL_Init+0x40>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a0a      	ldr	r2, [pc, #40]	@ (8004c10 <HAL_Init+0x40>)
 8004be6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004bea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004bec:	4b08      	ldr	r3, [pc, #32]	@ (8004c10 <HAL_Init+0x40>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a07      	ldr	r2, [pc, #28]	@ (8004c10 <HAL_Init+0x40>)
 8004bf2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bf6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004bf8:	2003      	movs	r0, #3
 8004bfa:	f000 f8fc 	bl	8004df6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004bfe:	200f      	movs	r0, #15
 8004c00:	f7fe ff08 	bl	8003a14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004c04:	f7fe feda 	bl	80039bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	bf00      	nop
 8004c10:	40023c00 	.word	0x40023c00

08004c14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004c14:	b480      	push	{r7}
 8004c16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004c18:	4b06      	ldr	r3, [pc, #24]	@ (8004c34 <HAL_IncTick+0x20>)
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	4b06      	ldr	r3, [pc, #24]	@ (8004c38 <HAL_IncTick+0x24>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4413      	add	r3, r2
 8004c24:	4a04      	ldr	r2, [pc, #16]	@ (8004c38 <HAL_IncTick+0x24>)
 8004c26:	6013      	str	r3, [r2, #0]
}
 8004c28:	bf00      	nop
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr
 8004c32:	bf00      	nop
 8004c34:	20000010 	.word	0x20000010
 8004c38:	200009c4 	.word	0x200009c4

08004c3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	af00      	add	r7, sp, #0
  return uwTick;
 8004c40:	4b03      	ldr	r3, [pc, #12]	@ (8004c50 <HAL_GetTick+0x14>)
 8004c42:	681b      	ldr	r3, [r3, #0]
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr
 8004c4e:	bf00      	nop
 8004c50:	200009c4 	.word	0x200009c4

08004c54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b084      	sub	sp, #16
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004c5c:	f7ff ffee 	bl	8004c3c <HAL_GetTick>
 8004c60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c6c:	d005      	beq.n	8004c7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004c6e:	4b0a      	ldr	r3, [pc, #40]	@ (8004c98 <HAL_Delay+0x44>)
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	461a      	mov	r2, r3
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	4413      	add	r3, r2
 8004c78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004c7a:	bf00      	nop
 8004c7c:	f7ff ffde 	bl	8004c3c <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	68fa      	ldr	r2, [r7, #12]
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d8f7      	bhi.n	8004c7c <HAL_Delay+0x28>
  {
  }
}
 8004c8c:	bf00      	nop
 8004c8e:	bf00      	nop
 8004c90:	3710      	adds	r7, #16
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	20000010 	.word	0x20000010

08004c9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b085      	sub	sp, #20
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f003 0307 	and.w	r3, r3, #7
 8004caa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004cac:	4b0c      	ldr	r3, [pc, #48]	@ (8004ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004cb2:	68ba      	ldr	r2, [r7, #8]
 8004cb4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004cb8:	4013      	ands	r3, r2
 8004cba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004cc4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004cc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ccc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004cce:	4a04      	ldr	r2, [pc, #16]	@ (8004ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	60d3      	str	r3, [r2, #12]
}
 8004cd4:	bf00      	nop
 8004cd6:	3714      	adds	r7, #20
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr
 8004ce0:	e000ed00 	.word	0xe000ed00

08004ce4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ce8:	4b04      	ldr	r3, [pc, #16]	@ (8004cfc <__NVIC_GetPriorityGrouping+0x18>)
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	0a1b      	lsrs	r3, r3, #8
 8004cee:	f003 0307 	and.w	r3, r3, #7
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr
 8004cfc:	e000ed00 	.word	0xe000ed00

08004d00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b083      	sub	sp, #12
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	4603      	mov	r3, r0
 8004d08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	db0b      	blt.n	8004d2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d12:	79fb      	ldrb	r3, [r7, #7]
 8004d14:	f003 021f 	and.w	r2, r3, #31
 8004d18:	4907      	ldr	r1, [pc, #28]	@ (8004d38 <__NVIC_EnableIRQ+0x38>)
 8004d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d1e:	095b      	lsrs	r3, r3, #5
 8004d20:	2001      	movs	r0, #1
 8004d22:	fa00 f202 	lsl.w	r2, r0, r2
 8004d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004d2a:	bf00      	nop
 8004d2c:	370c      	adds	r7, #12
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr
 8004d36:	bf00      	nop
 8004d38:	e000e100 	.word	0xe000e100

08004d3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	4603      	mov	r3, r0
 8004d44:	6039      	str	r1, [r7, #0]
 8004d46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	db0a      	blt.n	8004d66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	b2da      	uxtb	r2, r3
 8004d54:	490c      	ldr	r1, [pc, #48]	@ (8004d88 <__NVIC_SetPriority+0x4c>)
 8004d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d5a:	0112      	lsls	r2, r2, #4
 8004d5c:	b2d2      	uxtb	r2, r2
 8004d5e:	440b      	add	r3, r1
 8004d60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004d64:	e00a      	b.n	8004d7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	b2da      	uxtb	r2, r3
 8004d6a:	4908      	ldr	r1, [pc, #32]	@ (8004d8c <__NVIC_SetPriority+0x50>)
 8004d6c:	79fb      	ldrb	r3, [r7, #7]
 8004d6e:	f003 030f 	and.w	r3, r3, #15
 8004d72:	3b04      	subs	r3, #4
 8004d74:	0112      	lsls	r2, r2, #4
 8004d76:	b2d2      	uxtb	r2, r2
 8004d78:	440b      	add	r3, r1
 8004d7a:	761a      	strb	r2, [r3, #24]
}
 8004d7c:	bf00      	nop
 8004d7e:	370c      	adds	r7, #12
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr
 8004d88:	e000e100 	.word	0xe000e100
 8004d8c:	e000ed00 	.word	0xe000ed00

08004d90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b089      	sub	sp, #36	@ 0x24
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	60b9      	str	r1, [r7, #8]
 8004d9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f003 0307 	and.w	r3, r3, #7
 8004da2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	f1c3 0307 	rsb	r3, r3, #7
 8004daa:	2b04      	cmp	r3, #4
 8004dac:	bf28      	it	cs
 8004dae:	2304      	movcs	r3, #4
 8004db0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004db2:	69fb      	ldr	r3, [r7, #28]
 8004db4:	3304      	adds	r3, #4
 8004db6:	2b06      	cmp	r3, #6
 8004db8:	d902      	bls.n	8004dc0 <NVIC_EncodePriority+0x30>
 8004dba:	69fb      	ldr	r3, [r7, #28]
 8004dbc:	3b03      	subs	r3, #3
 8004dbe:	e000      	b.n	8004dc2 <NVIC_EncodePriority+0x32>
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8004dc8:	69bb      	ldr	r3, [r7, #24]
 8004dca:	fa02 f303 	lsl.w	r3, r2, r3
 8004dce:	43da      	mvns	r2, r3
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	401a      	ands	r2, r3
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004dd8:	f04f 31ff 	mov.w	r1, #4294967295
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	fa01 f303 	lsl.w	r3, r1, r3
 8004de2:	43d9      	mvns	r1, r3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004de8:	4313      	orrs	r3, r2
         );
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3724      	adds	r7, #36	@ 0x24
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr

08004df6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004df6:	b580      	push	{r7, lr}
 8004df8:	b082      	sub	sp, #8
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f7ff ff4c 	bl	8004c9c <__NVIC_SetPriorityGrouping>
}
 8004e04:	bf00      	nop
 8004e06:	3708      	adds	r7, #8
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b086      	sub	sp, #24
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	4603      	mov	r3, r0
 8004e14:	60b9      	str	r1, [r7, #8]
 8004e16:	607a      	str	r2, [r7, #4]
 8004e18:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004e1e:	f7ff ff61 	bl	8004ce4 <__NVIC_GetPriorityGrouping>
 8004e22:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	68b9      	ldr	r1, [r7, #8]
 8004e28:	6978      	ldr	r0, [r7, #20]
 8004e2a:	f7ff ffb1 	bl	8004d90 <NVIC_EncodePriority>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e34:	4611      	mov	r1, r2
 8004e36:	4618      	mov	r0, r3
 8004e38:	f7ff ff80 	bl	8004d3c <__NVIC_SetPriority>
}
 8004e3c:	bf00      	nop
 8004e3e:	3718      	adds	r7, #24
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b082      	sub	sp, #8
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e52:	4618      	mov	r0, r3
 8004e54:	f7ff ff54 	bl	8004d00 <__NVIC_EnableIRQ>
}
 8004e58:	bf00      	nop
 8004e5a:	3708      	adds	r7, #8
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b086      	sub	sp, #24
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004e6c:	f7ff fee6 	bl	8004c3c <HAL_GetTick>
 8004e70:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d101      	bne.n	8004e7c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e099      	b.n	8004fb0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2202      	movs	r2, #2
 8004e80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f022 0201 	bic.w	r2, r2, #1
 8004e9a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e9c:	e00f      	b.n	8004ebe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004e9e:	f7ff fecd 	bl	8004c3c <HAL_GetTick>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	1ad3      	subs	r3, r2, r3
 8004ea8:	2b05      	cmp	r3, #5
 8004eaa:	d908      	bls.n	8004ebe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2220      	movs	r2, #32
 8004eb0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2203      	movs	r2, #3
 8004eb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e078      	b.n	8004fb0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0301 	and.w	r3, r3, #1
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d1e8      	bne.n	8004e9e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004ed4:	697a      	ldr	r2, [r7, #20]
 8004ed6:	4b38      	ldr	r3, [pc, #224]	@ (8004fb8 <HAL_DMA_Init+0x158>)
 8004ed8:	4013      	ands	r3, r2
 8004eda:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685a      	ldr	r2, [r3, #4]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004eea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	691b      	ldr	r3, [r3, #16]
 8004ef0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ef6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	699b      	ldr	r3, [r3, #24]
 8004efc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f02:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6a1b      	ldr	r3, [r3, #32]
 8004f08:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004f0a:	697a      	ldr	r2, [r7, #20]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f14:	2b04      	cmp	r3, #4
 8004f16:	d107      	bne.n	8004f28 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f20:	4313      	orrs	r3, r2
 8004f22:	697a      	ldr	r2, [r7, #20]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	697a      	ldr	r2, [r7, #20]
 8004f2e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	695b      	ldr	r3, [r3, #20]
 8004f36:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	f023 0307 	bic.w	r3, r3, #7
 8004f3e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f44:	697a      	ldr	r2, [r7, #20]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f4e:	2b04      	cmp	r3, #4
 8004f50:	d117      	bne.n	8004f82 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f56:	697a      	ldr	r2, [r7, #20]
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d00e      	beq.n	8004f82 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f000 fb01 	bl	800556c <DMA_CheckFifoParam>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d008      	beq.n	8004f82 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2240      	movs	r2, #64	@ 0x40
 8004f74:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2201      	movs	r2, #1
 8004f7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e016      	b.n	8004fb0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	697a      	ldr	r2, [r7, #20]
 8004f88:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f000 fab8 	bl	8005500 <DMA_CalcBaseAndBitshift>
 8004f90:	4603      	mov	r3, r0
 8004f92:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f98:	223f      	movs	r2, #63	@ 0x3f
 8004f9a:	409a      	lsls	r2, r3
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2201      	movs	r2, #1
 8004faa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004fae:	2300      	movs	r3, #0
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3718      	adds	r7, #24
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	f010803f 	.word	0xf010803f

08004fbc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b086      	sub	sp, #24
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	60f8      	str	r0, [r7, #12]
 8004fc4:	60b9      	str	r1, [r7, #8]
 8004fc6:	607a      	str	r2, [r7, #4]
 8004fc8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fd2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d101      	bne.n	8004fe2 <HAL_DMA_Start_IT+0x26>
 8004fde:	2302      	movs	r3, #2
 8004fe0:	e040      	b.n	8005064 <HAL_DMA_Start_IT+0xa8>
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d12f      	bne.n	8005056 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2202      	movs	r2, #2
 8004ffa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2200      	movs	r2, #0
 8005002:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	68b9      	ldr	r1, [r7, #8]
 800500a:	68f8      	ldr	r0, [r7, #12]
 800500c:	f000 fa4a 	bl	80054a4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005014:	223f      	movs	r2, #63	@ 0x3f
 8005016:	409a      	lsls	r2, r3
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f042 0216 	orr.w	r2, r2, #22
 800502a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005030:	2b00      	cmp	r3, #0
 8005032:	d007      	beq.n	8005044 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f042 0208 	orr.w	r2, r2, #8
 8005042:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f042 0201 	orr.w	r2, r2, #1
 8005052:	601a      	str	r2, [r3, #0]
 8005054:	e005      	b.n	8005062 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2200      	movs	r2, #0
 800505a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800505e:	2302      	movs	r3, #2
 8005060:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005062:	7dfb      	ldrb	r3, [r7, #23]
}
 8005064:	4618      	mov	r0, r3
 8005066:	3718      	adds	r7, #24
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}

0800506c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005078:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800507a:	f7ff fddf 	bl	8004c3c <HAL_GetTick>
 800507e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005086:	b2db      	uxtb	r3, r3
 8005088:	2b02      	cmp	r3, #2
 800508a:	d008      	beq.n	800509e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2280      	movs	r2, #128	@ 0x80
 8005090:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e052      	b.n	8005144 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f022 0216 	bic.w	r2, r2, #22
 80050ac:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	695a      	ldr	r2, [r3, #20]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80050bc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d103      	bne.n	80050ce <HAL_DMA_Abort+0x62>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d007      	beq.n	80050de <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f022 0208 	bic.w	r2, r2, #8
 80050dc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f022 0201 	bic.w	r2, r2, #1
 80050ec:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80050ee:	e013      	b.n	8005118 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80050f0:	f7ff fda4 	bl	8004c3c <HAL_GetTick>
 80050f4:	4602      	mov	r2, r0
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	2b05      	cmp	r3, #5
 80050fc:	d90c      	bls.n	8005118 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2220      	movs	r2, #32
 8005102:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2203      	movs	r2, #3
 8005108:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8005114:	2303      	movs	r3, #3
 8005116:	e015      	b.n	8005144 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 0301 	and.w	r3, r3, #1
 8005122:	2b00      	cmp	r3, #0
 8005124:	d1e4      	bne.n	80050f0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800512a:	223f      	movs	r2, #63	@ 0x3f
 800512c:	409a      	lsls	r2, r3
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2201      	movs	r2, #1
 8005136:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8005142:	2300      	movs	r3, #0
}
 8005144:	4618      	mov	r0, r3
 8005146:	3710      	adds	r7, #16
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}

0800514c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800515a:	b2db      	uxtb	r3, r3
 800515c:	2b02      	cmp	r3, #2
 800515e:	d004      	beq.n	800516a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2280      	movs	r2, #128	@ 0x80
 8005164:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e00c      	b.n	8005184 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2205      	movs	r2, #5
 800516e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f022 0201 	bic.w	r2, r2, #1
 8005180:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005182:	2300      	movs	r3, #0
}
 8005184:	4618      	mov	r0, r3
 8005186:	370c      	adds	r7, #12
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b086      	sub	sp, #24
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005198:	2300      	movs	r3, #0
 800519a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800519c:	4b8e      	ldr	r3, [pc, #568]	@ (80053d8 <HAL_DMA_IRQHandler+0x248>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a8e      	ldr	r2, [pc, #568]	@ (80053dc <HAL_DMA_IRQHandler+0x24c>)
 80051a2:	fba2 2303 	umull	r2, r3, r2, r3
 80051a6:	0a9b      	lsrs	r3, r3, #10
 80051a8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051ae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051ba:	2208      	movs	r2, #8
 80051bc:	409a      	lsls	r2, r3
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	4013      	ands	r3, r2
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d01a      	beq.n	80051fc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 0304 	and.w	r3, r3, #4
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d013      	beq.n	80051fc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f022 0204 	bic.w	r2, r2, #4
 80051e2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051e8:	2208      	movs	r2, #8
 80051ea:	409a      	lsls	r2, r3
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051f4:	f043 0201 	orr.w	r2, r3, #1
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005200:	2201      	movs	r2, #1
 8005202:	409a      	lsls	r2, r3
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	4013      	ands	r3, r2
 8005208:	2b00      	cmp	r3, #0
 800520a:	d012      	beq.n	8005232 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	695b      	ldr	r3, [r3, #20]
 8005212:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00b      	beq.n	8005232 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800521e:	2201      	movs	r2, #1
 8005220:	409a      	lsls	r2, r3
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800522a:	f043 0202 	orr.w	r2, r3, #2
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005236:	2204      	movs	r2, #4
 8005238:	409a      	lsls	r2, r3
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	4013      	ands	r3, r2
 800523e:	2b00      	cmp	r3, #0
 8005240:	d012      	beq.n	8005268 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 0302 	and.w	r3, r3, #2
 800524c:	2b00      	cmp	r3, #0
 800524e:	d00b      	beq.n	8005268 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005254:	2204      	movs	r2, #4
 8005256:	409a      	lsls	r2, r3
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005260:	f043 0204 	orr.w	r2, r3, #4
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800526c:	2210      	movs	r2, #16
 800526e:	409a      	lsls	r2, r3
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	4013      	ands	r3, r2
 8005274:	2b00      	cmp	r3, #0
 8005276:	d043      	beq.n	8005300 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 0308 	and.w	r3, r3, #8
 8005282:	2b00      	cmp	r3, #0
 8005284:	d03c      	beq.n	8005300 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800528a:	2210      	movs	r2, #16
 800528c:	409a      	lsls	r2, r3
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800529c:	2b00      	cmp	r3, #0
 800529e:	d018      	beq.n	80052d2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d108      	bne.n	80052c0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d024      	beq.n	8005300 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	4798      	blx	r3
 80052be:	e01f      	b.n	8005300 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d01b      	beq.n	8005300 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	4798      	blx	r3
 80052d0:	e016      	b.n	8005300 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d107      	bne.n	80052f0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f022 0208 	bic.w	r2, r2, #8
 80052ee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d003      	beq.n	8005300 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005304:	2220      	movs	r2, #32
 8005306:	409a      	lsls	r2, r3
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	4013      	ands	r3, r2
 800530c:	2b00      	cmp	r3, #0
 800530e:	f000 808f 	beq.w	8005430 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 0310 	and.w	r3, r3, #16
 800531c:	2b00      	cmp	r3, #0
 800531e:	f000 8087 	beq.w	8005430 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005326:	2220      	movs	r2, #32
 8005328:	409a      	lsls	r2, r3
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005334:	b2db      	uxtb	r3, r3
 8005336:	2b05      	cmp	r3, #5
 8005338:	d136      	bne.n	80053a8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f022 0216 	bic.w	r2, r2, #22
 8005348:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	695a      	ldr	r2, [r3, #20]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005358:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800535e:	2b00      	cmp	r3, #0
 8005360:	d103      	bne.n	800536a <HAL_DMA_IRQHandler+0x1da>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005366:	2b00      	cmp	r3, #0
 8005368:	d007      	beq.n	800537a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f022 0208 	bic.w	r2, r2, #8
 8005378:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800537e:	223f      	movs	r2, #63	@ 0x3f
 8005380:	409a      	lsls	r2, r3
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2201      	movs	r2, #1
 800538a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800539a:	2b00      	cmp	r3, #0
 800539c:	d07e      	beq.n	800549c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	4798      	blx	r3
        }
        return;
 80053a6:	e079      	b.n	800549c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d01d      	beq.n	80053f2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d10d      	bne.n	80053e0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d031      	beq.n	8005430 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	4798      	blx	r3
 80053d4:	e02c      	b.n	8005430 <HAL_DMA_IRQHandler+0x2a0>
 80053d6:	bf00      	nop
 80053d8:	20000008 	.word	0x20000008
 80053dc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d023      	beq.n	8005430 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	4798      	blx	r3
 80053f0:	e01e      	b.n	8005430 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d10f      	bne.n	8005420 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f022 0210 	bic.w	r2, r2, #16
 800540e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2201      	movs	r2, #1
 8005414:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005424:	2b00      	cmp	r3, #0
 8005426:	d003      	beq.n	8005430 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005434:	2b00      	cmp	r3, #0
 8005436:	d032      	beq.n	800549e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800543c:	f003 0301 	and.w	r3, r3, #1
 8005440:	2b00      	cmp	r3, #0
 8005442:	d022      	beq.n	800548a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2205      	movs	r2, #5
 8005448:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f022 0201 	bic.w	r2, r2, #1
 800545a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	3301      	adds	r3, #1
 8005460:	60bb      	str	r3, [r7, #8]
 8005462:	697a      	ldr	r2, [r7, #20]
 8005464:	429a      	cmp	r2, r3
 8005466:	d307      	bcc.n	8005478 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 0301 	and.w	r3, r3, #1
 8005472:	2b00      	cmp	r3, #0
 8005474:	d1f2      	bne.n	800545c <HAL_DMA_IRQHandler+0x2cc>
 8005476:	e000      	b.n	800547a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005478:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2201      	movs	r2, #1
 800547e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800548e:	2b00      	cmp	r3, #0
 8005490:	d005      	beq.n	800549e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	4798      	blx	r3
 800549a:	e000      	b.n	800549e <HAL_DMA_IRQHandler+0x30e>
        return;
 800549c:	bf00      	nop
    }
  }
}
 800549e:	3718      	adds	r7, #24
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b085      	sub	sp, #20
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	60b9      	str	r1, [r7, #8]
 80054ae:	607a      	str	r2, [r7, #4]
 80054b0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80054c0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	683a      	ldr	r2, [r7, #0]
 80054c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	2b40      	cmp	r3, #64	@ 0x40
 80054d0:	d108      	bne.n	80054e4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	68ba      	ldr	r2, [r7, #8]
 80054e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80054e2:	e007      	b.n	80054f4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	68ba      	ldr	r2, [r7, #8]
 80054ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	60da      	str	r2, [r3, #12]
}
 80054f4:	bf00      	nop
 80054f6:	3714      	adds	r7, #20
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr

08005500 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005500:	b480      	push	{r7}
 8005502:	b085      	sub	sp, #20
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	b2db      	uxtb	r3, r3
 800550e:	3b10      	subs	r3, #16
 8005510:	4a14      	ldr	r2, [pc, #80]	@ (8005564 <DMA_CalcBaseAndBitshift+0x64>)
 8005512:	fba2 2303 	umull	r2, r3, r2, r3
 8005516:	091b      	lsrs	r3, r3, #4
 8005518:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800551a:	4a13      	ldr	r2, [pc, #76]	@ (8005568 <DMA_CalcBaseAndBitshift+0x68>)
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	4413      	add	r3, r2
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	461a      	mov	r2, r3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2b03      	cmp	r3, #3
 800552c:	d909      	bls.n	8005542 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005536:	f023 0303 	bic.w	r3, r3, #3
 800553a:	1d1a      	adds	r2, r3, #4
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	659a      	str	r2, [r3, #88]	@ 0x58
 8005540:	e007      	b.n	8005552 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800554a:	f023 0303 	bic.w	r3, r3, #3
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005556:	4618      	mov	r0, r3
 8005558:	3714      	adds	r7, #20
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr
 8005562:	bf00      	nop
 8005564:	aaaaaaab 	.word	0xaaaaaaab
 8005568:	08023c7c 	.word	0x08023c7c

0800556c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800556c:	b480      	push	{r7}
 800556e:	b085      	sub	sp, #20
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005574:	2300      	movs	r3, #0
 8005576:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800557c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	699b      	ldr	r3, [r3, #24]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d11f      	bne.n	80055c6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	2b03      	cmp	r3, #3
 800558a:	d856      	bhi.n	800563a <DMA_CheckFifoParam+0xce>
 800558c:	a201      	add	r2, pc, #4	@ (adr r2, 8005594 <DMA_CheckFifoParam+0x28>)
 800558e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005592:	bf00      	nop
 8005594:	080055a5 	.word	0x080055a5
 8005598:	080055b7 	.word	0x080055b7
 800559c:	080055a5 	.word	0x080055a5
 80055a0:	0800563b 	.word	0x0800563b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d046      	beq.n	800563e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055b4:	e043      	b.n	800563e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055ba:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80055be:	d140      	bne.n	8005642 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055c4:	e03d      	b.n	8005642 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	699b      	ldr	r3, [r3, #24]
 80055ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055ce:	d121      	bne.n	8005614 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	2b03      	cmp	r3, #3
 80055d4:	d837      	bhi.n	8005646 <DMA_CheckFifoParam+0xda>
 80055d6:	a201      	add	r2, pc, #4	@ (adr r2, 80055dc <DMA_CheckFifoParam+0x70>)
 80055d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055dc:	080055ed 	.word	0x080055ed
 80055e0:	080055f3 	.word	0x080055f3
 80055e4:	080055ed 	.word	0x080055ed
 80055e8:	08005605 	.word	0x08005605
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	73fb      	strb	r3, [r7, #15]
      break;
 80055f0:	e030      	b.n	8005654 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055f6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d025      	beq.n	800564a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005602:	e022      	b.n	800564a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005608:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800560c:	d11f      	bne.n	800564e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005612:	e01c      	b.n	800564e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	2b02      	cmp	r3, #2
 8005618:	d903      	bls.n	8005622 <DMA_CheckFifoParam+0xb6>
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	2b03      	cmp	r3, #3
 800561e:	d003      	beq.n	8005628 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005620:	e018      	b.n	8005654 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	73fb      	strb	r3, [r7, #15]
      break;
 8005626:	e015      	b.n	8005654 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800562c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005630:	2b00      	cmp	r3, #0
 8005632:	d00e      	beq.n	8005652 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	73fb      	strb	r3, [r7, #15]
      break;
 8005638:	e00b      	b.n	8005652 <DMA_CheckFifoParam+0xe6>
      break;
 800563a:	bf00      	nop
 800563c:	e00a      	b.n	8005654 <DMA_CheckFifoParam+0xe8>
      break;
 800563e:	bf00      	nop
 8005640:	e008      	b.n	8005654 <DMA_CheckFifoParam+0xe8>
      break;
 8005642:	bf00      	nop
 8005644:	e006      	b.n	8005654 <DMA_CheckFifoParam+0xe8>
      break;
 8005646:	bf00      	nop
 8005648:	e004      	b.n	8005654 <DMA_CheckFifoParam+0xe8>
      break;
 800564a:	bf00      	nop
 800564c:	e002      	b.n	8005654 <DMA_CheckFifoParam+0xe8>
      break;   
 800564e:	bf00      	nop
 8005650:	e000      	b.n	8005654 <DMA_CheckFifoParam+0xe8>
      break;
 8005652:	bf00      	nop
    }
  } 
  
  return status; 
 8005654:	7bfb      	ldrb	r3, [r7, #15]
}
 8005656:	4618      	mov	r0, r3
 8005658:	3714      	adds	r7, #20
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr
 8005662:	bf00      	nop

08005664 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d101      	bne.n	8005676 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e08a      	b.n	800578c <HAL_ETH_Init+0x128>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800567c:	2b00      	cmp	r3, #0
 800567e:	d106      	bne.n	800568e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2220      	movs	r2, #32
 8005684:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f7fe f873 	bl	8003774 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800568e:	2300      	movs	r3, #0
 8005690:	60bb      	str	r3, [r7, #8]
 8005692:	4b40      	ldr	r3, [pc, #256]	@ (8005794 <HAL_ETH_Init+0x130>)
 8005694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005696:	4a3f      	ldr	r2, [pc, #252]	@ (8005794 <HAL_ETH_Init+0x130>)
 8005698:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800569c:	6453      	str	r3, [r2, #68]	@ 0x44
 800569e:	4b3d      	ldr	r3, [pc, #244]	@ (8005794 <HAL_ETH_Init+0x130>)
 80056a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80056a6:	60bb      	str	r3, [r7, #8]
 80056a8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80056aa:	4b3b      	ldr	r3, [pc, #236]	@ (8005798 <HAL_ETH_Init+0x134>)
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	4a3a      	ldr	r2, [pc, #232]	@ (8005798 <HAL_ETH_Init+0x134>)
 80056b0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80056b4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80056b6:	4b38      	ldr	r3, [pc, #224]	@ (8005798 <HAL_ETH_Init+0x134>)
 80056b8:	685a      	ldr	r2, [r3, #4]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	4936      	ldr	r1, [pc, #216]	@ (8005798 <HAL_ETH_Init+0x134>)
 80056c0:	4313      	orrs	r3, r2
 80056c2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80056c4:	4b34      	ldr	r3, [pc, #208]	@ (8005798 <HAL_ETH_Init+0x134>)
 80056c6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	6812      	ldr	r2, [r2, #0]
 80056d6:	f043 0301 	orr.w	r3, r3, #1
 80056da:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80056de:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80056e0:	f7ff faac 	bl	8004c3c <HAL_GetTick>
 80056e4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80056e6:	e011      	b.n	800570c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80056e8:	f7ff faa8 	bl	8004c3c <HAL_GetTick>
 80056ec:	4602      	mov	r2, r0
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80056f6:	d909      	bls.n	800570c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2204      	movs	r2, #4
 80056fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	22e0      	movs	r2, #224	@ 0xe0
 8005704:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	e03f      	b.n	800578c <HAL_ETH_Init+0x128>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f003 0301 	and.w	r3, r3, #1
 800571a:	2b00      	cmp	r3, #0
 800571c:	d1e4      	bne.n	80056e8 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 ff16 	bl	8006550 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f000 ffc1 	bl	80066ac <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f001 f817 	bl	800675e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	461a      	mov	r2, r3
 8005736:	2100      	movs	r1, #0
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f000 ff7f 	bl	800663c <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 800574c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	6812      	ldr	r2, [r2, #0]
 800575a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800575e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005762:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8005776:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2210      	movs	r2, #16
 8005786:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800578a:	2300      	movs	r3, #0
}
 800578c:	4618      	mov	r0, r3
 800578e:	3710      	adds	r7, #16
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}
 8005794:	40023800 	.word	0x40023800
 8005798:	40013800 	.word	0x40013800

0800579c <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b084      	sub	sp, #16
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80057aa:	2b10      	cmp	r3, #16
 80057ac:	d161      	bne.n	8005872 <HAL_ETH_Start_IT+0xd6>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2220      	movs	r2, #32
 80057b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2201      	movs	r2, #1
 80057ba:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2204      	movs	r2, #4
 80057c0:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f000 f9f4 	bl	8005bb0 <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80057d0:	2001      	movs	r0, #1
 80057d2:	f7ff fa3f 	bl	8004c54 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	68fa      	ldr	r2, [r7, #12]
 80057dc:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80057e6:	699b      	ldr	r3, [r3, #24]
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	6812      	ldr	r2, [r2, #0]
 80057ec:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80057f0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80057f4:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80057fe:	699b      	ldr	r3, [r3, #24]
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	6812      	ldr	r2, [r2, #0]
 8005804:	f043 0302 	orr.w	r3, r3, #2
 8005808:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800580c:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f000 fd3b 	bl	800628a <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f042 0208 	orr.w	r2, r2, #8
 8005822:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800582c:	2001      	movs	r0, #1
 800582e:	f7ff fa11 	bl	8004c54 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	68fa      	ldr	r2, [r7, #12]
 8005838:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f042 0204 	orr.w	r2, r2, #4
 8005848:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005852:	69db      	ldr	r3, [r3, #28]
 8005854:	687a      	ldr	r2, [r7, #4]
 8005856:	6812      	ldr	r2, [r2, #0]
 8005858:	f443 33d0 	orr.w	r3, r3, #106496	@ 0x1a000
 800585c:	f043 03c1 	orr.w	r3, r3, #193	@ 0xc1
 8005860:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005864:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2240      	movs	r2, #64	@ 0x40
 800586a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 800586e:	2300      	movs	r3, #0
 8005870:	e000      	b.n	8005874 <HAL_ETH_Start_IT+0xd8>
  }
  else
  {
    return HAL_ERROR;
 8005872:	2301      	movs	r3, #1
  }
}
 8005874:	4618      	mov	r0, r3
 8005876:	3710      	adds	r7, #16
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}

0800587c <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b086      	sub	sp, #24
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800588a:	2b40      	cmp	r3, #64	@ 0x40
 800588c:	d170      	bne.n	8005970 <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2220      	movs	r2, #32
 8005892:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800589e:	69db      	ldr	r3, [r3, #28]
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	6812      	ldr	r2, [r2, #0]
 80058a4:	f423 33d0 	bic.w	r3, r3, #106496	@ 0x1a000
 80058a8:	f023 03c1 	bic.w	r3, r3, #193	@ 0xc1
 80058ac:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80058b0:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80058ba:	699b      	ldr	r3, [r3, #24]
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	6812      	ldr	r2, [r2, #0]
 80058c0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80058c4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80058c8:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80058d2:	699b      	ldr	r3, [r3, #24]
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	6812      	ldr	r2, [r2, #0]
 80058d8:	f023 0302 	bic.w	r3, r3, #2
 80058dc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80058e0:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f022 0204 	bic.w	r2, r2, #4
 80058f0:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80058fa:	2001      	movs	r0, #1
 80058fc:	f7ff f9aa 	bl	8004c54 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	693a      	ldr	r2, [r7, #16]
 8005906:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f000 fcbe 	bl	800628a <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f022 0208 	bic.w	r2, r2, #8
 800591c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8005926:	2001      	movs	r0, #1
 8005928:	f7ff f994 	bl	8004c54 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	693a      	ldr	r2, [r7, #16]
 8005932:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8005934:	2300      	movs	r3, #0
 8005936:	617b      	str	r3, [r7, #20]
 8005938:	e00e      	b.n	8005958 <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	697a      	ldr	r2, [r7, #20]
 800593e:	3212      	adds	r2, #18
 8005940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005944:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	3301      	adds	r3, #1
 8005956:	617b      	str	r3, [r7, #20]
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	2b03      	cmp	r3, #3
 800595c:	d9ed      	bls.n	800593a <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2210      	movs	r2, #16
 8005968:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 800596c:	2300      	movs	r3, #0
 800596e:	e000      	b.n	8005972 <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 8005970:	2301      	movs	r3, #1
  }
}
 8005972:	4618      	mov	r0, r3
 8005974:	3718      	adds	r7, #24
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}

0800597a <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 800597a:	b580      	push	{r7, lr}
 800597c:	b082      	sub	sp, #8
 800597e:	af00      	add	r7, sp, #0
 8005980:	6078      	str	r0, [r7, #4]
 8005982:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d109      	bne.n	800599e <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005990:	f043 0201 	orr.w	r2, r3, #1
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	e045      	b.n	8005a2a <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80059a4:	2b40      	cmp	r3, #64	@ 0x40
 80059a6:	d13f      	bne.n	8005a28 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 80059b0:	2201      	movs	r2, #1
 80059b2:	6839      	ldr	r1, [r7, #0]
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f000 ff41 	bl	800683c <ETH_Prepare_Tx_Descriptors>
 80059ba:	4603      	mov	r3, r0
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d009      	beq.n	80059d4 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059c6:	f043 0202 	orr.w	r2, r3, #2
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	e02a      	b.n	8005a2a <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 80059d4:	f3bf 8f4f 	dsb	sy
}
 80059d8:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059de:	1c5a      	adds	r2, r3, #1
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	629a      	str	r2, [r3, #40]	@ 0x28
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059e8:	2b03      	cmp	r3, #3
 80059ea:	d904      	bls.n	80059f6 <HAL_ETH_Transmit_IT+0x7c>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059f0:	1f1a      	subs	r2, r3, #4
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80059fe:	695b      	ldr	r3, [r3, #20]
 8005a00:	f003 0304 	and.w	r3, r3, #4
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d00d      	beq.n	8005a24 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a10:	461a      	mov	r2, r3
 8005a12:	2304      	movs	r3, #4
 8005a14:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a1e:	461a      	mov	r2, r3
 8005a20:	2300      	movs	r3, #0
 8005a22:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8005a24:	2300      	movs	r3, #0
 8005a26:	e000      	b.n	8005a2a <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8005a28:	2301      	movs	r3, #1
  }
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3708      	adds	r7, #8
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}

08005a32 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8005a32:	b580      	push	{r7, lr}
 8005a34:	b088      	sub	sp, #32
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]
 8005a3a:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8005a40:	2300      	movs	r3, #0
 8005a42:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d109      	bne.n	8005a5e <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a50:	f043 0201 	orr.w	r2, r3, #1
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e0a4      	b.n	8005ba8 <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a64:	2b40      	cmp	r3, #64	@ 0x40
 8005a66:	d001      	beq.n	8005a6c <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e09d      	b.n	8005ba8 <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a70:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	69fa      	ldr	r2, [r7, #28]
 8005a76:	3212      	adds	r2, #18
 8005a78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a7c:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a82:	f1c3 0304 	rsb	r3, r3, #4
 8005a86:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8005a88:	e066      	b.n	8005b58 <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8005a8a:	69bb      	ldr	r3, [r7, #24]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d007      	beq.n	8005aa6 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	69da      	ldr	r2, [r3, #28]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8005a9e:	69bb      	ldr	r3, [r7, #24]
 8005aa0:	699a      	ldr	r2, [r3, #24]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d103      	bne.n	8005aba <HAL_ETH_ReadData+0x88>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d03c      	beq.n	8005b34 <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8005aba:	69bb      	ldr	r3, [r7, #24]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d005      	beq.n	8005ad2 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8005ad2:	69bb      	ldr	r3, [r7, #24]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	0c1b      	lsrs	r3, r3, #16
 8005ad8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8005adc:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d005      	beq.n	8005af6 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8005aea:	69bb      	ldr	r3, [r7, #24]
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8005af2:	2301      	movs	r3, #1
 8005af4:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8005af6:	69bb      	ldr	r3, [r7, #24]
 8005af8:	689a      	ldr	r2, [r3, #8]
 8005afa:	69bb      	ldr	r3, [r7, #24]
 8005afc:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8005b0a:	69bb      	ldr	r3, [r7, #24]
 8005b0c:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8005b0e:	461a      	mov	r2, r3
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	f007 fd7c 	bl	800d610 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b1c:	1c5a      	adds	r2, r3, #1
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	441a      	add	r2, r3
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8005b2e:	69bb      	ldr	r3, [r7, #24]
 8005b30:	2200      	movs	r2, #0
 8005b32:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8005b34:	69fb      	ldr	r3, [r7, #28]
 8005b36:	3301      	adds	r3, #1
 8005b38:	61fb      	str	r3, [r7, #28]
 8005b3a:	69fb      	ldr	r3, [r7, #28]
 8005b3c:	2b03      	cmp	r3, #3
 8005b3e:	d902      	bls.n	8005b46 <HAL_ETH_ReadData+0x114>
 8005b40:	69fb      	ldr	r3, [r7, #28]
 8005b42:	3b04      	subs	r3, #4
 8005b44:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	69fa      	ldr	r2, [r7, #28]
 8005b4a:	3212      	adds	r2, #18
 8005b4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b50:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	3301      	adds	r3, #1
 8005b56:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8005b58:	69bb      	ldr	r3, [r7, #24]
 8005b5a:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	db06      	blt.n	8005b6e <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8005b60:	697a      	ldr	r2, [r7, #20]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d202      	bcs.n	8005b6e <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 8005b68:	7cfb      	ldrb	r3, [r7, #19]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d08d      	beq.n	8005a8a <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	441a      	add	r2, r3
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d002      	beq.n	8005b88 <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 f814 	bl	8005bb0 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	69fa      	ldr	r2, [r7, #28]
 8005b8c:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8005b8e:	7cfb      	ldrb	r3, [r7, #19]
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d108      	bne.n	8005ba6 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	e000      	b.n	8005ba8 <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3720      	adds	r7, #32
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}

08005bb0 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b088      	sub	sp, #32
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005bc4:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	69fa      	ldr	r2, [r7, #28]
 8005bca:	3212      	adds	r2, #18
 8005bcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bd0:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005bd6:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8005bd8:	e044      	b.n	8005c64 <ETH_UpdateDescriptor+0xb4>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	6a1b      	ldr	r3, [r3, #32]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d112      	bne.n	8005c08 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8005be2:	f107 0308 	add.w	r3, r7, #8
 8005be6:	4618      	mov	r0, r3
 8005be8:	f007 fce2 	bl	800d5b0 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d102      	bne.n	8005bf8 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	74fb      	strb	r3, [r7, #19]
 8005bf6:	e007      	b.n	8005c08 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	461a      	mov	r2, r3
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8005c08:	7cfb      	ldrb	r3, [r7, #19]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d02a      	beq.n	8005c64 <ETH_UpdateDescriptor+0xb4>
    {
      if (heth->RxDescList.ItMode == 0U)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d108      	bne.n	8005c28 <ETH_UpdateDescriptor+0x78>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	695b      	ldr	r3, [r3, #20]
 8005c1a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005c1e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005c22:	697a      	ldr	r2, [r7, #20]
 8005c24:	6053      	str	r3, [r2, #4]
 8005c26:	e005      	b.n	8005c34 <ETH_UpdateDescriptor+0x84>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	695b      	ldr	r3, [r3, #20]
 8005c2c:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	3301      	adds	r3, #1
 8005c44:	61fb      	str	r3, [r7, #28]
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	2b03      	cmp	r3, #3
 8005c4a:	d902      	bls.n	8005c52 <ETH_UpdateDescriptor+0xa2>
 8005c4c:	69fb      	ldr	r3, [r7, #28]
 8005c4e:	3b04      	subs	r3, #4
 8005c50:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	69fa      	ldr	r2, [r7, #28]
 8005c56:	3212      	adds	r2, #18
 8005c58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c5c:	617b      	str	r3, [r7, #20]
      desccount--;
 8005c5e:	69bb      	ldr	r3, [r7, #24]
 8005c60:	3b01      	subs	r3, #1
 8005c62:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8005c64:	69bb      	ldr	r3, [r7, #24]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d002      	beq.n	8005c70 <ETH_UpdateDescriptor+0xc0>
 8005c6a:	7cfb      	ldrb	r3, [r7, #19]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d1b4      	bne.n	8005bda <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c74:	69ba      	ldr	r2, [r7, #24]
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d01a      	beq.n	8005cb0 <ETH_UpdateDescriptor+0x100>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 8005c7a:	69fb      	ldr	r3, [r7, #28]
 8005c7c:	3303      	adds	r3, #3
 8005c7e:	f003 0303 	and.w	r3, r3, #3
 8005c82:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8005c84:	f3bf 8f5f 	dmb	sy
}
 8005c88:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6919      	ldr	r1, [r3, #16]
 8005c8e:	68fa      	ldr	r2, [r7, #12]
 8005c90:	4613      	mov	r3, r2
 8005c92:	009b      	lsls	r3, r3, #2
 8005c94:	4413      	add	r3, r2
 8005c96:	00db      	lsls	r3, r3, #3
 8005c98:	18ca      	adds	r2, r1, r3
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ca2:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	69fa      	ldr	r2, [r7, #28]
 8005ca8:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	69ba      	ldr	r2, [r7, #24]
 8005cae:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8005cb0:	bf00      	nop
 8005cb2:	3720      	adds	r7, #32
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}

08005cb8 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b086      	sub	sp, #24
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	3318      	adds	r3, #24
 8005cc4:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cca:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cd0:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8005cd6:	e047      	b.n	8005d68 <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	3b01      	subs	r3, #1
 8005ce0:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8005ce2:	68ba      	ldr	r2, [r7, #8]
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	3304      	adds	r3, #4
 8005ce8:	009b      	lsls	r3, r3, #2
 8005cea:	4413      	add	r3, r2
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d10a      	bne.n	8005d08 <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	3301      	adds	r3, #1
 8005cf6:	613b      	str	r3, [r7, #16]
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	2b03      	cmp	r3, #3
 8005cfc:	d902      	bls.n	8005d04 <HAL_ETH_ReleaseTxPacket+0x4c>
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	3b04      	subs	r3, #4
 8005d02:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8005d04:	2300      	movs	r3, #0
 8005d06:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8005d08:	7bbb      	ldrb	r3, [r7, #14]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d02c      	beq.n	8005d68 <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	68d9      	ldr	r1, [r3, #12]
 8005d12:	693a      	ldr	r2, [r7, #16]
 8005d14:	4613      	mov	r3, r2
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	4413      	add	r3, r2
 8005d1a:	00db      	lsls	r3, r3, #3
 8005d1c:	440b      	add	r3, r1
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	db1f      	blt.n	8005d64 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8005d24:	68ba      	ldr	r2, [r7, #8]
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	3304      	adds	r3, #4
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	4413      	add	r3, r2
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	4618      	mov	r0, r3
 8005d32:	f007 fcad 	bl	800d690 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8005d36:	68ba      	ldr	r2, [r7, #8]
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	3304      	adds	r3, #4
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	4413      	add	r3, r2
 8005d40:	2200      	movs	r2, #0
 8005d42:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	3301      	adds	r3, #1
 8005d48:	613b      	str	r3, [r7, #16]
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	2b03      	cmp	r3, #3
 8005d4e:	d902      	bls.n	8005d56 <HAL_ETH_ReleaseTxPacket+0x9e>
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	3b04      	subs	r3, #4
 8005d54:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	697a      	ldr	r2, [r7, #20]
 8005d5a:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	693a      	ldr	r2, [r7, #16]
 8005d60:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005d62:	e001      	b.n	8005d68 <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8005d64:	2300      	movs	r3, #0
 8005d66:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d002      	beq.n	8005d74 <HAL_ETH_ReleaseTxPacket+0xbc>
 8005d6e:	7bfb      	ldrb	r3, [r7, #15]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d1b1      	bne.n	8005cd8 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3718      	adds	r7, #24
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
	...

08005d80 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b086      	sub	sp, #24
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d8e:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d98:	695b      	ldr	r3, [r3, #20]
 8005d9a:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005da4:	69db      	ldr	r3, [r3, #28]
 8005da6:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8005da8:	4b4b      	ldr	r3, [pc, #300]	@ (8005ed8 <HAL_ETH_IRQHandler+0x158>)
 8005daa:	695b      	ldr	r3, [r3, #20]
 8005dac:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d00e      	beq.n	8005dd6 <HAL_ETH_IRQHandler+0x56>
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d009      	beq.n	8005dd6 <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005dca:	461a      	mov	r2, r3
 8005dcc:	4b43      	ldr	r3, [pc, #268]	@ (8005edc <HAL_ETH_IRQHandler+0x15c>)
 8005dce:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f006 fd53 	bl	800c87c <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	f003 0301 	and.w	r3, r3, #1
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d00f      	beq.n	8005e00 <HAL_ETH_IRQHandler+0x80>
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f003 0301 	and.w	r3, r3, #1
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d00a      	beq.n	8005e00 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005df2:	461a      	mov	r2, r3
 8005df4:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8005df8:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f006 fd4e 	bl	800c89c <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d042      	beq.n	8005e90 <HAL_ETH_IRQHandler+0x110>
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d03d      	beq.n	8005e90 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e1a:	f043 0208 	orr.w	r2, r3, #8
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d01a      	beq.n	8005e64 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e36:	695a      	ldr	r2, [r3, #20]
 8005e38:	4b29      	ldr	r3, [pc, #164]	@ (8005ee0 <HAL_ETH_IRQHandler+0x160>)
 8005e3a:	4013      	ands	r3, r2
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e4a:	69db      	ldr	r3, [r3, #28]
 8005e4c:	687a      	ldr	r2, [r7, #4]
 8005e4e:	6812      	ldr	r2, [r2, #0]
 8005e50:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8005e54:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005e58:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	22e0      	movs	r2, #224	@ 0xe0
 8005e5e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8005e62:	e012      	b.n	8005e8a <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e6c:	695a      	ldr	r2, [r3, #20]
 8005e6e:	f248 6380 	movw	r3, #34432	@ 0x8680
 8005e72:	4013      	ands	r3, r2
 8005e74:	687a      	ldr	r2, [r7, #4]
 8005e76:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e82:	461a      	mov	r2, r3
 8005e84:	f248 6380 	movw	r3, #34432	@ 0x8680
 8005e88:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f006 fd16 	bl	800c8bc <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	f003 0308 	and.w	r3, r3, #8
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d00e      	beq.n	8005eb8 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ea0:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f000 f81a 	bl	8005ee4 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d006      	beq.n	8005ed0 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8005ec2:	4b05      	ldr	r3, [pc, #20]	@ (8005ed8 <HAL_ETH_IRQHandler+0x158>)
 8005ec4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8005ec8:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f000 f814 	bl	8005ef8 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8005ed0:	bf00      	nop
 8005ed2:	3718      	adds	r7, #24
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}
 8005ed8:	40013c00 	.word	0x40013c00
 8005edc:	00010040 	.word	0x00010040
 8005ee0:	007e2000 	.word	0x007e2000

08005ee4 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b083      	sub	sp, #12
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8005eec:	bf00      	nop
 8005eee:	370c      	adds	r7, #12
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr

08005ef8 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b083      	sub	sp, #12
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8005f00:	bf00      	nop
 8005f02:	370c      	adds	r7, #12
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr

08005f0c <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b086      	sub	sp, #24
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	60b9      	str	r1, [r7, #8]
 8005f16:	607a      	str	r2, [r7, #4]
 8005f18:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	691b      	ldr	r3, [r3, #16]
 8005f20:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	f003 031c 	and.w	r3, r3, #28
 8005f28:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	02db      	lsls	r3, r3, #11
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	697a      	ldr	r2, [r7, #20]
 8005f32:	4313      	orrs	r3, r2
 8005f34:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	019b      	lsls	r3, r3, #6
 8005f3a:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8005f3e:	697a      	ldr	r2, [r7, #20]
 8005f40:	4313      	orrs	r3, r2
 8005f42:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	f023 0302 	bic.w	r3, r3, #2
 8005f4a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	f043 0301 	orr.w	r3, r3, #1
 8005f52:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	697a      	ldr	r2, [r7, #20]
 8005f5a:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8005f5c:	f7fe fe6e 	bl	8004c3c <HAL_GetTick>
 8005f60:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005f62:	e00d      	b.n	8005f80 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8005f64:	f7fe fe6a 	bl	8004c3c <HAL_GetTick>
 8005f68:	4602      	mov	r2, r0
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	1ad3      	subs	r3, r2, r3
 8005f6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f72:	d301      	bcc.n	8005f78 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	e010      	b.n	8005f9a <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	691b      	ldr	r3, [r3, #16]
 8005f7e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	f003 0301 	and.w	r3, r3, #1
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d1ec      	bne.n	8005f64 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	695b      	ldr	r3, [r3, #20]
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	461a      	mov	r2, r3
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005f98:	2300      	movs	r3, #0
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3718      	adds	r7, #24
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}

08005fa2 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8005fa2:	b580      	push	{r7, lr}
 8005fa4:	b086      	sub	sp, #24
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	60f8      	str	r0, [r7, #12]
 8005faa:	60b9      	str	r1, [r7, #8]
 8005fac:	607a      	str	r2, [r7, #4]
 8005fae:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	691b      	ldr	r3, [r3, #16]
 8005fb6:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	f003 031c 	and.w	r3, r3, #28
 8005fbe:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	02db      	lsls	r3, r3, #11
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	697a      	ldr	r2, [r7, #20]
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	019b      	lsls	r3, r3, #6
 8005fd0:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8005fd4:	697a      	ldr	r2, [r7, #20]
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	f043 0302 	orr.w	r3, r3, #2
 8005fe0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	f043 0301 	orr.w	r3, r3, #1
 8005fe8:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	b29a      	uxth	r2, r3
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	697a      	ldr	r2, [r7, #20]
 8005ffa:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005ffc:	f7fe fe1e 	bl	8004c3c <HAL_GetTick>
 8006000:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8006002:	e00d      	b.n	8006020 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8006004:	f7fe fe1a 	bl	8004c3c <HAL_GetTick>
 8006008:	4602      	mov	r2, r0
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	1ad3      	subs	r3, r2, r3
 800600e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006012:	d301      	bcc.n	8006018 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8006014:	2301      	movs	r3, #1
 8006016:	e009      	b.n	800602c <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	691b      	ldr	r3, [r3, #16]
 800601e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	f003 0301 	and.w	r3, r3, #1
 8006026:	2b00      	cmp	r3, #0
 8006028:	d1ec      	bne.n	8006004 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 800602a:	2300      	movs	r3, #0
}
 800602c:	4618      	mov	r0, r3
 800602e:	3718      	adds	r7, #24
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}

08006034 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8006034:	b480      	push	{r7}
 8006036:	b083      	sub	sp, #12
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d101      	bne.n	8006048 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	e0e6      	b.n	8006216 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f003 0310 	and.w	r3, r3, #16
 8006052:	2b00      	cmp	r3, #0
 8006054:	bf14      	ite	ne
 8006056:	2301      	movne	r3, #1
 8006058:	2300      	moveq	r3, #0
 800605a:	b2db      	uxtb	r3, r3
 800605c:	461a      	mov	r2, r3
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800607c:	2b00      	cmp	r3, #0
 800607e:	bf0c      	ite	eq
 8006080:	2301      	moveq	r3, #1
 8006082:	2300      	movne	r3, #0
 8006084:	b2db      	uxtb	r3, r3
 8006086:	461a      	mov	r2, r3
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8006098:	2b00      	cmp	r3, #0
 800609a:	bf14      	ite	ne
 800609c:	2301      	movne	r3, #1
 800609e:	2300      	moveq	r3, #0
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	bf0c      	ite	eq
 80060b6:	2301      	moveq	r3, #1
 80060b8:	2300      	movne	r3, #0
 80060ba:	b2db      	uxtb	r3, r3
 80060bc:	461a      	mov	r2, r3
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	bf14      	ite	ne
 80060d0:	2301      	movne	r3, #1
 80060d2:	2300      	moveq	r3, #0
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	461a      	mov	r2, r3
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006102:	2b00      	cmp	r3, #0
 8006104:	bf0c      	ite	eq
 8006106:	2301      	moveq	r3, #1
 8006108:	2300      	movne	r3, #0
 800610a:	b2db      	uxtb	r3, r3
 800610c:	461a      	mov	r2, r3
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800611c:	2b00      	cmp	r3, #0
 800611e:	bf0c      	ite	eq
 8006120:	2301      	moveq	r3, #1
 8006122:	2300      	movne	r3, #0
 8006124:	b2db      	uxtb	r3, r3
 8006126:	461a      	mov	r2, r3
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006136:	2b00      	cmp	r3, #0
 8006138:	bf14      	ite	ne
 800613a:	2301      	movne	r3, #1
 800613c:	2300      	moveq	r3, #0
 800613e:	b2db      	uxtb	r3, r3
 8006140:	461a      	mov	r2, r3
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800615e:	2b00      	cmp	r3, #0
 8006160:	bf14      	ite	ne
 8006162:	2301      	movne	r3, #1
 8006164:	2300      	moveq	r3, #0
 8006166:	b2db      	uxtb	r3, r3
 8006168:	461a      	mov	r2, r3
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006178:	2b00      	cmp	r3, #0
 800617a:	bf14      	ite	ne
 800617c:	2301      	movne	r3, #1
 800617e:	2300      	moveq	r3, #0
 8006180:	b2db      	uxtb	r3, r3
 8006182:	461a      	mov	r2, r3
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	699b      	ldr	r3, [r3, #24]
 800618e:	f003 0302 	and.w	r3, r3, #2
 8006192:	2b00      	cmp	r3, #0
 8006194:	bf14      	ite	ne
 8006196:	2301      	movne	r3, #1
 8006198:	2300      	moveq	r3, #0
 800619a:	b2db      	uxtb	r3, r3
 800619c:	461a      	mov	r2, r3
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	699b      	ldr	r3, [r3, #24]
 80061aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	bf0c      	ite	eq
 80061b2:	2301      	moveq	r3, #1
 80061b4:	2300      	movne	r3, #0
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	461a      	mov	r2, r3
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	699b      	ldr	r3, [r3, #24]
 80061c6:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	699b      	ldr	r3, [r3, #24]
 80061d4:	0c1b      	lsrs	r3, r3, #16
 80061d6:	b29a      	uxth	r2, r3
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	699b      	ldr	r3, [r3, #24]
 80061e2:	f003 0304 	and.w	r3, r3, #4
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	bf14      	ite	ne
 80061ea:	2301      	movne	r3, #1
 80061ec:	2300      	moveq	r3, #0
 80061ee:	b2db      	uxtb	r3, r3
 80061f0:	461a      	mov	r2, r3
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	699b      	ldr	r3, [r3, #24]
 80061fe:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8006202:	2b00      	cmp	r3, #0
 8006204:	bf14      	ite	ne
 8006206:	2301      	movne	r3, #1
 8006208:	2300      	moveq	r3, #0
 800620a:	b2db      	uxtb	r3, r3
 800620c:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8006214:	2300      	movs	r3, #0
}
 8006216:	4618      	mov	r0, r3
 8006218:	370c      	adds	r7, #12
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr

08006222 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8006222:	b580      	push	{r7, lr}
 8006224:	b082      	sub	sp, #8
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
 800622a:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d101      	bne.n	8006236 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	e00b      	b.n	800624e <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800623c:	2b10      	cmp	r3, #16
 800623e:	d105      	bne.n	800624c <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8006240:	6839      	ldr	r1, [r7, #0]
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f000 f846 	bl	80062d4 <ETH_SetMACConfig>

    return HAL_OK;
 8006248:	2300      	movs	r3, #0
 800624a:	e000      	b.n	800624e <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800624c:	2301      	movs	r3, #1
  }
}
 800624e:	4618      	mov	r0, r3
 8006250:	3708      	adds	r7, #8
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}

08006256 <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 8006256:	b480      	push	{r7}
 8006258:	b083      	sub	sp, #12
 800625a:	af00      	add	r7, sp, #0
 800625c:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 8006264:	4618      	mov	r0, r3
 8006266:	370c      	adds	r7, #12
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 8006270:	b480      	push	{r7}
 8006272:	b083      	sub	sp, #12
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 800627e:	4618      	mov	r0, r3
 8006280:	370c      	adds	r7, #12
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr

0800628a <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800628a:	b580      	push	{r7, lr}
 800628c:	b084      	sub	sp, #16
 800628e:	af00      	add	r7, sp, #0
 8006290:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8006292:	2300      	movs	r3, #0
 8006294:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800629e:	699b      	ldr	r3, [r3, #24]
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	6812      	ldr	r2, [r2, #0]
 80062a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80062a8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80062ac:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062b6:	699b      	ldr	r3, [r3, #24]
 80062b8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80062ba:	2001      	movs	r0, #1
 80062bc:	f7fe fcca 	bl	8004c54 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80062ca:	6193      	str	r3, [r2, #24]
}
 80062cc:	bf00      	nop
 80062ce:	3710      	adds	r7, #16
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b084      	sub	sp, #16
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80062e6:	68fa      	ldr	r2, [r7, #12]
 80062e8:	4b53      	ldr	r3, [pc, #332]	@ (8006438 <ETH_SetMACConfig+0x164>)
 80062ea:	4013      	ands	r3, r2
 80062ec:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	7b9b      	ldrb	r3, [r3, #14]
 80062f2:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80062f4:	683a      	ldr	r2, [r7, #0]
 80062f6:	7c12      	ldrb	r2, [r2, #16]
 80062f8:	2a00      	cmp	r2, #0
 80062fa:	d102      	bne.n	8006302 <ETH_SetMACConfig+0x2e>
 80062fc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006300:	e000      	b.n	8006304 <ETH_SetMACConfig+0x30>
 8006302:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8006304:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8006306:	683a      	ldr	r2, [r7, #0]
 8006308:	7c52      	ldrb	r2, [r2, #17]
 800630a:	2a00      	cmp	r2, #0
 800630c:	d102      	bne.n	8006314 <ETH_SetMACConfig+0x40>
 800630e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8006312:	e000      	b.n	8006316 <ETH_SetMACConfig+0x42>
 8006314:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8006316:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800631c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	7fdb      	ldrb	r3, [r3, #31]
 8006322:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8006324:	431a      	orrs	r2, r3
                        macconf->Speed |
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800632a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800632c:	683a      	ldr	r2, [r7, #0]
 800632e:	7f92      	ldrb	r2, [r2, #30]
 8006330:	2a00      	cmp	r2, #0
 8006332:	d102      	bne.n	800633a <ETH_SetMACConfig+0x66>
 8006334:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006338:	e000      	b.n	800633c <ETH_SetMACConfig+0x68>
 800633a:	2200      	movs	r2, #0
                        macconf->Speed |
 800633c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	7f1b      	ldrb	r3, [r3, #28]
 8006342:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8006344:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800634a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	791b      	ldrb	r3, [r3, #4]
 8006350:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8006352:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8006354:	683a      	ldr	r2, [r7, #0]
 8006356:	f892 2020 	ldrb.w	r2, [r2, #32]
 800635a:	2a00      	cmp	r2, #0
 800635c:	d102      	bne.n	8006364 <ETH_SetMACConfig+0x90>
 800635e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006362:	e000      	b.n	8006366 <ETH_SetMACConfig+0x92>
 8006364:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8006366:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	7bdb      	ldrb	r3, [r3, #15]
 800636c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800636e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8006374:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800637c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800637e:	4313      	orrs	r3, r2
 8006380:	68fa      	ldr	r2, [r7, #12]
 8006382:	4313      	orrs	r3, r2
 8006384:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	68fa      	ldr	r2, [r7, #12]
 800638c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8006396:	2001      	movs	r0, #1
 8006398:	f7fe fc5c 	bl	8004c54 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	68fa      	ldr	r2, [r7, #12]
 80063a2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	699b      	ldr	r3, [r3, #24]
 80063aa:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80063ac:	68fa      	ldr	r2, [r7, #12]
 80063ae:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80063b2:	4013      	ands	r3, r2
 80063b4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80063ba:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80063bc:	683a      	ldr	r2, [r7, #0]
 80063be:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80063c2:	2a00      	cmp	r2, #0
 80063c4:	d101      	bne.n	80063ca <ETH_SetMACConfig+0xf6>
 80063c6:	2280      	movs	r2, #128	@ 0x80
 80063c8:	e000      	b.n	80063cc <ETH_SetMACConfig+0xf8>
 80063ca:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80063cc:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80063d2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80063d4:	683a      	ldr	r2, [r7, #0]
 80063d6:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80063da:	2a01      	cmp	r2, #1
 80063dc:	d101      	bne.n	80063e2 <ETH_SetMACConfig+0x10e>
 80063de:	2208      	movs	r2, #8
 80063e0:	e000      	b.n	80063e4 <ETH_SetMACConfig+0x110>
 80063e2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80063e4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80063e6:	683a      	ldr	r2, [r7, #0]
 80063e8:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80063ec:	2a01      	cmp	r2, #1
 80063ee:	d101      	bne.n	80063f4 <ETH_SetMACConfig+0x120>
 80063f0:	2204      	movs	r2, #4
 80063f2:	e000      	b.n	80063f6 <ETH_SetMACConfig+0x122>
 80063f4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80063f6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80063f8:	683a      	ldr	r2, [r7, #0]
 80063fa:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80063fe:	2a01      	cmp	r2, #1
 8006400:	d101      	bne.n	8006406 <ETH_SetMACConfig+0x132>
 8006402:	2202      	movs	r2, #2
 8006404:	e000      	b.n	8006408 <ETH_SetMACConfig+0x134>
 8006406:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8006408:	4313      	orrs	r3, r2
 800640a:	68fa      	ldr	r2, [r7, #12]
 800640c:	4313      	orrs	r3, r2
 800640e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	68fa      	ldr	r2, [r7, #12]
 8006416:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	699b      	ldr	r3, [r3, #24]
 800641e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8006420:	2001      	movs	r0, #1
 8006422:	f7fe fc17 	bl	8004c54 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	68fa      	ldr	r2, [r7, #12]
 800642c:	619a      	str	r2, [r3, #24]
}
 800642e:	bf00      	nop
 8006430:	3710      	adds	r7, #16
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}
 8006436:	bf00      	nop
 8006438:	fd20810f 	.word	0xfd20810f

0800643c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b084      	sub	sp, #16
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800644e:	699b      	ldr	r3, [r3, #24]
 8006450:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8006452:	68fa      	ldr	r2, [r7, #12]
 8006454:	4b3d      	ldr	r3, [pc, #244]	@ (800654c <ETH_SetDMAConfig+0x110>)
 8006456:	4013      	ands	r3, r2
 8006458:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	7b1b      	ldrb	r3, [r3, #12]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d102      	bne.n	8006468 <ETH_SetDMAConfig+0x2c>
 8006462:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8006466:	e000      	b.n	800646a <ETH_SetDMAConfig+0x2e>
 8006468:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	7b5b      	ldrb	r3, [r3, #13]
 800646e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8006470:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8006472:	683a      	ldr	r2, [r7, #0]
 8006474:	7f52      	ldrb	r2, [r2, #29]
 8006476:	2a00      	cmp	r2, #0
 8006478:	d102      	bne.n	8006480 <ETH_SetDMAConfig+0x44>
 800647a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800647e:	e000      	b.n	8006482 <ETH_SetDMAConfig+0x46>
 8006480:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8006482:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	7b9b      	ldrb	r3, [r3, #14]
 8006488:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800648a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8006490:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	7f1b      	ldrb	r3, [r3, #28]
 8006496:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8006498:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	7f9b      	ldrb	r3, [r3, #30]
 800649e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80064a0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80064a6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80064ae:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80064b0:	4313      	orrs	r3, r2
 80064b2:	68fa      	ldr	r2, [r7, #12]
 80064b4:	4313      	orrs	r3, r2
 80064b6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064c0:	461a      	mov	r2, r3
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064ce:	699b      	ldr	r3, [r3, #24]
 80064d0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80064d2:	2001      	movs	r0, #1
 80064d4:	f7fe fbbe 	bl	8004c54 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064e0:	461a      	mov	r2, r3
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	791b      	ldrb	r3, [r3, #4]
 80064ea:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80064f0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80064f6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80064fc:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006504:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8006506:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800650c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800650e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8006514:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8006516:	687a      	ldr	r2, [r7, #4]
 8006518:	6812      	ldr	r2, [r2, #0]
 800651a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800651e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006522:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8006530:	2001      	movs	r0, #1
 8006532:	f7fe fb8f 	bl	8004c54 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800653e:	461a      	mov	r2, r3
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	6013      	str	r3, [r2, #0]
}
 8006544:	bf00      	nop
 8006546:	3710      	adds	r7, #16
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}
 800654c:	f8de3f23 	.word	0xf8de3f23

08006550 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b0a6      	sub	sp, #152	@ 0x98
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8006558:	2301      	movs	r3, #1
 800655a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800655e:	2301      	movs	r3, #1
 8006560:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8006564:	2300      	movs	r3, #0
 8006566:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8006568:	2300      	movs	r3, #0
 800656a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800656e:	2301      	movs	r3, #1
 8006570:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8006574:	2300      	movs	r3, #0
 8006576:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800657a:	2301      	movs	r3, #1
 800657c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8006580:	2301      	movs	r3, #1
 8006582:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8006586:	2300      	movs	r3, #0
 8006588:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800658c:	2300      	movs	r3, #0
 800658e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8006592:	2300      	movs	r3, #0
 8006594:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8006596:	2300      	movs	r3, #0
 8006598:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800659c:	2300      	movs	r3, #0
 800659e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80065a0:	2300      	movs	r3, #0
 80065a2:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80065a6:	2300      	movs	r3, #0
 80065a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80065ac:	2300      	movs	r3, #0
 80065ae:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80065b2:	2300      	movs	r3, #0
 80065b4:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80065b8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80065bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80065be:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80065c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80065c4:	2300      	movs	r3, #0
 80065c6:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80065ca:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80065ce:	4619      	mov	r1, r3
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f7ff fe7f 	bl	80062d4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80065d6:	2301      	movs	r3, #1
 80065d8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80065da:	2301      	movs	r3, #1
 80065dc:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80065de:	2301      	movs	r3, #1
 80065e0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80065e4:	2301      	movs	r3, #1
 80065e6:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80065e8:	2300      	movs	r3, #0
 80065ea:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80065ec:	2300      	movs	r3, #0
 80065ee:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80065f2:	2300      	movs	r3, #0
 80065f4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80065f8:	2300      	movs	r3, #0
 80065fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80065fc:	2301      	movs	r3, #1
 80065fe:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8006602:	2301      	movs	r3, #1
 8006604:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8006606:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800660a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800660c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8006610:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8006612:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006616:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8006618:	2301      	movs	r3, #1
 800661a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800661e:	2300      	movs	r3, #0
 8006620:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8006622:	2300      	movs	r3, #0
 8006624:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8006626:	f107 0308 	add.w	r3, r7, #8
 800662a:	4619      	mov	r1, r3
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f7ff ff05 	bl	800643c <ETH_SetDMAConfig>
}
 8006632:	bf00      	nop
 8006634:	3798      	adds	r7, #152	@ 0x98
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}
	...

0800663c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800663c:	b480      	push	{r7}
 800663e:	b087      	sub	sp, #28
 8006640:	af00      	add	r7, sp, #0
 8006642:	60f8      	str	r0, [r7, #12]
 8006644:	60b9      	str	r1, [r7, #8]
 8006646:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	3305      	adds	r3, #5
 800664c:	781b      	ldrb	r3, [r3, #0]
 800664e:	021b      	lsls	r3, r3, #8
 8006650:	687a      	ldr	r2, [r7, #4]
 8006652:	3204      	adds	r2, #4
 8006654:	7812      	ldrb	r2, [r2, #0]
 8006656:	4313      	orrs	r3, r2
 8006658:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800665a:	68ba      	ldr	r2, [r7, #8]
 800665c:	4b11      	ldr	r3, [pc, #68]	@ (80066a4 <ETH_MACAddressConfig+0x68>)
 800665e:	4413      	add	r3, r2
 8006660:	461a      	mov	r2, r3
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	3303      	adds	r3, #3
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	061a      	lsls	r2, r3, #24
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	3302      	adds	r3, #2
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	041b      	lsls	r3, r3, #16
 8006676:	431a      	orrs	r2, r3
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	3301      	adds	r3, #1
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	021b      	lsls	r3, r3, #8
 8006680:	4313      	orrs	r3, r2
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	7812      	ldrb	r2, [r2, #0]
 8006686:	4313      	orrs	r3, r2
 8006688:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800668a:	68ba      	ldr	r2, [r7, #8]
 800668c:	4b06      	ldr	r3, [pc, #24]	@ (80066a8 <ETH_MACAddressConfig+0x6c>)
 800668e:	4413      	add	r3, r2
 8006690:	461a      	mov	r2, r3
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	6013      	str	r3, [r2, #0]
}
 8006696:	bf00      	nop
 8006698:	371c      	adds	r7, #28
 800669a:	46bd      	mov	sp, r7
 800669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a0:	4770      	bx	lr
 80066a2:	bf00      	nop
 80066a4:	40028040 	.word	0x40028040
 80066a8:	40028044 	.word	0x40028044

080066ac <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b085      	sub	sp, #20
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80066b4:	2300      	movs	r3, #0
 80066b6:	60fb      	str	r3, [r7, #12]
 80066b8:	e03e      	b.n	8006738 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	68d9      	ldr	r1, [r3, #12]
 80066be:	68fa      	ldr	r2, [r7, #12]
 80066c0:	4613      	mov	r3, r2
 80066c2:	009b      	lsls	r3, r3, #2
 80066c4:	4413      	add	r3, r2
 80066c6:	00db      	lsls	r3, r3, #3
 80066c8:	440b      	add	r3, r1
 80066ca:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	2200      	movs	r2, #0
 80066d0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	2200      	movs	r2, #0
 80066d6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	2200      	movs	r2, #0
 80066dc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	2200      	movs	r2, #0
 80066e2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80066e4:	68b9      	ldr	r1, [r7, #8]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	68fa      	ldr	r2, [r7, #12]
 80066ea:	3206      	adds	r2, #6
 80066ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2b02      	cmp	r3, #2
 8006700:	d80c      	bhi.n	800671c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	68d9      	ldr	r1, [r3, #12]
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	1c5a      	adds	r2, r3, #1
 800670a:	4613      	mov	r3, r2
 800670c:	009b      	lsls	r3, r3, #2
 800670e:	4413      	add	r3, r2
 8006710:	00db      	lsls	r3, r3, #3
 8006712:	440b      	add	r3, r1
 8006714:	461a      	mov	r2, r3
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	60da      	str	r2, [r3, #12]
 800671a:	e004      	b.n	8006726 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	68db      	ldr	r3, [r3, #12]
 8006720:	461a      	mov	r2, r3
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	3301      	adds	r3, #1
 8006736:	60fb      	str	r3, [r7, #12]
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2b03      	cmp	r3, #3
 800673c:	d9bd      	bls.n	80066ba <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2200      	movs	r2, #0
 8006742:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	68da      	ldr	r2, [r3, #12]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006750:	611a      	str	r2, [r3, #16]
}
 8006752:	bf00      	nop
 8006754:	3714      	adds	r7, #20
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr

0800675e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800675e:	b480      	push	{r7}
 8006760:	b085      	sub	sp, #20
 8006762:	af00      	add	r7, sp, #0
 8006764:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006766:	2300      	movs	r3, #0
 8006768:	60fb      	str	r3, [r7, #12]
 800676a:	e048      	b.n	80067fe <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6919      	ldr	r1, [r3, #16]
 8006770:	68fa      	ldr	r2, [r7, #12]
 8006772:	4613      	mov	r3, r2
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	4413      	add	r3, r2
 8006778:	00db      	lsls	r3, r3, #3
 800677a:	440b      	add	r3, r1
 800677c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	2200      	movs	r2, #0
 8006782:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	2200      	movs	r2, #0
 8006788:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	2200      	movs	r2, #0
 800678e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	2200      	movs	r2, #0
 8006794:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	2200      	movs	r2, #0
 800679a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	2200      	movs	r2, #0
 80067a0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80067a8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	695b      	ldr	r3, [r3, #20]
 80067ae:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80067c2:	68b9      	ldr	r1, [r7, #8]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	68fa      	ldr	r2, [r7, #12]
 80067c8:	3212      	adds	r2, #18
 80067ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2b02      	cmp	r3, #2
 80067d2:	d80c      	bhi.n	80067ee <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6919      	ldr	r1, [r3, #16]
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	1c5a      	adds	r2, r3, #1
 80067dc:	4613      	mov	r3, r2
 80067de:	009b      	lsls	r3, r3, #2
 80067e0:	4413      	add	r3, r2
 80067e2:	00db      	lsls	r3, r3, #3
 80067e4:	440b      	add	r3, r1
 80067e6:	461a      	mov	r2, r3
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	60da      	str	r2, [r3, #12]
 80067ec:	e004      	b.n	80067f8 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	691b      	ldr	r3, [r3, #16]
 80067f2:	461a      	mov	r2, r3
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	3301      	adds	r3, #1
 80067fc:	60fb      	str	r3, [r7, #12]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2b03      	cmp	r3, #3
 8006802:	d9b3      	bls.n	800676c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2200      	movs	r2, #0
 800680e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2200      	movs	r2, #0
 800681a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2200      	movs	r2, #0
 8006820:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	691a      	ldr	r2, [r3, #16]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800682e:	60da      	str	r2, [r3, #12]
}
 8006830:	bf00      	nop
 8006832:	3714      	adds	r7, #20
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr

0800683c <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 800683c:	b480      	push	{r7}
 800683e:	b091      	sub	sp, #68	@ 0x44
 8006840:	af00      	add	r7, sp, #0
 8006842:	60f8      	str	r0, [r7, #12]
 8006844:	60b9      	str	r1, [r7, #8]
 8006846:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	3318      	adds	r3, #24
 800684c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800684e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006850:	691b      	ldr	r3, [r3, #16]
 8006852:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8006854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006856:	691b      	ldr	r3, [r3, #16]
 8006858:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 800685a:	2300      	movs	r3, #0
 800685c:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800685e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006860:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006866:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 800686e:	2300      	movs	r3, #0
 8006870:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8006872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800687a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800687e:	d007      	beq.n	8006890 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8006880:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006882:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006884:	3304      	adds	r3, #4
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	4413      	add	r3, r2
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d001      	beq.n	8006894 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8006890:	2302      	movs	r3, #2
 8006892:	e115      	b.n	8006ac0 <ETH_Prepare_Tx_Descriptors+0x284>
  }


  descnbr += 1U;
 8006894:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006896:	3301      	adds	r3, #1
 8006898:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800689a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	461a      	mov	r2, r3
 80068a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068a2:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80068a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 80068ac:	f023 031f 	bic.w	r3, r3, #31
 80068b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80068b2:	6852      	ldr	r2, [r2, #4]
 80068b4:	431a      	orrs	r2, r3
 80068b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068b8:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f003 0301 	and.w	r3, r3, #1
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d008      	beq.n	80068d8 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 80068c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	695b      	ldr	r3, [r3, #20]
 80068d2:	431a      	orrs	r2, r3
 80068d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068d6:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f003 0320 	and.w	r3, r3, #32
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d008      	beq.n	80068f6 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80068e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	691b      	ldr	r3, [r3, #16]
 80068f0:	431a      	orrs	r2, r3
 80068f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068f4:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f003 0304 	and.w	r3, r3, #4
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d005      	beq.n	800690e <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8006902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800690a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800690c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800690e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8006916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006918:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800691a:	e084      	b.n	8006a26 <ETH_Prepare_Tx_Descriptors+0x1ea>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800691c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006926:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d006      	beq.n	800693c <ETH_Prepare_Tx_Descriptors+0x100>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800692e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006938:	601a      	str	r2, [r3, #0]
 800693a:	e005      	b.n	8006948 <ETH_Prepare_Tx_Descriptors+0x10c>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800693c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8006944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006946:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8006948:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800694a:	3301      	adds	r3, #1
 800694c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800694e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006950:	2b03      	cmp	r3, #3
 8006952:	d902      	bls.n	800695a <ETH_Prepare_Tx_Descriptors+0x11e>
 8006954:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006956:	3b04      	subs	r3, #4
 8006958:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800695a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800695c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800695e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006962:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8006964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800696c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006970:	d007      	beq.n	8006982 <ETH_Prepare_Tx_Descriptors+0x146>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8006972:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006974:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006976:	3304      	adds	r3, #4
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	4413      	add	r3, r2
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d029      	beq.n	80069d6 <ETH_Prepare_Tx_Descriptors+0x19a>
    {
      descidx = firstdescidx;
 8006982:	6a3b      	ldr	r3, [r7, #32]
 8006984:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8006986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006988:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800698a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800698e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8006990:	2300      	movs	r3, #0
 8006992:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006994:	e019      	b.n	80069ca <ETH_Prepare_Tx_Descriptors+0x18e>
  __ASM volatile ("dmb 0xF":::"memory");
 8006996:	f3bf 8f5f 	dmb	sy
}
 800699a:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800699c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80069a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069a6:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80069a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069aa:	3301      	adds	r3, #1
 80069ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80069ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069b0:	2b03      	cmp	r3, #3
 80069b2:	d902      	bls.n	80069ba <ETH_Prepare_Tx_Descriptors+0x17e>
 80069b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069b6:	3b04      	subs	r3, #4
 80069b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80069ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069bc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80069be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069c2:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 80069c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069c6:	3301      	adds	r3, #1
 80069c8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80069ca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80069cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069ce:	429a      	cmp	r2, r3
 80069d0:	d3e1      	bcc.n	8006996 <ETH_Prepare_Tx_Descriptors+0x15a>
      }

      return HAL_ETH_ERROR_BUSY;
 80069d2:	2302      	movs	r3, #2
 80069d4:	e074      	b.n	8006ac0 <ETH_Prepare_Tx_Descriptors+0x284>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80069d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80069de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069e0:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 80069e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069e4:	3301      	adds	r3, #1
 80069e6:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80069e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80069ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	461a      	mov	r2, r3
 80069f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069f6:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80069f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8006a00:	f023 031f 	bic.w	r3, r3, #31
 8006a04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a06:	6852      	ldr	r2, [r2, #4]
 8006a08:	431a      	orrs	r2, r3
 8006a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a0c:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8006a0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a10:	3301      	adds	r3, #1
 8006a12:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8006a14:	f3bf 8f5f 	dmb	sy
}
 8006a18:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8006a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a24:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8006a26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	f47f af76 	bne.w	800691c <ETH_Prepare_Tx_Descriptors+0xe0>
  }

  if (ItMode != ((uint32_t)RESET))
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d006      	beq.n	8006a44 <ETH_Prepare_Tx_Descriptors+0x208>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8006a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a40:	601a      	str	r2, [r3, #0]
 8006a42:	e005      	b.n	8006a50 <ETH_Prepare_Tx_Descriptors+0x214>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8006a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8006a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a4e:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8006a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a5a:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8006a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a5e:	6a3a      	ldr	r2, [r7, #32]
 8006a60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a64:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8006a66:	f3bf 8f5f 	dmb	sy
}
 8006a6a:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8006a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a76:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8006a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a7a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006a7c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006a7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a80:	3304      	adds	r3, #4
 8006a82:	009b      	lsls	r3, r3, #2
 8006a84:	440b      	add	r3, r1
 8006a86:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8006a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a8a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006a8c:	611a      	str	r2, [r3, #16]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006a8e:	f3ef 8310 	mrs	r3, PRIMASK
 8006a92:	613b      	str	r3, [r7, #16]
  return(result);
 8006a94:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8006a96:	61fb      	str	r3, [r7, #28]
 8006a98:	2301      	movs	r3, #1
 8006a9a:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	f383 8810 	msr	PRIMASK, r3
}
 8006aa2:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8006aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aa6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006aa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aaa:	4413      	add	r3, r2
 8006aac:	1c5a      	adds	r2, r3, #1
 8006aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ab0:	629a      	str	r2, [r3, #40]	@ 0x28
 8006ab2:	69fb      	ldr	r3, [r7, #28]
 8006ab4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ab6:	69bb      	ldr	r3, [r7, #24]
 8006ab8:	f383 8810 	msr	PRIMASK, r3
}
 8006abc:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8006abe:	2300      	movs	r3, #0
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3744      	adds	r7, #68	@ 0x44
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aca:	4770      	bx	lr

08006acc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b089      	sub	sp, #36	@ 0x24
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006ada:	2300      	movs	r3, #0
 8006adc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	61fb      	str	r3, [r7, #28]
 8006ae6:	e16b      	b.n	8006dc0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006ae8:	2201      	movs	r2, #1
 8006aea:	69fb      	ldr	r3, [r7, #28]
 8006aec:	fa02 f303 	lsl.w	r3, r2, r3
 8006af0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	697a      	ldr	r2, [r7, #20]
 8006af8:	4013      	ands	r3, r2
 8006afa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006afc:	693a      	ldr	r2, [r7, #16]
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	429a      	cmp	r2, r3
 8006b02:	f040 815a 	bne.w	8006dba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	f003 0303 	and.w	r3, r3, #3
 8006b0e:	2b01      	cmp	r3, #1
 8006b10:	d005      	beq.n	8006b1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006b1a:	2b02      	cmp	r3, #2
 8006b1c:	d130      	bne.n	8006b80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006b24:	69fb      	ldr	r3, [r7, #28]
 8006b26:	005b      	lsls	r3, r3, #1
 8006b28:	2203      	movs	r2, #3
 8006b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b2e:	43db      	mvns	r3, r3
 8006b30:	69ba      	ldr	r2, [r7, #24]
 8006b32:	4013      	ands	r3, r2
 8006b34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	68da      	ldr	r2, [r3, #12]
 8006b3a:	69fb      	ldr	r3, [r7, #28]
 8006b3c:	005b      	lsls	r3, r3, #1
 8006b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b42:	69ba      	ldr	r2, [r7, #24]
 8006b44:	4313      	orrs	r3, r2
 8006b46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	69ba      	ldr	r2, [r7, #24]
 8006b4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006b54:	2201      	movs	r2, #1
 8006b56:	69fb      	ldr	r3, [r7, #28]
 8006b58:	fa02 f303 	lsl.w	r3, r2, r3
 8006b5c:	43db      	mvns	r3, r3
 8006b5e:	69ba      	ldr	r2, [r7, #24]
 8006b60:	4013      	ands	r3, r2
 8006b62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	091b      	lsrs	r3, r3, #4
 8006b6a:	f003 0201 	and.w	r2, r3, #1
 8006b6e:	69fb      	ldr	r3, [r7, #28]
 8006b70:	fa02 f303 	lsl.w	r3, r2, r3
 8006b74:	69ba      	ldr	r2, [r7, #24]
 8006b76:	4313      	orrs	r3, r2
 8006b78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	69ba      	ldr	r2, [r7, #24]
 8006b7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	f003 0303 	and.w	r3, r3, #3
 8006b88:	2b03      	cmp	r3, #3
 8006b8a:	d017      	beq.n	8006bbc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	68db      	ldr	r3, [r3, #12]
 8006b90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006b92:	69fb      	ldr	r3, [r7, #28]
 8006b94:	005b      	lsls	r3, r3, #1
 8006b96:	2203      	movs	r2, #3
 8006b98:	fa02 f303 	lsl.w	r3, r2, r3
 8006b9c:	43db      	mvns	r3, r3
 8006b9e:	69ba      	ldr	r2, [r7, #24]
 8006ba0:	4013      	ands	r3, r2
 8006ba2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	689a      	ldr	r2, [r3, #8]
 8006ba8:	69fb      	ldr	r3, [r7, #28]
 8006baa:	005b      	lsls	r3, r3, #1
 8006bac:	fa02 f303 	lsl.w	r3, r2, r3
 8006bb0:	69ba      	ldr	r2, [r7, #24]
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	69ba      	ldr	r2, [r7, #24]
 8006bba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	f003 0303 	and.w	r3, r3, #3
 8006bc4:	2b02      	cmp	r3, #2
 8006bc6:	d123      	bne.n	8006c10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006bc8:	69fb      	ldr	r3, [r7, #28]
 8006bca:	08da      	lsrs	r2, r3, #3
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	3208      	adds	r2, #8
 8006bd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006bd6:	69fb      	ldr	r3, [r7, #28]
 8006bd8:	f003 0307 	and.w	r3, r3, #7
 8006bdc:	009b      	lsls	r3, r3, #2
 8006bde:	220f      	movs	r2, #15
 8006be0:	fa02 f303 	lsl.w	r3, r2, r3
 8006be4:	43db      	mvns	r3, r3
 8006be6:	69ba      	ldr	r2, [r7, #24]
 8006be8:	4013      	ands	r3, r2
 8006bea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	691a      	ldr	r2, [r3, #16]
 8006bf0:	69fb      	ldr	r3, [r7, #28]
 8006bf2:	f003 0307 	and.w	r3, r3, #7
 8006bf6:	009b      	lsls	r3, r3, #2
 8006bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8006bfc:	69ba      	ldr	r2, [r7, #24]
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006c02:	69fb      	ldr	r3, [r7, #28]
 8006c04:	08da      	lsrs	r2, r3, #3
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	3208      	adds	r2, #8
 8006c0a:	69b9      	ldr	r1, [r7, #24]
 8006c0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006c16:	69fb      	ldr	r3, [r7, #28]
 8006c18:	005b      	lsls	r3, r3, #1
 8006c1a:	2203      	movs	r2, #3
 8006c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c20:	43db      	mvns	r3, r3
 8006c22:	69ba      	ldr	r2, [r7, #24]
 8006c24:	4013      	ands	r3, r2
 8006c26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	f003 0203 	and.w	r2, r3, #3
 8006c30:	69fb      	ldr	r3, [r7, #28]
 8006c32:	005b      	lsls	r3, r3, #1
 8006c34:	fa02 f303 	lsl.w	r3, r2, r3
 8006c38:	69ba      	ldr	r2, [r7, #24]
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	69ba      	ldr	r2, [r7, #24]
 8006c42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	f000 80b4 	beq.w	8006dba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006c52:	2300      	movs	r3, #0
 8006c54:	60fb      	str	r3, [r7, #12]
 8006c56:	4b60      	ldr	r3, [pc, #384]	@ (8006dd8 <HAL_GPIO_Init+0x30c>)
 8006c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c5a:	4a5f      	ldr	r2, [pc, #380]	@ (8006dd8 <HAL_GPIO_Init+0x30c>)
 8006c5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006c60:	6453      	str	r3, [r2, #68]	@ 0x44
 8006c62:	4b5d      	ldr	r3, [pc, #372]	@ (8006dd8 <HAL_GPIO_Init+0x30c>)
 8006c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006c6a:	60fb      	str	r3, [r7, #12]
 8006c6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006c6e:	4a5b      	ldr	r2, [pc, #364]	@ (8006ddc <HAL_GPIO_Init+0x310>)
 8006c70:	69fb      	ldr	r3, [r7, #28]
 8006c72:	089b      	lsrs	r3, r3, #2
 8006c74:	3302      	adds	r3, #2
 8006c76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006c7c:	69fb      	ldr	r3, [r7, #28]
 8006c7e:	f003 0303 	and.w	r3, r3, #3
 8006c82:	009b      	lsls	r3, r3, #2
 8006c84:	220f      	movs	r2, #15
 8006c86:	fa02 f303 	lsl.w	r3, r2, r3
 8006c8a:	43db      	mvns	r3, r3
 8006c8c:	69ba      	ldr	r2, [r7, #24]
 8006c8e:	4013      	ands	r3, r2
 8006c90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	4a52      	ldr	r2, [pc, #328]	@ (8006de0 <HAL_GPIO_Init+0x314>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d02b      	beq.n	8006cf2 <HAL_GPIO_Init+0x226>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	4a51      	ldr	r2, [pc, #324]	@ (8006de4 <HAL_GPIO_Init+0x318>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d025      	beq.n	8006cee <HAL_GPIO_Init+0x222>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	4a50      	ldr	r2, [pc, #320]	@ (8006de8 <HAL_GPIO_Init+0x31c>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d01f      	beq.n	8006cea <HAL_GPIO_Init+0x21e>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	4a4f      	ldr	r2, [pc, #316]	@ (8006dec <HAL_GPIO_Init+0x320>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d019      	beq.n	8006ce6 <HAL_GPIO_Init+0x21a>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	4a4e      	ldr	r2, [pc, #312]	@ (8006df0 <HAL_GPIO_Init+0x324>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d013      	beq.n	8006ce2 <HAL_GPIO_Init+0x216>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	4a4d      	ldr	r2, [pc, #308]	@ (8006df4 <HAL_GPIO_Init+0x328>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d00d      	beq.n	8006cde <HAL_GPIO_Init+0x212>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	4a4c      	ldr	r2, [pc, #304]	@ (8006df8 <HAL_GPIO_Init+0x32c>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d007      	beq.n	8006cda <HAL_GPIO_Init+0x20e>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	4a4b      	ldr	r2, [pc, #300]	@ (8006dfc <HAL_GPIO_Init+0x330>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d101      	bne.n	8006cd6 <HAL_GPIO_Init+0x20a>
 8006cd2:	2307      	movs	r3, #7
 8006cd4:	e00e      	b.n	8006cf4 <HAL_GPIO_Init+0x228>
 8006cd6:	2308      	movs	r3, #8
 8006cd8:	e00c      	b.n	8006cf4 <HAL_GPIO_Init+0x228>
 8006cda:	2306      	movs	r3, #6
 8006cdc:	e00a      	b.n	8006cf4 <HAL_GPIO_Init+0x228>
 8006cde:	2305      	movs	r3, #5
 8006ce0:	e008      	b.n	8006cf4 <HAL_GPIO_Init+0x228>
 8006ce2:	2304      	movs	r3, #4
 8006ce4:	e006      	b.n	8006cf4 <HAL_GPIO_Init+0x228>
 8006ce6:	2303      	movs	r3, #3
 8006ce8:	e004      	b.n	8006cf4 <HAL_GPIO_Init+0x228>
 8006cea:	2302      	movs	r3, #2
 8006cec:	e002      	b.n	8006cf4 <HAL_GPIO_Init+0x228>
 8006cee:	2301      	movs	r3, #1
 8006cf0:	e000      	b.n	8006cf4 <HAL_GPIO_Init+0x228>
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	69fa      	ldr	r2, [r7, #28]
 8006cf6:	f002 0203 	and.w	r2, r2, #3
 8006cfa:	0092      	lsls	r2, r2, #2
 8006cfc:	4093      	lsls	r3, r2
 8006cfe:	69ba      	ldr	r2, [r7, #24]
 8006d00:	4313      	orrs	r3, r2
 8006d02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006d04:	4935      	ldr	r1, [pc, #212]	@ (8006ddc <HAL_GPIO_Init+0x310>)
 8006d06:	69fb      	ldr	r3, [r7, #28]
 8006d08:	089b      	lsrs	r3, r3, #2
 8006d0a:	3302      	adds	r3, #2
 8006d0c:	69ba      	ldr	r2, [r7, #24]
 8006d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006d12:	4b3b      	ldr	r3, [pc, #236]	@ (8006e00 <HAL_GPIO_Init+0x334>)
 8006d14:	689b      	ldr	r3, [r3, #8]
 8006d16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	43db      	mvns	r3, r3
 8006d1c:	69ba      	ldr	r2, [r7, #24]
 8006d1e:	4013      	ands	r3, r2
 8006d20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d003      	beq.n	8006d36 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006d2e:	69ba      	ldr	r2, [r7, #24]
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	4313      	orrs	r3, r2
 8006d34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006d36:	4a32      	ldr	r2, [pc, #200]	@ (8006e00 <HAL_GPIO_Init+0x334>)
 8006d38:	69bb      	ldr	r3, [r7, #24]
 8006d3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006d3c:	4b30      	ldr	r3, [pc, #192]	@ (8006e00 <HAL_GPIO_Init+0x334>)
 8006d3e:	68db      	ldr	r3, [r3, #12]
 8006d40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	43db      	mvns	r3, r3
 8006d46:	69ba      	ldr	r2, [r7, #24]
 8006d48:	4013      	ands	r3, r2
 8006d4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d003      	beq.n	8006d60 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006d58:	69ba      	ldr	r2, [r7, #24]
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006d60:	4a27      	ldr	r2, [pc, #156]	@ (8006e00 <HAL_GPIO_Init+0x334>)
 8006d62:	69bb      	ldr	r3, [r7, #24]
 8006d64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006d66:	4b26      	ldr	r3, [pc, #152]	@ (8006e00 <HAL_GPIO_Init+0x334>)
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	43db      	mvns	r3, r3
 8006d70:	69ba      	ldr	r2, [r7, #24]
 8006d72:	4013      	ands	r3, r2
 8006d74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d003      	beq.n	8006d8a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006d82:	69ba      	ldr	r2, [r7, #24]
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	4313      	orrs	r3, r2
 8006d88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006d8a:	4a1d      	ldr	r2, [pc, #116]	@ (8006e00 <HAL_GPIO_Init+0x334>)
 8006d8c:	69bb      	ldr	r3, [r7, #24]
 8006d8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006d90:	4b1b      	ldr	r3, [pc, #108]	@ (8006e00 <HAL_GPIO_Init+0x334>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	43db      	mvns	r3, r3
 8006d9a:	69ba      	ldr	r2, [r7, #24]
 8006d9c:	4013      	ands	r3, r2
 8006d9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d003      	beq.n	8006db4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006dac:	69ba      	ldr	r2, [r7, #24]
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	4313      	orrs	r3, r2
 8006db2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006db4:	4a12      	ldr	r2, [pc, #72]	@ (8006e00 <HAL_GPIO_Init+0x334>)
 8006db6:	69bb      	ldr	r3, [r7, #24]
 8006db8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006dba:	69fb      	ldr	r3, [r7, #28]
 8006dbc:	3301      	adds	r3, #1
 8006dbe:	61fb      	str	r3, [r7, #28]
 8006dc0:	69fb      	ldr	r3, [r7, #28]
 8006dc2:	2b0f      	cmp	r3, #15
 8006dc4:	f67f ae90 	bls.w	8006ae8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006dc8:	bf00      	nop
 8006dca:	bf00      	nop
 8006dcc:	3724      	adds	r7, #36	@ 0x24
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr
 8006dd6:	bf00      	nop
 8006dd8:	40023800 	.word	0x40023800
 8006ddc:	40013800 	.word	0x40013800
 8006de0:	40020000 	.word	0x40020000
 8006de4:	40020400 	.word	0x40020400
 8006de8:	40020800 	.word	0x40020800
 8006dec:	40020c00 	.word	0x40020c00
 8006df0:	40021000 	.word	0x40021000
 8006df4:	40021400 	.word	0x40021400
 8006df8:	40021800 	.word	0x40021800
 8006dfc:	40021c00 	.word	0x40021c00
 8006e00:	40013c00 	.word	0x40013c00

08006e04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b083      	sub	sp, #12
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	460b      	mov	r3, r1
 8006e0e:	807b      	strh	r3, [r7, #2]
 8006e10:	4613      	mov	r3, r2
 8006e12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006e14:	787b      	ldrb	r3, [r7, #1]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d003      	beq.n	8006e22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006e1a:	887a      	ldrh	r2, [r7, #2]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006e20:	e003      	b.n	8006e2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006e22:	887b      	ldrh	r3, [r7, #2]
 8006e24:	041a      	lsls	r2, r3, #16
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	619a      	str	r2, [r3, #24]
}
 8006e2a:	bf00      	nop
 8006e2c:	370c      	adds	r7, #12
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr

08006e36 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006e36:	b580      	push	{r7, lr}
 8006e38:	b086      	sub	sp, #24
 8006e3a:	af02      	add	r7, sp, #8
 8006e3c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d101      	bne.n	8006e48 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006e44:	2301      	movs	r3, #1
 8006e46:	e101      	b.n	800704c <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8006e54:	b2db      	uxtb	r3, r3
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d106      	bne.n	8006e68 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f016 fcf6 	bl	801d854 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2203      	movs	r2, #3
 8006e6c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006e76:	d102      	bne.n	8006e7e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4618      	mov	r0, r3
 8006e84:	f003 ff19 	bl	800acba <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6818      	ldr	r0, [r3, #0]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	7c1a      	ldrb	r2, [r3, #16]
 8006e90:	f88d 2000 	strb.w	r2, [sp]
 8006e94:	3304      	adds	r3, #4
 8006e96:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006e98:	f003 fdf8 	bl	800aa8c <USB_CoreInit>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d005      	beq.n	8006eae <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2202      	movs	r2, #2
 8006ea6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e0ce      	b.n	800704c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	2100      	movs	r1, #0
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f003 ff11 	bl	800acdc <USB_SetCurrentMode>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d005      	beq.n	8006ecc <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2202      	movs	r2, #2
 8006ec4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	e0bf      	b.n	800704c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006ecc:	2300      	movs	r3, #0
 8006ece:	73fb      	strb	r3, [r7, #15]
 8006ed0:	e04a      	b.n	8006f68 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006ed2:	7bfa      	ldrb	r2, [r7, #15]
 8006ed4:	6879      	ldr	r1, [r7, #4]
 8006ed6:	4613      	mov	r3, r2
 8006ed8:	00db      	lsls	r3, r3, #3
 8006eda:	4413      	add	r3, r2
 8006edc:	009b      	lsls	r3, r3, #2
 8006ede:	440b      	add	r3, r1
 8006ee0:	3315      	adds	r3, #21
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006ee6:	7bfa      	ldrb	r2, [r7, #15]
 8006ee8:	6879      	ldr	r1, [r7, #4]
 8006eea:	4613      	mov	r3, r2
 8006eec:	00db      	lsls	r3, r3, #3
 8006eee:	4413      	add	r3, r2
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	440b      	add	r3, r1
 8006ef4:	3314      	adds	r3, #20
 8006ef6:	7bfa      	ldrb	r2, [r7, #15]
 8006ef8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006efa:	7bfa      	ldrb	r2, [r7, #15]
 8006efc:	7bfb      	ldrb	r3, [r7, #15]
 8006efe:	b298      	uxth	r0, r3
 8006f00:	6879      	ldr	r1, [r7, #4]
 8006f02:	4613      	mov	r3, r2
 8006f04:	00db      	lsls	r3, r3, #3
 8006f06:	4413      	add	r3, r2
 8006f08:	009b      	lsls	r3, r3, #2
 8006f0a:	440b      	add	r3, r1
 8006f0c:	332e      	adds	r3, #46	@ 0x2e
 8006f0e:	4602      	mov	r2, r0
 8006f10:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006f12:	7bfa      	ldrb	r2, [r7, #15]
 8006f14:	6879      	ldr	r1, [r7, #4]
 8006f16:	4613      	mov	r3, r2
 8006f18:	00db      	lsls	r3, r3, #3
 8006f1a:	4413      	add	r3, r2
 8006f1c:	009b      	lsls	r3, r3, #2
 8006f1e:	440b      	add	r3, r1
 8006f20:	3318      	adds	r3, #24
 8006f22:	2200      	movs	r2, #0
 8006f24:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006f26:	7bfa      	ldrb	r2, [r7, #15]
 8006f28:	6879      	ldr	r1, [r7, #4]
 8006f2a:	4613      	mov	r3, r2
 8006f2c:	00db      	lsls	r3, r3, #3
 8006f2e:	4413      	add	r3, r2
 8006f30:	009b      	lsls	r3, r3, #2
 8006f32:	440b      	add	r3, r1
 8006f34:	331c      	adds	r3, #28
 8006f36:	2200      	movs	r2, #0
 8006f38:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006f3a:	7bfa      	ldrb	r2, [r7, #15]
 8006f3c:	6879      	ldr	r1, [r7, #4]
 8006f3e:	4613      	mov	r3, r2
 8006f40:	00db      	lsls	r3, r3, #3
 8006f42:	4413      	add	r3, r2
 8006f44:	009b      	lsls	r3, r3, #2
 8006f46:	440b      	add	r3, r1
 8006f48:	3320      	adds	r3, #32
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006f4e:	7bfa      	ldrb	r2, [r7, #15]
 8006f50:	6879      	ldr	r1, [r7, #4]
 8006f52:	4613      	mov	r3, r2
 8006f54:	00db      	lsls	r3, r3, #3
 8006f56:	4413      	add	r3, r2
 8006f58:	009b      	lsls	r3, r3, #2
 8006f5a:	440b      	add	r3, r1
 8006f5c:	3324      	adds	r3, #36	@ 0x24
 8006f5e:	2200      	movs	r2, #0
 8006f60:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006f62:	7bfb      	ldrb	r3, [r7, #15]
 8006f64:	3301      	adds	r3, #1
 8006f66:	73fb      	strb	r3, [r7, #15]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	791b      	ldrb	r3, [r3, #4]
 8006f6c:	7bfa      	ldrb	r2, [r7, #15]
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	d3af      	bcc.n	8006ed2 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006f72:	2300      	movs	r3, #0
 8006f74:	73fb      	strb	r3, [r7, #15]
 8006f76:	e044      	b.n	8007002 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006f78:	7bfa      	ldrb	r2, [r7, #15]
 8006f7a:	6879      	ldr	r1, [r7, #4]
 8006f7c:	4613      	mov	r3, r2
 8006f7e:	00db      	lsls	r3, r3, #3
 8006f80:	4413      	add	r3, r2
 8006f82:	009b      	lsls	r3, r3, #2
 8006f84:	440b      	add	r3, r1
 8006f86:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006f8e:	7bfa      	ldrb	r2, [r7, #15]
 8006f90:	6879      	ldr	r1, [r7, #4]
 8006f92:	4613      	mov	r3, r2
 8006f94:	00db      	lsls	r3, r3, #3
 8006f96:	4413      	add	r3, r2
 8006f98:	009b      	lsls	r3, r3, #2
 8006f9a:	440b      	add	r3, r1
 8006f9c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8006fa0:	7bfa      	ldrb	r2, [r7, #15]
 8006fa2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006fa4:	7bfa      	ldrb	r2, [r7, #15]
 8006fa6:	6879      	ldr	r1, [r7, #4]
 8006fa8:	4613      	mov	r3, r2
 8006faa:	00db      	lsls	r3, r3, #3
 8006fac:	4413      	add	r3, r2
 8006fae:	009b      	lsls	r3, r3, #2
 8006fb0:	440b      	add	r3, r1
 8006fb2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006fba:	7bfa      	ldrb	r2, [r7, #15]
 8006fbc:	6879      	ldr	r1, [r7, #4]
 8006fbe:	4613      	mov	r3, r2
 8006fc0:	00db      	lsls	r3, r3, #3
 8006fc2:	4413      	add	r3, r2
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	440b      	add	r3, r1
 8006fc8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8006fcc:	2200      	movs	r2, #0
 8006fce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006fd0:	7bfa      	ldrb	r2, [r7, #15]
 8006fd2:	6879      	ldr	r1, [r7, #4]
 8006fd4:	4613      	mov	r3, r2
 8006fd6:	00db      	lsls	r3, r3, #3
 8006fd8:	4413      	add	r3, r2
 8006fda:	009b      	lsls	r3, r3, #2
 8006fdc:	440b      	add	r3, r1
 8006fde:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006fe6:	7bfa      	ldrb	r2, [r7, #15]
 8006fe8:	6879      	ldr	r1, [r7, #4]
 8006fea:	4613      	mov	r3, r2
 8006fec:	00db      	lsls	r3, r3, #3
 8006fee:	4413      	add	r3, r2
 8006ff0:	009b      	lsls	r3, r3, #2
 8006ff2:	440b      	add	r3, r1
 8006ff4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006ffc:	7bfb      	ldrb	r3, [r7, #15]
 8006ffe:	3301      	adds	r3, #1
 8007000:	73fb      	strb	r3, [r7, #15]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	791b      	ldrb	r3, [r3, #4]
 8007006:	7bfa      	ldrb	r2, [r7, #15]
 8007008:	429a      	cmp	r2, r3
 800700a:	d3b5      	bcc.n	8006f78 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6818      	ldr	r0, [r3, #0]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	7c1a      	ldrb	r2, [r3, #16]
 8007014:	f88d 2000 	strb.w	r2, [sp]
 8007018:	3304      	adds	r3, #4
 800701a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800701c:	f003 feaa 	bl	800ad74 <USB_DevInit>
 8007020:	4603      	mov	r3, r0
 8007022:	2b00      	cmp	r3, #0
 8007024:	d005      	beq.n	8007032 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2202      	movs	r2, #2
 800702a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800702e:	2301      	movs	r3, #1
 8007030:	e00c      	b.n	800704c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2200      	movs	r2, #0
 8007036:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2201      	movs	r2, #1
 800703c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4618      	mov	r0, r3
 8007046:	f004 fef4 	bl	800be32 <USB_DevDisconnect>

  return HAL_OK;
 800704a:	2300      	movs	r3, #0
}
 800704c:	4618      	mov	r0, r3
 800704e:	3710      	adds	r7, #16
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}

08007054 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b084      	sub	sp, #16
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007068:	2b01      	cmp	r3, #1
 800706a:	d101      	bne.n	8007070 <HAL_PCD_Start+0x1c>
 800706c:	2302      	movs	r3, #2
 800706e:	e022      	b.n	80070b6 <HAL_PCD_Start+0x62>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2201      	movs	r2, #1
 8007074:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	68db      	ldr	r3, [r3, #12]
 800707c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007080:	2b00      	cmp	r3, #0
 8007082:	d009      	beq.n	8007098 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8007088:	2b01      	cmp	r3, #1
 800708a:	d105      	bne.n	8007098 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007090:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4618      	mov	r0, r3
 800709e:	f003 fdfb 	bl	800ac98 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4618      	mov	r0, r3
 80070a8:	f004 fea2 	bl	800bdf0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2200      	movs	r2, #0
 80070b0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80070b4:	2300      	movs	r3, #0
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3710      	adds	r7, #16
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}

080070be <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80070be:	b590      	push	{r4, r7, lr}
 80070c0:	b08d      	sub	sp, #52	@ 0x34
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070cc:	6a3b      	ldr	r3, [r7, #32]
 80070ce:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4618      	mov	r0, r3
 80070d6:	f004 ff60 	bl	800bf9a <USB_GetMode>
 80070da:	4603      	mov	r3, r0
 80070dc:	2b00      	cmp	r3, #0
 80070de:	f040 848c 	bne.w	80079fa <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4618      	mov	r0, r3
 80070e8:	f004 fec4 	bl	800be74 <USB_ReadInterrupts>
 80070ec:	4603      	mov	r3, r0
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	f000 8482 	beq.w	80079f8 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80070f4:	69fb      	ldr	r3, [r7, #28]
 80070f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070fa:	689b      	ldr	r3, [r3, #8]
 80070fc:	0a1b      	lsrs	r3, r3, #8
 80070fe:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4618      	mov	r0, r3
 800710e:	f004 feb1 	bl	800be74 <USB_ReadInterrupts>
 8007112:	4603      	mov	r3, r0
 8007114:	f003 0302 	and.w	r3, r3, #2
 8007118:	2b02      	cmp	r3, #2
 800711a:	d107      	bne.n	800712c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	695a      	ldr	r2, [r3, #20]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f002 0202 	and.w	r2, r2, #2
 800712a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4618      	mov	r0, r3
 8007132:	f004 fe9f 	bl	800be74 <USB_ReadInterrupts>
 8007136:	4603      	mov	r3, r0
 8007138:	f003 0310 	and.w	r3, r3, #16
 800713c:	2b10      	cmp	r3, #16
 800713e:	d161      	bne.n	8007204 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	699a      	ldr	r2, [r3, #24]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f022 0210 	bic.w	r2, r2, #16
 800714e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8007150:	6a3b      	ldr	r3, [r7, #32]
 8007152:	6a1b      	ldr	r3, [r3, #32]
 8007154:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8007156:	69bb      	ldr	r3, [r7, #24]
 8007158:	f003 020f 	and.w	r2, r3, #15
 800715c:	4613      	mov	r3, r2
 800715e:	00db      	lsls	r3, r3, #3
 8007160:	4413      	add	r3, r2
 8007162:	009b      	lsls	r3, r3, #2
 8007164:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007168:	687a      	ldr	r2, [r7, #4]
 800716a:	4413      	add	r3, r2
 800716c:	3304      	adds	r3, #4
 800716e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007170:	69bb      	ldr	r3, [r7, #24]
 8007172:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8007176:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800717a:	d124      	bne.n	80071c6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800717c:	69ba      	ldr	r2, [r7, #24]
 800717e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8007182:	4013      	ands	r3, r2
 8007184:	2b00      	cmp	r3, #0
 8007186:	d035      	beq.n	80071f4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800718c:	69bb      	ldr	r3, [r7, #24]
 800718e:	091b      	lsrs	r3, r3, #4
 8007190:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007192:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007196:	b29b      	uxth	r3, r3
 8007198:	461a      	mov	r2, r3
 800719a:	6a38      	ldr	r0, [r7, #32]
 800719c:	f004 fcd6 	bl	800bb4c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	68da      	ldr	r2, [r3, #12]
 80071a4:	69bb      	ldr	r3, [r7, #24]
 80071a6:	091b      	lsrs	r3, r3, #4
 80071a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80071ac:	441a      	add	r2, r3
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	695a      	ldr	r2, [r3, #20]
 80071b6:	69bb      	ldr	r3, [r7, #24]
 80071b8:	091b      	lsrs	r3, r3, #4
 80071ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80071be:	441a      	add	r2, r3
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	615a      	str	r2, [r3, #20]
 80071c4:	e016      	b.n	80071f4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80071c6:	69bb      	ldr	r3, [r7, #24]
 80071c8:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80071cc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80071d0:	d110      	bne.n	80071f4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80071d8:	2208      	movs	r2, #8
 80071da:	4619      	mov	r1, r3
 80071dc:	6a38      	ldr	r0, [r7, #32]
 80071de:	f004 fcb5 	bl	800bb4c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	695a      	ldr	r2, [r3, #20]
 80071e6:	69bb      	ldr	r3, [r7, #24]
 80071e8:	091b      	lsrs	r3, r3, #4
 80071ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80071ee:	441a      	add	r2, r3
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	699a      	ldr	r2, [r3, #24]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f042 0210 	orr.w	r2, r2, #16
 8007202:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4618      	mov	r0, r3
 800720a:	f004 fe33 	bl	800be74 <USB_ReadInterrupts>
 800720e:	4603      	mov	r3, r0
 8007210:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007214:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007218:	f040 80a7 	bne.w	800736a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800721c:	2300      	movs	r3, #0
 800721e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4618      	mov	r0, r3
 8007226:	f004 fe38 	bl	800be9a <USB_ReadDevAllOutEpInterrupt>
 800722a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800722c:	e099      	b.n	8007362 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800722e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007230:	f003 0301 	and.w	r3, r3, #1
 8007234:	2b00      	cmp	r3, #0
 8007236:	f000 808e 	beq.w	8007356 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007240:	b2d2      	uxtb	r2, r2
 8007242:	4611      	mov	r1, r2
 8007244:	4618      	mov	r0, r3
 8007246:	f004 fe5c 	bl	800bf02 <USB_ReadDevOutEPInterrupt>
 800724a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	f003 0301 	and.w	r3, r3, #1
 8007252:	2b00      	cmp	r3, #0
 8007254:	d00c      	beq.n	8007270 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007258:	015a      	lsls	r2, r3, #5
 800725a:	69fb      	ldr	r3, [r7, #28]
 800725c:	4413      	add	r3, r2
 800725e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007262:	461a      	mov	r2, r3
 8007264:	2301      	movs	r3, #1
 8007266:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007268:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 fea4 	bl	8007fb8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	f003 0308 	and.w	r3, r3, #8
 8007276:	2b00      	cmp	r3, #0
 8007278:	d00c      	beq.n	8007294 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800727a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800727c:	015a      	lsls	r2, r3, #5
 800727e:	69fb      	ldr	r3, [r7, #28]
 8007280:	4413      	add	r3, r2
 8007282:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007286:	461a      	mov	r2, r3
 8007288:	2308      	movs	r3, #8
 800728a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800728c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 ff7a 	bl	8008188 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	f003 0310 	and.w	r3, r3, #16
 800729a:	2b00      	cmp	r3, #0
 800729c:	d008      	beq.n	80072b0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800729e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072a0:	015a      	lsls	r2, r3, #5
 80072a2:	69fb      	ldr	r3, [r7, #28]
 80072a4:	4413      	add	r3, r2
 80072a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072aa:	461a      	mov	r2, r3
 80072ac:	2310      	movs	r3, #16
 80072ae:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	f003 0302 	and.w	r3, r3, #2
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d030      	beq.n	800731c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80072ba:	6a3b      	ldr	r3, [r7, #32]
 80072bc:	695b      	ldr	r3, [r3, #20]
 80072be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072c2:	2b80      	cmp	r3, #128	@ 0x80
 80072c4:	d109      	bne.n	80072da <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80072c6:	69fb      	ldr	r3, [r7, #28]
 80072c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	69fa      	ldr	r2, [r7, #28]
 80072d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80072d4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80072d8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80072da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072dc:	4613      	mov	r3, r2
 80072de:	00db      	lsls	r3, r3, #3
 80072e0:	4413      	add	r3, r2
 80072e2:	009b      	lsls	r3, r3, #2
 80072e4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	4413      	add	r3, r2
 80072ec:	3304      	adds	r3, #4
 80072ee:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	78db      	ldrb	r3, [r3, #3]
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	d108      	bne.n	800730a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	2200      	movs	r2, #0
 80072fc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80072fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007300:	b2db      	uxtb	r3, r3
 8007302:	4619      	mov	r1, r3
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f016 fbab 	bl	801da60 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800730a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800730c:	015a      	lsls	r2, r3, #5
 800730e:	69fb      	ldr	r3, [r7, #28]
 8007310:	4413      	add	r3, r2
 8007312:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007316:	461a      	mov	r2, r3
 8007318:	2302      	movs	r3, #2
 800731a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	f003 0320 	and.w	r3, r3, #32
 8007322:	2b00      	cmp	r3, #0
 8007324:	d008      	beq.n	8007338 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007328:	015a      	lsls	r2, r3, #5
 800732a:	69fb      	ldr	r3, [r7, #28]
 800732c:	4413      	add	r3, r2
 800732e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007332:	461a      	mov	r2, r3
 8007334:	2320      	movs	r3, #32
 8007336:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800733e:	2b00      	cmp	r3, #0
 8007340:	d009      	beq.n	8007356 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007344:	015a      	lsls	r2, r3, #5
 8007346:	69fb      	ldr	r3, [r7, #28]
 8007348:	4413      	add	r3, r2
 800734a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800734e:	461a      	mov	r2, r3
 8007350:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007354:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8007356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007358:	3301      	adds	r3, #1
 800735a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800735c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800735e:	085b      	lsrs	r3, r3, #1
 8007360:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8007362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007364:	2b00      	cmp	r3, #0
 8007366:	f47f af62 	bne.w	800722e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4618      	mov	r0, r3
 8007370:	f004 fd80 	bl	800be74 <USB_ReadInterrupts>
 8007374:	4603      	mov	r3, r0
 8007376:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800737a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800737e:	f040 80db 	bne.w	8007538 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4618      	mov	r0, r3
 8007388:	f004 fda1 	bl	800bece <USB_ReadDevAllInEpInterrupt>
 800738c:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800738e:	2300      	movs	r3, #0
 8007390:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8007392:	e0cd      	b.n	8007530 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007396:	f003 0301 	and.w	r3, r3, #1
 800739a:	2b00      	cmp	r3, #0
 800739c:	f000 80c2 	beq.w	8007524 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073a6:	b2d2      	uxtb	r2, r2
 80073a8:	4611      	mov	r1, r2
 80073aa:	4618      	mov	r0, r3
 80073ac:	f004 fdc7 	bl	800bf3e <USB_ReadDevInEPInterrupt>
 80073b0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	f003 0301 	and.w	r3, r3, #1
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d057      	beq.n	800746c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80073bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073be:	f003 030f 	and.w	r3, r3, #15
 80073c2:	2201      	movs	r2, #1
 80073c4:	fa02 f303 	lsl.w	r3, r2, r3
 80073c8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80073ca:	69fb      	ldr	r3, [r7, #28]
 80073cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	43db      	mvns	r3, r3
 80073d6:	69f9      	ldr	r1, [r7, #28]
 80073d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80073dc:	4013      	ands	r3, r2
 80073de:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80073e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073e2:	015a      	lsls	r2, r3, #5
 80073e4:	69fb      	ldr	r3, [r7, #28]
 80073e6:	4413      	add	r3, r2
 80073e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073ec:	461a      	mov	r2, r3
 80073ee:	2301      	movs	r3, #1
 80073f0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	799b      	ldrb	r3, [r3, #6]
 80073f6:	2b01      	cmp	r3, #1
 80073f8:	d132      	bne.n	8007460 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80073fa:	6879      	ldr	r1, [r7, #4]
 80073fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073fe:	4613      	mov	r3, r2
 8007400:	00db      	lsls	r3, r3, #3
 8007402:	4413      	add	r3, r2
 8007404:	009b      	lsls	r3, r3, #2
 8007406:	440b      	add	r3, r1
 8007408:	3320      	adds	r3, #32
 800740a:	6819      	ldr	r1, [r3, #0]
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007410:	4613      	mov	r3, r2
 8007412:	00db      	lsls	r3, r3, #3
 8007414:	4413      	add	r3, r2
 8007416:	009b      	lsls	r3, r3, #2
 8007418:	4403      	add	r3, r0
 800741a:	331c      	adds	r3, #28
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4419      	add	r1, r3
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007424:	4613      	mov	r3, r2
 8007426:	00db      	lsls	r3, r3, #3
 8007428:	4413      	add	r3, r2
 800742a:	009b      	lsls	r3, r3, #2
 800742c:	4403      	add	r3, r0
 800742e:	3320      	adds	r3, #32
 8007430:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007434:	2b00      	cmp	r3, #0
 8007436:	d113      	bne.n	8007460 <HAL_PCD_IRQHandler+0x3a2>
 8007438:	6879      	ldr	r1, [r7, #4]
 800743a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800743c:	4613      	mov	r3, r2
 800743e:	00db      	lsls	r3, r3, #3
 8007440:	4413      	add	r3, r2
 8007442:	009b      	lsls	r3, r3, #2
 8007444:	440b      	add	r3, r1
 8007446:	3324      	adds	r3, #36	@ 0x24
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d108      	bne.n	8007460 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6818      	ldr	r0, [r3, #0]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007458:	461a      	mov	r2, r3
 800745a:	2101      	movs	r1, #1
 800745c:	f004 fdce 	bl	800bffc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007462:	b2db      	uxtb	r3, r3
 8007464:	4619      	mov	r1, r3
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f016 fa75 	bl	801d956 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	f003 0308 	and.w	r3, r3, #8
 8007472:	2b00      	cmp	r3, #0
 8007474:	d008      	beq.n	8007488 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007478:	015a      	lsls	r2, r3, #5
 800747a:	69fb      	ldr	r3, [r7, #28]
 800747c:	4413      	add	r3, r2
 800747e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007482:	461a      	mov	r2, r3
 8007484:	2308      	movs	r3, #8
 8007486:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	f003 0310 	and.w	r3, r3, #16
 800748e:	2b00      	cmp	r3, #0
 8007490:	d008      	beq.n	80074a4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007494:	015a      	lsls	r2, r3, #5
 8007496:	69fb      	ldr	r3, [r7, #28]
 8007498:	4413      	add	r3, r2
 800749a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800749e:	461a      	mov	r2, r3
 80074a0:	2310      	movs	r3, #16
 80074a2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d008      	beq.n	80074c0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80074ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074b0:	015a      	lsls	r2, r3, #5
 80074b2:	69fb      	ldr	r3, [r7, #28]
 80074b4:	4413      	add	r3, r2
 80074b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074ba:	461a      	mov	r2, r3
 80074bc:	2340      	movs	r3, #64	@ 0x40
 80074be:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	f003 0302 	and.w	r3, r3, #2
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d023      	beq.n	8007512 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80074ca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80074cc:	6a38      	ldr	r0, [r7, #32]
 80074ce:	f003 fdb5 	bl	800b03c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80074d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074d4:	4613      	mov	r3, r2
 80074d6:	00db      	lsls	r3, r3, #3
 80074d8:	4413      	add	r3, r2
 80074da:	009b      	lsls	r3, r3, #2
 80074dc:	3310      	adds	r3, #16
 80074de:	687a      	ldr	r2, [r7, #4]
 80074e0:	4413      	add	r3, r2
 80074e2:	3304      	adds	r3, #4
 80074e4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	78db      	ldrb	r3, [r3, #3]
 80074ea:	2b01      	cmp	r3, #1
 80074ec:	d108      	bne.n	8007500 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	2200      	movs	r2, #0
 80074f2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80074f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074f6:	b2db      	uxtb	r3, r3
 80074f8:	4619      	mov	r1, r3
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f016 fac2 	bl	801da84 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007502:	015a      	lsls	r2, r3, #5
 8007504:	69fb      	ldr	r3, [r7, #28]
 8007506:	4413      	add	r3, r2
 8007508:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800750c:	461a      	mov	r2, r3
 800750e:	2302      	movs	r3, #2
 8007510:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007518:	2b00      	cmp	r3, #0
 800751a:	d003      	beq.n	8007524 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800751c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f000 fcbd 	bl	8007e9e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8007524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007526:	3301      	adds	r3, #1
 8007528:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800752a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800752c:	085b      	lsrs	r3, r3, #1
 800752e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8007530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007532:	2b00      	cmp	r3, #0
 8007534:	f47f af2e 	bne.w	8007394 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4618      	mov	r0, r3
 800753e:	f004 fc99 	bl	800be74 <USB_ReadInterrupts>
 8007542:	4603      	mov	r3, r0
 8007544:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007548:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800754c:	d122      	bne.n	8007594 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800754e:	69fb      	ldr	r3, [r7, #28]
 8007550:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	69fa      	ldr	r2, [r7, #28]
 8007558:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800755c:	f023 0301 	bic.w	r3, r3, #1
 8007560:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8007568:	2b01      	cmp	r3, #1
 800756a:	d108      	bne.n	800757e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2200      	movs	r2, #0
 8007570:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007574:	2100      	movs	r1, #0
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f000 fea4 	bl	80082c4 <HAL_PCDEx_LPM_Callback>
 800757c:	e002      	b.n	8007584 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f016 fa60 	bl	801da44 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	695a      	ldr	r2, [r3, #20]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8007592:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4618      	mov	r0, r3
 800759a:	f004 fc6b 	bl	800be74 <USB_ReadInterrupts>
 800759e:	4603      	mov	r3, r0
 80075a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80075a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80075a8:	d112      	bne.n	80075d0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80075aa:	69fb      	ldr	r3, [r7, #28]
 80075ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075b0:	689b      	ldr	r3, [r3, #8]
 80075b2:	f003 0301 	and.w	r3, r3, #1
 80075b6:	2b01      	cmp	r3, #1
 80075b8:	d102      	bne.n	80075c0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f016 fa1c 	bl	801d9f8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	695a      	ldr	r2, [r3, #20]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80075ce:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4618      	mov	r0, r3
 80075d6:	f004 fc4d 	bl	800be74 <USB_ReadInterrupts>
 80075da:	4603      	mov	r3, r0
 80075dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80075e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075e4:	f040 80b7 	bne.w	8007756 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80075e8:	69fb      	ldr	r3, [r7, #28]
 80075ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075ee:	685b      	ldr	r3, [r3, #4]
 80075f0:	69fa      	ldr	r2, [r7, #28]
 80075f2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80075f6:	f023 0301 	bic.w	r3, r3, #1
 80075fa:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	2110      	movs	r1, #16
 8007602:	4618      	mov	r0, r3
 8007604:	f003 fd1a 	bl	800b03c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007608:	2300      	movs	r3, #0
 800760a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800760c:	e046      	b.n	800769c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800760e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007610:	015a      	lsls	r2, r3, #5
 8007612:	69fb      	ldr	r3, [r7, #28]
 8007614:	4413      	add	r3, r2
 8007616:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800761a:	461a      	mov	r2, r3
 800761c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007620:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007624:	015a      	lsls	r2, r3, #5
 8007626:	69fb      	ldr	r3, [r7, #28]
 8007628:	4413      	add	r3, r2
 800762a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007632:	0151      	lsls	r1, r2, #5
 8007634:	69fa      	ldr	r2, [r7, #28]
 8007636:	440a      	add	r2, r1
 8007638:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800763c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007640:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007642:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007644:	015a      	lsls	r2, r3, #5
 8007646:	69fb      	ldr	r3, [r7, #28]
 8007648:	4413      	add	r3, r2
 800764a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800764e:	461a      	mov	r2, r3
 8007650:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007654:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007658:	015a      	lsls	r2, r3, #5
 800765a:	69fb      	ldr	r3, [r7, #28]
 800765c:	4413      	add	r3, r2
 800765e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007666:	0151      	lsls	r1, r2, #5
 8007668:	69fa      	ldr	r2, [r7, #28]
 800766a:	440a      	add	r2, r1
 800766c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007670:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007674:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007678:	015a      	lsls	r2, r3, #5
 800767a:	69fb      	ldr	r3, [r7, #28]
 800767c:	4413      	add	r3, r2
 800767e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007686:	0151      	lsls	r1, r2, #5
 8007688:	69fa      	ldr	r2, [r7, #28]
 800768a:	440a      	add	r2, r1
 800768c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007690:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007694:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007696:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007698:	3301      	adds	r3, #1
 800769a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	791b      	ldrb	r3, [r3, #4]
 80076a0:	461a      	mov	r2, r3
 80076a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d3b2      	bcc.n	800760e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80076a8:	69fb      	ldr	r3, [r7, #28]
 80076aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076ae:	69db      	ldr	r3, [r3, #28]
 80076b0:	69fa      	ldr	r2, [r7, #28]
 80076b2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80076b6:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80076ba:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	7bdb      	ldrb	r3, [r3, #15]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d016      	beq.n	80076f2 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80076c4:	69fb      	ldr	r3, [r7, #28]
 80076c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80076ce:	69fa      	ldr	r2, [r7, #28]
 80076d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80076d4:	f043 030b 	orr.w	r3, r3, #11
 80076d8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80076dc:	69fb      	ldr	r3, [r7, #28]
 80076de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076e4:	69fa      	ldr	r2, [r7, #28]
 80076e6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80076ea:	f043 030b 	orr.w	r3, r3, #11
 80076ee:	6453      	str	r3, [r2, #68]	@ 0x44
 80076f0:	e015      	b.n	800771e <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80076f2:	69fb      	ldr	r3, [r7, #28]
 80076f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076f8:	695b      	ldr	r3, [r3, #20]
 80076fa:	69fa      	ldr	r2, [r7, #28]
 80076fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007700:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8007704:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8007708:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800770a:	69fb      	ldr	r3, [r7, #28]
 800770c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007710:	691b      	ldr	r3, [r3, #16]
 8007712:	69fa      	ldr	r2, [r7, #28]
 8007714:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007718:	f043 030b 	orr.w	r3, r3, #11
 800771c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800771e:	69fb      	ldr	r3, [r7, #28]
 8007720:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	69fa      	ldr	r2, [r7, #28]
 8007728:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800772c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007730:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6818      	ldr	r0, [r3, #0]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007740:	461a      	mov	r2, r3
 8007742:	f004 fc5b 	bl	800bffc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	695a      	ldr	r2, [r3, #20]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8007754:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4618      	mov	r0, r3
 800775c:	f004 fb8a 	bl	800be74 <USB_ReadInterrupts>
 8007760:	4603      	mov	r3, r0
 8007762:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007766:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800776a:	d123      	bne.n	80077b4 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4618      	mov	r0, r3
 8007772:	f004 fc20 	bl	800bfb6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4618      	mov	r0, r3
 800777c:	f003 fcd7 	bl	800b12e <USB_GetDevSpeed>
 8007780:	4603      	mov	r3, r0
 8007782:	461a      	mov	r2, r3
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681c      	ldr	r4, [r3, #0]
 800778c:	f001 f9ca 	bl	8008b24 <HAL_RCC_GetHCLKFreq>
 8007790:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007796:	461a      	mov	r2, r3
 8007798:	4620      	mov	r0, r4
 800779a:	f003 f9db 	bl	800ab54 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f016 f901 	bl	801d9a6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	695a      	ldr	r2, [r3, #20]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80077b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4618      	mov	r0, r3
 80077ba:	f004 fb5b 	bl	800be74 <USB_ReadInterrupts>
 80077be:	4603      	mov	r3, r0
 80077c0:	f003 0308 	and.w	r3, r3, #8
 80077c4:	2b08      	cmp	r3, #8
 80077c6:	d10a      	bne.n	80077de <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f016 f8de 	bl	801d98a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	695a      	ldr	r2, [r3, #20]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f002 0208 	and.w	r2, r2, #8
 80077dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4618      	mov	r0, r3
 80077e4:	f004 fb46 	bl	800be74 <USB_ReadInterrupts>
 80077e8:	4603      	mov	r3, r0
 80077ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077ee:	2b80      	cmp	r3, #128	@ 0x80
 80077f0:	d123      	bne.n	800783a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80077f2:	6a3b      	ldr	r3, [r7, #32]
 80077f4:	699b      	ldr	r3, [r3, #24]
 80077f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80077fa:	6a3b      	ldr	r3, [r7, #32]
 80077fc:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80077fe:	2301      	movs	r3, #1
 8007800:	627b      	str	r3, [r7, #36]	@ 0x24
 8007802:	e014      	b.n	800782e <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8007804:	6879      	ldr	r1, [r7, #4]
 8007806:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007808:	4613      	mov	r3, r2
 800780a:	00db      	lsls	r3, r3, #3
 800780c:	4413      	add	r3, r2
 800780e:	009b      	lsls	r3, r3, #2
 8007810:	440b      	add	r3, r1
 8007812:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8007816:	781b      	ldrb	r3, [r3, #0]
 8007818:	2b01      	cmp	r3, #1
 800781a:	d105      	bne.n	8007828 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800781c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800781e:	b2db      	uxtb	r3, r3
 8007820:	4619      	mov	r1, r3
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 fb0a 	bl	8007e3c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800782a:	3301      	adds	r3, #1
 800782c:	627b      	str	r3, [r7, #36]	@ 0x24
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	791b      	ldrb	r3, [r3, #4]
 8007832:	461a      	mov	r2, r3
 8007834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007836:	4293      	cmp	r3, r2
 8007838:	d3e4      	bcc.n	8007804 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4618      	mov	r0, r3
 8007840:	f004 fb18 	bl	800be74 <USB_ReadInterrupts>
 8007844:	4603      	mov	r3, r0
 8007846:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800784a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800784e:	d13c      	bne.n	80078ca <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007850:	2301      	movs	r3, #1
 8007852:	627b      	str	r3, [r7, #36]	@ 0x24
 8007854:	e02b      	b.n	80078ae <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8007856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007858:	015a      	lsls	r2, r3, #5
 800785a:	69fb      	ldr	r3, [r7, #28]
 800785c:	4413      	add	r3, r2
 800785e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007866:	6879      	ldr	r1, [r7, #4]
 8007868:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800786a:	4613      	mov	r3, r2
 800786c:	00db      	lsls	r3, r3, #3
 800786e:	4413      	add	r3, r2
 8007870:	009b      	lsls	r3, r3, #2
 8007872:	440b      	add	r3, r1
 8007874:	3318      	adds	r3, #24
 8007876:	781b      	ldrb	r3, [r3, #0]
 8007878:	2b01      	cmp	r3, #1
 800787a:	d115      	bne.n	80078a8 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800787c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800787e:	2b00      	cmp	r3, #0
 8007880:	da12      	bge.n	80078a8 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8007882:	6879      	ldr	r1, [r7, #4]
 8007884:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007886:	4613      	mov	r3, r2
 8007888:	00db      	lsls	r3, r3, #3
 800788a:	4413      	add	r3, r2
 800788c:	009b      	lsls	r3, r3, #2
 800788e:	440b      	add	r3, r1
 8007890:	3317      	adds	r3, #23
 8007892:	2201      	movs	r2, #1
 8007894:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8007896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007898:	b2db      	uxtb	r3, r3
 800789a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800789e:	b2db      	uxtb	r3, r3
 80078a0:	4619      	mov	r1, r3
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 faca 	bl	8007e3c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80078a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078aa:	3301      	adds	r3, #1
 80078ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	791b      	ldrb	r3, [r3, #4]
 80078b2:	461a      	mov	r2, r3
 80078b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d3cd      	bcc.n	8007856 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	695a      	ldr	r2, [r3, #20]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80078c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4618      	mov	r0, r3
 80078d0:	f004 fad0 	bl	800be74 <USB_ReadInterrupts>
 80078d4:	4603      	mov	r3, r0
 80078d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80078da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80078de:	d156      	bne.n	800798e <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80078e0:	2301      	movs	r3, #1
 80078e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80078e4:	e045      	b.n	8007972 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80078e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078e8:	015a      	lsls	r2, r3, #5
 80078ea:	69fb      	ldr	r3, [r7, #28]
 80078ec:	4413      	add	r3, r2
 80078ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80078f6:	6879      	ldr	r1, [r7, #4]
 80078f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80078fa:	4613      	mov	r3, r2
 80078fc:	00db      	lsls	r3, r3, #3
 80078fe:	4413      	add	r3, r2
 8007900:	009b      	lsls	r3, r3, #2
 8007902:	440b      	add	r3, r1
 8007904:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8007908:	781b      	ldrb	r3, [r3, #0]
 800790a:	2b01      	cmp	r3, #1
 800790c:	d12e      	bne.n	800796c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800790e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007910:	2b00      	cmp	r3, #0
 8007912:	da2b      	bge.n	800796c <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8007914:	69bb      	ldr	r3, [r7, #24]
 8007916:	0c1a      	lsrs	r2, r3, #16
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800791e:	4053      	eors	r3, r2
 8007920:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007924:	2b00      	cmp	r3, #0
 8007926:	d121      	bne.n	800796c <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8007928:	6879      	ldr	r1, [r7, #4]
 800792a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800792c:	4613      	mov	r3, r2
 800792e:	00db      	lsls	r3, r3, #3
 8007930:	4413      	add	r3, r2
 8007932:	009b      	lsls	r3, r3, #2
 8007934:	440b      	add	r3, r1
 8007936:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800793a:	2201      	movs	r2, #1
 800793c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800793e:	6a3b      	ldr	r3, [r7, #32]
 8007940:	699b      	ldr	r3, [r3, #24]
 8007942:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007946:	6a3b      	ldr	r3, [r7, #32]
 8007948:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800794a:	6a3b      	ldr	r3, [r7, #32]
 800794c:	695b      	ldr	r3, [r3, #20]
 800794e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007952:	2b00      	cmp	r3, #0
 8007954:	d10a      	bne.n	800796c <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8007956:	69fb      	ldr	r3, [r7, #28]
 8007958:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	69fa      	ldr	r2, [r7, #28]
 8007960:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007964:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007968:	6053      	str	r3, [r2, #4]
            break;
 800796a:	e008      	b.n	800797e <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800796c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800796e:	3301      	adds	r3, #1
 8007970:	627b      	str	r3, [r7, #36]	@ 0x24
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	791b      	ldrb	r3, [r3, #4]
 8007976:	461a      	mov	r2, r3
 8007978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800797a:	4293      	cmp	r3, r2
 800797c:	d3b3      	bcc.n	80078e6 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	695a      	ldr	r2, [r3, #20]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800798c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	4618      	mov	r0, r3
 8007994:	f004 fa6e 	bl	800be74 <USB_ReadInterrupts>
 8007998:	4603      	mov	r3, r0
 800799a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800799e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079a2:	d10a      	bne.n	80079ba <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f016 f87f 	bl	801daa8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	695a      	ldr	r2, [r3, #20]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80079b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4618      	mov	r0, r3
 80079c0:	f004 fa58 	bl	800be74 <USB_ReadInterrupts>
 80079c4:	4603      	mov	r3, r0
 80079c6:	f003 0304 	and.w	r3, r3, #4
 80079ca:	2b04      	cmp	r3, #4
 80079cc:	d115      	bne.n	80079fa <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80079d6:	69bb      	ldr	r3, [r7, #24]
 80079d8:	f003 0304 	and.w	r3, r3, #4
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d002      	beq.n	80079e6 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f016 f86f 	bl	801dac4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	6859      	ldr	r1, [r3, #4]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	69ba      	ldr	r2, [r7, #24]
 80079f2:	430a      	orrs	r2, r1
 80079f4:	605a      	str	r2, [r3, #4]
 80079f6:	e000      	b.n	80079fa <HAL_PCD_IRQHandler+0x93c>
      return;
 80079f8:	bf00      	nop
    }
  }
}
 80079fa:	3734      	adds	r7, #52	@ 0x34
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd90      	pop	{r4, r7, pc}

08007a00 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b082      	sub	sp, #8
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	460b      	mov	r3, r1
 8007a0a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007a12:	2b01      	cmp	r3, #1
 8007a14:	d101      	bne.n	8007a1a <HAL_PCD_SetAddress+0x1a>
 8007a16:	2302      	movs	r3, #2
 8007a18:	e012      	b.n	8007a40 <HAL_PCD_SetAddress+0x40>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2201      	movs	r2, #1
 8007a1e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	78fa      	ldrb	r2, [r7, #3]
 8007a26:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	78fa      	ldrb	r2, [r7, #3]
 8007a2e:	4611      	mov	r1, r2
 8007a30:	4618      	mov	r0, r3
 8007a32:	f004 f9b7 	bl	800bda4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007a3e:	2300      	movs	r3, #0
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3708      	adds	r7, #8
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}

08007a48 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b084      	sub	sp, #16
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
 8007a50:	4608      	mov	r0, r1
 8007a52:	4611      	mov	r1, r2
 8007a54:	461a      	mov	r2, r3
 8007a56:	4603      	mov	r3, r0
 8007a58:	70fb      	strb	r3, [r7, #3]
 8007a5a:	460b      	mov	r3, r1
 8007a5c:	803b      	strh	r3, [r7, #0]
 8007a5e:	4613      	mov	r3, r2
 8007a60:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8007a62:	2300      	movs	r3, #0
 8007a64:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007a66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	da0f      	bge.n	8007a8e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007a6e:	78fb      	ldrb	r3, [r7, #3]
 8007a70:	f003 020f 	and.w	r2, r3, #15
 8007a74:	4613      	mov	r3, r2
 8007a76:	00db      	lsls	r3, r3, #3
 8007a78:	4413      	add	r3, r2
 8007a7a:	009b      	lsls	r3, r3, #2
 8007a7c:	3310      	adds	r3, #16
 8007a7e:	687a      	ldr	r2, [r7, #4]
 8007a80:	4413      	add	r3, r2
 8007a82:	3304      	adds	r3, #4
 8007a84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2201      	movs	r2, #1
 8007a8a:	705a      	strb	r2, [r3, #1]
 8007a8c:	e00f      	b.n	8007aae <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007a8e:	78fb      	ldrb	r3, [r7, #3]
 8007a90:	f003 020f 	and.w	r2, r3, #15
 8007a94:	4613      	mov	r3, r2
 8007a96:	00db      	lsls	r3, r3, #3
 8007a98:	4413      	add	r3, r2
 8007a9a:	009b      	lsls	r3, r3, #2
 8007a9c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007aa0:	687a      	ldr	r2, [r7, #4]
 8007aa2:	4413      	add	r3, r2
 8007aa4:	3304      	adds	r3, #4
 8007aa6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007aae:	78fb      	ldrb	r3, [r7, #3]
 8007ab0:	f003 030f 	and.w	r3, r3, #15
 8007ab4:	b2da      	uxtb	r2, r3
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8007aba:	883b      	ldrh	r3, [r7, #0]
 8007abc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	78ba      	ldrb	r2, [r7, #2]
 8007ac8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	785b      	ldrb	r3, [r3, #1]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d004      	beq.n	8007adc <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	781b      	ldrb	r3, [r3, #0]
 8007ad6:	461a      	mov	r2, r3
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007adc:	78bb      	ldrb	r3, [r7, #2]
 8007ade:	2b02      	cmp	r3, #2
 8007ae0:	d102      	bne.n	8007ae8 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007aee:	2b01      	cmp	r3, #1
 8007af0:	d101      	bne.n	8007af6 <HAL_PCD_EP_Open+0xae>
 8007af2:	2302      	movs	r3, #2
 8007af4:	e00e      	b.n	8007b14 <HAL_PCD_EP_Open+0xcc>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2201      	movs	r2, #1
 8007afa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	68f9      	ldr	r1, [r7, #12]
 8007b04:	4618      	mov	r0, r3
 8007b06:	f003 fb37 	bl	800b178 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8007b12:	7afb      	ldrb	r3, [r7, #11]
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	3710      	adds	r7, #16
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}

08007b1c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b084      	sub	sp, #16
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
 8007b24:	460b      	mov	r3, r1
 8007b26:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007b28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	da0f      	bge.n	8007b50 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007b30:	78fb      	ldrb	r3, [r7, #3]
 8007b32:	f003 020f 	and.w	r2, r3, #15
 8007b36:	4613      	mov	r3, r2
 8007b38:	00db      	lsls	r3, r3, #3
 8007b3a:	4413      	add	r3, r2
 8007b3c:	009b      	lsls	r3, r3, #2
 8007b3e:	3310      	adds	r3, #16
 8007b40:	687a      	ldr	r2, [r7, #4]
 8007b42:	4413      	add	r3, r2
 8007b44:	3304      	adds	r3, #4
 8007b46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	705a      	strb	r2, [r3, #1]
 8007b4e:	e00f      	b.n	8007b70 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007b50:	78fb      	ldrb	r3, [r7, #3]
 8007b52:	f003 020f 	and.w	r2, r3, #15
 8007b56:	4613      	mov	r3, r2
 8007b58:	00db      	lsls	r3, r3, #3
 8007b5a:	4413      	add	r3, r2
 8007b5c:	009b      	lsls	r3, r3, #2
 8007b5e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007b62:	687a      	ldr	r2, [r7, #4]
 8007b64:	4413      	add	r3, r2
 8007b66:	3304      	adds	r3, #4
 8007b68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8007b70:	78fb      	ldrb	r3, [r7, #3]
 8007b72:	f003 030f 	and.w	r3, r3, #15
 8007b76:	b2da      	uxtb	r2, r3
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007b82:	2b01      	cmp	r3, #1
 8007b84:	d101      	bne.n	8007b8a <HAL_PCD_EP_Close+0x6e>
 8007b86:	2302      	movs	r3, #2
 8007b88:	e00e      	b.n	8007ba8 <HAL_PCD_EP_Close+0x8c>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2201      	movs	r2, #1
 8007b8e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	68f9      	ldr	r1, [r7, #12]
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f003 fb75 	bl	800b288 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8007ba6:	2300      	movs	r3, #0
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	3710      	adds	r7, #16
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}

08007bb0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b086      	sub	sp, #24
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	60f8      	str	r0, [r7, #12]
 8007bb8:	607a      	str	r2, [r7, #4]
 8007bba:	603b      	str	r3, [r7, #0]
 8007bbc:	460b      	mov	r3, r1
 8007bbe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007bc0:	7afb      	ldrb	r3, [r7, #11]
 8007bc2:	f003 020f 	and.w	r2, r3, #15
 8007bc6:	4613      	mov	r3, r2
 8007bc8:	00db      	lsls	r3, r3, #3
 8007bca:	4413      	add	r3, r2
 8007bcc:	009b      	lsls	r3, r3, #2
 8007bce:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007bd2:	68fa      	ldr	r2, [r7, #12]
 8007bd4:	4413      	add	r3, r2
 8007bd6:	3304      	adds	r3, #4
 8007bd8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	687a      	ldr	r2, [r7, #4]
 8007bde:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	683a      	ldr	r2, [r7, #0]
 8007be4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	2200      	movs	r2, #0
 8007bea:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007bf2:	7afb      	ldrb	r3, [r7, #11]
 8007bf4:	f003 030f 	and.w	r3, r3, #15
 8007bf8:	b2da      	uxtb	r2, r3
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	799b      	ldrb	r3, [r3, #6]
 8007c02:	2b01      	cmp	r3, #1
 8007c04:	d102      	bne.n	8007c0c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007c06:	687a      	ldr	r2, [r7, #4]
 8007c08:	697b      	ldr	r3, [r7, #20]
 8007c0a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	6818      	ldr	r0, [r3, #0]
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	799b      	ldrb	r3, [r3, #6]
 8007c14:	461a      	mov	r2, r3
 8007c16:	6979      	ldr	r1, [r7, #20]
 8007c18:	f003 fc12 	bl	800b440 <USB_EPStartXfer>

  return HAL_OK;
 8007c1c:	2300      	movs	r3, #0
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3718      	adds	r7, #24
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}

08007c26 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8007c26:	b480      	push	{r7}
 8007c28:	b083      	sub	sp, #12
 8007c2a:	af00      	add	r7, sp, #0
 8007c2c:	6078      	str	r0, [r7, #4]
 8007c2e:	460b      	mov	r3, r1
 8007c30:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007c32:	78fb      	ldrb	r3, [r7, #3]
 8007c34:	f003 020f 	and.w	r2, r3, #15
 8007c38:	6879      	ldr	r1, [r7, #4]
 8007c3a:	4613      	mov	r3, r2
 8007c3c:	00db      	lsls	r3, r3, #3
 8007c3e:	4413      	add	r3, r2
 8007c40:	009b      	lsls	r3, r3, #2
 8007c42:	440b      	add	r3, r1
 8007c44:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8007c48:	681b      	ldr	r3, [r3, #0]
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	370c      	adds	r7, #12
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c54:	4770      	bx	lr

08007c56 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007c56:	b580      	push	{r7, lr}
 8007c58:	b086      	sub	sp, #24
 8007c5a:	af00      	add	r7, sp, #0
 8007c5c:	60f8      	str	r0, [r7, #12]
 8007c5e:	607a      	str	r2, [r7, #4]
 8007c60:	603b      	str	r3, [r7, #0]
 8007c62:	460b      	mov	r3, r1
 8007c64:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007c66:	7afb      	ldrb	r3, [r7, #11]
 8007c68:	f003 020f 	and.w	r2, r3, #15
 8007c6c:	4613      	mov	r3, r2
 8007c6e:	00db      	lsls	r3, r3, #3
 8007c70:	4413      	add	r3, r2
 8007c72:	009b      	lsls	r3, r3, #2
 8007c74:	3310      	adds	r3, #16
 8007c76:	68fa      	ldr	r2, [r7, #12]
 8007c78:	4413      	add	r3, r2
 8007c7a:	3304      	adds	r3, #4
 8007c7c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	687a      	ldr	r2, [r7, #4]
 8007c82:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	683a      	ldr	r2, [r7, #0]
 8007c88:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	2201      	movs	r2, #1
 8007c94:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007c96:	7afb      	ldrb	r3, [r7, #11]
 8007c98:	f003 030f 	and.w	r3, r3, #15
 8007c9c:	b2da      	uxtb	r2, r3
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	799b      	ldrb	r3, [r3, #6]
 8007ca6:	2b01      	cmp	r3, #1
 8007ca8:	d102      	bne.n	8007cb0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007caa:	687a      	ldr	r2, [r7, #4]
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	6818      	ldr	r0, [r3, #0]
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	799b      	ldrb	r3, [r3, #6]
 8007cb8:	461a      	mov	r2, r3
 8007cba:	6979      	ldr	r1, [r7, #20]
 8007cbc:	f003 fbc0 	bl	800b440 <USB_EPStartXfer>

  return HAL_OK;
 8007cc0:	2300      	movs	r3, #0
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3718      	adds	r7, #24
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}

08007cca <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007cca:	b580      	push	{r7, lr}
 8007ccc:	b084      	sub	sp, #16
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	6078      	str	r0, [r7, #4]
 8007cd2:	460b      	mov	r3, r1
 8007cd4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007cd6:	78fb      	ldrb	r3, [r7, #3]
 8007cd8:	f003 030f 	and.w	r3, r3, #15
 8007cdc:	687a      	ldr	r2, [r7, #4]
 8007cde:	7912      	ldrb	r2, [r2, #4]
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d901      	bls.n	8007ce8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	e04f      	b.n	8007d88 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007ce8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	da0f      	bge.n	8007d10 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007cf0:	78fb      	ldrb	r3, [r7, #3]
 8007cf2:	f003 020f 	and.w	r2, r3, #15
 8007cf6:	4613      	mov	r3, r2
 8007cf8:	00db      	lsls	r3, r3, #3
 8007cfa:	4413      	add	r3, r2
 8007cfc:	009b      	lsls	r3, r3, #2
 8007cfe:	3310      	adds	r3, #16
 8007d00:	687a      	ldr	r2, [r7, #4]
 8007d02:	4413      	add	r3, r2
 8007d04:	3304      	adds	r3, #4
 8007d06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	705a      	strb	r2, [r3, #1]
 8007d0e:	e00d      	b.n	8007d2c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007d10:	78fa      	ldrb	r2, [r7, #3]
 8007d12:	4613      	mov	r3, r2
 8007d14:	00db      	lsls	r3, r3, #3
 8007d16:	4413      	add	r3, r2
 8007d18:	009b      	lsls	r3, r3, #2
 8007d1a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007d1e:	687a      	ldr	r2, [r7, #4]
 8007d20:	4413      	add	r3, r2
 8007d22:	3304      	adds	r3, #4
 8007d24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2201      	movs	r2, #1
 8007d30:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007d32:	78fb      	ldrb	r3, [r7, #3]
 8007d34:	f003 030f 	and.w	r3, r3, #15
 8007d38:	b2da      	uxtb	r2, r3
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007d44:	2b01      	cmp	r3, #1
 8007d46:	d101      	bne.n	8007d4c <HAL_PCD_EP_SetStall+0x82>
 8007d48:	2302      	movs	r3, #2
 8007d4a:	e01d      	b.n	8007d88 <HAL_PCD_EP_SetStall+0xbe>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2201      	movs	r2, #1
 8007d50:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	68f9      	ldr	r1, [r7, #12]
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f003 ff4e 	bl	800bbfc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007d60:	78fb      	ldrb	r3, [r7, #3]
 8007d62:	f003 030f 	and.w	r3, r3, #15
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d109      	bne.n	8007d7e <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6818      	ldr	r0, [r3, #0]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	7999      	ldrb	r1, [r3, #6]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007d78:	461a      	mov	r2, r3
 8007d7a:	f004 f93f 	bl	800bffc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2200      	movs	r2, #0
 8007d82:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007d86:	2300      	movs	r3, #0
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3710      	adds	r7, #16
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}

08007d90 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b084      	sub	sp, #16
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
 8007d98:	460b      	mov	r3, r1
 8007d9a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007d9c:	78fb      	ldrb	r3, [r7, #3]
 8007d9e:	f003 030f 	and.w	r3, r3, #15
 8007da2:	687a      	ldr	r2, [r7, #4]
 8007da4:	7912      	ldrb	r2, [r2, #4]
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d901      	bls.n	8007dae <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007daa:	2301      	movs	r3, #1
 8007dac:	e042      	b.n	8007e34 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007dae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	da0f      	bge.n	8007dd6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007db6:	78fb      	ldrb	r3, [r7, #3]
 8007db8:	f003 020f 	and.w	r2, r3, #15
 8007dbc:	4613      	mov	r3, r2
 8007dbe:	00db      	lsls	r3, r3, #3
 8007dc0:	4413      	add	r3, r2
 8007dc2:	009b      	lsls	r3, r3, #2
 8007dc4:	3310      	adds	r3, #16
 8007dc6:	687a      	ldr	r2, [r7, #4]
 8007dc8:	4413      	add	r3, r2
 8007dca:	3304      	adds	r3, #4
 8007dcc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2201      	movs	r2, #1
 8007dd2:	705a      	strb	r2, [r3, #1]
 8007dd4:	e00f      	b.n	8007df6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007dd6:	78fb      	ldrb	r3, [r7, #3]
 8007dd8:	f003 020f 	and.w	r2, r3, #15
 8007ddc:	4613      	mov	r3, r2
 8007dde:	00db      	lsls	r3, r3, #3
 8007de0:	4413      	add	r3, r2
 8007de2:	009b      	lsls	r3, r3, #2
 8007de4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007de8:	687a      	ldr	r2, [r7, #4]
 8007dea:	4413      	add	r3, r2
 8007dec:	3304      	adds	r3, #4
 8007dee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	2200      	movs	r2, #0
 8007df4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007dfc:	78fb      	ldrb	r3, [r7, #3]
 8007dfe:	f003 030f 	and.w	r3, r3, #15
 8007e02:	b2da      	uxtb	r2, r3
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007e0e:	2b01      	cmp	r3, #1
 8007e10:	d101      	bne.n	8007e16 <HAL_PCD_EP_ClrStall+0x86>
 8007e12:	2302      	movs	r3, #2
 8007e14:	e00e      	b.n	8007e34 <HAL_PCD_EP_ClrStall+0xa4>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2201      	movs	r2, #1
 8007e1a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	68f9      	ldr	r1, [r7, #12]
 8007e24:	4618      	mov	r0, r3
 8007e26:	f003 ff57 	bl	800bcd8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007e32:	2300      	movs	r3, #0
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	3710      	adds	r7, #16
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}

08007e3c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b084      	sub	sp, #16
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
 8007e44:	460b      	mov	r3, r1
 8007e46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8007e48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	da0c      	bge.n	8007e6a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007e50:	78fb      	ldrb	r3, [r7, #3]
 8007e52:	f003 020f 	and.w	r2, r3, #15
 8007e56:	4613      	mov	r3, r2
 8007e58:	00db      	lsls	r3, r3, #3
 8007e5a:	4413      	add	r3, r2
 8007e5c:	009b      	lsls	r3, r3, #2
 8007e5e:	3310      	adds	r3, #16
 8007e60:	687a      	ldr	r2, [r7, #4]
 8007e62:	4413      	add	r3, r2
 8007e64:	3304      	adds	r3, #4
 8007e66:	60fb      	str	r3, [r7, #12]
 8007e68:	e00c      	b.n	8007e84 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007e6a:	78fb      	ldrb	r3, [r7, #3]
 8007e6c:	f003 020f 	and.w	r2, r3, #15
 8007e70:	4613      	mov	r3, r2
 8007e72:	00db      	lsls	r3, r3, #3
 8007e74:	4413      	add	r3, r2
 8007e76:	009b      	lsls	r3, r3, #2
 8007e78:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007e7c:	687a      	ldr	r2, [r7, #4]
 8007e7e:	4413      	add	r3, r2
 8007e80:	3304      	adds	r3, #4
 8007e82:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	68f9      	ldr	r1, [r7, #12]
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f003 fd76 	bl	800b97c <USB_EPStopXfer>
 8007e90:	4603      	mov	r3, r0
 8007e92:	72fb      	strb	r3, [r7, #11]

  return ret;
 8007e94:	7afb      	ldrb	r3, [r7, #11]
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3710      	adds	r7, #16
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}

08007e9e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007e9e:	b580      	push	{r7, lr}
 8007ea0:	b08a      	sub	sp, #40	@ 0x28
 8007ea2:	af02      	add	r7, sp, #8
 8007ea4:	6078      	str	r0, [r7, #4]
 8007ea6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007eb2:	683a      	ldr	r2, [r7, #0]
 8007eb4:	4613      	mov	r3, r2
 8007eb6:	00db      	lsls	r3, r3, #3
 8007eb8:	4413      	add	r3, r2
 8007eba:	009b      	lsls	r3, r3, #2
 8007ebc:	3310      	adds	r3, #16
 8007ebe:	687a      	ldr	r2, [r7, #4]
 8007ec0:	4413      	add	r3, r2
 8007ec2:	3304      	adds	r3, #4
 8007ec4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	695a      	ldr	r2, [r3, #20]
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	691b      	ldr	r3, [r3, #16]
 8007ece:	429a      	cmp	r2, r3
 8007ed0:	d901      	bls.n	8007ed6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	e06b      	b.n	8007fae <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	691a      	ldr	r2, [r3, #16]
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	695b      	ldr	r3, [r3, #20]
 8007ede:	1ad3      	subs	r3, r2, r3
 8007ee0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	689b      	ldr	r3, [r3, #8]
 8007ee6:	69fa      	ldr	r2, [r7, #28]
 8007ee8:	429a      	cmp	r2, r3
 8007eea:	d902      	bls.n	8007ef2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	689b      	ldr	r3, [r3, #8]
 8007ef0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007ef2:	69fb      	ldr	r3, [r7, #28]
 8007ef4:	3303      	adds	r3, #3
 8007ef6:	089b      	lsrs	r3, r3, #2
 8007ef8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007efa:	e02a      	b.n	8007f52 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	691a      	ldr	r2, [r3, #16]
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	695b      	ldr	r3, [r3, #20]
 8007f04:	1ad3      	subs	r3, r2, r3
 8007f06:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	689b      	ldr	r3, [r3, #8]
 8007f0c:	69fa      	ldr	r2, [r7, #28]
 8007f0e:	429a      	cmp	r2, r3
 8007f10:	d902      	bls.n	8007f18 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	689b      	ldr	r3, [r3, #8]
 8007f16:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007f18:	69fb      	ldr	r3, [r7, #28]
 8007f1a:	3303      	adds	r3, #3
 8007f1c:	089b      	lsrs	r3, r3, #2
 8007f1e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	68d9      	ldr	r1, [r3, #12]
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	b2da      	uxtb	r2, r3
 8007f28:	69fb      	ldr	r3, [r7, #28]
 8007f2a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007f30:	9300      	str	r3, [sp, #0]
 8007f32:	4603      	mov	r3, r0
 8007f34:	6978      	ldr	r0, [r7, #20]
 8007f36:	f003 fdcb 	bl	800bad0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	68da      	ldr	r2, [r3, #12]
 8007f3e:	69fb      	ldr	r3, [r7, #28]
 8007f40:	441a      	add	r2, r3
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	695a      	ldr	r2, [r3, #20]
 8007f4a:	69fb      	ldr	r3, [r7, #28]
 8007f4c:	441a      	add	r2, r3
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	015a      	lsls	r2, r3, #5
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	4413      	add	r3, r2
 8007f5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f5e:	699b      	ldr	r3, [r3, #24]
 8007f60:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007f62:	69ba      	ldr	r2, [r7, #24]
 8007f64:	429a      	cmp	r2, r3
 8007f66:	d809      	bhi.n	8007f7c <PCD_WriteEmptyTxFifo+0xde>
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	695a      	ldr	r2, [r3, #20]
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007f70:	429a      	cmp	r2, r3
 8007f72:	d203      	bcs.n	8007f7c <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	691b      	ldr	r3, [r3, #16]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d1bf      	bne.n	8007efc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	691a      	ldr	r2, [r3, #16]
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	695b      	ldr	r3, [r3, #20]
 8007f84:	429a      	cmp	r2, r3
 8007f86:	d811      	bhi.n	8007fac <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	f003 030f 	and.w	r3, r3, #15
 8007f8e:	2201      	movs	r2, #1
 8007f90:	fa02 f303 	lsl.w	r3, r2, r3
 8007f94:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	43db      	mvns	r3, r3
 8007fa2:	6939      	ldr	r1, [r7, #16]
 8007fa4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007fa8:	4013      	ands	r3, r2
 8007faa:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8007fac:	2300      	movs	r3, #0
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3720      	adds	r7, #32
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
	...

08007fb8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b088      	sub	sp, #32
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
 8007fc0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fc8:	69fb      	ldr	r3, [r7, #28]
 8007fca:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007fcc:	69fb      	ldr	r3, [r7, #28]
 8007fce:	333c      	adds	r3, #60	@ 0x3c
 8007fd0:	3304      	adds	r3, #4
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	015a      	lsls	r2, r3, #5
 8007fda:	69bb      	ldr	r3, [r7, #24]
 8007fdc:	4413      	add	r3, r2
 8007fde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fe2:	689b      	ldr	r3, [r3, #8]
 8007fe4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	799b      	ldrb	r3, [r3, #6]
 8007fea:	2b01      	cmp	r3, #1
 8007fec:	d17b      	bne.n	80080e6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007fee:	693b      	ldr	r3, [r7, #16]
 8007ff0:	f003 0308 	and.w	r3, r3, #8
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d015      	beq.n	8008024 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	4a61      	ldr	r2, [pc, #388]	@ (8008180 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	f240 80b9 	bls.w	8008174 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008008:	2b00      	cmp	r3, #0
 800800a:	f000 80b3 	beq.w	8008174 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	015a      	lsls	r2, r3, #5
 8008012:	69bb      	ldr	r3, [r7, #24]
 8008014:	4413      	add	r3, r2
 8008016:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800801a:	461a      	mov	r2, r3
 800801c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008020:	6093      	str	r3, [r2, #8]
 8008022:	e0a7      	b.n	8008174 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	f003 0320 	and.w	r3, r3, #32
 800802a:	2b00      	cmp	r3, #0
 800802c:	d009      	beq.n	8008042 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	015a      	lsls	r2, r3, #5
 8008032:	69bb      	ldr	r3, [r7, #24]
 8008034:	4413      	add	r3, r2
 8008036:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800803a:	461a      	mov	r2, r3
 800803c:	2320      	movs	r3, #32
 800803e:	6093      	str	r3, [r2, #8]
 8008040:	e098      	b.n	8008174 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008048:	2b00      	cmp	r3, #0
 800804a:	f040 8093 	bne.w	8008174 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	4a4b      	ldr	r2, [pc, #300]	@ (8008180 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d90f      	bls.n	8008076 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800805c:	2b00      	cmp	r3, #0
 800805e:	d00a      	beq.n	8008076 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	015a      	lsls	r2, r3, #5
 8008064:	69bb      	ldr	r3, [r7, #24]
 8008066:	4413      	add	r3, r2
 8008068:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800806c:	461a      	mov	r2, r3
 800806e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008072:	6093      	str	r3, [r2, #8]
 8008074:	e07e      	b.n	8008174 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8008076:	683a      	ldr	r2, [r7, #0]
 8008078:	4613      	mov	r3, r2
 800807a:	00db      	lsls	r3, r3, #3
 800807c:	4413      	add	r3, r2
 800807e:	009b      	lsls	r3, r3, #2
 8008080:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008084:	687a      	ldr	r2, [r7, #4]
 8008086:	4413      	add	r3, r2
 8008088:	3304      	adds	r3, #4
 800808a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	6a1a      	ldr	r2, [r3, #32]
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	0159      	lsls	r1, r3, #5
 8008094:	69bb      	ldr	r3, [r7, #24]
 8008096:	440b      	add	r3, r1
 8008098:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800809c:	691b      	ldr	r3, [r3, #16]
 800809e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80080a2:	1ad2      	subs	r2, r2, r3
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d114      	bne.n	80080d8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	691b      	ldr	r3, [r3, #16]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d109      	bne.n	80080ca <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6818      	ldr	r0, [r3, #0]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80080c0:	461a      	mov	r2, r3
 80080c2:	2101      	movs	r1, #1
 80080c4:	f003 ff9a 	bl	800bffc <USB_EP0_OutStart>
 80080c8:	e006      	b.n	80080d8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	68da      	ldr	r2, [r3, #12]
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	695b      	ldr	r3, [r3, #20]
 80080d2:	441a      	add	r2, r3
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	b2db      	uxtb	r3, r3
 80080dc:	4619      	mov	r1, r3
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f015 fc1e 	bl	801d920 <HAL_PCD_DataOutStageCallback>
 80080e4:	e046      	b.n	8008174 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80080e6:	697b      	ldr	r3, [r7, #20]
 80080e8:	4a26      	ldr	r2, [pc, #152]	@ (8008184 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d124      	bne.n	8008138 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d00a      	beq.n	800810e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	015a      	lsls	r2, r3, #5
 80080fc:	69bb      	ldr	r3, [r7, #24]
 80080fe:	4413      	add	r3, r2
 8008100:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008104:	461a      	mov	r2, r3
 8008106:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800810a:	6093      	str	r3, [r2, #8]
 800810c:	e032      	b.n	8008174 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	f003 0320 	and.w	r3, r3, #32
 8008114:	2b00      	cmp	r3, #0
 8008116:	d008      	beq.n	800812a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	015a      	lsls	r2, r3, #5
 800811c:	69bb      	ldr	r3, [r7, #24]
 800811e:	4413      	add	r3, r2
 8008120:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008124:	461a      	mov	r2, r3
 8008126:	2320      	movs	r3, #32
 8008128:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	b2db      	uxtb	r3, r3
 800812e:	4619      	mov	r1, r3
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f015 fbf5 	bl	801d920 <HAL_PCD_DataOutStageCallback>
 8008136:	e01d      	b.n	8008174 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d114      	bne.n	8008168 <PCD_EP_OutXfrComplete_int+0x1b0>
 800813e:	6879      	ldr	r1, [r7, #4]
 8008140:	683a      	ldr	r2, [r7, #0]
 8008142:	4613      	mov	r3, r2
 8008144:	00db      	lsls	r3, r3, #3
 8008146:	4413      	add	r3, r2
 8008148:	009b      	lsls	r3, r3, #2
 800814a:	440b      	add	r3, r1
 800814c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d108      	bne.n	8008168 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6818      	ldr	r0, [r3, #0]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008160:	461a      	mov	r2, r3
 8008162:	2100      	movs	r1, #0
 8008164:	f003 ff4a 	bl	800bffc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	b2db      	uxtb	r3, r3
 800816c:	4619      	mov	r1, r3
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f015 fbd6 	bl	801d920 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8008174:	2300      	movs	r3, #0
}
 8008176:	4618      	mov	r0, r3
 8008178:	3720      	adds	r7, #32
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}
 800817e:	bf00      	nop
 8008180:	4f54300a 	.word	0x4f54300a
 8008184:	4f54310a 	.word	0x4f54310a

08008188 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b086      	sub	sp, #24
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	333c      	adds	r3, #60	@ 0x3c
 80081a0:	3304      	adds	r3, #4
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	015a      	lsls	r2, r3, #5
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	4413      	add	r3, r2
 80081ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081b2:	689b      	ldr	r3, [r3, #8]
 80081b4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	4a15      	ldr	r2, [pc, #84]	@ (8008210 <PCD_EP_OutSetupPacket_int+0x88>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d90e      	bls.n	80081dc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d009      	beq.n	80081dc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	015a      	lsls	r2, r3, #5
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	4413      	add	r3, r2
 80081d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081d4:	461a      	mov	r2, r3
 80081d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80081da:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f015 fb8d 	bl	801d8fc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	4a0a      	ldr	r2, [pc, #40]	@ (8008210 <PCD_EP_OutSetupPacket_int+0x88>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d90c      	bls.n	8008204 <PCD_EP_OutSetupPacket_int+0x7c>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	799b      	ldrb	r3, [r3, #6]
 80081ee:	2b01      	cmp	r3, #1
 80081f0:	d108      	bne.n	8008204 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6818      	ldr	r0, [r3, #0]
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80081fc:	461a      	mov	r2, r3
 80081fe:	2101      	movs	r1, #1
 8008200:	f003 fefc 	bl	800bffc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8008204:	2300      	movs	r3, #0
}
 8008206:	4618      	mov	r0, r3
 8008208:	3718      	adds	r7, #24
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}
 800820e:	bf00      	nop
 8008210:	4f54300a 	.word	0x4f54300a

08008214 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8008214:	b480      	push	{r7}
 8008216:	b085      	sub	sp, #20
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	460b      	mov	r3, r1
 800821e:	70fb      	strb	r3, [r7, #3]
 8008220:	4613      	mov	r3, r2
 8008222:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800822a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800822c:	78fb      	ldrb	r3, [r7, #3]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d107      	bne.n	8008242 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8008232:	883b      	ldrh	r3, [r7, #0]
 8008234:	0419      	lsls	r1, r3, #16
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	68ba      	ldr	r2, [r7, #8]
 800823c:	430a      	orrs	r2, r1
 800823e:	629a      	str	r2, [r3, #40]	@ 0x28
 8008240:	e028      	b.n	8008294 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008248:	0c1b      	lsrs	r3, r3, #16
 800824a:	68ba      	ldr	r2, [r7, #8]
 800824c:	4413      	add	r3, r2
 800824e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008250:	2300      	movs	r3, #0
 8008252:	73fb      	strb	r3, [r7, #15]
 8008254:	e00d      	b.n	8008272 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681a      	ldr	r2, [r3, #0]
 800825a:	7bfb      	ldrb	r3, [r7, #15]
 800825c:	3340      	adds	r3, #64	@ 0x40
 800825e:	009b      	lsls	r3, r3, #2
 8008260:	4413      	add	r3, r2
 8008262:	685b      	ldr	r3, [r3, #4]
 8008264:	0c1b      	lsrs	r3, r3, #16
 8008266:	68ba      	ldr	r2, [r7, #8]
 8008268:	4413      	add	r3, r2
 800826a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800826c:	7bfb      	ldrb	r3, [r7, #15]
 800826e:	3301      	adds	r3, #1
 8008270:	73fb      	strb	r3, [r7, #15]
 8008272:	7bfa      	ldrb	r2, [r7, #15]
 8008274:	78fb      	ldrb	r3, [r7, #3]
 8008276:	3b01      	subs	r3, #1
 8008278:	429a      	cmp	r2, r3
 800827a:	d3ec      	bcc.n	8008256 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800827c:	883b      	ldrh	r3, [r7, #0]
 800827e:	0418      	lsls	r0, r3, #16
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6819      	ldr	r1, [r3, #0]
 8008284:	78fb      	ldrb	r3, [r7, #3]
 8008286:	3b01      	subs	r3, #1
 8008288:	68ba      	ldr	r2, [r7, #8]
 800828a:	4302      	orrs	r2, r0
 800828c:	3340      	adds	r3, #64	@ 0x40
 800828e:	009b      	lsls	r3, r3, #2
 8008290:	440b      	add	r3, r1
 8008292:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008294:	2300      	movs	r3, #0
}
 8008296:	4618      	mov	r0, r3
 8008298:	3714      	adds	r7, #20
 800829a:	46bd      	mov	sp, r7
 800829c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a0:	4770      	bx	lr

080082a2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80082a2:	b480      	push	{r7}
 80082a4:	b083      	sub	sp, #12
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	6078      	str	r0, [r7, #4]
 80082aa:	460b      	mov	r3, r1
 80082ac:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	887a      	ldrh	r2, [r7, #2]
 80082b4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80082b6:	2300      	movs	r3, #0
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	370c      	adds	r7, #12
 80082bc:	46bd      	mov	sp, r7
 80082be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c2:	4770      	bx	lr

080082c4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b083      	sub	sp, #12
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
 80082cc:	460b      	mov	r3, r1
 80082ce:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80082d0:	bf00      	nop
 80082d2:	370c      	adds	r7, #12
 80082d4:	46bd      	mov	sp, r7
 80082d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082da:	4770      	bx	lr

080082dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b086      	sub	sp, #24
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d101      	bne.n	80082ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80082ea:	2301      	movs	r3, #1
 80082ec:	e267      	b.n	80087be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f003 0301 	and.w	r3, r3, #1
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d075      	beq.n	80083e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80082fa:	4b88      	ldr	r3, [pc, #544]	@ (800851c <HAL_RCC_OscConfig+0x240>)
 80082fc:	689b      	ldr	r3, [r3, #8]
 80082fe:	f003 030c 	and.w	r3, r3, #12
 8008302:	2b04      	cmp	r3, #4
 8008304:	d00c      	beq.n	8008320 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008306:	4b85      	ldr	r3, [pc, #532]	@ (800851c <HAL_RCC_OscConfig+0x240>)
 8008308:	689b      	ldr	r3, [r3, #8]
 800830a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800830e:	2b08      	cmp	r3, #8
 8008310:	d112      	bne.n	8008338 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008312:	4b82      	ldr	r3, [pc, #520]	@ (800851c <HAL_RCC_OscConfig+0x240>)
 8008314:	685b      	ldr	r3, [r3, #4]
 8008316:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800831a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800831e:	d10b      	bne.n	8008338 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008320:	4b7e      	ldr	r3, [pc, #504]	@ (800851c <HAL_RCC_OscConfig+0x240>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008328:	2b00      	cmp	r3, #0
 800832a:	d05b      	beq.n	80083e4 <HAL_RCC_OscConfig+0x108>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d157      	bne.n	80083e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008334:	2301      	movs	r3, #1
 8008336:	e242      	b.n	80087be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	685b      	ldr	r3, [r3, #4]
 800833c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008340:	d106      	bne.n	8008350 <HAL_RCC_OscConfig+0x74>
 8008342:	4b76      	ldr	r3, [pc, #472]	@ (800851c <HAL_RCC_OscConfig+0x240>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	4a75      	ldr	r2, [pc, #468]	@ (800851c <HAL_RCC_OscConfig+0x240>)
 8008348:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800834c:	6013      	str	r3, [r2, #0]
 800834e:	e01d      	b.n	800838c <HAL_RCC_OscConfig+0xb0>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	685b      	ldr	r3, [r3, #4]
 8008354:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008358:	d10c      	bne.n	8008374 <HAL_RCC_OscConfig+0x98>
 800835a:	4b70      	ldr	r3, [pc, #448]	@ (800851c <HAL_RCC_OscConfig+0x240>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	4a6f      	ldr	r2, [pc, #444]	@ (800851c <HAL_RCC_OscConfig+0x240>)
 8008360:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008364:	6013      	str	r3, [r2, #0]
 8008366:	4b6d      	ldr	r3, [pc, #436]	@ (800851c <HAL_RCC_OscConfig+0x240>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4a6c      	ldr	r2, [pc, #432]	@ (800851c <HAL_RCC_OscConfig+0x240>)
 800836c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008370:	6013      	str	r3, [r2, #0]
 8008372:	e00b      	b.n	800838c <HAL_RCC_OscConfig+0xb0>
 8008374:	4b69      	ldr	r3, [pc, #420]	@ (800851c <HAL_RCC_OscConfig+0x240>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	4a68      	ldr	r2, [pc, #416]	@ (800851c <HAL_RCC_OscConfig+0x240>)
 800837a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800837e:	6013      	str	r3, [r2, #0]
 8008380:	4b66      	ldr	r3, [pc, #408]	@ (800851c <HAL_RCC_OscConfig+0x240>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4a65      	ldr	r2, [pc, #404]	@ (800851c <HAL_RCC_OscConfig+0x240>)
 8008386:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800838a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d013      	beq.n	80083bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008394:	f7fc fc52 	bl	8004c3c <HAL_GetTick>
 8008398:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800839a:	e008      	b.n	80083ae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800839c:	f7fc fc4e 	bl	8004c3c <HAL_GetTick>
 80083a0:	4602      	mov	r2, r0
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	1ad3      	subs	r3, r2, r3
 80083a6:	2b64      	cmp	r3, #100	@ 0x64
 80083a8:	d901      	bls.n	80083ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80083aa:	2303      	movs	r3, #3
 80083ac:	e207      	b.n	80087be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80083ae:	4b5b      	ldr	r3, [pc, #364]	@ (800851c <HAL_RCC_OscConfig+0x240>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d0f0      	beq.n	800839c <HAL_RCC_OscConfig+0xc0>
 80083ba:	e014      	b.n	80083e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80083bc:	f7fc fc3e 	bl	8004c3c <HAL_GetTick>
 80083c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80083c2:	e008      	b.n	80083d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80083c4:	f7fc fc3a 	bl	8004c3c <HAL_GetTick>
 80083c8:	4602      	mov	r2, r0
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	1ad3      	subs	r3, r2, r3
 80083ce:	2b64      	cmp	r3, #100	@ 0x64
 80083d0:	d901      	bls.n	80083d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80083d2:	2303      	movs	r3, #3
 80083d4:	e1f3      	b.n	80087be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80083d6:	4b51      	ldr	r3, [pc, #324]	@ (800851c <HAL_RCC_OscConfig+0x240>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d1f0      	bne.n	80083c4 <HAL_RCC_OscConfig+0xe8>
 80083e2:	e000      	b.n	80083e6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80083e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f003 0302 	and.w	r3, r3, #2
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d063      	beq.n	80084ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80083f2:	4b4a      	ldr	r3, [pc, #296]	@ (800851c <HAL_RCC_OscConfig+0x240>)
 80083f4:	689b      	ldr	r3, [r3, #8]
 80083f6:	f003 030c 	and.w	r3, r3, #12
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d00b      	beq.n	8008416 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80083fe:	4b47      	ldr	r3, [pc, #284]	@ (800851c <HAL_RCC_OscConfig+0x240>)
 8008400:	689b      	ldr	r3, [r3, #8]
 8008402:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8008406:	2b08      	cmp	r3, #8
 8008408:	d11c      	bne.n	8008444 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800840a:	4b44      	ldr	r3, [pc, #272]	@ (800851c <HAL_RCC_OscConfig+0x240>)
 800840c:	685b      	ldr	r3, [r3, #4]
 800840e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008412:	2b00      	cmp	r3, #0
 8008414:	d116      	bne.n	8008444 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008416:	4b41      	ldr	r3, [pc, #260]	@ (800851c <HAL_RCC_OscConfig+0x240>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f003 0302 	and.w	r3, r3, #2
 800841e:	2b00      	cmp	r3, #0
 8008420:	d005      	beq.n	800842e <HAL_RCC_OscConfig+0x152>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	68db      	ldr	r3, [r3, #12]
 8008426:	2b01      	cmp	r3, #1
 8008428:	d001      	beq.n	800842e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800842a:	2301      	movs	r3, #1
 800842c:	e1c7      	b.n	80087be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800842e:	4b3b      	ldr	r3, [pc, #236]	@ (800851c <HAL_RCC_OscConfig+0x240>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	691b      	ldr	r3, [r3, #16]
 800843a:	00db      	lsls	r3, r3, #3
 800843c:	4937      	ldr	r1, [pc, #220]	@ (800851c <HAL_RCC_OscConfig+0x240>)
 800843e:	4313      	orrs	r3, r2
 8008440:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008442:	e03a      	b.n	80084ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	68db      	ldr	r3, [r3, #12]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d020      	beq.n	800848e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800844c:	4b34      	ldr	r3, [pc, #208]	@ (8008520 <HAL_RCC_OscConfig+0x244>)
 800844e:	2201      	movs	r2, #1
 8008450:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008452:	f7fc fbf3 	bl	8004c3c <HAL_GetTick>
 8008456:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008458:	e008      	b.n	800846c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800845a:	f7fc fbef 	bl	8004c3c <HAL_GetTick>
 800845e:	4602      	mov	r2, r0
 8008460:	693b      	ldr	r3, [r7, #16]
 8008462:	1ad3      	subs	r3, r2, r3
 8008464:	2b02      	cmp	r3, #2
 8008466:	d901      	bls.n	800846c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008468:	2303      	movs	r3, #3
 800846a:	e1a8      	b.n	80087be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800846c:	4b2b      	ldr	r3, [pc, #172]	@ (800851c <HAL_RCC_OscConfig+0x240>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f003 0302 	and.w	r3, r3, #2
 8008474:	2b00      	cmp	r3, #0
 8008476:	d0f0      	beq.n	800845a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008478:	4b28      	ldr	r3, [pc, #160]	@ (800851c <HAL_RCC_OscConfig+0x240>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	691b      	ldr	r3, [r3, #16]
 8008484:	00db      	lsls	r3, r3, #3
 8008486:	4925      	ldr	r1, [pc, #148]	@ (800851c <HAL_RCC_OscConfig+0x240>)
 8008488:	4313      	orrs	r3, r2
 800848a:	600b      	str	r3, [r1, #0]
 800848c:	e015      	b.n	80084ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800848e:	4b24      	ldr	r3, [pc, #144]	@ (8008520 <HAL_RCC_OscConfig+0x244>)
 8008490:	2200      	movs	r2, #0
 8008492:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008494:	f7fc fbd2 	bl	8004c3c <HAL_GetTick>
 8008498:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800849a:	e008      	b.n	80084ae <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800849c:	f7fc fbce 	bl	8004c3c <HAL_GetTick>
 80084a0:	4602      	mov	r2, r0
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	1ad3      	subs	r3, r2, r3
 80084a6:	2b02      	cmp	r3, #2
 80084a8:	d901      	bls.n	80084ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80084aa:	2303      	movs	r3, #3
 80084ac:	e187      	b.n	80087be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80084ae:	4b1b      	ldr	r3, [pc, #108]	@ (800851c <HAL_RCC_OscConfig+0x240>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f003 0302 	and.w	r3, r3, #2
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d1f0      	bne.n	800849c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f003 0308 	and.w	r3, r3, #8
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d036      	beq.n	8008534 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	695b      	ldr	r3, [r3, #20]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d016      	beq.n	80084fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80084ce:	4b15      	ldr	r3, [pc, #84]	@ (8008524 <HAL_RCC_OscConfig+0x248>)
 80084d0:	2201      	movs	r2, #1
 80084d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084d4:	f7fc fbb2 	bl	8004c3c <HAL_GetTick>
 80084d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80084da:	e008      	b.n	80084ee <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80084dc:	f7fc fbae 	bl	8004c3c <HAL_GetTick>
 80084e0:	4602      	mov	r2, r0
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	1ad3      	subs	r3, r2, r3
 80084e6:	2b02      	cmp	r3, #2
 80084e8:	d901      	bls.n	80084ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80084ea:	2303      	movs	r3, #3
 80084ec:	e167      	b.n	80087be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80084ee:	4b0b      	ldr	r3, [pc, #44]	@ (800851c <HAL_RCC_OscConfig+0x240>)
 80084f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80084f2:	f003 0302 	and.w	r3, r3, #2
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d0f0      	beq.n	80084dc <HAL_RCC_OscConfig+0x200>
 80084fa:	e01b      	b.n	8008534 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80084fc:	4b09      	ldr	r3, [pc, #36]	@ (8008524 <HAL_RCC_OscConfig+0x248>)
 80084fe:	2200      	movs	r2, #0
 8008500:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008502:	f7fc fb9b 	bl	8004c3c <HAL_GetTick>
 8008506:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008508:	e00e      	b.n	8008528 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800850a:	f7fc fb97 	bl	8004c3c <HAL_GetTick>
 800850e:	4602      	mov	r2, r0
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	1ad3      	subs	r3, r2, r3
 8008514:	2b02      	cmp	r3, #2
 8008516:	d907      	bls.n	8008528 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008518:	2303      	movs	r3, #3
 800851a:	e150      	b.n	80087be <HAL_RCC_OscConfig+0x4e2>
 800851c:	40023800 	.word	0x40023800
 8008520:	42470000 	.word	0x42470000
 8008524:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008528:	4b88      	ldr	r3, [pc, #544]	@ (800874c <HAL_RCC_OscConfig+0x470>)
 800852a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800852c:	f003 0302 	and.w	r3, r3, #2
 8008530:	2b00      	cmp	r3, #0
 8008532:	d1ea      	bne.n	800850a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f003 0304 	and.w	r3, r3, #4
 800853c:	2b00      	cmp	r3, #0
 800853e:	f000 8097 	beq.w	8008670 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008542:	2300      	movs	r3, #0
 8008544:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008546:	4b81      	ldr	r3, [pc, #516]	@ (800874c <HAL_RCC_OscConfig+0x470>)
 8008548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800854a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800854e:	2b00      	cmp	r3, #0
 8008550:	d10f      	bne.n	8008572 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008552:	2300      	movs	r3, #0
 8008554:	60bb      	str	r3, [r7, #8]
 8008556:	4b7d      	ldr	r3, [pc, #500]	@ (800874c <HAL_RCC_OscConfig+0x470>)
 8008558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800855a:	4a7c      	ldr	r2, [pc, #496]	@ (800874c <HAL_RCC_OscConfig+0x470>)
 800855c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008560:	6413      	str	r3, [r2, #64]	@ 0x40
 8008562:	4b7a      	ldr	r3, [pc, #488]	@ (800874c <HAL_RCC_OscConfig+0x470>)
 8008564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008566:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800856a:	60bb      	str	r3, [r7, #8]
 800856c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800856e:	2301      	movs	r3, #1
 8008570:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008572:	4b77      	ldr	r3, [pc, #476]	@ (8008750 <HAL_RCC_OscConfig+0x474>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800857a:	2b00      	cmp	r3, #0
 800857c:	d118      	bne.n	80085b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800857e:	4b74      	ldr	r3, [pc, #464]	@ (8008750 <HAL_RCC_OscConfig+0x474>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4a73      	ldr	r2, [pc, #460]	@ (8008750 <HAL_RCC_OscConfig+0x474>)
 8008584:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008588:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800858a:	f7fc fb57 	bl	8004c3c <HAL_GetTick>
 800858e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008590:	e008      	b.n	80085a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008592:	f7fc fb53 	bl	8004c3c <HAL_GetTick>
 8008596:	4602      	mov	r2, r0
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	1ad3      	subs	r3, r2, r3
 800859c:	2b02      	cmp	r3, #2
 800859e:	d901      	bls.n	80085a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80085a0:	2303      	movs	r3, #3
 80085a2:	e10c      	b.n	80087be <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80085a4:	4b6a      	ldr	r3, [pc, #424]	@ (8008750 <HAL_RCC_OscConfig+0x474>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d0f0      	beq.n	8008592 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	689b      	ldr	r3, [r3, #8]
 80085b4:	2b01      	cmp	r3, #1
 80085b6:	d106      	bne.n	80085c6 <HAL_RCC_OscConfig+0x2ea>
 80085b8:	4b64      	ldr	r3, [pc, #400]	@ (800874c <HAL_RCC_OscConfig+0x470>)
 80085ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085bc:	4a63      	ldr	r2, [pc, #396]	@ (800874c <HAL_RCC_OscConfig+0x470>)
 80085be:	f043 0301 	orr.w	r3, r3, #1
 80085c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80085c4:	e01c      	b.n	8008600 <HAL_RCC_OscConfig+0x324>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	689b      	ldr	r3, [r3, #8]
 80085ca:	2b05      	cmp	r3, #5
 80085cc:	d10c      	bne.n	80085e8 <HAL_RCC_OscConfig+0x30c>
 80085ce:	4b5f      	ldr	r3, [pc, #380]	@ (800874c <HAL_RCC_OscConfig+0x470>)
 80085d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085d2:	4a5e      	ldr	r2, [pc, #376]	@ (800874c <HAL_RCC_OscConfig+0x470>)
 80085d4:	f043 0304 	orr.w	r3, r3, #4
 80085d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80085da:	4b5c      	ldr	r3, [pc, #368]	@ (800874c <HAL_RCC_OscConfig+0x470>)
 80085dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085de:	4a5b      	ldr	r2, [pc, #364]	@ (800874c <HAL_RCC_OscConfig+0x470>)
 80085e0:	f043 0301 	orr.w	r3, r3, #1
 80085e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80085e6:	e00b      	b.n	8008600 <HAL_RCC_OscConfig+0x324>
 80085e8:	4b58      	ldr	r3, [pc, #352]	@ (800874c <HAL_RCC_OscConfig+0x470>)
 80085ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085ec:	4a57      	ldr	r2, [pc, #348]	@ (800874c <HAL_RCC_OscConfig+0x470>)
 80085ee:	f023 0301 	bic.w	r3, r3, #1
 80085f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80085f4:	4b55      	ldr	r3, [pc, #340]	@ (800874c <HAL_RCC_OscConfig+0x470>)
 80085f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085f8:	4a54      	ldr	r2, [pc, #336]	@ (800874c <HAL_RCC_OscConfig+0x470>)
 80085fa:	f023 0304 	bic.w	r3, r3, #4
 80085fe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	689b      	ldr	r3, [r3, #8]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d015      	beq.n	8008634 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008608:	f7fc fb18 	bl	8004c3c <HAL_GetTick>
 800860c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800860e:	e00a      	b.n	8008626 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008610:	f7fc fb14 	bl	8004c3c <HAL_GetTick>
 8008614:	4602      	mov	r2, r0
 8008616:	693b      	ldr	r3, [r7, #16]
 8008618:	1ad3      	subs	r3, r2, r3
 800861a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800861e:	4293      	cmp	r3, r2
 8008620:	d901      	bls.n	8008626 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008622:	2303      	movs	r3, #3
 8008624:	e0cb      	b.n	80087be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008626:	4b49      	ldr	r3, [pc, #292]	@ (800874c <HAL_RCC_OscConfig+0x470>)
 8008628:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800862a:	f003 0302 	and.w	r3, r3, #2
 800862e:	2b00      	cmp	r3, #0
 8008630:	d0ee      	beq.n	8008610 <HAL_RCC_OscConfig+0x334>
 8008632:	e014      	b.n	800865e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008634:	f7fc fb02 	bl	8004c3c <HAL_GetTick>
 8008638:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800863a:	e00a      	b.n	8008652 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800863c:	f7fc fafe 	bl	8004c3c <HAL_GetTick>
 8008640:	4602      	mov	r2, r0
 8008642:	693b      	ldr	r3, [r7, #16]
 8008644:	1ad3      	subs	r3, r2, r3
 8008646:	f241 3288 	movw	r2, #5000	@ 0x1388
 800864a:	4293      	cmp	r3, r2
 800864c:	d901      	bls.n	8008652 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800864e:	2303      	movs	r3, #3
 8008650:	e0b5      	b.n	80087be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008652:	4b3e      	ldr	r3, [pc, #248]	@ (800874c <HAL_RCC_OscConfig+0x470>)
 8008654:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008656:	f003 0302 	and.w	r3, r3, #2
 800865a:	2b00      	cmp	r3, #0
 800865c:	d1ee      	bne.n	800863c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800865e:	7dfb      	ldrb	r3, [r7, #23]
 8008660:	2b01      	cmp	r3, #1
 8008662:	d105      	bne.n	8008670 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008664:	4b39      	ldr	r3, [pc, #228]	@ (800874c <HAL_RCC_OscConfig+0x470>)
 8008666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008668:	4a38      	ldr	r2, [pc, #224]	@ (800874c <HAL_RCC_OscConfig+0x470>)
 800866a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800866e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	699b      	ldr	r3, [r3, #24]
 8008674:	2b00      	cmp	r3, #0
 8008676:	f000 80a1 	beq.w	80087bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800867a:	4b34      	ldr	r3, [pc, #208]	@ (800874c <HAL_RCC_OscConfig+0x470>)
 800867c:	689b      	ldr	r3, [r3, #8]
 800867e:	f003 030c 	and.w	r3, r3, #12
 8008682:	2b08      	cmp	r3, #8
 8008684:	d05c      	beq.n	8008740 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	699b      	ldr	r3, [r3, #24]
 800868a:	2b02      	cmp	r3, #2
 800868c:	d141      	bne.n	8008712 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800868e:	4b31      	ldr	r3, [pc, #196]	@ (8008754 <HAL_RCC_OscConfig+0x478>)
 8008690:	2200      	movs	r2, #0
 8008692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008694:	f7fc fad2 	bl	8004c3c <HAL_GetTick>
 8008698:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800869a:	e008      	b.n	80086ae <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800869c:	f7fc face 	bl	8004c3c <HAL_GetTick>
 80086a0:	4602      	mov	r2, r0
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	1ad3      	subs	r3, r2, r3
 80086a6:	2b02      	cmp	r3, #2
 80086a8:	d901      	bls.n	80086ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80086aa:	2303      	movs	r3, #3
 80086ac:	e087      	b.n	80087be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80086ae:	4b27      	ldr	r3, [pc, #156]	@ (800874c <HAL_RCC_OscConfig+0x470>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d1f0      	bne.n	800869c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	69da      	ldr	r2, [r3, #28]
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6a1b      	ldr	r3, [r3, #32]
 80086c2:	431a      	orrs	r2, r3
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086c8:	019b      	lsls	r3, r3, #6
 80086ca:	431a      	orrs	r2, r3
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086d0:	085b      	lsrs	r3, r3, #1
 80086d2:	3b01      	subs	r3, #1
 80086d4:	041b      	lsls	r3, r3, #16
 80086d6:	431a      	orrs	r2, r3
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086dc:	061b      	lsls	r3, r3, #24
 80086de:	491b      	ldr	r1, [pc, #108]	@ (800874c <HAL_RCC_OscConfig+0x470>)
 80086e0:	4313      	orrs	r3, r2
 80086e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80086e4:	4b1b      	ldr	r3, [pc, #108]	@ (8008754 <HAL_RCC_OscConfig+0x478>)
 80086e6:	2201      	movs	r2, #1
 80086e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80086ea:	f7fc faa7 	bl	8004c3c <HAL_GetTick>
 80086ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80086f0:	e008      	b.n	8008704 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80086f2:	f7fc faa3 	bl	8004c3c <HAL_GetTick>
 80086f6:	4602      	mov	r2, r0
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	1ad3      	subs	r3, r2, r3
 80086fc:	2b02      	cmp	r3, #2
 80086fe:	d901      	bls.n	8008704 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008700:	2303      	movs	r3, #3
 8008702:	e05c      	b.n	80087be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008704:	4b11      	ldr	r3, [pc, #68]	@ (800874c <HAL_RCC_OscConfig+0x470>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800870c:	2b00      	cmp	r3, #0
 800870e:	d0f0      	beq.n	80086f2 <HAL_RCC_OscConfig+0x416>
 8008710:	e054      	b.n	80087bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008712:	4b10      	ldr	r3, [pc, #64]	@ (8008754 <HAL_RCC_OscConfig+0x478>)
 8008714:	2200      	movs	r2, #0
 8008716:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008718:	f7fc fa90 	bl	8004c3c <HAL_GetTick>
 800871c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800871e:	e008      	b.n	8008732 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008720:	f7fc fa8c 	bl	8004c3c <HAL_GetTick>
 8008724:	4602      	mov	r2, r0
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	1ad3      	subs	r3, r2, r3
 800872a:	2b02      	cmp	r3, #2
 800872c:	d901      	bls.n	8008732 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800872e:	2303      	movs	r3, #3
 8008730:	e045      	b.n	80087be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008732:	4b06      	ldr	r3, [pc, #24]	@ (800874c <HAL_RCC_OscConfig+0x470>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800873a:	2b00      	cmp	r3, #0
 800873c:	d1f0      	bne.n	8008720 <HAL_RCC_OscConfig+0x444>
 800873e:	e03d      	b.n	80087bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	699b      	ldr	r3, [r3, #24]
 8008744:	2b01      	cmp	r3, #1
 8008746:	d107      	bne.n	8008758 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008748:	2301      	movs	r3, #1
 800874a:	e038      	b.n	80087be <HAL_RCC_OscConfig+0x4e2>
 800874c:	40023800 	.word	0x40023800
 8008750:	40007000 	.word	0x40007000
 8008754:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008758:	4b1b      	ldr	r3, [pc, #108]	@ (80087c8 <HAL_RCC_OscConfig+0x4ec>)
 800875a:	685b      	ldr	r3, [r3, #4]
 800875c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	699b      	ldr	r3, [r3, #24]
 8008762:	2b01      	cmp	r3, #1
 8008764:	d028      	beq.n	80087b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008770:	429a      	cmp	r2, r3
 8008772:	d121      	bne.n	80087b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800877e:	429a      	cmp	r2, r3
 8008780:	d11a      	bne.n	80087b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008782:	68fa      	ldr	r2, [r7, #12]
 8008784:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008788:	4013      	ands	r3, r2
 800878a:	687a      	ldr	r2, [r7, #4]
 800878c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800878e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008790:	4293      	cmp	r3, r2
 8008792:	d111      	bne.n	80087b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800879e:	085b      	lsrs	r3, r3, #1
 80087a0:	3b01      	subs	r3, #1
 80087a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80087a4:	429a      	cmp	r2, r3
 80087a6:	d107      	bne.n	80087b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80087b4:	429a      	cmp	r2, r3
 80087b6:	d001      	beq.n	80087bc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80087b8:	2301      	movs	r3, #1
 80087ba:	e000      	b.n	80087be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80087bc:	2300      	movs	r3, #0
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3718      	adds	r7, #24
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}
 80087c6:	bf00      	nop
 80087c8:	40023800 	.word	0x40023800

080087cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b084      	sub	sp, #16
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
 80087d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d101      	bne.n	80087e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80087dc:	2301      	movs	r3, #1
 80087de:	e0cc      	b.n	800897a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80087e0:	4b68      	ldr	r3, [pc, #416]	@ (8008984 <HAL_RCC_ClockConfig+0x1b8>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f003 0307 	and.w	r3, r3, #7
 80087e8:	683a      	ldr	r2, [r7, #0]
 80087ea:	429a      	cmp	r2, r3
 80087ec:	d90c      	bls.n	8008808 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80087ee:	4b65      	ldr	r3, [pc, #404]	@ (8008984 <HAL_RCC_ClockConfig+0x1b8>)
 80087f0:	683a      	ldr	r2, [r7, #0]
 80087f2:	b2d2      	uxtb	r2, r2
 80087f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80087f6:	4b63      	ldr	r3, [pc, #396]	@ (8008984 <HAL_RCC_ClockConfig+0x1b8>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f003 0307 	and.w	r3, r3, #7
 80087fe:	683a      	ldr	r2, [r7, #0]
 8008800:	429a      	cmp	r2, r3
 8008802:	d001      	beq.n	8008808 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008804:	2301      	movs	r3, #1
 8008806:	e0b8      	b.n	800897a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f003 0302 	and.w	r3, r3, #2
 8008810:	2b00      	cmp	r3, #0
 8008812:	d020      	beq.n	8008856 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f003 0304 	and.w	r3, r3, #4
 800881c:	2b00      	cmp	r3, #0
 800881e:	d005      	beq.n	800882c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008820:	4b59      	ldr	r3, [pc, #356]	@ (8008988 <HAL_RCC_ClockConfig+0x1bc>)
 8008822:	689b      	ldr	r3, [r3, #8]
 8008824:	4a58      	ldr	r2, [pc, #352]	@ (8008988 <HAL_RCC_ClockConfig+0x1bc>)
 8008826:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800882a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f003 0308 	and.w	r3, r3, #8
 8008834:	2b00      	cmp	r3, #0
 8008836:	d005      	beq.n	8008844 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008838:	4b53      	ldr	r3, [pc, #332]	@ (8008988 <HAL_RCC_ClockConfig+0x1bc>)
 800883a:	689b      	ldr	r3, [r3, #8]
 800883c:	4a52      	ldr	r2, [pc, #328]	@ (8008988 <HAL_RCC_ClockConfig+0x1bc>)
 800883e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008842:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008844:	4b50      	ldr	r3, [pc, #320]	@ (8008988 <HAL_RCC_ClockConfig+0x1bc>)
 8008846:	689b      	ldr	r3, [r3, #8]
 8008848:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	689b      	ldr	r3, [r3, #8]
 8008850:	494d      	ldr	r1, [pc, #308]	@ (8008988 <HAL_RCC_ClockConfig+0x1bc>)
 8008852:	4313      	orrs	r3, r2
 8008854:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f003 0301 	and.w	r3, r3, #1
 800885e:	2b00      	cmp	r3, #0
 8008860:	d044      	beq.n	80088ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	685b      	ldr	r3, [r3, #4]
 8008866:	2b01      	cmp	r3, #1
 8008868:	d107      	bne.n	800887a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800886a:	4b47      	ldr	r3, [pc, #284]	@ (8008988 <HAL_RCC_ClockConfig+0x1bc>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008872:	2b00      	cmp	r3, #0
 8008874:	d119      	bne.n	80088aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008876:	2301      	movs	r3, #1
 8008878:	e07f      	b.n	800897a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	685b      	ldr	r3, [r3, #4]
 800887e:	2b02      	cmp	r3, #2
 8008880:	d003      	beq.n	800888a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008886:	2b03      	cmp	r3, #3
 8008888:	d107      	bne.n	800889a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800888a:	4b3f      	ldr	r3, [pc, #252]	@ (8008988 <HAL_RCC_ClockConfig+0x1bc>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008892:	2b00      	cmp	r3, #0
 8008894:	d109      	bne.n	80088aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008896:	2301      	movs	r3, #1
 8008898:	e06f      	b.n	800897a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800889a:	4b3b      	ldr	r3, [pc, #236]	@ (8008988 <HAL_RCC_ClockConfig+0x1bc>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f003 0302 	and.w	r3, r3, #2
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d101      	bne.n	80088aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80088a6:	2301      	movs	r3, #1
 80088a8:	e067      	b.n	800897a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80088aa:	4b37      	ldr	r3, [pc, #220]	@ (8008988 <HAL_RCC_ClockConfig+0x1bc>)
 80088ac:	689b      	ldr	r3, [r3, #8]
 80088ae:	f023 0203 	bic.w	r2, r3, #3
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	685b      	ldr	r3, [r3, #4]
 80088b6:	4934      	ldr	r1, [pc, #208]	@ (8008988 <HAL_RCC_ClockConfig+0x1bc>)
 80088b8:	4313      	orrs	r3, r2
 80088ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80088bc:	f7fc f9be 	bl	8004c3c <HAL_GetTick>
 80088c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80088c2:	e00a      	b.n	80088da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80088c4:	f7fc f9ba 	bl	8004c3c <HAL_GetTick>
 80088c8:	4602      	mov	r2, r0
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	1ad3      	subs	r3, r2, r3
 80088ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d901      	bls.n	80088da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80088d6:	2303      	movs	r3, #3
 80088d8:	e04f      	b.n	800897a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80088da:	4b2b      	ldr	r3, [pc, #172]	@ (8008988 <HAL_RCC_ClockConfig+0x1bc>)
 80088dc:	689b      	ldr	r3, [r3, #8]
 80088de:	f003 020c 	and.w	r2, r3, #12
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	685b      	ldr	r3, [r3, #4]
 80088e6:	009b      	lsls	r3, r3, #2
 80088e8:	429a      	cmp	r2, r3
 80088ea:	d1eb      	bne.n	80088c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80088ec:	4b25      	ldr	r3, [pc, #148]	@ (8008984 <HAL_RCC_ClockConfig+0x1b8>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f003 0307 	and.w	r3, r3, #7
 80088f4:	683a      	ldr	r2, [r7, #0]
 80088f6:	429a      	cmp	r2, r3
 80088f8:	d20c      	bcs.n	8008914 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80088fa:	4b22      	ldr	r3, [pc, #136]	@ (8008984 <HAL_RCC_ClockConfig+0x1b8>)
 80088fc:	683a      	ldr	r2, [r7, #0]
 80088fe:	b2d2      	uxtb	r2, r2
 8008900:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008902:	4b20      	ldr	r3, [pc, #128]	@ (8008984 <HAL_RCC_ClockConfig+0x1b8>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f003 0307 	and.w	r3, r3, #7
 800890a:	683a      	ldr	r2, [r7, #0]
 800890c:	429a      	cmp	r2, r3
 800890e:	d001      	beq.n	8008914 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008910:	2301      	movs	r3, #1
 8008912:	e032      	b.n	800897a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f003 0304 	and.w	r3, r3, #4
 800891c:	2b00      	cmp	r3, #0
 800891e:	d008      	beq.n	8008932 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008920:	4b19      	ldr	r3, [pc, #100]	@ (8008988 <HAL_RCC_ClockConfig+0x1bc>)
 8008922:	689b      	ldr	r3, [r3, #8]
 8008924:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	68db      	ldr	r3, [r3, #12]
 800892c:	4916      	ldr	r1, [pc, #88]	@ (8008988 <HAL_RCC_ClockConfig+0x1bc>)
 800892e:	4313      	orrs	r3, r2
 8008930:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f003 0308 	and.w	r3, r3, #8
 800893a:	2b00      	cmp	r3, #0
 800893c:	d009      	beq.n	8008952 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800893e:	4b12      	ldr	r3, [pc, #72]	@ (8008988 <HAL_RCC_ClockConfig+0x1bc>)
 8008940:	689b      	ldr	r3, [r3, #8]
 8008942:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	691b      	ldr	r3, [r3, #16]
 800894a:	00db      	lsls	r3, r3, #3
 800894c:	490e      	ldr	r1, [pc, #56]	@ (8008988 <HAL_RCC_ClockConfig+0x1bc>)
 800894e:	4313      	orrs	r3, r2
 8008950:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008952:	f000 f821 	bl	8008998 <HAL_RCC_GetSysClockFreq>
 8008956:	4602      	mov	r2, r0
 8008958:	4b0b      	ldr	r3, [pc, #44]	@ (8008988 <HAL_RCC_ClockConfig+0x1bc>)
 800895a:	689b      	ldr	r3, [r3, #8]
 800895c:	091b      	lsrs	r3, r3, #4
 800895e:	f003 030f 	and.w	r3, r3, #15
 8008962:	490a      	ldr	r1, [pc, #40]	@ (800898c <HAL_RCC_ClockConfig+0x1c0>)
 8008964:	5ccb      	ldrb	r3, [r1, r3]
 8008966:	fa22 f303 	lsr.w	r3, r2, r3
 800896a:	4a09      	ldr	r2, [pc, #36]	@ (8008990 <HAL_RCC_ClockConfig+0x1c4>)
 800896c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800896e:	4b09      	ldr	r3, [pc, #36]	@ (8008994 <HAL_RCC_ClockConfig+0x1c8>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	4618      	mov	r0, r3
 8008974:	f7fb f84e 	bl	8003a14 <HAL_InitTick>

  return HAL_OK;
 8008978:	2300      	movs	r3, #0
}
 800897a:	4618      	mov	r0, r3
 800897c:	3710      	adds	r7, #16
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}
 8008982:	bf00      	nop
 8008984:	40023c00 	.word	0x40023c00
 8008988:	40023800 	.word	0x40023800
 800898c:	08023c64 	.word	0x08023c64
 8008990:	20000008 	.word	0x20000008
 8008994:	2000000c 	.word	0x2000000c

08008998 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008998:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800899c:	b090      	sub	sp, #64	@ 0x40
 800899e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80089a0:	2300      	movs	r3, #0
 80089a2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80089a4:	2300      	movs	r3, #0
 80089a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80089a8:	2300      	movs	r3, #0
 80089aa:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80089ac:	2300      	movs	r3, #0
 80089ae:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80089b0:	4b59      	ldr	r3, [pc, #356]	@ (8008b18 <HAL_RCC_GetSysClockFreq+0x180>)
 80089b2:	689b      	ldr	r3, [r3, #8]
 80089b4:	f003 030c 	and.w	r3, r3, #12
 80089b8:	2b08      	cmp	r3, #8
 80089ba:	d00d      	beq.n	80089d8 <HAL_RCC_GetSysClockFreq+0x40>
 80089bc:	2b08      	cmp	r3, #8
 80089be:	f200 80a1 	bhi.w	8008b04 <HAL_RCC_GetSysClockFreq+0x16c>
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d002      	beq.n	80089cc <HAL_RCC_GetSysClockFreq+0x34>
 80089c6:	2b04      	cmp	r3, #4
 80089c8:	d003      	beq.n	80089d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80089ca:	e09b      	b.n	8008b04 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80089cc:	4b53      	ldr	r3, [pc, #332]	@ (8008b1c <HAL_RCC_GetSysClockFreq+0x184>)
 80089ce:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80089d0:	e09b      	b.n	8008b0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80089d2:	4b53      	ldr	r3, [pc, #332]	@ (8008b20 <HAL_RCC_GetSysClockFreq+0x188>)
 80089d4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80089d6:	e098      	b.n	8008b0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80089d8:	4b4f      	ldr	r3, [pc, #316]	@ (8008b18 <HAL_RCC_GetSysClockFreq+0x180>)
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80089e0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80089e2:	4b4d      	ldr	r3, [pc, #308]	@ (8008b18 <HAL_RCC_GetSysClockFreq+0x180>)
 80089e4:	685b      	ldr	r3, [r3, #4]
 80089e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d028      	beq.n	8008a40 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80089ee:	4b4a      	ldr	r3, [pc, #296]	@ (8008b18 <HAL_RCC_GetSysClockFreq+0x180>)
 80089f0:	685b      	ldr	r3, [r3, #4]
 80089f2:	099b      	lsrs	r3, r3, #6
 80089f4:	2200      	movs	r2, #0
 80089f6:	623b      	str	r3, [r7, #32]
 80089f8:	627a      	str	r2, [r7, #36]	@ 0x24
 80089fa:	6a3b      	ldr	r3, [r7, #32]
 80089fc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008a00:	2100      	movs	r1, #0
 8008a02:	4b47      	ldr	r3, [pc, #284]	@ (8008b20 <HAL_RCC_GetSysClockFreq+0x188>)
 8008a04:	fb03 f201 	mul.w	r2, r3, r1
 8008a08:	2300      	movs	r3, #0
 8008a0a:	fb00 f303 	mul.w	r3, r0, r3
 8008a0e:	4413      	add	r3, r2
 8008a10:	4a43      	ldr	r2, [pc, #268]	@ (8008b20 <HAL_RCC_GetSysClockFreq+0x188>)
 8008a12:	fba0 1202 	umull	r1, r2, r0, r2
 8008a16:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008a18:	460a      	mov	r2, r1
 8008a1a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8008a1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a1e:	4413      	add	r3, r2
 8008a20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008a22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a24:	2200      	movs	r2, #0
 8008a26:	61bb      	str	r3, [r7, #24]
 8008a28:	61fa      	str	r2, [r7, #28]
 8008a2a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008a2e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8008a32:	f7f7 fc25 	bl	8000280 <__aeabi_uldivmod>
 8008a36:	4602      	mov	r2, r0
 8008a38:	460b      	mov	r3, r1
 8008a3a:	4613      	mov	r3, r2
 8008a3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a3e:	e053      	b.n	8008ae8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008a40:	4b35      	ldr	r3, [pc, #212]	@ (8008b18 <HAL_RCC_GetSysClockFreq+0x180>)
 8008a42:	685b      	ldr	r3, [r3, #4]
 8008a44:	099b      	lsrs	r3, r3, #6
 8008a46:	2200      	movs	r2, #0
 8008a48:	613b      	str	r3, [r7, #16]
 8008a4a:	617a      	str	r2, [r7, #20]
 8008a4c:	693b      	ldr	r3, [r7, #16]
 8008a4e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008a52:	f04f 0b00 	mov.w	fp, #0
 8008a56:	4652      	mov	r2, sl
 8008a58:	465b      	mov	r3, fp
 8008a5a:	f04f 0000 	mov.w	r0, #0
 8008a5e:	f04f 0100 	mov.w	r1, #0
 8008a62:	0159      	lsls	r1, r3, #5
 8008a64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008a68:	0150      	lsls	r0, r2, #5
 8008a6a:	4602      	mov	r2, r0
 8008a6c:	460b      	mov	r3, r1
 8008a6e:	ebb2 080a 	subs.w	r8, r2, sl
 8008a72:	eb63 090b 	sbc.w	r9, r3, fp
 8008a76:	f04f 0200 	mov.w	r2, #0
 8008a7a:	f04f 0300 	mov.w	r3, #0
 8008a7e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008a82:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008a86:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008a8a:	ebb2 0408 	subs.w	r4, r2, r8
 8008a8e:	eb63 0509 	sbc.w	r5, r3, r9
 8008a92:	f04f 0200 	mov.w	r2, #0
 8008a96:	f04f 0300 	mov.w	r3, #0
 8008a9a:	00eb      	lsls	r3, r5, #3
 8008a9c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008aa0:	00e2      	lsls	r2, r4, #3
 8008aa2:	4614      	mov	r4, r2
 8008aa4:	461d      	mov	r5, r3
 8008aa6:	eb14 030a 	adds.w	r3, r4, sl
 8008aaa:	603b      	str	r3, [r7, #0]
 8008aac:	eb45 030b 	adc.w	r3, r5, fp
 8008ab0:	607b      	str	r3, [r7, #4]
 8008ab2:	f04f 0200 	mov.w	r2, #0
 8008ab6:	f04f 0300 	mov.w	r3, #0
 8008aba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008abe:	4629      	mov	r1, r5
 8008ac0:	028b      	lsls	r3, r1, #10
 8008ac2:	4621      	mov	r1, r4
 8008ac4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008ac8:	4621      	mov	r1, r4
 8008aca:	028a      	lsls	r2, r1, #10
 8008acc:	4610      	mov	r0, r2
 8008ace:	4619      	mov	r1, r3
 8008ad0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	60bb      	str	r3, [r7, #8]
 8008ad6:	60fa      	str	r2, [r7, #12]
 8008ad8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008adc:	f7f7 fbd0 	bl	8000280 <__aeabi_uldivmod>
 8008ae0:	4602      	mov	r2, r0
 8008ae2:	460b      	mov	r3, r1
 8008ae4:	4613      	mov	r3, r2
 8008ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8008ae8:	4b0b      	ldr	r3, [pc, #44]	@ (8008b18 <HAL_RCC_GetSysClockFreq+0x180>)
 8008aea:	685b      	ldr	r3, [r3, #4]
 8008aec:	0c1b      	lsrs	r3, r3, #16
 8008aee:	f003 0303 	and.w	r3, r3, #3
 8008af2:	3301      	adds	r3, #1
 8008af4:	005b      	lsls	r3, r3, #1
 8008af6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8008af8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b00:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008b02:	e002      	b.n	8008b0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008b04:	4b05      	ldr	r3, [pc, #20]	@ (8008b1c <HAL_RCC_GetSysClockFreq+0x184>)
 8008b06:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008b08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008b0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	3740      	adds	r7, #64	@ 0x40
 8008b10:	46bd      	mov	sp, r7
 8008b12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008b16:	bf00      	nop
 8008b18:	40023800 	.word	0x40023800
 8008b1c:	00f42400 	.word	0x00f42400
 8008b20:	017d7840 	.word	0x017d7840

08008b24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008b24:	b480      	push	{r7}
 8008b26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008b28:	4b03      	ldr	r3, [pc, #12]	@ (8008b38 <HAL_RCC_GetHCLKFreq+0x14>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b34:	4770      	bx	lr
 8008b36:	bf00      	nop
 8008b38:	20000008 	.word	0x20000008

08008b3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008b40:	f7ff fff0 	bl	8008b24 <HAL_RCC_GetHCLKFreq>
 8008b44:	4602      	mov	r2, r0
 8008b46:	4b05      	ldr	r3, [pc, #20]	@ (8008b5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008b48:	689b      	ldr	r3, [r3, #8]
 8008b4a:	0a9b      	lsrs	r3, r3, #10
 8008b4c:	f003 0307 	and.w	r3, r3, #7
 8008b50:	4903      	ldr	r1, [pc, #12]	@ (8008b60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008b52:	5ccb      	ldrb	r3, [r1, r3]
 8008b54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	bd80      	pop	{r7, pc}
 8008b5c:	40023800 	.word	0x40023800
 8008b60:	08023c74 	.word	0x08023c74

08008b64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008b68:	f7ff ffdc 	bl	8008b24 <HAL_RCC_GetHCLKFreq>
 8008b6c:	4602      	mov	r2, r0
 8008b6e:	4b05      	ldr	r3, [pc, #20]	@ (8008b84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008b70:	689b      	ldr	r3, [r3, #8]
 8008b72:	0b5b      	lsrs	r3, r3, #13
 8008b74:	f003 0307 	and.w	r3, r3, #7
 8008b78:	4903      	ldr	r1, [pc, #12]	@ (8008b88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008b7a:	5ccb      	ldrb	r3, [r1, r3]
 8008b7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	bd80      	pop	{r7, pc}
 8008b84:	40023800 	.word	0x40023800
 8008b88:	08023c74 	.word	0x08023c74

08008b8c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	b083      	sub	sp, #12
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
 8008b94:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	220f      	movs	r2, #15
 8008b9a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008b9c:	4b12      	ldr	r3, [pc, #72]	@ (8008be8 <HAL_RCC_GetClockConfig+0x5c>)
 8008b9e:	689b      	ldr	r3, [r3, #8]
 8008ba0:	f003 0203 	and.w	r2, r3, #3
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008ba8:	4b0f      	ldr	r3, [pc, #60]	@ (8008be8 <HAL_RCC_GetClockConfig+0x5c>)
 8008baa:	689b      	ldr	r3, [r3, #8]
 8008bac:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8008be8 <HAL_RCC_GetClockConfig+0x5c>)
 8008bb6:	689b      	ldr	r3, [r3, #8]
 8008bb8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008bc0:	4b09      	ldr	r3, [pc, #36]	@ (8008be8 <HAL_RCC_GetClockConfig+0x5c>)
 8008bc2:	689b      	ldr	r3, [r3, #8]
 8008bc4:	08db      	lsrs	r3, r3, #3
 8008bc6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008bce:	4b07      	ldr	r3, [pc, #28]	@ (8008bec <HAL_RCC_GetClockConfig+0x60>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f003 0207 	and.w	r2, r3, #7
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	601a      	str	r2, [r3, #0]
}
 8008bda:	bf00      	nop
 8008bdc:	370c      	adds	r7, #12
 8008bde:	46bd      	mov	sp, r7
 8008be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be4:	4770      	bx	lr
 8008be6:	bf00      	nop
 8008be8:	40023800 	.word	0x40023800
 8008bec:	40023c00 	.word	0x40023c00

08008bf0 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b084      	sub	sp, #16
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	60f8      	str	r0, [r7, #12]
 8008bf8:	60b9      	str	r1, [r7, #8]
 8008bfa:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d101      	bne.n	8008c06 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8008c02:	2301      	movs	r3, #1
 8008c04:	e038      	b.n	8008c78 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8008c0c:	b2db      	uxtb	r3, r3
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d106      	bne.n	8008c20 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	2200      	movs	r2, #0
 8008c16:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8008c1a:	68f8      	ldr	r0, [r7, #12]
 8008c1c:	f7f9 f8f0 	bl	8001e00 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681a      	ldr	r2, [r3, #0]
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	3308      	adds	r3, #8
 8008c28:	4619      	mov	r1, r3
 8008c2a:	4610      	mov	r0, r2
 8008c2c:	f001 fe5e 	bl	800a8ec <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	6818      	ldr	r0, [r3, #0]
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	689b      	ldr	r3, [r3, #8]
 8008c38:	461a      	mov	r2, r3
 8008c3a:	68b9      	ldr	r1, [r7, #8]
 8008c3c:	f001 fec0 	bl	800a9c0 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	6858      	ldr	r0, [r3, #4]
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	689a      	ldr	r2, [r3, #8]
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c4c:	6879      	ldr	r1, [r7, #4]
 8008c4e:	f001 fee5 	bl	800aa1c <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	68fa      	ldr	r2, [r7, #12]
 8008c58:	6892      	ldr	r2, [r2, #8]
 8008c5a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	68fa      	ldr	r2, [r7, #12]
 8008c64:	6892      	ldr	r2, [r2, #8]
 8008c66:	f041 0101 	orr.w	r1, r1, #1
 8008c6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	2201      	movs	r2, #1
 8008c72:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 8008c76:	2300      	movs	r3, #0
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	3710      	adds	r7, #16
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}

08008c80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b082      	sub	sp, #8
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d101      	bne.n	8008c92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008c8e:	2301      	movs	r3, #1
 8008c90:	e041      	b.n	8008d16 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c98:	b2db      	uxtb	r3, r3
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d106      	bne.n	8008cac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f7fb fbc0 	bl	800442c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2202      	movs	r2, #2
 8008cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681a      	ldr	r2, [r3, #0]
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	3304      	adds	r3, #4
 8008cbc:	4619      	mov	r1, r3
 8008cbe:	4610      	mov	r0, r2
 8008cc0:	f000 f9b6 	bl	8009030 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2201      	movs	r2, #1
 8008cd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2201      	movs	r2, #1
 8008cd8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2201      	movs	r2, #1
 8008ce0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2201      	movs	r2, #1
 8008ce8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2201      	movs	r2, #1
 8008cf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2201      	movs	r2, #1
 8008cf8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2201      	movs	r2, #1
 8008d00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2201      	movs	r2, #1
 8008d08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2201      	movs	r2, #1
 8008d10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008d14:	2300      	movs	r3, #0
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	3708      	adds	r7, #8
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}
	...

08008d20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008d20:	b480      	push	{r7}
 8008d22:	b085      	sub	sp, #20
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008d2e:	b2db      	uxtb	r3, r3
 8008d30:	2b01      	cmp	r3, #1
 8008d32:	d001      	beq.n	8008d38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008d34:	2301      	movs	r3, #1
 8008d36:	e04e      	b.n	8008dd6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2202      	movs	r2, #2
 8008d3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	68da      	ldr	r2, [r3, #12]
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f042 0201 	orr.w	r2, r2, #1
 8008d4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	4a23      	ldr	r2, [pc, #140]	@ (8008de4 <HAL_TIM_Base_Start_IT+0xc4>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d022      	beq.n	8008da0 <HAL_TIM_Base_Start_IT+0x80>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d62:	d01d      	beq.n	8008da0 <HAL_TIM_Base_Start_IT+0x80>
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	4a1f      	ldr	r2, [pc, #124]	@ (8008de8 <HAL_TIM_Base_Start_IT+0xc8>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d018      	beq.n	8008da0 <HAL_TIM_Base_Start_IT+0x80>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	4a1e      	ldr	r2, [pc, #120]	@ (8008dec <HAL_TIM_Base_Start_IT+0xcc>)
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d013      	beq.n	8008da0 <HAL_TIM_Base_Start_IT+0x80>
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	4a1c      	ldr	r2, [pc, #112]	@ (8008df0 <HAL_TIM_Base_Start_IT+0xd0>)
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	d00e      	beq.n	8008da0 <HAL_TIM_Base_Start_IT+0x80>
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	4a1b      	ldr	r2, [pc, #108]	@ (8008df4 <HAL_TIM_Base_Start_IT+0xd4>)
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	d009      	beq.n	8008da0 <HAL_TIM_Base_Start_IT+0x80>
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4a19      	ldr	r2, [pc, #100]	@ (8008df8 <HAL_TIM_Base_Start_IT+0xd8>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d004      	beq.n	8008da0 <HAL_TIM_Base_Start_IT+0x80>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	4a18      	ldr	r2, [pc, #96]	@ (8008dfc <HAL_TIM_Base_Start_IT+0xdc>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d111      	bne.n	8008dc4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	689b      	ldr	r3, [r3, #8]
 8008da6:	f003 0307 	and.w	r3, r3, #7
 8008daa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	2b06      	cmp	r3, #6
 8008db0:	d010      	beq.n	8008dd4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	681a      	ldr	r2, [r3, #0]
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f042 0201 	orr.w	r2, r2, #1
 8008dc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008dc2:	e007      	b.n	8008dd4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	681a      	ldr	r2, [r3, #0]
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f042 0201 	orr.w	r2, r2, #1
 8008dd2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008dd4:	2300      	movs	r3, #0
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3714      	adds	r7, #20
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de0:	4770      	bx	lr
 8008de2:	bf00      	nop
 8008de4:	40010000 	.word	0x40010000
 8008de8:	40000400 	.word	0x40000400
 8008dec:	40000800 	.word	0x40000800
 8008df0:	40000c00 	.word	0x40000c00
 8008df4:	40010400 	.word	0x40010400
 8008df8:	40014000 	.word	0x40014000
 8008dfc:	40001800 	.word	0x40001800

08008e00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b084      	sub	sp, #16
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	68db      	ldr	r3, [r3, #12]
 8008e0e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	691b      	ldr	r3, [r3, #16]
 8008e16:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	f003 0302 	and.w	r3, r3, #2
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d020      	beq.n	8008e64 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	f003 0302 	and.w	r3, r3, #2
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d01b      	beq.n	8008e64 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f06f 0202 	mvn.w	r2, #2
 8008e34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2201      	movs	r2, #1
 8008e3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	699b      	ldr	r3, [r3, #24]
 8008e42:	f003 0303 	and.w	r3, r3, #3
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d003      	beq.n	8008e52 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f000 f8d2 	bl	8008ff4 <HAL_TIM_IC_CaptureCallback>
 8008e50:	e005      	b.n	8008e5e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f000 f8c4 	bl	8008fe0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f000 f8d5 	bl	8009008 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2200      	movs	r2, #0
 8008e62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	f003 0304 	and.w	r3, r3, #4
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d020      	beq.n	8008eb0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	f003 0304 	and.w	r3, r3, #4
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d01b      	beq.n	8008eb0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f06f 0204 	mvn.w	r2, #4
 8008e80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2202      	movs	r2, #2
 8008e86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	699b      	ldr	r3, [r3, #24]
 8008e8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d003      	beq.n	8008e9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f000 f8ac 	bl	8008ff4 <HAL_TIM_IC_CaptureCallback>
 8008e9c:	e005      	b.n	8008eaa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f000 f89e 	bl	8008fe0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	f000 f8af 	bl	8009008 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2200      	movs	r2, #0
 8008eae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	f003 0308 	and.w	r3, r3, #8
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d020      	beq.n	8008efc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	f003 0308 	and.w	r3, r3, #8
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d01b      	beq.n	8008efc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f06f 0208 	mvn.w	r2, #8
 8008ecc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2204      	movs	r2, #4
 8008ed2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	69db      	ldr	r3, [r3, #28]
 8008eda:	f003 0303 	and.w	r3, r3, #3
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d003      	beq.n	8008eea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f000 f886 	bl	8008ff4 <HAL_TIM_IC_CaptureCallback>
 8008ee8:	e005      	b.n	8008ef6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f000 f878 	bl	8008fe0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f000 f889 	bl	8009008 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2200      	movs	r2, #0
 8008efa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	f003 0310 	and.w	r3, r3, #16
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d020      	beq.n	8008f48 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	f003 0310 	and.w	r3, r3, #16
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d01b      	beq.n	8008f48 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f06f 0210 	mvn.w	r2, #16
 8008f18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2208      	movs	r2, #8
 8008f1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	69db      	ldr	r3, [r3, #28]
 8008f26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d003      	beq.n	8008f36 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f000 f860 	bl	8008ff4 <HAL_TIM_IC_CaptureCallback>
 8008f34:	e005      	b.n	8008f42 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f000 f852 	bl	8008fe0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f000 f863 	bl	8009008 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2200      	movs	r2, #0
 8008f46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	f003 0301 	and.w	r3, r3, #1
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d00c      	beq.n	8008f6c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	f003 0301 	and.w	r3, r3, #1
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d007      	beq.n	8008f6c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f06f 0201 	mvn.w	r2, #1
 8008f64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f7f9 f856 	bl	8002018 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d00c      	beq.n	8008f90 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d007      	beq.n	8008f90 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008f88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f000 f97c 	bl	8009288 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d00c      	beq.n	8008fb4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d007      	beq.n	8008fb4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008fac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f000 f834 	bl	800901c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	f003 0320 	and.w	r3, r3, #32
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d00c      	beq.n	8008fd8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	f003 0320 	and.w	r3, r3, #32
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d007      	beq.n	8008fd8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f06f 0220 	mvn.w	r2, #32
 8008fd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f000 f94e 	bl	8009274 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008fd8:	bf00      	nop
 8008fda:	3710      	adds	r7, #16
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}

08008fe0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	b083      	sub	sp, #12
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008fe8:	bf00      	nop
 8008fea:	370c      	adds	r7, #12
 8008fec:	46bd      	mov	sp, r7
 8008fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff2:	4770      	bx	lr

08008ff4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b083      	sub	sp, #12
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008ffc:	bf00      	nop
 8008ffe:	370c      	adds	r7, #12
 8009000:	46bd      	mov	sp, r7
 8009002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009006:	4770      	bx	lr

08009008 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009008:	b480      	push	{r7}
 800900a:	b083      	sub	sp, #12
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009010:	bf00      	nop
 8009012:	370c      	adds	r7, #12
 8009014:	46bd      	mov	sp, r7
 8009016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901a:	4770      	bx	lr

0800901c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800901c:	b480      	push	{r7}
 800901e:	b083      	sub	sp, #12
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009024:	bf00      	nop
 8009026:	370c      	adds	r7, #12
 8009028:	46bd      	mov	sp, r7
 800902a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902e:	4770      	bx	lr

08009030 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009030:	b480      	push	{r7}
 8009032:	b085      	sub	sp, #20
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
 8009038:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	4a43      	ldr	r2, [pc, #268]	@ (8009150 <TIM_Base_SetConfig+0x120>)
 8009044:	4293      	cmp	r3, r2
 8009046:	d013      	beq.n	8009070 <TIM_Base_SetConfig+0x40>
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800904e:	d00f      	beq.n	8009070 <TIM_Base_SetConfig+0x40>
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	4a40      	ldr	r2, [pc, #256]	@ (8009154 <TIM_Base_SetConfig+0x124>)
 8009054:	4293      	cmp	r3, r2
 8009056:	d00b      	beq.n	8009070 <TIM_Base_SetConfig+0x40>
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	4a3f      	ldr	r2, [pc, #252]	@ (8009158 <TIM_Base_SetConfig+0x128>)
 800905c:	4293      	cmp	r3, r2
 800905e:	d007      	beq.n	8009070 <TIM_Base_SetConfig+0x40>
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	4a3e      	ldr	r2, [pc, #248]	@ (800915c <TIM_Base_SetConfig+0x12c>)
 8009064:	4293      	cmp	r3, r2
 8009066:	d003      	beq.n	8009070 <TIM_Base_SetConfig+0x40>
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	4a3d      	ldr	r2, [pc, #244]	@ (8009160 <TIM_Base_SetConfig+0x130>)
 800906c:	4293      	cmp	r3, r2
 800906e:	d108      	bne.n	8009082 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009076:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	685b      	ldr	r3, [r3, #4]
 800907c:	68fa      	ldr	r2, [r7, #12]
 800907e:	4313      	orrs	r3, r2
 8009080:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	4a32      	ldr	r2, [pc, #200]	@ (8009150 <TIM_Base_SetConfig+0x120>)
 8009086:	4293      	cmp	r3, r2
 8009088:	d02b      	beq.n	80090e2 <TIM_Base_SetConfig+0xb2>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009090:	d027      	beq.n	80090e2 <TIM_Base_SetConfig+0xb2>
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	4a2f      	ldr	r2, [pc, #188]	@ (8009154 <TIM_Base_SetConfig+0x124>)
 8009096:	4293      	cmp	r3, r2
 8009098:	d023      	beq.n	80090e2 <TIM_Base_SetConfig+0xb2>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	4a2e      	ldr	r2, [pc, #184]	@ (8009158 <TIM_Base_SetConfig+0x128>)
 800909e:	4293      	cmp	r3, r2
 80090a0:	d01f      	beq.n	80090e2 <TIM_Base_SetConfig+0xb2>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	4a2d      	ldr	r2, [pc, #180]	@ (800915c <TIM_Base_SetConfig+0x12c>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d01b      	beq.n	80090e2 <TIM_Base_SetConfig+0xb2>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	4a2c      	ldr	r2, [pc, #176]	@ (8009160 <TIM_Base_SetConfig+0x130>)
 80090ae:	4293      	cmp	r3, r2
 80090b0:	d017      	beq.n	80090e2 <TIM_Base_SetConfig+0xb2>
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	4a2b      	ldr	r2, [pc, #172]	@ (8009164 <TIM_Base_SetConfig+0x134>)
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d013      	beq.n	80090e2 <TIM_Base_SetConfig+0xb2>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	4a2a      	ldr	r2, [pc, #168]	@ (8009168 <TIM_Base_SetConfig+0x138>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d00f      	beq.n	80090e2 <TIM_Base_SetConfig+0xb2>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	4a29      	ldr	r2, [pc, #164]	@ (800916c <TIM_Base_SetConfig+0x13c>)
 80090c6:	4293      	cmp	r3, r2
 80090c8:	d00b      	beq.n	80090e2 <TIM_Base_SetConfig+0xb2>
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	4a28      	ldr	r2, [pc, #160]	@ (8009170 <TIM_Base_SetConfig+0x140>)
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d007      	beq.n	80090e2 <TIM_Base_SetConfig+0xb2>
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	4a27      	ldr	r2, [pc, #156]	@ (8009174 <TIM_Base_SetConfig+0x144>)
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d003      	beq.n	80090e2 <TIM_Base_SetConfig+0xb2>
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	4a26      	ldr	r2, [pc, #152]	@ (8009178 <TIM_Base_SetConfig+0x148>)
 80090de:	4293      	cmp	r3, r2
 80090e0:	d108      	bne.n	80090f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80090e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	68db      	ldr	r3, [r3, #12]
 80090ee:	68fa      	ldr	r2, [r7, #12]
 80090f0:	4313      	orrs	r3, r2
 80090f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	695b      	ldr	r3, [r3, #20]
 80090fe:	4313      	orrs	r3, r2
 8009100:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	689a      	ldr	r2, [r3, #8]
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	681a      	ldr	r2, [r3, #0]
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	4a0e      	ldr	r2, [pc, #56]	@ (8009150 <TIM_Base_SetConfig+0x120>)
 8009116:	4293      	cmp	r3, r2
 8009118:	d003      	beq.n	8009122 <TIM_Base_SetConfig+0xf2>
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	4a10      	ldr	r2, [pc, #64]	@ (8009160 <TIM_Base_SetConfig+0x130>)
 800911e:	4293      	cmp	r3, r2
 8009120:	d103      	bne.n	800912a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	691a      	ldr	r2, [r3, #16]
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f043 0204 	orr.w	r2, r3, #4
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2201      	movs	r2, #1
 800913a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	68fa      	ldr	r2, [r7, #12]
 8009140:	601a      	str	r2, [r3, #0]
}
 8009142:	bf00      	nop
 8009144:	3714      	adds	r7, #20
 8009146:	46bd      	mov	sp, r7
 8009148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914c:	4770      	bx	lr
 800914e:	bf00      	nop
 8009150:	40010000 	.word	0x40010000
 8009154:	40000400 	.word	0x40000400
 8009158:	40000800 	.word	0x40000800
 800915c:	40000c00 	.word	0x40000c00
 8009160:	40010400 	.word	0x40010400
 8009164:	40014000 	.word	0x40014000
 8009168:	40014400 	.word	0x40014400
 800916c:	40014800 	.word	0x40014800
 8009170:	40001800 	.word	0x40001800
 8009174:	40001c00 	.word	0x40001c00
 8009178:	40002000 	.word	0x40002000

0800917c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800917c:	b480      	push	{r7}
 800917e:	b085      	sub	sp, #20
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
 8009184:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800918c:	2b01      	cmp	r3, #1
 800918e:	d101      	bne.n	8009194 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009190:	2302      	movs	r3, #2
 8009192:	e05a      	b.n	800924a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2201      	movs	r2, #1
 8009198:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2202      	movs	r2, #2
 80091a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	685b      	ldr	r3, [r3, #4]
 80091aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	689b      	ldr	r3, [r3, #8]
 80091b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	68fa      	ldr	r2, [r7, #12]
 80091c2:	4313      	orrs	r3, r2
 80091c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	68fa      	ldr	r2, [r7, #12]
 80091cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	4a21      	ldr	r2, [pc, #132]	@ (8009258 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80091d4:	4293      	cmp	r3, r2
 80091d6:	d022      	beq.n	800921e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80091e0:	d01d      	beq.n	800921e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	4a1d      	ldr	r2, [pc, #116]	@ (800925c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80091e8:	4293      	cmp	r3, r2
 80091ea:	d018      	beq.n	800921e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	4a1b      	ldr	r2, [pc, #108]	@ (8009260 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80091f2:	4293      	cmp	r3, r2
 80091f4:	d013      	beq.n	800921e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	4a1a      	ldr	r2, [pc, #104]	@ (8009264 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80091fc:	4293      	cmp	r3, r2
 80091fe:	d00e      	beq.n	800921e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	4a18      	ldr	r2, [pc, #96]	@ (8009268 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009206:	4293      	cmp	r3, r2
 8009208:	d009      	beq.n	800921e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	4a17      	ldr	r2, [pc, #92]	@ (800926c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009210:	4293      	cmp	r3, r2
 8009212:	d004      	beq.n	800921e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	4a15      	ldr	r2, [pc, #84]	@ (8009270 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800921a:	4293      	cmp	r3, r2
 800921c:	d10c      	bne.n	8009238 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009224:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	685b      	ldr	r3, [r3, #4]
 800922a:	68ba      	ldr	r2, [r7, #8]
 800922c:	4313      	orrs	r3, r2
 800922e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	68ba      	ldr	r2, [r7, #8]
 8009236:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2201      	movs	r2, #1
 800923c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2200      	movs	r2, #0
 8009244:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009248:	2300      	movs	r3, #0
}
 800924a:	4618      	mov	r0, r3
 800924c:	3714      	adds	r7, #20
 800924e:	46bd      	mov	sp, r7
 8009250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009254:	4770      	bx	lr
 8009256:	bf00      	nop
 8009258:	40010000 	.word	0x40010000
 800925c:	40000400 	.word	0x40000400
 8009260:	40000800 	.word	0x40000800
 8009264:	40000c00 	.word	0x40000c00
 8009268:	40010400 	.word	0x40010400
 800926c:	40014000 	.word	0x40014000
 8009270:	40001800 	.word	0x40001800

08009274 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009274:	b480      	push	{r7}
 8009276:	b083      	sub	sp, #12
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800927c:	bf00      	nop
 800927e:	370c      	adds	r7, #12
 8009280:	46bd      	mov	sp, r7
 8009282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009286:	4770      	bx	lr

08009288 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009288:	b480      	push	{r7}
 800928a:	b083      	sub	sp, #12
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009290:	bf00      	nop
 8009292:	370c      	adds	r7, #12
 8009294:	46bd      	mov	sp, r7
 8009296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929a:	4770      	bx	lr

0800929c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b082      	sub	sp, #8
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d101      	bne.n	80092ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80092aa:	2301      	movs	r3, #1
 80092ac:	e042      	b.n	8009334 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80092b4:	b2db      	uxtb	r3, r3
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d106      	bne.n	80092c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2200      	movs	r2, #0
 80092be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f7fb f958 	bl	8004578 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2224      	movs	r2, #36	@ 0x24
 80092cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	68da      	ldr	r2, [r3, #12]
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80092de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f001 f88f 	bl	800a404 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	691a      	ldr	r2, [r3, #16]
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80092f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	695a      	ldr	r2, [r3, #20]
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009304:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	68da      	ldr	r2, [r3, #12]
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009314:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2200      	movs	r2, #0
 800931a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2220      	movs	r2, #32
 8009320:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2220      	movs	r2, #32
 8009328:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2200      	movs	r2, #0
 8009330:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009332:	2300      	movs	r3, #0
}
 8009334:	4618      	mov	r0, r3
 8009336:	3708      	adds	r7, #8
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}

0800933c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b08a      	sub	sp, #40	@ 0x28
 8009340:	af02      	add	r7, sp, #8
 8009342:	60f8      	str	r0, [r7, #12]
 8009344:	60b9      	str	r1, [r7, #8]
 8009346:	603b      	str	r3, [r7, #0]
 8009348:	4613      	mov	r3, r2
 800934a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800934c:	2300      	movs	r3, #0
 800934e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009356:	b2db      	uxtb	r3, r3
 8009358:	2b20      	cmp	r3, #32
 800935a:	d175      	bne.n	8009448 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d002      	beq.n	8009368 <HAL_UART_Transmit+0x2c>
 8009362:	88fb      	ldrh	r3, [r7, #6]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d101      	bne.n	800936c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009368:	2301      	movs	r3, #1
 800936a:	e06e      	b.n	800944a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	2200      	movs	r2, #0
 8009370:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	2221      	movs	r2, #33	@ 0x21
 8009376:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800937a:	f7fb fc5f 	bl	8004c3c <HAL_GetTick>
 800937e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	88fa      	ldrh	r2, [r7, #6]
 8009384:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	88fa      	ldrh	r2, [r7, #6]
 800938a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	689b      	ldr	r3, [r3, #8]
 8009390:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009394:	d108      	bne.n	80093a8 <HAL_UART_Transmit+0x6c>
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	691b      	ldr	r3, [r3, #16]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d104      	bne.n	80093a8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800939e:	2300      	movs	r3, #0
 80093a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80093a2:	68bb      	ldr	r3, [r7, #8]
 80093a4:	61bb      	str	r3, [r7, #24]
 80093a6:	e003      	b.n	80093b0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80093ac:	2300      	movs	r3, #0
 80093ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80093b0:	e02e      	b.n	8009410 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	9300      	str	r3, [sp, #0]
 80093b6:	697b      	ldr	r3, [r7, #20]
 80093b8:	2200      	movs	r2, #0
 80093ba:	2180      	movs	r1, #128	@ 0x80
 80093bc:	68f8      	ldr	r0, [r7, #12]
 80093be:	f000 fd5f 	bl	8009e80 <UART_WaitOnFlagUntilTimeout>
 80093c2:	4603      	mov	r3, r0
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d005      	beq.n	80093d4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	2220      	movs	r2, #32
 80093cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80093d0:	2303      	movs	r3, #3
 80093d2:	e03a      	b.n	800944a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80093d4:	69fb      	ldr	r3, [r7, #28]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d10b      	bne.n	80093f2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80093da:	69bb      	ldr	r3, [r7, #24]
 80093dc:	881b      	ldrh	r3, [r3, #0]
 80093de:	461a      	mov	r2, r3
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80093e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80093ea:	69bb      	ldr	r3, [r7, #24]
 80093ec:	3302      	adds	r3, #2
 80093ee:	61bb      	str	r3, [r7, #24]
 80093f0:	e007      	b.n	8009402 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80093f2:	69fb      	ldr	r3, [r7, #28]
 80093f4:	781a      	ldrb	r2, [r3, #0]
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80093fc:	69fb      	ldr	r3, [r7, #28]
 80093fe:	3301      	adds	r3, #1
 8009400:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009406:	b29b      	uxth	r3, r3
 8009408:	3b01      	subs	r3, #1
 800940a:	b29a      	uxth	r2, r3
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009414:	b29b      	uxth	r3, r3
 8009416:	2b00      	cmp	r3, #0
 8009418:	d1cb      	bne.n	80093b2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	9300      	str	r3, [sp, #0]
 800941e:	697b      	ldr	r3, [r7, #20]
 8009420:	2200      	movs	r2, #0
 8009422:	2140      	movs	r1, #64	@ 0x40
 8009424:	68f8      	ldr	r0, [r7, #12]
 8009426:	f000 fd2b 	bl	8009e80 <UART_WaitOnFlagUntilTimeout>
 800942a:	4603      	mov	r3, r0
 800942c:	2b00      	cmp	r3, #0
 800942e:	d005      	beq.n	800943c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	2220      	movs	r2, #32
 8009434:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8009438:	2303      	movs	r3, #3
 800943a:	e006      	b.n	800944a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	2220      	movs	r2, #32
 8009440:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8009444:	2300      	movs	r3, #0
 8009446:	e000      	b.n	800944a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8009448:	2302      	movs	r3, #2
  }
}
 800944a:	4618      	mov	r0, r3
 800944c:	3720      	adds	r7, #32
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}

08009452 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009452:	b580      	push	{r7, lr}
 8009454:	b08a      	sub	sp, #40	@ 0x28
 8009456:	af02      	add	r7, sp, #8
 8009458:	60f8      	str	r0, [r7, #12]
 800945a:	60b9      	str	r1, [r7, #8]
 800945c:	603b      	str	r3, [r7, #0]
 800945e:	4613      	mov	r3, r2
 8009460:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009462:	2300      	movs	r3, #0
 8009464:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800946c:	b2db      	uxtb	r3, r3
 800946e:	2b20      	cmp	r3, #32
 8009470:	f040 8081 	bne.w	8009576 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d002      	beq.n	8009480 <HAL_UART_Receive+0x2e>
 800947a:	88fb      	ldrh	r3, [r7, #6]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d101      	bne.n	8009484 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8009480:	2301      	movs	r3, #1
 8009482:	e079      	b.n	8009578 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	2200      	movs	r2, #0
 8009488:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	2222      	movs	r2, #34	@ 0x22
 800948e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	2200      	movs	r2, #0
 8009496:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009498:	f7fb fbd0 	bl	8004c3c <HAL_GetTick>
 800949c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	88fa      	ldrh	r2, [r7, #6]
 80094a2:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	88fa      	ldrh	r2, [r7, #6]
 80094a8:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	689b      	ldr	r3, [r3, #8]
 80094ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80094b2:	d108      	bne.n	80094c6 <HAL_UART_Receive+0x74>
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	691b      	ldr	r3, [r3, #16]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d104      	bne.n	80094c6 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80094bc:	2300      	movs	r3, #0
 80094be:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	61bb      	str	r3, [r7, #24]
 80094c4:	e003      	b.n	80094ce <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80094ca:	2300      	movs	r3, #0
 80094cc:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80094ce:	e047      	b.n	8009560 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	9300      	str	r3, [sp, #0]
 80094d4:	697b      	ldr	r3, [r7, #20]
 80094d6:	2200      	movs	r2, #0
 80094d8:	2120      	movs	r1, #32
 80094da:	68f8      	ldr	r0, [r7, #12]
 80094dc:	f000 fcd0 	bl	8009e80 <UART_WaitOnFlagUntilTimeout>
 80094e0:	4603      	mov	r3, r0
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d005      	beq.n	80094f2 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	2220      	movs	r2, #32
 80094ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80094ee:	2303      	movs	r3, #3
 80094f0:	e042      	b.n	8009578 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80094f2:	69fb      	ldr	r3, [r7, #28]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d10c      	bne.n	8009512 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	685b      	ldr	r3, [r3, #4]
 80094fe:	b29b      	uxth	r3, r3
 8009500:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009504:	b29a      	uxth	r2, r3
 8009506:	69bb      	ldr	r3, [r7, #24]
 8009508:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800950a:	69bb      	ldr	r3, [r7, #24]
 800950c:	3302      	adds	r3, #2
 800950e:	61bb      	str	r3, [r7, #24]
 8009510:	e01f      	b.n	8009552 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	689b      	ldr	r3, [r3, #8]
 8009516:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800951a:	d007      	beq.n	800952c <HAL_UART_Receive+0xda>
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	689b      	ldr	r3, [r3, #8]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d10a      	bne.n	800953a <HAL_UART_Receive+0xe8>
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	691b      	ldr	r3, [r3, #16]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d106      	bne.n	800953a <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	685b      	ldr	r3, [r3, #4]
 8009532:	b2da      	uxtb	r2, r3
 8009534:	69fb      	ldr	r3, [r7, #28]
 8009536:	701a      	strb	r2, [r3, #0]
 8009538:	e008      	b.n	800954c <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	685b      	ldr	r3, [r3, #4]
 8009540:	b2db      	uxtb	r3, r3
 8009542:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009546:	b2da      	uxtb	r2, r3
 8009548:	69fb      	ldr	r3, [r7, #28]
 800954a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800954c:	69fb      	ldr	r3, [r7, #28]
 800954e:	3301      	adds	r3, #1
 8009550:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009556:	b29b      	uxth	r3, r3
 8009558:	3b01      	subs	r3, #1
 800955a:	b29a      	uxth	r2, r3
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009564:	b29b      	uxth	r3, r3
 8009566:	2b00      	cmp	r3, #0
 8009568:	d1b2      	bne.n	80094d0 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	2220      	movs	r2, #32
 800956e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8009572:	2300      	movs	r3, #0
 8009574:	e000      	b.n	8009578 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8009576:	2302      	movs	r3, #2
  }
}
 8009578:	4618      	mov	r0, r3
 800957a:	3720      	adds	r7, #32
 800957c:	46bd      	mov	sp, r7
 800957e:	bd80      	pop	{r7, pc}

08009580 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b084      	sub	sp, #16
 8009584:	af00      	add	r7, sp, #0
 8009586:	60f8      	str	r0, [r7, #12]
 8009588:	60b9      	str	r1, [r7, #8]
 800958a:	4613      	mov	r3, r2
 800958c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009594:	b2db      	uxtb	r3, r3
 8009596:	2b20      	cmp	r3, #32
 8009598:	d112      	bne.n	80095c0 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800959a:	68bb      	ldr	r3, [r7, #8]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d002      	beq.n	80095a6 <HAL_UART_Receive_DMA+0x26>
 80095a0:	88fb      	ldrh	r3, [r7, #6]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d101      	bne.n	80095aa <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80095a6:	2301      	movs	r3, #1
 80095a8:	e00b      	b.n	80095c2 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	2200      	movs	r2, #0
 80095ae:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80095b0:	88fb      	ldrh	r3, [r7, #6]
 80095b2:	461a      	mov	r2, r3
 80095b4:	68b9      	ldr	r1, [r7, #8]
 80095b6:	68f8      	ldr	r0, [r7, #12]
 80095b8:	f000 fcbc 	bl	8009f34 <UART_Start_Receive_DMA>
 80095bc:	4603      	mov	r3, r0
 80095be:	e000      	b.n	80095c2 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80095c0:	2302      	movs	r3, #2
  }
}
 80095c2:	4618      	mov	r0, r3
 80095c4:	3710      	adds	r7, #16
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd80      	pop	{r7, pc}

080095ca <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80095ca:	b580      	push	{r7, lr}
 80095cc:	b090      	sub	sp, #64	@ 0x40
 80095ce:	af00      	add	r7, sp, #0
 80095d0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80095d2:	2300      	movs	r3, #0
 80095d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	695b      	ldr	r3, [r3, #20]
 80095dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80095e0:	2b80      	cmp	r3, #128	@ 0x80
 80095e2:	bf0c      	ite	eq
 80095e4:	2301      	moveq	r3, #1
 80095e6:	2300      	movne	r3, #0
 80095e8:	b2db      	uxtb	r3, r3
 80095ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80095f2:	b2db      	uxtb	r3, r3
 80095f4:	2b21      	cmp	r3, #33	@ 0x21
 80095f6:	d128      	bne.n	800964a <HAL_UART_DMAStop+0x80>
 80095f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d025      	beq.n	800964a <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	3314      	adds	r3, #20
 8009604:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009608:	e853 3f00 	ldrex	r3, [r3]
 800960c:	623b      	str	r3, [r7, #32]
   return(result);
 800960e:	6a3b      	ldr	r3, [r7, #32]
 8009610:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009614:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	3314      	adds	r3, #20
 800961c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800961e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009620:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009622:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009624:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009626:	e841 2300 	strex	r3, r2, [r1]
 800962a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800962c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800962e:	2b00      	cmp	r3, #0
 8009630:	d1e5      	bne.n	80095fe <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009636:	2b00      	cmp	r3, #0
 8009638:	d004      	beq.n	8009644 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800963e:	4618      	mov	r0, r3
 8009640:	f7fb fd14 	bl	800506c <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f000 fd1b 	bl	800a080 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	695b      	ldr	r3, [r3, #20]
 8009650:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009654:	2b40      	cmp	r3, #64	@ 0x40
 8009656:	bf0c      	ite	eq
 8009658:	2301      	moveq	r3, #1
 800965a:	2300      	movne	r3, #0
 800965c:	b2db      	uxtb	r3, r3
 800965e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009666:	b2db      	uxtb	r3, r3
 8009668:	2b22      	cmp	r3, #34	@ 0x22
 800966a:	d128      	bne.n	80096be <HAL_UART_DMAStop+0xf4>
 800966c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800966e:	2b00      	cmp	r3, #0
 8009670:	d025      	beq.n	80096be <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	3314      	adds	r3, #20
 8009678:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800967a:	693b      	ldr	r3, [r7, #16]
 800967c:	e853 3f00 	ldrex	r3, [r3]
 8009680:	60fb      	str	r3, [r7, #12]
   return(result);
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009688:	637b      	str	r3, [r7, #52]	@ 0x34
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	3314      	adds	r3, #20
 8009690:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009692:	61fa      	str	r2, [r7, #28]
 8009694:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009696:	69b9      	ldr	r1, [r7, #24]
 8009698:	69fa      	ldr	r2, [r7, #28]
 800969a:	e841 2300 	strex	r3, r2, [r1]
 800969e:	617b      	str	r3, [r7, #20]
   return(result);
 80096a0:	697b      	ldr	r3, [r7, #20]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d1e5      	bne.n	8009672 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d004      	beq.n	80096b8 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096b2:	4618      	mov	r0, r3
 80096b4:	f7fb fcda 	bl	800506c <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f000 fd09 	bl	800a0d0 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80096be:	2300      	movs	r3, #0
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	3740      	adds	r7, #64	@ 0x40
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}

080096c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b0ba      	sub	sp, #232	@ 0xe8
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	68db      	ldr	r3, [r3, #12]
 80096e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	695b      	ldr	r3, [r3, #20]
 80096ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80096ee:	2300      	movs	r3, #0
 80096f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80096f4:	2300      	movs	r3, #0
 80096f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80096fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80096fe:	f003 030f 	and.w	r3, r3, #15
 8009702:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8009706:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800970a:	2b00      	cmp	r3, #0
 800970c:	d10f      	bne.n	800972e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800970e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009712:	f003 0320 	and.w	r3, r3, #32
 8009716:	2b00      	cmp	r3, #0
 8009718:	d009      	beq.n	800972e <HAL_UART_IRQHandler+0x66>
 800971a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800971e:	f003 0320 	and.w	r3, r3, #32
 8009722:	2b00      	cmp	r3, #0
 8009724:	d003      	beq.n	800972e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f000 fdae 	bl	800a288 <UART_Receive_IT>
      return;
 800972c:	e273      	b.n	8009c16 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800972e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009732:	2b00      	cmp	r3, #0
 8009734:	f000 80de 	beq.w	80098f4 <HAL_UART_IRQHandler+0x22c>
 8009738:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800973c:	f003 0301 	and.w	r3, r3, #1
 8009740:	2b00      	cmp	r3, #0
 8009742:	d106      	bne.n	8009752 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009744:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009748:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800974c:	2b00      	cmp	r3, #0
 800974e:	f000 80d1 	beq.w	80098f4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009756:	f003 0301 	and.w	r3, r3, #1
 800975a:	2b00      	cmp	r3, #0
 800975c:	d00b      	beq.n	8009776 <HAL_UART_IRQHandler+0xae>
 800975e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009762:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009766:	2b00      	cmp	r3, #0
 8009768:	d005      	beq.n	8009776 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800976e:	f043 0201 	orr.w	r2, r3, #1
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800977a:	f003 0304 	and.w	r3, r3, #4
 800977e:	2b00      	cmp	r3, #0
 8009780:	d00b      	beq.n	800979a <HAL_UART_IRQHandler+0xd2>
 8009782:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009786:	f003 0301 	and.w	r3, r3, #1
 800978a:	2b00      	cmp	r3, #0
 800978c:	d005      	beq.n	800979a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009792:	f043 0202 	orr.w	r2, r3, #2
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800979a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800979e:	f003 0302 	and.w	r3, r3, #2
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d00b      	beq.n	80097be <HAL_UART_IRQHandler+0xf6>
 80097a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80097aa:	f003 0301 	and.w	r3, r3, #1
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d005      	beq.n	80097be <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097b6:	f043 0204 	orr.w	r2, r3, #4
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80097be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097c2:	f003 0308 	and.w	r3, r3, #8
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d011      	beq.n	80097ee <HAL_UART_IRQHandler+0x126>
 80097ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80097ce:	f003 0320 	and.w	r3, r3, #32
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d105      	bne.n	80097e2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80097d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80097da:	f003 0301 	and.w	r3, r3, #1
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d005      	beq.n	80097ee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097e6:	f043 0208 	orr.w	r2, r3, #8
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	f000 820a 	beq.w	8009c0c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80097f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097fc:	f003 0320 	and.w	r3, r3, #32
 8009800:	2b00      	cmp	r3, #0
 8009802:	d008      	beq.n	8009816 <HAL_UART_IRQHandler+0x14e>
 8009804:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009808:	f003 0320 	and.w	r3, r3, #32
 800980c:	2b00      	cmp	r3, #0
 800980e:	d002      	beq.n	8009816 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	f000 fd39 	bl	800a288 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	695b      	ldr	r3, [r3, #20]
 800981c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009820:	2b40      	cmp	r3, #64	@ 0x40
 8009822:	bf0c      	ite	eq
 8009824:	2301      	moveq	r3, #1
 8009826:	2300      	movne	r3, #0
 8009828:	b2db      	uxtb	r3, r3
 800982a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009832:	f003 0308 	and.w	r3, r3, #8
 8009836:	2b00      	cmp	r3, #0
 8009838:	d103      	bne.n	8009842 <HAL_UART_IRQHandler+0x17a>
 800983a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800983e:	2b00      	cmp	r3, #0
 8009840:	d04f      	beq.n	80098e2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f000 fc44 	bl	800a0d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	695b      	ldr	r3, [r3, #20]
 800984e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009852:	2b40      	cmp	r3, #64	@ 0x40
 8009854:	d141      	bne.n	80098da <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	3314      	adds	r3, #20
 800985c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009860:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009864:	e853 3f00 	ldrex	r3, [r3]
 8009868:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800986c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009870:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009874:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	3314      	adds	r3, #20
 800987e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009882:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009886:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800988a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800988e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009892:	e841 2300 	strex	r3, r2, [r1]
 8009896:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800989a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d1d9      	bne.n	8009856 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d013      	beq.n	80098d2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098ae:	4a8a      	ldr	r2, [pc, #552]	@ (8009ad8 <HAL_UART_IRQHandler+0x410>)
 80098b0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098b6:	4618      	mov	r0, r3
 80098b8:	f7fb fc48 	bl	800514c <HAL_DMA_Abort_IT>
 80098bc:	4603      	mov	r3, r0
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d016      	beq.n	80098f0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098c8:	687a      	ldr	r2, [r7, #4]
 80098ca:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80098cc:	4610      	mov	r0, r2
 80098ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098d0:	e00e      	b.n	80098f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f000 f9c0 	bl	8009c58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098d8:	e00a      	b.n	80098f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f000 f9bc 	bl	8009c58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098e0:	e006      	b.n	80098f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f000 f9b8 	bl	8009c58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2200      	movs	r2, #0
 80098ec:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80098ee:	e18d      	b.n	8009c0c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098f0:	bf00      	nop
    return;
 80098f2:	e18b      	b.n	8009c0c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098f8:	2b01      	cmp	r3, #1
 80098fa:	f040 8167 	bne.w	8009bcc <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80098fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009902:	f003 0310 	and.w	r3, r3, #16
 8009906:	2b00      	cmp	r3, #0
 8009908:	f000 8160 	beq.w	8009bcc <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800990c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009910:	f003 0310 	and.w	r3, r3, #16
 8009914:	2b00      	cmp	r3, #0
 8009916:	f000 8159 	beq.w	8009bcc <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800991a:	2300      	movs	r3, #0
 800991c:	60bb      	str	r3, [r7, #8]
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	60bb      	str	r3, [r7, #8]
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	685b      	ldr	r3, [r3, #4]
 800992c:	60bb      	str	r3, [r7, #8]
 800992e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	695b      	ldr	r3, [r3, #20]
 8009936:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800993a:	2b40      	cmp	r3, #64	@ 0x40
 800993c:	f040 80ce 	bne.w	8009adc <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	685b      	ldr	r3, [r3, #4]
 8009948:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800994c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009950:	2b00      	cmp	r3, #0
 8009952:	f000 80a9 	beq.w	8009aa8 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800995a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800995e:	429a      	cmp	r2, r3
 8009960:	f080 80a2 	bcs.w	8009aa8 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800996a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009970:	69db      	ldr	r3, [r3, #28]
 8009972:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009976:	f000 8088 	beq.w	8009a8a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	330c      	adds	r3, #12
 8009980:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009984:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009988:	e853 3f00 	ldrex	r3, [r3]
 800998c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009990:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009994:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009998:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	330c      	adds	r3, #12
 80099a2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80099a6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80099aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80099b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80099b6:	e841 2300 	strex	r3, r2, [r1]
 80099ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80099be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d1d9      	bne.n	800997a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	3314      	adds	r3, #20
 80099cc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80099d0:	e853 3f00 	ldrex	r3, [r3]
 80099d4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80099d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80099d8:	f023 0301 	bic.w	r3, r3, #1
 80099dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	3314      	adds	r3, #20
 80099e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80099ea:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80099ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099f0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80099f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80099f6:	e841 2300 	strex	r3, r2, [r1]
 80099fa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80099fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d1e1      	bne.n	80099c6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	3314      	adds	r3, #20
 8009a08:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a0a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009a0c:	e853 3f00 	ldrex	r3, [r3]
 8009a10:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009a12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009a14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009a18:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	3314      	adds	r3, #20
 8009a22:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009a26:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009a28:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a2a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009a2c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009a2e:	e841 2300 	strex	r3, r2, [r1]
 8009a32:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009a34:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d1e3      	bne.n	8009a02 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	2220      	movs	r2, #32
 8009a3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2200      	movs	r2, #0
 8009a46:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	330c      	adds	r3, #12
 8009a4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a52:	e853 3f00 	ldrex	r3, [r3]
 8009a56:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009a58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009a5a:	f023 0310 	bic.w	r3, r3, #16
 8009a5e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	330c      	adds	r3, #12
 8009a68:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009a6c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009a6e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a70:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009a72:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009a74:	e841 2300 	strex	r3, r2, [r1]
 8009a78:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009a7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d1e3      	bne.n	8009a48 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a84:	4618      	mov	r0, r3
 8009a86:	f7fb faf1 	bl	800506c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	2202      	movs	r2, #2
 8009a8e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009a98:	b29b      	uxth	r3, r3
 8009a9a:	1ad3      	subs	r3, r2, r3
 8009a9c:	b29b      	uxth	r3, r3
 8009a9e:	4619      	mov	r1, r3
 8009aa0:	6878      	ldr	r0, [r7, #4]
 8009aa2:	f000 f8e3 	bl	8009c6c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009aa6:	e0b3      	b.n	8009c10 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009aac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009ab0:	429a      	cmp	r2, r3
 8009ab2:	f040 80ad 	bne.w	8009c10 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009aba:	69db      	ldr	r3, [r3, #28]
 8009abc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009ac0:	f040 80a6 	bne.w	8009c10 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2202      	movs	r2, #2
 8009ac8:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009ace:	4619      	mov	r1, r3
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f000 f8cb 	bl	8009c6c <HAL_UARTEx_RxEventCallback>
      return;
 8009ad6:	e09b      	b.n	8009c10 <HAL_UART_IRQHandler+0x548>
 8009ad8:	0800a197 	.word	0x0800a197
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009ae4:	b29b      	uxth	r3, r3
 8009ae6:	1ad3      	subs	r3, r2, r3
 8009ae8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009af0:	b29b      	uxth	r3, r3
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	f000 808e 	beq.w	8009c14 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8009af8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	f000 8089 	beq.w	8009c14 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	330c      	adds	r3, #12
 8009b08:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b0c:	e853 3f00 	ldrex	r3, [r3]
 8009b10:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009b12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b14:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009b18:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	330c      	adds	r3, #12
 8009b22:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8009b26:	647a      	str	r2, [r7, #68]	@ 0x44
 8009b28:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b2a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009b2c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009b2e:	e841 2300 	strex	r3, r2, [r1]
 8009b32:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009b34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d1e3      	bne.n	8009b02 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	3314      	adds	r3, #20
 8009b40:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b44:	e853 3f00 	ldrex	r3, [r3]
 8009b48:	623b      	str	r3, [r7, #32]
   return(result);
 8009b4a:	6a3b      	ldr	r3, [r7, #32]
 8009b4c:	f023 0301 	bic.w	r3, r3, #1
 8009b50:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	3314      	adds	r3, #20
 8009b5a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009b5e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009b60:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009b64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b66:	e841 2300 	strex	r3, r2, [r1]
 8009b6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009b6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d1e3      	bne.n	8009b3a <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2220      	movs	r2, #32
 8009b76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	330c      	adds	r3, #12
 8009b86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b88:	693b      	ldr	r3, [r7, #16]
 8009b8a:	e853 3f00 	ldrex	r3, [r3]
 8009b8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	f023 0310 	bic.w	r3, r3, #16
 8009b96:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	330c      	adds	r3, #12
 8009ba0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8009ba4:	61fa      	str	r2, [r7, #28]
 8009ba6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ba8:	69b9      	ldr	r1, [r7, #24]
 8009baa:	69fa      	ldr	r2, [r7, #28]
 8009bac:	e841 2300 	strex	r3, r2, [r1]
 8009bb0:	617b      	str	r3, [r7, #20]
   return(result);
 8009bb2:	697b      	ldr	r3, [r7, #20]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d1e3      	bne.n	8009b80 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2202      	movs	r2, #2
 8009bbc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009bbe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009bc2:	4619      	mov	r1, r3
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f000 f851 	bl	8009c6c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009bca:	e023      	b.n	8009c14 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009bcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009bd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d009      	beq.n	8009bec <HAL_UART_IRQHandler+0x524>
 8009bd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009bdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d003      	beq.n	8009bec <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f000 fae7 	bl	800a1b8 <UART_Transmit_IT>
    return;
 8009bea:	e014      	b.n	8009c16 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009bec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009bf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d00e      	beq.n	8009c16 <HAL_UART_IRQHandler+0x54e>
 8009bf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009bfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d008      	beq.n	8009c16 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f000 fb27 	bl	800a258 <UART_EndTransmit_IT>
    return;
 8009c0a:	e004      	b.n	8009c16 <HAL_UART_IRQHandler+0x54e>
    return;
 8009c0c:	bf00      	nop
 8009c0e:	e002      	b.n	8009c16 <HAL_UART_IRQHandler+0x54e>
      return;
 8009c10:	bf00      	nop
 8009c12:	e000      	b.n	8009c16 <HAL_UART_IRQHandler+0x54e>
      return;
 8009c14:	bf00      	nop
  }
}
 8009c16:	37e8      	adds	r7, #232	@ 0xe8
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd80      	pop	{r7, pc}

08009c1c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009c1c:	b480      	push	{r7}
 8009c1e:	b083      	sub	sp, #12
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009c24:	bf00      	nop
 8009c26:	370c      	adds	r7, #12
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2e:	4770      	bx	lr

08009c30 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009c30:	b480      	push	{r7}
 8009c32:	b083      	sub	sp, #12
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009c38:	bf00      	nop
 8009c3a:	370c      	adds	r7, #12
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c42:	4770      	bx	lr

08009c44 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009c44:	b480      	push	{r7}
 8009c46:	b083      	sub	sp, #12
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009c4c:	bf00      	nop
 8009c4e:	370c      	adds	r7, #12
 8009c50:	46bd      	mov	sp, r7
 8009c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c56:	4770      	bx	lr

08009c58 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009c58:	b480      	push	{r7}
 8009c5a:	b083      	sub	sp, #12
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009c60:	bf00      	nop
 8009c62:	370c      	adds	r7, #12
 8009c64:	46bd      	mov	sp, r7
 8009c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6a:	4770      	bx	lr

08009c6c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009c6c:	b480      	push	{r7}
 8009c6e:	b083      	sub	sp, #12
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
 8009c74:	460b      	mov	r3, r1
 8009c76:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009c78:	bf00      	nop
 8009c7a:	370c      	adds	r7, #12
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c82:	4770      	bx	lr

08009c84 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b09c      	sub	sp, #112	@ 0x70
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c90:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d172      	bne.n	8009d86 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8009ca0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009ca6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	330c      	adds	r3, #12
 8009cac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009cb0:	e853 3f00 	ldrex	r3, [r3]
 8009cb4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009cb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009cb8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009cbc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009cbe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	330c      	adds	r3, #12
 8009cc4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009cc6:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009cc8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009ccc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009cce:	e841 2300 	strex	r3, r2, [r1]
 8009cd2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009cd4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d1e5      	bne.n	8009ca6 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cda:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	3314      	adds	r3, #20
 8009ce0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ce2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ce4:	e853 3f00 	ldrex	r3, [r3]
 8009ce8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009cea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cec:	f023 0301 	bic.w	r3, r3, #1
 8009cf0:	667b      	str	r3, [r7, #100]	@ 0x64
 8009cf2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	3314      	adds	r3, #20
 8009cf8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009cfa:	647a      	str	r2, [r7, #68]	@ 0x44
 8009cfc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cfe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009d00:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009d02:	e841 2300 	strex	r3, r2, [r1]
 8009d06:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009d08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d1e5      	bne.n	8009cda <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	3314      	adds	r3, #20
 8009d14:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d18:	e853 3f00 	ldrex	r3, [r3]
 8009d1c:	623b      	str	r3, [r7, #32]
   return(result);
 8009d1e:	6a3b      	ldr	r3, [r7, #32]
 8009d20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009d24:	663b      	str	r3, [r7, #96]	@ 0x60
 8009d26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	3314      	adds	r3, #20
 8009d2c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009d2e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009d30:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009d34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d36:	e841 2300 	strex	r3, r2, [r1]
 8009d3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009d3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d1e5      	bne.n	8009d0e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009d42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d44:	2220      	movs	r2, #32
 8009d46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d4e:	2b01      	cmp	r3, #1
 8009d50:	d119      	bne.n	8009d86 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	330c      	adds	r3, #12
 8009d58:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d5a:	693b      	ldr	r3, [r7, #16]
 8009d5c:	e853 3f00 	ldrex	r3, [r3]
 8009d60:	60fb      	str	r3, [r7, #12]
   return(result);
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	f023 0310 	bic.w	r3, r3, #16
 8009d68:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009d6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	330c      	adds	r3, #12
 8009d70:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009d72:	61fa      	str	r2, [r7, #28]
 8009d74:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d76:	69b9      	ldr	r1, [r7, #24]
 8009d78:	69fa      	ldr	r2, [r7, #28]
 8009d7a:	e841 2300 	strex	r3, r2, [r1]
 8009d7e:	617b      	str	r3, [r7, #20]
   return(result);
 8009d80:	697b      	ldr	r3, [r7, #20]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d1e5      	bne.n	8009d52 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009d86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d88:	2200      	movs	r2, #0
 8009d8a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d90:	2b01      	cmp	r3, #1
 8009d92:	d106      	bne.n	8009da2 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009d94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d96:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009d98:	4619      	mov	r1, r3
 8009d9a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009d9c:	f7ff ff66 	bl	8009c6c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009da0:	e002      	b.n	8009da8 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8009da2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009da4:	f7ff ff44 	bl	8009c30 <HAL_UART_RxCpltCallback>
}
 8009da8:	bf00      	nop
 8009daa:	3770      	adds	r7, #112	@ 0x70
 8009dac:	46bd      	mov	sp, r7
 8009dae:	bd80      	pop	{r7, pc}

08009db0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b084      	sub	sp, #16
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dbc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	2201      	movs	r2, #1
 8009dc2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009dc8:	2b01      	cmp	r3, #1
 8009dca:	d108      	bne.n	8009dde <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009dd0:	085b      	lsrs	r3, r3, #1
 8009dd2:	b29b      	uxth	r3, r3
 8009dd4:	4619      	mov	r1, r3
 8009dd6:	68f8      	ldr	r0, [r7, #12]
 8009dd8:	f7ff ff48 	bl	8009c6c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009ddc:	e002      	b.n	8009de4 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8009dde:	68f8      	ldr	r0, [r7, #12]
 8009de0:	f7ff ff30 	bl	8009c44 <HAL_UART_RxHalfCpltCallback>
}
 8009de4:	bf00      	nop
 8009de6:	3710      	adds	r7, #16
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}

08009dec <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b084      	sub	sp, #16
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009df4:	2300      	movs	r3, #0
 8009df6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dfc:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	695b      	ldr	r3, [r3, #20]
 8009e04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e08:	2b80      	cmp	r3, #128	@ 0x80
 8009e0a:	bf0c      	ite	eq
 8009e0c:	2301      	moveq	r3, #1
 8009e0e:	2300      	movne	r3, #0
 8009e10:	b2db      	uxtb	r3, r3
 8009e12:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009e1a:	b2db      	uxtb	r3, r3
 8009e1c:	2b21      	cmp	r3, #33	@ 0x21
 8009e1e:	d108      	bne.n	8009e32 <UART_DMAError+0x46>
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d005      	beq.n	8009e32 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009e26:	68bb      	ldr	r3, [r7, #8]
 8009e28:	2200      	movs	r2, #0
 8009e2a:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8009e2c:	68b8      	ldr	r0, [r7, #8]
 8009e2e:	f000 f927 	bl	800a080 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009e32:	68bb      	ldr	r3, [r7, #8]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	695b      	ldr	r3, [r3, #20]
 8009e38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e3c:	2b40      	cmp	r3, #64	@ 0x40
 8009e3e:	bf0c      	ite	eq
 8009e40:	2301      	moveq	r3, #1
 8009e42:	2300      	movne	r3, #0
 8009e44:	b2db      	uxtb	r3, r3
 8009e46:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009e48:	68bb      	ldr	r3, [r7, #8]
 8009e4a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009e4e:	b2db      	uxtb	r3, r3
 8009e50:	2b22      	cmp	r3, #34	@ 0x22
 8009e52:	d108      	bne.n	8009e66 <UART_DMAError+0x7a>
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d005      	beq.n	8009e66 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8009e60:	68b8      	ldr	r0, [r7, #8]
 8009e62:	f000 f935 	bl	800a0d0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009e66:	68bb      	ldr	r3, [r7, #8]
 8009e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e6a:	f043 0210 	orr.w	r2, r3, #16
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009e72:	68b8      	ldr	r0, [r7, #8]
 8009e74:	f7ff fef0 	bl	8009c58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009e78:	bf00      	nop
 8009e7a:	3710      	adds	r7, #16
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bd80      	pop	{r7, pc}

08009e80 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b086      	sub	sp, #24
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	60f8      	str	r0, [r7, #12]
 8009e88:	60b9      	str	r1, [r7, #8]
 8009e8a:	603b      	str	r3, [r7, #0]
 8009e8c:	4613      	mov	r3, r2
 8009e8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e90:	e03b      	b.n	8009f0a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e92:	6a3b      	ldr	r3, [r7, #32]
 8009e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e98:	d037      	beq.n	8009f0a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e9a:	f7fa fecf 	bl	8004c3c <HAL_GetTick>
 8009e9e:	4602      	mov	r2, r0
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	1ad3      	subs	r3, r2, r3
 8009ea4:	6a3a      	ldr	r2, [r7, #32]
 8009ea6:	429a      	cmp	r2, r3
 8009ea8:	d302      	bcc.n	8009eb0 <UART_WaitOnFlagUntilTimeout+0x30>
 8009eaa:	6a3b      	ldr	r3, [r7, #32]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d101      	bne.n	8009eb4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009eb0:	2303      	movs	r3, #3
 8009eb2:	e03a      	b.n	8009f2a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	68db      	ldr	r3, [r3, #12]
 8009eba:	f003 0304 	and.w	r3, r3, #4
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d023      	beq.n	8009f0a <UART_WaitOnFlagUntilTimeout+0x8a>
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	2b80      	cmp	r3, #128	@ 0x80
 8009ec6:	d020      	beq.n	8009f0a <UART_WaitOnFlagUntilTimeout+0x8a>
 8009ec8:	68bb      	ldr	r3, [r7, #8]
 8009eca:	2b40      	cmp	r3, #64	@ 0x40
 8009ecc:	d01d      	beq.n	8009f0a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f003 0308 	and.w	r3, r3, #8
 8009ed8:	2b08      	cmp	r3, #8
 8009eda:	d116      	bne.n	8009f0a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8009edc:	2300      	movs	r3, #0
 8009ede:	617b      	str	r3, [r7, #20]
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	617b      	str	r3, [r7, #20]
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	685b      	ldr	r3, [r3, #4]
 8009eee:	617b      	str	r3, [r7, #20]
 8009ef0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009ef2:	68f8      	ldr	r0, [r7, #12]
 8009ef4:	f000 f8ec 	bl	800a0d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	2208      	movs	r2, #8
 8009efc:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	2200      	movs	r2, #0
 8009f02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009f06:	2301      	movs	r3, #1
 8009f08:	e00f      	b.n	8009f2a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	681a      	ldr	r2, [r3, #0]
 8009f10:	68bb      	ldr	r3, [r7, #8]
 8009f12:	4013      	ands	r3, r2
 8009f14:	68ba      	ldr	r2, [r7, #8]
 8009f16:	429a      	cmp	r2, r3
 8009f18:	bf0c      	ite	eq
 8009f1a:	2301      	moveq	r3, #1
 8009f1c:	2300      	movne	r3, #0
 8009f1e:	b2db      	uxtb	r3, r3
 8009f20:	461a      	mov	r2, r3
 8009f22:	79fb      	ldrb	r3, [r7, #7]
 8009f24:	429a      	cmp	r2, r3
 8009f26:	d0b4      	beq.n	8009e92 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009f28:	2300      	movs	r3, #0
}
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	3718      	adds	r7, #24
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	bd80      	pop	{r7, pc}
	...

08009f34 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b098      	sub	sp, #96	@ 0x60
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	60f8      	str	r0, [r7, #12]
 8009f3c:	60b9      	str	r1, [r7, #8]
 8009f3e:	4613      	mov	r3, r2
 8009f40:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8009f42:	68ba      	ldr	r2, [r7, #8]
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	88fa      	ldrh	r2, [r7, #6]
 8009f4c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	2200      	movs	r2, #0
 8009f52:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	2222      	movs	r2, #34	@ 0x22
 8009f58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f60:	4a44      	ldr	r2, [pc, #272]	@ (800a074 <UART_Start_Receive_DMA+0x140>)
 8009f62:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f68:	4a43      	ldr	r2, [pc, #268]	@ (800a078 <UART_Start_Receive_DMA+0x144>)
 8009f6a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f70:	4a42      	ldr	r2, [pc, #264]	@ (800a07c <UART_Start_Receive_DMA+0x148>)
 8009f72:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f78:	2200      	movs	r2, #0
 8009f7a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009f7c:	f107 0308 	add.w	r3, r7, #8
 8009f80:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	3304      	adds	r3, #4
 8009f8c:	4619      	mov	r1, r3
 8009f8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009f90:	681a      	ldr	r2, [r3, #0]
 8009f92:	88fb      	ldrh	r3, [r7, #6]
 8009f94:	f7fb f812 	bl	8004fbc <HAL_DMA_Start_IT>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d008      	beq.n	8009fb0 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	2210      	movs	r2, #16
 8009fa2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	2220      	movs	r2, #32
 8009fa8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 8009fac:	2301      	movs	r3, #1
 8009fae:	e05d      	b.n	800a06c <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	613b      	str	r3, [r7, #16]
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	613b      	str	r3, [r7, #16]
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	685b      	ldr	r3, [r3, #4]
 8009fc2:	613b      	str	r3, [r7, #16]
 8009fc4:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	691b      	ldr	r3, [r3, #16]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d019      	beq.n	800a002 <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	330c      	adds	r3, #12
 8009fd4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009fd8:	e853 3f00 	ldrex	r3, [r3]
 8009fdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009fde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fe0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009fe4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	330c      	adds	r3, #12
 8009fec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009fee:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8009ff0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ff2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8009ff4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009ff6:	e841 2300 	strex	r3, r2, [r1]
 8009ffa:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009ffc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d1e5      	bne.n	8009fce <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	3314      	adds	r3, #20
 800a008:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a00a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a00c:	e853 3f00 	ldrex	r3, [r3]
 800a010:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a014:	f043 0301 	orr.w	r3, r3, #1
 800a018:	657b      	str	r3, [r7, #84]	@ 0x54
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	3314      	adds	r3, #20
 800a020:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a022:	63ba      	str	r2, [r7, #56]	@ 0x38
 800a024:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a026:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800a028:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a02a:	e841 2300 	strex	r3, r2, [r1]
 800a02e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a032:	2b00      	cmp	r3, #0
 800a034:	d1e5      	bne.n	800a002 <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	3314      	adds	r3, #20
 800a03c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a03e:	69bb      	ldr	r3, [r7, #24]
 800a040:	e853 3f00 	ldrex	r3, [r3]
 800a044:	617b      	str	r3, [r7, #20]
   return(result);
 800a046:	697b      	ldr	r3, [r7, #20]
 800a048:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a04c:	653b      	str	r3, [r7, #80]	@ 0x50
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	3314      	adds	r3, #20
 800a054:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a056:	627a      	str	r2, [r7, #36]	@ 0x24
 800a058:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a05a:	6a39      	ldr	r1, [r7, #32]
 800a05c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a05e:	e841 2300 	strex	r3, r2, [r1]
 800a062:	61fb      	str	r3, [r7, #28]
   return(result);
 800a064:	69fb      	ldr	r3, [r7, #28]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d1e5      	bne.n	800a036 <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 800a06a:	2300      	movs	r3, #0
}
 800a06c:	4618      	mov	r0, r3
 800a06e:	3760      	adds	r7, #96	@ 0x60
 800a070:	46bd      	mov	sp, r7
 800a072:	bd80      	pop	{r7, pc}
 800a074:	08009c85 	.word	0x08009c85
 800a078:	08009db1 	.word	0x08009db1
 800a07c:	08009ded 	.word	0x08009ded

0800a080 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a080:	b480      	push	{r7}
 800a082:	b089      	sub	sp, #36	@ 0x24
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	330c      	adds	r3, #12
 800a08e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	e853 3f00 	ldrex	r3, [r3]
 800a096:	60bb      	str	r3, [r7, #8]
   return(result);
 800a098:	68bb      	ldr	r3, [r7, #8]
 800a09a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a09e:	61fb      	str	r3, [r7, #28]
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	330c      	adds	r3, #12
 800a0a6:	69fa      	ldr	r2, [r7, #28]
 800a0a8:	61ba      	str	r2, [r7, #24]
 800a0aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0ac:	6979      	ldr	r1, [r7, #20]
 800a0ae:	69ba      	ldr	r2, [r7, #24]
 800a0b0:	e841 2300 	strex	r3, r2, [r1]
 800a0b4:	613b      	str	r3, [r7, #16]
   return(result);
 800a0b6:	693b      	ldr	r3, [r7, #16]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d1e5      	bne.n	800a088 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2220      	movs	r2, #32
 800a0c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800a0c4:	bf00      	nop
 800a0c6:	3724      	adds	r7, #36	@ 0x24
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ce:	4770      	bx	lr

0800a0d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a0d0:	b480      	push	{r7}
 800a0d2:	b095      	sub	sp, #84	@ 0x54
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	330c      	adds	r3, #12
 800a0de:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0e2:	e853 3f00 	ldrex	r3, [r3]
 800a0e6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a0e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a0ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	330c      	adds	r3, #12
 800a0f6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a0f8:	643a      	str	r2, [r7, #64]	@ 0x40
 800a0fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0fc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a0fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a100:	e841 2300 	strex	r3, r2, [r1]
 800a104:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d1e5      	bne.n	800a0d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	3314      	adds	r3, #20
 800a112:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a114:	6a3b      	ldr	r3, [r7, #32]
 800a116:	e853 3f00 	ldrex	r3, [r3]
 800a11a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a11c:	69fb      	ldr	r3, [r7, #28]
 800a11e:	f023 0301 	bic.w	r3, r3, #1
 800a122:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	3314      	adds	r3, #20
 800a12a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a12c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a12e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a130:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a132:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a134:	e841 2300 	strex	r3, r2, [r1]
 800a138:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a13a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d1e5      	bne.n	800a10c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a144:	2b01      	cmp	r3, #1
 800a146:	d119      	bne.n	800a17c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	330c      	adds	r3, #12
 800a14e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	e853 3f00 	ldrex	r3, [r3]
 800a156:	60bb      	str	r3, [r7, #8]
   return(result);
 800a158:	68bb      	ldr	r3, [r7, #8]
 800a15a:	f023 0310 	bic.w	r3, r3, #16
 800a15e:	647b      	str	r3, [r7, #68]	@ 0x44
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	330c      	adds	r3, #12
 800a166:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a168:	61ba      	str	r2, [r7, #24]
 800a16a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a16c:	6979      	ldr	r1, [r7, #20]
 800a16e:	69ba      	ldr	r2, [r7, #24]
 800a170:	e841 2300 	strex	r3, r2, [r1]
 800a174:	613b      	str	r3, [r7, #16]
   return(result);
 800a176:	693b      	ldr	r3, [r7, #16]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d1e5      	bne.n	800a148 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2220      	movs	r2, #32
 800a180:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2200      	movs	r2, #0
 800a188:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800a18a:	bf00      	nop
 800a18c:	3754      	adds	r7, #84	@ 0x54
 800a18e:	46bd      	mov	sp, r7
 800a190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a194:	4770      	bx	lr

0800a196 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a196:	b580      	push	{r7, lr}
 800a198:	b084      	sub	sp, #16
 800a19a:	af00      	add	r7, sp, #0
 800a19c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1a2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a1aa:	68f8      	ldr	r0, [r7, #12]
 800a1ac:	f7ff fd54 	bl	8009c58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a1b0:	bf00      	nop
 800a1b2:	3710      	adds	r7, #16
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	bd80      	pop	{r7, pc}

0800a1b8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a1b8:	b480      	push	{r7}
 800a1ba:	b085      	sub	sp, #20
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a1c6:	b2db      	uxtb	r3, r3
 800a1c8:	2b21      	cmp	r3, #33	@ 0x21
 800a1ca:	d13e      	bne.n	800a24a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	689b      	ldr	r3, [r3, #8]
 800a1d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a1d4:	d114      	bne.n	800a200 <UART_Transmit_IT+0x48>
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	691b      	ldr	r3, [r3, #16]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d110      	bne.n	800a200 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	6a1b      	ldr	r3, [r3, #32]
 800a1e2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	881b      	ldrh	r3, [r3, #0]
 800a1e8:	461a      	mov	r2, r3
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a1f2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	6a1b      	ldr	r3, [r3, #32]
 800a1f8:	1c9a      	adds	r2, r3, #2
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	621a      	str	r2, [r3, #32]
 800a1fe:	e008      	b.n	800a212 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	6a1b      	ldr	r3, [r3, #32]
 800a204:	1c59      	adds	r1, r3, #1
 800a206:	687a      	ldr	r2, [r7, #4]
 800a208:	6211      	str	r1, [r2, #32]
 800a20a:	781a      	ldrb	r2, [r3, #0]
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a216:	b29b      	uxth	r3, r3
 800a218:	3b01      	subs	r3, #1
 800a21a:	b29b      	uxth	r3, r3
 800a21c:	687a      	ldr	r2, [r7, #4]
 800a21e:	4619      	mov	r1, r3
 800a220:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800a222:	2b00      	cmp	r3, #0
 800a224:	d10f      	bne.n	800a246 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	68da      	ldr	r2, [r3, #12]
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a234:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	68da      	ldr	r2, [r3, #12]
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a244:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a246:	2300      	movs	r3, #0
 800a248:	e000      	b.n	800a24c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a24a:	2302      	movs	r3, #2
  }
}
 800a24c:	4618      	mov	r0, r3
 800a24e:	3714      	adds	r7, #20
 800a250:	46bd      	mov	sp, r7
 800a252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a256:	4770      	bx	lr

0800a258 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b082      	sub	sp, #8
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	68da      	ldr	r2, [r3, #12]
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a26e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2220      	movs	r2, #32
 800a274:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a278:	6878      	ldr	r0, [r7, #4]
 800a27a:	f7ff fccf 	bl	8009c1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a27e:	2300      	movs	r3, #0
}
 800a280:	4618      	mov	r0, r3
 800a282:	3708      	adds	r7, #8
 800a284:	46bd      	mov	sp, r7
 800a286:	bd80      	pop	{r7, pc}

0800a288 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b08c      	sub	sp, #48	@ 0x30
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800a290:	2300      	movs	r3, #0
 800a292:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800a294:	2300      	movs	r3, #0
 800a296:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a29e:	b2db      	uxtb	r3, r3
 800a2a0:	2b22      	cmp	r3, #34	@ 0x22
 800a2a2:	f040 80aa 	bne.w	800a3fa <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	689b      	ldr	r3, [r3, #8]
 800a2aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a2ae:	d115      	bne.n	800a2dc <UART_Receive_IT+0x54>
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	691b      	ldr	r3, [r3, #16]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d111      	bne.n	800a2dc <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2bc:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	685b      	ldr	r3, [r3, #4]
 800a2c4:	b29b      	uxth	r3, r3
 800a2c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2ca:	b29a      	uxth	r2, r3
 800a2cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2ce:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2d4:	1c9a      	adds	r2, r3, #2
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	629a      	str	r2, [r3, #40]	@ 0x28
 800a2da:	e024      	b.n	800a326 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	689b      	ldr	r3, [r3, #8]
 800a2e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a2ea:	d007      	beq.n	800a2fc <UART_Receive_IT+0x74>
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	689b      	ldr	r3, [r3, #8]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d10a      	bne.n	800a30a <UART_Receive_IT+0x82>
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	691b      	ldr	r3, [r3, #16]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d106      	bne.n	800a30a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	685b      	ldr	r3, [r3, #4]
 800a302:	b2da      	uxtb	r2, r3
 800a304:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a306:	701a      	strb	r2, [r3, #0]
 800a308:	e008      	b.n	800a31c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	685b      	ldr	r3, [r3, #4]
 800a310:	b2db      	uxtb	r3, r3
 800a312:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a316:	b2da      	uxtb	r2, r3
 800a318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a31a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a320:	1c5a      	adds	r2, r3, #1
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a32a:	b29b      	uxth	r3, r3
 800a32c:	3b01      	subs	r3, #1
 800a32e:	b29b      	uxth	r3, r3
 800a330:	687a      	ldr	r2, [r7, #4]
 800a332:	4619      	mov	r1, r3
 800a334:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800a336:	2b00      	cmp	r3, #0
 800a338:	d15d      	bne.n	800a3f6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	68da      	ldr	r2, [r3, #12]
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f022 0220 	bic.w	r2, r2, #32
 800a348:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	68da      	ldr	r2, [r3, #12]
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a358:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	695a      	ldr	r2, [r3, #20]
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	f022 0201 	bic.w	r2, r2, #1
 800a368:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2220      	movs	r2, #32
 800a36e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	2200      	movs	r2, #0
 800a376:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a37c:	2b01      	cmp	r3, #1
 800a37e:	d135      	bne.n	800a3ec <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2200      	movs	r2, #0
 800a384:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	330c      	adds	r3, #12
 800a38c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a38e:	697b      	ldr	r3, [r7, #20]
 800a390:	e853 3f00 	ldrex	r3, [r3]
 800a394:	613b      	str	r3, [r7, #16]
   return(result);
 800a396:	693b      	ldr	r3, [r7, #16]
 800a398:	f023 0310 	bic.w	r3, r3, #16
 800a39c:	627b      	str	r3, [r7, #36]	@ 0x24
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	330c      	adds	r3, #12
 800a3a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a3a6:	623a      	str	r2, [r7, #32]
 800a3a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3aa:	69f9      	ldr	r1, [r7, #28]
 800a3ac:	6a3a      	ldr	r2, [r7, #32]
 800a3ae:	e841 2300 	strex	r3, r2, [r1]
 800a3b2:	61bb      	str	r3, [r7, #24]
   return(result);
 800a3b4:	69bb      	ldr	r3, [r7, #24]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d1e5      	bne.n	800a386 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	f003 0310 	and.w	r3, r3, #16
 800a3c4:	2b10      	cmp	r3, #16
 800a3c6:	d10a      	bne.n	800a3de <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	60fb      	str	r3, [r7, #12]
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	60fb      	str	r3, [r7, #12]
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	685b      	ldr	r3, [r3, #4]
 800a3da:	60fb      	str	r3, [r7, #12]
 800a3dc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a3e2:	4619      	mov	r1, r3
 800a3e4:	6878      	ldr	r0, [r7, #4]
 800a3e6:	f7ff fc41 	bl	8009c6c <HAL_UARTEx_RxEventCallback>
 800a3ea:	e002      	b.n	800a3f2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a3ec:	6878      	ldr	r0, [r7, #4]
 800a3ee:	f7ff fc1f 	bl	8009c30 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	e002      	b.n	800a3fc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	e000      	b.n	800a3fc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800a3fa:	2302      	movs	r3, #2
  }
}
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	3730      	adds	r7, #48	@ 0x30
 800a400:	46bd      	mov	sp, r7
 800a402:	bd80      	pop	{r7, pc}

0800a404 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a404:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a408:	b0c0      	sub	sp, #256	@ 0x100
 800a40a:	af00      	add	r7, sp, #0
 800a40c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	691b      	ldr	r3, [r3, #16]
 800a418:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800a41c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a420:	68d9      	ldr	r1, [r3, #12]
 800a422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a426:	681a      	ldr	r2, [r3, #0]
 800a428:	ea40 0301 	orr.w	r3, r0, r1
 800a42c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a42e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a432:	689a      	ldr	r2, [r3, #8]
 800a434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a438:	691b      	ldr	r3, [r3, #16]
 800a43a:	431a      	orrs	r2, r3
 800a43c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a440:	695b      	ldr	r3, [r3, #20]
 800a442:	431a      	orrs	r2, r3
 800a444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a448:	69db      	ldr	r3, [r3, #28]
 800a44a:	4313      	orrs	r3, r2
 800a44c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	68db      	ldr	r3, [r3, #12]
 800a458:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800a45c:	f021 010c 	bic.w	r1, r1, #12
 800a460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a464:	681a      	ldr	r2, [r3, #0]
 800a466:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a46a:	430b      	orrs	r3, r1
 800a46c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a46e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	695b      	ldr	r3, [r3, #20]
 800a476:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800a47a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a47e:	6999      	ldr	r1, [r3, #24]
 800a480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a484:	681a      	ldr	r2, [r3, #0]
 800a486:	ea40 0301 	orr.w	r3, r0, r1
 800a48a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a48c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a490:	681a      	ldr	r2, [r3, #0]
 800a492:	4b8f      	ldr	r3, [pc, #572]	@ (800a6d0 <UART_SetConfig+0x2cc>)
 800a494:	429a      	cmp	r2, r3
 800a496:	d005      	beq.n	800a4a4 <UART_SetConfig+0xa0>
 800a498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a49c:	681a      	ldr	r2, [r3, #0]
 800a49e:	4b8d      	ldr	r3, [pc, #564]	@ (800a6d4 <UART_SetConfig+0x2d0>)
 800a4a0:	429a      	cmp	r2, r3
 800a4a2:	d104      	bne.n	800a4ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a4a4:	f7fe fb5e 	bl	8008b64 <HAL_RCC_GetPCLK2Freq>
 800a4a8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800a4ac:	e003      	b.n	800a4b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a4ae:	f7fe fb45 	bl	8008b3c <HAL_RCC_GetPCLK1Freq>
 800a4b2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a4b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a4ba:	69db      	ldr	r3, [r3, #28]
 800a4bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a4c0:	f040 810c 	bne.w	800a6dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a4c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a4ce:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800a4d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800a4d6:	4622      	mov	r2, r4
 800a4d8:	462b      	mov	r3, r5
 800a4da:	1891      	adds	r1, r2, r2
 800a4dc:	65b9      	str	r1, [r7, #88]	@ 0x58
 800a4de:	415b      	adcs	r3, r3
 800a4e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a4e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800a4e6:	4621      	mov	r1, r4
 800a4e8:	eb12 0801 	adds.w	r8, r2, r1
 800a4ec:	4629      	mov	r1, r5
 800a4ee:	eb43 0901 	adc.w	r9, r3, r1
 800a4f2:	f04f 0200 	mov.w	r2, #0
 800a4f6:	f04f 0300 	mov.w	r3, #0
 800a4fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a4fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a502:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a506:	4690      	mov	r8, r2
 800a508:	4699      	mov	r9, r3
 800a50a:	4623      	mov	r3, r4
 800a50c:	eb18 0303 	adds.w	r3, r8, r3
 800a510:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a514:	462b      	mov	r3, r5
 800a516:	eb49 0303 	adc.w	r3, r9, r3
 800a51a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a51e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a522:	685b      	ldr	r3, [r3, #4]
 800a524:	2200      	movs	r2, #0
 800a526:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a52a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800a52e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a532:	460b      	mov	r3, r1
 800a534:	18db      	adds	r3, r3, r3
 800a536:	653b      	str	r3, [r7, #80]	@ 0x50
 800a538:	4613      	mov	r3, r2
 800a53a:	eb42 0303 	adc.w	r3, r2, r3
 800a53e:	657b      	str	r3, [r7, #84]	@ 0x54
 800a540:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800a544:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800a548:	f7f5 fe9a 	bl	8000280 <__aeabi_uldivmod>
 800a54c:	4602      	mov	r2, r0
 800a54e:	460b      	mov	r3, r1
 800a550:	4b61      	ldr	r3, [pc, #388]	@ (800a6d8 <UART_SetConfig+0x2d4>)
 800a552:	fba3 2302 	umull	r2, r3, r3, r2
 800a556:	095b      	lsrs	r3, r3, #5
 800a558:	011c      	lsls	r4, r3, #4
 800a55a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a55e:	2200      	movs	r2, #0
 800a560:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a564:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800a568:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800a56c:	4642      	mov	r2, r8
 800a56e:	464b      	mov	r3, r9
 800a570:	1891      	adds	r1, r2, r2
 800a572:	64b9      	str	r1, [r7, #72]	@ 0x48
 800a574:	415b      	adcs	r3, r3
 800a576:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a578:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800a57c:	4641      	mov	r1, r8
 800a57e:	eb12 0a01 	adds.w	sl, r2, r1
 800a582:	4649      	mov	r1, r9
 800a584:	eb43 0b01 	adc.w	fp, r3, r1
 800a588:	f04f 0200 	mov.w	r2, #0
 800a58c:	f04f 0300 	mov.w	r3, #0
 800a590:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a594:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a598:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a59c:	4692      	mov	sl, r2
 800a59e:	469b      	mov	fp, r3
 800a5a0:	4643      	mov	r3, r8
 800a5a2:	eb1a 0303 	adds.w	r3, sl, r3
 800a5a6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a5aa:	464b      	mov	r3, r9
 800a5ac:	eb4b 0303 	adc.w	r3, fp, r3
 800a5b0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a5b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a5b8:	685b      	ldr	r3, [r3, #4]
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a5c0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800a5c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a5c8:	460b      	mov	r3, r1
 800a5ca:	18db      	adds	r3, r3, r3
 800a5cc:	643b      	str	r3, [r7, #64]	@ 0x40
 800a5ce:	4613      	mov	r3, r2
 800a5d0:	eb42 0303 	adc.w	r3, r2, r3
 800a5d4:	647b      	str	r3, [r7, #68]	@ 0x44
 800a5d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800a5da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800a5de:	f7f5 fe4f 	bl	8000280 <__aeabi_uldivmod>
 800a5e2:	4602      	mov	r2, r0
 800a5e4:	460b      	mov	r3, r1
 800a5e6:	4611      	mov	r1, r2
 800a5e8:	4b3b      	ldr	r3, [pc, #236]	@ (800a6d8 <UART_SetConfig+0x2d4>)
 800a5ea:	fba3 2301 	umull	r2, r3, r3, r1
 800a5ee:	095b      	lsrs	r3, r3, #5
 800a5f0:	2264      	movs	r2, #100	@ 0x64
 800a5f2:	fb02 f303 	mul.w	r3, r2, r3
 800a5f6:	1acb      	subs	r3, r1, r3
 800a5f8:	00db      	lsls	r3, r3, #3
 800a5fa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800a5fe:	4b36      	ldr	r3, [pc, #216]	@ (800a6d8 <UART_SetConfig+0x2d4>)
 800a600:	fba3 2302 	umull	r2, r3, r3, r2
 800a604:	095b      	lsrs	r3, r3, #5
 800a606:	005b      	lsls	r3, r3, #1
 800a608:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800a60c:	441c      	add	r4, r3
 800a60e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a612:	2200      	movs	r2, #0
 800a614:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a618:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800a61c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800a620:	4642      	mov	r2, r8
 800a622:	464b      	mov	r3, r9
 800a624:	1891      	adds	r1, r2, r2
 800a626:	63b9      	str	r1, [r7, #56]	@ 0x38
 800a628:	415b      	adcs	r3, r3
 800a62a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a62c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800a630:	4641      	mov	r1, r8
 800a632:	1851      	adds	r1, r2, r1
 800a634:	6339      	str	r1, [r7, #48]	@ 0x30
 800a636:	4649      	mov	r1, r9
 800a638:	414b      	adcs	r3, r1
 800a63a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a63c:	f04f 0200 	mov.w	r2, #0
 800a640:	f04f 0300 	mov.w	r3, #0
 800a644:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800a648:	4659      	mov	r1, fp
 800a64a:	00cb      	lsls	r3, r1, #3
 800a64c:	4651      	mov	r1, sl
 800a64e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a652:	4651      	mov	r1, sl
 800a654:	00ca      	lsls	r2, r1, #3
 800a656:	4610      	mov	r0, r2
 800a658:	4619      	mov	r1, r3
 800a65a:	4603      	mov	r3, r0
 800a65c:	4642      	mov	r2, r8
 800a65e:	189b      	adds	r3, r3, r2
 800a660:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a664:	464b      	mov	r3, r9
 800a666:	460a      	mov	r2, r1
 800a668:	eb42 0303 	adc.w	r3, r2, r3
 800a66c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a674:	685b      	ldr	r3, [r3, #4]
 800a676:	2200      	movs	r2, #0
 800a678:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a67c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800a680:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a684:	460b      	mov	r3, r1
 800a686:	18db      	adds	r3, r3, r3
 800a688:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a68a:	4613      	mov	r3, r2
 800a68c:	eb42 0303 	adc.w	r3, r2, r3
 800a690:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a692:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a696:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800a69a:	f7f5 fdf1 	bl	8000280 <__aeabi_uldivmod>
 800a69e:	4602      	mov	r2, r0
 800a6a0:	460b      	mov	r3, r1
 800a6a2:	4b0d      	ldr	r3, [pc, #52]	@ (800a6d8 <UART_SetConfig+0x2d4>)
 800a6a4:	fba3 1302 	umull	r1, r3, r3, r2
 800a6a8:	095b      	lsrs	r3, r3, #5
 800a6aa:	2164      	movs	r1, #100	@ 0x64
 800a6ac:	fb01 f303 	mul.w	r3, r1, r3
 800a6b0:	1ad3      	subs	r3, r2, r3
 800a6b2:	00db      	lsls	r3, r3, #3
 800a6b4:	3332      	adds	r3, #50	@ 0x32
 800a6b6:	4a08      	ldr	r2, [pc, #32]	@ (800a6d8 <UART_SetConfig+0x2d4>)
 800a6b8:	fba2 2303 	umull	r2, r3, r2, r3
 800a6bc:	095b      	lsrs	r3, r3, #5
 800a6be:	f003 0207 	and.w	r2, r3, #7
 800a6c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	4422      	add	r2, r4
 800a6ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a6cc:	e106      	b.n	800a8dc <UART_SetConfig+0x4d8>
 800a6ce:	bf00      	nop
 800a6d0:	40011000 	.word	0x40011000
 800a6d4:	40011400 	.word	0x40011400
 800a6d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a6dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a6e6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800a6ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800a6ee:	4642      	mov	r2, r8
 800a6f0:	464b      	mov	r3, r9
 800a6f2:	1891      	adds	r1, r2, r2
 800a6f4:	6239      	str	r1, [r7, #32]
 800a6f6:	415b      	adcs	r3, r3
 800a6f8:	627b      	str	r3, [r7, #36]	@ 0x24
 800a6fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a6fe:	4641      	mov	r1, r8
 800a700:	1854      	adds	r4, r2, r1
 800a702:	4649      	mov	r1, r9
 800a704:	eb43 0501 	adc.w	r5, r3, r1
 800a708:	f04f 0200 	mov.w	r2, #0
 800a70c:	f04f 0300 	mov.w	r3, #0
 800a710:	00eb      	lsls	r3, r5, #3
 800a712:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a716:	00e2      	lsls	r2, r4, #3
 800a718:	4614      	mov	r4, r2
 800a71a:	461d      	mov	r5, r3
 800a71c:	4643      	mov	r3, r8
 800a71e:	18e3      	adds	r3, r4, r3
 800a720:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a724:	464b      	mov	r3, r9
 800a726:	eb45 0303 	adc.w	r3, r5, r3
 800a72a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a72e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a732:	685b      	ldr	r3, [r3, #4]
 800a734:	2200      	movs	r2, #0
 800a736:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a73a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a73e:	f04f 0200 	mov.w	r2, #0
 800a742:	f04f 0300 	mov.w	r3, #0
 800a746:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800a74a:	4629      	mov	r1, r5
 800a74c:	008b      	lsls	r3, r1, #2
 800a74e:	4621      	mov	r1, r4
 800a750:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a754:	4621      	mov	r1, r4
 800a756:	008a      	lsls	r2, r1, #2
 800a758:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800a75c:	f7f5 fd90 	bl	8000280 <__aeabi_uldivmod>
 800a760:	4602      	mov	r2, r0
 800a762:	460b      	mov	r3, r1
 800a764:	4b60      	ldr	r3, [pc, #384]	@ (800a8e8 <UART_SetConfig+0x4e4>)
 800a766:	fba3 2302 	umull	r2, r3, r3, r2
 800a76a:	095b      	lsrs	r3, r3, #5
 800a76c:	011c      	lsls	r4, r3, #4
 800a76e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a772:	2200      	movs	r2, #0
 800a774:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a778:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a77c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800a780:	4642      	mov	r2, r8
 800a782:	464b      	mov	r3, r9
 800a784:	1891      	adds	r1, r2, r2
 800a786:	61b9      	str	r1, [r7, #24]
 800a788:	415b      	adcs	r3, r3
 800a78a:	61fb      	str	r3, [r7, #28]
 800a78c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a790:	4641      	mov	r1, r8
 800a792:	1851      	adds	r1, r2, r1
 800a794:	6139      	str	r1, [r7, #16]
 800a796:	4649      	mov	r1, r9
 800a798:	414b      	adcs	r3, r1
 800a79a:	617b      	str	r3, [r7, #20]
 800a79c:	f04f 0200 	mov.w	r2, #0
 800a7a0:	f04f 0300 	mov.w	r3, #0
 800a7a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a7a8:	4659      	mov	r1, fp
 800a7aa:	00cb      	lsls	r3, r1, #3
 800a7ac:	4651      	mov	r1, sl
 800a7ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a7b2:	4651      	mov	r1, sl
 800a7b4:	00ca      	lsls	r2, r1, #3
 800a7b6:	4610      	mov	r0, r2
 800a7b8:	4619      	mov	r1, r3
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	4642      	mov	r2, r8
 800a7be:	189b      	adds	r3, r3, r2
 800a7c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a7c4:	464b      	mov	r3, r9
 800a7c6:	460a      	mov	r2, r1
 800a7c8:	eb42 0303 	adc.w	r3, r2, r3
 800a7cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a7d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a7d4:	685b      	ldr	r3, [r3, #4]
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a7da:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a7dc:	f04f 0200 	mov.w	r2, #0
 800a7e0:	f04f 0300 	mov.w	r3, #0
 800a7e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800a7e8:	4649      	mov	r1, r9
 800a7ea:	008b      	lsls	r3, r1, #2
 800a7ec:	4641      	mov	r1, r8
 800a7ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a7f2:	4641      	mov	r1, r8
 800a7f4:	008a      	lsls	r2, r1, #2
 800a7f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800a7fa:	f7f5 fd41 	bl	8000280 <__aeabi_uldivmod>
 800a7fe:	4602      	mov	r2, r0
 800a800:	460b      	mov	r3, r1
 800a802:	4611      	mov	r1, r2
 800a804:	4b38      	ldr	r3, [pc, #224]	@ (800a8e8 <UART_SetConfig+0x4e4>)
 800a806:	fba3 2301 	umull	r2, r3, r3, r1
 800a80a:	095b      	lsrs	r3, r3, #5
 800a80c:	2264      	movs	r2, #100	@ 0x64
 800a80e:	fb02 f303 	mul.w	r3, r2, r3
 800a812:	1acb      	subs	r3, r1, r3
 800a814:	011b      	lsls	r3, r3, #4
 800a816:	3332      	adds	r3, #50	@ 0x32
 800a818:	4a33      	ldr	r2, [pc, #204]	@ (800a8e8 <UART_SetConfig+0x4e4>)
 800a81a:	fba2 2303 	umull	r2, r3, r2, r3
 800a81e:	095b      	lsrs	r3, r3, #5
 800a820:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a824:	441c      	add	r4, r3
 800a826:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a82a:	2200      	movs	r2, #0
 800a82c:	673b      	str	r3, [r7, #112]	@ 0x70
 800a82e:	677a      	str	r2, [r7, #116]	@ 0x74
 800a830:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800a834:	4642      	mov	r2, r8
 800a836:	464b      	mov	r3, r9
 800a838:	1891      	adds	r1, r2, r2
 800a83a:	60b9      	str	r1, [r7, #8]
 800a83c:	415b      	adcs	r3, r3
 800a83e:	60fb      	str	r3, [r7, #12]
 800a840:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a844:	4641      	mov	r1, r8
 800a846:	1851      	adds	r1, r2, r1
 800a848:	6039      	str	r1, [r7, #0]
 800a84a:	4649      	mov	r1, r9
 800a84c:	414b      	adcs	r3, r1
 800a84e:	607b      	str	r3, [r7, #4]
 800a850:	f04f 0200 	mov.w	r2, #0
 800a854:	f04f 0300 	mov.w	r3, #0
 800a858:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a85c:	4659      	mov	r1, fp
 800a85e:	00cb      	lsls	r3, r1, #3
 800a860:	4651      	mov	r1, sl
 800a862:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a866:	4651      	mov	r1, sl
 800a868:	00ca      	lsls	r2, r1, #3
 800a86a:	4610      	mov	r0, r2
 800a86c:	4619      	mov	r1, r3
 800a86e:	4603      	mov	r3, r0
 800a870:	4642      	mov	r2, r8
 800a872:	189b      	adds	r3, r3, r2
 800a874:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a876:	464b      	mov	r3, r9
 800a878:	460a      	mov	r2, r1
 800a87a:	eb42 0303 	adc.w	r3, r2, r3
 800a87e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a884:	685b      	ldr	r3, [r3, #4]
 800a886:	2200      	movs	r2, #0
 800a888:	663b      	str	r3, [r7, #96]	@ 0x60
 800a88a:	667a      	str	r2, [r7, #100]	@ 0x64
 800a88c:	f04f 0200 	mov.w	r2, #0
 800a890:	f04f 0300 	mov.w	r3, #0
 800a894:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800a898:	4649      	mov	r1, r9
 800a89a:	008b      	lsls	r3, r1, #2
 800a89c:	4641      	mov	r1, r8
 800a89e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a8a2:	4641      	mov	r1, r8
 800a8a4:	008a      	lsls	r2, r1, #2
 800a8a6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800a8aa:	f7f5 fce9 	bl	8000280 <__aeabi_uldivmod>
 800a8ae:	4602      	mov	r2, r0
 800a8b0:	460b      	mov	r3, r1
 800a8b2:	4b0d      	ldr	r3, [pc, #52]	@ (800a8e8 <UART_SetConfig+0x4e4>)
 800a8b4:	fba3 1302 	umull	r1, r3, r3, r2
 800a8b8:	095b      	lsrs	r3, r3, #5
 800a8ba:	2164      	movs	r1, #100	@ 0x64
 800a8bc:	fb01 f303 	mul.w	r3, r1, r3
 800a8c0:	1ad3      	subs	r3, r2, r3
 800a8c2:	011b      	lsls	r3, r3, #4
 800a8c4:	3332      	adds	r3, #50	@ 0x32
 800a8c6:	4a08      	ldr	r2, [pc, #32]	@ (800a8e8 <UART_SetConfig+0x4e4>)
 800a8c8:	fba2 2303 	umull	r2, r3, r2, r3
 800a8cc:	095b      	lsrs	r3, r3, #5
 800a8ce:	f003 020f 	and.w	r2, r3, #15
 800a8d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	4422      	add	r2, r4
 800a8da:	609a      	str	r2, [r3, #8]
}
 800a8dc:	bf00      	nop
 800a8de:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a8e8:	51eb851f 	.word	0x51eb851f

0800a8ec <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                     const FSMC_NORSRAM_InitTypeDef *Init)
{
 800a8ec:	b480      	push	{r7}
 800a8ee:	b087      	sub	sp, #28
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
 800a8f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	681a      	ldr	r2, [r3, #0]
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a900:	683a      	ldr	r2, [r7, #0]
 800a902:	6812      	ldr	r2, [r2, #0]
 800a904:	f023 0101 	bic.w	r1, r3, #1
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	689b      	ldr	r3, [r3, #8]
 800a912:	2b08      	cmp	r3, #8
 800a914:	d102      	bne.n	800a91c <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800a916:	2340      	movs	r3, #64	@ 0x40
 800a918:	617b      	str	r3, [r7, #20]
 800a91a:	e001      	b.n	800a920 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800a91c:	2300      	movs	r3, #0
 800a91e:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800a924:	697b      	ldr	r3, [r7, #20]
 800a926:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800a92c:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800a932:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800a938:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800a93e:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800a940:	683b      	ldr	r3, [r7, #0]
 800a942:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 800a944:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 800a94a:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 800a950:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 800a956:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 800a95c:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 800a962:	4313      	orrs	r3, r2
 800a964:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	699b      	ldr	r3, [r3, #24]
 800a96a:	693a      	ldr	r2, [r7, #16]
 800a96c:	4313      	orrs	r3, r2
 800a96e:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a974:	693a      	ldr	r2, [r7, #16]
 800a976:	4313      	orrs	r3, r2
 800a978:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 800a97a:	4b10      	ldr	r3, [pc, #64]	@ (800a9bc <FSMC_NORSRAM_Init+0xd0>)
 800a97c:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800a984:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 800a98c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	681a      	ldr	r2, [r3, #0]
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	43db      	mvns	r3, r3
 800a99c:	ea02 0103 	and.w	r1, r2, r3
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	681a      	ldr	r2, [r3, #0]
 800a9a4:	693b      	ldr	r3, [r7, #16]
 800a9a6:	4319      	orrs	r1, r3
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 800a9ae:	2300      	movs	r3, #0
}
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	371c      	adds	r7, #28
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ba:	4770      	bx	lr
 800a9bc:	0008fb7f 	.word	0x0008fb7f

0800a9c0 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                           const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a9c0:	b480      	push	{r7}
 800a9c2:	b085      	sub	sp, #20
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	60f8      	str	r0, [r7, #12]
 800a9c8:	60b9      	str	r1, [r7, #8]
 800a9ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  Device->BTCR[Bank + 1U] =
    (Timing->AddressSetupTime << FSMC_BTR1_ADDSET_Pos) |
 800a9cc:	68bb      	ldr	r3, [r7, #8]
 800a9ce:	681a      	ldr	r2, [r3, #0]
    (Timing->AddressHoldTime << FSMC_BTR1_ADDHLD_Pos) |
 800a9d0:	68bb      	ldr	r3, [r7, #8]
 800a9d2:	685b      	ldr	r3, [r3, #4]
 800a9d4:	011b      	lsls	r3, r3, #4
    (Timing->AddressSetupTime << FSMC_BTR1_ADDSET_Pos) |
 800a9d6:	431a      	orrs	r2, r3
    (Timing->DataSetupTime << FSMC_BTR1_DATAST_Pos) |
 800a9d8:	68bb      	ldr	r3, [r7, #8]
 800a9da:	689b      	ldr	r3, [r3, #8]
 800a9dc:	021b      	lsls	r3, r3, #8
    (Timing->AddressHoldTime << FSMC_BTR1_ADDHLD_Pos) |
 800a9de:	431a      	orrs	r2, r3
    (Timing->BusTurnAroundDuration << FSMC_BTR1_BUSTURN_Pos) |
 800a9e0:	68bb      	ldr	r3, [r7, #8]
 800a9e2:	68db      	ldr	r3, [r3, #12]
 800a9e4:	041b      	lsls	r3, r3, #16
    (Timing->DataSetupTime << FSMC_BTR1_DATAST_Pos) |
 800a9e6:	431a      	orrs	r2, r3
    ((Timing->CLKDivision - 1U) << FSMC_BTR1_CLKDIV_Pos) |
 800a9e8:	68bb      	ldr	r3, [r7, #8]
 800a9ea:	691b      	ldr	r3, [r3, #16]
 800a9ec:	3b01      	subs	r3, #1
 800a9ee:	051b      	lsls	r3, r3, #20
    (Timing->BusTurnAroundDuration << FSMC_BTR1_BUSTURN_Pos) |
 800a9f0:	431a      	orrs	r2, r3
    ((Timing->DataLatency - 2U) << FSMC_BTR1_DATLAT_Pos) |
 800a9f2:	68bb      	ldr	r3, [r7, #8]
 800a9f4:	695b      	ldr	r3, [r3, #20]
 800a9f6:	3b02      	subs	r3, #2
 800a9f8:	061b      	lsls	r3, r3, #24
    ((Timing->CLKDivision - 1U) << FSMC_BTR1_CLKDIV_Pos) |
 800a9fa:	ea42 0103 	orr.w	r1, r2, r3
    Timing->AccessMode;
 800a9fe:	68bb      	ldr	r3, [r7, #8]
 800aa00:	699b      	ldr	r3, [r3, #24]
  Device->BTCR[Bank + 1U] =
 800aa02:	687a      	ldr	r2, [r7, #4]
 800aa04:	3201      	adds	r2, #1
    ((Timing->DataLatency - 2U) << FSMC_BTR1_DATLAT_Pos) |
 800aa06:	4319      	orrs	r1, r3
  Device->BTCR[Bank + 1U] =
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif /* FSMC_BCR1_CCLKEN */
  return HAL_OK;
 800aa0e:	2300      	movs	r3, #0
}
 800aa10:	4618      	mov	r0, r3
 800aa12:	3714      	adds	r7, #20
 800aa14:	46bd      	mov	sp, r7
 800aa16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1a:	4770      	bx	lr

0800aa1c <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                    const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                    uint32_t ExtendedMode)
{
 800aa1c:	b480      	push	{r7}
 800aa1e:	b085      	sub	sp, #20
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	60f8      	str	r0, [r7, #12]
 800aa24:	60b9      	str	r1, [r7, #8]
 800aa26:	607a      	str	r2, [r7, #4]
 800aa28:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800aa30:	d11d      	bne.n	800aa6e <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	687a      	ldr	r2, [r7, #4]
 800aa36:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800aa3a:	4b13      	ldr	r3, [pc, #76]	@ (800aa88 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800aa3c:	4013      	ands	r3, r2
 800aa3e:	68ba      	ldr	r2, [r7, #8]
 800aa40:	6811      	ldr	r1, [r2, #0]
 800aa42:	68ba      	ldr	r2, [r7, #8]
 800aa44:	6852      	ldr	r2, [r2, #4]
 800aa46:	0112      	lsls	r2, r2, #4
 800aa48:	4311      	orrs	r1, r2
 800aa4a:	68ba      	ldr	r2, [r7, #8]
 800aa4c:	6892      	ldr	r2, [r2, #8]
 800aa4e:	0212      	lsls	r2, r2, #8
 800aa50:	4311      	orrs	r1, r2
 800aa52:	68ba      	ldr	r2, [r7, #8]
 800aa54:	6992      	ldr	r2, [r2, #24]
 800aa56:	4311      	orrs	r1, r2
 800aa58:	68ba      	ldr	r2, [r7, #8]
 800aa5a:	68d2      	ldr	r2, [r2, #12]
 800aa5c:	0412      	lsls	r2, r2, #16
 800aa5e:	430a      	orrs	r2, r1
 800aa60:	ea43 0102 	orr.w	r1, r3, r2
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	687a      	ldr	r2, [r7, #4]
 800aa68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800aa6c:	e005      	b.n	800aa7a <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	687a      	ldr	r2, [r7, #4]
 800aa72:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800aa76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800aa7a:	2300      	movs	r3, #0
}
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	3714      	adds	r7, #20
 800aa80:	46bd      	mov	sp, r7
 800aa82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa86:	4770      	bx	lr
 800aa88:	cff00000 	.word	0xcff00000

0800aa8c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800aa8c:	b084      	sub	sp, #16
 800aa8e:	b580      	push	{r7, lr}
 800aa90:	b084      	sub	sp, #16
 800aa92:	af00      	add	r7, sp, #0
 800aa94:	6078      	str	r0, [r7, #4]
 800aa96:	f107 001c 	add.w	r0, r7, #28
 800aa9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800aa9e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800aaa2:	2b01      	cmp	r3, #1
 800aaa4:	d123      	bne.n	800aaee <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aaaa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	68db      	ldr	r3, [r3, #12]
 800aab6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800aaba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aabe:	687a      	ldr	r2, [r7, #4]
 800aac0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	68db      	ldr	r3, [r3, #12]
 800aac6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800aace:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800aad2:	2b01      	cmp	r3, #1
 800aad4:	d105      	bne.n	800aae2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	68db      	ldr	r3, [r3, #12]
 800aada:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800aae2:	6878      	ldr	r0, [r7, #4]
 800aae4:	f001 fae8 	bl	800c0b8 <USB_CoreReset>
 800aae8:	4603      	mov	r3, r0
 800aaea:	73fb      	strb	r3, [r7, #15]
 800aaec:	e01b      	b.n	800ab26 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	68db      	ldr	r3, [r3, #12]
 800aaf2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800aafa:	6878      	ldr	r0, [r7, #4]
 800aafc:	f001 fadc 	bl	800c0b8 <USB_CoreReset>
 800ab00:	4603      	mov	r3, r0
 800ab02:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ab04:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d106      	bne.n	800ab1a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab10:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	639a      	str	r2, [r3, #56]	@ 0x38
 800ab18:	e005      	b.n	800ab26 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab1e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ab26:	7fbb      	ldrb	r3, [r7, #30]
 800ab28:	2b01      	cmp	r3, #1
 800ab2a:	d10b      	bne.n	800ab44 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	689b      	ldr	r3, [r3, #8]
 800ab30:	f043 0206 	orr.w	r2, r3, #6
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	689b      	ldr	r3, [r3, #8]
 800ab3c:	f043 0220 	orr.w	r2, r3, #32
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ab44:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab46:	4618      	mov	r0, r3
 800ab48:	3710      	adds	r7, #16
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ab50:	b004      	add	sp, #16
 800ab52:	4770      	bx	lr

0800ab54 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800ab54:	b480      	push	{r7}
 800ab56:	b087      	sub	sp, #28
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	60f8      	str	r0, [r7, #12]
 800ab5c:	60b9      	str	r1, [r7, #8]
 800ab5e:	4613      	mov	r3, r2
 800ab60:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800ab62:	79fb      	ldrb	r3, [r7, #7]
 800ab64:	2b02      	cmp	r3, #2
 800ab66:	d165      	bne.n	800ac34 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800ab68:	68bb      	ldr	r3, [r7, #8]
 800ab6a:	4a41      	ldr	r2, [pc, #260]	@ (800ac70 <USB_SetTurnaroundTime+0x11c>)
 800ab6c:	4293      	cmp	r3, r2
 800ab6e:	d906      	bls.n	800ab7e <USB_SetTurnaroundTime+0x2a>
 800ab70:	68bb      	ldr	r3, [r7, #8]
 800ab72:	4a40      	ldr	r2, [pc, #256]	@ (800ac74 <USB_SetTurnaroundTime+0x120>)
 800ab74:	4293      	cmp	r3, r2
 800ab76:	d202      	bcs.n	800ab7e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800ab78:	230f      	movs	r3, #15
 800ab7a:	617b      	str	r3, [r7, #20]
 800ab7c:	e062      	b.n	800ac44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800ab7e:	68bb      	ldr	r3, [r7, #8]
 800ab80:	4a3c      	ldr	r2, [pc, #240]	@ (800ac74 <USB_SetTurnaroundTime+0x120>)
 800ab82:	4293      	cmp	r3, r2
 800ab84:	d306      	bcc.n	800ab94 <USB_SetTurnaroundTime+0x40>
 800ab86:	68bb      	ldr	r3, [r7, #8]
 800ab88:	4a3b      	ldr	r2, [pc, #236]	@ (800ac78 <USB_SetTurnaroundTime+0x124>)
 800ab8a:	4293      	cmp	r3, r2
 800ab8c:	d202      	bcs.n	800ab94 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800ab8e:	230e      	movs	r3, #14
 800ab90:	617b      	str	r3, [r7, #20]
 800ab92:	e057      	b.n	800ac44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800ab94:	68bb      	ldr	r3, [r7, #8]
 800ab96:	4a38      	ldr	r2, [pc, #224]	@ (800ac78 <USB_SetTurnaroundTime+0x124>)
 800ab98:	4293      	cmp	r3, r2
 800ab9a:	d306      	bcc.n	800abaa <USB_SetTurnaroundTime+0x56>
 800ab9c:	68bb      	ldr	r3, [r7, #8]
 800ab9e:	4a37      	ldr	r2, [pc, #220]	@ (800ac7c <USB_SetTurnaroundTime+0x128>)
 800aba0:	4293      	cmp	r3, r2
 800aba2:	d202      	bcs.n	800abaa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800aba4:	230d      	movs	r3, #13
 800aba6:	617b      	str	r3, [r7, #20]
 800aba8:	e04c      	b.n	800ac44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800abaa:	68bb      	ldr	r3, [r7, #8]
 800abac:	4a33      	ldr	r2, [pc, #204]	@ (800ac7c <USB_SetTurnaroundTime+0x128>)
 800abae:	4293      	cmp	r3, r2
 800abb0:	d306      	bcc.n	800abc0 <USB_SetTurnaroundTime+0x6c>
 800abb2:	68bb      	ldr	r3, [r7, #8]
 800abb4:	4a32      	ldr	r2, [pc, #200]	@ (800ac80 <USB_SetTurnaroundTime+0x12c>)
 800abb6:	4293      	cmp	r3, r2
 800abb8:	d802      	bhi.n	800abc0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800abba:	230c      	movs	r3, #12
 800abbc:	617b      	str	r3, [r7, #20]
 800abbe:	e041      	b.n	800ac44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800abc0:	68bb      	ldr	r3, [r7, #8]
 800abc2:	4a2f      	ldr	r2, [pc, #188]	@ (800ac80 <USB_SetTurnaroundTime+0x12c>)
 800abc4:	4293      	cmp	r3, r2
 800abc6:	d906      	bls.n	800abd6 <USB_SetTurnaroundTime+0x82>
 800abc8:	68bb      	ldr	r3, [r7, #8]
 800abca:	4a2e      	ldr	r2, [pc, #184]	@ (800ac84 <USB_SetTurnaroundTime+0x130>)
 800abcc:	4293      	cmp	r3, r2
 800abce:	d802      	bhi.n	800abd6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800abd0:	230b      	movs	r3, #11
 800abd2:	617b      	str	r3, [r7, #20]
 800abd4:	e036      	b.n	800ac44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800abd6:	68bb      	ldr	r3, [r7, #8]
 800abd8:	4a2a      	ldr	r2, [pc, #168]	@ (800ac84 <USB_SetTurnaroundTime+0x130>)
 800abda:	4293      	cmp	r3, r2
 800abdc:	d906      	bls.n	800abec <USB_SetTurnaroundTime+0x98>
 800abde:	68bb      	ldr	r3, [r7, #8]
 800abe0:	4a29      	ldr	r2, [pc, #164]	@ (800ac88 <USB_SetTurnaroundTime+0x134>)
 800abe2:	4293      	cmp	r3, r2
 800abe4:	d802      	bhi.n	800abec <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800abe6:	230a      	movs	r3, #10
 800abe8:	617b      	str	r3, [r7, #20]
 800abea:	e02b      	b.n	800ac44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800abec:	68bb      	ldr	r3, [r7, #8]
 800abee:	4a26      	ldr	r2, [pc, #152]	@ (800ac88 <USB_SetTurnaroundTime+0x134>)
 800abf0:	4293      	cmp	r3, r2
 800abf2:	d906      	bls.n	800ac02 <USB_SetTurnaroundTime+0xae>
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	4a25      	ldr	r2, [pc, #148]	@ (800ac8c <USB_SetTurnaroundTime+0x138>)
 800abf8:	4293      	cmp	r3, r2
 800abfa:	d202      	bcs.n	800ac02 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800abfc:	2309      	movs	r3, #9
 800abfe:	617b      	str	r3, [r7, #20]
 800ac00:	e020      	b.n	800ac44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800ac02:	68bb      	ldr	r3, [r7, #8]
 800ac04:	4a21      	ldr	r2, [pc, #132]	@ (800ac8c <USB_SetTurnaroundTime+0x138>)
 800ac06:	4293      	cmp	r3, r2
 800ac08:	d306      	bcc.n	800ac18 <USB_SetTurnaroundTime+0xc4>
 800ac0a:	68bb      	ldr	r3, [r7, #8]
 800ac0c:	4a20      	ldr	r2, [pc, #128]	@ (800ac90 <USB_SetTurnaroundTime+0x13c>)
 800ac0e:	4293      	cmp	r3, r2
 800ac10:	d802      	bhi.n	800ac18 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800ac12:	2308      	movs	r3, #8
 800ac14:	617b      	str	r3, [r7, #20]
 800ac16:	e015      	b.n	800ac44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800ac18:	68bb      	ldr	r3, [r7, #8]
 800ac1a:	4a1d      	ldr	r2, [pc, #116]	@ (800ac90 <USB_SetTurnaroundTime+0x13c>)
 800ac1c:	4293      	cmp	r3, r2
 800ac1e:	d906      	bls.n	800ac2e <USB_SetTurnaroundTime+0xda>
 800ac20:	68bb      	ldr	r3, [r7, #8]
 800ac22:	4a1c      	ldr	r2, [pc, #112]	@ (800ac94 <USB_SetTurnaroundTime+0x140>)
 800ac24:	4293      	cmp	r3, r2
 800ac26:	d202      	bcs.n	800ac2e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800ac28:	2307      	movs	r3, #7
 800ac2a:	617b      	str	r3, [r7, #20]
 800ac2c:	e00a      	b.n	800ac44 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800ac2e:	2306      	movs	r3, #6
 800ac30:	617b      	str	r3, [r7, #20]
 800ac32:	e007      	b.n	800ac44 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800ac34:	79fb      	ldrb	r3, [r7, #7]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d102      	bne.n	800ac40 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800ac3a:	2309      	movs	r3, #9
 800ac3c:	617b      	str	r3, [r7, #20]
 800ac3e:	e001      	b.n	800ac44 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800ac40:	2309      	movs	r3, #9
 800ac42:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	68db      	ldr	r3, [r3, #12]
 800ac48:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	68da      	ldr	r2, [r3, #12]
 800ac54:	697b      	ldr	r3, [r7, #20]
 800ac56:	029b      	lsls	r3, r3, #10
 800ac58:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800ac5c:	431a      	orrs	r2, r3
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ac62:	2300      	movs	r3, #0
}
 800ac64:	4618      	mov	r0, r3
 800ac66:	371c      	adds	r7, #28
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6e:	4770      	bx	lr
 800ac70:	00d8acbf 	.word	0x00d8acbf
 800ac74:	00e4e1c0 	.word	0x00e4e1c0
 800ac78:	00f42400 	.word	0x00f42400
 800ac7c:	01067380 	.word	0x01067380
 800ac80:	011a499f 	.word	0x011a499f
 800ac84:	01312cff 	.word	0x01312cff
 800ac88:	014ca43f 	.word	0x014ca43f
 800ac8c:	016e3600 	.word	0x016e3600
 800ac90:	01a6ab1f 	.word	0x01a6ab1f
 800ac94:	01e84800 	.word	0x01e84800

0800ac98 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ac98:	b480      	push	{r7}
 800ac9a:	b083      	sub	sp, #12
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	689b      	ldr	r3, [r3, #8]
 800aca4:	f043 0201 	orr.w	r2, r3, #1
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800acac:	2300      	movs	r3, #0
}
 800acae:	4618      	mov	r0, r3
 800acb0:	370c      	adds	r7, #12
 800acb2:	46bd      	mov	sp, r7
 800acb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb8:	4770      	bx	lr

0800acba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800acba:	b480      	push	{r7}
 800acbc:	b083      	sub	sp, #12
 800acbe:	af00      	add	r7, sp, #0
 800acc0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	689b      	ldr	r3, [r3, #8]
 800acc6:	f023 0201 	bic.w	r2, r3, #1
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800acce:	2300      	movs	r3, #0
}
 800acd0:	4618      	mov	r0, r3
 800acd2:	370c      	adds	r7, #12
 800acd4:	46bd      	mov	sp, r7
 800acd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acda:	4770      	bx	lr

0800acdc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b084      	sub	sp, #16
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
 800ace4:	460b      	mov	r3, r1
 800ace6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800ace8:	2300      	movs	r3, #0
 800acea:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	68db      	ldr	r3, [r3, #12]
 800acf0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800acf8:	78fb      	ldrb	r3, [r7, #3]
 800acfa:	2b01      	cmp	r3, #1
 800acfc:	d115      	bne.n	800ad2a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	68db      	ldr	r3, [r3, #12]
 800ad02:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800ad0a:	200a      	movs	r0, #10
 800ad0c:	f7f9 ffa2 	bl	8004c54 <HAL_Delay>
      ms += 10U;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	330a      	adds	r3, #10
 800ad14:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	f001 f93f 	bl	800bf9a <USB_GetMode>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	2b01      	cmp	r3, #1
 800ad20:	d01e      	beq.n	800ad60 <USB_SetCurrentMode+0x84>
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	2bc7      	cmp	r3, #199	@ 0xc7
 800ad26:	d9f0      	bls.n	800ad0a <USB_SetCurrentMode+0x2e>
 800ad28:	e01a      	b.n	800ad60 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800ad2a:	78fb      	ldrb	r3, [r7, #3]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d115      	bne.n	800ad5c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	68db      	ldr	r3, [r3, #12]
 800ad34:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800ad3c:	200a      	movs	r0, #10
 800ad3e:	f7f9 ff89 	bl	8004c54 <HAL_Delay>
      ms += 10U;
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	330a      	adds	r3, #10
 800ad46:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800ad48:	6878      	ldr	r0, [r7, #4]
 800ad4a:	f001 f926 	bl	800bf9a <USB_GetMode>
 800ad4e:	4603      	mov	r3, r0
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d005      	beq.n	800ad60 <USB_SetCurrentMode+0x84>
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	2bc7      	cmp	r3, #199	@ 0xc7
 800ad58:	d9f0      	bls.n	800ad3c <USB_SetCurrentMode+0x60>
 800ad5a:	e001      	b.n	800ad60 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ad5c:	2301      	movs	r3, #1
 800ad5e:	e005      	b.n	800ad6c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	2bc8      	cmp	r3, #200	@ 0xc8
 800ad64:	d101      	bne.n	800ad6a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ad66:	2301      	movs	r3, #1
 800ad68:	e000      	b.n	800ad6c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800ad6a:	2300      	movs	r3, #0
}
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	3710      	adds	r7, #16
 800ad70:	46bd      	mov	sp, r7
 800ad72:	bd80      	pop	{r7, pc}

0800ad74 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ad74:	b084      	sub	sp, #16
 800ad76:	b580      	push	{r7, lr}
 800ad78:	b086      	sub	sp, #24
 800ad7a:	af00      	add	r7, sp, #0
 800ad7c:	6078      	str	r0, [r7, #4]
 800ad7e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800ad82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ad86:	2300      	movs	r3, #0
 800ad88:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800ad8e:	2300      	movs	r3, #0
 800ad90:	613b      	str	r3, [r7, #16]
 800ad92:	e009      	b.n	800ada8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ad94:	687a      	ldr	r2, [r7, #4]
 800ad96:	693b      	ldr	r3, [r7, #16]
 800ad98:	3340      	adds	r3, #64	@ 0x40
 800ad9a:	009b      	lsls	r3, r3, #2
 800ad9c:	4413      	add	r3, r2
 800ad9e:	2200      	movs	r2, #0
 800ada0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ada2:	693b      	ldr	r3, [r7, #16]
 800ada4:	3301      	adds	r3, #1
 800ada6:	613b      	str	r3, [r7, #16]
 800ada8:	693b      	ldr	r3, [r7, #16]
 800adaa:	2b0e      	cmp	r3, #14
 800adac:	d9f2      	bls.n	800ad94 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800adae:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d11c      	bne.n	800adf0 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800adbc:	685b      	ldr	r3, [r3, #4]
 800adbe:	68fa      	ldr	r2, [r7, #12]
 800adc0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800adc4:	f043 0302 	orr.w	r3, r3, #2
 800adc8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800adce:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800adda:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ade6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	639a      	str	r2, [r3, #56]	@ 0x38
 800adee:	e00b      	b.n	800ae08 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800adf4:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae00:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ae0e:	461a      	mov	r2, r3
 800ae10:	2300      	movs	r3, #0
 800ae12:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ae14:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800ae18:	2b01      	cmp	r3, #1
 800ae1a:	d10d      	bne.n	800ae38 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ae1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d104      	bne.n	800ae2e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ae24:	2100      	movs	r1, #0
 800ae26:	6878      	ldr	r0, [r7, #4]
 800ae28:	f000 f968 	bl	800b0fc <USB_SetDevSpeed>
 800ae2c:	e008      	b.n	800ae40 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ae2e:	2101      	movs	r1, #1
 800ae30:	6878      	ldr	r0, [r7, #4]
 800ae32:	f000 f963 	bl	800b0fc <USB_SetDevSpeed>
 800ae36:	e003      	b.n	800ae40 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ae38:	2103      	movs	r1, #3
 800ae3a:	6878      	ldr	r0, [r7, #4]
 800ae3c:	f000 f95e 	bl	800b0fc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ae40:	2110      	movs	r1, #16
 800ae42:	6878      	ldr	r0, [r7, #4]
 800ae44:	f000 f8fa 	bl	800b03c <USB_FlushTxFifo>
 800ae48:	4603      	mov	r3, r0
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d001      	beq.n	800ae52 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800ae4e:	2301      	movs	r3, #1
 800ae50:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ae52:	6878      	ldr	r0, [r7, #4]
 800ae54:	f000 f924 	bl	800b0a0 <USB_FlushRxFifo>
 800ae58:	4603      	mov	r3, r0
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d001      	beq.n	800ae62 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800ae5e:	2301      	movs	r3, #1
 800ae60:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae68:	461a      	mov	r2, r3
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae74:	461a      	mov	r2, r3
 800ae76:	2300      	movs	r3, #0
 800ae78:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae80:	461a      	mov	r2, r3
 800ae82:	2300      	movs	r3, #0
 800ae84:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ae86:	2300      	movs	r3, #0
 800ae88:	613b      	str	r3, [r7, #16]
 800ae8a:	e043      	b.n	800af14 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ae8c:	693b      	ldr	r3, [r7, #16]
 800ae8e:	015a      	lsls	r2, r3, #5
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	4413      	add	r3, r2
 800ae94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ae9e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aea2:	d118      	bne.n	800aed6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 800aea4:	693b      	ldr	r3, [r7, #16]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d10a      	bne.n	800aec0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800aeaa:	693b      	ldr	r3, [r7, #16]
 800aeac:	015a      	lsls	r2, r3, #5
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	4413      	add	r3, r2
 800aeb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aeb6:	461a      	mov	r2, r3
 800aeb8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800aebc:	6013      	str	r3, [r2, #0]
 800aebe:	e013      	b.n	800aee8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800aec0:	693b      	ldr	r3, [r7, #16]
 800aec2:	015a      	lsls	r2, r3, #5
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	4413      	add	r3, r2
 800aec8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aecc:	461a      	mov	r2, r3
 800aece:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800aed2:	6013      	str	r3, [r2, #0]
 800aed4:	e008      	b.n	800aee8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800aed6:	693b      	ldr	r3, [r7, #16]
 800aed8:	015a      	lsls	r2, r3, #5
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	4413      	add	r3, r2
 800aede:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aee2:	461a      	mov	r2, r3
 800aee4:	2300      	movs	r3, #0
 800aee6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800aee8:	693b      	ldr	r3, [r7, #16]
 800aeea:	015a      	lsls	r2, r3, #5
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	4413      	add	r3, r2
 800aef0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aef4:	461a      	mov	r2, r3
 800aef6:	2300      	movs	r3, #0
 800aef8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800aefa:	693b      	ldr	r3, [r7, #16]
 800aefc:	015a      	lsls	r2, r3, #5
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	4413      	add	r3, r2
 800af02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af06:	461a      	mov	r2, r3
 800af08:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800af0c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800af0e:	693b      	ldr	r3, [r7, #16]
 800af10:	3301      	adds	r3, #1
 800af12:	613b      	str	r3, [r7, #16]
 800af14:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800af18:	461a      	mov	r2, r3
 800af1a:	693b      	ldr	r3, [r7, #16]
 800af1c:	4293      	cmp	r3, r2
 800af1e:	d3b5      	bcc.n	800ae8c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800af20:	2300      	movs	r3, #0
 800af22:	613b      	str	r3, [r7, #16]
 800af24:	e043      	b.n	800afae <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800af26:	693b      	ldr	r3, [r7, #16]
 800af28:	015a      	lsls	r2, r3, #5
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	4413      	add	r3, r2
 800af2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800af38:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800af3c:	d118      	bne.n	800af70 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800af3e:	693b      	ldr	r3, [r7, #16]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d10a      	bne.n	800af5a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800af44:	693b      	ldr	r3, [r7, #16]
 800af46:	015a      	lsls	r2, r3, #5
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	4413      	add	r3, r2
 800af4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af50:	461a      	mov	r2, r3
 800af52:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800af56:	6013      	str	r3, [r2, #0]
 800af58:	e013      	b.n	800af82 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800af5a:	693b      	ldr	r3, [r7, #16]
 800af5c:	015a      	lsls	r2, r3, #5
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	4413      	add	r3, r2
 800af62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af66:	461a      	mov	r2, r3
 800af68:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800af6c:	6013      	str	r3, [r2, #0]
 800af6e:	e008      	b.n	800af82 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800af70:	693b      	ldr	r3, [r7, #16]
 800af72:	015a      	lsls	r2, r3, #5
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	4413      	add	r3, r2
 800af78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af7c:	461a      	mov	r2, r3
 800af7e:	2300      	movs	r3, #0
 800af80:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800af82:	693b      	ldr	r3, [r7, #16]
 800af84:	015a      	lsls	r2, r3, #5
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	4413      	add	r3, r2
 800af8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af8e:	461a      	mov	r2, r3
 800af90:	2300      	movs	r3, #0
 800af92:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800af94:	693b      	ldr	r3, [r7, #16]
 800af96:	015a      	lsls	r2, r3, #5
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	4413      	add	r3, r2
 800af9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800afa0:	461a      	mov	r2, r3
 800afa2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800afa6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800afa8:	693b      	ldr	r3, [r7, #16]
 800afaa:	3301      	adds	r3, #1
 800afac:	613b      	str	r3, [r7, #16]
 800afae:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800afb2:	461a      	mov	r2, r3
 800afb4:	693b      	ldr	r3, [r7, #16]
 800afb6:	4293      	cmp	r3, r2
 800afb8:	d3b5      	bcc.n	800af26 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800afc0:	691b      	ldr	r3, [r3, #16]
 800afc2:	68fa      	ldr	r2, [r7, #12]
 800afc4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800afc8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800afcc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	2200      	movs	r2, #0
 800afd2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800afda:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800afdc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d105      	bne.n	800aff0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	699b      	ldr	r3, [r3, #24]
 800afe8:	f043 0210 	orr.w	r2, r3, #16
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	699a      	ldr	r2, [r3, #24]
 800aff4:	4b10      	ldr	r3, [pc, #64]	@ (800b038 <USB_DevInit+0x2c4>)
 800aff6:	4313      	orrs	r3, r2
 800aff8:	687a      	ldr	r2, [r7, #4]
 800affa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800affc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800b000:	2b00      	cmp	r3, #0
 800b002:	d005      	beq.n	800b010 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	699b      	ldr	r3, [r3, #24]
 800b008:	f043 0208 	orr.w	r2, r3, #8
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b010:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b014:	2b01      	cmp	r3, #1
 800b016:	d107      	bne.n	800b028 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	699b      	ldr	r3, [r3, #24]
 800b01c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b020:	f043 0304 	orr.w	r3, r3, #4
 800b024:	687a      	ldr	r2, [r7, #4]
 800b026:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b028:	7dfb      	ldrb	r3, [r7, #23]
}
 800b02a:	4618      	mov	r0, r3
 800b02c:	3718      	adds	r7, #24
 800b02e:	46bd      	mov	sp, r7
 800b030:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b034:	b004      	add	sp, #16
 800b036:	4770      	bx	lr
 800b038:	803c3800 	.word	0x803c3800

0800b03c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b03c:	b480      	push	{r7}
 800b03e:	b085      	sub	sp, #20
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
 800b044:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b046:	2300      	movs	r3, #0
 800b048:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	3301      	adds	r3, #1
 800b04e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b056:	d901      	bls.n	800b05c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b058:	2303      	movs	r3, #3
 800b05a:	e01b      	b.n	800b094 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	691b      	ldr	r3, [r3, #16]
 800b060:	2b00      	cmp	r3, #0
 800b062:	daf2      	bge.n	800b04a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b064:	2300      	movs	r3, #0
 800b066:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	019b      	lsls	r3, r3, #6
 800b06c:	f043 0220 	orr.w	r2, r3, #32
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	3301      	adds	r3, #1
 800b078:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b080:	d901      	bls.n	800b086 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b082:	2303      	movs	r3, #3
 800b084:	e006      	b.n	800b094 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	691b      	ldr	r3, [r3, #16]
 800b08a:	f003 0320 	and.w	r3, r3, #32
 800b08e:	2b20      	cmp	r3, #32
 800b090:	d0f0      	beq.n	800b074 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b092:	2300      	movs	r3, #0
}
 800b094:	4618      	mov	r0, r3
 800b096:	3714      	adds	r7, #20
 800b098:	46bd      	mov	sp, r7
 800b09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09e:	4770      	bx	lr

0800b0a0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b0a0:	b480      	push	{r7}
 800b0a2:	b085      	sub	sp, #20
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	3301      	adds	r3, #1
 800b0b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b0b8:	d901      	bls.n	800b0be <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b0ba:	2303      	movs	r3, #3
 800b0bc:	e018      	b.n	800b0f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	691b      	ldr	r3, [r3, #16]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	daf2      	bge.n	800b0ac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	2210      	movs	r2, #16
 800b0ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	3301      	adds	r3, #1
 800b0d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b0dc:	d901      	bls.n	800b0e2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b0de:	2303      	movs	r3, #3
 800b0e0:	e006      	b.n	800b0f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	691b      	ldr	r3, [r3, #16]
 800b0e6:	f003 0310 	and.w	r3, r3, #16
 800b0ea:	2b10      	cmp	r3, #16
 800b0ec:	d0f0      	beq.n	800b0d0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b0ee:	2300      	movs	r3, #0
}
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	3714      	adds	r7, #20
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fa:	4770      	bx	lr

0800b0fc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b0fc:	b480      	push	{r7}
 800b0fe:	b085      	sub	sp, #20
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
 800b104:	460b      	mov	r3, r1
 800b106:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b112:	681a      	ldr	r2, [r3, #0]
 800b114:	78fb      	ldrb	r3, [r7, #3]
 800b116:	68f9      	ldr	r1, [r7, #12]
 800b118:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b11c:	4313      	orrs	r3, r2
 800b11e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b120:	2300      	movs	r3, #0
}
 800b122:	4618      	mov	r0, r3
 800b124:	3714      	adds	r7, #20
 800b126:	46bd      	mov	sp, r7
 800b128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12c:	4770      	bx	lr

0800b12e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800b12e:	b480      	push	{r7}
 800b130:	b087      	sub	sp, #28
 800b132:	af00      	add	r7, sp, #0
 800b134:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800b13a:	693b      	ldr	r3, [r7, #16]
 800b13c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b140:	689b      	ldr	r3, [r3, #8]
 800b142:	f003 0306 	and.w	r3, r3, #6
 800b146:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d102      	bne.n	800b154 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800b14e:	2300      	movs	r3, #0
 800b150:	75fb      	strb	r3, [r7, #23]
 800b152:	e00a      	b.n	800b16a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	2b02      	cmp	r3, #2
 800b158:	d002      	beq.n	800b160 <USB_GetDevSpeed+0x32>
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	2b06      	cmp	r3, #6
 800b15e:	d102      	bne.n	800b166 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800b160:	2302      	movs	r3, #2
 800b162:	75fb      	strb	r3, [r7, #23]
 800b164:	e001      	b.n	800b16a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800b166:	230f      	movs	r3, #15
 800b168:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800b16a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b16c:	4618      	mov	r0, r3
 800b16e:	371c      	adds	r7, #28
 800b170:	46bd      	mov	sp, r7
 800b172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b176:	4770      	bx	lr

0800b178 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b178:	b480      	push	{r7}
 800b17a:	b085      	sub	sp, #20
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
 800b180:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b186:	683b      	ldr	r3, [r7, #0]
 800b188:	781b      	ldrb	r3, [r3, #0]
 800b18a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	785b      	ldrb	r3, [r3, #1]
 800b190:	2b01      	cmp	r3, #1
 800b192:	d13a      	bne.n	800b20a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b19a:	69da      	ldr	r2, [r3, #28]
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	781b      	ldrb	r3, [r3, #0]
 800b1a0:	f003 030f 	and.w	r3, r3, #15
 800b1a4:	2101      	movs	r1, #1
 800b1a6:	fa01 f303 	lsl.w	r3, r1, r3
 800b1aa:	b29b      	uxth	r3, r3
 800b1ac:	68f9      	ldr	r1, [r7, #12]
 800b1ae:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b1b2:	4313      	orrs	r3, r2
 800b1b4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800b1b6:	68bb      	ldr	r3, [r7, #8]
 800b1b8:	015a      	lsls	r2, r3, #5
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	4413      	add	r3, r2
 800b1be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d155      	bne.n	800b278 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b1cc:	68bb      	ldr	r3, [r7, #8]
 800b1ce:	015a      	lsls	r2, r3, #5
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	4413      	add	r3, r2
 800b1d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b1d8:	681a      	ldr	r2, [r3, #0]
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	689b      	ldr	r3, [r3, #8]
 800b1de:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	791b      	ldrb	r3, [r3, #4]
 800b1e6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b1e8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b1ea:	68bb      	ldr	r3, [r7, #8]
 800b1ec:	059b      	lsls	r3, r3, #22
 800b1ee:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b1f0:	4313      	orrs	r3, r2
 800b1f2:	68ba      	ldr	r2, [r7, #8]
 800b1f4:	0151      	lsls	r1, r2, #5
 800b1f6:	68fa      	ldr	r2, [r7, #12]
 800b1f8:	440a      	add	r2, r1
 800b1fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b1fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b202:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b206:	6013      	str	r3, [r2, #0]
 800b208:	e036      	b.n	800b278 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b210:	69da      	ldr	r2, [r3, #28]
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	781b      	ldrb	r3, [r3, #0]
 800b216:	f003 030f 	and.w	r3, r3, #15
 800b21a:	2101      	movs	r1, #1
 800b21c:	fa01 f303 	lsl.w	r3, r1, r3
 800b220:	041b      	lsls	r3, r3, #16
 800b222:	68f9      	ldr	r1, [r7, #12]
 800b224:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b228:	4313      	orrs	r3, r2
 800b22a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800b22c:	68bb      	ldr	r3, [r7, #8]
 800b22e:	015a      	lsls	r2, r3, #5
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	4413      	add	r3, r2
 800b234:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d11a      	bne.n	800b278 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b242:	68bb      	ldr	r3, [r7, #8]
 800b244:	015a      	lsls	r2, r3, #5
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	4413      	add	r3, r2
 800b24a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b24e:	681a      	ldr	r2, [r3, #0]
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	689b      	ldr	r3, [r3, #8]
 800b254:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800b258:	683b      	ldr	r3, [r7, #0]
 800b25a:	791b      	ldrb	r3, [r3, #4]
 800b25c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b25e:	430b      	orrs	r3, r1
 800b260:	4313      	orrs	r3, r2
 800b262:	68ba      	ldr	r2, [r7, #8]
 800b264:	0151      	lsls	r1, r2, #5
 800b266:	68fa      	ldr	r2, [r7, #12]
 800b268:	440a      	add	r2, r1
 800b26a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b26e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b272:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b276:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800b278:	2300      	movs	r3, #0
}
 800b27a:	4618      	mov	r0, r3
 800b27c:	3714      	adds	r7, #20
 800b27e:	46bd      	mov	sp, r7
 800b280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b284:	4770      	bx	lr
	...

0800b288 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b288:	b480      	push	{r7}
 800b28a:	b085      	sub	sp, #20
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
 800b290:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b296:	683b      	ldr	r3, [r7, #0]
 800b298:	781b      	ldrb	r3, [r3, #0]
 800b29a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800b29c:	683b      	ldr	r3, [r7, #0]
 800b29e:	785b      	ldrb	r3, [r3, #1]
 800b2a0:	2b01      	cmp	r3, #1
 800b2a2:	d161      	bne.n	800b368 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b2a4:	68bb      	ldr	r3, [r7, #8]
 800b2a6:	015a      	lsls	r2, r3, #5
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	4413      	add	r3, r2
 800b2ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b2b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b2ba:	d11f      	bne.n	800b2fc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800b2bc:	68bb      	ldr	r3, [r7, #8]
 800b2be:	015a      	lsls	r2, r3, #5
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	4413      	add	r3, r2
 800b2c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	68ba      	ldr	r2, [r7, #8]
 800b2cc:	0151      	lsls	r1, r2, #5
 800b2ce:	68fa      	ldr	r2, [r7, #12]
 800b2d0:	440a      	add	r2, r1
 800b2d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b2d6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b2da:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800b2dc:	68bb      	ldr	r3, [r7, #8]
 800b2de:	015a      	lsls	r2, r3, #5
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	4413      	add	r3, r2
 800b2e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	68ba      	ldr	r2, [r7, #8]
 800b2ec:	0151      	lsls	r1, r2, #5
 800b2ee:	68fa      	ldr	r2, [r7, #12]
 800b2f0:	440a      	add	r2, r1
 800b2f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b2f6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b2fa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b302:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	781b      	ldrb	r3, [r3, #0]
 800b308:	f003 030f 	and.w	r3, r3, #15
 800b30c:	2101      	movs	r1, #1
 800b30e:	fa01 f303 	lsl.w	r3, r1, r3
 800b312:	b29b      	uxth	r3, r3
 800b314:	43db      	mvns	r3, r3
 800b316:	68f9      	ldr	r1, [r7, #12]
 800b318:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b31c:	4013      	ands	r3, r2
 800b31e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b326:	69da      	ldr	r2, [r3, #28]
 800b328:	683b      	ldr	r3, [r7, #0]
 800b32a:	781b      	ldrb	r3, [r3, #0]
 800b32c:	f003 030f 	and.w	r3, r3, #15
 800b330:	2101      	movs	r1, #1
 800b332:	fa01 f303 	lsl.w	r3, r1, r3
 800b336:	b29b      	uxth	r3, r3
 800b338:	43db      	mvns	r3, r3
 800b33a:	68f9      	ldr	r1, [r7, #12]
 800b33c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b340:	4013      	ands	r3, r2
 800b342:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800b344:	68bb      	ldr	r3, [r7, #8]
 800b346:	015a      	lsls	r2, r3, #5
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	4413      	add	r3, r2
 800b34c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b350:	681a      	ldr	r2, [r3, #0]
 800b352:	68bb      	ldr	r3, [r7, #8]
 800b354:	0159      	lsls	r1, r3, #5
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	440b      	add	r3, r1
 800b35a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b35e:	4619      	mov	r1, r3
 800b360:	4b35      	ldr	r3, [pc, #212]	@ (800b438 <USB_DeactivateEndpoint+0x1b0>)
 800b362:	4013      	ands	r3, r2
 800b364:	600b      	str	r3, [r1, #0]
 800b366:	e060      	b.n	800b42a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b368:	68bb      	ldr	r3, [r7, #8]
 800b36a:	015a      	lsls	r2, r3, #5
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	4413      	add	r3, r2
 800b370:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b37a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b37e:	d11f      	bne.n	800b3c0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b380:	68bb      	ldr	r3, [r7, #8]
 800b382:	015a      	lsls	r2, r3, #5
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	4413      	add	r3, r2
 800b388:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	68ba      	ldr	r2, [r7, #8]
 800b390:	0151      	lsls	r1, r2, #5
 800b392:	68fa      	ldr	r2, [r7, #12]
 800b394:	440a      	add	r2, r1
 800b396:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b39a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b39e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800b3a0:	68bb      	ldr	r3, [r7, #8]
 800b3a2:	015a      	lsls	r2, r3, #5
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	4413      	add	r3, r2
 800b3a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	68ba      	ldr	r2, [r7, #8]
 800b3b0:	0151      	lsls	r1, r2, #5
 800b3b2:	68fa      	ldr	r2, [r7, #12]
 800b3b4:	440a      	add	r2, r1
 800b3b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b3ba:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b3be:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b3c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	781b      	ldrb	r3, [r3, #0]
 800b3cc:	f003 030f 	and.w	r3, r3, #15
 800b3d0:	2101      	movs	r1, #1
 800b3d2:	fa01 f303 	lsl.w	r3, r1, r3
 800b3d6:	041b      	lsls	r3, r3, #16
 800b3d8:	43db      	mvns	r3, r3
 800b3da:	68f9      	ldr	r1, [r7, #12]
 800b3dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b3e0:	4013      	ands	r3, r2
 800b3e2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b3ea:	69da      	ldr	r2, [r3, #28]
 800b3ec:	683b      	ldr	r3, [r7, #0]
 800b3ee:	781b      	ldrb	r3, [r3, #0]
 800b3f0:	f003 030f 	and.w	r3, r3, #15
 800b3f4:	2101      	movs	r1, #1
 800b3f6:	fa01 f303 	lsl.w	r3, r1, r3
 800b3fa:	041b      	lsls	r3, r3, #16
 800b3fc:	43db      	mvns	r3, r3
 800b3fe:	68f9      	ldr	r1, [r7, #12]
 800b400:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b404:	4013      	ands	r3, r2
 800b406:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800b408:	68bb      	ldr	r3, [r7, #8]
 800b40a:	015a      	lsls	r2, r3, #5
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	4413      	add	r3, r2
 800b410:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b414:	681a      	ldr	r2, [r3, #0]
 800b416:	68bb      	ldr	r3, [r7, #8]
 800b418:	0159      	lsls	r1, r3, #5
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	440b      	add	r3, r1
 800b41e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b422:	4619      	mov	r1, r3
 800b424:	4b05      	ldr	r3, [pc, #20]	@ (800b43c <USB_DeactivateEndpoint+0x1b4>)
 800b426:	4013      	ands	r3, r2
 800b428:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800b42a:	2300      	movs	r3, #0
}
 800b42c:	4618      	mov	r0, r3
 800b42e:	3714      	adds	r7, #20
 800b430:	46bd      	mov	sp, r7
 800b432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b436:	4770      	bx	lr
 800b438:	ec337800 	.word	0xec337800
 800b43c:	eff37800 	.word	0xeff37800

0800b440 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b08a      	sub	sp, #40	@ 0x28
 800b444:	af02      	add	r7, sp, #8
 800b446:	60f8      	str	r0, [r7, #12]
 800b448:	60b9      	str	r1, [r7, #8]
 800b44a:	4613      	mov	r3, r2
 800b44c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800b452:	68bb      	ldr	r3, [r7, #8]
 800b454:	781b      	ldrb	r3, [r3, #0]
 800b456:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b458:	68bb      	ldr	r3, [r7, #8]
 800b45a:	785b      	ldrb	r3, [r3, #1]
 800b45c:	2b01      	cmp	r3, #1
 800b45e:	f040 817f 	bne.w	800b760 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b462:	68bb      	ldr	r3, [r7, #8]
 800b464:	691b      	ldr	r3, [r3, #16]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d132      	bne.n	800b4d0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b46a:	69bb      	ldr	r3, [r7, #24]
 800b46c:	015a      	lsls	r2, r3, #5
 800b46e:	69fb      	ldr	r3, [r7, #28]
 800b470:	4413      	add	r3, r2
 800b472:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b476:	691b      	ldr	r3, [r3, #16]
 800b478:	69ba      	ldr	r2, [r7, #24]
 800b47a:	0151      	lsls	r1, r2, #5
 800b47c:	69fa      	ldr	r2, [r7, #28]
 800b47e:	440a      	add	r2, r1
 800b480:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b484:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800b488:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800b48c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b48e:	69bb      	ldr	r3, [r7, #24]
 800b490:	015a      	lsls	r2, r3, #5
 800b492:	69fb      	ldr	r3, [r7, #28]
 800b494:	4413      	add	r3, r2
 800b496:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b49a:	691b      	ldr	r3, [r3, #16]
 800b49c:	69ba      	ldr	r2, [r7, #24]
 800b49e:	0151      	lsls	r1, r2, #5
 800b4a0:	69fa      	ldr	r2, [r7, #28]
 800b4a2:	440a      	add	r2, r1
 800b4a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b4a8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b4ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b4ae:	69bb      	ldr	r3, [r7, #24]
 800b4b0:	015a      	lsls	r2, r3, #5
 800b4b2:	69fb      	ldr	r3, [r7, #28]
 800b4b4:	4413      	add	r3, r2
 800b4b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b4ba:	691b      	ldr	r3, [r3, #16]
 800b4bc:	69ba      	ldr	r2, [r7, #24]
 800b4be:	0151      	lsls	r1, r2, #5
 800b4c0:	69fa      	ldr	r2, [r7, #28]
 800b4c2:	440a      	add	r2, r1
 800b4c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b4c8:	0cdb      	lsrs	r3, r3, #19
 800b4ca:	04db      	lsls	r3, r3, #19
 800b4cc:	6113      	str	r3, [r2, #16]
 800b4ce:	e097      	b.n	800b600 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b4d0:	69bb      	ldr	r3, [r7, #24]
 800b4d2:	015a      	lsls	r2, r3, #5
 800b4d4:	69fb      	ldr	r3, [r7, #28]
 800b4d6:	4413      	add	r3, r2
 800b4d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b4dc:	691b      	ldr	r3, [r3, #16]
 800b4de:	69ba      	ldr	r2, [r7, #24]
 800b4e0:	0151      	lsls	r1, r2, #5
 800b4e2:	69fa      	ldr	r2, [r7, #28]
 800b4e4:	440a      	add	r2, r1
 800b4e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b4ea:	0cdb      	lsrs	r3, r3, #19
 800b4ec:	04db      	lsls	r3, r3, #19
 800b4ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b4f0:	69bb      	ldr	r3, [r7, #24]
 800b4f2:	015a      	lsls	r2, r3, #5
 800b4f4:	69fb      	ldr	r3, [r7, #28]
 800b4f6:	4413      	add	r3, r2
 800b4f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b4fc:	691b      	ldr	r3, [r3, #16]
 800b4fe:	69ba      	ldr	r2, [r7, #24]
 800b500:	0151      	lsls	r1, r2, #5
 800b502:	69fa      	ldr	r2, [r7, #28]
 800b504:	440a      	add	r2, r1
 800b506:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b50a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800b50e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800b512:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800b514:	69bb      	ldr	r3, [r7, #24]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d11a      	bne.n	800b550 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800b51a:	68bb      	ldr	r3, [r7, #8]
 800b51c:	691a      	ldr	r2, [r3, #16]
 800b51e:	68bb      	ldr	r3, [r7, #8]
 800b520:	689b      	ldr	r3, [r3, #8]
 800b522:	429a      	cmp	r2, r3
 800b524:	d903      	bls.n	800b52e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800b526:	68bb      	ldr	r3, [r7, #8]
 800b528:	689a      	ldr	r2, [r3, #8]
 800b52a:	68bb      	ldr	r3, [r7, #8]
 800b52c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b52e:	69bb      	ldr	r3, [r7, #24]
 800b530:	015a      	lsls	r2, r3, #5
 800b532:	69fb      	ldr	r3, [r7, #28]
 800b534:	4413      	add	r3, r2
 800b536:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b53a:	691b      	ldr	r3, [r3, #16]
 800b53c:	69ba      	ldr	r2, [r7, #24]
 800b53e:	0151      	lsls	r1, r2, #5
 800b540:	69fa      	ldr	r2, [r7, #28]
 800b542:	440a      	add	r2, r1
 800b544:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b548:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b54c:	6113      	str	r3, [r2, #16]
 800b54e:	e044      	b.n	800b5da <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b550:	68bb      	ldr	r3, [r7, #8]
 800b552:	691a      	ldr	r2, [r3, #16]
 800b554:	68bb      	ldr	r3, [r7, #8]
 800b556:	689b      	ldr	r3, [r3, #8]
 800b558:	4413      	add	r3, r2
 800b55a:	1e5a      	subs	r2, r3, #1
 800b55c:	68bb      	ldr	r3, [r7, #8]
 800b55e:	689b      	ldr	r3, [r3, #8]
 800b560:	fbb2 f3f3 	udiv	r3, r2, r3
 800b564:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800b566:	69bb      	ldr	r3, [r7, #24]
 800b568:	015a      	lsls	r2, r3, #5
 800b56a:	69fb      	ldr	r3, [r7, #28]
 800b56c:	4413      	add	r3, r2
 800b56e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b572:	691a      	ldr	r2, [r3, #16]
 800b574:	8afb      	ldrh	r3, [r7, #22]
 800b576:	04d9      	lsls	r1, r3, #19
 800b578:	4ba4      	ldr	r3, [pc, #656]	@ (800b80c <USB_EPStartXfer+0x3cc>)
 800b57a:	400b      	ands	r3, r1
 800b57c:	69b9      	ldr	r1, [r7, #24]
 800b57e:	0148      	lsls	r0, r1, #5
 800b580:	69f9      	ldr	r1, [r7, #28]
 800b582:	4401      	add	r1, r0
 800b584:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800b588:	4313      	orrs	r3, r2
 800b58a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800b58c:	68bb      	ldr	r3, [r7, #8]
 800b58e:	791b      	ldrb	r3, [r3, #4]
 800b590:	2b01      	cmp	r3, #1
 800b592:	d122      	bne.n	800b5da <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b594:	69bb      	ldr	r3, [r7, #24]
 800b596:	015a      	lsls	r2, r3, #5
 800b598:	69fb      	ldr	r3, [r7, #28]
 800b59a:	4413      	add	r3, r2
 800b59c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b5a0:	691b      	ldr	r3, [r3, #16]
 800b5a2:	69ba      	ldr	r2, [r7, #24]
 800b5a4:	0151      	lsls	r1, r2, #5
 800b5a6:	69fa      	ldr	r2, [r7, #28]
 800b5a8:	440a      	add	r2, r1
 800b5aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b5ae:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800b5b2:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800b5b4:	69bb      	ldr	r3, [r7, #24]
 800b5b6:	015a      	lsls	r2, r3, #5
 800b5b8:	69fb      	ldr	r3, [r7, #28]
 800b5ba:	4413      	add	r3, r2
 800b5bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b5c0:	691a      	ldr	r2, [r3, #16]
 800b5c2:	8afb      	ldrh	r3, [r7, #22]
 800b5c4:	075b      	lsls	r3, r3, #29
 800b5c6:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800b5ca:	69b9      	ldr	r1, [r7, #24]
 800b5cc:	0148      	lsls	r0, r1, #5
 800b5ce:	69f9      	ldr	r1, [r7, #28]
 800b5d0:	4401      	add	r1, r0
 800b5d2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800b5d6:	4313      	orrs	r3, r2
 800b5d8:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b5da:	69bb      	ldr	r3, [r7, #24]
 800b5dc:	015a      	lsls	r2, r3, #5
 800b5de:	69fb      	ldr	r3, [r7, #28]
 800b5e0:	4413      	add	r3, r2
 800b5e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b5e6:	691a      	ldr	r2, [r3, #16]
 800b5e8:	68bb      	ldr	r3, [r7, #8]
 800b5ea:	691b      	ldr	r3, [r3, #16]
 800b5ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b5f0:	69b9      	ldr	r1, [r7, #24]
 800b5f2:	0148      	lsls	r0, r1, #5
 800b5f4:	69f9      	ldr	r1, [r7, #28]
 800b5f6:	4401      	add	r1, r0
 800b5f8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800b5fc:	4313      	orrs	r3, r2
 800b5fe:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b600:	79fb      	ldrb	r3, [r7, #7]
 800b602:	2b01      	cmp	r3, #1
 800b604:	d14b      	bne.n	800b69e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b606:	68bb      	ldr	r3, [r7, #8]
 800b608:	69db      	ldr	r3, [r3, #28]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d009      	beq.n	800b622 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b60e:	69bb      	ldr	r3, [r7, #24]
 800b610:	015a      	lsls	r2, r3, #5
 800b612:	69fb      	ldr	r3, [r7, #28]
 800b614:	4413      	add	r3, r2
 800b616:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b61a:	461a      	mov	r2, r3
 800b61c:	68bb      	ldr	r3, [r7, #8]
 800b61e:	69db      	ldr	r3, [r3, #28]
 800b620:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b622:	68bb      	ldr	r3, [r7, #8]
 800b624:	791b      	ldrb	r3, [r3, #4]
 800b626:	2b01      	cmp	r3, #1
 800b628:	d128      	bne.n	800b67c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b62a:	69fb      	ldr	r3, [r7, #28]
 800b62c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b630:	689b      	ldr	r3, [r3, #8]
 800b632:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b636:	2b00      	cmp	r3, #0
 800b638:	d110      	bne.n	800b65c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b63a:	69bb      	ldr	r3, [r7, #24]
 800b63c:	015a      	lsls	r2, r3, #5
 800b63e:	69fb      	ldr	r3, [r7, #28]
 800b640:	4413      	add	r3, r2
 800b642:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	69ba      	ldr	r2, [r7, #24]
 800b64a:	0151      	lsls	r1, r2, #5
 800b64c:	69fa      	ldr	r2, [r7, #28]
 800b64e:	440a      	add	r2, r1
 800b650:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b654:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b658:	6013      	str	r3, [r2, #0]
 800b65a:	e00f      	b.n	800b67c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b65c:	69bb      	ldr	r3, [r7, #24]
 800b65e:	015a      	lsls	r2, r3, #5
 800b660:	69fb      	ldr	r3, [r7, #28]
 800b662:	4413      	add	r3, r2
 800b664:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	69ba      	ldr	r2, [r7, #24]
 800b66c:	0151      	lsls	r1, r2, #5
 800b66e:	69fa      	ldr	r2, [r7, #28]
 800b670:	440a      	add	r2, r1
 800b672:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b676:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b67a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b67c:	69bb      	ldr	r3, [r7, #24]
 800b67e:	015a      	lsls	r2, r3, #5
 800b680:	69fb      	ldr	r3, [r7, #28]
 800b682:	4413      	add	r3, r2
 800b684:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	69ba      	ldr	r2, [r7, #24]
 800b68c:	0151      	lsls	r1, r2, #5
 800b68e:	69fa      	ldr	r2, [r7, #28]
 800b690:	440a      	add	r2, r1
 800b692:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b696:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b69a:	6013      	str	r3, [r2, #0]
 800b69c:	e166      	b.n	800b96c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b69e:	69bb      	ldr	r3, [r7, #24]
 800b6a0:	015a      	lsls	r2, r3, #5
 800b6a2:	69fb      	ldr	r3, [r7, #28]
 800b6a4:	4413      	add	r3, r2
 800b6a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	69ba      	ldr	r2, [r7, #24]
 800b6ae:	0151      	lsls	r1, r2, #5
 800b6b0:	69fa      	ldr	r2, [r7, #28]
 800b6b2:	440a      	add	r2, r1
 800b6b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b6b8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b6bc:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b6be:	68bb      	ldr	r3, [r7, #8]
 800b6c0:	791b      	ldrb	r3, [r3, #4]
 800b6c2:	2b01      	cmp	r3, #1
 800b6c4:	d015      	beq.n	800b6f2 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b6c6:	68bb      	ldr	r3, [r7, #8]
 800b6c8:	691b      	ldr	r3, [r3, #16]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	f000 814e 	beq.w	800b96c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b6d0:	69fb      	ldr	r3, [r7, #28]
 800b6d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b6d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b6d8:	68bb      	ldr	r3, [r7, #8]
 800b6da:	781b      	ldrb	r3, [r3, #0]
 800b6dc:	f003 030f 	and.w	r3, r3, #15
 800b6e0:	2101      	movs	r1, #1
 800b6e2:	fa01 f303 	lsl.w	r3, r1, r3
 800b6e6:	69f9      	ldr	r1, [r7, #28]
 800b6e8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b6ec:	4313      	orrs	r3, r2
 800b6ee:	634b      	str	r3, [r1, #52]	@ 0x34
 800b6f0:	e13c      	b.n	800b96c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b6f2:	69fb      	ldr	r3, [r7, #28]
 800b6f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b6f8:	689b      	ldr	r3, [r3, #8]
 800b6fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d110      	bne.n	800b724 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b702:	69bb      	ldr	r3, [r7, #24]
 800b704:	015a      	lsls	r2, r3, #5
 800b706:	69fb      	ldr	r3, [r7, #28]
 800b708:	4413      	add	r3, r2
 800b70a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	69ba      	ldr	r2, [r7, #24]
 800b712:	0151      	lsls	r1, r2, #5
 800b714:	69fa      	ldr	r2, [r7, #28]
 800b716:	440a      	add	r2, r1
 800b718:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b71c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b720:	6013      	str	r3, [r2, #0]
 800b722:	e00f      	b.n	800b744 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b724:	69bb      	ldr	r3, [r7, #24]
 800b726:	015a      	lsls	r2, r3, #5
 800b728:	69fb      	ldr	r3, [r7, #28]
 800b72a:	4413      	add	r3, r2
 800b72c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	69ba      	ldr	r2, [r7, #24]
 800b734:	0151      	lsls	r1, r2, #5
 800b736:	69fa      	ldr	r2, [r7, #28]
 800b738:	440a      	add	r2, r1
 800b73a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b73e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b742:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b744:	68bb      	ldr	r3, [r7, #8]
 800b746:	68d9      	ldr	r1, [r3, #12]
 800b748:	68bb      	ldr	r3, [r7, #8]
 800b74a:	781a      	ldrb	r2, [r3, #0]
 800b74c:	68bb      	ldr	r3, [r7, #8]
 800b74e:	691b      	ldr	r3, [r3, #16]
 800b750:	b298      	uxth	r0, r3
 800b752:	79fb      	ldrb	r3, [r7, #7]
 800b754:	9300      	str	r3, [sp, #0]
 800b756:	4603      	mov	r3, r0
 800b758:	68f8      	ldr	r0, [r7, #12]
 800b75a:	f000 f9b9 	bl	800bad0 <USB_WritePacket>
 800b75e:	e105      	b.n	800b96c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b760:	69bb      	ldr	r3, [r7, #24]
 800b762:	015a      	lsls	r2, r3, #5
 800b764:	69fb      	ldr	r3, [r7, #28]
 800b766:	4413      	add	r3, r2
 800b768:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b76c:	691b      	ldr	r3, [r3, #16]
 800b76e:	69ba      	ldr	r2, [r7, #24]
 800b770:	0151      	lsls	r1, r2, #5
 800b772:	69fa      	ldr	r2, [r7, #28]
 800b774:	440a      	add	r2, r1
 800b776:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b77a:	0cdb      	lsrs	r3, r3, #19
 800b77c:	04db      	lsls	r3, r3, #19
 800b77e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b780:	69bb      	ldr	r3, [r7, #24]
 800b782:	015a      	lsls	r2, r3, #5
 800b784:	69fb      	ldr	r3, [r7, #28]
 800b786:	4413      	add	r3, r2
 800b788:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b78c:	691b      	ldr	r3, [r3, #16]
 800b78e:	69ba      	ldr	r2, [r7, #24]
 800b790:	0151      	lsls	r1, r2, #5
 800b792:	69fa      	ldr	r2, [r7, #28]
 800b794:	440a      	add	r2, r1
 800b796:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b79a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800b79e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800b7a2:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800b7a4:	69bb      	ldr	r3, [r7, #24]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d132      	bne.n	800b810 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800b7aa:	68bb      	ldr	r3, [r7, #8]
 800b7ac:	691b      	ldr	r3, [r3, #16]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d003      	beq.n	800b7ba <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800b7b2:	68bb      	ldr	r3, [r7, #8]
 800b7b4:	689a      	ldr	r2, [r3, #8]
 800b7b6:	68bb      	ldr	r3, [r7, #8]
 800b7b8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800b7ba:	68bb      	ldr	r3, [r7, #8]
 800b7bc:	689a      	ldr	r2, [r3, #8]
 800b7be:	68bb      	ldr	r3, [r7, #8]
 800b7c0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800b7c2:	69bb      	ldr	r3, [r7, #24]
 800b7c4:	015a      	lsls	r2, r3, #5
 800b7c6:	69fb      	ldr	r3, [r7, #28]
 800b7c8:	4413      	add	r3, r2
 800b7ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b7ce:	691a      	ldr	r2, [r3, #16]
 800b7d0:	68bb      	ldr	r3, [r7, #8]
 800b7d2:	6a1b      	ldr	r3, [r3, #32]
 800b7d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b7d8:	69b9      	ldr	r1, [r7, #24]
 800b7da:	0148      	lsls	r0, r1, #5
 800b7dc:	69f9      	ldr	r1, [r7, #28]
 800b7de:	4401      	add	r1, r0
 800b7e0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b7e4:	4313      	orrs	r3, r2
 800b7e6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b7e8:	69bb      	ldr	r3, [r7, #24]
 800b7ea:	015a      	lsls	r2, r3, #5
 800b7ec:	69fb      	ldr	r3, [r7, #28]
 800b7ee:	4413      	add	r3, r2
 800b7f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b7f4:	691b      	ldr	r3, [r3, #16]
 800b7f6:	69ba      	ldr	r2, [r7, #24]
 800b7f8:	0151      	lsls	r1, r2, #5
 800b7fa:	69fa      	ldr	r2, [r7, #28]
 800b7fc:	440a      	add	r2, r1
 800b7fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b802:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b806:	6113      	str	r3, [r2, #16]
 800b808:	e062      	b.n	800b8d0 <USB_EPStartXfer+0x490>
 800b80a:	bf00      	nop
 800b80c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800b810:	68bb      	ldr	r3, [r7, #8]
 800b812:	691b      	ldr	r3, [r3, #16]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d123      	bne.n	800b860 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b818:	69bb      	ldr	r3, [r7, #24]
 800b81a:	015a      	lsls	r2, r3, #5
 800b81c:	69fb      	ldr	r3, [r7, #28]
 800b81e:	4413      	add	r3, r2
 800b820:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b824:	691a      	ldr	r2, [r3, #16]
 800b826:	68bb      	ldr	r3, [r7, #8]
 800b828:	689b      	ldr	r3, [r3, #8]
 800b82a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b82e:	69b9      	ldr	r1, [r7, #24]
 800b830:	0148      	lsls	r0, r1, #5
 800b832:	69f9      	ldr	r1, [r7, #28]
 800b834:	4401      	add	r1, r0
 800b836:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b83a:	4313      	orrs	r3, r2
 800b83c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b83e:	69bb      	ldr	r3, [r7, #24]
 800b840:	015a      	lsls	r2, r3, #5
 800b842:	69fb      	ldr	r3, [r7, #28]
 800b844:	4413      	add	r3, r2
 800b846:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b84a:	691b      	ldr	r3, [r3, #16]
 800b84c:	69ba      	ldr	r2, [r7, #24]
 800b84e:	0151      	lsls	r1, r2, #5
 800b850:	69fa      	ldr	r2, [r7, #28]
 800b852:	440a      	add	r2, r1
 800b854:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b858:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b85c:	6113      	str	r3, [r2, #16]
 800b85e:	e037      	b.n	800b8d0 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b860:	68bb      	ldr	r3, [r7, #8]
 800b862:	691a      	ldr	r2, [r3, #16]
 800b864:	68bb      	ldr	r3, [r7, #8]
 800b866:	689b      	ldr	r3, [r3, #8]
 800b868:	4413      	add	r3, r2
 800b86a:	1e5a      	subs	r2, r3, #1
 800b86c:	68bb      	ldr	r3, [r7, #8]
 800b86e:	689b      	ldr	r3, [r3, #8]
 800b870:	fbb2 f3f3 	udiv	r3, r2, r3
 800b874:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800b876:	68bb      	ldr	r3, [r7, #8]
 800b878:	689b      	ldr	r3, [r3, #8]
 800b87a:	8afa      	ldrh	r2, [r7, #22]
 800b87c:	fb03 f202 	mul.w	r2, r3, r2
 800b880:	68bb      	ldr	r3, [r7, #8]
 800b882:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b884:	69bb      	ldr	r3, [r7, #24]
 800b886:	015a      	lsls	r2, r3, #5
 800b888:	69fb      	ldr	r3, [r7, #28]
 800b88a:	4413      	add	r3, r2
 800b88c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b890:	691a      	ldr	r2, [r3, #16]
 800b892:	8afb      	ldrh	r3, [r7, #22]
 800b894:	04d9      	lsls	r1, r3, #19
 800b896:	4b38      	ldr	r3, [pc, #224]	@ (800b978 <USB_EPStartXfer+0x538>)
 800b898:	400b      	ands	r3, r1
 800b89a:	69b9      	ldr	r1, [r7, #24]
 800b89c:	0148      	lsls	r0, r1, #5
 800b89e:	69f9      	ldr	r1, [r7, #28]
 800b8a0:	4401      	add	r1, r0
 800b8a2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b8a6:	4313      	orrs	r3, r2
 800b8a8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800b8aa:	69bb      	ldr	r3, [r7, #24]
 800b8ac:	015a      	lsls	r2, r3, #5
 800b8ae:	69fb      	ldr	r3, [r7, #28]
 800b8b0:	4413      	add	r3, r2
 800b8b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b8b6:	691a      	ldr	r2, [r3, #16]
 800b8b8:	68bb      	ldr	r3, [r7, #8]
 800b8ba:	6a1b      	ldr	r3, [r3, #32]
 800b8bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b8c0:	69b9      	ldr	r1, [r7, #24]
 800b8c2:	0148      	lsls	r0, r1, #5
 800b8c4:	69f9      	ldr	r1, [r7, #28]
 800b8c6:	4401      	add	r1, r0
 800b8c8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b8cc:	4313      	orrs	r3, r2
 800b8ce:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800b8d0:	79fb      	ldrb	r3, [r7, #7]
 800b8d2:	2b01      	cmp	r3, #1
 800b8d4:	d10d      	bne.n	800b8f2 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b8d6:	68bb      	ldr	r3, [r7, #8]
 800b8d8:	68db      	ldr	r3, [r3, #12]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d009      	beq.n	800b8f2 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b8de:	68bb      	ldr	r3, [r7, #8]
 800b8e0:	68d9      	ldr	r1, [r3, #12]
 800b8e2:	69bb      	ldr	r3, [r7, #24]
 800b8e4:	015a      	lsls	r2, r3, #5
 800b8e6:	69fb      	ldr	r3, [r7, #28]
 800b8e8:	4413      	add	r3, r2
 800b8ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b8ee:	460a      	mov	r2, r1
 800b8f0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b8f2:	68bb      	ldr	r3, [r7, #8]
 800b8f4:	791b      	ldrb	r3, [r3, #4]
 800b8f6:	2b01      	cmp	r3, #1
 800b8f8:	d128      	bne.n	800b94c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b8fa:	69fb      	ldr	r3, [r7, #28]
 800b8fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b900:	689b      	ldr	r3, [r3, #8]
 800b902:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b906:	2b00      	cmp	r3, #0
 800b908:	d110      	bne.n	800b92c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b90a:	69bb      	ldr	r3, [r7, #24]
 800b90c:	015a      	lsls	r2, r3, #5
 800b90e:	69fb      	ldr	r3, [r7, #28]
 800b910:	4413      	add	r3, r2
 800b912:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	69ba      	ldr	r2, [r7, #24]
 800b91a:	0151      	lsls	r1, r2, #5
 800b91c:	69fa      	ldr	r2, [r7, #28]
 800b91e:	440a      	add	r2, r1
 800b920:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b924:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b928:	6013      	str	r3, [r2, #0]
 800b92a:	e00f      	b.n	800b94c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b92c:	69bb      	ldr	r3, [r7, #24]
 800b92e:	015a      	lsls	r2, r3, #5
 800b930:	69fb      	ldr	r3, [r7, #28]
 800b932:	4413      	add	r3, r2
 800b934:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	69ba      	ldr	r2, [r7, #24]
 800b93c:	0151      	lsls	r1, r2, #5
 800b93e:	69fa      	ldr	r2, [r7, #28]
 800b940:	440a      	add	r2, r1
 800b942:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b946:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b94a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b94c:	69bb      	ldr	r3, [r7, #24]
 800b94e:	015a      	lsls	r2, r3, #5
 800b950:	69fb      	ldr	r3, [r7, #28]
 800b952:	4413      	add	r3, r2
 800b954:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	69ba      	ldr	r2, [r7, #24]
 800b95c:	0151      	lsls	r1, r2, #5
 800b95e:	69fa      	ldr	r2, [r7, #28]
 800b960:	440a      	add	r2, r1
 800b962:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b966:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b96a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b96c:	2300      	movs	r3, #0
}
 800b96e:	4618      	mov	r0, r3
 800b970:	3720      	adds	r7, #32
 800b972:	46bd      	mov	sp, r7
 800b974:	bd80      	pop	{r7, pc}
 800b976:	bf00      	nop
 800b978:	1ff80000 	.word	0x1ff80000

0800b97c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b97c:	b480      	push	{r7}
 800b97e:	b087      	sub	sp, #28
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
 800b984:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b986:	2300      	movs	r3, #0
 800b988:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800b98a:	2300      	movs	r3, #0
 800b98c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b992:	683b      	ldr	r3, [r7, #0]
 800b994:	785b      	ldrb	r3, [r3, #1]
 800b996:	2b01      	cmp	r3, #1
 800b998:	d14a      	bne.n	800ba30 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b99a:	683b      	ldr	r3, [r7, #0]
 800b99c:	781b      	ldrb	r3, [r3, #0]
 800b99e:	015a      	lsls	r2, r3, #5
 800b9a0:	693b      	ldr	r3, [r7, #16]
 800b9a2:	4413      	add	r3, r2
 800b9a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b9ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b9b2:	f040 8086 	bne.w	800bac2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800b9b6:	683b      	ldr	r3, [r7, #0]
 800b9b8:	781b      	ldrb	r3, [r3, #0]
 800b9ba:	015a      	lsls	r2, r3, #5
 800b9bc:	693b      	ldr	r3, [r7, #16]
 800b9be:	4413      	add	r3, r2
 800b9c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	683a      	ldr	r2, [r7, #0]
 800b9c8:	7812      	ldrb	r2, [r2, #0]
 800b9ca:	0151      	lsls	r1, r2, #5
 800b9cc:	693a      	ldr	r2, [r7, #16]
 800b9ce:	440a      	add	r2, r1
 800b9d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b9d4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b9d8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800b9da:	683b      	ldr	r3, [r7, #0]
 800b9dc:	781b      	ldrb	r3, [r3, #0]
 800b9de:	015a      	lsls	r2, r3, #5
 800b9e0:	693b      	ldr	r3, [r7, #16]
 800b9e2:	4413      	add	r3, r2
 800b9e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	683a      	ldr	r2, [r7, #0]
 800b9ec:	7812      	ldrb	r2, [r2, #0]
 800b9ee:	0151      	lsls	r1, r2, #5
 800b9f0:	693a      	ldr	r2, [r7, #16]
 800b9f2:	440a      	add	r2, r1
 800b9f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b9f8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b9fc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	3301      	adds	r3, #1
 800ba02:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	f242 7210 	movw	r2, #10000	@ 0x2710
 800ba0a:	4293      	cmp	r3, r2
 800ba0c:	d902      	bls.n	800ba14 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800ba0e:	2301      	movs	r3, #1
 800ba10:	75fb      	strb	r3, [r7, #23]
          break;
 800ba12:	e056      	b.n	800bac2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800ba14:	683b      	ldr	r3, [r7, #0]
 800ba16:	781b      	ldrb	r3, [r3, #0]
 800ba18:	015a      	lsls	r2, r3, #5
 800ba1a:	693b      	ldr	r3, [r7, #16]
 800ba1c:	4413      	add	r3, r2
 800ba1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ba28:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ba2c:	d0e7      	beq.n	800b9fe <USB_EPStopXfer+0x82>
 800ba2e:	e048      	b.n	800bac2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ba30:	683b      	ldr	r3, [r7, #0]
 800ba32:	781b      	ldrb	r3, [r3, #0]
 800ba34:	015a      	lsls	r2, r3, #5
 800ba36:	693b      	ldr	r3, [r7, #16]
 800ba38:	4413      	add	r3, r2
 800ba3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ba44:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ba48:	d13b      	bne.n	800bac2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800ba4a:	683b      	ldr	r3, [r7, #0]
 800ba4c:	781b      	ldrb	r3, [r3, #0]
 800ba4e:	015a      	lsls	r2, r3, #5
 800ba50:	693b      	ldr	r3, [r7, #16]
 800ba52:	4413      	add	r3, r2
 800ba54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	683a      	ldr	r2, [r7, #0]
 800ba5c:	7812      	ldrb	r2, [r2, #0]
 800ba5e:	0151      	lsls	r1, r2, #5
 800ba60:	693a      	ldr	r2, [r7, #16]
 800ba62:	440a      	add	r2, r1
 800ba64:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ba68:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ba6c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	781b      	ldrb	r3, [r3, #0]
 800ba72:	015a      	lsls	r2, r3, #5
 800ba74:	693b      	ldr	r3, [r7, #16]
 800ba76:	4413      	add	r3, r2
 800ba78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	683a      	ldr	r2, [r7, #0]
 800ba80:	7812      	ldrb	r2, [r2, #0]
 800ba82:	0151      	lsls	r1, r2, #5
 800ba84:	693a      	ldr	r2, [r7, #16]
 800ba86:	440a      	add	r2, r1
 800ba88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ba8c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ba90:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	3301      	adds	r3, #1
 800ba96:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800ba9e:	4293      	cmp	r3, r2
 800baa0:	d902      	bls.n	800baa8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800baa2:	2301      	movs	r3, #1
 800baa4:	75fb      	strb	r3, [r7, #23]
          break;
 800baa6:	e00c      	b.n	800bac2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800baa8:	683b      	ldr	r3, [r7, #0]
 800baaa:	781b      	ldrb	r3, [r3, #0]
 800baac:	015a      	lsls	r2, r3, #5
 800baae:	693b      	ldr	r3, [r7, #16]
 800bab0:	4413      	add	r3, r2
 800bab2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800babc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bac0:	d0e7      	beq.n	800ba92 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800bac2:	7dfb      	ldrb	r3, [r7, #23]
}
 800bac4:	4618      	mov	r0, r3
 800bac6:	371c      	adds	r7, #28
 800bac8:	46bd      	mov	sp, r7
 800baca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bace:	4770      	bx	lr

0800bad0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800bad0:	b480      	push	{r7}
 800bad2:	b089      	sub	sp, #36	@ 0x24
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	60f8      	str	r0, [r7, #12]
 800bad8:	60b9      	str	r1, [r7, #8]
 800bada:	4611      	mov	r1, r2
 800badc:	461a      	mov	r2, r3
 800bade:	460b      	mov	r3, r1
 800bae0:	71fb      	strb	r3, [r7, #7]
 800bae2:	4613      	mov	r3, r2
 800bae4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800baea:	68bb      	ldr	r3, [r7, #8]
 800baec:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800baee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d123      	bne.n	800bb3e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800baf6:	88bb      	ldrh	r3, [r7, #4]
 800baf8:	3303      	adds	r3, #3
 800bafa:	089b      	lsrs	r3, r3, #2
 800bafc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800bafe:	2300      	movs	r3, #0
 800bb00:	61bb      	str	r3, [r7, #24]
 800bb02:	e018      	b.n	800bb36 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800bb04:	79fb      	ldrb	r3, [r7, #7]
 800bb06:	031a      	lsls	r2, r3, #12
 800bb08:	697b      	ldr	r3, [r7, #20]
 800bb0a:	4413      	add	r3, r2
 800bb0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bb10:	461a      	mov	r2, r3
 800bb12:	69fb      	ldr	r3, [r7, #28]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	6013      	str	r3, [r2, #0]
      pSrc++;
 800bb18:	69fb      	ldr	r3, [r7, #28]
 800bb1a:	3301      	adds	r3, #1
 800bb1c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bb1e:	69fb      	ldr	r3, [r7, #28]
 800bb20:	3301      	adds	r3, #1
 800bb22:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bb24:	69fb      	ldr	r3, [r7, #28]
 800bb26:	3301      	adds	r3, #1
 800bb28:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bb2a:	69fb      	ldr	r3, [r7, #28]
 800bb2c:	3301      	adds	r3, #1
 800bb2e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800bb30:	69bb      	ldr	r3, [r7, #24]
 800bb32:	3301      	adds	r3, #1
 800bb34:	61bb      	str	r3, [r7, #24]
 800bb36:	69ba      	ldr	r2, [r7, #24]
 800bb38:	693b      	ldr	r3, [r7, #16]
 800bb3a:	429a      	cmp	r2, r3
 800bb3c:	d3e2      	bcc.n	800bb04 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800bb3e:	2300      	movs	r3, #0
}
 800bb40:	4618      	mov	r0, r3
 800bb42:	3724      	adds	r7, #36	@ 0x24
 800bb44:	46bd      	mov	sp, r7
 800bb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4a:	4770      	bx	lr

0800bb4c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800bb4c:	b480      	push	{r7}
 800bb4e:	b08b      	sub	sp, #44	@ 0x2c
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	60f8      	str	r0, [r7, #12]
 800bb54:	60b9      	str	r1, [r7, #8]
 800bb56:	4613      	mov	r3, r2
 800bb58:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800bb5e:	68bb      	ldr	r3, [r7, #8]
 800bb60:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800bb62:	88fb      	ldrh	r3, [r7, #6]
 800bb64:	089b      	lsrs	r3, r3, #2
 800bb66:	b29b      	uxth	r3, r3
 800bb68:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800bb6a:	88fb      	ldrh	r3, [r7, #6]
 800bb6c:	f003 0303 	and.w	r3, r3, #3
 800bb70:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800bb72:	2300      	movs	r3, #0
 800bb74:	623b      	str	r3, [r7, #32]
 800bb76:	e014      	b.n	800bba2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800bb78:	69bb      	ldr	r3, [r7, #24]
 800bb7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bb7e:	681a      	ldr	r2, [r3, #0]
 800bb80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb82:	601a      	str	r2, [r3, #0]
    pDest++;
 800bb84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb86:	3301      	adds	r3, #1
 800bb88:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800bb8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb8c:	3301      	adds	r3, #1
 800bb8e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800bb90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb92:	3301      	adds	r3, #1
 800bb94:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800bb96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb98:	3301      	adds	r3, #1
 800bb9a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800bb9c:	6a3b      	ldr	r3, [r7, #32]
 800bb9e:	3301      	adds	r3, #1
 800bba0:	623b      	str	r3, [r7, #32]
 800bba2:	6a3a      	ldr	r2, [r7, #32]
 800bba4:	697b      	ldr	r3, [r7, #20]
 800bba6:	429a      	cmp	r2, r3
 800bba8:	d3e6      	bcc.n	800bb78 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800bbaa:	8bfb      	ldrh	r3, [r7, #30]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d01e      	beq.n	800bbee <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800bbb4:	69bb      	ldr	r3, [r7, #24]
 800bbb6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bbba:	461a      	mov	r2, r3
 800bbbc:	f107 0310 	add.w	r3, r7, #16
 800bbc0:	6812      	ldr	r2, [r2, #0]
 800bbc2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800bbc4:	693a      	ldr	r2, [r7, #16]
 800bbc6:	6a3b      	ldr	r3, [r7, #32]
 800bbc8:	b2db      	uxtb	r3, r3
 800bbca:	00db      	lsls	r3, r3, #3
 800bbcc:	fa22 f303 	lsr.w	r3, r2, r3
 800bbd0:	b2da      	uxtb	r2, r3
 800bbd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbd4:	701a      	strb	r2, [r3, #0]
      i++;
 800bbd6:	6a3b      	ldr	r3, [r7, #32]
 800bbd8:	3301      	adds	r3, #1
 800bbda:	623b      	str	r3, [r7, #32]
      pDest++;
 800bbdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbde:	3301      	adds	r3, #1
 800bbe0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800bbe2:	8bfb      	ldrh	r3, [r7, #30]
 800bbe4:	3b01      	subs	r3, #1
 800bbe6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800bbe8:	8bfb      	ldrh	r3, [r7, #30]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d1ea      	bne.n	800bbc4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800bbee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	372c      	adds	r7, #44	@ 0x2c
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfa:	4770      	bx	lr

0800bbfc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800bbfc:	b480      	push	{r7}
 800bbfe:	b085      	sub	sp, #20
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
 800bc04:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bc0a:	683b      	ldr	r3, [r7, #0]
 800bc0c:	781b      	ldrb	r3, [r3, #0]
 800bc0e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bc10:	683b      	ldr	r3, [r7, #0]
 800bc12:	785b      	ldrb	r3, [r3, #1]
 800bc14:	2b01      	cmp	r3, #1
 800bc16:	d12c      	bne.n	800bc72 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800bc18:	68bb      	ldr	r3, [r7, #8]
 800bc1a:	015a      	lsls	r2, r3, #5
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	4413      	add	r3, r2
 800bc20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	db12      	blt.n	800bc50 <USB_EPSetStall+0x54>
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d00f      	beq.n	800bc50 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800bc30:	68bb      	ldr	r3, [r7, #8]
 800bc32:	015a      	lsls	r2, r3, #5
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	4413      	add	r3, r2
 800bc38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	68ba      	ldr	r2, [r7, #8]
 800bc40:	0151      	lsls	r1, r2, #5
 800bc42:	68fa      	ldr	r2, [r7, #12]
 800bc44:	440a      	add	r2, r1
 800bc46:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bc4a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800bc4e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800bc50:	68bb      	ldr	r3, [r7, #8]
 800bc52:	015a      	lsls	r2, r3, #5
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	4413      	add	r3, r2
 800bc58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	68ba      	ldr	r2, [r7, #8]
 800bc60:	0151      	lsls	r1, r2, #5
 800bc62:	68fa      	ldr	r2, [r7, #12]
 800bc64:	440a      	add	r2, r1
 800bc66:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bc6a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800bc6e:	6013      	str	r3, [r2, #0]
 800bc70:	e02b      	b.n	800bcca <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800bc72:	68bb      	ldr	r3, [r7, #8]
 800bc74:	015a      	lsls	r2, r3, #5
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	4413      	add	r3, r2
 800bc7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	db12      	blt.n	800bcaa <USB_EPSetStall+0xae>
 800bc84:	68bb      	ldr	r3, [r7, #8]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d00f      	beq.n	800bcaa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800bc8a:	68bb      	ldr	r3, [r7, #8]
 800bc8c:	015a      	lsls	r2, r3, #5
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	4413      	add	r3, r2
 800bc92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	68ba      	ldr	r2, [r7, #8]
 800bc9a:	0151      	lsls	r1, r2, #5
 800bc9c:	68fa      	ldr	r2, [r7, #12]
 800bc9e:	440a      	add	r2, r1
 800bca0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bca4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800bca8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800bcaa:	68bb      	ldr	r3, [r7, #8]
 800bcac:	015a      	lsls	r2, r3, #5
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	4413      	add	r3, r2
 800bcb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	68ba      	ldr	r2, [r7, #8]
 800bcba:	0151      	lsls	r1, r2, #5
 800bcbc:	68fa      	ldr	r2, [r7, #12]
 800bcbe:	440a      	add	r2, r1
 800bcc0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bcc4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800bcc8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bcca:	2300      	movs	r3, #0
}
 800bccc:	4618      	mov	r0, r3
 800bcce:	3714      	adds	r7, #20
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd6:	4770      	bx	lr

0800bcd8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800bcd8:	b480      	push	{r7}
 800bcda:	b085      	sub	sp, #20
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
 800bce0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bce6:	683b      	ldr	r3, [r7, #0]
 800bce8:	781b      	ldrb	r3, [r3, #0]
 800bcea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bcec:	683b      	ldr	r3, [r7, #0]
 800bcee:	785b      	ldrb	r3, [r3, #1]
 800bcf0:	2b01      	cmp	r3, #1
 800bcf2:	d128      	bne.n	800bd46 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800bcf4:	68bb      	ldr	r3, [r7, #8]
 800bcf6:	015a      	lsls	r2, r3, #5
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	4413      	add	r3, r2
 800bcfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	68ba      	ldr	r2, [r7, #8]
 800bd04:	0151      	lsls	r1, r2, #5
 800bd06:	68fa      	ldr	r2, [r7, #12]
 800bd08:	440a      	add	r2, r1
 800bd0a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bd0e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800bd12:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800bd14:	683b      	ldr	r3, [r7, #0]
 800bd16:	791b      	ldrb	r3, [r3, #4]
 800bd18:	2b03      	cmp	r3, #3
 800bd1a:	d003      	beq.n	800bd24 <USB_EPClearStall+0x4c>
 800bd1c:	683b      	ldr	r3, [r7, #0]
 800bd1e:	791b      	ldrb	r3, [r3, #4]
 800bd20:	2b02      	cmp	r3, #2
 800bd22:	d138      	bne.n	800bd96 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800bd24:	68bb      	ldr	r3, [r7, #8]
 800bd26:	015a      	lsls	r2, r3, #5
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	4413      	add	r3, r2
 800bd2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	68ba      	ldr	r2, [r7, #8]
 800bd34:	0151      	lsls	r1, r2, #5
 800bd36:	68fa      	ldr	r2, [r7, #12]
 800bd38:	440a      	add	r2, r1
 800bd3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bd3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bd42:	6013      	str	r3, [r2, #0]
 800bd44:	e027      	b.n	800bd96 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800bd46:	68bb      	ldr	r3, [r7, #8]
 800bd48:	015a      	lsls	r2, r3, #5
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	4413      	add	r3, r2
 800bd4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	68ba      	ldr	r2, [r7, #8]
 800bd56:	0151      	lsls	r1, r2, #5
 800bd58:	68fa      	ldr	r2, [r7, #12]
 800bd5a:	440a      	add	r2, r1
 800bd5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bd60:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800bd64:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800bd66:	683b      	ldr	r3, [r7, #0]
 800bd68:	791b      	ldrb	r3, [r3, #4]
 800bd6a:	2b03      	cmp	r3, #3
 800bd6c:	d003      	beq.n	800bd76 <USB_EPClearStall+0x9e>
 800bd6e:	683b      	ldr	r3, [r7, #0]
 800bd70:	791b      	ldrb	r3, [r3, #4]
 800bd72:	2b02      	cmp	r3, #2
 800bd74:	d10f      	bne.n	800bd96 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800bd76:	68bb      	ldr	r3, [r7, #8]
 800bd78:	015a      	lsls	r2, r3, #5
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	4413      	add	r3, r2
 800bd7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	68ba      	ldr	r2, [r7, #8]
 800bd86:	0151      	lsls	r1, r2, #5
 800bd88:	68fa      	ldr	r2, [r7, #12]
 800bd8a:	440a      	add	r2, r1
 800bd8c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bd90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bd94:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800bd96:	2300      	movs	r3, #0
}
 800bd98:	4618      	mov	r0, r3
 800bd9a:	3714      	adds	r7, #20
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda2:	4770      	bx	lr

0800bda4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800bda4:	b480      	push	{r7}
 800bda6:	b085      	sub	sp, #20
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
 800bdac:	460b      	mov	r3, r1
 800bdae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	68fa      	ldr	r2, [r7, #12]
 800bdbe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bdc2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800bdc6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bdce:	681a      	ldr	r2, [r3, #0]
 800bdd0:	78fb      	ldrb	r3, [r7, #3]
 800bdd2:	011b      	lsls	r3, r3, #4
 800bdd4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800bdd8:	68f9      	ldr	r1, [r7, #12]
 800bdda:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bdde:	4313      	orrs	r3, r2
 800bde0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800bde2:	2300      	movs	r3, #0
}
 800bde4:	4618      	mov	r0, r3
 800bde6:	3714      	adds	r7, #20
 800bde8:	46bd      	mov	sp, r7
 800bdea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdee:	4770      	bx	lr

0800bdf0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800bdf0:	b480      	push	{r7}
 800bdf2:	b085      	sub	sp, #20
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	68fa      	ldr	r2, [r7, #12]
 800be06:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800be0a:	f023 0303 	bic.w	r3, r3, #3
 800be0e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800be16:	685b      	ldr	r3, [r3, #4]
 800be18:	68fa      	ldr	r2, [r7, #12]
 800be1a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800be1e:	f023 0302 	bic.w	r3, r3, #2
 800be22:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800be24:	2300      	movs	r3, #0
}
 800be26:	4618      	mov	r0, r3
 800be28:	3714      	adds	r7, #20
 800be2a:	46bd      	mov	sp, r7
 800be2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be30:	4770      	bx	lr

0800be32 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800be32:	b480      	push	{r7}
 800be34:	b085      	sub	sp, #20
 800be36:	af00      	add	r7, sp, #0
 800be38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	68fa      	ldr	r2, [r7, #12]
 800be48:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800be4c:	f023 0303 	bic.w	r3, r3, #3
 800be50:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800be58:	685b      	ldr	r3, [r3, #4]
 800be5a:	68fa      	ldr	r2, [r7, #12]
 800be5c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800be60:	f043 0302 	orr.w	r3, r3, #2
 800be64:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800be66:	2300      	movs	r3, #0
}
 800be68:	4618      	mov	r0, r3
 800be6a:	3714      	adds	r7, #20
 800be6c:	46bd      	mov	sp, r7
 800be6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be72:	4770      	bx	lr

0800be74 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800be74:	b480      	push	{r7}
 800be76:	b085      	sub	sp, #20
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	695b      	ldr	r3, [r3, #20]
 800be80:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	699b      	ldr	r3, [r3, #24]
 800be86:	68fa      	ldr	r2, [r7, #12]
 800be88:	4013      	ands	r3, r2
 800be8a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800be8c:	68fb      	ldr	r3, [r7, #12]
}
 800be8e:	4618      	mov	r0, r3
 800be90:	3714      	adds	r7, #20
 800be92:	46bd      	mov	sp, r7
 800be94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be98:	4770      	bx	lr

0800be9a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800be9a:	b480      	push	{r7}
 800be9c:	b085      	sub	sp, #20
 800be9e:	af00      	add	r7, sp, #0
 800bea0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800beac:	699b      	ldr	r3, [r3, #24]
 800beae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800beb6:	69db      	ldr	r3, [r3, #28]
 800beb8:	68ba      	ldr	r2, [r7, #8]
 800beba:	4013      	ands	r3, r2
 800bebc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800bebe:	68bb      	ldr	r3, [r7, #8]
 800bec0:	0c1b      	lsrs	r3, r3, #16
}
 800bec2:	4618      	mov	r0, r3
 800bec4:	3714      	adds	r7, #20
 800bec6:	46bd      	mov	sp, r7
 800bec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800becc:	4770      	bx	lr

0800bece <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800bece:	b480      	push	{r7}
 800bed0:	b085      	sub	sp, #20
 800bed2:	af00      	add	r7, sp, #0
 800bed4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bee0:	699b      	ldr	r3, [r3, #24]
 800bee2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800beea:	69db      	ldr	r3, [r3, #28]
 800beec:	68ba      	ldr	r2, [r7, #8]
 800beee:	4013      	ands	r3, r2
 800bef0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800bef2:	68bb      	ldr	r3, [r7, #8]
 800bef4:	b29b      	uxth	r3, r3
}
 800bef6:	4618      	mov	r0, r3
 800bef8:	3714      	adds	r7, #20
 800befa:	46bd      	mov	sp, r7
 800befc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf00:	4770      	bx	lr

0800bf02 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bf02:	b480      	push	{r7}
 800bf04:	b085      	sub	sp, #20
 800bf06:	af00      	add	r7, sp, #0
 800bf08:	6078      	str	r0, [r7, #4]
 800bf0a:	460b      	mov	r3, r1
 800bf0c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800bf12:	78fb      	ldrb	r3, [r7, #3]
 800bf14:	015a      	lsls	r2, r3, #5
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	4413      	add	r3, r2
 800bf1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf1e:	689b      	ldr	r3, [r3, #8]
 800bf20:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bf28:	695b      	ldr	r3, [r3, #20]
 800bf2a:	68ba      	ldr	r2, [r7, #8]
 800bf2c:	4013      	ands	r3, r2
 800bf2e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bf30:	68bb      	ldr	r3, [r7, #8]
}
 800bf32:	4618      	mov	r0, r3
 800bf34:	3714      	adds	r7, #20
 800bf36:	46bd      	mov	sp, r7
 800bf38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3c:	4770      	bx	lr

0800bf3e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bf3e:	b480      	push	{r7}
 800bf40:	b087      	sub	sp, #28
 800bf42:	af00      	add	r7, sp, #0
 800bf44:	6078      	str	r0, [r7, #4]
 800bf46:	460b      	mov	r3, r1
 800bf48:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800bf4e:	697b      	ldr	r3, [r7, #20]
 800bf50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bf54:	691b      	ldr	r3, [r3, #16]
 800bf56:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800bf58:	697b      	ldr	r3, [r7, #20]
 800bf5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bf5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf60:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800bf62:	78fb      	ldrb	r3, [r7, #3]
 800bf64:	f003 030f 	and.w	r3, r3, #15
 800bf68:	68fa      	ldr	r2, [r7, #12]
 800bf6a:	fa22 f303 	lsr.w	r3, r2, r3
 800bf6e:	01db      	lsls	r3, r3, #7
 800bf70:	b2db      	uxtb	r3, r3
 800bf72:	693a      	ldr	r2, [r7, #16]
 800bf74:	4313      	orrs	r3, r2
 800bf76:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800bf78:	78fb      	ldrb	r3, [r7, #3]
 800bf7a:	015a      	lsls	r2, r3, #5
 800bf7c:	697b      	ldr	r3, [r7, #20]
 800bf7e:	4413      	add	r3, r2
 800bf80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bf84:	689b      	ldr	r3, [r3, #8]
 800bf86:	693a      	ldr	r2, [r7, #16]
 800bf88:	4013      	ands	r3, r2
 800bf8a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bf8c:	68bb      	ldr	r3, [r7, #8]
}
 800bf8e:	4618      	mov	r0, r3
 800bf90:	371c      	adds	r7, #28
 800bf92:	46bd      	mov	sp, r7
 800bf94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf98:	4770      	bx	lr

0800bf9a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800bf9a:	b480      	push	{r7}
 800bf9c:	b083      	sub	sp, #12
 800bf9e:	af00      	add	r7, sp, #0
 800bfa0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	695b      	ldr	r3, [r3, #20]
 800bfa6:	f003 0301 	and.w	r3, r3, #1
}
 800bfaa:	4618      	mov	r0, r3
 800bfac:	370c      	adds	r7, #12
 800bfae:	46bd      	mov	sp, r7
 800bfb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb4:	4770      	bx	lr

0800bfb6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800bfb6:	b480      	push	{r7}
 800bfb8:	b085      	sub	sp, #20
 800bfba:	af00      	add	r7, sp, #0
 800bfbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	68fa      	ldr	r2, [r7, #12]
 800bfcc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bfd0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800bfd4:	f023 0307 	bic.w	r3, r3, #7
 800bfd8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bfe0:	685b      	ldr	r3, [r3, #4]
 800bfe2:	68fa      	ldr	r2, [r7, #12]
 800bfe4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bfe8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bfec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bfee:	2300      	movs	r3, #0
}
 800bff0:	4618      	mov	r0, r3
 800bff2:	3714      	adds	r7, #20
 800bff4:	46bd      	mov	sp, r7
 800bff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffa:	4770      	bx	lr

0800bffc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800bffc:	b480      	push	{r7}
 800bffe:	b087      	sub	sp, #28
 800c000:	af00      	add	r7, sp, #0
 800c002:	60f8      	str	r0, [r7, #12]
 800c004:	460b      	mov	r3, r1
 800c006:	607a      	str	r2, [r7, #4]
 800c008:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	333c      	adds	r3, #60	@ 0x3c
 800c012:	3304      	adds	r3, #4
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c018:	693b      	ldr	r3, [r7, #16]
 800c01a:	4a26      	ldr	r2, [pc, #152]	@ (800c0b4 <USB_EP0_OutStart+0xb8>)
 800c01c:	4293      	cmp	r3, r2
 800c01e:	d90a      	bls.n	800c036 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c020:	697b      	ldr	r3, [r7, #20]
 800c022:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c02c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c030:	d101      	bne.n	800c036 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800c032:	2300      	movs	r3, #0
 800c034:	e037      	b.n	800c0a6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c036:	697b      	ldr	r3, [r7, #20]
 800c038:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c03c:	461a      	mov	r2, r3
 800c03e:	2300      	movs	r3, #0
 800c040:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c042:	697b      	ldr	r3, [r7, #20]
 800c044:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c048:	691b      	ldr	r3, [r3, #16]
 800c04a:	697a      	ldr	r2, [r7, #20]
 800c04c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c050:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c054:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800c056:	697b      	ldr	r3, [r7, #20]
 800c058:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c05c:	691b      	ldr	r3, [r3, #16]
 800c05e:	697a      	ldr	r2, [r7, #20]
 800c060:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c064:	f043 0318 	orr.w	r3, r3, #24
 800c068:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800c06a:	697b      	ldr	r3, [r7, #20]
 800c06c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c070:	691b      	ldr	r3, [r3, #16]
 800c072:	697a      	ldr	r2, [r7, #20]
 800c074:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c078:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800c07c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800c07e:	7afb      	ldrb	r3, [r7, #11]
 800c080:	2b01      	cmp	r3, #1
 800c082:	d10f      	bne.n	800c0a4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800c084:	697b      	ldr	r3, [r7, #20]
 800c086:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c08a:	461a      	mov	r2, r3
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800c090:	697b      	ldr	r3, [r7, #20]
 800c092:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	697a      	ldr	r2, [r7, #20]
 800c09a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c09e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800c0a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c0a4:	2300      	movs	r3, #0
}
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	371c      	adds	r7, #28
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b0:	4770      	bx	lr
 800c0b2:	bf00      	nop
 800c0b4:	4f54300a 	.word	0x4f54300a

0800c0b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c0b8:	b480      	push	{r7}
 800c0ba:	b085      	sub	sp, #20
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	3301      	adds	r3, #1
 800c0c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c0d0:	d901      	bls.n	800c0d6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c0d2:	2303      	movs	r3, #3
 800c0d4:	e022      	b.n	800c11c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	691b      	ldr	r3, [r3, #16]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	daf2      	bge.n	800c0c4 <USB_CoreReset+0xc>

  count = 10U;
 800c0de:	230a      	movs	r3, #10
 800c0e0:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800c0e2:	e002      	b.n	800c0ea <USB_CoreReset+0x32>
  {
    count--;
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	3b01      	subs	r3, #1
 800c0e8:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d1f9      	bne.n	800c0e4 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	691b      	ldr	r3, [r3, #16]
 800c0f4:	f043 0201 	orr.w	r2, r3, #1
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	3301      	adds	r3, #1
 800c100:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c108:	d901      	bls.n	800c10e <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800c10a:	2303      	movs	r3, #3
 800c10c:	e006      	b.n	800c11c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	691b      	ldr	r3, [r3, #16]
 800c112:	f003 0301 	and.w	r3, r3, #1
 800c116:	2b01      	cmp	r3, #1
 800c118:	d0f0      	beq.n	800c0fc <USB_CoreReset+0x44>

  return HAL_OK;
 800c11a:	2300      	movs	r3, #0
}
 800c11c:	4618      	mov	r0, r3
 800c11e:	3714      	adds	r7, #20
 800c120:	46bd      	mov	sp, r7
 800c122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c126:	4770      	bx	lr

0800c128 <lwip_cdc_debug_printf>:
  * @brief  Send debug message via CDC
  * @param  msg: debug message string
  * @retval None
  */
static void lwip_cdc_debug_printf(const char *msg)
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	b084      	sub	sp, #16
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
  uint8_t len = strlen(msg);
 800c130:	6878      	ldr	r0, [r7, #4]
 800c132:	f7f4 f84d 	bl	80001d0 <strlen>
 800c136:	4603      	mov	r3, r0
 800c138:	73fb      	strb	r3, [r7, #15]
  /*if (len > 0)
  {
    CDC_Transmit_FS((uint8_t*)msg, len);
    HAL_Delay(1); // Small delay to ensure transmission
  }*/
}
 800c13a:	bf00      	nop
 800c13c:	3710      	adds	r7, #16
 800c13e:	46bd      	mov	sp, r7
 800c140:	bd80      	pop	{r7, pc}
	...

0800c144 <lwip_cdc_debug_log>:
  * @param  prefix: message prefix
  * @param  msg: debug message string
  * @retval None
  */
static void lwip_cdc_debug_log(const char *prefix, const char *msg)
{
 800c144:	b580      	push	{r7, lr}
 800c146:	b0a6      	sub	sp, #152	@ 0x98
 800c148:	af02      	add	r7, sp, #8
 800c14a:	6078      	str	r0, [r7, #4]
 800c14c:	6039      	str	r1, [r7, #0]
  char debug_buf[128];
  uint32_t tick = HAL_GetTick();
 800c14e:	f7f8 fd75 	bl	8004c3c <HAL_GetTick>
 800c152:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
  snprintf(debug_buf, sizeof(debug_buf), "[%lu] %s: %s\r\n", tick, prefix, msg);
 800c156:	f107 000c 	add.w	r0, r7, #12
 800c15a:	683b      	ldr	r3, [r7, #0]
 800c15c:	9301      	str	r3, [sp, #4]
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	9300      	str	r3, [sp, #0]
 800c162:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c166:	4a06      	ldr	r2, [pc, #24]	@ (800c180 <lwip_cdc_debug_log+0x3c>)
 800c168:	2180      	movs	r1, #128	@ 0x80
 800c16a:	f012 f821 	bl	801e1b0 <sniprintf>
  lwip_cdc_debug_printf(debug_buf);
 800c16e:	f107 030c 	add.w	r3, r7, #12
 800c172:	4618      	mov	r0, r3
 800c174:	f7ff ffd8 	bl	800c128 <lwip_cdc_debug_printf>
}
 800c178:	bf00      	nop
 800c17a:	3790      	adds	r7, #144	@ 0x90
 800c17c:	46bd      	mov	sp, r7
 800c17e:	bd80      	pop	{r7, pc}
 800c180:	0802038c 	.word	0x0802038c

0800c184 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800c184:	b5b0      	push	{r4, r5, r7, lr}
 800c186:	b0ac      	sub	sp, #176	@ 0xb0
 800c188:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800c18a:	4bac      	ldr	r3, [pc, #688]	@ (800c43c <MX_LWIP_Init+0x2b8>)
 800c18c:	22c0      	movs	r2, #192	@ 0xc0
 800c18e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800c190:	4baa      	ldr	r3, [pc, #680]	@ (800c43c <MX_LWIP_Init+0x2b8>)
 800c192:	22a8      	movs	r2, #168	@ 0xa8
 800c194:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 10;
 800c196:	4ba9      	ldr	r3, [pc, #676]	@ (800c43c <MX_LWIP_Init+0x2b8>)
 800c198:	220a      	movs	r2, #10
 800c19a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 88;
 800c19c:	4ba7      	ldr	r3, [pc, #668]	@ (800c43c <MX_LWIP_Init+0x2b8>)
 800c19e:	2258      	movs	r2, #88	@ 0x58
 800c1a0:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800c1a2:	4ba7      	ldr	r3, [pc, #668]	@ (800c440 <MX_LWIP_Init+0x2bc>)
 800c1a4:	22ff      	movs	r2, #255	@ 0xff
 800c1a6:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800c1a8:	4ba5      	ldr	r3, [pc, #660]	@ (800c440 <MX_LWIP_Init+0x2bc>)
 800c1aa:	22ff      	movs	r2, #255	@ 0xff
 800c1ac:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800c1ae:	4ba4      	ldr	r3, [pc, #656]	@ (800c440 <MX_LWIP_Init+0x2bc>)
 800c1b0:	22ff      	movs	r2, #255	@ 0xff
 800c1b2:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800c1b4:	4ba2      	ldr	r3, [pc, #648]	@ (800c440 <MX_LWIP_Init+0x2bc>)
 800c1b6:	2200      	movs	r2, #0
 800c1b8:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 800c1ba:	4ba2      	ldr	r3, [pc, #648]	@ (800c444 <MX_LWIP_Init+0x2c0>)
 800c1bc:	2200      	movs	r2, #0
 800c1be:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 800c1c0:	4ba0      	ldr	r3, [pc, #640]	@ (800c444 <MX_LWIP_Init+0x2c0>)
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800c1c6:	4b9f      	ldr	r3, [pc, #636]	@ (800c444 <MX_LWIP_Init+0x2c0>)
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 800c1cc:	4b9d      	ldr	r3, [pc, #628]	@ (800c444 <MX_LWIP_Init+0x2c0>)
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
  char ip_msg[128];
  snprintf(ip_msg, sizeof(ip_msg), "IP: %d.%d.%d.%d", IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800c1d2:	4b9a      	ldr	r3, [pc, #616]	@ (800c43c <MX_LWIP_Init+0x2b8>)
 800c1d4:	781b      	ldrb	r3, [r3, #0]
 800c1d6:	461c      	mov	r4, r3
 800c1d8:	4b98      	ldr	r3, [pc, #608]	@ (800c43c <MX_LWIP_Init+0x2b8>)
 800c1da:	785b      	ldrb	r3, [r3, #1]
 800c1dc:	461a      	mov	r2, r3
 800c1de:	4b97      	ldr	r3, [pc, #604]	@ (800c43c <MX_LWIP_Init+0x2b8>)
 800c1e0:	789b      	ldrb	r3, [r3, #2]
 800c1e2:	4619      	mov	r1, r3
 800c1e4:	4b95      	ldr	r3, [pc, #596]	@ (800c43c <MX_LWIP_Init+0x2b8>)
 800c1e6:	78db      	ldrb	r3, [r3, #3]
 800c1e8:	f107 0020 	add.w	r0, r7, #32
 800c1ec:	9302      	str	r3, [sp, #8]
 800c1ee:	9101      	str	r1, [sp, #4]
 800c1f0:	9200      	str	r2, [sp, #0]
 800c1f2:	4623      	mov	r3, r4
 800c1f4:	4a94      	ldr	r2, [pc, #592]	@ (800c448 <MX_LWIP_Init+0x2c4>)
 800c1f6:	2180      	movs	r1, #128	@ 0x80
 800c1f8:	f011 ffda 	bl	801e1b0 <sniprintf>
  lwip_cdc_debug_log("LWIP_INIT", ip_msg);
 800c1fc:	f107 0320 	add.w	r3, r7, #32
 800c200:	4619      	mov	r1, r3
 800c202:	4892      	ldr	r0, [pc, #584]	@ (800c44c <MX_LWIP_Init+0x2c8>)
 800c204:	f7ff ff9e 	bl	800c144 <lwip_cdc_debug_log>
  
  snprintf(ip_msg, sizeof(ip_msg), "Netmask: %d.%d.%d.%d", NETMASK_ADDRESS[0], NETMASK_ADDRESS[1], NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800c208:	4b8d      	ldr	r3, [pc, #564]	@ (800c440 <MX_LWIP_Init+0x2bc>)
 800c20a:	781b      	ldrb	r3, [r3, #0]
 800c20c:	461c      	mov	r4, r3
 800c20e:	4b8c      	ldr	r3, [pc, #560]	@ (800c440 <MX_LWIP_Init+0x2bc>)
 800c210:	785b      	ldrb	r3, [r3, #1]
 800c212:	461a      	mov	r2, r3
 800c214:	4b8a      	ldr	r3, [pc, #552]	@ (800c440 <MX_LWIP_Init+0x2bc>)
 800c216:	789b      	ldrb	r3, [r3, #2]
 800c218:	4619      	mov	r1, r3
 800c21a:	4b89      	ldr	r3, [pc, #548]	@ (800c440 <MX_LWIP_Init+0x2bc>)
 800c21c:	78db      	ldrb	r3, [r3, #3]
 800c21e:	f107 0020 	add.w	r0, r7, #32
 800c222:	9302      	str	r3, [sp, #8]
 800c224:	9101      	str	r1, [sp, #4]
 800c226:	9200      	str	r2, [sp, #0]
 800c228:	4623      	mov	r3, r4
 800c22a:	4a89      	ldr	r2, [pc, #548]	@ (800c450 <MX_LWIP_Init+0x2cc>)
 800c22c:	2180      	movs	r1, #128	@ 0x80
 800c22e:	f011 ffbf 	bl	801e1b0 <sniprintf>
  lwip_cdc_debug_log("LWIP_INIT", ip_msg);
 800c232:	f107 0320 	add.w	r3, r7, #32
 800c236:	4619      	mov	r1, r3
 800c238:	4884      	ldr	r0, [pc, #528]	@ (800c44c <MX_LWIP_Init+0x2c8>)
 800c23a:	f7ff ff83 	bl	800c144 <lwip_cdc_debug_log>
  
  snprintf(ip_msg, sizeof(ip_msg), "Gateway: %d.%d.%d.%d", GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800c23e:	4b81      	ldr	r3, [pc, #516]	@ (800c444 <MX_LWIP_Init+0x2c0>)
 800c240:	781b      	ldrb	r3, [r3, #0]
 800c242:	461c      	mov	r4, r3
 800c244:	4b7f      	ldr	r3, [pc, #508]	@ (800c444 <MX_LWIP_Init+0x2c0>)
 800c246:	785b      	ldrb	r3, [r3, #1]
 800c248:	461a      	mov	r2, r3
 800c24a:	4b7e      	ldr	r3, [pc, #504]	@ (800c444 <MX_LWIP_Init+0x2c0>)
 800c24c:	789b      	ldrb	r3, [r3, #2]
 800c24e:	4619      	mov	r1, r3
 800c250:	4b7c      	ldr	r3, [pc, #496]	@ (800c444 <MX_LWIP_Init+0x2c0>)
 800c252:	78db      	ldrb	r3, [r3, #3]
 800c254:	f107 0020 	add.w	r0, r7, #32
 800c258:	9302      	str	r3, [sp, #8]
 800c25a:	9101      	str	r1, [sp, #4]
 800c25c:	9200      	str	r2, [sp, #0]
 800c25e:	4623      	mov	r3, r4
 800c260:	4a7c      	ldr	r2, [pc, #496]	@ (800c454 <MX_LWIP_Init+0x2d0>)
 800c262:	2180      	movs	r1, #128	@ 0x80
 800c264:	f011 ffa4 	bl	801e1b0 <sniprintf>
  lwip_cdc_debug_log("LWIP_INIT", ip_msg);
 800c268:	f107 0320 	add.w	r3, r7, #32
 800c26c:	4619      	mov	r1, r3
 800c26e:	4877      	ldr	r0, [pc, #476]	@ (800c44c <MX_LWIP_Init+0x2c8>)
 800c270:	f7ff ff68 	bl	800c144 <lwip_cdc_debug_log>
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800c274:	2100      	movs	r1, #0
 800c276:	2000      	movs	r0, #0
 800c278:	f006 fac6 	bl	8012808 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800c27c:	4b6f      	ldr	r3, [pc, #444]	@ (800c43c <MX_LWIP_Init+0x2b8>)
 800c27e:	781b      	ldrb	r3, [r3, #0]
 800c280:	061a      	lsls	r2, r3, #24
 800c282:	4b6e      	ldr	r3, [pc, #440]	@ (800c43c <MX_LWIP_Init+0x2b8>)
 800c284:	785b      	ldrb	r3, [r3, #1]
 800c286:	041b      	lsls	r3, r3, #16
 800c288:	431a      	orrs	r2, r3
 800c28a:	4b6c      	ldr	r3, [pc, #432]	@ (800c43c <MX_LWIP_Init+0x2b8>)
 800c28c:	789b      	ldrb	r3, [r3, #2]
 800c28e:	021b      	lsls	r3, r3, #8
 800c290:	4313      	orrs	r3, r2
 800c292:	4a6a      	ldr	r2, [pc, #424]	@ (800c43c <MX_LWIP_Init+0x2b8>)
 800c294:	78d2      	ldrb	r2, [r2, #3]
 800c296:	4313      	orrs	r3, r2
 800c298:	061a      	lsls	r2, r3, #24
 800c29a:	4b68      	ldr	r3, [pc, #416]	@ (800c43c <MX_LWIP_Init+0x2b8>)
 800c29c:	781b      	ldrb	r3, [r3, #0]
 800c29e:	0619      	lsls	r1, r3, #24
 800c2a0:	4b66      	ldr	r3, [pc, #408]	@ (800c43c <MX_LWIP_Init+0x2b8>)
 800c2a2:	785b      	ldrb	r3, [r3, #1]
 800c2a4:	041b      	lsls	r3, r3, #16
 800c2a6:	4319      	orrs	r1, r3
 800c2a8:	4b64      	ldr	r3, [pc, #400]	@ (800c43c <MX_LWIP_Init+0x2b8>)
 800c2aa:	789b      	ldrb	r3, [r3, #2]
 800c2ac:	021b      	lsls	r3, r3, #8
 800c2ae:	430b      	orrs	r3, r1
 800c2b0:	4962      	ldr	r1, [pc, #392]	@ (800c43c <MX_LWIP_Init+0x2b8>)
 800c2b2:	78c9      	ldrb	r1, [r1, #3]
 800c2b4:	430b      	orrs	r3, r1
 800c2b6:	021b      	lsls	r3, r3, #8
 800c2b8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800c2bc:	431a      	orrs	r2, r3
 800c2be:	4b5f      	ldr	r3, [pc, #380]	@ (800c43c <MX_LWIP_Init+0x2b8>)
 800c2c0:	781b      	ldrb	r3, [r3, #0]
 800c2c2:	0619      	lsls	r1, r3, #24
 800c2c4:	4b5d      	ldr	r3, [pc, #372]	@ (800c43c <MX_LWIP_Init+0x2b8>)
 800c2c6:	785b      	ldrb	r3, [r3, #1]
 800c2c8:	041b      	lsls	r3, r3, #16
 800c2ca:	4319      	orrs	r1, r3
 800c2cc:	4b5b      	ldr	r3, [pc, #364]	@ (800c43c <MX_LWIP_Init+0x2b8>)
 800c2ce:	789b      	ldrb	r3, [r3, #2]
 800c2d0:	021b      	lsls	r3, r3, #8
 800c2d2:	430b      	orrs	r3, r1
 800c2d4:	4959      	ldr	r1, [pc, #356]	@ (800c43c <MX_LWIP_Init+0x2b8>)
 800c2d6:	78c9      	ldrb	r1, [r1, #3]
 800c2d8:	430b      	orrs	r3, r1
 800c2da:	0a1b      	lsrs	r3, r3, #8
 800c2dc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800c2e0:	431a      	orrs	r2, r3
 800c2e2:	4b56      	ldr	r3, [pc, #344]	@ (800c43c <MX_LWIP_Init+0x2b8>)
 800c2e4:	781b      	ldrb	r3, [r3, #0]
 800c2e6:	0619      	lsls	r1, r3, #24
 800c2e8:	4b54      	ldr	r3, [pc, #336]	@ (800c43c <MX_LWIP_Init+0x2b8>)
 800c2ea:	785b      	ldrb	r3, [r3, #1]
 800c2ec:	041b      	lsls	r3, r3, #16
 800c2ee:	4319      	orrs	r1, r3
 800c2f0:	4b52      	ldr	r3, [pc, #328]	@ (800c43c <MX_LWIP_Init+0x2b8>)
 800c2f2:	789b      	ldrb	r3, [r3, #2]
 800c2f4:	021b      	lsls	r3, r3, #8
 800c2f6:	430b      	orrs	r3, r1
 800c2f8:	4950      	ldr	r1, [pc, #320]	@ (800c43c <MX_LWIP_Init+0x2b8>)
 800c2fa:	78c9      	ldrb	r1, [r1, #3]
 800c2fc:	430b      	orrs	r3, r1
 800c2fe:	0e1b      	lsrs	r3, r3, #24
 800c300:	4313      	orrs	r3, r2
 800c302:	4a55      	ldr	r2, [pc, #340]	@ (800c458 <MX_LWIP_Init+0x2d4>)
 800c304:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800c306:	4b4e      	ldr	r3, [pc, #312]	@ (800c440 <MX_LWIP_Init+0x2bc>)
 800c308:	781b      	ldrb	r3, [r3, #0]
 800c30a:	061a      	lsls	r2, r3, #24
 800c30c:	4b4c      	ldr	r3, [pc, #304]	@ (800c440 <MX_LWIP_Init+0x2bc>)
 800c30e:	785b      	ldrb	r3, [r3, #1]
 800c310:	041b      	lsls	r3, r3, #16
 800c312:	431a      	orrs	r2, r3
 800c314:	4b4a      	ldr	r3, [pc, #296]	@ (800c440 <MX_LWIP_Init+0x2bc>)
 800c316:	789b      	ldrb	r3, [r3, #2]
 800c318:	021b      	lsls	r3, r3, #8
 800c31a:	4313      	orrs	r3, r2
 800c31c:	4a48      	ldr	r2, [pc, #288]	@ (800c440 <MX_LWIP_Init+0x2bc>)
 800c31e:	78d2      	ldrb	r2, [r2, #3]
 800c320:	4313      	orrs	r3, r2
 800c322:	061a      	lsls	r2, r3, #24
 800c324:	4b46      	ldr	r3, [pc, #280]	@ (800c440 <MX_LWIP_Init+0x2bc>)
 800c326:	781b      	ldrb	r3, [r3, #0]
 800c328:	0619      	lsls	r1, r3, #24
 800c32a:	4b45      	ldr	r3, [pc, #276]	@ (800c440 <MX_LWIP_Init+0x2bc>)
 800c32c:	785b      	ldrb	r3, [r3, #1]
 800c32e:	041b      	lsls	r3, r3, #16
 800c330:	4319      	orrs	r1, r3
 800c332:	4b43      	ldr	r3, [pc, #268]	@ (800c440 <MX_LWIP_Init+0x2bc>)
 800c334:	789b      	ldrb	r3, [r3, #2]
 800c336:	021b      	lsls	r3, r3, #8
 800c338:	430b      	orrs	r3, r1
 800c33a:	4941      	ldr	r1, [pc, #260]	@ (800c440 <MX_LWIP_Init+0x2bc>)
 800c33c:	78c9      	ldrb	r1, [r1, #3]
 800c33e:	430b      	orrs	r3, r1
 800c340:	021b      	lsls	r3, r3, #8
 800c342:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800c346:	431a      	orrs	r2, r3
 800c348:	4b3d      	ldr	r3, [pc, #244]	@ (800c440 <MX_LWIP_Init+0x2bc>)
 800c34a:	781b      	ldrb	r3, [r3, #0]
 800c34c:	0619      	lsls	r1, r3, #24
 800c34e:	4b3c      	ldr	r3, [pc, #240]	@ (800c440 <MX_LWIP_Init+0x2bc>)
 800c350:	785b      	ldrb	r3, [r3, #1]
 800c352:	041b      	lsls	r3, r3, #16
 800c354:	4319      	orrs	r1, r3
 800c356:	4b3a      	ldr	r3, [pc, #232]	@ (800c440 <MX_LWIP_Init+0x2bc>)
 800c358:	789b      	ldrb	r3, [r3, #2]
 800c35a:	021b      	lsls	r3, r3, #8
 800c35c:	430b      	orrs	r3, r1
 800c35e:	4938      	ldr	r1, [pc, #224]	@ (800c440 <MX_LWIP_Init+0x2bc>)
 800c360:	78c9      	ldrb	r1, [r1, #3]
 800c362:	430b      	orrs	r3, r1
 800c364:	0a1b      	lsrs	r3, r3, #8
 800c366:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800c36a:	431a      	orrs	r2, r3
 800c36c:	4b34      	ldr	r3, [pc, #208]	@ (800c440 <MX_LWIP_Init+0x2bc>)
 800c36e:	781b      	ldrb	r3, [r3, #0]
 800c370:	0619      	lsls	r1, r3, #24
 800c372:	4b33      	ldr	r3, [pc, #204]	@ (800c440 <MX_LWIP_Init+0x2bc>)
 800c374:	785b      	ldrb	r3, [r3, #1]
 800c376:	041b      	lsls	r3, r3, #16
 800c378:	4319      	orrs	r1, r3
 800c37a:	4b31      	ldr	r3, [pc, #196]	@ (800c440 <MX_LWIP_Init+0x2bc>)
 800c37c:	789b      	ldrb	r3, [r3, #2]
 800c37e:	021b      	lsls	r3, r3, #8
 800c380:	430b      	orrs	r3, r1
 800c382:	492f      	ldr	r1, [pc, #188]	@ (800c440 <MX_LWIP_Init+0x2bc>)
 800c384:	78c9      	ldrb	r1, [r1, #3]
 800c386:	430b      	orrs	r3, r1
 800c388:	0e1b      	lsrs	r3, r3, #24
 800c38a:	4313      	orrs	r3, r2
 800c38c:	4a33      	ldr	r2, [pc, #204]	@ (800c45c <MX_LWIP_Init+0x2d8>)
 800c38e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800c390:	4b2c      	ldr	r3, [pc, #176]	@ (800c444 <MX_LWIP_Init+0x2c0>)
 800c392:	781b      	ldrb	r3, [r3, #0]
 800c394:	061a      	lsls	r2, r3, #24
 800c396:	4b2b      	ldr	r3, [pc, #172]	@ (800c444 <MX_LWIP_Init+0x2c0>)
 800c398:	785b      	ldrb	r3, [r3, #1]
 800c39a:	041b      	lsls	r3, r3, #16
 800c39c:	431a      	orrs	r2, r3
 800c39e:	4b29      	ldr	r3, [pc, #164]	@ (800c444 <MX_LWIP_Init+0x2c0>)
 800c3a0:	789b      	ldrb	r3, [r3, #2]
 800c3a2:	021b      	lsls	r3, r3, #8
 800c3a4:	4313      	orrs	r3, r2
 800c3a6:	4a27      	ldr	r2, [pc, #156]	@ (800c444 <MX_LWIP_Init+0x2c0>)
 800c3a8:	78d2      	ldrb	r2, [r2, #3]
 800c3aa:	4313      	orrs	r3, r2
 800c3ac:	061a      	lsls	r2, r3, #24
 800c3ae:	4b25      	ldr	r3, [pc, #148]	@ (800c444 <MX_LWIP_Init+0x2c0>)
 800c3b0:	781b      	ldrb	r3, [r3, #0]
 800c3b2:	0619      	lsls	r1, r3, #24
 800c3b4:	4b23      	ldr	r3, [pc, #140]	@ (800c444 <MX_LWIP_Init+0x2c0>)
 800c3b6:	785b      	ldrb	r3, [r3, #1]
 800c3b8:	041b      	lsls	r3, r3, #16
 800c3ba:	4319      	orrs	r1, r3
 800c3bc:	4b21      	ldr	r3, [pc, #132]	@ (800c444 <MX_LWIP_Init+0x2c0>)
 800c3be:	789b      	ldrb	r3, [r3, #2]
 800c3c0:	021b      	lsls	r3, r3, #8
 800c3c2:	430b      	orrs	r3, r1
 800c3c4:	491f      	ldr	r1, [pc, #124]	@ (800c444 <MX_LWIP_Init+0x2c0>)
 800c3c6:	78c9      	ldrb	r1, [r1, #3]
 800c3c8:	430b      	orrs	r3, r1
 800c3ca:	021b      	lsls	r3, r3, #8
 800c3cc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800c3d0:	431a      	orrs	r2, r3
 800c3d2:	4b1c      	ldr	r3, [pc, #112]	@ (800c444 <MX_LWIP_Init+0x2c0>)
 800c3d4:	781b      	ldrb	r3, [r3, #0]
 800c3d6:	0619      	lsls	r1, r3, #24
 800c3d8:	4b1a      	ldr	r3, [pc, #104]	@ (800c444 <MX_LWIP_Init+0x2c0>)
 800c3da:	785b      	ldrb	r3, [r3, #1]
 800c3dc:	041b      	lsls	r3, r3, #16
 800c3de:	4319      	orrs	r1, r3
 800c3e0:	4b18      	ldr	r3, [pc, #96]	@ (800c444 <MX_LWIP_Init+0x2c0>)
 800c3e2:	789b      	ldrb	r3, [r3, #2]
 800c3e4:	021b      	lsls	r3, r3, #8
 800c3e6:	430b      	orrs	r3, r1
 800c3e8:	4916      	ldr	r1, [pc, #88]	@ (800c444 <MX_LWIP_Init+0x2c0>)
 800c3ea:	78c9      	ldrb	r1, [r1, #3]
 800c3ec:	430b      	orrs	r3, r1
 800c3ee:	0a1b      	lsrs	r3, r3, #8
 800c3f0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800c3f4:	431a      	orrs	r2, r3
 800c3f6:	4b13      	ldr	r3, [pc, #76]	@ (800c444 <MX_LWIP_Init+0x2c0>)
 800c3f8:	781b      	ldrb	r3, [r3, #0]
 800c3fa:	0619      	lsls	r1, r3, #24
 800c3fc:	4b11      	ldr	r3, [pc, #68]	@ (800c444 <MX_LWIP_Init+0x2c0>)
 800c3fe:	785b      	ldrb	r3, [r3, #1]
 800c400:	041b      	lsls	r3, r3, #16
 800c402:	4319      	orrs	r1, r3
 800c404:	4b0f      	ldr	r3, [pc, #60]	@ (800c444 <MX_LWIP_Init+0x2c0>)
 800c406:	789b      	ldrb	r3, [r3, #2]
 800c408:	021b      	lsls	r3, r3, #8
 800c40a:	430b      	orrs	r3, r1
 800c40c:	490d      	ldr	r1, [pc, #52]	@ (800c444 <MX_LWIP_Init+0x2c0>)
 800c40e:	78c9      	ldrb	r1, [r1, #3]
 800c410:	430b      	orrs	r3, r1
 800c412:	0e1b      	lsrs	r3, r3, #24
 800c414:	4313      	orrs	r3, r2
 800c416:	4a12      	ldr	r2, [pc, #72]	@ (800c460 <MX_LWIP_Init+0x2dc>)
 800c418:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800c41a:	4b12      	ldr	r3, [pc, #72]	@ (800c464 <MX_LWIP_Init+0x2e0>)
 800c41c:	9302      	str	r3, [sp, #8]
 800c41e:	4b12      	ldr	r3, [pc, #72]	@ (800c468 <MX_LWIP_Init+0x2e4>)
 800c420:	9301      	str	r3, [sp, #4]
 800c422:	2300      	movs	r3, #0
 800c424:	9300      	str	r3, [sp, #0]
 800c426:	4b0e      	ldr	r3, [pc, #56]	@ (800c460 <MX_LWIP_Init+0x2dc>)
 800c428:	4a0c      	ldr	r2, [pc, #48]	@ (800c45c <MX_LWIP_Init+0x2d8>)
 800c42a:	490b      	ldr	r1, [pc, #44]	@ (800c458 <MX_LWIP_Init+0x2d4>)
 800c42c:	480f      	ldr	r0, [pc, #60]	@ (800c46c <MX_LWIP_Init+0x2e8>)
 800c42e:	f006 ffb5 	bl	801339c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800c432:	480e      	ldr	r0, [pc, #56]	@ (800c46c <MX_LWIP_Init+0x2e8>)
 800c434:	f007 f964 	bl	8013700 <netif_set_default>
 800c438:	e01a      	b.n	800c470 <MX_LWIP_Init+0x2ec>
 800c43a:	bf00      	nop
 800c43c:	20000a08 	.word	0x20000a08
 800c440:	20000a0c 	.word	0x20000a0c
 800c444:	20000a10 	.word	0x20000a10
 800c448:	080205b4 	.word	0x080205b4
 800c44c:	080205c4 	.word	0x080205c4
 800c450:	080205d0 	.word	0x080205d0
 800c454:	080205e8 	.word	0x080205e8
 800c458:	200009fc 	.word	0x200009fc
 800c45c:	20000a00 	.word	0x20000a00
 800c460:	20000a04 	.word	0x20000a04
 800c464:	08012745 	.word	0x08012745
 800c468:	0800cf99 	.word	0x0800cf99
 800c46c:	200009c8 	.word	0x200009c8

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800c470:	4812      	ldr	r0, [pc, #72]	@ (800c4bc <MX_LWIP_Init+0x338>)
 800c472:	f007 f955 	bl	8013720 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800c476:	4912      	ldr	r1, [pc, #72]	@ (800c4c0 <MX_LWIP_Init+0x33c>)
 800c478:	4810      	ldr	r0, [pc, #64]	@ (800c4bc <MX_LWIP_Init+0x338>)
 800c47a:	f007 fa21 	bl	80138c0 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  lwip_cdc_debug_log("LWIP_INIT", "Creating Ethernet link handler thread");
 800c47e:	4911      	ldr	r1, [pc, #68]	@ (800c4c4 <MX_LWIP_Init+0x340>)
 800c480:	4811      	ldr	r0, [pc, #68]	@ (800c4c8 <MX_LWIP_Init+0x344>)
 800c482:	f7ff fe5f 	bl	800c144 <lwip_cdc_debug_log>
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 800c486:	4b11      	ldr	r3, [pc, #68]	@ (800c4cc <MX_LWIP_Init+0x348>)
 800c488:	1d3c      	adds	r4, r7, #4
 800c48a:	461d      	mov	r5, r3
 800c48c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c48e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c490:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c494:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 800c498:	1d3b      	adds	r3, r7, #4
 800c49a:	4908      	ldr	r1, [pc, #32]	@ (800c4bc <MX_LWIP_Init+0x338>)
 800c49c:	4618      	mov	r0, r3
 800c49e:	f003 f933 	bl	800f708 <osThreadCreate>
  lwip_cdc_debug_log("LWIP_INIT", "Ethernet link handler thread created");
 800c4a2:	490b      	ldr	r1, [pc, #44]	@ (800c4d0 <MX_LWIP_Init+0x34c>)
 800c4a4:	4808      	ldr	r0, [pc, #32]	@ (800c4c8 <MX_LWIP_Init+0x344>)
 800c4a6:	f7ff fe4d 	bl	800c144 <lwip_cdc_debug_log>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */
  lwip_cdc_debug_log("LWIP_INIT", "LwIP initialization completed successfully");
 800c4aa:	490a      	ldr	r1, [pc, #40]	@ (800c4d4 <MX_LWIP_Init+0x350>)
 800c4ac:	4806      	ldr	r0, [pc, #24]	@ (800c4c8 <MX_LWIP_Init+0x344>)
 800c4ae:	f7ff fe49 	bl	800c144 <lwip_cdc_debug_log>
/* USER CODE END 3 */
}
 800c4b2:	bf00      	nop
 800c4b4:	37a0      	adds	r7, #160	@ 0xa0
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	bdb0      	pop	{r4, r5, r7, pc}
 800c4ba:	bf00      	nop
 800c4bc:	200009c8 	.word	0x200009c8
 800c4c0:	0800c4d9 	.word	0x0800c4d9
 800c4c4:	08020600 	.word	0x08020600
 800c4c8:	080205c4 	.word	0x080205c4
 800c4cc:	08020684 	.word	0x08020684
 800c4d0:	08020628 	.word	0x08020628
 800c4d4:	08020650 	.word	0x08020650

0800c4d8 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b0a2      	sub	sp, #136	@ 0x88
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
  if (netif_is_up(netif))
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c4e6:	f003 0301 	and.w	r3, r3, #1
 800c4ea:	b2db      	uxtb	r3, r3
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d016      	beq.n	800c51e <ethernet_link_status_updated+0x46>
  {
/* USER CODE BEGIN 5 */
    lwip_cdc_debug_log("LINK_STATUS", "Network interface is UP");
 800c4f0:	490f      	ldr	r1, [pc, #60]	@ (800c530 <ethernet_link_status_updated+0x58>)
 800c4f2:	4810      	ldr	r0, [pc, #64]	@ (800c534 <ethernet_link_status_updated+0x5c>)
 800c4f4:	f7ff fe26 	bl	800c144 <lwip_cdc_debug_log>
    
    char status_msg[128];
    snprintf(status_msg, sizeof(status_msg), "Interface UP - IP: %s", ip4addr_ntoa(netif_ip4_addr(netif)));
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	3304      	adds	r3, #4
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	f00f fee9 	bl	801c2d4 <ip4addr_ntoa>
 800c502:	4603      	mov	r3, r0
 800c504:	f107 0008 	add.w	r0, r7, #8
 800c508:	4a0b      	ldr	r2, [pc, #44]	@ (800c538 <ethernet_link_status_updated+0x60>)
 800c50a:	2180      	movs	r1, #128	@ 0x80
 800c50c:	f011 fe50 	bl	801e1b0 <sniprintf>
    lwip_cdc_debug_log("LINK_STATUS", status_msg);
 800c510:	f107 0308 	add.w	r3, r7, #8
 800c514:	4619      	mov	r1, r3
 800c516:	4807      	ldr	r0, [pc, #28]	@ (800c534 <ethernet_link_status_updated+0x5c>)
 800c518:	f7ff fe14 	bl	800c144 <lwip_cdc_debug_log>
  {
/* USER CODE BEGIN 6 */
    lwip_cdc_debug_log("LINK_STATUS", "Network interface is DOWN");
/* USER CODE END 6 */
  }
}
 800c51c:	e003      	b.n	800c526 <ethernet_link_status_updated+0x4e>
    lwip_cdc_debug_log("LINK_STATUS", "Network interface is DOWN");
 800c51e:	4907      	ldr	r1, [pc, #28]	@ (800c53c <ethernet_link_status_updated+0x64>)
 800c520:	4804      	ldr	r0, [pc, #16]	@ (800c534 <ethernet_link_status_updated+0x5c>)
 800c522:	f7ff fe0f 	bl	800c144 <lwip_cdc_debug_log>
}
 800c526:	bf00      	nop
 800c528:	3788      	adds	r7, #136	@ 0x88
 800c52a:	46bd      	mov	sp, r7
 800c52c:	bd80      	pop	{r7, pc}
 800c52e:	bf00      	nop
 800c530:	080206a0 	.word	0x080206a0
 800c534:	080206b8 	.word	0x080206b8
 800c538:	080206c4 	.word	0x080206c4
 800c53c:	080206dc 	.word	0x080206dc

0800c540 <cdc_debug_printf>:
  * @brief  Send debug message via CDC
  * @param  msg: debug message string
  * @retval None
  */
static void cdc_debug_printf(const char *msg)
{
 800c540:	b580      	push	{r7, lr}
 800c542:	b084      	sub	sp, #16
 800c544:	af00      	add	r7, sp, #0
 800c546:	6078      	str	r0, [r7, #4]
  uint8_t len = strlen(msg);
 800c548:	6878      	ldr	r0, [r7, #4]
 800c54a:	f7f3 fe41 	bl	80001d0 <strlen>
 800c54e:	4603      	mov	r3, r0
 800c550:	73fb      	strb	r3, [r7, #15]
  /*if (len > 0)
  {
    CDC_Transmit_FS((uint8_t*)msg, len);
    HAL_Delay(1); // Small delay to ensure transmission
  }*/
}
 800c552:	bf00      	nop
 800c554:	3710      	adds	r7, #16
 800c556:	46bd      	mov	sp, r7
 800c558:	bd80      	pop	{r7, pc}
	...

0800c55c <cdc_debug_log>:
  * @param  prefix: message prefix
  * @param  msg: debug message string
  * @retval None
  */
static void cdc_debug_log(const char *prefix, const char *msg)
{
 800c55c:	b580      	push	{r7, lr}
 800c55e:	b0a6      	sub	sp, #152	@ 0x98
 800c560:	af02      	add	r7, sp, #8
 800c562:	6078      	str	r0, [r7, #4]
 800c564:	6039      	str	r1, [r7, #0]
  char debug_buf[128];
  uint32_t tick = HAL_GetTick();
 800c566:	f7f8 fb69 	bl	8004c3c <HAL_GetTick>
 800c56a:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
  snprintf(debug_buf, sizeof(debug_buf), "[%lu] %s: %s\r\n", tick, prefix, msg);
 800c56e:	f107 000c 	add.w	r0, r7, #12
 800c572:	683b      	ldr	r3, [r7, #0]
 800c574:	9301      	str	r3, [sp, #4]
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	9300      	str	r3, [sp, #0]
 800c57a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c57e:	4a06      	ldr	r2, [pc, #24]	@ (800c598 <cdc_debug_log+0x3c>)
 800c580:	2180      	movs	r1, #128	@ 0x80
 800c582:	f011 fe15 	bl	801e1b0 <sniprintf>
  cdc_debug_printf(debug_buf);
 800c586:	f107 030c 	add.w	r3, r7, #12
 800c58a:	4618      	mov	r0, r3
 800c58c:	f7ff ffd8 	bl	800c540 <cdc_debug_printf>
}
 800c590:	bf00      	nop
 800c592:	3790      	adds	r7, #144	@ 0x90
 800c594:	46bd      	mov	sp, r7
 800c596:	bd80      	pop	{r7, pc}
 800c598:	080206f8 	.word	0x080206f8

0800c59c <debug_eth_dma_descriptors>:
/**
  * @brief  Debug ETH DMA descriptors
  * @retval None
  */
static void debug_eth_dma_descriptors(void)
{
 800c59c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c59e:	b0cf      	sub	sp, #316	@ 0x13c
 800c5a0:	af06      	add	r7, sp, #24
  char debug_msg[256];
  
  cdc_debug_log("DMA_DESC", "=== RX Descriptors Status ===");
 800c5a2:	495d      	ldr	r1, [pc, #372]	@ (800c718 <debug_eth_dma_descriptors+0x17c>)
 800c5a4:	485d      	ldr	r0, [pc, #372]	@ (800c71c <debug_eth_dma_descriptors+0x180>)
 800c5a6:	f7ff ffd9 	bl	800c55c <cdc_debug_log>
  // 检查RX描述符状态
  for(int i = 0; i < ETH_RX_DESC_CNT; i++) {
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800c5b0:	e048      	b.n	800c644 <debug_eth_dma_descriptors+0xa8>
    uint32_t desc0 = DMARxDscrTab[i].DESC0;
 800c5b2:	495b      	ldr	r1, [pc, #364]	@ (800c720 <debug_eth_dma_descriptors+0x184>)
 800c5b4:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800c5b8:	4613      	mov	r3, r2
 800c5ba:	009b      	lsls	r3, r3, #2
 800c5bc:	4413      	add	r3, r2
 800c5be:	00db      	lsls	r3, r3, #3
 800c5c0:	440b      	add	r3, r1
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    uint32_t desc2 = DMARxDscrTab[i].DESC2;
 800c5c8:	4955      	ldr	r1, [pc, #340]	@ (800c720 <debug_eth_dma_descriptors+0x184>)
 800c5ca:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800c5ce:	4613      	mov	r3, r2
 800c5d0:	009b      	lsls	r3, r3, #2
 800c5d2:	4413      	add	r3, r2
 800c5d4:	00db      	lsls	r3, r3, #3
 800c5d6:	440b      	add	r3, r1
 800c5d8:	3308      	adds	r3, #8
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    
    snprintf(debug_msg, sizeof(debug_msg),
             "RX[%d]: OWN=%lu ES=%lu FS=%lu LS=%lu FL=%lu Buf1=0x%08lX",
             i, 
             (desc0 & ETH_DMARXDESC_OWN) ? 1UL : 0UL,      // Owner bit
 800c5e0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800c5e4:	0fdb      	lsrs	r3, r3, #31
             (desc0 & ETH_DMARXDESC_ES) ? 1UL : 0UL,       // Error Summary
 800c5e6:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 800c5ea:	0bd2      	lsrs	r2, r2, #15
    snprintf(debug_msg, sizeof(debug_msg),
 800c5ec:	f002 0201 	and.w	r2, r2, #1
             (desc0 & ETH_DMARXDESC_FS) ? 1UL : 0UL,       // First Segment
 800c5f0:	f8d7 1108 	ldr.w	r1, [r7, #264]	@ 0x108
 800c5f4:	0a49      	lsrs	r1, r1, #9
    snprintf(debug_msg, sizeof(debug_msg),
 800c5f6:	f001 0101 	and.w	r1, r1, #1
             (desc0 & ETH_DMARXDESC_LS) ? 1UL : 0UL,       // Last Segment
 800c5fa:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 800c5fe:	0a00      	lsrs	r0, r0, #8
    snprintf(debug_msg, sizeof(debug_msg),
 800c600:	f000 0001 	and.w	r0, r0, #1
             (desc0 & ETH_DMARXDESC_FL) >> 16,             // Frame Length
 800c604:	f8d7 4108 	ldr.w	r4, [r7, #264]	@ 0x108
 800c608:	0c24      	lsrs	r4, r4, #16
    snprintf(debug_msg, sizeof(debug_msg),
 800c60a:	f3c4 040d 	ubfx	r4, r4, #0, #14
 800c60e:	1d3e      	adds	r6, r7, #4
 800c610:	f8d7 5104 	ldr.w	r5, [r7, #260]	@ 0x104
 800c614:	9505      	str	r5, [sp, #20]
 800c616:	9404      	str	r4, [sp, #16]
 800c618:	9003      	str	r0, [sp, #12]
 800c61a:	9102      	str	r1, [sp, #8]
 800c61c:	9201      	str	r2, [sp, #4]
 800c61e:	9300      	str	r3, [sp, #0]
 800c620:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800c624:	4a3f      	ldr	r2, [pc, #252]	@ (800c724 <debug_eth_dma_descriptors+0x188>)
 800c626:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800c62a:	4630      	mov	r0, r6
 800c62c:	f011 fdc0 	bl	801e1b0 <sniprintf>
             desc2);                                        // Buffer1 Address
    cdc_debug_log("DMA_DESC", debug_msg);
 800c630:	1d3b      	adds	r3, r7, #4
 800c632:	4619      	mov	r1, r3
 800c634:	4839      	ldr	r0, [pc, #228]	@ (800c71c <debug_eth_dma_descriptors+0x180>)
 800c636:	f7ff ff91 	bl	800c55c <cdc_debug_log>
  for(int i = 0; i < ETH_RX_DESC_CNT; i++) {
 800c63a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800c63e:	3301      	adds	r3, #1
 800c640:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800c644:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800c648:	2b03      	cmp	r3, #3
 800c64a:	d9b2      	bls.n	800c5b2 <debug_eth_dma_descriptors+0x16>
  }
  
  cdc_debug_log("DMA_DESC", "=== TX Descriptors Status ===");
 800c64c:	4936      	ldr	r1, [pc, #216]	@ (800c728 <debug_eth_dma_descriptors+0x18c>)
 800c64e:	4833      	ldr	r0, [pc, #204]	@ (800c71c <debug_eth_dma_descriptors+0x180>)
 800c650:	f7ff ff84 	bl	800c55c <cdc_debug_log>
  // 检查TX描述符状态
  for(int i = 0; i < ETH_TX_DESC_CNT; i++) {
 800c654:	2300      	movs	r3, #0
 800c656:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800c65a:	e053      	b.n	800c704 <debug_eth_dma_descriptors+0x168>
    uint32_t desc0 = DMATxDscrTab[i].DESC0;
 800c65c:	4933      	ldr	r1, [pc, #204]	@ (800c72c <debug_eth_dma_descriptors+0x190>)
 800c65e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800c662:	4613      	mov	r3, r2
 800c664:	009b      	lsls	r3, r3, #2
 800c666:	4413      	add	r3, r2
 800c668:	00db      	lsls	r3, r3, #3
 800c66a:	440b      	add	r3, r1
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    uint32_t desc1 = DMATxDscrTab[i].DESC1;
 800c672:	492e      	ldr	r1, [pc, #184]	@ (800c72c <debug_eth_dma_descriptors+0x190>)
 800c674:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800c678:	4613      	mov	r3, r2
 800c67a:	009b      	lsls	r3, r3, #2
 800c67c:	4413      	add	r3, r2
 800c67e:	00db      	lsls	r3, r3, #3
 800c680:	440b      	add	r3, r1
 800c682:	3304      	adds	r3, #4
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    uint32_t desc2 = DMATxDscrTab[i].DESC2;
 800c68a:	4928      	ldr	r1, [pc, #160]	@ (800c72c <debug_eth_dma_descriptors+0x190>)
 800c68c:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800c690:	4613      	mov	r3, r2
 800c692:	009b      	lsls	r3, r3, #2
 800c694:	4413      	add	r3, r2
 800c696:	00db      	lsls	r3, r3, #3
 800c698:	440b      	add	r3, r1
 800c69a:	3308      	adds	r3, #8
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    
    snprintf(debug_msg, sizeof(debug_msg),
             "TX[%d]: OWN=%lu ES=%lu FS=%lu LS=%lu TBS1=%lu Buf1=0x%08lX",
             i,
             (desc0 & ETH_DMATXDESC_OWN) ? 1UL : 0UL,      // Owner bit
 800c6a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c6a6:	0fdb      	lsrs	r3, r3, #31
             (desc0 & ETH_DMATXDESC_ES) ? 1UL : 0UL,       // Error Summary
 800c6a8:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800c6ac:	0bd2      	lsrs	r2, r2, #15
    snprintf(debug_msg, sizeof(debug_msg),
 800c6ae:	f002 0201 	and.w	r2, r2, #1
             (desc0 & ETH_DMATXDESC_FS) ? 1UL : 0UL,       // First Segment
 800c6b2:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 800c6b6:	0f09      	lsrs	r1, r1, #28
    snprintf(debug_msg, sizeof(debug_msg),
 800c6b8:	f001 0101 	and.w	r1, r1, #1
             (desc0 & ETH_DMATXDESC_LS) ? 1UL : 0UL,       // Last Segment
 800c6bc:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 800c6c0:	0f40      	lsrs	r0, r0, #29
    snprintf(debug_msg, sizeof(debug_msg),
 800c6c2:	f000 0001 	and.w	r0, r0, #1
 800c6c6:	f8d7 4110 	ldr.w	r4, [r7, #272]	@ 0x110
 800c6ca:	f3c4 040c 	ubfx	r4, r4, #0, #13
 800c6ce:	1d3e      	adds	r6, r7, #4
 800c6d0:	f8d7 510c 	ldr.w	r5, [r7, #268]	@ 0x10c
 800c6d4:	9505      	str	r5, [sp, #20]
 800c6d6:	9404      	str	r4, [sp, #16]
 800c6d8:	9003      	str	r0, [sp, #12]
 800c6da:	9102      	str	r1, [sp, #8]
 800c6dc:	9201      	str	r2, [sp, #4]
 800c6de:	9300      	str	r3, [sp, #0]
 800c6e0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800c6e4:	4a12      	ldr	r2, [pc, #72]	@ (800c730 <debug_eth_dma_descriptors+0x194>)
 800c6e6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800c6ea:	4630      	mov	r0, r6
 800c6ec:	f011 fd60 	bl	801e1b0 <sniprintf>
             desc1 & ETH_DMATXDESC_TBS1,                   // Transmit Buffer1 Size
             desc2);                                        // Buffer1 Address
    cdc_debug_log("DMA_DESC", debug_msg);
 800c6f0:	1d3b      	adds	r3, r7, #4
 800c6f2:	4619      	mov	r1, r3
 800c6f4:	4809      	ldr	r0, [pc, #36]	@ (800c71c <debug_eth_dma_descriptors+0x180>)
 800c6f6:	f7ff ff31 	bl	800c55c <cdc_debug_log>
  for(int i = 0; i < ETH_TX_DESC_CNT; i++) {
 800c6fa:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800c6fe:	3301      	adds	r3, #1
 800c700:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800c704:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800c708:	2b03      	cmp	r3, #3
 800c70a:	d9a7      	bls.n	800c65c <debug_eth_dma_descriptors+0xc0>
  }
}
 800c70c:	bf00      	nop
 800c70e:	bf00      	nop
 800c710:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 800c714:	46bd      	mov	sp, r7
 800c716:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c718:	080207d8 	.word	0x080207d8
 800c71c:	080207f8 	.word	0x080207f8
 800c720:	200053a0 	.word	0x200053a0
 800c724:	08020804 	.word	0x08020804
 800c728:	08020840 	.word	0x08020840
 800c72c:	20005440 	.word	0x20005440
 800c730:	08020860 	.word	0x08020860

0800c734 <debug_eth_dma_registers>:
/**
  * @brief  Debug ETH DMA registers
  * @retval None
  */
static void debug_eth_dma_registers(void)
{
 800c734:	b580      	push	{r7, lr}
 800c736:	b0a0      	sub	sp, #128	@ 0x80
 800c738:	af00      	add	r7, sp, #0
  char debug_msg[128];
  
  snprintf(debug_msg, sizeof(debug_msg), "DMA_BMR=0x%08lX", ETH->DMABMR);
 800c73a:	4b25      	ldr	r3, [pc, #148]	@ (800c7d0 <debug_eth_dma_registers+0x9c>)
 800c73c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	4638      	mov	r0, r7
 800c744:	4a23      	ldr	r2, [pc, #140]	@ (800c7d4 <debug_eth_dma_registers+0xa0>)
 800c746:	2180      	movs	r1, #128	@ 0x80
 800c748:	f011 fd32 	bl	801e1b0 <sniprintf>
  cdc_debug_log("DMA_REG", debug_msg);
 800c74c:	463b      	mov	r3, r7
 800c74e:	4619      	mov	r1, r3
 800c750:	4821      	ldr	r0, [pc, #132]	@ (800c7d8 <debug_eth_dma_registers+0xa4>)
 800c752:	f7ff ff03 	bl	800c55c <cdc_debug_log>
  
  snprintf(debug_msg, sizeof(debug_msg), "DMA_SR=0x%08lX", ETH->DMASR);
 800c756:	4b1e      	ldr	r3, [pc, #120]	@ (800c7d0 <debug_eth_dma_registers+0x9c>)
 800c758:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c75c:	695b      	ldr	r3, [r3, #20]
 800c75e:	4638      	mov	r0, r7
 800c760:	4a1e      	ldr	r2, [pc, #120]	@ (800c7dc <debug_eth_dma_registers+0xa8>)
 800c762:	2180      	movs	r1, #128	@ 0x80
 800c764:	f011 fd24 	bl	801e1b0 <sniprintf>
  cdc_debug_log("DMA_REG", debug_msg);
 800c768:	463b      	mov	r3, r7
 800c76a:	4619      	mov	r1, r3
 800c76c:	481a      	ldr	r0, [pc, #104]	@ (800c7d8 <debug_eth_dma_registers+0xa4>)
 800c76e:	f7ff fef5 	bl	800c55c <cdc_debug_log>
  
  snprintf(debug_msg, sizeof(debug_msg), "DMA_IER=0x%08lX", ETH->DMAIER);
 800c772:	4b17      	ldr	r3, [pc, #92]	@ (800c7d0 <debug_eth_dma_registers+0x9c>)
 800c774:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c778:	69db      	ldr	r3, [r3, #28]
 800c77a:	4638      	mov	r0, r7
 800c77c:	4a18      	ldr	r2, [pc, #96]	@ (800c7e0 <debug_eth_dma_registers+0xac>)
 800c77e:	2180      	movs	r1, #128	@ 0x80
 800c780:	f011 fd16 	bl	801e1b0 <sniprintf>
  cdc_debug_log("DMA_REG", debug_msg);
 800c784:	463b      	mov	r3, r7
 800c786:	4619      	mov	r1, r3
 800c788:	4813      	ldr	r0, [pc, #76]	@ (800c7d8 <debug_eth_dma_registers+0xa4>)
 800c78a:	f7ff fee7 	bl	800c55c <cdc_debug_log>
  
  snprintf(debug_msg, sizeof(debug_msg), "DMA_RDLAR=0x%08lX", ETH->DMARDLAR);
 800c78e:	4b10      	ldr	r3, [pc, #64]	@ (800c7d0 <debug_eth_dma_registers+0x9c>)
 800c790:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c794:	68db      	ldr	r3, [r3, #12]
 800c796:	4638      	mov	r0, r7
 800c798:	4a12      	ldr	r2, [pc, #72]	@ (800c7e4 <debug_eth_dma_registers+0xb0>)
 800c79a:	2180      	movs	r1, #128	@ 0x80
 800c79c:	f011 fd08 	bl	801e1b0 <sniprintf>
  cdc_debug_log("DMA_REG", debug_msg);
 800c7a0:	463b      	mov	r3, r7
 800c7a2:	4619      	mov	r1, r3
 800c7a4:	480c      	ldr	r0, [pc, #48]	@ (800c7d8 <debug_eth_dma_registers+0xa4>)
 800c7a6:	f7ff fed9 	bl	800c55c <cdc_debug_log>
  
  snprintf(debug_msg, sizeof(debug_msg), "DMA_TDLAR=0x%08lX", ETH->DMATDLAR);
 800c7aa:	4b09      	ldr	r3, [pc, #36]	@ (800c7d0 <debug_eth_dma_registers+0x9c>)
 800c7ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c7b0:	691b      	ldr	r3, [r3, #16]
 800c7b2:	4638      	mov	r0, r7
 800c7b4:	4a0c      	ldr	r2, [pc, #48]	@ (800c7e8 <debug_eth_dma_registers+0xb4>)
 800c7b6:	2180      	movs	r1, #128	@ 0x80
 800c7b8:	f011 fcfa 	bl	801e1b0 <sniprintf>
  cdc_debug_log("DMA_REG", debug_msg);
 800c7bc:	463b      	mov	r3, r7
 800c7be:	4619      	mov	r1, r3
 800c7c0:	4805      	ldr	r0, [pc, #20]	@ (800c7d8 <debug_eth_dma_registers+0xa4>)
 800c7c2:	f7ff fecb 	bl	800c55c <cdc_debug_log>
}
 800c7c6:	bf00      	nop
 800c7c8:	3780      	adds	r7, #128	@ 0x80
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	bd80      	pop	{r7, pc}
 800c7ce:	bf00      	nop
 800c7d0:	40028000 	.word	0x40028000
 800c7d4:	0802089c 	.word	0x0802089c
 800c7d8:	080208ac 	.word	0x080208ac
 800c7dc:	080208b4 	.word	0x080208b4
 800c7e0:	080208c4 	.word	0x080208c4
 800c7e4:	080208d4 	.word	0x080208d4
 800c7e8:	080208e8 	.word	0x080208e8

0800c7ec <debug_eth_config>:
/**
  * @brief  Debug ETH configuration and status
  * @retval None
  */
static void debug_eth_config(void)
{
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	b0a2      	sub	sp, #136	@ 0x88
 800c7f0:	af02      	add	r7, sp, #8
  char debug_msg[128];
  
  // MAC configuration
  snprintf(debug_msg, sizeof(debug_msg), "MAC_CR=0x%08lX", ETH->MACCR);
 800c7f2:	4b1c      	ldr	r3, [pc, #112]	@ (800c864 <debug_eth_config+0x78>)
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	4638      	mov	r0, r7
 800c7f8:	4a1b      	ldr	r2, [pc, #108]	@ (800c868 <debug_eth_config+0x7c>)
 800c7fa:	2180      	movs	r1, #128	@ 0x80
 800c7fc:	f011 fcd8 	bl	801e1b0 <sniprintf>
  cdc_debug_log("ETH_CFG", debug_msg);
 800c800:	463b      	mov	r3, r7
 800c802:	4619      	mov	r1, r3
 800c804:	4819      	ldr	r0, [pc, #100]	@ (800c86c <debug_eth_config+0x80>)
 800c806:	f7ff fea9 	bl	800c55c <cdc_debug_log>
  
  snprintf(debug_msg, sizeof(debug_msg), "MAC_FCR=0x%08lX", ETH->MACFCR);
 800c80a:	4b16      	ldr	r3, [pc, #88]	@ (800c864 <debug_eth_config+0x78>)
 800c80c:	699b      	ldr	r3, [r3, #24]
 800c80e:	4638      	mov	r0, r7
 800c810:	4a17      	ldr	r2, [pc, #92]	@ (800c870 <debug_eth_config+0x84>)
 800c812:	2180      	movs	r1, #128	@ 0x80
 800c814:	f011 fccc 	bl	801e1b0 <sniprintf>
  cdc_debug_log("ETH_CFG", debug_msg);
 800c818:	463b      	mov	r3, r7
 800c81a:	4619      	mov	r1, r3
 800c81c:	4813      	ldr	r0, [pc, #76]	@ (800c86c <debug_eth_config+0x80>)
 800c81e:	f7ff fe9d 	bl	800c55c <cdc_debug_log>
  
  // DMA configuration  
  snprintf(debug_msg, sizeof(debug_msg), "DMA_OMR=0x%08lX", ETH->DMAOMR);
 800c822:	4b10      	ldr	r3, [pc, #64]	@ (800c864 <debug_eth_config+0x78>)
 800c824:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c828:	699b      	ldr	r3, [r3, #24]
 800c82a:	4638      	mov	r0, r7
 800c82c:	4a11      	ldr	r2, [pc, #68]	@ (800c874 <debug_eth_config+0x88>)
 800c82e:	2180      	movs	r1, #128	@ 0x80
 800c830:	f011 fcbe 	bl	801e1b0 <sniprintf>
  cdc_debug_log("ETH_CFG", debug_msg);
 800c834:	463b      	mov	r3, r7
 800c836:	4619      	mov	r1, r3
 800c838:	480c      	ldr	r0, [pc, #48]	@ (800c86c <debug_eth_config+0x80>)
 800c83a:	f7ff fe8f 	bl	800c55c <cdc_debug_log>
  
  // Debug descriptor counts
  snprintf(debug_msg, sizeof(debug_msg), "RX_DESC_CNT=%d, TX_DESC_CNT=%d, RX_BUF_CNT=%d", 
 800c83e:	4638      	mov	r0, r7
 800c840:	230c      	movs	r3, #12
 800c842:	9301      	str	r3, [sp, #4]
 800c844:	2304      	movs	r3, #4
 800c846:	9300      	str	r3, [sp, #0]
 800c848:	2304      	movs	r3, #4
 800c84a:	4a0b      	ldr	r2, [pc, #44]	@ (800c878 <debug_eth_config+0x8c>)
 800c84c:	2180      	movs	r1, #128	@ 0x80
 800c84e:	f011 fcaf 	bl	801e1b0 <sniprintf>
           ETH_RX_DESC_CNT, ETH_TX_DESC_CNT, ETH_RX_BUFFER_CNT);
  cdc_debug_log("ETH_CFG", debug_msg);
 800c852:	463b      	mov	r3, r7
 800c854:	4619      	mov	r1, r3
 800c856:	4805      	ldr	r0, [pc, #20]	@ (800c86c <debug_eth_config+0x80>)
 800c858:	f7ff fe80 	bl	800c55c <cdc_debug_log>
}
 800c85c:	bf00      	nop
 800c85e:	3780      	adds	r7, #128	@ 0x80
 800c860:	46bd      	mov	sp, r7
 800c862:	bd80      	pop	{r7, pc}
 800c864:	40028000 	.word	0x40028000
 800c868:	080208fc 	.word	0x080208fc
 800c86c:	0802090c 	.word	0x0802090c
 800c870:	08020914 	.word	0x08020914
 800c874:	08020924 	.word	0x08020924
 800c878:	08020934 	.word	0x08020934

0800c87c <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b082      	sub	sp, #8
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800c884:	4b04      	ldr	r3, [pc, #16]	@ (800c898 <HAL_ETH_RxCpltCallback+0x1c>)
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	4618      	mov	r0, r3
 800c88a:	f003 f8b9 	bl	800fa00 <osSemaphoreRelease>
}
 800c88e:	bf00      	nop
 800c890:	3708      	adds	r7, #8
 800c892:	46bd      	mov	sp, r7
 800c894:	bd80      	pop	{r7, pc}
 800c896:	bf00      	nop
 800c898:	20005514 	.word	0x20005514

0800c89c <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b082      	sub	sp, #8
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 800c8a4:	4b04      	ldr	r3, [pc, #16]	@ (800c8b8 <HAL_ETH_TxCpltCallback+0x1c>)
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	f003 f8a9 	bl	800fa00 <osSemaphoreRelease>
}
 800c8ae:	bf00      	nop
 800c8b0:	3708      	adds	r7, #8
 800c8b2:	46bd      	mov	sp, r7
 800c8b4:	bd80      	pop	{r7, pc}
 800c8b6:	bf00      	nop
 800c8b8:	20005518 	.word	0x20005518

0800c8bc <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b082      	sub	sp, #8
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 800c8c4:	6878      	ldr	r0, [r7, #4]
 800c8c6:	f7f9 fcd3 	bl	8006270 <HAL_ETH_GetDMAError>
 800c8ca:	4603      	mov	r3, r0
 800c8cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c8d0:	2b80      	cmp	r3, #128	@ 0x80
 800c8d2:	d104      	bne.n	800c8de <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 800c8d4:	4b04      	ldr	r3, [pc, #16]	@ (800c8e8 <HAL_ETH_ErrorCallback+0x2c>)
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	4618      	mov	r0, r3
 800c8da:	f003 f891 	bl	800fa00 <osSemaphoreRelease>
  }
}
 800c8de:	bf00      	nop
 800c8e0:	3708      	adds	r7, #8
 800c8e2:	46bd      	mov	sp, r7
 800c8e4:	bd80      	pop	{r7, pc}
 800c8e6:	bf00      	nop
 800c8e8:	20005514 	.word	0x20005514

0800c8ec <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800c8ec:	b5b0      	push	{r4, r5, r7, lr}
 800c8ee:	b0ce      	sub	sp, #312	@ 0x138
 800c8f0:	af02      	add	r7, sp, #8
 800c8f2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c8f6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800c8fa:	6018      	str	r0, [r3, #0]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  ETH_MACConfigTypeDef macConfig;
/* USER CODE END low_level_init Variables Initialization for User BSP */
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800c902:	4bba      	ldr	r3, [pc, #744]	@ (800cbec <low_level_init+0x300>)
 800c904:	4aba      	ldr	r2, [pc, #744]	@ (800cbf0 <low_level_init+0x304>)
 800c906:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800c908:	2300      	movs	r3, #0
 800c90a:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
  MACAddr[1] = 0x80;
 800c90e:	2380      	movs	r3, #128	@ 0x80
 800c910:	f887 30b5 	strb.w	r3, [r7, #181]	@ 0xb5
  MACAddr[2] = 0xE1;
 800c914:	23e1      	movs	r3, #225	@ 0xe1
 800c916:	f887 30b6 	strb.w	r3, [r7, #182]	@ 0xb6
  MACAddr[3] = 0x00;
 800c91a:	2300      	movs	r3, #0
 800c91c:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
  MACAddr[4] = 0x00;
 800c920:	2300      	movs	r3, #0
 800c922:	f887 30b8 	strb.w	r3, [r7, #184]	@ 0xb8
  MACAddr[5] = 0x00;
 800c926:	2300      	movs	r3, #0
 800c928:	f887 30b9 	strb.w	r3, [r7, #185]	@ 0xb9
  heth.Init.MACAddr = &MACAddr[0];
 800c92c:	4aaf      	ldr	r2, [pc, #700]	@ (800cbec <low_level_init+0x300>)
 800c92e:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800c932:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800c934:	4bad      	ldr	r3, [pc, #692]	@ (800cbec <low_level_init+0x300>)
 800c936:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800c93a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800c93c:	4bab      	ldr	r3, [pc, #684]	@ (800cbec <low_level_init+0x300>)
 800c93e:	4aad      	ldr	r2, [pc, #692]	@ (800cbf4 <low_level_init+0x308>)
 800c940:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800c942:	4baa      	ldr	r3, [pc, #680]	@ (800cbec <low_level_init+0x300>)
 800c944:	4aac      	ldr	r2, [pc, #688]	@ (800cbf8 <low_level_init+0x30c>)
 800c946:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800c948:	4ba8      	ldr	r3, [pc, #672]	@ (800cbec <low_level_init+0x300>)
 800c94a:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800c94e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800c950:	48a6      	ldr	r0, [pc, #664]	@ (800cbec <low_level_init+0x300>)
 800c952:	f7f8 fe87 	bl	8005664 <HAL_ETH_Init>
 800c956:	4603      	mov	r3, r0
 800c958:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800c95c:	2238      	movs	r2, #56	@ 0x38
 800c95e:	2100      	movs	r1, #0
 800c960:	48a6      	ldr	r0, [pc, #664]	@ (800cbfc <low_level_init+0x310>)
 800c962:	f011 fcc8 	bl	801e2f6 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800c966:	4ba5      	ldr	r3, [pc, #660]	@ (800cbfc <low_level_init+0x310>)
 800c968:	2221      	movs	r2, #33	@ 0x21
 800c96a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800c96c:	4ba3      	ldr	r3, [pc, #652]	@ (800cbfc <low_level_init+0x310>)
 800c96e:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800c972:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800c974:	4ba1      	ldr	r3, [pc, #644]	@ (800cbfc <low_level_init+0x310>)
 800c976:	2200      	movs	r2, #0
 800c978:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800c97a:	48a1      	ldr	r0, [pc, #644]	@ (800cc00 <low_level_init+0x314>)
 800c97c:	f006 fbc8 	bl	8013110 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800c980:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c984:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	2206      	movs	r2, #6
 800c98c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800c990:	4b96      	ldr	r3, [pc, #600]	@ (800cbec <low_level_init+0x300>)
 800c992:	685b      	ldr	r3, [r3, #4]
 800c994:	781a      	ldrb	r2, [r3, #0]
 800c996:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c99a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800c9a4:	4b91      	ldr	r3, [pc, #580]	@ (800cbec <low_level_init+0x300>)
 800c9a6:	685b      	ldr	r3, [r3, #4]
 800c9a8:	785a      	ldrb	r2, [r3, #1]
 800c9aa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c9ae:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800c9b8:	4b8c      	ldr	r3, [pc, #560]	@ (800cbec <low_level_init+0x300>)
 800c9ba:	685b      	ldr	r3, [r3, #4]
 800c9bc:	789a      	ldrb	r2, [r3, #2]
 800c9be:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c9c2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800c9cc:	4b87      	ldr	r3, [pc, #540]	@ (800cbec <low_level_init+0x300>)
 800c9ce:	685b      	ldr	r3, [r3, #4]
 800c9d0:	78da      	ldrb	r2, [r3, #3]
 800c9d2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c9d6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800c9e0:	4b82      	ldr	r3, [pc, #520]	@ (800cbec <low_level_init+0x300>)
 800c9e2:	685b      	ldr	r3, [r3, #4]
 800c9e4:	791a      	ldrb	r2, [r3, #4]
 800c9e6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c9ea:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800c9f4:	4b7d      	ldr	r3, [pc, #500]	@ (800cbec <low_level_init+0x300>)
 800c9f6:	685b      	ldr	r3, [r3, #4]
 800c9f8:	795a      	ldrb	r2, [r3, #5]
 800c9fa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c9fe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800ca08:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ca0c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800ca16:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800ca18:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ca1c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ca26:	f043 030a 	orr.w	r3, r3, #10
 800ca2a:	b2da      	uxtb	r2, r3
 800ca2c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ca30:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(RxSem);
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ca40:	2300      	movs	r3, #0
 800ca42:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(RxSem), 1);
 800ca46:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800ca4a:	2101      	movs	r1, #1
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	f002 ff57 	bl	800f900 <osSemaphoreCreate>
 800ca52:	4603      	mov	r3, r0
 800ca54:	4a6b      	ldr	r2, [pc, #428]	@ (800cc04 <low_level_init+0x318>)
 800ca56:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  osSemaphoreDef(TxSem);
 800ca58:	2300      	movs	r3, #0
 800ca5a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800ca5e:	2300      	movs	r3, #0
 800ca60:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  TxPktSemaphore = osSemaphoreCreate(osSemaphore(TxSem), 1);
 800ca64:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800ca68:	2101      	movs	r1, #1
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	f002 ff48 	bl	800f900 <osSemaphoreCreate>
 800ca70:	4603      	mov	r3, r0
 800ca72:	4a65      	ldr	r2, [pc, #404]	@ (800cc08 <low_level_init+0x31c>)
 800ca74:	6013      	str	r3, [r2, #0]

  /* Decrease the semaphore's initial count from 1 to 0 */
  osSemaphoreWait(RxPktSemaphore, 0);
 800ca76:	4b63      	ldr	r3, [pc, #396]	@ (800cc04 <low_level_init+0x318>)
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	2100      	movs	r1, #0
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	f002 ff71 	bl	800f964 <osSemaphoreWait>
  osSemaphoreWait(TxPktSemaphore, 0);
 800ca82:	4b61      	ldr	r3, [pc, #388]	@ (800cc08 <low_level_init+0x31c>)
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	2100      	movs	r1, #0
 800ca88:	4618      	mov	r0, r3
 800ca8a:	f002 ff6b 	bl	800f964 <osSemaphoreWait>

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800ca8e:	4b5f      	ldr	r3, [pc, #380]	@ (800cc0c <low_level_init+0x320>)
 800ca90:	f107 0488 	add.w	r4, r7, #136	@ 0x88
 800ca94:	461d      	mov	r5, r3
 800ca96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ca98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ca9a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ca9e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800caa2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800caa6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800caaa:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 800caae:	6819      	ldr	r1, [r3, #0]
 800cab0:	4610      	mov	r0, r2
 800cab2:	f002 fe29 	bl	800f708 <osThreadCreate>

/* USER CODE BEGIN low_level_init Code 1 for User BSP */

/* USER CODE END low_level_init Code 1 for User BSP */

  if (hal_eth_init_status == HAL_OK)
 800cab6:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 800caba:	2b00      	cmp	r3, #0
 800cabc:	f040 8158 	bne.w	800cd70 <low_level_init+0x484>
  {
/* USER CODE BEGIN low_level_init Code 2 for User BSP */
    cdc_debug_log("PHY_INIT", "Starting PHY chip initialization");
 800cac0:	4953      	ldr	r1, [pc, #332]	@ (800cc10 <low_level_init+0x324>)
 800cac2:	4854      	ldr	r0, [pc, #336]	@ (800cc14 <low_level_init+0x328>)
 800cac4:	f7ff fd4a 	bl	800c55c <cdc_debug_log>
    
    /* Set up PHY chip IO context */
    PHYchip_io_ctx.init = PHY_IO_Init;
 800cac8:	4b53      	ldr	r3, [pc, #332]	@ (800cc18 <low_level_init+0x32c>)
 800caca:	4a54      	ldr	r2, [pc, #336]	@ (800cc1c <low_level_init+0x330>)
 800cacc:	601a      	str	r2, [r3, #0]
    PHYchip_io_ctx.deinit = PHY_IO_DeInit;
 800cace:	4b52      	ldr	r3, [pc, #328]	@ (800cc18 <low_level_init+0x32c>)
 800cad0:	4a53      	ldr	r2, [pc, #332]	@ (800cc20 <low_level_init+0x334>)
 800cad2:	605a      	str	r2, [r3, #4]
    PHYchip_io_ctx.readreg = PHY_IO_ReadReg;
 800cad4:	4b50      	ldr	r3, [pc, #320]	@ (800cc18 <low_level_init+0x32c>)
 800cad6:	4a53      	ldr	r2, [pc, #332]	@ (800cc24 <low_level_init+0x338>)
 800cad8:	60da      	str	r2, [r3, #12]
    PHYchip_io_ctx.writereg = PHY_IO_WriteReg;
 800cada:	4b4f      	ldr	r3, [pc, #316]	@ (800cc18 <low_level_init+0x32c>)
 800cadc:	4a52      	ldr	r2, [pc, #328]	@ (800cc28 <low_level_init+0x33c>)
 800cade:	609a      	str	r2, [r3, #8]
    PHYchip_io_ctx.gettick = PHY_IO_GetTick;
 800cae0:	4b4d      	ldr	r3, [pc, #308]	@ (800cc18 <low_level_init+0x32c>)
 800cae2:	4a52      	ldr	r2, [pc, #328]	@ (800cc2c <low_level_init+0x340>)
 800cae4:	611a      	str	r2, [r3, #16]

    /* Register PHY chip IO functions */
    if (eth_chip_regster_bus_io(&PHYchip, &PHYchip_io_ctx) != ETH_CHIP_STATUS_OK)
 800cae6:	494c      	ldr	r1, [pc, #304]	@ (800cc18 <low_level_init+0x32c>)
 800cae8:	4851      	ldr	r0, [pc, #324]	@ (800cc30 <low_level_init+0x344>)
 800caea:	f7f7 fe98 	bl	800481e <eth_chip_regster_bus_io>
 800caee:	4603      	mov	r3, r0
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d005      	beq.n	800cb00 <low_level_init+0x214>
    {
      cdc_debug_log("PHY_INIT", "Failed to register PHY IO functions");
 800caf4:	494f      	ldr	r1, [pc, #316]	@ (800cc34 <low_level_init+0x348>)
 800caf6:	4847      	ldr	r0, [pc, #284]	@ (800cc14 <low_level_init+0x328>)
 800caf8:	f7ff fd30 	bl	800c55c <cdc_debug_log>
      Error_Handler();
 800cafc:	f7f5 fa9e 	bl	800203c <Error_Handler>
    }
    cdc_debug_log("PHY_INIT", "PHY IO functions registered successfully");
 800cb00:	494d      	ldr	r1, [pc, #308]	@ (800cc38 <low_level_init+0x34c>)
 800cb02:	4844      	ldr	r0, [pc, #272]	@ (800cc14 <low_level_init+0x328>)
 800cb04:	f7ff fd2a 	bl	800c55c <cdc_debug_log>

    /* Initialize PHY chip */
    if (eth_chip_init(&PHYchip) != ETH_CHIP_STATUS_OK)
 800cb08:	4849      	ldr	r0, [pc, #292]	@ (800cc30 <low_level_init+0x344>)
 800cb0a:	f7f7 febb 	bl	8004884 <eth_chip_init>
 800cb0e:	4603      	mov	r3, r0
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d005      	beq.n	800cb20 <low_level_init+0x234>
    {
      cdc_debug_log("PHY_INIT", "PHY chip initialization failed");
 800cb14:	4949      	ldr	r1, [pc, #292]	@ (800cc3c <low_level_init+0x350>)
 800cb16:	483f      	ldr	r0, [pc, #252]	@ (800cc14 <low_level_init+0x328>)
 800cb18:	f7ff fd20 	bl	800c55c <cdc_debug_log>
      Error_Handler();
 800cb1c:	f7f5 fa8e 	bl	800203c <Error_Handler>
    }
    
    char phy_addr_msg[64];
    snprintf(phy_addr_msg, sizeof(phy_addr_msg), "PHY chip initialized, address: %lu", PHYchip.devaddr);
 800cb20:	4b43      	ldr	r3, [pc, #268]	@ (800cc30 <low_level_init+0x344>)
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	f107 0008 	add.w	r0, r7, #8
 800cb28:	4a45      	ldr	r2, [pc, #276]	@ (800cc40 <low_level_init+0x354>)
 800cb2a:	2140      	movs	r1, #64	@ 0x40
 800cb2c:	f011 fb40 	bl	801e1b0 <sniprintf>
    cdc_debug_log("PHY_INIT", phy_addr_msg);
 800cb30:	f107 0308 	add.w	r3, r7, #8
 800cb34:	4619      	mov	r1, r3
 800cb36:	4837      	ldr	r0, [pc, #220]	@ (800cc14 <low_level_init+0x328>)
 800cb38:	f7ff fd10 	bl	800c55c <cdc_debug_log>

    /* Disable PHY power down mode */
    if (eth_chip_disable_power_down_mode(&PHYchip) != ETH_CHIP_STATUS_OK)
 800cb3c:	483c      	ldr	r0, [pc, #240]	@ (800cc30 <low_level_init+0x344>)
 800cb3e:	f7f7 ffa7 	bl	8004a90 <eth_chip_disable_power_down_mode>
 800cb42:	4603      	mov	r3, r0
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d005      	beq.n	800cb54 <low_level_init+0x268>
    {
      cdc_debug_log("PHY_INIT", "Failed to disable PHY power down mode");
 800cb48:	493e      	ldr	r1, [pc, #248]	@ (800cc44 <low_level_init+0x358>)
 800cb4a:	4832      	ldr	r0, [pc, #200]	@ (800cc14 <low_level_init+0x328>)
 800cb4c:	f7ff fd06 	bl	800c55c <cdc_debug_log>
      Error_Handler();
 800cb50:	f7f5 fa74 	bl	800203c <Error_Handler>
    }
    cdc_debug_log("PHY_INIT", "PHY power down mode disabled");
 800cb54:	493c      	ldr	r1, [pc, #240]	@ (800cc48 <low_level_init+0x35c>)
 800cb56:	482f      	ldr	r0, [pc, #188]	@ (800cc14 <low_level_init+0x328>)
 800cb58:	f7ff fd00 	bl	800c55c <cdc_debug_log>

    /* 启动自动协商 */
    if (eth_chip_start_auto_nego(&PHYchip) != ETH_CHIP_STATUS_OK)
 800cb5c:	4834      	ldr	r0, [pc, #208]	@ (800cc30 <low_level_init+0x344>)
 800cb5e:	f7f7 ffc4 	bl	8004aea <eth_chip_start_auto_nego>
 800cb62:	4603      	mov	r3, r0
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d005      	beq.n	800cb74 <low_level_init+0x288>
    {
      cdc_debug_log("PHY_INIT", "Failed to start auto-negotiation");
 800cb68:	4938      	ldr	r1, [pc, #224]	@ (800cc4c <low_level_init+0x360>)
 800cb6a:	482a      	ldr	r0, [pc, #168]	@ (800cc14 <low_level_init+0x328>)
 800cb6c:	f7ff fcf6 	bl	800c55c <cdc_debug_log>
      Error_Handler();
 800cb70:	f7f5 fa64 	bl	800203c <Error_Handler>
    }
    cdc_debug_log("PHY_INIT", "Auto-negotiation started successfully");
 800cb74:	4936      	ldr	r1, [pc, #216]	@ (800cc50 <low_level_init+0x364>)
 800cb76:	4827      	ldr	r0, [pc, #156]	@ (800cc14 <low_level_init+0x328>)
 800cb78:	f7ff fcf0 	bl	800c55c <cdc_debug_log>

    /* 等待自动协商完成 */
    uint32_t autoneg_timeout = 0;
 800cb7c:	2300      	movs	r3, #0
 800cb7e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    int32_t nego_state;
    do {
      HAL_Delay(100);
 800cb82:	2064      	movs	r0, #100	@ 0x64
 800cb84:	f7f8 f866 	bl	8004c54 <HAL_Delay>
      nego_state = eth_chip_get_link_state(&PHYchip);
 800cb88:	4829      	ldr	r0, [pc, #164]	@ (800cc30 <low_level_init+0x344>)
 800cb8a:	f7f7 ffdb 	bl	8004b44 <eth_chip_get_link_state>
 800cb8e:	f8c7 0124 	str.w	r0, [r7, #292]	@ 0x124
      autoneg_timeout++;
 800cb92:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cb96:	3301      	adds	r3, #1
 800cb98:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
      
      if (autoneg_timeout % 10 == 0) {
 800cb9c:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 800cba0:	4b2c      	ldr	r3, [pc, #176]	@ (800cc54 <low_level_init+0x368>)
 800cba2:	fba3 2301 	umull	r2, r3, r3, r1
 800cba6:	08da      	lsrs	r2, r3, #3
 800cba8:	4613      	mov	r3, r2
 800cbaa:	009b      	lsls	r3, r3, #2
 800cbac:	4413      	add	r3, r2
 800cbae:	005b      	lsls	r3, r3, #1
 800cbb0:	1aca      	subs	r2, r1, r3
 800cbb2:	2a00      	cmp	r2, #0
 800cbb4:	d110      	bne.n	800cbd8 <low_level_init+0x2ec>
        char timeout_msg[64];
        snprintf(timeout_msg, sizeof(timeout_msg), "Auto-nego timeout: %lu, state: %ld", autoneg_timeout, nego_state);
 800cbb6:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 800cbba:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800cbbe:	9300      	str	r3, [sp, #0]
 800cbc0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cbc4:	4a24      	ldr	r2, [pc, #144]	@ (800cc58 <low_level_init+0x36c>)
 800cbc6:	2140      	movs	r1, #64	@ 0x40
 800cbc8:	f011 faf2 	bl	801e1b0 <sniprintf>
        cdc_debug_log("PHY_INIT", timeout_msg);
 800cbcc:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800cbd0:	4619      	mov	r1, r3
 800cbd2:	4810      	ldr	r0, [pc, #64]	@ (800cc14 <low_level_init+0x328>)
 800cbd4:	f7ff fcc2 	bl	800c55c <cdc_debug_log>
      }
      
      /* 超时保护 */
      if (autoneg_timeout > 50) { // 5秒超时
 800cbd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cbdc:	2b32      	cmp	r3, #50	@ 0x32
 800cbde:	d93f      	bls.n	800cc60 <low_level_init+0x374>
        cdc_debug_log("PHY_INIT", "Auto-negotiation timeout, using current state");
 800cbe0:	491e      	ldr	r1, [pc, #120]	@ (800cc5c <low_level_init+0x370>)
 800cbe2:	480c      	ldr	r0, [pc, #48]	@ (800cc14 <low_level_init+0x328>)
 800cbe4:	f7ff fcba 	bl	800c55c <cdc_debug_log>
        break;
 800cbe8:	e043      	b.n	800cc72 <low_level_init+0x386>
 800cbea:	bf00      	nop
 800cbec:	2000551c 	.word	0x2000551c
 800cbf0:	40028000 	.word	0x40028000
 800cbf4:	20005440 	.word	0x20005440
 800cbf8:	200053a0 	.word	0x200053a0
 800cbfc:	200055cc 	.word	0x200055cc
 800cc00:	08023c84 	.word	0x08023c84
 800cc04:	20005514 	.word	0x20005514
 800cc08:	20005518 	.word	0x20005518
 800cc0c:	08020c64 	.word	0x08020c64
 800cc10:	08020964 	.word	0x08020964
 800cc14:	08020988 	.word	0x08020988
 800cc18:	20005500 	.word	0x20005500
 800cc1c:	0800d045 	.word	0x0800d045
 800cc20:	0800d071 	.word	0x0800d071
 800cc24:	0800d099 	.word	0x0800d099
 800cc28:	0800d0f1 	.word	0x0800d0f1
 800cc2c:	0800d14d 	.word	0x0800d14d
 800cc30:	200054e0 	.word	0x200054e0
 800cc34:	08020994 	.word	0x08020994
 800cc38:	080209b8 	.word	0x080209b8
 800cc3c:	080209e4 	.word	0x080209e4
 800cc40:	08020a04 	.word	0x08020a04
 800cc44:	08020a28 	.word	0x08020a28
 800cc48:	08020a50 	.word	0x08020a50
 800cc4c:	08020a70 	.word	0x08020a70
 800cc50:	08020a94 	.word	0x08020a94
 800cc54:	cccccccd 	.word	0xcccccccd
 800cc58:	08020abc 	.word	0x08020abc
 800cc5c:	08020ae0 	.word	0x08020ae0
      }
    } while (nego_state == ETH_CHIP_STATUS_AUTONEGO_NOTDONE || nego_state == ETH_CHIP_STATUS_READ_ERROR);
 800cc60:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800cc64:	2b06      	cmp	r3, #6
 800cc66:	d08c      	beq.n	800cb82 <low_level_init+0x296>
 800cc68:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800cc6c:	f113 0f05 	cmn.w	r3, #5
 800cc70:	d087      	beq.n	800cb82 <low_level_init+0x296>

    /* Get PHY link state and configure ETH accordingly */
    phy_link_state = eth_chip_get_link_state(&PHYchip);
 800cc72:	4843      	ldr	r0, [pc, #268]	@ (800cd80 <low_level_init+0x494>)
 800cc74:	f7f7 ff66 	bl	8004b44 <eth_chip_get_link_state>
 800cc78:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120
    
    char link_msg[64];
    snprintf(link_msg, sizeof(link_msg), "Initial PHY link state: %ld", phy_link_state);
 800cc7c:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 800cc80:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800cc84:	4a3f      	ldr	r2, [pc, #252]	@ (800cd84 <low_level_init+0x498>)
 800cc86:	2140      	movs	r1, #64	@ 0x40
 800cc88:	f011 fa92 	bl	801e1b0 <sniprintf>
    cdc_debug_log("PHY_INIT", link_msg);
 800cc8c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800cc90:	4619      	mov	r1, r3
 800cc92:	483d      	ldr	r0, [pc, #244]	@ (800cd88 <low_level_init+0x49c>)
 800cc94:	f7ff fc62 	bl	800c55c <cdc_debug_log>
    
    if (phy_link_state != ETH_CHIP_STATUS_READ_ERROR)
 800cc98:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800cc9c:	f113 0f05 	cmn.w	r3, #5
 800cca0:	d053      	beq.n	800cd4a <low_level_init+0x45e>
    {
      /* Get current MAC configuration */
      HAL_ETH_GetMACConfig(&heth, &macConfig);
 800cca2:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 800cca6:	4619      	mov	r1, r3
 800cca8:	4838      	ldr	r0, [pc, #224]	@ (800cd8c <low_level_init+0x4a0>)
 800ccaa:	f7f9 f9c3 	bl	8006034 <HAL_ETH_GetMACConfig>
      
      switch (phy_link_state)
 800ccae:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800ccb2:	3b02      	subs	r3, #2
 800ccb4:	2b03      	cmp	r3, #3
 800ccb6:	d83b      	bhi.n	800cd30 <low_level_init+0x444>
 800ccb8:	a201      	add	r2, pc, #4	@ (adr r2, 800ccc0 <low_level_init+0x3d4>)
 800ccba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccbe:	bf00      	nop
 800ccc0:	0800ccd1 	.word	0x0800ccd1
 800ccc4:	0800cceb 	.word	0x0800cceb
 800ccc8:	0800cd03 	.word	0x0800cd03
 800cccc:	0800cd1b 	.word	0x0800cd1b
      {
        case ETH_CHIP_STATUS_100MBITS_FULLDUPLEX:
          macConfig.DuplexMode = ETH_FULLDUPLEX_MODE;
 800ccd0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ccd4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
          macConfig.Speed = ETH_SPEED_100M;
 800ccd8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800ccdc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          cdc_debug_log("PHY_INIT", "Configured: 100M Full Duplex");
 800cce0:	492b      	ldr	r1, [pc, #172]	@ (800cd90 <low_level_init+0x4a4>)
 800cce2:	4829      	ldr	r0, [pc, #164]	@ (800cd88 <low_level_init+0x49c>)
 800cce4:	f7ff fc3a 	bl	800c55c <cdc_debug_log>
          break;
 800cce8:	e02f      	b.n	800cd4a <low_level_init+0x45e>
        case ETH_CHIP_STATUS_100MBITS_HALFDUPLEX:
          macConfig.DuplexMode = ETH_HALFDUPLEX_MODE;
 800ccea:	2300      	movs	r3, #0
 800ccec:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
          macConfig.Speed = ETH_SPEED_100M;
 800ccf0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800ccf4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          cdc_debug_log("PHY_INIT", "Configured: 100M Half Duplex");
 800ccf8:	4926      	ldr	r1, [pc, #152]	@ (800cd94 <low_level_init+0x4a8>)
 800ccfa:	4823      	ldr	r0, [pc, #140]	@ (800cd88 <low_level_init+0x49c>)
 800ccfc:	f7ff fc2e 	bl	800c55c <cdc_debug_log>
          break;
 800cd00:	e023      	b.n	800cd4a <low_level_init+0x45e>
        case ETH_CHIP_STATUS_10MBITS_FULLDUPLEX:
          macConfig.DuplexMode = ETH_FULLDUPLEX_MODE;
 800cd02:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800cd06:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
          macConfig.Speed = ETH_SPEED_10M;
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          cdc_debug_log("PHY_INIT", "Configured: 10M Full Duplex");
 800cd10:	4921      	ldr	r1, [pc, #132]	@ (800cd98 <low_level_init+0x4ac>)
 800cd12:	481d      	ldr	r0, [pc, #116]	@ (800cd88 <low_level_init+0x49c>)
 800cd14:	f7ff fc22 	bl	800c55c <cdc_debug_log>
          break;
 800cd18:	e017      	b.n	800cd4a <low_level_init+0x45e>
        case ETH_CHIP_STATUS_10MBITS_HALFDUPLEX:
          macConfig.DuplexMode = ETH_HALFDUPLEX_MODE;
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
          macConfig.Speed = ETH_SPEED_10M;
 800cd20:	2300      	movs	r3, #0
 800cd22:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          cdc_debug_log("PHY_INIT", "Configured: 10M Half Duplex");
 800cd26:	491d      	ldr	r1, [pc, #116]	@ (800cd9c <low_level_init+0x4b0>)
 800cd28:	4817      	ldr	r0, [pc, #92]	@ (800cd88 <low_level_init+0x49c>)
 800cd2a:	f7ff fc17 	bl	800c55c <cdc_debug_log>
          break;
 800cd2e:	e00c      	b.n	800cd4a <low_level_init+0x45e>
        default:
          macConfig.DuplexMode = ETH_FULLDUPLEX_MODE;
 800cd30:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800cd34:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
          macConfig.Speed = ETH_SPEED_100M;
 800cd38:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800cd3c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          cdc_debug_log("PHY_INIT", "Default: 100M Full Duplex");
 800cd40:	4917      	ldr	r1, [pc, #92]	@ (800cda0 <low_level_init+0x4b4>)
 800cd42:	4811      	ldr	r0, [pc, #68]	@ (800cd88 <low_level_init+0x49c>)
 800cd44:	f7ff fc0a 	bl	800c55c <cdc_debug_log>
          break;
 800cd48:	bf00      	nop

    }

    /* 重要：在启动ETH中断之前，不要调用HAL_ETH_Start_IT！
     * 信号量必须先创建，否则会在中断回调中造成HardFault */
    cdc_debug_log("PHY_INIT", "PHY configuration completed, deferring ETH start until after semaphore creation");
 800cd4a:	4916      	ldr	r1, [pc, #88]	@ (800cda4 <low_level_init+0x4b8>)
 800cd4c:	480e      	ldr	r0, [pc, #56]	@ (800cd88 <low_level_init+0x49c>)
 800cd4e:	f7ff fc05 	bl	800c55c <cdc_debug_log>
    
    /* Debug ETH configuration after initialization */
    cdc_debug_log("ETH_INIT", "=== ETH Initialization Debug ===");
 800cd52:	4915      	ldr	r1, [pc, #84]	@ (800cda8 <low_level_init+0x4bc>)
 800cd54:	4815      	ldr	r0, [pc, #84]	@ (800cdac <low_level_init+0x4c0>)
 800cd56:	f7ff fc01 	bl	800c55c <cdc_debug_log>
    debug_eth_config();
 800cd5a:	f7ff fd47 	bl	800c7ec <debug_eth_config>
    debug_eth_dma_registers();
 800cd5e:	f7ff fce9 	bl	800c734 <debug_eth_dma_registers>
    debug_eth_dma_descriptors();
 800cd62:	f7ff fc1b 	bl	800c59c <debug_eth_dma_descriptors>
    cdc_debug_log("ETH_INIT", "=== ETH Debug Complete ===");
 800cd66:	4912      	ldr	r1, [pc, #72]	@ (800cdb0 <low_level_init+0x4c4>)
 800cd68:	4810      	ldr	r0, [pc, #64]	@ (800cdac <low_level_init+0x4c0>)
 800cd6a:	f7ff fbf7 	bl	800c55c <cdc_debug_log>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800cd6e:	e001      	b.n	800cd74 <low_level_init+0x488>
    Error_Handler();
 800cd70:	f7f5 f964 	bl	800203c <Error_Handler>
}
 800cd74:	bf00      	nop
 800cd76:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800cd7a:	46bd      	mov	sp, r7
 800cd7c:	bdb0      	pop	{r4, r5, r7, pc}
 800cd7e:	bf00      	nop
 800cd80:	200054e0 	.word	0x200054e0
 800cd84:	08020b10 	.word	0x08020b10
 800cd88:	08020988 	.word	0x08020988
 800cd8c:	2000551c 	.word	0x2000551c
 800cd90:	08020b2c 	.word	0x08020b2c
 800cd94:	08020b4c 	.word	0x08020b4c
 800cd98:	08020b6c 	.word	0x08020b6c
 800cd9c:	08020b88 	.word	0x08020b88
 800cda0:	08020ba4 	.word	0x08020ba4
 800cda4:	08020bc0 	.word	0x08020bc0
 800cda8:	08020c10 	.word	0x08020c10
 800cdac:	08020c34 	.word	0x08020c34
 800cdb0:	08020c40 	.word	0x08020c40

0800cdb4 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	b092      	sub	sp, #72	@ 0x48
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	6078      	str	r0, [r7, #4]
 800cdbc:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800cdcc:	f107 030c 	add.w	r3, r7, #12
 800cdd0:	2230      	movs	r2, #48	@ 0x30
 800cdd2:	2100      	movs	r1, #0
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	f011 fa8e 	bl	801e2f6 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800cdda:	f107 030c 	add.w	r3, r7, #12
 800cdde:	2230      	movs	r2, #48	@ 0x30
 800cde0:	2100      	movs	r1, #0
 800cde2:	4618      	mov	r0, r3
 800cde4:	f011 fa87 	bl	801e2f6 <memset>

  for(q = p; q != NULL; q = q->next)
 800cde8:	683b      	ldr	r3, [r7, #0]
 800cdea:	643b      	str	r3, [r7, #64]	@ 0x40
 800cdec:	e045      	b.n	800ce7a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800cdee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cdf0:	2b03      	cmp	r3, #3
 800cdf2:	d902      	bls.n	800cdfa <low_level_output+0x46>
      return ERR_IF;
 800cdf4:	f06f 030b 	mvn.w	r3, #11
 800cdf8:	e07f      	b.n	800cefa <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 800cdfa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cdfc:	6859      	ldr	r1, [r3, #4]
 800cdfe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ce00:	4613      	mov	r3, r2
 800ce02:	005b      	lsls	r3, r3, #1
 800ce04:	4413      	add	r3, r2
 800ce06:	009b      	lsls	r3, r3, #2
 800ce08:	3348      	adds	r3, #72	@ 0x48
 800ce0a:	443b      	add	r3, r7
 800ce0c:	3b3c      	subs	r3, #60	@ 0x3c
 800ce0e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800ce10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ce12:	895b      	ldrh	r3, [r3, #10]
 800ce14:	4619      	mov	r1, r3
 800ce16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ce18:	4613      	mov	r3, r2
 800ce1a:	005b      	lsls	r3, r3, #1
 800ce1c:	4413      	add	r3, r2
 800ce1e:	009b      	lsls	r3, r3, #2
 800ce20:	3348      	adds	r3, #72	@ 0x48
 800ce22:	443b      	add	r3, r7
 800ce24:	3b38      	subs	r3, #56	@ 0x38
 800ce26:	6019      	str	r1, [r3, #0]

    if(i>0)
 800ce28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d011      	beq.n	800ce52 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800ce2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ce30:	1e5a      	subs	r2, r3, #1
 800ce32:	f107 000c 	add.w	r0, r7, #12
 800ce36:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ce38:	460b      	mov	r3, r1
 800ce3a:	005b      	lsls	r3, r3, #1
 800ce3c:	440b      	add	r3, r1
 800ce3e:	009b      	lsls	r3, r3, #2
 800ce40:	18c1      	adds	r1, r0, r3
 800ce42:	4613      	mov	r3, r2
 800ce44:	005b      	lsls	r3, r3, #1
 800ce46:	4413      	add	r3, r2
 800ce48:	009b      	lsls	r3, r3, #2
 800ce4a:	3348      	adds	r3, #72	@ 0x48
 800ce4c:	443b      	add	r3, r7
 800ce4e:	3b34      	subs	r3, #52	@ 0x34
 800ce50:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800ce52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d109      	bne.n	800ce6e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800ce5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ce5c:	4613      	mov	r3, r2
 800ce5e:	005b      	lsls	r3, r3, #1
 800ce60:	4413      	add	r3, r2
 800ce62:	009b      	lsls	r3, r3, #2
 800ce64:	3348      	adds	r3, #72	@ 0x48
 800ce66:	443b      	add	r3, r7
 800ce68:	3b34      	subs	r3, #52	@ 0x34
 800ce6a:	2200      	movs	r2, #0
 800ce6c:	601a      	str	r2, [r3, #0]
    }

    i++;
 800ce6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ce70:	3301      	adds	r3, #1
 800ce72:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 800ce74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	643b      	str	r3, [r7, #64]	@ 0x40
 800ce7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d1b6      	bne.n	800cdee <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800ce80:	683b      	ldr	r3, [r7, #0]
 800ce82:	891b      	ldrh	r3, [r3, #8]
 800ce84:	461a      	mov	r2, r3
 800ce86:	4b1f      	ldr	r3, [pc, #124]	@ (800cf04 <low_level_output+0x150>)
 800ce88:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800ce8a:	4a1e      	ldr	r2, [pc, #120]	@ (800cf04 <low_level_output+0x150>)
 800ce8c:	f107 030c 	add.w	r3, r7, #12
 800ce90:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800ce92:	4a1c      	ldr	r2, [pc, #112]	@ (800cf04 <low_level_output+0x150>)
 800ce94:	683b      	ldr	r3, [r7, #0]
 800ce96:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 800ce98:	6838      	ldr	r0, [r7, #0]
 800ce9a:	f007 f965 	bl	8014168 <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 800ce9e:	4919      	ldr	r1, [pc, #100]	@ (800cf04 <low_level_output+0x150>)
 800cea0:	4819      	ldr	r0, [pc, #100]	@ (800cf08 <low_level_output+0x154>)
 800cea2:	f7f8 fd6a 	bl	800597a <HAL_ETH_Transmit_IT>
 800cea6:	4603      	mov	r3, r0
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d103      	bne.n	800ceb4 <low_level_output+0x100>
    {
      errval = ERR_OK;
 800ceac:	2300      	movs	r3, #0
 800ceae:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800ceb2:	e01b      	b.n	800ceec <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 800ceb4:	4814      	ldr	r0, [pc, #80]	@ (800cf08 <low_level_output+0x154>)
 800ceb6:	f7f9 f9ce 	bl	8006256 <HAL_ETH_GetError>
 800ceba:	4603      	mov	r3, r0
 800cebc:	f003 0302 	and.w	r3, r3, #2
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d00d      	beq.n	800cee0 <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreWait(TxPktSemaphore, ETHIF_TX_TIMEOUT);
 800cec4:	4b11      	ldr	r3, [pc, #68]	@ (800cf0c <low_level_output+0x158>)
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800cecc:	4618      	mov	r0, r3
 800cece:	f002 fd49 	bl	800f964 <osSemaphoreWait>
        HAL_ETH_ReleaseTxPacket(&heth);
 800ced2:	480d      	ldr	r0, [pc, #52]	@ (800cf08 <low_level_output+0x154>)
 800ced4:	f7f8 fef0 	bl	8005cb8 <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 800ced8:	23fe      	movs	r3, #254	@ 0xfe
 800ceda:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800cede:	e005      	b.n	800ceec <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 800cee0:	6838      	ldr	r0, [r7, #0]
 800cee2:	f007 f89b 	bl	801401c <pbuf_free>
        errval =  ERR_IF;
 800cee6:	23f4      	movs	r3, #244	@ 0xf4
 800cee8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 800ceec:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800cef0:	f113 0f02 	cmn.w	r3, #2
 800cef4:	d0d3      	beq.n	800ce9e <low_level_output+0xea>

  return errval;
 800cef6:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800cefa:	4618      	mov	r0, r3
 800cefc:	3748      	adds	r7, #72	@ 0x48
 800cefe:	46bd      	mov	sp, r7
 800cf00:	bd80      	pop	{r7, pc}
 800cf02:	bf00      	nop
 800cf04:	200055cc 	.word	0x200055cc
 800cf08:	2000551c 	.word	0x2000551c
 800cf0c:	20005518 	.word	0x20005518

0800cf10 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800cf10:	b580      	push	{r7, lr}
 800cf12:	b084      	sub	sp, #16
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800cf18:	2300      	movs	r3, #0
 800cf1a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800cf1c:	4b07      	ldr	r3, [pc, #28]	@ (800cf3c <low_level_input+0x2c>)
 800cf1e:	781b      	ldrb	r3, [r3, #0]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d105      	bne.n	800cf30 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800cf24:	f107 030c 	add.w	r3, r7, #12
 800cf28:	4619      	mov	r1, r3
 800cf2a:	4805      	ldr	r0, [pc, #20]	@ (800cf40 <low_level_input+0x30>)
 800cf2c:	f7f8 fd81 	bl	8005a32 <HAL_ETH_ReadData>
  }

  return p;
 800cf30:	68fb      	ldr	r3, [r7, #12]
}
 800cf32:	4618      	mov	r0, r3
 800cf34:	3710      	adds	r7, #16
 800cf36:	46bd      	mov	sp, r7
 800cf38:	bd80      	pop	{r7, pc}
 800cf3a:	bf00      	nop
 800cf3c:	2000539c 	.word	0x2000539c
 800cf40:	2000551c 	.word	0x2000551c

0800cf44 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 800cf44:	b580      	push	{r7, lr}
 800cf46:	b084      	sub	sp, #16
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800cf54:	4b0f      	ldr	r3, [pc, #60]	@ (800cf94 <ethernetif_input+0x50>)
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	f04f 31ff 	mov.w	r1, #4294967295
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	f002 fd01 	bl	800f964 <osSemaphoreWait>
 800cf62:	4603      	mov	r3, r0
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d1f5      	bne.n	800cf54 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 800cf68:	68b8      	ldr	r0, [r7, #8]
 800cf6a:	f7ff ffd1 	bl	800cf10 <low_level_input>
 800cf6e:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d00a      	beq.n	800cf8c <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800cf76:	68bb      	ldr	r3, [r7, #8]
 800cf78:	691b      	ldr	r3, [r3, #16]
 800cf7a:	68b9      	ldr	r1, [r7, #8]
 800cf7c:	68f8      	ldr	r0, [r7, #12]
 800cf7e:	4798      	blx	r3
 800cf80:	4603      	mov	r3, r0
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d002      	beq.n	800cf8c <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800cf86:	68f8      	ldr	r0, [r7, #12]
 800cf88:	f007 f848 	bl	801401c <pbuf_free>
          }
        }
      } while(p!=NULL);
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d1ea      	bne.n	800cf68 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800cf92:	e7df      	b.n	800cf54 <ethernetif_input+0x10>
 800cf94:	20005514 	.word	0x20005514

0800cf98 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	b082      	sub	sp, #8
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d106      	bne.n	800cfb4 <ethernetif_init+0x1c>
 800cfa6:	4b0e      	ldr	r3, [pc, #56]	@ (800cfe0 <ethernetif_init+0x48>)
 800cfa8:	f44f 723a 	mov.w	r2, #744	@ 0x2e8
 800cfac:	490d      	ldr	r1, [pc, #52]	@ (800cfe4 <ethernetif_init+0x4c>)
 800cfae:	480e      	ldr	r0, [pc, #56]	@ (800cfe8 <ethernetif_init+0x50>)
 800cfb0:	f011 f8ec 	bl	801e18c <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	2273      	movs	r2, #115	@ 0x73
 800cfb8:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	2274      	movs	r2, #116	@ 0x74
 800cfc0:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	4a09      	ldr	r2, [pc, #36]	@ (800cfec <ethernetif_init+0x54>)
 800cfc8:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	4a08      	ldr	r2, [pc, #32]	@ (800cff0 <ethernetif_init+0x58>)
 800cfce:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800cfd0:	6878      	ldr	r0, [r7, #4]
 800cfd2:	f7ff fc8b 	bl	800c8ec <low_level_init>

  return ERR_OK;
 800cfd6:	2300      	movs	r3, #0
}
 800cfd8:	4618      	mov	r0, r3
 800cfda:	3708      	adds	r7, #8
 800cfdc:	46bd      	mov	sp, r7
 800cfde:	bd80      	pop	{r7, pc}
 800cfe0:	08020c80 	.word	0x08020c80
 800cfe4:	08020c9c 	.word	0x08020c9c
 800cfe8:	08020cac 	.word	0x08020cac
 800cfec:	0801b40d 	.word	0x0801b40d
 800cff0:	0800cdb5 	.word	0x0800cdb5

0800cff4 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800cff4:	b580      	push	{r7, lr}
 800cff6:	b084      	sub	sp, #16
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800d000:	68f9      	ldr	r1, [r7, #12]
 800d002:	4809      	ldr	r0, [pc, #36]	@ (800d028 <pbuf_free_custom+0x34>)
 800d004:	f006 f974 	bl	80132f0 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800d008:	4b08      	ldr	r3, [pc, #32]	@ (800d02c <pbuf_free_custom+0x38>)
 800d00a:	781b      	ldrb	r3, [r3, #0]
 800d00c:	2b01      	cmp	r3, #1
 800d00e:	d107      	bne.n	800d020 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800d010:	4b06      	ldr	r3, [pc, #24]	@ (800d02c <pbuf_free_custom+0x38>)
 800d012:	2200      	movs	r2, #0
 800d014:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800d016:	4b06      	ldr	r3, [pc, #24]	@ (800d030 <pbuf_free_custom+0x3c>)
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	4618      	mov	r0, r3
 800d01c:	f002 fcf0 	bl	800fa00 <osSemaphoreRelease>
  }
}
 800d020:	bf00      	nop
 800d022:	3710      	adds	r7, #16
 800d024:	46bd      	mov	sp, r7
 800d026:	bd80      	pop	{r7, pc}
 800d028:	08023c84 	.word	0x08023c84
 800d02c:	2000539c 	.word	0x2000539c
 800d030:	20005514 	.word	0x20005514

0800d034 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800d034:	b580      	push	{r7, lr}
 800d036:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800d038:	f7f7 fe00 	bl	8004c3c <HAL_GetTick>
 800d03c:	4603      	mov	r3, r0
}
 800d03e:	4618      	mov	r0, r3
 800d040:	bd80      	pop	{r7, pc}
	...

0800d044 <PHY_IO_Init>:
/**
  * @brief  Initialize the PHY interface
  * @retval 0 if OK, -1 if ERROR
  */
static int32_t PHY_IO_Init(void)
{
 800d044:	b580      	push	{r7, lr}
 800d046:	af00      	add	r7, sp, #0
  /* 基本的PHY硬件初始化已经由HAL_ETH_Init处理 */
  /* 这里进行PHY芯片特定的初始化 */
  cdc_debug_log("PHY_IO", "PHY_IO_Init called - performing PHY-specific initialization");
 800d048:	4906      	ldr	r1, [pc, #24]	@ (800d064 <PHY_IO_Init+0x20>)
 800d04a:	4807      	ldr	r0, [pc, #28]	@ (800d068 <PHY_IO_Init+0x24>)
 800d04c:	f7ff fa86 	bl	800c55c <cdc_debug_log>
  
  /* 等待PHY准备就绪 */
  HAL_Delay(10);
 800d050:	200a      	movs	r0, #10
 800d052:	f7f7 fdff 	bl	8004c54 <HAL_Delay>
  
  cdc_debug_log("PHY_IO", "PHY_IO_Init completed successfully");
 800d056:	4905      	ldr	r1, [pc, #20]	@ (800d06c <PHY_IO_Init+0x28>)
 800d058:	4803      	ldr	r0, [pc, #12]	@ (800d068 <PHY_IO_Init+0x24>)
 800d05a:	f7ff fa7f 	bl	800c55c <cdc_debug_log>
  return 0;
 800d05e:	2300      	movs	r3, #0
}
 800d060:	4618      	mov	r0, r3
 800d062:	bd80      	pop	{r7, pc}
 800d064:	08020cd4 	.word	0x08020cd4
 800d068:	08020d10 	.word	0x08020d10
 800d06c:	08020d18 	.word	0x08020d18

0800d070 <PHY_IO_DeInit>:
/**
  * @brief  De-Initialize the PHY interface
  * @retval 0 if OK, -1 if ERROR
  */
static int32_t PHY_IO_DeInit(void)
{
 800d070:	b580      	push	{r7, lr}
 800d072:	af00      	add	r7, sp, #0
  cdc_debug_log("PHY_IO", "PHY_IO_DeInit called - performing PHY-specific cleanup");
 800d074:	4905      	ldr	r1, [pc, #20]	@ (800d08c <PHY_IO_DeInit+0x1c>)
 800d076:	4806      	ldr	r0, [pc, #24]	@ (800d090 <PHY_IO_DeInit+0x20>)
 800d078:	f7ff fa70 	bl	800c55c <cdc_debug_log>
  
  /* 可以在这里添加特定的PHY去初始化操作 */
  /* 例如：使能省电模式 */
  
  cdc_debug_log("PHY_IO", "PHY_IO_DeInit completed");
 800d07c:	4905      	ldr	r1, [pc, #20]	@ (800d094 <PHY_IO_DeInit+0x24>)
 800d07e:	4804      	ldr	r0, [pc, #16]	@ (800d090 <PHY_IO_DeInit+0x20>)
 800d080:	f7ff fa6c 	bl	800c55c <cdc_debug_log>
  return 0;
 800d084:	2300      	movs	r3, #0
}
 800d086:	4618      	mov	r0, r3
 800d088:	bd80      	pop	{r7, pc}
 800d08a:	bf00      	nop
 800d08c:	08020d3c 	.word	0x08020d3c
 800d090:	08020d10 	.word	0x08020d10
 800d094:	08020d74 	.word	0x08020d74

0800d098 <PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: Pointer to register value
  * @retval 0 if OK, -1 if ERROR
  */
static int32_t PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800d098:	b580      	push	{r7, lr}
 800d09a:	b096      	sub	sp, #88	@ 0x58
 800d09c:	af02      	add	r7, sp, #8
 800d09e:	60f8      	str	r0, [r7, #12]
 800d0a0:	60b9      	str	r1, [r7, #8]
 800d0a2:	607a      	str	r2, [r7, #4]
  if (HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	68ba      	ldr	r2, [r7, #8]
 800d0a8:	68f9      	ldr	r1, [r7, #12]
 800d0aa:	480e      	ldr	r0, [pc, #56]	@ (800d0e4 <PHY_IO_ReadReg+0x4c>)
 800d0ac:	f7f8 ff2e 	bl	8005f0c <HAL_ETH_ReadPHYRegister>
 800d0b0:	4603      	mov	r3, r0
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d011      	beq.n	800d0da <PHY_IO_ReadReg+0x42>
  {
    char error_msg[64];
    snprintf(error_msg, sizeof(error_msg), "Read failed - Addr:0x%02lX Reg:0x%02lX", DevAddr, RegAddr);
 800d0b6:	f107 0010 	add.w	r0, r7, #16
 800d0ba:	68bb      	ldr	r3, [r7, #8]
 800d0bc:	9300      	str	r3, [sp, #0]
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	4a09      	ldr	r2, [pc, #36]	@ (800d0e8 <PHY_IO_ReadReg+0x50>)
 800d0c2:	2140      	movs	r1, #64	@ 0x40
 800d0c4:	f011 f874 	bl	801e1b0 <sniprintf>
    cdc_debug_log("PHY_IO", error_msg);
 800d0c8:	f107 0310 	add.w	r3, r7, #16
 800d0cc:	4619      	mov	r1, r3
 800d0ce:	4807      	ldr	r0, [pc, #28]	@ (800d0ec <PHY_IO_ReadReg+0x54>)
 800d0d0:	f7ff fa44 	bl	800c55c <cdc_debug_log>
    return -1;
 800d0d4:	f04f 33ff 	mov.w	r3, #4294967295
 800d0d8:	e000      	b.n	800d0dc <PHY_IO_ReadReg+0x44>
  }
  return 0;
 800d0da:	2300      	movs	r3, #0
}
 800d0dc:	4618      	mov	r0, r3
 800d0de:	3750      	adds	r7, #80	@ 0x50
 800d0e0:	46bd      	mov	sp, r7
 800d0e2:	bd80      	pop	{r7, pc}
 800d0e4:	2000551c 	.word	0x2000551c
 800d0e8:	08020d8c 	.word	0x08020d8c
 800d0ec:	08020d10 	.word	0x08020d10

0800d0f0 <PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Register value to write
  * @retval 0 if OK, -1 if ERROR
  */
static int32_t PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800d0f0:	b580      	push	{r7, lr}
 800d0f2:	b096      	sub	sp, #88	@ 0x58
 800d0f4:	af02      	add	r7, sp, #8
 800d0f6:	60f8      	str	r0, [r7, #12]
 800d0f8:	60b9      	str	r1, [r7, #8]
 800d0fa:	607a      	str	r2, [r7, #4]
  if (HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	68ba      	ldr	r2, [r7, #8]
 800d100:	68f9      	ldr	r1, [r7, #12]
 800d102:	480f      	ldr	r0, [pc, #60]	@ (800d140 <PHY_IO_WriteReg+0x50>)
 800d104:	f7f8 ff4d 	bl	8005fa2 <HAL_ETH_WritePHYRegister>
 800d108:	4603      	mov	r3, r0
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d013      	beq.n	800d136 <PHY_IO_WriteReg+0x46>
  {
    char error_msg[64];
    snprintf(error_msg, sizeof(error_msg), "Write failed - Addr:0x%02lX Reg:0x%02lX Val:0x%04lX", DevAddr, RegAddr, RegVal);
 800d10e:	f107 0010 	add.w	r0, r7, #16
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	9301      	str	r3, [sp, #4]
 800d116:	68bb      	ldr	r3, [r7, #8]
 800d118:	9300      	str	r3, [sp, #0]
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	4a09      	ldr	r2, [pc, #36]	@ (800d144 <PHY_IO_WriteReg+0x54>)
 800d11e:	2140      	movs	r1, #64	@ 0x40
 800d120:	f011 f846 	bl	801e1b0 <sniprintf>
    cdc_debug_log("PHY_IO", error_msg);
 800d124:	f107 0310 	add.w	r3, r7, #16
 800d128:	4619      	mov	r1, r3
 800d12a:	4807      	ldr	r0, [pc, #28]	@ (800d148 <PHY_IO_WriteReg+0x58>)
 800d12c:	f7ff fa16 	bl	800c55c <cdc_debug_log>
    return -1;
 800d130:	f04f 33ff 	mov.w	r3, #4294967295
 800d134:	e000      	b.n	800d138 <PHY_IO_WriteReg+0x48>
  }
  return 0;
 800d136:	2300      	movs	r3, #0
}
 800d138:	4618      	mov	r0, r3
 800d13a:	3750      	adds	r7, #80	@ 0x50
 800d13c:	46bd      	mov	sp, r7
 800d13e:	bd80      	pop	{r7, pc}
 800d140:	2000551c 	.word	0x2000551c
 800d144:	08020db4 	.word	0x08020db4
 800d148:	08020d10 	.word	0x08020d10

0800d14c <PHY_IO_GetTick>:
/**
  * @brief  Get system tick for timing
  * @retval Current tick value
  */
static int32_t PHY_IO_GetTick(void)
{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800d150:	f7f7 fd74 	bl	8004c3c <HAL_GetTick>
 800d154:	4603      	mov	r3, r0
}
 800d156:	4618      	mov	r0, r3
 800d158:	bd80      	pop	{r7, pc}
	...

0800d15c <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 800d15c:	b580      	push	{r7, lr}
 800d15e:	b0b0      	sub	sp, #192	@ 0xc0
 800d160:	af00      	add	r7, sp, #0
 800d162:	6078      	str	r0, [r7, #4]

/* USER CODE BEGIN ETH link init */
  struct netif *netif = (struct netif *) argument;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  int32_t phy_link_state;
  ETH_MACConfigTypeDef macConfig;
  uint32_t linkchanged = 0, linkup = 0;
 800d16a:	2300      	movs	r3, #0
 800d16c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800d170:	2300      	movs	r3, #0
 800d172:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t link_check_counter = 0;
 800d176:	2300      	movs	r3, #0
 800d178:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  
  cdc_debug_log("LINK_THREAD", "Ethernet link monitoring started");
 800d17c:	49be      	ldr	r1, [pc, #760]	@ (800d478 <ethernet_link_thread+0x31c>)
 800d17e:	48bf      	ldr	r0, [pc, #764]	@ (800d47c <ethernet_link_thread+0x320>)
 800d180:	f7ff f9ec 	bl	800c55c <cdc_debug_log>

  for(;;)
  {

/* USER CODE BEGIN ETH link Thread core code for User BSP */
    link_check_counter++;
 800d184:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d188:	3301      	adds	r3, #1
 800d18a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    
    /* Only log every 50th check to avoid flooding (approximately every 5 seconds) */
    if (link_check_counter % 50 == 0)
 800d18e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d192:	4bbb      	ldr	r3, [pc, #748]	@ (800d480 <ethernet_link_thread+0x324>)
 800d194:	fba3 1302 	umull	r1, r3, r3, r2
 800d198:	091b      	lsrs	r3, r3, #4
 800d19a:	2132      	movs	r1, #50	@ 0x32
 800d19c:	fb01 f303 	mul.w	r3, r1, r3
 800d1a0:	1ad3      	subs	r3, r2, r3
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d10d      	bne.n	800d1c2 <ethernet_link_thread+0x66>
    {
      char counter_msg[32];
      snprintf(counter_msg, sizeof(counter_msg), "Link check #%lu", link_check_counter);
 800d1a6:	f107 0008 	add.w	r0, r7, #8
 800d1aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d1ae:	4ab5      	ldr	r2, [pc, #724]	@ (800d484 <ethernet_link_thread+0x328>)
 800d1b0:	2120      	movs	r1, #32
 800d1b2:	f010 fffd 	bl	801e1b0 <sniprintf>
      cdc_debug_log("LINK_THREAD", counter_msg);
 800d1b6:	f107 0308 	add.w	r3, r7, #8
 800d1ba:	4619      	mov	r1, r3
 800d1bc:	48af      	ldr	r0, [pc, #700]	@ (800d47c <ethernet_link_thread+0x320>)
 800d1be:	f7ff f9cd 	bl	800c55c <cdc_debug_log>
    }
    
    phy_link_state = eth_chip_get_link_state(&PHYchip);
 800d1c2:	48b1      	ldr	r0, [pc, #708]	@ (800d488 <ethernet_link_thread+0x32c>)
 800d1c4:	f7f7 fcbe 	bl	8004b44 <eth_chip_get_link_state>
 800d1c8:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
    
    if (phy_link_state != ETH_CHIP_STATUS_READ_ERROR && phy_link_state != ETH_CHIP_STATUS_LINK_DOWN)
 800d1cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d1d0:	f113 0f05 	cmn.w	r3, #5
 800d1d4:	f000 8111 	beq.w	800d3fa <ethernet_link_thread+0x29e>
 800d1d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d1dc:	2b01      	cmp	r3, #1
 800d1de:	f000 810c 	beq.w	800d3fa <ethernet_link_thread+0x29e>
    {
      /* PHY link is up */
      switch (phy_link_state)
 800d1e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d1e6:	3b02      	subs	r3, #2
 800d1e8:	2b04      	cmp	r3, #4
 800d1ea:	d874      	bhi.n	800d2d6 <ethernet_link_thread+0x17a>
 800d1ec:	a201      	add	r2, pc, #4	@ (adr r2, 800d1f4 <ethernet_link_thread+0x98>)
 800d1ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1f2:	bf00      	nop
 800d1f4:	0800d209 	.word	0x0800d209
 800d1f8:	0800d231 	.word	0x0800d231
 800d1fc:	0800d259 	.word	0x0800d259
 800d200:	0800d281 	.word	0x0800d281
 800d204:	0800d2a9 	.word	0x0800d2a9
      {
        case ETH_CHIP_STATUS_100MBITS_FULLDUPLEX:
          if (link_check_counter % 50 == 0) cdc_debug_log("LINK_THREAD", "Link: 100M Full Duplex");
 800d208:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d20c:	4b9c      	ldr	r3, [pc, #624]	@ (800d480 <ethernet_link_thread+0x324>)
 800d20e:	fba3 1302 	umull	r1, r3, r3, r2
 800d212:	091b      	lsrs	r3, r3, #4
 800d214:	2132      	movs	r1, #50	@ 0x32
 800d216:	fb01 f303 	mul.w	r3, r1, r3
 800d21a:	1ad3      	subs	r3, r2, r3
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d103      	bne.n	800d228 <ethernet_link_thread+0xcc>
 800d220:	499a      	ldr	r1, [pc, #616]	@ (800d48c <ethernet_link_thread+0x330>)
 800d222:	4896      	ldr	r0, [pc, #600]	@ (800d47c <ethernet_link_thread+0x320>)
 800d224:	f7ff f99a 	bl	800c55c <cdc_debug_log>
          linkup = 1;
 800d228:	2301      	movs	r3, #1
 800d22a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
          break;
 800d22e:	e066      	b.n	800d2fe <ethernet_link_thread+0x1a2>
        case ETH_CHIP_STATUS_100MBITS_HALFDUPLEX:
          if (link_check_counter % 50 == 0) cdc_debug_log("LINK_THREAD", "Link: 100M Half Duplex");
 800d230:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d234:	4b92      	ldr	r3, [pc, #584]	@ (800d480 <ethernet_link_thread+0x324>)
 800d236:	fba3 1302 	umull	r1, r3, r3, r2
 800d23a:	091b      	lsrs	r3, r3, #4
 800d23c:	2132      	movs	r1, #50	@ 0x32
 800d23e:	fb01 f303 	mul.w	r3, r1, r3
 800d242:	1ad3      	subs	r3, r2, r3
 800d244:	2b00      	cmp	r3, #0
 800d246:	d103      	bne.n	800d250 <ethernet_link_thread+0xf4>
 800d248:	4991      	ldr	r1, [pc, #580]	@ (800d490 <ethernet_link_thread+0x334>)
 800d24a:	488c      	ldr	r0, [pc, #560]	@ (800d47c <ethernet_link_thread+0x320>)
 800d24c:	f7ff f986 	bl	800c55c <cdc_debug_log>
          linkup = 1;
 800d250:	2301      	movs	r3, #1
 800d252:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
          break;
 800d256:	e052      	b.n	800d2fe <ethernet_link_thread+0x1a2>
        case ETH_CHIP_STATUS_10MBITS_FULLDUPLEX:
          if (link_check_counter % 50 == 0) cdc_debug_log("LINK_THREAD", "Link: 10M Full Duplex");
 800d258:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d25c:	4b88      	ldr	r3, [pc, #544]	@ (800d480 <ethernet_link_thread+0x324>)
 800d25e:	fba3 1302 	umull	r1, r3, r3, r2
 800d262:	091b      	lsrs	r3, r3, #4
 800d264:	2132      	movs	r1, #50	@ 0x32
 800d266:	fb01 f303 	mul.w	r3, r1, r3
 800d26a:	1ad3      	subs	r3, r2, r3
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d103      	bne.n	800d278 <ethernet_link_thread+0x11c>
 800d270:	4988      	ldr	r1, [pc, #544]	@ (800d494 <ethernet_link_thread+0x338>)
 800d272:	4882      	ldr	r0, [pc, #520]	@ (800d47c <ethernet_link_thread+0x320>)
 800d274:	f7ff f972 	bl	800c55c <cdc_debug_log>
          linkup = 1;
 800d278:	2301      	movs	r3, #1
 800d27a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
          break;
 800d27e:	e03e      	b.n	800d2fe <ethernet_link_thread+0x1a2>
        case ETH_CHIP_STATUS_10MBITS_HALFDUPLEX:
          if (link_check_counter % 50 == 0) cdc_debug_log("LINK_THREAD", "Link: 10M Half Duplex");
 800d280:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d284:	4b7e      	ldr	r3, [pc, #504]	@ (800d480 <ethernet_link_thread+0x324>)
 800d286:	fba3 1302 	umull	r1, r3, r3, r2
 800d28a:	091b      	lsrs	r3, r3, #4
 800d28c:	2132      	movs	r1, #50	@ 0x32
 800d28e:	fb01 f303 	mul.w	r3, r1, r3
 800d292:	1ad3      	subs	r3, r2, r3
 800d294:	2b00      	cmp	r3, #0
 800d296:	d103      	bne.n	800d2a0 <ethernet_link_thread+0x144>
 800d298:	497f      	ldr	r1, [pc, #508]	@ (800d498 <ethernet_link_thread+0x33c>)
 800d29a:	4878      	ldr	r0, [pc, #480]	@ (800d47c <ethernet_link_thread+0x320>)
 800d29c:	f7ff f95e 	bl	800c55c <cdc_debug_log>
          linkup = 1;
 800d2a0:	2301      	movs	r3, #1
 800d2a2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
          break;
 800d2a6:	e02a      	b.n	800d2fe <ethernet_link_thread+0x1a2>
        case ETH_CHIP_STATUS_AUTONEGO_NOTDONE:
          if (link_check_counter % 50 == 0) {
 800d2a8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d2ac:	4b74      	ldr	r3, [pc, #464]	@ (800d480 <ethernet_link_thread+0x324>)
 800d2ae:	fba3 1302 	umull	r1, r3, r3, r2
 800d2b2:	091b      	lsrs	r3, r3, #4
 800d2b4:	2132      	movs	r1, #50	@ 0x32
 800d2b6:	fb01 f303 	mul.w	r3, r1, r3
 800d2ba:	1ad3      	subs	r3, r2, r3
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d106      	bne.n	800d2ce <ethernet_link_thread+0x172>
            cdc_debug_log("LINK_THREAD", "Auto-negotiation in progress, restarting...");
 800d2c0:	4976      	ldr	r1, [pc, #472]	@ (800d49c <ethernet_link_thread+0x340>)
 800d2c2:	486e      	ldr	r0, [pc, #440]	@ (800d47c <ethernet_link_thread+0x320>)
 800d2c4:	f7ff f94a 	bl	800c55c <cdc_debug_log>
            eth_chip_start_auto_nego(&PHYchip);
 800d2c8:	486f      	ldr	r0, [pc, #444]	@ (800d488 <ethernet_link_thread+0x32c>)
 800d2ca:	f7f7 fc0e 	bl	8004aea <eth_chip_start_auto_nego>
          }
          linkup = 0;
 800d2ce:	2300      	movs	r3, #0
 800d2d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
          break;
 800d2d4:	e013      	b.n	800d2fe <ethernet_link_thread+0x1a2>
        default:
          if (link_check_counter % 50 == 0) cdc_debug_log("LINK_THREAD", "Link: Unknown state");
 800d2d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d2da:	4b69      	ldr	r3, [pc, #420]	@ (800d480 <ethernet_link_thread+0x324>)
 800d2dc:	fba3 1302 	umull	r1, r3, r3, r2
 800d2e0:	091b      	lsrs	r3, r3, #4
 800d2e2:	2132      	movs	r1, #50	@ 0x32
 800d2e4:	fb01 f303 	mul.w	r3, r1, r3
 800d2e8:	1ad3      	subs	r3, r2, r3
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d103      	bne.n	800d2f6 <ethernet_link_thread+0x19a>
 800d2ee:	496c      	ldr	r1, [pc, #432]	@ (800d4a0 <ethernet_link_thread+0x344>)
 800d2f0:	4862      	ldr	r0, [pc, #392]	@ (800d47c <ethernet_link_thread+0x320>)
 800d2f2:	f7ff f933 	bl	800c55c <cdc_debug_log>
          linkup = 0;
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
          break;
 800d2fc:	bf00      	nop
      }
      
      if (linkup && !netif_is_link_up(netif))
 800d2fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d302:	2b00      	cmp	r3, #0
 800d304:	f000 8113 	beq.w	800d52e <ethernet_link_thread+0x3d2>
 800d308:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800d30c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d310:	f003 0304 	and.w	r3, r3, #4
 800d314:	2b00      	cmp	r3, #0
 800d316:	f040 810a 	bne.w	800d52e <ethernet_link_thread+0x3d2>
      {
        cdc_debug_log("LINK_THREAD", "Link UP detected - configuring interface");
 800d31a:	4962      	ldr	r1, [pc, #392]	@ (800d4a4 <ethernet_link_thread+0x348>)
 800d31c:	4857      	ldr	r0, [pc, #348]	@ (800d47c <ethernet_link_thread+0x320>)
 800d31e:	f7ff f91d 	bl	800c55c <cdc_debug_log>
        
        /* Get current MAC configuration */
        HAL_ETH_GetMACConfig(&heth, &macConfig);
 800d322:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800d326:	4619      	mov	r1, r3
 800d328:	485f      	ldr	r0, [pc, #380]	@ (800d4a8 <ethernet_link_thread+0x34c>)
 800d32a:	f7f8 fe83 	bl	8006034 <HAL_ETH_GetMACConfig>
        
        /* Configure ETH DupLex and Speed based on PHY state */
        switch (phy_link_state)
 800d32e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d332:	3b02      	subs	r3, #2
 800d334:	2b03      	cmp	r3, #3
 800d336:	d833      	bhi.n	800d3a0 <ethernet_link_thread+0x244>
 800d338:	a201      	add	r2, pc, #4	@ (adr r2, 800d340 <ethernet_link_thread+0x1e4>)
 800d33a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d33e:	bf00      	nop
 800d340:	0800d351 	.word	0x0800d351
 800d344:	0800d367 	.word	0x0800d367
 800d348:	0800d37b 	.word	0x0800d37b
 800d34c:	0800d38f 	.word	0x0800d38f
        {
          case ETH_CHIP_STATUS_100MBITS_FULLDUPLEX:
            macConfig.DuplexMode = ETH_FULLDUPLEX_MODE;
 800d350:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d354:	663b      	str	r3, [r7, #96]	@ 0x60
            macConfig.Speed = ETH_SPEED_100M;
 800d356:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800d35a:	65fb      	str	r3, [r7, #92]	@ 0x5c
            cdc_debug_log("LINK_THREAD", "Configuring: 100M Full Duplex");
 800d35c:	4953      	ldr	r1, [pc, #332]	@ (800d4ac <ethernet_link_thread+0x350>)
 800d35e:	4847      	ldr	r0, [pc, #284]	@ (800d47c <ethernet_link_thread+0x320>)
 800d360:	f7ff f8fc 	bl	800c55c <cdc_debug_log>
            break;
 800d364:	e01c      	b.n	800d3a0 <ethernet_link_thread+0x244>
          case ETH_CHIP_STATUS_100MBITS_HALFDUPLEX:
            macConfig.DuplexMode = ETH_HALFDUPLEX_MODE;
 800d366:	2300      	movs	r3, #0
 800d368:	663b      	str	r3, [r7, #96]	@ 0x60
            macConfig.Speed = ETH_SPEED_100M;
 800d36a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800d36e:	65fb      	str	r3, [r7, #92]	@ 0x5c
            cdc_debug_log("LINK_THREAD", "Configuring: 100M Half Duplex");
 800d370:	494f      	ldr	r1, [pc, #316]	@ (800d4b0 <ethernet_link_thread+0x354>)
 800d372:	4842      	ldr	r0, [pc, #264]	@ (800d47c <ethernet_link_thread+0x320>)
 800d374:	f7ff f8f2 	bl	800c55c <cdc_debug_log>
            break;
 800d378:	e012      	b.n	800d3a0 <ethernet_link_thread+0x244>
          case ETH_CHIP_STATUS_10MBITS_FULLDUPLEX:
            macConfig.DuplexMode = ETH_FULLDUPLEX_MODE;
 800d37a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d37e:	663b      	str	r3, [r7, #96]	@ 0x60
            macConfig.Speed = ETH_SPEED_10M;
 800d380:	2300      	movs	r3, #0
 800d382:	65fb      	str	r3, [r7, #92]	@ 0x5c
            cdc_debug_log("LINK_THREAD", "Configuring: 10M Full Duplex");
 800d384:	494b      	ldr	r1, [pc, #300]	@ (800d4b4 <ethernet_link_thread+0x358>)
 800d386:	483d      	ldr	r0, [pc, #244]	@ (800d47c <ethernet_link_thread+0x320>)
 800d388:	f7ff f8e8 	bl	800c55c <cdc_debug_log>
            break;
 800d38c:	e008      	b.n	800d3a0 <ethernet_link_thread+0x244>
          case ETH_CHIP_STATUS_10MBITS_HALFDUPLEX:
            macConfig.DuplexMode = ETH_HALFDUPLEX_MODE;
 800d38e:	2300      	movs	r3, #0
 800d390:	663b      	str	r3, [r7, #96]	@ 0x60
            macConfig.Speed = ETH_SPEED_10M;
 800d392:	2300      	movs	r3, #0
 800d394:	65fb      	str	r3, [r7, #92]	@ 0x5c
            cdc_debug_log("LINK_THREAD", "Configuring: 10M Half Duplex");
 800d396:	4948      	ldr	r1, [pc, #288]	@ (800d4b8 <ethernet_link_thread+0x35c>)
 800d398:	4838      	ldr	r0, [pc, #224]	@ (800d47c <ethernet_link_thread+0x320>)
 800d39a:	f7ff f8df 	bl	800c55c <cdc_debug_log>
            break;
 800d39e:	bf00      	nop
        }
        
        /* Apply the new MAC configuration */
        if (HAL_ETH_SetMACConfig(&heth, &macConfig) != HAL_OK)
 800d3a0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800d3a4:	4619      	mov	r1, r3
 800d3a6:	4840      	ldr	r0, [pc, #256]	@ (800d4a8 <ethernet_link_thread+0x34c>)
 800d3a8:	f7f8 ff3b 	bl	8006222 <HAL_ETH_SetMACConfig>
 800d3ac:	4603      	mov	r3, r0
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d004      	beq.n	800d3bc <ethernet_link_thread+0x260>
        {
          cdc_debug_log("LINK_THREAD", "Failed to set MAC configuration");
 800d3b2:	4942      	ldr	r1, [pc, #264]	@ (800d4bc <ethernet_link_thread+0x360>)
 800d3b4:	4831      	ldr	r0, [pc, #196]	@ (800d47c <ethernet_link_thread+0x320>)
 800d3b6:	f7ff f8d1 	bl	800c55c <cdc_debug_log>
 800d3ba:	e003      	b.n	800d3c4 <ethernet_link_thread+0x268>
        }
        else
        {
          cdc_debug_log("LINK_THREAD", "MAC configuration updated successfully");
 800d3bc:	4940      	ldr	r1, [pc, #256]	@ (800d4c0 <ethernet_link_thread+0x364>)
 800d3be:	482f      	ldr	r0, [pc, #188]	@ (800d47c <ethernet_link_thread+0x320>)
 800d3c0:	f7ff f8cc 	bl	800c55c <cdc_debug_log>
        }
        
        /* Start ETH if not already started */
        if (HAL_ETH_Start_IT(&heth) != HAL_OK)
 800d3c4:	4838      	ldr	r0, [pc, #224]	@ (800d4a8 <ethernet_link_thread+0x34c>)
 800d3c6:	f7f8 f9e9 	bl	800579c <HAL_ETH_Start_IT>
 800d3ca:	4603      	mov	r3, r0
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d004      	beq.n	800d3da <ethernet_link_thread+0x27e>
        {
          cdc_debug_log("LINK_THREAD", "Failed to start ETH");
 800d3d0:	493c      	ldr	r1, [pc, #240]	@ (800d4c4 <ethernet_link_thread+0x368>)
 800d3d2:	482a      	ldr	r0, [pc, #168]	@ (800d47c <ethernet_link_thread+0x320>)
 800d3d4:	f7ff f8c2 	bl	800c55c <cdc_debug_log>
 800d3d8:	e003      	b.n	800d3e2 <ethernet_link_thread+0x286>
        }
        else
        {
          cdc_debug_log("LINK_THREAD", "ETH started successfully");
 800d3da:	493b      	ldr	r1, [pc, #236]	@ (800d4c8 <ethernet_link_thread+0x36c>)
 800d3dc:	4827      	ldr	r0, [pc, #156]	@ (800d47c <ethernet_link_thread+0x320>)
 800d3de:	f7ff f8bd 	bl	800c55c <cdc_debug_log>
        }
        
        /* Notify link up */
        netif_set_link_up(netif);
 800d3e2:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 800d3e6:	f006 fa07 	bl	80137f8 <netif_set_link_up>
        cdc_debug_log("LINK_THREAD", "Network interface link set to UP");
 800d3ea:	4938      	ldr	r1, [pc, #224]	@ (800d4cc <ethernet_link_thread+0x370>)
 800d3ec:	4823      	ldr	r0, [pc, #140]	@ (800d47c <ethernet_link_thread+0x320>)
 800d3ee:	f7ff f8b5 	bl	800c55c <cdc_debug_log>
        linkchanged = 1;
 800d3f2:	2301      	movs	r3, #1
 800d3f4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
      if (linkup && !netif_is_link_up(netif))
 800d3f8:	e099      	b.n	800d52e <ethernet_link_thread+0x3d2>
      }
    }
    else
    {
      /* PHY link is down */
      if (netif_is_link_up(netif))
 800d3fa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800d3fe:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d402:	089b      	lsrs	r3, r3, #2
 800d404:	f003 0301 	and.w	r3, r3, #1
 800d408:	b2db      	uxtb	r3, r3
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d01e      	beq.n	800d44c <ethernet_link_thread+0x2f0>
      {
        cdc_debug_log("LINK_THREAD", "Link DOWN detected - stopping interface");
 800d40e:	4930      	ldr	r1, [pc, #192]	@ (800d4d0 <ethernet_link_thread+0x374>)
 800d410:	481a      	ldr	r0, [pc, #104]	@ (800d47c <ethernet_link_thread+0x320>)
 800d412:	f7ff f8a3 	bl	800c55c <cdc_debug_log>
        
        /* Stop ETH */
        if (HAL_ETH_Stop_IT(&heth) != HAL_OK)
 800d416:	4824      	ldr	r0, [pc, #144]	@ (800d4a8 <ethernet_link_thread+0x34c>)
 800d418:	f7f8 fa30 	bl	800587c <HAL_ETH_Stop_IT>
 800d41c:	4603      	mov	r3, r0
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d004      	beq.n	800d42c <ethernet_link_thread+0x2d0>
        {
          cdc_debug_log("LINK_THREAD", "Failed to stop ETH");
 800d422:	492c      	ldr	r1, [pc, #176]	@ (800d4d4 <ethernet_link_thread+0x378>)
 800d424:	4815      	ldr	r0, [pc, #84]	@ (800d47c <ethernet_link_thread+0x320>)
 800d426:	f7ff f899 	bl	800c55c <cdc_debug_log>
 800d42a:	e003      	b.n	800d434 <ethernet_link_thread+0x2d8>
        }
        else
        {
          cdc_debug_log("LINK_THREAD", "ETH stopped successfully");
 800d42c:	492a      	ldr	r1, [pc, #168]	@ (800d4d8 <ethernet_link_thread+0x37c>)
 800d42e:	4813      	ldr	r0, [pc, #76]	@ (800d47c <ethernet_link_thread+0x320>)
 800d430:	f7ff f894 	bl	800c55c <cdc_debug_log>
        }
        
        /* Notify link down */
        netif_set_link_down(netif);
 800d434:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 800d438:	f006 fa12 	bl	8013860 <netif_set_link_down>
        cdc_debug_log("LINK_THREAD", "Network interface link set to DOWN");
 800d43c:	4927      	ldr	r1, [pc, #156]	@ (800d4dc <ethernet_link_thread+0x380>)
 800d43e:	480f      	ldr	r0, [pc, #60]	@ (800d47c <ethernet_link_thread+0x320>)
 800d440:	f7ff f88c 	bl	800c55c <cdc_debug_log>
        linkchanged = 1;
 800d444:	2301      	movs	r3, #1
 800d446:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800d44a:	e06c      	b.n	800d526 <ethernet_link_thread+0x3ca>
      }
      else if (link_check_counter % 50 == 0)
 800d44c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d450:	4b0b      	ldr	r3, [pc, #44]	@ (800d480 <ethernet_link_thread+0x324>)
 800d452:	fba3 1302 	umull	r1, r3, r3, r2
 800d456:	091b      	lsrs	r3, r3, #4
 800d458:	2132      	movs	r1, #50	@ 0x32
 800d45a:	fb01 f303 	mul.w	r3, r1, r3
 800d45e:	1ad3      	subs	r3, r2, r3
 800d460:	2b00      	cmp	r3, #0
 800d462:	d160      	bne.n	800d526 <ethernet_link_thread+0x3ca>
      {
        if (phy_link_state == ETH_CHIP_STATUS_READ_ERROR)
 800d464:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d468:	f113 0f05 	cmn.w	r3, #5
 800d46c:	d13a      	bne.n	800d4e4 <ethernet_link_thread+0x388>
        {
          cdc_debug_log("LINK_THREAD", "PHY read error detected");
 800d46e:	491c      	ldr	r1, [pc, #112]	@ (800d4e0 <ethernet_link_thread+0x384>)
 800d470:	4802      	ldr	r0, [pc, #8]	@ (800d47c <ethernet_link_thread+0x320>)
 800d472:	f7ff f873 	bl	800c55c <cdc_debug_log>
 800d476:	e056      	b.n	800d526 <ethernet_link_thread+0x3ca>
 800d478:	08020de8 	.word	0x08020de8
 800d47c:	08020e0c 	.word	0x08020e0c
 800d480:	51eb851f 	.word	0x51eb851f
 800d484:	08020e18 	.word	0x08020e18
 800d488:	200054e0 	.word	0x200054e0
 800d48c:	08020e28 	.word	0x08020e28
 800d490:	08020e40 	.word	0x08020e40
 800d494:	08020e58 	.word	0x08020e58
 800d498:	08020e70 	.word	0x08020e70
 800d49c:	08020e88 	.word	0x08020e88
 800d4a0:	08020eb4 	.word	0x08020eb4
 800d4a4:	08020ec8 	.word	0x08020ec8
 800d4a8:	2000551c 	.word	0x2000551c
 800d4ac:	08020ef4 	.word	0x08020ef4
 800d4b0:	08020f14 	.word	0x08020f14
 800d4b4:	08020f34 	.word	0x08020f34
 800d4b8:	08020f54 	.word	0x08020f54
 800d4bc:	08020f74 	.word	0x08020f74
 800d4c0:	08020f94 	.word	0x08020f94
 800d4c4:	08020fbc 	.word	0x08020fbc
 800d4c8:	08020fd0 	.word	0x08020fd0
 800d4cc:	08020fec 	.word	0x08020fec
 800d4d0:	08021010 	.word	0x08021010
 800d4d4:	08021038 	.word	0x08021038
 800d4d8:	0802104c 	.word	0x0802104c
 800d4dc:	08021068 	.word	0x08021068
 800d4e0:	0802108c 	.word	0x0802108c
        }
        else if (phy_link_state == ETH_CHIP_STATUS_LINK_DOWN)
 800d4e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d4e8:	2b01      	cmp	r3, #1
 800d4ea:	d10e      	bne.n	800d50a <ethernet_link_thread+0x3ae>
        {
          cdc_debug_log("LINK_THREAD", "Link is down, restarting auto-negotiation");
 800d4ec:	4926      	ldr	r1, [pc, #152]	@ (800d588 <ethernet_link_thread+0x42c>)
 800d4ee:	4827      	ldr	r0, [pc, #156]	@ (800d58c <ethernet_link_thread+0x430>)
 800d4f0:	f7ff f834 	bl	800c55c <cdc_debug_log>
          /* 尝试重新启动自动协商 */
          if (eth_chip_start_auto_nego(&PHYchip) == ETH_CHIP_STATUS_OK)
 800d4f4:	4826      	ldr	r0, [pc, #152]	@ (800d590 <ethernet_link_thread+0x434>)
 800d4f6:	f7f7 faf8 	bl	8004aea <eth_chip_start_auto_nego>
 800d4fa:	4603      	mov	r3, r0
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d112      	bne.n	800d526 <ethernet_link_thread+0x3ca>
          {
            cdc_debug_log("LINK_THREAD", "Auto-negotiation restarted");
 800d500:	4924      	ldr	r1, [pc, #144]	@ (800d594 <ethernet_link_thread+0x438>)
 800d502:	4822      	ldr	r0, [pc, #136]	@ (800d58c <ethernet_link_thread+0x430>)
 800d504:	f7ff f82a 	bl	800c55c <cdc_debug_log>
 800d508:	e00d      	b.n	800d526 <ethernet_link_thread+0x3ca>
          }
        }
        else
        {
          char state_msg[64];
          snprintf(state_msg, sizeof(state_msg), "Unknown PHY state: %ld", phy_link_state);
 800d50a:	f107 0008 	add.w	r0, r7, #8
 800d50e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d512:	4a21      	ldr	r2, [pc, #132]	@ (800d598 <ethernet_link_thread+0x43c>)
 800d514:	2140      	movs	r1, #64	@ 0x40
 800d516:	f010 fe4b 	bl	801e1b0 <sniprintf>
          cdc_debug_log("LINK_THREAD", state_msg);
 800d51a:	f107 0308 	add.w	r3, r7, #8
 800d51e:	4619      	mov	r1, r3
 800d520:	481a      	ldr	r0, [pc, #104]	@ (800d58c <ethernet_link_thread+0x430>)
 800d522:	f7ff f81b 	bl	800c55c <cdc_debug_log>
        }
      }
      linkup = 0;
 800d526:	2300      	movs	r3, #0
 800d528:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d52c:	e000      	b.n	800d530 <ethernet_link_thread+0x3d4>
      if (linkup && !netif_is_link_up(netif))
 800d52e:	bf00      	nop
    }
    
    /* Reset link change flag */
    if (linkchanged)
 800d530:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800d534:	2b00      	cmp	r3, #0
 800d536:	d00c      	beq.n	800d552 <ethernet_link_thread+0x3f6>
    {
      linkchanged = 0;
 800d538:	2300      	movs	r3, #0
 800d53a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
      /* Debug DMA status after link change */
      cdc_debug_log("LINK_THREAD", "=== DMA Status After Link Change ===");
 800d53e:	4917      	ldr	r1, [pc, #92]	@ (800d59c <ethernet_link_thread+0x440>)
 800d540:	4812      	ldr	r0, [pc, #72]	@ (800d58c <ethernet_link_thread+0x430>)
 800d542:	f7ff f80b 	bl	800c55c <cdc_debug_log>
      debug_eth_dma_registers();
 800d546:	f7ff f8f5 	bl	800c734 <debug_eth_dma_registers>
      cdc_debug_log("LINK_THREAD", "=== DMA Debug Complete ===");
 800d54a:	4915      	ldr	r1, [pc, #84]	@ (800d5a0 <ethernet_link_thread+0x444>)
 800d54c:	480f      	ldr	r0, [pc, #60]	@ (800d58c <ethernet_link_thread+0x430>)
 800d54e:	f7ff f805 	bl	800c55c <cdc_debug_log>
    }
    
    /* Periodic DMA debug every 100 cycles (approximately 10 seconds) */
    if (link_check_counter % 100 == 0)
 800d552:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d556:	4b13      	ldr	r3, [pc, #76]	@ (800d5a4 <ethernet_link_thread+0x448>)
 800d558:	fba3 1302 	umull	r1, r3, r3, r2
 800d55c:	095b      	lsrs	r3, r3, #5
 800d55e:	2164      	movs	r1, #100	@ 0x64
 800d560:	fb01 f303 	mul.w	r3, r1, r3
 800d564:	1ad3      	subs	r3, r2, r3
 800d566:	2b00      	cmp	r3, #0
 800d568:	d109      	bne.n	800d57e <ethernet_link_thread+0x422>
    {
      cdc_debug_log("LINK_THREAD", "=== Periodic DMA Status Check ===");
 800d56a:	490f      	ldr	r1, [pc, #60]	@ (800d5a8 <ethernet_link_thread+0x44c>)
 800d56c:	4807      	ldr	r0, [pc, #28]	@ (800d58c <ethernet_link_thread+0x430>)
 800d56e:	f7fe fff5 	bl	800c55c <cdc_debug_log>
      debug_eth_dma_registers();
 800d572:	f7ff f8df 	bl	800c734 <debug_eth_dma_registers>
      cdc_debug_log("LINK_THREAD", "=== Periodic Debug Complete ===");
 800d576:	490d      	ldr	r1, [pc, #52]	@ (800d5ac <ethernet_link_thread+0x450>)
 800d578:	4804      	ldr	r0, [pc, #16]	@ (800d58c <ethernet_link_thread+0x430>)
 800d57a:	f7fe ffef 	bl	800c55c <cdc_debug_log>
    }
/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800d57e:	2064      	movs	r0, #100	@ 0x64
 800d580:	f002 f90e 	bl	800f7a0 <osDelay>
    link_check_counter++;
 800d584:	e5fe      	b.n	800d184 <ethernet_link_thread+0x28>
 800d586:	bf00      	nop
 800d588:	080210a4 	.word	0x080210a4
 800d58c:	08020e0c 	.word	0x08020e0c
 800d590:	200054e0 	.word	0x200054e0
 800d594:	080210d0 	.word	0x080210d0
 800d598:	080210ec 	.word	0x080210ec
 800d59c:	08021104 	.word	0x08021104
 800d5a0:	0802112c 	.word	0x0802112c
 800d5a4:	51eb851f 	.word	0x51eb851f
 800d5a8:	08021148 	.word	0x08021148
 800d5ac:	0802116c 	.word	0x0802116c

0800d5b0 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	b086      	sub	sp, #24
 800d5b4:	af02      	add	r7, sp, #8
 800d5b6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800d5b8:	4812      	ldr	r0, [pc, #72]	@ (800d604 <HAL_ETH_RxAllocateCallback+0x54>)
 800d5ba:	f005 fe25 	bl	8013208 <memp_malloc_pool>
 800d5be:	60f8      	str	r0, [r7, #12]
  if (p)
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d014      	beq.n	800d5f0 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	f103 0220 	add.w	r2, r3, #32
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	4a0d      	ldr	r2, [pc, #52]	@ (800d608 <HAL_ETH_RxAllocateCallback+0x58>)
 800d5d4:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800d5de:	9201      	str	r2, [sp, #4]
 800d5e0:	9300      	str	r3, [sp, #0]
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	2241      	movs	r2, #65	@ 0x41
 800d5e6:	2100      	movs	r1, #0
 800d5e8:	2000      	movs	r0, #0
 800d5ea:	f006 fb5d 	bl	8013ca8 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800d5ee:	e005      	b.n	800d5fc <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800d5f0:	4b06      	ldr	r3, [pc, #24]	@ (800d60c <HAL_ETH_RxAllocateCallback+0x5c>)
 800d5f2:	2201      	movs	r2, #1
 800d5f4:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	2200      	movs	r2, #0
 800d5fa:	601a      	str	r2, [r3, #0]
}
 800d5fc:	bf00      	nop
 800d5fe:	3710      	adds	r7, #16
 800d600:	46bd      	mov	sp, r7
 800d602:	bd80      	pop	{r7, pc}
 800d604:	08023c84 	.word	0x08023c84
 800d608:	0800cff5 	.word	0x0800cff5
 800d60c:	2000539c 	.word	0x2000539c

0800d610 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800d610:	b480      	push	{r7}
 800d612:	b089      	sub	sp, #36	@ 0x24
 800d614:	af00      	add	r7, sp, #0
 800d616:	60f8      	str	r0, [r7, #12]
 800d618:	60b9      	str	r1, [r7, #8]
 800d61a:	607a      	str	r2, [r7, #4]
 800d61c:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800d622:	68bb      	ldr	r3, [r7, #8]
 800d624:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800d626:	2300      	movs	r3, #0
 800d628:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	3b20      	subs	r3, #32
 800d62e:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800d630:	69fb      	ldr	r3, [r7, #28]
 800d632:	2200      	movs	r2, #0
 800d634:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800d636:	69fb      	ldr	r3, [r7, #28]
 800d638:	2200      	movs	r2, #0
 800d63a:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800d63c:	69fb      	ldr	r3, [r7, #28]
 800d63e:	887a      	ldrh	r2, [r7, #2]
 800d640:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800d642:	69bb      	ldr	r3, [r7, #24]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d103      	bne.n	800d652 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800d64a:	69bb      	ldr	r3, [r7, #24]
 800d64c:	69fa      	ldr	r2, [r7, #28]
 800d64e:	601a      	str	r2, [r3, #0]
 800d650:	e003      	b.n	800d65a <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800d652:	697b      	ldr	r3, [r7, #20]
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	69fa      	ldr	r2, [r7, #28]
 800d658:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800d65a:	697b      	ldr	r3, [r7, #20]
 800d65c:	69fa      	ldr	r2, [r7, #28]
 800d65e:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800d660:	69bb      	ldr	r3, [r7, #24]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	61fb      	str	r3, [r7, #28]
 800d666:	e009      	b.n	800d67c <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800d668:	69fb      	ldr	r3, [r7, #28]
 800d66a:	891a      	ldrh	r2, [r3, #8]
 800d66c:	887b      	ldrh	r3, [r7, #2]
 800d66e:	4413      	add	r3, r2
 800d670:	b29a      	uxth	r2, r3
 800d672:	69fb      	ldr	r3, [r7, #28]
 800d674:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800d676:	69fb      	ldr	r3, [r7, #28]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	61fb      	str	r3, [r7, #28]
 800d67c:	69fb      	ldr	r3, [r7, #28]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d1f2      	bne.n	800d668 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 800d682:	bf00      	nop
 800d684:	bf00      	nop
 800d686:	3724      	adds	r7, #36	@ 0x24
 800d688:	46bd      	mov	sp, r7
 800d68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d68e:	4770      	bx	lr

0800d690 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800d690:	b580      	push	{r7, lr}
 800d692:	b082      	sub	sp, #8
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800d698:	6878      	ldr	r0, [r7, #4]
 800d69a:	f006 fcbf 	bl	801401c <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800d69e:	bf00      	nop
 800d6a0:	3708      	adds	r7, #8
 800d6a2:	46bd      	mov	sp, r7
 800d6a4:	bd80      	pop	{r7, pc}
	...

0800d6a8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d6a8:	b580      	push	{r7, lr}
 800d6aa:	b084      	sub	sp, #16
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	6078      	str	r0, [r7, #4]
 800d6b0:	460b      	mov	r3, r1
 800d6b2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800d6b4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800d6b8:	f010 fb9c 	bl	801ddf4 <USBD_static_malloc>
 800d6bc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d109      	bne.n	800d6d8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	32b0      	adds	r2, #176	@ 0xb0
 800d6ce:	2100      	movs	r1, #0
 800d6d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800d6d4:	2302      	movs	r3, #2
 800d6d6:	e0d4      	b.n	800d882 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800d6d8:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800d6dc:	2100      	movs	r1, #0
 800d6de:	68f8      	ldr	r0, [r7, #12]
 800d6e0:	f010 fe09 	bl	801e2f6 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	32b0      	adds	r2, #176	@ 0xb0
 800d6ee:	68f9      	ldr	r1, [r7, #12]
 800d6f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	32b0      	adds	r2, #176	@ 0xb0
 800d6fe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	7c1b      	ldrb	r3, [r3, #16]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d138      	bne.n	800d782 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800d710:	4b5e      	ldr	r3, [pc, #376]	@ (800d88c <USBD_CDC_Init+0x1e4>)
 800d712:	7819      	ldrb	r1, [r3, #0]
 800d714:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d718:	2202      	movs	r2, #2
 800d71a:	6878      	ldr	r0, [r7, #4]
 800d71c:	f010 fa47 	bl	801dbae <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800d720:	4b5a      	ldr	r3, [pc, #360]	@ (800d88c <USBD_CDC_Init+0x1e4>)
 800d722:	781b      	ldrb	r3, [r3, #0]
 800d724:	f003 020f 	and.w	r2, r3, #15
 800d728:	6879      	ldr	r1, [r7, #4]
 800d72a:	4613      	mov	r3, r2
 800d72c:	009b      	lsls	r3, r3, #2
 800d72e:	4413      	add	r3, r2
 800d730:	009b      	lsls	r3, r3, #2
 800d732:	440b      	add	r3, r1
 800d734:	3323      	adds	r3, #35	@ 0x23
 800d736:	2201      	movs	r2, #1
 800d738:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d73a:	4b55      	ldr	r3, [pc, #340]	@ (800d890 <USBD_CDC_Init+0x1e8>)
 800d73c:	7819      	ldrb	r1, [r3, #0]
 800d73e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d742:	2202      	movs	r2, #2
 800d744:	6878      	ldr	r0, [r7, #4]
 800d746:	f010 fa32 	bl	801dbae <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d74a:	4b51      	ldr	r3, [pc, #324]	@ (800d890 <USBD_CDC_Init+0x1e8>)
 800d74c:	781b      	ldrb	r3, [r3, #0]
 800d74e:	f003 020f 	and.w	r2, r3, #15
 800d752:	6879      	ldr	r1, [r7, #4]
 800d754:	4613      	mov	r3, r2
 800d756:	009b      	lsls	r3, r3, #2
 800d758:	4413      	add	r3, r2
 800d75a:	009b      	lsls	r3, r3, #2
 800d75c:	440b      	add	r3, r1
 800d75e:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800d762:	2201      	movs	r2, #1
 800d764:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800d766:	4b4b      	ldr	r3, [pc, #300]	@ (800d894 <USBD_CDC_Init+0x1ec>)
 800d768:	781b      	ldrb	r3, [r3, #0]
 800d76a:	f003 020f 	and.w	r2, r3, #15
 800d76e:	6879      	ldr	r1, [r7, #4]
 800d770:	4613      	mov	r3, r2
 800d772:	009b      	lsls	r3, r3, #2
 800d774:	4413      	add	r3, r2
 800d776:	009b      	lsls	r3, r3, #2
 800d778:	440b      	add	r3, r1
 800d77a:	331c      	adds	r3, #28
 800d77c:	2210      	movs	r2, #16
 800d77e:	601a      	str	r2, [r3, #0]
 800d780:	e035      	b.n	800d7ee <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800d782:	4b42      	ldr	r3, [pc, #264]	@ (800d88c <USBD_CDC_Init+0x1e4>)
 800d784:	7819      	ldrb	r1, [r3, #0]
 800d786:	2340      	movs	r3, #64	@ 0x40
 800d788:	2202      	movs	r2, #2
 800d78a:	6878      	ldr	r0, [r7, #4]
 800d78c:	f010 fa0f 	bl	801dbae <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800d790:	4b3e      	ldr	r3, [pc, #248]	@ (800d88c <USBD_CDC_Init+0x1e4>)
 800d792:	781b      	ldrb	r3, [r3, #0]
 800d794:	f003 020f 	and.w	r2, r3, #15
 800d798:	6879      	ldr	r1, [r7, #4]
 800d79a:	4613      	mov	r3, r2
 800d79c:	009b      	lsls	r3, r3, #2
 800d79e:	4413      	add	r3, r2
 800d7a0:	009b      	lsls	r3, r3, #2
 800d7a2:	440b      	add	r3, r1
 800d7a4:	3323      	adds	r3, #35	@ 0x23
 800d7a6:	2201      	movs	r2, #1
 800d7a8:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d7aa:	4b39      	ldr	r3, [pc, #228]	@ (800d890 <USBD_CDC_Init+0x1e8>)
 800d7ac:	7819      	ldrb	r1, [r3, #0]
 800d7ae:	2340      	movs	r3, #64	@ 0x40
 800d7b0:	2202      	movs	r2, #2
 800d7b2:	6878      	ldr	r0, [r7, #4]
 800d7b4:	f010 f9fb 	bl	801dbae <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d7b8:	4b35      	ldr	r3, [pc, #212]	@ (800d890 <USBD_CDC_Init+0x1e8>)
 800d7ba:	781b      	ldrb	r3, [r3, #0]
 800d7bc:	f003 020f 	and.w	r2, r3, #15
 800d7c0:	6879      	ldr	r1, [r7, #4]
 800d7c2:	4613      	mov	r3, r2
 800d7c4:	009b      	lsls	r3, r3, #2
 800d7c6:	4413      	add	r3, r2
 800d7c8:	009b      	lsls	r3, r3, #2
 800d7ca:	440b      	add	r3, r1
 800d7cc:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800d7d0:	2201      	movs	r2, #1
 800d7d2:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800d7d4:	4b2f      	ldr	r3, [pc, #188]	@ (800d894 <USBD_CDC_Init+0x1ec>)
 800d7d6:	781b      	ldrb	r3, [r3, #0]
 800d7d8:	f003 020f 	and.w	r2, r3, #15
 800d7dc:	6879      	ldr	r1, [r7, #4]
 800d7de:	4613      	mov	r3, r2
 800d7e0:	009b      	lsls	r3, r3, #2
 800d7e2:	4413      	add	r3, r2
 800d7e4:	009b      	lsls	r3, r3, #2
 800d7e6:	440b      	add	r3, r1
 800d7e8:	331c      	adds	r3, #28
 800d7ea:	2210      	movs	r2, #16
 800d7ec:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d7ee:	4b29      	ldr	r3, [pc, #164]	@ (800d894 <USBD_CDC_Init+0x1ec>)
 800d7f0:	7819      	ldrb	r1, [r3, #0]
 800d7f2:	2308      	movs	r3, #8
 800d7f4:	2203      	movs	r2, #3
 800d7f6:	6878      	ldr	r0, [r7, #4]
 800d7f8:	f010 f9d9 	bl	801dbae <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800d7fc:	4b25      	ldr	r3, [pc, #148]	@ (800d894 <USBD_CDC_Init+0x1ec>)
 800d7fe:	781b      	ldrb	r3, [r3, #0]
 800d800:	f003 020f 	and.w	r2, r3, #15
 800d804:	6879      	ldr	r1, [r7, #4]
 800d806:	4613      	mov	r3, r2
 800d808:	009b      	lsls	r3, r3, #2
 800d80a:	4413      	add	r3, r2
 800d80c:	009b      	lsls	r3, r3, #2
 800d80e:	440b      	add	r3, r1
 800d810:	3323      	adds	r3, #35	@ 0x23
 800d812:	2201      	movs	r2, #1
 800d814:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	2200      	movs	r2, #0
 800d81a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d824:	687a      	ldr	r2, [r7, #4]
 800d826:	33b0      	adds	r3, #176	@ 0xb0
 800d828:	009b      	lsls	r3, r3, #2
 800d82a:	4413      	add	r3, r2
 800d82c:	685b      	ldr	r3, [r3, #4]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	2200      	movs	r2, #0
 800d836:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	2200      	movs	r2, #0
 800d83e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d101      	bne.n	800d850 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800d84c:	2302      	movs	r3, #2
 800d84e:	e018      	b.n	800d882 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	7c1b      	ldrb	r3, [r3, #16]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d10a      	bne.n	800d86e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d858:	4b0d      	ldr	r3, [pc, #52]	@ (800d890 <USBD_CDC_Init+0x1e8>)
 800d85a:	7819      	ldrb	r1, [r3, #0]
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d862:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d866:	6878      	ldr	r0, [r7, #4]
 800d868:	f010 fa90 	bl	801dd8c <USBD_LL_PrepareReceive>
 800d86c:	e008      	b.n	800d880 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d86e:	4b08      	ldr	r3, [pc, #32]	@ (800d890 <USBD_CDC_Init+0x1e8>)
 800d870:	7819      	ldrb	r1, [r3, #0]
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d878:	2340      	movs	r3, #64	@ 0x40
 800d87a:	6878      	ldr	r0, [r7, #4]
 800d87c:	f010 fa86 	bl	801dd8c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d880:	2300      	movs	r3, #0
}
 800d882:	4618      	mov	r0, r3
 800d884:	3710      	adds	r7, #16
 800d886:	46bd      	mov	sp, r7
 800d888:	bd80      	pop	{r7, pc}
 800d88a:	bf00      	nop
 800d88c:	2000009b 	.word	0x2000009b
 800d890:	2000009c 	.word	0x2000009c
 800d894:	2000009d 	.word	0x2000009d

0800d898 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d898:	b580      	push	{r7, lr}
 800d89a:	b082      	sub	sp, #8
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	6078      	str	r0, [r7, #4]
 800d8a0:	460b      	mov	r3, r1
 800d8a2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800d8a4:	4b3a      	ldr	r3, [pc, #232]	@ (800d990 <USBD_CDC_DeInit+0xf8>)
 800d8a6:	781b      	ldrb	r3, [r3, #0]
 800d8a8:	4619      	mov	r1, r3
 800d8aa:	6878      	ldr	r0, [r7, #4]
 800d8ac:	f010 f9a5 	bl	801dbfa <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800d8b0:	4b37      	ldr	r3, [pc, #220]	@ (800d990 <USBD_CDC_DeInit+0xf8>)
 800d8b2:	781b      	ldrb	r3, [r3, #0]
 800d8b4:	f003 020f 	and.w	r2, r3, #15
 800d8b8:	6879      	ldr	r1, [r7, #4]
 800d8ba:	4613      	mov	r3, r2
 800d8bc:	009b      	lsls	r3, r3, #2
 800d8be:	4413      	add	r3, r2
 800d8c0:	009b      	lsls	r3, r3, #2
 800d8c2:	440b      	add	r3, r1
 800d8c4:	3323      	adds	r3, #35	@ 0x23
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800d8ca:	4b32      	ldr	r3, [pc, #200]	@ (800d994 <USBD_CDC_DeInit+0xfc>)
 800d8cc:	781b      	ldrb	r3, [r3, #0]
 800d8ce:	4619      	mov	r1, r3
 800d8d0:	6878      	ldr	r0, [r7, #4]
 800d8d2:	f010 f992 	bl	801dbfa <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800d8d6:	4b2f      	ldr	r3, [pc, #188]	@ (800d994 <USBD_CDC_DeInit+0xfc>)
 800d8d8:	781b      	ldrb	r3, [r3, #0]
 800d8da:	f003 020f 	and.w	r2, r3, #15
 800d8de:	6879      	ldr	r1, [r7, #4]
 800d8e0:	4613      	mov	r3, r2
 800d8e2:	009b      	lsls	r3, r3, #2
 800d8e4:	4413      	add	r3, r2
 800d8e6:	009b      	lsls	r3, r3, #2
 800d8e8:	440b      	add	r3, r1
 800d8ea:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800d8ee:	2200      	movs	r2, #0
 800d8f0:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800d8f2:	4b29      	ldr	r3, [pc, #164]	@ (800d998 <USBD_CDC_DeInit+0x100>)
 800d8f4:	781b      	ldrb	r3, [r3, #0]
 800d8f6:	4619      	mov	r1, r3
 800d8f8:	6878      	ldr	r0, [r7, #4]
 800d8fa:	f010 f97e 	bl	801dbfa <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800d8fe:	4b26      	ldr	r3, [pc, #152]	@ (800d998 <USBD_CDC_DeInit+0x100>)
 800d900:	781b      	ldrb	r3, [r3, #0]
 800d902:	f003 020f 	and.w	r2, r3, #15
 800d906:	6879      	ldr	r1, [r7, #4]
 800d908:	4613      	mov	r3, r2
 800d90a:	009b      	lsls	r3, r3, #2
 800d90c:	4413      	add	r3, r2
 800d90e:	009b      	lsls	r3, r3, #2
 800d910:	440b      	add	r3, r1
 800d912:	3323      	adds	r3, #35	@ 0x23
 800d914:	2200      	movs	r2, #0
 800d916:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800d918:	4b1f      	ldr	r3, [pc, #124]	@ (800d998 <USBD_CDC_DeInit+0x100>)
 800d91a:	781b      	ldrb	r3, [r3, #0]
 800d91c:	f003 020f 	and.w	r2, r3, #15
 800d920:	6879      	ldr	r1, [r7, #4]
 800d922:	4613      	mov	r3, r2
 800d924:	009b      	lsls	r3, r3, #2
 800d926:	4413      	add	r3, r2
 800d928:	009b      	lsls	r3, r3, #2
 800d92a:	440b      	add	r3, r1
 800d92c:	331c      	adds	r3, #28
 800d92e:	2200      	movs	r2, #0
 800d930:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	32b0      	adds	r2, #176	@ 0xb0
 800d93c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d940:	2b00      	cmp	r3, #0
 800d942:	d01f      	beq.n	800d984 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d94a:	687a      	ldr	r2, [r7, #4]
 800d94c:	33b0      	adds	r3, #176	@ 0xb0
 800d94e:	009b      	lsls	r3, r3, #2
 800d950:	4413      	add	r3, r2
 800d952:	685b      	ldr	r3, [r3, #4]
 800d954:	685b      	ldr	r3, [r3, #4]
 800d956:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	32b0      	adds	r2, #176	@ 0xb0
 800d962:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d966:	4618      	mov	r0, r3
 800d968:	f010 fa52 	bl	801de10 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	32b0      	adds	r2, #176	@ 0xb0
 800d976:	2100      	movs	r1, #0
 800d978:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	2200      	movs	r2, #0
 800d980:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d984:	2300      	movs	r3, #0
}
 800d986:	4618      	mov	r0, r3
 800d988:	3708      	adds	r7, #8
 800d98a:	46bd      	mov	sp, r7
 800d98c:	bd80      	pop	{r7, pc}
 800d98e:	bf00      	nop
 800d990:	2000009b 	.word	0x2000009b
 800d994:	2000009c 	.word	0x2000009c
 800d998:	2000009d 	.word	0x2000009d

0800d99c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d99c:	b580      	push	{r7, lr}
 800d99e:	b086      	sub	sp, #24
 800d9a0:	af00      	add	r7, sp, #0
 800d9a2:	6078      	str	r0, [r7, #4]
 800d9a4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	32b0      	adds	r2, #176	@ 0xb0
 800d9b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9b4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800d9b6:	2300      	movs	r3, #0
 800d9b8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800d9ba:	2300      	movs	r3, #0
 800d9bc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800d9be:	2300      	movs	r3, #0
 800d9c0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800d9c2:	693b      	ldr	r3, [r7, #16]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d101      	bne.n	800d9cc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800d9c8:	2303      	movs	r3, #3
 800d9ca:	e0bf      	b.n	800db4c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d9cc:	683b      	ldr	r3, [r7, #0]
 800d9ce:	781b      	ldrb	r3, [r3, #0]
 800d9d0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d050      	beq.n	800da7a <USBD_CDC_Setup+0xde>
 800d9d8:	2b20      	cmp	r3, #32
 800d9da:	f040 80af 	bne.w	800db3c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800d9de:	683b      	ldr	r3, [r7, #0]
 800d9e0:	88db      	ldrh	r3, [r3, #6]
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d03a      	beq.n	800da5c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800d9e6:	683b      	ldr	r3, [r7, #0]
 800d9e8:	781b      	ldrb	r3, [r3, #0]
 800d9ea:	b25b      	sxtb	r3, r3
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	da1b      	bge.n	800da28 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d9f6:	687a      	ldr	r2, [r7, #4]
 800d9f8:	33b0      	adds	r3, #176	@ 0xb0
 800d9fa:	009b      	lsls	r3, r3, #2
 800d9fc:	4413      	add	r3, r2
 800d9fe:	685b      	ldr	r3, [r3, #4]
 800da00:	689b      	ldr	r3, [r3, #8]
 800da02:	683a      	ldr	r2, [r7, #0]
 800da04:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800da06:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800da08:	683a      	ldr	r2, [r7, #0]
 800da0a:	88d2      	ldrh	r2, [r2, #6]
 800da0c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800da0e:	683b      	ldr	r3, [r7, #0]
 800da10:	88db      	ldrh	r3, [r3, #6]
 800da12:	2b07      	cmp	r3, #7
 800da14:	bf28      	it	cs
 800da16:	2307      	movcs	r3, #7
 800da18:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800da1a:	693b      	ldr	r3, [r7, #16]
 800da1c:	89fa      	ldrh	r2, [r7, #14]
 800da1e:	4619      	mov	r1, r3
 800da20:	6878      	ldr	r0, [r7, #4]
 800da22:	f001 fda9 	bl	800f578 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800da26:	e090      	b.n	800db4a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800da28:	683b      	ldr	r3, [r7, #0]
 800da2a:	785a      	ldrb	r2, [r3, #1]
 800da2c:	693b      	ldr	r3, [r7, #16]
 800da2e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800da32:	683b      	ldr	r3, [r7, #0]
 800da34:	88db      	ldrh	r3, [r3, #6]
 800da36:	2b3f      	cmp	r3, #63	@ 0x3f
 800da38:	d803      	bhi.n	800da42 <USBD_CDC_Setup+0xa6>
 800da3a:	683b      	ldr	r3, [r7, #0]
 800da3c:	88db      	ldrh	r3, [r3, #6]
 800da3e:	b2da      	uxtb	r2, r3
 800da40:	e000      	b.n	800da44 <USBD_CDC_Setup+0xa8>
 800da42:	2240      	movs	r2, #64	@ 0x40
 800da44:	693b      	ldr	r3, [r7, #16]
 800da46:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800da4a:	6939      	ldr	r1, [r7, #16]
 800da4c:	693b      	ldr	r3, [r7, #16]
 800da4e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800da52:	461a      	mov	r2, r3
 800da54:	6878      	ldr	r0, [r7, #4]
 800da56:	f001 fdbe 	bl	800f5d6 <USBD_CtlPrepareRx>
      break;
 800da5a:	e076      	b.n	800db4a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800da62:	687a      	ldr	r2, [r7, #4]
 800da64:	33b0      	adds	r3, #176	@ 0xb0
 800da66:	009b      	lsls	r3, r3, #2
 800da68:	4413      	add	r3, r2
 800da6a:	685b      	ldr	r3, [r3, #4]
 800da6c:	689b      	ldr	r3, [r3, #8]
 800da6e:	683a      	ldr	r2, [r7, #0]
 800da70:	7850      	ldrb	r0, [r2, #1]
 800da72:	2200      	movs	r2, #0
 800da74:	6839      	ldr	r1, [r7, #0]
 800da76:	4798      	blx	r3
      break;
 800da78:	e067      	b.n	800db4a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800da7a:	683b      	ldr	r3, [r7, #0]
 800da7c:	785b      	ldrb	r3, [r3, #1]
 800da7e:	2b0b      	cmp	r3, #11
 800da80:	d851      	bhi.n	800db26 <USBD_CDC_Setup+0x18a>
 800da82:	a201      	add	r2, pc, #4	@ (adr r2, 800da88 <USBD_CDC_Setup+0xec>)
 800da84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da88:	0800dab9 	.word	0x0800dab9
 800da8c:	0800db35 	.word	0x0800db35
 800da90:	0800db27 	.word	0x0800db27
 800da94:	0800db27 	.word	0x0800db27
 800da98:	0800db27 	.word	0x0800db27
 800da9c:	0800db27 	.word	0x0800db27
 800daa0:	0800db27 	.word	0x0800db27
 800daa4:	0800db27 	.word	0x0800db27
 800daa8:	0800db27 	.word	0x0800db27
 800daac:	0800db27 	.word	0x0800db27
 800dab0:	0800dae3 	.word	0x0800dae3
 800dab4:	0800db0d 	.word	0x0800db0d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dabe:	b2db      	uxtb	r3, r3
 800dac0:	2b03      	cmp	r3, #3
 800dac2:	d107      	bne.n	800dad4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800dac4:	f107 030a 	add.w	r3, r7, #10
 800dac8:	2202      	movs	r2, #2
 800daca:	4619      	mov	r1, r3
 800dacc:	6878      	ldr	r0, [r7, #4]
 800dace:	f001 fd53 	bl	800f578 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800dad2:	e032      	b.n	800db3a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800dad4:	6839      	ldr	r1, [r7, #0]
 800dad6:	6878      	ldr	r0, [r7, #4]
 800dad8:	f001 fcd1 	bl	800f47e <USBD_CtlError>
            ret = USBD_FAIL;
 800dadc:	2303      	movs	r3, #3
 800dade:	75fb      	strb	r3, [r7, #23]
          break;
 800dae0:	e02b      	b.n	800db3a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dae8:	b2db      	uxtb	r3, r3
 800daea:	2b03      	cmp	r3, #3
 800daec:	d107      	bne.n	800dafe <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800daee:	f107 030d 	add.w	r3, r7, #13
 800daf2:	2201      	movs	r2, #1
 800daf4:	4619      	mov	r1, r3
 800daf6:	6878      	ldr	r0, [r7, #4]
 800daf8:	f001 fd3e 	bl	800f578 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800dafc:	e01d      	b.n	800db3a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800dafe:	6839      	ldr	r1, [r7, #0]
 800db00:	6878      	ldr	r0, [r7, #4]
 800db02:	f001 fcbc 	bl	800f47e <USBD_CtlError>
            ret = USBD_FAIL;
 800db06:	2303      	movs	r3, #3
 800db08:	75fb      	strb	r3, [r7, #23]
          break;
 800db0a:	e016      	b.n	800db3a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800db12:	b2db      	uxtb	r3, r3
 800db14:	2b03      	cmp	r3, #3
 800db16:	d00f      	beq.n	800db38 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800db18:	6839      	ldr	r1, [r7, #0]
 800db1a:	6878      	ldr	r0, [r7, #4]
 800db1c:	f001 fcaf 	bl	800f47e <USBD_CtlError>
            ret = USBD_FAIL;
 800db20:	2303      	movs	r3, #3
 800db22:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800db24:	e008      	b.n	800db38 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800db26:	6839      	ldr	r1, [r7, #0]
 800db28:	6878      	ldr	r0, [r7, #4]
 800db2a:	f001 fca8 	bl	800f47e <USBD_CtlError>
          ret = USBD_FAIL;
 800db2e:	2303      	movs	r3, #3
 800db30:	75fb      	strb	r3, [r7, #23]
          break;
 800db32:	e002      	b.n	800db3a <USBD_CDC_Setup+0x19e>
          break;
 800db34:	bf00      	nop
 800db36:	e008      	b.n	800db4a <USBD_CDC_Setup+0x1ae>
          break;
 800db38:	bf00      	nop
      }
      break;
 800db3a:	e006      	b.n	800db4a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800db3c:	6839      	ldr	r1, [r7, #0]
 800db3e:	6878      	ldr	r0, [r7, #4]
 800db40:	f001 fc9d 	bl	800f47e <USBD_CtlError>
      ret = USBD_FAIL;
 800db44:	2303      	movs	r3, #3
 800db46:	75fb      	strb	r3, [r7, #23]
      break;
 800db48:	bf00      	nop
  }

  return (uint8_t)ret;
 800db4a:	7dfb      	ldrb	r3, [r7, #23]
}
 800db4c:	4618      	mov	r0, r3
 800db4e:	3718      	adds	r7, #24
 800db50:	46bd      	mov	sp, r7
 800db52:	bd80      	pop	{r7, pc}

0800db54 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800db54:	b580      	push	{r7, lr}
 800db56:	b084      	sub	sp, #16
 800db58:	af00      	add	r7, sp, #0
 800db5a:	6078      	str	r0, [r7, #4]
 800db5c:	460b      	mov	r3, r1
 800db5e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800db66:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	32b0      	adds	r2, #176	@ 0xb0
 800db72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db76:	2b00      	cmp	r3, #0
 800db78:	d101      	bne.n	800db7e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800db7a:	2303      	movs	r3, #3
 800db7c:	e065      	b.n	800dc4a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	32b0      	adds	r2, #176	@ 0xb0
 800db88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db8c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800db8e:	78fb      	ldrb	r3, [r7, #3]
 800db90:	f003 020f 	and.w	r2, r3, #15
 800db94:	6879      	ldr	r1, [r7, #4]
 800db96:	4613      	mov	r3, r2
 800db98:	009b      	lsls	r3, r3, #2
 800db9a:	4413      	add	r3, r2
 800db9c:	009b      	lsls	r3, r3, #2
 800db9e:	440b      	add	r3, r1
 800dba0:	3314      	adds	r3, #20
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d02f      	beq.n	800dc08 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800dba8:	78fb      	ldrb	r3, [r7, #3]
 800dbaa:	f003 020f 	and.w	r2, r3, #15
 800dbae:	6879      	ldr	r1, [r7, #4]
 800dbb0:	4613      	mov	r3, r2
 800dbb2:	009b      	lsls	r3, r3, #2
 800dbb4:	4413      	add	r3, r2
 800dbb6:	009b      	lsls	r3, r3, #2
 800dbb8:	440b      	add	r3, r1
 800dbba:	3314      	adds	r3, #20
 800dbbc:	681a      	ldr	r2, [r3, #0]
 800dbbe:	78fb      	ldrb	r3, [r7, #3]
 800dbc0:	f003 010f 	and.w	r1, r3, #15
 800dbc4:	68f8      	ldr	r0, [r7, #12]
 800dbc6:	460b      	mov	r3, r1
 800dbc8:	00db      	lsls	r3, r3, #3
 800dbca:	440b      	add	r3, r1
 800dbcc:	009b      	lsls	r3, r3, #2
 800dbce:	4403      	add	r3, r0
 800dbd0:	331c      	adds	r3, #28
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	fbb2 f1f3 	udiv	r1, r2, r3
 800dbd8:	fb01 f303 	mul.w	r3, r1, r3
 800dbdc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d112      	bne.n	800dc08 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800dbe2:	78fb      	ldrb	r3, [r7, #3]
 800dbe4:	f003 020f 	and.w	r2, r3, #15
 800dbe8:	6879      	ldr	r1, [r7, #4]
 800dbea:	4613      	mov	r3, r2
 800dbec:	009b      	lsls	r3, r3, #2
 800dbee:	4413      	add	r3, r2
 800dbf0:	009b      	lsls	r3, r3, #2
 800dbf2:	440b      	add	r3, r1
 800dbf4:	3314      	adds	r3, #20
 800dbf6:	2200      	movs	r2, #0
 800dbf8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800dbfa:	78f9      	ldrb	r1, [r7, #3]
 800dbfc:	2300      	movs	r3, #0
 800dbfe:	2200      	movs	r2, #0
 800dc00:	6878      	ldr	r0, [r7, #4]
 800dc02:	f010 f8a2 	bl	801dd4a <USBD_LL_Transmit>
 800dc06:	e01f      	b.n	800dc48 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800dc08:	68bb      	ldr	r3, [r7, #8]
 800dc0a:	2200      	movs	r2, #0
 800dc0c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dc16:	687a      	ldr	r2, [r7, #4]
 800dc18:	33b0      	adds	r3, #176	@ 0xb0
 800dc1a:	009b      	lsls	r3, r3, #2
 800dc1c:	4413      	add	r3, r2
 800dc1e:	685b      	ldr	r3, [r3, #4]
 800dc20:	691b      	ldr	r3, [r3, #16]
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d010      	beq.n	800dc48 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dc2c:	687a      	ldr	r2, [r7, #4]
 800dc2e:	33b0      	adds	r3, #176	@ 0xb0
 800dc30:	009b      	lsls	r3, r3, #2
 800dc32:	4413      	add	r3, r2
 800dc34:	685b      	ldr	r3, [r3, #4]
 800dc36:	691b      	ldr	r3, [r3, #16]
 800dc38:	68ba      	ldr	r2, [r7, #8]
 800dc3a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800dc3e:	68ba      	ldr	r2, [r7, #8]
 800dc40:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800dc44:	78fa      	ldrb	r2, [r7, #3]
 800dc46:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800dc48:	2300      	movs	r3, #0
}
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	3710      	adds	r7, #16
 800dc4e:	46bd      	mov	sp, r7
 800dc50:	bd80      	pop	{r7, pc}

0800dc52 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800dc52:	b580      	push	{r7, lr}
 800dc54:	b084      	sub	sp, #16
 800dc56:	af00      	add	r7, sp, #0
 800dc58:	6078      	str	r0, [r7, #4]
 800dc5a:	460b      	mov	r3, r1
 800dc5c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	32b0      	adds	r2, #176	@ 0xb0
 800dc68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc6c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	32b0      	adds	r2, #176	@ 0xb0
 800dc78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d101      	bne.n	800dc84 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800dc80:	2303      	movs	r3, #3
 800dc82:	e01a      	b.n	800dcba <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800dc84:	78fb      	ldrb	r3, [r7, #3]
 800dc86:	4619      	mov	r1, r3
 800dc88:	6878      	ldr	r0, [r7, #4]
 800dc8a:	f010 f8a0 	bl	801ddce <USBD_LL_GetRxDataSize>
 800dc8e:	4602      	mov	r2, r0
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dc9c:	687a      	ldr	r2, [r7, #4]
 800dc9e:	33b0      	adds	r3, #176	@ 0xb0
 800dca0:	009b      	lsls	r3, r3, #2
 800dca2:	4413      	add	r3, r2
 800dca4:	685b      	ldr	r3, [r3, #4]
 800dca6:	68db      	ldr	r3, [r3, #12]
 800dca8:	68fa      	ldr	r2, [r7, #12]
 800dcaa:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800dcae:	68fa      	ldr	r2, [r7, #12]
 800dcb0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800dcb4:	4611      	mov	r1, r2
 800dcb6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800dcb8:	2300      	movs	r3, #0
}
 800dcba:	4618      	mov	r0, r3
 800dcbc:	3710      	adds	r7, #16
 800dcbe:	46bd      	mov	sp, r7
 800dcc0:	bd80      	pop	{r7, pc}

0800dcc2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800dcc2:	b580      	push	{r7, lr}
 800dcc4:	b084      	sub	sp, #16
 800dcc6:	af00      	add	r7, sp, #0
 800dcc8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	32b0      	adds	r2, #176	@ 0xb0
 800dcd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dcd8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d101      	bne.n	800dce4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800dce0:	2303      	movs	r3, #3
 800dce2:	e024      	b.n	800dd2e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dcea:	687a      	ldr	r2, [r7, #4]
 800dcec:	33b0      	adds	r3, #176	@ 0xb0
 800dcee:	009b      	lsls	r3, r3, #2
 800dcf0:	4413      	add	r3, r2
 800dcf2:	685b      	ldr	r3, [r3, #4]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d019      	beq.n	800dd2c <USBD_CDC_EP0_RxReady+0x6a>
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800dcfe:	2bff      	cmp	r3, #255	@ 0xff
 800dd00:	d014      	beq.n	800dd2c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dd08:	687a      	ldr	r2, [r7, #4]
 800dd0a:	33b0      	adds	r3, #176	@ 0xb0
 800dd0c:	009b      	lsls	r3, r3, #2
 800dd0e:	4413      	add	r3, r2
 800dd10:	685b      	ldr	r3, [r3, #4]
 800dd12:	689b      	ldr	r3, [r3, #8]
 800dd14:	68fa      	ldr	r2, [r7, #12]
 800dd16:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800dd1a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800dd1c:	68fa      	ldr	r2, [r7, #12]
 800dd1e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800dd22:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	22ff      	movs	r2, #255	@ 0xff
 800dd28:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800dd2c:	2300      	movs	r3, #0
}
 800dd2e:	4618      	mov	r0, r3
 800dd30:	3710      	adds	r7, #16
 800dd32:	46bd      	mov	sp, r7
 800dd34:	bd80      	pop	{r7, pc}
	...

0800dd38 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800dd38:	b580      	push	{r7, lr}
 800dd3a:	b086      	sub	sp, #24
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800dd40:	2182      	movs	r1, #130	@ 0x82
 800dd42:	4818      	ldr	r0, [pc, #96]	@ (800dda4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800dd44:	f000 fd62 	bl	800e80c <USBD_GetEpDesc>
 800dd48:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800dd4a:	2101      	movs	r1, #1
 800dd4c:	4815      	ldr	r0, [pc, #84]	@ (800dda4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800dd4e:	f000 fd5d 	bl	800e80c <USBD_GetEpDesc>
 800dd52:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800dd54:	2181      	movs	r1, #129	@ 0x81
 800dd56:	4813      	ldr	r0, [pc, #76]	@ (800dda4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800dd58:	f000 fd58 	bl	800e80c <USBD_GetEpDesc>
 800dd5c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800dd5e:	697b      	ldr	r3, [r7, #20]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d002      	beq.n	800dd6a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800dd64:	697b      	ldr	r3, [r7, #20]
 800dd66:	2210      	movs	r2, #16
 800dd68:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800dd6a:	693b      	ldr	r3, [r7, #16]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d006      	beq.n	800dd7e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800dd70:	693b      	ldr	r3, [r7, #16]
 800dd72:	2200      	movs	r2, #0
 800dd74:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800dd78:	711a      	strb	r2, [r3, #4]
 800dd7a:	2200      	movs	r2, #0
 800dd7c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d006      	beq.n	800dd92 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	2200      	movs	r2, #0
 800dd88:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800dd8c:	711a      	strb	r2, [r3, #4]
 800dd8e:	2200      	movs	r2, #0
 800dd90:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	2243      	movs	r2, #67	@ 0x43
 800dd96:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800dd98:	4b02      	ldr	r3, [pc, #8]	@ (800dda4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	3718      	adds	r7, #24
 800dd9e:	46bd      	mov	sp, r7
 800dda0:	bd80      	pop	{r7, pc}
 800dda2:	bf00      	nop
 800dda4:	20000058 	.word	0x20000058

0800dda8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800dda8:	b580      	push	{r7, lr}
 800ddaa:	b086      	sub	sp, #24
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ddb0:	2182      	movs	r1, #130	@ 0x82
 800ddb2:	4818      	ldr	r0, [pc, #96]	@ (800de14 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ddb4:	f000 fd2a 	bl	800e80c <USBD_GetEpDesc>
 800ddb8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ddba:	2101      	movs	r1, #1
 800ddbc:	4815      	ldr	r0, [pc, #84]	@ (800de14 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ddbe:	f000 fd25 	bl	800e80c <USBD_GetEpDesc>
 800ddc2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ddc4:	2181      	movs	r1, #129	@ 0x81
 800ddc6:	4813      	ldr	r0, [pc, #76]	@ (800de14 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ddc8:	f000 fd20 	bl	800e80c <USBD_GetEpDesc>
 800ddcc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ddce:	697b      	ldr	r3, [r7, #20]
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d002      	beq.n	800ddda <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800ddd4:	697b      	ldr	r3, [r7, #20]
 800ddd6:	2210      	movs	r2, #16
 800ddd8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ddda:	693b      	ldr	r3, [r7, #16]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d006      	beq.n	800ddee <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800dde0:	693b      	ldr	r3, [r7, #16]
 800dde2:	2200      	movs	r2, #0
 800dde4:	711a      	strb	r2, [r3, #4]
 800dde6:	2200      	movs	r2, #0
 800dde8:	f042 0202 	orr.w	r2, r2, #2
 800ddec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d006      	beq.n	800de02 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	2200      	movs	r2, #0
 800ddf8:	711a      	strb	r2, [r3, #4]
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	f042 0202 	orr.w	r2, r2, #2
 800de00:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	2243      	movs	r2, #67	@ 0x43
 800de06:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800de08:	4b02      	ldr	r3, [pc, #8]	@ (800de14 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800de0a:	4618      	mov	r0, r3
 800de0c:	3718      	adds	r7, #24
 800de0e:	46bd      	mov	sp, r7
 800de10:	bd80      	pop	{r7, pc}
 800de12:	bf00      	nop
 800de14:	20000058 	.word	0x20000058

0800de18 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800de18:	b580      	push	{r7, lr}
 800de1a:	b086      	sub	sp, #24
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800de20:	2182      	movs	r1, #130	@ 0x82
 800de22:	4818      	ldr	r0, [pc, #96]	@ (800de84 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800de24:	f000 fcf2 	bl	800e80c <USBD_GetEpDesc>
 800de28:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800de2a:	2101      	movs	r1, #1
 800de2c:	4815      	ldr	r0, [pc, #84]	@ (800de84 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800de2e:	f000 fced 	bl	800e80c <USBD_GetEpDesc>
 800de32:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800de34:	2181      	movs	r1, #129	@ 0x81
 800de36:	4813      	ldr	r0, [pc, #76]	@ (800de84 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800de38:	f000 fce8 	bl	800e80c <USBD_GetEpDesc>
 800de3c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800de3e:	697b      	ldr	r3, [r7, #20]
 800de40:	2b00      	cmp	r3, #0
 800de42:	d002      	beq.n	800de4a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800de44:	697b      	ldr	r3, [r7, #20]
 800de46:	2210      	movs	r2, #16
 800de48:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800de4a:	693b      	ldr	r3, [r7, #16]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d006      	beq.n	800de5e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800de50:	693b      	ldr	r3, [r7, #16]
 800de52:	2200      	movs	r2, #0
 800de54:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800de58:	711a      	strb	r2, [r3, #4]
 800de5a:	2200      	movs	r2, #0
 800de5c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	2b00      	cmp	r3, #0
 800de62:	d006      	beq.n	800de72 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	2200      	movs	r2, #0
 800de68:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800de6c:	711a      	strb	r2, [r3, #4]
 800de6e:	2200      	movs	r2, #0
 800de70:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	2243      	movs	r2, #67	@ 0x43
 800de76:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800de78:	4b02      	ldr	r3, [pc, #8]	@ (800de84 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800de7a:	4618      	mov	r0, r3
 800de7c:	3718      	adds	r7, #24
 800de7e:	46bd      	mov	sp, r7
 800de80:	bd80      	pop	{r7, pc}
 800de82:	bf00      	nop
 800de84:	20000058 	.word	0x20000058

0800de88 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800de88:	b480      	push	{r7}
 800de8a:	b083      	sub	sp, #12
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	220a      	movs	r2, #10
 800de94:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800de96:	4b03      	ldr	r3, [pc, #12]	@ (800dea4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800de98:	4618      	mov	r0, r3
 800de9a:	370c      	adds	r7, #12
 800de9c:	46bd      	mov	sp, r7
 800de9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea2:	4770      	bx	lr
 800dea4:	20000014 	.word	0x20000014

0800dea8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800dea8:	b480      	push	{r7}
 800deaa:	b083      	sub	sp, #12
 800deac:	af00      	add	r7, sp, #0
 800deae:	6078      	str	r0, [r7, #4]
 800deb0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800deb2:	683b      	ldr	r3, [r7, #0]
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d101      	bne.n	800debc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800deb8:	2303      	movs	r3, #3
 800deba:	e009      	b.n	800ded0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dec2:	687a      	ldr	r2, [r7, #4]
 800dec4:	33b0      	adds	r3, #176	@ 0xb0
 800dec6:	009b      	lsls	r3, r3, #2
 800dec8:	4413      	add	r3, r2
 800deca:	683a      	ldr	r2, [r7, #0]
 800decc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800dece:	2300      	movs	r3, #0
}
 800ded0:	4618      	mov	r0, r3
 800ded2:	370c      	adds	r7, #12
 800ded4:	46bd      	mov	sp, r7
 800ded6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deda:	4770      	bx	lr

0800dedc <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800dedc:	b480      	push	{r7}
 800dede:	b087      	sub	sp, #28
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	60f8      	str	r0, [r7, #12]
 800dee4:	60b9      	str	r1, [r7, #8]
 800dee6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	32b0      	adds	r2, #176	@ 0xb0
 800def2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800def6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800def8:	697b      	ldr	r3, [r7, #20]
 800defa:	2b00      	cmp	r3, #0
 800defc:	d101      	bne.n	800df02 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800defe:	2303      	movs	r3, #3
 800df00:	e008      	b.n	800df14 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800df02:	697b      	ldr	r3, [r7, #20]
 800df04:	68ba      	ldr	r2, [r7, #8]
 800df06:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800df0a:	697b      	ldr	r3, [r7, #20]
 800df0c:	687a      	ldr	r2, [r7, #4]
 800df0e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800df12:	2300      	movs	r3, #0
}
 800df14:	4618      	mov	r0, r3
 800df16:	371c      	adds	r7, #28
 800df18:	46bd      	mov	sp, r7
 800df1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df1e:	4770      	bx	lr

0800df20 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800df20:	b480      	push	{r7}
 800df22:	b085      	sub	sp, #20
 800df24:	af00      	add	r7, sp, #0
 800df26:	6078      	str	r0, [r7, #4]
 800df28:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	32b0      	adds	r2, #176	@ 0xb0
 800df34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df38:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d101      	bne.n	800df44 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800df40:	2303      	movs	r3, #3
 800df42:	e004      	b.n	800df4e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	683a      	ldr	r2, [r7, #0]
 800df48:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800df4c:	2300      	movs	r3, #0
}
 800df4e:	4618      	mov	r0, r3
 800df50:	3714      	adds	r7, #20
 800df52:	46bd      	mov	sp, r7
 800df54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df58:	4770      	bx	lr
	...

0800df5c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800df5c:	b580      	push	{r7, lr}
 800df5e:	b084      	sub	sp, #16
 800df60:	af00      	add	r7, sp, #0
 800df62:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	32b0      	adds	r2, #176	@ 0xb0
 800df6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df72:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800df74:	2301      	movs	r3, #1
 800df76:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800df78:	68bb      	ldr	r3, [r7, #8]
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d101      	bne.n	800df82 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800df7e:	2303      	movs	r3, #3
 800df80:	e025      	b.n	800dfce <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800df82:	68bb      	ldr	r3, [r7, #8]
 800df84:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d11f      	bne.n	800dfcc <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800df8c:	68bb      	ldr	r3, [r7, #8]
 800df8e:	2201      	movs	r2, #1
 800df90:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800df94:	4b10      	ldr	r3, [pc, #64]	@ (800dfd8 <USBD_CDC_TransmitPacket+0x7c>)
 800df96:	781b      	ldrb	r3, [r3, #0]
 800df98:	f003 020f 	and.w	r2, r3, #15
 800df9c:	68bb      	ldr	r3, [r7, #8]
 800df9e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800dfa2:	6878      	ldr	r0, [r7, #4]
 800dfa4:	4613      	mov	r3, r2
 800dfa6:	009b      	lsls	r3, r3, #2
 800dfa8:	4413      	add	r3, r2
 800dfaa:	009b      	lsls	r3, r3, #2
 800dfac:	4403      	add	r3, r0
 800dfae:	3314      	adds	r3, #20
 800dfb0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800dfb2:	4b09      	ldr	r3, [pc, #36]	@ (800dfd8 <USBD_CDC_TransmitPacket+0x7c>)
 800dfb4:	7819      	ldrb	r1, [r3, #0]
 800dfb6:	68bb      	ldr	r3, [r7, #8]
 800dfb8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800dfbc:	68bb      	ldr	r3, [r7, #8]
 800dfbe:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800dfc2:	6878      	ldr	r0, [r7, #4]
 800dfc4:	f00f fec1 	bl	801dd4a <USBD_LL_Transmit>

    ret = USBD_OK;
 800dfc8:	2300      	movs	r3, #0
 800dfca:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800dfcc:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfce:	4618      	mov	r0, r3
 800dfd0:	3710      	adds	r7, #16
 800dfd2:	46bd      	mov	sp, r7
 800dfd4:	bd80      	pop	{r7, pc}
 800dfd6:	bf00      	nop
 800dfd8:	2000009b 	.word	0x2000009b

0800dfdc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800dfdc:	b580      	push	{r7, lr}
 800dfde:	b084      	sub	sp, #16
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	32b0      	adds	r2, #176	@ 0xb0
 800dfee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dff2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	32b0      	adds	r2, #176	@ 0xb0
 800dffe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e002:	2b00      	cmp	r3, #0
 800e004:	d101      	bne.n	800e00a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800e006:	2303      	movs	r3, #3
 800e008:	e018      	b.n	800e03c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	7c1b      	ldrb	r3, [r3, #16]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d10a      	bne.n	800e028 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e012:	4b0c      	ldr	r3, [pc, #48]	@ (800e044 <USBD_CDC_ReceivePacket+0x68>)
 800e014:	7819      	ldrb	r1, [r3, #0]
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e01c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e020:	6878      	ldr	r0, [r7, #4]
 800e022:	f00f feb3 	bl	801dd8c <USBD_LL_PrepareReceive>
 800e026:	e008      	b.n	800e03a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e028:	4b06      	ldr	r3, [pc, #24]	@ (800e044 <USBD_CDC_ReceivePacket+0x68>)
 800e02a:	7819      	ldrb	r1, [r3, #0]
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e032:	2340      	movs	r3, #64	@ 0x40
 800e034:	6878      	ldr	r0, [r7, #4]
 800e036:	f00f fea9 	bl	801dd8c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e03a:	2300      	movs	r3, #0
}
 800e03c:	4618      	mov	r0, r3
 800e03e:	3710      	adds	r7, #16
 800e040:	46bd      	mov	sp, r7
 800e042:	bd80      	pop	{r7, pc}
 800e044:	2000009c 	.word	0x2000009c

0800e048 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e048:	b580      	push	{r7, lr}
 800e04a:	b086      	sub	sp, #24
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	60f8      	str	r0, [r7, #12]
 800e050:	60b9      	str	r1, [r7, #8]
 800e052:	4613      	mov	r3, r2
 800e054:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d101      	bne.n	800e060 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e05c:	2303      	movs	r3, #3
 800e05e:	e01f      	b.n	800e0a0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	2200      	movs	r2, #0
 800e064:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	2200      	movs	r2, #0
 800e06c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	2200      	movs	r2, #0
 800e074:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e078:	68bb      	ldr	r3, [r7, #8]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d003      	beq.n	800e086 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	68ba      	ldr	r2, [r7, #8]
 800e082:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	2201      	movs	r2, #1
 800e08a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	79fa      	ldrb	r2, [r7, #7]
 800e092:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e094:	68f8      	ldr	r0, [r7, #12]
 800e096:	f00f fd23 	bl	801dae0 <USBD_LL_Init>
 800e09a:	4603      	mov	r3, r0
 800e09c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e09e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e0a0:	4618      	mov	r0, r3
 800e0a2:	3718      	adds	r7, #24
 800e0a4:	46bd      	mov	sp, r7
 800e0a6:	bd80      	pop	{r7, pc}

0800e0a8 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e0a8:	b580      	push	{r7, lr}
 800e0aa:	b084      	sub	sp, #16
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	6078      	str	r0, [r7, #4]
 800e0b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e0b2:	2300      	movs	r3, #0
 800e0b4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e0b6:	683b      	ldr	r3, [r7, #0]
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d101      	bne.n	800e0c0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e0bc:	2303      	movs	r3, #3
 800e0be:	e025      	b.n	800e10c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	683a      	ldr	r2, [r7, #0]
 800e0c4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	32ae      	adds	r2, #174	@ 0xae
 800e0d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d00f      	beq.n	800e0fc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	32ae      	adds	r2, #174	@ 0xae
 800e0e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0ec:	f107 020e 	add.w	r2, r7, #14
 800e0f0:	4610      	mov	r0, r2
 800e0f2:	4798      	blx	r3
 800e0f4:	4602      	mov	r2, r0
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e102:	1c5a      	adds	r2, r3, #1
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800e10a:	2300      	movs	r3, #0
}
 800e10c:	4618      	mov	r0, r3
 800e10e:	3710      	adds	r7, #16
 800e110:	46bd      	mov	sp, r7
 800e112:	bd80      	pop	{r7, pc}

0800e114 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e114:	b580      	push	{r7, lr}
 800e116:	b082      	sub	sp, #8
 800e118:	af00      	add	r7, sp, #0
 800e11a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e11c:	6878      	ldr	r0, [r7, #4]
 800e11e:	f00f fd2b 	bl	801db78 <USBD_LL_Start>
 800e122:	4603      	mov	r3, r0
}
 800e124:	4618      	mov	r0, r3
 800e126:	3708      	adds	r7, #8
 800e128:	46bd      	mov	sp, r7
 800e12a:	bd80      	pop	{r7, pc}

0800e12c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800e12c:	b480      	push	{r7}
 800e12e:	b083      	sub	sp, #12
 800e130:	af00      	add	r7, sp, #0
 800e132:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e134:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800e136:	4618      	mov	r0, r3
 800e138:	370c      	adds	r7, #12
 800e13a:	46bd      	mov	sp, r7
 800e13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e140:	4770      	bx	lr

0800e142 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e142:	b580      	push	{r7, lr}
 800e144:	b084      	sub	sp, #16
 800e146:	af00      	add	r7, sp, #0
 800e148:	6078      	str	r0, [r7, #4]
 800e14a:	460b      	mov	r3, r1
 800e14c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e14e:	2300      	movs	r3, #0
 800e150:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d009      	beq.n	800e170 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	78fa      	ldrb	r2, [r7, #3]
 800e166:	4611      	mov	r1, r2
 800e168:	6878      	ldr	r0, [r7, #4]
 800e16a:	4798      	blx	r3
 800e16c:	4603      	mov	r3, r0
 800e16e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e170:	7bfb      	ldrb	r3, [r7, #15]
}
 800e172:	4618      	mov	r0, r3
 800e174:	3710      	adds	r7, #16
 800e176:	46bd      	mov	sp, r7
 800e178:	bd80      	pop	{r7, pc}

0800e17a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e17a:	b580      	push	{r7, lr}
 800e17c:	b084      	sub	sp, #16
 800e17e:	af00      	add	r7, sp, #0
 800e180:	6078      	str	r0, [r7, #4]
 800e182:	460b      	mov	r3, r1
 800e184:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e186:	2300      	movs	r3, #0
 800e188:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e190:	685b      	ldr	r3, [r3, #4]
 800e192:	78fa      	ldrb	r2, [r7, #3]
 800e194:	4611      	mov	r1, r2
 800e196:	6878      	ldr	r0, [r7, #4]
 800e198:	4798      	blx	r3
 800e19a:	4603      	mov	r3, r0
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d001      	beq.n	800e1a4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800e1a0:	2303      	movs	r3, #3
 800e1a2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e1a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	3710      	adds	r7, #16
 800e1aa:	46bd      	mov	sp, r7
 800e1ac:	bd80      	pop	{r7, pc}

0800e1ae <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e1ae:	b580      	push	{r7, lr}
 800e1b0:	b084      	sub	sp, #16
 800e1b2:	af00      	add	r7, sp, #0
 800e1b4:	6078      	str	r0, [r7, #4]
 800e1b6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e1be:	6839      	ldr	r1, [r7, #0]
 800e1c0:	4618      	mov	r0, r3
 800e1c2:	f001 f922 	bl	800f40a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	2201      	movs	r2, #1
 800e1ca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800e1d4:	461a      	mov	r2, r3
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e1e2:	f003 031f 	and.w	r3, r3, #31
 800e1e6:	2b02      	cmp	r3, #2
 800e1e8:	d01a      	beq.n	800e220 <USBD_LL_SetupStage+0x72>
 800e1ea:	2b02      	cmp	r3, #2
 800e1ec:	d822      	bhi.n	800e234 <USBD_LL_SetupStage+0x86>
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d002      	beq.n	800e1f8 <USBD_LL_SetupStage+0x4a>
 800e1f2:	2b01      	cmp	r3, #1
 800e1f4:	d00a      	beq.n	800e20c <USBD_LL_SetupStage+0x5e>
 800e1f6:	e01d      	b.n	800e234 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e1fe:	4619      	mov	r1, r3
 800e200:	6878      	ldr	r0, [r7, #4]
 800e202:	f000 fb77 	bl	800e8f4 <USBD_StdDevReq>
 800e206:	4603      	mov	r3, r0
 800e208:	73fb      	strb	r3, [r7, #15]
      break;
 800e20a:	e020      	b.n	800e24e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e212:	4619      	mov	r1, r3
 800e214:	6878      	ldr	r0, [r7, #4]
 800e216:	f000 fbdf 	bl	800e9d8 <USBD_StdItfReq>
 800e21a:	4603      	mov	r3, r0
 800e21c:	73fb      	strb	r3, [r7, #15]
      break;
 800e21e:	e016      	b.n	800e24e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e226:	4619      	mov	r1, r3
 800e228:	6878      	ldr	r0, [r7, #4]
 800e22a:	f000 fc41 	bl	800eab0 <USBD_StdEPReq>
 800e22e:	4603      	mov	r3, r0
 800e230:	73fb      	strb	r3, [r7, #15]
      break;
 800e232:	e00c      	b.n	800e24e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e23a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800e23e:	b2db      	uxtb	r3, r3
 800e240:	4619      	mov	r1, r3
 800e242:	6878      	ldr	r0, [r7, #4]
 800e244:	f00f fcf8 	bl	801dc38 <USBD_LL_StallEP>
 800e248:	4603      	mov	r3, r0
 800e24a:	73fb      	strb	r3, [r7, #15]
      break;
 800e24c:	bf00      	nop
  }

  return ret;
 800e24e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e250:	4618      	mov	r0, r3
 800e252:	3710      	adds	r7, #16
 800e254:	46bd      	mov	sp, r7
 800e256:	bd80      	pop	{r7, pc}

0800e258 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e258:	b580      	push	{r7, lr}
 800e25a:	b086      	sub	sp, #24
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	60f8      	str	r0, [r7, #12]
 800e260:	460b      	mov	r3, r1
 800e262:	607a      	str	r2, [r7, #4]
 800e264:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800e266:	2300      	movs	r3, #0
 800e268:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800e26a:	7afb      	ldrb	r3, [r7, #11]
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d177      	bne.n	800e360 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800e276:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800e27e:	2b03      	cmp	r3, #3
 800e280:	f040 80a1 	bne.w	800e3c6 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 800e284:	693b      	ldr	r3, [r7, #16]
 800e286:	685b      	ldr	r3, [r3, #4]
 800e288:	693a      	ldr	r2, [r7, #16]
 800e28a:	8992      	ldrh	r2, [r2, #12]
 800e28c:	4293      	cmp	r3, r2
 800e28e:	d91c      	bls.n	800e2ca <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 800e290:	693b      	ldr	r3, [r7, #16]
 800e292:	685b      	ldr	r3, [r3, #4]
 800e294:	693a      	ldr	r2, [r7, #16]
 800e296:	8992      	ldrh	r2, [r2, #12]
 800e298:	1a9a      	subs	r2, r3, r2
 800e29a:	693b      	ldr	r3, [r7, #16]
 800e29c:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800e29e:	693b      	ldr	r3, [r7, #16]
 800e2a0:	691b      	ldr	r3, [r3, #16]
 800e2a2:	693a      	ldr	r2, [r7, #16]
 800e2a4:	8992      	ldrh	r2, [r2, #12]
 800e2a6:	441a      	add	r2, r3
 800e2a8:	693b      	ldr	r3, [r7, #16]
 800e2aa:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 800e2ac:	693b      	ldr	r3, [r7, #16]
 800e2ae:	6919      	ldr	r1, [r3, #16]
 800e2b0:	693b      	ldr	r3, [r7, #16]
 800e2b2:	899b      	ldrh	r3, [r3, #12]
 800e2b4:	461a      	mov	r2, r3
 800e2b6:	693b      	ldr	r3, [r7, #16]
 800e2b8:	685b      	ldr	r3, [r3, #4]
 800e2ba:	4293      	cmp	r3, r2
 800e2bc:	bf38      	it	cc
 800e2be:	4613      	movcc	r3, r2
 800e2c0:	461a      	mov	r2, r3
 800e2c2:	68f8      	ldr	r0, [r7, #12]
 800e2c4:	f001 f9a8 	bl	800f618 <USBD_CtlContinueRx>
 800e2c8:	e07d      	b.n	800e3c6 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e2d0:	f003 031f 	and.w	r3, r3, #31
 800e2d4:	2b02      	cmp	r3, #2
 800e2d6:	d014      	beq.n	800e302 <USBD_LL_DataOutStage+0xaa>
 800e2d8:	2b02      	cmp	r3, #2
 800e2da:	d81d      	bhi.n	800e318 <USBD_LL_DataOutStage+0xc0>
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d002      	beq.n	800e2e6 <USBD_LL_DataOutStage+0x8e>
 800e2e0:	2b01      	cmp	r3, #1
 800e2e2:	d003      	beq.n	800e2ec <USBD_LL_DataOutStage+0x94>
 800e2e4:	e018      	b.n	800e318 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800e2e6:	2300      	movs	r3, #0
 800e2e8:	75bb      	strb	r3, [r7, #22]
            break;
 800e2ea:	e018      	b.n	800e31e <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800e2f2:	b2db      	uxtb	r3, r3
 800e2f4:	4619      	mov	r1, r3
 800e2f6:	68f8      	ldr	r0, [r7, #12]
 800e2f8:	f000 fa6e 	bl	800e7d8 <USBD_CoreFindIF>
 800e2fc:	4603      	mov	r3, r0
 800e2fe:	75bb      	strb	r3, [r7, #22]
            break;
 800e300:	e00d      	b.n	800e31e <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800e308:	b2db      	uxtb	r3, r3
 800e30a:	4619      	mov	r1, r3
 800e30c:	68f8      	ldr	r0, [r7, #12]
 800e30e:	f000 fa70 	bl	800e7f2 <USBD_CoreFindEP>
 800e312:	4603      	mov	r3, r0
 800e314:	75bb      	strb	r3, [r7, #22]
            break;
 800e316:	e002      	b.n	800e31e <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800e318:	2300      	movs	r3, #0
 800e31a:	75bb      	strb	r3, [r7, #22]
            break;
 800e31c:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800e31e:	7dbb      	ldrb	r3, [r7, #22]
 800e320:	2b00      	cmp	r3, #0
 800e322:	d119      	bne.n	800e358 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e32a:	b2db      	uxtb	r3, r3
 800e32c:	2b03      	cmp	r3, #3
 800e32e:	d113      	bne.n	800e358 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800e330:	7dba      	ldrb	r2, [r7, #22]
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	32ae      	adds	r2, #174	@ 0xae
 800e336:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e33a:	691b      	ldr	r3, [r3, #16]
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d00b      	beq.n	800e358 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 800e340:	7dba      	ldrb	r2, [r7, #22]
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800e348:	7dba      	ldrb	r2, [r7, #22]
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	32ae      	adds	r2, #174	@ 0xae
 800e34e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e352:	691b      	ldr	r3, [r3, #16]
 800e354:	68f8      	ldr	r0, [r7, #12]
 800e356:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800e358:	68f8      	ldr	r0, [r7, #12]
 800e35a:	f001 f96e 	bl	800f63a <USBD_CtlSendStatus>
 800e35e:	e032      	b.n	800e3c6 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800e360:	7afb      	ldrb	r3, [r7, #11]
 800e362:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e366:	b2db      	uxtb	r3, r3
 800e368:	4619      	mov	r1, r3
 800e36a:	68f8      	ldr	r0, [r7, #12]
 800e36c:	f000 fa41 	bl	800e7f2 <USBD_CoreFindEP>
 800e370:	4603      	mov	r3, r0
 800e372:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e374:	7dbb      	ldrb	r3, [r7, #22]
 800e376:	2bff      	cmp	r3, #255	@ 0xff
 800e378:	d025      	beq.n	800e3c6 <USBD_LL_DataOutStage+0x16e>
 800e37a:	7dbb      	ldrb	r3, [r7, #22]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d122      	bne.n	800e3c6 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e386:	b2db      	uxtb	r3, r3
 800e388:	2b03      	cmp	r3, #3
 800e38a:	d117      	bne.n	800e3bc <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800e38c:	7dba      	ldrb	r2, [r7, #22]
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	32ae      	adds	r2, #174	@ 0xae
 800e392:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e396:	699b      	ldr	r3, [r3, #24]
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d00f      	beq.n	800e3bc <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 800e39c:	7dba      	ldrb	r2, [r7, #22]
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800e3a4:	7dba      	ldrb	r2, [r7, #22]
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	32ae      	adds	r2, #174	@ 0xae
 800e3aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e3ae:	699b      	ldr	r3, [r3, #24]
 800e3b0:	7afa      	ldrb	r2, [r7, #11]
 800e3b2:	4611      	mov	r1, r2
 800e3b4:	68f8      	ldr	r0, [r7, #12]
 800e3b6:	4798      	blx	r3
 800e3b8:	4603      	mov	r3, r0
 800e3ba:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800e3bc:	7dfb      	ldrb	r3, [r7, #23]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d001      	beq.n	800e3c6 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800e3c2:	7dfb      	ldrb	r3, [r7, #23]
 800e3c4:	e000      	b.n	800e3c8 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800e3c6:	2300      	movs	r3, #0
}
 800e3c8:	4618      	mov	r0, r3
 800e3ca:	3718      	adds	r7, #24
 800e3cc:	46bd      	mov	sp, r7
 800e3ce:	bd80      	pop	{r7, pc}

0800e3d0 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e3d0:	b580      	push	{r7, lr}
 800e3d2:	b086      	sub	sp, #24
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	60f8      	str	r0, [r7, #12]
 800e3d8:	460b      	mov	r3, r1
 800e3da:	607a      	str	r2, [r7, #4]
 800e3dc:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800e3de:	7afb      	ldrb	r3, [r7, #11]
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d178      	bne.n	800e4d6 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	3314      	adds	r3, #20
 800e3e8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800e3f0:	2b02      	cmp	r3, #2
 800e3f2:	d163      	bne.n	800e4bc <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 800e3f4:	693b      	ldr	r3, [r7, #16]
 800e3f6:	685b      	ldr	r3, [r3, #4]
 800e3f8:	693a      	ldr	r2, [r7, #16]
 800e3fa:	8992      	ldrh	r2, [r2, #12]
 800e3fc:	4293      	cmp	r3, r2
 800e3fe:	d91c      	bls.n	800e43a <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 800e400:	693b      	ldr	r3, [r7, #16]
 800e402:	685b      	ldr	r3, [r3, #4]
 800e404:	693a      	ldr	r2, [r7, #16]
 800e406:	8992      	ldrh	r2, [r2, #12]
 800e408:	1a9a      	subs	r2, r3, r2
 800e40a:	693b      	ldr	r3, [r7, #16]
 800e40c:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800e40e:	693b      	ldr	r3, [r7, #16]
 800e410:	691b      	ldr	r3, [r3, #16]
 800e412:	693a      	ldr	r2, [r7, #16]
 800e414:	8992      	ldrh	r2, [r2, #12]
 800e416:	441a      	add	r2, r3
 800e418:	693b      	ldr	r3, [r7, #16]
 800e41a:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 800e41c:	693b      	ldr	r3, [r7, #16]
 800e41e:	6919      	ldr	r1, [r3, #16]
 800e420:	693b      	ldr	r3, [r7, #16]
 800e422:	685b      	ldr	r3, [r3, #4]
 800e424:	461a      	mov	r2, r3
 800e426:	68f8      	ldr	r0, [r7, #12]
 800e428:	f001 f8c4 	bl	800f5b4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e42c:	2300      	movs	r3, #0
 800e42e:	2200      	movs	r2, #0
 800e430:	2100      	movs	r1, #0
 800e432:	68f8      	ldr	r0, [r7, #12]
 800e434:	f00f fcaa 	bl	801dd8c <USBD_LL_PrepareReceive>
 800e438:	e040      	b.n	800e4bc <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e43a:	693b      	ldr	r3, [r7, #16]
 800e43c:	899b      	ldrh	r3, [r3, #12]
 800e43e:	461a      	mov	r2, r3
 800e440:	693b      	ldr	r3, [r7, #16]
 800e442:	685b      	ldr	r3, [r3, #4]
 800e444:	429a      	cmp	r2, r3
 800e446:	d11c      	bne.n	800e482 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 800e448:	693b      	ldr	r3, [r7, #16]
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	693a      	ldr	r2, [r7, #16]
 800e44e:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800e450:	4293      	cmp	r3, r2
 800e452:	d316      	bcc.n	800e482 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 800e454:	693b      	ldr	r3, [r7, #16]
 800e456:	681a      	ldr	r2, [r3, #0]
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e45e:	429a      	cmp	r2, r3
 800e460:	d20f      	bcs.n	800e482 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e462:	2200      	movs	r2, #0
 800e464:	2100      	movs	r1, #0
 800e466:	68f8      	ldr	r0, [r7, #12]
 800e468:	f001 f8a4 	bl	800f5b4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	2200      	movs	r2, #0
 800e470:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e474:	2300      	movs	r3, #0
 800e476:	2200      	movs	r2, #0
 800e478:	2100      	movs	r1, #0
 800e47a:	68f8      	ldr	r0, [r7, #12]
 800e47c:	f00f fc86 	bl	801dd8c <USBD_LL_PrepareReceive>
 800e480:	e01c      	b.n	800e4bc <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e488:	b2db      	uxtb	r3, r3
 800e48a:	2b03      	cmp	r3, #3
 800e48c:	d10f      	bne.n	800e4ae <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e494:	68db      	ldr	r3, [r3, #12]
 800e496:	2b00      	cmp	r3, #0
 800e498:	d009      	beq.n	800e4ae <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	2200      	movs	r2, #0
 800e49e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e4a8:	68db      	ldr	r3, [r3, #12]
 800e4aa:	68f8      	ldr	r0, [r7, #12]
 800e4ac:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e4ae:	2180      	movs	r1, #128	@ 0x80
 800e4b0:	68f8      	ldr	r0, [r7, #12]
 800e4b2:	f00f fbc1 	bl	801dc38 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800e4b6:	68f8      	ldr	r0, [r7, #12]
 800e4b8:	f001 f8d2 	bl	800f660 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d03a      	beq.n	800e53c <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800e4c6:	68f8      	ldr	r0, [r7, #12]
 800e4c8:	f7ff fe30 	bl	800e12c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	2200      	movs	r2, #0
 800e4d0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800e4d4:	e032      	b.n	800e53c <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800e4d6:	7afb      	ldrb	r3, [r7, #11]
 800e4d8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800e4dc:	b2db      	uxtb	r3, r3
 800e4de:	4619      	mov	r1, r3
 800e4e0:	68f8      	ldr	r0, [r7, #12]
 800e4e2:	f000 f986 	bl	800e7f2 <USBD_CoreFindEP>
 800e4e6:	4603      	mov	r3, r0
 800e4e8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e4ea:	7dfb      	ldrb	r3, [r7, #23]
 800e4ec:	2bff      	cmp	r3, #255	@ 0xff
 800e4ee:	d025      	beq.n	800e53c <USBD_LL_DataInStage+0x16c>
 800e4f0:	7dfb      	ldrb	r3, [r7, #23]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d122      	bne.n	800e53c <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e4fc:	b2db      	uxtb	r3, r3
 800e4fe:	2b03      	cmp	r3, #3
 800e500:	d11c      	bne.n	800e53c <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800e502:	7dfa      	ldrb	r2, [r7, #23]
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	32ae      	adds	r2, #174	@ 0xae
 800e508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e50c:	695b      	ldr	r3, [r3, #20]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d014      	beq.n	800e53c <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800e512:	7dfa      	ldrb	r2, [r7, #23]
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800e51a:	7dfa      	ldrb	r2, [r7, #23]
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	32ae      	adds	r2, #174	@ 0xae
 800e520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e524:	695b      	ldr	r3, [r3, #20]
 800e526:	7afa      	ldrb	r2, [r7, #11]
 800e528:	4611      	mov	r1, r2
 800e52a:	68f8      	ldr	r0, [r7, #12]
 800e52c:	4798      	blx	r3
 800e52e:	4603      	mov	r3, r0
 800e530:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800e532:	7dbb      	ldrb	r3, [r7, #22]
 800e534:	2b00      	cmp	r3, #0
 800e536:	d001      	beq.n	800e53c <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 800e538:	7dbb      	ldrb	r3, [r7, #22]
 800e53a:	e000      	b.n	800e53e <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 800e53c:	2300      	movs	r3, #0
}
 800e53e:	4618      	mov	r0, r3
 800e540:	3718      	adds	r7, #24
 800e542:	46bd      	mov	sp, r7
 800e544:	bd80      	pop	{r7, pc}

0800e546 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800e546:	b580      	push	{r7, lr}
 800e548:	b084      	sub	sp, #16
 800e54a:	af00      	add	r7, sp, #0
 800e54c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800e54e:	2300      	movs	r3, #0
 800e550:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	2201      	movs	r2, #1
 800e556:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	2200      	movs	r2, #0
 800e55e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	2200      	movs	r2, #0
 800e566:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	2200      	movs	r2, #0
 800e56c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	2200      	movs	r2, #0
 800e574:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d014      	beq.n	800e5ac <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e588:	685b      	ldr	r3, [r3, #4]
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d00e      	beq.n	800e5ac <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e594:	685b      	ldr	r3, [r3, #4]
 800e596:	687a      	ldr	r2, [r7, #4]
 800e598:	6852      	ldr	r2, [r2, #4]
 800e59a:	b2d2      	uxtb	r2, r2
 800e59c:	4611      	mov	r1, r2
 800e59e:	6878      	ldr	r0, [r7, #4]
 800e5a0:	4798      	blx	r3
 800e5a2:	4603      	mov	r3, r0
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d001      	beq.n	800e5ac <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800e5a8:	2303      	movs	r3, #3
 800e5aa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e5ac:	2340      	movs	r3, #64	@ 0x40
 800e5ae:	2200      	movs	r2, #0
 800e5b0:	2100      	movs	r1, #0
 800e5b2:	6878      	ldr	r0, [r7, #4]
 800e5b4:	f00f fafb 	bl	801dbae <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	2201      	movs	r2, #1
 800e5bc:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	2240      	movs	r2, #64	@ 0x40
 800e5c4:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e5c8:	2340      	movs	r3, #64	@ 0x40
 800e5ca:	2200      	movs	r2, #0
 800e5cc:	2180      	movs	r1, #128	@ 0x80
 800e5ce:	6878      	ldr	r0, [r7, #4]
 800e5d0:	f00f faed 	bl	801dbae <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	2201      	movs	r2, #1
 800e5d8:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	2240      	movs	r2, #64	@ 0x40
 800e5e0:	841a      	strh	r2, [r3, #32]

  return ret;
 800e5e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	3710      	adds	r7, #16
 800e5e8:	46bd      	mov	sp, r7
 800e5ea:	bd80      	pop	{r7, pc}

0800e5ec <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800e5ec:	b480      	push	{r7}
 800e5ee:	b083      	sub	sp, #12
 800e5f0:	af00      	add	r7, sp, #0
 800e5f2:	6078      	str	r0, [r7, #4]
 800e5f4:	460b      	mov	r3, r1
 800e5f6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	78fa      	ldrb	r2, [r7, #3]
 800e5fc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800e5fe:	2300      	movs	r3, #0
}
 800e600:	4618      	mov	r0, r3
 800e602:	370c      	adds	r7, #12
 800e604:	46bd      	mov	sp, r7
 800e606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e60a:	4770      	bx	lr

0800e60c <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800e60c:	b480      	push	{r7}
 800e60e:	b083      	sub	sp, #12
 800e610:	af00      	add	r7, sp, #0
 800e612:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e61a:	b2db      	uxtb	r3, r3
 800e61c:	2b04      	cmp	r3, #4
 800e61e:	d006      	beq.n	800e62e <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e626:	b2da      	uxtb	r2, r3
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	2204      	movs	r2, #4
 800e632:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800e636:	2300      	movs	r3, #0
}
 800e638:	4618      	mov	r0, r3
 800e63a:	370c      	adds	r7, #12
 800e63c:	46bd      	mov	sp, r7
 800e63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e642:	4770      	bx	lr

0800e644 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800e644:	b480      	push	{r7}
 800e646:	b083      	sub	sp, #12
 800e648:	af00      	add	r7, sp, #0
 800e64a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e652:	b2db      	uxtb	r3, r3
 800e654:	2b04      	cmp	r3, #4
 800e656:	d106      	bne.n	800e666 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800e65e:	b2da      	uxtb	r2, r3
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800e666:	2300      	movs	r3, #0
}
 800e668:	4618      	mov	r0, r3
 800e66a:	370c      	adds	r7, #12
 800e66c:	46bd      	mov	sp, r7
 800e66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e672:	4770      	bx	lr

0800e674 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800e674:	b580      	push	{r7, lr}
 800e676:	b082      	sub	sp, #8
 800e678:	af00      	add	r7, sp, #0
 800e67a:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e682:	b2db      	uxtb	r3, r3
 800e684:	2b03      	cmp	r3, #3
 800e686:	d110      	bne.n	800e6aa <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d00b      	beq.n	800e6aa <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e698:	69db      	ldr	r3, [r3, #28]
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d005      	beq.n	800e6aa <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e6a4:	69db      	ldr	r3, [r3, #28]
 800e6a6:	6878      	ldr	r0, [r7, #4]
 800e6a8:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800e6aa:	2300      	movs	r3, #0
}
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	3708      	adds	r7, #8
 800e6b0:	46bd      	mov	sp, r7
 800e6b2:	bd80      	pop	{r7, pc}

0800e6b4 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b082      	sub	sp, #8
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	6078      	str	r0, [r7, #4]
 800e6bc:	460b      	mov	r3, r1
 800e6be:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	32ae      	adds	r2, #174	@ 0xae
 800e6ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d101      	bne.n	800e6d6 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800e6d2:	2303      	movs	r3, #3
 800e6d4:	e01c      	b.n	800e710 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e6dc:	b2db      	uxtb	r3, r3
 800e6de:	2b03      	cmp	r3, #3
 800e6e0:	d115      	bne.n	800e70e <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	32ae      	adds	r2, #174	@ 0xae
 800e6ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6f0:	6a1b      	ldr	r3, [r3, #32]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d00b      	beq.n	800e70e <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	32ae      	adds	r2, #174	@ 0xae
 800e700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e704:	6a1b      	ldr	r3, [r3, #32]
 800e706:	78fa      	ldrb	r2, [r7, #3]
 800e708:	4611      	mov	r1, r2
 800e70a:	6878      	ldr	r0, [r7, #4]
 800e70c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e70e:	2300      	movs	r3, #0
}
 800e710:	4618      	mov	r0, r3
 800e712:	3708      	adds	r7, #8
 800e714:	46bd      	mov	sp, r7
 800e716:	bd80      	pop	{r7, pc}

0800e718 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800e718:	b580      	push	{r7, lr}
 800e71a:	b082      	sub	sp, #8
 800e71c:	af00      	add	r7, sp, #0
 800e71e:	6078      	str	r0, [r7, #4]
 800e720:	460b      	mov	r3, r1
 800e722:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	32ae      	adds	r2, #174	@ 0xae
 800e72e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e732:	2b00      	cmp	r3, #0
 800e734:	d101      	bne.n	800e73a <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800e736:	2303      	movs	r3, #3
 800e738:	e01c      	b.n	800e774 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e740:	b2db      	uxtb	r3, r3
 800e742:	2b03      	cmp	r3, #3
 800e744:	d115      	bne.n	800e772 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	32ae      	adds	r2, #174	@ 0xae
 800e750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e756:	2b00      	cmp	r3, #0
 800e758:	d00b      	beq.n	800e772 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	32ae      	adds	r2, #174	@ 0xae
 800e764:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e76a:	78fa      	ldrb	r2, [r7, #3]
 800e76c:	4611      	mov	r1, r2
 800e76e:	6878      	ldr	r0, [r7, #4]
 800e770:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e772:	2300      	movs	r3, #0
}
 800e774:	4618      	mov	r0, r3
 800e776:	3708      	adds	r7, #8
 800e778:	46bd      	mov	sp, r7
 800e77a:	bd80      	pop	{r7, pc}

0800e77c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800e77c:	b480      	push	{r7}
 800e77e:	b083      	sub	sp, #12
 800e780:	af00      	add	r7, sp, #0
 800e782:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e784:	2300      	movs	r3, #0
}
 800e786:	4618      	mov	r0, r3
 800e788:	370c      	adds	r7, #12
 800e78a:	46bd      	mov	sp, r7
 800e78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e790:	4770      	bx	lr

0800e792 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800e792:	b580      	push	{r7, lr}
 800e794:	b084      	sub	sp, #16
 800e796:	af00      	add	r7, sp, #0
 800e798:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800e79a:	2300      	movs	r3, #0
 800e79c:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	2201      	movs	r2, #1
 800e7a2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d00e      	beq.n	800e7ce <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e7b6:	685b      	ldr	r3, [r3, #4]
 800e7b8:	687a      	ldr	r2, [r7, #4]
 800e7ba:	6852      	ldr	r2, [r2, #4]
 800e7bc:	b2d2      	uxtb	r2, r2
 800e7be:	4611      	mov	r1, r2
 800e7c0:	6878      	ldr	r0, [r7, #4]
 800e7c2:	4798      	blx	r3
 800e7c4:	4603      	mov	r3, r0
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d001      	beq.n	800e7ce <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800e7ca:	2303      	movs	r3, #3
 800e7cc:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e7ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7d0:	4618      	mov	r0, r3
 800e7d2:	3710      	adds	r7, #16
 800e7d4:	46bd      	mov	sp, r7
 800e7d6:	bd80      	pop	{r7, pc}

0800e7d8 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e7d8:	b480      	push	{r7}
 800e7da:	b083      	sub	sp, #12
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	6078      	str	r0, [r7, #4]
 800e7e0:	460b      	mov	r3, r1
 800e7e2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e7e4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e7e6:	4618      	mov	r0, r3
 800e7e8:	370c      	adds	r7, #12
 800e7ea:	46bd      	mov	sp, r7
 800e7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f0:	4770      	bx	lr

0800e7f2 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e7f2:	b480      	push	{r7}
 800e7f4:	b083      	sub	sp, #12
 800e7f6:	af00      	add	r7, sp, #0
 800e7f8:	6078      	str	r0, [r7, #4]
 800e7fa:	460b      	mov	r3, r1
 800e7fc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e7fe:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e800:	4618      	mov	r0, r3
 800e802:	370c      	adds	r7, #12
 800e804:	46bd      	mov	sp, r7
 800e806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e80a:	4770      	bx	lr

0800e80c <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800e80c:	b580      	push	{r7, lr}
 800e80e:	b086      	sub	sp, #24
 800e810:	af00      	add	r7, sp, #0
 800e812:	6078      	str	r0, [r7, #4]
 800e814:	460b      	mov	r3, r1
 800e816:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800e820:	2300      	movs	r3, #0
 800e822:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	885b      	ldrh	r3, [r3, #2]
 800e828:	b29b      	uxth	r3, r3
 800e82a:	68fa      	ldr	r2, [r7, #12]
 800e82c:	7812      	ldrb	r2, [r2, #0]
 800e82e:	4293      	cmp	r3, r2
 800e830:	d91f      	bls.n	800e872 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	781b      	ldrb	r3, [r3, #0]
 800e836:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800e838:	e013      	b.n	800e862 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800e83a:	f107 030a 	add.w	r3, r7, #10
 800e83e:	4619      	mov	r1, r3
 800e840:	6978      	ldr	r0, [r7, #20]
 800e842:	f000 f81b 	bl	800e87c <USBD_GetNextDesc>
 800e846:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800e848:	697b      	ldr	r3, [r7, #20]
 800e84a:	785b      	ldrb	r3, [r3, #1]
 800e84c:	2b05      	cmp	r3, #5
 800e84e:	d108      	bne.n	800e862 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800e850:	697b      	ldr	r3, [r7, #20]
 800e852:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800e854:	693b      	ldr	r3, [r7, #16]
 800e856:	789b      	ldrb	r3, [r3, #2]
 800e858:	78fa      	ldrb	r2, [r7, #3]
 800e85a:	429a      	cmp	r2, r3
 800e85c:	d008      	beq.n	800e870 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800e85e:	2300      	movs	r3, #0
 800e860:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	885b      	ldrh	r3, [r3, #2]
 800e866:	b29a      	uxth	r2, r3
 800e868:	897b      	ldrh	r3, [r7, #10]
 800e86a:	429a      	cmp	r2, r3
 800e86c:	d8e5      	bhi.n	800e83a <USBD_GetEpDesc+0x2e>
 800e86e:	e000      	b.n	800e872 <USBD_GetEpDesc+0x66>
          break;
 800e870:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800e872:	693b      	ldr	r3, [r7, #16]
}
 800e874:	4618      	mov	r0, r3
 800e876:	3718      	adds	r7, #24
 800e878:	46bd      	mov	sp, r7
 800e87a:	bd80      	pop	{r7, pc}

0800e87c <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800e87c:	b480      	push	{r7}
 800e87e:	b085      	sub	sp, #20
 800e880:	af00      	add	r7, sp, #0
 800e882:	6078      	str	r0, [r7, #4]
 800e884:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800e88a:	683b      	ldr	r3, [r7, #0]
 800e88c:	881b      	ldrh	r3, [r3, #0]
 800e88e:	68fa      	ldr	r2, [r7, #12]
 800e890:	7812      	ldrb	r2, [r2, #0]
 800e892:	4413      	add	r3, r2
 800e894:	b29a      	uxth	r2, r3
 800e896:	683b      	ldr	r3, [r7, #0]
 800e898:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	781b      	ldrb	r3, [r3, #0]
 800e89e:	461a      	mov	r2, r3
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	4413      	add	r3, r2
 800e8a4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800e8a6:	68fb      	ldr	r3, [r7, #12]
}
 800e8a8:	4618      	mov	r0, r3
 800e8aa:	3714      	adds	r7, #20
 800e8ac:	46bd      	mov	sp, r7
 800e8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b2:	4770      	bx	lr

0800e8b4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800e8b4:	b480      	push	{r7}
 800e8b6:	b087      	sub	sp, #28
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800e8c0:	697b      	ldr	r3, [r7, #20]
 800e8c2:	781b      	ldrb	r3, [r3, #0]
 800e8c4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800e8c6:	697b      	ldr	r3, [r7, #20]
 800e8c8:	3301      	adds	r3, #1
 800e8ca:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800e8cc:	697b      	ldr	r3, [r7, #20]
 800e8ce:	781b      	ldrb	r3, [r3, #0]
 800e8d0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e8d2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800e8d6:	021b      	lsls	r3, r3, #8
 800e8d8:	b21a      	sxth	r2, r3
 800e8da:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e8de:	4313      	orrs	r3, r2
 800e8e0:	b21b      	sxth	r3, r3
 800e8e2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800e8e4:	89fb      	ldrh	r3, [r7, #14]
}
 800e8e6:	4618      	mov	r0, r3
 800e8e8:	371c      	adds	r7, #28
 800e8ea:	46bd      	mov	sp, r7
 800e8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f0:	4770      	bx	lr
	...

0800e8f4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e8f4:	b580      	push	{r7, lr}
 800e8f6:	b084      	sub	sp, #16
 800e8f8:	af00      	add	r7, sp, #0
 800e8fa:	6078      	str	r0, [r7, #4]
 800e8fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e8fe:	2300      	movs	r3, #0
 800e900:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e902:	683b      	ldr	r3, [r7, #0]
 800e904:	781b      	ldrb	r3, [r3, #0]
 800e906:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e90a:	2b40      	cmp	r3, #64	@ 0x40
 800e90c:	d005      	beq.n	800e91a <USBD_StdDevReq+0x26>
 800e90e:	2b40      	cmp	r3, #64	@ 0x40
 800e910:	d857      	bhi.n	800e9c2 <USBD_StdDevReq+0xce>
 800e912:	2b00      	cmp	r3, #0
 800e914:	d00f      	beq.n	800e936 <USBD_StdDevReq+0x42>
 800e916:	2b20      	cmp	r3, #32
 800e918:	d153      	bne.n	800e9c2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	32ae      	adds	r2, #174	@ 0xae
 800e924:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e928:	689b      	ldr	r3, [r3, #8]
 800e92a:	6839      	ldr	r1, [r7, #0]
 800e92c:	6878      	ldr	r0, [r7, #4]
 800e92e:	4798      	blx	r3
 800e930:	4603      	mov	r3, r0
 800e932:	73fb      	strb	r3, [r7, #15]
      break;
 800e934:	e04a      	b.n	800e9cc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e936:	683b      	ldr	r3, [r7, #0]
 800e938:	785b      	ldrb	r3, [r3, #1]
 800e93a:	2b09      	cmp	r3, #9
 800e93c:	d83b      	bhi.n	800e9b6 <USBD_StdDevReq+0xc2>
 800e93e:	a201      	add	r2, pc, #4	@ (adr r2, 800e944 <USBD_StdDevReq+0x50>)
 800e940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e944:	0800e999 	.word	0x0800e999
 800e948:	0800e9ad 	.word	0x0800e9ad
 800e94c:	0800e9b7 	.word	0x0800e9b7
 800e950:	0800e9a3 	.word	0x0800e9a3
 800e954:	0800e9b7 	.word	0x0800e9b7
 800e958:	0800e977 	.word	0x0800e977
 800e95c:	0800e96d 	.word	0x0800e96d
 800e960:	0800e9b7 	.word	0x0800e9b7
 800e964:	0800e98f 	.word	0x0800e98f
 800e968:	0800e981 	.word	0x0800e981
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800e96c:	6839      	ldr	r1, [r7, #0]
 800e96e:	6878      	ldr	r0, [r7, #4]
 800e970:	f000 fa3e 	bl	800edf0 <USBD_GetDescriptor>
          break;
 800e974:	e024      	b.n	800e9c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800e976:	6839      	ldr	r1, [r7, #0]
 800e978:	6878      	ldr	r0, [r7, #4]
 800e97a:	f000 fba3 	bl	800f0c4 <USBD_SetAddress>
          break;
 800e97e:	e01f      	b.n	800e9c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800e980:	6839      	ldr	r1, [r7, #0]
 800e982:	6878      	ldr	r0, [r7, #4]
 800e984:	f000 fbe2 	bl	800f14c <USBD_SetConfig>
 800e988:	4603      	mov	r3, r0
 800e98a:	73fb      	strb	r3, [r7, #15]
          break;
 800e98c:	e018      	b.n	800e9c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800e98e:	6839      	ldr	r1, [r7, #0]
 800e990:	6878      	ldr	r0, [r7, #4]
 800e992:	f000 fc85 	bl	800f2a0 <USBD_GetConfig>
          break;
 800e996:	e013      	b.n	800e9c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800e998:	6839      	ldr	r1, [r7, #0]
 800e99a:	6878      	ldr	r0, [r7, #4]
 800e99c:	f000 fcb6 	bl	800f30c <USBD_GetStatus>
          break;
 800e9a0:	e00e      	b.n	800e9c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800e9a2:	6839      	ldr	r1, [r7, #0]
 800e9a4:	6878      	ldr	r0, [r7, #4]
 800e9a6:	f000 fce5 	bl	800f374 <USBD_SetFeature>
          break;
 800e9aa:	e009      	b.n	800e9c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800e9ac:	6839      	ldr	r1, [r7, #0]
 800e9ae:	6878      	ldr	r0, [r7, #4]
 800e9b0:	f000 fd09 	bl	800f3c6 <USBD_ClrFeature>
          break;
 800e9b4:	e004      	b.n	800e9c0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800e9b6:	6839      	ldr	r1, [r7, #0]
 800e9b8:	6878      	ldr	r0, [r7, #4]
 800e9ba:	f000 fd60 	bl	800f47e <USBD_CtlError>
          break;
 800e9be:	bf00      	nop
      }
      break;
 800e9c0:	e004      	b.n	800e9cc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800e9c2:	6839      	ldr	r1, [r7, #0]
 800e9c4:	6878      	ldr	r0, [r7, #4]
 800e9c6:	f000 fd5a 	bl	800f47e <USBD_CtlError>
      break;
 800e9ca:	bf00      	nop
  }

  return ret;
 800e9cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9ce:	4618      	mov	r0, r3
 800e9d0:	3710      	adds	r7, #16
 800e9d2:	46bd      	mov	sp, r7
 800e9d4:	bd80      	pop	{r7, pc}
 800e9d6:	bf00      	nop

0800e9d8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e9d8:	b580      	push	{r7, lr}
 800e9da:	b084      	sub	sp, #16
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	6078      	str	r0, [r7, #4]
 800e9e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e9e2:	2300      	movs	r3, #0
 800e9e4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e9e6:	683b      	ldr	r3, [r7, #0]
 800e9e8:	781b      	ldrb	r3, [r3, #0]
 800e9ea:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e9ee:	2b40      	cmp	r3, #64	@ 0x40
 800e9f0:	d005      	beq.n	800e9fe <USBD_StdItfReq+0x26>
 800e9f2:	2b40      	cmp	r3, #64	@ 0x40
 800e9f4:	d852      	bhi.n	800ea9c <USBD_StdItfReq+0xc4>
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d001      	beq.n	800e9fe <USBD_StdItfReq+0x26>
 800e9fa:	2b20      	cmp	r3, #32
 800e9fc:	d14e      	bne.n	800ea9c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ea04:	b2db      	uxtb	r3, r3
 800ea06:	3b01      	subs	r3, #1
 800ea08:	2b02      	cmp	r3, #2
 800ea0a:	d840      	bhi.n	800ea8e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ea0c:	683b      	ldr	r3, [r7, #0]
 800ea0e:	889b      	ldrh	r3, [r3, #4]
 800ea10:	b2db      	uxtb	r3, r3
 800ea12:	2b01      	cmp	r3, #1
 800ea14:	d836      	bhi.n	800ea84 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ea16:	683b      	ldr	r3, [r7, #0]
 800ea18:	889b      	ldrh	r3, [r3, #4]
 800ea1a:	b2db      	uxtb	r3, r3
 800ea1c:	4619      	mov	r1, r3
 800ea1e:	6878      	ldr	r0, [r7, #4]
 800ea20:	f7ff feda 	bl	800e7d8 <USBD_CoreFindIF>
 800ea24:	4603      	mov	r3, r0
 800ea26:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ea28:	7bbb      	ldrb	r3, [r7, #14]
 800ea2a:	2bff      	cmp	r3, #255	@ 0xff
 800ea2c:	d01d      	beq.n	800ea6a <USBD_StdItfReq+0x92>
 800ea2e:	7bbb      	ldrb	r3, [r7, #14]
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d11a      	bne.n	800ea6a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800ea34:	7bba      	ldrb	r2, [r7, #14]
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	32ae      	adds	r2, #174	@ 0xae
 800ea3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea3e:	689b      	ldr	r3, [r3, #8]
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d00f      	beq.n	800ea64 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800ea44:	7bba      	ldrb	r2, [r7, #14]
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ea4c:	7bba      	ldrb	r2, [r7, #14]
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	32ae      	adds	r2, #174	@ 0xae
 800ea52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea56:	689b      	ldr	r3, [r3, #8]
 800ea58:	6839      	ldr	r1, [r7, #0]
 800ea5a:	6878      	ldr	r0, [r7, #4]
 800ea5c:	4798      	blx	r3
 800ea5e:	4603      	mov	r3, r0
 800ea60:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ea62:	e004      	b.n	800ea6e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800ea64:	2303      	movs	r3, #3
 800ea66:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ea68:	e001      	b.n	800ea6e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800ea6a:	2303      	movs	r3, #3
 800ea6c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ea6e:	683b      	ldr	r3, [r7, #0]
 800ea70:	88db      	ldrh	r3, [r3, #6]
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d110      	bne.n	800ea98 <USBD_StdItfReq+0xc0>
 800ea76:	7bfb      	ldrb	r3, [r7, #15]
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d10d      	bne.n	800ea98 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ea7c:	6878      	ldr	r0, [r7, #4]
 800ea7e:	f000 fddc 	bl	800f63a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ea82:	e009      	b.n	800ea98 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800ea84:	6839      	ldr	r1, [r7, #0]
 800ea86:	6878      	ldr	r0, [r7, #4]
 800ea88:	f000 fcf9 	bl	800f47e <USBD_CtlError>
          break;
 800ea8c:	e004      	b.n	800ea98 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800ea8e:	6839      	ldr	r1, [r7, #0]
 800ea90:	6878      	ldr	r0, [r7, #4]
 800ea92:	f000 fcf4 	bl	800f47e <USBD_CtlError>
          break;
 800ea96:	e000      	b.n	800ea9a <USBD_StdItfReq+0xc2>
          break;
 800ea98:	bf00      	nop
      }
      break;
 800ea9a:	e004      	b.n	800eaa6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800ea9c:	6839      	ldr	r1, [r7, #0]
 800ea9e:	6878      	ldr	r0, [r7, #4]
 800eaa0:	f000 fced 	bl	800f47e <USBD_CtlError>
      break;
 800eaa4:	bf00      	nop
  }

  return ret;
 800eaa6:	7bfb      	ldrb	r3, [r7, #15]
}
 800eaa8:	4618      	mov	r0, r3
 800eaaa:	3710      	adds	r7, #16
 800eaac:	46bd      	mov	sp, r7
 800eaae:	bd80      	pop	{r7, pc}

0800eab0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eab0:	b580      	push	{r7, lr}
 800eab2:	b084      	sub	sp, #16
 800eab4:	af00      	add	r7, sp, #0
 800eab6:	6078      	str	r0, [r7, #4]
 800eab8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800eaba:	2300      	movs	r3, #0
 800eabc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800eabe:	683b      	ldr	r3, [r7, #0]
 800eac0:	889b      	ldrh	r3, [r3, #4]
 800eac2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800eac4:	683b      	ldr	r3, [r7, #0]
 800eac6:	781b      	ldrb	r3, [r3, #0]
 800eac8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800eacc:	2b40      	cmp	r3, #64	@ 0x40
 800eace:	d007      	beq.n	800eae0 <USBD_StdEPReq+0x30>
 800ead0:	2b40      	cmp	r3, #64	@ 0x40
 800ead2:	f200 8181 	bhi.w	800edd8 <USBD_StdEPReq+0x328>
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d02a      	beq.n	800eb30 <USBD_StdEPReq+0x80>
 800eada:	2b20      	cmp	r3, #32
 800eadc:	f040 817c 	bne.w	800edd8 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800eae0:	7bbb      	ldrb	r3, [r7, #14]
 800eae2:	4619      	mov	r1, r3
 800eae4:	6878      	ldr	r0, [r7, #4]
 800eae6:	f7ff fe84 	bl	800e7f2 <USBD_CoreFindEP>
 800eaea:	4603      	mov	r3, r0
 800eaec:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800eaee:	7b7b      	ldrb	r3, [r7, #13]
 800eaf0:	2bff      	cmp	r3, #255	@ 0xff
 800eaf2:	f000 8176 	beq.w	800ede2 <USBD_StdEPReq+0x332>
 800eaf6:	7b7b      	ldrb	r3, [r7, #13]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	f040 8172 	bne.w	800ede2 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 800eafe:	7b7a      	ldrb	r2, [r7, #13]
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800eb06:	7b7a      	ldrb	r2, [r7, #13]
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	32ae      	adds	r2, #174	@ 0xae
 800eb0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb10:	689b      	ldr	r3, [r3, #8]
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	f000 8165 	beq.w	800ede2 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800eb18:	7b7a      	ldrb	r2, [r7, #13]
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	32ae      	adds	r2, #174	@ 0xae
 800eb1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb22:	689b      	ldr	r3, [r3, #8]
 800eb24:	6839      	ldr	r1, [r7, #0]
 800eb26:	6878      	ldr	r0, [r7, #4]
 800eb28:	4798      	blx	r3
 800eb2a:	4603      	mov	r3, r0
 800eb2c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800eb2e:	e158      	b.n	800ede2 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800eb30:	683b      	ldr	r3, [r7, #0]
 800eb32:	785b      	ldrb	r3, [r3, #1]
 800eb34:	2b03      	cmp	r3, #3
 800eb36:	d008      	beq.n	800eb4a <USBD_StdEPReq+0x9a>
 800eb38:	2b03      	cmp	r3, #3
 800eb3a:	f300 8147 	bgt.w	800edcc <USBD_StdEPReq+0x31c>
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	f000 809b 	beq.w	800ec7a <USBD_StdEPReq+0x1ca>
 800eb44:	2b01      	cmp	r3, #1
 800eb46:	d03c      	beq.n	800ebc2 <USBD_StdEPReq+0x112>
 800eb48:	e140      	b.n	800edcc <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eb50:	b2db      	uxtb	r3, r3
 800eb52:	2b02      	cmp	r3, #2
 800eb54:	d002      	beq.n	800eb5c <USBD_StdEPReq+0xac>
 800eb56:	2b03      	cmp	r3, #3
 800eb58:	d016      	beq.n	800eb88 <USBD_StdEPReq+0xd8>
 800eb5a:	e02c      	b.n	800ebb6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800eb5c:	7bbb      	ldrb	r3, [r7, #14]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d00d      	beq.n	800eb7e <USBD_StdEPReq+0xce>
 800eb62:	7bbb      	ldrb	r3, [r7, #14]
 800eb64:	2b80      	cmp	r3, #128	@ 0x80
 800eb66:	d00a      	beq.n	800eb7e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800eb68:	7bbb      	ldrb	r3, [r7, #14]
 800eb6a:	4619      	mov	r1, r3
 800eb6c:	6878      	ldr	r0, [r7, #4]
 800eb6e:	f00f f863 	bl	801dc38 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800eb72:	2180      	movs	r1, #128	@ 0x80
 800eb74:	6878      	ldr	r0, [r7, #4]
 800eb76:	f00f f85f 	bl	801dc38 <USBD_LL_StallEP>
 800eb7a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800eb7c:	e020      	b.n	800ebc0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800eb7e:	6839      	ldr	r1, [r7, #0]
 800eb80:	6878      	ldr	r0, [r7, #4]
 800eb82:	f000 fc7c 	bl	800f47e <USBD_CtlError>
              break;
 800eb86:	e01b      	b.n	800ebc0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800eb88:	683b      	ldr	r3, [r7, #0]
 800eb8a:	885b      	ldrh	r3, [r3, #2]
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d10e      	bne.n	800ebae <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800eb90:	7bbb      	ldrb	r3, [r7, #14]
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d00b      	beq.n	800ebae <USBD_StdEPReq+0xfe>
 800eb96:	7bbb      	ldrb	r3, [r7, #14]
 800eb98:	2b80      	cmp	r3, #128	@ 0x80
 800eb9a:	d008      	beq.n	800ebae <USBD_StdEPReq+0xfe>
 800eb9c:	683b      	ldr	r3, [r7, #0]
 800eb9e:	88db      	ldrh	r3, [r3, #6]
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d104      	bne.n	800ebae <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800eba4:	7bbb      	ldrb	r3, [r7, #14]
 800eba6:	4619      	mov	r1, r3
 800eba8:	6878      	ldr	r0, [r7, #4]
 800ebaa:	f00f f845 	bl	801dc38 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ebae:	6878      	ldr	r0, [r7, #4]
 800ebb0:	f000 fd43 	bl	800f63a <USBD_CtlSendStatus>

              break;
 800ebb4:	e004      	b.n	800ebc0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800ebb6:	6839      	ldr	r1, [r7, #0]
 800ebb8:	6878      	ldr	r0, [r7, #4]
 800ebba:	f000 fc60 	bl	800f47e <USBD_CtlError>
              break;
 800ebbe:	bf00      	nop
          }
          break;
 800ebc0:	e109      	b.n	800edd6 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ebc8:	b2db      	uxtb	r3, r3
 800ebca:	2b02      	cmp	r3, #2
 800ebcc:	d002      	beq.n	800ebd4 <USBD_StdEPReq+0x124>
 800ebce:	2b03      	cmp	r3, #3
 800ebd0:	d016      	beq.n	800ec00 <USBD_StdEPReq+0x150>
 800ebd2:	e04b      	b.n	800ec6c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ebd4:	7bbb      	ldrb	r3, [r7, #14]
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d00d      	beq.n	800ebf6 <USBD_StdEPReq+0x146>
 800ebda:	7bbb      	ldrb	r3, [r7, #14]
 800ebdc:	2b80      	cmp	r3, #128	@ 0x80
 800ebde:	d00a      	beq.n	800ebf6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ebe0:	7bbb      	ldrb	r3, [r7, #14]
 800ebe2:	4619      	mov	r1, r3
 800ebe4:	6878      	ldr	r0, [r7, #4]
 800ebe6:	f00f f827 	bl	801dc38 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ebea:	2180      	movs	r1, #128	@ 0x80
 800ebec:	6878      	ldr	r0, [r7, #4]
 800ebee:	f00f f823 	bl	801dc38 <USBD_LL_StallEP>
 800ebf2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ebf4:	e040      	b.n	800ec78 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ebf6:	6839      	ldr	r1, [r7, #0]
 800ebf8:	6878      	ldr	r0, [r7, #4]
 800ebfa:	f000 fc40 	bl	800f47e <USBD_CtlError>
              break;
 800ebfe:	e03b      	b.n	800ec78 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ec00:	683b      	ldr	r3, [r7, #0]
 800ec02:	885b      	ldrh	r3, [r3, #2]
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d136      	bne.n	800ec76 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ec08:	7bbb      	ldrb	r3, [r7, #14]
 800ec0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d004      	beq.n	800ec1c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ec12:	7bbb      	ldrb	r3, [r7, #14]
 800ec14:	4619      	mov	r1, r3
 800ec16:	6878      	ldr	r0, [r7, #4]
 800ec18:	f00f f82d 	bl	801dc76 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ec1c:	6878      	ldr	r0, [r7, #4]
 800ec1e:	f000 fd0c 	bl	800f63a <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800ec22:	7bbb      	ldrb	r3, [r7, #14]
 800ec24:	4619      	mov	r1, r3
 800ec26:	6878      	ldr	r0, [r7, #4]
 800ec28:	f7ff fde3 	bl	800e7f2 <USBD_CoreFindEP>
 800ec2c:	4603      	mov	r3, r0
 800ec2e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ec30:	7b7b      	ldrb	r3, [r7, #13]
 800ec32:	2bff      	cmp	r3, #255	@ 0xff
 800ec34:	d01f      	beq.n	800ec76 <USBD_StdEPReq+0x1c6>
 800ec36:	7b7b      	ldrb	r3, [r7, #13]
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d11c      	bne.n	800ec76 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800ec3c:	7b7a      	ldrb	r2, [r7, #13]
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800ec44:	7b7a      	ldrb	r2, [r7, #13]
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	32ae      	adds	r2, #174	@ 0xae
 800ec4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec4e:	689b      	ldr	r3, [r3, #8]
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d010      	beq.n	800ec76 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ec54:	7b7a      	ldrb	r2, [r7, #13]
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	32ae      	adds	r2, #174	@ 0xae
 800ec5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec5e:	689b      	ldr	r3, [r3, #8]
 800ec60:	6839      	ldr	r1, [r7, #0]
 800ec62:	6878      	ldr	r0, [r7, #4]
 800ec64:	4798      	blx	r3
 800ec66:	4603      	mov	r3, r0
 800ec68:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800ec6a:	e004      	b.n	800ec76 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800ec6c:	6839      	ldr	r1, [r7, #0]
 800ec6e:	6878      	ldr	r0, [r7, #4]
 800ec70:	f000 fc05 	bl	800f47e <USBD_CtlError>
              break;
 800ec74:	e000      	b.n	800ec78 <USBD_StdEPReq+0x1c8>
              break;
 800ec76:	bf00      	nop
          }
          break;
 800ec78:	e0ad      	b.n	800edd6 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ec80:	b2db      	uxtb	r3, r3
 800ec82:	2b02      	cmp	r3, #2
 800ec84:	d002      	beq.n	800ec8c <USBD_StdEPReq+0x1dc>
 800ec86:	2b03      	cmp	r3, #3
 800ec88:	d033      	beq.n	800ecf2 <USBD_StdEPReq+0x242>
 800ec8a:	e099      	b.n	800edc0 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ec8c:	7bbb      	ldrb	r3, [r7, #14]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d007      	beq.n	800eca2 <USBD_StdEPReq+0x1f2>
 800ec92:	7bbb      	ldrb	r3, [r7, #14]
 800ec94:	2b80      	cmp	r3, #128	@ 0x80
 800ec96:	d004      	beq.n	800eca2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800ec98:	6839      	ldr	r1, [r7, #0]
 800ec9a:	6878      	ldr	r0, [r7, #4]
 800ec9c:	f000 fbef 	bl	800f47e <USBD_CtlError>
                break;
 800eca0:	e093      	b.n	800edca <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800eca2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	da0b      	bge.n	800ecc2 <USBD_StdEPReq+0x212>
 800ecaa:	7bbb      	ldrb	r3, [r7, #14]
 800ecac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ecb0:	4613      	mov	r3, r2
 800ecb2:	009b      	lsls	r3, r3, #2
 800ecb4:	4413      	add	r3, r2
 800ecb6:	009b      	lsls	r3, r3, #2
 800ecb8:	3310      	adds	r3, #16
 800ecba:	687a      	ldr	r2, [r7, #4]
 800ecbc:	4413      	add	r3, r2
 800ecbe:	3304      	adds	r3, #4
 800ecc0:	e00b      	b.n	800ecda <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ecc2:	7bbb      	ldrb	r3, [r7, #14]
 800ecc4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ecc8:	4613      	mov	r3, r2
 800ecca:	009b      	lsls	r3, r3, #2
 800eccc:	4413      	add	r3, r2
 800ecce:	009b      	lsls	r3, r3, #2
 800ecd0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ecd4:	687a      	ldr	r2, [r7, #4]
 800ecd6:	4413      	add	r3, r2
 800ecd8:	3304      	adds	r3, #4
 800ecda:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ecdc:	68bb      	ldr	r3, [r7, #8]
 800ecde:	2200      	movs	r2, #0
 800ece0:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ece2:	68bb      	ldr	r3, [r7, #8]
 800ece4:	330e      	adds	r3, #14
 800ece6:	2202      	movs	r2, #2
 800ece8:	4619      	mov	r1, r3
 800ecea:	6878      	ldr	r0, [r7, #4]
 800ecec:	f000 fc44 	bl	800f578 <USBD_CtlSendData>
              break;
 800ecf0:	e06b      	b.n	800edca <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ecf2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	da11      	bge.n	800ed1e <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ecfa:	7bbb      	ldrb	r3, [r7, #14]
 800ecfc:	f003 020f 	and.w	r2, r3, #15
 800ed00:	6879      	ldr	r1, [r7, #4]
 800ed02:	4613      	mov	r3, r2
 800ed04:	009b      	lsls	r3, r3, #2
 800ed06:	4413      	add	r3, r2
 800ed08:	009b      	lsls	r3, r3, #2
 800ed0a:	440b      	add	r3, r1
 800ed0c:	3323      	adds	r3, #35	@ 0x23
 800ed0e:	781b      	ldrb	r3, [r3, #0]
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d117      	bne.n	800ed44 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800ed14:	6839      	ldr	r1, [r7, #0]
 800ed16:	6878      	ldr	r0, [r7, #4]
 800ed18:	f000 fbb1 	bl	800f47e <USBD_CtlError>
                  break;
 800ed1c:	e055      	b.n	800edca <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ed1e:	7bbb      	ldrb	r3, [r7, #14]
 800ed20:	f003 020f 	and.w	r2, r3, #15
 800ed24:	6879      	ldr	r1, [r7, #4]
 800ed26:	4613      	mov	r3, r2
 800ed28:	009b      	lsls	r3, r3, #2
 800ed2a:	4413      	add	r3, r2
 800ed2c:	009b      	lsls	r3, r3, #2
 800ed2e:	440b      	add	r3, r1
 800ed30:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800ed34:	781b      	ldrb	r3, [r3, #0]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d104      	bne.n	800ed44 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800ed3a:	6839      	ldr	r1, [r7, #0]
 800ed3c:	6878      	ldr	r0, [r7, #4]
 800ed3e:	f000 fb9e 	bl	800f47e <USBD_CtlError>
                  break;
 800ed42:	e042      	b.n	800edca <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ed44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	da0b      	bge.n	800ed64 <USBD_StdEPReq+0x2b4>
 800ed4c:	7bbb      	ldrb	r3, [r7, #14]
 800ed4e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ed52:	4613      	mov	r3, r2
 800ed54:	009b      	lsls	r3, r3, #2
 800ed56:	4413      	add	r3, r2
 800ed58:	009b      	lsls	r3, r3, #2
 800ed5a:	3310      	adds	r3, #16
 800ed5c:	687a      	ldr	r2, [r7, #4]
 800ed5e:	4413      	add	r3, r2
 800ed60:	3304      	adds	r3, #4
 800ed62:	e00b      	b.n	800ed7c <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ed64:	7bbb      	ldrb	r3, [r7, #14]
 800ed66:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ed6a:	4613      	mov	r3, r2
 800ed6c:	009b      	lsls	r3, r3, #2
 800ed6e:	4413      	add	r3, r2
 800ed70:	009b      	lsls	r3, r3, #2
 800ed72:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ed76:	687a      	ldr	r2, [r7, #4]
 800ed78:	4413      	add	r3, r2
 800ed7a:	3304      	adds	r3, #4
 800ed7c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ed7e:	7bbb      	ldrb	r3, [r7, #14]
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d002      	beq.n	800ed8a <USBD_StdEPReq+0x2da>
 800ed84:	7bbb      	ldrb	r3, [r7, #14]
 800ed86:	2b80      	cmp	r3, #128	@ 0x80
 800ed88:	d103      	bne.n	800ed92 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800ed8a:	68bb      	ldr	r3, [r7, #8]
 800ed8c:	2200      	movs	r2, #0
 800ed8e:	739a      	strb	r2, [r3, #14]
 800ed90:	e00e      	b.n	800edb0 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ed92:	7bbb      	ldrb	r3, [r7, #14]
 800ed94:	4619      	mov	r1, r3
 800ed96:	6878      	ldr	r0, [r7, #4]
 800ed98:	f00e ff8c 	bl	801dcb4 <USBD_LL_IsStallEP>
 800ed9c:	4603      	mov	r3, r0
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d003      	beq.n	800edaa <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800eda2:	68bb      	ldr	r3, [r7, #8]
 800eda4:	2201      	movs	r2, #1
 800eda6:	739a      	strb	r2, [r3, #14]
 800eda8:	e002      	b.n	800edb0 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800edaa:	68bb      	ldr	r3, [r7, #8]
 800edac:	2200      	movs	r2, #0
 800edae:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800edb0:	68bb      	ldr	r3, [r7, #8]
 800edb2:	330e      	adds	r3, #14
 800edb4:	2202      	movs	r2, #2
 800edb6:	4619      	mov	r1, r3
 800edb8:	6878      	ldr	r0, [r7, #4]
 800edba:	f000 fbdd 	bl	800f578 <USBD_CtlSendData>
              break;
 800edbe:	e004      	b.n	800edca <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 800edc0:	6839      	ldr	r1, [r7, #0]
 800edc2:	6878      	ldr	r0, [r7, #4]
 800edc4:	f000 fb5b 	bl	800f47e <USBD_CtlError>
              break;
 800edc8:	bf00      	nop
          }
          break;
 800edca:	e004      	b.n	800edd6 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 800edcc:	6839      	ldr	r1, [r7, #0]
 800edce:	6878      	ldr	r0, [r7, #4]
 800edd0:	f000 fb55 	bl	800f47e <USBD_CtlError>
          break;
 800edd4:	bf00      	nop
      }
      break;
 800edd6:	e005      	b.n	800ede4 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 800edd8:	6839      	ldr	r1, [r7, #0]
 800edda:	6878      	ldr	r0, [r7, #4]
 800eddc:	f000 fb4f 	bl	800f47e <USBD_CtlError>
      break;
 800ede0:	e000      	b.n	800ede4 <USBD_StdEPReq+0x334>
      break;
 800ede2:	bf00      	nop
  }

  return ret;
 800ede4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ede6:	4618      	mov	r0, r3
 800ede8:	3710      	adds	r7, #16
 800edea:	46bd      	mov	sp, r7
 800edec:	bd80      	pop	{r7, pc}
	...

0800edf0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800edf0:	b580      	push	{r7, lr}
 800edf2:	b084      	sub	sp, #16
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	6078      	str	r0, [r7, #4]
 800edf8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800edfa:	2300      	movs	r3, #0
 800edfc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800edfe:	2300      	movs	r3, #0
 800ee00:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ee02:	2300      	movs	r3, #0
 800ee04:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ee06:	683b      	ldr	r3, [r7, #0]
 800ee08:	885b      	ldrh	r3, [r3, #2]
 800ee0a:	0a1b      	lsrs	r3, r3, #8
 800ee0c:	b29b      	uxth	r3, r3
 800ee0e:	3b01      	subs	r3, #1
 800ee10:	2b06      	cmp	r3, #6
 800ee12:	f200 8128 	bhi.w	800f066 <USBD_GetDescriptor+0x276>
 800ee16:	a201      	add	r2, pc, #4	@ (adr r2, 800ee1c <USBD_GetDescriptor+0x2c>)
 800ee18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee1c:	0800ee39 	.word	0x0800ee39
 800ee20:	0800ee51 	.word	0x0800ee51
 800ee24:	0800ee91 	.word	0x0800ee91
 800ee28:	0800f067 	.word	0x0800f067
 800ee2c:	0800f067 	.word	0x0800f067
 800ee30:	0800f007 	.word	0x0800f007
 800ee34:	0800f033 	.word	0x0800f033
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	687a      	ldr	r2, [r7, #4]
 800ee42:	7c12      	ldrb	r2, [r2, #16]
 800ee44:	f107 0108 	add.w	r1, r7, #8
 800ee48:	4610      	mov	r0, r2
 800ee4a:	4798      	blx	r3
 800ee4c:	60f8      	str	r0, [r7, #12]
      break;
 800ee4e:	e112      	b.n	800f076 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	7c1b      	ldrb	r3, [r3, #16]
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d10d      	bne.n	800ee74 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ee5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ee60:	f107 0208 	add.w	r2, r7, #8
 800ee64:	4610      	mov	r0, r2
 800ee66:	4798      	blx	r3
 800ee68:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	3301      	adds	r3, #1
 800ee6e:	2202      	movs	r2, #2
 800ee70:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ee72:	e100      	b.n	800f076 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ee7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee7c:	f107 0208 	add.w	r2, r7, #8
 800ee80:	4610      	mov	r0, r2
 800ee82:	4798      	blx	r3
 800ee84:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	3301      	adds	r3, #1
 800ee8a:	2202      	movs	r2, #2
 800ee8c:	701a      	strb	r2, [r3, #0]
      break;
 800ee8e:	e0f2      	b.n	800f076 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ee90:	683b      	ldr	r3, [r7, #0]
 800ee92:	885b      	ldrh	r3, [r3, #2]
 800ee94:	b2db      	uxtb	r3, r3
 800ee96:	2b05      	cmp	r3, #5
 800ee98:	f200 80ac 	bhi.w	800eff4 <USBD_GetDescriptor+0x204>
 800ee9c:	a201      	add	r2, pc, #4	@ (adr r2, 800eea4 <USBD_GetDescriptor+0xb4>)
 800ee9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eea2:	bf00      	nop
 800eea4:	0800eebd 	.word	0x0800eebd
 800eea8:	0800eef1 	.word	0x0800eef1
 800eeac:	0800ef25 	.word	0x0800ef25
 800eeb0:	0800ef59 	.word	0x0800ef59
 800eeb4:	0800ef8d 	.word	0x0800ef8d
 800eeb8:	0800efc1 	.word	0x0800efc1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800eec2:	685b      	ldr	r3, [r3, #4]
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d00b      	beq.n	800eee0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800eece:	685b      	ldr	r3, [r3, #4]
 800eed0:	687a      	ldr	r2, [r7, #4]
 800eed2:	7c12      	ldrb	r2, [r2, #16]
 800eed4:	f107 0108 	add.w	r1, r7, #8
 800eed8:	4610      	mov	r0, r2
 800eeda:	4798      	blx	r3
 800eedc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800eede:	e091      	b.n	800f004 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800eee0:	6839      	ldr	r1, [r7, #0]
 800eee2:	6878      	ldr	r0, [r7, #4]
 800eee4:	f000 facb 	bl	800f47e <USBD_CtlError>
            err++;
 800eee8:	7afb      	ldrb	r3, [r7, #11]
 800eeea:	3301      	adds	r3, #1
 800eeec:	72fb      	strb	r3, [r7, #11]
          break;
 800eeee:	e089      	b.n	800f004 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800eef6:	689b      	ldr	r3, [r3, #8]
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d00b      	beq.n	800ef14 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ef02:	689b      	ldr	r3, [r3, #8]
 800ef04:	687a      	ldr	r2, [r7, #4]
 800ef06:	7c12      	ldrb	r2, [r2, #16]
 800ef08:	f107 0108 	add.w	r1, r7, #8
 800ef0c:	4610      	mov	r0, r2
 800ef0e:	4798      	blx	r3
 800ef10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ef12:	e077      	b.n	800f004 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ef14:	6839      	ldr	r1, [r7, #0]
 800ef16:	6878      	ldr	r0, [r7, #4]
 800ef18:	f000 fab1 	bl	800f47e <USBD_CtlError>
            err++;
 800ef1c:	7afb      	ldrb	r3, [r7, #11]
 800ef1e:	3301      	adds	r3, #1
 800ef20:	72fb      	strb	r3, [r7, #11]
          break;
 800ef22:	e06f      	b.n	800f004 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ef2a:	68db      	ldr	r3, [r3, #12]
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d00b      	beq.n	800ef48 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ef36:	68db      	ldr	r3, [r3, #12]
 800ef38:	687a      	ldr	r2, [r7, #4]
 800ef3a:	7c12      	ldrb	r2, [r2, #16]
 800ef3c:	f107 0108 	add.w	r1, r7, #8
 800ef40:	4610      	mov	r0, r2
 800ef42:	4798      	blx	r3
 800ef44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ef46:	e05d      	b.n	800f004 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ef48:	6839      	ldr	r1, [r7, #0]
 800ef4a:	6878      	ldr	r0, [r7, #4]
 800ef4c:	f000 fa97 	bl	800f47e <USBD_CtlError>
            err++;
 800ef50:	7afb      	ldrb	r3, [r7, #11]
 800ef52:	3301      	adds	r3, #1
 800ef54:	72fb      	strb	r3, [r7, #11]
          break;
 800ef56:	e055      	b.n	800f004 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ef5e:	691b      	ldr	r3, [r3, #16]
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d00b      	beq.n	800ef7c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ef6a:	691b      	ldr	r3, [r3, #16]
 800ef6c:	687a      	ldr	r2, [r7, #4]
 800ef6e:	7c12      	ldrb	r2, [r2, #16]
 800ef70:	f107 0108 	add.w	r1, r7, #8
 800ef74:	4610      	mov	r0, r2
 800ef76:	4798      	blx	r3
 800ef78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ef7a:	e043      	b.n	800f004 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ef7c:	6839      	ldr	r1, [r7, #0]
 800ef7e:	6878      	ldr	r0, [r7, #4]
 800ef80:	f000 fa7d 	bl	800f47e <USBD_CtlError>
            err++;
 800ef84:	7afb      	ldrb	r3, [r7, #11]
 800ef86:	3301      	adds	r3, #1
 800ef88:	72fb      	strb	r3, [r7, #11]
          break;
 800ef8a:	e03b      	b.n	800f004 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ef92:	695b      	ldr	r3, [r3, #20]
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d00b      	beq.n	800efb0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ef9e:	695b      	ldr	r3, [r3, #20]
 800efa0:	687a      	ldr	r2, [r7, #4]
 800efa2:	7c12      	ldrb	r2, [r2, #16]
 800efa4:	f107 0108 	add.w	r1, r7, #8
 800efa8:	4610      	mov	r0, r2
 800efaa:	4798      	blx	r3
 800efac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800efae:	e029      	b.n	800f004 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800efb0:	6839      	ldr	r1, [r7, #0]
 800efb2:	6878      	ldr	r0, [r7, #4]
 800efb4:	f000 fa63 	bl	800f47e <USBD_CtlError>
            err++;
 800efb8:	7afb      	ldrb	r3, [r7, #11]
 800efba:	3301      	adds	r3, #1
 800efbc:	72fb      	strb	r3, [r7, #11]
          break;
 800efbe:	e021      	b.n	800f004 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800efc6:	699b      	ldr	r3, [r3, #24]
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d00b      	beq.n	800efe4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800efd2:	699b      	ldr	r3, [r3, #24]
 800efd4:	687a      	ldr	r2, [r7, #4]
 800efd6:	7c12      	ldrb	r2, [r2, #16]
 800efd8:	f107 0108 	add.w	r1, r7, #8
 800efdc:	4610      	mov	r0, r2
 800efde:	4798      	blx	r3
 800efe0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800efe2:	e00f      	b.n	800f004 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800efe4:	6839      	ldr	r1, [r7, #0]
 800efe6:	6878      	ldr	r0, [r7, #4]
 800efe8:	f000 fa49 	bl	800f47e <USBD_CtlError>
            err++;
 800efec:	7afb      	ldrb	r3, [r7, #11]
 800efee:	3301      	adds	r3, #1
 800eff0:	72fb      	strb	r3, [r7, #11]
          break;
 800eff2:	e007      	b.n	800f004 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800eff4:	6839      	ldr	r1, [r7, #0]
 800eff6:	6878      	ldr	r0, [r7, #4]
 800eff8:	f000 fa41 	bl	800f47e <USBD_CtlError>
          err++;
 800effc:	7afb      	ldrb	r3, [r7, #11]
 800effe:	3301      	adds	r3, #1
 800f000:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800f002:	bf00      	nop
      }
      break;
 800f004:	e037      	b.n	800f076 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	7c1b      	ldrb	r3, [r3, #16]
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d109      	bne.n	800f022 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f014:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f016:	f107 0208 	add.w	r2, r7, #8
 800f01a:	4610      	mov	r0, r2
 800f01c:	4798      	blx	r3
 800f01e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f020:	e029      	b.n	800f076 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800f022:	6839      	ldr	r1, [r7, #0]
 800f024:	6878      	ldr	r0, [r7, #4]
 800f026:	f000 fa2a 	bl	800f47e <USBD_CtlError>
        err++;
 800f02a:	7afb      	ldrb	r3, [r7, #11]
 800f02c:	3301      	adds	r3, #1
 800f02e:	72fb      	strb	r3, [r7, #11]
      break;
 800f030:	e021      	b.n	800f076 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	7c1b      	ldrb	r3, [r3, #16]
 800f036:	2b00      	cmp	r3, #0
 800f038:	d10d      	bne.n	800f056 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f042:	f107 0208 	add.w	r2, r7, #8
 800f046:	4610      	mov	r0, r2
 800f048:	4798      	blx	r3
 800f04a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	3301      	adds	r3, #1
 800f050:	2207      	movs	r2, #7
 800f052:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f054:	e00f      	b.n	800f076 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800f056:	6839      	ldr	r1, [r7, #0]
 800f058:	6878      	ldr	r0, [r7, #4]
 800f05a:	f000 fa10 	bl	800f47e <USBD_CtlError>
        err++;
 800f05e:	7afb      	ldrb	r3, [r7, #11]
 800f060:	3301      	adds	r3, #1
 800f062:	72fb      	strb	r3, [r7, #11]
      break;
 800f064:	e007      	b.n	800f076 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800f066:	6839      	ldr	r1, [r7, #0]
 800f068:	6878      	ldr	r0, [r7, #4]
 800f06a:	f000 fa08 	bl	800f47e <USBD_CtlError>
      err++;
 800f06e:	7afb      	ldrb	r3, [r7, #11]
 800f070:	3301      	adds	r3, #1
 800f072:	72fb      	strb	r3, [r7, #11]
      break;
 800f074:	bf00      	nop
  }

  if (err != 0U)
 800f076:	7afb      	ldrb	r3, [r7, #11]
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d11e      	bne.n	800f0ba <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800f07c:	683b      	ldr	r3, [r7, #0]
 800f07e:	88db      	ldrh	r3, [r3, #6]
 800f080:	2b00      	cmp	r3, #0
 800f082:	d016      	beq.n	800f0b2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800f084:	893b      	ldrh	r3, [r7, #8]
 800f086:	2b00      	cmp	r3, #0
 800f088:	d00e      	beq.n	800f0a8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800f08a:	683b      	ldr	r3, [r7, #0]
 800f08c:	88da      	ldrh	r2, [r3, #6]
 800f08e:	893b      	ldrh	r3, [r7, #8]
 800f090:	4293      	cmp	r3, r2
 800f092:	bf28      	it	cs
 800f094:	4613      	movcs	r3, r2
 800f096:	b29b      	uxth	r3, r3
 800f098:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f09a:	893b      	ldrh	r3, [r7, #8]
 800f09c:	461a      	mov	r2, r3
 800f09e:	68f9      	ldr	r1, [r7, #12]
 800f0a0:	6878      	ldr	r0, [r7, #4]
 800f0a2:	f000 fa69 	bl	800f578 <USBD_CtlSendData>
 800f0a6:	e009      	b.n	800f0bc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800f0a8:	6839      	ldr	r1, [r7, #0]
 800f0aa:	6878      	ldr	r0, [r7, #4]
 800f0ac:	f000 f9e7 	bl	800f47e <USBD_CtlError>
 800f0b0:	e004      	b.n	800f0bc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800f0b2:	6878      	ldr	r0, [r7, #4]
 800f0b4:	f000 fac1 	bl	800f63a <USBD_CtlSendStatus>
 800f0b8:	e000      	b.n	800f0bc <USBD_GetDescriptor+0x2cc>
    return;
 800f0ba:	bf00      	nop
  }
}
 800f0bc:	3710      	adds	r7, #16
 800f0be:	46bd      	mov	sp, r7
 800f0c0:	bd80      	pop	{r7, pc}
 800f0c2:	bf00      	nop

0800f0c4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f0c4:	b580      	push	{r7, lr}
 800f0c6:	b084      	sub	sp, #16
 800f0c8:	af00      	add	r7, sp, #0
 800f0ca:	6078      	str	r0, [r7, #4]
 800f0cc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f0ce:	683b      	ldr	r3, [r7, #0]
 800f0d0:	889b      	ldrh	r3, [r3, #4]
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d131      	bne.n	800f13a <USBD_SetAddress+0x76>
 800f0d6:	683b      	ldr	r3, [r7, #0]
 800f0d8:	88db      	ldrh	r3, [r3, #6]
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d12d      	bne.n	800f13a <USBD_SetAddress+0x76>
 800f0de:	683b      	ldr	r3, [r7, #0]
 800f0e0:	885b      	ldrh	r3, [r3, #2]
 800f0e2:	2b7f      	cmp	r3, #127	@ 0x7f
 800f0e4:	d829      	bhi.n	800f13a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f0e6:	683b      	ldr	r3, [r7, #0]
 800f0e8:	885b      	ldrh	r3, [r3, #2]
 800f0ea:	b2db      	uxtb	r3, r3
 800f0ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f0f0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f0f8:	b2db      	uxtb	r3, r3
 800f0fa:	2b03      	cmp	r3, #3
 800f0fc:	d104      	bne.n	800f108 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800f0fe:	6839      	ldr	r1, [r7, #0]
 800f100:	6878      	ldr	r0, [r7, #4]
 800f102:	f000 f9bc 	bl	800f47e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f106:	e01d      	b.n	800f144 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	7bfa      	ldrb	r2, [r7, #15]
 800f10c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f110:	7bfb      	ldrb	r3, [r7, #15]
 800f112:	4619      	mov	r1, r3
 800f114:	6878      	ldr	r0, [r7, #4]
 800f116:	f00e fdf9 	bl	801dd0c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f11a:	6878      	ldr	r0, [r7, #4]
 800f11c:	f000 fa8d 	bl	800f63a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f120:	7bfb      	ldrb	r3, [r7, #15]
 800f122:	2b00      	cmp	r3, #0
 800f124:	d004      	beq.n	800f130 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	2202      	movs	r2, #2
 800f12a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f12e:	e009      	b.n	800f144 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	2201      	movs	r2, #1
 800f134:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f138:	e004      	b.n	800f144 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f13a:	6839      	ldr	r1, [r7, #0]
 800f13c:	6878      	ldr	r0, [r7, #4]
 800f13e:	f000 f99e 	bl	800f47e <USBD_CtlError>
  }
}
 800f142:	bf00      	nop
 800f144:	bf00      	nop
 800f146:	3710      	adds	r7, #16
 800f148:	46bd      	mov	sp, r7
 800f14a:	bd80      	pop	{r7, pc}

0800f14c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f14c:	b580      	push	{r7, lr}
 800f14e:	b084      	sub	sp, #16
 800f150:	af00      	add	r7, sp, #0
 800f152:	6078      	str	r0, [r7, #4]
 800f154:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f156:	2300      	movs	r3, #0
 800f158:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f15a:	683b      	ldr	r3, [r7, #0]
 800f15c:	885b      	ldrh	r3, [r3, #2]
 800f15e:	b2da      	uxtb	r2, r3
 800f160:	4b4e      	ldr	r3, [pc, #312]	@ (800f29c <USBD_SetConfig+0x150>)
 800f162:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f164:	4b4d      	ldr	r3, [pc, #308]	@ (800f29c <USBD_SetConfig+0x150>)
 800f166:	781b      	ldrb	r3, [r3, #0]
 800f168:	2b01      	cmp	r3, #1
 800f16a:	d905      	bls.n	800f178 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f16c:	6839      	ldr	r1, [r7, #0]
 800f16e:	6878      	ldr	r0, [r7, #4]
 800f170:	f000 f985 	bl	800f47e <USBD_CtlError>
    return USBD_FAIL;
 800f174:	2303      	movs	r3, #3
 800f176:	e08c      	b.n	800f292 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f17e:	b2db      	uxtb	r3, r3
 800f180:	2b02      	cmp	r3, #2
 800f182:	d002      	beq.n	800f18a <USBD_SetConfig+0x3e>
 800f184:	2b03      	cmp	r3, #3
 800f186:	d029      	beq.n	800f1dc <USBD_SetConfig+0x90>
 800f188:	e075      	b.n	800f276 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800f18a:	4b44      	ldr	r3, [pc, #272]	@ (800f29c <USBD_SetConfig+0x150>)
 800f18c:	781b      	ldrb	r3, [r3, #0]
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d020      	beq.n	800f1d4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800f192:	4b42      	ldr	r3, [pc, #264]	@ (800f29c <USBD_SetConfig+0x150>)
 800f194:	781b      	ldrb	r3, [r3, #0]
 800f196:	461a      	mov	r2, r3
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f19c:	4b3f      	ldr	r3, [pc, #252]	@ (800f29c <USBD_SetConfig+0x150>)
 800f19e:	781b      	ldrb	r3, [r3, #0]
 800f1a0:	4619      	mov	r1, r3
 800f1a2:	6878      	ldr	r0, [r7, #4]
 800f1a4:	f7fe ffcd 	bl	800e142 <USBD_SetClassConfig>
 800f1a8:	4603      	mov	r3, r0
 800f1aa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800f1ac:	7bfb      	ldrb	r3, [r7, #15]
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d008      	beq.n	800f1c4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800f1b2:	6839      	ldr	r1, [r7, #0]
 800f1b4:	6878      	ldr	r0, [r7, #4]
 800f1b6:	f000 f962 	bl	800f47e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	2202      	movs	r2, #2
 800f1be:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f1c2:	e065      	b.n	800f290 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f1c4:	6878      	ldr	r0, [r7, #4]
 800f1c6:	f000 fa38 	bl	800f63a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	2203      	movs	r2, #3
 800f1ce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800f1d2:	e05d      	b.n	800f290 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f1d4:	6878      	ldr	r0, [r7, #4]
 800f1d6:	f000 fa30 	bl	800f63a <USBD_CtlSendStatus>
      break;
 800f1da:	e059      	b.n	800f290 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800f1dc:	4b2f      	ldr	r3, [pc, #188]	@ (800f29c <USBD_SetConfig+0x150>)
 800f1de:	781b      	ldrb	r3, [r3, #0]
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d112      	bne.n	800f20a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	2202      	movs	r2, #2
 800f1e8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800f1ec:	4b2b      	ldr	r3, [pc, #172]	@ (800f29c <USBD_SetConfig+0x150>)
 800f1ee:	781b      	ldrb	r3, [r3, #0]
 800f1f0:	461a      	mov	r2, r3
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f1f6:	4b29      	ldr	r3, [pc, #164]	@ (800f29c <USBD_SetConfig+0x150>)
 800f1f8:	781b      	ldrb	r3, [r3, #0]
 800f1fa:	4619      	mov	r1, r3
 800f1fc:	6878      	ldr	r0, [r7, #4]
 800f1fe:	f7fe ffbc 	bl	800e17a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800f202:	6878      	ldr	r0, [r7, #4]
 800f204:	f000 fa19 	bl	800f63a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f208:	e042      	b.n	800f290 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800f20a:	4b24      	ldr	r3, [pc, #144]	@ (800f29c <USBD_SetConfig+0x150>)
 800f20c:	781b      	ldrb	r3, [r3, #0]
 800f20e:	461a      	mov	r2, r3
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	685b      	ldr	r3, [r3, #4]
 800f214:	429a      	cmp	r2, r3
 800f216:	d02a      	beq.n	800f26e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	685b      	ldr	r3, [r3, #4]
 800f21c:	b2db      	uxtb	r3, r3
 800f21e:	4619      	mov	r1, r3
 800f220:	6878      	ldr	r0, [r7, #4]
 800f222:	f7fe ffaa 	bl	800e17a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800f226:	4b1d      	ldr	r3, [pc, #116]	@ (800f29c <USBD_SetConfig+0x150>)
 800f228:	781b      	ldrb	r3, [r3, #0]
 800f22a:	461a      	mov	r2, r3
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f230:	4b1a      	ldr	r3, [pc, #104]	@ (800f29c <USBD_SetConfig+0x150>)
 800f232:	781b      	ldrb	r3, [r3, #0]
 800f234:	4619      	mov	r1, r3
 800f236:	6878      	ldr	r0, [r7, #4]
 800f238:	f7fe ff83 	bl	800e142 <USBD_SetClassConfig>
 800f23c:	4603      	mov	r3, r0
 800f23e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800f240:	7bfb      	ldrb	r3, [r7, #15]
 800f242:	2b00      	cmp	r3, #0
 800f244:	d00f      	beq.n	800f266 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800f246:	6839      	ldr	r1, [r7, #0]
 800f248:	6878      	ldr	r0, [r7, #4]
 800f24a:	f000 f918 	bl	800f47e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	685b      	ldr	r3, [r3, #4]
 800f252:	b2db      	uxtb	r3, r3
 800f254:	4619      	mov	r1, r3
 800f256:	6878      	ldr	r0, [r7, #4]
 800f258:	f7fe ff8f 	bl	800e17a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	2202      	movs	r2, #2
 800f260:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800f264:	e014      	b.n	800f290 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f266:	6878      	ldr	r0, [r7, #4]
 800f268:	f000 f9e7 	bl	800f63a <USBD_CtlSendStatus>
      break;
 800f26c:	e010      	b.n	800f290 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f26e:	6878      	ldr	r0, [r7, #4]
 800f270:	f000 f9e3 	bl	800f63a <USBD_CtlSendStatus>
      break;
 800f274:	e00c      	b.n	800f290 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800f276:	6839      	ldr	r1, [r7, #0]
 800f278:	6878      	ldr	r0, [r7, #4]
 800f27a:	f000 f900 	bl	800f47e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f27e:	4b07      	ldr	r3, [pc, #28]	@ (800f29c <USBD_SetConfig+0x150>)
 800f280:	781b      	ldrb	r3, [r3, #0]
 800f282:	4619      	mov	r1, r3
 800f284:	6878      	ldr	r0, [r7, #4]
 800f286:	f7fe ff78 	bl	800e17a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800f28a:	2303      	movs	r3, #3
 800f28c:	73fb      	strb	r3, [r7, #15]
      break;
 800f28e:	bf00      	nop
  }

  return ret;
 800f290:	7bfb      	ldrb	r3, [r7, #15]
}
 800f292:	4618      	mov	r0, r3
 800f294:	3710      	adds	r7, #16
 800f296:	46bd      	mov	sp, r7
 800f298:	bd80      	pop	{r7, pc}
 800f29a:	bf00      	nop
 800f29c:	20005604 	.word	0x20005604

0800f2a0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f2a0:	b580      	push	{r7, lr}
 800f2a2:	b082      	sub	sp, #8
 800f2a4:	af00      	add	r7, sp, #0
 800f2a6:	6078      	str	r0, [r7, #4]
 800f2a8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f2aa:	683b      	ldr	r3, [r7, #0]
 800f2ac:	88db      	ldrh	r3, [r3, #6]
 800f2ae:	2b01      	cmp	r3, #1
 800f2b0:	d004      	beq.n	800f2bc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f2b2:	6839      	ldr	r1, [r7, #0]
 800f2b4:	6878      	ldr	r0, [r7, #4]
 800f2b6:	f000 f8e2 	bl	800f47e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800f2ba:	e023      	b.n	800f304 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f2c2:	b2db      	uxtb	r3, r3
 800f2c4:	2b02      	cmp	r3, #2
 800f2c6:	dc02      	bgt.n	800f2ce <USBD_GetConfig+0x2e>
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	dc03      	bgt.n	800f2d4 <USBD_GetConfig+0x34>
 800f2cc:	e015      	b.n	800f2fa <USBD_GetConfig+0x5a>
 800f2ce:	2b03      	cmp	r3, #3
 800f2d0:	d00b      	beq.n	800f2ea <USBD_GetConfig+0x4a>
 800f2d2:	e012      	b.n	800f2fa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	2200      	movs	r2, #0
 800f2d8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	3308      	adds	r3, #8
 800f2de:	2201      	movs	r2, #1
 800f2e0:	4619      	mov	r1, r3
 800f2e2:	6878      	ldr	r0, [r7, #4]
 800f2e4:	f000 f948 	bl	800f578 <USBD_CtlSendData>
        break;
 800f2e8:	e00c      	b.n	800f304 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	3304      	adds	r3, #4
 800f2ee:	2201      	movs	r2, #1
 800f2f0:	4619      	mov	r1, r3
 800f2f2:	6878      	ldr	r0, [r7, #4]
 800f2f4:	f000 f940 	bl	800f578 <USBD_CtlSendData>
        break;
 800f2f8:	e004      	b.n	800f304 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800f2fa:	6839      	ldr	r1, [r7, #0]
 800f2fc:	6878      	ldr	r0, [r7, #4]
 800f2fe:	f000 f8be 	bl	800f47e <USBD_CtlError>
        break;
 800f302:	bf00      	nop
}
 800f304:	bf00      	nop
 800f306:	3708      	adds	r7, #8
 800f308:	46bd      	mov	sp, r7
 800f30a:	bd80      	pop	{r7, pc}

0800f30c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f30c:	b580      	push	{r7, lr}
 800f30e:	b082      	sub	sp, #8
 800f310:	af00      	add	r7, sp, #0
 800f312:	6078      	str	r0, [r7, #4]
 800f314:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f31c:	b2db      	uxtb	r3, r3
 800f31e:	3b01      	subs	r3, #1
 800f320:	2b02      	cmp	r3, #2
 800f322:	d81e      	bhi.n	800f362 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800f324:	683b      	ldr	r3, [r7, #0]
 800f326:	88db      	ldrh	r3, [r3, #6]
 800f328:	2b02      	cmp	r3, #2
 800f32a:	d004      	beq.n	800f336 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800f32c:	6839      	ldr	r1, [r7, #0]
 800f32e:	6878      	ldr	r0, [r7, #4]
 800f330:	f000 f8a5 	bl	800f47e <USBD_CtlError>
        break;
 800f334:	e01a      	b.n	800f36c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	2201      	movs	r2, #1
 800f33a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800f342:	2b00      	cmp	r3, #0
 800f344:	d005      	beq.n	800f352 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	68db      	ldr	r3, [r3, #12]
 800f34a:	f043 0202 	orr.w	r2, r3, #2
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	330c      	adds	r3, #12
 800f356:	2202      	movs	r2, #2
 800f358:	4619      	mov	r1, r3
 800f35a:	6878      	ldr	r0, [r7, #4]
 800f35c:	f000 f90c 	bl	800f578 <USBD_CtlSendData>
      break;
 800f360:	e004      	b.n	800f36c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800f362:	6839      	ldr	r1, [r7, #0]
 800f364:	6878      	ldr	r0, [r7, #4]
 800f366:	f000 f88a 	bl	800f47e <USBD_CtlError>
      break;
 800f36a:	bf00      	nop
  }
}
 800f36c:	bf00      	nop
 800f36e:	3708      	adds	r7, #8
 800f370:	46bd      	mov	sp, r7
 800f372:	bd80      	pop	{r7, pc}

0800f374 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f374:	b580      	push	{r7, lr}
 800f376:	b082      	sub	sp, #8
 800f378:	af00      	add	r7, sp, #0
 800f37a:	6078      	str	r0, [r7, #4]
 800f37c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f37e:	683b      	ldr	r3, [r7, #0]
 800f380:	885b      	ldrh	r3, [r3, #2]
 800f382:	2b01      	cmp	r3, #1
 800f384:	d107      	bne.n	800f396 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	2201      	movs	r2, #1
 800f38a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800f38e:	6878      	ldr	r0, [r7, #4]
 800f390:	f000 f953 	bl	800f63a <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800f394:	e013      	b.n	800f3be <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800f396:	683b      	ldr	r3, [r7, #0]
 800f398:	885b      	ldrh	r3, [r3, #2]
 800f39a:	2b02      	cmp	r3, #2
 800f39c:	d10b      	bne.n	800f3b6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800f39e:	683b      	ldr	r3, [r7, #0]
 800f3a0:	889b      	ldrh	r3, [r3, #4]
 800f3a2:	0a1b      	lsrs	r3, r3, #8
 800f3a4:	b29b      	uxth	r3, r3
 800f3a6:	b2da      	uxtb	r2, r3
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800f3ae:	6878      	ldr	r0, [r7, #4]
 800f3b0:	f000 f943 	bl	800f63a <USBD_CtlSendStatus>
}
 800f3b4:	e003      	b.n	800f3be <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800f3b6:	6839      	ldr	r1, [r7, #0]
 800f3b8:	6878      	ldr	r0, [r7, #4]
 800f3ba:	f000 f860 	bl	800f47e <USBD_CtlError>
}
 800f3be:	bf00      	nop
 800f3c0:	3708      	adds	r7, #8
 800f3c2:	46bd      	mov	sp, r7
 800f3c4:	bd80      	pop	{r7, pc}

0800f3c6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f3c6:	b580      	push	{r7, lr}
 800f3c8:	b082      	sub	sp, #8
 800f3ca:	af00      	add	r7, sp, #0
 800f3cc:	6078      	str	r0, [r7, #4]
 800f3ce:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f3d6:	b2db      	uxtb	r3, r3
 800f3d8:	3b01      	subs	r3, #1
 800f3da:	2b02      	cmp	r3, #2
 800f3dc:	d80b      	bhi.n	800f3f6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f3de:	683b      	ldr	r3, [r7, #0]
 800f3e0:	885b      	ldrh	r3, [r3, #2]
 800f3e2:	2b01      	cmp	r3, #1
 800f3e4:	d10c      	bne.n	800f400 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	2200      	movs	r2, #0
 800f3ea:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f3ee:	6878      	ldr	r0, [r7, #4]
 800f3f0:	f000 f923 	bl	800f63a <USBD_CtlSendStatus>
      }
      break;
 800f3f4:	e004      	b.n	800f400 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800f3f6:	6839      	ldr	r1, [r7, #0]
 800f3f8:	6878      	ldr	r0, [r7, #4]
 800f3fa:	f000 f840 	bl	800f47e <USBD_CtlError>
      break;
 800f3fe:	e000      	b.n	800f402 <USBD_ClrFeature+0x3c>
      break;
 800f400:	bf00      	nop
  }
}
 800f402:	bf00      	nop
 800f404:	3708      	adds	r7, #8
 800f406:	46bd      	mov	sp, r7
 800f408:	bd80      	pop	{r7, pc}

0800f40a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f40a:	b580      	push	{r7, lr}
 800f40c:	b084      	sub	sp, #16
 800f40e:	af00      	add	r7, sp, #0
 800f410:	6078      	str	r0, [r7, #4]
 800f412:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800f414:	683b      	ldr	r3, [r7, #0]
 800f416:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	781a      	ldrb	r2, [r3, #0]
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	3301      	adds	r3, #1
 800f424:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	781a      	ldrb	r2, [r3, #0]
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	3301      	adds	r3, #1
 800f432:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800f434:	68f8      	ldr	r0, [r7, #12]
 800f436:	f7ff fa3d 	bl	800e8b4 <SWAPBYTE>
 800f43a:	4603      	mov	r3, r0
 800f43c:	461a      	mov	r2, r3
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	3301      	adds	r3, #1
 800f446:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	3301      	adds	r3, #1
 800f44c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800f44e:	68f8      	ldr	r0, [r7, #12]
 800f450:	f7ff fa30 	bl	800e8b4 <SWAPBYTE>
 800f454:	4603      	mov	r3, r0
 800f456:	461a      	mov	r2, r3
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	3301      	adds	r3, #1
 800f460:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	3301      	adds	r3, #1
 800f466:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800f468:	68f8      	ldr	r0, [r7, #12]
 800f46a:	f7ff fa23 	bl	800e8b4 <SWAPBYTE>
 800f46e:	4603      	mov	r3, r0
 800f470:	461a      	mov	r2, r3
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	80da      	strh	r2, [r3, #6]
}
 800f476:	bf00      	nop
 800f478:	3710      	adds	r7, #16
 800f47a:	46bd      	mov	sp, r7
 800f47c:	bd80      	pop	{r7, pc}

0800f47e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f47e:	b580      	push	{r7, lr}
 800f480:	b082      	sub	sp, #8
 800f482:	af00      	add	r7, sp, #0
 800f484:	6078      	str	r0, [r7, #4]
 800f486:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f488:	2180      	movs	r1, #128	@ 0x80
 800f48a:	6878      	ldr	r0, [r7, #4]
 800f48c:	f00e fbd4 	bl	801dc38 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f490:	2100      	movs	r1, #0
 800f492:	6878      	ldr	r0, [r7, #4]
 800f494:	f00e fbd0 	bl	801dc38 <USBD_LL_StallEP>
}
 800f498:	bf00      	nop
 800f49a:	3708      	adds	r7, #8
 800f49c:	46bd      	mov	sp, r7
 800f49e:	bd80      	pop	{r7, pc}

0800f4a0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f4a0:	b580      	push	{r7, lr}
 800f4a2:	b086      	sub	sp, #24
 800f4a4:	af00      	add	r7, sp, #0
 800f4a6:	60f8      	str	r0, [r7, #12]
 800f4a8:	60b9      	str	r1, [r7, #8]
 800f4aa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f4ac:	2300      	movs	r3, #0
 800f4ae:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d042      	beq.n	800f53c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800f4ba:	6938      	ldr	r0, [r7, #16]
 800f4bc:	f000 f842 	bl	800f544 <USBD_GetLen>
 800f4c0:	4603      	mov	r3, r0
 800f4c2:	3301      	adds	r3, #1
 800f4c4:	005b      	lsls	r3, r3, #1
 800f4c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f4ca:	d808      	bhi.n	800f4de <USBD_GetString+0x3e>
 800f4cc:	6938      	ldr	r0, [r7, #16]
 800f4ce:	f000 f839 	bl	800f544 <USBD_GetLen>
 800f4d2:	4603      	mov	r3, r0
 800f4d4:	3301      	adds	r3, #1
 800f4d6:	b29b      	uxth	r3, r3
 800f4d8:	005b      	lsls	r3, r3, #1
 800f4da:	b29a      	uxth	r2, r3
 800f4dc:	e001      	b.n	800f4e2 <USBD_GetString+0x42>
 800f4de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800f4e6:	7dfb      	ldrb	r3, [r7, #23]
 800f4e8:	68ba      	ldr	r2, [r7, #8]
 800f4ea:	4413      	add	r3, r2
 800f4ec:	687a      	ldr	r2, [r7, #4]
 800f4ee:	7812      	ldrb	r2, [r2, #0]
 800f4f0:	701a      	strb	r2, [r3, #0]
  idx++;
 800f4f2:	7dfb      	ldrb	r3, [r7, #23]
 800f4f4:	3301      	adds	r3, #1
 800f4f6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f4f8:	7dfb      	ldrb	r3, [r7, #23]
 800f4fa:	68ba      	ldr	r2, [r7, #8]
 800f4fc:	4413      	add	r3, r2
 800f4fe:	2203      	movs	r2, #3
 800f500:	701a      	strb	r2, [r3, #0]
  idx++;
 800f502:	7dfb      	ldrb	r3, [r7, #23]
 800f504:	3301      	adds	r3, #1
 800f506:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800f508:	e013      	b.n	800f532 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800f50a:	7dfb      	ldrb	r3, [r7, #23]
 800f50c:	68ba      	ldr	r2, [r7, #8]
 800f50e:	4413      	add	r3, r2
 800f510:	693a      	ldr	r2, [r7, #16]
 800f512:	7812      	ldrb	r2, [r2, #0]
 800f514:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800f516:	693b      	ldr	r3, [r7, #16]
 800f518:	3301      	adds	r3, #1
 800f51a:	613b      	str	r3, [r7, #16]
    idx++;
 800f51c:	7dfb      	ldrb	r3, [r7, #23]
 800f51e:	3301      	adds	r3, #1
 800f520:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800f522:	7dfb      	ldrb	r3, [r7, #23]
 800f524:	68ba      	ldr	r2, [r7, #8]
 800f526:	4413      	add	r3, r2
 800f528:	2200      	movs	r2, #0
 800f52a:	701a      	strb	r2, [r3, #0]
    idx++;
 800f52c:	7dfb      	ldrb	r3, [r7, #23]
 800f52e:	3301      	adds	r3, #1
 800f530:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800f532:	693b      	ldr	r3, [r7, #16]
 800f534:	781b      	ldrb	r3, [r3, #0]
 800f536:	2b00      	cmp	r3, #0
 800f538:	d1e7      	bne.n	800f50a <USBD_GetString+0x6a>
 800f53a:	e000      	b.n	800f53e <USBD_GetString+0x9e>
    return;
 800f53c:	bf00      	nop
  }
}
 800f53e:	3718      	adds	r7, #24
 800f540:	46bd      	mov	sp, r7
 800f542:	bd80      	pop	{r7, pc}

0800f544 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f544:	b480      	push	{r7}
 800f546:	b085      	sub	sp, #20
 800f548:	af00      	add	r7, sp, #0
 800f54a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f54c:	2300      	movs	r3, #0
 800f54e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800f554:	e005      	b.n	800f562 <USBD_GetLen+0x1e>
  {
    len++;
 800f556:	7bfb      	ldrb	r3, [r7, #15]
 800f558:	3301      	adds	r3, #1
 800f55a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800f55c:	68bb      	ldr	r3, [r7, #8]
 800f55e:	3301      	adds	r3, #1
 800f560:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800f562:	68bb      	ldr	r3, [r7, #8]
 800f564:	781b      	ldrb	r3, [r3, #0]
 800f566:	2b00      	cmp	r3, #0
 800f568:	d1f5      	bne.n	800f556 <USBD_GetLen+0x12>
  }

  return len;
 800f56a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f56c:	4618      	mov	r0, r3
 800f56e:	3714      	adds	r7, #20
 800f570:	46bd      	mov	sp, r7
 800f572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f576:	4770      	bx	lr

0800f578 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800f578:	b580      	push	{r7, lr}
 800f57a:	b084      	sub	sp, #16
 800f57c:	af00      	add	r7, sp, #0
 800f57e:	60f8      	str	r0, [r7, #12]
 800f580:	60b9      	str	r1, [r7, #8]
 800f582:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	2202      	movs	r2, #2
 800f588:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	687a      	ldr	r2, [r7, #4]
 800f590:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	68ba      	ldr	r2, [r7, #8]
 800f596:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	687a      	ldr	r2, [r7, #4]
 800f59c:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	68ba      	ldr	r2, [r7, #8]
 800f5a2:	2100      	movs	r1, #0
 800f5a4:	68f8      	ldr	r0, [r7, #12]
 800f5a6:	f00e fbd0 	bl	801dd4a <USBD_LL_Transmit>

  return USBD_OK;
 800f5aa:	2300      	movs	r3, #0
}
 800f5ac:	4618      	mov	r0, r3
 800f5ae:	3710      	adds	r7, #16
 800f5b0:	46bd      	mov	sp, r7
 800f5b2:	bd80      	pop	{r7, pc}

0800f5b4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800f5b4:	b580      	push	{r7, lr}
 800f5b6:	b084      	sub	sp, #16
 800f5b8:	af00      	add	r7, sp, #0
 800f5ba:	60f8      	str	r0, [r7, #12]
 800f5bc:	60b9      	str	r1, [r7, #8]
 800f5be:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	68ba      	ldr	r2, [r7, #8]
 800f5c4:	2100      	movs	r1, #0
 800f5c6:	68f8      	ldr	r0, [r7, #12]
 800f5c8:	f00e fbbf 	bl	801dd4a <USBD_LL_Transmit>

  return USBD_OK;
 800f5cc:	2300      	movs	r3, #0
}
 800f5ce:	4618      	mov	r0, r3
 800f5d0:	3710      	adds	r7, #16
 800f5d2:	46bd      	mov	sp, r7
 800f5d4:	bd80      	pop	{r7, pc}

0800f5d6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800f5d6:	b580      	push	{r7, lr}
 800f5d8:	b084      	sub	sp, #16
 800f5da:	af00      	add	r7, sp, #0
 800f5dc:	60f8      	str	r0, [r7, #12]
 800f5de:	60b9      	str	r1, [r7, #8]
 800f5e0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	2203      	movs	r2, #3
 800f5e6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	687a      	ldr	r2, [r7, #4]
 800f5ee:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	68ba      	ldr	r2, [r7, #8]
 800f5f6:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	687a      	ldr	r2, [r7, #4]
 800f5fe:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	68ba      	ldr	r2, [r7, #8]
 800f606:	2100      	movs	r1, #0
 800f608:	68f8      	ldr	r0, [r7, #12]
 800f60a:	f00e fbbf 	bl	801dd8c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f60e:	2300      	movs	r3, #0
}
 800f610:	4618      	mov	r0, r3
 800f612:	3710      	adds	r7, #16
 800f614:	46bd      	mov	sp, r7
 800f616:	bd80      	pop	{r7, pc}

0800f618 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800f618:	b580      	push	{r7, lr}
 800f61a:	b084      	sub	sp, #16
 800f61c:	af00      	add	r7, sp, #0
 800f61e:	60f8      	str	r0, [r7, #12]
 800f620:	60b9      	str	r1, [r7, #8]
 800f622:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	68ba      	ldr	r2, [r7, #8]
 800f628:	2100      	movs	r1, #0
 800f62a:	68f8      	ldr	r0, [r7, #12]
 800f62c:	f00e fbae 	bl	801dd8c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f630:	2300      	movs	r3, #0
}
 800f632:	4618      	mov	r0, r3
 800f634:	3710      	adds	r7, #16
 800f636:	46bd      	mov	sp, r7
 800f638:	bd80      	pop	{r7, pc}

0800f63a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f63a:	b580      	push	{r7, lr}
 800f63c:	b082      	sub	sp, #8
 800f63e:	af00      	add	r7, sp, #0
 800f640:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	2204      	movs	r2, #4
 800f646:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f64a:	2300      	movs	r3, #0
 800f64c:	2200      	movs	r2, #0
 800f64e:	2100      	movs	r1, #0
 800f650:	6878      	ldr	r0, [r7, #4]
 800f652:	f00e fb7a 	bl	801dd4a <USBD_LL_Transmit>

  return USBD_OK;
 800f656:	2300      	movs	r3, #0
}
 800f658:	4618      	mov	r0, r3
 800f65a:	3708      	adds	r7, #8
 800f65c:	46bd      	mov	sp, r7
 800f65e:	bd80      	pop	{r7, pc}

0800f660 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f660:	b580      	push	{r7, lr}
 800f662:	b082      	sub	sp, #8
 800f664:	af00      	add	r7, sp, #0
 800f666:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	2205      	movs	r2, #5
 800f66c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f670:	2300      	movs	r3, #0
 800f672:	2200      	movs	r2, #0
 800f674:	2100      	movs	r1, #0
 800f676:	6878      	ldr	r0, [r7, #4]
 800f678:	f00e fb88 	bl	801dd8c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f67c:	2300      	movs	r3, #0
}
 800f67e:	4618      	mov	r0, r3
 800f680:	3708      	adds	r7, #8
 800f682:	46bd      	mov	sp, r7
 800f684:	bd80      	pop	{r7, pc}

0800f686 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800f686:	b480      	push	{r7}
 800f688:	b085      	sub	sp, #20
 800f68a:	af00      	add	r7, sp, #0
 800f68c:	4603      	mov	r3, r0
 800f68e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800f690:	2300      	movs	r3, #0
 800f692:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800f694:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f698:	2b84      	cmp	r3, #132	@ 0x84
 800f69a:	d005      	beq.n	800f6a8 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800f69c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	4413      	add	r3, r2
 800f6a4:	3303      	adds	r3, #3
 800f6a6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800f6a8:	68fb      	ldr	r3, [r7, #12]
}
 800f6aa:	4618      	mov	r0, r3
 800f6ac:	3714      	adds	r7, #20
 800f6ae:	46bd      	mov	sp, r7
 800f6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6b4:	4770      	bx	lr

0800f6b6 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800f6b6:	b480      	push	{r7}
 800f6b8:	b083      	sub	sp, #12
 800f6ba:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f6bc:	f3ef 8305 	mrs	r3, IPSR
 800f6c0:	607b      	str	r3, [r7, #4]
  return(result);
 800f6c2:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	bf14      	ite	ne
 800f6c8:	2301      	movne	r3, #1
 800f6ca:	2300      	moveq	r3, #0
 800f6cc:	b2db      	uxtb	r3, r3
}
 800f6ce:	4618      	mov	r0, r3
 800f6d0:	370c      	adds	r7, #12
 800f6d2:	46bd      	mov	sp, r7
 800f6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d8:	4770      	bx	lr

0800f6da <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800f6da:	b580      	push	{r7, lr}
 800f6dc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800f6de:	f001 fc95 	bl	801100c <vTaskStartScheduler>
  
  return osOK;
 800f6e2:	2300      	movs	r3, #0
}
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	bd80      	pop	{r7, pc}

0800f6e8 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800f6e8:	b580      	push	{r7, lr}
 800f6ea:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800f6ec:	f7ff ffe3 	bl	800f6b6 <inHandlerMode>
 800f6f0:	4603      	mov	r3, r0
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d003      	beq.n	800f6fe <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800f6f6:	f001 fdaf 	bl	8011258 <xTaskGetTickCountFromISR>
 800f6fa:	4603      	mov	r3, r0
 800f6fc:	e002      	b.n	800f704 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800f6fe:	f001 fd9b 	bl	8011238 <xTaskGetTickCount>
 800f702:	4603      	mov	r3, r0
  }
}
 800f704:	4618      	mov	r0, r3
 800f706:	bd80      	pop	{r7, pc}

0800f708 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800f708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f70a:	b089      	sub	sp, #36	@ 0x24
 800f70c:	af04      	add	r7, sp, #16
 800f70e:	6078      	str	r0, [r7, #4]
 800f710:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	695b      	ldr	r3, [r3, #20]
 800f716:	2b00      	cmp	r3, #0
 800f718:	d020      	beq.n	800f75c <osThreadCreate+0x54>
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	699b      	ldr	r3, [r3, #24]
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d01c      	beq.n	800f75c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	685c      	ldr	r4, [r3, #4]
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	691e      	ldr	r6, [r3, #16]
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f734:	4618      	mov	r0, r3
 800f736:	f7ff ffa6 	bl	800f686 <makeFreeRtosPriority>
 800f73a:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	695b      	ldr	r3, [r3, #20]
 800f740:	687a      	ldr	r2, [r7, #4]
 800f742:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f744:	9202      	str	r2, [sp, #8]
 800f746:	9301      	str	r3, [sp, #4]
 800f748:	9100      	str	r1, [sp, #0]
 800f74a:	683b      	ldr	r3, [r7, #0]
 800f74c:	4632      	mov	r2, r6
 800f74e:	4629      	mov	r1, r5
 800f750:	4620      	mov	r0, r4
 800f752:	f001 fa75 	bl	8010c40 <xTaskCreateStatic>
 800f756:	4603      	mov	r3, r0
 800f758:	60fb      	str	r3, [r7, #12]
 800f75a:	e01c      	b.n	800f796 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	685c      	ldr	r4, [r3, #4]
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f768:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f770:	4618      	mov	r0, r3
 800f772:	f7ff ff88 	bl	800f686 <makeFreeRtosPriority>
 800f776:	4602      	mov	r2, r0
 800f778:	f107 030c 	add.w	r3, r7, #12
 800f77c:	9301      	str	r3, [sp, #4]
 800f77e:	9200      	str	r2, [sp, #0]
 800f780:	683b      	ldr	r3, [r7, #0]
 800f782:	4632      	mov	r2, r6
 800f784:	4629      	mov	r1, r5
 800f786:	4620      	mov	r0, r4
 800f788:	f001 faba 	bl	8010d00 <xTaskCreate>
 800f78c:	4603      	mov	r3, r0
 800f78e:	2b01      	cmp	r3, #1
 800f790:	d001      	beq.n	800f796 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800f792:	2300      	movs	r3, #0
 800f794:	e000      	b.n	800f798 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800f796:	68fb      	ldr	r3, [r7, #12]
}
 800f798:	4618      	mov	r0, r3
 800f79a:	3714      	adds	r7, #20
 800f79c:	46bd      	mov	sp, r7
 800f79e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f7a0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800f7a0:	b580      	push	{r7, lr}
 800f7a2:	b084      	sub	sp, #16
 800f7a4:	af00      	add	r7, sp, #0
 800f7a6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d001      	beq.n	800f7b6 <osDelay+0x16>
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	e000      	b.n	800f7b8 <osDelay+0x18>
 800f7b6:	2301      	movs	r3, #1
 800f7b8:	4618      	mov	r0, r3
 800f7ba:	f001 fbf1 	bl	8010fa0 <vTaskDelay>
  
  return osOK;
 800f7be:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800f7c0:	4618      	mov	r0, r3
 800f7c2:	3710      	adds	r7, #16
 800f7c4:	46bd      	mov	sp, r7
 800f7c6:	bd80      	pop	{r7, pc}

0800f7c8 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800f7c8:	b580      	push	{r7, lr}
 800f7ca:	b082      	sub	sp, #8
 800f7cc:	af00      	add	r7, sp, #0
 800f7ce:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	685b      	ldr	r3, [r3, #4]
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d007      	beq.n	800f7e8 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	685b      	ldr	r3, [r3, #4]
 800f7dc:	4619      	mov	r1, r3
 800f7de:	2001      	movs	r0, #1
 800f7e0:	f000 fc47 	bl	8010072 <xQueueCreateMutexStatic>
 800f7e4:	4603      	mov	r3, r0
 800f7e6:	e003      	b.n	800f7f0 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800f7e8:	2001      	movs	r0, #1
 800f7ea:	f000 fc2a 	bl	8010042 <xQueueCreateMutex>
 800f7ee:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800f7f0:	4618      	mov	r0, r3
 800f7f2:	3708      	adds	r7, #8
 800f7f4:	46bd      	mov	sp, r7
 800f7f6:	bd80      	pop	{r7, pc}

0800f7f8 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800f7f8:	b580      	push	{r7, lr}
 800f7fa:	b084      	sub	sp, #16
 800f7fc:	af00      	add	r7, sp, #0
 800f7fe:	6078      	str	r0, [r7, #4]
 800f800:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800f802:	2300      	movs	r3, #0
 800f804:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d101      	bne.n	800f810 <osMutexWait+0x18>
    return osErrorParameter;
 800f80c:	2380      	movs	r3, #128	@ 0x80
 800f80e:	e03a      	b.n	800f886 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800f810:	2300      	movs	r3, #0
 800f812:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800f814:	683b      	ldr	r3, [r7, #0]
 800f816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f81a:	d103      	bne.n	800f824 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800f81c:	f04f 33ff 	mov.w	r3, #4294967295
 800f820:	60fb      	str	r3, [r7, #12]
 800f822:	e009      	b.n	800f838 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800f824:	683b      	ldr	r3, [r7, #0]
 800f826:	2b00      	cmp	r3, #0
 800f828:	d006      	beq.n	800f838 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800f82a:	683b      	ldr	r3, [r7, #0]
 800f82c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	2b00      	cmp	r3, #0
 800f832:	d101      	bne.n	800f838 <osMutexWait+0x40>
      ticks = 1;
 800f834:	2301      	movs	r3, #1
 800f836:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800f838:	f7ff ff3d 	bl	800f6b6 <inHandlerMode>
 800f83c:	4603      	mov	r3, r0
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d017      	beq.n	800f872 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800f842:	f107 0308 	add.w	r3, r7, #8
 800f846:	461a      	mov	r2, r3
 800f848:	2100      	movs	r1, #0
 800f84a:	6878      	ldr	r0, [r7, #4]
 800f84c:	f001 f84e 	bl	80108ec <xQueueReceiveFromISR>
 800f850:	4603      	mov	r3, r0
 800f852:	2b01      	cmp	r3, #1
 800f854:	d001      	beq.n	800f85a <osMutexWait+0x62>
      return osErrorOS;
 800f856:	23ff      	movs	r3, #255	@ 0xff
 800f858:	e015      	b.n	800f886 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800f85a:	68bb      	ldr	r3, [r7, #8]
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d011      	beq.n	800f884 <osMutexWait+0x8c>
 800f860:	4b0b      	ldr	r3, [pc, #44]	@ (800f890 <osMutexWait+0x98>)
 800f862:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f866:	601a      	str	r2, [r3, #0]
 800f868:	f3bf 8f4f 	dsb	sy
 800f86c:	f3bf 8f6f 	isb	sy
 800f870:	e008      	b.n	800f884 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800f872:	68f9      	ldr	r1, [r7, #12]
 800f874:	6878      	ldr	r0, [r7, #4]
 800f876:	f000 ff29 	bl	80106cc <xQueueSemaphoreTake>
 800f87a:	4603      	mov	r3, r0
 800f87c:	2b01      	cmp	r3, #1
 800f87e:	d001      	beq.n	800f884 <osMutexWait+0x8c>
    return osErrorOS;
 800f880:	23ff      	movs	r3, #255	@ 0xff
 800f882:	e000      	b.n	800f886 <osMutexWait+0x8e>
  }
  
  return osOK;
 800f884:	2300      	movs	r3, #0
}
 800f886:	4618      	mov	r0, r3
 800f888:	3710      	adds	r7, #16
 800f88a:	46bd      	mov	sp, r7
 800f88c:	bd80      	pop	{r7, pc}
 800f88e:	bf00      	nop
 800f890:	e000ed04 	.word	0xe000ed04

0800f894 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800f894:	b580      	push	{r7, lr}
 800f896:	b084      	sub	sp, #16
 800f898:	af00      	add	r7, sp, #0
 800f89a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800f89c:	2300      	movs	r3, #0
 800f89e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800f8a0:	2300      	movs	r3, #0
 800f8a2:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800f8a4:	f7ff ff07 	bl	800f6b6 <inHandlerMode>
 800f8a8:	4603      	mov	r3, r0
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d016      	beq.n	800f8dc <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800f8ae:	f107 0308 	add.w	r3, r7, #8
 800f8b2:	4619      	mov	r1, r3
 800f8b4:	6878      	ldr	r0, [r7, #4]
 800f8b6:	f000 fd97 	bl	80103e8 <xQueueGiveFromISR>
 800f8ba:	4603      	mov	r3, r0
 800f8bc:	2b01      	cmp	r3, #1
 800f8be:	d001      	beq.n	800f8c4 <osMutexRelease+0x30>
      return osErrorOS;
 800f8c0:	23ff      	movs	r3, #255	@ 0xff
 800f8c2:	e017      	b.n	800f8f4 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800f8c4:	68bb      	ldr	r3, [r7, #8]
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d013      	beq.n	800f8f2 <osMutexRelease+0x5e>
 800f8ca:	4b0c      	ldr	r3, [pc, #48]	@ (800f8fc <osMutexRelease+0x68>)
 800f8cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f8d0:	601a      	str	r2, [r3, #0]
 800f8d2:	f3bf 8f4f 	dsb	sy
 800f8d6:	f3bf 8f6f 	isb	sy
 800f8da:	e00a      	b.n	800f8f2 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800f8dc:	2300      	movs	r3, #0
 800f8de:	2200      	movs	r2, #0
 800f8e0:	2100      	movs	r1, #0
 800f8e2:	6878      	ldr	r0, [r7, #4]
 800f8e4:	f000 fbe0 	bl	80100a8 <xQueueGenericSend>
 800f8e8:	4603      	mov	r3, r0
 800f8ea:	2b01      	cmp	r3, #1
 800f8ec:	d001      	beq.n	800f8f2 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800f8ee:	23ff      	movs	r3, #255	@ 0xff
 800f8f0:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800f8f2:	68fb      	ldr	r3, [r7, #12]
}
 800f8f4:	4618      	mov	r0, r3
 800f8f6:	3710      	adds	r7, #16
 800f8f8:	46bd      	mov	sp, r7
 800f8fa:	bd80      	pop	{r7, pc}
 800f8fc:	e000ed04 	.word	0xe000ed04

0800f900 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800f900:	b580      	push	{r7, lr}
 800f902:	b086      	sub	sp, #24
 800f904:	af02      	add	r7, sp, #8
 800f906:	6078      	str	r0, [r7, #4]
 800f908:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	685b      	ldr	r3, [r3, #4]
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d00f      	beq.n	800f932 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800f912:	683b      	ldr	r3, [r7, #0]
 800f914:	2b01      	cmp	r3, #1
 800f916:	d10a      	bne.n	800f92e <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	685b      	ldr	r3, [r3, #4]
 800f91c:	2203      	movs	r2, #3
 800f91e:	9200      	str	r2, [sp, #0]
 800f920:	2200      	movs	r2, #0
 800f922:	2100      	movs	r1, #0
 800f924:	2001      	movs	r0, #1
 800f926:	f000 fa9b 	bl	800fe60 <xQueueGenericCreateStatic>
 800f92a:	4603      	mov	r3, r0
 800f92c:	e016      	b.n	800f95c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800f92e:	2300      	movs	r3, #0
 800f930:	e014      	b.n	800f95c <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800f932:	683b      	ldr	r3, [r7, #0]
 800f934:	2b01      	cmp	r3, #1
 800f936:	d110      	bne.n	800f95a <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800f938:	2203      	movs	r2, #3
 800f93a:	2100      	movs	r1, #0
 800f93c:	2001      	movs	r0, #1
 800f93e:	f000 fb0c 	bl	800ff5a <xQueueGenericCreate>
 800f942:	60f8      	str	r0, [r7, #12]
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	2b00      	cmp	r3, #0
 800f948:	d005      	beq.n	800f956 <osSemaphoreCreate+0x56>
 800f94a:	2300      	movs	r3, #0
 800f94c:	2200      	movs	r2, #0
 800f94e:	2100      	movs	r1, #0
 800f950:	68f8      	ldr	r0, [r7, #12]
 800f952:	f000 fba9 	bl	80100a8 <xQueueGenericSend>
      return sema;
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	e000      	b.n	800f95c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800f95a:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800f95c:	4618      	mov	r0, r3
 800f95e:	3710      	adds	r7, #16
 800f960:	46bd      	mov	sp, r7
 800f962:	bd80      	pop	{r7, pc}

0800f964 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800f964:	b580      	push	{r7, lr}
 800f966:	b084      	sub	sp, #16
 800f968:	af00      	add	r7, sp, #0
 800f96a:	6078      	str	r0, [r7, #4]
 800f96c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800f96e:	2300      	movs	r3, #0
 800f970:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	2b00      	cmp	r3, #0
 800f976:	d101      	bne.n	800f97c <osSemaphoreWait+0x18>
    return osErrorParameter;
 800f978:	2380      	movs	r3, #128	@ 0x80
 800f97a:	e03a      	b.n	800f9f2 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800f97c:	2300      	movs	r3, #0
 800f97e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800f980:	683b      	ldr	r3, [r7, #0]
 800f982:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f986:	d103      	bne.n	800f990 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800f988:	f04f 33ff 	mov.w	r3, #4294967295
 800f98c:	60fb      	str	r3, [r7, #12]
 800f98e:	e009      	b.n	800f9a4 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800f990:	683b      	ldr	r3, [r7, #0]
 800f992:	2b00      	cmp	r3, #0
 800f994:	d006      	beq.n	800f9a4 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800f996:	683b      	ldr	r3, [r7, #0]
 800f998:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d101      	bne.n	800f9a4 <osSemaphoreWait+0x40>
      ticks = 1;
 800f9a0:	2301      	movs	r3, #1
 800f9a2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800f9a4:	f7ff fe87 	bl	800f6b6 <inHandlerMode>
 800f9a8:	4603      	mov	r3, r0
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d017      	beq.n	800f9de <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800f9ae:	f107 0308 	add.w	r3, r7, #8
 800f9b2:	461a      	mov	r2, r3
 800f9b4:	2100      	movs	r1, #0
 800f9b6:	6878      	ldr	r0, [r7, #4]
 800f9b8:	f000 ff98 	bl	80108ec <xQueueReceiveFromISR>
 800f9bc:	4603      	mov	r3, r0
 800f9be:	2b01      	cmp	r3, #1
 800f9c0:	d001      	beq.n	800f9c6 <osSemaphoreWait+0x62>
      return osErrorOS;
 800f9c2:	23ff      	movs	r3, #255	@ 0xff
 800f9c4:	e015      	b.n	800f9f2 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800f9c6:	68bb      	ldr	r3, [r7, #8]
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d011      	beq.n	800f9f0 <osSemaphoreWait+0x8c>
 800f9cc:	4b0b      	ldr	r3, [pc, #44]	@ (800f9fc <osSemaphoreWait+0x98>)
 800f9ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f9d2:	601a      	str	r2, [r3, #0]
 800f9d4:	f3bf 8f4f 	dsb	sy
 800f9d8:	f3bf 8f6f 	isb	sy
 800f9dc:	e008      	b.n	800f9f0 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800f9de:	68f9      	ldr	r1, [r7, #12]
 800f9e0:	6878      	ldr	r0, [r7, #4]
 800f9e2:	f000 fe73 	bl	80106cc <xQueueSemaphoreTake>
 800f9e6:	4603      	mov	r3, r0
 800f9e8:	2b01      	cmp	r3, #1
 800f9ea:	d001      	beq.n	800f9f0 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800f9ec:	23ff      	movs	r3, #255	@ 0xff
 800f9ee:	e000      	b.n	800f9f2 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800f9f0:	2300      	movs	r3, #0
}
 800f9f2:	4618      	mov	r0, r3
 800f9f4:	3710      	adds	r7, #16
 800f9f6:	46bd      	mov	sp, r7
 800f9f8:	bd80      	pop	{r7, pc}
 800f9fa:	bf00      	nop
 800f9fc:	e000ed04 	.word	0xe000ed04

0800fa00 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800fa00:	b580      	push	{r7, lr}
 800fa02:	b084      	sub	sp, #16
 800fa04:	af00      	add	r7, sp, #0
 800fa06:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800fa08:	2300      	movs	r3, #0
 800fa0a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800fa0c:	2300      	movs	r3, #0
 800fa0e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800fa10:	f7ff fe51 	bl	800f6b6 <inHandlerMode>
 800fa14:	4603      	mov	r3, r0
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d016      	beq.n	800fa48 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800fa1a:	f107 0308 	add.w	r3, r7, #8
 800fa1e:	4619      	mov	r1, r3
 800fa20:	6878      	ldr	r0, [r7, #4]
 800fa22:	f000 fce1 	bl	80103e8 <xQueueGiveFromISR>
 800fa26:	4603      	mov	r3, r0
 800fa28:	2b01      	cmp	r3, #1
 800fa2a:	d001      	beq.n	800fa30 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800fa2c:	23ff      	movs	r3, #255	@ 0xff
 800fa2e:	e017      	b.n	800fa60 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800fa30:	68bb      	ldr	r3, [r7, #8]
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d013      	beq.n	800fa5e <osSemaphoreRelease+0x5e>
 800fa36:	4b0c      	ldr	r3, [pc, #48]	@ (800fa68 <osSemaphoreRelease+0x68>)
 800fa38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fa3c:	601a      	str	r2, [r3, #0]
 800fa3e:	f3bf 8f4f 	dsb	sy
 800fa42:	f3bf 8f6f 	isb	sy
 800fa46:	e00a      	b.n	800fa5e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800fa48:	2300      	movs	r3, #0
 800fa4a:	2200      	movs	r2, #0
 800fa4c:	2100      	movs	r1, #0
 800fa4e:	6878      	ldr	r0, [r7, #4]
 800fa50:	f000 fb2a 	bl	80100a8 <xQueueGenericSend>
 800fa54:	4603      	mov	r3, r0
 800fa56:	2b01      	cmp	r3, #1
 800fa58:	d001      	beq.n	800fa5e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800fa5a:	23ff      	movs	r3, #255	@ 0xff
 800fa5c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800fa5e:	68fb      	ldr	r3, [r7, #12]
}
 800fa60:	4618      	mov	r0, r3
 800fa62:	3710      	adds	r7, #16
 800fa64:	46bd      	mov	sp, r7
 800fa66:	bd80      	pop	{r7, pc}
 800fa68:	e000ed04 	.word	0xe000ed04

0800fa6c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800fa6c:	b590      	push	{r4, r7, lr}
 800fa6e:	b085      	sub	sp, #20
 800fa70:	af02      	add	r7, sp, #8
 800fa72:	6078      	str	r0, [r7, #4]
 800fa74:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	689b      	ldr	r3, [r3, #8]
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d011      	beq.n	800faa2 <osMessageCreate+0x36>
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	68db      	ldr	r3, [r3, #12]
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d00d      	beq.n	800faa2 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	6818      	ldr	r0, [r3, #0]
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	6859      	ldr	r1, [r3, #4]
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	689a      	ldr	r2, [r3, #8]
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	68db      	ldr	r3, [r3, #12]
 800fa96:	2400      	movs	r4, #0
 800fa98:	9400      	str	r4, [sp, #0]
 800fa9a:	f000 f9e1 	bl	800fe60 <xQueueGenericCreateStatic>
 800fa9e:	4603      	mov	r3, r0
 800faa0:	e008      	b.n	800fab4 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	6818      	ldr	r0, [r3, #0]
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	685b      	ldr	r3, [r3, #4]
 800faaa:	2200      	movs	r2, #0
 800faac:	4619      	mov	r1, r3
 800faae:	f000 fa54 	bl	800ff5a <xQueueGenericCreate>
 800fab2:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800fab4:	4618      	mov	r0, r3
 800fab6:	370c      	adds	r7, #12
 800fab8:	46bd      	mov	sp, r7
 800faba:	bd90      	pop	{r4, r7, pc}

0800fabc <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800fabc:	b580      	push	{r7, lr}
 800fabe:	b086      	sub	sp, #24
 800fac0:	af00      	add	r7, sp, #0
 800fac2:	60f8      	str	r0, [r7, #12]
 800fac4:	60b9      	str	r1, [r7, #8]
 800fac6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800fac8:	2300      	movs	r3, #0
 800faca:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800fad0:	697b      	ldr	r3, [r7, #20]
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d101      	bne.n	800fada <osMessagePut+0x1e>
    ticks = 1;
 800fad6:	2301      	movs	r3, #1
 800fad8:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800fada:	f7ff fdec 	bl	800f6b6 <inHandlerMode>
 800fade:	4603      	mov	r3, r0
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d018      	beq.n	800fb16 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800fae4:	f107 0210 	add.w	r2, r7, #16
 800fae8:	f107 0108 	add.w	r1, r7, #8
 800faec:	2300      	movs	r3, #0
 800faee:	68f8      	ldr	r0, [r7, #12]
 800faf0:	f000 fbdc 	bl	80102ac <xQueueGenericSendFromISR>
 800faf4:	4603      	mov	r3, r0
 800faf6:	2b01      	cmp	r3, #1
 800faf8:	d001      	beq.n	800fafe <osMessagePut+0x42>
      return osErrorOS;
 800fafa:	23ff      	movs	r3, #255	@ 0xff
 800fafc:	e018      	b.n	800fb30 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800fafe:	693b      	ldr	r3, [r7, #16]
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d014      	beq.n	800fb2e <osMessagePut+0x72>
 800fb04:	4b0c      	ldr	r3, [pc, #48]	@ (800fb38 <osMessagePut+0x7c>)
 800fb06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fb0a:	601a      	str	r2, [r3, #0]
 800fb0c:	f3bf 8f4f 	dsb	sy
 800fb10:	f3bf 8f6f 	isb	sy
 800fb14:	e00b      	b.n	800fb2e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800fb16:	f107 0108 	add.w	r1, r7, #8
 800fb1a:	2300      	movs	r3, #0
 800fb1c:	697a      	ldr	r2, [r7, #20]
 800fb1e:	68f8      	ldr	r0, [r7, #12]
 800fb20:	f000 fac2 	bl	80100a8 <xQueueGenericSend>
 800fb24:	4603      	mov	r3, r0
 800fb26:	2b01      	cmp	r3, #1
 800fb28:	d001      	beq.n	800fb2e <osMessagePut+0x72>
      return osErrorOS;
 800fb2a:	23ff      	movs	r3, #255	@ 0xff
 800fb2c:	e000      	b.n	800fb30 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800fb2e:	2300      	movs	r3, #0
}
 800fb30:	4618      	mov	r0, r3
 800fb32:	3718      	adds	r7, #24
 800fb34:	46bd      	mov	sp, r7
 800fb36:	bd80      	pop	{r7, pc}
 800fb38:	e000ed04 	.word	0xe000ed04

0800fb3c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800fb3c:	b590      	push	{r4, r7, lr}
 800fb3e:	b08b      	sub	sp, #44	@ 0x2c
 800fb40:	af00      	add	r7, sp, #0
 800fb42:	60f8      	str	r0, [r7, #12]
 800fb44:	60b9      	str	r1, [r7, #8]
 800fb46:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800fb48:	68bb      	ldr	r3, [r7, #8]
 800fb4a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800fb4c:	2300      	movs	r3, #0
 800fb4e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800fb50:	68bb      	ldr	r3, [r7, #8]
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d10a      	bne.n	800fb6c <osMessageGet+0x30>
    event.status = osErrorParameter;
 800fb56:	2380      	movs	r3, #128	@ 0x80
 800fb58:	617b      	str	r3, [r7, #20]
    return event;
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	461c      	mov	r4, r3
 800fb5e:	f107 0314 	add.w	r3, r7, #20
 800fb62:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fb66:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800fb6a:	e054      	b.n	800fc16 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800fb6c:	2300      	movs	r3, #0
 800fb6e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800fb70:	2300      	movs	r3, #0
 800fb72:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb7a:	d103      	bne.n	800fb84 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800fb7c:	f04f 33ff 	mov.w	r3, #4294967295
 800fb80:	627b      	str	r3, [r7, #36]	@ 0x24
 800fb82:	e009      	b.n	800fb98 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d006      	beq.n	800fb98 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 800fb8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d101      	bne.n	800fb98 <osMessageGet+0x5c>
      ticks = 1;
 800fb94:	2301      	movs	r3, #1
 800fb96:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 800fb98:	f7ff fd8d 	bl	800f6b6 <inHandlerMode>
 800fb9c:	4603      	mov	r3, r0
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d01c      	beq.n	800fbdc <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800fba2:	f107 0220 	add.w	r2, r7, #32
 800fba6:	f107 0314 	add.w	r3, r7, #20
 800fbaa:	3304      	adds	r3, #4
 800fbac:	4619      	mov	r1, r3
 800fbae:	68b8      	ldr	r0, [r7, #8]
 800fbb0:	f000 fe9c 	bl	80108ec <xQueueReceiveFromISR>
 800fbb4:	4603      	mov	r3, r0
 800fbb6:	2b01      	cmp	r3, #1
 800fbb8:	d102      	bne.n	800fbc0 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800fbba:	2310      	movs	r3, #16
 800fbbc:	617b      	str	r3, [r7, #20]
 800fbbe:	e001      	b.n	800fbc4 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800fbc0:	2300      	movs	r3, #0
 800fbc2:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800fbc4:	6a3b      	ldr	r3, [r7, #32]
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d01d      	beq.n	800fc06 <osMessageGet+0xca>
 800fbca:	4b15      	ldr	r3, [pc, #84]	@ (800fc20 <osMessageGet+0xe4>)
 800fbcc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fbd0:	601a      	str	r2, [r3, #0]
 800fbd2:	f3bf 8f4f 	dsb	sy
 800fbd6:	f3bf 8f6f 	isb	sy
 800fbda:	e014      	b.n	800fc06 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800fbdc:	f107 0314 	add.w	r3, r7, #20
 800fbe0:	3304      	adds	r3, #4
 800fbe2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fbe4:	4619      	mov	r1, r3
 800fbe6:	68b8      	ldr	r0, [r7, #8]
 800fbe8:	f000 fc8e 	bl	8010508 <xQueueReceive>
 800fbec:	4603      	mov	r3, r0
 800fbee:	2b01      	cmp	r3, #1
 800fbf0:	d102      	bne.n	800fbf8 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800fbf2:	2310      	movs	r3, #16
 800fbf4:	617b      	str	r3, [r7, #20]
 800fbf6:	e006      	b.n	800fc06 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800fbf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d101      	bne.n	800fc02 <osMessageGet+0xc6>
 800fbfe:	2300      	movs	r3, #0
 800fc00:	e000      	b.n	800fc04 <osMessageGet+0xc8>
 800fc02:	2340      	movs	r3, #64	@ 0x40
 800fc04:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	461c      	mov	r4, r3
 800fc0a:	f107 0314 	add.w	r3, r7, #20
 800fc0e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fc12:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800fc16:	68f8      	ldr	r0, [r7, #12]
 800fc18:	372c      	adds	r7, #44	@ 0x2c
 800fc1a:	46bd      	mov	sp, r7
 800fc1c:	bd90      	pop	{r4, r7, pc}
 800fc1e:	bf00      	nop
 800fc20:	e000ed04 	.word	0xe000ed04

0800fc24 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800fc24:	b480      	push	{r7}
 800fc26:	b083      	sub	sp, #12
 800fc28:	af00      	add	r7, sp, #0
 800fc2a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	f103 0208 	add.w	r2, r3, #8
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	f04f 32ff 	mov.w	r2, #4294967295
 800fc3c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	f103 0208 	add.w	r2, r3, #8
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	f103 0208 	add.w	r2, r3, #8
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	2200      	movs	r2, #0
 800fc56:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800fc58:	bf00      	nop
 800fc5a:	370c      	adds	r7, #12
 800fc5c:	46bd      	mov	sp, r7
 800fc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc62:	4770      	bx	lr

0800fc64 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800fc64:	b480      	push	{r7}
 800fc66:	b083      	sub	sp, #12
 800fc68:	af00      	add	r7, sp, #0
 800fc6a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	2200      	movs	r2, #0
 800fc70:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800fc72:	bf00      	nop
 800fc74:	370c      	adds	r7, #12
 800fc76:	46bd      	mov	sp, r7
 800fc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc7c:	4770      	bx	lr

0800fc7e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800fc7e:	b480      	push	{r7}
 800fc80:	b085      	sub	sp, #20
 800fc82:	af00      	add	r7, sp, #0
 800fc84:	6078      	str	r0, [r7, #4]
 800fc86:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	685b      	ldr	r3, [r3, #4]
 800fc8c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800fc8e:	683b      	ldr	r3, [r7, #0]
 800fc90:	68fa      	ldr	r2, [r7, #12]
 800fc92:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	689a      	ldr	r2, [r3, #8]
 800fc98:	683b      	ldr	r3, [r7, #0]
 800fc9a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	689b      	ldr	r3, [r3, #8]
 800fca0:	683a      	ldr	r2, [r7, #0]
 800fca2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	683a      	ldr	r2, [r7, #0]
 800fca8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800fcaa:	683b      	ldr	r3, [r7, #0]
 800fcac:	687a      	ldr	r2, [r7, #4]
 800fcae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	1c5a      	adds	r2, r3, #1
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	601a      	str	r2, [r3, #0]
}
 800fcba:	bf00      	nop
 800fcbc:	3714      	adds	r7, #20
 800fcbe:	46bd      	mov	sp, r7
 800fcc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcc4:	4770      	bx	lr

0800fcc6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800fcc6:	b480      	push	{r7}
 800fcc8:	b085      	sub	sp, #20
 800fcca:	af00      	add	r7, sp, #0
 800fccc:	6078      	str	r0, [r7, #4]
 800fcce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800fcd0:	683b      	ldr	r3, [r7, #0]
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800fcd6:	68bb      	ldr	r3, [r7, #8]
 800fcd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fcdc:	d103      	bne.n	800fce6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	691b      	ldr	r3, [r3, #16]
 800fce2:	60fb      	str	r3, [r7, #12]
 800fce4:	e00c      	b.n	800fd00 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	3308      	adds	r3, #8
 800fcea:	60fb      	str	r3, [r7, #12]
 800fcec:	e002      	b.n	800fcf4 <vListInsert+0x2e>
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	685b      	ldr	r3, [r3, #4]
 800fcf2:	60fb      	str	r3, [r7, #12]
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	685b      	ldr	r3, [r3, #4]
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	68ba      	ldr	r2, [r7, #8]
 800fcfc:	429a      	cmp	r2, r3
 800fcfe:	d2f6      	bcs.n	800fcee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	685a      	ldr	r2, [r3, #4]
 800fd04:	683b      	ldr	r3, [r7, #0]
 800fd06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800fd08:	683b      	ldr	r3, [r7, #0]
 800fd0a:	685b      	ldr	r3, [r3, #4]
 800fd0c:	683a      	ldr	r2, [r7, #0]
 800fd0e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800fd10:	683b      	ldr	r3, [r7, #0]
 800fd12:	68fa      	ldr	r2, [r7, #12]
 800fd14:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	683a      	ldr	r2, [r7, #0]
 800fd1a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800fd1c:	683b      	ldr	r3, [r7, #0]
 800fd1e:	687a      	ldr	r2, [r7, #4]
 800fd20:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	1c5a      	adds	r2, r3, #1
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	601a      	str	r2, [r3, #0]
}
 800fd2c:	bf00      	nop
 800fd2e:	3714      	adds	r7, #20
 800fd30:	46bd      	mov	sp, r7
 800fd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd36:	4770      	bx	lr

0800fd38 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800fd38:	b480      	push	{r7}
 800fd3a:	b085      	sub	sp, #20
 800fd3c:	af00      	add	r7, sp, #0
 800fd3e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	691b      	ldr	r3, [r3, #16]
 800fd44:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	685b      	ldr	r3, [r3, #4]
 800fd4a:	687a      	ldr	r2, [r7, #4]
 800fd4c:	6892      	ldr	r2, [r2, #8]
 800fd4e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	689b      	ldr	r3, [r3, #8]
 800fd54:	687a      	ldr	r2, [r7, #4]
 800fd56:	6852      	ldr	r2, [r2, #4]
 800fd58:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800fd5a:	68fb      	ldr	r3, [r7, #12]
 800fd5c:	685b      	ldr	r3, [r3, #4]
 800fd5e:	687a      	ldr	r2, [r7, #4]
 800fd60:	429a      	cmp	r2, r3
 800fd62:	d103      	bne.n	800fd6c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	689a      	ldr	r2, [r3, #8]
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	2200      	movs	r2, #0
 800fd70:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800fd72:	68fb      	ldr	r3, [r7, #12]
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	1e5a      	subs	r2, r3, #1
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	681b      	ldr	r3, [r3, #0]
}
 800fd80:	4618      	mov	r0, r3
 800fd82:	3714      	adds	r7, #20
 800fd84:	46bd      	mov	sp, r7
 800fd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd8a:	4770      	bx	lr

0800fd8c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800fd8c:	b580      	push	{r7, lr}
 800fd8e:	b084      	sub	sp, #16
 800fd90:	af00      	add	r7, sp, #0
 800fd92:	6078      	str	r0, [r7, #4]
 800fd94:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d10b      	bne.n	800fdb8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800fda0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fda4:	f383 8811 	msr	BASEPRI, r3
 800fda8:	f3bf 8f6f 	isb	sy
 800fdac:	f3bf 8f4f 	dsb	sy
 800fdb0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800fdb2:	bf00      	nop
 800fdb4:	bf00      	nop
 800fdb6:	e7fd      	b.n	800fdb4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800fdb8:	f002 f8be 	bl	8011f38 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	681a      	ldr	r2, [r3, #0]
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fdc4:	68f9      	ldr	r1, [r7, #12]
 800fdc6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800fdc8:	fb01 f303 	mul.w	r3, r1, r3
 800fdcc:	441a      	add	r2, r3
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	2200      	movs	r2, #0
 800fdd6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	681a      	ldr	r2, [r3, #0]
 800fddc:	68fb      	ldr	r3, [r7, #12]
 800fdde:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	681a      	ldr	r2, [r3, #0]
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fde8:	3b01      	subs	r3, #1
 800fdea:	68f9      	ldr	r1, [r7, #12]
 800fdec:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800fdee:	fb01 f303 	mul.w	r3, r1, r3
 800fdf2:	441a      	add	r2, r3
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	22ff      	movs	r2, #255	@ 0xff
 800fdfc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	22ff      	movs	r2, #255	@ 0xff
 800fe04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800fe08:	683b      	ldr	r3, [r7, #0]
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d114      	bne.n	800fe38 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	691b      	ldr	r3, [r3, #16]
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d01a      	beq.n	800fe4c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	3310      	adds	r3, #16
 800fe1a:	4618      	mov	r0, r3
 800fe1c:	f001 fb72 	bl	8011504 <xTaskRemoveFromEventList>
 800fe20:	4603      	mov	r3, r0
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d012      	beq.n	800fe4c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800fe26:	4b0d      	ldr	r3, [pc, #52]	@ (800fe5c <xQueueGenericReset+0xd0>)
 800fe28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fe2c:	601a      	str	r2, [r3, #0]
 800fe2e:	f3bf 8f4f 	dsb	sy
 800fe32:	f3bf 8f6f 	isb	sy
 800fe36:	e009      	b.n	800fe4c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	3310      	adds	r3, #16
 800fe3c:	4618      	mov	r0, r3
 800fe3e:	f7ff fef1 	bl	800fc24 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	3324      	adds	r3, #36	@ 0x24
 800fe46:	4618      	mov	r0, r3
 800fe48:	f7ff feec 	bl	800fc24 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800fe4c:	f002 f8a6 	bl	8011f9c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800fe50:	2301      	movs	r3, #1
}
 800fe52:	4618      	mov	r0, r3
 800fe54:	3710      	adds	r7, #16
 800fe56:	46bd      	mov	sp, r7
 800fe58:	bd80      	pop	{r7, pc}
 800fe5a:	bf00      	nop
 800fe5c:	e000ed04 	.word	0xe000ed04

0800fe60 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800fe60:	b580      	push	{r7, lr}
 800fe62:	b08e      	sub	sp, #56	@ 0x38
 800fe64:	af02      	add	r7, sp, #8
 800fe66:	60f8      	str	r0, [r7, #12]
 800fe68:	60b9      	str	r1, [r7, #8]
 800fe6a:	607a      	str	r2, [r7, #4]
 800fe6c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d10b      	bne.n	800fe8c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800fe74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe78:	f383 8811 	msr	BASEPRI, r3
 800fe7c:	f3bf 8f6f 	isb	sy
 800fe80:	f3bf 8f4f 	dsb	sy
 800fe84:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800fe86:	bf00      	nop
 800fe88:	bf00      	nop
 800fe8a:	e7fd      	b.n	800fe88 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800fe8c:	683b      	ldr	r3, [r7, #0]
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d10b      	bne.n	800feaa <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800fe92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe96:	f383 8811 	msr	BASEPRI, r3
 800fe9a:	f3bf 8f6f 	isb	sy
 800fe9e:	f3bf 8f4f 	dsb	sy
 800fea2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800fea4:	bf00      	nop
 800fea6:	bf00      	nop
 800fea8:	e7fd      	b.n	800fea6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	2b00      	cmp	r3, #0
 800feae:	d002      	beq.n	800feb6 <xQueueGenericCreateStatic+0x56>
 800feb0:	68bb      	ldr	r3, [r7, #8]
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d001      	beq.n	800feba <xQueueGenericCreateStatic+0x5a>
 800feb6:	2301      	movs	r3, #1
 800feb8:	e000      	b.n	800febc <xQueueGenericCreateStatic+0x5c>
 800feba:	2300      	movs	r3, #0
 800febc:	2b00      	cmp	r3, #0
 800febe:	d10b      	bne.n	800fed8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800fec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fec4:	f383 8811 	msr	BASEPRI, r3
 800fec8:	f3bf 8f6f 	isb	sy
 800fecc:	f3bf 8f4f 	dsb	sy
 800fed0:	623b      	str	r3, [r7, #32]
}
 800fed2:	bf00      	nop
 800fed4:	bf00      	nop
 800fed6:	e7fd      	b.n	800fed4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d102      	bne.n	800fee4 <xQueueGenericCreateStatic+0x84>
 800fede:	68bb      	ldr	r3, [r7, #8]
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d101      	bne.n	800fee8 <xQueueGenericCreateStatic+0x88>
 800fee4:	2301      	movs	r3, #1
 800fee6:	e000      	b.n	800feea <xQueueGenericCreateStatic+0x8a>
 800fee8:	2300      	movs	r3, #0
 800feea:	2b00      	cmp	r3, #0
 800feec:	d10b      	bne.n	800ff06 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800feee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fef2:	f383 8811 	msr	BASEPRI, r3
 800fef6:	f3bf 8f6f 	isb	sy
 800fefa:	f3bf 8f4f 	dsb	sy
 800fefe:	61fb      	str	r3, [r7, #28]
}
 800ff00:	bf00      	nop
 800ff02:	bf00      	nop
 800ff04:	e7fd      	b.n	800ff02 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ff06:	2348      	movs	r3, #72	@ 0x48
 800ff08:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ff0a:	697b      	ldr	r3, [r7, #20]
 800ff0c:	2b48      	cmp	r3, #72	@ 0x48
 800ff0e:	d00b      	beq.n	800ff28 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800ff10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff14:	f383 8811 	msr	BASEPRI, r3
 800ff18:	f3bf 8f6f 	isb	sy
 800ff1c:	f3bf 8f4f 	dsb	sy
 800ff20:	61bb      	str	r3, [r7, #24]
}
 800ff22:	bf00      	nop
 800ff24:	bf00      	nop
 800ff26:	e7fd      	b.n	800ff24 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ff28:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ff2a:	683b      	ldr	r3, [r7, #0]
 800ff2c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800ff2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d00d      	beq.n	800ff50 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ff34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff36:	2201      	movs	r2, #1
 800ff38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ff3c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800ff40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff42:	9300      	str	r3, [sp, #0]
 800ff44:	4613      	mov	r3, r2
 800ff46:	687a      	ldr	r2, [r7, #4]
 800ff48:	68b9      	ldr	r1, [r7, #8]
 800ff4a:	68f8      	ldr	r0, [r7, #12]
 800ff4c:	f000 f840 	bl	800ffd0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ff50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800ff52:	4618      	mov	r0, r3
 800ff54:	3730      	adds	r7, #48	@ 0x30
 800ff56:	46bd      	mov	sp, r7
 800ff58:	bd80      	pop	{r7, pc}

0800ff5a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ff5a:	b580      	push	{r7, lr}
 800ff5c:	b08a      	sub	sp, #40	@ 0x28
 800ff5e:	af02      	add	r7, sp, #8
 800ff60:	60f8      	str	r0, [r7, #12]
 800ff62:	60b9      	str	r1, [r7, #8]
 800ff64:	4613      	mov	r3, r2
 800ff66:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d10b      	bne.n	800ff86 <xQueueGenericCreate+0x2c>
	__asm volatile
 800ff6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff72:	f383 8811 	msr	BASEPRI, r3
 800ff76:	f3bf 8f6f 	isb	sy
 800ff7a:	f3bf 8f4f 	dsb	sy
 800ff7e:	613b      	str	r3, [r7, #16]
}
 800ff80:	bf00      	nop
 800ff82:	bf00      	nop
 800ff84:	e7fd      	b.n	800ff82 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ff86:	68fb      	ldr	r3, [r7, #12]
 800ff88:	68ba      	ldr	r2, [r7, #8]
 800ff8a:	fb02 f303 	mul.w	r3, r2, r3
 800ff8e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ff90:	69fb      	ldr	r3, [r7, #28]
 800ff92:	3348      	adds	r3, #72	@ 0x48
 800ff94:	4618      	mov	r0, r3
 800ff96:	f002 f8f1 	bl	801217c <pvPortMalloc>
 800ff9a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ff9c:	69bb      	ldr	r3, [r7, #24]
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d011      	beq.n	800ffc6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ffa2:	69bb      	ldr	r3, [r7, #24]
 800ffa4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ffa6:	697b      	ldr	r3, [r7, #20]
 800ffa8:	3348      	adds	r3, #72	@ 0x48
 800ffaa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ffac:	69bb      	ldr	r3, [r7, #24]
 800ffae:	2200      	movs	r2, #0
 800ffb0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ffb4:	79fa      	ldrb	r2, [r7, #7]
 800ffb6:	69bb      	ldr	r3, [r7, #24]
 800ffb8:	9300      	str	r3, [sp, #0]
 800ffba:	4613      	mov	r3, r2
 800ffbc:	697a      	ldr	r2, [r7, #20]
 800ffbe:	68b9      	ldr	r1, [r7, #8]
 800ffc0:	68f8      	ldr	r0, [r7, #12]
 800ffc2:	f000 f805 	bl	800ffd0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ffc6:	69bb      	ldr	r3, [r7, #24]
	}
 800ffc8:	4618      	mov	r0, r3
 800ffca:	3720      	adds	r7, #32
 800ffcc:	46bd      	mov	sp, r7
 800ffce:	bd80      	pop	{r7, pc}

0800ffd0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ffd0:	b580      	push	{r7, lr}
 800ffd2:	b084      	sub	sp, #16
 800ffd4:	af00      	add	r7, sp, #0
 800ffd6:	60f8      	str	r0, [r7, #12]
 800ffd8:	60b9      	str	r1, [r7, #8]
 800ffda:	607a      	str	r2, [r7, #4]
 800ffdc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ffde:	68bb      	ldr	r3, [r7, #8]
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d103      	bne.n	800ffec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ffe4:	69bb      	ldr	r3, [r7, #24]
 800ffe6:	69ba      	ldr	r2, [r7, #24]
 800ffe8:	601a      	str	r2, [r3, #0]
 800ffea:	e002      	b.n	800fff2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ffec:	69bb      	ldr	r3, [r7, #24]
 800ffee:	687a      	ldr	r2, [r7, #4]
 800fff0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800fff2:	69bb      	ldr	r3, [r7, #24]
 800fff4:	68fa      	ldr	r2, [r7, #12]
 800fff6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800fff8:	69bb      	ldr	r3, [r7, #24]
 800fffa:	68ba      	ldr	r2, [r7, #8]
 800fffc:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800fffe:	2101      	movs	r1, #1
 8010000:	69b8      	ldr	r0, [r7, #24]
 8010002:	f7ff fec3 	bl	800fd8c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8010006:	bf00      	nop
 8010008:	3710      	adds	r7, #16
 801000a:	46bd      	mov	sp, r7
 801000c:	bd80      	pop	{r7, pc}

0801000e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 801000e:	b580      	push	{r7, lr}
 8010010:	b082      	sub	sp, #8
 8010012:	af00      	add	r7, sp, #0
 8010014:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	2b00      	cmp	r3, #0
 801001a:	d00e      	beq.n	801003a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	2200      	movs	r2, #0
 8010020:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	2200      	movs	r2, #0
 8010026:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	2200      	movs	r2, #0
 801002c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801002e:	2300      	movs	r3, #0
 8010030:	2200      	movs	r2, #0
 8010032:	2100      	movs	r1, #0
 8010034:	6878      	ldr	r0, [r7, #4]
 8010036:	f000 f837 	bl	80100a8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 801003a:	bf00      	nop
 801003c:	3708      	adds	r7, #8
 801003e:	46bd      	mov	sp, r7
 8010040:	bd80      	pop	{r7, pc}

08010042 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8010042:	b580      	push	{r7, lr}
 8010044:	b086      	sub	sp, #24
 8010046:	af00      	add	r7, sp, #0
 8010048:	4603      	mov	r3, r0
 801004a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801004c:	2301      	movs	r3, #1
 801004e:	617b      	str	r3, [r7, #20]
 8010050:	2300      	movs	r3, #0
 8010052:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8010054:	79fb      	ldrb	r3, [r7, #7]
 8010056:	461a      	mov	r2, r3
 8010058:	6939      	ldr	r1, [r7, #16]
 801005a:	6978      	ldr	r0, [r7, #20]
 801005c:	f7ff ff7d 	bl	800ff5a <xQueueGenericCreate>
 8010060:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8010062:	68f8      	ldr	r0, [r7, #12]
 8010064:	f7ff ffd3 	bl	801000e <prvInitialiseMutex>

		return xNewQueue;
 8010068:	68fb      	ldr	r3, [r7, #12]
	}
 801006a:	4618      	mov	r0, r3
 801006c:	3718      	adds	r7, #24
 801006e:	46bd      	mov	sp, r7
 8010070:	bd80      	pop	{r7, pc}

08010072 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8010072:	b580      	push	{r7, lr}
 8010074:	b088      	sub	sp, #32
 8010076:	af02      	add	r7, sp, #8
 8010078:	4603      	mov	r3, r0
 801007a:	6039      	str	r1, [r7, #0]
 801007c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801007e:	2301      	movs	r3, #1
 8010080:	617b      	str	r3, [r7, #20]
 8010082:	2300      	movs	r3, #0
 8010084:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8010086:	79fb      	ldrb	r3, [r7, #7]
 8010088:	9300      	str	r3, [sp, #0]
 801008a:	683b      	ldr	r3, [r7, #0]
 801008c:	2200      	movs	r2, #0
 801008e:	6939      	ldr	r1, [r7, #16]
 8010090:	6978      	ldr	r0, [r7, #20]
 8010092:	f7ff fee5 	bl	800fe60 <xQueueGenericCreateStatic>
 8010096:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8010098:	68f8      	ldr	r0, [r7, #12]
 801009a:	f7ff ffb8 	bl	801000e <prvInitialiseMutex>

		return xNewQueue;
 801009e:	68fb      	ldr	r3, [r7, #12]
	}
 80100a0:	4618      	mov	r0, r3
 80100a2:	3718      	adds	r7, #24
 80100a4:	46bd      	mov	sp, r7
 80100a6:	bd80      	pop	{r7, pc}

080100a8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80100a8:	b580      	push	{r7, lr}
 80100aa:	b08e      	sub	sp, #56	@ 0x38
 80100ac:	af00      	add	r7, sp, #0
 80100ae:	60f8      	str	r0, [r7, #12]
 80100b0:	60b9      	str	r1, [r7, #8]
 80100b2:	607a      	str	r2, [r7, #4]
 80100b4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80100b6:	2300      	movs	r3, #0
 80100b8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80100be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d10b      	bne.n	80100dc <xQueueGenericSend+0x34>
	__asm volatile
 80100c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100c8:	f383 8811 	msr	BASEPRI, r3
 80100cc:	f3bf 8f6f 	isb	sy
 80100d0:	f3bf 8f4f 	dsb	sy
 80100d4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80100d6:	bf00      	nop
 80100d8:	bf00      	nop
 80100da:	e7fd      	b.n	80100d8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80100dc:	68bb      	ldr	r3, [r7, #8]
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d103      	bne.n	80100ea <xQueueGenericSend+0x42>
 80100e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80100e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d101      	bne.n	80100ee <xQueueGenericSend+0x46>
 80100ea:	2301      	movs	r3, #1
 80100ec:	e000      	b.n	80100f0 <xQueueGenericSend+0x48>
 80100ee:	2300      	movs	r3, #0
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d10b      	bne.n	801010c <xQueueGenericSend+0x64>
	__asm volatile
 80100f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100f8:	f383 8811 	msr	BASEPRI, r3
 80100fc:	f3bf 8f6f 	isb	sy
 8010100:	f3bf 8f4f 	dsb	sy
 8010104:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8010106:	bf00      	nop
 8010108:	bf00      	nop
 801010a:	e7fd      	b.n	8010108 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801010c:	683b      	ldr	r3, [r7, #0]
 801010e:	2b02      	cmp	r3, #2
 8010110:	d103      	bne.n	801011a <xQueueGenericSend+0x72>
 8010112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010114:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010116:	2b01      	cmp	r3, #1
 8010118:	d101      	bne.n	801011e <xQueueGenericSend+0x76>
 801011a:	2301      	movs	r3, #1
 801011c:	e000      	b.n	8010120 <xQueueGenericSend+0x78>
 801011e:	2300      	movs	r3, #0
 8010120:	2b00      	cmp	r3, #0
 8010122:	d10b      	bne.n	801013c <xQueueGenericSend+0x94>
	__asm volatile
 8010124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010128:	f383 8811 	msr	BASEPRI, r3
 801012c:	f3bf 8f6f 	isb	sy
 8010130:	f3bf 8f4f 	dsb	sy
 8010134:	623b      	str	r3, [r7, #32]
}
 8010136:	bf00      	nop
 8010138:	bf00      	nop
 801013a:	e7fd      	b.n	8010138 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801013c:	f001 fba8 	bl	8011890 <xTaskGetSchedulerState>
 8010140:	4603      	mov	r3, r0
 8010142:	2b00      	cmp	r3, #0
 8010144:	d102      	bne.n	801014c <xQueueGenericSend+0xa4>
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	2b00      	cmp	r3, #0
 801014a:	d101      	bne.n	8010150 <xQueueGenericSend+0xa8>
 801014c:	2301      	movs	r3, #1
 801014e:	e000      	b.n	8010152 <xQueueGenericSend+0xaa>
 8010150:	2300      	movs	r3, #0
 8010152:	2b00      	cmp	r3, #0
 8010154:	d10b      	bne.n	801016e <xQueueGenericSend+0xc6>
	__asm volatile
 8010156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801015a:	f383 8811 	msr	BASEPRI, r3
 801015e:	f3bf 8f6f 	isb	sy
 8010162:	f3bf 8f4f 	dsb	sy
 8010166:	61fb      	str	r3, [r7, #28]
}
 8010168:	bf00      	nop
 801016a:	bf00      	nop
 801016c:	e7fd      	b.n	801016a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801016e:	f001 fee3 	bl	8011f38 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010174:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010178:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801017a:	429a      	cmp	r2, r3
 801017c:	d302      	bcc.n	8010184 <xQueueGenericSend+0xdc>
 801017e:	683b      	ldr	r3, [r7, #0]
 8010180:	2b02      	cmp	r3, #2
 8010182:	d129      	bne.n	80101d8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010184:	683a      	ldr	r2, [r7, #0]
 8010186:	68b9      	ldr	r1, [r7, #8]
 8010188:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801018a:	f000 fc49 	bl	8010a20 <prvCopyDataToQueue>
 801018e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010194:	2b00      	cmp	r3, #0
 8010196:	d010      	beq.n	80101ba <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801019a:	3324      	adds	r3, #36	@ 0x24
 801019c:	4618      	mov	r0, r3
 801019e:	f001 f9b1 	bl	8011504 <xTaskRemoveFromEventList>
 80101a2:	4603      	mov	r3, r0
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d013      	beq.n	80101d0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80101a8:	4b3f      	ldr	r3, [pc, #252]	@ (80102a8 <xQueueGenericSend+0x200>)
 80101aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80101ae:	601a      	str	r2, [r3, #0]
 80101b0:	f3bf 8f4f 	dsb	sy
 80101b4:	f3bf 8f6f 	isb	sy
 80101b8:	e00a      	b.n	80101d0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80101ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d007      	beq.n	80101d0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80101c0:	4b39      	ldr	r3, [pc, #228]	@ (80102a8 <xQueueGenericSend+0x200>)
 80101c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80101c6:	601a      	str	r2, [r3, #0]
 80101c8:	f3bf 8f4f 	dsb	sy
 80101cc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80101d0:	f001 fee4 	bl	8011f9c <vPortExitCritical>
				return pdPASS;
 80101d4:	2301      	movs	r3, #1
 80101d6:	e063      	b.n	80102a0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d103      	bne.n	80101e6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80101de:	f001 fedd 	bl	8011f9c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80101e2:	2300      	movs	r3, #0
 80101e4:	e05c      	b.n	80102a0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80101e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d106      	bne.n	80101fa <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80101ec:	f107 0314 	add.w	r3, r7, #20
 80101f0:	4618      	mov	r0, r3
 80101f2:	f001 f9eb 	bl	80115cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80101f6:	2301      	movs	r3, #1
 80101f8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80101fa:	f001 fecf 	bl	8011f9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80101fe:	f000 ff6f 	bl	80110e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010202:	f001 fe99 	bl	8011f38 <vPortEnterCritical>
 8010206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010208:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801020c:	b25b      	sxtb	r3, r3
 801020e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010212:	d103      	bne.n	801021c <xQueueGenericSend+0x174>
 8010214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010216:	2200      	movs	r2, #0
 8010218:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801021c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801021e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010222:	b25b      	sxtb	r3, r3
 8010224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010228:	d103      	bne.n	8010232 <xQueueGenericSend+0x18a>
 801022a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801022c:	2200      	movs	r2, #0
 801022e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010232:	f001 feb3 	bl	8011f9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010236:	1d3a      	adds	r2, r7, #4
 8010238:	f107 0314 	add.w	r3, r7, #20
 801023c:	4611      	mov	r1, r2
 801023e:	4618      	mov	r0, r3
 8010240:	f001 f9da 	bl	80115f8 <xTaskCheckForTimeOut>
 8010244:	4603      	mov	r3, r0
 8010246:	2b00      	cmp	r3, #0
 8010248:	d124      	bne.n	8010294 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801024a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801024c:	f000 fce0 	bl	8010c10 <prvIsQueueFull>
 8010250:	4603      	mov	r3, r0
 8010252:	2b00      	cmp	r3, #0
 8010254:	d018      	beq.n	8010288 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010258:	3310      	adds	r3, #16
 801025a:	687a      	ldr	r2, [r7, #4]
 801025c:	4611      	mov	r1, r2
 801025e:	4618      	mov	r0, r3
 8010260:	f001 f92a 	bl	80114b8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010264:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010266:	f000 fc6b 	bl	8010b40 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801026a:	f000 ff47 	bl	80110fc <xTaskResumeAll>
 801026e:	4603      	mov	r3, r0
 8010270:	2b00      	cmp	r3, #0
 8010272:	f47f af7c 	bne.w	801016e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8010276:	4b0c      	ldr	r3, [pc, #48]	@ (80102a8 <xQueueGenericSend+0x200>)
 8010278:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801027c:	601a      	str	r2, [r3, #0]
 801027e:	f3bf 8f4f 	dsb	sy
 8010282:	f3bf 8f6f 	isb	sy
 8010286:	e772      	b.n	801016e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010288:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801028a:	f000 fc59 	bl	8010b40 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801028e:	f000 ff35 	bl	80110fc <xTaskResumeAll>
 8010292:	e76c      	b.n	801016e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010294:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010296:	f000 fc53 	bl	8010b40 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801029a:	f000 ff2f 	bl	80110fc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801029e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80102a0:	4618      	mov	r0, r3
 80102a2:	3738      	adds	r7, #56	@ 0x38
 80102a4:	46bd      	mov	sp, r7
 80102a6:	bd80      	pop	{r7, pc}
 80102a8:	e000ed04 	.word	0xe000ed04

080102ac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80102ac:	b580      	push	{r7, lr}
 80102ae:	b090      	sub	sp, #64	@ 0x40
 80102b0:	af00      	add	r7, sp, #0
 80102b2:	60f8      	str	r0, [r7, #12]
 80102b4:	60b9      	str	r1, [r7, #8]
 80102b6:	607a      	str	r2, [r7, #4]
 80102b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80102ba:	68fb      	ldr	r3, [r7, #12]
 80102bc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80102be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d10b      	bne.n	80102dc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80102c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102c8:	f383 8811 	msr	BASEPRI, r3
 80102cc:	f3bf 8f6f 	isb	sy
 80102d0:	f3bf 8f4f 	dsb	sy
 80102d4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80102d6:	bf00      	nop
 80102d8:	bf00      	nop
 80102da:	e7fd      	b.n	80102d8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80102dc:	68bb      	ldr	r3, [r7, #8]
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d103      	bne.n	80102ea <xQueueGenericSendFromISR+0x3e>
 80102e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d101      	bne.n	80102ee <xQueueGenericSendFromISR+0x42>
 80102ea:	2301      	movs	r3, #1
 80102ec:	e000      	b.n	80102f0 <xQueueGenericSendFromISR+0x44>
 80102ee:	2300      	movs	r3, #0
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d10b      	bne.n	801030c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80102f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102f8:	f383 8811 	msr	BASEPRI, r3
 80102fc:	f3bf 8f6f 	isb	sy
 8010300:	f3bf 8f4f 	dsb	sy
 8010304:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8010306:	bf00      	nop
 8010308:	bf00      	nop
 801030a:	e7fd      	b.n	8010308 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801030c:	683b      	ldr	r3, [r7, #0]
 801030e:	2b02      	cmp	r3, #2
 8010310:	d103      	bne.n	801031a <xQueueGenericSendFromISR+0x6e>
 8010312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010314:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010316:	2b01      	cmp	r3, #1
 8010318:	d101      	bne.n	801031e <xQueueGenericSendFromISR+0x72>
 801031a:	2301      	movs	r3, #1
 801031c:	e000      	b.n	8010320 <xQueueGenericSendFromISR+0x74>
 801031e:	2300      	movs	r3, #0
 8010320:	2b00      	cmp	r3, #0
 8010322:	d10b      	bne.n	801033c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8010324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010328:	f383 8811 	msr	BASEPRI, r3
 801032c:	f3bf 8f6f 	isb	sy
 8010330:	f3bf 8f4f 	dsb	sy
 8010334:	623b      	str	r3, [r7, #32]
}
 8010336:	bf00      	nop
 8010338:	bf00      	nop
 801033a:	e7fd      	b.n	8010338 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801033c:	f001 fedc 	bl	80120f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8010340:	f3ef 8211 	mrs	r2, BASEPRI
 8010344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010348:	f383 8811 	msr	BASEPRI, r3
 801034c:	f3bf 8f6f 	isb	sy
 8010350:	f3bf 8f4f 	dsb	sy
 8010354:	61fa      	str	r2, [r7, #28]
 8010356:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8010358:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801035a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801035c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801035e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010364:	429a      	cmp	r2, r3
 8010366:	d302      	bcc.n	801036e <xQueueGenericSendFromISR+0xc2>
 8010368:	683b      	ldr	r3, [r7, #0]
 801036a:	2b02      	cmp	r3, #2
 801036c:	d12f      	bne.n	80103ce <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801036e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010370:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010374:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010378:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801037a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801037c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801037e:	683a      	ldr	r2, [r7, #0]
 8010380:	68b9      	ldr	r1, [r7, #8]
 8010382:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010384:	f000 fb4c 	bl	8010a20 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010388:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 801038c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010390:	d112      	bne.n	80103b8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010396:	2b00      	cmp	r3, #0
 8010398:	d016      	beq.n	80103c8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801039a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801039c:	3324      	adds	r3, #36	@ 0x24
 801039e:	4618      	mov	r0, r3
 80103a0:	f001 f8b0 	bl	8011504 <xTaskRemoveFromEventList>
 80103a4:	4603      	mov	r3, r0
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d00e      	beq.n	80103c8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d00b      	beq.n	80103c8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	2201      	movs	r2, #1
 80103b4:	601a      	str	r2, [r3, #0]
 80103b6:	e007      	b.n	80103c8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80103b8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80103bc:	3301      	adds	r3, #1
 80103be:	b2db      	uxtb	r3, r3
 80103c0:	b25a      	sxtb	r2, r3
 80103c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80103c8:	2301      	movs	r3, #1
 80103ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80103cc:	e001      	b.n	80103d2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80103ce:	2300      	movs	r3, #0
 80103d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80103d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80103d4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80103d6:	697b      	ldr	r3, [r7, #20]
 80103d8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80103dc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80103de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80103e0:	4618      	mov	r0, r3
 80103e2:	3740      	adds	r7, #64	@ 0x40
 80103e4:	46bd      	mov	sp, r7
 80103e6:	bd80      	pop	{r7, pc}

080103e8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80103e8:	b580      	push	{r7, lr}
 80103ea:	b08e      	sub	sp, #56	@ 0x38
 80103ec:	af00      	add	r7, sp, #0
 80103ee:	6078      	str	r0, [r7, #4]
 80103f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80103f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d10b      	bne.n	8010414 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80103fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010400:	f383 8811 	msr	BASEPRI, r3
 8010404:	f3bf 8f6f 	isb	sy
 8010408:	f3bf 8f4f 	dsb	sy
 801040c:	623b      	str	r3, [r7, #32]
}
 801040e:	bf00      	nop
 8010410:	bf00      	nop
 8010412:	e7fd      	b.n	8010410 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010418:	2b00      	cmp	r3, #0
 801041a:	d00b      	beq.n	8010434 <xQueueGiveFromISR+0x4c>
	__asm volatile
 801041c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010420:	f383 8811 	msr	BASEPRI, r3
 8010424:	f3bf 8f6f 	isb	sy
 8010428:	f3bf 8f4f 	dsb	sy
 801042c:	61fb      	str	r3, [r7, #28]
}
 801042e:	bf00      	nop
 8010430:	bf00      	nop
 8010432:	e7fd      	b.n	8010430 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8010434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	2b00      	cmp	r3, #0
 801043a:	d103      	bne.n	8010444 <xQueueGiveFromISR+0x5c>
 801043c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801043e:	689b      	ldr	r3, [r3, #8]
 8010440:	2b00      	cmp	r3, #0
 8010442:	d101      	bne.n	8010448 <xQueueGiveFromISR+0x60>
 8010444:	2301      	movs	r3, #1
 8010446:	e000      	b.n	801044a <xQueueGiveFromISR+0x62>
 8010448:	2300      	movs	r3, #0
 801044a:	2b00      	cmp	r3, #0
 801044c:	d10b      	bne.n	8010466 <xQueueGiveFromISR+0x7e>
	__asm volatile
 801044e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010452:	f383 8811 	msr	BASEPRI, r3
 8010456:	f3bf 8f6f 	isb	sy
 801045a:	f3bf 8f4f 	dsb	sy
 801045e:	61bb      	str	r3, [r7, #24]
}
 8010460:	bf00      	nop
 8010462:	bf00      	nop
 8010464:	e7fd      	b.n	8010462 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010466:	f001 fe47 	bl	80120f8 <vPortValidateInterruptPriority>
	__asm volatile
 801046a:	f3ef 8211 	mrs	r2, BASEPRI
 801046e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010472:	f383 8811 	msr	BASEPRI, r3
 8010476:	f3bf 8f6f 	isb	sy
 801047a:	f3bf 8f4f 	dsb	sy
 801047e:	617a      	str	r2, [r7, #20]
 8010480:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8010482:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010484:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010488:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801048a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 801048c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801048e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010490:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010492:	429a      	cmp	r2, r3
 8010494:	d22b      	bcs.n	80104ee <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010498:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801049c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80104a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80104a2:	1c5a      	adds	r2, r3, #1
 80104a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80104a6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80104a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80104ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104b0:	d112      	bne.n	80104d8 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80104b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80104b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d016      	beq.n	80104e8 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80104ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80104bc:	3324      	adds	r3, #36	@ 0x24
 80104be:	4618      	mov	r0, r3
 80104c0:	f001 f820 	bl	8011504 <xTaskRemoveFromEventList>
 80104c4:	4603      	mov	r3, r0
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d00e      	beq.n	80104e8 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80104ca:	683b      	ldr	r3, [r7, #0]
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d00b      	beq.n	80104e8 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80104d0:	683b      	ldr	r3, [r7, #0]
 80104d2:	2201      	movs	r2, #1
 80104d4:	601a      	str	r2, [r3, #0]
 80104d6:	e007      	b.n	80104e8 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80104d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80104dc:	3301      	adds	r3, #1
 80104de:	b2db      	uxtb	r3, r3
 80104e0:	b25a      	sxtb	r2, r3
 80104e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80104e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80104e8:	2301      	movs	r3, #1
 80104ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80104ec:	e001      	b.n	80104f2 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80104ee:	2300      	movs	r3, #0
 80104f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80104f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104f4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80104f6:	68fb      	ldr	r3, [r7, #12]
 80104f8:	f383 8811 	msr	BASEPRI, r3
}
 80104fc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80104fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8010500:	4618      	mov	r0, r3
 8010502:	3738      	adds	r7, #56	@ 0x38
 8010504:	46bd      	mov	sp, r7
 8010506:	bd80      	pop	{r7, pc}

08010508 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010508:	b580      	push	{r7, lr}
 801050a:	b08c      	sub	sp, #48	@ 0x30
 801050c:	af00      	add	r7, sp, #0
 801050e:	60f8      	str	r0, [r7, #12]
 8010510:	60b9      	str	r1, [r7, #8]
 8010512:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010514:	2300      	movs	r3, #0
 8010516:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010518:	68fb      	ldr	r3, [r7, #12]
 801051a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801051c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801051e:	2b00      	cmp	r3, #0
 8010520:	d10b      	bne.n	801053a <xQueueReceive+0x32>
	__asm volatile
 8010522:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010526:	f383 8811 	msr	BASEPRI, r3
 801052a:	f3bf 8f6f 	isb	sy
 801052e:	f3bf 8f4f 	dsb	sy
 8010532:	623b      	str	r3, [r7, #32]
}
 8010534:	bf00      	nop
 8010536:	bf00      	nop
 8010538:	e7fd      	b.n	8010536 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801053a:	68bb      	ldr	r3, [r7, #8]
 801053c:	2b00      	cmp	r3, #0
 801053e:	d103      	bne.n	8010548 <xQueueReceive+0x40>
 8010540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010544:	2b00      	cmp	r3, #0
 8010546:	d101      	bne.n	801054c <xQueueReceive+0x44>
 8010548:	2301      	movs	r3, #1
 801054a:	e000      	b.n	801054e <xQueueReceive+0x46>
 801054c:	2300      	movs	r3, #0
 801054e:	2b00      	cmp	r3, #0
 8010550:	d10b      	bne.n	801056a <xQueueReceive+0x62>
	__asm volatile
 8010552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010556:	f383 8811 	msr	BASEPRI, r3
 801055a:	f3bf 8f6f 	isb	sy
 801055e:	f3bf 8f4f 	dsb	sy
 8010562:	61fb      	str	r3, [r7, #28]
}
 8010564:	bf00      	nop
 8010566:	bf00      	nop
 8010568:	e7fd      	b.n	8010566 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801056a:	f001 f991 	bl	8011890 <xTaskGetSchedulerState>
 801056e:	4603      	mov	r3, r0
 8010570:	2b00      	cmp	r3, #0
 8010572:	d102      	bne.n	801057a <xQueueReceive+0x72>
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	2b00      	cmp	r3, #0
 8010578:	d101      	bne.n	801057e <xQueueReceive+0x76>
 801057a:	2301      	movs	r3, #1
 801057c:	e000      	b.n	8010580 <xQueueReceive+0x78>
 801057e:	2300      	movs	r3, #0
 8010580:	2b00      	cmp	r3, #0
 8010582:	d10b      	bne.n	801059c <xQueueReceive+0x94>
	__asm volatile
 8010584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010588:	f383 8811 	msr	BASEPRI, r3
 801058c:	f3bf 8f6f 	isb	sy
 8010590:	f3bf 8f4f 	dsb	sy
 8010594:	61bb      	str	r3, [r7, #24]
}
 8010596:	bf00      	nop
 8010598:	bf00      	nop
 801059a:	e7fd      	b.n	8010598 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801059c:	f001 fccc 	bl	8011f38 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80105a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80105a4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80105a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d01f      	beq.n	80105ec <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80105ac:	68b9      	ldr	r1, [r7, #8]
 80105ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80105b0:	f000 faa0 	bl	8010af4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80105b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105b6:	1e5a      	subs	r2, r3, #1
 80105b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105ba:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80105bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105be:	691b      	ldr	r3, [r3, #16]
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d00f      	beq.n	80105e4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80105c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105c6:	3310      	adds	r3, #16
 80105c8:	4618      	mov	r0, r3
 80105ca:	f000 ff9b 	bl	8011504 <xTaskRemoveFromEventList>
 80105ce:	4603      	mov	r3, r0
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d007      	beq.n	80105e4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80105d4:	4b3c      	ldr	r3, [pc, #240]	@ (80106c8 <xQueueReceive+0x1c0>)
 80105d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80105da:	601a      	str	r2, [r3, #0]
 80105dc:	f3bf 8f4f 	dsb	sy
 80105e0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80105e4:	f001 fcda 	bl	8011f9c <vPortExitCritical>
				return pdPASS;
 80105e8:	2301      	movs	r3, #1
 80105ea:	e069      	b.n	80106c0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d103      	bne.n	80105fa <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80105f2:	f001 fcd3 	bl	8011f9c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80105f6:	2300      	movs	r3, #0
 80105f8:	e062      	b.n	80106c0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80105fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d106      	bne.n	801060e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010600:	f107 0310 	add.w	r3, r7, #16
 8010604:	4618      	mov	r0, r3
 8010606:	f000 ffe1 	bl	80115cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801060a:	2301      	movs	r3, #1
 801060c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801060e:	f001 fcc5 	bl	8011f9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010612:	f000 fd65 	bl	80110e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010616:	f001 fc8f 	bl	8011f38 <vPortEnterCritical>
 801061a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801061c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010620:	b25b      	sxtb	r3, r3
 8010622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010626:	d103      	bne.n	8010630 <xQueueReceive+0x128>
 8010628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801062a:	2200      	movs	r2, #0
 801062c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010632:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010636:	b25b      	sxtb	r3, r3
 8010638:	f1b3 3fff 	cmp.w	r3, #4294967295
 801063c:	d103      	bne.n	8010646 <xQueueReceive+0x13e>
 801063e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010640:	2200      	movs	r2, #0
 8010642:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010646:	f001 fca9 	bl	8011f9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801064a:	1d3a      	adds	r2, r7, #4
 801064c:	f107 0310 	add.w	r3, r7, #16
 8010650:	4611      	mov	r1, r2
 8010652:	4618      	mov	r0, r3
 8010654:	f000 ffd0 	bl	80115f8 <xTaskCheckForTimeOut>
 8010658:	4603      	mov	r3, r0
 801065a:	2b00      	cmp	r3, #0
 801065c:	d123      	bne.n	80106a6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801065e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010660:	f000 fac0 	bl	8010be4 <prvIsQueueEmpty>
 8010664:	4603      	mov	r3, r0
 8010666:	2b00      	cmp	r3, #0
 8010668:	d017      	beq.n	801069a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801066a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801066c:	3324      	adds	r3, #36	@ 0x24
 801066e:	687a      	ldr	r2, [r7, #4]
 8010670:	4611      	mov	r1, r2
 8010672:	4618      	mov	r0, r3
 8010674:	f000 ff20 	bl	80114b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010678:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801067a:	f000 fa61 	bl	8010b40 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801067e:	f000 fd3d 	bl	80110fc <xTaskResumeAll>
 8010682:	4603      	mov	r3, r0
 8010684:	2b00      	cmp	r3, #0
 8010686:	d189      	bne.n	801059c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8010688:	4b0f      	ldr	r3, [pc, #60]	@ (80106c8 <xQueueReceive+0x1c0>)
 801068a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801068e:	601a      	str	r2, [r3, #0]
 8010690:	f3bf 8f4f 	dsb	sy
 8010694:	f3bf 8f6f 	isb	sy
 8010698:	e780      	b.n	801059c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801069a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801069c:	f000 fa50 	bl	8010b40 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80106a0:	f000 fd2c 	bl	80110fc <xTaskResumeAll>
 80106a4:	e77a      	b.n	801059c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80106a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80106a8:	f000 fa4a 	bl	8010b40 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80106ac:	f000 fd26 	bl	80110fc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80106b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80106b2:	f000 fa97 	bl	8010be4 <prvIsQueueEmpty>
 80106b6:	4603      	mov	r3, r0
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	f43f af6f 	beq.w	801059c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80106be:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80106c0:	4618      	mov	r0, r3
 80106c2:	3730      	adds	r7, #48	@ 0x30
 80106c4:	46bd      	mov	sp, r7
 80106c6:	bd80      	pop	{r7, pc}
 80106c8:	e000ed04 	.word	0xe000ed04

080106cc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80106cc:	b580      	push	{r7, lr}
 80106ce:	b08e      	sub	sp, #56	@ 0x38
 80106d0:	af00      	add	r7, sp, #0
 80106d2:	6078      	str	r0, [r7, #4]
 80106d4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80106d6:	2300      	movs	r3, #0
 80106d8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80106de:	2300      	movs	r3, #0
 80106e0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80106e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d10b      	bne.n	8010700 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80106e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80106ec:	f383 8811 	msr	BASEPRI, r3
 80106f0:	f3bf 8f6f 	isb	sy
 80106f4:	f3bf 8f4f 	dsb	sy
 80106f8:	623b      	str	r3, [r7, #32]
}
 80106fa:	bf00      	nop
 80106fc:	bf00      	nop
 80106fe:	e7fd      	b.n	80106fc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010704:	2b00      	cmp	r3, #0
 8010706:	d00b      	beq.n	8010720 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8010708:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801070c:	f383 8811 	msr	BASEPRI, r3
 8010710:	f3bf 8f6f 	isb	sy
 8010714:	f3bf 8f4f 	dsb	sy
 8010718:	61fb      	str	r3, [r7, #28]
}
 801071a:	bf00      	nop
 801071c:	bf00      	nop
 801071e:	e7fd      	b.n	801071c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010720:	f001 f8b6 	bl	8011890 <xTaskGetSchedulerState>
 8010724:	4603      	mov	r3, r0
 8010726:	2b00      	cmp	r3, #0
 8010728:	d102      	bne.n	8010730 <xQueueSemaphoreTake+0x64>
 801072a:	683b      	ldr	r3, [r7, #0]
 801072c:	2b00      	cmp	r3, #0
 801072e:	d101      	bne.n	8010734 <xQueueSemaphoreTake+0x68>
 8010730:	2301      	movs	r3, #1
 8010732:	e000      	b.n	8010736 <xQueueSemaphoreTake+0x6a>
 8010734:	2300      	movs	r3, #0
 8010736:	2b00      	cmp	r3, #0
 8010738:	d10b      	bne.n	8010752 <xQueueSemaphoreTake+0x86>
	__asm volatile
 801073a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801073e:	f383 8811 	msr	BASEPRI, r3
 8010742:	f3bf 8f6f 	isb	sy
 8010746:	f3bf 8f4f 	dsb	sy
 801074a:	61bb      	str	r3, [r7, #24]
}
 801074c:	bf00      	nop
 801074e:	bf00      	nop
 8010750:	e7fd      	b.n	801074e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010752:	f001 fbf1 	bl	8011f38 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8010756:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010758:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801075a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801075c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801075e:	2b00      	cmp	r3, #0
 8010760:	d024      	beq.n	80107ac <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8010762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010764:	1e5a      	subs	r2, r3, #1
 8010766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010768:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801076a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	2b00      	cmp	r3, #0
 8010770:	d104      	bne.n	801077c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8010772:	f001 fa39 	bl	8011be8 <pvTaskIncrementMutexHeldCount>
 8010776:	4602      	mov	r2, r0
 8010778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801077a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801077c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801077e:	691b      	ldr	r3, [r3, #16]
 8010780:	2b00      	cmp	r3, #0
 8010782:	d00f      	beq.n	80107a4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010786:	3310      	adds	r3, #16
 8010788:	4618      	mov	r0, r3
 801078a:	f000 febb 	bl	8011504 <xTaskRemoveFromEventList>
 801078e:	4603      	mov	r3, r0
 8010790:	2b00      	cmp	r3, #0
 8010792:	d007      	beq.n	80107a4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010794:	4b54      	ldr	r3, [pc, #336]	@ (80108e8 <xQueueSemaphoreTake+0x21c>)
 8010796:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801079a:	601a      	str	r2, [r3, #0]
 801079c:	f3bf 8f4f 	dsb	sy
 80107a0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80107a4:	f001 fbfa 	bl	8011f9c <vPortExitCritical>
				return pdPASS;
 80107a8:	2301      	movs	r3, #1
 80107aa:	e098      	b.n	80108de <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80107ac:	683b      	ldr	r3, [r7, #0]
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d112      	bne.n	80107d8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80107b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d00b      	beq.n	80107d0 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80107b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80107bc:	f383 8811 	msr	BASEPRI, r3
 80107c0:	f3bf 8f6f 	isb	sy
 80107c4:	f3bf 8f4f 	dsb	sy
 80107c8:	617b      	str	r3, [r7, #20]
}
 80107ca:	bf00      	nop
 80107cc:	bf00      	nop
 80107ce:	e7fd      	b.n	80107cc <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80107d0:	f001 fbe4 	bl	8011f9c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80107d4:	2300      	movs	r3, #0
 80107d6:	e082      	b.n	80108de <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80107d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d106      	bne.n	80107ec <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80107de:	f107 030c 	add.w	r3, r7, #12
 80107e2:	4618      	mov	r0, r3
 80107e4:	f000 fef2 	bl	80115cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80107e8:	2301      	movs	r3, #1
 80107ea:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80107ec:	f001 fbd6 	bl	8011f9c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80107f0:	f000 fc76 	bl	80110e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80107f4:	f001 fba0 	bl	8011f38 <vPortEnterCritical>
 80107f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107fa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80107fe:	b25b      	sxtb	r3, r3
 8010800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010804:	d103      	bne.n	801080e <xQueueSemaphoreTake+0x142>
 8010806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010808:	2200      	movs	r2, #0
 801080a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801080e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010810:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010814:	b25b      	sxtb	r3, r3
 8010816:	f1b3 3fff 	cmp.w	r3, #4294967295
 801081a:	d103      	bne.n	8010824 <xQueueSemaphoreTake+0x158>
 801081c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801081e:	2200      	movs	r2, #0
 8010820:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010824:	f001 fbba 	bl	8011f9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010828:	463a      	mov	r2, r7
 801082a:	f107 030c 	add.w	r3, r7, #12
 801082e:	4611      	mov	r1, r2
 8010830:	4618      	mov	r0, r3
 8010832:	f000 fee1 	bl	80115f8 <xTaskCheckForTimeOut>
 8010836:	4603      	mov	r3, r0
 8010838:	2b00      	cmp	r3, #0
 801083a:	d132      	bne.n	80108a2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801083c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801083e:	f000 f9d1 	bl	8010be4 <prvIsQueueEmpty>
 8010842:	4603      	mov	r3, r0
 8010844:	2b00      	cmp	r3, #0
 8010846:	d026      	beq.n	8010896 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	2b00      	cmp	r3, #0
 801084e:	d109      	bne.n	8010864 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8010850:	f001 fb72 	bl	8011f38 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010856:	689b      	ldr	r3, [r3, #8]
 8010858:	4618      	mov	r0, r3
 801085a:	f001 f837 	bl	80118cc <xTaskPriorityInherit>
 801085e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8010860:	f001 fb9c 	bl	8011f9c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010864:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010866:	3324      	adds	r3, #36	@ 0x24
 8010868:	683a      	ldr	r2, [r7, #0]
 801086a:	4611      	mov	r1, r2
 801086c:	4618      	mov	r0, r3
 801086e:	f000 fe23 	bl	80114b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010872:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010874:	f000 f964 	bl	8010b40 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010878:	f000 fc40 	bl	80110fc <xTaskResumeAll>
 801087c:	4603      	mov	r3, r0
 801087e:	2b00      	cmp	r3, #0
 8010880:	f47f af67 	bne.w	8010752 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8010884:	4b18      	ldr	r3, [pc, #96]	@ (80108e8 <xQueueSemaphoreTake+0x21c>)
 8010886:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801088a:	601a      	str	r2, [r3, #0]
 801088c:	f3bf 8f4f 	dsb	sy
 8010890:	f3bf 8f6f 	isb	sy
 8010894:	e75d      	b.n	8010752 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8010896:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010898:	f000 f952 	bl	8010b40 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801089c:	f000 fc2e 	bl	80110fc <xTaskResumeAll>
 80108a0:	e757      	b.n	8010752 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80108a2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80108a4:	f000 f94c 	bl	8010b40 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80108a8:	f000 fc28 	bl	80110fc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80108ac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80108ae:	f000 f999 	bl	8010be4 <prvIsQueueEmpty>
 80108b2:	4603      	mov	r3, r0
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	f43f af4c 	beq.w	8010752 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80108ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d00d      	beq.n	80108dc <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80108c0:	f001 fb3a 	bl	8011f38 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80108c4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80108c6:	f000 f893 	bl	80109f0 <prvGetDisinheritPriorityAfterTimeout>
 80108ca:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80108cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108ce:	689b      	ldr	r3, [r3, #8]
 80108d0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80108d2:	4618      	mov	r0, r3
 80108d4:	f001 f8f8 	bl	8011ac8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80108d8:	f001 fb60 	bl	8011f9c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80108dc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80108de:	4618      	mov	r0, r3
 80108e0:	3738      	adds	r7, #56	@ 0x38
 80108e2:	46bd      	mov	sp, r7
 80108e4:	bd80      	pop	{r7, pc}
 80108e6:	bf00      	nop
 80108e8:	e000ed04 	.word	0xe000ed04

080108ec <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80108ec:	b580      	push	{r7, lr}
 80108ee:	b08e      	sub	sp, #56	@ 0x38
 80108f0:	af00      	add	r7, sp, #0
 80108f2:	60f8      	str	r0, [r7, #12]
 80108f4:	60b9      	str	r1, [r7, #8]
 80108f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80108fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d10b      	bne.n	801091a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8010902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010906:	f383 8811 	msr	BASEPRI, r3
 801090a:	f3bf 8f6f 	isb	sy
 801090e:	f3bf 8f4f 	dsb	sy
 8010912:	623b      	str	r3, [r7, #32]
}
 8010914:	bf00      	nop
 8010916:	bf00      	nop
 8010918:	e7fd      	b.n	8010916 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801091a:	68bb      	ldr	r3, [r7, #8]
 801091c:	2b00      	cmp	r3, #0
 801091e:	d103      	bne.n	8010928 <xQueueReceiveFromISR+0x3c>
 8010920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010924:	2b00      	cmp	r3, #0
 8010926:	d101      	bne.n	801092c <xQueueReceiveFromISR+0x40>
 8010928:	2301      	movs	r3, #1
 801092a:	e000      	b.n	801092e <xQueueReceiveFromISR+0x42>
 801092c:	2300      	movs	r3, #0
 801092e:	2b00      	cmp	r3, #0
 8010930:	d10b      	bne.n	801094a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8010932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010936:	f383 8811 	msr	BASEPRI, r3
 801093a:	f3bf 8f6f 	isb	sy
 801093e:	f3bf 8f4f 	dsb	sy
 8010942:	61fb      	str	r3, [r7, #28]
}
 8010944:	bf00      	nop
 8010946:	bf00      	nop
 8010948:	e7fd      	b.n	8010946 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801094a:	f001 fbd5 	bl	80120f8 <vPortValidateInterruptPriority>
	__asm volatile
 801094e:	f3ef 8211 	mrs	r2, BASEPRI
 8010952:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010956:	f383 8811 	msr	BASEPRI, r3
 801095a:	f3bf 8f6f 	isb	sy
 801095e:	f3bf 8f4f 	dsb	sy
 8010962:	61ba      	str	r2, [r7, #24]
 8010964:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8010966:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010968:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801096a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801096c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801096e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010972:	2b00      	cmp	r3, #0
 8010974:	d02f      	beq.n	80109d6 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8010976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010978:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801097c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010980:	68b9      	ldr	r1, [r7, #8]
 8010982:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010984:	f000 f8b6 	bl	8010af4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801098a:	1e5a      	subs	r2, r3, #1
 801098c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801098e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8010990:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8010994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010998:	d112      	bne.n	80109c0 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801099a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801099c:	691b      	ldr	r3, [r3, #16]
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d016      	beq.n	80109d0 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80109a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109a4:	3310      	adds	r3, #16
 80109a6:	4618      	mov	r0, r3
 80109a8:	f000 fdac 	bl	8011504 <xTaskRemoveFromEventList>
 80109ac:	4603      	mov	r3, r0
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d00e      	beq.n	80109d0 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d00b      	beq.n	80109d0 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	2201      	movs	r2, #1
 80109bc:	601a      	str	r2, [r3, #0]
 80109be:	e007      	b.n	80109d0 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80109c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80109c4:	3301      	adds	r3, #1
 80109c6:	b2db      	uxtb	r3, r3
 80109c8:	b25a      	sxtb	r2, r3
 80109ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80109d0:	2301      	movs	r3, #1
 80109d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80109d4:	e001      	b.n	80109da <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80109d6:	2300      	movs	r3, #0
 80109d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80109da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109dc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80109de:	693b      	ldr	r3, [r7, #16]
 80109e0:	f383 8811 	msr	BASEPRI, r3
}
 80109e4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80109e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80109e8:	4618      	mov	r0, r3
 80109ea:	3738      	adds	r7, #56	@ 0x38
 80109ec:	46bd      	mov	sp, r7
 80109ee:	bd80      	pop	{r7, pc}

080109f0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80109f0:	b480      	push	{r7}
 80109f2:	b085      	sub	sp, #20
 80109f4:	af00      	add	r7, sp, #0
 80109f6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d006      	beq.n	8010a0e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010a04:	681b      	ldr	r3, [r3, #0]
 8010a06:	f1c3 0307 	rsb	r3, r3, #7
 8010a0a:	60fb      	str	r3, [r7, #12]
 8010a0c:	e001      	b.n	8010a12 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8010a0e:	2300      	movs	r3, #0
 8010a10:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8010a12:	68fb      	ldr	r3, [r7, #12]
	}
 8010a14:	4618      	mov	r0, r3
 8010a16:	3714      	adds	r7, #20
 8010a18:	46bd      	mov	sp, r7
 8010a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a1e:	4770      	bx	lr

08010a20 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010a20:	b580      	push	{r7, lr}
 8010a22:	b086      	sub	sp, #24
 8010a24:	af00      	add	r7, sp, #0
 8010a26:	60f8      	str	r0, [r7, #12]
 8010a28:	60b9      	str	r1, [r7, #8]
 8010a2a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010a2c:	2300      	movs	r3, #0
 8010a2e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010a30:	68fb      	ldr	r3, [r7, #12]
 8010a32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010a34:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010a36:	68fb      	ldr	r3, [r7, #12]
 8010a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d10d      	bne.n	8010a5a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010a3e:	68fb      	ldr	r3, [r7, #12]
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d14d      	bne.n	8010ae2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	689b      	ldr	r3, [r3, #8]
 8010a4a:	4618      	mov	r0, r3
 8010a4c:	f000 ffb4 	bl	80119b8 <xTaskPriorityDisinherit>
 8010a50:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8010a52:	68fb      	ldr	r3, [r7, #12]
 8010a54:	2200      	movs	r2, #0
 8010a56:	609a      	str	r2, [r3, #8]
 8010a58:	e043      	b.n	8010ae2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d119      	bne.n	8010a94 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010a60:	68fb      	ldr	r3, [r7, #12]
 8010a62:	6858      	ldr	r0, [r3, #4]
 8010a64:	68fb      	ldr	r3, [r7, #12]
 8010a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010a68:	461a      	mov	r2, r3
 8010a6a:	68b9      	ldr	r1, [r7, #8]
 8010a6c:	f00d fd41 	bl	801e4f2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	685a      	ldr	r2, [r3, #4]
 8010a74:	68fb      	ldr	r3, [r7, #12]
 8010a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010a78:	441a      	add	r2, r3
 8010a7a:	68fb      	ldr	r3, [r7, #12]
 8010a7c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	685a      	ldr	r2, [r3, #4]
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	689b      	ldr	r3, [r3, #8]
 8010a86:	429a      	cmp	r2, r3
 8010a88:	d32b      	bcc.n	8010ae2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010a8a:	68fb      	ldr	r3, [r7, #12]
 8010a8c:	681a      	ldr	r2, [r3, #0]
 8010a8e:	68fb      	ldr	r3, [r7, #12]
 8010a90:	605a      	str	r2, [r3, #4]
 8010a92:	e026      	b.n	8010ae2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010a94:	68fb      	ldr	r3, [r7, #12]
 8010a96:	68d8      	ldr	r0, [r3, #12]
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010a9c:	461a      	mov	r2, r3
 8010a9e:	68b9      	ldr	r1, [r7, #8]
 8010aa0:	f00d fd27 	bl	801e4f2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	68da      	ldr	r2, [r3, #12]
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010aac:	425b      	negs	r3, r3
 8010aae:	441a      	add	r2, r3
 8010ab0:	68fb      	ldr	r3, [r7, #12]
 8010ab2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010ab4:	68fb      	ldr	r3, [r7, #12]
 8010ab6:	68da      	ldr	r2, [r3, #12]
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	429a      	cmp	r2, r3
 8010abe:	d207      	bcs.n	8010ad0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	689a      	ldr	r2, [r3, #8]
 8010ac4:	68fb      	ldr	r3, [r7, #12]
 8010ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010ac8:	425b      	negs	r3, r3
 8010aca:	441a      	add	r2, r3
 8010acc:	68fb      	ldr	r3, [r7, #12]
 8010ace:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	2b02      	cmp	r3, #2
 8010ad4:	d105      	bne.n	8010ae2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010ad6:	693b      	ldr	r3, [r7, #16]
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d002      	beq.n	8010ae2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8010adc:	693b      	ldr	r3, [r7, #16]
 8010ade:	3b01      	subs	r3, #1
 8010ae0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010ae2:	693b      	ldr	r3, [r7, #16]
 8010ae4:	1c5a      	adds	r2, r3, #1
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8010aea:	697b      	ldr	r3, [r7, #20]
}
 8010aec:	4618      	mov	r0, r3
 8010aee:	3718      	adds	r7, #24
 8010af0:	46bd      	mov	sp, r7
 8010af2:	bd80      	pop	{r7, pc}

08010af4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8010af4:	b580      	push	{r7, lr}
 8010af6:	b082      	sub	sp, #8
 8010af8:	af00      	add	r7, sp, #0
 8010afa:	6078      	str	r0, [r7, #4]
 8010afc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d018      	beq.n	8010b38 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	68da      	ldr	r2, [r3, #12]
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010b0e:	441a      	add	r2, r3
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	68da      	ldr	r2, [r3, #12]
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	689b      	ldr	r3, [r3, #8]
 8010b1c:	429a      	cmp	r2, r3
 8010b1e:	d303      	bcc.n	8010b28 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	681a      	ldr	r2, [r3, #0]
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	68d9      	ldr	r1, [r3, #12]
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010b30:	461a      	mov	r2, r3
 8010b32:	6838      	ldr	r0, [r7, #0]
 8010b34:	f00d fcdd 	bl	801e4f2 <memcpy>
	}
}
 8010b38:	bf00      	nop
 8010b3a:	3708      	adds	r7, #8
 8010b3c:	46bd      	mov	sp, r7
 8010b3e:	bd80      	pop	{r7, pc}

08010b40 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8010b40:	b580      	push	{r7, lr}
 8010b42:	b084      	sub	sp, #16
 8010b44:	af00      	add	r7, sp, #0
 8010b46:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010b48:	f001 f9f6 	bl	8011f38 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010b52:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010b54:	e011      	b.n	8010b7a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	d012      	beq.n	8010b84 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	3324      	adds	r3, #36	@ 0x24
 8010b62:	4618      	mov	r0, r3
 8010b64:	f000 fcce 	bl	8011504 <xTaskRemoveFromEventList>
 8010b68:	4603      	mov	r3, r0
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d001      	beq.n	8010b72 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010b6e:	f000 fda7 	bl	80116c0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8010b72:	7bfb      	ldrb	r3, [r7, #15]
 8010b74:	3b01      	subs	r3, #1
 8010b76:	b2db      	uxtb	r3, r3
 8010b78:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010b7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	dce9      	bgt.n	8010b56 <prvUnlockQueue+0x16>
 8010b82:	e000      	b.n	8010b86 <prvUnlockQueue+0x46>
					break;
 8010b84:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	22ff      	movs	r2, #255	@ 0xff
 8010b8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8010b8e:	f001 fa05 	bl	8011f9c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010b92:	f001 f9d1 	bl	8011f38 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010b9c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010b9e:	e011      	b.n	8010bc4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	691b      	ldr	r3, [r3, #16]
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d012      	beq.n	8010bce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	3310      	adds	r3, #16
 8010bac:	4618      	mov	r0, r3
 8010bae:	f000 fca9 	bl	8011504 <xTaskRemoveFromEventList>
 8010bb2:	4603      	mov	r3, r0
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d001      	beq.n	8010bbc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010bb8:	f000 fd82 	bl	80116c0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8010bbc:	7bbb      	ldrb	r3, [r7, #14]
 8010bbe:	3b01      	subs	r3, #1
 8010bc0:	b2db      	uxtb	r3, r3
 8010bc2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010bc4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	dce9      	bgt.n	8010ba0 <prvUnlockQueue+0x60>
 8010bcc:	e000      	b.n	8010bd0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8010bce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	22ff      	movs	r2, #255	@ 0xff
 8010bd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8010bd8:	f001 f9e0 	bl	8011f9c <vPortExitCritical>
}
 8010bdc:	bf00      	nop
 8010bde:	3710      	adds	r7, #16
 8010be0:	46bd      	mov	sp, r7
 8010be2:	bd80      	pop	{r7, pc}

08010be4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010be4:	b580      	push	{r7, lr}
 8010be6:	b084      	sub	sp, #16
 8010be8:	af00      	add	r7, sp, #0
 8010bea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010bec:	f001 f9a4 	bl	8011f38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d102      	bne.n	8010bfe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8010bf8:	2301      	movs	r3, #1
 8010bfa:	60fb      	str	r3, [r7, #12]
 8010bfc:	e001      	b.n	8010c02 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010bfe:	2300      	movs	r3, #0
 8010c00:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010c02:	f001 f9cb 	bl	8011f9c <vPortExitCritical>

	return xReturn;
 8010c06:	68fb      	ldr	r3, [r7, #12]
}
 8010c08:	4618      	mov	r0, r3
 8010c0a:	3710      	adds	r7, #16
 8010c0c:	46bd      	mov	sp, r7
 8010c0e:	bd80      	pop	{r7, pc}

08010c10 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010c10:	b580      	push	{r7, lr}
 8010c12:	b084      	sub	sp, #16
 8010c14:	af00      	add	r7, sp, #0
 8010c16:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010c18:	f001 f98e 	bl	8011f38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010c24:	429a      	cmp	r2, r3
 8010c26:	d102      	bne.n	8010c2e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8010c28:	2301      	movs	r3, #1
 8010c2a:	60fb      	str	r3, [r7, #12]
 8010c2c:	e001      	b.n	8010c32 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010c2e:	2300      	movs	r3, #0
 8010c30:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010c32:	f001 f9b3 	bl	8011f9c <vPortExitCritical>

	return xReturn;
 8010c36:	68fb      	ldr	r3, [r7, #12]
}
 8010c38:	4618      	mov	r0, r3
 8010c3a:	3710      	adds	r7, #16
 8010c3c:	46bd      	mov	sp, r7
 8010c3e:	bd80      	pop	{r7, pc}

08010c40 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010c40:	b580      	push	{r7, lr}
 8010c42:	b08e      	sub	sp, #56	@ 0x38
 8010c44:	af04      	add	r7, sp, #16
 8010c46:	60f8      	str	r0, [r7, #12]
 8010c48:	60b9      	str	r1, [r7, #8]
 8010c4a:	607a      	str	r2, [r7, #4]
 8010c4c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8010c4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d10b      	bne.n	8010c6c <xTaskCreateStatic+0x2c>
	__asm volatile
 8010c54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c58:	f383 8811 	msr	BASEPRI, r3
 8010c5c:	f3bf 8f6f 	isb	sy
 8010c60:	f3bf 8f4f 	dsb	sy
 8010c64:	623b      	str	r3, [r7, #32]
}
 8010c66:	bf00      	nop
 8010c68:	bf00      	nop
 8010c6a:	e7fd      	b.n	8010c68 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8010c6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d10b      	bne.n	8010c8a <xTaskCreateStatic+0x4a>
	__asm volatile
 8010c72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c76:	f383 8811 	msr	BASEPRI, r3
 8010c7a:	f3bf 8f6f 	isb	sy
 8010c7e:	f3bf 8f4f 	dsb	sy
 8010c82:	61fb      	str	r3, [r7, #28]
}
 8010c84:	bf00      	nop
 8010c86:	bf00      	nop
 8010c88:	e7fd      	b.n	8010c86 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8010c8a:	23a0      	movs	r3, #160	@ 0xa0
 8010c8c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010c8e:	693b      	ldr	r3, [r7, #16]
 8010c90:	2ba0      	cmp	r3, #160	@ 0xa0
 8010c92:	d00b      	beq.n	8010cac <xTaskCreateStatic+0x6c>
	__asm volatile
 8010c94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c98:	f383 8811 	msr	BASEPRI, r3
 8010c9c:	f3bf 8f6f 	isb	sy
 8010ca0:	f3bf 8f4f 	dsb	sy
 8010ca4:	61bb      	str	r3, [r7, #24]
}
 8010ca6:	bf00      	nop
 8010ca8:	bf00      	nop
 8010caa:	e7fd      	b.n	8010ca8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010cac:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010cae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d01e      	beq.n	8010cf2 <xTaskCreateStatic+0xb2>
 8010cb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d01b      	beq.n	8010cf2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010cba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cbc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cc0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010cc2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cc6:	2202      	movs	r2, #2
 8010cc8:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010ccc:	2300      	movs	r3, #0
 8010cce:	9303      	str	r3, [sp, #12]
 8010cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cd2:	9302      	str	r3, [sp, #8]
 8010cd4:	f107 0314 	add.w	r3, r7, #20
 8010cd8:	9301      	str	r3, [sp, #4]
 8010cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010cdc:	9300      	str	r3, [sp, #0]
 8010cde:	683b      	ldr	r3, [r7, #0]
 8010ce0:	687a      	ldr	r2, [r7, #4]
 8010ce2:	68b9      	ldr	r1, [r7, #8]
 8010ce4:	68f8      	ldr	r0, [r7, #12]
 8010ce6:	f000 f851 	bl	8010d8c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010cea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010cec:	f000 f8ee 	bl	8010ecc <prvAddNewTaskToReadyList>
 8010cf0:	e001      	b.n	8010cf6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8010cf2:	2300      	movs	r3, #0
 8010cf4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8010cf6:	697b      	ldr	r3, [r7, #20]
	}
 8010cf8:	4618      	mov	r0, r3
 8010cfa:	3728      	adds	r7, #40	@ 0x28
 8010cfc:	46bd      	mov	sp, r7
 8010cfe:	bd80      	pop	{r7, pc}

08010d00 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010d00:	b580      	push	{r7, lr}
 8010d02:	b08c      	sub	sp, #48	@ 0x30
 8010d04:	af04      	add	r7, sp, #16
 8010d06:	60f8      	str	r0, [r7, #12]
 8010d08:	60b9      	str	r1, [r7, #8]
 8010d0a:	603b      	str	r3, [r7, #0]
 8010d0c:	4613      	mov	r3, r2
 8010d0e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010d10:	88fb      	ldrh	r3, [r7, #6]
 8010d12:	009b      	lsls	r3, r3, #2
 8010d14:	4618      	mov	r0, r3
 8010d16:	f001 fa31 	bl	801217c <pvPortMalloc>
 8010d1a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010d1c:	697b      	ldr	r3, [r7, #20]
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d00e      	beq.n	8010d40 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010d22:	20a0      	movs	r0, #160	@ 0xa0
 8010d24:	f001 fa2a 	bl	801217c <pvPortMalloc>
 8010d28:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8010d2a:	69fb      	ldr	r3, [r7, #28]
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d003      	beq.n	8010d38 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010d30:	69fb      	ldr	r3, [r7, #28]
 8010d32:	697a      	ldr	r2, [r7, #20]
 8010d34:	631a      	str	r2, [r3, #48]	@ 0x30
 8010d36:	e005      	b.n	8010d44 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010d38:	6978      	ldr	r0, [r7, #20]
 8010d3a:	f001 faed 	bl	8012318 <vPortFree>
 8010d3e:	e001      	b.n	8010d44 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010d40:	2300      	movs	r3, #0
 8010d42:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010d44:	69fb      	ldr	r3, [r7, #28]
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d017      	beq.n	8010d7a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010d4a:	69fb      	ldr	r3, [r7, #28]
 8010d4c:	2200      	movs	r2, #0
 8010d4e:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010d52:	88fa      	ldrh	r2, [r7, #6]
 8010d54:	2300      	movs	r3, #0
 8010d56:	9303      	str	r3, [sp, #12]
 8010d58:	69fb      	ldr	r3, [r7, #28]
 8010d5a:	9302      	str	r3, [sp, #8]
 8010d5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d5e:	9301      	str	r3, [sp, #4]
 8010d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d62:	9300      	str	r3, [sp, #0]
 8010d64:	683b      	ldr	r3, [r7, #0]
 8010d66:	68b9      	ldr	r1, [r7, #8]
 8010d68:	68f8      	ldr	r0, [r7, #12]
 8010d6a:	f000 f80f 	bl	8010d8c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010d6e:	69f8      	ldr	r0, [r7, #28]
 8010d70:	f000 f8ac 	bl	8010ecc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010d74:	2301      	movs	r3, #1
 8010d76:	61bb      	str	r3, [r7, #24]
 8010d78:	e002      	b.n	8010d80 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8010d7e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010d80:	69bb      	ldr	r3, [r7, #24]
	}
 8010d82:	4618      	mov	r0, r3
 8010d84:	3720      	adds	r7, #32
 8010d86:	46bd      	mov	sp, r7
 8010d88:	bd80      	pop	{r7, pc}
	...

08010d8c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010d8c:	b580      	push	{r7, lr}
 8010d8e:	b088      	sub	sp, #32
 8010d90:	af00      	add	r7, sp, #0
 8010d92:	60f8      	str	r0, [r7, #12]
 8010d94:	60b9      	str	r1, [r7, #8]
 8010d96:	607a      	str	r2, [r7, #4]
 8010d98:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8010da4:	3b01      	subs	r3, #1
 8010da6:	009b      	lsls	r3, r3, #2
 8010da8:	4413      	add	r3, r2
 8010daa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010dac:	69bb      	ldr	r3, [r7, #24]
 8010dae:	f023 0307 	bic.w	r3, r3, #7
 8010db2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010db4:	69bb      	ldr	r3, [r7, #24]
 8010db6:	f003 0307 	and.w	r3, r3, #7
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d00b      	beq.n	8010dd6 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8010dbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010dc2:	f383 8811 	msr	BASEPRI, r3
 8010dc6:	f3bf 8f6f 	isb	sy
 8010dca:	f3bf 8f4f 	dsb	sy
 8010dce:	617b      	str	r3, [r7, #20]
}
 8010dd0:	bf00      	nop
 8010dd2:	bf00      	nop
 8010dd4:	e7fd      	b.n	8010dd2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010dd6:	68bb      	ldr	r3, [r7, #8]
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d01f      	beq.n	8010e1c <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010ddc:	2300      	movs	r3, #0
 8010dde:	61fb      	str	r3, [r7, #28]
 8010de0:	e012      	b.n	8010e08 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010de2:	68ba      	ldr	r2, [r7, #8]
 8010de4:	69fb      	ldr	r3, [r7, #28]
 8010de6:	4413      	add	r3, r2
 8010de8:	7819      	ldrb	r1, [r3, #0]
 8010dea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010dec:	69fb      	ldr	r3, [r7, #28]
 8010dee:	4413      	add	r3, r2
 8010df0:	3334      	adds	r3, #52	@ 0x34
 8010df2:	460a      	mov	r2, r1
 8010df4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010df6:	68ba      	ldr	r2, [r7, #8]
 8010df8:	69fb      	ldr	r3, [r7, #28]
 8010dfa:	4413      	add	r3, r2
 8010dfc:	781b      	ldrb	r3, [r3, #0]
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d006      	beq.n	8010e10 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010e02:	69fb      	ldr	r3, [r7, #28]
 8010e04:	3301      	adds	r3, #1
 8010e06:	61fb      	str	r3, [r7, #28]
 8010e08:	69fb      	ldr	r3, [r7, #28]
 8010e0a:	2b0f      	cmp	r3, #15
 8010e0c:	d9e9      	bls.n	8010de2 <prvInitialiseNewTask+0x56>
 8010e0e:	e000      	b.n	8010e12 <prvInitialiseNewTask+0x86>
			{
				break;
 8010e10:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e14:	2200      	movs	r2, #0
 8010e16:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8010e1a:	e003      	b.n	8010e24 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e1e:	2200      	movs	r2, #0
 8010e20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010e24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e26:	2b06      	cmp	r3, #6
 8010e28:	d901      	bls.n	8010e2e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010e2a:	2306      	movs	r3, #6
 8010e2c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e30:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010e32:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e36:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010e38:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8010e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e3c:	2200      	movs	r2, #0
 8010e3e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e42:	3304      	adds	r3, #4
 8010e44:	4618      	mov	r0, r3
 8010e46:	f7fe ff0d 	bl	800fc64 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e4c:	3318      	adds	r3, #24
 8010e4e:	4618      	mov	r0, r3
 8010e50:	f7fe ff08 	bl	800fc64 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010e54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010e58:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010e5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e5c:	f1c3 0207 	rsb	r2, r3, #7
 8010e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e62:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010e64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010e68:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e6c:	2200      	movs	r2, #0
 8010e6e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e74:	2200      	movs	r2, #0
 8010e76:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8010e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e7c:	334c      	adds	r3, #76	@ 0x4c
 8010e7e:	224c      	movs	r2, #76	@ 0x4c
 8010e80:	2100      	movs	r1, #0
 8010e82:	4618      	mov	r0, r3
 8010e84:	f00d fa37 	bl	801e2f6 <memset>
 8010e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e8a:	4a0d      	ldr	r2, [pc, #52]	@ (8010ec0 <prvInitialiseNewTask+0x134>)
 8010e8c:	651a      	str	r2, [r3, #80]	@ 0x50
 8010e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e90:	4a0c      	ldr	r2, [pc, #48]	@ (8010ec4 <prvInitialiseNewTask+0x138>)
 8010e92:	655a      	str	r2, [r3, #84]	@ 0x54
 8010e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e96:	4a0c      	ldr	r2, [pc, #48]	@ (8010ec8 <prvInitialiseNewTask+0x13c>)
 8010e98:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010e9a:	683a      	ldr	r2, [r7, #0]
 8010e9c:	68f9      	ldr	r1, [r7, #12]
 8010e9e:	69b8      	ldr	r0, [r7, #24]
 8010ea0:	f000 ff1c 	bl	8011cdc <pxPortInitialiseStack>
 8010ea4:	4602      	mov	r2, r0
 8010ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ea8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8010eaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d002      	beq.n	8010eb6 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010eb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010eb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010eb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010eb6:	bf00      	nop
 8010eb8:	3720      	adds	r7, #32
 8010eba:	46bd      	mov	sp, r7
 8010ebc:	bd80      	pop	{r7, pc}
 8010ebe:	bf00      	nop
 8010ec0:	2000e810 	.word	0x2000e810
 8010ec4:	2000e878 	.word	0x2000e878
 8010ec8:	2000e8e0 	.word	0x2000e8e0

08010ecc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010ecc:	b580      	push	{r7, lr}
 8010ece:	b082      	sub	sp, #8
 8010ed0:	af00      	add	r7, sp, #0
 8010ed2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010ed4:	f001 f830 	bl	8011f38 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010ed8:	4b2a      	ldr	r3, [pc, #168]	@ (8010f84 <prvAddNewTaskToReadyList+0xb8>)
 8010eda:	681b      	ldr	r3, [r3, #0]
 8010edc:	3301      	adds	r3, #1
 8010ede:	4a29      	ldr	r2, [pc, #164]	@ (8010f84 <prvAddNewTaskToReadyList+0xb8>)
 8010ee0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010ee2:	4b29      	ldr	r3, [pc, #164]	@ (8010f88 <prvAddNewTaskToReadyList+0xbc>)
 8010ee4:	681b      	ldr	r3, [r3, #0]
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d109      	bne.n	8010efe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010eea:	4a27      	ldr	r2, [pc, #156]	@ (8010f88 <prvAddNewTaskToReadyList+0xbc>)
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010ef0:	4b24      	ldr	r3, [pc, #144]	@ (8010f84 <prvAddNewTaskToReadyList+0xb8>)
 8010ef2:	681b      	ldr	r3, [r3, #0]
 8010ef4:	2b01      	cmp	r3, #1
 8010ef6:	d110      	bne.n	8010f1a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010ef8:	f000 fc06 	bl	8011708 <prvInitialiseTaskLists>
 8010efc:	e00d      	b.n	8010f1a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8010efe:	4b23      	ldr	r3, [pc, #140]	@ (8010f8c <prvAddNewTaskToReadyList+0xc0>)
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d109      	bne.n	8010f1a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010f06:	4b20      	ldr	r3, [pc, #128]	@ (8010f88 <prvAddNewTaskToReadyList+0xbc>)
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f10:	429a      	cmp	r2, r3
 8010f12:	d802      	bhi.n	8010f1a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010f14:	4a1c      	ldr	r2, [pc, #112]	@ (8010f88 <prvAddNewTaskToReadyList+0xbc>)
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010f1a:	4b1d      	ldr	r3, [pc, #116]	@ (8010f90 <prvAddNewTaskToReadyList+0xc4>)
 8010f1c:	681b      	ldr	r3, [r3, #0]
 8010f1e:	3301      	adds	r3, #1
 8010f20:	4a1b      	ldr	r2, [pc, #108]	@ (8010f90 <prvAddNewTaskToReadyList+0xc4>)
 8010f22:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f28:	2201      	movs	r2, #1
 8010f2a:	409a      	lsls	r2, r3
 8010f2c:	4b19      	ldr	r3, [pc, #100]	@ (8010f94 <prvAddNewTaskToReadyList+0xc8>)
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	4313      	orrs	r3, r2
 8010f32:	4a18      	ldr	r2, [pc, #96]	@ (8010f94 <prvAddNewTaskToReadyList+0xc8>)
 8010f34:	6013      	str	r3, [r2, #0]
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010f3a:	4613      	mov	r3, r2
 8010f3c:	009b      	lsls	r3, r3, #2
 8010f3e:	4413      	add	r3, r2
 8010f40:	009b      	lsls	r3, r3, #2
 8010f42:	4a15      	ldr	r2, [pc, #84]	@ (8010f98 <prvAddNewTaskToReadyList+0xcc>)
 8010f44:	441a      	add	r2, r3
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	3304      	adds	r3, #4
 8010f4a:	4619      	mov	r1, r3
 8010f4c:	4610      	mov	r0, r2
 8010f4e:	f7fe fe96 	bl	800fc7e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010f52:	f001 f823 	bl	8011f9c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010f56:	4b0d      	ldr	r3, [pc, #52]	@ (8010f8c <prvAddNewTaskToReadyList+0xc0>)
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d00e      	beq.n	8010f7c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010f5e:	4b0a      	ldr	r3, [pc, #40]	@ (8010f88 <prvAddNewTaskToReadyList+0xbc>)
 8010f60:	681b      	ldr	r3, [r3, #0]
 8010f62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f68:	429a      	cmp	r2, r3
 8010f6a:	d207      	bcs.n	8010f7c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010f6c:	4b0b      	ldr	r3, [pc, #44]	@ (8010f9c <prvAddNewTaskToReadyList+0xd0>)
 8010f6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010f72:	601a      	str	r2, [r3, #0]
 8010f74:	f3bf 8f4f 	dsb	sy
 8010f78:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010f7c:	bf00      	nop
 8010f7e:	3708      	adds	r7, #8
 8010f80:	46bd      	mov	sp, r7
 8010f82:	bd80      	pop	{r7, pc}
 8010f84:	20005708 	.word	0x20005708
 8010f88:	20005608 	.word	0x20005608
 8010f8c:	20005714 	.word	0x20005714
 8010f90:	20005724 	.word	0x20005724
 8010f94:	20005710 	.word	0x20005710
 8010f98:	2000560c 	.word	0x2000560c
 8010f9c:	e000ed04 	.word	0xe000ed04

08010fa0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010fa0:	b580      	push	{r7, lr}
 8010fa2:	b084      	sub	sp, #16
 8010fa4:	af00      	add	r7, sp, #0
 8010fa6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010fa8:	2300      	movs	r3, #0
 8010faa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d018      	beq.n	8010fe4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8010fb2:	4b14      	ldr	r3, [pc, #80]	@ (8011004 <vTaskDelay+0x64>)
 8010fb4:	681b      	ldr	r3, [r3, #0]
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d00b      	beq.n	8010fd2 <vTaskDelay+0x32>
	__asm volatile
 8010fba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010fbe:	f383 8811 	msr	BASEPRI, r3
 8010fc2:	f3bf 8f6f 	isb	sy
 8010fc6:	f3bf 8f4f 	dsb	sy
 8010fca:	60bb      	str	r3, [r7, #8]
}
 8010fcc:	bf00      	nop
 8010fce:	bf00      	nop
 8010fd0:	e7fd      	b.n	8010fce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8010fd2:	f000 f885 	bl	80110e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010fd6:	2100      	movs	r1, #0
 8010fd8:	6878      	ldr	r0, [r7, #4]
 8010fda:	f000 fe19 	bl	8011c10 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010fde:	f000 f88d 	bl	80110fc <xTaskResumeAll>
 8010fe2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	d107      	bne.n	8010ffa <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8010fea:	4b07      	ldr	r3, [pc, #28]	@ (8011008 <vTaskDelay+0x68>)
 8010fec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010ff0:	601a      	str	r2, [r3, #0]
 8010ff2:	f3bf 8f4f 	dsb	sy
 8010ff6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010ffa:	bf00      	nop
 8010ffc:	3710      	adds	r7, #16
 8010ffe:	46bd      	mov	sp, r7
 8011000:	bd80      	pop	{r7, pc}
 8011002:	bf00      	nop
 8011004:	20005730 	.word	0x20005730
 8011008:	e000ed04 	.word	0xe000ed04

0801100c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801100c:	b580      	push	{r7, lr}
 801100e:	b08a      	sub	sp, #40	@ 0x28
 8011010:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8011012:	2300      	movs	r3, #0
 8011014:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8011016:	2300      	movs	r3, #0
 8011018:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801101a:	463a      	mov	r2, r7
 801101c:	1d39      	adds	r1, r7, #4
 801101e:	f107 0308 	add.w	r3, r7, #8
 8011022:	4618      	mov	r0, r3
 8011024:	f7f0 fd94 	bl	8001b50 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8011028:	6839      	ldr	r1, [r7, #0]
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	68ba      	ldr	r2, [r7, #8]
 801102e:	9202      	str	r2, [sp, #8]
 8011030:	9301      	str	r3, [sp, #4]
 8011032:	2300      	movs	r3, #0
 8011034:	9300      	str	r3, [sp, #0]
 8011036:	2300      	movs	r3, #0
 8011038:	460a      	mov	r2, r1
 801103a:	4921      	ldr	r1, [pc, #132]	@ (80110c0 <vTaskStartScheduler+0xb4>)
 801103c:	4821      	ldr	r0, [pc, #132]	@ (80110c4 <vTaskStartScheduler+0xb8>)
 801103e:	f7ff fdff 	bl	8010c40 <xTaskCreateStatic>
 8011042:	4603      	mov	r3, r0
 8011044:	4a20      	ldr	r2, [pc, #128]	@ (80110c8 <vTaskStartScheduler+0xbc>)
 8011046:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8011048:	4b1f      	ldr	r3, [pc, #124]	@ (80110c8 <vTaskStartScheduler+0xbc>)
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	2b00      	cmp	r3, #0
 801104e:	d002      	beq.n	8011056 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8011050:	2301      	movs	r3, #1
 8011052:	617b      	str	r3, [r7, #20]
 8011054:	e001      	b.n	801105a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8011056:	2300      	movs	r3, #0
 8011058:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801105a:	697b      	ldr	r3, [r7, #20]
 801105c:	2b01      	cmp	r3, #1
 801105e:	d11b      	bne.n	8011098 <vTaskStartScheduler+0x8c>
	__asm volatile
 8011060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011064:	f383 8811 	msr	BASEPRI, r3
 8011068:	f3bf 8f6f 	isb	sy
 801106c:	f3bf 8f4f 	dsb	sy
 8011070:	613b      	str	r3, [r7, #16]
}
 8011072:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011074:	4b15      	ldr	r3, [pc, #84]	@ (80110cc <vTaskStartScheduler+0xc0>)
 8011076:	681b      	ldr	r3, [r3, #0]
 8011078:	334c      	adds	r3, #76	@ 0x4c
 801107a:	4a15      	ldr	r2, [pc, #84]	@ (80110d0 <vTaskStartScheduler+0xc4>)
 801107c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801107e:	4b15      	ldr	r3, [pc, #84]	@ (80110d4 <vTaskStartScheduler+0xc8>)
 8011080:	f04f 32ff 	mov.w	r2, #4294967295
 8011084:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8011086:	4b14      	ldr	r3, [pc, #80]	@ (80110d8 <vTaskStartScheduler+0xcc>)
 8011088:	2201      	movs	r2, #1
 801108a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801108c:	4b13      	ldr	r3, [pc, #76]	@ (80110dc <vTaskStartScheduler+0xd0>)
 801108e:	2200      	movs	r2, #0
 8011090:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8011092:	f000 fead 	bl	8011df0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8011096:	e00f      	b.n	80110b8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011098:	697b      	ldr	r3, [r7, #20]
 801109a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801109e:	d10b      	bne.n	80110b8 <vTaskStartScheduler+0xac>
	__asm volatile
 80110a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80110a4:	f383 8811 	msr	BASEPRI, r3
 80110a8:	f3bf 8f6f 	isb	sy
 80110ac:	f3bf 8f4f 	dsb	sy
 80110b0:	60fb      	str	r3, [r7, #12]
}
 80110b2:	bf00      	nop
 80110b4:	bf00      	nop
 80110b6:	e7fd      	b.n	80110b4 <vTaskStartScheduler+0xa8>
}
 80110b8:	bf00      	nop
 80110ba:	3718      	adds	r7, #24
 80110bc:	46bd      	mov	sp, r7
 80110be:	bd80      	pop	{r7, pc}
 80110c0:	0802118c 	.word	0x0802118c
 80110c4:	080116d9 	.word	0x080116d9
 80110c8:	2000572c 	.word	0x2000572c
 80110cc:	20005608 	.word	0x20005608
 80110d0:	20000120 	.word	0x20000120
 80110d4:	20005728 	.word	0x20005728
 80110d8:	20005714 	.word	0x20005714
 80110dc:	2000570c 	.word	0x2000570c

080110e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80110e0:	b480      	push	{r7}
 80110e2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80110e4:	4b04      	ldr	r3, [pc, #16]	@ (80110f8 <vTaskSuspendAll+0x18>)
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	3301      	adds	r3, #1
 80110ea:	4a03      	ldr	r2, [pc, #12]	@ (80110f8 <vTaskSuspendAll+0x18>)
 80110ec:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80110ee:	bf00      	nop
 80110f0:	46bd      	mov	sp, r7
 80110f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110f6:	4770      	bx	lr
 80110f8:	20005730 	.word	0x20005730

080110fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80110fc:	b580      	push	{r7, lr}
 80110fe:	b084      	sub	sp, #16
 8011100:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8011102:	2300      	movs	r3, #0
 8011104:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8011106:	2300      	movs	r3, #0
 8011108:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801110a:	4b42      	ldr	r3, [pc, #264]	@ (8011214 <xTaskResumeAll+0x118>)
 801110c:	681b      	ldr	r3, [r3, #0]
 801110e:	2b00      	cmp	r3, #0
 8011110:	d10b      	bne.n	801112a <xTaskResumeAll+0x2e>
	__asm volatile
 8011112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011116:	f383 8811 	msr	BASEPRI, r3
 801111a:	f3bf 8f6f 	isb	sy
 801111e:	f3bf 8f4f 	dsb	sy
 8011122:	603b      	str	r3, [r7, #0]
}
 8011124:	bf00      	nop
 8011126:	bf00      	nop
 8011128:	e7fd      	b.n	8011126 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801112a:	f000 ff05 	bl	8011f38 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801112e:	4b39      	ldr	r3, [pc, #228]	@ (8011214 <xTaskResumeAll+0x118>)
 8011130:	681b      	ldr	r3, [r3, #0]
 8011132:	3b01      	subs	r3, #1
 8011134:	4a37      	ldr	r2, [pc, #220]	@ (8011214 <xTaskResumeAll+0x118>)
 8011136:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011138:	4b36      	ldr	r3, [pc, #216]	@ (8011214 <xTaskResumeAll+0x118>)
 801113a:	681b      	ldr	r3, [r3, #0]
 801113c:	2b00      	cmp	r3, #0
 801113e:	d161      	bne.n	8011204 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011140:	4b35      	ldr	r3, [pc, #212]	@ (8011218 <xTaskResumeAll+0x11c>)
 8011142:	681b      	ldr	r3, [r3, #0]
 8011144:	2b00      	cmp	r3, #0
 8011146:	d05d      	beq.n	8011204 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011148:	e02e      	b.n	80111a8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801114a:	4b34      	ldr	r3, [pc, #208]	@ (801121c <xTaskResumeAll+0x120>)
 801114c:	68db      	ldr	r3, [r3, #12]
 801114e:	68db      	ldr	r3, [r3, #12]
 8011150:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	3318      	adds	r3, #24
 8011156:	4618      	mov	r0, r3
 8011158:	f7fe fdee 	bl	800fd38 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801115c:	68fb      	ldr	r3, [r7, #12]
 801115e:	3304      	adds	r3, #4
 8011160:	4618      	mov	r0, r3
 8011162:	f7fe fde9 	bl	800fd38 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011166:	68fb      	ldr	r3, [r7, #12]
 8011168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801116a:	2201      	movs	r2, #1
 801116c:	409a      	lsls	r2, r3
 801116e:	4b2c      	ldr	r3, [pc, #176]	@ (8011220 <xTaskResumeAll+0x124>)
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	4313      	orrs	r3, r2
 8011174:	4a2a      	ldr	r2, [pc, #168]	@ (8011220 <xTaskResumeAll+0x124>)
 8011176:	6013      	str	r3, [r2, #0]
 8011178:	68fb      	ldr	r3, [r7, #12]
 801117a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801117c:	4613      	mov	r3, r2
 801117e:	009b      	lsls	r3, r3, #2
 8011180:	4413      	add	r3, r2
 8011182:	009b      	lsls	r3, r3, #2
 8011184:	4a27      	ldr	r2, [pc, #156]	@ (8011224 <xTaskResumeAll+0x128>)
 8011186:	441a      	add	r2, r3
 8011188:	68fb      	ldr	r3, [r7, #12]
 801118a:	3304      	adds	r3, #4
 801118c:	4619      	mov	r1, r3
 801118e:	4610      	mov	r0, r2
 8011190:	f7fe fd75 	bl	800fc7e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011194:	68fb      	ldr	r3, [r7, #12]
 8011196:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011198:	4b23      	ldr	r3, [pc, #140]	@ (8011228 <xTaskResumeAll+0x12c>)
 801119a:	681b      	ldr	r3, [r3, #0]
 801119c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801119e:	429a      	cmp	r2, r3
 80111a0:	d302      	bcc.n	80111a8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80111a2:	4b22      	ldr	r3, [pc, #136]	@ (801122c <xTaskResumeAll+0x130>)
 80111a4:	2201      	movs	r2, #1
 80111a6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80111a8:	4b1c      	ldr	r3, [pc, #112]	@ (801121c <xTaskResumeAll+0x120>)
 80111aa:	681b      	ldr	r3, [r3, #0]
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d1cc      	bne.n	801114a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80111b0:	68fb      	ldr	r3, [r7, #12]
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d001      	beq.n	80111ba <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80111b6:	f000 fb4b 	bl	8011850 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80111ba:	4b1d      	ldr	r3, [pc, #116]	@ (8011230 <xTaskResumeAll+0x134>)
 80111bc:	681b      	ldr	r3, [r3, #0]
 80111be:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	d010      	beq.n	80111e8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80111c6:	f000 f859 	bl	801127c <xTaskIncrementTick>
 80111ca:	4603      	mov	r3, r0
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d002      	beq.n	80111d6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80111d0:	4b16      	ldr	r3, [pc, #88]	@ (801122c <xTaskResumeAll+0x130>)
 80111d2:	2201      	movs	r2, #1
 80111d4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	3b01      	subs	r3, #1
 80111da:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d1f1      	bne.n	80111c6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80111e2:	4b13      	ldr	r3, [pc, #76]	@ (8011230 <xTaskResumeAll+0x134>)
 80111e4:	2200      	movs	r2, #0
 80111e6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80111e8:	4b10      	ldr	r3, [pc, #64]	@ (801122c <xTaskResumeAll+0x130>)
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d009      	beq.n	8011204 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80111f0:	2301      	movs	r3, #1
 80111f2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80111f4:	4b0f      	ldr	r3, [pc, #60]	@ (8011234 <xTaskResumeAll+0x138>)
 80111f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80111fa:	601a      	str	r2, [r3, #0]
 80111fc:	f3bf 8f4f 	dsb	sy
 8011200:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011204:	f000 feca 	bl	8011f9c <vPortExitCritical>

	return xAlreadyYielded;
 8011208:	68bb      	ldr	r3, [r7, #8]
}
 801120a:	4618      	mov	r0, r3
 801120c:	3710      	adds	r7, #16
 801120e:	46bd      	mov	sp, r7
 8011210:	bd80      	pop	{r7, pc}
 8011212:	bf00      	nop
 8011214:	20005730 	.word	0x20005730
 8011218:	20005708 	.word	0x20005708
 801121c:	200056c8 	.word	0x200056c8
 8011220:	20005710 	.word	0x20005710
 8011224:	2000560c 	.word	0x2000560c
 8011228:	20005608 	.word	0x20005608
 801122c:	2000571c 	.word	0x2000571c
 8011230:	20005718 	.word	0x20005718
 8011234:	e000ed04 	.word	0xe000ed04

08011238 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8011238:	b480      	push	{r7}
 801123a:	b083      	sub	sp, #12
 801123c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801123e:	4b05      	ldr	r3, [pc, #20]	@ (8011254 <xTaskGetTickCount+0x1c>)
 8011240:	681b      	ldr	r3, [r3, #0]
 8011242:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8011244:	687b      	ldr	r3, [r7, #4]
}
 8011246:	4618      	mov	r0, r3
 8011248:	370c      	adds	r7, #12
 801124a:	46bd      	mov	sp, r7
 801124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011250:	4770      	bx	lr
 8011252:	bf00      	nop
 8011254:	2000570c 	.word	0x2000570c

08011258 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8011258:	b580      	push	{r7, lr}
 801125a:	b082      	sub	sp, #8
 801125c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801125e:	f000 ff4b 	bl	80120f8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8011262:	2300      	movs	r3, #0
 8011264:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8011266:	4b04      	ldr	r3, [pc, #16]	@ (8011278 <xTaskGetTickCountFromISR+0x20>)
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801126c:	683b      	ldr	r3, [r7, #0]
}
 801126e:	4618      	mov	r0, r3
 8011270:	3708      	adds	r7, #8
 8011272:	46bd      	mov	sp, r7
 8011274:	bd80      	pop	{r7, pc}
 8011276:	bf00      	nop
 8011278:	2000570c 	.word	0x2000570c

0801127c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801127c:	b580      	push	{r7, lr}
 801127e:	b086      	sub	sp, #24
 8011280:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8011282:	2300      	movs	r3, #0
 8011284:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011286:	4b4f      	ldr	r3, [pc, #316]	@ (80113c4 <xTaskIncrementTick+0x148>)
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	2b00      	cmp	r3, #0
 801128c:	f040 808f 	bne.w	80113ae <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011290:	4b4d      	ldr	r3, [pc, #308]	@ (80113c8 <xTaskIncrementTick+0x14c>)
 8011292:	681b      	ldr	r3, [r3, #0]
 8011294:	3301      	adds	r3, #1
 8011296:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011298:	4a4b      	ldr	r2, [pc, #300]	@ (80113c8 <xTaskIncrementTick+0x14c>)
 801129a:	693b      	ldr	r3, [r7, #16]
 801129c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801129e:	693b      	ldr	r3, [r7, #16]
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d121      	bne.n	80112e8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80112a4:	4b49      	ldr	r3, [pc, #292]	@ (80113cc <xTaskIncrementTick+0x150>)
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d00b      	beq.n	80112c6 <xTaskIncrementTick+0x4a>
	__asm volatile
 80112ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80112b2:	f383 8811 	msr	BASEPRI, r3
 80112b6:	f3bf 8f6f 	isb	sy
 80112ba:	f3bf 8f4f 	dsb	sy
 80112be:	603b      	str	r3, [r7, #0]
}
 80112c0:	bf00      	nop
 80112c2:	bf00      	nop
 80112c4:	e7fd      	b.n	80112c2 <xTaskIncrementTick+0x46>
 80112c6:	4b41      	ldr	r3, [pc, #260]	@ (80113cc <xTaskIncrementTick+0x150>)
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	60fb      	str	r3, [r7, #12]
 80112cc:	4b40      	ldr	r3, [pc, #256]	@ (80113d0 <xTaskIncrementTick+0x154>)
 80112ce:	681b      	ldr	r3, [r3, #0]
 80112d0:	4a3e      	ldr	r2, [pc, #248]	@ (80113cc <xTaskIncrementTick+0x150>)
 80112d2:	6013      	str	r3, [r2, #0]
 80112d4:	4a3e      	ldr	r2, [pc, #248]	@ (80113d0 <xTaskIncrementTick+0x154>)
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	6013      	str	r3, [r2, #0]
 80112da:	4b3e      	ldr	r3, [pc, #248]	@ (80113d4 <xTaskIncrementTick+0x158>)
 80112dc:	681b      	ldr	r3, [r3, #0]
 80112de:	3301      	adds	r3, #1
 80112e0:	4a3c      	ldr	r2, [pc, #240]	@ (80113d4 <xTaskIncrementTick+0x158>)
 80112e2:	6013      	str	r3, [r2, #0]
 80112e4:	f000 fab4 	bl	8011850 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80112e8:	4b3b      	ldr	r3, [pc, #236]	@ (80113d8 <xTaskIncrementTick+0x15c>)
 80112ea:	681b      	ldr	r3, [r3, #0]
 80112ec:	693a      	ldr	r2, [r7, #16]
 80112ee:	429a      	cmp	r2, r3
 80112f0:	d348      	bcc.n	8011384 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80112f2:	4b36      	ldr	r3, [pc, #216]	@ (80113cc <xTaskIncrementTick+0x150>)
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	681b      	ldr	r3, [r3, #0]
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d104      	bne.n	8011306 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80112fc:	4b36      	ldr	r3, [pc, #216]	@ (80113d8 <xTaskIncrementTick+0x15c>)
 80112fe:	f04f 32ff 	mov.w	r2, #4294967295
 8011302:	601a      	str	r2, [r3, #0]
					break;
 8011304:	e03e      	b.n	8011384 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011306:	4b31      	ldr	r3, [pc, #196]	@ (80113cc <xTaskIncrementTick+0x150>)
 8011308:	681b      	ldr	r3, [r3, #0]
 801130a:	68db      	ldr	r3, [r3, #12]
 801130c:	68db      	ldr	r3, [r3, #12]
 801130e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011310:	68bb      	ldr	r3, [r7, #8]
 8011312:	685b      	ldr	r3, [r3, #4]
 8011314:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011316:	693a      	ldr	r2, [r7, #16]
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	429a      	cmp	r2, r3
 801131c:	d203      	bcs.n	8011326 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801131e:	4a2e      	ldr	r2, [pc, #184]	@ (80113d8 <xTaskIncrementTick+0x15c>)
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011324:	e02e      	b.n	8011384 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011326:	68bb      	ldr	r3, [r7, #8]
 8011328:	3304      	adds	r3, #4
 801132a:	4618      	mov	r0, r3
 801132c:	f7fe fd04 	bl	800fd38 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011330:	68bb      	ldr	r3, [r7, #8]
 8011332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011334:	2b00      	cmp	r3, #0
 8011336:	d004      	beq.n	8011342 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011338:	68bb      	ldr	r3, [r7, #8]
 801133a:	3318      	adds	r3, #24
 801133c:	4618      	mov	r0, r3
 801133e:	f7fe fcfb 	bl	800fd38 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011342:	68bb      	ldr	r3, [r7, #8]
 8011344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011346:	2201      	movs	r2, #1
 8011348:	409a      	lsls	r2, r3
 801134a:	4b24      	ldr	r3, [pc, #144]	@ (80113dc <xTaskIncrementTick+0x160>)
 801134c:	681b      	ldr	r3, [r3, #0]
 801134e:	4313      	orrs	r3, r2
 8011350:	4a22      	ldr	r2, [pc, #136]	@ (80113dc <xTaskIncrementTick+0x160>)
 8011352:	6013      	str	r3, [r2, #0]
 8011354:	68bb      	ldr	r3, [r7, #8]
 8011356:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011358:	4613      	mov	r3, r2
 801135a:	009b      	lsls	r3, r3, #2
 801135c:	4413      	add	r3, r2
 801135e:	009b      	lsls	r3, r3, #2
 8011360:	4a1f      	ldr	r2, [pc, #124]	@ (80113e0 <xTaskIncrementTick+0x164>)
 8011362:	441a      	add	r2, r3
 8011364:	68bb      	ldr	r3, [r7, #8]
 8011366:	3304      	adds	r3, #4
 8011368:	4619      	mov	r1, r3
 801136a:	4610      	mov	r0, r2
 801136c:	f7fe fc87 	bl	800fc7e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011370:	68bb      	ldr	r3, [r7, #8]
 8011372:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011374:	4b1b      	ldr	r3, [pc, #108]	@ (80113e4 <xTaskIncrementTick+0x168>)
 8011376:	681b      	ldr	r3, [r3, #0]
 8011378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801137a:	429a      	cmp	r2, r3
 801137c:	d3b9      	bcc.n	80112f2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 801137e:	2301      	movs	r3, #1
 8011380:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011382:	e7b6      	b.n	80112f2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011384:	4b17      	ldr	r3, [pc, #92]	@ (80113e4 <xTaskIncrementTick+0x168>)
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801138a:	4915      	ldr	r1, [pc, #84]	@ (80113e0 <xTaskIncrementTick+0x164>)
 801138c:	4613      	mov	r3, r2
 801138e:	009b      	lsls	r3, r3, #2
 8011390:	4413      	add	r3, r2
 8011392:	009b      	lsls	r3, r3, #2
 8011394:	440b      	add	r3, r1
 8011396:	681b      	ldr	r3, [r3, #0]
 8011398:	2b01      	cmp	r3, #1
 801139a:	d901      	bls.n	80113a0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 801139c:	2301      	movs	r3, #1
 801139e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80113a0:	4b11      	ldr	r3, [pc, #68]	@ (80113e8 <xTaskIncrementTick+0x16c>)
 80113a2:	681b      	ldr	r3, [r3, #0]
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d007      	beq.n	80113b8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80113a8:	2301      	movs	r3, #1
 80113aa:	617b      	str	r3, [r7, #20]
 80113ac:	e004      	b.n	80113b8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80113ae:	4b0f      	ldr	r3, [pc, #60]	@ (80113ec <xTaskIncrementTick+0x170>)
 80113b0:	681b      	ldr	r3, [r3, #0]
 80113b2:	3301      	adds	r3, #1
 80113b4:	4a0d      	ldr	r2, [pc, #52]	@ (80113ec <xTaskIncrementTick+0x170>)
 80113b6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80113b8:	697b      	ldr	r3, [r7, #20]
}
 80113ba:	4618      	mov	r0, r3
 80113bc:	3718      	adds	r7, #24
 80113be:	46bd      	mov	sp, r7
 80113c0:	bd80      	pop	{r7, pc}
 80113c2:	bf00      	nop
 80113c4:	20005730 	.word	0x20005730
 80113c8:	2000570c 	.word	0x2000570c
 80113cc:	200056c0 	.word	0x200056c0
 80113d0:	200056c4 	.word	0x200056c4
 80113d4:	20005720 	.word	0x20005720
 80113d8:	20005728 	.word	0x20005728
 80113dc:	20005710 	.word	0x20005710
 80113e0:	2000560c 	.word	0x2000560c
 80113e4:	20005608 	.word	0x20005608
 80113e8:	2000571c 	.word	0x2000571c
 80113ec:	20005718 	.word	0x20005718

080113f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80113f0:	b480      	push	{r7}
 80113f2:	b087      	sub	sp, #28
 80113f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80113f6:	4b2a      	ldr	r3, [pc, #168]	@ (80114a0 <vTaskSwitchContext+0xb0>)
 80113f8:	681b      	ldr	r3, [r3, #0]
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d003      	beq.n	8011406 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80113fe:	4b29      	ldr	r3, [pc, #164]	@ (80114a4 <vTaskSwitchContext+0xb4>)
 8011400:	2201      	movs	r2, #1
 8011402:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011404:	e045      	b.n	8011492 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8011406:	4b27      	ldr	r3, [pc, #156]	@ (80114a4 <vTaskSwitchContext+0xb4>)
 8011408:	2200      	movs	r2, #0
 801140a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801140c:	4b26      	ldr	r3, [pc, #152]	@ (80114a8 <vTaskSwitchContext+0xb8>)
 801140e:	681b      	ldr	r3, [r3, #0]
 8011410:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8011412:	68fb      	ldr	r3, [r7, #12]
 8011414:	fab3 f383 	clz	r3, r3
 8011418:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 801141a:	7afb      	ldrb	r3, [r7, #11]
 801141c:	f1c3 031f 	rsb	r3, r3, #31
 8011420:	617b      	str	r3, [r7, #20]
 8011422:	4922      	ldr	r1, [pc, #136]	@ (80114ac <vTaskSwitchContext+0xbc>)
 8011424:	697a      	ldr	r2, [r7, #20]
 8011426:	4613      	mov	r3, r2
 8011428:	009b      	lsls	r3, r3, #2
 801142a:	4413      	add	r3, r2
 801142c:	009b      	lsls	r3, r3, #2
 801142e:	440b      	add	r3, r1
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	2b00      	cmp	r3, #0
 8011434:	d10b      	bne.n	801144e <vTaskSwitchContext+0x5e>
	__asm volatile
 8011436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801143a:	f383 8811 	msr	BASEPRI, r3
 801143e:	f3bf 8f6f 	isb	sy
 8011442:	f3bf 8f4f 	dsb	sy
 8011446:	607b      	str	r3, [r7, #4]
}
 8011448:	bf00      	nop
 801144a:	bf00      	nop
 801144c:	e7fd      	b.n	801144a <vTaskSwitchContext+0x5a>
 801144e:	697a      	ldr	r2, [r7, #20]
 8011450:	4613      	mov	r3, r2
 8011452:	009b      	lsls	r3, r3, #2
 8011454:	4413      	add	r3, r2
 8011456:	009b      	lsls	r3, r3, #2
 8011458:	4a14      	ldr	r2, [pc, #80]	@ (80114ac <vTaskSwitchContext+0xbc>)
 801145a:	4413      	add	r3, r2
 801145c:	613b      	str	r3, [r7, #16]
 801145e:	693b      	ldr	r3, [r7, #16]
 8011460:	685b      	ldr	r3, [r3, #4]
 8011462:	685a      	ldr	r2, [r3, #4]
 8011464:	693b      	ldr	r3, [r7, #16]
 8011466:	605a      	str	r2, [r3, #4]
 8011468:	693b      	ldr	r3, [r7, #16]
 801146a:	685a      	ldr	r2, [r3, #4]
 801146c:	693b      	ldr	r3, [r7, #16]
 801146e:	3308      	adds	r3, #8
 8011470:	429a      	cmp	r2, r3
 8011472:	d104      	bne.n	801147e <vTaskSwitchContext+0x8e>
 8011474:	693b      	ldr	r3, [r7, #16]
 8011476:	685b      	ldr	r3, [r3, #4]
 8011478:	685a      	ldr	r2, [r3, #4]
 801147a:	693b      	ldr	r3, [r7, #16]
 801147c:	605a      	str	r2, [r3, #4]
 801147e:	693b      	ldr	r3, [r7, #16]
 8011480:	685b      	ldr	r3, [r3, #4]
 8011482:	68db      	ldr	r3, [r3, #12]
 8011484:	4a0a      	ldr	r2, [pc, #40]	@ (80114b0 <vTaskSwitchContext+0xc0>)
 8011486:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011488:	4b09      	ldr	r3, [pc, #36]	@ (80114b0 <vTaskSwitchContext+0xc0>)
 801148a:	681b      	ldr	r3, [r3, #0]
 801148c:	334c      	adds	r3, #76	@ 0x4c
 801148e:	4a09      	ldr	r2, [pc, #36]	@ (80114b4 <vTaskSwitchContext+0xc4>)
 8011490:	6013      	str	r3, [r2, #0]
}
 8011492:	bf00      	nop
 8011494:	371c      	adds	r7, #28
 8011496:	46bd      	mov	sp, r7
 8011498:	f85d 7b04 	ldr.w	r7, [sp], #4
 801149c:	4770      	bx	lr
 801149e:	bf00      	nop
 80114a0:	20005730 	.word	0x20005730
 80114a4:	2000571c 	.word	0x2000571c
 80114a8:	20005710 	.word	0x20005710
 80114ac:	2000560c 	.word	0x2000560c
 80114b0:	20005608 	.word	0x20005608
 80114b4:	20000120 	.word	0x20000120

080114b8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80114b8:	b580      	push	{r7, lr}
 80114ba:	b084      	sub	sp, #16
 80114bc:	af00      	add	r7, sp, #0
 80114be:	6078      	str	r0, [r7, #4]
 80114c0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	d10b      	bne.n	80114e0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80114c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80114cc:	f383 8811 	msr	BASEPRI, r3
 80114d0:	f3bf 8f6f 	isb	sy
 80114d4:	f3bf 8f4f 	dsb	sy
 80114d8:	60fb      	str	r3, [r7, #12]
}
 80114da:	bf00      	nop
 80114dc:	bf00      	nop
 80114de:	e7fd      	b.n	80114dc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80114e0:	4b07      	ldr	r3, [pc, #28]	@ (8011500 <vTaskPlaceOnEventList+0x48>)
 80114e2:	681b      	ldr	r3, [r3, #0]
 80114e4:	3318      	adds	r3, #24
 80114e6:	4619      	mov	r1, r3
 80114e8:	6878      	ldr	r0, [r7, #4]
 80114ea:	f7fe fbec 	bl	800fcc6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80114ee:	2101      	movs	r1, #1
 80114f0:	6838      	ldr	r0, [r7, #0]
 80114f2:	f000 fb8d 	bl	8011c10 <prvAddCurrentTaskToDelayedList>
}
 80114f6:	bf00      	nop
 80114f8:	3710      	adds	r7, #16
 80114fa:	46bd      	mov	sp, r7
 80114fc:	bd80      	pop	{r7, pc}
 80114fe:	bf00      	nop
 8011500:	20005608 	.word	0x20005608

08011504 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011504:	b580      	push	{r7, lr}
 8011506:	b086      	sub	sp, #24
 8011508:	af00      	add	r7, sp, #0
 801150a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	68db      	ldr	r3, [r3, #12]
 8011510:	68db      	ldr	r3, [r3, #12]
 8011512:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011514:	693b      	ldr	r3, [r7, #16]
 8011516:	2b00      	cmp	r3, #0
 8011518:	d10b      	bne.n	8011532 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 801151a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801151e:	f383 8811 	msr	BASEPRI, r3
 8011522:	f3bf 8f6f 	isb	sy
 8011526:	f3bf 8f4f 	dsb	sy
 801152a:	60fb      	str	r3, [r7, #12]
}
 801152c:	bf00      	nop
 801152e:	bf00      	nop
 8011530:	e7fd      	b.n	801152e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011532:	693b      	ldr	r3, [r7, #16]
 8011534:	3318      	adds	r3, #24
 8011536:	4618      	mov	r0, r3
 8011538:	f7fe fbfe 	bl	800fd38 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801153c:	4b1d      	ldr	r3, [pc, #116]	@ (80115b4 <xTaskRemoveFromEventList+0xb0>)
 801153e:	681b      	ldr	r3, [r3, #0]
 8011540:	2b00      	cmp	r3, #0
 8011542:	d11c      	bne.n	801157e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011544:	693b      	ldr	r3, [r7, #16]
 8011546:	3304      	adds	r3, #4
 8011548:	4618      	mov	r0, r3
 801154a:	f7fe fbf5 	bl	800fd38 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801154e:	693b      	ldr	r3, [r7, #16]
 8011550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011552:	2201      	movs	r2, #1
 8011554:	409a      	lsls	r2, r3
 8011556:	4b18      	ldr	r3, [pc, #96]	@ (80115b8 <xTaskRemoveFromEventList+0xb4>)
 8011558:	681b      	ldr	r3, [r3, #0]
 801155a:	4313      	orrs	r3, r2
 801155c:	4a16      	ldr	r2, [pc, #88]	@ (80115b8 <xTaskRemoveFromEventList+0xb4>)
 801155e:	6013      	str	r3, [r2, #0]
 8011560:	693b      	ldr	r3, [r7, #16]
 8011562:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011564:	4613      	mov	r3, r2
 8011566:	009b      	lsls	r3, r3, #2
 8011568:	4413      	add	r3, r2
 801156a:	009b      	lsls	r3, r3, #2
 801156c:	4a13      	ldr	r2, [pc, #76]	@ (80115bc <xTaskRemoveFromEventList+0xb8>)
 801156e:	441a      	add	r2, r3
 8011570:	693b      	ldr	r3, [r7, #16]
 8011572:	3304      	adds	r3, #4
 8011574:	4619      	mov	r1, r3
 8011576:	4610      	mov	r0, r2
 8011578:	f7fe fb81 	bl	800fc7e <vListInsertEnd>
 801157c:	e005      	b.n	801158a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801157e:	693b      	ldr	r3, [r7, #16]
 8011580:	3318      	adds	r3, #24
 8011582:	4619      	mov	r1, r3
 8011584:	480e      	ldr	r0, [pc, #56]	@ (80115c0 <xTaskRemoveFromEventList+0xbc>)
 8011586:	f7fe fb7a 	bl	800fc7e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801158a:	693b      	ldr	r3, [r7, #16]
 801158c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801158e:	4b0d      	ldr	r3, [pc, #52]	@ (80115c4 <xTaskRemoveFromEventList+0xc0>)
 8011590:	681b      	ldr	r3, [r3, #0]
 8011592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011594:	429a      	cmp	r2, r3
 8011596:	d905      	bls.n	80115a4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011598:	2301      	movs	r3, #1
 801159a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801159c:	4b0a      	ldr	r3, [pc, #40]	@ (80115c8 <xTaskRemoveFromEventList+0xc4>)
 801159e:	2201      	movs	r2, #1
 80115a0:	601a      	str	r2, [r3, #0]
 80115a2:	e001      	b.n	80115a8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80115a4:	2300      	movs	r3, #0
 80115a6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80115a8:	697b      	ldr	r3, [r7, #20]
}
 80115aa:	4618      	mov	r0, r3
 80115ac:	3718      	adds	r7, #24
 80115ae:	46bd      	mov	sp, r7
 80115b0:	bd80      	pop	{r7, pc}
 80115b2:	bf00      	nop
 80115b4:	20005730 	.word	0x20005730
 80115b8:	20005710 	.word	0x20005710
 80115bc:	2000560c 	.word	0x2000560c
 80115c0:	200056c8 	.word	0x200056c8
 80115c4:	20005608 	.word	0x20005608
 80115c8:	2000571c 	.word	0x2000571c

080115cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80115cc:	b480      	push	{r7}
 80115ce:	b083      	sub	sp, #12
 80115d0:	af00      	add	r7, sp, #0
 80115d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80115d4:	4b06      	ldr	r3, [pc, #24]	@ (80115f0 <vTaskInternalSetTimeOutState+0x24>)
 80115d6:	681a      	ldr	r2, [r3, #0]
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80115dc:	4b05      	ldr	r3, [pc, #20]	@ (80115f4 <vTaskInternalSetTimeOutState+0x28>)
 80115de:	681a      	ldr	r2, [r3, #0]
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	605a      	str	r2, [r3, #4]
}
 80115e4:	bf00      	nop
 80115e6:	370c      	adds	r7, #12
 80115e8:	46bd      	mov	sp, r7
 80115ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ee:	4770      	bx	lr
 80115f0:	20005720 	.word	0x20005720
 80115f4:	2000570c 	.word	0x2000570c

080115f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80115f8:	b580      	push	{r7, lr}
 80115fa:	b088      	sub	sp, #32
 80115fc:	af00      	add	r7, sp, #0
 80115fe:	6078      	str	r0, [r7, #4]
 8011600:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	2b00      	cmp	r3, #0
 8011606:	d10b      	bne.n	8011620 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8011608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801160c:	f383 8811 	msr	BASEPRI, r3
 8011610:	f3bf 8f6f 	isb	sy
 8011614:	f3bf 8f4f 	dsb	sy
 8011618:	613b      	str	r3, [r7, #16]
}
 801161a:	bf00      	nop
 801161c:	bf00      	nop
 801161e:	e7fd      	b.n	801161c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8011620:	683b      	ldr	r3, [r7, #0]
 8011622:	2b00      	cmp	r3, #0
 8011624:	d10b      	bne.n	801163e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8011626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801162a:	f383 8811 	msr	BASEPRI, r3
 801162e:	f3bf 8f6f 	isb	sy
 8011632:	f3bf 8f4f 	dsb	sy
 8011636:	60fb      	str	r3, [r7, #12]
}
 8011638:	bf00      	nop
 801163a:	bf00      	nop
 801163c:	e7fd      	b.n	801163a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 801163e:	f000 fc7b 	bl	8011f38 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011642:	4b1d      	ldr	r3, [pc, #116]	@ (80116b8 <xTaskCheckForTimeOut+0xc0>)
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	685b      	ldr	r3, [r3, #4]
 801164c:	69ba      	ldr	r2, [r7, #24]
 801164e:	1ad3      	subs	r3, r2, r3
 8011650:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011652:	683b      	ldr	r3, [r7, #0]
 8011654:	681b      	ldr	r3, [r3, #0]
 8011656:	f1b3 3fff 	cmp.w	r3, #4294967295
 801165a:	d102      	bne.n	8011662 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801165c:	2300      	movs	r3, #0
 801165e:	61fb      	str	r3, [r7, #28]
 8011660:	e023      	b.n	80116aa <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	681a      	ldr	r2, [r3, #0]
 8011666:	4b15      	ldr	r3, [pc, #84]	@ (80116bc <xTaskCheckForTimeOut+0xc4>)
 8011668:	681b      	ldr	r3, [r3, #0]
 801166a:	429a      	cmp	r2, r3
 801166c:	d007      	beq.n	801167e <xTaskCheckForTimeOut+0x86>
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	685b      	ldr	r3, [r3, #4]
 8011672:	69ba      	ldr	r2, [r7, #24]
 8011674:	429a      	cmp	r2, r3
 8011676:	d302      	bcc.n	801167e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011678:	2301      	movs	r3, #1
 801167a:	61fb      	str	r3, [r7, #28]
 801167c:	e015      	b.n	80116aa <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801167e:	683b      	ldr	r3, [r7, #0]
 8011680:	681b      	ldr	r3, [r3, #0]
 8011682:	697a      	ldr	r2, [r7, #20]
 8011684:	429a      	cmp	r2, r3
 8011686:	d20b      	bcs.n	80116a0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011688:	683b      	ldr	r3, [r7, #0]
 801168a:	681a      	ldr	r2, [r3, #0]
 801168c:	697b      	ldr	r3, [r7, #20]
 801168e:	1ad2      	subs	r2, r2, r3
 8011690:	683b      	ldr	r3, [r7, #0]
 8011692:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011694:	6878      	ldr	r0, [r7, #4]
 8011696:	f7ff ff99 	bl	80115cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801169a:	2300      	movs	r3, #0
 801169c:	61fb      	str	r3, [r7, #28]
 801169e:	e004      	b.n	80116aa <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80116a0:	683b      	ldr	r3, [r7, #0]
 80116a2:	2200      	movs	r2, #0
 80116a4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80116a6:	2301      	movs	r3, #1
 80116a8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80116aa:	f000 fc77 	bl	8011f9c <vPortExitCritical>

	return xReturn;
 80116ae:	69fb      	ldr	r3, [r7, #28]
}
 80116b0:	4618      	mov	r0, r3
 80116b2:	3720      	adds	r7, #32
 80116b4:	46bd      	mov	sp, r7
 80116b6:	bd80      	pop	{r7, pc}
 80116b8:	2000570c 	.word	0x2000570c
 80116bc:	20005720 	.word	0x20005720

080116c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80116c0:	b480      	push	{r7}
 80116c2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80116c4:	4b03      	ldr	r3, [pc, #12]	@ (80116d4 <vTaskMissedYield+0x14>)
 80116c6:	2201      	movs	r2, #1
 80116c8:	601a      	str	r2, [r3, #0]
}
 80116ca:	bf00      	nop
 80116cc:	46bd      	mov	sp, r7
 80116ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116d2:	4770      	bx	lr
 80116d4:	2000571c 	.word	0x2000571c

080116d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80116d8:	b580      	push	{r7, lr}
 80116da:	b082      	sub	sp, #8
 80116dc:	af00      	add	r7, sp, #0
 80116de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80116e0:	f000 f852 	bl	8011788 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80116e4:	4b06      	ldr	r3, [pc, #24]	@ (8011700 <prvIdleTask+0x28>)
 80116e6:	681b      	ldr	r3, [r3, #0]
 80116e8:	2b01      	cmp	r3, #1
 80116ea:	d9f9      	bls.n	80116e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80116ec:	4b05      	ldr	r3, [pc, #20]	@ (8011704 <prvIdleTask+0x2c>)
 80116ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80116f2:	601a      	str	r2, [r3, #0]
 80116f4:	f3bf 8f4f 	dsb	sy
 80116f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80116fc:	e7f0      	b.n	80116e0 <prvIdleTask+0x8>
 80116fe:	bf00      	nop
 8011700:	2000560c 	.word	0x2000560c
 8011704:	e000ed04 	.word	0xe000ed04

08011708 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011708:	b580      	push	{r7, lr}
 801170a:	b082      	sub	sp, #8
 801170c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801170e:	2300      	movs	r3, #0
 8011710:	607b      	str	r3, [r7, #4]
 8011712:	e00c      	b.n	801172e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011714:	687a      	ldr	r2, [r7, #4]
 8011716:	4613      	mov	r3, r2
 8011718:	009b      	lsls	r3, r3, #2
 801171a:	4413      	add	r3, r2
 801171c:	009b      	lsls	r3, r3, #2
 801171e:	4a12      	ldr	r2, [pc, #72]	@ (8011768 <prvInitialiseTaskLists+0x60>)
 8011720:	4413      	add	r3, r2
 8011722:	4618      	mov	r0, r3
 8011724:	f7fe fa7e 	bl	800fc24 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	3301      	adds	r3, #1
 801172c:	607b      	str	r3, [r7, #4]
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	2b06      	cmp	r3, #6
 8011732:	d9ef      	bls.n	8011714 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011734:	480d      	ldr	r0, [pc, #52]	@ (801176c <prvInitialiseTaskLists+0x64>)
 8011736:	f7fe fa75 	bl	800fc24 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801173a:	480d      	ldr	r0, [pc, #52]	@ (8011770 <prvInitialiseTaskLists+0x68>)
 801173c:	f7fe fa72 	bl	800fc24 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011740:	480c      	ldr	r0, [pc, #48]	@ (8011774 <prvInitialiseTaskLists+0x6c>)
 8011742:	f7fe fa6f 	bl	800fc24 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011746:	480c      	ldr	r0, [pc, #48]	@ (8011778 <prvInitialiseTaskLists+0x70>)
 8011748:	f7fe fa6c 	bl	800fc24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801174c:	480b      	ldr	r0, [pc, #44]	@ (801177c <prvInitialiseTaskLists+0x74>)
 801174e:	f7fe fa69 	bl	800fc24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011752:	4b0b      	ldr	r3, [pc, #44]	@ (8011780 <prvInitialiseTaskLists+0x78>)
 8011754:	4a05      	ldr	r2, [pc, #20]	@ (801176c <prvInitialiseTaskLists+0x64>)
 8011756:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011758:	4b0a      	ldr	r3, [pc, #40]	@ (8011784 <prvInitialiseTaskLists+0x7c>)
 801175a:	4a05      	ldr	r2, [pc, #20]	@ (8011770 <prvInitialiseTaskLists+0x68>)
 801175c:	601a      	str	r2, [r3, #0]
}
 801175e:	bf00      	nop
 8011760:	3708      	adds	r7, #8
 8011762:	46bd      	mov	sp, r7
 8011764:	bd80      	pop	{r7, pc}
 8011766:	bf00      	nop
 8011768:	2000560c 	.word	0x2000560c
 801176c:	20005698 	.word	0x20005698
 8011770:	200056ac 	.word	0x200056ac
 8011774:	200056c8 	.word	0x200056c8
 8011778:	200056dc 	.word	0x200056dc
 801177c:	200056f4 	.word	0x200056f4
 8011780:	200056c0 	.word	0x200056c0
 8011784:	200056c4 	.word	0x200056c4

08011788 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011788:	b580      	push	{r7, lr}
 801178a:	b082      	sub	sp, #8
 801178c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801178e:	e019      	b.n	80117c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011790:	f000 fbd2 	bl	8011f38 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011794:	4b10      	ldr	r3, [pc, #64]	@ (80117d8 <prvCheckTasksWaitingTermination+0x50>)
 8011796:	68db      	ldr	r3, [r3, #12]
 8011798:	68db      	ldr	r3, [r3, #12]
 801179a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	3304      	adds	r3, #4
 80117a0:	4618      	mov	r0, r3
 80117a2:	f7fe fac9 	bl	800fd38 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80117a6:	4b0d      	ldr	r3, [pc, #52]	@ (80117dc <prvCheckTasksWaitingTermination+0x54>)
 80117a8:	681b      	ldr	r3, [r3, #0]
 80117aa:	3b01      	subs	r3, #1
 80117ac:	4a0b      	ldr	r2, [pc, #44]	@ (80117dc <prvCheckTasksWaitingTermination+0x54>)
 80117ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80117b0:	4b0b      	ldr	r3, [pc, #44]	@ (80117e0 <prvCheckTasksWaitingTermination+0x58>)
 80117b2:	681b      	ldr	r3, [r3, #0]
 80117b4:	3b01      	subs	r3, #1
 80117b6:	4a0a      	ldr	r2, [pc, #40]	@ (80117e0 <prvCheckTasksWaitingTermination+0x58>)
 80117b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80117ba:	f000 fbef 	bl	8011f9c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80117be:	6878      	ldr	r0, [r7, #4]
 80117c0:	f000 f810 	bl	80117e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80117c4:	4b06      	ldr	r3, [pc, #24]	@ (80117e0 <prvCheckTasksWaitingTermination+0x58>)
 80117c6:	681b      	ldr	r3, [r3, #0]
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d1e1      	bne.n	8011790 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80117cc:	bf00      	nop
 80117ce:	bf00      	nop
 80117d0:	3708      	adds	r7, #8
 80117d2:	46bd      	mov	sp, r7
 80117d4:	bd80      	pop	{r7, pc}
 80117d6:	bf00      	nop
 80117d8:	200056dc 	.word	0x200056dc
 80117dc:	20005708 	.word	0x20005708
 80117e0:	200056f0 	.word	0x200056f0

080117e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80117e4:	b580      	push	{r7, lr}
 80117e6:	b084      	sub	sp, #16
 80117e8:	af00      	add	r7, sp, #0
 80117ea:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	334c      	adds	r3, #76	@ 0x4c
 80117f0:	4618      	mov	r0, r3
 80117f2:	f00c fdb5 	bl	801e360 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	d108      	bne.n	8011812 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011804:	4618      	mov	r0, r3
 8011806:	f000 fd87 	bl	8012318 <vPortFree>
				vPortFree( pxTCB );
 801180a:	6878      	ldr	r0, [r7, #4]
 801180c:	f000 fd84 	bl	8012318 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011810:	e019      	b.n	8011846 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8011818:	2b01      	cmp	r3, #1
 801181a:	d103      	bne.n	8011824 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 801181c:	6878      	ldr	r0, [r7, #4]
 801181e:	f000 fd7b 	bl	8012318 <vPortFree>
	}
 8011822:	e010      	b.n	8011846 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 801182a:	2b02      	cmp	r3, #2
 801182c:	d00b      	beq.n	8011846 <prvDeleteTCB+0x62>
	__asm volatile
 801182e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011832:	f383 8811 	msr	BASEPRI, r3
 8011836:	f3bf 8f6f 	isb	sy
 801183a:	f3bf 8f4f 	dsb	sy
 801183e:	60fb      	str	r3, [r7, #12]
}
 8011840:	bf00      	nop
 8011842:	bf00      	nop
 8011844:	e7fd      	b.n	8011842 <prvDeleteTCB+0x5e>
	}
 8011846:	bf00      	nop
 8011848:	3710      	adds	r7, #16
 801184a:	46bd      	mov	sp, r7
 801184c:	bd80      	pop	{r7, pc}
	...

08011850 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011850:	b480      	push	{r7}
 8011852:	b083      	sub	sp, #12
 8011854:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011856:	4b0c      	ldr	r3, [pc, #48]	@ (8011888 <prvResetNextTaskUnblockTime+0x38>)
 8011858:	681b      	ldr	r3, [r3, #0]
 801185a:	681b      	ldr	r3, [r3, #0]
 801185c:	2b00      	cmp	r3, #0
 801185e:	d104      	bne.n	801186a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011860:	4b0a      	ldr	r3, [pc, #40]	@ (801188c <prvResetNextTaskUnblockTime+0x3c>)
 8011862:	f04f 32ff 	mov.w	r2, #4294967295
 8011866:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011868:	e008      	b.n	801187c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801186a:	4b07      	ldr	r3, [pc, #28]	@ (8011888 <prvResetNextTaskUnblockTime+0x38>)
 801186c:	681b      	ldr	r3, [r3, #0]
 801186e:	68db      	ldr	r3, [r3, #12]
 8011870:	68db      	ldr	r3, [r3, #12]
 8011872:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	685b      	ldr	r3, [r3, #4]
 8011878:	4a04      	ldr	r2, [pc, #16]	@ (801188c <prvResetNextTaskUnblockTime+0x3c>)
 801187a:	6013      	str	r3, [r2, #0]
}
 801187c:	bf00      	nop
 801187e:	370c      	adds	r7, #12
 8011880:	46bd      	mov	sp, r7
 8011882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011886:	4770      	bx	lr
 8011888:	200056c0 	.word	0x200056c0
 801188c:	20005728 	.word	0x20005728

08011890 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011890:	b480      	push	{r7}
 8011892:	b083      	sub	sp, #12
 8011894:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011896:	4b0b      	ldr	r3, [pc, #44]	@ (80118c4 <xTaskGetSchedulerState+0x34>)
 8011898:	681b      	ldr	r3, [r3, #0]
 801189a:	2b00      	cmp	r3, #0
 801189c:	d102      	bne.n	80118a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801189e:	2301      	movs	r3, #1
 80118a0:	607b      	str	r3, [r7, #4]
 80118a2:	e008      	b.n	80118b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80118a4:	4b08      	ldr	r3, [pc, #32]	@ (80118c8 <xTaskGetSchedulerState+0x38>)
 80118a6:	681b      	ldr	r3, [r3, #0]
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d102      	bne.n	80118b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80118ac:	2302      	movs	r3, #2
 80118ae:	607b      	str	r3, [r7, #4]
 80118b0:	e001      	b.n	80118b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80118b2:	2300      	movs	r3, #0
 80118b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80118b6:	687b      	ldr	r3, [r7, #4]
	}
 80118b8:	4618      	mov	r0, r3
 80118ba:	370c      	adds	r7, #12
 80118bc:	46bd      	mov	sp, r7
 80118be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118c2:	4770      	bx	lr
 80118c4:	20005714 	.word	0x20005714
 80118c8:	20005730 	.word	0x20005730

080118cc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80118cc:	b580      	push	{r7, lr}
 80118ce:	b084      	sub	sp, #16
 80118d0:	af00      	add	r7, sp, #0
 80118d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80118d8:	2300      	movs	r3, #0
 80118da:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d05e      	beq.n	80119a0 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80118e2:	68bb      	ldr	r3, [r7, #8]
 80118e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80118e6:	4b31      	ldr	r3, [pc, #196]	@ (80119ac <xTaskPriorityInherit+0xe0>)
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80118ec:	429a      	cmp	r2, r3
 80118ee:	d24e      	bcs.n	801198e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80118f0:	68bb      	ldr	r3, [r7, #8]
 80118f2:	699b      	ldr	r3, [r3, #24]
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	db06      	blt.n	8011906 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80118f8:	4b2c      	ldr	r3, [pc, #176]	@ (80119ac <xTaskPriorityInherit+0xe0>)
 80118fa:	681b      	ldr	r3, [r3, #0]
 80118fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80118fe:	f1c3 0207 	rsb	r2, r3, #7
 8011902:	68bb      	ldr	r3, [r7, #8]
 8011904:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8011906:	68bb      	ldr	r3, [r7, #8]
 8011908:	6959      	ldr	r1, [r3, #20]
 801190a:	68bb      	ldr	r3, [r7, #8]
 801190c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801190e:	4613      	mov	r3, r2
 8011910:	009b      	lsls	r3, r3, #2
 8011912:	4413      	add	r3, r2
 8011914:	009b      	lsls	r3, r3, #2
 8011916:	4a26      	ldr	r2, [pc, #152]	@ (80119b0 <xTaskPriorityInherit+0xe4>)
 8011918:	4413      	add	r3, r2
 801191a:	4299      	cmp	r1, r3
 801191c:	d12f      	bne.n	801197e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801191e:	68bb      	ldr	r3, [r7, #8]
 8011920:	3304      	adds	r3, #4
 8011922:	4618      	mov	r0, r3
 8011924:	f7fe fa08 	bl	800fd38 <uxListRemove>
 8011928:	4603      	mov	r3, r0
 801192a:	2b00      	cmp	r3, #0
 801192c:	d10a      	bne.n	8011944 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 801192e:	68bb      	ldr	r3, [r7, #8]
 8011930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011932:	2201      	movs	r2, #1
 8011934:	fa02 f303 	lsl.w	r3, r2, r3
 8011938:	43da      	mvns	r2, r3
 801193a:	4b1e      	ldr	r3, [pc, #120]	@ (80119b4 <xTaskPriorityInherit+0xe8>)
 801193c:	681b      	ldr	r3, [r3, #0]
 801193e:	4013      	ands	r3, r2
 8011940:	4a1c      	ldr	r2, [pc, #112]	@ (80119b4 <xTaskPriorityInherit+0xe8>)
 8011942:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011944:	4b19      	ldr	r3, [pc, #100]	@ (80119ac <xTaskPriorityInherit+0xe0>)
 8011946:	681b      	ldr	r3, [r3, #0]
 8011948:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801194a:	68bb      	ldr	r3, [r7, #8]
 801194c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801194e:	68bb      	ldr	r3, [r7, #8]
 8011950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011952:	2201      	movs	r2, #1
 8011954:	409a      	lsls	r2, r3
 8011956:	4b17      	ldr	r3, [pc, #92]	@ (80119b4 <xTaskPriorityInherit+0xe8>)
 8011958:	681b      	ldr	r3, [r3, #0]
 801195a:	4313      	orrs	r3, r2
 801195c:	4a15      	ldr	r2, [pc, #84]	@ (80119b4 <xTaskPriorityInherit+0xe8>)
 801195e:	6013      	str	r3, [r2, #0]
 8011960:	68bb      	ldr	r3, [r7, #8]
 8011962:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011964:	4613      	mov	r3, r2
 8011966:	009b      	lsls	r3, r3, #2
 8011968:	4413      	add	r3, r2
 801196a:	009b      	lsls	r3, r3, #2
 801196c:	4a10      	ldr	r2, [pc, #64]	@ (80119b0 <xTaskPriorityInherit+0xe4>)
 801196e:	441a      	add	r2, r3
 8011970:	68bb      	ldr	r3, [r7, #8]
 8011972:	3304      	adds	r3, #4
 8011974:	4619      	mov	r1, r3
 8011976:	4610      	mov	r0, r2
 8011978:	f7fe f981 	bl	800fc7e <vListInsertEnd>
 801197c:	e004      	b.n	8011988 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801197e:	4b0b      	ldr	r3, [pc, #44]	@ (80119ac <xTaskPriorityInherit+0xe0>)
 8011980:	681b      	ldr	r3, [r3, #0]
 8011982:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011984:	68bb      	ldr	r3, [r7, #8]
 8011986:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8011988:	2301      	movs	r3, #1
 801198a:	60fb      	str	r3, [r7, #12]
 801198c:	e008      	b.n	80119a0 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801198e:	68bb      	ldr	r3, [r7, #8]
 8011990:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011992:	4b06      	ldr	r3, [pc, #24]	@ (80119ac <xTaskPriorityInherit+0xe0>)
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011998:	429a      	cmp	r2, r3
 801199a:	d201      	bcs.n	80119a0 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801199c:	2301      	movs	r3, #1
 801199e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80119a0:	68fb      	ldr	r3, [r7, #12]
	}
 80119a2:	4618      	mov	r0, r3
 80119a4:	3710      	adds	r7, #16
 80119a6:	46bd      	mov	sp, r7
 80119a8:	bd80      	pop	{r7, pc}
 80119aa:	bf00      	nop
 80119ac:	20005608 	.word	0x20005608
 80119b0:	2000560c 	.word	0x2000560c
 80119b4:	20005710 	.word	0x20005710

080119b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80119b8:	b580      	push	{r7, lr}
 80119ba:	b086      	sub	sp, #24
 80119bc:	af00      	add	r7, sp, #0
 80119be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80119c4:	2300      	movs	r3, #0
 80119c6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d070      	beq.n	8011ab0 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80119ce:	4b3b      	ldr	r3, [pc, #236]	@ (8011abc <xTaskPriorityDisinherit+0x104>)
 80119d0:	681b      	ldr	r3, [r3, #0]
 80119d2:	693a      	ldr	r2, [r7, #16]
 80119d4:	429a      	cmp	r2, r3
 80119d6:	d00b      	beq.n	80119f0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80119d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80119dc:	f383 8811 	msr	BASEPRI, r3
 80119e0:	f3bf 8f6f 	isb	sy
 80119e4:	f3bf 8f4f 	dsb	sy
 80119e8:	60fb      	str	r3, [r7, #12]
}
 80119ea:	bf00      	nop
 80119ec:	bf00      	nop
 80119ee:	e7fd      	b.n	80119ec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80119f0:	693b      	ldr	r3, [r7, #16]
 80119f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d10b      	bne.n	8011a10 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80119f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80119fc:	f383 8811 	msr	BASEPRI, r3
 8011a00:	f3bf 8f6f 	isb	sy
 8011a04:	f3bf 8f4f 	dsb	sy
 8011a08:	60bb      	str	r3, [r7, #8]
}
 8011a0a:	bf00      	nop
 8011a0c:	bf00      	nop
 8011a0e:	e7fd      	b.n	8011a0c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8011a10:	693b      	ldr	r3, [r7, #16]
 8011a12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011a14:	1e5a      	subs	r2, r3, #1
 8011a16:	693b      	ldr	r3, [r7, #16]
 8011a18:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011a1a:	693b      	ldr	r3, [r7, #16]
 8011a1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011a1e:	693b      	ldr	r3, [r7, #16]
 8011a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011a22:	429a      	cmp	r2, r3
 8011a24:	d044      	beq.n	8011ab0 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011a26:	693b      	ldr	r3, [r7, #16]
 8011a28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d140      	bne.n	8011ab0 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011a2e:	693b      	ldr	r3, [r7, #16]
 8011a30:	3304      	adds	r3, #4
 8011a32:	4618      	mov	r0, r3
 8011a34:	f7fe f980 	bl	800fd38 <uxListRemove>
 8011a38:	4603      	mov	r3, r0
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	d115      	bne.n	8011a6a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8011a3e:	693b      	ldr	r3, [r7, #16]
 8011a40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011a42:	491f      	ldr	r1, [pc, #124]	@ (8011ac0 <xTaskPriorityDisinherit+0x108>)
 8011a44:	4613      	mov	r3, r2
 8011a46:	009b      	lsls	r3, r3, #2
 8011a48:	4413      	add	r3, r2
 8011a4a:	009b      	lsls	r3, r3, #2
 8011a4c:	440b      	add	r3, r1
 8011a4e:	681b      	ldr	r3, [r3, #0]
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d10a      	bne.n	8011a6a <xTaskPriorityDisinherit+0xb2>
 8011a54:	693b      	ldr	r3, [r7, #16]
 8011a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011a58:	2201      	movs	r2, #1
 8011a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8011a5e:	43da      	mvns	r2, r3
 8011a60:	4b18      	ldr	r3, [pc, #96]	@ (8011ac4 <xTaskPriorityDisinherit+0x10c>)
 8011a62:	681b      	ldr	r3, [r3, #0]
 8011a64:	4013      	ands	r3, r2
 8011a66:	4a17      	ldr	r2, [pc, #92]	@ (8011ac4 <xTaskPriorityDisinherit+0x10c>)
 8011a68:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011a6a:	693b      	ldr	r3, [r7, #16]
 8011a6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011a6e:	693b      	ldr	r3, [r7, #16]
 8011a70:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011a72:	693b      	ldr	r3, [r7, #16]
 8011a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011a76:	f1c3 0207 	rsb	r2, r3, #7
 8011a7a:	693b      	ldr	r3, [r7, #16]
 8011a7c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011a7e:	693b      	ldr	r3, [r7, #16]
 8011a80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011a82:	2201      	movs	r2, #1
 8011a84:	409a      	lsls	r2, r3
 8011a86:	4b0f      	ldr	r3, [pc, #60]	@ (8011ac4 <xTaskPriorityDisinherit+0x10c>)
 8011a88:	681b      	ldr	r3, [r3, #0]
 8011a8a:	4313      	orrs	r3, r2
 8011a8c:	4a0d      	ldr	r2, [pc, #52]	@ (8011ac4 <xTaskPriorityDisinherit+0x10c>)
 8011a8e:	6013      	str	r3, [r2, #0]
 8011a90:	693b      	ldr	r3, [r7, #16]
 8011a92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011a94:	4613      	mov	r3, r2
 8011a96:	009b      	lsls	r3, r3, #2
 8011a98:	4413      	add	r3, r2
 8011a9a:	009b      	lsls	r3, r3, #2
 8011a9c:	4a08      	ldr	r2, [pc, #32]	@ (8011ac0 <xTaskPriorityDisinherit+0x108>)
 8011a9e:	441a      	add	r2, r3
 8011aa0:	693b      	ldr	r3, [r7, #16]
 8011aa2:	3304      	adds	r3, #4
 8011aa4:	4619      	mov	r1, r3
 8011aa6:	4610      	mov	r0, r2
 8011aa8:	f7fe f8e9 	bl	800fc7e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011aac:	2301      	movs	r3, #1
 8011aae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011ab0:	697b      	ldr	r3, [r7, #20]
	}
 8011ab2:	4618      	mov	r0, r3
 8011ab4:	3718      	adds	r7, #24
 8011ab6:	46bd      	mov	sp, r7
 8011ab8:	bd80      	pop	{r7, pc}
 8011aba:	bf00      	nop
 8011abc:	20005608 	.word	0x20005608
 8011ac0:	2000560c 	.word	0x2000560c
 8011ac4:	20005710 	.word	0x20005710

08011ac8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8011ac8:	b580      	push	{r7, lr}
 8011aca:	b088      	sub	sp, #32
 8011acc:	af00      	add	r7, sp, #0
 8011ace:	6078      	str	r0, [r7, #4]
 8011ad0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8011ad6:	2301      	movs	r3, #1
 8011ad8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d079      	beq.n	8011bd4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8011ae0:	69bb      	ldr	r3, [r7, #24]
 8011ae2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d10b      	bne.n	8011b00 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8011ae8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011aec:	f383 8811 	msr	BASEPRI, r3
 8011af0:	f3bf 8f6f 	isb	sy
 8011af4:	f3bf 8f4f 	dsb	sy
 8011af8:	60fb      	str	r3, [r7, #12]
}
 8011afa:	bf00      	nop
 8011afc:	bf00      	nop
 8011afe:	e7fd      	b.n	8011afc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8011b00:	69bb      	ldr	r3, [r7, #24]
 8011b02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011b04:	683a      	ldr	r2, [r7, #0]
 8011b06:	429a      	cmp	r2, r3
 8011b08:	d902      	bls.n	8011b10 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8011b0a:	683b      	ldr	r3, [r7, #0]
 8011b0c:	61fb      	str	r3, [r7, #28]
 8011b0e:	e002      	b.n	8011b16 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8011b10:	69bb      	ldr	r3, [r7, #24]
 8011b12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011b14:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8011b16:	69bb      	ldr	r3, [r7, #24]
 8011b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011b1a:	69fa      	ldr	r2, [r7, #28]
 8011b1c:	429a      	cmp	r2, r3
 8011b1e:	d059      	beq.n	8011bd4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8011b20:	69bb      	ldr	r3, [r7, #24]
 8011b22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011b24:	697a      	ldr	r2, [r7, #20]
 8011b26:	429a      	cmp	r2, r3
 8011b28:	d154      	bne.n	8011bd4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8011b2a:	4b2c      	ldr	r3, [pc, #176]	@ (8011bdc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8011b2c:	681b      	ldr	r3, [r3, #0]
 8011b2e:	69ba      	ldr	r2, [r7, #24]
 8011b30:	429a      	cmp	r2, r3
 8011b32:	d10b      	bne.n	8011b4c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8011b34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b38:	f383 8811 	msr	BASEPRI, r3
 8011b3c:	f3bf 8f6f 	isb	sy
 8011b40:	f3bf 8f4f 	dsb	sy
 8011b44:	60bb      	str	r3, [r7, #8]
}
 8011b46:	bf00      	nop
 8011b48:	bf00      	nop
 8011b4a:	e7fd      	b.n	8011b48 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8011b4c:	69bb      	ldr	r3, [r7, #24]
 8011b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011b50:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8011b52:	69bb      	ldr	r3, [r7, #24]
 8011b54:	69fa      	ldr	r2, [r7, #28]
 8011b56:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011b58:	69bb      	ldr	r3, [r7, #24]
 8011b5a:	699b      	ldr	r3, [r3, #24]
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	db04      	blt.n	8011b6a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011b60:	69fb      	ldr	r3, [r7, #28]
 8011b62:	f1c3 0207 	rsb	r2, r3, #7
 8011b66:	69bb      	ldr	r3, [r7, #24]
 8011b68:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011b6a:	69bb      	ldr	r3, [r7, #24]
 8011b6c:	6959      	ldr	r1, [r3, #20]
 8011b6e:	693a      	ldr	r2, [r7, #16]
 8011b70:	4613      	mov	r3, r2
 8011b72:	009b      	lsls	r3, r3, #2
 8011b74:	4413      	add	r3, r2
 8011b76:	009b      	lsls	r3, r3, #2
 8011b78:	4a19      	ldr	r2, [pc, #100]	@ (8011be0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8011b7a:	4413      	add	r3, r2
 8011b7c:	4299      	cmp	r1, r3
 8011b7e:	d129      	bne.n	8011bd4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011b80:	69bb      	ldr	r3, [r7, #24]
 8011b82:	3304      	adds	r3, #4
 8011b84:	4618      	mov	r0, r3
 8011b86:	f7fe f8d7 	bl	800fd38 <uxListRemove>
 8011b8a:	4603      	mov	r3, r0
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d10a      	bne.n	8011ba6 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8011b90:	69bb      	ldr	r3, [r7, #24]
 8011b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011b94:	2201      	movs	r2, #1
 8011b96:	fa02 f303 	lsl.w	r3, r2, r3
 8011b9a:	43da      	mvns	r2, r3
 8011b9c:	4b11      	ldr	r3, [pc, #68]	@ (8011be4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8011b9e:	681b      	ldr	r3, [r3, #0]
 8011ba0:	4013      	ands	r3, r2
 8011ba2:	4a10      	ldr	r2, [pc, #64]	@ (8011be4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8011ba4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8011ba6:	69bb      	ldr	r3, [r7, #24]
 8011ba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011baa:	2201      	movs	r2, #1
 8011bac:	409a      	lsls	r2, r3
 8011bae:	4b0d      	ldr	r3, [pc, #52]	@ (8011be4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8011bb0:	681b      	ldr	r3, [r3, #0]
 8011bb2:	4313      	orrs	r3, r2
 8011bb4:	4a0b      	ldr	r2, [pc, #44]	@ (8011be4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8011bb6:	6013      	str	r3, [r2, #0]
 8011bb8:	69bb      	ldr	r3, [r7, #24]
 8011bba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011bbc:	4613      	mov	r3, r2
 8011bbe:	009b      	lsls	r3, r3, #2
 8011bc0:	4413      	add	r3, r2
 8011bc2:	009b      	lsls	r3, r3, #2
 8011bc4:	4a06      	ldr	r2, [pc, #24]	@ (8011be0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8011bc6:	441a      	add	r2, r3
 8011bc8:	69bb      	ldr	r3, [r7, #24]
 8011bca:	3304      	adds	r3, #4
 8011bcc:	4619      	mov	r1, r3
 8011bce:	4610      	mov	r0, r2
 8011bd0:	f7fe f855 	bl	800fc7e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011bd4:	bf00      	nop
 8011bd6:	3720      	adds	r7, #32
 8011bd8:	46bd      	mov	sp, r7
 8011bda:	bd80      	pop	{r7, pc}
 8011bdc:	20005608 	.word	0x20005608
 8011be0:	2000560c 	.word	0x2000560c
 8011be4:	20005710 	.word	0x20005710

08011be8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8011be8:	b480      	push	{r7}
 8011bea:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8011bec:	4b07      	ldr	r3, [pc, #28]	@ (8011c0c <pvTaskIncrementMutexHeldCount+0x24>)
 8011bee:	681b      	ldr	r3, [r3, #0]
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	d004      	beq.n	8011bfe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8011bf4:	4b05      	ldr	r3, [pc, #20]	@ (8011c0c <pvTaskIncrementMutexHeldCount+0x24>)
 8011bf6:	681b      	ldr	r3, [r3, #0]
 8011bf8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8011bfa:	3201      	adds	r2, #1
 8011bfc:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8011bfe:	4b03      	ldr	r3, [pc, #12]	@ (8011c0c <pvTaskIncrementMutexHeldCount+0x24>)
 8011c00:	681b      	ldr	r3, [r3, #0]
	}
 8011c02:	4618      	mov	r0, r3
 8011c04:	46bd      	mov	sp, r7
 8011c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c0a:	4770      	bx	lr
 8011c0c:	20005608 	.word	0x20005608

08011c10 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011c10:	b580      	push	{r7, lr}
 8011c12:	b084      	sub	sp, #16
 8011c14:	af00      	add	r7, sp, #0
 8011c16:	6078      	str	r0, [r7, #4]
 8011c18:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011c1a:	4b29      	ldr	r3, [pc, #164]	@ (8011cc0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8011c1c:	681b      	ldr	r3, [r3, #0]
 8011c1e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011c20:	4b28      	ldr	r3, [pc, #160]	@ (8011cc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011c22:	681b      	ldr	r3, [r3, #0]
 8011c24:	3304      	adds	r3, #4
 8011c26:	4618      	mov	r0, r3
 8011c28:	f7fe f886 	bl	800fd38 <uxListRemove>
 8011c2c:	4603      	mov	r3, r0
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	d10b      	bne.n	8011c4a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8011c32:	4b24      	ldr	r3, [pc, #144]	@ (8011cc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011c34:	681b      	ldr	r3, [r3, #0]
 8011c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011c38:	2201      	movs	r2, #1
 8011c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8011c3e:	43da      	mvns	r2, r3
 8011c40:	4b21      	ldr	r3, [pc, #132]	@ (8011cc8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8011c42:	681b      	ldr	r3, [r3, #0]
 8011c44:	4013      	ands	r3, r2
 8011c46:	4a20      	ldr	r2, [pc, #128]	@ (8011cc8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8011c48:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c50:	d10a      	bne.n	8011c68 <prvAddCurrentTaskToDelayedList+0x58>
 8011c52:	683b      	ldr	r3, [r7, #0]
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d007      	beq.n	8011c68 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011c58:	4b1a      	ldr	r3, [pc, #104]	@ (8011cc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011c5a:	681b      	ldr	r3, [r3, #0]
 8011c5c:	3304      	adds	r3, #4
 8011c5e:	4619      	mov	r1, r3
 8011c60:	481a      	ldr	r0, [pc, #104]	@ (8011ccc <prvAddCurrentTaskToDelayedList+0xbc>)
 8011c62:	f7fe f80c 	bl	800fc7e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011c66:	e026      	b.n	8011cb6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011c68:	68fa      	ldr	r2, [r7, #12]
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	4413      	add	r3, r2
 8011c6e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011c70:	4b14      	ldr	r3, [pc, #80]	@ (8011cc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011c72:	681b      	ldr	r3, [r3, #0]
 8011c74:	68ba      	ldr	r2, [r7, #8]
 8011c76:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011c78:	68ba      	ldr	r2, [r7, #8]
 8011c7a:	68fb      	ldr	r3, [r7, #12]
 8011c7c:	429a      	cmp	r2, r3
 8011c7e:	d209      	bcs.n	8011c94 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011c80:	4b13      	ldr	r3, [pc, #76]	@ (8011cd0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8011c82:	681a      	ldr	r2, [r3, #0]
 8011c84:	4b0f      	ldr	r3, [pc, #60]	@ (8011cc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011c86:	681b      	ldr	r3, [r3, #0]
 8011c88:	3304      	adds	r3, #4
 8011c8a:	4619      	mov	r1, r3
 8011c8c:	4610      	mov	r0, r2
 8011c8e:	f7fe f81a 	bl	800fcc6 <vListInsert>
}
 8011c92:	e010      	b.n	8011cb6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011c94:	4b0f      	ldr	r3, [pc, #60]	@ (8011cd4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8011c96:	681a      	ldr	r2, [r3, #0]
 8011c98:	4b0a      	ldr	r3, [pc, #40]	@ (8011cc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011c9a:	681b      	ldr	r3, [r3, #0]
 8011c9c:	3304      	adds	r3, #4
 8011c9e:	4619      	mov	r1, r3
 8011ca0:	4610      	mov	r0, r2
 8011ca2:	f7fe f810 	bl	800fcc6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011ca6:	4b0c      	ldr	r3, [pc, #48]	@ (8011cd8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8011ca8:	681b      	ldr	r3, [r3, #0]
 8011caa:	68ba      	ldr	r2, [r7, #8]
 8011cac:	429a      	cmp	r2, r3
 8011cae:	d202      	bcs.n	8011cb6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8011cb0:	4a09      	ldr	r2, [pc, #36]	@ (8011cd8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8011cb2:	68bb      	ldr	r3, [r7, #8]
 8011cb4:	6013      	str	r3, [r2, #0]
}
 8011cb6:	bf00      	nop
 8011cb8:	3710      	adds	r7, #16
 8011cba:	46bd      	mov	sp, r7
 8011cbc:	bd80      	pop	{r7, pc}
 8011cbe:	bf00      	nop
 8011cc0:	2000570c 	.word	0x2000570c
 8011cc4:	20005608 	.word	0x20005608
 8011cc8:	20005710 	.word	0x20005710
 8011ccc:	200056f4 	.word	0x200056f4
 8011cd0:	200056c4 	.word	0x200056c4
 8011cd4:	200056c0 	.word	0x200056c0
 8011cd8:	20005728 	.word	0x20005728

08011cdc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011cdc:	b480      	push	{r7}
 8011cde:	b085      	sub	sp, #20
 8011ce0:	af00      	add	r7, sp, #0
 8011ce2:	60f8      	str	r0, [r7, #12]
 8011ce4:	60b9      	str	r1, [r7, #8]
 8011ce6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011ce8:	68fb      	ldr	r3, [r7, #12]
 8011cea:	3b04      	subs	r3, #4
 8011cec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011cee:	68fb      	ldr	r3, [r7, #12]
 8011cf0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8011cf4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011cf6:	68fb      	ldr	r3, [r7, #12]
 8011cf8:	3b04      	subs	r3, #4
 8011cfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011cfc:	68bb      	ldr	r3, [r7, #8]
 8011cfe:	f023 0201 	bic.w	r2, r3, #1
 8011d02:	68fb      	ldr	r3, [r7, #12]
 8011d04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011d06:	68fb      	ldr	r3, [r7, #12]
 8011d08:	3b04      	subs	r3, #4
 8011d0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011d0c:	4a0c      	ldr	r2, [pc, #48]	@ (8011d40 <pxPortInitialiseStack+0x64>)
 8011d0e:	68fb      	ldr	r3, [r7, #12]
 8011d10:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8011d12:	68fb      	ldr	r3, [r7, #12]
 8011d14:	3b14      	subs	r3, #20
 8011d16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011d18:	687a      	ldr	r2, [r7, #4]
 8011d1a:	68fb      	ldr	r3, [r7, #12]
 8011d1c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8011d1e:	68fb      	ldr	r3, [r7, #12]
 8011d20:	3b04      	subs	r3, #4
 8011d22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011d24:	68fb      	ldr	r3, [r7, #12]
 8011d26:	f06f 0202 	mvn.w	r2, #2
 8011d2a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011d2c:	68fb      	ldr	r3, [r7, #12]
 8011d2e:	3b20      	subs	r3, #32
 8011d30:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011d32:	68fb      	ldr	r3, [r7, #12]
}
 8011d34:	4618      	mov	r0, r3
 8011d36:	3714      	adds	r7, #20
 8011d38:	46bd      	mov	sp, r7
 8011d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d3e:	4770      	bx	lr
 8011d40:	08011d45 	.word	0x08011d45

08011d44 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011d44:	b480      	push	{r7}
 8011d46:	b085      	sub	sp, #20
 8011d48:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8011d4a:	2300      	movs	r3, #0
 8011d4c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011d4e:	4b13      	ldr	r3, [pc, #76]	@ (8011d9c <prvTaskExitError+0x58>)
 8011d50:	681b      	ldr	r3, [r3, #0]
 8011d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d56:	d00b      	beq.n	8011d70 <prvTaskExitError+0x2c>
	__asm volatile
 8011d58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011d5c:	f383 8811 	msr	BASEPRI, r3
 8011d60:	f3bf 8f6f 	isb	sy
 8011d64:	f3bf 8f4f 	dsb	sy
 8011d68:	60fb      	str	r3, [r7, #12]
}
 8011d6a:	bf00      	nop
 8011d6c:	bf00      	nop
 8011d6e:	e7fd      	b.n	8011d6c <prvTaskExitError+0x28>
	__asm volatile
 8011d70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011d74:	f383 8811 	msr	BASEPRI, r3
 8011d78:	f3bf 8f6f 	isb	sy
 8011d7c:	f3bf 8f4f 	dsb	sy
 8011d80:	60bb      	str	r3, [r7, #8]
}
 8011d82:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011d84:	bf00      	nop
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d0fc      	beq.n	8011d86 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011d8c:	bf00      	nop
 8011d8e:	bf00      	nop
 8011d90:	3714      	adds	r7, #20
 8011d92:	46bd      	mov	sp, r7
 8011d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d98:	4770      	bx	lr
 8011d9a:	bf00      	nop
 8011d9c:	200000a0 	.word	0x200000a0

08011da0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011da0:	4b07      	ldr	r3, [pc, #28]	@ (8011dc0 <pxCurrentTCBConst2>)
 8011da2:	6819      	ldr	r1, [r3, #0]
 8011da4:	6808      	ldr	r0, [r1, #0]
 8011da6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011daa:	f380 8809 	msr	PSP, r0
 8011dae:	f3bf 8f6f 	isb	sy
 8011db2:	f04f 0000 	mov.w	r0, #0
 8011db6:	f380 8811 	msr	BASEPRI, r0
 8011dba:	4770      	bx	lr
 8011dbc:	f3af 8000 	nop.w

08011dc0 <pxCurrentTCBConst2>:
 8011dc0:	20005608 	.word	0x20005608
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011dc4:	bf00      	nop
 8011dc6:	bf00      	nop

08011dc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011dc8:	4808      	ldr	r0, [pc, #32]	@ (8011dec <prvPortStartFirstTask+0x24>)
 8011dca:	6800      	ldr	r0, [r0, #0]
 8011dcc:	6800      	ldr	r0, [r0, #0]
 8011dce:	f380 8808 	msr	MSP, r0
 8011dd2:	f04f 0000 	mov.w	r0, #0
 8011dd6:	f380 8814 	msr	CONTROL, r0
 8011dda:	b662      	cpsie	i
 8011ddc:	b661      	cpsie	f
 8011dde:	f3bf 8f4f 	dsb	sy
 8011de2:	f3bf 8f6f 	isb	sy
 8011de6:	df00      	svc	0
 8011de8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8011dea:	bf00      	nop
 8011dec:	e000ed08 	.word	0xe000ed08

08011df0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011df0:	b580      	push	{r7, lr}
 8011df2:	b086      	sub	sp, #24
 8011df4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8011df6:	4b47      	ldr	r3, [pc, #284]	@ (8011f14 <xPortStartScheduler+0x124>)
 8011df8:	681b      	ldr	r3, [r3, #0]
 8011dfa:	4a47      	ldr	r2, [pc, #284]	@ (8011f18 <xPortStartScheduler+0x128>)
 8011dfc:	4293      	cmp	r3, r2
 8011dfe:	d10b      	bne.n	8011e18 <xPortStartScheduler+0x28>
	__asm volatile
 8011e00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e04:	f383 8811 	msr	BASEPRI, r3
 8011e08:	f3bf 8f6f 	isb	sy
 8011e0c:	f3bf 8f4f 	dsb	sy
 8011e10:	60fb      	str	r3, [r7, #12]
}
 8011e12:	bf00      	nop
 8011e14:	bf00      	nop
 8011e16:	e7fd      	b.n	8011e14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8011e18:	4b3e      	ldr	r3, [pc, #248]	@ (8011f14 <xPortStartScheduler+0x124>)
 8011e1a:	681b      	ldr	r3, [r3, #0]
 8011e1c:	4a3f      	ldr	r2, [pc, #252]	@ (8011f1c <xPortStartScheduler+0x12c>)
 8011e1e:	4293      	cmp	r3, r2
 8011e20:	d10b      	bne.n	8011e3a <xPortStartScheduler+0x4a>
	__asm volatile
 8011e22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e26:	f383 8811 	msr	BASEPRI, r3
 8011e2a:	f3bf 8f6f 	isb	sy
 8011e2e:	f3bf 8f4f 	dsb	sy
 8011e32:	613b      	str	r3, [r7, #16]
}
 8011e34:	bf00      	nop
 8011e36:	bf00      	nop
 8011e38:	e7fd      	b.n	8011e36 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011e3a:	4b39      	ldr	r3, [pc, #228]	@ (8011f20 <xPortStartScheduler+0x130>)
 8011e3c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8011e3e:	697b      	ldr	r3, [r7, #20]
 8011e40:	781b      	ldrb	r3, [r3, #0]
 8011e42:	b2db      	uxtb	r3, r3
 8011e44:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011e46:	697b      	ldr	r3, [r7, #20]
 8011e48:	22ff      	movs	r2, #255	@ 0xff
 8011e4a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011e4c:	697b      	ldr	r3, [r7, #20]
 8011e4e:	781b      	ldrb	r3, [r3, #0]
 8011e50:	b2db      	uxtb	r3, r3
 8011e52:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011e54:	78fb      	ldrb	r3, [r7, #3]
 8011e56:	b2db      	uxtb	r3, r3
 8011e58:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8011e5c:	b2da      	uxtb	r2, r3
 8011e5e:	4b31      	ldr	r3, [pc, #196]	@ (8011f24 <xPortStartScheduler+0x134>)
 8011e60:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8011e62:	4b31      	ldr	r3, [pc, #196]	@ (8011f28 <xPortStartScheduler+0x138>)
 8011e64:	2207      	movs	r2, #7
 8011e66:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011e68:	e009      	b.n	8011e7e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8011e6a:	4b2f      	ldr	r3, [pc, #188]	@ (8011f28 <xPortStartScheduler+0x138>)
 8011e6c:	681b      	ldr	r3, [r3, #0]
 8011e6e:	3b01      	subs	r3, #1
 8011e70:	4a2d      	ldr	r2, [pc, #180]	@ (8011f28 <xPortStartScheduler+0x138>)
 8011e72:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011e74:	78fb      	ldrb	r3, [r7, #3]
 8011e76:	b2db      	uxtb	r3, r3
 8011e78:	005b      	lsls	r3, r3, #1
 8011e7a:	b2db      	uxtb	r3, r3
 8011e7c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011e7e:	78fb      	ldrb	r3, [r7, #3]
 8011e80:	b2db      	uxtb	r3, r3
 8011e82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011e86:	2b80      	cmp	r3, #128	@ 0x80
 8011e88:	d0ef      	beq.n	8011e6a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011e8a:	4b27      	ldr	r3, [pc, #156]	@ (8011f28 <xPortStartScheduler+0x138>)
 8011e8c:	681b      	ldr	r3, [r3, #0]
 8011e8e:	f1c3 0307 	rsb	r3, r3, #7
 8011e92:	2b04      	cmp	r3, #4
 8011e94:	d00b      	beq.n	8011eae <xPortStartScheduler+0xbe>
	__asm volatile
 8011e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e9a:	f383 8811 	msr	BASEPRI, r3
 8011e9e:	f3bf 8f6f 	isb	sy
 8011ea2:	f3bf 8f4f 	dsb	sy
 8011ea6:	60bb      	str	r3, [r7, #8]
}
 8011ea8:	bf00      	nop
 8011eaa:	bf00      	nop
 8011eac:	e7fd      	b.n	8011eaa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8011eae:	4b1e      	ldr	r3, [pc, #120]	@ (8011f28 <xPortStartScheduler+0x138>)
 8011eb0:	681b      	ldr	r3, [r3, #0]
 8011eb2:	021b      	lsls	r3, r3, #8
 8011eb4:	4a1c      	ldr	r2, [pc, #112]	@ (8011f28 <xPortStartScheduler+0x138>)
 8011eb6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011eb8:	4b1b      	ldr	r3, [pc, #108]	@ (8011f28 <xPortStartScheduler+0x138>)
 8011eba:	681b      	ldr	r3, [r3, #0]
 8011ebc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8011ec0:	4a19      	ldr	r2, [pc, #100]	@ (8011f28 <xPortStartScheduler+0x138>)
 8011ec2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	b2da      	uxtb	r2, r3
 8011ec8:	697b      	ldr	r3, [r7, #20]
 8011eca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8011ecc:	4b17      	ldr	r3, [pc, #92]	@ (8011f2c <xPortStartScheduler+0x13c>)
 8011ece:	681b      	ldr	r3, [r3, #0]
 8011ed0:	4a16      	ldr	r2, [pc, #88]	@ (8011f2c <xPortStartScheduler+0x13c>)
 8011ed2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8011ed6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011ed8:	4b14      	ldr	r3, [pc, #80]	@ (8011f2c <xPortStartScheduler+0x13c>)
 8011eda:	681b      	ldr	r3, [r3, #0]
 8011edc:	4a13      	ldr	r2, [pc, #76]	@ (8011f2c <xPortStartScheduler+0x13c>)
 8011ede:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8011ee2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8011ee4:	f000 f8da 	bl	801209c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011ee8:	4b11      	ldr	r3, [pc, #68]	@ (8011f30 <xPortStartScheduler+0x140>)
 8011eea:	2200      	movs	r2, #0
 8011eec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8011eee:	f000 f8f9 	bl	80120e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8011ef2:	4b10      	ldr	r3, [pc, #64]	@ (8011f34 <xPortStartScheduler+0x144>)
 8011ef4:	681b      	ldr	r3, [r3, #0]
 8011ef6:	4a0f      	ldr	r2, [pc, #60]	@ (8011f34 <xPortStartScheduler+0x144>)
 8011ef8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8011efc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8011efe:	f7ff ff63 	bl	8011dc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8011f02:	f7ff fa75 	bl	80113f0 <vTaskSwitchContext>
	prvTaskExitError();
 8011f06:	f7ff ff1d 	bl	8011d44 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8011f0a:	2300      	movs	r3, #0
}
 8011f0c:	4618      	mov	r0, r3
 8011f0e:	3718      	adds	r7, #24
 8011f10:	46bd      	mov	sp, r7
 8011f12:	bd80      	pop	{r7, pc}
 8011f14:	e000ed00 	.word	0xe000ed00
 8011f18:	410fc271 	.word	0x410fc271
 8011f1c:	410fc270 	.word	0x410fc270
 8011f20:	e000e400 	.word	0xe000e400
 8011f24:	20005734 	.word	0x20005734
 8011f28:	20005738 	.word	0x20005738
 8011f2c:	e000ed20 	.word	0xe000ed20
 8011f30:	200000a0 	.word	0x200000a0
 8011f34:	e000ef34 	.word	0xe000ef34

08011f38 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011f38:	b480      	push	{r7}
 8011f3a:	b083      	sub	sp, #12
 8011f3c:	af00      	add	r7, sp, #0
	__asm volatile
 8011f3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011f42:	f383 8811 	msr	BASEPRI, r3
 8011f46:	f3bf 8f6f 	isb	sy
 8011f4a:	f3bf 8f4f 	dsb	sy
 8011f4e:	607b      	str	r3, [r7, #4]
}
 8011f50:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8011f52:	4b10      	ldr	r3, [pc, #64]	@ (8011f94 <vPortEnterCritical+0x5c>)
 8011f54:	681b      	ldr	r3, [r3, #0]
 8011f56:	3301      	adds	r3, #1
 8011f58:	4a0e      	ldr	r2, [pc, #56]	@ (8011f94 <vPortEnterCritical+0x5c>)
 8011f5a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8011f5c:	4b0d      	ldr	r3, [pc, #52]	@ (8011f94 <vPortEnterCritical+0x5c>)
 8011f5e:	681b      	ldr	r3, [r3, #0]
 8011f60:	2b01      	cmp	r3, #1
 8011f62:	d110      	bne.n	8011f86 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011f64:	4b0c      	ldr	r3, [pc, #48]	@ (8011f98 <vPortEnterCritical+0x60>)
 8011f66:	681b      	ldr	r3, [r3, #0]
 8011f68:	b2db      	uxtb	r3, r3
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d00b      	beq.n	8011f86 <vPortEnterCritical+0x4e>
	__asm volatile
 8011f6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011f72:	f383 8811 	msr	BASEPRI, r3
 8011f76:	f3bf 8f6f 	isb	sy
 8011f7a:	f3bf 8f4f 	dsb	sy
 8011f7e:	603b      	str	r3, [r7, #0]
}
 8011f80:	bf00      	nop
 8011f82:	bf00      	nop
 8011f84:	e7fd      	b.n	8011f82 <vPortEnterCritical+0x4a>
	}
}
 8011f86:	bf00      	nop
 8011f88:	370c      	adds	r7, #12
 8011f8a:	46bd      	mov	sp, r7
 8011f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f90:	4770      	bx	lr
 8011f92:	bf00      	nop
 8011f94:	200000a0 	.word	0x200000a0
 8011f98:	e000ed04 	.word	0xe000ed04

08011f9c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011f9c:	b480      	push	{r7}
 8011f9e:	b083      	sub	sp, #12
 8011fa0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8011fa2:	4b12      	ldr	r3, [pc, #72]	@ (8011fec <vPortExitCritical+0x50>)
 8011fa4:	681b      	ldr	r3, [r3, #0]
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d10b      	bne.n	8011fc2 <vPortExitCritical+0x26>
	__asm volatile
 8011faa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011fae:	f383 8811 	msr	BASEPRI, r3
 8011fb2:	f3bf 8f6f 	isb	sy
 8011fb6:	f3bf 8f4f 	dsb	sy
 8011fba:	607b      	str	r3, [r7, #4]
}
 8011fbc:	bf00      	nop
 8011fbe:	bf00      	nop
 8011fc0:	e7fd      	b.n	8011fbe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8011fc2:	4b0a      	ldr	r3, [pc, #40]	@ (8011fec <vPortExitCritical+0x50>)
 8011fc4:	681b      	ldr	r3, [r3, #0]
 8011fc6:	3b01      	subs	r3, #1
 8011fc8:	4a08      	ldr	r2, [pc, #32]	@ (8011fec <vPortExitCritical+0x50>)
 8011fca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011fcc:	4b07      	ldr	r3, [pc, #28]	@ (8011fec <vPortExitCritical+0x50>)
 8011fce:	681b      	ldr	r3, [r3, #0]
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d105      	bne.n	8011fe0 <vPortExitCritical+0x44>
 8011fd4:	2300      	movs	r3, #0
 8011fd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011fd8:	683b      	ldr	r3, [r7, #0]
 8011fda:	f383 8811 	msr	BASEPRI, r3
}
 8011fde:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8011fe0:	bf00      	nop
 8011fe2:	370c      	adds	r7, #12
 8011fe4:	46bd      	mov	sp, r7
 8011fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fea:	4770      	bx	lr
 8011fec:	200000a0 	.word	0x200000a0

08011ff0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011ff0:	f3ef 8009 	mrs	r0, PSP
 8011ff4:	f3bf 8f6f 	isb	sy
 8011ff8:	4b15      	ldr	r3, [pc, #84]	@ (8012050 <pxCurrentTCBConst>)
 8011ffa:	681a      	ldr	r2, [r3, #0]
 8011ffc:	f01e 0f10 	tst.w	lr, #16
 8012000:	bf08      	it	eq
 8012002:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012006:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801200a:	6010      	str	r0, [r2, #0]
 801200c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012010:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8012014:	f380 8811 	msr	BASEPRI, r0
 8012018:	f3bf 8f4f 	dsb	sy
 801201c:	f3bf 8f6f 	isb	sy
 8012020:	f7ff f9e6 	bl	80113f0 <vTaskSwitchContext>
 8012024:	f04f 0000 	mov.w	r0, #0
 8012028:	f380 8811 	msr	BASEPRI, r0
 801202c:	bc09      	pop	{r0, r3}
 801202e:	6819      	ldr	r1, [r3, #0]
 8012030:	6808      	ldr	r0, [r1, #0]
 8012032:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012036:	f01e 0f10 	tst.w	lr, #16
 801203a:	bf08      	it	eq
 801203c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012040:	f380 8809 	msr	PSP, r0
 8012044:	f3bf 8f6f 	isb	sy
 8012048:	4770      	bx	lr
 801204a:	bf00      	nop
 801204c:	f3af 8000 	nop.w

08012050 <pxCurrentTCBConst>:
 8012050:	20005608 	.word	0x20005608
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012054:	bf00      	nop
 8012056:	bf00      	nop

08012058 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012058:	b580      	push	{r7, lr}
 801205a:	b082      	sub	sp, #8
 801205c:	af00      	add	r7, sp, #0
	__asm volatile
 801205e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012062:	f383 8811 	msr	BASEPRI, r3
 8012066:	f3bf 8f6f 	isb	sy
 801206a:	f3bf 8f4f 	dsb	sy
 801206e:	607b      	str	r3, [r7, #4]
}
 8012070:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012072:	f7ff f903 	bl	801127c <xTaskIncrementTick>
 8012076:	4603      	mov	r3, r0
 8012078:	2b00      	cmp	r3, #0
 801207a:	d003      	beq.n	8012084 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801207c:	4b06      	ldr	r3, [pc, #24]	@ (8012098 <SysTick_Handler+0x40>)
 801207e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012082:	601a      	str	r2, [r3, #0]
 8012084:	2300      	movs	r3, #0
 8012086:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012088:	683b      	ldr	r3, [r7, #0]
 801208a:	f383 8811 	msr	BASEPRI, r3
}
 801208e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012090:	bf00      	nop
 8012092:	3708      	adds	r7, #8
 8012094:	46bd      	mov	sp, r7
 8012096:	bd80      	pop	{r7, pc}
 8012098:	e000ed04 	.word	0xe000ed04

0801209c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801209c:	b480      	push	{r7}
 801209e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80120a0:	4b0b      	ldr	r3, [pc, #44]	@ (80120d0 <vPortSetupTimerInterrupt+0x34>)
 80120a2:	2200      	movs	r2, #0
 80120a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80120a6:	4b0b      	ldr	r3, [pc, #44]	@ (80120d4 <vPortSetupTimerInterrupt+0x38>)
 80120a8:	2200      	movs	r2, #0
 80120aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80120ac:	4b0a      	ldr	r3, [pc, #40]	@ (80120d8 <vPortSetupTimerInterrupt+0x3c>)
 80120ae:	681b      	ldr	r3, [r3, #0]
 80120b0:	4a0a      	ldr	r2, [pc, #40]	@ (80120dc <vPortSetupTimerInterrupt+0x40>)
 80120b2:	fba2 2303 	umull	r2, r3, r2, r3
 80120b6:	099b      	lsrs	r3, r3, #6
 80120b8:	4a09      	ldr	r2, [pc, #36]	@ (80120e0 <vPortSetupTimerInterrupt+0x44>)
 80120ba:	3b01      	subs	r3, #1
 80120bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80120be:	4b04      	ldr	r3, [pc, #16]	@ (80120d0 <vPortSetupTimerInterrupt+0x34>)
 80120c0:	2207      	movs	r2, #7
 80120c2:	601a      	str	r2, [r3, #0]
}
 80120c4:	bf00      	nop
 80120c6:	46bd      	mov	sp, r7
 80120c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120cc:	4770      	bx	lr
 80120ce:	bf00      	nop
 80120d0:	e000e010 	.word	0xe000e010
 80120d4:	e000e018 	.word	0xe000e018
 80120d8:	20000008 	.word	0x20000008
 80120dc:	10624dd3 	.word	0x10624dd3
 80120e0:	e000e014 	.word	0xe000e014

080120e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80120e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80120f4 <vPortEnableVFP+0x10>
 80120e8:	6801      	ldr	r1, [r0, #0]
 80120ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80120ee:	6001      	str	r1, [r0, #0]
 80120f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80120f2:	bf00      	nop
 80120f4:	e000ed88 	.word	0xe000ed88

080120f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80120f8:	b480      	push	{r7}
 80120fa:	b085      	sub	sp, #20
 80120fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80120fe:	f3ef 8305 	mrs	r3, IPSR
 8012102:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012104:	68fb      	ldr	r3, [r7, #12]
 8012106:	2b0f      	cmp	r3, #15
 8012108:	d915      	bls.n	8012136 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801210a:	4a18      	ldr	r2, [pc, #96]	@ (801216c <vPortValidateInterruptPriority+0x74>)
 801210c:	68fb      	ldr	r3, [r7, #12]
 801210e:	4413      	add	r3, r2
 8012110:	781b      	ldrb	r3, [r3, #0]
 8012112:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012114:	4b16      	ldr	r3, [pc, #88]	@ (8012170 <vPortValidateInterruptPriority+0x78>)
 8012116:	781b      	ldrb	r3, [r3, #0]
 8012118:	7afa      	ldrb	r2, [r7, #11]
 801211a:	429a      	cmp	r2, r3
 801211c:	d20b      	bcs.n	8012136 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801211e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012122:	f383 8811 	msr	BASEPRI, r3
 8012126:	f3bf 8f6f 	isb	sy
 801212a:	f3bf 8f4f 	dsb	sy
 801212e:	607b      	str	r3, [r7, #4]
}
 8012130:	bf00      	nop
 8012132:	bf00      	nop
 8012134:	e7fd      	b.n	8012132 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012136:	4b0f      	ldr	r3, [pc, #60]	@ (8012174 <vPortValidateInterruptPriority+0x7c>)
 8012138:	681b      	ldr	r3, [r3, #0]
 801213a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801213e:	4b0e      	ldr	r3, [pc, #56]	@ (8012178 <vPortValidateInterruptPriority+0x80>)
 8012140:	681b      	ldr	r3, [r3, #0]
 8012142:	429a      	cmp	r2, r3
 8012144:	d90b      	bls.n	801215e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8012146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801214a:	f383 8811 	msr	BASEPRI, r3
 801214e:	f3bf 8f6f 	isb	sy
 8012152:	f3bf 8f4f 	dsb	sy
 8012156:	603b      	str	r3, [r7, #0]
}
 8012158:	bf00      	nop
 801215a:	bf00      	nop
 801215c:	e7fd      	b.n	801215a <vPortValidateInterruptPriority+0x62>
	}
 801215e:	bf00      	nop
 8012160:	3714      	adds	r7, #20
 8012162:	46bd      	mov	sp, r7
 8012164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012168:	4770      	bx	lr
 801216a:	bf00      	nop
 801216c:	e000e3f0 	.word	0xe000e3f0
 8012170:	20005734 	.word	0x20005734
 8012174:	e000ed0c 	.word	0xe000ed0c
 8012178:	20005738 	.word	0x20005738

0801217c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801217c:	b580      	push	{r7, lr}
 801217e:	b08a      	sub	sp, #40	@ 0x28
 8012180:	af00      	add	r7, sp, #0
 8012182:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012184:	2300      	movs	r3, #0
 8012186:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012188:	f7fe ffaa 	bl	80110e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801218c:	4b5c      	ldr	r3, [pc, #368]	@ (8012300 <pvPortMalloc+0x184>)
 801218e:	681b      	ldr	r3, [r3, #0]
 8012190:	2b00      	cmp	r3, #0
 8012192:	d101      	bne.n	8012198 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012194:	f000 f924 	bl	80123e0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012198:	4b5a      	ldr	r3, [pc, #360]	@ (8012304 <pvPortMalloc+0x188>)
 801219a:	681a      	ldr	r2, [r3, #0]
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	4013      	ands	r3, r2
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	f040 8095 	bne.w	80122d0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d01e      	beq.n	80121ea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80121ac:	2208      	movs	r2, #8
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	4413      	add	r3, r2
 80121b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	f003 0307 	and.w	r3, r3, #7
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	d015      	beq.n	80121ea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	f023 0307 	bic.w	r3, r3, #7
 80121c4:	3308      	adds	r3, #8
 80121c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	f003 0307 	and.w	r3, r3, #7
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d00b      	beq.n	80121ea <pvPortMalloc+0x6e>
	__asm volatile
 80121d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80121d6:	f383 8811 	msr	BASEPRI, r3
 80121da:	f3bf 8f6f 	isb	sy
 80121de:	f3bf 8f4f 	dsb	sy
 80121e2:	617b      	str	r3, [r7, #20]
}
 80121e4:	bf00      	nop
 80121e6:	bf00      	nop
 80121e8:	e7fd      	b.n	80121e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	d06f      	beq.n	80122d0 <pvPortMalloc+0x154>
 80121f0:	4b45      	ldr	r3, [pc, #276]	@ (8012308 <pvPortMalloc+0x18c>)
 80121f2:	681b      	ldr	r3, [r3, #0]
 80121f4:	687a      	ldr	r2, [r7, #4]
 80121f6:	429a      	cmp	r2, r3
 80121f8:	d86a      	bhi.n	80122d0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80121fa:	4b44      	ldr	r3, [pc, #272]	@ (801230c <pvPortMalloc+0x190>)
 80121fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80121fe:	4b43      	ldr	r3, [pc, #268]	@ (801230c <pvPortMalloc+0x190>)
 8012200:	681b      	ldr	r3, [r3, #0]
 8012202:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012204:	e004      	b.n	8012210 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8012206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012208:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801220a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801220c:	681b      	ldr	r3, [r3, #0]
 801220e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012212:	685b      	ldr	r3, [r3, #4]
 8012214:	687a      	ldr	r2, [r7, #4]
 8012216:	429a      	cmp	r2, r3
 8012218:	d903      	bls.n	8012222 <pvPortMalloc+0xa6>
 801221a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801221c:	681b      	ldr	r3, [r3, #0]
 801221e:	2b00      	cmp	r3, #0
 8012220:	d1f1      	bne.n	8012206 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8012222:	4b37      	ldr	r3, [pc, #220]	@ (8012300 <pvPortMalloc+0x184>)
 8012224:	681b      	ldr	r3, [r3, #0]
 8012226:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012228:	429a      	cmp	r2, r3
 801222a:	d051      	beq.n	80122d0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801222c:	6a3b      	ldr	r3, [r7, #32]
 801222e:	681b      	ldr	r3, [r3, #0]
 8012230:	2208      	movs	r2, #8
 8012232:	4413      	add	r3, r2
 8012234:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012238:	681a      	ldr	r2, [r3, #0]
 801223a:	6a3b      	ldr	r3, [r7, #32]
 801223c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801223e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012240:	685a      	ldr	r2, [r3, #4]
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	1ad2      	subs	r2, r2, r3
 8012246:	2308      	movs	r3, #8
 8012248:	005b      	lsls	r3, r3, #1
 801224a:	429a      	cmp	r2, r3
 801224c:	d920      	bls.n	8012290 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801224e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	4413      	add	r3, r2
 8012254:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012256:	69bb      	ldr	r3, [r7, #24]
 8012258:	f003 0307 	and.w	r3, r3, #7
 801225c:	2b00      	cmp	r3, #0
 801225e:	d00b      	beq.n	8012278 <pvPortMalloc+0xfc>
	__asm volatile
 8012260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012264:	f383 8811 	msr	BASEPRI, r3
 8012268:	f3bf 8f6f 	isb	sy
 801226c:	f3bf 8f4f 	dsb	sy
 8012270:	613b      	str	r3, [r7, #16]
}
 8012272:	bf00      	nop
 8012274:	bf00      	nop
 8012276:	e7fd      	b.n	8012274 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801227a:	685a      	ldr	r2, [r3, #4]
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	1ad2      	subs	r2, r2, r3
 8012280:	69bb      	ldr	r3, [r7, #24]
 8012282:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012286:	687a      	ldr	r2, [r7, #4]
 8012288:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801228a:	69b8      	ldr	r0, [r7, #24]
 801228c:	f000 f90a 	bl	80124a4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012290:	4b1d      	ldr	r3, [pc, #116]	@ (8012308 <pvPortMalloc+0x18c>)
 8012292:	681a      	ldr	r2, [r3, #0]
 8012294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012296:	685b      	ldr	r3, [r3, #4]
 8012298:	1ad3      	subs	r3, r2, r3
 801229a:	4a1b      	ldr	r2, [pc, #108]	@ (8012308 <pvPortMalloc+0x18c>)
 801229c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801229e:	4b1a      	ldr	r3, [pc, #104]	@ (8012308 <pvPortMalloc+0x18c>)
 80122a0:	681a      	ldr	r2, [r3, #0]
 80122a2:	4b1b      	ldr	r3, [pc, #108]	@ (8012310 <pvPortMalloc+0x194>)
 80122a4:	681b      	ldr	r3, [r3, #0]
 80122a6:	429a      	cmp	r2, r3
 80122a8:	d203      	bcs.n	80122b2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80122aa:	4b17      	ldr	r3, [pc, #92]	@ (8012308 <pvPortMalloc+0x18c>)
 80122ac:	681b      	ldr	r3, [r3, #0]
 80122ae:	4a18      	ldr	r2, [pc, #96]	@ (8012310 <pvPortMalloc+0x194>)
 80122b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80122b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122b4:	685a      	ldr	r2, [r3, #4]
 80122b6:	4b13      	ldr	r3, [pc, #76]	@ (8012304 <pvPortMalloc+0x188>)
 80122b8:	681b      	ldr	r3, [r3, #0]
 80122ba:	431a      	orrs	r2, r3
 80122bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80122c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122c2:	2200      	movs	r2, #0
 80122c4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80122c6:	4b13      	ldr	r3, [pc, #76]	@ (8012314 <pvPortMalloc+0x198>)
 80122c8:	681b      	ldr	r3, [r3, #0]
 80122ca:	3301      	adds	r3, #1
 80122cc:	4a11      	ldr	r2, [pc, #68]	@ (8012314 <pvPortMalloc+0x198>)
 80122ce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80122d0:	f7fe ff14 	bl	80110fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80122d4:	69fb      	ldr	r3, [r7, #28]
 80122d6:	f003 0307 	and.w	r3, r3, #7
 80122da:	2b00      	cmp	r3, #0
 80122dc:	d00b      	beq.n	80122f6 <pvPortMalloc+0x17a>
	__asm volatile
 80122de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80122e2:	f383 8811 	msr	BASEPRI, r3
 80122e6:	f3bf 8f6f 	isb	sy
 80122ea:	f3bf 8f4f 	dsb	sy
 80122ee:	60fb      	str	r3, [r7, #12]
}
 80122f0:	bf00      	nop
 80122f2:	bf00      	nop
 80122f4:	e7fd      	b.n	80122f2 <pvPortMalloc+0x176>
	return pvReturn;
 80122f6:	69fb      	ldr	r3, [r7, #28]
}
 80122f8:	4618      	mov	r0, r3
 80122fa:	3728      	adds	r7, #40	@ 0x28
 80122fc:	46bd      	mov	sp, r7
 80122fe:	bd80      	pop	{r7, pc}
 8012300:	20009344 	.word	0x20009344
 8012304:	20009358 	.word	0x20009358
 8012308:	20009348 	.word	0x20009348
 801230c:	2000933c 	.word	0x2000933c
 8012310:	2000934c 	.word	0x2000934c
 8012314:	20009350 	.word	0x20009350

08012318 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012318:	b580      	push	{r7, lr}
 801231a:	b086      	sub	sp, #24
 801231c:	af00      	add	r7, sp, #0
 801231e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	2b00      	cmp	r3, #0
 8012328:	d04f      	beq.n	80123ca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801232a:	2308      	movs	r3, #8
 801232c:	425b      	negs	r3, r3
 801232e:	697a      	ldr	r2, [r7, #20]
 8012330:	4413      	add	r3, r2
 8012332:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8012334:	697b      	ldr	r3, [r7, #20]
 8012336:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012338:	693b      	ldr	r3, [r7, #16]
 801233a:	685a      	ldr	r2, [r3, #4]
 801233c:	4b25      	ldr	r3, [pc, #148]	@ (80123d4 <vPortFree+0xbc>)
 801233e:	681b      	ldr	r3, [r3, #0]
 8012340:	4013      	ands	r3, r2
 8012342:	2b00      	cmp	r3, #0
 8012344:	d10b      	bne.n	801235e <vPortFree+0x46>
	__asm volatile
 8012346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801234a:	f383 8811 	msr	BASEPRI, r3
 801234e:	f3bf 8f6f 	isb	sy
 8012352:	f3bf 8f4f 	dsb	sy
 8012356:	60fb      	str	r3, [r7, #12]
}
 8012358:	bf00      	nop
 801235a:	bf00      	nop
 801235c:	e7fd      	b.n	801235a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801235e:	693b      	ldr	r3, [r7, #16]
 8012360:	681b      	ldr	r3, [r3, #0]
 8012362:	2b00      	cmp	r3, #0
 8012364:	d00b      	beq.n	801237e <vPortFree+0x66>
	__asm volatile
 8012366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801236a:	f383 8811 	msr	BASEPRI, r3
 801236e:	f3bf 8f6f 	isb	sy
 8012372:	f3bf 8f4f 	dsb	sy
 8012376:	60bb      	str	r3, [r7, #8]
}
 8012378:	bf00      	nop
 801237a:	bf00      	nop
 801237c:	e7fd      	b.n	801237a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801237e:	693b      	ldr	r3, [r7, #16]
 8012380:	685a      	ldr	r2, [r3, #4]
 8012382:	4b14      	ldr	r3, [pc, #80]	@ (80123d4 <vPortFree+0xbc>)
 8012384:	681b      	ldr	r3, [r3, #0]
 8012386:	4013      	ands	r3, r2
 8012388:	2b00      	cmp	r3, #0
 801238a:	d01e      	beq.n	80123ca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801238c:	693b      	ldr	r3, [r7, #16]
 801238e:	681b      	ldr	r3, [r3, #0]
 8012390:	2b00      	cmp	r3, #0
 8012392:	d11a      	bne.n	80123ca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012394:	693b      	ldr	r3, [r7, #16]
 8012396:	685a      	ldr	r2, [r3, #4]
 8012398:	4b0e      	ldr	r3, [pc, #56]	@ (80123d4 <vPortFree+0xbc>)
 801239a:	681b      	ldr	r3, [r3, #0]
 801239c:	43db      	mvns	r3, r3
 801239e:	401a      	ands	r2, r3
 80123a0:	693b      	ldr	r3, [r7, #16]
 80123a2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80123a4:	f7fe fe9c 	bl	80110e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80123a8:	693b      	ldr	r3, [r7, #16]
 80123aa:	685a      	ldr	r2, [r3, #4]
 80123ac:	4b0a      	ldr	r3, [pc, #40]	@ (80123d8 <vPortFree+0xc0>)
 80123ae:	681b      	ldr	r3, [r3, #0]
 80123b0:	4413      	add	r3, r2
 80123b2:	4a09      	ldr	r2, [pc, #36]	@ (80123d8 <vPortFree+0xc0>)
 80123b4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80123b6:	6938      	ldr	r0, [r7, #16]
 80123b8:	f000 f874 	bl	80124a4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80123bc:	4b07      	ldr	r3, [pc, #28]	@ (80123dc <vPortFree+0xc4>)
 80123be:	681b      	ldr	r3, [r3, #0]
 80123c0:	3301      	adds	r3, #1
 80123c2:	4a06      	ldr	r2, [pc, #24]	@ (80123dc <vPortFree+0xc4>)
 80123c4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80123c6:	f7fe fe99 	bl	80110fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80123ca:	bf00      	nop
 80123cc:	3718      	adds	r7, #24
 80123ce:	46bd      	mov	sp, r7
 80123d0:	bd80      	pop	{r7, pc}
 80123d2:	bf00      	nop
 80123d4:	20009358 	.word	0x20009358
 80123d8:	20009348 	.word	0x20009348
 80123dc:	20009354 	.word	0x20009354

080123e0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80123e0:	b480      	push	{r7}
 80123e2:	b085      	sub	sp, #20
 80123e4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80123e6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80123ea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80123ec:	4b27      	ldr	r3, [pc, #156]	@ (801248c <prvHeapInit+0xac>)
 80123ee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80123f0:	68fb      	ldr	r3, [r7, #12]
 80123f2:	f003 0307 	and.w	r3, r3, #7
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	d00c      	beq.n	8012414 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80123fa:	68fb      	ldr	r3, [r7, #12]
 80123fc:	3307      	adds	r3, #7
 80123fe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012400:	68fb      	ldr	r3, [r7, #12]
 8012402:	f023 0307 	bic.w	r3, r3, #7
 8012406:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8012408:	68ba      	ldr	r2, [r7, #8]
 801240a:	68fb      	ldr	r3, [r7, #12]
 801240c:	1ad3      	subs	r3, r2, r3
 801240e:	4a1f      	ldr	r2, [pc, #124]	@ (801248c <prvHeapInit+0xac>)
 8012410:	4413      	add	r3, r2
 8012412:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012414:	68fb      	ldr	r3, [r7, #12]
 8012416:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8012418:	4a1d      	ldr	r2, [pc, #116]	@ (8012490 <prvHeapInit+0xb0>)
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801241e:	4b1c      	ldr	r3, [pc, #112]	@ (8012490 <prvHeapInit+0xb0>)
 8012420:	2200      	movs	r2, #0
 8012422:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	68ba      	ldr	r2, [r7, #8]
 8012428:	4413      	add	r3, r2
 801242a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801242c:	2208      	movs	r2, #8
 801242e:	68fb      	ldr	r3, [r7, #12]
 8012430:	1a9b      	subs	r3, r3, r2
 8012432:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012434:	68fb      	ldr	r3, [r7, #12]
 8012436:	f023 0307 	bic.w	r3, r3, #7
 801243a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801243c:	68fb      	ldr	r3, [r7, #12]
 801243e:	4a15      	ldr	r2, [pc, #84]	@ (8012494 <prvHeapInit+0xb4>)
 8012440:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012442:	4b14      	ldr	r3, [pc, #80]	@ (8012494 <prvHeapInit+0xb4>)
 8012444:	681b      	ldr	r3, [r3, #0]
 8012446:	2200      	movs	r2, #0
 8012448:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801244a:	4b12      	ldr	r3, [pc, #72]	@ (8012494 <prvHeapInit+0xb4>)
 801244c:	681b      	ldr	r3, [r3, #0]
 801244e:	2200      	movs	r2, #0
 8012450:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8012456:	683b      	ldr	r3, [r7, #0]
 8012458:	68fa      	ldr	r2, [r7, #12]
 801245a:	1ad2      	subs	r2, r2, r3
 801245c:	683b      	ldr	r3, [r7, #0]
 801245e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012460:	4b0c      	ldr	r3, [pc, #48]	@ (8012494 <prvHeapInit+0xb4>)
 8012462:	681a      	ldr	r2, [r3, #0]
 8012464:	683b      	ldr	r3, [r7, #0]
 8012466:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012468:	683b      	ldr	r3, [r7, #0]
 801246a:	685b      	ldr	r3, [r3, #4]
 801246c:	4a0a      	ldr	r2, [pc, #40]	@ (8012498 <prvHeapInit+0xb8>)
 801246e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012470:	683b      	ldr	r3, [r7, #0]
 8012472:	685b      	ldr	r3, [r3, #4]
 8012474:	4a09      	ldr	r2, [pc, #36]	@ (801249c <prvHeapInit+0xbc>)
 8012476:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012478:	4b09      	ldr	r3, [pc, #36]	@ (80124a0 <prvHeapInit+0xc0>)
 801247a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801247e:	601a      	str	r2, [r3, #0]
}
 8012480:	bf00      	nop
 8012482:	3714      	adds	r7, #20
 8012484:	46bd      	mov	sp, r7
 8012486:	f85d 7b04 	ldr.w	r7, [sp], #4
 801248a:	4770      	bx	lr
 801248c:	2000573c 	.word	0x2000573c
 8012490:	2000933c 	.word	0x2000933c
 8012494:	20009344 	.word	0x20009344
 8012498:	2000934c 	.word	0x2000934c
 801249c:	20009348 	.word	0x20009348
 80124a0:	20009358 	.word	0x20009358

080124a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80124a4:	b480      	push	{r7}
 80124a6:	b085      	sub	sp, #20
 80124a8:	af00      	add	r7, sp, #0
 80124aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80124ac:	4b28      	ldr	r3, [pc, #160]	@ (8012550 <prvInsertBlockIntoFreeList+0xac>)
 80124ae:	60fb      	str	r3, [r7, #12]
 80124b0:	e002      	b.n	80124b8 <prvInsertBlockIntoFreeList+0x14>
 80124b2:	68fb      	ldr	r3, [r7, #12]
 80124b4:	681b      	ldr	r3, [r3, #0]
 80124b6:	60fb      	str	r3, [r7, #12]
 80124b8:	68fb      	ldr	r3, [r7, #12]
 80124ba:	681b      	ldr	r3, [r3, #0]
 80124bc:	687a      	ldr	r2, [r7, #4]
 80124be:	429a      	cmp	r2, r3
 80124c0:	d8f7      	bhi.n	80124b2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80124c2:	68fb      	ldr	r3, [r7, #12]
 80124c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80124c6:	68fb      	ldr	r3, [r7, #12]
 80124c8:	685b      	ldr	r3, [r3, #4]
 80124ca:	68ba      	ldr	r2, [r7, #8]
 80124cc:	4413      	add	r3, r2
 80124ce:	687a      	ldr	r2, [r7, #4]
 80124d0:	429a      	cmp	r2, r3
 80124d2:	d108      	bne.n	80124e6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80124d4:	68fb      	ldr	r3, [r7, #12]
 80124d6:	685a      	ldr	r2, [r3, #4]
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	685b      	ldr	r3, [r3, #4]
 80124dc:	441a      	add	r2, r3
 80124de:	68fb      	ldr	r3, [r7, #12]
 80124e0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80124e2:	68fb      	ldr	r3, [r7, #12]
 80124e4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	685b      	ldr	r3, [r3, #4]
 80124ee:	68ba      	ldr	r2, [r7, #8]
 80124f0:	441a      	add	r2, r3
 80124f2:	68fb      	ldr	r3, [r7, #12]
 80124f4:	681b      	ldr	r3, [r3, #0]
 80124f6:	429a      	cmp	r2, r3
 80124f8:	d118      	bne.n	801252c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80124fa:	68fb      	ldr	r3, [r7, #12]
 80124fc:	681a      	ldr	r2, [r3, #0]
 80124fe:	4b15      	ldr	r3, [pc, #84]	@ (8012554 <prvInsertBlockIntoFreeList+0xb0>)
 8012500:	681b      	ldr	r3, [r3, #0]
 8012502:	429a      	cmp	r2, r3
 8012504:	d00d      	beq.n	8012522 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	685a      	ldr	r2, [r3, #4]
 801250a:	68fb      	ldr	r3, [r7, #12]
 801250c:	681b      	ldr	r3, [r3, #0]
 801250e:	685b      	ldr	r3, [r3, #4]
 8012510:	441a      	add	r2, r3
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8012516:	68fb      	ldr	r3, [r7, #12]
 8012518:	681b      	ldr	r3, [r3, #0]
 801251a:	681a      	ldr	r2, [r3, #0]
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	601a      	str	r2, [r3, #0]
 8012520:	e008      	b.n	8012534 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012522:	4b0c      	ldr	r3, [pc, #48]	@ (8012554 <prvInsertBlockIntoFreeList+0xb0>)
 8012524:	681a      	ldr	r2, [r3, #0]
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	601a      	str	r2, [r3, #0]
 801252a:	e003      	b.n	8012534 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801252c:	68fb      	ldr	r3, [r7, #12]
 801252e:	681a      	ldr	r2, [r3, #0]
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012534:	68fa      	ldr	r2, [r7, #12]
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	429a      	cmp	r2, r3
 801253a:	d002      	beq.n	8012542 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801253c:	68fb      	ldr	r3, [r7, #12]
 801253e:	687a      	ldr	r2, [r7, #4]
 8012540:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012542:	bf00      	nop
 8012544:	3714      	adds	r7, #20
 8012546:	46bd      	mov	sp, r7
 8012548:	f85d 7b04 	ldr.w	r7, [sp], #4
 801254c:	4770      	bx	lr
 801254e:	bf00      	nop
 8012550:	2000933c 	.word	0x2000933c
 8012554:	20009344 	.word	0x20009344

08012558 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8012558:	b580      	push	{r7, lr}
 801255a:	b084      	sub	sp, #16
 801255c:	af00      	add	r7, sp, #0
 801255e:	6078      	str	r0, [r7, #4]
 8012560:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8012562:	f008 f945 	bl	801a7f0 <sys_timeouts_sleeptime>
 8012566:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8012568:	68fb      	ldr	r3, [r7, #12]
 801256a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801256e:	d10b      	bne.n	8012588 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8012570:	4813      	ldr	r0, [pc, #76]	@ (80125c0 <tcpip_timeouts_mbox_fetch+0x68>)
 8012572:	f00a ff18 	bl	801d3a6 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8012576:	2200      	movs	r2, #0
 8012578:	6839      	ldr	r1, [r7, #0]
 801257a:	6878      	ldr	r0, [r7, #4]
 801257c:	f00a fe8a 	bl	801d294 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8012580:	480f      	ldr	r0, [pc, #60]	@ (80125c0 <tcpip_timeouts_mbox_fetch+0x68>)
 8012582:	f00a ff01 	bl	801d388 <sys_mutex_lock>
    return;
 8012586:	e018      	b.n	80125ba <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8012588:	68fb      	ldr	r3, [r7, #12]
 801258a:	2b00      	cmp	r3, #0
 801258c:	d102      	bne.n	8012594 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 801258e:	f008 f8f5 	bl	801a77c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8012592:	e7e6      	b.n	8012562 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8012594:	480a      	ldr	r0, [pc, #40]	@ (80125c0 <tcpip_timeouts_mbox_fetch+0x68>)
 8012596:	f00a ff06 	bl	801d3a6 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 801259a:	68fa      	ldr	r2, [r7, #12]
 801259c:	6839      	ldr	r1, [r7, #0]
 801259e:	6878      	ldr	r0, [r7, #4]
 80125a0:	f00a fe78 	bl	801d294 <sys_arch_mbox_fetch>
 80125a4:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 80125a6:	4806      	ldr	r0, [pc, #24]	@ (80125c0 <tcpip_timeouts_mbox_fetch+0x68>)
 80125a8:	f00a feee 	bl	801d388 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 80125ac:	68bb      	ldr	r3, [r7, #8]
 80125ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80125b2:	d102      	bne.n	80125ba <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 80125b4:	f008 f8e2 	bl	801a77c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80125b8:	e7d3      	b.n	8012562 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 80125ba:	3710      	adds	r7, #16
 80125bc:	46bd      	mov	sp, r7
 80125be:	bd80      	pop	{r7, pc}
 80125c0:	20009368 	.word	0x20009368

080125c4 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 80125c4:	b580      	push	{r7, lr}
 80125c6:	b084      	sub	sp, #16
 80125c8:	af00      	add	r7, sp, #0
 80125ca:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 80125cc:	4810      	ldr	r0, [pc, #64]	@ (8012610 <tcpip_thread+0x4c>)
 80125ce:	f00a fedb 	bl	801d388 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 80125d2:	4b10      	ldr	r3, [pc, #64]	@ (8012614 <tcpip_thread+0x50>)
 80125d4:	681b      	ldr	r3, [r3, #0]
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d005      	beq.n	80125e6 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 80125da:	4b0e      	ldr	r3, [pc, #56]	@ (8012614 <tcpip_thread+0x50>)
 80125dc:	681b      	ldr	r3, [r3, #0]
 80125de:	4a0e      	ldr	r2, [pc, #56]	@ (8012618 <tcpip_thread+0x54>)
 80125e0:	6812      	ldr	r2, [r2, #0]
 80125e2:	4610      	mov	r0, r2
 80125e4:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80125e6:	f107 030c 	add.w	r3, r7, #12
 80125ea:	4619      	mov	r1, r3
 80125ec:	480b      	ldr	r0, [pc, #44]	@ (801261c <tcpip_thread+0x58>)
 80125ee:	f7ff ffb3 	bl	8012558 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 80125f2:	68fb      	ldr	r3, [r7, #12]
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	d106      	bne.n	8012606 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80125f8:	4b09      	ldr	r3, [pc, #36]	@ (8012620 <tcpip_thread+0x5c>)
 80125fa:	2291      	movs	r2, #145	@ 0x91
 80125fc:	4909      	ldr	r1, [pc, #36]	@ (8012624 <tcpip_thread+0x60>)
 80125fe:	480a      	ldr	r0, [pc, #40]	@ (8012628 <tcpip_thread+0x64>)
 8012600:	f00b fdc4 	bl	801e18c <iprintf>
      continue;
 8012604:	e003      	b.n	801260e <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8012606:	68fb      	ldr	r3, [r7, #12]
 8012608:	4618      	mov	r0, r3
 801260a:	f000 f80f 	bl	801262c <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 801260e:	e7ea      	b.n	80125e6 <tcpip_thread+0x22>
 8012610:	20009368 	.word	0x20009368
 8012614:	2000935c 	.word	0x2000935c
 8012618:	20009360 	.word	0x20009360
 801261c:	20009364 	.word	0x20009364
 8012620:	08021194 	.word	0x08021194
 8012624:	080211c4 	.word	0x080211c4
 8012628:	080211e4 	.word	0x080211e4

0801262c <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 801262c:	b580      	push	{r7, lr}
 801262e:	b082      	sub	sp, #8
 8012630:	af00      	add	r7, sp, #0
 8012632:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	781b      	ldrb	r3, [r3, #0]
 8012638:	2b02      	cmp	r3, #2
 801263a:	d026      	beq.n	801268a <tcpip_thread_handle_msg+0x5e>
 801263c:	2b02      	cmp	r3, #2
 801263e:	dc2b      	bgt.n	8012698 <tcpip_thread_handle_msg+0x6c>
 8012640:	2b00      	cmp	r3, #0
 8012642:	d002      	beq.n	801264a <tcpip_thread_handle_msg+0x1e>
 8012644:	2b01      	cmp	r3, #1
 8012646:	d015      	beq.n	8012674 <tcpip_thread_handle_msg+0x48>
 8012648:	e026      	b.n	8012698 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	68db      	ldr	r3, [r3, #12]
 801264e:	687a      	ldr	r2, [r7, #4]
 8012650:	6850      	ldr	r0, [r2, #4]
 8012652:	687a      	ldr	r2, [r7, #4]
 8012654:	6892      	ldr	r2, [r2, #8]
 8012656:	4611      	mov	r1, r2
 8012658:	4798      	blx	r3
 801265a:	4603      	mov	r3, r0
 801265c:	2b00      	cmp	r3, #0
 801265e:	d004      	beq.n	801266a <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	685b      	ldr	r3, [r3, #4]
 8012664:	4618      	mov	r0, r3
 8012666:	f001 fcd9 	bl	801401c <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801266a:	6879      	ldr	r1, [r7, #4]
 801266c:	2009      	movs	r0, #9
 801266e:	f000 fe63 	bl	8013338 <memp_free>
      break;
 8012672:	e018      	b.n	80126a6 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	685b      	ldr	r3, [r3, #4]
 8012678:	687a      	ldr	r2, [r7, #4]
 801267a:	6892      	ldr	r2, [r2, #8]
 801267c:	4610      	mov	r0, r2
 801267e:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8012680:	6879      	ldr	r1, [r7, #4]
 8012682:	2008      	movs	r0, #8
 8012684:	f000 fe58 	bl	8013338 <memp_free>
      break;
 8012688:	e00d      	b.n	80126a6 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	685b      	ldr	r3, [r3, #4]
 801268e:	687a      	ldr	r2, [r7, #4]
 8012690:	6892      	ldr	r2, [r2, #8]
 8012692:	4610      	mov	r0, r2
 8012694:	4798      	blx	r3
      break;
 8012696:	e006      	b.n	80126a6 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8012698:	4b05      	ldr	r3, [pc, #20]	@ (80126b0 <tcpip_thread_handle_msg+0x84>)
 801269a:	22cf      	movs	r2, #207	@ 0xcf
 801269c:	4905      	ldr	r1, [pc, #20]	@ (80126b4 <tcpip_thread_handle_msg+0x88>)
 801269e:	4806      	ldr	r0, [pc, #24]	@ (80126b8 <tcpip_thread_handle_msg+0x8c>)
 80126a0:	f00b fd74 	bl	801e18c <iprintf>
      break;
 80126a4:	bf00      	nop
  }
}
 80126a6:	bf00      	nop
 80126a8:	3708      	adds	r7, #8
 80126aa:	46bd      	mov	sp, r7
 80126ac:	bd80      	pop	{r7, pc}
 80126ae:	bf00      	nop
 80126b0:	08021194 	.word	0x08021194
 80126b4:	080211c4 	.word	0x080211c4
 80126b8:	080211e4 	.word	0x080211e4

080126bc <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 80126bc:	b580      	push	{r7, lr}
 80126be:	b086      	sub	sp, #24
 80126c0:	af00      	add	r7, sp, #0
 80126c2:	60f8      	str	r0, [r7, #12]
 80126c4:	60b9      	str	r1, [r7, #8]
 80126c6:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80126c8:	481a      	ldr	r0, [pc, #104]	@ (8012734 <tcpip_inpkt+0x78>)
 80126ca:	f00a fe22 	bl	801d312 <sys_mbox_valid>
 80126ce:	4603      	mov	r3, r0
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d105      	bne.n	80126e0 <tcpip_inpkt+0x24>
 80126d4:	4b18      	ldr	r3, [pc, #96]	@ (8012738 <tcpip_inpkt+0x7c>)
 80126d6:	22fc      	movs	r2, #252	@ 0xfc
 80126d8:	4918      	ldr	r1, [pc, #96]	@ (801273c <tcpip_inpkt+0x80>)
 80126da:	4819      	ldr	r0, [pc, #100]	@ (8012740 <tcpip_inpkt+0x84>)
 80126dc:	f00b fd56 	bl	801e18c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80126e0:	2009      	movs	r0, #9
 80126e2:	f000 fdb3 	bl	801324c <memp_malloc>
 80126e6:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 80126e8:	697b      	ldr	r3, [r7, #20]
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	d102      	bne.n	80126f4 <tcpip_inpkt+0x38>
    return ERR_MEM;
 80126ee:	f04f 33ff 	mov.w	r3, #4294967295
 80126f2:	e01a      	b.n	801272a <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 80126f4:	697b      	ldr	r3, [r7, #20]
 80126f6:	2200      	movs	r2, #0
 80126f8:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 80126fa:	697b      	ldr	r3, [r7, #20]
 80126fc:	68fa      	ldr	r2, [r7, #12]
 80126fe:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8012700:	697b      	ldr	r3, [r7, #20]
 8012702:	68ba      	ldr	r2, [r7, #8]
 8012704:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8012706:	697b      	ldr	r3, [r7, #20]
 8012708:	687a      	ldr	r2, [r7, #4]
 801270a:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 801270c:	6979      	ldr	r1, [r7, #20]
 801270e:	4809      	ldr	r0, [pc, #36]	@ (8012734 <tcpip_inpkt+0x78>)
 8012710:	f00a fda6 	bl	801d260 <sys_mbox_trypost>
 8012714:	4603      	mov	r3, r0
 8012716:	2b00      	cmp	r3, #0
 8012718:	d006      	beq.n	8012728 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801271a:	6979      	ldr	r1, [r7, #20]
 801271c:	2009      	movs	r0, #9
 801271e:	f000 fe0b 	bl	8013338 <memp_free>
    return ERR_MEM;
 8012722:	f04f 33ff 	mov.w	r3, #4294967295
 8012726:	e000      	b.n	801272a <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8012728:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 801272a:	4618      	mov	r0, r3
 801272c:	3718      	adds	r7, #24
 801272e:	46bd      	mov	sp, r7
 8012730:	bd80      	pop	{r7, pc}
 8012732:	bf00      	nop
 8012734:	20009364 	.word	0x20009364
 8012738:	08021194 	.word	0x08021194
 801273c:	0802120c 	.word	0x0802120c
 8012740:	080211e4 	.word	0x080211e4

08012744 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8012744:	b580      	push	{r7, lr}
 8012746:	b082      	sub	sp, #8
 8012748:	af00      	add	r7, sp, #0
 801274a:	6078      	str	r0, [r7, #4]
 801274c:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 801274e:	683b      	ldr	r3, [r7, #0]
 8012750:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012754:	f003 0318 	and.w	r3, r3, #24
 8012758:	2b00      	cmp	r3, #0
 801275a:	d006      	beq.n	801276a <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 801275c:	4a08      	ldr	r2, [pc, #32]	@ (8012780 <tcpip_input+0x3c>)
 801275e:	6839      	ldr	r1, [r7, #0]
 8012760:	6878      	ldr	r0, [r7, #4]
 8012762:	f7ff ffab 	bl	80126bc <tcpip_inpkt>
 8012766:	4603      	mov	r3, r0
 8012768:	e005      	b.n	8012776 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 801276a:	4a06      	ldr	r2, [pc, #24]	@ (8012784 <tcpip_input+0x40>)
 801276c:	6839      	ldr	r1, [r7, #0]
 801276e:	6878      	ldr	r0, [r7, #4]
 8012770:	f7ff ffa4 	bl	80126bc <tcpip_inpkt>
 8012774:	4603      	mov	r3, r0
}
 8012776:	4618      	mov	r0, r3
 8012778:	3708      	adds	r7, #8
 801277a:	46bd      	mov	sp, r7
 801277c:	bd80      	pop	{r7, pc}
 801277e:	bf00      	nop
 8012780:	0801d071 	.word	0x0801d071
 8012784:	0801be59 	.word	0x0801be59

08012788 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8012788:	b580      	push	{r7, lr}
 801278a:	b084      	sub	sp, #16
 801278c:	af00      	add	r7, sp, #0
 801278e:	6078      	str	r0, [r7, #4]
 8012790:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8012792:	4819      	ldr	r0, [pc, #100]	@ (80127f8 <tcpip_try_callback+0x70>)
 8012794:	f00a fdbd 	bl	801d312 <sys_mbox_valid>
 8012798:	4603      	mov	r3, r0
 801279a:	2b00      	cmp	r3, #0
 801279c:	d106      	bne.n	80127ac <tcpip_try_callback+0x24>
 801279e:	4b17      	ldr	r3, [pc, #92]	@ (80127fc <tcpip_try_callback+0x74>)
 80127a0:	f240 125d 	movw	r2, #349	@ 0x15d
 80127a4:	4916      	ldr	r1, [pc, #88]	@ (8012800 <tcpip_try_callback+0x78>)
 80127a6:	4817      	ldr	r0, [pc, #92]	@ (8012804 <tcpip_try_callback+0x7c>)
 80127a8:	f00b fcf0 	bl	801e18c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 80127ac:	2008      	movs	r0, #8
 80127ae:	f000 fd4d 	bl	801324c <memp_malloc>
 80127b2:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 80127b4:	68fb      	ldr	r3, [r7, #12]
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d102      	bne.n	80127c0 <tcpip_try_callback+0x38>
    return ERR_MEM;
 80127ba:	f04f 33ff 	mov.w	r3, #4294967295
 80127be:	e017      	b.n	80127f0 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 80127c0:	68fb      	ldr	r3, [r7, #12]
 80127c2:	2201      	movs	r2, #1
 80127c4:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 80127c6:	68fb      	ldr	r3, [r7, #12]
 80127c8:	687a      	ldr	r2, [r7, #4]
 80127ca:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 80127cc:	68fb      	ldr	r3, [r7, #12]
 80127ce:	683a      	ldr	r2, [r7, #0]
 80127d0:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80127d2:	68f9      	ldr	r1, [r7, #12]
 80127d4:	4808      	ldr	r0, [pc, #32]	@ (80127f8 <tcpip_try_callback+0x70>)
 80127d6:	f00a fd43 	bl	801d260 <sys_mbox_trypost>
 80127da:	4603      	mov	r3, r0
 80127dc:	2b00      	cmp	r3, #0
 80127de:	d006      	beq.n	80127ee <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 80127e0:	68f9      	ldr	r1, [r7, #12]
 80127e2:	2008      	movs	r0, #8
 80127e4:	f000 fda8 	bl	8013338 <memp_free>
    return ERR_MEM;
 80127e8:	f04f 33ff 	mov.w	r3, #4294967295
 80127ec:	e000      	b.n	80127f0 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 80127ee:	2300      	movs	r3, #0
}
 80127f0:	4618      	mov	r0, r3
 80127f2:	3710      	adds	r7, #16
 80127f4:	46bd      	mov	sp, r7
 80127f6:	bd80      	pop	{r7, pc}
 80127f8:	20009364 	.word	0x20009364
 80127fc:	08021194 	.word	0x08021194
 8012800:	0802120c 	.word	0x0802120c
 8012804:	080211e4 	.word	0x080211e4

08012808 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8012808:	b580      	push	{r7, lr}
 801280a:	b084      	sub	sp, #16
 801280c:	af02      	add	r7, sp, #8
 801280e:	6078      	str	r0, [r7, #4]
 8012810:	6039      	str	r1, [r7, #0]
  lwip_init();
 8012812:	f000 f872 	bl	80128fa <lwip_init>

  tcpip_init_done = initfunc;
 8012816:	4a17      	ldr	r2, [pc, #92]	@ (8012874 <tcpip_init+0x6c>)
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 801281c:	4a16      	ldr	r2, [pc, #88]	@ (8012878 <tcpip_init+0x70>)
 801281e:	683b      	ldr	r3, [r7, #0]
 8012820:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8012822:	2106      	movs	r1, #6
 8012824:	4815      	ldr	r0, [pc, #84]	@ (801287c <tcpip_init+0x74>)
 8012826:	f00a fcf9 	bl	801d21c <sys_mbox_new>
 801282a:	4603      	mov	r3, r0
 801282c:	2b00      	cmp	r3, #0
 801282e:	d006      	beq.n	801283e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8012830:	4b13      	ldr	r3, [pc, #76]	@ (8012880 <tcpip_init+0x78>)
 8012832:	f240 2261 	movw	r2, #609	@ 0x261
 8012836:	4913      	ldr	r1, [pc, #76]	@ (8012884 <tcpip_init+0x7c>)
 8012838:	4813      	ldr	r0, [pc, #76]	@ (8012888 <tcpip_init+0x80>)
 801283a:	f00b fca7 	bl	801e18c <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 801283e:	4813      	ldr	r0, [pc, #76]	@ (801288c <tcpip_init+0x84>)
 8012840:	f00a fd86 	bl	801d350 <sys_mutex_new>
 8012844:	4603      	mov	r3, r0
 8012846:	2b00      	cmp	r3, #0
 8012848:	d006      	beq.n	8012858 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 801284a:	4b0d      	ldr	r3, [pc, #52]	@ (8012880 <tcpip_init+0x78>)
 801284c:	f240 2265 	movw	r2, #613	@ 0x265
 8012850:	490f      	ldr	r1, [pc, #60]	@ (8012890 <tcpip_init+0x88>)
 8012852:	480d      	ldr	r0, [pc, #52]	@ (8012888 <tcpip_init+0x80>)
 8012854:	f00b fc9a 	bl	801e18c <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8012858:	2300      	movs	r3, #0
 801285a:	9300      	str	r3, [sp, #0]
 801285c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012860:	2200      	movs	r2, #0
 8012862:	490c      	ldr	r1, [pc, #48]	@ (8012894 <tcpip_init+0x8c>)
 8012864:	480c      	ldr	r0, [pc, #48]	@ (8012898 <tcpip_init+0x90>)
 8012866:	f00a fdab 	bl	801d3c0 <sys_thread_new>
}
 801286a:	bf00      	nop
 801286c:	3708      	adds	r7, #8
 801286e:	46bd      	mov	sp, r7
 8012870:	bd80      	pop	{r7, pc}
 8012872:	bf00      	nop
 8012874:	2000935c 	.word	0x2000935c
 8012878:	20009360 	.word	0x20009360
 801287c:	20009364 	.word	0x20009364
 8012880:	08021194 	.word	0x08021194
 8012884:	0802121c 	.word	0x0802121c
 8012888:	080211e4 	.word	0x080211e4
 801288c:	20009368 	.word	0x20009368
 8012890:	08021240 	.word	0x08021240
 8012894:	080125c5 	.word	0x080125c5
 8012898:	08021264 	.word	0x08021264

0801289c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 801289c:	b480      	push	{r7}
 801289e:	b083      	sub	sp, #12
 80128a0:	af00      	add	r7, sp, #0
 80128a2:	4603      	mov	r3, r0
 80128a4:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80128a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80128aa:	021b      	lsls	r3, r3, #8
 80128ac:	b21a      	sxth	r2, r3
 80128ae:	88fb      	ldrh	r3, [r7, #6]
 80128b0:	0a1b      	lsrs	r3, r3, #8
 80128b2:	b29b      	uxth	r3, r3
 80128b4:	b21b      	sxth	r3, r3
 80128b6:	4313      	orrs	r3, r2
 80128b8:	b21b      	sxth	r3, r3
 80128ba:	b29b      	uxth	r3, r3
}
 80128bc:	4618      	mov	r0, r3
 80128be:	370c      	adds	r7, #12
 80128c0:	46bd      	mov	sp, r7
 80128c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128c6:	4770      	bx	lr

080128c8 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80128c8:	b480      	push	{r7}
 80128ca:	b083      	sub	sp, #12
 80128cc:	af00      	add	r7, sp, #0
 80128ce:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	061a      	lsls	r2, r3, #24
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	021b      	lsls	r3, r3, #8
 80128d8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80128dc:	431a      	orrs	r2, r3
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	0a1b      	lsrs	r3, r3, #8
 80128e2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80128e6:	431a      	orrs	r2, r3
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	0e1b      	lsrs	r3, r3, #24
 80128ec:	4313      	orrs	r3, r2
}
 80128ee:	4618      	mov	r0, r3
 80128f0:	370c      	adds	r7, #12
 80128f2:	46bd      	mov	sp, r7
 80128f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128f8:	4770      	bx	lr

080128fa <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80128fa:	b580      	push	{r7, lr}
 80128fc:	b082      	sub	sp, #8
 80128fe:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8012900:	2300      	movs	r3, #0
 8012902:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8012904:	f00a fd16 	bl	801d334 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8012908:	f000 f8d4 	bl	8012ab4 <mem_init>
  memp_init();
 801290c:	f000 fc30 	bl	8013170 <memp_init>
  pbuf_init();
  netif_init();
 8012910:	f000 fd3c 	bl	801338c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8012914:	f007 ffa4 	bl	801a860 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8012918:	f001 fe1a 	bl	8014550 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 801291c:	f007 fee6 	bl	801a6ec <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8012920:	bf00      	nop
 8012922:	3708      	adds	r7, #8
 8012924:	46bd      	mov	sp, r7
 8012926:	bd80      	pop	{r7, pc}

08012928 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8012928:	b480      	push	{r7}
 801292a:	b083      	sub	sp, #12
 801292c:	af00      	add	r7, sp, #0
 801292e:	4603      	mov	r3, r0
 8012930:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8012932:	4b05      	ldr	r3, [pc, #20]	@ (8012948 <ptr_to_mem+0x20>)
 8012934:	681a      	ldr	r2, [r3, #0]
 8012936:	88fb      	ldrh	r3, [r7, #6]
 8012938:	4413      	add	r3, r2
}
 801293a:	4618      	mov	r0, r3
 801293c:	370c      	adds	r7, #12
 801293e:	46bd      	mov	sp, r7
 8012940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012944:	4770      	bx	lr
 8012946:	bf00      	nop
 8012948:	200099d8 	.word	0x200099d8

0801294c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 801294c:	b480      	push	{r7}
 801294e:	b083      	sub	sp, #12
 8012950:	af00      	add	r7, sp, #0
 8012952:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8012954:	4b05      	ldr	r3, [pc, #20]	@ (801296c <mem_to_ptr+0x20>)
 8012956:	681b      	ldr	r3, [r3, #0]
 8012958:	687a      	ldr	r2, [r7, #4]
 801295a:	1ad3      	subs	r3, r2, r3
 801295c:	b29b      	uxth	r3, r3
}
 801295e:	4618      	mov	r0, r3
 8012960:	370c      	adds	r7, #12
 8012962:	46bd      	mov	sp, r7
 8012964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012968:	4770      	bx	lr
 801296a:	bf00      	nop
 801296c:	200099d8 	.word	0x200099d8

08012970 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8012970:	b590      	push	{r4, r7, lr}
 8012972:	b085      	sub	sp, #20
 8012974:	af00      	add	r7, sp, #0
 8012976:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8012978:	4b45      	ldr	r3, [pc, #276]	@ (8012a90 <plug_holes+0x120>)
 801297a:	681b      	ldr	r3, [r3, #0]
 801297c:	687a      	ldr	r2, [r7, #4]
 801297e:	429a      	cmp	r2, r3
 8012980:	d206      	bcs.n	8012990 <plug_holes+0x20>
 8012982:	4b44      	ldr	r3, [pc, #272]	@ (8012a94 <plug_holes+0x124>)
 8012984:	f240 12df 	movw	r2, #479	@ 0x1df
 8012988:	4943      	ldr	r1, [pc, #268]	@ (8012a98 <plug_holes+0x128>)
 801298a:	4844      	ldr	r0, [pc, #272]	@ (8012a9c <plug_holes+0x12c>)
 801298c:	f00b fbfe 	bl	801e18c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8012990:	4b43      	ldr	r3, [pc, #268]	@ (8012aa0 <plug_holes+0x130>)
 8012992:	681b      	ldr	r3, [r3, #0]
 8012994:	687a      	ldr	r2, [r7, #4]
 8012996:	429a      	cmp	r2, r3
 8012998:	d306      	bcc.n	80129a8 <plug_holes+0x38>
 801299a:	4b3e      	ldr	r3, [pc, #248]	@ (8012a94 <plug_holes+0x124>)
 801299c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80129a0:	4940      	ldr	r1, [pc, #256]	@ (8012aa4 <plug_holes+0x134>)
 80129a2:	483e      	ldr	r0, [pc, #248]	@ (8012a9c <plug_holes+0x12c>)
 80129a4:	f00b fbf2 	bl	801e18c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	791b      	ldrb	r3, [r3, #4]
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	d006      	beq.n	80129be <plug_holes+0x4e>
 80129b0:	4b38      	ldr	r3, [pc, #224]	@ (8012a94 <plug_holes+0x124>)
 80129b2:	f240 12e1 	movw	r2, #481	@ 0x1e1
 80129b6:	493c      	ldr	r1, [pc, #240]	@ (8012aa8 <plug_holes+0x138>)
 80129b8:	4838      	ldr	r0, [pc, #224]	@ (8012a9c <plug_holes+0x12c>)
 80129ba:	f00b fbe7 	bl	801e18c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	881b      	ldrh	r3, [r3, #0]
 80129c2:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80129c6:	d906      	bls.n	80129d6 <plug_holes+0x66>
 80129c8:	4b32      	ldr	r3, [pc, #200]	@ (8012a94 <plug_holes+0x124>)
 80129ca:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 80129ce:	4937      	ldr	r1, [pc, #220]	@ (8012aac <plug_holes+0x13c>)
 80129d0:	4832      	ldr	r0, [pc, #200]	@ (8012a9c <plug_holes+0x12c>)
 80129d2:	f00b fbdb 	bl	801e18c <iprintf>

  nmem = ptr_to_mem(mem->next);
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	881b      	ldrh	r3, [r3, #0]
 80129da:	4618      	mov	r0, r3
 80129dc:	f7ff ffa4 	bl	8012928 <ptr_to_mem>
 80129e0:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80129e2:	687a      	ldr	r2, [r7, #4]
 80129e4:	68fb      	ldr	r3, [r7, #12]
 80129e6:	429a      	cmp	r2, r3
 80129e8:	d024      	beq.n	8012a34 <plug_holes+0xc4>
 80129ea:	68fb      	ldr	r3, [r7, #12]
 80129ec:	791b      	ldrb	r3, [r3, #4]
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	d120      	bne.n	8012a34 <plug_holes+0xc4>
 80129f2:	4b2b      	ldr	r3, [pc, #172]	@ (8012aa0 <plug_holes+0x130>)
 80129f4:	681b      	ldr	r3, [r3, #0]
 80129f6:	68fa      	ldr	r2, [r7, #12]
 80129f8:	429a      	cmp	r2, r3
 80129fa:	d01b      	beq.n	8012a34 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80129fc:	4b2c      	ldr	r3, [pc, #176]	@ (8012ab0 <plug_holes+0x140>)
 80129fe:	681b      	ldr	r3, [r3, #0]
 8012a00:	68fa      	ldr	r2, [r7, #12]
 8012a02:	429a      	cmp	r2, r3
 8012a04:	d102      	bne.n	8012a0c <plug_holes+0x9c>
      lfree = mem;
 8012a06:	4a2a      	ldr	r2, [pc, #168]	@ (8012ab0 <plug_holes+0x140>)
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8012a0c:	68fb      	ldr	r3, [r7, #12]
 8012a0e:	881a      	ldrh	r2, [r3, #0]
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8012a14:	68fb      	ldr	r3, [r7, #12]
 8012a16:	881b      	ldrh	r3, [r3, #0]
 8012a18:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8012a1c:	d00a      	beq.n	8012a34 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8012a1e:	68fb      	ldr	r3, [r7, #12]
 8012a20:	881b      	ldrh	r3, [r3, #0]
 8012a22:	4618      	mov	r0, r3
 8012a24:	f7ff ff80 	bl	8012928 <ptr_to_mem>
 8012a28:	4604      	mov	r4, r0
 8012a2a:	6878      	ldr	r0, [r7, #4]
 8012a2c:	f7ff ff8e 	bl	801294c <mem_to_ptr>
 8012a30:	4603      	mov	r3, r0
 8012a32:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	885b      	ldrh	r3, [r3, #2]
 8012a38:	4618      	mov	r0, r3
 8012a3a:	f7ff ff75 	bl	8012928 <ptr_to_mem>
 8012a3e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8012a40:	68ba      	ldr	r2, [r7, #8]
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	429a      	cmp	r2, r3
 8012a46:	d01f      	beq.n	8012a88 <plug_holes+0x118>
 8012a48:	68bb      	ldr	r3, [r7, #8]
 8012a4a:	791b      	ldrb	r3, [r3, #4]
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d11b      	bne.n	8012a88 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8012a50:	4b17      	ldr	r3, [pc, #92]	@ (8012ab0 <plug_holes+0x140>)
 8012a52:	681b      	ldr	r3, [r3, #0]
 8012a54:	687a      	ldr	r2, [r7, #4]
 8012a56:	429a      	cmp	r2, r3
 8012a58:	d102      	bne.n	8012a60 <plug_holes+0xf0>
      lfree = pmem;
 8012a5a:	4a15      	ldr	r2, [pc, #84]	@ (8012ab0 <plug_holes+0x140>)
 8012a5c:	68bb      	ldr	r3, [r7, #8]
 8012a5e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	881a      	ldrh	r2, [r3, #0]
 8012a64:	68bb      	ldr	r3, [r7, #8]
 8012a66:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	881b      	ldrh	r3, [r3, #0]
 8012a6c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8012a70:	d00a      	beq.n	8012a88 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	881b      	ldrh	r3, [r3, #0]
 8012a76:	4618      	mov	r0, r3
 8012a78:	f7ff ff56 	bl	8012928 <ptr_to_mem>
 8012a7c:	4604      	mov	r4, r0
 8012a7e:	68b8      	ldr	r0, [r7, #8]
 8012a80:	f7ff ff64 	bl	801294c <mem_to_ptr>
 8012a84:	4603      	mov	r3, r0
 8012a86:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8012a88:	bf00      	nop
 8012a8a:	3714      	adds	r7, #20
 8012a8c:	46bd      	mov	sp, r7
 8012a8e:	bd90      	pop	{r4, r7, pc}
 8012a90:	200099d8 	.word	0x200099d8
 8012a94:	08021274 	.word	0x08021274
 8012a98:	080212a4 	.word	0x080212a4
 8012a9c:	080212bc 	.word	0x080212bc
 8012aa0:	200099dc 	.word	0x200099dc
 8012aa4:	080212e4 	.word	0x080212e4
 8012aa8:	08021300 	.word	0x08021300
 8012aac:	0802131c 	.word	0x0802131c
 8012ab0:	200099e4 	.word	0x200099e4

08012ab4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8012ab4:	b580      	push	{r7, lr}
 8012ab6:	b082      	sub	sp, #8
 8012ab8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8012aba:	4b1f      	ldr	r3, [pc, #124]	@ (8012b38 <mem_init+0x84>)
 8012abc:	3303      	adds	r3, #3
 8012abe:	f023 0303 	bic.w	r3, r3, #3
 8012ac2:	461a      	mov	r2, r3
 8012ac4:	4b1d      	ldr	r3, [pc, #116]	@ (8012b3c <mem_init+0x88>)
 8012ac6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8012ac8:	4b1c      	ldr	r3, [pc, #112]	@ (8012b3c <mem_init+0x88>)
 8012aca:	681b      	ldr	r3, [r3, #0]
 8012acc:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8012ad4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	2200      	movs	r2, #0
 8012ada:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	2200      	movs	r2, #0
 8012ae0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8012ae2:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 8012ae6:	f7ff ff1f 	bl	8012928 <ptr_to_mem>
 8012aea:	4603      	mov	r3, r0
 8012aec:	4a14      	ldr	r2, [pc, #80]	@ (8012b40 <mem_init+0x8c>)
 8012aee:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8012af0:	4b13      	ldr	r3, [pc, #76]	@ (8012b40 <mem_init+0x8c>)
 8012af2:	681b      	ldr	r3, [r3, #0]
 8012af4:	2201      	movs	r2, #1
 8012af6:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8012af8:	4b11      	ldr	r3, [pc, #68]	@ (8012b40 <mem_init+0x8c>)
 8012afa:	681b      	ldr	r3, [r3, #0]
 8012afc:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8012b00:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8012b02:	4b0f      	ldr	r3, [pc, #60]	@ (8012b40 <mem_init+0x8c>)
 8012b04:	681b      	ldr	r3, [r3, #0]
 8012b06:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8012b0a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8012b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8012b3c <mem_init+0x88>)
 8012b0e:	681b      	ldr	r3, [r3, #0]
 8012b10:	4a0c      	ldr	r2, [pc, #48]	@ (8012b44 <mem_init+0x90>)
 8012b12:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8012b14:	480c      	ldr	r0, [pc, #48]	@ (8012b48 <mem_init+0x94>)
 8012b16:	f00a fc1b 	bl	801d350 <sys_mutex_new>
 8012b1a:	4603      	mov	r3, r0
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	d006      	beq.n	8012b2e <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8012b20:	4b0a      	ldr	r3, [pc, #40]	@ (8012b4c <mem_init+0x98>)
 8012b22:	f240 221f 	movw	r2, #543	@ 0x21f
 8012b26:	490a      	ldr	r1, [pc, #40]	@ (8012b50 <mem_init+0x9c>)
 8012b28:	480a      	ldr	r0, [pc, #40]	@ (8012b54 <mem_init+0xa0>)
 8012b2a:	f00b fb2f 	bl	801e18c <iprintf>
  }
}
 8012b2e:	bf00      	nop
 8012b30:	3708      	adds	r7, #8
 8012b32:	46bd      	mov	sp, r7
 8012b34:	bd80      	pop	{r7, pc}
 8012b36:	bf00      	nop
 8012b38:	20009384 	.word	0x20009384
 8012b3c:	200099d8 	.word	0x200099d8
 8012b40:	200099dc 	.word	0x200099dc
 8012b44:	200099e4 	.word	0x200099e4
 8012b48:	200099e0 	.word	0x200099e0
 8012b4c:	08021274 	.word	0x08021274
 8012b50:	08021348 	.word	0x08021348
 8012b54:	080212bc 	.word	0x080212bc

08012b58 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8012b58:	b580      	push	{r7, lr}
 8012b5a:	b086      	sub	sp, #24
 8012b5c:	af00      	add	r7, sp, #0
 8012b5e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8012b60:	6878      	ldr	r0, [r7, #4]
 8012b62:	f7ff fef3 	bl	801294c <mem_to_ptr>
 8012b66:	4603      	mov	r3, r0
 8012b68:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	881b      	ldrh	r3, [r3, #0]
 8012b6e:	4618      	mov	r0, r3
 8012b70:	f7ff feda 	bl	8012928 <ptr_to_mem>
 8012b74:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	885b      	ldrh	r3, [r3, #2]
 8012b7a:	4618      	mov	r0, r3
 8012b7c:	f7ff fed4 	bl	8012928 <ptr_to_mem>
 8012b80:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	881b      	ldrh	r3, [r3, #0]
 8012b86:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8012b8a:	d818      	bhi.n	8012bbe <mem_link_valid+0x66>
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	885b      	ldrh	r3, [r3, #2]
 8012b90:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8012b94:	d813      	bhi.n	8012bbe <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8012b9a:	8afa      	ldrh	r2, [r7, #22]
 8012b9c:	429a      	cmp	r2, r3
 8012b9e:	d004      	beq.n	8012baa <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8012ba0:	68fb      	ldr	r3, [r7, #12]
 8012ba2:	881b      	ldrh	r3, [r3, #0]
 8012ba4:	8afa      	ldrh	r2, [r7, #22]
 8012ba6:	429a      	cmp	r2, r3
 8012ba8:	d109      	bne.n	8012bbe <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8012baa:	4b08      	ldr	r3, [pc, #32]	@ (8012bcc <mem_link_valid+0x74>)
 8012bac:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8012bae:	693a      	ldr	r2, [r7, #16]
 8012bb0:	429a      	cmp	r2, r3
 8012bb2:	d006      	beq.n	8012bc2 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8012bb4:	693b      	ldr	r3, [r7, #16]
 8012bb6:	885b      	ldrh	r3, [r3, #2]
 8012bb8:	8afa      	ldrh	r2, [r7, #22]
 8012bba:	429a      	cmp	r2, r3
 8012bbc:	d001      	beq.n	8012bc2 <mem_link_valid+0x6a>
    return 0;
 8012bbe:	2300      	movs	r3, #0
 8012bc0:	e000      	b.n	8012bc4 <mem_link_valid+0x6c>
  }
  return 1;
 8012bc2:	2301      	movs	r3, #1
}
 8012bc4:	4618      	mov	r0, r3
 8012bc6:	3718      	adds	r7, #24
 8012bc8:	46bd      	mov	sp, r7
 8012bca:	bd80      	pop	{r7, pc}
 8012bcc:	200099dc 	.word	0x200099dc

08012bd0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8012bd0:	b580      	push	{r7, lr}
 8012bd2:	b088      	sub	sp, #32
 8012bd4:	af00      	add	r7, sp, #0
 8012bd6:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	2b00      	cmp	r3, #0
 8012bdc:	d070      	beq.n	8012cc0 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	f003 0303 	and.w	r3, r3, #3
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	d00d      	beq.n	8012c04 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8012be8:	4b37      	ldr	r3, [pc, #220]	@ (8012cc8 <mem_free+0xf8>)
 8012bea:	f240 2273 	movw	r2, #627	@ 0x273
 8012bee:	4937      	ldr	r1, [pc, #220]	@ (8012ccc <mem_free+0xfc>)
 8012bf0:	4837      	ldr	r0, [pc, #220]	@ (8012cd0 <mem_free+0x100>)
 8012bf2:	f00b facb 	bl	801e18c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8012bf6:	f00a fc09 	bl	801d40c <sys_arch_protect>
 8012bfa:	60f8      	str	r0, [r7, #12]
 8012bfc:	68f8      	ldr	r0, [r7, #12]
 8012bfe:	f00a fc13 	bl	801d428 <sys_arch_unprotect>
    return;
 8012c02:	e05e      	b.n	8012cc2 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	3b08      	subs	r3, #8
 8012c08:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8012c0a:	4b32      	ldr	r3, [pc, #200]	@ (8012cd4 <mem_free+0x104>)
 8012c0c:	681b      	ldr	r3, [r3, #0]
 8012c0e:	69fa      	ldr	r2, [r7, #28]
 8012c10:	429a      	cmp	r2, r3
 8012c12:	d306      	bcc.n	8012c22 <mem_free+0x52>
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	f103 020c 	add.w	r2, r3, #12
 8012c1a:	4b2f      	ldr	r3, [pc, #188]	@ (8012cd8 <mem_free+0x108>)
 8012c1c:	681b      	ldr	r3, [r3, #0]
 8012c1e:	429a      	cmp	r2, r3
 8012c20:	d90d      	bls.n	8012c3e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8012c22:	4b29      	ldr	r3, [pc, #164]	@ (8012cc8 <mem_free+0xf8>)
 8012c24:	f240 227f 	movw	r2, #639	@ 0x27f
 8012c28:	492c      	ldr	r1, [pc, #176]	@ (8012cdc <mem_free+0x10c>)
 8012c2a:	4829      	ldr	r0, [pc, #164]	@ (8012cd0 <mem_free+0x100>)
 8012c2c:	f00b faae 	bl	801e18c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8012c30:	f00a fbec 	bl	801d40c <sys_arch_protect>
 8012c34:	6138      	str	r0, [r7, #16]
 8012c36:	6938      	ldr	r0, [r7, #16]
 8012c38:	f00a fbf6 	bl	801d428 <sys_arch_unprotect>
    return;
 8012c3c:	e041      	b.n	8012cc2 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8012c3e:	4828      	ldr	r0, [pc, #160]	@ (8012ce0 <mem_free+0x110>)
 8012c40:	f00a fba2 	bl	801d388 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8012c44:	69fb      	ldr	r3, [r7, #28]
 8012c46:	791b      	ldrb	r3, [r3, #4]
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	d110      	bne.n	8012c6e <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8012c4c:	4b1e      	ldr	r3, [pc, #120]	@ (8012cc8 <mem_free+0xf8>)
 8012c4e:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8012c52:	4924      	ldr	r1, [pc, #144]	@ (8012ce4 <mem_free+0x114>)
 8012c54:	481e      	ldr	r0, [pc, #120]	@ (8012cd0 <mem_free+0x100>)
 8012c56:	f00b fa99 	bl	801e18c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8012c5a:	4821      	ldr	r0, [pc, #132]	@ (8012ce0 <mem_free+0x110>)
 8012c5c:	f00a fba3 	bl	801d3a6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8012c60:	f00a fbd4 	bl	801d40c <sys_arch_protect>
 8012c64:	6178      	str	r0, [r7, #20]
 8012c66:	6978      	ldr	r0, [r7, #20]
 8012c68:	f00a fbde 	bl	801d428 <sys_arch_unprotect>
    return;
 8012c6c:	e029      	b.n	8012cc2 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8012c6e:	69f8      	ldr	r0, [r7, #28]
 8012c70:	f7ff ff72 	bl	8012b58 <mem_link_valid>
 8012c74:	4603      	mov	r3, r0
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	d110      	bne.n	8012c9c <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8012c7a:	4b13      	ldr	r3, [pc, #76]	@ (8012cc8 <mem_free+0xf8>)
 8012c7c:	f240 2295 	movw	r2, #661	@ 0x295
 8012c80:	4919      	ldr	r1, [pc, #100]	@ (8012ce8 <mem_free+0x118>)
 8012c82:	4813      	ldr	r0, [pc, #76]	@ (8012cd0 <mem_free+0x100>)
 8012c84:	f00b fa82 	bl	801e18c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8012c88:	4815      	ldr	r0, [pc, #84]	@ (8012ce0 <mem_free+0x110>)
 8012c8a:	f00a fb8c 	bl	801d3a6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8012c8e:	f00a fbbd 	bl	801d40c <sys_arch_protect>
 8012c92:	61b8      	str	r0, [r7, #24]
 8012c94:	69b8      	ldr	r0, [r7, #24]
 8012c96:	f00a fbc7 	bl	801d428 <sys_arch_unprotect>
    return;
 8012c9a:	e012      	b.n	8012cc2 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8012c9c:	69fb      	ldr	r3, [r7, #28]
 8012c9e:	2200      	movs	r2, #0
 8012ca0:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8012ca2:	4b12      	ldr	r3, [pc, #72]	@ (8012cec <mem_free+0x11c>)
 8012ca4:	681b      	ldr	r3, [r3, #0]
 8012ca6:	69fa      	ldr	r2, [r7, #28]
 8012ca8:	429a      	cmp	r2, r3
 8012caa:	d202      	bcs.n	8012cb2 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8012cac:	4a0f      	ldr	r2, [pc, #60]	@ (8012cec <mem_free+0x11c>)
 8012cae:	69fb      	ldr	r3, [r7, #28]
 8012cb0:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8012cb2:	69f8      	ldr	r0, [r7, #28]
 8012cb4:	f7ff fe5c 	bl	8012970 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8012cb8:	4809      	ldr	r0, [pc, #36]	@ (8012ce0 <mem_free+0x110>)
 8012cba:	f00a fb74 	bl	801d3a6 <sys_mutex_unlock>
 8012cbe:	e000      	b.n	8012cc2 <mem_free+0xf2>
    return;
 8012cc0:	bf00      	nop
}
 8012cc2:	3720      	adds	r7, #32
 8012cc4:	46bd      	mov	sp, r7
 8012cc6:	bd80      	pop	{r7, pc}
 8012cc8:	08021274 	.word	0x08021274
 8012ccc:	08021364 	.word	0x08021364
 8012cd0:	080212bc 	.word	0x080212bc
 8012cd4:	200099d8 	.word	0x200099d8
 8012cd8:	200099dc 	.word	0x200099dc
 8012cdc:	08021388 	.word	0x08021388
 8012ce0:	200099e0 	.word	0x200099e0
 8012ce4:	080213a4 	.word	0x080213a4
 8012ce8:	080213cc 	.word	0x080213cc
 8012cec:	200099e4 	.word	0x200099e4

08012cf0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8012cf0:	b580      	push	{r7, lr}
 8012cf2:	b088      	sub	sp, #32
 8012cf4:	af00      	add	r7, sp, #0
 8012cf6:	6078      	str	r0, [r7, #4]
 8012cf8:	460b      	mov	r3, r1
 8012cfa:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8012cfc:	887b      	ldrh	r3, [r7, #2]
 8012cfe:	3303      	adds	r3, #3
 8012d00:	b29b      	uxth	r3, r3
 8012d02:	f023 0303 	bic.w	r3, r3, #3
 8012d06:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8012d08:	8bfb      	ldrh	r3, [r7, #30]
 8012d0a:	2b0b      	cmp	r3, #11
 8012d0c:	d801      	bhi.n	8012d12 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8012d0e:	230c      	movs	r3, #12
 8012d10:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8012d12:	8bfb      	ldrh	r3, [r7, #30]
 8012d14:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8012d18:	d803      	bhi.n	8012d22 <mem_trim+0x32>
 8012d1a:	8bfa      	ldrh	r2, [r7, #30]
 8012d1c:	887b      	ldrh	r3, [r7, #2]
 8012d1e:	429a      	cmp	r2, r3
 8012d20:	d201      	bcs.n	8012d26 <mem_trim+0x36>
    return NULL;
 8012d22:	2300      	movs	r3, #0
 8012d24:	e0d8      	b.n	8012ed8 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8012d26:	4b6e      	ldr	r3, [pc, #440]	@ (8012ee0 <mem_trim+0x1f0>)
 8012d28:	681b      	ldr	r3, [r3, #0]
 8012d2a:	687a      	ldr	r2, [r7, #4]
 8012d2c:	429a      	cmp	r2, r3
 8012d2e:	d304      	bcc.n	8012d3a <mem_trim+0x4a>
 8012d30:	4b6c      	ldr	r3, [pc, #432]	@ (8012ee4 <mem_trim+0x1f4>)
 8012d32:	681b      	ldr	r3, [r3, #0]
 8012d34:	687a      	ldr	r2, [r7, #4]
 8012d36:	429a      	cmp	r2, r3
 8012d38:	d306      	bcc.n	8012d48 <mem_trim+0x58>
 8012d3a:	4b6b      	ldr	r3, [pc, #428]	@ (8012ee8 <mem_trim+0x1f8>)
 8012d3c:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8012d40:	496a      	ldr	r1, [pc, #424]	@ (8012eec <mem_trim+0x1fc>)
 8012d42:	486b      	ldr	r0, [pc, #428]	@ (8012ef0 <mem_trim+0x200>)
 8012d44:	f00b fa22 	bl	801e18c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8012d48:	4b65      	ldr	r3, [pc, #404]	@ (8012ee0 <mem_trim+0x1f0>)
 8012d4a:	681b      	ldr	r3, [r3, #0]
 8012d4c:	687a      	ldr	r2, [r7, #4]
 8012d4e:	429a      	cmp	r2, r3
 8012d50:	d304      	bcc.n	8012d5c <mem_trim+0x6c>
 8012d52:	4b64      	ldr	r3, [pc, #400]	@ (8012ee4 <mem_trim+0x1f4>)
 8012d54:	681b      	ldr	r3, [r3, #0]
 8012d56:	687a      	ldr	r2, [r7, #4]
 8012d58:	429a      	cmp	r2, r3
 8012d5a:	d307      	bcc.n	8012d6c <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8012d5c:	f00a fb56 	bl	801d40c <sys_arch_protect>
 8012d60:	60b8      	str	r0, [r7, #8]
 8012d62:	68b8      	ldr	r0, [r7, #8]
 8012d64:	f00a fb60 	bl	801d428 <sys_arch_unprotect>
    return rmem;
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	e0b5      	b.n	8012ed8 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	3b08      	subs	r3, #8
 8012d70:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8012d72:	69b8      	ldr	r0, [r7, #24]
 8012d74:	f7ff fdea 	bl	801294c <mem_to_ptr>
 8012d78:	4603      	mov	r3, r0
 8012d7a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8012d7c:	69bb      	ldr	r3, [r7, #24]
 8012d7e:	881a      	ldrh	r2, [r3, #0]
 8012d80:	8afb      	ldrh	r3, [r7, #22]
 8012d82:	1ad3      	subs	r3, r2, r3
 8012d84:	b29b      	uxth	r3, r3
 8012d86:	3b08      	subs	r3, #8
 8012d88:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8012d8a:	8bfa      	ldrh	r2, [r7, #30]
 8012d8c:	8abb      	ldrh	r3, [r7, #20]
 8012d8e:	429a      	cmp	r2, r3
 8012d90:	d906      	bls.n	8012da0 <mem_trim+0xb0>
 8012d92:	4b55      	ldr	r3, [pc, #340]	@ (8012ee8 <mem_trim+0x1f8>)
 8012d94:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8012d98:	4956      	ldr	r1, [pc, #344]	@ (8012ef4 <mem_trim+0x204>)
 8012d9a:	4855      	ldr	r0, [pc, #340]	@ (8012ef0 <mem_trim+0x200>)
 8012d9c:	f00b f9f6 	bl	801e18c <iprintf>
  if (newsize > size) {
 8012da0:	8bfa      	ldrh	r2, [r7, #30]
 8012da2:	8abb      	ldrh	r3, [r7, #20]
 8012da4:	429a      	cmp	r2, r3
 8012da6:	d901      	bls.n	8012dac <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8012da8:	2300      	movs	r3, #0
 8012daa:	e095      	b.n	8012ed8 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8012dac:	8bfa      	ldrh	r2, [r7, #30]
 8012dae:	8abb      	ldrh	r3, [r7, #20]
 8012db0:	429a      	cmp	r2, r3
 8012db2:	d101      	bne.n	8012db8 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	e08f      	b.n	8012ed8 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8012db8:	484f      	ldr	r0, [pc, #316]	@ (8012ef8 <mem_trim+0x208>)
 8012dba:	f00a fae5 	bl	801d388 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8012dbe:	69bb      	ldr	r3, [r7, #24]
 8012dc0:	881b      	ldrh	r3, [r3, #0]
 8012dc2:	4618      	mov	r0, r3
 8012dc4:	f7ff fdb0 	bl	8012928 <ptr_to_mem>
 8012dc8:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8012dca:	693b      	ldr	r3, [r7, #16]
 8012dcc:	791b      	ldrb	r3, [r3, #4]
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	d13f      	bne.n	8012e52 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8012dd2:	69bb      	ldr	r3, [r7, #24]
 8012dd4:	881b      	ldrh	r3, [r3, #0]
 8012dd6:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8012dda:	d106      	bne.n	8012dea <mem_trim+0xfa>
 8012ddc:	4b42      	ldr	r3, [pc, #264]	@ (8012ee8 <mem_trim+0x1f8>)
 8012dde:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8012de2:	4946      	ldr	r1, [pc, #280]	@ (8012efc <mem_trim+0x20c>)
 8012de4:	4842      	ldr	r0, [pc, #264]	@ (8012ef0 <mem_trim+0x200>)
 8012de6:	f00b f9d1 	bl	801e18c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8012dea:	693b      	ldr	r3, [r7, #16]
 8012dec:	881b      	ldrh	r3, [r3, #0]
 8012dee:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8012df0:	8afa      	ldrh	r2, [r7, #22]
 8012df2:	8bfb      	ldrh	r3, [r7, #30]
 8012df4:	4413      	add	r3, r2
 8012df6:	b29b      	uxth	r3, r3
 8012df8:	3308      	adds	r3, #8
 8012dfa:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8012dfc:	4b40      	ldr	r3, [pc, #256]	@ (8012f00 <mem_trim+0x210>)
 8012dfe:	681b      	ldr	r3, [r3, #0]
 8012e00:	693a      	ldr	r2, [r7, #16]
 8012e02:	429a      	cmp	r2, r3
 8012e04:	d106      	bne.n	8012e14 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8012e06:	89fb      	ldrh	r3, [r7, #14]
 8012e08:	4618      	mov	r0, r3
 8012e0a:	f7ff fd8d 	bl	8012928 <ptr_to_mem>
 8012e0e:	4603      	mov	r3, r0
 8012e10:	4a3b      	ldr	r2, [pc, #236]	@ (8012f00 <mem_trim+0x210>)
 8012e12:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8012e14:	89fb      	ldrh	r3, [r7, #14]
 8012e16:	4618      	mov	r0, r3
 8012e18:	f7ff fd86 	bl	8012928 <ptr_to_mem>
 8012e1c:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8012e1e:	693b      	ldr	r3, [r7, #16]
 8012e20:	2200      	movs	r2, #0
 8012e22:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8012e24:	693b      	ldr	r3, [r7, #16]
 8012e26:	89ba      	ldrh	r2, [r7, #12]
 8012e28:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8012e2a:	693b      	ldr	r3, [r7, #16]
 8012e2c:	8afa      	ldrh	r2, [r7, #22]
 8012e2e:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8012e30:	69bb      	ldr	r3, [r7, #24]
 8012e32:	89fa      	ldrh	r2, [r7, #14]
 8012e34:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8012e36:	693b      	ldr	r3, [r7, #16]
 8012e38:	881b      	ldrh	r3, [r3, #0]
 8012e3a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8012e3e:	d047      	beq.n	8012ed0 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8012e40:	693b      	ldr	r3, [r7, #16]
 8012e42:	881b      	ldrh	r3, [r3, #0]
 8012e44:	4618      	mov	r0, r3
 8012e46:	f7ff fd6f 	bl	8012928 <ptr_to_mem>
 8012e4a:	4602      	mov	r2, r0
 8012e4c:	89fb      	ldrh	r3, [r7, #14]
 8012e4e:	8053      	strh	r3, [r2, #2]
 8012e50:	e03e      	b.n	8012ed0 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8012e52:	8bfb      	ldrh	r3, [r7, #30]
 8012e54:	f103 0214 	add.w	r2, r3, #20
 8012e58:	8abb      	ldrh	r3, [r7, #20]
 8012e5a:	429a      	cmp	r2, r3
 8012e5c:	d838      	bhi.n	8012ed0 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8012e5e:	8afa      	ldrh	r2, [r7, #22]
 8012e60:	8bfb      	ldrh	r3, [r7, #30]
 8012e62:	4413      	add	r3, r2
 8012e64:	b29b      	uxth	r3, r3
 8012e66:	3308      	adds	r3, #8
 8012e68:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8012e6a:	69bb      	ldr	r3, [r7, #24]
 8012e6c:	881b      	ldrh	r3, [r3, #0]
 8012e6e:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8012e72:	d106      	bne.n	8012e82 <mem_trim+0x192>
 8012e74:	4b1c      	ldr	r3, [pc, #112]	@ (8012ee8 <mem_trim+0x1f8>)
 8012e76:	f240 3216 	movw	r2, #790	@ 0x316
 8012e7a:	4920      	ldr	r1, [pc, #128]	@ (8012efc <mem_trim+0x20c>)
 8012e7c:	481c      	ldr	r0, [pc, #112]	@ (8012ef0 <mem_trim+0x200>)
 8012e7e:	f00b f985 	bl	801e18c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8012e82:	89fb      	ldrh	r3, [r7, #14]
 8012e84:	4618      	mov	r0, r3
 8012e86:	f7ff fd4f 	bl	8012928 <ptr_to_mem>
 8012e8a:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8012e8c:	4b1c      	ldr	r3, [pc, #112]	@ (8012f00 <mem_trim+0x210>)
 8012e8e:	681b      	ldr	r3, [r3, #0]
 8012e90:	693a      	ldr	r2, [r7, #16]
 8012e92:	429a      	cmp	r2, r3
 8012e94:	d202      	bcs.n	8012e9c <mem_trim+0x1ac>
      lfree = mem2;
 8012e96:	4a1a      	ldr	r2, [pc, #104]	@ (8012f00 <mem_trim+0x210>)
 8012e98:	693b      	ldr	r3, [r7, #16]
 8012e9a:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8012e9c:	693b      	ldr	r3, [r7, #16]
 8012e9e:	2200      	movs	r2, #0
 8012ea0:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8012ea2:	69bb      	ldr	r3, [r7, #24]
 8012ea4:	881a      	ldrh	r2, [r3, #0]
 8012ea6:	693b      	ldr	r3, [r7, #16]
 8012ea8:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8012eaa:	693b      	ldr	r3, [r7, #16]
 8012eac:	8afa      	ldrh	r2, [r7, #22]
 8012eae:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8012eb0:	69bb      	ldr	r3, [r7, #24]
 8012eb2:	89fa      	ldrh	r2, [r7, #14]
 8012eb4:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8012eb6:	693b      	ldr	r3, [r7, #16]
 8012eb8:	881b      	ldrh	r3, [r3, #0]
 8012eba:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8012ebe:	d007      	beq.n	8012ed0 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8012ec0:	693b      	ldr	r3, [r7, #16]
 8012ec2:	881b      	ldrh	r3, [r3, #0]
 8012ec4:	4618      	mov	r0, r3
 8012ec6:	f7ff fd2f 	bl	8012928 <ptr_to_mem>
 8012eca:	4602      	mov	r2, r0
 8012ecc:	89fb      	ldrh	r3, [r7, #14]
 8012ece:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8012ed0:	4809      	ldr	r0, [pc, #36]	@ (8012ef8 <mem_trim+0x208>)
 8012ed2:	f00a fa68 	bl	801d3a6 <sys_mutex_unlock>
  return rmem;
 8012ed6:	687b      	ldr	r3, [r7, #4]
}
 8012ed8:	4618      	mov	r0, r3
 8012eda:	3720      	adds	r7, #32
 8012edc:	46bd      	mov	sp, r7
 8012ede:	bd80      	pop	{r7, pc}
 8012ee0:	200099d8 	.word	0x200099d8
 8012ee4:	200099dc 	.word	0x200099dc
 8012ee8:	08021274 	.word	0x08021274
 8012eec:	08021400 	.word	0x08021400
 8012ef0:	080212bc 	.word	0x080212bc
 8012ef4:	08021418 	.word	0x08021418
 8012ef8:	200099e0 	.word	0x200099e0
 8012efc:	08021438 	.word	0x08021438
 8012f00:	200099e4 	.word	0x200099e4

08012f04 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8012f04:	b580      	push	{r7, lr}
 8012f06:	b088      	sub	sp, #32
 8012f08:	af00      	add	r7, sp, #0
 8012f0a:	4603      	mov	r3, r0
 8012f0c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8012f0e:	88fb      	ldrh	r3, [r7, #6]
 8012f10:	2b00      	cmp	r3, #0
 8012f12:	d101      	bne.n	8012f18 <mem_malloc+0x14>
    return NULL;
 8012f14:	2300      	movs	r3, #0
 8012f16:	e0e2      	b.n	80130de <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8012f18:	88fb      	ldrh	r3, [r7, #6]
 8012f1a:	3303      	adds	r3, #3
 8012f1c:	b29b      	uxth	r3, r3
 8012f1e:	f023 0303 	bic.w	r3, r3, #3
 8012f22:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8012f24:	8bbb      	ldrh	r3, [r7, #28]
 8012f26:	2b0b      	cmp	r3, #11
 8012f28:	d801      	bhi.n	8012f2e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8012f2a:	230c      	movs	r3, #12
 8012f2c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8012f2e:	8bbb      	ldrh	r3, [r7, #28]
 8012f30:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8012f34:	d803      	bhi.n	8012f3e <mem_malloc+0x3a>
 8012f36:	8bba      	ldrh	r2, [r7, #28]
 8012f38:	88fb      	ldrh	r3, [r7, #6]
 8012f3a:	429a      	cmp	r2, r3
 8012f3c:	d201      	bcs.n	8012f42 <mem_malloc+0x3e>
    return NULL;
 8012f3e:	2300      	movs	r3, #0
 8012f40:	e0cd      	b.n	80130de <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8012f42:	4869      	ldr	r0, [pc, #420]	@ (80130e8 <mem_malloc+0x1e4>)
 8012f44:	f00a fa20 	bl	801d388 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8012f48:	4b68      	ldr	r3, [pc, #416]	@ (80130ec <mem_malloc+0x1e8>)
 8012f4a:	681b      	ldr	r3, [r3, #0]
 8012f4c:	4618      	mov	r0, r3
 8012f4e:	f7ff fcfd 	bl	801294c <mem_to_ptr>
 8012f52:	4603      	mov	r3, r0
 8012f54:	83fb      	strh	r3, [r7, #30]
 8012f56:	e0b7      	b.n	80130c8 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8012f58:	8bfb      	ldrh	r3, [r7, #30]
 8012f5a:	4618      	mov	r0, r3
 8012f5c:	f7ff fce4 	bl	8012928 <ptr_to_mem>
 8012f60:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8012f62:	697b      	ldr	r3, [r7, #20]
 8012f64:	791b      	ldrb	r3, [r3, #4]
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	f040 80a7 	bne.w	80130ba <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8012f6c:	697b      	ldr	r3, [r7, #20]
 8012f6e:	881b      	ldrh	r3, [r3, #0]
 8012f70:	461a      	mov	r2, r3
 8012f72:	8bfb      	ldrh	r3, [r7, #30]
 8012f74:	1ad3      	subs	r3, r2, r3
 8012f76:	f1a3 0208 	sub.w	r2, r3, #8
 8012f7a:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8012f7c:	429a      	cmp	r2, r3
 8012f7e:	f0c0 809c 	bcc.w	80130ba <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8012f82:	697b      	ldr	r3, [r7, #20]
 8012f84:	881b      	ldrh	r3, [r3, #0]
 8012f86:	461a      	mov	r2, r3
 8012f88:	8bfb      	ldrh	r3, [r7, #30]
 8012f8a:	1ad3      	subs	r3, r2, r3
 8012f8c:	f1a3 0208 	sub.w	r2, r3, #8
 8012f90:	8bbb      	ldrh	r3, [r7, #28]
 8012f92:	3314      	adds	r3, #20
 8012f94:	429a      	cmp	r2, r3
 8012f96:	d333      	bcc.n	8013000 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8012f98:	8bfa      	ldrh	r2, [r7, #30]
 8012f9a:	8bbb      	ldrh	r3, [r7, #28]
 8012f9c:	4413      	add	r3, r2
 8012f9e:	b29b      	uxth	r3, r3
 8012fa0:	3308      	adds	r3, #8
 8012fa2:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8012fa4:	8a7b      	ldrh	r3, [r7, #18]
 8012fa6:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8012faa:	d106      	bne.n	8012fba <mem_malloc+0xb6>
 8012fac:	4b50      	ldr	r3, [pc, #320]	@ (80130f0 <mem_malloc+0x1ec>)
 8012fae:	f240 3287 	movw	r2, #903	@ 0x387
 8012fb2:	4950      	ldr	r1, [pc, #320]	@ (80130f4 <mem_malloc+0x1f0>)
 8012fb4:	4850      	ldr	r0, [pc, #320]	@ (80130f8 <mem_malloc+0x1f4>)
 8012fb6:	f00b f8e9 	bl	801e18c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8012fba:	8a7b      	ldrh	r3, [r7, #18]
 8012fbc:	4618      	mov	r0, r3
 8012fbe:	f7ff fcb3 	bl	8012928 <ptr_to_mem>
 8012fc2:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8012fc4:	68fb      	ldr	r3, [r7, #12]
 8012fc6:	2200      	movs	r2, #0
 8012fc8:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8012fca:	697b      	ldr	r3, [r7, #20]
 8012fcc:	881a      	ldrh	r2, [r3, #0]
 8012fce:	68fb      	ldr	r3, [r7, #12]
 8012fd0:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8012fd2:	68fb      	ldr	r3, [r7, #12]
 8012fd4:	8bfa      	ldrh	r2, [r7, #30]
 8012fd6:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8012fd8:	697b      	ldr	r3, [r7, #20]
 8012fda:	8a7a      	ldrh	r2, [r7, #18]
 8012fdc:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8012fde:	697b      	ldr	r3, [r7, #20]
 8012fe0:	2201      	movs	r2, #1
 8012fe2:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8012fe4:	68fb      	ldr	r3, [r7, #12]
 8012fe6:	881b      	ldrh	r3, [r3, #0]
 8012fe8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8012fec:	d00b      	beq.n	8013006 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8012fee:	68fb      	ldr	r3, [r7, #12]
 8012ff0:	881b      	ldrh	r3, [r3, #0]
 8012ff2:	4618      	mov	r0, r3
 8012ff4:	f7ff fc98 	bl	8012928 <ptr_to_mem>
 8012ff8:	4602      	mov	r2, r0
 8012ffa:	8a7b      	ldrh	r3, [r7, #18]
 8012ffc:	8053      	strh	r3, [r2, #2]
 8012ffe:	e002      	b.n	8013006 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8013000:	697b      	ldr	r3, [r7, #20]
 8013002:	2201      	movs	r2, #1
 8013004:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8013006:	4b39      	ldr	r3, [pc, #228]	@ (80130ec <mem_malloc+0x1e8>)
 8013008:	681b      	ldr	r3, [r3, #0]
 801300a:	697a      	ldr	r2, [r7, #20]
 801300c:	429a      	cmp	r2, r3
 801300e:	d127      	bne.n	8013060 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8013010:	4b36      	ldr	r3, [pc, #216]	@ (80130ec <mem_malloc+0x1e8>)
 8013012:	681b      	ldr	r3, [r3, #0]
 8013014:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8013016:	e005      	b.n	8013024 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8013018:	69bb      	ldr	r3, [r7, #24]
 801301a:	881b      	ldrh	r3, [r3, #0]
 801301c:	4618      	mov	r0, r3
 801301e:	f7ff fc83 	bl	8012928 <ptr_to_mem>
 8013022:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8013024:	69bb      	ldr	r3, [r7, #24]
 8013026:	791b      	ldrb	r3, [r3, #4]
 8013028:	2b00      	cmp	r3, #0
 801302a:	d004      	beq.n	8013036 <mem_malloc+0x132>
 801302c:	4b33      	ldr	r3, [pc, #204]	@ (80130fc <mem_malloc+0x1f8>)
 801302e:	681b      	ldr	r3, [r3, #0]
 8013030:	69ba      	ldr	r2, [r7, #24]
 8013032:	429a      	cmp	r2, r3
 8013034:	d1f0      	bne.n	8013018 <mem_malloc+0x114>
          }
          lfree = cur;
 8013036:	4a2d      	ldr	r2, [pc, #180]	@ (80130ec <mem_malloc+0x1e8>)
 8013038:	69bb      	ldr	r3, [r7, #24]
 801303a:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 801303c:	4b2b      	ldr	r3, [pc, #172]	@ (80130ec <mem_malloc+0x1e8>)
 801303e:	681a      	ldr	r2, [r3, #0]
 8013040:	4b2e      	ldr	r3, [pc, #184]	@ (80130fc <mem_malloc+0x1f8>)
 8013042:	681b      	ldr	r3, [r3, #0]
 8013044:	429a      	cmp	r2, r3
 8013046:	d00b      	beq.n	8013060 <mem_malloc+0x15c>
 8013048:	4b28      	ldr	r3, [pc, #160]	@ (80130ec <mem_malloc+0x1e8>)
 801304a:	681b      	ldr	r3, [r3, #0]
 801304c:	791b      	ldrb	r3, [r3, #4]
 801304e:	2b00      	cmp	r3, #0
 8013050:	d006      	beq.n	8013060 <mem_malloc+0x15c>
 8013052:	4b27      	ldr	r3, [pc, #156]	@ (80130f0 <mem_malloc+0x1ec>)
 8013054:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8013058:	4929      	ldr	r1, [pc, #164]	@ (8013100 <mem_malloc+0x1fc>)
 801305a:	4827      	ldr	r0, [pc, #156]	@ (80130f8 <mem_malloc+0x1f4>)
 801305c:	f00b f896 	bl	801e18c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8013060:	4821      	ldr	r0, [pc, #132]	@ (80130e8 <mem_malloc+0x1e4>)
 8013062:	f00a f9a0 	bl	801d3a6 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8013066:	8bba      	ldrh	r2, [r7, #28]
 8013068:	697b      	ldr	r3, [r7, #20]
 801306a:	4413      	add	r3, r2
 801306c:	3308      	adds	r3, #8
 801306e:	4a23      	ldr	r2, [pc, #140]	@ (80130fc <mem_malloc+0x1f8>)
 8013070:	6812      	ldr	r2, [r2, #0]
 8013072:	4293      	cmp	r3, r2
 8013074:	d906      	bls.n	8013084 <mem_malloc+0x180>
 8013076:	4b1e      	ldr	r3, [pc, #120]	@ (80130f0 <mem_malloc+0x1ec>)
 8013078:	f240 32b9 	movw	r2, #953	@ 0x3b9
 801307c:	4921      	ldr	r1, [pc, #132]	@ (8013104 <mem_malloc+0x200>)
 801307e:	481e      	ldr	r0, [pc, #120]	@ (80130f8 <mem_malloc+0x1f4>)
 8013080:	f00b f884 	bl	801e18c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8013084:	697b      	ldr	r3, [r7, #20]
 8013086:	f003 0303 	and.w	r3, r3, #3
 801308a:	2b00      	cmp	r3, #0
 801308c:	d006      	beq.n	801309c <mem_malloc+0x198>
 801308e:	4b18      	ldr	r3, [pc, #96]	@ (80130f0 <mem_malloc+0x1ec>)
 8013090:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8013094:	491c      	ldr	r1, [pc, #112]	@ (8013108 <mem_malloc+0x204>)
 8013096:	4818      	ldr	r0, [pc, #96]	@ (80130f8 <mem_malloc+0x1f4>)
 8013098:	f00b f878 	bl	801e18c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 801309c:	697b      	ldr	r3, [r7, #20]
 801309e:	f003 0303 	and.w	r3, r3, #3
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	d006      	beq.n	80130b4 <mem_malloc+0x1b0>
 80130a6:	4b12      	ldr	r3, [pc, #72]	@ (80130f0 <mem_malloc+0x1ec>)
 80130a8:	f240 32bd 	movw	r2, #957	@ 0x3bd
 80130ac:	4917      	ldr	r1, [pc, #92]	@ (801310c <mem_malloc+0x208>)
 80130ae:	4812      	ldr	r0, [pc, #72]	@ (80130f8 <mem_malloc+0x1f4>)
 80130b0:	f00b f86c 	bl	801e18c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80130b4:	697b      	ldr	r3, [r7, #20]
 80130b6:	3308      	adds	r3, #8
 80130b8:	e011      	b.n	80130de <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 80130ba:	8bfb      	ldrh	r3, [r7, #30]
 80130bc:	4618      	mov	r0, r3
 80130be:	f7ff fc33 	bl	8012928 <ptr_to_mem>
 80130c2:	4603      	mov	r3, r0
 80130c4:	881b      	ldrh	r3, [r3, #0]
 80130c6:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80130c8:	8bfa      	ldrh	r2, [r7, #30]
 80130ca:	8bbb      	ldrh	r3, [r7, #28]
 80130cc:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 80130d0:	429a      	cmp	r2, r3
 80130d2:	f4ff af41 	bcc.w	8012f58 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 80130d6:	4804      	ldr	r0, [pc, #16]	@ (80130e8 <mem_malloc+0x1e4>)
 80130d8:	f00a f965 	bl	801d3a6 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80130dc:	2300      	movs	r3, #0
}
 80130de:	4618      	mov	r0, r3
 80130e0:	3720      	adds	r7, #32
 80130e2:	46bd      	mov	sp, r7
 80130e4:	bd80      	pop	{r7, pc}
 80130e6:	bf00      	nop
 80130e8:	200099e0 	.word	0x200099e0
 80130ec:	200099e4 	.word	0x200099e4
 80130f0:	08021274 	.word	0x08021274
 80130f4:	08021438 	.word	0x08021438
 80130f8:	080212bc 	.word	0x080212bc
 80130fc:	200099dc 	.word	0x200099dc
 8013100:	0802144c 	.word	0x0802144c
 8013104:	08021468 	.word	0x08021468
 8013108:	08021498 	.word	0x08021498
 801310c:	080214c8 	.word	0x080214c8

08013110 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8013110:	b480      	push	{r7}
 8013112:	b085      	sub	sp, #20
 8013114:	af00      	add	r7, sp, #0
 8013116:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	689b      	ldr	r3, [r3, #8]
 801311c:	2200      	movs	r2, #0
 801311e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	685b      	ldr	r3, [r3, #4]
 8013124:	3303      	adds	r3, #3
 8013126:	f023 0303 	bic.w	r3, r3, #3
 801312a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 801312c:	2300      	movs	r3, #0
 801312e:	60fb      	str	r3, [r7, #12]
 8013130:	e011      	b.n	8013156 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	689b      	ldr	r3, [r3, #8]
 8013136:	681a      	ldr	r2, [r3, #0]
 8013138:	68bb      	ldr	r3, [r7, #8]
 801313a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	689b      	ldr	r3, [r3, #8]
 8013140:	68ba      	ldr	r2, [r7, #8]
 8013142:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	881b      	ldrh	r3, [r3, #0]
 8013148:	461a      	mov	r2, r3
 801314a:	68bb      	ldr	r3, [r7, #8]
 801314c:	4413      	add	r3, r2
 801314e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8013150:	68fb      	ldr	r3, [r7, #12]
 8013152:	3301      	adds	r3, #1
 8013154:	60fb      	str	r3, [r7, #12]
 8013156:	687b      	ldr	r3, [r7, #4]
 8013158:	885b      	ldrh	r3, [r3, #2]
 801315a:	461a      	mov	r2, r3
 801315c:	68fb      	ldr	r3, [r7, #12]
 801315e:	4293      	cmp	r3, r2
 8013160:	dbe7      	blt.n	8013132 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8013162:	bf00      	nop
 8013164:	bf00      	nop
 8013166:	3714      	adds	r7, #20
 8013168:	46bd      	mov	sp, r7
 801316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801316e:	4770      	bx	lr

08013170 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8013170:	b580      	push	{r7, lr}
 8013172:	b082      	sub	sp, #8
 8013174:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8013176:	2300      	movs	r3, #0
 8013178:	80fb      	strh	r3, [r7, #6]
 801317a:	e009      	b.n	8013190 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 801317c:	88fb      	ldrh	r3, [r7, #6]
 801317e:	4a08      	ldr	r2, [pc, #32]	@ (80131a0 <memp_init+0x30>)
 8013180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013184:	4618      	mov	r0, r3
 8013186:	f7ff ffc3 	bl	8013110 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801318a:	88fb      	ldrh	r3, [r7, #6]
 801318c:	3301      	adds	r3, #1
 801318e:	80fb      	strh	r3, [r7, #6]
 8013190:	88fb      	ldrh	r3, [r7, #6]
 8013192:	2b0c      	cmp	r3, #12
 8013194:	d9f2      	bls.n	801317c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8013196:	bf00      	nop
 8013198:	bf00      	nop
 801319a:	3708      	adds	r7, #8
 801319c:	46bd      	mov	sp, r7
 801319e:	bd80      	pop	{r7, pc}
 80131a0:	08023d2c 	.word	0x08023d2c

080131a4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80131a4:	b580      	push	{r7, lr}
 80131a6:	b084      	sub	sp, #16
 80131a8:	af00      	add	r7, sp, #0
 80131aa:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 80131ac:	f00a f92e 	bl	801d40c <sys_arch_protect>
 80131b0:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	689b      	ldr	r3, [r3, #8]
 80131b6:	681b      	ldr	r3, [r3, #0]
 80131b8:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80131ba:	68bb      	ldr	r3, [r7, #8]
 80131bc:	2b00      	cmp	r3, #0
 80131be:	d015      	beq.n	80131ec <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	689b      	ldr	r3, [r3, #8]
 80131c4:	68ba      	ldr	r2, [r7, #8]
 80131c6:	6812      	ldr	r2, [r2, #0]
 80131c8:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80131ca:	68bb      	ldr	r3, [r7, #8]
 80131cc:	f003 0303 	and.w	r3, r3, #3
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d006      	beq.n	80131e2 <do_memp_malloc_pool+0x3e>
 80131d4:	4b09      	ldr	r3, [pc, #36]	@ (80131fc <do_memp_malloc_pool+0x58>)
 80131d6:	f44f 728c 	mov.w	r2, #280	@ 0x118
 80131da:	4909      	ldr	r1, [pc, #36]	@ (8013200 <do_memp_malloc_pool+0x5c>)
 80131dc:	4809      	ldr	r0, [pc, #36]	@ (8013204 <do_memp_malloc_pool+0x60>)
 80131de:	f00a ffd5 	bl	801e18c <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80131e2:	68f8      	ldr	r0, [r7, #12]
 80131e4:	f00a f920 	bl	801d428 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80131e8:	68bb      	ldr	r3, [r7, #8]
 80131ea:	e003      	b.n	80131f4 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80131ec:	68f8      	ldr	r0, [r7, #12]
 80131ee:	f00a f91b 	bl	801d428 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80131f2:	2300      	movs	r3, #0
}
 80131f4:	4618      	mov	r0, r3
 80131f6:	3710      	adds	r7, #16
 80131f8:	46bd      	mov	sp, r7
 80131fa:	bd80      	pop	{r7, pc}
 80131fc:	080214ec 	.word	0x080214ec
 8013200:	0802151c 	.word	0x0802151c
 8013204:	08021540 	.word	0x08021540

08013208 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8013208:	b580      	push	{r7, lr}
 801320a:	b082      	sub	sp, #8
 801320c:	af00      	add	r7, sp, #0
 801320e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	2b00      	cmp	r3, #0
 8013214:	d106      	bne.n	8013224 <memp_malloc_pool+0x1c>
 8013216:	4b0a      	ldr	r3, [pc, #40]	@ (8013240 <memp_malloc_pool+0x38>)
 8013218:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 801321c:	4909      	ldr	r1, [pc, #36]	@ (8013244 <memp_malloc_pool+0x3c>)
 801321e:	480a      	ldr	r0, [pc, #40]	@ (8013248 <memp_malloc_pool+0x40>)
 8013220:	f00a ffb4 	bl	801e18c <iprintf>
  if (desc == NULL) {
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	2b00      	cmp	r3, #0
 8013228:	d101      	bne.n	801322e <memp_malloc_pool+0x26>
    return NULL;
 801322a:	2300      	movs	r3, #0
 801322c:	e003      	b.n	8013236 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 801322e:	6878      	ldr	r0, [r7, #4]
 8013230:	f7ff ffb8 	bl	80131a4 <do_memp_malloc_pool>
 8013234:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8013236:	4618      	mov	r0, r3
 8013238:	3708      	adds	r7, #8
 801323a:	46bd      	mov	sp, r7
 801323c:	bd80      	pop	{r7, pc}
 801323e:	bf00      	nop
 8013240:	080214ec 	.word	0x080214ec
 8013244:	08021568 	.word	0x08021568
 8013248:	08021540 	.word	0x08021540

0801324c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 801324c:	b580      	push	{r7, lr}
 801324e:	b084      	sub	sp, #16
 8013250:	af00      	add	r7, sp, #0
 8013252:	4603      	mov	r3, r0
 8013254:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8013256:	79fb      	ldrb	r3, [r7, #7]
 8013258:	2b0c      	cmp	r3, #12
 801325a:	d908      	bls.n	801326e <memp_malloc+0x22>
 801325c:	4b0a      	ldr	r3, [pc, #40]	@ (8013288 <memp_malloc+0x3c>)
 801325e:	f240 1257 	movw	r2, #343	@ 0x157
 8013262:	490a      	ldr	r1, [pc, #40]	@ (801328c <memp_malloc+0x40>)
 8013264:	480a      	ldr	r0, [pc, #40]	@ (8013290 <memp_malloc+0x44>)
 8013266:	f00a ff91 	bl	801e18c <iprintf>
 801326a:	2300      	movs	r3, #0
 801326c:	e008      	b.n	8013280 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 801326e:	79fb      	ldrb	r3, [r7, #7]
 8013270:	4a08      	ldr	r2, [pc, #32]	@ (8013294 <memp_malloc+0x48>)
 8013272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013276:	4618      	mov	r0, r3
 8013278:	f7ff ff94 	bl	80131a4 <do_memp_malloc_pool>
 801327c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 801327e:	68fb      	ldr	r3, [r7, #12]
}
 8013280:	4618      	mov	r0, r3
 8013282:	3710      	adds	r7, #16
 8013284:	46bd      	mov	sp, r7
 8013286:	bd80      	pop	{r7, pc}
 8013288:	080214ec 	.word	0x080214ec
 801328c:	0802157c 	.word	0x0802157c
 8013290:	08021540 	.word	0x08021540
 8013294:	08023d2c 	.word	0x08023d2c

08013298 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8013298:	b580      	push	{r7, lr}
 801329a:	b084      	sub	sp, #16
 801329c:	af00      	add	r7, sp, #0
 801329e:	6078      	str	r0, [r7, #4]
 80132a0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80132a2:	683b      	ldr	r3, [r7, #0]
 80132a4:	f003 0303 	and.w	r3, r3, #3
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	d006      	beq.n	80132ba <do_memp_free_pool+0x22>
 80132ac:	4b0d      	ldr	r3, [pc, #52]	@ (80132e4 <do_memp_free_pool+0x4c>)
 80132ae:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 80132b2:	490d      	ldr	r1, [pc, #52]	@ (80132e8 <do_memp_free_pool+0x50>)
 80132b4:	480d      	ldr	r0, [pc, #52]	@ (80132ec <do_memp_free_pool+0x54>)
 80132b6:	f00a ff69 	bl	801e18c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80132ba:	683b      	ldr	r3, [r7, #0]
 80132bc:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 80132be:	f00a f8a5 	bl	801d40c <sys_arch_protect>
 80132c2:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	689b      	ldr	r3, [r3, #8]
 80132c8:	681a      	ldr	r2, [r3, #0]
 80132ca:	68fb      	ldr	r3, [r7, #12]
 80132cc:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	689b      	ldr	r3, [r3, #8]
 80132d2:	68fa      	ldr	r2, [r7, #12]
 80132d4:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 80132d6:	68b8      	ldr	r0, [r7, #8]
 80132d8:	f00a f8a6 	bl	801d428 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 80132dc:	bf00      	nop
 80132de:	3710      	adds	r7, #16
 80132e0:	46bd      	mov	sp, r7
 80132e2:	bd80      	pop	{r7, pc}
 80132e4:	080214ec 	.word	0x080214ec
 80132e8:	0802159c 	.word	0x0802159c
 80132ec:	08021540 	.word	0x08021540

080132f0 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80132f0:	b580      	push	{r7, lr}
 80132f2:	b082      	sub	sp, #8
 80132f4:	af00      	add	r7, sp, #0
 80132f6:	6078      	str	r0, [r7, #4]
 80132f8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	d106      	bne.n	801330e <memp_free_pool+0x1e>
 8013300:	4b0a      	ldr	r3, [pc, #40]	@ (801332c <memp_free_pool+0x3c>)
 8013302:	f240 1295 	movw	r2, #405	@ 0x195
 8013306:	490a      	ldr	r1, [pc, #40]	@ (8013330 <memp_free_pool+0x40>)
 8013308:	480a      	ldr	r0, [pc, #40]	@ (8013334 <memp_free_pool+0x44>)
 801330a:	f00a ff3f 	bl	801e18c <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	2b00      	cmp	r3, #0
 8013312:	d007      	beq.n	8013324 <memp_free_pool+0x34>
 8013314:	683b      	ldr	r3, [r7, #0]
 8013316:	2b00      	cmp	r3, #0
 8013318:	d004      	beq.n	8013324 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 801331a:	6839      	ldr	r1, [r7, #0]
 801331c:	6878      	ldr	r0, [r7, #4]
 801331e:	f7ff ffbb 	bl	8013298 <do_memp_free_pool>
 8013322:	e000      	b.n	8013326 <memp_free_pool+0x36>
    return;
 8013324:	bf00      	nop
}
 8013326:	3708      	adds	r7, #8
 8013328:	46bd      	mov	sp, r7
 801332a:	bd80      	pop	{r7, pc}
 801332c:	080214ec 	.word	0x080214ec
 8013330:	08021568 	.word	0x08021568
 8013334:	08021540 	.word	0x08021540

08013338 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8013338:	b580      	push	{r7, lr}
 801333a:	b082      	sub	sp, #8
 801333c:	af00      	add	r7, sp, #0
 801333e:	4603      	mov	r3, r0
 8013340:	6039      	str	r1, [r7, #0]
 8013342:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8013344:	79fb      	ldrb	r3, [r7, #7]
 8013346:	2b0c      	cmp	r3, #12
 8013348:	d907      	bls.n	801335a <memp_free+0x22>
 801334a:	4b0c      	ldr	r3, [pc, #48]	@ (801337c <memp_free+0x44>)
 801334c:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8013350:	490b      	ldr	r1, [pc, #44]	@ (8013380 <memp_free+0x48>)
 8013352:	480c      	ldr	r0, [pc, #48]	@ (8013384 <memp_free+0x4c>)
 8013354:	f00a ff1a 	bl	801e18c <iprintf>
 8013358:	e00c      	b.n	8013374 <memp_free+0x3c>

  if (mem == NULL) {
 801335a:	683b      	ldr	r3, [r7, #0]
 801335c:	2b00      	cmp	r3, #0
 801335e:	d008      	beq.n	8013372 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8013360:	79fb      	ldrb	r3, [r7, #7]
 8013362:	4a09      	ldr	r2, [pc, #36]	@ (8013388 <memp_free+0x50>)
 8013364:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013368:	6839      	ldr	r1, [r7, #0]
 801336a:	4618      	mov	r0, r3
 801336c:	f7ff ff94 	bl	8013298 <do_memp_free_pool>
 8013370:	e000      	b.n	8013374 <memp_free+0x3c>
    return;
 8013372:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8013374:	3708      	adds	r7, #8
 8013376:	46bd      	mov	sp, r7
 8013378:	bd80      	pop	{r7, pc}
 801337a:	bf00      	nop
 801337c:	080214ec 	.word	0x080214ec
 8013380:	080215bc 	.word	0x080215bc
 8013384:	08021540 	.word	0x08021540
 8013388:	08023d2c 	.word	0x08023d2c

0801338c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 801338c:	b480      	push	{r7}
 801338e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8013390:	bf00      	nop
 8013392:	46bd      	mov	sp, r7
 8013394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013398:	4770      	bx	lr
	...

0801339c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 801339c:	b580      	push	{r7, lr}
 801339e:	b086      	sub	sp, #24
 80133a0:	af00      	add	r7, sp, #0
 80133a2:	60f8      	str	r0, [r7, #12]
 80133a4:	60b9      	str	r1, [r7, #8]
 80133a6:	607a      	str	r2, [r7, #4]
 80133a8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80133aa:	68fb      	ldr	r3, [r7, #12]
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d108      	bne.n	80133c2 <netif_add+0x26>
 80133b0:	4b57      	ldr	r3, [pc, #348]	@ (8013510 <netif_add+0x174>)
 80133b2:	f240 1227 	movw	r2, #295	@ 0x127
 80133b6:	4957      	ldr	r1, [pc, #348]	@ (8013514 <netif_add+0x178>)
 80133b8:	4857      	ldr	r0, [pc, #348]	@ (8013518 <netif_add+0x17c>)
 80133ba:	f00a fee7 	bl	801e18c <iprintf>
 80133be:	2300      	movs	r3, #0
 80133c0:	e0a2      	b.n	8013508 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80133c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	d108      	bne.n	80133da <netif_add+0x3e>
 80133c8:	4b51      	ldr	r3, [pc, #324]	@ (8013510 <netif_add+0x174>)
 80133ca:	f44f 7294 	mov.w	r2, #296	@ 0x128
 80133ce:	4953      	ldr	r1, [pc, #332]	@ (801351c <netif_add+0x180>)
 80133d0:	4851      	ldr	r0, [pc, #324]	@ (8013518 <netif_add+0x17c>)
 80133d2:	f00a fedb 	bl	801e18c <iprintf>
 80133d6:	2300      	movs	r3, #0
 80133d8:	e096      	b.n	8013508 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80133da:	68bb      	ldr	r3, [r7, #8]
 80133dc:	2b00      	cmp	r3, #0
 80133de:	d101      	bne.n	80133e4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80133e0:	4b4f      	ldr	r3, [pc, #316]	@ (8013520 <netif_add+0x184>)
 80133e2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	2b00      	cmp	r3, #0
 80133e8:	d101      	bne.n	80133ee <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80133ea:	4b4d      	ldr	r3, [pc, #308]	@ (8013520 <netif_add+0x184>)
 80133ec:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80133ee:	683b      	ldr	r3, [r7, #0]
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	d101      	bne.n	80133f8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80133f4:	4b4a      	ldr	r3, [pc, #296]	@ (8013520 <netif_add+0x184>)
 80133f6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80133f8:	68fb      	ldr	r3, [r7, #12]
 80133fa:	2200      	movs	r2, #0
 80133fc:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80133fe:	68fb      	ldr	r3, [r7, #12]
 8013400:	2200      	movs	r2, #0
 8013402:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8013404:	68fb      	ldr	r3, [r7, #12]
 8013406:	2200      	movs	r2, #0
 8013408:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 801340a:	68fb      	ldr	r3, [r7, #12]
 801340c:	4a45      	ldr	r2, [pc, #276]	@ (8013524 <netif_add+0x188>)
 801340e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8013410:	68fb      	ldr	r3, [r7, #12]
 8013412:	2200      	movs	r2, #0
 8013414:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 8013416:	68fb      	ldr	r3, [r7, #12]
 8013418:	2200      	movs	r2, #0
 801341a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 801341e:	68fb      	ldr	r3, [r7, #12]
 8013420:	2200      	movs	r2, #0
 8013422:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8013424:	68fb      	ldr	r3, [r7, #12]
 8013426:	6a3a      	ldr	r2, [r7, #32]
 8013428:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 801342a:	4b3f      	ldr	r3, [pc, #252]	@ (8013528 <netif_add+0x18c>)
 801342c:	781a      	ldrb	r2, [r3, #0]
 801342e:	68fb      	ldr	r3, [r7, #12]
 8013430:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 8013434:	68fb      	ldr	r3, [r7, #12]
 8013436:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013438:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 801343a:	683b      	ldr	r3, [r7, #0]
 801343c:	687a      	ldr	r2, [r7, #4]
 801343e:	68b9      	ldr	r1, [r7, #8]
 8013440:	68f8      	ldr	r0, [r7, #12]
 8013442:	f000 f913 	bl	801366c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8013446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013448:	68f8      	ldr	r0, [r7, #12]
 801344a:	4798      	blx	r3
 801344c:	4603      	mov	r3, r0
 801344e:	2b00      	cmp	r3, #0
 8013450:	d001      	beq.n	8013456 <netif_add+0xba>
    return NULL;
 8013452:	2300      	movs	r3, #0
 8013454:	e058      	b.n	8013508 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8013456:	68fb      	ldr	r3, [r7, #12]
 8013458:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801345c:	2bff      	cmp	r3, #255	@ 0xff
 801345e:	d103      	bne.n	8013468 <netif_add+0xcc>
        netif->num = 0;
 8013460:	68fb      	ldr	r3, [r7, #12]
 8013462:	2200      	movs	r2, #0
 8013464:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 8013468:	2300      	movs	r3, #0
 801346a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801346c:	4b2f      	ldr	r3, [pc, #188]	@ (801352c <netif_add+0x190>)
 801346e:	681b      	ldr	r3, [r3, #0]
 8013470:	617b      	str	r3, [r7, #20]
 8013472:	e02b      	b.n	80134cc <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8013474:	697a      	ldr	r2, [r7, #20]
 8013476:	68fb      	ldr	r3, [r7, #12]
 8013478:	429a      	cmp	r2, r3
 801347a:	d106      	bne.n	801348a <netif_add+0xee>
 801347c:	4b24      	ldr	r3, [pc, #144]	@ (8013510 <netif_add+0x174>)
 801347e:	f240 128b 	movw	r2, #395	@ 0x18b
 8013482:	492b      	ldr	r1, [pc, #172]	@ (8013530 <netif_add+0x194>)
 8013484:	4824      	ldr	r0, [pc, #144]	@ (8013518 <netif_add+0x17c>)
 8013486:	f00a fe81 	bl	801e18c <iprintf>
        num_netifs++;
 801348a:	693b      	ldr	r3, [r7, #16]
 801348c:	3301      	adds	r3, #1
 801348e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8013490:	693b      	ldr	r3, [r7, #16]
 8013492:	2bff      	cmp	r3, #255	@ 0xff
 8013494:	dd06      	ble.n	80134a4 <netif_add+0x108>
 8013496:	4b1e      	ldr	r3, [pc, #120]	@ (8013510 <netif_add+0x174>)
 8013498:	f240 128d 	movw	r2, #397	@ 0x18d
 801349c:	4925      	ldr	r1, [pc, #148]	@ (8013534 <netif_add+0x198>)
 801349e:	481e      	ldr	r0, [pc, #120]	@ (8013518 <netif_add+0x17c>)
 80134a0:	f00a fe74 	bl	801e18c <iprintf>
        if (netif2->num == netif->num) {
 80134a4:	697b      	ldr	r3, [r7, #20]
 80134a6:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 80134aa:	68fb      	ldr	r3, [r7, #12]
 80134ac:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80134b0:	429a      	cmp	r2, r3
 80134b2:	d108      	bne.n	80134c6 <netif_add+0x12a>
          netif->num++;
 80134b4:	68fb      	ldr	r3, [r7, #12]
 80134b6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80134ba:	3301      	adds	r3, #1
 80134bc:	b2da      	uxtb	r2, r3
 80134be:	68fb      	ldr	r3, [r7, #12]
 80134c0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 80134c4:	e005      	b.n	80134d2 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80134c6:	697b      	ldr	r3, [r7, #20]
 80134c8:	681b      	ldr	r3, [r3, #0]
 80134ca:	617b      	str	r3, [r7, #20]
 80134cc:	697b      	ldr	r3, [r7, #20]
 80134ce:	2b00      	cmp	r3, #0
 80134d0:	d1d0      	bne.n	8013474 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 80134d2:	697b      	ldr	r3, [r7, #20]
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d1be      	bne.n	8013456 <netif_add+0xba>
  }
  if (netif->num == 254) {
 80134d8:	68fb      	ldr	r3, [r7, #12]
 80134da:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80134de:	2bfe      	cmp	r3, #254	@ 0xfe
 80134e0:	d103      	bne.n	80134ea <netif_add+0x14e>
    netif_num = 0;
 80134e2:	4b11      	ldr	r3, [pc, #68]	@ (8013528 <netif_add+0x18c>)
 80134e4:	2200      	movs	r2, #0
 80134e6:	701a      	strb	r2, [r3, #0]
 80134e8:	e006      	b.n	80134f8 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80134ea:	68fb      	ldr	r3, [r7, #12]
 80134ec:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80134f0:	3301      	adds	r3, #1
 80134f2:	b2da      	uxtb	r2, r3
 80134f4:	4b0c      	ldr	r3, [pc, #48]	@ (8013528 <netif_add+0x18c>)
 80134f6:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80134f8:	4b0c      	ldr	r3, [pc, #48]	@ (801352c <netif_add+0x190>)
 80134fa:	681a      	ldr	r2, [r3, #0]
 80134fc:	68fb      	ldr	r3, [r7, #12]
 80134fe:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8013500:	4a0a      	ldr	r2, [pc, #40]	@ (801352c <netif_add+0x190>)
 8013502:	68fb      	ldr	r3, [r7, #12]
 8013504:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8013506:	68fb      	ldr	r3, [r7, #12]
}
 8013508:	4618      	mov	r0, r3
 801350a:	3718      	adds	r7, #24
 801350c:	46bd      	mov	sp, r7
 801350e:	bd80      	pop	{r7, pc}
 8013510:	080215d8 	.word	0x080215d8
 8013514:	0802166c 	.word	0x0802166c
 8013518:	08021628 	.word	0x08021628
 801351c:	08021688 	.word	0x08021688
 8013520:	08023da0 	.word	0x08023da0
 8013524:	080138e3 	.word	0x080138e3
 8013528:	2000cabc 	.word	0x2000cabc
 801352c:	2000cab4 	.word	0x2000cab4
 8013530:	080216ac 	.word	0x080216ac
 8013534:	080216c0 	.word	0x080216c0

08013538 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013538:	b580      	push	{r7, lr}
 801353a:	b082      	sub	sp, #8
 801353c:	af00      	add	r7, sp, #0
 801353e:	6078      	str	r0, [r7, #4]
 8013540:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8013542:	6839      	ldr	r1, [r7, #0]
 8013544:	6878      	ldr	r0, [r7, #4]
 8013546:	f002 fdab 	bl	80160a0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 801354a:	6839      	ldr	r1, [r7, #0]
 801354c:	6878      	ldr	r0, [r7, #4]
 801354e:	f007 fb11 	bl	801ab74 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8013552:	bf00      	nop
 8013554:	3708      	adds	r7, #8
 8013556:	46bd      	mov	sp, r7
 8013558:	bd80      	pop	{r7, pc}
	...

0801355c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 801355c:	b580      	push	{r7, lr}
 801355e:	b086      	sub	sp, #24
 8013560:	af00      	add	r7, sp, #0
 8013562:	60f8      	str	r0, [r7, #12]
 8013564:	60b9      	str	r1, [r7, #8]
 8013566:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8013568:	68bb      	ldr	r3, [r7, #8]
 801356a:	2b00      	cmp	r3, #0
 801356c:	d106      	bne.n	801357c <netif_do_set_ipaddr+0x20>
 801356e:	4b1d      	ldr	r3, [pc, #116]	@ (80135e4 <netif_do_set_ipaddr+0x88>)
 8013570:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8013574:	491c      	ldr	r1, [pc, #112]	@ (80135e8 <netif_do_set_ipaddr+0x8c>)
 8013576:	481d      	ldr	r0, [pc, #116]	@ (80135ec <netif_do_set_ipaddr+0x90>)
 8013578:	f00a fe08 	bl	801e18c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	2b00      	cmp	r3, #0
 8013580:	d106      	bne.n	8013590 <netif_do_set_ipaddr+0x34>
 8013582:	4b18      	ldr	r3, [pc, #96]	@ (80135e4 <netif_do_set_ipaddr+0x88>)
 8013584:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8013588:	4917      	ldr	r1, [pc, #92]	@ (80135e8 <netif_do_set_ipaddr+0x8c>)
 801358a:	4818      	ldr	r0, [pc, #96]	@ (80135ec <netif_do_set_ipaddr+0x90>)
 801358c:	f00a fdfe 	bl	801e18c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8013590:	68bb      	ldr	r3, [r7, #8]
 8013592:	681a      	ldr	r2, [r3, #0]
 8013594:	68fb      	ldr	r3, [r7, #12]
 8013596:	3304      	adds	r3, #4
 8013598:	681b      	ldr	r3, [r3, #0]
 801359a:	429a      	cmp	r2, r3
 801359c:	d01c      	beq.n	80135d8 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 801359e:	68bb      	ldr	r3, [r7, #8]
 80135a0:	681b      	ldr	r3, [r3, #0]
 80135a2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80135a4:	68fb      	ldr	r3, [r7, #12]
 80135a6:	3304      	adds	r3, #4
 80135a8:	681a      	ldr	r2, [r3, #0]
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80135ae:	f107 0314 	add.w	r3, r7, #20
 80135b2:	4619      	mov	r1, r3
 80135b4:	6878      	ldr	r0, [r7, #4]
 80135b6:	f7ff ffbf 	bl	8013538 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80135ba:	68bb      	ldr	r3, [r7, #8]
 80135bc:	2b00      	cmp	r3, #0
 80135be:	d002      	beq.n	80135c6 <netif_do_set_ipaddr+0x6a>
 80135c0:	68bb      	ldr	r3, [r7, #8]
 80135c2:	681b      	ldr	r3, [r3, #0]
 80135c4:	e000      	b.n	80135c8 <netif_do_set_ipaddr+0x6c>
 80135c6:	2300      	movs	r3, #0
 80135c8:	68fa      	ldr	r2, [r7, #12]
 80135ca:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80135cc:	2101      	movs	r1, #1
 80135ce:	68f8      	ldr	r0, [r7, #12]
 80135d0:	f000 f8d2 	bl	8013778 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80135d4:	2301      	movs	r3, #1
 80135d6:	e000      	b.n	80135da <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80135d8:	2300      	movs	r3, #0
}
 80135da:	4618      	mov	r0, r3
 80135dc:	3718      	adds	r7, #24
 80135de:	46bd      	mov	sp, r7
 80135e0:	bd80      	pop	{r7, pc}
 80135e2:	bf00      	nop
 80135e4:	080215d8 	.word	0x080215d8
 80135e8:	080216f0 	.word	0x080216f0
 80135ec:	08021628 	.word	0x08021628

080135f0 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80135f0:	b480      	push	{r7}
 80135f2:	b085      	sub	sp, #20
 80135f4:	af00      	add	r7, sp, #0
 80135f6:	60f8      	str	r0, [r7, #12]
 80135f8:	60b9      	str	r1, [r7, #8]
 80135fa:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80135fc:	68bb      	ldr	r3, [r7, #8]
 80135fe:	681a      	ldr	r2, [r3, #0]
 8013600:	68fb      	ldr	r3, [r7, #12]
 8013602:	3308      	adds	r3, #8
 8013604:	681b      	ldr	r3, [r3, #0]
 8013606:	429a      	cmp	r2, r3
 8013608:	d00a      	beq.n	8013620 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 801360a:	68bb      	ldr	r3, [r7, #8]
 801360c:	2b00      	cmp	r3, #0
 801360e:	d002      	beq.n	8013616 <netif_do_set_netmask+0x26>
 8013610:	68bb      	ldr	r3, [r7, #8]
 8013612:	681b      	ldr	r3, [r3, #0]
 8013614:	e000      	b.n	8013618 <netif_do_set_netmask+0x28>
 8013616:	2300      	movs	r3, #0
 8013618:	68fa      	ldr	r2, [r7, #12]
 801361a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 801361c:	2301      	movs	r3, #1
 801361e:	e000      	b.n	8013622 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8013620:	2300      	movs	r3, #0
}
 8013622:	4618      	mov	r0, r3
 8013624:	3714      	adds	r7, #20
 8013626:	46bd      	mov	sp, r7
 8013628:	f85d 7b04 	ldr.w	r7, [sp], #4
 801362c:	4770      	bx	lr

0801362e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 801362e:	b480      	push	{r7}
 8013630:	b085      	sub	sp, #20
 8013632:	af00      	add	r7, sp, #0
 8013634:	60f8      	str	r0, [r7, #12]
 8013636:	60b9      	str	r1, [r7, #8]
 8013638:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 801363a:	68bb      	ldr	r3, [r7, #8]
 801363c:	681a      	ldr	r2, [r3, #0]
 801363e:	68fb      	ldr	r3, [r7, #12]
 8013640:	330c      	adds	r3, #12
 8013642:	681b      	ldr	r3, [r3, #0]
 8013644:	429a      	cmp	r2, r3
 8013646:	d00a      	beq.n	801365e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8013648:	68bb      	ldr	r3, [r7, #8]
 801364a:	2b00      	cmp	r3, #0
 801364c:	d002      	beq.n	8013654 <netif_do_set_gw+0x26>
 801364e:	68bb      	ldr	r3, [r7, #8]
 8013650:	681b      	ldr	r3, [r3, #0]
 8013652:	e000      	b.n	8013656 <netif_do_set_gw+0x28>
 8013654:	2300      	movs	r3, #0
 8013656:	68fa      	ldr	r2, [r7, #12]
 8013658:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 801365a:	2301      	movs	r3, #1
 801365c:	e000      	b.n	8013660 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 801365e:	2300      	movs	r3, #0
}
 8013660:	4618      	mov	r0, r3
 8013662:	3714      	adds	r7, #20
 8013664:	46bd      	mov	sp, r7
 8013666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801366a:	4770      	bx	lr

0801366c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 801366c:	b580      	push	{r7, lr}
 801366e:	b088      	sub	sp, #32
 8013670:	af00      	add	r7, sp, #0
 8013672:	60f8      	str	r0, [r7, #12]
 8013674:	60b9      	str	r1, [r7, #8]
 8013676:	607a      	str	r2, [r7, #4]
 8013678:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 801367a:	2300      	movs	r3, #0
 801367c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 801367e:	2300      	movs	r3, #0
 8013680:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8013682:	68bb      	ldr	r3, [r7, #8]
 8013684:	2b00      	cmp	r3, #0
 8013686:	d101      	bne.n	801368c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8013688:	4b1c      	ldr	r3, [pc, #112]	@ (80136fc <netif_set_addr+0x90>)
 801368a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	2b00      	cmp	r3, #0
 8013690:	d101      	bne.n	8013696 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8013692:	4b1a      	ldr	r3, [pc, #104]	@ (80136fc <netif_set_addr+0x90>)
 8013694:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8013696:	683b      	ldr	r3, [r7, #0]
 8013698:	2b00      	cmp	r3, #0
 801369a:	d101      	bne.n	80136a0 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 801369c:	4b17      	ldr	r3, [pc, #92]	@ (80136fc <netif_set_addr+0x90>)
 801369e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80136a0:	68bb      	ldr	r3, [r7, #8]
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	d003      	beq.n	80136ae <netif_set_addr+0x42>
 80136a6:	68bb      	ldr	r3, [r7, #8]
 80136a8:	681b      	ldr	r3, [r3, #0]
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	d101      	bne.n	80136b2 <netif_set_addr+0x46>
 80136ae:	2301      	movs	r3, #1
 80136b0:	e000      	b.n	80136b4 <netif_set_addr+0x48>
 80136b2:	2300      	movs	r3, #0
 80136b4:	617b      	str	r3, [r7, #20]
  if (remove) {
 80136b6:	697b      	ldr	r3, [r7, #20]
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	d006      	beq.n	80136ca <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80136bc:	f107 0310 	add.w	r3, r7, #16
 80136c0:	461a      	mov	r2, r3
 80136c2:	68b9      	ldr	r1, [r7, #8]
 80136c4:	68f8      	ldr	r0, [r7, #12]
 80136c6:	f7ff ff49 	bl	801355c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80136ca:	69fa      	ldr	r2, [r7, #28]
 80136cc:	6879      	ldr	r1, [r7, #4]
 80136ce:	68f8      	ldr	r0, [r7, #12]
 80136d0:	f7ff ff8e 	bl	80135f0 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80136d4:	69ba      	ldr	r2, [r7, #24]
 80136d6:	6839      	ldr	r1, [r7, #0]
 80136d8:	68f8      	ldr	r0, [r7, #12]
 80136da:	f7ff ffa8 	bl	801362e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80136de:	697b      	ldr	r3, [r7, #20]
 80136e0:	2b00      	cmp	r3, #0
 80136e2:	d106      	bne.n	80136f2 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80136e4:	f107 0310 	add.w	r3, r7, #16
 80136e8:	461a      	mov	r2, r3
 80136ea:	68b9      	ldr	r1, [r7, #8]
 80136ec:	68f8      	ldr	r0, [r7, #12]
 80136ee:	f7ff ff35 	bl	801355c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80136f2:	bf00      	nop
 80136f4:	3720      	adds	r7, #32
 80136f6:	46bd      	mov	sp, r7
 80136f8:	bd80      	pop	{r7, pc}
 80136fa:	bf00      	nop
 80136fc:	08023da0 	.word	0x08023da0

08013700 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8013700:	b480      	push	{r7}
 8013702:	b083      	sub	sp, #12
 8013704:	af00      	add	r7, sp, #0
 8013706:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8013708:	4a04      	ldr	r2, [pc, #16]	@ (801371c <netif_set_default+0x1c>)
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 801370e:	bf00      	nop
 8013710:	370c      	adds	r7, #12
 8013712:	46bd      	mov	sp, r7
 8013714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013718:	4770      	bx	lr
 801371a:	bf00      	nop
 801371c:	2000cab8 	.word	0x2000cab8

08013720 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8013720:	b580      	push	{r7, lr}
 8013722:	b082      	sub	sp, #8
 8013724:	af00      	add	r7, sp, #0
 8013726:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	2b00      	cmp	r3, #0
 801372c:	d107      	bne.n	801373e <netif_set_up+0x1e>
 801372e:	4b0f      	ldr	r3, [pc, #60]	@ (801376c <netif_set_up+0x4c>)
 8013730:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8013734:	490e      	ldr	r1, [pc, #56]	@ (8013770 <netif_set_up+0x50>)
 8013736:	480f      	ldr	r0, [pc, #60]	@ (8013774 <netif_set_up+0x54>)
 8013738:	f00a fd28 	bl	801e18c <iprintf>
 801373c:	e013      	b.n	8013766 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013744:	f003 0301 	and.w	r3, r3, #1
 8013748:	2b00      	cmp	r3, #0
 801374a:	d10c      	bne.n	8013766 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013752:	f043 0301 	orr.w	r3, r3, #1
 8013756:	b2da      	uxtb	r2, r3
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801375e:	2103      	movs	r1, #3
 8013760:	6878      	ldr	r0, [r7, #4]
 8013762:	f000 f809 	bl	8013778 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8013766:	3708      	adds	r7, #8
 8013768:	46bd      	mov	sp, r7
 801376a:	bd80      	pop	{r7, pc}
 801376c:	080215d8 	.word	0x080215d8
 8013770:	08021760 	.word	0x08021760
 8013774:	08021628 	.word	0x08021628

08013778 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8013778:	b580      	push	{r7, lr}
 801377a:	b082      	sub	sp, #8
 801377c:	af00      	add	r7, sp, #0
 801377e:	6078      	str	r0, [r7, #4]
 8013780:	460b      	mov	r3, r1
 8013782:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	2b00      	cmp	r3, #0
 8013788:	d106      	bne.n	8013798 <netif_issue_reports+0x20>
 801378a:	4b18      	ldr	r3, [pc, #96]	@ (80137ec <netif_issue_reports+0x74>)
 801378c:	f240 326d 	movw	r2, #877	@ 0x36d
 8013790:	4917      	ldr	r1, [pc, #92]	@ (80137f0 <netif_issue_reports+0x78>)
 8013792:	4818      	ldr	r0, [pc, #96]	@ (80137f4 <netif_issue_reports+0x7c>)
 8013794:	f00a fcfa 	bl	801e18c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801379e:	f003 0304 	and.w	r3, r3, #4
 80137a2:	2b00      	cmp	r3, #0
 80137a4:	d01e      	beq.n	80137e4 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80137ac:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	d017      	beq.n	80137e4 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80137b4:	78fb      	ldrb	r3, [r7, #3]
 80137b6:	f003 0301 	and.w	r3, r3, #1
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	d013      	beq.n	80137e6 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	3304      	adds	r3, #4
 80137c2:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d00e      	beq.n	80137e6 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80137ce:	f003 0308 	and.w	r3, r3, #8
 80137d2:	2b00      	cmp	r3, #0
 80137d4:	d007      	beq.n	80137e6 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	3304      	adds	r3, #4
 80137da:	4619      	mov	r1, r3
 80137dc:	6878      	ldr	r0, [r7, #4]
 80137de:	f008 f903 	bl	801b9e8 <etharp_request>
 80137e2:	e000      	b.n	80137e6 <netif_issue_reports+0x6e>
    return;
 80137e4:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80137e6:	3708      	adds	r7, #8
 80137e8:	46bd      	mov	sp, r7
 80137ea:	bd80      	pop	{r7, pc}
 80137ec:	080215d8 	.word	0x080215d8
 80137f0:	0802177c 	.word	0x0802177c
 80137f4:	08021628 	.word	0x08021628

080137f8 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80137f8:	b580      	push	{r7, lr}
 80137fa:	b082      	sub	sp, #8
 80137fc:	af00      	add	r7, sp, #0
 80137fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	2b00      	cmp	r3, #0
 8013804:	d107      	bne.n	8013816 <netif_set_link_up+0x1e>
 8013806:	4b13      	ldr	r3, [pc, #76]	@ (8013854 <netif_set_link_up+0x5c>)
 8013808:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 801380c:	4912      	ldr	r1, [pc, #72]	@ (8013858 <netif_set_link_up+0x60>)
 801380e:	4813      	ldr	r0, [pc, #76]	@ (801385c <netif_set_link_up+0x64>)
 8013810:	f00a fcbc 	bl	801e18c <iprintf>
 8013814:	e01b      	b.n	801384e <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801381c:	f003 0304 	and.w	r3, r3, #4
 8013820:	2b00      	cmp	r3, #0
 8013822:	d114      	bne.n	801384e <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801382a:	f043 0304 	orr.w	r3, r3, #4
 801382e:	b2da      	uxtb	r2, r3
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8013836:	2103      	movs	r1, #3
 8013838:	6878      	ldr	r0, [r7, #4]
 801383a:	f7ff ff9d 	bl	8013778 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	69db      	ldr	r3, [r3, #28]
 8013842:	2b00      	cmp	r3, #0
 8013844:	d003      	beq.n	801384e <netif_set_link_up+0x56>
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	69db      	ldr	r3, [r3, #28]
 801384a:	6878      	ldr	r0, [r7, #4]
 801384c:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801384e:	3708      	adds	r7, #8
 8013850:	46bd      	mov	sp, r7
 8013852:	bd80      	pop	{r7, pc}
 8013854:	080215d8 	.word	0x080215d8
 8013858:	080217c0 	.word	0x080217c0
 801385c:	08021628 	.word	0x08021628

08013860 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8013860:	b580      	push	{r7, lr}
 8013862:	b082      	sub	sp, #8
 8013864:	af00      	add	r7, sp, #0
 8013866:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	2b00      	cmp	r3, #0
 801386c:	d107      	bne.n	801387e <netif_set_link_down+0x1e>
 801386e:	4b11      	ldr	r3, [pc, #68]	@ (80138b4 <netif_set_link_down+0x54>)
 8013870:	f240 4206 	movw	r2, #1030	@ 0x406
 8013874:	4910      	ldr	r1, [pc, #64]	@ (80138b8 <netif_set_link_down+0x58>)
 8013876:	4811      	ldr	r0, [pc, #68]	@ (80138bc <netif_set_link_down+0x5c>)
 8013878:	f00a fc88 	bl	801e18c <iprintf>
 801387c:	e017      	b.n	80138ae <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013884:	f003 0304 	and.w	r3, r3, #4
 8013888:	2b00      	cmp	r3, #0
 801388a:	d010      	beq.n	80138ae <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013892:	f023 0304 	bic.w	r3, r3, #4
 8013896:	b2da      	uxtb	r2, r3
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	69db      	ldr	r3, [r3, #28]
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	d003      	beq.n	80138ae <netif_set_link_down+0x4e>
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	69db      	ldr	r3, [r3, #28]
 80138aa:	6878      	ldr	r0, [r7, #4]
 80138ac:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80138ae:	3708      	adds	r7, #8
 80138b0:	46bd      	mov	sp, r7
 80138b2:	bd80      	pop	{r7, pc}
 80138b4:	080215d8 	.word	0x080215d8
 80138b8:	080217e4 	.word	0x080217e4
 80138bc:	08021628 	.word	0x08021628

080138c0 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80138c0:	b480      	push	{r7}
 80138c2:	b083      	sub	sp, #12
 80138c4:	af00      	add	r7, sp, #0
 80138c6:	6078      	str	r0, [r7, #4]
 80138c8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	2b00      	cmp	r3, #0
 80138ce:	d002      	beq.n	80138d6 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	683a      	ldr	r2, [r7, #0]
 80138d4:	61da      	str	r2, [r3, #28]
  }
}
 80138d6:	bf00      	nop
 80138d8:	370c      	adds	r7, #12
 80138da:	46bd      	mov	sp, r7
 80138dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138e0:	4770      	bx	lr

080138e2 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80138e2:	b480      	push	{r7}
 80138e4:	b085      	sub	sp, #20
 80138e6:	af00      	add	r7, sp, #0
 80138e8:	60f8      	str	r0, [r7, #12]
 80138ea:	60b9      	str	r1, [r7, #8]
 80138ec:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80138ee:	f06f 030b 	mvn.w	r3, #11
}
 80138f2:	4618      	mov	r0, r3
 80138f4:	3714      	adds	r7, #20
 80138f6:	46bd      	mov	sp, r7
 80138f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138fc:	4770      	bx	lr
	...

08013900 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8013900:	b480      	push	{r7}
 8013902:	b085      	sub	sp, #20
 8013904:	af00      	add	r7, sp, #0
 8013906:	4603      	mov	r3, r0
 8013908:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 801390a:	79fb      	ldrb	r3, [r7, #7]
 801390c:	2b00      	cmp	r3, #0
 801390e:	d013      	beq.n	8013938 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8013910:	4b0d      	ldr	r3, [pc, #52]	@ (8013948 <netif_get_by_index+0x48>)
 8013912:	681b      	ldr	r3, [r3, #0]
 8013914:	60fb      	str	r3, [r7, #12]
 8013916:	e00c      	b.n	8013932 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8013918:	68fb      	ldr	r3, [r7, #12]
 801391a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801391e:	3301      	adds	r3, #1
 8013920:	b2db      	uxtb	r3, r3
 8013922:	79fa      	ldrb	r2, [r7, #7]
 8013924:	429a      	cmp	r2, r3
 8013926:	d101      	bne.n	801392c <netif_get_by_index+0x2c>
        return netif; /* found! */
 8013928:	68fb      	ldr	r3, [r7, #12]
 801392a:	e006      	b.n	801393a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 801392c:	68fb      	ldr	r3, [r7, #12]
 801392e:	681b      	ldr	r3, [r3, #0]
 8013930:	60fb      	str	r3, [r7, #12]
 8013932:	68fb      	ldr	r3, [r7, #12]
 8013934:	2b00      	cmp	r3, #0
 8013936:	d1ef      	bne.n	8013918 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8013938:	2300      	movs	r3, #0
}
 801393a:	4618      	mov	r0, r3
 801393c:	3714      	adds	r7, #20
 801393e:	46bd      	mov	sp, r7
 8013940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013944:	4770      	bx	lr
 8013946:	bf00      	nop
 8013948:	2000cab4 	.word	0x2000cab4

0801394c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 801394c:	b580      	push	{r7, lr}
 801394e:	b082      	sub	sp, #8
 8013950:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8013952:	f009 fd5b 	bl	801d40c <sys_arch_protect>
 8013956:	6038      	str	r0, [r7, #0]
 8013958:	4b0d      	ldr	r3, [pc, #52]	@ (8013990 <pbuf_free_ooseq+0x44>)
 801395a:	2200      	movs	r2, #0
 801395c:	701a      	strb	r2, [r3, #0]
 801395e:	6838      	ldr	r0, [r7, #0]
 8013960:	f009 fd62 	bl	801d428 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8013964:	4b0b      	ldr	r3, [pc, #44]	@ (8013994 <pbuf_free_ooseq+0x48>)
 8013966:	681b      	ldr	r3, [r3, #0]
 8013968:	607b      	str	r3, [r7, #4]
 801396a:	e00a      	b.n	8013982 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013970:	2b00      	cmp	r3, #0
 8013972:	d003      	beq.n	801397c <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8013974:	6878      	ldr	r0, [r7, #4]
 8013976:	f002 fbd1 	bl	801611c <tcp_free_ooseq>
      return;
 801397a:	e005      	b.n	8013988 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	68db      	ldr	r3, [r3, #12]
 8013980:	607b      	str	r3, [r7, #4]
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	2b00      	cmp	r3, #0
 8013986:	d1f1      	bne.n	801396c <pbuf_free_ooseq+0x20>
    }
  }
}
 8013988:	3708      	adds	r7, #8
 801398a:	46bd      	mov	sp, r7
 801398c:	bd80      	pop	{r7, pc}
 801398e:	bf00      	nop
 8013990:	2000cabd 	.word	0x2000cabd
 8013994:	2000cacc 	.word	0x2000cacc

08013998 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8013998:	b580      	push	{r7, lr}
 801399a:	b082      	sub	sp, #8
 801399c:	af00      	add	r7, sp, #0
 801399e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 80139a0:	f7ff ffd4 	bl	801394c <pbuf_free_ooseq>
}
 80139a4:	bf00      	nop
 80139a6:	3708      	adds	r7, #8
 80139a8:	46bd      	mov	sp, r7
 80139aa:	bd80      	pop	{r7, pc}

080139ac <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80139ac:	b580      	push	{r7, lr}
 80139ae:	b082      	sub	sp, #8
 80139b0:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 80139b2:	f009 fd2b 	bl	801d40c <sys_arch_protect>
 80139b6:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 80139b8:	4b0f      	ldr	r3, [pc, #60]	@ (80139f8 <pbuf_pool_is_empty+0x4c>)
 80139ba:	781b      	ldrb	r3, [r3, #0]
 80139bc:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 80139be:	4b0e      	ldr	r3, [pc, #56]	@ (80139f8 <pbuf_pool_is_empty+0x4c>)
 80139c0:	2201      	movs	r2, #1
 80139c2:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 80139c4:	6878      	ldr	r0, [r7, #4]
 80139c6:	f009 fd2f 	bl	801d428 <sys_arch_unprotect>

  if (!queued) {
 80139ca:	78fb      	ldrb	r3, [r7, #3]
 80139cc:	2b00      	cmp	r3, #0
 80139ce:	d10f      	bne.n	80139f0 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 80139d0:	2100      	movs	r1, #0
 80139d2:	480a      	ldr	r0, [pc, #40]	@ (80139fc <pbuf_pool_is_empty+0x50>)
 80139d4:	f7fe fed8 	bl	8012788 <tcpip_try_callback>
 80139d8:	4603      	mov	r3, r0
 80139da:	2b00      	cmp	r3, #0
 80139dc:	d008      	beq.n	80139f0 <pbuf_pool_is_empty+0x44>
 80139de:	f009 fd15 	bl	801d40c <sys_arch_protect>
 80139e2:	6078      	str	r0, [r7, #4]
 80139e4:	4b04      	ldr	r3, [pc, #16]	@ (80139f8 <pbuf_pool_is_empty+0x4c>)
 80139e6:	2200      	movs	r2, #0
 80139e8:	701a      	strb	r2, [r3, #0]
 80139ea:	6878      	ldr	r0, [r7, #4]
 80139ec:	f009 fd1c 	bl	801d428 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80139f0:	bf00      	nop
 80139f2:	3708      	adds	r7, #8
 80139f4:	46bd      	mov	sp, r7
 80139f6:	bd80      	pop	{r7, pc}
 80139f8:	2000cabd 	.word	0x2000cabd
 80139fc:	08013999 	.word	0x08013999

08013a00 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8013a00:	b480      	push	{r7}
 8013a02:	b085      	sub	sp, #20
 8013a04:	af00      	add	r7, sp, #0
 8013a06:	60f8      	str	r0, [r7, #12]
 8013a08:	60b9      	str	r1, [r7, #8]
 8013a0a:	4611      	mov	r1, r2
 8013a0c:	461a      	mov	r2, r3
 8013a0e:	460b      	mov	r3, r1
 8013a10:	80fb      	strh	r3, [r7, #6]
 8013a12:	4613      	mov	r3, r2
 8013a14:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8013a16:	68fb      	ldr	r3, [r7, #12]
 8013a18:	2200      	movs	r2, #0
 8013a1a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8013a1c:	68fb      	ldr	r3, [r7, #12]
 8013a1e:	68ba      	ldr	r2, [r7, #8]
 8013a20:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8013a22:	68fb      	ldr	r3, [r7, #12]
 8013a24:	88fa      	ldrh	r2, [r7, #6]
 8013a26:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8013a28:	68fb      	ldr	r3, [r7, #12]
 8013a2a:	88ba      	ldrh	r2, [r7, #4]
 8013a2c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8013a2e:	8b3b      	ldrh	r3, [r7, #24]
 8013a30:	b2da      	uxtb	r2, r3
 8013a32:	68fb      	ldr	r3, [r7, #12]
 8013a34:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8013a36:	68fb      	ldr	r3, [r7, #12]
 8013a38:	7f3a      	ldrb	r2, [r7, #28]
 8013a3a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8013a3c:	68fb      	ldr	r3, [r7, #12]
 8013a3e:	2201      	movs	r2, #1
 8013a40:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8013a42:	68fb      	ldr	r3, [r7, #12]
 8013a44:	2200      	movs	r2, #0
 8013a46:	73da      	strb	r2, [r3, #15]
}
 8013a48:	bf00      	nop
 8013a4a:	3714      	adds	r7, #20
 8013a4c:	46bd      	mov	sp, r7
 8013a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a52:	4770      	bx	lr

08013a54 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8013a54:	b580      	push	{r7, lr}
 8013a56:	b08c      	sub	sp, #48	@ 0x30
 8013a58:	af02      	add	r7, sp, #8
 8013a5a:	4603      	mov	r3, r0
 8013a5c:	71fb      	strb	r3, [r7, #7]
 8013a5e:	460b      	mov	r3, r1
 8013a60:	80bb      	strh	r3, [r7, #4]
 8013a62:	4613      	mov	r3, r2
 8013a64:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8013a66:	79fb      	ldrb	r3, [r7, #7]
 8013a68:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8013a6a:	887b      	ldrh	r3, [r7, #2]
 8013a6c:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8013a70:	d07f      	beq.n	8013b72 <pbuf_alloc+0x11e>
 8013a72:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8013a76:	f300 80c8 	bgt.w	8013c0a <pbuf_alloc+0x1b6>
 8013a7a:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8013a7e:	d010      	beq.n	8013aa2 <pbuf_alloc+0x4e>
 8013a80:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8013a84:	f300 80c1 	bgt.w	8013c0a <pbuf_alloc+0x1b6>
 8013a88:	2b01      	cmp	r3, #1
 8013a8a:	d002      	beq.n	8013a92 <pbuf_alloc+0x3e>
 8013a8c:	2b41      	cmp	r3, #65	@ 0x41
 8013a8e:	f040 80bc 	bne.w	8013c0a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8013a92:	887a      	ldrh	r2, [r7, #2]
 8013a94:	88bb      	ldrh	r3, [r7, #4]
 8013a96:	4619      	mov	r1, r3
 8013a98:	2000      	movs	r0, #0
 8013a9a:	f000 f8d1 	bl	8013c40 <pbuf_alloc_reference>
 8013a9e:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8013aa0:	e0bd      	b.n	8013c1e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8013aa2:	2300      	movs	r3, #0
 8013aa4:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8013aa6:	2300      	movs	r3, #0
 8013aa8:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8013aaa:	88bb      	ldrh	r3, [r7, #4]
 8013aac:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8013aae:	200c      	movs	r0, #12
 8013ab0:	f7ff fbcc 	bl	801324c <memp_malloc>
 8013ab4:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8013ab6:	693b      	ldr	r3, [r7, #16]
 8013ab8:	2b00      	cmp	r3, #0
 8013aba:	d109      	bne.n	8013ad0 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8013abc:	f7ff ff76 	bl	80139ac <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8013ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ac2:	2b00      	cmp	r3, #0
 8013ac4:	d002      	beq.n	8013acc <pbuf_alloc+0x78>
            pbuf_free(p);
 8013ac6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013ac8:	f000 faa8 	bl	801401c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8013acc:	2300      	movs	r3, #0
 8013ace:	e0a7      	b.n	8013c20 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8013ad0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013ad2:	3303      	adds	r3, #3
 8013ad4:	b29b      	uxth	r3, r3
 8013ad6:	f023 0303 	bic.w	r3, r3, #3
 8013ada:	b29b      	uxth	r3, r3
 8013adc:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8013ae0:	b29b      	uxth	r3, r3
 8013ae2:	8b7a      	ldrh	r2, [r7, #26]
 8013ae4:	4293      	cmp	r3, r2
 8013ae6:	bf28      	it	cs
 8013ae8:	4613      	movcs	r3, r2
 8013aea:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8013aec:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013aee:	3310      	adds	r3, #16
 8013af0:	693a      	ldr	r2, [r7, #16]
 8013af2:	4413      	add	r3, r2
 8013af4:	3303      	adds	r3, #3
 8013af6:	f023 0303 	bic.w	r3, r3, #3
 8013afa:	4618      	mov	r0, r3
 8013afc:	89f9      	ldrh	r1, [r7, #14]
 8013afe:	8b7a      	ldrh	r2, [r7, #26]
 8013b00:	2300      	movs	r3, #0
 8013b02:	9301      	str	r3, [sp, #4]
 8013b04:	887b      	ldrh	r3, [r7, #2]
 8013b06:	9300      	str	r3, [sp, #0]
 8013b08:	460b      	mov	r3, r1
 8013b0a:	4601      	mov	r1, r0
 8013b0c:	6938      	ldr	r0, [r7, #16]
 8013b0e:	f7ff ff77 	bl	8013a00 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8013b12:	693b      	ldr	r3, [r7, #16]
 8013b14:	685b      	ldr	r3, [r3, #4]
 8013b16:	f003 0303 	and.w	r3, r3, #3
 8013b1a:	2b00      	cmp	r3, #0
 8013b1c:	d006      	beq.n	8013b2c <pbuf_alloc+0xd8>
 8013b1e:	4b42      	ldr	r3, [pc, #264]	@ (8013c28 <pbuf_alloc+0x1d4>)
 8013b20:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8013b24:	4941      	ldr	r1, [pc, #260]	@ (8013c2c <pbuf_alloc+0x1d8>)
 8013b26:	4842      	ldr	r0, [pc, #264]	@ (8013c30 <pbuf_alloc+0x1dc>)
 8013b28:	f00a fb30 	bl	801e18c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8013b2c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013b2e:	3303      	adds	r3, #3
 8013b30:	f023 0303 	bic.w	r3, r3, #3
 8013b34:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8013b38:	d106      	bne.n	8013b48 <pbuf_alloc+0xf4>
 8013b3a:	4b3b      	ldr	r3, [pc, #236]	@ (8013c28 <pbuf_alloc+0x1d4>)
 8013b3c:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8013b40:	493c      	ldr	r1, [pc, #240]	@ (8013c34 <pbuf_alloc+0x1e0>)
 8013b42:	483b      	ldr	r0, [pc, #236]	@ (8013c30 <pbuf_alloc+0x1dc>)
 8013b44:	f00a fb22 	bl	801e18c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8013b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b4a:	2b00      	cmp	r3, #0
 8013b4c:	d102      	bne.n	8013b54 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8013b4e:	693b      	ldr	r3, [r7, #16]
 8013b50:	627b      	str	r3, [r7, #36]	@ 0x24
 8013b52:	e002      	b.n	8013b5a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8013b54:	69fb      	ldr	r3, [r7, #28]
 8013b56:	693a      	ldr	r2, [r7, #16]
 8013b58:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8013b5a:	693b      	ldr	r3, [r7, #16]
 8013b5c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8013b5e:	8b7a      	ldrh	r2, [r7, #26]
 8013b60:	89fb      	ldrh	r3, [r7, #14]
 8013b62:	1ad3      	subs	r3, r2, r3
 8013b64:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8013b66:	2300      	movs	r3, #0
 8013b68:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 8013b6a:	8b7b      	ldrh	r3, [r7, #26]
 8013b6c:	2b00      	cmp	r3, #0
 8013b6e:	d19e      	bne.n	8013aae <pbuf_alloc+0x5a>
      break;
 8013b70:	e055      	b.n	8013c1e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8013b72:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013b74:	3303      	adds	r3, #3
 8013b76:	b29b      	uxth	r3, r3
 8013b78:	f023 0303 	bic.w	r3, r3, #3
 8013b7c:	b29a      	uxth	r2, r3
 8013b7e:	88bb      	ldrh	r3, [r7, #4]
 8013b80:	3303      	adds	r3, #3
 8013b82:	b29b      	uxth	r3, r3
 8013b84:	f023 0303 	bic.w	r3, r3, #3
 8013b88:	b29b      	uxth	r3, r3
 8013b8a:	4413      	add	r3, r2
 8013b8c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8013b8e:	8b3b      	ldrh	r3, [r7, #24]
 8013b90:	3310      	adds	r3, #16
 8013b92:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8013b94:	8b3a      	ldrh	r2, [r7, #24]
 8013b96:	88bb      	ldrh	r3, [r7, #4]
 8013b98:	3303      	adds	r3, #3
 8013b9a:	f023 0303 	bic.w	r3, r3, #3
 8013b9e:	429a      	cmp	r2, r3
 8013ba0:	d306      	bcc.n	8013bb0 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8013ba2:	8afa      	ldrh	r2, [r7, #22]
 8013ba4:	88bb      	ldrh	r3, [r7, #4]
 8013ba6:	3303      	adds	r3, #3
 8013ba8:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8013bac:	429a      	cmp	r2, r3
 8013bae:	d201      	bcs.n	8013bb4 <pbuf_alloc+0x160>
        return NULL;
 8013bb0:	2300      	movs	r3, #0
 8013bb2:	e035      	b.n	8013c20 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8013bb4:	8afb      	ldrh	r3, [r7, #22]
 8013bb6:	4618      	mov	r0, r3
 8013bb8:	f7ff f9a4 	bl	8012f04 <mem_malloc>
 8013bbc:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8013bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013bc0:	2b00      	cmp	r3, #0
 8013bc2:	d101      	bne.n	8013bc8 <pbuf_alloc+0x174>
        return NULL;
 8013bc4:	2300      	movs	r3, #0
 8013bc6:	e02b      	b.n	8013c20 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8013bc8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013bca:	3310      	adds	r3, #16
 8013bcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013bce:	4413      	add	r3, r2
 8013bd0:	3303      	adds	r3, #3
 8013bd2:	f023 0303 	bic.w	r3, r3, #3
 8013bd6:	4618      	mov	r0, r3
 8013bd8:	88b9      	ldrh	r1, [r7, #4]
 8013bda:	88ba      	ldrh	r2, [r7, #4]
 8013bdc:	2300      	movs	r3, #0
 8013bde:	9301      	str	r3, [sp, #4]
 8013be0:	887b      	ldrh	r3, [r7, #2]
 8013be2:	9300      	str	r3, [sp, #0]
 8013be4:	460b      	mov	r3, r1
 8013be6:	4601      	mov	r1, r0
 8013be8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013bea:	f7ff ff09 	bl	8013a00 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8013bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013bf0:	685b      	ldr	r3, [r3, #4]
 8013bf2:	f003 0303 	and.w	r3, r3, #3
 8013bf6:	2b00      	cmp	r3, #0
 8013bf8:	d010      	beq.n	8013c1c <pbuf_alloc+0x1c8>
 8013bfa:	4b0b      	ldr	r3, [pc, #44]	@ (8013c28 <pbuf_alloc+0x1d4>)
 8013bfc:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8013c00:	490d      	ldr	r1, [pc, #52]	@ (8013c38 <pbuf_alloc+0x1e4>)
 8013c02:	480b      	ldr	r0, [pc, #44]	@ (8013c30 <pbuf_alloc+0x1dc>)
 8013c04:	f00a fac2 	bl	801e18c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8013c08:	e008      	b.n	8013c1c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8013c0a:	4b07      	ldr	r3, [pc, #28]	@ (8013c28 <pbuf_alloc+0x1d4>)
 8013c0c:	f240 1227 	movw	r2, #295	@ 0x127
 8013c10:	490a      	ldr	r1, [pc, #40]	@ (8013c3c <pbuf_alloc+0x1e8>)
 8013c12:	4807      	ldr	r0, [pc, #28]	@ (8013c30 <pbuf_alloc+0x1dc>)
 8013c14:	f00a faba 	bl	801e18c <iprintf>
      return NULL;
 8013c18:	2300      	movs	r3, #0
 8013c1a:	e001      	b.n	8013c20 <pbuf_alloc+0x1cc>
      break;
 8013c1c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8013c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8013c20:	4618      	mov	r0, r3
 8013c22:	3728      	adds	r7, #40	@ 0x28
 8013c24:	46bd      	mov	sp, r7
 8013c26:	bd80      	pop	{r7, pc}
 8013c28:	08021808 	.word	0x08021808
 8013c2c:	08021838 	.word	0x08021838
 8013c30:	08021868 	.word	0x08021868
 8013c34:	08021890 	.word	0x08021890
 8013c38:	080218c4 	.word	0x080218c4
 8013c3c:	080218f0 	.word	0x080218f0

08013c40 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8013c40:	b580      	push	{r7, lr}
 8013c42:	b086      	sub	sp, #24
 8013c44:	af02      	add	r7, sp, #8
 8013c46:	6078      	str	r0, [r7, #4]
 8013c48:	460b      	mov	r3, r1
 8013c4a:	807b      	strh	r3, [r7, #2]
 8013c4c:	4613      	mov	r3, r2
 8013c4e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8013c50:	883b      	ldrh	r3, [r7, #0]
 8013c52:	2b41      	cmp	r3, #65	@ 0x41
 8013c54:	d009      	beq.n	8013c6a <pbuf_alloc_reference+0x2a>
 8013c56:	883b      	ldrh	r3, [r7, #0]
 8013c58:	2b01      	cmp	r3, #1
 8013c5a:	d006      	beq.n	8013c6a <pbuf_alloc_reference+0x2a>
 8013c5c:	4b0f      	ldr	r3, [pc, #60]	@ (8013c9c <pbuf_alloc_reference+0x5c>)
 8013c5e:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8013c62:	490f      	ldr	r1, [pc, #60]	@ (8013ca0 <pbuf_alloc_reference+0x60>)
 8013c64:	480f      	ldr	r0, [pc, #60]	@ (8013ca4 <pbuf_alloc_reference+0x64>)
 8013c66:	f00a fa91 	bl	801e18c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8013c6a:	200b      	movs	r0, #11
 8013c6c:	f7ff faee 	bl	801324c <memp_malloc>
 8013c70:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8013c72:	68fb      	ldr	r3, [r7, #12]
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	d101      	bne.n	8013c7c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8013c78:	2300      	movs	r3, #0
 8013c7a:	e00b      	b.n	8013c94 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8013c7c:	8879      	ldrh	r1, [r7, #2]
 8013c7e:	887a      	ldrh	r2, [r7, #2]
 8013c80:	2300      	movs	r3, #0
 8013c82:	9301      	str	r3, [sp, #4]
 8013c84:	883b      	ldrh	r3, [r7, #0]
 8013c86:	9300      	str	r3, [sp, #0]
 8013c88:	460b      	mov	r3, r1
 8013c8a:	6879      	ldr	r1, [r7, #4]
 8013c8c:	68f8      	ldr	r0, [r7, #12]
 8013c8e:	f7ff feb7 	bl	8013a00 <pbuf_init_alloced_pbuf>
  return p;
 8013c92:	68fb      	ldr	r3, [r7, #12]
}
 8013c94:	4618      	mov	r0, r3
 8013c96:	3710      	adds	r7, #16
 8013c98:	46bd      	mov	sp, r7
 8013c9a:	bd80      	pop	{r7, pc}
 8013c9c:	08021808 	.word	0x08021808
 8013ca0:	0802190c 	.word	0x0802190c
 8013ca4:	08021868 	.word	0x08021868

08013ca8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8013ca8:	b580      	push	{r7, lr}
 8013caa:	b088      	sub	sp, #32
 8013cac:	af02      	add	r7, sp, #8
 8013cae:	607b      	str	r3, [r7, #4]
 8013cb0:	4603      	mov	r3, r0
 8013cb2:	73fb      	strb	r3, [r7, #15]
 8013cb4:	460b      	mov	r3, r1
 8013cb6:	81bb      	strh	r3, [r7, #12]
 8013cb8:	4613      	mov	r3, r2
 8013cba:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8013cbc:	7bfb      	ldrb	r3, [r7, #15]
 8013cbe:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8013cc0:	8a7b      	ldrh	r3, [r7, #18]
 8013cc2:	3303      	adds	r3, #3
 8013cc4:	f023 0203 	bic.w	r2, r3, #3
 8013cc8:	89bb      	ldrh	r3, [r7, #12]
 8013cca:	441a      	add	r2, r3
 8013ccc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013cce:	429a      	cmp	r2, r3
 8013cd0:	d901      	bls.n	8013cd6 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8013cd2:	2300      	movs	r3, #0
 8013cd4:	e018      	b.n	8013d08 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8013cd6:	6a3b      	ldr	r3, [r7, #32]
 8013cd8:	2b00      	cmp	r3, #0
 8013cda:	d007      	beq.n	8013cec <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8013cdc:	8a7b      	ldrh	r3, [r7, #18]
 8013cde:	3303      	adds	r3, #3
 8013ce0:	f023 0303 	bic.w	r3, r3, #3
 8013ce4:	6a3a      	ldr	r2, [r7, #32]
 8013ce6:	4413      	add	r3, r2
 8013ce8:	617b      	str	r3, [r7, #20]
 8013cea:	e001      	b.n	8013cf0 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8013cec:	2300      	movs	r3, #0
 8013cee:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8013cf0:	6878      	ldr	r0, [r7, #4]
 8013cf2:	89b9      	ldrh	r1, [r7, #12]
 8013cf4:	89ba      	ldrh	r2, [r7, #12]
 8013cf6:	2302      	movs	r3, #2
 8013cf8:	9301      	str	r3, [sp, #4]
 8013cfa:	897b      	ldrh	r3, [r7, #10]
 8013cfc:	9300      	str	r3, [sp, #0]
 8013cfe:	460b      	mov	r3, r1
 8013d00:	6979      	ldr	r1, [r7, #20]
 8013d02:	f7ff fe7d 	bl	8013a00 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8013d06:	687b      	ldr	r3, [r7, #4]
}
 8013d08:	4618      	mov	r0, r3
 8013d0a:	3718      	adds	r7, #24
 8013d0c:	46bd      	mov	sp, r7
 8013d0e:	bd80      	pop	{r7, pc}

08013d10 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8013d10:	b580      	push	{r7, lr}
 8013d12:	b084      	sub	sp, #16
 8013d14:	af00      	add	r7, sp, #0
 8013d16:	6078      	str	r0, [r7, #4]
 8013d18:	460b      	mov	r3, r1
 8013d1a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	2b00      	cmp	r3, #0
 8013d20:	d106      	bne.n	8013d30 <pbuf_realloc+0x20>
 8013d22:	4b3a      	ldr	r3, [pc, #232]	@ (8013e0c <pbuf_realloc+0xfc>)
 8013d24:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8013d28:	4939      	ldr	r1, [pc, #228]	@ (8013e10 <pbuf_realloc+0x100>)
 8013d2a:	483a      	ldr	r0, [pc, #232]	@ (8013e14 <pbuf_realloc+0x104>)
 8013d2c:	f00a fa2e 	bl	801e18c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	891b      	ldrh	r3, [r3, #8]
 8013d34:	887a      	ldrh	r2, [r7, #2]
 8013d36:	429a      	cmp	r2, r3
 8013d38:	d263      	bcs.n	8013e02 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	891a      	ldrh	r2, [r3, #8]
 8013d3e:	887b      	ldrh	r3, [r7, #2]
 8013d40:	1ad3      	subs	r3, r2, r3
 8013d42:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8013d44:	887b      	ldrh	r3, [r7, #2]
 8013d46:	817b      	strh	r3, [r7, #10]
  q = p;
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8013d4c:	e018      	b.n	8013d80 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8013d4e:	68fb      	ldr	r3, [r7, #12]
 8013d50:	895b      	ldrh	r3, [r3, #10]
 8013d52:	897a      	ldrh	r2, [r7, #10]
 8013d54:	1ad3      	subs	r3, r2, r3
 8013d56:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8013d58:	68fb      	ldr	r3, [r7, #12]
 8013d5a:	891a      	ldrh	r2, [r3, #8]
 8013d5c:	893b      	ldrh	r3, [r7, #8]
 8013d5e:	1ad3      	subs	r3, r2, r3
 8013d60:	b29a      	uxth	r2, r3
 8013d62:	68fb      	ldr	r3, [r7, #12]
 8013d64:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8013d66:	68fb      	ldr	r3, [r7, #12]
 8013d68:	681b      	ldr	r3, [r3, #0]
 8013d6a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8013d6c:	68fb      	ldr	r3, [r7, #12]
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	d106      	bne.n	8013d80 <pbuf_realloc+0x70>
 8013d72:	4b26      	ldr	r3, [pc, #152]	@ (8013e0c <pbuf_realloc+0xfc>)
 8013d74:	f240 12af 	movw	r2, #431	@ 0x1af
 8013d78:	4927      	ldr	r1, [pc, #156]	@ (8013e18 <pbuf_realloc+0x108>)
 8013d7a:	4826      	ldr	r0, [pc, #152]	@ (8013e14 <pbuf_realloc+0x104>)
 8013d7c:	f00a fa06 	bl	801e18c <iprintf>
  while (rem_len > q->len) {
 8013d80:	68fb      	ldr	r3, [r7, #12]
 8013d82:	895b      	ldrh	r3, [r3, #10]
 8013d84:	897a      	ldrh	r2, [r7, #10]
 8013d86:	429a      	cmp	r2, r3
 8013d88:	d8e1      	bhi.n	8013d4e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8013d8a:	68fb      	ldr	r3, [r7, #12]
 8013d8c:	7b1b      	ldrb	r3, [r3, #12]
 8013d8e:	f003 030f 	and.w	r3, r3, #15
 8013d92:	2b00      	cmp	r3, #0
 8013d94:	d121      	bne.n	8013dda <pbuf_realloc+0xca>
 8013d96:	68fb      	ldr	r3, [r7, #12]
 8013d98:	895b      	ldrh	r3, [r3, #10]
 8013d9a:	897a      	ldrh	r2, [r7, #10]
 8013d9c:	429a      	cmp	r2, r3
 8013d9e:	d01c      	beq.n	8013dda <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8013da0:	68fb      	ldr	r3, [r7, #12]
 8013da2:	7b5b      	ldrb	r3, [r3, #13]
 8013da4:	f003 0302 	and.w	r3, r3, #2
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	d116      	bne.n	8013dda <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8013dac:	68fb      	ldr	r3, [r7, #12]
 8013dae:	685a      	ldr	r2, [r3, #4]
 8013db0:	68fb      	ldr	r3, [r7, #12]
 8013db2:	1ad3      	subs	r3, r2, r3
 8013db4:	b29a      	uxth	r2, r3
 8013db6:	897b      	ldrh	r3, [r7, #10]
 8013db8:	4413      	add	r3, r2
 8013dba:	b29b      	uxth	r3, r3
 8013dbc:	4619      	mov	r1, r3
 8013dbe:	68f8      	ldr	r0, [r7, #12]
 8013dc0:	f7fe ff96 	bl	8012cf0 <mem_trim>
 8013dc4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8013dc6:	68fb      	ldr	r3, [r7, #12]
 8013dc8:	2b00      	cmp	r3, #0
 8013dca:	d106      	bne.n	8013dda <pbuf_realloc+0xca>
 8013dcc:	4b0f      	ldr	r3, [pc, #60]	@ (8013e0c <pbuf_realloc+0xfc>)
 8013dce:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8013dd2:	4912      	ldr	r1, [pc, #72]	@ (8013e1c <pbuf_realloc+0x10c>)
 8013dd4:	480f      	ldr	r0, [pc, #60]	@ (8013e14 <pbuf_realloc+0x104>)
 8013dd6:	f00a f9d9 	bl	801e18c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8013dda:	68fb      	ldr	r3, [r7, #12]
 8013ddc:	897a      	ldrh	r2, [r7, #10]
 8013dde:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8013de0:	68fb      	ldr	r3, [r7, #12]
 8013de2:	895a      	ldrh	r2, [r3, #10]
 8013de4:	68fb      	ldr	r3, [r7, #12]
 8013de6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8013de8:	68fb      	ldr	r3, [r7, #12]
 8013dea:	681b      	ldr	r3, [r3, #0]
 8013dec:	2b00      	cmp	r3, #0
 8013dee:	d004      	beq.n	8013dfa <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8013df0:	68fb      	ldr	r3, [r7, #12]
 8013df2:	681b      	ldr	r3, [r3, #0]
 8013df4:	4618      	mov	r0, r3
 8013df6:	f000 f911 	bl	801401c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8013dfa:	68fb      	ldr	r3, [r7, #12]
 8013dfc:	2200      	movs	r2, #0
 8013dfe:	601a      	str	r2, [r3, #0]
 8013e00:	e000      	b.n	8013e04 <pbuf_realloc+0xf4>
    return;
 8013e02:	bf00      	nop

}
 8013e04:	3710      	adds	r7, #16
 8013e06:	46bd      	mov	sp, r7
 8013e08:	bd80      	pop	{r7, pc}
 8013e0a:	bf00      	nop
 8013e0c:	08021808 	.word	0x08021808
 8013e10:	08021920 	.word	0x08021920
 8013e14:	08021868 	.word	0x08021868
 8013e18:	08021938 	.word	0x08021938
 8013e1c:	08021950 	.word	0x08021950

08013e20 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8013e20:	b580      	push	{r7, lr}
 8013e22:	b086      	sub	sp, #24
 8013e24:	af00      	add	r7, sp, #0
 8013e26:	60f8      	str	r0, [r7, #12]
 8013e28:	60b9      	str	r1, [r7, #8]
 8013e2a:	4613      	mov	r3, r2
 8013e2c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8013e2e:	68fb      	ldr	r3, [r7, #12]
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	d106      	bne.n	8013e42 <pbuf_add_header_impl+0x22>
 8013e34:	4b2b      	ldr	r3, [pc, #172]	@ (8013ee4 <pbuf_add_header_impl+0xc4>)
 8013e36:	f240 12df 	movw	r2, #479	@ 0x1df
 8013e3a:	492b      	ldr	r1, [pc, #172]	@ (8013ee8 <pbuf_add_header_impl+0xc8>)
 8013e3c:	482b      	ldr	r0, [pc, #172]	@ (8013eec <pbuf_add_header_impl+0xcc>)
 8013e3e:	f00a f9a5 	bl	801e18c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8013e42:	68fb      	ldr	r3, [r7, #12]
 8013e44:	2b00      	cmp	r3, #0
 8013e46:	d003      	beq.n	8013e50 <pbuf_add_header_impl+0x30>
 8013e48:	68bb      	ldr	r3, [r7, #8]
 8013e4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013e4e:	d301      	bcc.n	8013e54 <pbuf_add_header_impl+0x34>
    return 1;
 8013e50:	2301      	movs	r3, #1
 8013e52:	e043      	b.n	8013edc <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8013e54:	68bb      	ldr	r3, [r7, #8]
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	d101      	bne.n	8013e5e <pbuf_add_header_impl+0x3e>
    return 0;
 8013e5a:	2300      	movs	r3, #0
 8013e5c:	e03e      	b.n	8013edc <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8013e5e:	68bb      	ldr	r3, [r7, #8]
 8013e60:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8013e62:	68fb      	ldr	r3, [r7, #12]
 8013e64:	891a      	ldrh	r2, [r3, #8]
 8013e66:	8a7b      	ldrh	r3, [r7, #18]
 8013e68:	4413      	add	r3, r2
 8013e6a:	b29b      	uxth	r3, r3
 8013e6c:	8a7a      	ldrh	r2, [r7, #18]
 8013e6e:	429a      	cmp	r2, r3
 8013e70:	d901      	bls.n	8013e76 <pbuf_add_header_impl+0x56>
    return 1;
 8013e72:	2301      	movs	r3, #1
 8013e74:	e032      	b.n	8013edc <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8013e76:	68fb      	ldr	r3, [r7, #12]
 8013e78:	7b1b      	ldrb	r3, [r3, #12]
 8013e7a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8013e7c:	8a3b      	ldrh	r3, [r7, #16]
 8013e7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013e82:	2b00      	cmp	r3, #0
 8013e84:	d00c      	beq.n	8013ea0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8013e86:	68fb      	ldr	r3, [r7, #12]
 8013e88:	685a      	ldr	r2, [r3, #4]
 8013e8a:	68bb      	ldr	r3, [r7, #8]
 8013e8c:	425b      	negs	r3, r3
 8013e8e:	4413      	add	r3, r2
 8013e90:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8013e92:	68fb      	ldr	r3, [r7, #12]
 8013e94:	3310      	adds	r3, #16
 8013e96:	697a      	ldr	r2, [r7, #20]
 8013e98:	429a      	cmp	r2, r3
 8013e9a:	d20d      	bcs.n	8013eb8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8013e9c:	2301      	movs	r3, #1
 8013e9e:	e01d      	b.n	8013edc <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8013ea0:	79fb      	ldrb	r3, [r7, #7]
 8013ea2:	2b00      	cmp	r3, #0
 8013ea4:	d006      	beq.n	8013eb4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8013ea6:	68fb      	ldr	r3, [r7, #12]
 8013ea8:	685a      	ldr	r2, [r3, #4]
 8013eaa:	68bb      	ldr	r3, [r7, #8]
 8013eac:	425b      	negs	r3, r3
 8013eae:	4413      	add	r3, r2
 8013eb0:	617b      	str	r3, [r7, #20]
 8013eb2:	e001      	b.n	8013eb8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8013eb4:	2301      	movs	r3, #1
 8013eb6:	e011      	b.n	8013edc <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8013eb8:	68fb      	ldr	r3, [r7, #12]
 8013eba:	697a      	ldr	r2, [r7, #20]
 8013ebc:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8013ebe:	68fb      	ldr	r3, [r7, #12]
 8013ec0:	895a      	ldrh	r2, [r3, #10]
 8013ec2:	8a7b      	ldrh	r3, [r7, #18]
 8013ec4:	4413      	add	r3, r2
 8013ec6:	b29a      	uxth	r2, r3
 8013ec8:	68fb      	ldr	r3, [r7, #12]
 8013eca:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8013ecc:	68fb      	ldr	r3, [r7, #12]
 8013ece:	891a      	ldrh	r2, [r3, #8]
 8013ed0:	8a7b      	ldrh	r3, [r7, #18]
 8013ed2:	4413      	add	r3, r2
 8013ed4:	b29a      	uxth	r2, r3
 8013ed6:	68fb      	ldr	r3, [r7, #12]
 8013ed8:	811a      	strh	r2, [r3, #8]


  return 0;
 8013eda:	2300      	movs	r3, #0
}
 8013edc:	4618      	mov	r0, r3
 8013ede:	3718      	adds	r7, #24
 8013ee0:	46bd      	mov	sp, r7
 8013ee2:	bd80      	pop	{r7, pc}
 8013ee4:	08021808 	.word	0x08021808
 8013ee8:	0802196c 	.word	0x0802196c
 8013eec:	08021868 	.word	0x08021868

08013ef0 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8013ef0:	b580      	push	{r7, lr}
 8013ef2:	b082      	sub	sp, #8
 8013ef4:	af00      	add	r7, sp, #0
 8013ef6:	6078      	str	r0, [r7, #4]
 8013ef8:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8013efa:	2200      	movs	r2, #0
 8013efc:	6839      	ldr	r1, [r7, #0]
 8013efe:	6878      	ldr	r0, [r7, #4]
 8013f00:	f7ff ff8e 	bl	8013e20 <pbuf_add_header_impl>
 8013f04:	4603      	mov	r3, r0
}
 8013f06:	4618      	mov	r0, r3
 8013f08:	3708      	adds	r7, #8
 8013f0a:	46bd      	mov	sp, r7
 8013f0c:	bd80      	pop	{r7, pc}
	...

08013f10 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8013f10:	b580      	push	{r7, lr}
 8013f12:	b084      	sub	sp, #16
 8013f14:	af00      	add	r7, sp, #0
 8013f16:	6078      	str	r0, [r7, #4]
 8013f18:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	d106      	bne.n	8013f2e <pbuf_remove_header+0x1e>
 8013f20:	4b20      	ldr	r3, [pc, #128]	@ (8013fa4 <pbuf_remove_header+0x94>)
 8013f22:	f240 224b 	movw	r2, #587	@ 0x24b
 8013f26:	4920      	ldr	r1, [pc, #128]	@ (8013fa8 <pbuf_remove_header+0x98>)
 8013f28:	4820      	ldr	r0, [pc, #128]	@ (8013fac <pbuf_remove_header+0x9c>)
 8013f2a:	f00a f92f 	bl	801e18c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	2b00      	cmp	r3, #0
 8013f32:	d003      	beq.n	8013f3c <pbuf_remove_header+0x2c>
 8013f34:	683b      	ldr	r3, [r7, #0]
 8013f36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013f3a:	d301      	bcc.n	8013f40 <pbuf_remove_header+0x30>
    return 1;
 8013f3c:	2301      	movs	r3, #1
 8013f3e:	e02c      	b.n	8013f9a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8013f40:	683b      	ldr	r3, [r7, #0]
 8013f42:	2b00      	cmp	r3, #0
 8013f44:	d101      	bne.n	8013f4a <pbuf_remove_header+0x3a>
    return 0;
 8013f46:	2300      	movs	r3, #0
 8013f48:	e027      	b.n	8013f9a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8013f4a:	683b      	ldr	r3, [r7, #0]
 8013f4c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	895b      	ldrh	r3, [r3, #10]
 8013f52:	89fa      	ldrh	r2, [r7, #14]
 8013f54:	429a      	cmp	r2, r3
 8013f56:	d908      	bls.n	8013f6a <pbuf_remove_header+0x5a>
 8013f58:	4b12      	ldr	r3, [pc, #72]	@ (8013fa4 <pbuf_remove_header+0x94>)
 8013f5a:	f240 2255 	movw	r2, #597	@ 0x255
 8013f5e:	4914      	ldr	r1, [pc, #80]	@ (8013fb0 <pbuf_remove_header+0xa0>)
 8013f60:	4812      	ldr	r0, [pc, #72]	@ (8013fac <pbuf_remove_header+0x9c>)
 8013f62:	f00a f913 	bl	801e18c <iprintf>
 8013f66:	2301      	movs	r3, #1
 8013f68:	e017      	b.n	8013f9a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	685b      	ldr	r3, [r3, #4]
 8013f6e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	685a      	ldr	r2, [r3, #4]
 8013f74:	683b      	ldr	r3, [r7, #0]
 8013f76:	441a      	add	r2, r3
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	895a      	ldrh	r2, [r3, #10]
 8013f80:	89fb      	ldrh	r3, [r7, #14]
 8013f82:	1ad3      	subs	r3, r2, r3
 8013f84:	b29a      	uxth	r2, r3
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	891a      	ldrh	r2, [r3, #8]
 8013f8e:	89fb      	ldrh	r3, [r7, #14]
 8013f90:	1ad3      	subs	r3, r2, r3
 8013f92:	b29a      	uxth	r2, r3
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8013f98:	2300      	movs	r3, #0
}
 8013f9a:	4618      	mov	r0, r3
 8013f9c:	3710      	adds	r7, #16
 8013f9e:	46bd      	mov	sp, r7
 8013fa0:	bd80      	pop	{r7, pc}
 8013fa2:	bf00      	nop
 8013fa4:	08021808 	.word	0x08021808
 8013fa8:	0802196c 	.word	0x0802196c
 8013fac:	08021868 	.word	0x08021868
 8013fb0:	08021978 	.word	0x08021978

08013fb4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8013fb4:	b580      	push	{r7, lr}
 8013fb6:	b082      	sub	sp, #8
 8013fb8:	af00      	add	r7, sp, #0
 8013fba:	6078      	str	r0, [r7, #4]
 8013fbc:	460b      	mov	r3, r1
 8013fbe:	807b      	strh	r3, [r7, #2]
 8013fc0:	4613      	mov	r3, r2
 8013fc2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8013fc4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	da08      	bge.n	8013fde <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8013fcc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013fd0:	425b      	negs	r3, r3
 8013fd2:	4619      	mov	r1, r3
 8013fd4:	6878      	ldr	r0, [r7, #4]
 8013fd6:	f7ff ff9b 	bl	8013f10 <pbuf_remove_header>
 8013fda:	4603      	mov	r3, r0
 8013fdc:	e007      	b.n	8013fee <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8013fde:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013fe2:	787a      	ldrb	r2, [r7, #1]
 8013fe4:	4619      	mov	r1, r3
 8013fe6:	6878      	ldr	r0, [r7, #4]
 8013fe8:	f7ff ff1a 	bl	8013e20 <pbuf_add_header_impl>
 8013fec:	4603      	mov	r3, r0
  }
}
 8013fee:	4618      	mov	r0, r3
 8013ff0:	3708      	adds	r7, #8
 8013ff2:	46bd      	mov	sp, r7
 8013ff4:	bd80      	pop	{r7, pc}

08013ff6 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8013ff6:	b580      	push	{r7, lr}
 8013ff8:	b082      	sub	sp, #8
 8013ffa:	af00      	add	r7, sp, #0
 8013ffc:	6078      	str	r0, [r7, #4]
 8013ffe:	460b      	mov	r3, r1
 8014000:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8014002:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014006:	2201      	movs	r2, #1
 8014008:	4619      	mov	r1, r3
 801400a:	6878      	ldr	r0, [r7, #4]
 801400c:	f7ff ffd2 	bl	8013fb4 <pbuf_header_impl>
 8014010:	4603      	mov	r3, r0
}
 8014012:	4618      	mov	r0, r3
 8014014:	3708      	adds	r7, #8
 8014016:	46bd      	mov	sp, r7
 8014018:	bd80      	pop	{r7, pc}
	...

0801401c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 801401c:	b580      	push	{r7, lr}
 801401e:	b088      	sub	sp, #32
 8014020:	af00      	add	r7, sp, #0
 8014022:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	2b00      	cmp	r3, #0
 8014028:	d10b      	bne.n	8014042 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	2b00      	cmp	r3, #0
 801402e:	d106      	bne.n	801403e <pbuf_free+0x22>
 8014030:	4b3b      	ldr	r3, [pc, #236]	@ (8014120 <pbuf_free+0x104>)
 8014032:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8014036:	493b      	ldr	r1, [pc, #236]	@ (8014124 <pbuf_free+0x108>)
 8014038:	483b      	ldr	r0, [pc, #236]	@ (8014128 <pbuf_free+0x10c>)
 801403a:	f00a f8a7 	bl	801e18c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 801403e:	2300      	movs	r3, #0
 8014040:	e069      	b.n	8014116 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8014042:	2300      	movs	r3, #0
 8014044:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8014046:	e062      	b.n	801410e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8014048:	f009 f9e0 	bl	801d40c <sys_arch_protect>
 801404c:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	7b9b      	ldrb	r3, [r3, #14]
 8014052:	2b00      	cmp	r3, #0
 8014054:	d106      	bne.n	8014064 <pbuf_free+0x48>
 8014056:	4b32      	ldr	r3, [pc, #200]	@ (8014120 <pbuf_free+0x104>)
 8014058:	f240 22f1 	movw	r2, #753	@ 0x2f1
 801405c:	4933      	ldr	r1, [pc, #204]	@ (801412c <pbuf_free+0x110>)
 801405e:	4832      	ldr	r0, [pc, #200]	@ (8014128 <pbuf_free+0x10c>)
 8014060:	f00a f894 	bl	801e18c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	7b9b      	ldrb	r3, [r3, #14]
 8014068:	3b01      	subs	r3, #1
 801406a:	b2da      	uxtb	r2, r3
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	739a      	strb	r2, [r3, #14]
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	7b9b      	ldrb	r3, [r3, #14]
 8014074:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8014076:	69b8      	ldr	r0, [r7, #24]
 8014078:	f009 f9d6 	bl	801d428 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 801407c:	7dfb      	ldrb	r3, [r7, #23]
 801407e:	2b00      	cmp	r3, #0
 8014080:	d143      	bne.n	801410a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	681b      	ldr	r3, [r3, #0]
 8014086:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	7b1b      	ldrb	r3, [r3, #12]
 801408c:	f003 030f 	and.w	r3, r3, #15
 8014090:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	7b5b      	ldrb	r3, [r3, #13]
 8014096:	f003 0302 	and.w	r3, r3, #2
 801409a:	2b00      	cmp	r3, #0
 801409c:	d011      	beq.n	80140c2 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80140a2:	68bb      	ldr	r3, [r7, #8]
 80140a4:	691b      	ldr	r3, [r3, #16]
 80140a6:	2b00      	cmp	r3, #0
 80140a8:	d106      	bne.n	80140b8 <pbuf_free+0x9c>
 80140aa:	4b1d      	ldr	r3, [pc, #116]	@ (8014120 <pbuf_free+0x104>)
 80140ac:	f240 22ff 	movw	r2, #767	@ 0x2ff
 80140b0:	491f      	ldr	r1, [pc, #124]	@ (8014130 <pbuf_free+0x114>)
 80140b2:	481d      	ldr	r0, [pc, #116]	@ (8014128 <pbuf_free+0x10c>)
 80140b4:	f00a f86a 	bl	801e18c <iprintf>
        pc->custom_free_function(p);
 80140b8:	68bb      	ldr	r3, [r7, #8]
 80140ba:	691b      	ldr	r3, [r3, #16]
 80140bc:	6878      	ldr	r0, [r7, #4]
 80140be:	4798      	blx	r3
 80140c0:	e01d      	b.n	80140fe <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80140c2:	7bfb      	ldrb	r3, [r7, #15]
 80140c4:	2b02      	cmp	r3, #2
 80140c6:	d104      	bne.n	80140d2 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 80140c8:	6879      	ldr	r1, [r7, #4]
 80140ca:	200c      	movs	r0, #12
 80140cc:	f7ff f934 	bl	8013338 <memp_free>
 80140d0:	e015      	b.n	80140fe <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80140d2:	7bfb      	ldrb	r3, [r7, #15]
 80140d4:	2b01      	cmp	r3, #1
 80140d6:	d104      	bne.n	80140e2 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 80140d8:	6879      	ldr	r1, [r7, #4]
 80140da:	200b      	movs	r0, #11
 80140dc:	f7ff f92c 	bl	8013338 <memp_free>
 80140e0:	e00d      	b.n	80140fe <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80140e2:	7bfb      	ldrb	r3, [r7, #15]
 80140e4:	2b00      	cmp	r3, #0
 80140e6:	d103      	bne.n	80140f0 <pbuf_free+0xd4>
          mem_free(p);
 80140e8:	6878      	ldr	r0, [r7, #4]
 80140ea:	f7fe fd71 	bl	8012bd0 <mem_free>
 80140ee:	e006      	b.n	80140fe <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80140f0:	4b0b      	ldr	r3, [pc, #44]	@ (8014120 <pbuf_free+0x104>)
 80140f2:	f240 320f 	movw	r2, #783	@ 0x30f
 80140f6:	490f      	ldr	r1, [pc, #60]	@ (8014134 <pbuf_free+0x118>)
 80140f8:	480b      	ldr	r0, [pc, #44]	@ (8014128 <pbuf_free+0x10c>)
 80140fa:	f00a f847 	bl	801e18c <iprintf>
        }
      }
      count++;
 80140fe:	7ffb      	ldrb	r3, [r7, #31]
 8014100:	3301      	adds	r3, #1
 8014102:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8014104:	693b      	ldr	r3, [r7, #16]
 8014106:	607b      	str	r3, [r7, #4]
 8014108:	e001      	b.n	801410e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 801410a:	2300      	movs	r3, #0
 801410c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801410e:	687b      	ldr	r3, [r7, #4]
 8014110:	2b00      	cmp	r3, #0
 8014112:	d199      	bne.n	8014048 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8014114:	7ffb      	ldrb	r3, [r7, #31]
}
 8014116:	4618      	mov	r0, r3
 8014118:	3720      	adds	r7, #32
 801411a:	46bd      	mov	sp, r7
 801411c:	bd80      	pop	{r7, pc}
 801411e:	bf00      	nop
 8014120:	08021808 	.word	0x08021808
 8014124:	0802196c 	.word	0x0802196c
 8014128:	08021868 	.word	0x08021868
 801412c:	08021998 	.word	0x08021998
 8014130:	080219b0 	.word	0x080219b0
 8014134:	080219d4 	.word	0x080219d4

08014138 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8014138:	b480      	push	{r7}
 801413a:	b085      	sub	sp, #20
 801413c:	af00      	add	r7, sp, #0
 801413e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8014140:	2300      	movs	r3, #0
 8014142:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8014144:	e005      	b.n	8014152 <pbuf_clen+0x1a>
    ++len;
 8014146:	89fb      	ldrh	r3, [r7, #14]
 8014148:	3301      	adds	r3, #1
 801414a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	681b      	ldr	r3, [r3, #0]
 8014150:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	2b00      	cmp	r3, #0
 8014156:	d1f6      	bne.n	8014146 <pbuf_clen+0xe>
  }
  return len;
 8014158:	89fb      	ldrh	r3, [r7, #14]
}
 801415a:	4618      	mov	r0, r3
 801415c:	3714      	adds	r7, #20
 801415e:	46bd      	mov	sp, r7
 8014160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014164:	4770      	bx	lr
	...

08014168 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8014168:	b580      	push	{r7, lr}
 801416a:	b084      	sub	sp, #16
 801416c:	af00      	add	r7, sp, #0
 801416e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8014170:	687b      	ldr	r3, [r7, #4]
 8014172:	2b00      	cmp	r3, #0
 8014174:	d016      	beq.n	80141a4 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8014176:	f009 f949 	bl	801d40c <sys_arch_protect>
 801417a:	60f8      	str	r0, [r7, #12]
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	7b9b      	ldrb	r3, [r3, #14]
 8014180:	3301      	adds	r3, #1
 8014182:	b2da      	uxtb	r2, r3
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	739a      	strb	r2, [r3, #14]
 8014188:	68f8      	ldr	r0, [r7, #12]
 801418a:	f009 f94d 	bl	801d428 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	7b9b      	ldrb	r3, [r3, #14]
 8014192:	2b00      	cmp	r3, #0
 8014194:	d106      	bne.n	80141a4 <pbuf_ref+0x3c>
 8014196:	4b05      	ldr	r3, [pc, #20]	@ (80141ac <pbuf_ref+0x44>)
 8014198:	f240 3242 	movw	r2, #834	@ 0x342
 801419c:	4904      	ldr	r1, [pc, #16]	@ (80141b0 <pbuf_ref+0x48>)
 801419e:	4805      	ldr	r0, [pc, #20]	@ (80141b4 <pbuf_ref+0x4c>)
 80141a0:	f009 fff4 	bl	801e18c <iprintf>
  }
}
 80141a4:	bf00      	nop
 80141a6:	3710      	adds	r7, #16
 80141a8:	46bd      	mov	sp, r7
 80141aa:	bd80      	pop	{r7, pc}
 80141ac:	08021808 	.word	0x08021808
 80141b0:	080219e8 	.word	0x080219e8
 80141b4:	08021868 	.word	0x08021868

080141b8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80141b8:	b580      	push	{r7, lr}
 80141ba:	b084      	sub	sp, #16
 80141bc:	af00      	add	r7, sp, #0
 80141be:	6078      	str	r0, [r7, #4]
 80141c0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	2b00      	cmp	r3, #0
 80141c6:	d002      	beq.n	80141ce <pbuf_cat+0x16>
 80141c8:	683b      	ldr	r3, [r7, #0]
 80141ca:	2b00      	cmp	r3, #0
 80141cc:	d107      	bne.n	80141de <pbuf_cat+0x26>
 80141ce:	4b20      	ldr	r3, [pc, #128]	@ (8014250 <pbuf_cat+0x98>)
 80141d0:	f240 3259 	movw	r2, #857	@ 0x359
 80141d4:	491f      	ldr	r1, [pc, #124]	@ (8014254 <pbuf_cat+0x9c>)
 80141d6:	4820      	ldr	r0, [pc, #128]	@ (8014258 <pbuf_cat+0xa0>)
 80141d8:	f009 ffd8 	bl	801e18c <iprintf>
 80141dc:	e034      	b.n	8014248 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80141de:	687b      	ldr	r3, [r7, #4]
 80141e0:	60fb      	str	r3, [r7, #12]
 80141e2:	e00a      	b.n	80141fa <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80141e4:	68fb      	ldr	r3, [r7, #12]
 80141e6:	891a      	ldrh	r2, [r3, #8]
 80141e8:	683b      	ldr	r3, [r7, #0]
 80141ea:	891b      	ldrh	r3, [r3, #8]
 80141ec:	4413      	add	r3, r2
 80141ee:	b29a      	uxth	r2, r3
 80141f0:	68fb      	ldr	r3, [r7, #12]
 80141f2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80141f4:	68fb      	ldr	r3, [r7, #12]
 80141f6:	681b      	ldr	r3, [r3, #0]
 80141f8:	60fb      	str	r3, [r7, #12]
 80141fa:	68fb      	ldr	r3, [r7, #12]
 80141fc:	681b      	ldr	r3, [r3, #0]
 80141fe:	2b00      	cmp	r3, #0
 8014200:	d1f0      	bne.n	80141e4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8014202:	68fb      	ldr	r3, [r7, #12]
 8014204:	891a      	ldrh	r2, [r3, #8]
 8014206:	68fb      	ldr	r3, [r7, #12]
 8014208:	895b      	ldrh	r3, [r3, #10]
 801420a:	429a      	cmp	r2, r3
 801420c:	d006      	beq.n	801421c <pbuf_cat+0x64>
 801420e:	4b10      	ldr	r3, [pc, #64]	@ (8014250 <pbuf_cat+0x98>)
 8014210:	f240 3262 	movw	r2, #866	@ 0x362
 8014214:	4911      	ldr	r1, [pc, #68]	@ (801425c <pbuf_cat+0xa4>)
 8014216:	4810      	ldr	r0, [pc, #64]	@ (8014258 <pbuf_cat+0xa0>)
 8014218:	f009 ffb8 	bl	801e18c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 801421c:	68fb      	ldr	r3, [r7, #12]
 801421e:	681b      	ldr	r3, [r3, #0]
 8014220:	2b00      	cmp	r3, #0
 8014222:	d006      	beq.n	8014232 <pbuf_cat+0x7a>
 8014224:	4b0a      	ldr	r3, [pc, #40]	@ (8014250 <pbuf_cat+0x98>)
 8014226:	f240 3263 	movw	r2, #867	@ 0x363
 801422a:	490d      	ldr	r1, [pc, #52]	@ (8014260 <pbuf_cat+0xa8>)
 801422c:	480a      	ldr	r0, [pc, #40]	@ (8014258 <pbuf_cat+0xa0>)
 801422e:	f009 ffad 	bl	801e18c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8014232:	68fb      	ldr	r3, [r7, #12]
 8014234:	891a      	ldrh	r2, [r3, #8]
 8014236:	683b      	ldr	r3, [r7, #0]
 8014238:	891b      	ldrh	r3, [r3, #8]
 801423a:	4413      	add	r3, r2
 801423c:	b29a      	uxth	r2, r3
 801423e:	68fb      	ldr	r3, [r7, #12]
 8014240:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8014242:	68fb      	ldr	r3, [r7, #12]
 8014244:	683a      	ldr	r2, [r7, #0]
 8014246:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8014248:	3710      	adds	r7, #16
 801424a:	46bd      	mov	sp, r7
 801424c:	bd80      	pop	{r7, pc}
 801424e:	bf00      	nop
 8014250:	08021808 	.word	0x08021808
 8014254:	080219fc 	.word	0x080219fc
 8014258:	08021868 	.word	0x08021868
 801425c:	08021a34 	.word	0x08021a34
 8014260:	08021a64 	.word	0x08021a64

08014264 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8014264:	b580      	push	{r7, lr}
 8014266:	b086      	sub	sp, #24
 8014268:	af00      	add	r7, sp, #0
 801426a:	6078      	str	r0, [r7, #4]
 801426c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 801426e:	2300      	movs	r3, #0
 8014270:	617b      	str	r3, [r7, #20]
 8014272:	2300      	movs	r3, #0
 8014274:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	2b00      	cmp	r3, #0
 801427a:	d008      	beq.n	801428e <pbuf_copy+0x2a>
 801427c:	683b      	ldr	r3, [r7, #0]
 801427e:	2b00      	cmp	r3, #0
 8014280:	d005      	beq.n	801428e <pbuf_copy+0x2a>
 8014282:	687b      	ldr	r3, [r7, #4]
 8014284:	891a      	ldrh	r2, [r3, #8]
 8014286:	683b      	ldr	r3, [r7, #0]
 8014288:	891b      	ldrh	r3, [r3, #8]
 801428a:	429a      	cmp	r2, r3
 801428c:	d209      	bcs.n	80142a2 <pbuf_copy+0x3e>
 801428e:	4b57      	ldr	r3, [pc, #348]	@ (80143ec <pbuf_copy+0x188>)
 8014290:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8014294:	4956      	ldr	r1, [pc, #344]	@ (80143f0 <pbuf_copy+0x18c>)
 8014296:	4857      	ldr	r0, [pc, #348]	@ (80143f4 <pbuf_copy+0x190>)
 8014298:	f009 ff78 	bl	801e18c <iprintf>
 801429c:	f06f 030f 	mvn.w	r3, #15
 80142a0:	e09f      	b.n	80143e2 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	895b      	ldrh	r3, [r3, #10]
 80142a6:	461a      	mov	r2, r3
 80142a8:	697b      	ldr	r3, [r7, #20]
 80142aa:	1ad2      	subs	r2, r2, r3
 80142ac:	683b      	ldr	r3, [r7, #0]
 80142ae:	895b      	ldrh	r3, [r3, #10]
 80142b0:	4619      	mov	r1, r3
 80142b2:	693b      	ldr	r3, [r7, #16]
 80142b4:	1acb      	subs	r3, r1, r3
 80142b6:	429a      	cmp	r2, r3
 80142b8:	d306      	bcc.n	80142c8 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80142ba:	683b      	ldr	r3, [r7, #0]
 80142bc:	895b      	ldrh	r3, [r3, #10]
 80142be:	461a      	mov	r2, r3
 80142c0:	693b      	ldr	r3, [r7, #16]
 80142c2:	1ad3      	subs	r3, r2, r3
 80142c4:	60fb      	str	r3, [r7, #12]
 80142c6:	e005      	b.n	80142d4 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	895b      	ldrh	r3, [r3, #10]
 80142cc:	461a      	mov	r2, r3
 80142ce:	697b      	ldr	r3, [r7, #20]
 80142d0:	1ad3      	subs	r3, r2, r3
 80142d2:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	685a      	ldr	r2, [r3, #4]
 80142d8:	697b      	ldr	r3, [r7, #20]
 80142da:	18d0      	adds	r0, r2, r3
 80142dc:	683b      	ldr	r3, [r7, #0]
 80142de:	685a      	ldr	r2, [r3, #4]
 80142e0:	693b      	ldr	r3, [r7, #16]
 80142e2:	4413      	add	r3, r2
 80142e4:	68fa      	ldr	r2, [r7, #12]
 80142e6:	4619      	mov	r1, r3
 80142e8:	f00a f903 	bl	801e4f2 <memcpy>
    offset_to += len;
 80142ec:	697a      	ldr	r2, [r7, #20]
 80142ee:	68fb      	ldr	r3, [r7, #12]
 80142f0:	4413      	add	r3, r2
 80142f2:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80142f4:	693a      	ldr	r2, [r7, #16]
 80142f6:	68fb      	ldr	r3, [r7, #12]
 80142f8:	4413      	add	r3, r2
 80142fa:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	895b      	ldrh	r3, [r3, #10]
 8014300:	461a      	mov	r2, r3
 8014302:	697b      	ldr	r3, [r7, #20]
 8014304:	4293      	cmp	r3, r2
 8014306:	d906      	bls.n	8014316 <pbuf_copy+0xb2>
 8014308:	4b38      	ldr	r3, [pc, #224]	@ (80143ec <pbuf_copy+0x188>)
 801430a:	f240 32d9 	movw	r2, #985	@ 0x3d9
 801430e:	493a      	ldr	r1, [pc, #232]	@ (80143f8 <pbuf_copy+0x194>)
 8014310:	4838      	ldr	r0, [pc, #224]	@ (80143f4 <pbuf_copy+0x190>)
 8014312:	f009 ff3b 	bl	801e18c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8014316:	683b      	ldr	r3, [r7, #0]
 8014318:	895b      	ldrh	r3, [r3, #10]
 801431a:	461a      	mov	r2, r3
 801431c:	693b      	ldr	r3, [r7, #16]
 801431e:	4293      	cmp	r3, r2
 8014320:	d906      	bls.n	8014330 <pbuf_copy+0xcc>
 8014322:	4b32      	ldr	r3, [pc, #200]	@ (80143ec <pbuf_copy+0x188>)
 8014324:	f240 32da 	movw	r2, #986	@ 0x3da
 8014328:	4934      	ldr	r1, [pc, #208]	@ (80143fc <pbuf_copy+0x198>)
 801432a:	4832      	ldr	r0, [pc, #200]	@ (80143f4 <pbuf_copy+0x190>)
 801432c:	f009 ff2e 	bl	801e18c <iprintf>
    if (offset_from >= p_from->len) {
 8014330:	683b      	ldr	r3, [r7, #0]
 8014332:	895b      	ldrh	r3, [r3, #10]
 8014334:	461a      	mov	r2, r3
 8014336:	693b      	ldr	r3, [r7, #16]
 8014338:	4293      	cmp	r3, r2
 801433a:	d304      	bcc.n	8014346 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 801433c:	2300      	movs	r3, #0
 801433e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8014340:	683b      	ldr	r3, [r7, #0]
 8014342:	681b      	ldr	r3, [r3, #0]
 8014344:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	895b      	ldrh	r3, [r3, #10]
 801434a:	461a      	mov	r2, r3
 801434c:	697b      	ldr	r3, [r7, #20]
 801434e:	4293      	cmp	r3, r2
 8014350:	d114      	bne.n	801437c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8014352:	2300      	movs	r3, #0
 8014354:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8014356:	687b      	ldr	r3, [r7, #4]
 8014358:	681b      	ldr	r3, [r3, #0]
 801435a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	2b00      	cmp	r3, #0
 8014360:	d10c      	bne.n	801437c <pbuf_copy+0x118>
 8014362:	683b      	ldr	r3, [r7, #0]
 8014364:	2b00      	cmp	r3, #0
 8014366:	d009      	beq.n	801437c <pbuf_copy+0x118>
 8014368:	4b20      	ldr	r3, [pc, #128]	@ (80143ec <pbuf_copy+0x188>)
 801436a:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 801436e:	4924      	ldr	r1, [pc, #144]	@ (8014400 <pbuf_copy+0x19c>)
 8014370:	4820      	ldr	r0, [pc, #128]	@ (80143f4 <pbuf_copy+0x190>)
 8014372:	f009 ff0b 	bl	801e18c <iprintf>
 8014376:	f06f 030f 	mvn.w	r3, #15
 801437a:	e032      	b.n	80143e2 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801437c:	683b      	ldr	r3, [r7, #0]
 801437e:	2b00      	cmp	r3, #0
 8014380:	d013      	beq.n	80143aa <pbuf_copy+0x146>
 8014382:	683b      	ldr	r3, [r7, #0]
 8014384:	895a      	ldrh	r2, [r3, #10]
 8014386:	683b      	ldr	r3, [r7, #0]
 8014388:	891b      	ldrh	r3, [r3, #8]
 801438a:	429a      	cmp	r2, r3
 801438c:	d10d      	bne.n	80143aa <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801438e:	683b      	ldr	r3, [r7, #0]
 8014390:	681b      	ldr	r3, [r3, #0]
 8014392:	2b00      	cmp	r3, #0
 8014394:	d009      	beq.n	80143aa <pbuf_copy+0x146>
 8014396:	4b15      	ldr	r3, [pc, #84]	@ (80143ec <pbuf_copy+0x188>)
 8014398:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 801439c:	4919      	ldr	r1, [pc, #100]	@ (8014404 <pbuf_copy+0x1a0>)
 801439e:	4815      	ldr	r0, [pc, #84]	@ (80143f4 <pbuf_copy+0x190>)
 80143a0:	f009 fef4 	bl	801e18c <iprintf>
 80143a4:	f06f 0305 	mvn.w	r3, #5
 80143a8:	e01b      	b.n	80143e2 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	2b00      	cmp	r3, #0
 80143ae:	d013      	beq.n	80143d8 <pbuf_copy+0x174>
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	895a      	ldrh	r2, [r3, #10]
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	891b      	ldrh	r3, [r3, #8]
 80143b8:	429a      	cmp	r2, r3
 80143ba:	d10d      	bne.n	80143d8 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80143bc:	687b      	ldr	r3, [r7, #4]
 80143be:	681b      	ldr	r3, [r3, #0]
 80143c0:	2b00      	cmp	r3, #0
 80143c2:	d009      	beq.n	80143d8 <pbuf_copy+0x174>
 80143c4:	4b09      	ldr	r3, [pc, #36]	@ (80143ec <pbuf_copy+0x188>)
 80143c6:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 80143ca:	490e      	ldr	r1, [pc, #56]	@ (8014404 <pbuf_copy+0x1a0>)
 80143cc:	4809      	ldr	r0, [pc, #36]	@ (80143f4 <pbuf_copy+0x190>)
 80143ce:	f009 fedd 	bl	801e18c <iprintf>
 80143d2:	f06f 0305 	mvn.w	r3, #5
 80143d6:	e004      	b.n	80143e2 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80143d8:	683b      	ldr	r3, [r7, #0]
 80143da:	2b00      	cmp	r3, #0
 80143dc:	f47f af61 	bne.w	80142a2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80143e0:	2300      	movs	r3, #0
}
 80143e2:	4618      	mov	r0, r3
 80143e4:	3718      	adds	r7, #24
 80143e6:	46bd      	mov	sp, r7
 80143e8:	bd80      	pop	{r7, pc}
 80143ea:	bf00      	nop
 80143ec:	08021808 	.word	0x08021808
 80143f0:	08021ab0 	.word	0x08021ab0
 80143f4:	08021868 	.word	0x08021868
 80143f8:	08021ae0 	.word	0x08021ae0
 80143fc:	08021af8 	.word	0x08021af8
 8014400:	08021b14 	.word	0x08021b14
 8014404:	08021b24 	.word	0x08021b24

08014408 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8014408:	b580      	push	{r7, lr}
 801440a:	b088      	sub	sp, #32
 801440c:	af00      	add	r7, sp, #0
 801440e:	60f8      	str	r0, [r7, #12]
 8014410:	60b9      	str	r1, [r7, #8]
 8014412:	4611      	mov	r1, r2
 8014414:	461a      	mov	r2, r3
 8014416:	460b      	mov	r3, r1
 8014418:	80fb      	strh	r3, [r7, #6]
 801441a:	4613      	mov	r3, r2
 801441c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 801441e:	2300      	movs	r3, #0
 8014420:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8014422:	2300      	movs	r3, #0
 8014424:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8014426:	68fb      	ldr	r3, [r7, #12]
 8014428:	2b00      	cmp	r3, #0
 801442a:	d108      	bne.n	801443e <pbuf_copy_partial+0x36>
 801442c:	4b2b      	ldr	r3, [pc, #172]	@ (80144dc <pbuf_copy_partial+0xd4>)
 801442e:	f240 420a 	movw	r2, #1034	@ 0x40a
 8014432:	492b      	ldr	r1, [pc, #172]	@ (80144e0 <pbuf_copy_partial+0xd8>)
 8014434:	482b      	ldr	r0, [pc, #172]	@ (80144e4 <pbuf_copy_partial+0xdc>)
 8014436:	f009 fea9 	bl	801e18c <iprintf>
 801443a:	2300      	movs	r3, #0
 801443c:	e04a      	b.n	80144d4 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801443e:	68bb      	ldr	r3, [r7, #8]
 8014440:	2b00      	cmp	r3, #0
 8014442:	d108      	bne.n	8014456 <pbuf_copy_partial+0x4e>
 8014444:	4b25      	ldr	r3, [pc, #148]	@ (80144dc <pbuf_copy_partial+0xd4>)
 8014446:	f240 420b 	movw	r2, #1035	@ 0x40b
 801444a:	4927      	ldr	r1, [pc, #156]	@ (80144e8 <pbuf_copy_partial+0xe0>)
 801444c:	4825      	ldr	r0, [pc, #148]	@ (80144e4 <pbuf_copy_partial+0xdc>)
 801444e:	f009 fe9d 	bl	801e18c <iprintf>
 8014452:	2300      	movs	r3, #0
 8014454:	e03e      	b.n	80144d4 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8014456:	68fb      	ldr	r3, [r7, #12]
 8014458:	61fb      	str	r3, [r7, #28]
 801445a:	e034      	b.n	80144c6 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 801445c:	88bb      	ldrh	r3, [r7, #4]
 801445e:	2b00      	cmp	r3, #0
 8014460:	d00a      	beq.n	8014478 <pbuf_copy_partial+0x70>
 8014462:	69fb      	ldr	r3, [r7, #28]
 8014464:	895b      	ldrh	r3, [r3, #10]
 8014466:	88ba      	ldrh	r2, [r7, #4]
 8014468:	429a      	cmp	r2, r3
 801446a:	d305      	bcc.n	8014478 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 801446c:	69fb      	ldr	r3, [r7, #28]
 801446e:	895b      	ldrh	r3, [r3, #10]
 8014470:	88ba      	ldrh	r2, [r7, #4]
 8014472:	1ad3      	subs	r3, r2, r3
 8014474:	80bb      	strh	r3, [r7, #4]
 8014476:	e023      	b.n	80144c0 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8014478:	69fb      	ldr	r3, [r7, #28]
 801447a:	895a      	ldrh	r2, [r3, #10]
 801447c:	88bb      	ldrh	r3, [r7, #4]
 801447e:	1ad3      	subs	r3, r2, r3
 8014480:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8014482:	8b3a      	ldrh	r2, [r7, #24]
 8014484:	88fb      	ldrh	r3, [r7, #6]
 8014486:	429a      	cmp	r2, r3
 8014488:	d901      	bls.n	801448e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 801448a:	88fb      	ldrh	r3, [r7, #6]
 801448c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801448e:	8b7b      	ldrh	r3, [r7, #26]
 8014490:	68ba      	ldr	r2, [r7, #8]
 8014492:	18d0      	adds	r0, r2, r3
 8014494:	69fb      	ldr	r3, [r7, #28]
 8014496:	685a      	ldr	r2, [r3, #4]
 8014498:	88bb      	ldrh	r3, [r7, #4]
 801449a:	4413      	add	r3, r2
 801449c:	8b3a      	ldrh	r2, [r7, #24]
 801449e:	4619      	mov	r1, r3
 80144a0:	f00a f827 	bl	801e4f2 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80144a4:	8afa      	ldrh	r2, [r7, #22]
 80144a6:	8b3b      	ldrh	r3, [r7, #24]
 80144a8:	4413      	add	r3, r2
 80144aa:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80144ac:	8b7a      	ldrh	r2, [r7, #26]
 80144ae:	8b3b      	ldrh	r3, [r7, #24]
 80144b0:	4413      	add	r3, r2
 80144b2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80144b4:	88fa      	ldrh	r2, [r7, #6]
 80144b6:	8b3b      	ldrh	r3, [r7, #24]
 80144b8:	1ad3      	subs	r3, r2, r3
 80144ba:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80144bc:	2300      	movs	r3, #0
 80144be:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80144c0:	69fb      	ldr	r3, [r7, #28]
 80144c2:	681b      	ldr	r3, [r3, #0]
 80144c4:	61fb      	str	r3, [r7, #28]
 80144c6:	88fb      	ldrh	r3, [r7, #6]
 80144c8:	2b00      	cmp	r3, #0
 80144ca:	d002      	beq.n	80144d2 <pbuf_copy_partial+0xca>
 80144cc:	69fb      	ldr	r3, [r7, #28]
 80144ce:	2b00      	cmp	r3, #0
 80144d0:	d1c4      	bne.n	801445c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80144d2:	8afb      	ldrh	r3, [r7, #22]
}
 80144d4:	4618      	mov	r0, r3
 80144d6:	3720      	adds	r7, #32
 80144d8:	46bd      	mov	sp, r7
 80144da:	bd80      	pop	{r7, pc}
 80144dc:	08021808 	.word	0x08021808
 80144e0:	08021b50 	.word	0x08021b50
 80144e4:	08021868 	.word	0x08021868
 80144e8:	08021b70 	.word	0x08021b70

080144ec <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80144ec:	b580      	push	{r7, lr}
 80144ee:	b084      	sub	sp, #16
 80144f0:	af00      	add	r7, sp, #0
 80144f2:	4603      	mov	r3, r0
 80144f4:	603a      	str	r2, [r7, #0]
 80144f6:	71fb      	strb	r3, [r7, #7]
 80144f8:	460b      	mov	r3, r1
 80144fa:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80144fc:	683b      	ldr	r3, [r7, #0]
 80144fe:	8919      	ldrh	r1, [r3, #8]
 8014500:	88ba      	ldrh	r2, [r7, #4]
 8014502:	79fb      	ldrb	r3, [r7, #7]
 8014504:	4618      	mov	r0, r3
 8014506:	f7ff faa5 	bl	8013a54 <pbuf_alloc>
 801450a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 801450c:	68fb      	ldr	r3, [r7, #12]
 801450e:	2b00      	cmp	r3, #0
 8014510:	d101      	bne.n	8014516 <pbuf_clone+0x2a>
    return NULL;
 8014512:	2300      	movs	r3, #0
 8014514:	e011      	b.n	801453a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8014516:	6839      	ldr	r1, [r7, #0]
 8014518:	68f8      	ldr	r0, [r7, #12]
 801451a:	f7ff fea3 	bl	8014264 <pbuf_copy>
 801451e:	4603      	mov	r3, r0
 8014520:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8014522:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8014526:	2b00      	cmp	r3, #0
 8014528:	d006      	beq.n	8014538 <pbuf_clone+0x4c>
 801452a:	4b06      	ldr	r3, [pc, #24]	@ (8014544 <pbuf_clone+0x58>)
 801452c:	f240 5224 	movw	r2, #1316	@ 0x524
 8014530:	4905      	ldr	r1, [pc, #20]	@ (8014548 <pbuf_clone+0x5c>)
 8014532:	4806      	ldr	r0, [pc, #24]	@ (801454c <pbuf_clone+0x60>)
 8014534:	f009 fe2a 	bl	801e18c <iprintf>
  return q;
 8014538:	68fb      	ldr	r3, [r7, #12]
}
 801453a:	4618      	mov	r0, r3
 801453c:	3710      	adds	r7, #16
 801453e:	46bd      	mov	sp, r7
 8014540:	bd80      	pop	{r7, pc}
 8014542:	bf00      	nop
 8014544:	08021808 	.word	0x08021808
 8014548:	08021c7c 	.word	0x08021c7c
 801454c:	08021868 	.word	0x08021868

08014550 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8014550:	b580      	push	{r7, lr}
 8014552:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8014554:	f009 fc96 	bl	801de84 <rand>
 8014558:	4603      	mov	r3, r0
 801455a:	b29b      	uxth	r3, r3
 801455c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8014560:	b29b      	uxth	r3, r3
 8014562:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8014566:	b29a      	uxth	r2, r3
 8014568:	4b01      	ldr	r3, [pc, #4]	@ (8014570 <tcp_init+0x20>)
 801456a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801456c:	bf00      	nop
 801456e:	bd80      	pop	{r7, pc}
 8014570:	200000a4 	.word	0x200000a4

08014574 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8014574:	b580      	push	{r7, lr}
 8014576:	b082      	sub	sp, #8
 8014578:	af00      	add	r7, sp, #0
 801457a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	7d1b      	ldrb	r3, [r3, #20]
 8014580:	2b01      	cmp	r3, #1
 8014582:	d105      	bne.n	8014590 <tcp_free+0x1c>
 8014584:	4b06      	ldr	r3, [pc, #24]	@ (80145a0 <tcp_free+0x2c>)
 8014586:	22d4      	movs	r2, #212	@ 0xd4
 8014588:	4906      	ldr	r1, [pc, #24]	@ (80145a4 <tcp_free+0x30>)
 801458a:	4807      	ldr	r0, [pc, #28]	@ (80145a8 <tcp_free+0x34>)
 801458c:	f009 fdfe 	bl	801e18c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8014590:	6879      	ldr	r1, [r7, #4]
 8014592:	2001      	movs	r0, #1
 8014594:	f7fe fed0 	bl	8013338 <memp_free>
}
 8014598:	bf00      	nop
 801459a:	3708      	adds	r7, #8
 801459c:	46bd      	mov	sp, r7
 801459e:	bd80      	pop	{r7, pc}
 80145a0:	08021d08 	.word	0x08021d08
 80145a4:	08021d38 	.word	0x08021d38
 80145a8:	08021d4c 	.word	0x08021d4c

080145ac <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80145ac:	b580      	push	{r7, lr}
 80145ae:	b082      	sub	sp, #8
 80145b0:	af00      	add	r7, sp, #0
 80145b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	7d1b      	ldrb	r3, [r3, #20]
 80145b8:	2b01      	cmp	r3, #1
 80145ba:	d105      	bne.n	80145c8 <tcp_free_listen+0x1c>
 80145bc:	4b06      	ldr	r3, [pc, #24]	@ (80145d8 <tcp_free_listen+0x2c>)
 80145be:	22df      	movs	r2, #223	@ 0xdf
 80145c0:	4906      	ldr	r1, [pc, #24]	@ (80145dc <tcp_free_listen+0x30>)
 80145c2:	4807      	ldr	r0, [pc, #28]	@ (80145e0 <tcp_free_listen+0x34>)
 80145c4:	f009 fde2 	bl	801e18c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80145c8:	6879      	ldr	r1, [r7, #4]
 80145ca:	2002      	movs	r0, #2
 80145cc:	f7fe feb4 	bl	8013338 <memp_free>
}
 80145d0:	bf00      	nop
 80145d2:	3708      	adds	r7, #8
 80145d4:	46bd      	mov	sp, r7
 80145d6:	bd80      	pop	{r7, pc}
 80145d8:	08021d08 	.word	0x08021d08
 80145dc:	08021d74 	.word	0x08021d74
 80145e0:	08021d4c 	.word	0x08021d4c

080145e4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80145e4:	b580      	push	{r7, lr}
 80145e6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80145e8:	f001 f85e 	bl	80156a8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80145ec:	4b07      	ldr	r3, [pc, #28]	@ (801460c <tcp_tmr+0x28>)
 80145ee:	781b      	ldrb	r3, [r3, #0]
 80145f0:	3301      	adds	r3, #1
 80145f2:	b2da      	uxtb	r2, r3
 80145f4:	4b05      	ldr	r3, [pc, #20]	@ (801460c <tcp_tmr+0x28>)
 80145f6:	701a      	strb	r2, [r3, #0]
 80145f8:	4b04      	ldr	r3, [pc, #16]	@ (801460c <tcp_tmr+0x28>)
 80145fa:	781b      	ldrb	r3, [r3, #0]
 80145fc:	f003 0301 	and.w	r3, r3, #1
 8014600:	2b00      	cmp	r3, #0
 8014602:	d001      	beq.n	8014608 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8014604:	f000 fd0e 	bl	8015024 <tcp_slowtmr>
  }
}
 8014608:	bf00      	nop
 801460a:	bd80      	pop	{r7, pc}
 801460c:	2000cad5 	.word	0x2000cad5

08014610 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8014610:	b580      	push	{r7, lr}
 8014612:	b084      	sub	sp, #16
 8014614:	af00      	add	r7, sp, #0
 8014616:	6078      	str	r0, [r7, #4]
 8014618:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 801461a:	683b      	ldr	r3, [r7, #0]
 801461c:	2b00      	cmp	r3, #0
 801461e:	d105      	bne.n	801462c <tcp_remove_listener+0x1c>
 8014620:	4b0d      	ldr	r3, [pc, #52]	@ (8014658 <tcp_remove_listener+0x48>)
 8014622:	22ff      	movs	r2, #255	@ 0xff
 8014624:	490d      	ldr	r1, [pc, #52]	@ (801465c <tcp_remove_listener+0x4c>)
 8014626:	480e      	ldr	r0, [pc, #56]	@ (8014660 <tcp_remove_listener+0x50>)
 8014628:	f009 fdb0 	bl	801e18c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	60fb      	str	r3, [r7, #12]
 8014630:	e00a      	b.n	8014648 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8014632:	68fb      	ldr	r3, [r7, #12]
 8014634:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014636:	683a      	ldr	r2, [r7, #0]
 8014638:	429a      	cmp	r2, r3
 801463a:	d102      	bne.n	8014642 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 801463c:	68fb      	ldr	r3, [r7, #12]
 801463e:	2200      	movs	r2, #0
 8014640:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8014642:	68fb      	ldr	r3, [r7, #12]
 8014644:	68db      	ldr	r3, [r3, #12]
 8014646:	60fb      	str	r3, [r7, #12]
 8014648:	68fb      	ldr	r3, [r7, #12]
 801464a:	2b00      	cmp	r3, #0
 801464c:	d1f1      	bne.n	8014632 <tcp_remove_listener+0x22>
    }
  }
}
 801464e:	bf00      	nop
 8014650:	bf00      	nop
 8014652:	3710      	adds	r7, #16
 8014654:	46bd      	mov	sp, r7
 8014656:	bd80      	pop	{r7, pc}
 8014658:	08021d08 	.word	0x08021d08
 801465c:	08021d90 	.word	0x08021d90
 8014660:	08021d4c 	.word	0x08021d4c

08014664 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8014664:	b580      	push	{r7, lr}
 8014666:	b084      	sub	sp, #16
 8014668:	af00      	add	r7, sp, #0
 801466a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	2b00      	cmp	r3, #0
 8014670:	d106      	bne.n	8014680 <tcp_listen_closed+0x1c>
 8014672:	4b14      	ldr	r3, [pc, #80]	@ (80146c4 <tcp_listen_closed+0x60>)
 8014674:	f240 1211 	movw	r2, #273	@ 0x111
 8014678:	4913      	ldr	r1, [pc, #76]	@ (80146c8 <tcp_listen_closed+0x64>)
 801467a:	4814      	ldr	r0, [pc, #80]	@ (80146cc <tcp_listen_closed+0x68>)
 801467c:	f009 fd86 	bl	801e18c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	7d1b      	ldrb	r3, [r3, #20]
 8014684:	2b01      	cmp	r3, #1
 8014686:	d006      	beq.n	8014696 <tcp_listen_closed+0x32>
 8014688:	4b0e      	ldr	r3, [pc, #56]	@ (80146c4 <tcp_listen_closed+0x60>)
 801468a:	f44f 7289 	mov.w	r2, #274	@ 0x112
 801468e:	4910      	ldr	r1, [pc, #64]	@ (80146d0 <tcp_listen_closed+0x6c>)
 8014690:	480e      	ldr	r0, [pc, #56]	@ (80146cc <tcp_listen_closed+0x68>)
 8014692:	f009 fd7b 	bl	801e18c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8014696:	2301      	movs	r3, #1
 8014698:	60fb      	str	r3, [r7, #12]
 801469a:	e00b      	b.n	80146b4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 801469c:	4a0d      	ldr	r2, [pc, #52]	@ (80146d4 <tcp_listen_closed+0x70>)
 801469e:	68fb      	ldr	r3, [r7, #12]
 80146a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80146a4:	681b      	ldr	r3, [r3, #0]
 80146a6:	6879      	ldr	r1, [r7, #4]
 80146a8:	4618      	mov	r0, r3
 80146aa:	f7ff ffb1 	bl	8014610 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80146ae:	68fb      	ldr	r3, [r7, #12]
 80146b0:	3301      	adds	r3, #1
 80146b2:	60fb      	str	r3, [r7, #12]
 80146b4:	68fb      	ldr	r3, [r7, #12]
 80146b6:	2b03      	cmp	r3, #3
 80146b8:	d9f0      	bls.n	801469c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80146ba:	bf00      	nop
 80146bc:	bf00      	nop
 80146be:	3710      	adds	r7, #16
 80146c0:	46bd      	mov	sp, r7
 80146c2:	bd80      	pop	{r7, pc}
 80146c4:	08021d08 	.word	0x08021d08
 80146c8:	08021db8 	.word	0x08021db8
 80146cc:	08021d4c 	.word	0x08021d4c
 80146d0:	08021dc4 	.word	0x08021dc4
 80146d4:	08023d78 	.word	0x08023d78

080146d8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80146d8:	b5b0      	push	{r4, r5, r7, lr}
 80146da:	b088      	sub	sp, #32
 80146dc:	af04      	add	r7, sp, #16
 80146de:	6078      	str	r0, [r7, #4]
 80146e0:	460b      	mov	r3, r1
 80146e2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	2b00      	cmp	r3, #0
 80146e8:	d106      	bne.n	80146f8 <tcp_close_shutdown+0x20>
 80146ea:	4b63      	ldr	r3, [pc, #396]	@ (8014878 <tcp_close_shutdown+0x1a0>)
 80146ec:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 80146f0:	4962      	ldr	r1, [pc, #392]	@ (801487c <tcp_close_shutdown+0x1a4>)
 80146f2:	4863      	ldr	r0, [pc, #396]	@ (8014880 <tcp_close_shutdown+0x1a8>)
 80146f4:	f009 fd4a 	bl	801e18c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80146f8:	78fb      	ldrb	r3, [r7, #3]
 80146fa:	2b00      	cmp	r3, #0
 80146fc:	d066      	beq.n	80147cc <tcp_close_shutdown+0xf4>
 80146fe:	687b      	ldr	r3, [r7, #4]
 8014700:	7d1b      	ldrb	r3, [r3, #20]
 8014702:	2b04      	cmp	r3, #4
 8014704:	d003      	beq.n	801470e <tcp_close_shutdown+0x36>
 8014706:	687b      	ldr	r3, [r7, #4]
 8014708:	7d1b      	ldrb	r3, [r3, #20]
 801470a:	2b07      	cmp	r3, #7
 801470c:	d15e      	bne.n	80147cc <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014712:	2b00      	cmp	r3, #0
 8014714:	d104      	bne.n	8014720 <tcp_close_shutdown+0x48>
 8014716:	687b      	ldr	r3, [r7, #4]
 8014718:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801471a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801471e:	d055      	beq.n	80147cc <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8014720:	687b      	ldr	r3, [r7, #4]
 8014722:	8b5b      	ldrh	r3, [r3, #26]
 8014724:	f003 0310 	and.w	r3, r3, #16
 8014728:	2b00      	cmp	r3, #0
 801472a:	d106      	bne.n	801473a <tcp_close_shutdown+0x62>
 801472c:	4b52      	ldr	r3, [pc, #328]	@ (8014878 <tcp_close_shutdown+0x1a0>)
 801472e:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8014732:	4954      	ldr	r1, [pc, #336]	@ (8014884 <tcp_close_shutdown+0x1ac>)
 8014734:	4852      	ldr	r0, [pc, #328]	@ (8014880 <tcp_close_shutdown+0x1a8>)
 8014736:	f009 fd29 	bl	801e18c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801473a:	687b      	ldr	r3, [r7, #4]
 801473c:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 801473e:	687b      	ldr	r3, [r7, #4]
 8014740:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8014742:	687d      	ldr	r5, [r7, #4]
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	3304      	adds	r3, #4
 8014748:	687a      	ldr	r2, [r7, #4]
 801474a:	8ad2      	ldrh	r2, [r2, #22]
 801474c:	6879      	ldr	r1, [r7, #4]
 801474e:	8b09      	ldrh	r1, [r1, #24]
 8014750:	9102      	str	r1, [sp, #8]
 8014752:	9201      	str	r2, [sp, #4]
 8014754:	9300      	str	r3, [sp, #0]
 8014756:	462b      	mov	r3, r5
 8014758:	4622      	mov	r2, r4
 801475a:	4601      	mov	r1, r0
 801475c:	6878      	ldr	r0, [r7, #4]
 801475e:	f005 fd43 	bl	801a1e8 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8014762:	6878      	ldr	r0, [r7, #4]
 8014764:	f001 fb26 	bl	8015db4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8014768:	4b47      	ldr	r3, [pc, #284]	@ (8014888 <tcp_close_shutdown+0x1b0>)
 801476a:	681b      	ldr	r3, [r3, #0]
 801476c:	687a      	ldr	r2, [r7, #4]
 801476e:	429a      	cmp	r2, r3
 8014770:	d105      	bne.n	801477e <tcp_close_shutdown+0xa6>
 8014772:	4b45      	ldr	r3, [pc, #276]	@ (8014888 <tcp_close_shutdown+0x1b0>)
 8014774:	681b      	ldr	r3, [r3, #0]
 8014776:	68db      	ldr	r3, [r3, #12]
 8014778:	4a43      	ldr	r2, [pc, #268]	@ (8014888 <tcp_close_shutdown+0x1b0>)
 801477a:	6013      	str	r3, [r2, #0]
 801477c:	e013      	b.n	80147a6 <tcp_close_shutdown+0xce>
 801477e:	4b42      	ldr	r3, [pc, #264]	@ (8014888 <tcp_close_shutdown+0x1b0>)
 8014780:	681b      	ldr	r3, [r3, #0]
 8014782:	60fb      	str	r3, [r7, #12]
 8014784:	e00c      	b.n	80147a0 <tcp_close_shutdown+0xc8>
 8014786:	68fb      	ldr	r3, [r7, #12]
 8014788:	68db      	ldr	r3, [r3, #12]
 801478a:	687a      	ldr	r2, [r7, #4]
 801478c:	429a      	cmp	r2, r3
 801478e:	d104      	bne.n	801479a <tcp_close_shutdown+0xc2>
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	68da      	ldr	r2, [r3, #12]
 8014794:	68fb      	ldr	r3, [r7, #12]
 8014796:	60da      	str	r2, [r3, #12]
 8014798:	e005      	b.n	80147a6 <tcp_close_shutdown+0xce>
 801479a:	68fb      	ldr	r3, [r7, #12]
 801479c:	68db      	ldr	r3, [r3, #12]
 801479e:	60fb      	str	r3, [r7, #12]
 80147a0:	68fb      	ldr	r3, [r7, #12]
 80147a2:	2b00      	cmp	r3, #0
 80147a4:	d1ef      	bne.n	8014786 <tcp_close_shutdown+0xae>
 80147a6:	687b      	ldr	r3, [r7, #4]
 80147a8:	2200      	movs	r2, #0
 80147aa:	60da      	str	r2, [r3, #12]
 80147ac:	4b37      	ldr	r3, [pc, #220]	@ (801488c <tcp_close_shutdown+0x1b4>)
 80147ae:	2201      	movs	r2, #1
 80147b0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80147b2:	4b37      	ldr	r3, [pc, #220]	@ (8014890 <tcp_close_shutdown+0x1b8>)
 80147b4:	681b      	ldr	r3, [r3, #0]
 80147b6:	687a      	ldr	r2, [r7, #4]
 80147b8:	429a      	cmp	r2, r3
 80147ba:	d102      	bne.n	80147c2 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80147bc:	f003 ffba 	bl	8018734 <tcp_trigger_input_pcb_close>
 80147c0:	e002      	b.n	80147c8 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80147c2:	6878      	ldr	r0, [r7, #4]
 80147c4:	f7ff fed6 	bl	8014574 <tcp_free>
      }
      return ERR_OK;
 80147c8:	2300      	movs	r3, #0
 80147ca:	e050      	b.n	801486e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	7d1b      	ldrb	r3, [r3, #20]
 80147d0:	2b02      	cmp	r3, #2
 80147d2:	d03b      	beq.n	801484c <tcp_close_shutdown+0x174>
 80147d4:	2b02      	cmp	r3, #2
 80147d6:	dc44      	bgt.n	8014862 <tcp_close_shutdown+0x18a>
 80147d8:	2b00      	cmp	r3, #0
 80147da:	d002      	beq.n	80147e2 <tcp_close_shutdown+0x10a>
 80147dc:	2b01      	cmp	r3, #1
 80147de:	d02a      	beq.n	8014836 <tcp_close_shutdown+0x15e>
 80147e0:	e03f      	b.n	8014862 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80147e2:	687b      	ldr	r3, [r7, #4]
 80147e4:	8adb      	ldrh	r3, [r3, #22]
 80147e6:	2b00      	cmp	r3, #0
 80147e8:	d021      	beq.n	801482e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80147ea:	4b2a      	ldr	r3, [pc, #168]	@ (8014894 <tcp_close_shutdown+0x1bc>)
 80147ec:	681b      	ldr	r3, [r3, #0]
 80147ee:	687a      	ldr	r2, [r7, #4]
 80147f0:	429a      	cmp	r2, r3
 80147f2:	d105      	bne.n	8014800 <tcp_close_shutdown+0x128>
 80147f4:	4b27      	ldr	r3, [pc, #156]	@ (8014894 <tcp_close_shutdown+0x1bc>)
 80147f6:	681b      	ldr	r3, [r3, #0]
 80147f8:	68db      	ldr	r3, [r3, #12]
 80147fa:	4a26      	ldr	r2, [pc, #152]	@ (8014894 <tcp_close_shutdown+0x1bc>)
 80147fc:	6013      	str	r3, [r2, #0]
 80147fe:	e013      	b.n	8014828 <tcp_close_shutdown+0x150>
 8014800:	4b24      	ldr	r3, [pc, #144]	@ (8014894 <tcp_close_shutdown+0x1bc>)
 8014802:	681b      	ldr	r3, [r3, #0]
 8014804:	60bb      	str	r3, [r7, #8]
 8014806:	e00c      	b.n	8014822 <tcp_close_shutdown+0x14a>
 8014808:	68bb      	ldr	r3, [r7, #8]
 801480a:	68db      	ldr	r3, [r3, #12]
 801480c:	687a      	ldr	r2, [r7, #4]
 801480e:	429a      	cmp	r2, r3
 8014810:	d104      	bne.n	801481c <tcp_close_shutdown+0x144>
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	68da      	ldr	r2, [r3, #12]
 8014816:	68bb      	ldr	r3, [r7, #8]
 8014818:	60da      	str	r2, [r3, #12]
 801481a:	e005      	b.n	8014828 <tcp_close_shutdown+0x150>
 801481c:	68bb      	ldr	r3, [r7, #8]
 801481e:	68db      	ldr	r3, [r3, #12]
 8014820:	60bb      	str	r3, [r7, #8]
 8014822:	68bb      	ldr	r3, [r7, #8]
 8014824:	2b00      	cmp	r3, #0
 8014826:	d1ef      	bne.n	8014808 <tcp_close_shutdown+0x130>
 8014828:	687b      	ldr	r3, [r7, #4]
 801482a:	2200      	movs	r2, #0
 801482c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 801482e:	6878      	ldr	r0, [r7, #4]
 8014830:	f7ff fea0 	bl	8014574 <tcp_free>
      break;
 8014834:	e01a      	b.n	801486c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8014836:	6878      	ldr	r0, [r7, #4]
 8014838:	f7ff ff14 	bl	8014664 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 801483c:	6879      	ldr	r1, [r7, #4]
 801483e:	4816      	ldr	r0, [pc, #88]	@ (8014898 <tcp_close_shutdown+0x1c0>)
 8014840:	f001 fb08 	bl	8015e54 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8014844:	6878      	ldr	r0, [r7, #4]
 8014846:	f7ff feb1 	bl	80145ac <tcp_free_listen>
      break;
 801484a:	e00f      	b.n	801486c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801484c:	6879      	ldr	r1, [r7, #4]
 801484e:	480e      	ldr	r0, [pc, #56]	@ (8014888 <tcp_close_shutdown+0x1b0>)
 8014850:	f001 fb00 	bl	8015e54 <tcp_pcb_remove>
 8014854:	4b0d      	ldr	r3, [pc, #52]	@ (801488c <tcp_close_shutdown+0x1b4>)
 8014856:	2201      	movs	r2, #1
 8014858:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 801485a:	6878      	ldr	r0, [r7, #4]
 801485c:	f7ff fe8a 	bl	8014574 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8014860:	e004      	b.n	801486c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8014862:	6878      	ldr	r0, [r7, #4]
 8014864:	f000 f81a 	bl	801489c <tcp_close_shutdown_fin>
 8014868:	4603      	mov	r3, r0
 801486a:	e000      	b.n	801486e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 801486c:	2300      	movs	r3, #0
}
 801486e:	4618      	mov	r0, r3
 8014870:	3710      	adds	r7, #16
 8014872:	46bd      	mov	sp, r7
 8014874:	bdb0      	pop	{r4, r5, r7, pc}
 8014876:	bf00      	nop
 8014878:	08021d08 	.word	0x08021d08
 801487c:	08021ddc 	.word	0x08021ddc
 8014880:	08021d4c 	.word	0x08021d4c
 8014884:	08021dfc 	.word	0x08021dfc
 8014888:	2000cacc 	.word	0x2000cacc
 801488c:	2000cad4 	.word	0x2000cad4
 8014890:	2000cb0c 	.word	0x2000cb0c
 8014894:	2000cac4 	.word	0x2000cac4
 8014898:	2000cac8 	.word	0x2000cac8

0801489c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 801489c:	b580      	push	{r7, lr}
 801489e:	b084      	sub	sp, #16
 80148a0:	af00      	add	r7, sp, #0
 80148a2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80148a4:	687b      	ldr	r3, [r7, #4]
 80148a6:	2b00      	cmp	r3, #0
 80148a8:	d106      	bne.n	80148b8 <tcp_close_shutdown_fin+0x1c>
 80148aa:	4b2e      	ldr	r3, [pc, #184]	@ (8014964 <tcp_close_shutdown_fin+0xc8>)
 80148ac:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 80148b0:	492d      	ldr	r1, [pc, #180]	@ (8014968 <tcp_close_shutdown_fin+0xcc>)
 80148b2:	482e      	ldr	r0, [pc, #184]	@ (801496c <tcp_close_shutdown_fin+0xd0>)
 80148b4:	f009 fc6a 	bl	801e18c <iprintf>

  switch (pcb->state) {
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	7d1b      	ldrb	r3, [r3, #20]
 80148bc:	2b07      	cmp	r3, #7
 80148be:	d020      	beq.n	8014902 <tcp_close_shutdown_fin+0x66>
 80148c0:	2b07      	cmp	r3, #7
 80148c2:	dc2b      	bgt.n	801491c <tcp_close_shutdown_fin+0x80>
 80148c4:	2b03      	cmp	r3, #3
 80148c6:	d002      	beq.n	80148ce <tcp_close_shutdown_fin+0x32>
 80148c8:	2b04      	cmp	r3, #4
 80148ca:	d00d      	beq.n	80148e8 <tcp_close_shutdown_fin+0x4c>
 80148cc:	e026      	b.n	801491c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80148ce:	6878      	ldr	r0, [r7, #4]
 80148d0:	f004 fd98 	bl	8019404 <tcp_send_fin>
 80148d4:	4603      	mov	r3, r0
 80148d6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80148d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80148dc:	2b00      	cmp	r3, #0
 80148de:	d11f      	bne.n	8014920 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80148e0:	687b      	ldr	r3, [r7, #4]
 80148e2:	2205      	movs	r2, #5
 80148e4:	751a      	strb	r2, [r3, #20]
      }
      break;
 80148e6:	e01b      	b.n	8014920 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80148e8:	6878      	ldr	r0, [r7, #4]
 80148ea:	f004 fd8b 	bl	8019404 <tcp_send_fin>
 80148ee:	4603      	mov	r3, r0
 80148f0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80148f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80148f6:	2b00      	cmp	r3, #0
 80148f8:	d114      	bne.n	8014924 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80148fa:	687b      	ldr	r3, [r7, #4]
 80148fc:	2205      	movs	r2, #5
 80148fe:	751a      	strb	r2, [r3, #20]
      }
      break;
 8014900:	e010      	b.n	8014924 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8014902:	6878      	ldr	r0, [r7, #4]
 8014904:	f004 fd7e 	bl	8019404 <tcp_send_fin>
 8014908:	4603      	mov	r3, r0
 801490a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801490c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014910:	2b00      	cmp	r3, #0
 8014912:	d109      	bne.n	8014928 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8014914:	687b      	ldr	r3, [r7, #4]
 8014916:	2209      	movs	r2, #9
 8014918:	751a      	strb	r2, [r3, #20]
      }
      break;
 801491a:	e005      	b.n	8014928 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 801491c:	2300      	movs	r3, #0
 801491e:	e01c      	b.n	801495a <tcp_close_shutdown_fin+0xbe>
      break;
 8014920:	bf00      	nop
 8014922:	e002      	b.n	801492a <tcp_close_shutdown_fin+0x8e>
      break;
 8014924:	bf00      	nop
 8014926:	e000      	b.n	801492a <tcp_close_shutdown_fin+0x8e>
      break;
 8014928:	bf00      	nop
  }

  if (err == ERR_OK) {
 801492a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801492e:	2b00      	cmp	r3, #0
 8014930:	d103      	bne.n	801493a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8014932:	6878      	ldr	r0, [r7, #4]
 8014934:	f004 fea4 	bl	8019680 <tcp_output>
 8014938:	e00d      	b.n	8014956 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 801493a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801493e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014942:	d108      	bne.n	8014956 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8014944:	687b      	ldr	r3, [r7, #4]
 8014946:	8b5b      	ldrh	r3, [r3, #26]
 8014948:	f043 0308 	orr.w	r3, r3, #8
 801494c:	b29a      	uxth	r2, r3
 801494e:	687b      	ldr	r3, [r7, #4]
 8014950:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8014952:	2300      	movs	r3, #0
 8014954:	e001      	b.n	801495a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8014956:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801495a:	4618      	mov	r0, r3
 801495c:	3710      	adds	r7, #16
 801495e:	46bd      	mov	sp, r7
 8014960:	bd80      	pop	{r7, pc}
 8014962:	bf00      	nop
 8014964:	08021d08 	.word	0x08021d08
 8014968:	08021db8 	.word	0x08021db8
 801496c:	08021d4c 	.word	0x08021d4c

08014970 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8014970:	b580      	push	{r7, lr}
 8014972:	b082      	sub	sp, #8
 8014974:	af00      	add	r7, sp, #0
 8014976:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8014978:	687b      	ldr	r3, [r7, #4]
 801497a:	2b00      	cmp	r3, #0
 801497c:	d109      	bne.n	8014992 <tcp_close+0x22>
 801497e:	4b0f      	ldr	r3, [pc, #60]	@ (80149bc <tcp_close+0x4c>)
 8014980:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8014984:	490e      	ldr	r1, [pc, #56]	@ (80149c0 <tcp_close+0x50>)
 8014986:	480f      	ldr	r0, [pc, #60]	@ (80149c4 <tcp_close+0x54>)
 8014988:	f009 fc00 	bl	801e18c <iprintf>
 801498c:	f06f 030f 	mvn.w	r3, #15
 8014990:	e00f      	b.n	80149b2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8014992:	687b      	ldr	r3, [r7, #4]
 8014994:	7d1b      	ldrb	r3, [r3, #20]
 8014996:	2b01      	cmp	r3, #1
 8014998:	d006      	beq.n	80149a8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801499a:	687b      	ldr	r3, [r7, #4]
 801499c:	8b5b      	ldrh	r3, [r3, #26]
 801499e:	f043 0310 	orr.w	r3, r3, #16
 80149a2:	b29a      	uxth	r2, r3
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80149a8:	2101      	movs	r1, #1
 80149aa:	6878      	ldr	r0, [r7, #4]
 80149ac:	f7ff fe94 	bl	80146d8 <tcp_close_shutdown>
 80149b0:	4603      	mov	r3, r0
}
 80149b2:	4618      	mov	r0, r3
 80149b4:	3708      	adds	r7, #8
 80149b6:	46bd      	mov	sp, r7
 80149b8:	bd80      	pop	{r7, pc}
 80149ba:	bf00      	nop
 80149bc:	08021d08 	.word	0x08021d08
 80149c0:	08021e18 	.word	0x08021e18
 80149c4:	08021d4c 	.word	0x08021d4c

080149c8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80149c8:	b580      	push	{r7, lr}
 80149ca:	b08e      	sub	sp, #56	@ 0x38
 80149cc:	af04      	add	r7, sp, #16
 80149ce:	6078      	str	r0, [r7, #4]
 80149d0:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	2b00      	cmp	r3, #0
 80149d6:	d107      	bne.n	80149e8 <tcp_abandon+0x20>
 80149d8:	4b52      	ldr	r3, [pc, #328]	@ (8014b24 <tcp_abandon+0x15c>)
 80149da:	f240 223d 	movw	r2, #573	@ 0x23d
 80149de:	4952      	ldr	r1, [pc, #328]	@ (8014b28 <tcp_abandon+0x160>)
 80149e0:	4852      	ldr	r0, [pc, #328]	@ (8014b2c <tcp_abandon+0x164>)
 80149e2:	f009 fbd3 	bl	801e18c <iprintf>
 80149e6:	e099      	b.n	8014b1c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	7d1b      	ldrb	r3, [r3, #20]
 80149ec:	2b01      	cmp	r3, #1
 80149ee:	d106      	bne.n	80149fe <tcp_abandon+0x36>
 80149f0:	4b4c      	ldr	r3, [pc, #304]	@ (8014b24 <tcp_abandon+0x15c>)
 80149f2:	f44f 7210 	mov.w	r2, #576	@ 0x240
 80149f6:	494e      	ldr	r1, [pc, #312]	@ (8014b30 <tcp_abandon+0x168>)
 80149f8:	484c      	ldr	r0, [pc, #304]	@ (8014b2c <tcp_abandon+0x164>)
 80149fa:	f009 fbc7 	bl	801e18c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80149fe:	687b      	ldr	r3, [r7, #4]
 8014a00:	7d1b      	ldrb	r3, [r3, #20]
 8014a02:	2b0a      	cmp	r3, #10
 8014a04:	d107      	bne.n	8014a16 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8014a06:	6879      	ldr	r1, [r7, #4]
 8014a08:	484a      	ldr	r0, [pc, #296]	@ (8014b34 <tcp_abandon+0x16c>)
 8014a0a:	f001 fa23 	bl	8015e54 <tcp_pcb_remove>
    tcp_free(pcb);
 8014a0e:	6878      	ldr	r0, [r7, #4]
 8014a10:	f7ff fdb0 	bl	8014574 <tcp_free>
 8014a14:	e082      	b.n	8014b1c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8014a16:	2300      	movs	r3, #0
 8014a18:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8014a1a:	2300      	movs	r3, #0
 8014a1c:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8014a1e:	687b      	ldr	r3, [r7, #4]
 8014a20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014a22:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014a28:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8014a2a:	687b      	ldr	r3, [r7, #4]
 8014a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014a30:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	691b      	ldr	r3, [r3, #16]
 8014a36:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	7d1b      	ldrb	r3, [r3, #20]
 8014a3c:	2b00      	cmp	r3, #0
 8014a3e:	d126      	bne.n	8014a8e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	8adb      	ldrh	r3, [r3, #22]
 8014a44:	2b00      	cmp	r3, #0
 8014a46:	d02e      	beq.n	8014aa6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8014a48:	4b3b      	ldr	r3, [pc, #236]	@ (8014b38 <tcp_abandon+0x170>)
 8014a4a:	681b      	ldr	r3, [r3, #0]
 8014a4c:	687a      	ldr	r2, [r7, #4]
 8014a4e:	429a      	cmp	r2, r3
 8014a50:	d105      	bne.n	8014a5e <tcp_abandon+0x96>
 8014a52:	4b39      	ldr	r3, [pc, #228]	@ (8014b38 <tcp_abandon+0x170>)
 8014a54:	681b      	ldr	r3, [r3, #0]
 8014a56:	68db      	ldr	r3, [r3, #12]
 8014a58:	4a37      	ldr	r2, [pc, #220]	@ (8014b38 <tcp_abandon+0x170>)
 8014a5a:	6013      	str	r3, [r2, #0]
 8014a5c:	e013      	b.n	8014a86 <tcp_abandon+0xbe>
 8014a5e:	4b36      	ldr	r3, [pc, #216]	@ (8014b38 <tcp_abandon+0x170>)
 8014a60:	681b      	ldr	r3, [r3, #0]
 8014a62:	61fb      	str	r3, [r7, #28]
 8014a64:	e00c      	b.n	8014a80 <tcp_abandon+0xb8>
 8014a66:	69fb      	ldr	r3, [r7, #28]
 8014a68:	68db      	ldr	r3, [r3, #12]
 8014a6a:	687a      	ldr	r2, [r7, #4]
 8014a6c:	429a      	cmp	r2, r3
 8014a6e:	d104      	bne.n	8014a7a <tcp_abandon+0xb2>
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	68da      	ldr	r2, [r3, #12]
 8014a74:	69fb      	ldr	r3, [r7, #28]
 8014a76:	60da      	str	r2, [r3, #12]
 8014a78:	e005      	b.n	8014a86 <tcp_abandon+0xbe>
 8014a7a:	69fb      	ldr	r3, [r7, #28]
 8014a7c:	68db      	ldr	r3, [r3, #12]
 8014a7e:	61fb      	str	r3, [r7, #28]
 8014a80:	69fb      	ldr	r3, [r7, #28]
 8014a82:	2b00      	cmp	r3, #0
 8014a84:	d1ef      	bne.n	8014a66 <tcp_abandon+0x9e>
 8014a86:	687b      	ldr	r3, [r7, #4]
 8014a88:	2200      	movs	r2, #0
 8014a8a:	60da      	str	r2, [r3, #12]
 8014a8c:	e00b      	b.n	8014aa6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8014a8e:	683b      	ldr	r3, [r7, #0]
 8014a90:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8014a92:	687b      	ldr	r3, [r7, #4]
 8014a94:	8adb      	ldrh	r3, [r3, #22]
 8014a96:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8014a98:	6879      	ldr	r1, [r7, #4]
 8014a9a:	4828      	ldr	r0, [pc, #160]	@ (8014b3c <tcp_abandon+0x174>)
 8014a9c:	f001 f9da 	bl	8015e54 <tcp_pcb_remove>
 8014aa0:	4b27      	ldr	r3, [pc, #156]	@ (8014b40 <tcp_abandon+0x178>)
 8014aa2:	2201      	movs	r2, #1
 8014aa4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8014aa6:	687b      	ldr	r3, [r7, #4]
 8014aa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014aaa:	2b00      	cmp	r3, #0
 8014aac:	d004      	beq.n	8014ab8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014ab2:	4618      	mov	r0, r3
 8014ab4:	f000 fed8 	bl	8015868 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8014ab8:	687b      	ldr	r3, [r7, #4]
 8014aba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014abc:	2b00      	cmp	r3, #0
 8014abe:	d004      	beq.n	8014aca <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8014ac0:	687b      	ldr	r3, [r7, #4]
 8014ac2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014ac4:	4618      	mov	r0, r3
 8014ac6:	f000 fecf 	bl	8015868 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8014aca:	687b      	ldr	r3, [r7, #4]
 8014acc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014ace:	2b00      	cmp	r3, #0
 8014ad0:	d004      	beq.n	8014adc <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8014ad2:	687b      	ldr	r3, [r7, #4]
 8014ad4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014ad6:	4618      	mov	r0, r3
 8014ad8:	f000 fec6 	bl	8015868 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8014adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	d00e      	beq.n	8014b00 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8014ae2:	6879      	ldr	r1, [r7, #4]
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	3304      	adds	r3, #4
 8014ae8:	687a      	ldr	r2, [r7, #4]
 8014aea:	8b12      	ldrh	r2, [r2, #24]
 8014aec:	9202      	str	r2, [sp, #8]
 8014aee:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8014af0:	9201      	str	r2, [sp, #4]
 8014af2:	9300      	str	r3, [sp, #0]
 8014af4:	460b      	mov	r3, r1
 8014af6:	697a      	ldr	r2, [r7, #20]
 8014af8:	69b9      	ldr	r1, [r7, #24]
 8014afa:	6878      	ldr	r0, [r7, #4]
 8014afc:	f005 fb74 	bl	801a1e8 <tcp_rst>
    }
    last_state = pcb->state;
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	7d1b      	ldrb	r3, [r3, #20]
 8014b04:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8014b06:	6878      	ldr	r0, [r7, #4]
 8014b08:	f7ff fd34 	bl	8014574 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8014b0c:	693b      	ldr	r3, [r7, #16]
 8014b0e:	2b00      	cmp	r3, #0
 8014b10:	d004      	beq.n	8014b1c <tcp_abandon+0x154>
 8014b12:	693b      	ldr	r3, [r7, #16]
 8014b14:	f06f 010c 	mvn.w	r1, #12
 8014b18:	68f8      	ldr	r0, [r7, #12]
 8014b1a:	4798      	blx	r3
  }
}
 8014b1c:	3728      	adds	r7, #40	@ 0x28
 8014b1e:	46bd      	mov	sp, r7
 8014b20:	bd80      	pop	{r7, pc}
 8014b22:	bf00      	nop
 8014b24:	08021d08 	.word	0x08021d08
 8014b28:	08021e4c 	.word	0x08021e4c
 8014b2c:	08021d4c 	.word	0x08021d4c
 8014b30:	08021e68 	.word	0x08021e68
 8014b34:	2000cad0 	.word	0x2000cad0
 8014b38:	2000cac4 	.word	0x2000cac4
 8014b3c:	2000cacc 	.word	0x2000cacc
 8014b40:	2000cad4 	.word	0x2000cad4

08014b44 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8014b44:	b580      	push	{r7, lr}
 8014b46:	b082      	sub	sp, #8
 8014b48:	af00      	add	r7, sp, #0
 8014b4a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8014b4c:	2101      	movs	r1, #1
 8014b4e:	6878      	ldr	r0, [r7, #4]
 8014b50:	f7ff ff3a 	bl	80149c8 <tcp_abandon>
}
 8014b54:	bf00      	nop
 8014b56:	3708      	adds	r7, #8
 8014b58:	46bd      	mov	sp, r7
 8014b5a:	bd80      	pop	{r7, pc}

08014b5c <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8014b5c:	b580      	push	{r7, lr}
 8014b5e:	b088      	sub	sp, #32
 8014b60:	af00      	add	r7, sp, #0
 8014b62:	60f8      	str	r0, [r7, #12]
 8014b64:	60b9      	str	r1, [r7, #8]
 8014b66:	4613      	mov	r3, r2
 8014b68:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8014b6a:	2304      	movs	r3, #4
 8014b6c:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8014b6e:	68bb      	ldr	r3, [r7, #8]
 8014b70:	2b00      	cmp	r3, #0
 8014b72:	d101      	bne.n	8014b78 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8014b74:	4b3e      	ldr	r3, [pc, #248]	@ (8014c70 <tcp_bind+0x114>)
 8014b76:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8014b78:	68fb      	ldr	r3, [r7, #12]
 8014b7a:	2b00      	cmp	r3, #0
 8014b7c:	d109      	bne.n	8014b92 <tcp_bind+0x36>
 8014b7e:	4b3d      	ldr	r3, [pc, #244]	@ (8014c74 <tcp_bind+0x118>)
 8014b80:	f240 22a9 	movw	r2, #681	@ 0x2a9
 8014b84:	493c      	ldr	r1, [pc, #240]	@ (8014c78 <tcp_bind+0x11c>)
 8014b86:	483d      	ldr	r0, [pc, #244]	@ (8014c7c <tcp_bind+0x120>)
 8014b88:	f009 fb00 	bl	801e18c <iprintf>
 8014b8c:	f06f 030f 	mvn.w	r3, #15
 8014b90:	e06a      	b.n	8014c68 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8014b92:	68fb      	ldr	r3, [r7, #12]
 8014b94:	7d1b      	ldrb	r3, [r3, #20]
 8014b96:	2b00      	cmp	r3, #0
 8014b98:	d009      	beq.n	8014bae <tcp_bind+0x52>
 8014b9a:	4b36      	ldr	r3, [pc, #216]	@ (8014c74 <tcp_bind+0x118>)
 8014b9c:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8014ba0:	4937      	ldr	r1, [pc, #220]	@ (8014c80 <tcp_bind+0x124>)
 8014ba2:	4836      	ldr	r0, [pc, #216]	@ (8014c7c <tcp_bind+0x120>)
 8014ba4:	f009 faf2 	bl	801e18c <iprintf>
 8014ba8:	f06f 0305 	mvn.w	r3, #5
 8014bac:	e05c      	b.n	8014c68 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8014bae:	88fb      	ldrh	r3, [r7, #6]
 8014bb0:	2b00      	cmp	r3, #0
 8014bb2:	d109      	bne.n	8014bc8 <tcp_bind+0x6c>
    port = tcp_new_port();
 8014bb4:	f000 f9f0 	bl	8014f98 <tcp_new_port>
 8014bb8:	4603      	mov	r3, r0
 8014bba:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8014bbc:	88fb      	ldrh	r3, [r7, #6]
 8014bbe:	2b00      	cmp	r3, #0
 8014bc0:	d135      	bne.n	8014c2e <tcp_bind+0xd2>
      return ERR_BUF;
 8014bc2:	f06f 0301 	mvn.w	r3, #1
 8014bc6:	e04f      	b.n	8014c68 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8014bc8:	2300      	movs	r3, #0
 8014bca:	61fb      	str	r3, [r7, #28]
 8014bcc:	e02b      	b.n	8014c26 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8014bce:	4a2d      	ldr	r2, [pc, #180]	@ (8014c84 <tcp_bind+0x128>)
 8014bd0:	69fb      	ldr	r3, [r7, #28]
 8014bd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014bd6:	681b      	ldr	r3, [r3, #0]
 8014bd8:	61bb      	str	r3, [r7, #24]
 8014bda:	e01e      	b.n	8014c1a <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8014bdc:	69bb      	ldr	r3, [r7, #24]
 8014bde:	8adb      	ldrh	r3, [r3, #22]
 8014be0:	88fa      	ldrh	r2, [r7, #6]
 8014be2:	429a      	cmp	r2, r3
 8014be4:	d116      	bne.n	8014c14 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8014be6:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8014be8:	2b00      	cmp	r3, #0
 8014bea:	d010      	beq.n	8014c0e <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8014bec:	69bb      	ldr	r3, [r7, #24]
 8014bee:	681b      	ldr	r3, [r3, #0]
 8014bf0:	2b00      	cmp	r3, #0
 8014bf2:	d00c      	beq.n	8014c0e <tcp_bind+0xb2>
 8014bf4:	68bb      	ldr	r3, [r7, #8]
 8014bf6:	2b00      	cmp	r3, #0
 8014bf8:	d009      	beq.n	8014c0e <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8014bfa:	68bb      	ldr	r3, [r7, #8]
 8014bfc:	681b      	ldr	r3, [r3, #0]
 8014bfe:	2b00      	cmp	r3, #0
 8014c00:	d005      	beq.n	8014c0e <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8014c02:	69bb      	ldr	r3, [r7, #24]
 8014c04:	681a      	ldr	r2, [r3, #0]
 8014c06:	68bb      	ldr	r3, [r7, #8]
 8014c08:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8014c0a:	429a      	cmp	r2, r3
 8014c0c:	d102      	bne.n	8014c14 <tcp_bind+0xb8>
              return ERR_USE;
 8014c0e:	f06f 0307 	mvn.w	r3, #7
 8014c12:	e029      	b.n	8014c68 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8014c14:	69bb      	ldr	r3, [r7, #24]
 8014c16:	68db      	ldr	r3, [r3, #12]
 8014c18:	61bb      	str	r3, [r7, #24]
 8014c1a:	69bb      	ldr	r3, [r7, #24]
 8014c1c:	2b00      	cmp	r3, #0
 8014c1e:	d1dd      	bne.n	8014bdc <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8014c20:	69fb      	ldr	r3, [r7, #28]
 8014c22:	3301      	adds	r3, #1
 8014c24:	61fb      	str	r3, [r7, #28]
 8014c26:	69fa      	ldr	r2, [r7, #28]
 8014c28:	697b      	ldr	r3, [r7, #20]
 8014c2a:	429a      	cmp	r2, r3
 8014c2c:	dbcf      	blt.n	8014bce <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8014c2e:	68bb      	ldr	r3, [r7, #8]
 8014c30:	2b00      	cmp	r3, #0
 8014c32:	d00c      	beq.n	8014c4e <tcp_bind+0xf2>
 8014c34:	68bb      	ldr	r3, [r7, #8]
 8014c36:	681b      	ldr	r3, [r3, #0]
 8014c38:	2b00      	cmp	r3, #0
 8014c3a:	d008      	beq.n	8014c4e <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8014c3c:	68bb      	ldr	r3, [r7, #8]
 8014c3e:	2b00      	cmp	r3, #0
 8014c40:	d002      	beq.n	8014c48 <tcp_bind+0xec>
 8014c42:	68bb      	ldr	r3, [r7, #8]
 8014c44:	681b      	ldr	r3, [r3, #0]
 8014c46:	e000      	b.n	8014c4a <tcp_bind+0xee>
 8014c48:	2300      	movs	r3, #0
 8014c4a:	68fa      	ldr	r2, [r7, #12]
 8014c4c:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8014c4e:	68fb      	ldr	r3, [r7, #12]
 8014c50:	88fa      	ldrh	r2, [r7, #6]
 8014c52:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8014c54:	4b0c      	ldr	r3, [pc, #48]	@ (8014c88 <tcp_bind+0x12c>)
 8014c56:	681a      	ldr	r2, [r3, #0]
 8014c58:	68fb      	ldr	r3, [r7, #12]
 8014c5a:	60da      	str	r2, [r3, #12]
 8014c5c:	4a0a      	ldr	r2, [pc, #40]	@ (8014c88 <tcp_bind+0x12c>)
 8014c5e:	68fb      	ldr	r3, [r7, #12]
 8014c60:	6013      	str	r3, [r2, #0]
 8014c62:	f005 fc83 	bl	801a56c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8014c66:	2300      	movs	r3, #0
}
 8014c68:	4618      	mov	r0, r3
 8014c6a:	3720      	adds	r7, #32
 8014c6c:	46bd      	mov	sp, r7
 8014c6e:	bd80      	pop	{r7, pc}
 8014c70:	08023da0 	.word	0x08023da0
 8014c74:	08021d08 	.word	0x08021d08
 8014c78:	08021e9c 	.word	0x08021e9c
 8014c7c:	08021d4c 	.word	0x08021d4c
 8014c80:	08021eb4 	.word	0x08021eb4
 8014c84:	08023d78 	.word	0x08023d78
 8014c88:	2000cac4 	.word	0x2000cac4

08014c8c <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8014c8c:	b580      	push	{r7, lr}
 8014c8e:	b084      	sub	sp, #16
 8014c90:	af00      	add	r7, sp, #0
 8014c92:	60f8      	str	r0, [r7, #12]
 8014c94:	60b9      	str	r1, [r7, #8]
 8014c96:	4613      	mov	r3, r2
 8014c98:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8014c9a:	68bb      	ldr	r3, [r7, #8]
 8014c9c:	2b00      	cmp	r3, #0
 8014c9e:	d106      	bne.n	8014cae <tcp_accept_null+0x22>
 8014ca0:	4b07      	ldr	r3, [pc, #28]	@ (8014cc0 <tcp_accept_null+0x34>)
 8014ca2:	f240 320f 	movw	r2, #783	@ 0x30f
 8014ca6:	4907      	ldr	r1, [pc, #28]	@ (8014cc4 <tcp_accept_null+0x38>)
 8014ca8:	4807      	ldr	r0, [pc, #28]	@ (8014cc8 <tcp_accept_null+0x3c>)
 8014caa:	f009 fa6f 	bl	801e18c <iprintf>

  tcp_abort(pcb);
 8014cae:	68b8      	ldr	r0, [r7, #8]
 8014cb0:	f7ff ff48 	bl	8014b44 <tcp_abort>

  return ERR_ABRT;
 8014cb4:	f06f 030c 	mvn.w	r3, #12
}
 8014cb8:	4618      	mov	r0, r3
 8014cba:	3710      	adds	r7, #16
 8014cbc:	46bd      	mov	sp, r7
 8014cbe:	bd80      	pop	{r7, pc}
 8014cc0:	08021d08 	.word	0x08021d08
 8014cc4:	08021edc 	.word	0x08021edc
 8014cc8:	08021d4c 	.word	0x08021d4c

08014ccc <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8014ccc:	b580      	push	{r7, lr}
 8014cce:	b082      	sub	sp, #8
 8014cd0:	af00      	add	r7, sp, #0
 8014cd2:	6078      	str	r0, [r7, #4]
 8014cd4:	460b      	mov	r3, r1
 8014cd6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8014cd8:	78fb      	ldrb	r3, [r7, #3]
 8014cda:	2200      	movs	r2, #0
 8014cdc:	4619      	mov	r1, r3
 8014cde:	6878      	ldr	r0, [r7, #4]
 8014ce0:	f000 f806 	bl	8014cf0 <tcp_listen_with_backlog_and_err>
 8014ce4:	4603      	mov	r3, r0
}
 8014ce6:	4618      	mov	r0, r3
 8014ce8:	3708      	adds	r7, #8
 8014cea:	46bd      	mov	sp, r7
 8014cec:	bd80      	pop	{r7, pc}
	...

08014cf0 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8014cf0:	b580      	push	{r7, lr}
 8014cf2:	b088      	sub	sp, #32
 8014cf4:	af00      	add	r7, sp, #0
 8014cf6:	60f8      	str	r0, [r7, #12]
 8014cf8:	460b      	mov	r3, r1
 8014cfa:	607a      	str	r2, [r7, #4]
 8014cfc:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8014cfe:	2300      	movs	r3, #0
 8014d00:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8014d02:	68fb      	ldr	r3, [r7, #12]
 8014d04:	2b00      	cmp	r3, #0
 8014d06:	d109      	bne.n	8014d1c <tcp_listen_with_backlog_and_err+0x2c>
 8014d08:	4b47      	ldr	r3, [pc, #284]	@ (8014e28 <tcp_listen_with_backlog_and_err+0x138>)
 8014d0a:	f240 3259 	movw	r2, #857	@ 0x359
 8014d0e:	4947      	ldr	r1, [pc, #284]	@ (8014e2c <tcp_listen_with_backlog_and_err+0x13c>)
 8014d10:	4847      	ldr	r0, [pc, #284]	@ (8014e30 <tcp_listen_with_backlog_and_err+0x140>)
 8014d12:	f009 fa3b 	bl	801e18c <iprintf>
 8014d16:	23f0      	movs	r3, #240	@ 0xf0
 8014d18:	76fb      	strb	r3, [r7, #27]
 8014d1a:	e079      	b.n	8014e10 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8014d1c:	68fb      	ldr	r3, [r7, #12]
 8014d1e:	7d1b      	ldrb	r3, [r3, #20]
 8014d20:	2b00      	cmp	r3, #0
 8014d22:	d009      	beq.n	8014d38 <tcp_listen_with_backlog_and_err+0x48>
 8014d24:	4b40      	ldr	r3, [pc, #256]	@ (8014e28 <tcp_listen_with_backlog_and_err+0x138>)
 8014d26:	f240 325a 	movw	r2, #858	@ 0x35a
 8014d2a:	4942      	ldr	r1, [pc, #264]	@ (8014e34 <tcp_listen_with_backlog_and_err+0x144>)
 8014d2c:	4840      	ldr	r0, [pc, #256]	@ (8014e30 <tcp_listen_with_backlog_and_err+0x140>)
 8014d2e:	f009 fa2d 	bl	801e18c <iprintf>
 8014d32:	23f1      	movs	r3, #241	@ 0xf1
 8014d34:	76fb      	strb	r3, [r7, #27]
 8014d36:	e06b      	b.n	8014e10 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8014d38:	68fb      	ldr	r3, [r7, #12]
 8014d3a:	7d1b      	ldrb	r3, [r3, #20]
 8014d3c:	2b01      	cmp	r3, #1
 8014d3e:	d104      	bne.n	8014d4a <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8014d40:	68fb      	ldr	r3, [r7, #12]
 8014d42:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8014d44:	23f7      	movs	r3, #247	@ 0xf7
 8014d46:	76fb      	strb	r3, [r7, #27]
    goto done;
 8014d48:	e062      	b.n	8014e10 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8014d4a:	2002      	movs	r0, #2
 8014d4c:	f7fe fa7e 	bl	801324c <memp_malloc>
 8014d50:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8014d52:	69fb      	ldr	r3, [r7, #28]
 8014d54:	2b00      	cmp	r3, #0
 8014d56:	d102      	bne.n	8014d5e <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8014d58:	23ff      	movs	r3, #255	@ 0xff
 8014d5a:	76fb      	strb	r3, [r7, #27]
    goto done;
 8014d5c:	e058      	b.n	8014e10 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8014d5e:	68fb      	ldr	r3, [r7, #12]
 8014d60:	691a      	ldr	r2, [r3, #16]
 8014d62:	69fb      	ldr	r3, [r7, #28]
 8014d64:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8014d66:	68fb      	ldr	r3, [r7, #12]
 8014d68:	8ada      	ldrh	r2, [r3, #22]
 8014d6a:	69fb      	ldr	r3, [r7, #28]
 8014d6c:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8014d6e:	69fb      	ldr	r3, [r7, #28]
 8014d70:	2201      	movs	r2, #1
 8014d72:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8014d74:	68fb      	ldr	r3, [r7, #12]
 8014d76:	7d5a      	ldrb	r2, [r3, #21]
 8014d78:	69fb      	ldr	r3, [r7, #28]
 8014d7a:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8014d7c:	68fb      	ldr	r3, [r7, #12]
 8014d7e:	7a5a      	ldrb	r2, [r3, #9]
 8014d80:	69fb      	ldr	r3, [r7, #28]
 8014d82:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8014d84:	69fb      	ldr	r3, [r7, #28]
 8014d86:	2200      	movs	r2, #0
 8014d88:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8014d8a:	68fb      	ldr	r3, [r7, #12]
 8014d8c:	7ada      	ldrb	r2, [r3, #11]
 8014d8e:	69fb      	ldr	r3, [r7, #28]
 8014d90:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8014d92:	68fb      	ldr	r3, [r7, #12]
 8014d94:	7a9a      	ldrb	r2, [r3, #10]
 8014d96:	69fb      	ldr	r3, [r7, #28]
 8014d98:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8014d9a:	68fb      	ldr	r3, [r7, #12]
 8014d9c:	681a      	ldr	r2, [r3, #0]
 8014d9e:	69fb      	ldr	r3, [r7, #28]
 8014da0:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8014da2:	68fb      	ldr	r3, [r7, #12]
 8014da4:	8adb      	ldrh	r3, [r3, #22]
 8014da6:	2b00      	cmp	r3, #0
 8014da8:	d021      	beq.n	8014dee <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8014daa:	4b23      	ldr	r3, [pc, #140]	@ (8014e38 <tcp_listen_with_backlog_and_err+0x148>)
 8014dac:	681b      	ldr	r3, [r3, #0]
 8014dae:	68fa      	ldr	r2, [r7, #12]
 8014db0:	429a      	cmp	r2, r3
 8014db2:	d105      	bne.n	8014dc0 <tcp_listen_with_backlog_and_err+0xd0>
 8014db4:	4b20      	ldr	r3, [pc, #128]	@ (8014e38 <tcp_listen_with_backlog_and_err+0x148>)
 8014db6:	681b      	ldr	r3, [r3, #0]
 8014db8:	68db      	ldr	r3, [r3, #12]
 8014dba:	4a1f      	ldr	r2, [pc, #124]	@ (8014e38 <tcp_listen_with_backlog_and_err+0x148>)
 8014dbc:	6013      	str	r3, [r2, #0]
 8014dbe:	e013      	b.n	8014de8 <tcp_listen_with_backlog_and_err+0xf8>
 8014dc0:	4b1d      	ldr	r3, [pc, #116]	@ (8014e38 <tcp_listen_with_backlog_and_err+0x148>)
 8014dc2:	681b      	ldr	r3, [r3, #0]
 8014dc4:	617b      	str	r3, [r7, #20]
 8014dc6:	e00c      	b.n	8014de2 <tcp_listen_with_backlog_and_err+0xf2>
 8014dc8:	697b      	ldr	r3, [r7, #20]
 8014dca:	68db      	ldr	r3, [r3, #12]
 8014dcc:	68fa      	ldr	r2, [r7, #12]
 8014dce:	429a      	cmp	r2, r3
 8014dd0:	d104      	bne.n	8014ddc <tcp_listen_with_backlog_and_err+0xec>
 8014dd2:	68fb      	ldr	r3, [r7, #12]
 8014dd4:	68da      	ldr	r2, [r3, #12]
 8014dd6:	697b      	ldr	r3, [r7, #20]
 8014dd8:	60da      	str	r2, [r3, #12]
 8014dda:	e005      	b.n	8014de8 <tcp_listen_with_backlog_and_err+0xf8>
 8014ddc:	697b      	ldr	r3, [r7, #20]
 8014dde:	68db      	ldr	r3, [r3, #12]
 8014de0:	617b      	str	r3, [r7, #20]
 8014de2:	697b      	ldr	r3, [r7, #20]
 8014de4:	2b00      	cmp	r3, #0
 8014de6:	d1ef      	bne.n	8014dc8 <tcp_listen_with_backlog_and_err+0xd8>
 8014de8:	68fb      	ldr	r3, [r7, #12]
 8014dea:	2200      	movs	r2, #0
 8014dec:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8014dee:	68f8      	ldr	r0, [r7, #12]
 8014df0:	f7ff fbc0 	bl	8014574 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8014df4:	69fb      	ldr	r3, [r7, #28]
 8014df6:	4a11      	ldr	r2, [pc, #68]	@ (8014e3c <tcp_listen_with_backlog_and_err+0x14c>)
 8014df8:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8014dfa:	4b11      	ldr	r3, [pc, #68]	@ (8014e40 <tcp_listen_with_backlog_and_err+0x150>)
 8014dfc:	681a      	ldr	r2, [r3, #0]
 8014dfe:	69fb      	ldr	r3, [r7, #28]
 8014e00:	60da      	str	r2, [r3, #12]
 8014e02:	4a0f      	ldr	r2, [pc, #60]	@ (8014e40 <tcp_listen_with_backlog_and_err+0x150>)
 8014e04:	69fb      	ldr	r3, [r7, #28]
 8014e06:	6013      	str	r3, [r2, #0]
 8014e08:	f005 fbb0 	bl	801a56c <tcp_timer_needed>
  res = ERR_OK;
 8014e0c:	2300      	movs	r3, #0
 8014e0e:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	d002      	beq.n	8014e1c <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8014e16:	687b      	ldr	r3, [r7, #4]
 8014e18:	7efa      	ldrb	r2, [r7, #27]
 8014e1a:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8014e1c:	69fb      	ldr	r3, [r7, #28]
}
 8014e1e:	4618      	mov	r0, r3
 8014e20:	3720      	adds	r7, #32
 8014e22:	46bd      	mov	sp, r7
 8014e24:	bd80      	pop	{r7, pc}
 8014e26:	bf00      	nop
 8014e28:	08021d08 	.word	0x08021d08
 8014e2c:	08021efc 	.word	0x08021efc
 8014e30:	08021d4c 	.word	0x08021d4c
 8014e34:	08021f2c 	.word	0x08021f2c
 8014e38:	2000cac4 	.word	0x2000cac4
 8014e3c:	08014c8d 	.word	0x08014c8d
 8014e40:	2000cac8 	.word	0x2000cac8

08014e44 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8014e44:	b580      	push	{r7, lr}
 8014e46:	b084      	sub	sp, #16
 8014e48:	af00      	add	r7, sp, #0
 8014e4a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	2b00      	cmp	r3, #0
 8014e50:	d106      	bne.n	8014e60 <tcp_update_rcv_ann_wnd+0x1c>
 8014e52:	4b25      	ldr	r3, [pc, #148]	@ (8014ee8 <tcp_update_rcv_ann_wnd+0xa4>)
 8014e54:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8014e58:	4924      	ldr	r1, [pc, #144]	@ (8014eec <tcp_update_rcv_ann_wnd+0xa8>)
 8014e5a:	4825      	ldr	r0, [pc, #148]	@ (8014ef0 <tcp_update_rcv_ann_wnd+0xac>)
 8014e5c:	f009 f996 	bl	801e18c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8014e60:	687b      	ldr	r3, [r7, #4]
 8014e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014e64:	687a      	ldr	r2, [r7, #4]
 8014e66:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8014e68:	4413      	add	r3, r2
 8014e6a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8014e6c:	687b      	ldr	r3, [r7, #4]
 8014e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014e70:	687a      	ldr	r2, [r7, #4]
 8014e72:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8014e74:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8014e78:	bf28      	it	cs
 8014e7a:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 8014e7e:	b292      	uxth	r2, r2
 8014e80:	4413      	add	r3, r2
 8014e82:	68fa      	ldr	r2, [r7, #12]
 8014e84:	1ad3      	subs	r3, r2, r3
 8014e86:	2b00      	cmp	r3, #0
 8014e88:	db08      	blt.n	8014e9c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8014e8e:	687b      	ldr	r3, [r7, #4]
 8014e90:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8014e92:	687b      	ldr	r3, [r7, #4]
 8014e94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014e96:	68fa      	ldr	r2, [r7, #12]
 8014e98:	1ad3      	subs	r3, r2, r3
 8014e9a:	e020      	b.n	8014ede <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8014e9c:	687b      	ldr	r3, [r7, #4]
 8014e9e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014ea4:	1ad3      	subs	r3, r2, r3
 8014ea6:	2b00      	cmp	r3, #0
 8014ea8:	dd03      	ble.n	8014eb2 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8014eaa:	687b      	ldr	r3, [r7, #4]
 8014eac:	2200      	movs	r2, #0
 8014eae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8014eb0:	e014      	b.n	8014edc <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8014eb2:	687b      	ldr	r3, [r7, #4]
 8014eb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014eb6:	687b      	ldr	r3, [r7, #4]
 8014eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014eba:	1ad3      	subs	r3, r2, r3
 8014ebc:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8014ebe:	68bb      	ldr	r3, [r7, #8]
 8014ec0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014ec4:	d306      	bcc.n	8014ed4 <tcp_update_rcv_ann_wnd+0x90>
 8014ec6:	4b08      	ldr	r3, [pc, #32]	@ (8014ee8 <tcp_update_rcv_ann_wnd+0xa4>)
 8014ec8:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8014ecc:	4909      	ldr	r1, [pc, #36]	@ (8014ef4 <tcp_update_rcv_ann_wnd+0xb0>)
 8014ece:	4808      	ldr	r0, [pc, #32]	@ (8014ef0 <tcp_update_rcv_ann_wnd+0xac>)
 8014ed0:	f009 f95c 	bl	801e18c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8014ed4:	68bb      	ldr	r3, [r7, #8]
 8014ed6:	b29a      	uxth	r2, r3
 8014ed8:	687b      	ldr	r3, [r7, #4]
 8014eda:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8014edc:	2300      	movs	r3, #0
  }
}
 8014ede:	4618      	mov	r0, r3
 8014ee0:	3710      	adds	r7, #16
 8014ee2:	46bd      	mov	sp, r7
 8014ee4:	bd80      	pop	{r7, pc}
 8014ee6:	bf00      	nop
 8014ee8:	08021d08 	.word	0x08021d08
 8014eec:	08021f64 	.word	0x08021f64
 8014ef0:	08021d4c 	.word	0x08021d4c
 8014ef4:	08021f88 	.word	0x08021f88

08014ef8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8014ef8:	b580      	push	{r7, lr}
 8014efa:	b084      	sub	sp, #16
 8014efc:	af00      	add	r7, sp, #0
 8014efe:	6078      	str	r0, [r7, #4]
 8014f00:	460b      	mov	r3, r1
 8014f02:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8014f04:	687b      	ldr	r3, [r7, #4]
 8014f06:	2b00      	cmp	r3, #0
 8014f08:	d107      	bne.n	8014f1a <tcp_recved+0x22>
 8014f0a:	4b1f      	ldr	r3, [pc, #124]	@ (8014f88 <tcp_recved+0x90>)
 8014f0c:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8014f10:	491e      	ldr	r1, [pc, #120]	@ (8014f8c <tcp_recved+0x94>)
 8014f12:	481f      	ldr	r0, [pc, #124]	@ (8014f90 <tcp_recved+0x98>)
 8014f14:	f009 f93a 	bl	801e18c <iprintf>
 8014f18:	e032      	b.n	8014f80 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	7d1b      	ldrb	r3, [r3, #20]
 8014f1e:	2b01      	cmp	r3, #1
 8014f20:	d106      	bne.n	8014f30 <tcp_recved+0x38>
 8014f22:	4b19      	ldr	r3, [pc, #100]	@ (8014f88 <tcp_recved+0x90>)
 8014f24:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8014f28:	491a      	ldr	r1, [pc, #104]	@ (8014f94 <tcp_recved+0x9c>)
 8014f2a:	4819      	ldr	r0, [pc, #100]	@ (8014f90 <tcp_recved+0x98>)
 8014f2c:	f009 f92e 	bl	801e18c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8014f30:	687b      	ldr	r3, [r7, #4]
 8014f32:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8014f34:	887b      	ldrh	r3, [r7, #2]
 8014f36:	4413      	add	r3, r2
 8014f38:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8014f3a:	89fb      	ldrh	r3, [r7, #14]
 8014f3c:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8014f40:	d804      	bhi.n	8014f4c <tcp_recved+0x54>
 8014f42:	687b      	ldr	r3, [r7, #4]
 8014f44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014f46:	89fa      	ldrh	r2, [r7, #14]
 8014f48:	429a      	cmp	r2, r3
 8014f4a:	d204      	bcs.n	8014f56 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8014f4c:	687b      	ldr	r3, [r7, #4]
 8014f4e:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8014f52:	851a      	strh	r2, [r3, #40]	@ 0x28
 8014f54:	e002      	b.n	8014f5c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	89fa      	ldrh	r2, [r7, #14]
 8014f5a:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8014f5c:	6878      	ldr	r0, [r7, #4]
 8014f5e:	f7ff ff71 	bl	8014e44 <tcp_update_rcv_ann_wnd>
 8014f62:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8014f64:	68bb      	ldr	r3, [r7, #8]
 8014f66:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8014f6a:	d309      	bcc.n	8014f80 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	8b5b      	ldrh	r3, [r3, #26]
 8014f70:	f043 0302 	orr.w	r3, r3, #2
 8014f74:	b29a      	uxth	r2, r3
 8014f76:	687b      	ldr	r3, [r7, #4]
 8014f78:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8014f7a:	6878      	ldr	r0, [r7, #4]
 8014f7c:	f004 fb80 	bl	8019680 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8014f80:	3710      	adds	r7, #16
 8014f82:	46bd      	mov	sp, r7
 8014f84:	bd80      	pop	{r7, pc}
 8014f86:	bf00      	nop
 8014f88:	08021d08 	.word	0x08021d08
 8014f8c:	08021fa4 	.word	0x08021fa4
 8014f90:	08021d4c 	.word	0x08021d4c
 8014f94:	08021fbc 	.word	0x08021fbc

08014f98 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8014f98:	b480      	push	{r7}
 8014f9a:	b083      	sub	sp, #12
 8014f9c:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8014f9e:	2300      	movs	r3, #0
 8014fa0:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8014fa2:	4b1e      	ldr	r3, [pc, #120]	@ (801501c <tcp_new_port+0x84>)
 8014fa4:	881b      	ldrh	r3, [r3, #0]
 8014fa6:	3301      	adds	r3, #1
 8014fa8:	b29a      	uxth	r2, r3
 8014faa:	4b1c      	ldr	r3, [pc, #112]	@ (801501c <tcp_new_port+0x84>)
 8014fac:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8014fae:	4b1b      	ldr	r3, [pc, #108]	@ (801501c <tcp_new_port+0x84>)
 8014fb0:	881b      	ldrh	r3, [r3, #0]
 8014fb2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014fb6:	4293      	cmp	r3, r2
 8014fb8:	d103      	bne.n	8014fc2 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8014fba:	4b18      	ldr	r3, [pc, #96]	@ (801501c <tcp_new_port+0x84>)
 8014fbc:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8014fc0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8014fc2:	2300      	movs	r3, #0
 8014fc4:	71fb      	strb	r3, [r7, #7]
 8014fc6:	e01e      	b.n	8015006 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8014fc8:	79fb      	ldrb	r3, [r7, #7]
 8014fca:	4a15      	ldr	r2, [pc, #84]	@ (8015020 <tcp_new_port+0x88>)
 8014fcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014fd0:	681b      	ldr	r3, [r3, #0]
 8014fd2:	603b      	str	r3, [r7, #0]
 8014fd4:	e011      	b.n	8014ffa <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8014fd6:	683b      	ldr	r3, [r7, #0]
 8014fd8:	8ada      	ldrh	r2, [r3, #22]
 8014fda:	4b10      	ldr	r3, [pc, #64]	@ (801501c <tcp_new_port+0x84>)
 8014fdc:	881b      	ldrh	r3, [r3, #0]
 8014fde:	429a      	cmp	r2, r3
 8014fe0:	d108      	bne.n	8014ff4 <tcp_new_port+0x5c>
        n++;
 8014fe2:	88bb      	ldrh	r3, [r7, #4]
 8014fe4:	3301      	adds	r3, #1
 8014fe6:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8014fe8:	88bb      	ldrh	r3, [r7, #4]
 8014fea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8014fee:	d3d8      	bcc.n	8014fa2 <tcp_new_port+0xa>
          return 0;
 8014ff0:	2300      	movs	r3, #0
 8014ff2:	e00d      	b.n	8015010 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8014ff4:	683b      	ldr	r3, [r7, #0]
 8014ff6:	68db      	ldr	r3, [r3, #12]
 8014ff8:	603b      	str	r3, [r7, #0]
 8014ffa:	683b      	ldr	r3, [r7, #0]
 8014ffc:	2b00      	cmp	r3, #0
 8014ffe:	d1ea      	bne.n	8014fd6 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8015000:	79fb      	ldrb	r3, [r7, #7]
 8015002:	3301      	adds	r3, #1
 8015004:	71fb      	strb	r3, [r7, #7]
 8015006:	79fb      	ldrb	r3, [r7, #7]
 8015008:	2b03      	cmp	r3, #3
 801500a:	d9dd      	bls.n	8014fc8 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 801500c:	4b03      	ldr	r3, [pc, #12]	@ (801501c <tcp_new_port+0x84>)
 801500e:	881b      	ldrh	r3, [r3, #0]
}
 8015010:	4618      	mov	r0, r3
 8015012:	370c      	adds	r7, #12
 8015014:	46bd      	mov	sp, r7
 8015016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801501a:	4770      	bx	lr
 801501c:	200000a4 	.word	0x200000a4
 8015020:	08023d78 	.word	0x08023d78

08015024 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8015024:	b5b0      	push	{r4, r5, r7, lr}
 8015026:	b090      	sub	sp, #64	@ 0x40
 8015028:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 801502a:	2300      	movs	r3, #0
 801502c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 8015030:	4b95      	ldr	r3, [pc, #596]	@ (8015288 <tcp_slowtmr+0x264>)
 8015032:	681b      	ldr	r3, [r3, #0]
 8015034:	3301      	adds	r3, #1
 8015036:	4a94      	ldr	r2, [pc, #592]	@ (8015288 <tcp_slowtmr+0x264>)
 8015038:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 801503a:	4b94      	ldr	r3, [pc, #592]	@ (801528c <tcp_slowtmr+0x268>)
 801503c:	781b      	ldrb	r3, [r3, #0]
 801503e:	3301      	adds	r3, #1
 8015040:	b2da      	uxtb	r2, r3
 8015042:	4b92      	ldr	r3, [pc, #584]	@ (801528c <tcp_slowtmr+0x268>)
 8015044:	701a      	strb	r2, [r3, #0]
 8015046:	e000      	b.n	801504a <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8015048:	bf00      	nop
  prev = NULL;
 801504a:	2300      	movs	r3, #0
 801504c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 801504e:	4b90      	ldr	r3, [pc, #576]	@ (8015290 <tcp_slowtmr+0x26c>)
 8015050:	681b      	ldr	r3, [r3, #0]
 8015052:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8015054:	e29f      	b.n	8015596 <tcp_slowtmr+0x572>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8015056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015058:	7d1b      	ldrb	r3, [r3, #20]
 801505a:	2b00      	cmp	r3, #0
 801505c:	d106      	bne.n	801506c <tcp_slowtmr+0x48>
 801505e:	4b8d      	ldr	r3, [pc, #564]	@ (8015294 <tcp_slowtmr+0x270>)
 8015060:	f240 42be 	movw	r2, #1214	@ 0x4be
 8015064:	498c      	ldr	r1, [pc, #560]	@ (8015298 <tcp_slowtmr+0x274>)
 8015066:	488d      	ldr	r0, [pc, #564]	@ (801529c <tcp_slowtmr+0x278>)
 8015068:	f009 f890 	bl	801e18c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 801506c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801506e:	7d1b      	ldrb	r3, [r3, #20]
 8015070:	2b01      	cmp	r3, #1
 8015072:	d106      	bne.n	8015082 <tcp_slowtmr+0x5e>
 8015074:	4b87      	ldr	r3, [pc, #540]	@ (8015294 <tcp_slowtmr+0x270>)
 8015076:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 801507a:	4989      	ldr	r1, [pc, #548]	@ (80152a0 <tcp_slowtmr+0x27c>)
 801507c:	4887      	ldr	r0, [pc, #540]	@ (801529c <tcp_slowtmr+0x278>)
 801507e:	f009 f885 	bl	801e18c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8015082:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015084:	7d1b      	ldrb	r3, [r3, #20]
 8015086:	2b0a      	cmp	r3, #10
 8015088:	d106      	bne.n	8015098 <tcp_slowtmr+0x74>
 801508a:	4b82      	ldr	r3, [pc, #520]	@ (8015294 <tcp_slowtmr+0x270>)
 801508c:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8015090:	4984      	ldr	r1, [pc, #528]	@ (80152a4 <tcp_slowtmr+0x280>)
 8015092:	4882      	ldr	r0, [pc, #520]	@ (801529c <tcp_slowtmr+0x278>)
 8015094:	f009 f87a 	bl	801e18c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8015098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801509a:	7f9a      	ldrb	r2, [r3, #30]
 801509c:	4b7b      	ldr	r3, [pc, #492]	@ (801528c <tcp_slowtmr+0x268>)
 801509e:	781b      	ldrb	r3, [r3, #0]
 80150a0:	429a      	cmp	r2, r3
 80150a2:	d105      	bne.n	80150b0 <tcp_slowtmr+0x8c>
      prev = pcb;
 80150a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80150a6:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80150a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80150aa:	68db      	ldr	r3, [r3, #12]
 80150ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 80150ae:	e272      	b.n	8015596 <tcp_slowtmr+0x572>
    pcb->last_timer = tcp_timer_ctr;
 80150b0:	4b76      	ldr	r3, [pc, #472]	@ (801528c <tcp_slowtmr+0x268>)
 80150b2:	781a      	ldrb	r2, [r3, #0]
 80150b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80150b6:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 80150b8:	2300      	movs	r3, #0
 80150ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 80150be:	2300      	movs	r3, #0
 80150c0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80150c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80150c6:	7d1b      	ldrb	r3, [r3, #20]
 80150c8:	2b02      	cmp	r3, #2
 80150ca:	d10a      	bne.n	80150e2 <tcp_slowtmr+0xbe>
 80150cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80150ce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80150d2:	2b05      	cmp	r3, #5
 80150d4:	d905      	bls.n	80150e2 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 80150d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80150da:	3301      	adds	r3, #1
 80150dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80150e0:	e11e      	b.n	8015320 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80150e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80150e4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80150e8:	2b0b      	cmp	r3, #11
 80150ea:	d905      	bls.n	80150f8 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 80150ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80150f0:	3301      	adds	r3, #1
 80150f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80150f6:	e113      	b.n	8015320 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 80150f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80150fa:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80150fe:	2b00      	cmp	r3, #0
 8015100:	d075      	beq.n	80151ee <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8015102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015104:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015106:	2b00      	cmp	r3, #0
 8015108:	d006      	beq.n	8015118 <tcp_slowtmr+0xf4>
 801510a:	4b62      	ldr	r3, [pc, #392]	@ (8015294 <tcp_slowtmr+0x270>)
 801510c:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8015110:	4965      	ldr	r1, [pc, #404]	@ (80152a8 <tcp_slowtmr+0x284>)
 8015112:	4862      	ldr	r0, [pc, #392]	@ (801529c <tcp_slowtmr+0x278>)
 8015114:	f009 f83a 	bl	801e18c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8015118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801511a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801511c:	2b00      	cmp	r3, #0
 801511e:	d106      	bne.n	801512e <tcp_slowtmr+0x10a>
 8015120:	4b5c      	ldr	r3, [pc, #368]	@ (8015294 <tcp_slowtmr+0x270>)
 8015122:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8015126:	4961      	ldr	r1, [pc, #388]	@ (80152ac <tcp_slowtmr+0x288>)
 8015128:	485c      	ldr	r0, [pc, #368]	@ (801529c <tcp_slowtmr+0x278>)
 801512a:	f009 f82f 	bl	801e18c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801512e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015130:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8015134:	2b0b      	cmp	r3, #11
 8015136:	d905      	bls.n	8015144 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8015138:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801513c:	3301      	adds	r3, #1
 801513e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015142:	e0ed      	b.n	8015320 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8015144:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015146:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801514a:	3b01      	subs	r3, #1
 801514c:	4a58      	ldr	r2, [pc, #352]	@ (80152b0 <tcp_slowtmr+0x28c>)
 801514e:	5cd3      	ldrb	r3, [r2, r3]
 8015150:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8015152:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015154:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8015158:	7c7a      	ldrb	r2, [r7, #17]
 801515a:	429a      	cmp	r2, r3
 801515c:	d907      	bls.n	801516e <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 801515e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015160:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8015164:	3301      	adds	r3, #1
 8015166:	b2da      	uxtb	r2, r3
 8015168:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801516a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 801516e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015170:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8015174:	7c7a      	ldrb	r2, [r7, #17]
 8015176:	429a      	cmp	r2, r3
 8015178:	f200 80d2 	bhi.w	8015320 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 801517c:	2301      	movs	r3, #1
 801517e:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8015180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015182:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8015186:	2b00      	cmp	r3, #0
 8015188:	d108      	bne.n	801519c <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 801518a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801518c:	f005 f920 	bl	801a3d0 <tcp_zero_window_probe>
 8015190:	4603      	mov	r3, r0
 8015192:	2b00      	cmp	r3, #0
 8015194:	d014      	beq.n	80151c0 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8015196:	2300      	movs	r3, #0
 8015198:	623b      	str	r3, [r7, #32]
 801519a:	e011      	b.n	80151c0 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 801519c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801519e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80151a2:	4619      	mov	r1, r3
 80151a4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80151a6:	f003 ffe5 	bl	8019174 <tcp_split_unsent_seg>
 80151aa:	4603      	mov	r3, r0
 80151ac:	2b00      	cmp	r3, #0
 80151ae:	d107      	bne.n	80151c0 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 80151b0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80151b2:	f004 fa65 	bl	8019680 <tcp_output>
 80151b6:	4603      	mov	r3, r0
 80151b8:	2b00      	cmp	r3, #0
 80151ba:	d101      	bne.n	80151c0 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 80151bc:	2300      	movs	r3, #0
 80151be:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 80151c0:	6a3b      	ldr	r3, [r7, #32]
 80151c2:	2b00      	cmp	r3, #0
 80151c4:	f000 80ac 	beq.w	8015320 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 80151c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151ca:	2200      	movs	r2, #0
 80151cc:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80151d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151d2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80151d6:	2b06      	cmp	r3, #6
 80151d8:	f200 80a2 	bhi.w	8015320 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 80151dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151de:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80151e2:	3301      	adds	r3, #1
 80151e4:	b2da      	uxtb	r2, r3
 80151e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151e8:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 80151ec:	e098      	b.n	8015320 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80151ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151f0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80151f4:	2b00      	cmp	r3, #0
 80151f6:	db0f      	blt.n	8015218 <tcp_slowtmr+0x1f4>
 80151f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151fa:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80151fe:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8015202:	4293      	cmp	r3, r2
 8015204:	d008      	beq.n	8015218 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 8015206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015208:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801520c:	b29b      	uxth	r3, r3
 801520e:	3301      	adds	r3, #1
 8015210:	b29b      	uxth	r3, r3
 8015212:	b21a      	sxth	r2, r3
 8015214:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015216:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8015218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801521a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 801521e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015220:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8015224:	429a      	cmp	r2, r3
 8015226:	db7b      	blt.n	8015320 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8015228:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801522a:	f004 fd1d 	bl	8019c68 <tcp_rexmit_rto_prepare>
 801522e:	4603      	mov	r3, r0
 8015230:	2b00      	cmp	r3, #0
 8015232:	d007      	beq.n	8015244 <tcp_slowtmr+0x220>
 8015234:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015236:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015238:	2b00      	cmp	r3, #0
 801523a:	d171      	bne.n	8015320 <tcp_slowtmr+0x2fc>
 801523c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801523e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015240:	2b00      	cmp	r3, #0
 8015242:	d06d      	beq.n	8015320 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 8015244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015246:	7d1b      	ldrb	r3, [r3, #20]
 8015248:	2b02      	cmp	r3, #2
 801524a:	d03a      	beq.n	80152c2 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 801524c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801524e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015252:	2b0c      	cmp	r3, #12
 8015254:	bf28      	it	cs
 8015256:	230c      	movcs	r3, #12
 8015258:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801525a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801525c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8015260:	10db      	asrs	r3, r3, #3
 8015262:	b21b      	sxth	r3, r3
 8015264:	461a      	mov	r2, r3
 8015266:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015268:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801526c:	4413      	add	r3, r2
 801526e:	7efa      	ldrb	r2, [r7, #27]
 8015270:	4910      	ldr	r1, [pc, #64]	@ (80152b4 <tcp_slowtmr+0x290>)
 8015272:	5c8a      	ldrb	r2, [r1, r2]
 8015274:	4093      	lsls	r3, r2
 8015276:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8015278:	697b      	ldr	r3, [r7, #20]
 801527a:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 801527e:	4293      	cmp	r3, r2
 8015280:	dc1a      	bgt.n	80152b8 <tcp_slowtmr+0x294>
 8015282:	697b      	ldr	r3, [r7, #20]
 8015284:	b21a      	sxth	r2, r3
 8015286:	e019      	b.n	80152bc <tcp_slowtmr+0x298>
 8015288:	2000cac0 	.word	0x2000cac0
 801528c:	2000cad6 	.word	0x2000cad6
 8015290:	2000cacc 	.word	0x2000cacc
 8015294:	08021d08 	.word	0x08021d08
 8015298:	0802204c 	.word	0x0802204c
 801529c:	08021d4c 	.word	0x08021d4c
 80152a0:	08022078 	.word	0x08022078
 80152a4:	080220a4 	.word	0x080220a4
 80152a8:	080220d4 	.word	0x080220d4
 80152ac:	08022108 	.word	0x08022108
 80152b0:	08023d70 	.word	0x08023d70
 80152b4:	08023d60 	.word	0x08023d60
 80152b8:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80152bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152be:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 80152c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152c4:	2200      	movs	r2, #0
 80152c6:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80152c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152ca:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80152ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152d0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80152d4:	4293      	cmp	r3, r2
 80152d6:	bf28      	it	cs
 80152d8:	4613      	movcs	r3, r2
 80152da:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80152dc:	8a7b      	ldrh	r3, [r7, #18]
 80152de:	085b      	lsrs	r3, r3, #1
 80152e0:	b29a      	uxth	r2, r3
 80152e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152e4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80152e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152ea:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80152ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152f0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80152f2:	005b      	lsls	r3, r3, #1
 80152f4:	b29b      	uxth	r3, r3
 80152f6:	429a      	cmp	r2, r3
 80152f8:	d206      	bcs.n	8015308 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80152fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152fc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80152fe:	005b      	lsls	r3, r3, #1
 8015300:	b29a      	uxth	r2, r3
 8015302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015304:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8015308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801530a:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 801530c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801530e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 8015312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015314:	2200      	movs	r2, #0
 8015316:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 801531a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801531c:	f004 fd14 	bl	8019d48 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 8015320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015322:	7d1b      	ldrb	r3, [r3, #20]
 8015324:	2b06      	cmp	r3, #6
 8015326:	d111      	bne.n	801534c <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8015328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801532a:	8b5b      	ldrh	r3, [r3, #26]
 801532c:	f003 0310 	and.w	r3, r3, #16
 8015330:	2b00      	cmp	r3, #0
 8015332:	d00b      	beq.n	801534c <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015334:	4b9d      	ldr	r3, [pc, #628]	@ (80155ac <tcp_slowtmr+0x588>)
 8015336:	681a      	ldr	r2, [r3, #0]
 8015338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801533a:	6a1b      	ldr	r3, [r3, #32]
 801533c:	1ad3      	subs	r3, r2, r3
 801533e:	2b28      	cmp	r3, #40	@ 0x28
 8015340:	d904      	bls.n	801534c <tcp_slowtmr+0x328>
          ++pcb_remove;
 8015342:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015346:	3301      	adds	r3, #1
 8015348:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801534c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801534e:	7a5b      	ldrb	r3, [r3, #9]
 8015350:	f003 0308 	and.w	r3, r3, #8
 8015354:	2b00      	cmp	r3, #0
 8015356:	d04c      	beq.n	80153f2 <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 8015358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801535a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801535c:	2b04      	cmp	r3, #4
 801535e:	d003      	beq.n	8015368 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8015360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015362:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8015364:	2b07      	cmp	r3, #7
 8015366:	d144      	bne.n	80153f2 <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015368:	4b90      	ldr	r3, [pc, #576]	@ (80155ac <tcp_slowtmr+0x588>)
 801536a:	681a      	ldr	r2, [r3, #0]
 801536c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801536e:	6a1b      	ldr	r3, [r3, #32]
 8015370:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8015372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015374:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8015378:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 801537c:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 8015380:	498b      	ldr	r1, [pc, #556]	@ (80155b0 <tcp_slowtmr+0x58c>)
 8015382:	fba1 1303 	umull	r1, r3, r1, r3
 8015386:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015388:	429a      	cmp	r2, r3
 801538a:	d90a      	bls.n	80153a2 <tcp_slowtmr+0x37e>
        ++pcb_remove;
 801538c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015390:	3301      	adds	r3, #1
 8015392:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8015396:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801539a:	3301      	adds	r3, #1
 801539c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80153a0:	e027      	b.n	80153f2 <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80153a2:	4b82      	ldr	r3, [pc, #520]	@ (80155ac <tcp_slowtmr+0x588>)
 80153a4:	681a      	ldr	r2, [r3, #0]
 80153a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80153a8:	6a1b      	ldr	r3, [r3, #32]
 80153aa:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80153ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80153ae:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 80153b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80153b4:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 80153b8:	4618      	mov	r0, r3
 80153ba:	4b7e      	ldr	r3, [pc, #504]	@ (80155b4 <tcp_slowtmr+0x590>)
 80153bc:	fb00 f303 	mul.w	r3, r0, r3
 80153c0:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80153c2:	497b      	ldr	r1, [pc, #492]	@ (80155b0 <tcp_slowtmr+0x58c>)
 80153c4:	fba1 1303 	umull	r1, r3, r1, r3
 80153c8:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80153ca:	429a      	cmp	r2, r3
 80153cc:	d911      	bls.n	80153f2 <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 80153ce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80153d0:	f004 ffbe 	bl	801a350 <tcp_keepalive>
 80153d4:	4603      	mov	r3, r0
 80153d6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 80153da:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80153de:	2b00      	cmp	r3, #0
 80153e0:	d107      	bne.n	80153f2 <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 80153e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80153e4:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 80153e8:	3301      	adds	r3, #1
 80153ea:	b2da      	uxtb	r2, r3
 80153ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80153ee:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 80153f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80153f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80153f6:	2b00      	cmp	r3, #0
 80153f8:	d011      	beq.n	801541e <tcp_slowtmr+0x3fa>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80153fa:	4b6c      	ldr	r3, [pc, #432]	@ (80155ac <tcp_slowtmr+0x588>)
 80153fc:	681a      	ldr	r2, [r3, #0]
 80153fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015400:	6a1b      	ldr	r3, [r3, #32]
 8015402:	1ad2      	subs	r2, r2, r3
 8015404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015406:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 801540a:	4619      	mov	r1, r3
 801540c:	460b      	mov	r3, r1
 801540e:	005b      	lsls	r3, r3, #1
 8015410:	440b      	add	r3, r1
 8015412:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8015414:	429a      	cmp	r2, r3
 8015416:	d302      	bcc.n	801541e <tcp_slowtmr+0x3fa>
      tcp_free_ooseq(pcb);
 8015418:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801541a:	f000 fe7f 	bl	801611c <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 801541e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015420:	7d1b      	ldrb	r3, [r3, #20]
 8015422:	2b03      	cmp	r3, #3
 8015424:	d10b      	bne.n	801543e <tcp_slowtmr+0x41a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015426:	4b61      	ldr	r3, [pc, #388]	@ (80155ac <tcp_slowtmr+0x588>)
 8015428:	681a      	ldr	r2, [r3, #0]
 801542a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801542c:	6a1b      	ldr	r3, [r3, #32]
 801542e:	1ad3      	subs	r3, r2, r3
 8015430:	2b28      	cmp	r3, #40	@ 0x28
 8015432:	d904      	bls.n	801543e <tcp_slowtmr+0x41a>
        ++pcb_remove;
 8015434:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015438:	3301      	adds	r3, #1
 801543a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 801543e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015440:	7d1b      	ldrb	r3, [r3, #20]
 8015442:	2b09      	cmp	r3, #9
 8015444:	d10b      	bne.n	801545e <tcp_slowtmr+0x43a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8015446:	4b59      	ldr	r3, [pc, #356]	@ (80155ac <tcp_slowtmr+0x588>)
 8015448:	681a      	ldr	r2, [r3, #0]
 801544a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801544c:	6a1b      	ldr	r3, [r3, #32]
 801544e:	1ad3      	subs	r3, r2, r3
 8015450:	2bf0      	cmp	r3, #240	@ 0xf0
 8015452:	d904      	bls.n	801545e <tcp_slowtmr+0x43a>
        ++pcb_remove;
 8015454:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015458:	3301      	adds	r3, #1
 801545a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 801545e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015462:	2b00      	cmp	r3, #0
 8015464:	d060      	beq.n	8015528 <tcp_slowtmr+0x504>
      tcp_err_fn err_fn = pcb->errf;
 8015466:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015468:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801546c:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 801546e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015470:	f000 fca0 	bl	8015db4 <tcp_pcb_purge>
      if (prev != NULL) {
 8015474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015476:	2b00      	cmp	r3, #0
 8015478:	d010      	beq.n	801549c <tcp_slowtmr+0x478>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801547a:	4b4f      	ldr	r3, [pc, #316]	@ (80155b8 <tcp_slowtmr+0x594>)
 801547c:	681b      	ldr	r3, [r3, #0]
 801547e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015480:	429a      	cmp	r2, r3
 8015482:	d106      	bne.n	8015492 <tcp_slowtmr+0x46e>
 8015484:	4b4d      	ldr	r3, [pc, #308]	@ (80155bc <tcp_slowtmr+0x598>)
 8015486:	f240 526d 	movw	r2, #1389	@ 0x56d
 801548a:	494d      	ldr	r1, [pc, #308]	@ (80155c0 <tcp_slowtmr+0x59c>)
 801548c:	484d      	ldr	r0, [pc, #308]	@ (80155c4 <tcp_slowtmr+0x5a0>)
 801548e:	f008 fe7d 	bl	801e18c <iprintf>
        prev->next = pcb->next;
 8015492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015494:	68da      	ldr	r2, [r3, #12]
 8015496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015498:	60da      	str	r2, [r3, #12]
 801549a:	e00f      	b.n	80154bc <tcp_slowtmr+0x498>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 801549c:	4b46      	ldr	r3, [pc, #280]	@ (80155b8 <tcp_slowtmr+0x594>)
 801549e:	681b      	ldr	r3, [r3, #0]
 80154a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80154a2:	429a      	cmp	r2, r3
 80154a4:	d006      	beq.n	80154b4 <tcp_slowtmr+0x490>
 80154a6:	4b45      	ldr	r3, [pc, #276]	@ (80155bc <tcp_slowtmr+0x598>)
 80154a8:	f240 5271 	movw	r2, #1393	@ 0x571
 80154ac:	4946      	ldr	r1, [pc, #280]	@ (80155c8 <tcp_slowtmr+0x5a4>)
 80154ae:	4845      	ldr	r0, [pc, #276]	@ (80155c4 <tcp_slowtmr+0x5a0>)
 80154b0:	f008 fe6c 	bl	801e18c <iprintf>
        tcp_active_pcbs = pcb->next;
 80154b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154b6:	68db      	ldr	r3, [r3, #12]
 80154b8:	4a3f      	ldr	r2, [pc, #252]	@ (80155b8 <tcp_slowtmr+0x594>)
 80154ba:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 80154bc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80154c0:	2b00      	cmp	r3, #0
 80154c2:	d013      	beq.n	80154ec <tcp_slowtmr+0x4c8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80154c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154c6:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80154c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154ca:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80154cc:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 80154ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154d0:	3304      	adds	r3, #4
 80154d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80154d4:	8ad2      	ldrh	r2, [r2, #22]
 80154d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80154d8:	8b09      	ldrh	r1, [r1, #24]
 80154da:	9102      	str	r1, [sp, #8]
 80154dc:	9201      	str	r2, [sp, #4]
 80154de:	9300      	str	r3, [sp, #0]
 80154e0:	462b      	mov	r3, r5
 80154e2:	4622      	mov	r2, r4
 80154e4:	4601      	mov	r1, r0
 80154e6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80154e8:	f004 fe7e 	bl	801a1e8 <tcp_rst>
      err_arg = pcb->callback_arg;
 80154ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154ee:	691b      	ldr	r3, [r3, #16]
 80154f0:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80154f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154f4:	7d1b      	ldrb	r3, [r3, #20]
 80154f6:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80154f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154fa:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80154fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154fe:	68db      	ldr	r3, [r3, #12]
 8015500:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8015502:	6838      	ldr	r0, [r7, #0]
 8015504:	f7ff f836 	bl	8014574 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8015508:	4b30      	ldr	r3, [pc, #192]	@ (80155cc <tcp_slowtmr+0x5a8>)
 801550a:	2200      	movs	r2, #0
 801550c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801550e:	68fb      	ldr	r3, [r7, #12]
 8015510:	2b00      	cmp	r3, #0
 8015512:	d004      	beq.n	801551e <tcp_slowtmr+0x4fa>
 8015514:	68fb      	ldr	r3, [r7, #12]
 8015516:	f06f 010c 	mvn.w	r1, #12
 801551a:	68b8      	ldr	r0, [r7, #8]
 801551c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 801551e:	4b2b      	ldr	r3, [pc, #172]	@ (80155cc <tcp_slowtmr+0x5a8>)
 8015520:	781b      	ldrb	r3, [r3, #0]
 8015522:	2b00      	cmp	r3, #0
 8015524:	d037      	beq.n	8015596 <tcp_slowtmr+0x572>
        goto tcp_slowtmr_start;
 8015526:	e590      	b.n	801504a <tcp_slowtmr+0x26>
      prev = pcb;
 8015528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801552a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 801552c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801552e:	68db      	ldr	r3, [r3, #12]
 8015530:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 8015532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015534:	7f1b      	ldrb	r3, [r3, #28]
 8015536:	3301      	adds	r3, #1
 8015538:	b2da      	uxtb	r2, r3
 801553a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801553c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801553e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015540:	7f1a      	ldrb	r2, [r3, #28]
 8015542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015544:	7f5b      	ldrb	r3, [r3, #29]
 8015546:	429a      	cmp	r2, r3
 8015548:	d325      	bcc.n	8015596 <tcp_slowtmr+0x572>
        prev->polltmr = 0;
 801554a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801554c:	2200      	movs	r2, #0
 801554e:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8015550:	4b1e      	ldr	r3, [pc, #120]	@ (80155cc <tcp_slowtmr+0x5a8>)
 8015552:	2200      	movs	r2, #0
 8015554:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8015556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015558:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801555c:	2b00      	cmp	r3, #0
 801555e:	d00b      	beq.n	8015578 <tcp_slowtmr+0x554>
 8015560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015562:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8015566:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015568:	6912      	ldr	r2, [r2, #16]
 801556a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801556c:	4610      	mov	r0, r2
 801556e:	4798      	blx	r3
 8015570:	4603      	mov	r3, r0
 8015572:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8015576:	e002      	b.n	801557e <tcp_slowtmr+0x55a>
 8015578:	2300      	movs	r3, #0
 801557a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 801557e:	4b13      	ldr	r3, [pc, #76]	@ (80155cc <tcp_slowtmr+0x5a8>)
 8015580:	781b      	ldrb	r3, [r3, #0]
 8015582:	2b00      	cmp	r3, #0
 8015584:	f47f ad60 	bne.w	8015048 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8015588:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 801558c:	2b00      	cmp	r3, #0
 801558e:	d102      	bne.n	8015596 <tcp_slowtmr+0x572>
          tcp_output(prev);
 8015590:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015592:	f004 f875 	bl	8019680 <tcp_output>
  while (pcb != NULL) {
 8015596:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015598:	2b00      	cmp	r3, #0
 801559a:	f47f ad5c 	bne.w	8015056 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 801559e:	2300      	movs	r3, #0
 80155a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 80155a2:	4b0b      	ldr	r3, [pc, #44]	@ (80155d0 <tcp_slowtmr+0x5ac>)
 80155a4:	681b      	ldr	r3, [r3, #0]
 80155a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80155a8:	e067      	b.n	801567a <tcp_slowtmr+0x656>
 80155aa:	bf00      	nop
 80155ac:	2000cac0 	.word	0x2000cac0
 80155b0:	10624dd3 	.word	0x10624dd3
 80155b4:	000124f8 	.word	0x000124f8
 80155b8:	2000cacc 	.word	0x2000cacc
 80155bc:	08021d08 	.word	0x08021d08
 80155c0:	08022140 	.word	0x08022140
 80155c4:	08021d4c 	.word	0x08021d4c
 80155c8:	0802216c 	.word	0x0802216c
 80155cc:	2000cad4 	.word	0x2000cad4
 80155d0:	2000cad0 	.word	0x2000cad0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80155d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80155d6:	7d1b      	ldrb	r3, [r3, #20]
 80155d8:	2b0a      	cmp	r3, #10
 80155da:	d006      	beq.n	80155ea <tcp_slowtmr+0x5c6>
 80155dc:	4b2b      	ldr	r3, [pc, #172]	@ (801568c <tcp_slowtmr+0x668>)
 80155de:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 80155e2:	492b      	ldr	r1, [pc, #172]	@ (8015690 <tcp_slowtmr+0x66c>)
 80155e4:	482b      	ldr	r0, [pc, #172]	@ (8015694 <tcp_slowtmr+0x670>)
 80155e6:	f008 fdd1 	bl	801e18c <iprintf>
    pcb_remove = 0;
 80155ea:	2300      	movs	r3, #0
 80155ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80155f0:	4b29      	ldr	r3, [pc, #164]	@ (8015698 <tcp_slowtmr+0x674>)
 80155f2:	681a      	ldr	r2, [r3, #0]
 80155f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80155f6:	6a1b      	ldr	r3, [r3, #32]
 80155f8:	1ad3      	subs	r3, r2, r3
 80155fa:	2bf0      	cmp	r3, #240	@ 0xf0
 80155fc:	d904      	bls.n	8015608 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 80155fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015602:	3301      	adds	r3, #1
 8015604:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8015608:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801560c:	2b00      	cmp	r3, #0
 801560e:	d02f      	beq.n	8015670 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8015610:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015612:	f000 fbcf 	bl	8015db4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8015616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015618:	2b00      	cmp	r3, #0
 801561a:	d010      	beq.n	801563e <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 801561c:	4b1f      	ldr	r3, [pc, #124]	@ (801569c <tcp_slowtmr+0x678>)
 801561e:	681b      	ldr	r3, [r3, #0]
 8015620:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015622:	429a      	cmp	r2, r3
 8015624:	d106      	bne.n	8015634 <tcp_slowtmr+0x610>
 8015626:	4b19      	ldr	r3, [pc, #100]	@ (801568c <tcp_slowtmr+0x668>)
 8015628:	f240 52af 	movw	r2, #1455	@ 0x5af
 801562c:	491c      	ldr	r1, [pc, #112]	@ (80156a0 <tcp_slowtmr+0x67c>)
 801562e:	4819      	ldr	r0, [pc, #100]	@ (8015694 <tcp_slowtmr+0x670>)
 8015630:	f008 fdac 	bl	801e18c <iprintf>
        prev->next = pcb->next;
 8015634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015636:	68da      	ldr	r2, [r3, #12]
 8015638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801563a:	60da      	str	r2, [r3, #12]
 801563c:	e00f      	b.n	801565e <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801563e:	4b17      	ldr	r3, [pc, #92]	@ (801569c <tcp_slowtmr+0x678>)
 8015640:	681b      	ldr	r3, [r3, #0]
 8015642:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015644:	429a      	cmp	r2, r3
 8015646:	d006      	beq.n	8015656 <tcp_slowtmr+0x632>
 8015648:	4b10      	ldr	r3, [pc, #64]	@ (801568c <tcp_slowtmr+0x668>)
 801564a:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 801564e:	4915      	ldr	r1, [pc, #84]	@ (80156a4 <tcp_slowtmr+0x680>)
 8015650:	4810      	ldr	r0, [pc, #64]	@ (8015694 <tcp_slowtmr+0x670>)
 8015652:	f008 fd9b 	bl	801e18c <iprintf>
        tcp_tw_pcbs = pcb->next;
 8015656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015658:	68db      	ldr	r3, [r3, #12]
 801565a:	4a10      	ldr	r2, [pc, #64]	@ (801569c <tcp_slowtmr+0x678>)
 801565c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801565e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015660:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8015662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015664:	68db      	ldr	r3, [r3, #12]
 8015666:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8015668:	69f8      	ldr	r0, [r7, #28]
 801566a:	f7fe ff83 	bl	8014574 <tcp_free>
 801566e:	e004      	b.n	801567a <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8015670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015672:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8015674:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015676:	68db      	ldr	r3, [r3, #12]
 8015678:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 801567a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801567c:	2b00      	cmp	r3, #0
 801567e:	d1a9      	bne.n	80155d4 <tcp_slowtmr+0x5b0>
    }
  }
}
 8015680:	bf00      	nop
 8015682:	bf00      	nop
 8015684:	3730      	adds	r7, #48	@ 0x30
 8015686:	46bd      	mov	sp, r7
 8015688:	bdb0      	pop	{r4, r5, r7, pc}
 801568a:	bf00      	nop
 801568c:	08021d08 	.word	0x08021d08
 8015690:	08022198 	.word	0x08022198
 8015694:	08021d4c 	.word	0x08021d4c
 8015698:	2000cac0 	.word	0x2000cac0
 801569c:	2000cad0 	.word	0x2000cad0
 80156a0:	080221c8 	.word	0x080221c8
 80156a4:	080221f0 	.word	0x080221f0

080156a8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80156a8:	b580      	push	{r7, lr}
 80156aa:	b082      	sub	sp, #8
 80156ac:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80156ae:	4b2d      	ldr	r3, [pc, #180]	@ (8015764 <tcp_fasttmr+0xbc>)
 80156b0:	781b      	ldrb	r3, [r3, #0]
 80156b2:	3301      	adds	r3, #1
 80156b4:	b2da      	uxtb	r2, r3
 80156b6:	4b2b      	ldr	r3, [pc, #172]	@ (8015764 <tcp_fasttmr+0xbc>)
 80156b8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80156ba:	4b2b      	ldr	r3, [pc, #172]	@ (8015768 <tcp_fasttmr+0xc0>)
 80156bc:	681b      	ldr	r3, [r3, #0]
 80156be:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80156c0:	e048      	b.n	8015754 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80156c2:	687b      	ldr	r3, [r7, #4]
 80156c4:	7f9a      	ldrb	r2, [r3, #30]
 80156c6:	4b27      	ldr	r3, [pc, #156]	@ (8015764 <tcp_fasttmr+0xbc>)
 80156c8:	781b      	ldrb	r3, [r3, #0]
 80156ca:	429a      	cmp	r2, r3
 80156cc:	d03f      	beq.n	801574e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80156ce:	4b25      	ldr	r3, [pc, #148]	@ (8015764 <tcp_fasttmr+0xbc>)
 80156d0:	781a      	ldrb	r2, [r3, #0]
 80156d2:	687b      	ldr	r3, [r7, #4]
 80156d4:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80156d6:	687b      	ldr	r3, [r7, #4]
 80156d8:	8b5b      	ldrh	r3, [r3, #26]
 80156da:	f003 0301 	and.w	r3, r3, #1
 80156de:	2b00      	cmp	r3, #0
 80156e0:	d010      	beq.n	8015704 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80156e2:	687b      	ldr	r3, [r7, #4]
 80156e4:	8b5b      	ldrh	r3, [r3, #26]
 80156e6:	f043 0302 	orr.w	r3, r3, #2
 80156ea:	b29a      	uxth	r2, r3
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80156f0:	6878      	ldr	r0, [r7, #4]
 80156f2:	f003 ffc5 	bl	8019680 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80156f6:	687b      	ldr	r3, [r7, #4]
 80156f8:	8b5b      	ldrh	r3, [r3, #26]
 80156fa:	f023 0303 	bic.w	r3, r3, #3
 80156fe:	b29a      	uxth	r2, r3
 8015700:	687b      	ldr	r3, [r7, #4]
 8015702:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8015704:	687b      	ldr	r3, [r7, #4]
 8015706:	8b5b      	ldrh	r3, [r3, #26]
 8015708:	f003 0308 	and.w	r3, r3, #8
 801570c:	2b00      	cmp	r3, #0
 801570e:	d009      	beq.n	8015724 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8015710:	687b      	ldr	r3, [r7, #4]
 8015712:	8b5b      	ldrh	r3, [r3, #26]
 8015714:	f023 0308 	bic.w	r3, r3, #8
 8015718:	b29a      	uxth	r2, r3
 801571a:	687b      	ldr	r3, [r7, #4]
 801571c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801571e:	6878      	ldr	r0, [r7, #4]
 8015720:	f7ff f8bc 	bl	801489c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8015724:	687b      	ldr	r3, [r7, #4]
 8015726:	68db      	ldr	r3, [r3, #12]
 8015728:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801572a:	687b      	ldr	r3, [r7, #4]
 801572c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801572e:	2b00      	cmp	r3, #0
 8015730:	d00a      	beq.n	8015748 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8015732:	4b0e      	ldr	r3, [pc, #56]	@ (801576c <tcp_fasttmr+0xc4>)
 8015734:	2200      	movs	r2, #0
 8015736:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8015738:	6878      	ldr	r0, [r7, #4]
 801573a:	f000 f819 	bl	8015770 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801573e:	4b0b      	ldr	r3, [pc, #44]	@ (801576c <tcp_fasttmr+0xc4>)
 8015740:	781b      	ldrb	r3, [r3, #0]
 8015742:	2b00      	cmp	r3, #0
 8015744:	d000      	beq.n	8015748 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8015746:	e7b8      	b.n	80156ba <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8015748:	683b      	ldr	r3, [r7, #0]
 801574a:	607b      	str	r3, [r7, #4]
 801574c:	e002      	b.n	8015754 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801574e:	687b      	ldr	r3, [r7, #4]
 8015750:	68db      	ldr	r3, [r3, #12]
 8015752:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8015754:	687b      	ldr	r3, [r7, #4]
 8015756:	2b00      	cmp	r3, #0
 8015758:	d1b3      	bne.n	80156c2 <tcp_fasttmr+0x1a>
    }
  }
}
 801575a:	bf00      	nop
 801575c:	bf00      	nop
 801575e:	3708      	adds	r7, #8
 8015760:	46bd      	mov	sp, r7
 8015762:	bd80      	pop	{r7, pc}
 8015764:	2000cad6 	.word	0x2000cad6
 8015768:	2000cacc 	.word	0x2000cacc
 801576c:	2000cad4 	.word	0x2000cad4

08015770 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8015770:	b590      	push	{r4, r7, lr}
 8015772:	b085      	sub	sp, #20
 8015774:	af00      	add	r7, sp, #0
 8015776:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8015778:	687b      	ldr	r3, [r7, #4]
 801577a:	2b00      	cmp	r3, #0
 801577c:	d109      	bne.n	8015792 <tcp_process_refused_data+0x22>
 801577e:	4b37      	ldr	r3, [pc, #220]	@ (801585c <tcp_process_refused_data+0xec>)
 8015780:	f240 6209 	movw	r2, #1545	@ 0x609
 8015784:	4936      	ldr	r1, [pc, #216]	@ (8015860 <tcp_process_refused_data+0xf0>)
 8015786:	4837      	ldr	r0, [pc, #220]	@ (8015864 <tcp_process_refused_data+0xf4>)
 8015788:	f008 fd00 	bl	801e18c <iprintf>
 801578c:	f06f 030f 	mvn.w	r3, #15
 8015790:	e060      	b.n	8015854 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015796:	7b5b      	ldrb	r3, [r3, #13]
 8015798:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801579a:	687b      	ldr	r3, [r7, #4]
 801579c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801579e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80157a0:	687b      	ldr	r3, [r7, #4]
 80157a2:	2200      	movs	r2, #0
 80157a4:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80157a6:	687b      	ldr	r3, [r7, #4]
 80157a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80157ac:	2b00      	cmp	r3, #0
 80157ae:	d00b      	beq.n	80157c8 <tcp_process_refused_data+0x58>
 80157b0:	687b      	ldr	r3, [r7, #4]
 80157b2:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80157b6:	687b      	ldr	r3, [r7, #4]
 80157b8:	6918      	ldr	r0, [r3, #16]
 80157ba:	2300      	movs	r3, #0
 80157bc:	68ba      	ldr	r2, [r7, #8]
 80157be:	6879      	ldr	r1, [r7, #4]
 80157c0:	47a0      	blx	r4
 80157c2:	4603      	mov	r3, r0
 80157c4:	73fb      	strb	r3, [r7, #15]
 80157c6:	e007      	b.n	80157d8 <tcp_process_refused_data+0x68>
 80157c8:	2300      	movs	r3, #0
 80157ca:	68ba      	ldr	r2, [r7, #8]
 80157cc:	6879      	ldr	r1, [r7, #4]
 80157ce:	2000      	movs	r0, #0
 80157d0:	f000 f8c2 	bl	8015958 <tcp_recv_null>
 80157d4:	4603      	mov	r3, r0
 80157d6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80157d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80157dc:	2b00      	cmp	r3, #0
 80157de:	d12a      	bne.n	8015836 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80157e0:	7bbb      	ldrb	r3, [r7, #14]
 80157e2:	f003 0320 	and.w	r3, r3, #32
 80157e6:	2b00      	cmp	r3, #0
 80157e8:	d033      	beq.n	8015852 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80157ea:	687b      	ldr	r3, [r7, #4]
 80157ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80157ee:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80157f2:	d005      	beq.n	8015800 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80157f4:	687b      	ldr	r3, [r7, #4]
 80157f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80157f8:	3301      	adds	r3, #1
 80157fa:	b29a      	uxth	r2, r3
 80157fc:	687b      	ldr	r3, [r7, #4]
 80157fe:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8015800:	687b      	ldr	r3, [r7, #4]
 8015802:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015806:	2b00      	cmp	r3, #0
 8015808:	d00b      	beq.n	8015822 <tcp_process_refused_data+0xb2>
 801580a:	687b      	ldr	r3, [r7, #4]
 801580c:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8015810:	687b      	ldr	r3, [r7, #4]
 8015812:	6918      	ldr	r0, [r3, #16]
 8015814:	2300      	movs	r3, #0
 8015816:	2200      	movs	r2, #0
 8015818:	6879      	ldr	r1, [r7, #4]
 801581a:	47a0      	blx	r4
 801581c:	4603      	mov	r3, r0
 801581e:	73fb      	strb	r3, [r7, #15]
 8015820:	e001      	b.n	8015826 <tcp_process_refused_data+0xb6>
 8015822:	2300      	movs	r3, #0
 8015824:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8015826:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801582a:	f113 0f0d 	cmn.w	r3, #13
 801582e:	d110      	bne.n	8015852 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8015830:	f06f 030c 	mvn.w	r3, #12
 8015834:	e00e      	b.n	8015854 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8015836:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801583a:	f113 0f0d 	cmn.w	r3, #13
 801583e:	d102      	bne.n	8015846 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8015840:	f06f 030c 	mvn.w	r3, #12
 8015844:	e006      	b.n	8015854 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8015846:	687b      	ldr	r3, [r7, #4]
 8015848:	68ba      	ldr	r2, [r7, #8]
 801584a:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 801584c:	f06f 0304 	mvn.w	r3, #4
 8015850:	e000      	b.n	8015854 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8015852:	2300      	movs	r3, #0
}
 8015854:	4618      	mov	r0, r3
 8015856:	3714      	adds	r7, #20
 8015858:	46bd      	mov	sp, r7
 801585a:	bd90      	pop	{r4, r7, pc}
 801585c:	08021d08 	.word	0x08021d08
 8015860:	08022218 	.word	0x08022218
 8015864:	08021d4c 	.word	0x08021d4c

08015868 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8015868:	b580      	push	{r7, lr}
 801586a:	b084      	sub	sp, #16
 801586c:	af00      	add	r7, sp, #0
 801586e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8015870:	e007      	b.n	8015882 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8015872:	687b      	ldr	r3, [r7, #4]
 8015874:	681b      	ldr	r3, [r3, #0]
 8015876:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8015878:	6878      	ldr	r0, [r7, #4]
 801587a:	f000 f80a 	bl	8015892 <tcp_seg_free>
    seg = next;
 801587e:	68fb      	ldr	r3, [r7, #12]
 8015880:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8015882:	687b      	ldr	r3, [r7, #4]
 8015884:	2b00      	cmp	r3, #0
 8015886:	d1f4      	bne.n	8015872 <tcp_segs_free+0xa>
  }
}
 8015888:	bf00      	nop
 801588a:	bf00      	nop
 801588c:	3710      	adds	r7, #16
 801588e:	46bd      	mov	sp, r7
 8015890:	bd80      	pop	{r7, pc}

08015892 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8015892:	b580      	push	{r7, lr}
 8015894:	b082      	sub	sp, #8
 8015896:	af00      	add	r7, sp, #0
 8015898:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801589a:	687b      	ldr	r3, [r7, #4]
 801589c:	2b00      	cmp	r3, #0
 801589e:	d00c      	beq.n	80158ba <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80158a0:	687b      	ldr	r3, [r7, #4]
 80158a2:	685b      	ldr	r3, [r3, #4]
 80158a4:	2b00      	cmp	r3, #0
 80158a6:	d004      	beq.n	80158b2 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80158a8:	687b      	ldr	r3, [r7, #4]
 80158aa:	685b      	ldr	r3, [r3, #4]
 80158ac:	4618      	mov	r0, r3
 80158ae:	f7fe fbb5 	bl	801401c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80158b2:	6879      	ldr	r1, [r7, #4]
 80158b4:	2003      	movs	r0, #3
 80158b6:	f7fd fd3f 	bl	8013338 <memp_free>
  }
}
 80158ba:	bf00      	nop
 80158bc:	3708      	adds	r7, #8
 80158be:	46bd      	mov	sp, r7
 80158c0:	bd80      	pop	{r7, pc}
	...

080158c4 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 80158c4:	b580      	push	{r7, lr}
 80158c6:	b082      	sub	sp, #8
 80158c8:	af00      	add	r7, sp, #0
 80158ca:	6078      	str	r0, [r7, #4]
 80158cc:	460b      	mov	r3, r1
 80158ce:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 80158d0:	687b      	ldr	r3, [r7, #4]
 80158d2:	2b00      	cmp	r3, #0
 80158d4:	d107      	bne.n	80158e6 <tcp_setprio+0x22>
 80158d6:	4b07      	ldr	r3, [pc, #28]	@ (80158f4 <tcp_setprio+0x30>)
 80158d8:	f44f 62ce 	mov.w	r2, #1648	@ 0x670
 80158dc:	4906      	ldr	r1, [pc, #24]	@ (80158f8 <tcp_setprio+0x34>)
 80158de:	4807      	ldr	r0, [pc, #28]	@ (80158fc <tcp_setprio+0x38>)
 80158e0:	f008 fc54 	bl	801e18c <iprintf>
 80158e4:	e002      	b.n	80158ec <tcp_setprio+0x28>

  pcb->prio = prio;
 80158e6:	687b      	ldr	r3, [r7, #4]
 80158e8:	78fa      	ldrb	r2, [r7, #3]
 80158ea:	755a      	strb	r2, [r3, #21]
}
 80158ec:	3708      	adds	r7, #8
 80158ee:	46bd      	mov	sp, r7
 80158f0:	bd80      	pop	{r7, pc}
 80158f2:	bf00      	nop
 80158f4:	08021d08 	.word	0x08021d08
 80158f8:	08022240 	.word	0x08022240
 80158fc:	08021d4c 	.word	0x08021d4c

08015900 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8015900:	b580      	push	{r7, lr}
 8015902:	b084      	sub	sp, #16
 8015904:	af00      	add	r7, sp, #0
 8015906:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8015908:	687b      	ldr	r3, [r7, #4]
 801590a:	2b00      	cmp	r3, #0
 801590c:	d106      	bne.n	801591c <tcp_seg_copy+0x1c>
 801590e:	4b0f      	ldr	r3, [pc, #60]	@ (801594c <tcp_seg_copy+0x4c>)
 8015910:	f240 6282 	movw	r2, #1666	@ 0x682
 8015914:	490e      	ldr	r1, [pc, #56]	@ (8015950 <tcp_seg_copy+0x50>)
 8015916:	480f      	ldr	r0, [pc, #60]	@ (8015954 <tcp_seg_copy+0x54>)
 8015918:	f008 fc38 	bl	801e18c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 801591c:	2003      	movs	r0, #3
 801591e:	f7fd fc95 	bl	801324c <memp_malloc>
 8015922:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8015924:	68fb      	ldr	r3, [r7, #12]
 8015926:	2b00      	cmp	r3, #0
 8015928:	d101      	bne.n	801592e <tcp_seg_copy+0x2e>
    return NULL;
 801592a:	2300      	movs	r3, #0
 801592c:	e00a      	b.n	8015944 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801592e:	2210      	movs	r2, #16
 8015930:	6879      	ldr	r1, [r7, #4]
 8015932:	68f8      	ldr	r0, [r7, #12]
 8015934:	f008 fddd 	bl	801e4f2 <memcpy>
  pbuf_ref(cseg->p);
 8015938:	68fb      	ldr	r3, [r7, #12]
 801593a:	685b      	ldr	r3, [r3, #4]
 801593c:	4618      	mov	r0, r3
 801593e:	f7fe fc13 	bl	8014168 <pbuf_ref>
  return cseg;
 8015942:	68fb      	ldr	r3, [r7, #12]
}
 8015944:	4618      	mov	r0, r3
 8015946:	3710      	adds	r7, #16
 8015948:	46bd      	mov	sp, r7
 801594a:	bd80      	pop	{r7, pc}
 801594c:	08021d08 	.word	0x08021d08
 8015950:	0802225c 	.word	0x0802225c
 8015954:	08021d4c 	.word	0x08021d4c

08015958 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8015958:	b580      	push	{r7, lr}
 801595a:	b084      	sub	sp, #16
 801595c:	af00      	add	r7, sp, #0
 801595e:	60f8      	str	r0, [r7, #12]
 8015960:	60b9      	str	r1, [r7, #8]
 8015962:	607a      	str	r2, [r7, #4]
 8015964:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8015966:	68bb      	ldr	r3, [r7, #8]
 8015968:	2b00      	cmp	r3, #0
 801596a:	d109      	bne.n	8015980 <tcp_recv_null+0x28>
 801596c:	4b12      	ldr	r3, [pc, #72]	@ (80159b8 <tcp_recv_null+0x60>)
 801596e:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8015972:	4912      	ldr	r1, [pc, #72]	@ (80159bc <tcp_recv_null+0x64>)
 8015974:	4812      	ldr	r0, [pc, #72]	@ (80159c0 <tcp_recv_null+0x68>)
 8015976:	f008 fc09 	bl	801e18c <iprintf>
 801597a:	f06f 030f 	mvn.w	r3, #15
 801597e:	e016      	b.n	80159ae <tcp_recv_null+0x56>

  if (p != NULL) {
 8015980:	687b      	ldr	r3, [r7, #4]
 8015982:	2b00      	cmp	r3, #0
 8015984:	d009      	beq.n	801599a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8015986:	687b      	ldr	r3, [r7, #4]
 8015988:	891b      	ldrh	r3, [r3, #8]
 801598a:	4619      	mov	r1, r3
 801598c:	68b8      	ldr	r0, [r7, #8]
 801598e:	f7ff fab3 	bl	8014ef8 <tcp_recved>
    pbuf_free(p);
 8015992:	6878      	ldr	r0, [r7, #4]
 8015994:	f7fe fb42 	bl	801401c <pbuf_free>
 8015998:	e008      	b.n	80159ac <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801599a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801599e:	2b00      	cmp	r3, #0
 80159a0:	d104      	bne.n	80159ac <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80159a2:	68b8      	ldr	r0, [r7, #8]
 80159a4:	f7fe ffe4 	bl	8014970 <tcp_close>
 80159a8:	4603      	mov	r3, r0
 80159aa:	e000      	b.n	80159ae <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80159ac:	2300      	movs	r3, #0
}
 80159ae:	4618      	mov	r0, r3
 80159b0:	3710      	adds	r7, #16
 80159b2:	46bd      	mov	sp, r7
 80159b4:	bd80      	pop	{r7, pc}
 80159b6:	bf00      	nop
 80159b8:	08021d08 	.word	0x08021d08
 80159bc:	08022278 	.word	0x08022278
 80159c0:	08021d4c 	.word	0x08021d4c

080159c4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80159c4:	b580      	push	{r7, lr}
 80159c6:	b086      	sub	sp, #24
 80159c8:	af00      	add	r7, sp, #0
 80159ca:	4603      	mov	r3, r0
 80159cc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80159ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80159d2:	2b00      	cmp	r3, #0
 80159d4:	db01      	blt.n	80159da <tcp_kill_prio+0x16>
 80159d6:	79fb      	ldrb	r3, [r7, #7]
 80159d8:	e000      	b.n	80159dc <tcp_kill_prio+0x18>
 80159da:	237f      	movs	r3, #127	@ 0x7f
 80159dc:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80159de:	7afb      	ldrb	r3, [r7, #11]
 80159e0:	2b00      	cmp	r3, #0
 80159e2:	d034      	beq.n	8015a4e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80159e4:	7afb      	ldrb	r3, [r7, #11]
 80159e6:	3b01      	subs	r3, #1
 80159e8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80159ea:	2300      	movs	r3, #0
 80159ec:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80159ee:	2300      	movs	r3, #0
 80159f0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80159f2:	4b19      	ldr	r3, [pc, #100]	@ (8015a58 <tcp_kill_prio+0x94>)
 80159f4:	681b      	ldr	r3, [r3, #0]
 80159f6:	617b      	str	r3, [r7, #20]
 80159f8:	e01f      	b.n	8015a3a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80159fa:	697b      	ldr	r3, [r7, #20]
 80159fc:	7d5b      	ldrb	r3, [r3, #21]
 80159fe:	7afa      	ldrb	r2, [r7, #11]
 8015a00:	429a      	cmp	r2, r3
 8015a02:	d80c      	bhi.n	8015a1e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8015a04:	697b      	ldr	r3, [r7, #20]
 8015a06:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8015a08:	7afa      	ldrb	r2, [r7, #11]
 8015a0a:	429a      	cmp	r2, r3
 8015a0c:	d112      	bne.n	8015a34 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8015a0e:	4b13      	ldr	r3, [pc, #76]	@ (8015a5c <tcp_kill_prio+0x98>)
 8015a10:	681a      	ldr	r2, [r3, #0]
 8015a12:	697b      	ldr	r3, [r7, #20]
 8015a14:	6a1b      	ldr	r3, [r3, #32]
 8015a16:	1ad3      	subs	r3, r2, r3
 8015a18:	68fa      	ldr	r2, [r7, #12]
 8015a1a:	429a      	cmp	r2, r3
 8015a1c:	d80a      	bhi.n	8015a34 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8015a1e:	4b0f      	ldr	r3, [pc, #60]	@ (8015a5c <tcp_kill_prio+0x98>)
 8015a20:	681a      	ldr	r2, [r3, #0]
 8015a22:	697b      	ldr	r3, [r7, #20]
 8015a24:	6a1b      	ldr	r3, [r3, #32]
 8015a26:	1ad3      	subs	r3, r2, r3
 8015a28:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8015a2a:	697b      	ldr	r3, [r7, #20]
 8015a2c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8015a2e:	697b      	ldr	r3, [r7, #20]
 8015a30:	7d5b      	ldrb	r3, [r3, #21]
 8015a32:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015a34:	697b      	ldr	r3, [r7, #20]
 8015a36:	68db      	ldr	r3, [r3, #12]
 8015a38:	617b      	str	r3, [r7, #20]
 8015a3a:	697b      	ldr	r3, [r7, #20]
 8015a3c:	2b00      	cmp	r3, #0
 8015a3e:	d1dc      	bne.n	80159fa <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8015a40:	693b      	ldr	r3, [r7, #16]
 8015a42:	2b00      	cmp	r3, #0
 8015a44:	d004      	beq.n	8015a50 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8015a46:	6938      	ldr	r0, [r7, #16]
 8015a48:	f7ff f87c 	bl	8014b44 <tcp_abort>
 8015a4c:	e000      	b.n	8015a50 <tcp_kill_prio+0x8c>
    return;
 8015a4e:	bf00      	nop
  }
}
 8015a50:	3718      	adds	r7, #24
 8015a52:	46bd      	mov	sp, r7
 8015a54:	bd80      	pop	{r7, pc}
 8015a56:	bf00      	nop
 8015a58:	2000cacc 	.word	0x2000cacc
 8015a5c:	2000cac0 	.word	0x2000cac0

08015a60 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8015a60:	b580      	push	{r7, lr}
 8015a62:	b086      	sub	sp, #24
 8015a64:	af00      	add	r7, sp, #0
 8015a66:	4603      	mov	r3, r0
 8015a68:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8015a6a:	79fb      	ldrb	r3, [r7, #7]
 8015a6c:	2b08      	cmp	r3, #8
 8015a6e:	d009      	beq.n	8015a84 <tcp_kill_state+0x24>
 8015a70:	79fb      	ldrb	r3, [r7, #7]
 8015a72:	2b09      	cmp	r3, #9
 8015a74:	d006      	beq.n	8015a84 <tcp_kill_state+0x24>
 8015a76:	4b1a      	ldr	r3, [pc, #104]	@ (8015ae0 <tcp_kill_state+0x80>)
 8015a78:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8015a7c:	4919      	ldr	r1, [pc, #100]	@ (8015ae4 <tcp_kill_state+0x84>)
 8015a7e:	481a      	ldr	r0, [pc, #104]	@ (8015ae8 <tcp_kill_state+0x88>)
 8015a80:	f008 fb84 	bl	801e18c <iprintf>

  inactivity = 0;
 8015a84:	2300      	movs	r3, #0
 8015a86:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8015a88:	2300      	movs	r3, #0
 8015a8a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015a8c:	4b17      	ldr	r3, [pc, #92]	@ (8015aec <tcp_kill_state+0x8c>)
 8015a8e:	681b      	ldr	r3, [r3, #0]
 8015a90:	617b      	str	r3, [r7, #20]
 8015a92:	e017      	b.n	8015ac4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8015a94:	697b      	ldr	r3, [r7, #20]
 8015a96:	7d1b      	ldrb	r3, [r3, #20]
 8015a98:	79fa      	ldrb	r2, [r7, #7]
 8015a9a:	429a      	cmp	r2, r3
 8015a9c:	d10f      	bne.n	8015abe <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8015a9e:	4b14      	ldr	r3, [pc, #80]	@ (8015af0 <tcp_kill_state+0x90>)
 8015aa0:	681a      	ldr	r2, [r3, #0]
 8015aa2:	697b      	ldr	r3, [r7, #20]
 8015aa4:	6a1b      	ldr	r3, [r3, #32]
 8015aa6:	1ad3      	subs	r3, r2, r3
 8015aa8:	68fa      	ldr	r2, [r7, #12]
 8015aaa:	429a      	cmp	r2, r3
 8015aac:	d807      	bhi.n	8015abe <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8015aae:	4b10      	ldr	r3, [pc, #64]	@ (8015af0 <tcp_kill_state+0x90>)
 8015ab0:	681a      	ldr	r2, [r3, #0]
 8015ab2:	697b      	ldr	r3, [r7, #20]
 8015ab4:	6a1b      	ldr	r3, [r3, #32]
 8015ab6:	1ad3      	subs	r3, r2, r3
 8015ab8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8015aba:	697b      	ldr	r3, [r7, #20]
 8015abc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015abe:	697b      	ldr	r3, [r7, #20]
 8015ac0:	68db      	ldr	r3, [r3, #12]
 8015ac2:	617b      	str	r3, [r7, #20]
 8015ac4:	697b      	ldr	r3, [r7, #20]
 8015ac6:	2b00      	cmp	r3, #0
 8015ac8:	d1e4      	bne.n	8015a94 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8015aca:	693b      	ldr	r3, [r7, #16]
 8015acc:	2b00      	cmp	r3, #0
 8015ace:	d003      	beq.n	8015ad8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8015ad0:	2100      	movs	r1, #0
 8015ad2:	6938      	ldr	r0, [r7, #16]
 8015ad4:	f7fe ff78 	bl	80149c8 <tcp_abandon>
  }
}
 8015ad8:	bf00      	nop
 8015ada:	3718      	adds	r7, #24
 8015adc:	46bd      	mov	sp, r7
 8015ade:	bd80      	pop	{r7, pc}
 8015ae0:	08021d08 	.word	0x08021d08
 8015ae4:	08022294 	.word	0x08022294
 8015ae8:	08021d4c 	.word	0x08021d4c
 8015aec:	2000cacc 	.word	0x2000cacc
 8015af0:	2000cac0 	.word	0x2000cac0

08015af4 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8015af4:	b580      	push	{r7, lr}
 8015af6:	b084      	sub	sp, #16
 8015af8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8015afa:	2300      	movs	r3, #0
 8015afc:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8015afe:	2300      	movs	r3, #0
 8015b00:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8015b02:	4b12      	ldr	r3, [pc, #72]	@ (8015b4c <tcp_kill_timewait+0x58>)
 8015b04:	681b      	ldr	r3, [r3, #0]
 8015b06:	60fb      	str	r3, [r7, #12]
 8015b08:	e012      	b.n	8015b30 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8015b0a:	4b11      	ldr	r3, [pc, #68]	@ (8015b50 <tcp_kill_timewait+0x5c>)
 8015b0c:	681a      	ldr	r2, [r3, #0]
 8015b0e:	68fb      	ldr	r3, [r7, #12]
 8015b10:	6a1b      	ldr	r3, [r3, #32]
 8015b12:	1ad3      	subs	r3, r2, r3
 8015b14:	687a      	ldr	r2, [r7, #4]
 8015b16:	429a      	cmp	r2, r3
 8015b18:	d807      	bhi.n	8015b2a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8015b1a:	4b0d      	ldr	r3, [pc, #52]	@ (8015b50 <tcp_kill_timewait+0x5c>)
 8015b1c:	681a      	ldr	r2, [r3, #0]
 8015b1e:	68fb      	ldr	r3, [r7, #12]
 8015b20:	6a1b      	ldr	r3, [r3, #32]
 8015b22:	1ad3      	subs	r3, r2, r3
 8015b24:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8015b26:	68fb      	ldr	r3, [r7, #12]
 8015b28:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8015b2a:	68fb      	ldr	r3, [r7, #12]
 8015b2c:	68db      	ldr	r3, [r3, #12]
 8015b2e:	60fb      	str	r3, [r7, #12]
 8015b30:	68fb      	ldr	r3, [r7, #12]
 8015b32:	2b00      	cmp	r3, #0
 8015b34:	d1e9      	bne.n	8015b0a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8015b36:	68bb      	ldr	r3, [r7, #8]
 8015b38:	2b00      	cmp	r3, #0
 8015b3a:	d002      	beq.n	8015b42 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8015b3c:	68b8      	ldr	r0, [r7, #8]
 8015b3e:	f7ff f801 	bl	8014b44 <tcp_abort>
  }
}
 8015b42:	bf00      	nop
 8015b44:	3710      	adds	r7, #16
 8015b46:	46bd      	mov	sp, r7
 8015b48:	bd80      	pop	{r7, pc}
 8015b4a:	bf00      	nop
 8015b4c:	2000cad0 	.word	0x2000cad0
 8015b50:	2000cac0 	.word	0x2000cac0

08015b54 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8015b54:	b580      	push	{r7, lr}
 8015b56:	b082      	sub	sp, #8
 8015b58:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8015b5a:	4b10      	ldr	r3, [pc, #64]	@ (8015b9c <tcp_handle_closepend+0x48>)
 8015b5c:	681b      	ldr	r3, [r3, #0]
 8015b5e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8015b60:	e014      	b.n	8015b8c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8015b62:	687b      	ldr	r3, [r7, #4]
 8015b64:	68db      	ldr	r3, [r3, #12]
 8015b66:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8015b68:	687b      	ldr	r3, [r7, #4]
 8015b6a:	8b5b      	ldrh	r3, [r3, #26]
 8015b6c:	f003 0308 	and.w	r3, r3, #8
 8015b70:	2b00      	cmp	r3, #0
 8015b72:	d009      	beq.n	8015b88 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8015b74:	687b      	ldr	r3, [r7, #4]
 8015b76:	8b5b      	ldrh	r3, [r3, #26]
 8015b78:	f023 0308 	bic.w	r3, r3, #8
 8015b7c:	b29a      	uxth	r2, r3
 8015b7e:	687b      	ldr	r3, [r7, #4]
 8015b80:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8015b82:	6878      	ldr	r0, [r7, #4]
 8015b84:	f7fe fe8a 	bl	801489c <tcp_close_shutdown_fin>
    }
    pcb = next;
 8015b88:	683b      	ldr	r3, [r7, #0]
 8015b8a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8015b8c:	687b      	ldr	r3, [r7, #4]
 8015b8e:	2b00      	cmp	r3, #0
 8015b90:	d1e7      	bne.n	8015b62 <tcp_handle_closepend+0xe>
  }
}
 8015b92:	bf00      	nop
 8015b94:	bf00      	nop
 8015b96:	3708      	adds	r7, #8
 8015b98:	46bd      	mov	sp, r7
 8015b9a:	bd80      	pop	{r7, pc}
 8015b9c:	2000cacc 	.word	0x2000cacc

08015ba0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8015ba0:	b580      	push	{r7, lr}
 8015ba2:	b084      	sub	sp, #16
 8015ba4:	af00      	add	r7, sp, #0
 8015ba6:	4603      	mov	r3, r0
 8015ba8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8015baa:	2001      	movs	r0, #1
 8015bac:	f7fd fb4e 	bl	801324c <memp_malloc>
 8015bb0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8015bb2:	68fb      	ldr	r3, [r7, #12]
 8015bb4:	2b00      	cmp	r3, #0
 8015bb6:	d126      	bne.n	8015c06 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8015bb8:	f7ff ffcc 	bl	8015b54 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8015bbc:	f7ff ff9a 	bl	8015af4 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8015bc0:	2001      	movs	r0, #1
 8015bc2:	f7fd fb43 	bl	801324c <memp_malloc>
 8015bc6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8015bc8:	68fb      	ldr	r3, [r7, #12]
 8015bca:	2b00      	cmp	r3, #0
 8015bcc:	d11b      	bne.n	8015c06 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8015bce:	2009      	movs	r0, #9
 8015bd0:	f7ff ff46 	bl	8015a60 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8015bd4:	2001      	movs	r0, #1
 8015bd6:	f7fd fb39 	bl	801324c <memp_malloc>
 8015bda:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8015bdc:	68fb      	ldr	r3, [r7, #12]
 8015bde:	2b00      	cmp	r3, #0
 8015be0:	d111      	bne.n	8015c06 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8015be2:	2008      	movs	r0, #8
 8015be4:	f7ff ff3c 	bl	8015a60 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8015be8:	2001      	movs	r0, #1
 8015bea:	f7fd fb2f 	bl	801324c <memp_malloc>
 8015bee:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8015bf0:	68fb      	ldr	r3, [r7, #12]
 8015bf2:	2b00      	cmp	r3, #0
 8015bf4:	d107      	bne.n	8015c06 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8015bf6:	79fb      	ldrb	r3, [r7, #7]
 8015bf8:	4618      	mov	r0, r3
 8015bfa:	f7ff fee3 	bl	80159c4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8015bfe:	2001      	movs	r0, #1
 8015c00:	f7fd fb24 	bl	801324c <memp_malloc>
 8015c04:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8015c06:	68fb      	ldr	r3, [r7, #12]
 8015c08:	2b00      	cmp	r3, #0
 8015c0a:	d03f      	beq.n	8015c8c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8015c0c:	229c      	movs	r2, #156	@ 0x9c
 8015c0e:	2100      	movs	r1, #0
 8015c10:	68f8      	ldr	r0, [r7, #12]
 8015c12:	f008 fb70 	bl	801e2f6 <memset>
    pcb->prio = prio;
 8015c16:	68fb      	ldr	r3, [r7, #12]
 8015c18:	79fa      	ldrb	r2, [r7, #7]
 8015c1a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8015c1c:	68fb      	ldr	r3, [r7, #12]
 8015c1e:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8015c22:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8015c26:	68fb      	ldr	r3, [r7, #12]
 8015c28:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8015c2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8015c2e:	68fb      	ldr	r3, [r7, #12]
 8015c30:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8015c32:	68fb      	ldr	r3, [r7, #12]
 8015c34:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8015c36:	68fb      	ldr	r3, [r7, #12]
 8015c38:	22ff      	movs	r2, #255	@ 0xff
 8015c3a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8015c3c:	68fb      	ldr	r3, [r7, #12]
 8015c3e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8015c42:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8015c44:	68fb      	ldr	r3, [r7, #12]
 8015c46:	2206      	movs	r2, #6
 8015c48:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8015c4c:	68fb      	ldr	r3, [r7, #12]
 8015c4e:	2206      	movs	r2, #6
 8015c50:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8015c52:	68fb      	ldr	r3, [r7, #12]
 8015c54:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015c58:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 8015c5a:	68fb      	ldr	r3, [r7, #12]
 8015c5c:	2201      	movs	r2, #1
 8015c5e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8015c62:	4b0d      	ldr	r3, [pc, #52]	@ (8015c98 <tcp_alloc+0xf8>)
 8015c64:	681a      	ldr	r2, [r3, #0]
 8015c66:	68fb      	ldr	r3, [r7, #12]
 8015c68:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8015c6a:	4b0c      	ldr	r3, [pc, #48]	@ (8015c9c <tcp_alloc+0xfc>)
 8015c6c:	781a      	ldrb	r2, [r3, #0]
 8015c6e:	68fb      	ldr	r3, [r7, #12]
 8015c70:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8015c72:	68fb      	ldr	r3, [r7, #12]
 8015c74:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8015c78:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8015c7c:	68fb      	ldr	r3, [r7, #12]
 8015c7e:	4a08      	ldr	r2, [pc, #32]	@ (8015ca0 <tcp_alloc+0x100>)
 8015c80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8015c84:	68fb      	ldr	r3, [r7, #12]
 8015c86:	4a07      	ldr	r2, [pc, #28]	@ (8015ca4 <tcp_alloc+0x104>)
 8015c88:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8015c8c:	68fb      	ldr	r3, [r7, #12]
}
 8015c8e:	4618      	mov	r0, r3
 8015c90:	3710      	adds	r7, #16
 8015c92:	46bd      	mov	sp, r7
 8015c94:	bd80      	pop	{r7, pc}
 8015c96:	bf00      	nop
 8015c98:	2000cac0 	.word	0x2000cac0
 8015c9c:	2000cad6 	.word	0x2000cad6
 8015ca0:	08015959 	.word	0x08015959
 8015ca4:	006ddd00 	.word	0x006ddd00

08015ca8 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 8015ca8:	b580      	push	{r7, lr}
 8015caa:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 8015cac:	2040      	movs	r0, #64	@ 0x40
 8015cae:	f7ff ff77 	bl	8015ba0 <tcp_alloc>
 8015cb2:	4603      	mov	r3, r0
}
 8015cb4:	4618      	mov	r0, r3
 8015cb6:	bd80      	pop	{r7, pc}

08015cb8 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8015cb8:	b580      	push	{r7, lr}
 8015cba:	b082      	sub	sp, #8
 8015cbc:	af00      	add	r7, sp, #0
 8015cbe:	6078      	str	r0, [r7, #4]
 8015cc0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8015cc2:	687b      	ldr	r3, [r7, #4]
 8015cc4:	2b00      	cmp	r3, #0
 8015cc6:	d00e      	beq.n	8015ce6 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8015cc8:	687b      	ldr	r3, [r7, #4]
 8015cca:	7d1b      	ldrb	r3, [r3, #20]
 8015ccc:	2b01      	cmp	r3, #1
 8015cce:	d106      	bne.n	8015cde <tcp_recv+0x26>
 8015cd0:	4b07      	ldr	r3, [pc, #28]	@ (8015cf0 <tcp_recv+0x38>)
 8015cd2:	f240 72df 	movw	r2, #2015	@ 0x7df
 8015cd6:	4907      	ldr	r1, [pc, #28]	@ (8015cf4 <tcp_recv+0x3c>)
 8015cd8:	4807      	ldr	r0, [pc, #28]	@ (8015cf8 <tcp_recv+0x40>)
 8015cda:	f008 fa57 	bl	801e18c <iprintf>
    pcb->recv = recv;
 8015cde:	687b      	ldr	r3, [r7, #4]
 8015ce0:	683a      	ldr	r2, [r7, #0]
 8015ce2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 8015ce6:	bf00      	nop
 8015ce8:	3708      	adds	r7, #8
 8015cea:	46bd      	mov	sp, r7
 8015cec:	bd80      	pop	{r7, pc}
 8015cee:	bf00      	nop
 8015cf0:	08021d08 	.word	0x08021d08
 8015cf4:	080222a4 	.word	0x080222a4
 8015cf8:	08021d4c 	.word	0x08021d4c

08015cfc <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8015cfc:	b580      	push	{r7, lr}
 8015cfe:	b082      	sub	sp, #8
 8015d00:	af00      	add	r7, sp, #0
 8015d02:	6078      	str	r0, [r7, #4]
 8015d04:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8015d06:	687b      	ldr	r3, [r7, #4]
 8015d08:	2b00      	cmp	r3, #0
 8015d0a:	d00e      	beq.n	8015d2a <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8015d0c:	687b      	ldr	r3, [r7, #4]
 8015d0e:	7d1b      	ldrb	r3, [r3, #20]
 8015d10:	2b01      	cmp	r3, #1
 8015d12:	d106      	bne.n	8015d22 <tcp_sent+0x26>
 8015d14:	4b07      	ldr	r3, [pc, #28]	@ (8015d34 <tcp_sent+0x38>)
 8015d16:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 8015d1a:	4907      	ldr	r1, [pc, #28]	@ (8015d38 <tcp_sent+0x3c>)
 8015d1c:	4807      	ldr	r0, [pc, #28]	@ (8015d3c <tcp_sent+0x40>)
 8015d1e:	f008 fa35 	bl	801e18c <iprintf>
    pcb->sent = sent;
 8015d22:	687b      	ldr	r3, [r7, #4]
 8015d24:	683a      	ldr	r2, [r7, #0]
 8015d26:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 8015d2a:	bf00      	nop
 8015d2c:	3708      	adds	r7, #8
 8015d2e:	46bd      	mov	sp, r7
 8015d30:	bd80      	pop	{r7, pc}
 8015d32:	bf00      	nop
 8015d34:	08021d08 	.word	0x08021d08
 8015d38:	080222cc 	.word	0x080222cc
 8015d3c:	08021d4c 	.word	0x08021d4c

08015d40 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8015d40:	b580      	push	{r7, lr}
 8015d42:	b082      	sub	sp, #8
 8015d44:	af00      	add	r7, sp, #0
 8015d46:	6078      	str	r0, [r7, #4]
 8015d48:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8015d4a:	687b      	ldr	r3, [r7, #4]
 8015d4c:	2b00      	cmp	r3, #0
 8015d4e:	d00e      	beq.n	8015d6e <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	7d1b      	ldrb	r3, [r3, #20]
 8015d54:	2b01      	cmp	r3, #1
 8015d56:	d106      	bne.n	8015d66 <tcp_err+0x26>
 8015d58:	4b07      	ldr	r3, [pc, #28]	@ (8015d78 <tcp_err+0x38>)
 8015d5a:	f640 020d 	movw	r2, #2061	@ 0x80d
 8015d5e:	4907      	ldr	r1, [pc, #28]	@ (8015d7c <tcp_err+0x3c>)
 8015d60:	4807      	ldr	r0, [pc, #28]	@ (8015d80 <tcp_err+0x40>)
 8015d62:	f008 fa13 	bl	801e18c <iprintf>
    pcb->errf = err;
 8015d66:	687b      	ldr	r3, [r7, #4]
 8015d68:	683a      	ldr	r2, [r7, #0]
 8015d6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 8015d6e:	bf00      	nop
 8015d70:	3708      	adds	r7, #8
 8015d72:	46bd      	mov	sp, r7
 8015d74:	bd80      	pop	{r7, pc}
 8015d76:	bf00      	nop
 8015d78:	08021d08 	.word	0x08021d08
 8015d7c:	080222f4 	.word	0x080222f4
 8015d80:	08021d4c 	.word	0x08021d4c

08015d84 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8015d84:	b480      	push	{r7}
 8015d86:	b085      	sub	sp, #20
 8015d88:	af00      	add	r7, sp, #0
 8015d8a:	6078      	str	r0, [r7, #4]
 8015d8c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8015d8e:	687b      	ldr	r3, [r7, #4]
 8015d90:	2b00      	cmp	r3, #0
 8015d92:	d008      	beq.n	8015da6 <tcp_accept+0x22>
 8015d94:	687b      	ldr	r3, [r7, #4]
 8015d96:	7d1b      	ldrb	r3, [r3, #20]
 8015d98:	2b01      	cmp	r3, #1
 8015d9a:	d104      	bne.n	8015da6 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8015d9c:	687b      	ldr	r3, [r7, #4]
 8015d9e:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8015da0:	68fb      	ldr	r3, [r7, #12]
 8015da2:	683a      	ldr	r2, [r7, #0]
 8015da4:	619a      	str	r2, [r3, #24]
  }
}
 8015da6:	bf00      	nop
 8015da8:	3714      	adds	r7, #20
 8015daa:	46bd      	mov	sp, r7
 8015dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015db0:	4770      	bx	lr
	...

08015db4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8015db4:	b580      	push	{r7, lr}
 8015db6:	b082      	sub	sp, #8
 8015db8:	af00      	add	r7, sp, #0
 8015dba:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	2b00      	cmp	r3, #0
 8015dc0:	d107      	bne.n	8015dd2 <tcp_pcb_purge+0x1e>
 8015dc2:	4b21      	ldr	r3, [pc, #132]	@ (8015e48 <tcp_pcb_purge+0x94>)
 8015dc4:	f640 0251 	movw	r2, #2129	@ 0x851
 8015dc8:	4920      	ldr	r1, [pc, #128]	@ (8015e4c <tcp_pcb_purge+0x98>)
 8015dca:	4821      	ldr	r0, [pc, #132]	@ (8015e50 <tcp_pcb_purge+0x9c>)
 8015dcc:	f008 f9de 	bl	801e18c <iprintf>
 8015dd0:	e037      	b.n	8015e42 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8015dd2:	687b      	ldr	r3, [r7, #4]
 8015dd4:	7d1b      	ldrb	r3, [r3, #20]
 8015dd6:	2b00      	cmp	r3, #0
 8015dd8:	d033      	beq.n	8015e42 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8015dda:	687b      	ldr	r3, [r7, #4]
 8015ddc:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8015dde:	2b0a      	cmp	r3, #10
 8015de0:	d02f      	beq.n	8015e42 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8015de2:	687b      	ldr	r3, [r7, #4]
 8015de4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8015de6:	2b01      	cmp	r3, #1
 8015de8:	d02b      	beq.n	8015e42 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8015dea:	687b      	ldr	r3, [r7, #4]
 8015dec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015dee:	2b00      	cmp	r3, #0
 8015df0:	d007      	beq.n	8015e02 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8015df2:	687b      	ldr	r3, [r7, #4]
 8015df4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015df6:	4618      	mov	r0, r3
 8015df8:	f7fe f910 	bl	801401c <pbuf_free>
      pcb->refused_data = NULL;
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	2200      	movs	r2, #0
 8015e00:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8015e02:	687b      	ldr	r3, [r7, #4]
 8015e04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015e06:	2b00      	cmp	r3, #0
 8015e08:	d002      	beq.n	8015e10 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8015e0a:	6878      	ldr	r0, [r7, #4]
 8015e0c:	f000 f986 	bl	801611c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8015e10:	687b      	ldr	r3, [r7, #4]
 8015e12:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015e16:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8015e18:	687b      	ldr	r3, [r7, #4]
 8015e1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015e1c:	4618      	mov	r0, r3
 8015e1e:	f7ff fd23 	bl	8015868 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8015e22:	687b      	ldr	r3, [r7, #4]
 8015e24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015e26:	4618      	mov	r0, r3
 8015e28:	f7ff fd1e 	bl	8015868 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8015e2c:	687b      	ldr	r3, [r7, #4]
 8015e2e:	2200      	movs	r2, #0
 8015e30:	66da      	str	r2, [r3, #108]	@ 0x6c
 8015e32:	687b      	ldr	r3, [r7, #4]
 8015e34:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8015e36:	687b      	ldr	r3, [r7, #4]
 8015e38:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8015e3a:	687b      	ldr	r3, [r7, #4]
 8015e3c:	2200      	movs	r2, #0
 8015e3e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8015e42:	3708      	adds	r7, #8
 8015e44:	46bd      	mov	sp, r7
 8015e46:	bd80      	pop	{r7, pc}
 8015e48:	08021d08 	.word	0x08021d08
 8015e4c:	08022354 	.word	0x08022354
 8015e50:	08021d4c 	.word	0x08021d4c

08015e54 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8015e54:	b580      	push	{r7, lr}
 8015e56:	b084      	sub	sp, #16
 8015e58:	af00      	add	r7, sp, #0
 8015e5a:	6078      	str	r0, [r7, #4]
 8015e5c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8015e5e:	683b      	ldr	r3, [r7, #0]
 8015e60:	2b00      	cmp	r3, #0
 8015e62:	d106      	bne.n	8015e72 <tcp_pcb_remove+0x1e>
 8015e64:	4b3e      	ldr	r3, [pc, #248]	@ (8015f60 <tcp_pcb_remove+0x10c>)
 8015e66:	f640 0283 	movw	r2, #2179	@ 0x883
 8015e6a:	493e      	ldr	r1, [pc, #248]	@ (8015f64 <tcp_pcb_remove+0x110>)
 8015e6c:	483e      	ldr	r0, [pc, #248]	@ (8015f68 <tcp_pcb_remove+0x114>)
 8015e6e:	f008 f98d 	bl	801e18c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8015e72:	687b      	ldr	r3, [r7, #4]
 8015e74:	2b00      	cmp	r3, #0
 8015e76:	d106      	bne.n	8015e86 <tcp_pcb_remove+0x32>
 8015e78:	4b39      	ldr	r3, [pc, #228]	@ (8015f60 <tcp_pcb_remove+0x10c>)
 8015e7a:	f640 0284 	movw	r2, #2180	@ 0x884
 8015e7e:	493b      	ldr	r1, [pc, #236]	@ (8015f6c <tcp_pcb_remove+0x118>)
 8015e80:	4839      	ldr	r0, [pc, #228]	@ (8015f68 <tcp_pcb_remove+0x114>)
 8015e82:	f008 f983 	bl	801e18c <iprintf>

  TCP_RMV(pcblist, pcb);
 8015e86:	687b      	ldr	r3, [r7, #4]
 8015e88:	681b      	ldr	r3, [r3, #0]
 8015e8a:	683a      	ldr	r2, [r7, #0]
 8015e8c:	429a      	cmp	r2, r3
 8015e8e:	d105      	bne.n	8015e9c <tcp_pcb_remove+0x48>
 8015e90:	687b      	ldr	r3, [r7, #4]
 8015e92:	681b      	ldr	r3, [r3, #0]
 8015e94:	68da      	ldr	r2, [r3, #12]
 8015e96:	687b      	ldr	r3, [r7, #4]
 8015e98:	601a      	str	r2, [r3, #0]
 8015e9a:	e013      	b.n	8015ec4 <tcp_pcb_remove+0x70>
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	681b      	ldr	r3, [r3, #0]
 8015ea0:	60fb      	str	r3, [r7, #12]
 8015ea2:	e00c      	b.n	8015ebe <tcp_pcb_remove+0x6a>
 8015ea4:	68fb      	ldr	r3, [r7, #12]
 8015ea6:	68db      	ldr	r3, [r3, #12]
 8015ea8:	683a      	ldr	r2, [r7, #0]
 8015eaa:	429a      	cmp	r2, r3
 8015eac:	d104      	bne.n	8015eb8 <tcp_pcb_remove+0x64>
 8015eae:	683b      	ldr	r3, [r7, #0]
 8015eb0:	68da      	ldr	r2, [r3, #12]
 8015eb2:	68fb      	ldr	r3, [r7, #12]
 8015eb4:	60da      	str	r2, [r3, #12]
 8015eb6:	e005      	b.n	8015ec4 <tcp_pcb_remove+0x70>
 8015eb8:	68fb      	ldr	r3, [r7, #12]
 8015eba:	68db      	ldr	r3, [r3, #12]
 8015ebc:	60fb      	str	r3, [r7, #12]
 8015ebe:	68fb      	ldr	r3, [r7, #12]
 8015ec0:	2b00      	cmp	r3, #0
 8015ec2:	d1ef      	bne.n	8015ea4 <tcp_pcb_remove+0x50>
 8015ec4:	683b      	ldr	r3, [r7, #0]
 8015ec6:	2200      	movs	r2, #0
 8015ec8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8015eca:	6838      	ldr	r0, [r7, #0]
 8015ecc:	f7ff ff72 	bl	8015db4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8015ed0:	683b      	ldr	r3, [r7, #0]
 8015ed2:	7d1b      	ldrb	r3, [r3, #20]
 8015ed4:	2b0a      	cmp	r3, #10
 8015ed6:	d013      	beq.n	8015f00 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8015ed8:	683b      	ldr	r3, [r7, #0]
 8015eda:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8015edc:	2b01      	cmp	r3, #1
 8015ede:	d00f      	beq.n	8015f00 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8015ee0:	683b      	ldr	r3, [r7, #0]
 8015ee2:	8b5b      	ldrh	r3, [r3, #26]
 8015ee4:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8015ee8:	2b00      	cmp	r3, #0
 8015eea:	d009      	beq.n	8015f00 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8015eec:	683b      	ldr	r3, [r7, #0]
 8015eee:	8b5b      	ldrh	r3, [r3, #26]
 8015ef0:	f043 0302 	orr.w	r3, r3, #2
 8015ef4:	b29a      	uxth	r2, r3
 8015ef6:	683b      	ldr	r3, [r7, #0]
 8015ef8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8015efa:	6838      	ldr	r0, [r7, #0]
 8015efc:	f003 fbc0 	bl	8019680 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8015f00:	683b      	ldr	r3, [r7, #0]
 8015f02:	7d1b      	ldrb	r3, [r3, #20]
 8015f04:	2b01      	cmp	r3, #1
 8015f06:	d020      	beq.n	8015f4a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8015f08:	683b      	ldr	r3, [r7, #0]
 8015f0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015f0c:	2b00      	cmp	r3, #0
 8015f0e:	d006      	beq.n	8015f1e <tcp_pcb_remove+0xca>
 8015f10:	4b13      	ldr	r3, [pc, #76]	@ (8015f60 <tcp_pcb_remove+0x10c>)
 8015f12:	f640 0293 	movw	r2, #2195	@ 0x893
 8015f16:	4916      	ldr	r1, [pc, #88]	@ (8015f70 <tcp_pcb_remove+0x11c>)
 8015f18:	4813      	ldr	r0, [pc, #76]	@ (8015f68 <tcp_pcb_remove+0x114>)
 8015f1a:	f008 f937 	bl	801e18c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8015f1e:	683b      	ldr	r3, [r7, #0]
 8015f20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015f22:	2b00      	cmp	r3, #0
 8015f24:	d006      	beq.n	8015f34 <tcp_pcb_remove+0xe0>
 8015f26:	4b0e      	ldr	r3, [pc, #56]	@ (8015f60 <tcp_pcb_remove+0x10c>)
 8015f28:	f640 0294 	movw	r2, #2196	@ 0x894
 8015f2c:	4911      	ldr	r1, [pc, #68]	@ (8015f74 <tcp_pcb_remove+0x120>)
 8015f2e:	480e      	ldr	r0, [pc, #56]	@ (8015f68 <tcp_pcb_remove+0x114>)
 8015f30:	f008 f92c 	bl	801e18c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8015f34:	683b      	ldr	r3, [r7, #0]
 8015f36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015f38:	2b00      	cmp	r3, #0
 8015f3a:	d006      	beq.n	8015f4a <tcp_pcb_remove+0xf6>
 8015f3c:	4b08      	ldr	r3, [pc, #32]	@ (8015f60 <tcp_pcb_remove+0x10c>)
 8015f3e:	f640 0296 	movw	r2, #2198	@ 0x896
 8015f42:	490d      	ldr	r1, [pc, #52]	@ (8015f78 <tcp_pcb_remove+0x124>)
 8015f44:	4808      	ldr	r0, [pc, #32]	@ (8015f68 <tcp_pcb_remove+0x114>)
 8015f46:	f008 f921 	bl	801e18c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8015f4a:	683b      	ldr	r3, [r7, #0]
 8015f4c:	2200      	movs	r2, #0
 8015f4e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8015f50:	683b      	ldr	r3, [r7, #0]
 8015f52:	2200      	movs	r2, #0
 8015f54:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8015f56:	bf00      	nop
 8015f58:	3710      	adds	r7, #16
 8015f5a:	46bd      	mov	sp, r7
 8015f5c:	bd80      	pop	{r7, pc}
 8015f5e:	bf00      	nop
 8015f60:	08021d08 	.word	0x08021d08
 8015f64:	08022370 	.word	0x08022370
 8015f68:	08021d4c 	.word	0x08021d4c
 8015f6c:	0802238c 	.word	0x0802238c
 8015f70:	080223ac 	.word	0x080223ac
 8015f74:	080223c4 	.word	0x080223c4
 8015f78:	080223e0 	.word	0x080223e0

08015f7c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8015f7c:	b580      	push	{r7, lr}
 8015f7e:	b082      	sub	sp, #8
 8015f80:	af00      	add	r7, sp, #0
 8015f82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8015f84:	687b      	ldr	r3, [r7, #4]
 8015f86:	2b00      	cmp	r3, #0
 8015f88:	d106      	bne.n	8015f98 <tcp_next_iss+0x1c>
 8015f8a:	4b0a      	ldr	r3, [pc, #40]	@ (8015fb4 <tcp_next_iss+0x38>)
 8015f8c:	f640 02af 	movw	r2, #2223	@ 0x8af
 8015f90:	4909      	ldr	r1, [pc, #36]	@ (8015fb8 <tcp_next_iss+0x3c>)
 8015f92:	480a      	ldr	r0, [pc, #40]	@ (8015fbc <tcp_next_iss+0x40>)
 8015f94:	f008 f8fa 	bl	801e18c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8015f98:	4b09      	ldr	r3, [pc, #36]	@ (8015fc0 <tcp_next_iss+0x44>)
 8015f9a:	681a      	ldr	r2, [r3, #0]
 8015f9c:	4b09      	ldr	r3, [pc, #36]	@ (8015fc4 <tcp_next_iss+0x48>)
 8015f9e:	681b      	ldr	r3, [r3, #0]
 8015fa0:	4413      	add	r3, r2
 8015fa2:	4a07      	ldr	r2, [pc, #28]	@ (8015fc0 <tcp_next_iss+0x44>)
 8015fa4:	6013      	str	r3, [r2, #0]
  return iss;
 8015fa6:	4b06      	ldr	r3, [pc, #24]	@ (8015fc0 <tcp_next_iss+0x44>)
 8015fa8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8015faa:	4618      	mov	r0, r3
 8015fac:	3708      	adds	r7, #8
 8015fae:	46bd      	mov	sp, r7
 8015fb0:	bd80      	pop	{r7, pc}
 8015fb2:	bf00      	nop
 8015fb4:	08021d08 	.word	0x08021d08
 8015fb8:	080223f8 	.word	0x080223f8
 8015fbc:	08021d4c 	.word	0x08021d4c
 8015fc0:	200000a8 	.word	0x200000a8
 8015fc4:	2000cac0 	.word	0x2000cac0

08015fc8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8015fc8:	b580      	push	{r7, lr}
 8015fca:	b086      	sub	sp, #24
 8015fcc:	af00      	add	r7, sp, #0
 8015fce:	4603      	mov	r3, r0
 8015fd0:	60b9      	str	r1, [r7, #8]
 8015fd2:	607a      	str	r2, [r7, #4]
 8015fd4:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8015fd6:	687b      	ldr	r3, [r7, #4]
 8015fd8:	2b00      	cmp	r3, #0
 8015fda:	d106      	bne.n	8015fea <tcp_eff_send_mss_netif+0x22>
 8015fdc:	4b14      	ldr	r3, [pc, #80]	@ (8016030 <tcp_eff_send_mss_netif+0x68>)
 8015fde:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 8015fe2:	4914      	ldr	r1, [pc, #80]	@ (8016034 <tcp_eff_send_mss_netif+0x6c>)
 8015fe4:	4814      	ldr	r0, [pc, #80]	@ (8016038 <tcp_eff_send_mss_netif+0x70>)
 8015fe6:	f008 f8d1 	bl	801e18c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8015fea:	68bb      	ldr	r3, [r7, #8]
 8015fec:	2b00      	cmp	r3, #0
 8015fee:	d101      	bne.n	8015ff4 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8015ff0:	89fb      	ldrh	r3, [r7, #14]
 8015ff2:	e019      	b.n	8016028 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8015ff4:	68bb      	ldr	r3, [r7, #8]
 8015ff6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8015ff8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8015ffa:	8afb      	ldrh	r3, [r7, #22]
 8015ffc:	2b00      	cmp	r3, #0
 8015ffe:	d012      	beq.n	8016026 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8016000:	2328      	movs	r3, #40	@ 0x28
 8016002:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8016004:	8afa      	ldrh	r2, [r7, #22]
 8016006:	8abb      	ldrh	r3, [r7, #20]
 8016008:	429a      	cmp	r2, r3
 801600a:	d904      	bls.n	8016016 <tcp_eff_send_mss_netif+0x4e>
 801600c:	8afa      	ldrh	r2, [r7, #22]
 801600e:	8abb      	ldrh	r3, [r7, #20]
 8016010:	1ad3      	subs	r3, r2, r3
 8016012:	b29b      	uxth	r3, r3
 8016014:	e000      	b.n	8016018 <tcp_eff_send_mss_netif+0x50>
 8016016:	2300      	movs	r3, #0
 8016018:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801601a:	8a7a      	ldrh	r2, [r7, #18]
 801601c:	89fb      	ldrh	r3, [r7, #14]
 801601e:	4293      	cmp	r3, r2
 8016020:	bf28      	it	cs
 8016022:	4613      	movcs	r3, r2
 8016024:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8016026:	89fb      	ldrh	r3, [r7, #14]
}
 8016028:	4618      	mov	r0, r3
 801602a:	3718      	adds	r7, #24
 801602c:	46bd      	mov	sp, r7
 801602e:	bd80      	pop	{r7, pc}
 8016030:	08021d08 	.word	0x08021d08
 8016034:	08022414 	.word	0x08022414
 8016038:	08021d4c 	.word	0x08021d4c

0801603c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 801603c:	b580      	push	{r7, lr}
 801603e:	b084      	sub	sp, #16
 8016040:	af00      	add	r7, sp, #0
 8016042:	6078      	str	r0, [r7, #4]
 8016044:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8016046:	683b      	ldr	r3, [r7, #0]
 8016048:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801604a:	687b      	ldr	r3, [r7, #4]
 801604c:	2b00      	cmp	r3, #0
 801604e:	d119      	bne.n	8016084 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8016050:	4b10      	ldr	r3, [pc, #64]	@ (8016094 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8016052:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 8016056:	4910      	ldr	r1, [pc, #64]	@ (8016098 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8016058:	4810      	ldr	r0, [pc, #64]	@ (801609c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801605a:	f008 f897 	bl	801e18c <iprintf>

  while (pcb != NULL) {
 801605e:	e011      	b.n	8016084 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8016060:	68fb      	ldr	r3, [r7, #12]
 8016062:	681a      	ldr	r2, [r3, #0]
 8016064:	687b      	ldr	r3, [r7, #4]
 8016066:	681b      	ldr	r3, [r3, #0]
 8016068:	429a      	cmp	r2, r3
 801606a:	d108      	bne.n	801607e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 801606c:	68fb      	ldr	r3, [r7, #12]
 801606e:	68db      	ldr	r3, [r3, #12]
 8016070:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8016072:	68f8      	ldr	r0, [r7, #12]
 8016074:	f7fe fd66 	bl	8014b44 <tcp_abort>
      pcb = next;
 8016078:	68bb      	ldr	r3, [r7, #8]
 801607a:	60fb      	str	r3, [r7, #12]
 801607c:	e002      	b.n	8016084 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 801607e:	68fb      	ldr	r3, [r7, #12]
 8016080:	68db      	ldr	r3, [r3, #12]
 8016082:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8016084:	68fb      	ldr	r3, [r7, #12]
 8016086:	2b00      	cmp	r3, #0
 8016088:	d1ea      	bne.n	8016060 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801608a:	bf00      	nop
 801608c:	bf00      	nop
 801608e:	3710      	adds	r7, #16
 8016090:	46bd      	mov	sp, r7
 8016092:	bd80      	pop	{r7, pc}
 8016094:	08021d08 	.word	0x08021d08
 8016098:	0802243c 	.word	0x0802243c
 801609c:	08021d4c 	.word	0x08021d4c

080160a0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80160a0:	b580      	push	{r7, lr}
 80160a2:	b084      	sub	sp, #16
 80160a4:	af00      	add	r7, sp, #0
 80160a6:	6078      	str	r0, [r7, #4]
 80160a8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80160aa:	687b      	ldr	r3, [r7, #4]
 80160ac:	2b00      	cmp	r3, #0
 80160ae:	d02a      	beq.n	8016106 <tcp_netif_ip_addr_changed+0x66>
 80160b0:	687b      	ldr	r3, [r7, #4]
 80160b2:	681b      	ldr	r3, [r3, #0]
 80160b4:	2b00      	cmp	r3, #0
 80160b6:	d026      	beq.n	8016106 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80160b8:	4b15      	ldr	r3, [pc, #84]	@ (8016110 <tcp_netif_ip_addr_changed+0x70>)
 80160ba:	681b      	ldr	r3, [r3, #0]
 80160bc:	4619      	mov	r1, r3
 80160be:	6878      	ldr	r0, [r7, #4]
 80160c0:	f7ff ffbc 	bl	801603c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80160c4:	4b13      	ldr	r3, [pc, #76]	@ (8016114 <tcp_netif_ip_addr_changed+0x74>)
 80160c6:	681b      	ldr	r3, [r3, #0]
 80160c8:	4619      	mov	r1, r3
 80160ca:	6878      	ldr	r0, [r7, #4]
 80160cc:	f7ff ffb6 	bl	801603c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80160d0:	683b      	ldr	r3, [r7, #0]
 80160d2:	2b00      	cmp	r3, #0
 80160d4:	d017      	beq.n	8016106 <tcp_netif_ip_addr_changed+0x66>
 80160d6:	683b      	ldr	r3, [r7, #0]
 80160d8:	681b      	ldr	r3, [r3, #0]
 80160da:	2b00      	cmp	r3, #0
 80160dc:	d013      	beq.n	8016106 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80160de:	4b0e      	ldr	r3, [pc, #56]	@ (8016118 <tcp_netif_ip_addr_changed+0x78>)
 80160e0:	681b      	ldr	r3, [r3, #0]
 80160e2:	60fb      	str	r3, [r7, #12]
 80160e4:	e00c      	b.n	8016100 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80160e6:	68fb      	ldr	r3, [r7, #12]
 80160e8:	681a      	ldr	r2, [r3, #0]
 80160ea:	687b      	ldr	r3, [r7, #4]
 80160ec:	681b      	ldr	r3, [r3, #0]
 80160ee:	429a      	cmp	r2, r3
 80160f0:	d103      	bne.n	80160fa <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80160f2:	683b      	ldr	r3, [r7, #0]
 80160f4:	681a      	ldr	r2, [r3, #0]
 80160f6:	68fb      	ldr	r3, [r7, #12]
 80160f8:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80160fa:	68fb      	ldr	r3, [r7, #12]
 80160fc:	68db      	ldr	r3, [r3, #12]
 80160fe:	60fb      	str	r3, [r7, #12]
 8016100:	68fb      	ldr	r3, [r7, #12]
 8016102:	2b00      	cmp	r3, #0
 8016104:	d1ef      	bne.n	80160e6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8016106:	bf00      	nop
 8016108:	3710      	adds	r7, #16
 801610a:	46bd      	mov	sp, r7
 801610c:	bd80      	pop	{r7, pc}
 801610e:	bf00      	nop
 8016110:	2000cacc 	.word	0x2000cacc
 8016114:	2000cac4 	.word	0x2000cac4
 8016118:	2000cac8 	.word	0x2000cac8

0801611c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 801611c:	b580      	push	{r7, lr}
 801611e:	b082      	sub	sp, #8
 8016120:	af00      	add	r7, sp, #0
 8016122:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8016124:	687b      	ldr	r3, [r7, #4]
 8016126:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016128:	2b00      	cmp	r3, #0
 801612a:	d007      	beq.n	801613c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 801612c:	687b      	ldr	r3, [r7, #4]
 801612e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016130:	4618      	mov	r0, r3
 8016132:	f7ff fb99 	bl	8015868 <tcp_segs_free>
    pcb->ooseq = NULL;
 8016136:	687b      	ldr	r3, [r7, #4]
 8016138:	2200      	movs	r2, #0
 801613a:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 801613c:	bf00      	nop
 801613e:	3708      	adds	r7, #8
 8016140:	46bd      	mov	sp, r7
 8016142:	bd80      	pop	{r7, pc}

08016144 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8016144:	b590      	push	{r4, r7, lr}
 8016146:	b08d      	sub	sp, #52	@ 0x34
 8016148:	af04      	add	r7, sp, #16
 801614a:	6078      	str	r0, [r7, #4]
 801614c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801614e:	687b      	ldr	r3, [r7, #4]
 8016150:	2b00      	cmp	r3, #0
 8016152:	d105      	bne.n	8016160 <tcp_input+0x1c>
 8016154:	4b9b      	ldr	r3, [pc, #620]	@ (80163c4 <tcp_input+0x280>)
 8016156:	2283      	movs	r2, #131	@ 0x83
 8016158:	499b      	ldr	r1, [pc, #620]	@ (80163c8 <tcp_input+0x284>)
 801615a:	489c      	ldr	r0, [pc, #624]	@ (80163cc <tcp_input+0x288>)
 801615c:	f008 f816 	bl	801e18c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8016160:	687b      	ldr	r3, [r7, #4]
 8016162:	685b      	ldr	r3, [r3, #4]
 8016164:	4a9a      	ldr	r2, [pc, #616]	@ (80163d0 <tcp_input+0x28c>)
 8016166:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8016168:	687b      	ldr	r3, [r7, #4]
 801616a:	895b      	ldrh	r3, [r3, #10]
 801616c:	2b13      	cmp	r3, #19
 801616e:	f240 83d1 	bls.w	8016914 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8016172:	4b98      	ldr	r3, [pc, #608]	@ (80163d4 <tcp_input+0x290>)
 8016174:	695b      	ldr	r3, [r3, #20]
 8016176:	4a97      	ldr	r2, [pc, #604]	@ (80163d4 <tcp_input+0x290>)
 8016178:	6812      	ldr	r2, [r2, #0]
 801617a:	4611      	mov	r1, r2
 801617c:	4618      	mov	r0, r3
 801617e:	f006 f867 	bl	801c250 <ip4_addr_isbroadcast_u32>
 8016182:	4603      	mov	r3, r0
 8016184:	2b00      	cmp	r3, #0
 8016186:	f040 83c7 	bne.w	8016918 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801618a:	4b92      	ldr	r3, [pc, #584]	@ (80163d4 <tcp_input+0x290>)
 801618c:	695b      	ldr	r3, [r3, #20]
 801618e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8016192:	2be0      	cmp	r3, #224	@ 0xe0
 8016194:	f000 83c0 	beq.w	8016918 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8016198:	4b8d      	ldr	r3, [pc, #564]	@ (80163d0 <tcp_input+0x28c>)
 801619a:	681b      	ldr	r3, [r3, #0]
 801619c:	899b      	ldrh	r3, [r3, #12]
 801619e:	b29b      	uxth	r3, r3
 80161a0:	4618      	mov	r0, r3
 80161a2:	f7fc fb7b 	bl	801289c <lwip_htons>
 80161a6:	4603      	mov	r3, r0
 80161a8:	0b1b      	lsrs	r3, r3, #12
 80161aa:	b29b      	uxth	r3, r3
 80161ac:	b2db      	uxtb	r3, r3
 80161ae:	009b      	lsls	r3, r3, #2
 80161b0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80161b2:	7cbb      	ldrb	r3, [r7, #18]
 80161b4:	2b13      	cmp	r3, #19
 80161b6:	f240 83b1 	bls.w	801691c <tcp_input+0x7d8>
 80161ba:	7cbb      	ldrb	r3, [r7, #18]
 80161bc:	b29a      	uxth	r2, r3
 80161be:	687b      	ldr	r3, [r7, #4]
 80161c0:	891b      	ldrh	r3, [r3, #8]
 80161c2:	429a      	cmp	r2, r3
 80161c4:	f200 83aa 	bhi.w	801691c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80161c8:	7cbb      	ldrb	r3, [r7, #18]
 80161ca:	b29b      	uxth	r3, r3
 80161cc:	3b14      	subs	r3, #20
 80161ce:	b29a      	uxth	r2, r3
 80161d0:	4b81      	ldr	r3, [pc, #516]	@ (80163d8 <tcp_input+0x294>)
 80161d2:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80161d4:	4b81      	ldr	r3, [pc, #516]	@ (80163dc <tcp_input+0x298>)
 80161d6:	2200      	movs	r2, #0
 80161d8:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80161da:	687b      	ldr	r3, [r7, #4]
 80161dc:	895a      	ldrh	r2, [r3, #10]
 80161de:	7cbb      	ldrb	r3, [r7, #18]
 80161e0:	b29b      	uxth	r3, r3
 80161e2:	429a      	cmp	r2, r3
 80161e4:	d309      	bcc.n	80161fa <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80161e6:	4b7c      	ldr	r3, [pc, #496]	@ (80163d8 <tcp_input+0x294>)
 80161e8:	881a      	ldrh	r2, [r3, #0]
 80161ea:	4b7d      	ldr	r3, [pc, #500]	@ (80163e0 <tcp_input+0x29c>)
 80161ec:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80161ee:	7cbb      	ldrb	r3, [r7, #18]
 80161f0:	4619      	mov	r1, r3
 80161f2:	6878      	ldr	r0, [r7, #4]
 80161f4:	f7fd fe8c 	bl	8013f10 <pbuf_remove_header>
 80161f8:	e04e      	b.n	8016298 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80161fa:	687b      	ldr	r3, [r7, #4]
 80161fc:	681b      	ldr	r3, [r3, #0]
 80161fe:	2b00      	cmp	r3, #0
 8016200:	d105      	bne.n	801620e <tcp_input+0xca>
 8016202:	4b70      	ldr	r3, [pc, #448]	@ (80163c4 <tcp_input+0x280>)
 8016204:	22c2      	movs	r2, #194	@ 0xc2
 8016206:	4977      	ldr	r1, [pc, #476]	@ (80163e4 <tcp_input+0x2a0>)
 8016208:	4870      	ldr	r0, [pc, #448]	@ (80163cc <tcp_input+0x288>)
 801620a:	f007 ffbf 	bl	801e18c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801620e:	2114      	movs	r1, #20
 8016210:	6878      	ldr	r0, [r7, #4]
 8016212:	f7fd fe7d 	bl	8013f10 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8016216:	687b      	ldr	r3, [r7, #4]
 8016218:	895a      	ldrh	r2, [r3, #10]
 801621a:	4b71      	ldr	r3, [pc, #452]	@ (80163e0 <tcp_input+0x29c>)
 801621c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801621e:	4b6e      	ldr	r3, [pc, #440]	@ (80163d8 <tcp_input+0x294>)
 8016220:	881a      	ldrh	r2, [r3, #0]
 8016222:	4b6f      	ldr	r3, [pc, #444]	@ (80163e0 <tcp_input+0x29c>)
 8016224:	881b      	ldrh	r3, [r3, #0]
 8016226:	1ad3      	subs	r3, r2, r3
 8016228:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801622a:	4b6d      	ldr	r3, [pc, #436]	@ (80163e0 <tcp_input+0x29c>)
 801622c:	881b      	ldrh	r3, [r3, #0]
 801622e:	4619      	mov	r1, r3
 8016230:	6878      	ldr	r0, [r7, #4]
 8016232:	f7fd fe6d 	bl	8013f10 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8016236:	687b      	ldr	r3, [r7, #4]
 8016238:	681b      	ldr	r3, [r3, #0]
 801623a:	895b      	ldrh	r3, [r3, #10]
 801623c:	8a3a      	ldrh	r2, [r7, #16]
 801623e:	429a      	cmp	r2, r3
 8016240:	f200 836e 	bhi.w	8016920 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8016244:	687b      	ldr	r3, [r7, #4]
 8016246:	681b      	ldr	r3, [r3, #0]
 8016248:	685b      	ldr	r3, [r3, #4]
 801624a:	4a64      	ldr	r2, [pc, #400]	@ (80163dc <tcp_input+0x298>)
 801624c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 801624e:	687b      	ldr	r3, [r7, #4]
 8016250:	681b      	ldr	r3, [r3, #0]
 8016252:	8a3a      	ldrh	r2, [r7, #16]
 8016254:	4611      	mov	r1, r2
 8016256:	4618      	mov	r0, r3
 8016258:	f7fd fe5a 	bl	8013f10 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801625c:	687b      	ldr	r3, [r7, #4]
 801625e:	891a      	ldrh	r2, [r3, #8]
 8016260:	8a3b      	ldrh	r3, [r7, #16]
 8016262:	1ad3      	subs	r3, r2, r3
 8016264:	b29a      	uxth	r2, r3
 8016266:	687b      	ldr	r3, [r7, #4]
 8016268:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801626a:	687b      	ldr	r3, [r7, #4]
 801626c:	895b      	ldrh	r3, [r3, #10]
 801626e:	2b00      	cmp	r3, #0
 8016270:	d005      	beq.n	801627e <tcp_input+0x13a>
 8016272:	4b54      	ldr	r3, [pc, #336]	@ (80163c4 <tcp_input+0x280>)
 8016274:	22df      	movs	r2, #223	@ 0xdf
 8016276:	495c      	ldr	r1, [pc, #368]	@ (80163e8 <tcp_input+0x2a4>)
 8016278:	4854      	ldr	r0, [pc, #336]	@ (80163cc <tcp_input+0x288>)
 801627a:	f007 ff87 	bl	801e18c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801627e:	687b      	ldr	r3, [r7, #4]
 8016280:	891a      	ldrh	r2, [r3, #8]
 8016282:	687b      	ldr	r3, [r7, #4]
 8016284:	681b      	ldr	r3, [r3, #0]
 8016286:	891b      	ldrh	r3, [r3, #8]
 8016288:	429a      	cmp	r2, r3
 801628a:	d005      	beq.n	8016298 <tcp_input+0x154>
 801628c:	4b4d      	ldr	r3, [pc, #308]	@ (80163c4 <tcp_input+0x280>)
 801628e:	22e0      	movs	r2, #224	@ 0xe0
 8016290:	4956      	ldr	r1, [pc, #344]	@ (80163ec <tcp_input+0x2a8>)
 8016292:	484e      	ldr	r0, [pc, #312]	@ (80163cc <tcp_input+0x288>)
 8016294:	f007 ff7a 	bl	801e18c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8016298:	4b4d      	ldr	r3, [pc, #308]	@ (80163d0 <tcp_input+0x28c>)
 801629a:	681b      	ldr	r3, [r3, #0]
 801629c:	881b      	ldrh	r3, [r3, #0]
 801629e:	b29b      	uxth	r3, r3
 80162a0:	4a4b      	ldr	r2, [pc, #300]	@ (80163d0 <tcp_input+0x28c>)
 80162a2:	6814      	ldr	r4, [r2, #0]
 80162a4:	4618      	mov	r0, r3
 80162a6:	f7fc faf9 	bl	801289c <lwip_htons>
 80162aa:	4603      	mov	r3, r0
 80162ac:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80162ae:	4b48      	ldr	r3, [pc, #288]	@ (80163d0 <tcp_input+0x28c>)
 80162b0:	681b      	ldr	r3, [r3, #0]
 80162b2:	885b      	ldrh	r3, [r3, #2]
 80162b4:	b29b      	uxth	r3, r3
 80162b6:	4a46      	ldr	r2, [pc, #280]	@ (80163d0 <tcp_input+0x28c>)
 80162b8:	6814      	ldr	r4, [r2, #0]
 80162ba:	4618      	mov	r0, r3
 80162bc:	f7fc faee 	bl	801289c <lwip_htons>
 80162c0:	4603      	mov	r3, r0
 80162c2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80162c4:	4b42      	ldr	r3, [pc, #264]	@ (80163d0 <tcp_input+0x28c>)
 80162c6:	681b      	ldr	r3, [r3, #0]
 80162c8:	685b      	ldr	r3, [r3, #4]
 80162ca:	4a41      	ldr	r2, [pc, #260]	@ (80163d0 <tcp_input+0x28c>)
 80162cc:	6814      	ldr	r4, [r2, #0]
 80162ce:	4618      	mov	r0, r3
 80162d0:	f7fc fafa 	bl	80128c8 <lwip_htonl>
 80162d4:	4603      	mov	r3, r0
 80162d6:	6063      	str	r3, [r4, #4]
 80162d8:	6863      	ldr	r3, [r4, #4]
 80162da:	4a45      	ldr	r2, [pc, #276]	@ (80163f0 <tcp_input+0x2ac>)
 80162dc:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80162de:	4b3c      	ldr	r3, [pc, #240]	@ (80163d0 <tcp_input+0x28c>)
 80162e0:	681b      	ldr	r3, [r3, #0]
 80162e2:	689b      	ldr	r3, [r3, #8]
 80162e4:	4a3a      	ldr	r2, [pc, #232]	@ (80163d0 <tcp_input+0x28c>)
 80162e6:	6814      	ldr	r4, [r2, #0]
 80162e8:	4618      	mov	r0, r3
 80162ea:	f7fc faed 	bl	80128c8 <lwip_htonl>
 80162ee:	4603      	mov	r3, r0
 80162f0:	60a3      	str	r3, [r4, #8]
 80162f2:	68a3      	ldr	r3, [r4, #8]
 80162f4:	4a3f      	ldr	r2, [pc, #252]	@ (80163f4 <tcp_input+0x2b0>)
 80162f6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80162f8:	4b35      	ldr	r3, [pc, #212]	@ (80163d0 <tcp_input+0x28c>)
 80162fa:	681b      	ldr	r3, [r3, #0]
 80162fc:	89db      	ldrh	r3, [r3, #14]
 80162fe:	b29b      	uxth	r3, r3
 8016300:	4a33      	ldr	r2, [pc, #204]	@ (80163d0 <tcp_input+0x28c>)
 8016302:	6814      	ldr	r4, [r2, #0]
 8016304:	4618      	mov	r0, r3
 8016306:	f7fc fac9 	bl	801289c <lwip_htons>
 801630a:	4603      	mov	r3, r0
 801630c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801630e:	4b30      	ldr	r3, [pc, #192]	@ (80163d0 <tcp_input+0x28c>)
 8016310:	681b      	ldr	r3, [r3, #0]
 8016312:	899b      	ldrh	r3, [r3, #12]
 8016314:	b29b      	uxth	r3, r3
 8016316:	4618      	mov	r0, r3
 8016318:	f7fc fac0 	bl	801289c <lwip_htons>
 801631c:	4603      	mov	r3, r0
 801631e:	b2db      	uxtb	r3, r3
 8016320:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8016324:	b2da      	uxtb	r2, r3
 8016326:	4b34      	ldr	r3, [pc, #208]	@ (80163f8 <tcp_input+0x2b4>)
 8016328:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801632a:	687b      	ldr	r3, [r7, #4]
 801632c:	891a      	ldrh	r2, [r3, #8]
 801632e:	4b33      	ldr	r3, [pc, #204]	@ (80163fc <tcp_input+0x2b8>)
 8016330:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8016332:	4b31      	ldr	r3, [pc, #196]	@ (80163f8 <tcp_input+0x2b4>)
 8016334:	781b      	ldrb	r3, [r3, #0]
 8016336:	f003 0303 	and.w	r3, r3, #3
 801633a:	2b00      	cmp	r3, #0
 801633c:	d00c      	beq.n	8016358 <tcp_input+0x214>
    tcplen++;
 801633e:	4b2f      	ldr	r3, [pc, #188]	@ (80163fc <tcp_input+0x2b8>)
 8016340:	881b      	ldrh	r3, [r3, #0]
 8016342:	3301      	adds	r3, #1
 8016344:	b29a      	uxth	r2, r3
 8016346:	4b2d      	ldr	r3, [pc, #180]	@ (80163fc <tcp_input+0x2b8>)
 8016348:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801634a:	687b      	ldr	r3, [r7, #4]
 801634c:	891a      	ldrh	r2, [r3, #8]
 801634e:	4b2b      	ldr	r3, [pc, #172]	@ (80163fc <tcp_input+0x2b8>)
 8016350:	881b      	ldrh	r3, [r3, #0]
 8016352:	429a      	cmp	r2, r3
 8016354:	f200 82e6 	bhi.w	8016924 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8016358:	2300      	movs	r3, #0
 801635a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801635c:	4b28      	ldr	r3, [pc, #160]	@ (8016400 <tcp_input+0x2bc>)
 801635e:	681b      	ldr	r3, [r3, #0]
 8016360:	61fb      	str	r3, [r7, #28]
 8016362:	e09d      	b.n	80164a0 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8016364:	69fb      	ldr	r3, [r7, #28]
 8016366:	7d1b      	ldrb	r3, [r3, #20]
 8016368:	2b00      	cmp	r3, #0
 801636a:	d105      	bne.n	8016378 <tcp_input+0x234>
 801636c:	4b15      	ldr	r3, [pc, #84]	@ (80163c4 <tcp_input+0x280>)
 801636e:	22fb      	movs	r2, #251	@ 0xfb
 8016370:	4924      	ldr	r1, [pc, #144]	@ (8016404 <tcp_input+0x2c0>)
 8016372:	4816      	ldr	r0, [pc, #88]	@ (80163cc <tcp_input+0x288>)
 8016374:	f007 ff0a 	bl	801e18c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8016378:	69fb      	ldr	r3, [r7, #28]
 801637a:	7d1b      	ldrb	r3, [r3, #20]
 801637c:	2b0a      	cmp	r3, #10
 801637e:	d105      	bne.n	801638c <tcp_input+0x248>
 8016380:	4b10      	ldr	r3, [pc, #64]	@ (80163c4 <tcp_input+0x280>)
 8016382:	22fc      	movs	r2, #252	@ 0xfc
 8016384:	4920      	ldr	r1, [pc, #128]	@ (8016408 <tcp_input+0x2c4>)
 8016386:	4811      	ldr	r0, [pc, #68]	@ (80163cc <tcp_input+0x288>)
 8016388:	f007 ff00 	bl	801e18c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801638c:	69fb      	ldr	r3, [r7, #28]
 801638e:	7d1b      	ldrb	r3, [r3, #20]
 8016390:	2b01      	cmp	r3, #1
 8016392:	d105      	bne.n	80163a0 <tcp_input+0x25c>
 8016394:	4b0b      	ldr	r3, [pc, #44]	@ (80163c4 <tcp_input+0x280>)
 8016396:	22fd      	movs	r2, #253	@ 0xfd
 8016398:	491c      	ldr	r1, [pc, #112]	@ (801640c <tcp_input+0x2c8>)
 801639a:	480c      	ldr	r0, [pc, #48]	@ (80163cc <tcp_input+0x288>)
 801639c:	f007 fef6 	bl	801e18c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80163a0:	69fb      	ldr	r3, [r7, #28]
 80163a2:	7a1b      	ldrb	r3, [r3, #8]
 80163a4:	2b00      	cmp	r3, #0
 80163a6:	d033      	beq.n	8016410 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80163a8:	69fb      	ldr	r3, [r7, #28]
 80163aa:	7a1a      	ldrb	r2, [r3, #8]
 80163ac:	4b09      	ldr	r3, [pc, #36]	@ (80163d4 <tcp_input+0x290>)
 80163ae:	685b      	ldr	r3, [r3, #4]
 80163b0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80163b4:	3301      	adds	r3, #1
 80163b6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80163b8:	429a      	cmp	r2, r3
 80163ba:	d029      	beq.n	8016410 <tcp_input+0x2cc>
      prev = pcb;
 80163bc:	69fb      	ldr	r3, [r7, #28]
 80163be:	61bb      	str	r3, [r7, #24]
      continue;
 80163c0:	e06b      	b.n	801649a <tcp_input+0x356>
 80163c2:	bf00      	nop
 80163c4:	08022470 	.word	0x08022470
 80163c8:	080224a4 	.word	0x080224a4
 80163cc:	080224bc 	.word	0x080224bc
 80163d0:	2000cae8 	.word	0x2000cae8
 80163d4:	2000936c 	.word	0x2000936c
 80163d8:	2000caec 	.word	0x2000caec
 80163dc:	2000caf0 	.word	0x2000caf0
 80163e0:	2000caee 	.word	0x2000caee
 80163e4:	080224e4 	.word	0x080224e4
 80163e8:	080224f4 	.word	0x080224f4
 80163ec:	08022500 	.word	0x08022500
 80163f0:	2000caf8 	.word	0x2000caf8
 80163f4:	2000cafc 	.word	0x2000cafc
 80163f8:	2000cb04 	.word	0x2000cb04
 80163fc:	2000cb02 	.word	0x2000cb02
 8016400:	2000cacc 	.word	0x2000cacc
 8016404:	08022520 	.word	0x08022520
 8016408:	08022548 	.word	0x08022548
 801640c:	08022574 	.word	0x08022574
    }

    if (pcb->remote_port == tcphdr->src &&
 8016410:	69fb      	ldr	r3, [r7, #28]
 8016412:	8b1a      	ldrh	r2, [r3, #24]
 8016414:	4b72      	ldr	r3, [pc, #456]	@ (80165e0 <tcp_input+0x49c>)
 8016416:	681b      	ldr	r3, [r3, #0]
 8016418:	881b      	ldrh	r3, [r3, #0]
 801641a:	b29b      	uxth	r3, r3
 801641c:	429a      	cmp	r2, r3
 801641e:	d13a      	bne.n	8016496 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8016420:	69fb      	ldr	r3, [r7, #28]
 8016422:	8ada      	ldrh	r2, [r3, #22]
 8016424:	4b6e      	ldr	r3, [pc, #440]	@ (80165e0 <tcp_input+0x49c>)
 8016426:	681b      	ldr	r3, [r3, #0]
 8016428:	885b      	ldrh	r3, [r3, #2]
 801642a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 801642c:	429a      	cmp	r2, r3
 801642e:	d132      	bne.n	8016496 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016430:	69fb      	ldr	r3, [r7, #28]
 8016432:	685a      	ldr	r2, [r3, #4]
 8016434:	4b6b      	ldr	r3, [pc, #428]	@ (80165e4 <tcp_input+0x4a0>)
 8016436:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8016438:	429a      	cmp	r2, r3
 801643a:	d12c      	bne.n	8016496 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801643c:	69fb      	ldr	r3, [r7, #28]
 801643e:	681a      	ldr	r2, [r3, #0]
 8016440:	4b68      	ldr	r3, [pc, #416]	@ (80165e4 <tcp_input+0x4a0>)
 8016442:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016444:	429a      	cmp	r2, r3
 8016446:	d126      	bne.n	8016496 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8016448:	69fb      	ldr	r3, [r7, #28]
 801644a:	68db      	ldr	r3, [r3, #12]
 801644c:	69fa      	ldr	r2, [r7, #28]
 801644e:	429a      	cmp	r2, r3
 8016450:	d106      	bne.n	8016460 <tcp_input+0x31c>
 8016452:	4b65      	ldr	r3, [pc, #404]	@ (80165e8 <tcp_input+0x4a4>)
 8016454:	f240 120d 	movw	r2, #269	@ 0x10d
 8016458:	4964      	ldr	r1, [pc, #400]	@ (80165ec <tcp_input+0x4a8>)
 801645a:	4865      	ldr	r0, [pc, #404]	@ (80165f0 <tcp_input+0x4ac>)
 801645c:	f007 fe96 	bl	801e18c <iprintf>
      if (prev != NULL) {
 8016460:	69bb      	ldr	r3, [r7, #24]
 8016462:	2b00      	cmp	r3, #0
 8016464:	d00a      	beq.n	801647c <tcp_input+0x338>
        prev->next = pcb->next;
 8016466:	69fb      	ldr	r3, [r7, #28]
 8016468:	68da      	ldr	r2, [r3, #12]
 801646a:	69bb      	ldr	r3, [r7, #24]
 801646c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801646e:	4b61      	ldr	r3, [pc, #388]	@ (80165f4 <tcp_input+0x4b0>)
 8016470:	681a      	ldr	r2, [r3, #0]
 8016472:	69fb      	ldr	r3, [r7, #28]
 8016474:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8016476:	4a5f      	ldr	r2, [pc, #380]	@ (80165f4 <tcp_input+0x4b0>)
 8016478:	69fb      	ldr	r3, [r7, #28]
 801647a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801647c:	69fb      	ldr	r3, [r7, #28]
 801647e:	68db      	ldr	r3, [r3, #12]
 8016480:	69fa      	ldr	r2, [r7, #28]
 8016482:	429a      	cmp	r2, r3
 8016484:	d111      	bne.n	80164aa <tcp_input+0x366>
 8016486:	4b58      	ldr	r3, [pc, #352]	@ (80165e8 <tcp_input+0x4a4>)
 8016488:	f240 1215 	movw	r2, #277	@ 0x115
 801648c:	495a      	ldr	r1, [pc, #360]	@ (80165f8 <tcp_input+0x4b4>)
 801648e:	4858      	ldr	r0, [pc, #352]	@ (80165f0 <tcp_input+0x4ac>)
 8016490:	f007 fe7c 	bl	801e18c <iprintf>
      break;
 8016494:	e009      	b.n	80164aa <tcp_input+0x366>
    }
    prev = pcb;
 8016496:	69fb      	ldr	r3, [r7, #28]
 8016498:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801649a:	69fb      	ldr	r3, [r7, #28]
 801649c:	68db      	ldr	r3, [r3, #12]
 801649e:	61fb      	str	r3, [r7, #28]
 80164a0:	69fb      	ldr	r3, [r7, #28]
 80164a2:	2b00      	cmp	r3, #0
 80164a4:	f47f af5e 	bne.w	8016364 <tcp_input+0x220>
 80164a8:	e000      	b.n	80164ac <tcp_input+0x368>
      break;
 80164aa:	bf00      	nop
  }

  if (pcb == NULL) {
 80164ac:	69fb      	ldr	r3, [r7, #28]
 80164ae:	2b00      	cmp	r3, #0
 80164b0:	f040 80aa 	bne.w	8016608 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80164b4:	4b51      	ldr	r3, [pc, #324]	@ (80165fc <tcp_input+0x4b8>)
 80164b6:	681b      	ldr	r3, [r3, #0]
 80164b8:	61fb      	str	r3, [r7, #28]
 80164ba:	e03f      	b.n	801653c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80164bc:	69fb      	ldr	r3, [r7, #28]
 80164be:	7d1b      	ldrb	r3, [r3, #20]
 80164c0:	2b0a      	cmp	r3, #10
 80164c2:	d006      	beq.n	80164d2 <tcp_input+0x38e>
 80164c4:	4b48      	ldr	r3, [pc, #288]	@ (80165e8 <tcp_input+0x4a4>)
 80164c6:	f240 121f 	movw	r2, #287	@ 0x11f
 80164ca:	494d      	ldr	r1, [pc, #308]	@ (8016600 <tcp_input+0x4bc>)
 80164cc:	4848      	ldr	r0, [pc, #288]	@ (80165f0 <tcp_input+0x4ac>)
 80164ce:	f007 fe5d 	bl	801e18c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80164d2:	69fb      	ldr	r3, [r7, #28]
 80164d4:	7a1b      	ldrb	r3, [r3, #8]
 80164d6:	2b00      	cmp	r3, #0
 80164d8:	d009      	beq.n	80164ee <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80164da:	69fb      	ldr	r3, [r7, #28]
 80164dc:	7a1a      	ldrb	r2, [r3, #8]
 80164de:	4b41      	ldr	r3, [pc, #260]	@ (80165e4 <tcp_input+0x4a0>)
 80164e0:	685b      	ldr	r3, [r3, #4]
 80164e2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80164e6:	3301      	adds	r3, #1
 80164e8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80164ea:	429a      	cmp	r2, r3
 80164ec:	d122      	bne.n	8016534 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80164ee:	69fb      	ldr	r3, [r7, #28]
 80164f0:	8b1a      	ldrh	r2, [r3, #24]
 80164f2:	4b3b      	ldr	r3, [pc, #236]	@ (80165e0 <tcp_input+0x49c>)
 80164f4:	681b      	ldr	r3, [r3, #0]
 80164f6:	881b      	ldrh	r3, [r3, #0]
 80164f8:	b29b      	uxth	r3, r3
 80164fa:	429a      	cmp	r2, r3
 80164fc:	d11b      	bne.n	8016536 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80164fe:	69fb      	ldr	r3, [r7, #28]
 8016500:	8ada      	ldrh	r2, [r3, #22]
 8016502:	4b37      	ldr	r3, [pc, #220]	@ (80165e0 <tcp_input+0x49c>)
 8016504:	681b      	ldr	r3, [r3, #0]
 8016506:	885b      	ldrh	r3, [r3, #2]
 8016508:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801650a:	429a      	cmp	r2, r3
 801650c:	d113      	bne.n	8016536 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801650e:	69fb      	ldr	r3, [r7, #28]
 8016510:	685a      	ldr	r2, [r3, #4]
 8016512:	4b34      	ldr	r3, [pc, #208]	@ (80165e4 <tcp_input+0x4a0>)
 8016514:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8016516:	429a      	cmp	r2, r3
 8016518:	d10d      	bne.n	8016536 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801651a:	69fb      	ldr	r3, [r7, #28]
 801651c:	681a      	ldr	r2, [r3, #0]
 801651e:	4b31      	ldr	r3, [pc, #196]	@ (80165e4 <tcp_input+0x4a0>)
 8016520:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016522:	429a      	cmp	r2, r3
 8016524:	d107      	bne.n	8016536 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8016526:	69f8      	ldr	r0, [r7, #28]
 8016528:	f000 fb56 	bl	8016bd8 <tcp_timewait_input>
        }
        pbuf_free(p);
 801652c:	6878      	ldr	r0, [r7, #4]
 801652e:	f7fd fd75 	bl	801401c <pbuf_free>
        return;
 8016532:	e1fd      	b.n	8016930 <tcp_input+0x7ec>
        continue;
 8016534:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8016536:	69fb      	ldr	r3, [r7, #28]
 8016538:	68db      	ldr	r3, [r3, #12]
 801653a:	61fb      	str	r3, [r7, #28]
 801653c:	69fb      	ldr	r3, [r7, #28]
 801653e:	2b00      	cmp	r3, #0
 8016540:	d1bc      	bne.n	80164bc <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8016542:	2300      	movs	r3, #0
 8016544:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8016546:	4b2f      	ldr	r3, [pc, #188]	@ (8016604 <tcp_input+0x4c0>)
 8016548:	681b      	ldr	r3, [r3, #0]
 801654a:	617b      	str	r3, [r7, #20]
 801654c:	e02a      	b.n	80165a4 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801654e:	697b      	ldr	r3, [r7, #20]
 8016550:	7a1b      	ldrb	r3, [r3, #8]
 8016552:	2b00      	cmp	r3, #0
 8016554:	d00c      	beq.n	8016570 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8016556:	697b      	ldr	r3, [r7, #20]
 8016558:	7a1a      	ldrb	r2, [r3, #8]
 801655a:	4b22      	ldr	r3, [pc, #136]	@ (80165e4 <tcp_input+0x4a0>)
 801655c:	685b      	ldr	r3, [r3, #4]
 801655e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8016562:	3301      	adds	r3, #1
 8016564:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8016566:	429a      	cmp	r2, r3
 8016568:	d002      	beq.n	8016570 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801656a:	697b      	ldr	r3, [r7, #20]
 801656c:	61bb      	str	r3, [r7, #24]
        continue;
 801656e:	e016      	b.n	801659e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8016570:	697b      	ldr	r3, [r7, #20]
 8016572:	8ada      	ldrh	r2, [r3, #22]
 8016574:	4b1a      	ldr	r3, [pc, #104]	@ (80165e0 <tcp_input+0x49c>)
 8016576:	681b      	ldr	r3, [r3, #0]
 8016578:	885b      	ldrh	r3, [r3, #2]
 801657a:	b29b      	uxth	r3, r3
 801657c:	429a      	cmp	r2, r3
 801657e:	d10c      	bne.n	801659a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8016580:	697b      	ldr	r3, [r7, #20]
 8016582:	681a      	ldr	r2, [r3, #0]
 8016584:	4b17      	ldr	r3, [pc, #92]	@ (80165e4 <tcp_input+0x4a0>)
 8016586:	695b      	ldr	r3, [r3, #20]
 8016588:	429a      	cmp	r2, r3
 801658a:	d00f      	beq.n	80165ac <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801658c:	697b      	ldr	r3, [r7, #20]
 801658e:	2b00      	cmp	r3, #0
 8016590:	d00d      	beq.n	80165ae <tcp_input+0x46a>
 8016592:	697b      	ldr	r3, [r7, #20]
 8016594:	681b      	ldr	r3, [r3, #0]
 8016596:	2b00      	cmp	r3, #0
 8016598:	d009      	beq.n	80165ae <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801659a:	697b      	ldr	r3, [r7, #20]
 801659c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801659e:	697b      	ldr	r3, [r7, #20]
 80165a0:	68db      	ldr	r3, [r3, #12]
 80165a2:	617b      	str	r3, [r7, #20]
 80165a4:	697b      	ldr	r3, [r7, #20]
 80165a6:	2b00      	cmp	r3, #0
 80165a8:	d1d1      	bne.n	801654e <tcp_input+0x40a>
 80165aa:	e000      	b.n	80165ae <tcp_input+0x46a>
            break;
 80165ac:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80165ae:	697b      	ldr	r3, [r7, #20]
 80165b0:	2b00      	cmp	r3, #0
 80165b2:	d029      	beq.n	8016608 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80165b4:	69bb      	ldr	r3, [r7, #24]
 80165b6:	2b00      	cmp	r3, #0
 80165b8:	d00a      	beq.n	80165d0 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80165ba:	697b      	ldr	r3, [r7, #20]
 80165bc:	68da      	ldr	r2, [r3, #12]
 80165be:	69bb      	ldr	r3, [r7, #24]
 80165c0:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80165c2:	4b10      	ldr	r3, [pc, #64]	@ (8016604 <tcp_input+0x4c0>)
 80165c4:	681a      	ldr	r2, [r3, #0]
 80165c6:	697b      	ldr	r3, [r7, #20]
 80165c8:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80165ca:	4a0e      	ldr	r2, [pc, #56]	@ (8016604 <tcp_input+0x4c0>)
 80165cc:	697b      	ldr	r3, [r7, #20]
 80165ce:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80165d0:	6978      	ldr	r0, [r7, #20]
 80165d2:	f000 fa03 	bl	80169dc <tcp_listen_input>
      }
      pbuf_free(p);
 80165d6:	6878      	ldr	r0, [r7, #4]
 80165d8:	f7fd fd20 	bl	801401c <pbuf_free>
      return;
 80165dc:	e1a8      	b.n	8016930 <tcp_input+0x7ec>
 80165de:	bf00      	nop
 80165e0:	2000cae8 	.word	0x2000cae8
 80165e4:	2000936c 	.word	0x2000936c
 80165e8:	08022470 	.word	0x08022470
 80165ec:	0802259c 	.word	0x0802259c
 80165f0:	080224bc 	.word	0x080224bc
 80165f4:	2000cacc 	.word	0x2000cacc
 80165f8:	080225c8 	.word	0x080225c8
 80165fc:	2000cad0 	.word	0x2000cad0
 8016600:	080225f4 	.word	0x080225f4
 8016604:	2000cac8 	.word	0x2000cac8
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8016608:	69fb      	ldr	r3, [r7, #28]
 801660a:	2b00      	cmp	r3, #0
 801660c:	f000 8158 	beq.w	80168c0 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8016610:	4b95      	ldr	r3, [pc, #596]	@ (8016868 <tcp_input+0x724>)
 8016612:	2200      	movs	r2, #0
 8016614:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8016616:	687b      	ldr	r3, [r7, #4]
 8016618:	891a      	ldrh	r2, [r3, #8]
 801661a:	4b93      	ldr	r3, [pc, #588]	@ (8016868 <tcp_input+0x724>)
 801661c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801661e:	4a92      	ldr	r2, [pc, #584]	@ (8016868 <tcp_input+0x724>)
 8016620:	687b      	ldr	r3, [r7, #4]
 8016622:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8016624:	4b91      	ldr	r3, [pc, #580]	@ (801686c <tcp_input+0x728>)
 8016626:	681b      	ldr	r3, [r3, #0]
 8016628:	4a8f      	ldr	r2, [pc, #572]	@ (8016868 <tcp_input+0x724>)
 801662a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 801662c:	4b90      	ldr	r3, [pc, #576]	@ (8016870 <tcp_input+0x72c>)
 801662e:	2200      	movs	r2, #0
 8016630:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8016632:	4b90      	ldr	r3, [pc, #576]	@ (8016874 <tcp_input+0x730>)
 8016634:	2200      	movs	r2, #0
 8016636:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8016638:	4b8f      	ldr	r3, [pc, #572]	@ (8016878 <tcp_input+0x734>)
 801663a:	2200      	movs	r2, #0
 801663c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801663e:	4b8f      	ldr	r3, [pc, #572]	@ (801687c <tcp_input+0x738>)
 8016640:	781b      	ldrb	r3, [r3, #0]
 8016642:	f003 0308 	and.w	r3, r3, #8
 8016646:	2b00      	cmp	r3, #0
 8016648:	d006      	beq.n	8016658 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 801664a:	687b      	ldr	r3, [r7, #4]
 801664c:	7b5b      	ldrb	r3, [r3, #13]
 801664e:	f043 0301 	orr.w	r3, r3, #1
 8016652:	b2da      	uxtb	r2, r3
 8016654:	687b      	ldr	r3, [r7, #4]
 8016656:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8016658:	69fb      	ldr	r3, [r7, #28]
 801665a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801665c:	2b00      	cmp	r3, #0
 801665e:	d017      	beq.n	8016690 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8016660:	69f8      	ldr	r0, [r7, #28]
 8016662:	f7ff f885 	bl	8015770 <tcp_process_refused_data>
 8016666:	4603      	mov	r3, r0
 8016668:	f113 0f0d 	cmn.w	r3, #13
 801666c:	d007      	beq.n	801667e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801666e:	69fb      	ldr	r3, [r7, #28]
 8016670:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8016672:	2b00      	cmp	r3, #0
 8016674:	d00c      	beq.n	8016690 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8016676:	4b82      	ldr	r3, [pc, #520]	@ (8016880 <tcp_input+0x73c>)
 8016678:	881b      	ldrh	r3, [r3, #0]
 801667a:	2b00      	cmp	r3, #0
 801667c:	d008      	beq.n	8016690 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801667e:	69fb      	ldr	r3, [r7, #28]
 8016680:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016682:	2b00      	cmp	r3, #0
 8016684:	f040 80e3 	bne.w	801684e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8016688:	69f8      	ldr	r0, [r7, #28]
 801668a:	f003 fdff 	bl	801a28c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801668e:	e0de      	b.n	801684e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8016690:	4a7c      	ldr	r2, [pc, #496]	@ (8016884 <tcp_input+0x740>)
 8016692:	69fb      	ldr	r3, [r7, #28]
 8016694:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8016696:	69f8      	ldr	r0, [r7, #28]
 8016698:	f000 fb18 	bl	8016ccc <tcp_process>
 801669c:	4603      	mov	r3, r0
 801669e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80166a0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80166a4:	f113 0f0d 	cmn.w	r3, #13
 80166a8:	f000 80d3 	beq.w	8016852 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 80166ac:	4b71      	ldr	r3, [pc, #452]	@ (8016874 <tcp_input+0x730>)
 80166ae:	781b      	ldrb	r3, [r3, #0]
 80166b0:	f003 0308 	and.w	r3, r3, #8
 80166b4:	2b00      	cmp	r3, #0
 80166b6:	d015      	beq.n	80166e4 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80166b8:	69fb      	ldr	r3, [r7, #28]
 80166ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80166be:	2b00      	cmp	r3, #0
 80166c0:	d008      	beq.n	80166d4 <tcp_input+0x590>
 80166c2:	69fb      	ldr	r3, [r7, #28]
 80166c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80166c8:	69fa      	ldr	r2, [r7, #28]
 80166ca:	6912      	ldr	r2, [r2, #16]
 80166cc:	f06f 010d 	mvn.w	r1, #13
 80166d0:	4610      	mov	r0, r2
 80166d2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80166d4:	69f9      	ldr	r1, [r7, #28]
 80166d6:	486c      	ldr	r0, [pc, #432]	@ (8016888 <tcp_input+0x744>)
 80166d8:	f7ff fbbc 	bl	8015e54 <tcp_pcb_remove>
        tcp_free(pcb);
 80166dc:	69f8      	ldr	r0, [r7, #28]
 80166de:	f7fd ff49 	bl	8014574 <tcp_free>
 80166e2:	e0da      	b.n	801689a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 80166e4:	2300      	movs	r3, #0
 80166e6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80166e8:	4b63      	ldr	r3, [pc, #396]	@ (8016878 <tcp_input+0x734>)
 80166ea:	881b      	ldrh	r3, [r3, #0]
 80166ec:	2b00      	cmp	r3, #0
 80166ee:	d01d      	beq.n	801672c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80166f0:	4b61      	ldr	r3, [pc, #388]	@ (8016878 <tcp_input+0x734>)
 80166f2:	881b      	ldrh	r3, [r3, #0]
 80166f4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80166f6:	69fb      	ldr	r3, [r7, #28]
 80166f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80166fc:	2b00      	cmp	r3, #0
 80166fe:	d00a      	beq.n	8016716 <tcp_input+0x5d2>
 8016700:	69fb      	ldr	r3, [r7, #28]
 8016702:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8016706:	69fa      	ldr	r2, [r7, #28]
 8016708:	6910      	ldr	r0, [r2, #16]
 801670a:	89fa      	ldrh	r2, [r7, #14]
 801670c:	69f9      	ldr	r1, [r7, #28]
 801670e:	4798      	blx	r3
 8016710:	4603      	mov	r3, r0
 8016712:	74fb      	strb	r3, [r7, #19]
 8016714:	e001      	b.n	801671a <tcp_input+0x5d6>
 8016716:	2300      	movs	r3, #0
 8016718:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801671a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801671e:	f113 0f0d 	cmn.w	r3, #13
 8016722:	f000 8098 	beq.w	8016856 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8016726:	4b54      	ldr	r3, [pc, #336]	@ (8016878 <tcp_input+0x734>)
 8016728:	2200      	movs	r2, #0
 801672a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801672c:	69f8      	ldr	r0, [r7, #28]
 801672e:	f000 f915 	bl	801695c <tcp_input_delayed_close>
 8016732:	4603      	mov	r3, r0
 8016734:	2b00      	cmp	r3, #0
 8016736:	f040 8090 	bne.w	801685a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801673a:	4b4d      	ldr	r3, [pc, #308]	@ (8016870 <tcp_input+0x72c>)
 801673c:	681b      	ldr	r3, [r3, #0]
 801673e:	2b00      	cmp	r3, #0
 8016740:	d041      	beq.n	80167c6 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8016742:	69fb      	ldr	r3, [r7, #28]
 8016744:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016746:	2b00      	cmp	r3, #0
 8016748:	d006      	beq.n	8016758 <tcp_input+0x614>
 801674a:	4b50      	ldr	r3, [pc, #320]	@ (801688c <tcp_input+0x748>)
 801674c:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8016750:	494f      	ldr	r1, [pc, #316]	@ (8016890 <tcp_input+0x74c>)
 8016752:	4850      	ldr	r0, [pc, #320]	@ (8016894 <tcp_input+0x750>)
 8016754:	f007 fd1a 	bl	801e18c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8016758:	69fb      	ldr	r3, [r7, #28]
 801675a:	8b5b      	ldrh	r3, [r3, #26]
 801675c:	f003 0310 	and.w	r3, r3, #16
 8016760:	2b00      	cmp	r3, #0
 8016762:	d008      	beq.n	8016776 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8016764:	4b42      	ldr	r3, [pc, #264]	@ (8016870 <tcp_input+0x72c>)
 8016766:	681b      	ldr	r3, [r3, #0]
 8016768:	4618      	mov	r0, r3
 801676a:	f7fd fc57 	bl	801401c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801676e:	69f8      	ldr	r0, [r7, #28]
 8016770:	f7fe f9e8 	bl	8014b44 <tcp_abort>
            goto aborted;
 8016774:	e091      	b.n	801689a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8016776:	69fb      	ldr	r3, [r7, #28]
 8016778:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801677c:	2b00      	cmp	r3, #0
 801677e:	d00c      	beq.n	801679a <tcp_input+0x656>
 8016780:	69fb      	ldr	r3, [r7, #28]
 8016782:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8016786:	69fb      	ldr	r3, [r7, #28]
 8016788:	6918      	ldr	r0, [r3, #16]
 801678a:	4b39      	ldr	r3, [pc, #228]	@ (8016870 <tcp_input+0x72c>)
 801678c:	681a      	ldr	r2, [r3, #0]
 801678e:	2300      	movs	r3, #0
 8016790:	69f9      	ldr	r1, [r7, #28]
 8016792:	47a0      	blx	r4
 8016794:	4603      	mov	r3, r0
 8016796:	74fb      	strb	r3, [r7, #19]
 8016798:	e008      	b.n	80167ac <tcp_input+0x668>
 801679a:	4b35      	ldr	r3, [pc, #212]	@ (8016870 <tcp_input+0x72c>)
 801679c:	681a      	ldr	r2, [r3, #0]
 801679e:	2300      	movs	r3, #0
 80167a0:	69f9      	ldr	r1, [r7, #28]
 80167a2:	2000      	movs	r0, #0
 80167a4:	f7ff f8d8 	bl	8015958 <tcp_recv_null>
 80167a8:	4603      	mov	r3, r0
 80167aa:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80167ac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80167b0:	f113 0f0d 	cmn.w	r3, #13
 80167b4:	d053      	beq.n	801685e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80167b6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80167ba:	2b00      	cmp	r3, #0
 80167bc:	d003      	beq.n	80167c6 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80167be:	4b2c      	ldr	r3, [pc, #176]	@ (8016870 <tcp_input+0x72c>)
 80167c0:	681a      	ldr	r2, [r3, #0]
 80167c2:	69fb      	ldr	r3, [r7, #28]
 80167c4:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80167c6:	4b2b      	ldr	r3, [pc, #172]	@ (8016874 <tcp_input+0x730>)
 80167c8:	781b      	ldrb	r3, [r3, #0]
 80167ca:	f003 0320 	and.w	r3, r3, #32
 80167ce:	2b00      	cmp	r3, #0
 80167d0:	d030      	beq.n	8016834 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 80167d2:	69fb      	ldr	r3, [r7, #28]
 80167d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80167d6:	2b00      	cmp	r3, #0
 80167d8:	d009      	beq.n	80167ee <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80167da:	69fb      	ldr	r3, [r7, #28]
 80167dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80167de:	7b5a      	ldrb	r2, [r3, #13]
 80167e0:	69fb      	ldr	r3, [r7, #28]
 80167e2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80167e4:	f042 0220 	orr.w	r2, r2, #32
 80167e8:	b2d2      	uxtb	r2, r2
 80167ea:	735a      	strb	r2, [r3, #13]
 80167ec:	e022      	b.n	8016834 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80167ee:	69fb      	ldr	r3, [r7, #28]
 80167f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80167f2:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80167f6:	d005      	beq.n	8016804 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 80167f8:	69fb      	ldr	r3, [r7, #28]
 80167fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80167fc:	3301      	adds	r3, #1
 80167fe:	b29a      	uxth	r2, r3
 8016800:	69fb      	ldr	r3, [r7, #28]
 8016802:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8016804:	69fb      	ldr	r3, [r7, #28]
 8016806:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801680a:	2b00      	cmp	r3, #0
 801680c:	d00b      	beq.n	8016826 <tcp_input+0x6e2>
 801680e:	69fb      	ldr	r3, [r7, #28]
 8016810:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8016814:	69fb      	ldr	r3, [r7, #28]
 8016816:	6918      	ldr	r0, [r3, #16]
 8016818:	2300      	movs	r3, #0
 801681a:	2200      	movs	r2, #0
 801681c:	69f9      	ldr	r1, [r7, #28]
 801681e:	47a0      	blx	r4
 8016820:	4603      	mov	r3, r0
 8016822:	74fb      	strb	r3, [r7, #19]
 8016824:	e001      	b.n	801682a <tcp_input+0x6e6>
 8016826:	2300      	movs	r3, #0
 8016828:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801682a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801682e:	f113 0f0d 	cmn.w	r3, #13
 8016832:	d016      	beq.n	8016862 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8016834:	4b13      	ldr	r3, [pc, #76]	@ (8016884 <tcp_input+0x740>)
 8016836:	2200      	movs	r2, #0
 8016838:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801683a:	69f8      	ldr	r0, [r7, #28]
 801683c:	f000 f88e 	bl	801695c <tcp_input_delayed_close>
 8016840:	4603      	mov	r3, r0
 8016842:	2b00      	cmp	r3, #0
 8016844:	d128      	bne.n	8016898 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8016846:	69f8      	ldr	r0, [r7, #28]
 8016848:	f002 ff1a 	bl	8019680 <tcp_output>
 801684c:	e025      	b.n	801689a <tcp_input+0x756>
        goto aborted;
 801684e:	bf00      	nop
 8016850:	e023      	b.n	801689a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8016852:	bf00      	nop
 8016854:	e021      	b.n	801689a <tcp_input+0x756>
              goto aborted;
 8016856:	bf00      	nop
 8016858:	e01f      	b.n	801689a <tcp_input+0x756>
          goto aborted;
 801685a:	bf00      	nop
 801685c:	e01d      	b.n	801689a <tcp_input+0x756>
            goto aborted;
 801685e:	bf00      	nop
 8016860:	e01b      	b.n	801689a <tcp_input+0x756>
              goto aborted;
 8016862:	bf00      	nop
 8016864:	e019      	b.n	801689a <tcp_input+0x756>
 8016866:	bf00      	nop
 8016868:	2000cad8 	.word	0x2000cad8
 801686c:	2000cae8 	.word	0x2000cae8
 8016870:	2000cb08 	.word	0x2000cb08
 8016874:	2000cb05 	.word	0x2000cb05
 8016878:	2000cb00 	.word	0x2000cb00
 801687c:	2000cb04 	.word	0x2000cb04
 8016880:	2000cb02 	.word	0x2000cb02
 8016884:	2000cb0c 	.word	0x2000cb0c
 8016888:	2000cacc 	.word	0x2000cacc
 801688c:	08022470 	.word	0x08022470
 8016890:	08022624 	.word	0x08022624
 8016894:	080224bc 	.word	0x080224bc
          goto aborted;
 8016898:	bf00      	nop
    tcp_input_pcb = NULL;
 801689a:	4b27      	ldr	r3, [pc, #156]	@ (8016938 <tcp_input+0x7f4>)
 801689c:	2200      	movs	r2, #0
 801689e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80168a0:	4b26      	ldr	r3, [pc, #152]	@ (801693c <tcp_input+0x7f8>)
 80168a2:	2200      	movs	r2, #0
 80168a4:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80168a6:	4b26      	ldr	r3, [pc, #152]	@ (8016940 <tcp_input+0x7fc>)
 80168a8:	685b      	ldr	r3, [r3, #4]
 80168aa:	2b00      	cmp	r3, #0
 80168ac:	d03f      	beq.n	801692e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 80168ae:	4b24      	ldr	r3, [pc, #144]	@ (8016940 <tcp_input+0x7fc>)
 80168b0:	685b      	ldr	r3, [r3, #4]
 80168b2:	4618      	mov	r0, r3
 80168b4:	f7fd fbb2 	bl	801401c <pbuf_free>
      inseg.p = NULL;
 80168b8:	4b21      	ldr	r3, [pc, #132]	@ (8016940 <tcp_input+0x7fc>)
 80168ba:	2200      	movs	r2, #0
 80168bc:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80168be:	e036      	b.n	801692e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80168c0:	4b20      	ldr	r3, [pc, #128]	@ (8016944 <tcp_input+0x800>)
 80168c2:	681b      	ldr	r3, [r3, #0]
 80168c4:	899b      	ldrh	r3, [r3, #12]
 80168c6:	b29b      	uxth	r3, r3
 80168c8:	4618      	mov	r0, r3
 80168ca:	f7fb ffe7 	bl	801289c <lwip_htons>
 80168ce:	4603      	mov	r3, r0
 80168d0:	b2db      	uxtb	r3, r3
 80168d2:	f003 0304 	and.w	r3, r3, #4
 80168d6:	2b00      	cmp	r3, #0
 80168d8:	d118      	bne.n	801690c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80168da:	4b1b      	ldr	r3, [pc, #108]	@ (8016948 <tcp_input+0x804>)
 80168dc:	6819      	ldr	r1, [r3, #0]
 80168de:	4b1b      	ldr	r3, [pc, #108]	@ (801694c <tcp_input+0x808>)
 80168e0:	881b      	ldrh	r3, [r3, #0]
 80168e2:	461a      	mov	r2, r3
 80168e4:	4b1a      	ldr	r3, [pc, #104]	@ (8016950 <tcp_input+0x80c>)
 80168e6:	681b      	ldr	r3, [r3, #0]
 80168e8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80168ea:	4b16      	ldr	r3, [pc, #88]	@ (8016944 <tcp_input+0x800>)
 80168ec:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80168ee:	885b      	ldrh	r3, [r3, #2]
 80168f0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80168f2:	4a14      	ldr	r2, [pc, #80]	@ (8016944 <tcp_input+0x800>)
 80168f4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80168f6:	8812      	ldrh	r2, [r2, #0]
 80168f8:	b292      	uxth	r2, r2
 80168fa:	9202      	str	r2, [sp, #8]
 80168fc:	9301      	str	r3, [sp, #4]
 80168fe:	4b15      	ldr	r3, [pc, #84]	@ (8016954 <tcp_input+0x810>)
 8016900:	9300      	str	r3, [sp, #0]
 8016902:	4b15      	ldr	r3, [pc, #84]	@ (8016958 <tcp_input+0x814>)
 8016904:	4602      	mov	r2, r0
 8016906:	2000      	movs	r0, #0
 8016908:	f003 fc6e 	bl	801a1e8 <tcp_rst>
    pbuf_free(p);
 801690c:	6878      	ldr	r0, [r7, #4]
 801690e:	f7fd fb85 	bl	801401c <pbuf_free>
  return;
 8016912:	e00c      	b.n	801692e <tcp_input+0x7ea>
    goto dropped;
 8016914:	bf00      	nop
 8016916:	e006      	b.n	8016926 <tcp_input+0x7e2>
    goto dropped;
 8016918:	bf00      	nop
 801691a:	e004      	b.n	8016926 <tcp_input+0x7e2>
    goto dropped;
 801691c:	bf00      	nop
 801691e:	e002      	b.n	8016926 <tcp_input+0x7e2>
      goto dropped;
 8016920:	bf00      	nop
 8016922:	e000      	b.n	8016926 <tcp_input+0x7e2>
      goto dropped;
 8016924:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8016926:	6878      	ldr	r0, [r7, #4]
 8016928:	f7fd fb78 	bl	801401c <pbuf_free>
 801692c:	e000      	b.n	8016930 <tcp_input+0x7ec>
  return;
 801692e:	bf00      	nop
}
 8016930:	3724      	adds	r7, #36	@ 0x24
 8016932:	46bd      	mov	sp, r7
 8016934:	bd90      	pop	{r4, r7, pc}
 8016936:	bf00      	nop
 8016938:	2000cb0c 	.word	0x2000cb0c
 801693c:	2000cb08 	.word	0x2000cb08
 8016940:	2000cad8 	.word	0x2000cad8
 8016944:	2000cae8 	.word	0x2000cae8
 8016948:	2000cafc 	.word	0x2000cafc
 801694c:	2000cb02 	.word	0x2000cb02
 8016950:	2000caf8 	.word	0x2000caf8
 8016954:	2000937c 	.word	0x2000937c
 8016958:	20009380 	.word	0x20009380

0801695c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 801695c:	b580      	push	{r7, lr}
 801695e:	b082      	sub	sp, #8
 8016960:	af00      	add	r7, sp, #0
 8016962:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8016964:	687b      	ldr	r3, [r7, #4]
 8016966:	2b00      	cmp	r3, #0
 8016968:	d106      	bne.n	8016978 <tcp_input_delayed_close+0x1c>
 801696a:	4b17      	ldr	r3, [pc, #92]	@ (80169c8 <tcp_input_delayed_close+0x6c>)
 801696c:	f240 225a 	movw	r2, #602	@ 0x25a
 8016970:	4916      	ldr	r1, [pc, #88]	@ (80169cc <tcp_input_delayed_close+0x70>)
 8016972:	4817      	ldr	r0, [pc, #92]	@ (80169d0 <tcp_input_delayed_close+0x74>)
 8016974:	f007 fc0a 	bl	801e18c <iprintf>

  if (recv_flags & TF_CLOSED) {
 8016978:	4b16      	ldr	r3, [pc, #88]	@ (80169d4 <tcp_input_delayed_close+0x78>)
 801697a:	781b      	ldrb	r3, [r3, #0]
 801697c:	f003 0310 	and.w	r3, r3, #16
 8016980:	2b00      	cmp	r3, #0
 8016982:	d01c      	beq.n	80169be <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8016984:	687b      	ldr	r3, [r7, #4]
 8016986:	8b5b      	ldrh	r3, [r3, #26]
 8016988:	f003 0310 	and.w	r3, r3, #16
 801698c:	2b00      	cmp	r3, #0
 801698e:	d10d      	bne.n	80169ac <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8016990:	687b      	ldr	r3, [r7, #4]
 8016992:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8016996:	2b00      	cmp	r3, #0
 8016998:	d008      	beq.n	80169ac <tcp_input_delayed_close+0x50>
 801699a:	687b      	ldr	r3, [r7, #4]
 801699c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80169a0:	687a      	ldr	r2, [r7, #4]
 80169a2:	6912      	ldr	r2, [r2, #16]
 80169a4:	f06f 010e 	mvn.w	r1, #14
 80169a8:	4610      	mov	r0, r2
 80169aa:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80169ac:	6879      	ldr	r1, [r7, #4]
 80169ae:	480a      	ldr	r0, [pc, #40]	@ (80169d8 <tcp_input_delayed_close+0x7c>)
 80169b0:	f7ff fa50 	bl	8015e54 <tcp_pcb_remove>
    tcp_free(pcb);
 80169b4:	6878      	ldr	r0, [r7, #4]
 80169b6:	f7fd fddd 	bl	8014574 <tcp_free>
    return 1;
 80169ba:	2301      	movs	r3, #1
 80169bc:	e000      	b.n	80169c0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80169be:	2300      	movs	r3, #0
}
 80169c0:	4618      	mov	r0, r3
 80169c2:	3708      	adds	r7, #8
 80169c4:	46bd      	mov	sp, r7
 80169c6:	bd80      	pop	{r7, pc}
 80169c8:	08022470 	.word	0x08022470
 80169cc:	08022640 	.word	0x08022640
 80169d0:	080224bc 	.word	0x080224bc
 80169d4:	2000cb05 	.word	0x2000cb05
 80169d8:	2000cacc 	.word	0x2000cacc

080169dc <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80169dc:	b590      	push	{r4, r7, lr}
 80169de:	b08b      	sub	sp, #44	@ 0x2c
 80169e0:	af04      	add	r7, sp, #16
 80169e2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80169e4:	4b6f      	ldr	r3, [pc, #444]	@ (8016ba4 <tcp_listen_input+0x1c8>)
 80169e6:	781b      	ldrb	r3, [r3, #0]
 80169e8:	f003 0304 	and.w	r3, r3, #4
 80169ec:	2b00      	cmp	r3, #0
 80169ee:	f040 80d2 	bne.w	8016b96 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80169f2:	687b      	ldr	r3, [r7, #4]
 80169f4:	2b00      	cmp	r3, #0
 80169f6:	d106      	bne.n	8016a06 <tcp_listen_input+0x2a>
 80169f8:	4b6b      	ldr	r3, [pc, #428]	@ (8016ba8 <tcp_listen_input+0x1cc>)
 80169fa:	f240 2281 	movw	r2, #641	@ 0x281
 80169fe:	496b      	ldr	r1, [pc, #428]	@ (8016bac <tcp_listen_input+0x1d0>)
 8016a00:	486b      	ldr	r0, [pc, #428]	@ (8016bb0 <tcp_listen_input+0x1d4>)
 8016a02:	f007 fbc3 	bl	801e18c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8016a06:	4b67      	ldr	r3, [pc, #412]	@ (8016ba4 <tcp_listen_input+0x1c8>)
 8016a08:	781b      	ldrb	r3, [r3, #0]
 8016a0a:	f003 0310 	and.w	r3, r3, #16
 8016a0e:	2b00      	cmp	r3, #0
 8016a10:	d019      	beq.n	8016a46 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016a12:	4b68      	ldr	r3, [pc, #416]	@ (8016bb4 <tcp_listen_input+0x1d8>)
 8016a14:	6819      	ldr	r1, [r3, #0]
 8016a16:	4b68      	ldr	r3, [pc, #416]	@ (8016bb8 <tcp_listen_input+0x1dc>)
 8016a18:	881b      	ldrh	r3, [r3, #0]
 8016a1a:	461a      	mov	r2, r3
 8016a1c:	4b67      	ldr	r3, [pc, #412]	@ (8016bbc <tcp_listen_input+0x1e0>)
 8016a1e:	681b      	ldr	r3, [r3, #0]
 8016a20:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016a22:	4b67      	ldr	r3, [pc, #412]	@ (8016bc0 <tcp_listen_input+0x1e4>)
 8016a24:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016a26:	885b      	ldrh	r3, [r3, #2]
 8016a28:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016a2a:	4a65      	ldr	r2, [pc, #404]	@ (8016bc0 <tcp_listen_input+0x1e4>)
 8016a2c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016a2e:	8812      	ldrh	r2, [r2, #0]
 8016a30:	b292      	uxth	r2, r2
 8016a32:	9202      	str	r2, [sp, #8]
 8016a34:	9301      	str	r3, [sp, #4]
 8016a36:	4b63      	ldr	r3, [pc, #396]	@ (8016bc4 <tcp_listen_input+0x1e8>)
 8016a38:	9300      	str	r3, [sp, #0]
 8016a3a:	4b63      	ldr	r3, [pc, #396]	@ (8016bc8 <tcp_listen_input+0x1ec>)
 8016a3c:	4602      	mov	r2, r0
 8016a3e:	6878      	ldr	r0, [r7, #4]
 8016a40:	f003 fbd2 	bl	801a1e8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8016a44:	e0a9      	b.n	8016b9a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8016a46:	4b57      	ldr	r3, [pc, #348]	@ (8016ba4 <tcp_listen_input+0x1c8>)
 8016a48:	781b      	ldrb	r3, [r3, #0]
 8016a4a:	f003 0302 	and.w	r3, r3, #2
 8016a4e:	2b00      	cmp	r3, #0
 8016a50:	f000 80a3 	beq.w	8016b9a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8016a54:	687b      	ldr	r3, [r7, #4]
 8016a56:	7d5b      	ldrb	r3, [r3, #21]
 8016a58:	4618      	mov	r0, r3
 8016a5a:	f7ff f8a1 	bl	8015ba0 <tcp_alloc>
 8016a5e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8016a60:	697b      	ldr	r3, [r7, #20]
 8016a62:	2b00      	cmp	r3, #0
 8016a64:	d111      	bne.n	8016a8a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8016a66:	687b      	ldr	r3, [r7, #4]
 8016a68:	699b      	ldr	r3, [r3, #24]
 8016a6a:	2b00      	cmp	r3, #0
 8016a6c:	d00a      	beq.n	8016a84 <tcp_listen_input+0xa8>
 8016a6e:	687b      	ldr	r3, [r7, #4]
 8016a70:	699b      	ldr	r3, [r3, #24]
 8016a72:	687a      	ldr	r2, [r7, #4]
 8016a74:	6910      	ldr	r0, [r2, #16]
 8016a76:	f04f 32ff 	mov.w	r2, #4294967295
 8016a7a:	2100      	movs	r1, #0
 8016a7c:	4798      	blx	r3
 8016a7e:	4603      	mov	r3, r0
 8016a80:	73bb      	strb	r3, [r7, #14]
      return;
 8016a82:	e08b      	b.n	8016b9c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8016a84:	23f0      	movs	r3, #240	@ 0xf0
 8016a86:	73bb      	strb	r3, [r7, #14]
      return;
 8016a88:	e088      	b.n	8016b9c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8016a8a:	4b50      	ldr	r3, [pc, #320]	@ (8016bcc <tcp_listen_input+0x1f0>)
 8016a8c:	695a      	ldr	r2, [r3, #20]
 8016a8e:	697b      	ldr	r3, [r7, #20]
 8016a90:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8016a92:	4b4e      	ldr	r3, [pc, #312]	@ (8016bcc <tcp_listen_input+0x1f0>)
 8016a94:	691a      	ldr	r2, [r3, #16]
 8016a96:	697b      	ldr	r3, [r7, #20]
 8016a98:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8016a9a:	687b      	ldr	r3, [r7, #4]
 8016a9c:	8ada      	ldrh	r2, [r3, #22]
 8016a9e:	697b      	ldr	r3, [r7, #20]
 8016aa0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8016aa2:	4b47      	ldr	r3, [pc, #284]	@ (8016bc0 <tcp_listen_input+0x1e4>)
 8016aa4:	681b      	ldr	r3, [r3, #0]
 8016aa6:	881b      	ldrh	r3, [r3, #0]
 8016aa8:	b29a      	uxth	r2, r3
 8016aaa:	697b      	ldr	r3, [r7, #20]
 8016aac:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8016aae:	697b      	ldr	r3, [r7, #20]
 8016ab0:	2203      	movs	r2, #3
 8016ab2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8016ab4:	4b41      	ldr	r3, [pc, #260]	@ (8016bbc <tcp_listen_input+0x1e0>)
 8016ab6:	681b      	ldr	r3, [r3, #0]
 8016ab8:	1c5a      	adds	r2, r3, #1
 8016aba:	697b      	ldr	r3, [r7, #20]
 8016abc:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8016abe:	697b      	ldr	r3, [r7, #20]
 8016ac0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016ac2:	697b      	ldr	r3, [r7, #20]
 8016ac4:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8016ac6:	6978      	ldr	r0, [r7, #20]
 8016ac8:	f7ff fa58 	bl	8015f7c <tcp_next_iss>
 8016acc:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8016ace:	697b      	ldr	r3, [r7, #20]
 8016ad0:	693a      	ldr	r2, [r7, #16]
 8016ad2:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8016ad4:	697b      	ldr	r3, [r7, #20]
 8016ad6:	693a      	ldr	r2, [r7, #16]
 8016ad8:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 8016ada:	697b      	ldr	r3, [r7, #20]
 8016adc:	693a      	ldr	r2, [r7, #16]
 8016ade:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8016ae0:	697b      	ldr	r3, [r7, #20]
 8016ae2:	693a      	ldr	r2, [r7, #16]
 8016ae4:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8016ae6:	4b35      	ldr	r3, [pc, #212]	@ (8016bbc <tcp_listen_input+0x1e0>)
 8016ae8:	681b      	ldr	r3, [r3, #0]
 8016aea:	1e5a      	subs	r2, r3, #1
 8016aec:	697b      	ldr	r3, [r7, #20]
 8016aee:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8016af0:	687b      	ldr	r3, [r7, #4]
 8016af2:	691a      	ldr	r2, [r3, #16]
 8016af4:	697b      	ldr	r3, [r7, #20]
 8016af6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8016af8:	697b      	ldr	r3, [r7, #20]
 8016afa:	687a      	ldr	r2, [r7, #4]
 8016afc:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8016afe:	687b      	ldr	r3, [r7, #4]
 8016b00:	7a5b      	ldrb	r3, [r3, #9]
 8016b02:	f003 030c 	and.w	r3, r3, #12
 8016b06:	b2da      	uxtb	r2, r3
 8016b08:	697b      	ldr	r3, [r7, #20]
 8016b0a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8016b0c:	687b      	ldr	r3, [r7, #4]
 8016b0e:	7a1a      	ldrb	r2, [r3, #8]
 8016b10:	697b      	ldr	r3, [r7, #20]
 8016b12:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8016b14:	4b2e      	ldr	r3, [pc, #184]	@ (8016bd0 <tcp_listen_input+0x1f4>)
 8016b16:	681a      	ldr	r2, [r3, #0]
 8016b18:	697b      	ldr	r3, [r7, #20]
 8016b1a:	60da      	str	r2, [r3, #12]
 8016b1c:	4a2c      	ldr	r2, [pc, #176]	@ (8016bd0 <tcp_listen_input+0x1f4>)
 8016b1e:	697b      	ldr	r3, [r7, #20]
 8016b20:	6013      	str	r3, [r2, #0]
 8016b22:	f003 fd23 	bl	801a56c <tcp_timer_needed>
 8016b26:	4b2b      	ldr	r3, [pc, #172]	@ (8016bd4 <tcp_listen_input+0x1f8>)
 8016b28:	2201      	movs	r2, #1
 8016b2a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8016b2c:	6978      	ldr	r0, [r7, #20]
 8016b2e:	f001 fd8b 	bl	8018648 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8016b32:	4b23      	ldr	r3, [pc, #140]	@ (8016bc0 <tcp_listen_input+0x1e4>)
 8016b34:	681b      	ldr	r3, [r3, #0]
 8016b36:	89db      	ldrh	r3, [r3, #14]
 8016b38:	b29a      	uxth	r2, r3
 8016b3a:	697b      	ldr	r3, [r7, #20]
 8016b3c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8016b40:	697b      	ldr	r3, [r7, #20]
 8016b42:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8016b46:	697b      	ldr	r3, [r7, #20]
 8016b48:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8016b4c:	697b      	ldr	r3, [r7, #20]
 8016b4e:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8016b50:	697b      	ldr	r3, [r7, #20]
 8016b52:	3304      	adds	r3, #4
 8016b54:	4618      	mov	r0, r3
 8016b56:	f005 f8e5 	bl	801bd24 <ip4_route>
 8016b5a:	4601      	mov	r1, r0
 8016b5c:	697b      	ldr	r3, [r7, #20]
 8016b5e:	3304      	adds	r3, #4
 8016b60:	461a      	mov	r2, r3
 8016b62:	4620      	mov	r0, r4
 8016b64:	f7ff fa30 	bl	8015fc8 <tcp_eff_send_mss_netif>
 8016b68:	4603      	mov	r3, r0
 8016b6a:	461a      	mov	r2, r3
 8016b6c:	697b      	ldr	r3, [r7, #20]
 8016b6e:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8016b70:	2112      	movs	r1, #18
 8016b72:	6978      	ldr	r0, [r7, #20]
 8016b74:	f002 fc96 	bl	80194a4 <tcp_enqueue_flags>
 8016b78:	4603      	mov	r3, r0
 8016b7a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8016b7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016b80:	2b00      	cmp	r3, #0
 8016b82:	d004      	beq.n	8016b8e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8016b84:	2100      	movs	r1, #0
 8016b86:	6978      	ldr	r0, [r7, #20]
 8016b88:	f7fd ff1e 	bl	80149c8 <tcp_abandon>
      return;
 8016b8c:	e006      	b.n	8016b9c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8016b8e:	6978      	ldr	r0, [r7, #20]
 8016b90:	f002 fd76 	bl	8019680 <tcp_output>
  return;
 8016b94:	e001      	b.n	8016b9a <tcp_listen_input+0x1be>
    return;
 8016b96:	bf00      	nop
 8016b98:	e000      	b.n	8016b9c <tcp_listen_input+0x1c0>
  return;
 8016b9a:	bf00      	nop
}
 8016b9c:	371c      	adds	r7, #28
 8016b9e:	46bd      	mov	sp, r7
 8016ba0:	bd90      	pop	{r4, r7, pc}
 8016ba2:	bf00      	nop
 8016ba4:	2000cb04 	.word	0x2000cb04
 8016ba8:	08022470 	.word	0x08022470
 8016bac:	08022668 	.word	0x08022668
 8016bb0:	080224bc 	.word	0x080224bc
 8016bb4:	2000cafc 	.word	0x2000cafc
 8016bb8:	2000cb02 	.word	0x2000cb02
 8016bbc:	2000caf8 	.word	0x2000caf8
 8016bc0:	2000cae8 	.word	0x2000cae8
 8016bc4:	2000937c 	.word	0x2000937c
 8016bc8:	20009380 	.word	0x20009380
 8016bcc:	2000936c 	.word	0x2000936c
 8016bd0:	2000cacc 	.word	0x2000cacc
 8016bd4:	2000cad4 	.word	0x2000cad4

08016bd8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8016bd8:	b580      	push	{r7, lr}
 8016bda:	b086      	sub	sp, #24
 8016bdc:	af04      	add	r7, sp, #16
 8016bde:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8016be0:	4b2f      	ldr	r3, [pc, #188]	@ (8016ca0 <tcp_timewait_input+0xc8>)
 8016be2:	781b      	ldrb	r3, [r3, #0]
 8016be4:	f003 0304 	and.w	r3, r3, #4
 8016be8:	2b00      	cmp	r3, #0
 8016bea:	d153      	bne.n	8016c94 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8016bec:	687b      	ldr	r3, [r7, #4]
 8016bee:	2b00      	cmp	r3, #0
 8016bf0:	d106      	bne.n	8016c00 <tcp_timewait_input+0x28>
 8016bf2:	4b2c      	ldr	r3, [pc, #176]	@ (8016ca4 <tcp_timewait_input+0xcc>)
 8016bf4:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8016bf8:	492b      	ldr	r1, [pc, #172]	@ (8016ca8 <tcp_timewait_input+0xd0>)
 8016bfa:	482c      	ldr	r0, [pc, #176]	@ (8016cac <tcp_timewait_input+0xd4>)
 8016bfc:	f007 fac6 	bl	801e18c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8016c00:	4b27      	ldr	r3, [pc, #156]	@ (8016ca0 <tcp_timewait_input+0xc8>)
 8016c02:	781b      	ldrb	r3, [r3, #0]
 8016c04:	f003 0302 	and.w	r3, r3, #2
 8016c08:	2b00      	cmp	r3, #0
 8016c0a:	d02a      	beq.n	8016c62 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8016c0c:	4b28      	ldr	r3, [pc, #160]	@ (8016cb0 <tcp_timewait_input+0xd8>)
 8016c0e:	681a      	ldr	r2, [r3, #0]
 8016c10:	687b      	ldr	r3, [r7, #4]
 8016c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016c14:	1ad3      	subs	r3, r2, r3
 8016c16:	2b00      	cmp	r3, #0
 8016c18:	db2d      	blt.n	8016c76 <tcp_timewait_input+0x9e>
 8016c1a:	4b25      	ldr	r3, [pc, #148]	@ (8016cb0 <tcp_timewait_input+0xd8>)
 8016c1c:	681a      	ldr	r2, [r3, #0]
 8016c1e:	687b      	ldr	r3, [r7, #4]
 8016c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016c22:	6879      	ldr	r1, [r7, #4]
 8016c24:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8016c26:	440b      	add	r3, r1
 8016c28:	1ad3      	subs	r3, r2, r3
 8016c2a:	2b00      	cmp	r3, #0
 8016c2c:	dc23      	bgt.n	8016c76 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016c2e:	4b21      	ldr	r3, [pc, #132]	@ (8016cb4 <tcp_timewait_input+0xdc>)
 8016c30:	6819      	ldr	r1, [r3, #0]
 8016c32:	4b21      	ldr	r3, [pc, #132]	@ (8016cb8 <tcp_timewait_input+0xe0>)
 8016c34:	881b      	ldrh	r3, [r3, #0]
 8016c36:	461a      	mov	r2, r3
 8016c38:	4b1d      	ldr	r3, [pc, #116]	@ (8016cb0 <tcp_timewait_input+0xd8>)
 8016c3a:	681b      	ldr	r3, [r3, #0]
 8016c3c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016c3e:	4b1f      	ldr	r3, [pc, #124]	@ (8016cbc <tcp_timewait_input+0xe4>)
 8016c40:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016c42:	885b      	ldrh	r3, [r3, #2]
 8016c44:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016c46:	4a1d      	ldr	r2, [pc, #116]	@ (8016cbc <tcp_timewait_input+0xe4>)
 8016c48:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016c4a:	8812      	ldrh	r2, [r2, #0]
 8016c4c:	b292      	uxth	r2, r2
 8016c4e:	9202      	str	r2, [sp, #8]
 8016c50:	9301      	str	r3, [sp, #4]
 8016c52:	4b1b      	ldr	r3, [pc, #108]	@ (8016cc0 <tcp_timewait_input+0xe8>)
 8016c54:	9300      	str	r3, [sp, #0]
 8016c56:	4b1b      	ldr	r3, [pc, #108]	@ (8016cc4 <tcp_timewait_input+0xec>)
 8016c58:	4602      	mov	r2, r0
 8016c5a:	6878      	ldr	r0, [r7, #4]
 8016c5c:	f003 fac4 	bl	801a1e8 <tcp_rst>
      return;
 8016c60:	e01b      	b.n	8016c9a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8016c62:	4b0f      	ldr	r3, [pc, #60]	@ (8016ca0 <tcp_timewait_input+0xc8>)
 8016c64:	781b      	ldrb	r3, [r3, #0]
 8016c66:	f003 0301 	and.w	r3, r3, #1
 8016c6a:	2b00      	cmp	r3, #0
 8016c6c:	d003      	beq.n	8016c76 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8016c6e:	4b16      	ldr	r3, [pc, #88]	@ (8016cc8 <tcp_timewait_input+0xf0>)
 8016c70:	681a      	ldr	r2, [r3, #0]
 8016c72:	687b      	ldr	r3, [r7, #4]
 8016c74:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8016c76:	4b10      	ldr	r3, [pc, #64]	@ (8016cb8 <tcp_timewait_input+0xe0>)
 8016c78:	881b      	ldrh	r3, [r3, #0]
 8016c7a:	2b00      	cmp	r3, #0
 8016c7c:	d00c      	beq.n	8016c98 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8016c7e:	687b      	ldr	r3, [r7, #4]
 8016c80:	8b5b      	ldrh	r3, [r3, #26]
 8016c82:	f043 0302 	orr.w	r3, r3, #2
 8016c86:	b29a      	uxth	r2, r3
 8016c88:	687b      	ldr	r3, [r7, #4]
 8016c8a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8016c8c:	6878      	ldr	r0, [r7, #4]
 8016c8e:	f002 fcf7 	bl	8019680 <tcp_output>
  }
  return;
 8016c92:	e001      	b.n	8016c98 <tcp_timewait_input+0xc0>
    return;
 8016c94:	bf00      	nop
 8016c96:	e000      	b.n	8016c9a <tcp_timewait_input+0xc2>
  return;
 8016c98:	bf00      	nop
}
 8016c9a:	3708      	adds	r7, #8
 8016c9c:	46bd      	mov	sp, r7
 8016c9e:	bd80      	pop	{r7, pc}
 8016ca0:	2000cb04 	.word	0x2000cb04
 8016ca4:	08022470 	.word	0x08022470
 8016ca8:	08022688 	.word	0x08022688
 8016cac:	080224bc 	.word	0x080224bc
 8016cb0:	2000caf8 	.word	0x2000caf8
 8016cb4:	2000cafc 	.word	0x2000cafc
 8016cb8:	2000cb02 	.word	0x2000cb02
 8016cbc:	2000cae8 	.word	0x2000cae8
 8016cc0:	2000937c 	.word	0x2000937c
 8016cc4:	20009380 	.word	0x20009380
 8016cc8:	2000cac0 	.word	0x2000cac0

08016ccc <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8016ccc:	b590      	push	{r4, r7, lr}
 8016cce:	b08d      	sub	sp, #52	@ 0x34
 8016cd0:	af04      	add	r7, sp, #16
 8016cd2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8016cd4:	2300      	movs	r3, #0
 8016cd6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8016cd8:	2300      	movs	r3, #0
 8016cda:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8016cdc:	687b      	ldr	r3, [r7, #4]
 8016cde:	2b00      	cmp	r3, #0
 8016ce0:	d106      	bne.n	8016cf0 <tcp_process+0x24>
 8016ce2:	4b9d      	ldr	r3, [pc, #628]	@ (8016f58 <tcp_process+0x28c>)
 8016ce4:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8016ce8:	499c      	ldr	r1, [pc, #624]	@ (8016f5c <tcp_process+0x290>)
 8016cea:	489d      	ldr	r0, [pc, #628]	@ (8016f60 <tcp_process+0x294>)
 8016cec:	f007 fa4e 	bl	801e18c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8016cf0:	4b9c      	ldr	r3, [pc, #624]	@ (8016f64 <tcp_process+0x298>)
 8016cf2:	781b      	ldrb	r3, [r3, #0]
 8016cf4:	f003 0304 	and.w	r3, r3, #4
 8016cf8:	2b00      	cmp	r3, #0
 8016cfa:	d04e      	beq.n	8016d9a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8016cfc:	687b      	ldr	r3, [r7, #4]
 8016cfe:	7d1b      	ldrb	r3, [r3, #20]
 8016d00:	2b02      	cmp	r3, #2
 8016d02:	d108      	bne.n	8016d16 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8016d04:	687b      	ldr	r3, [r7, #4]
 8016d06:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8016d08:	4b97      	ldr	r3, [pc, #604]	@ (8016f68 <tcp_process+0x29c>)
 8016d0a:	681b      	ldr	r3, [r3, #0]
 8016d0c:	429a      	cmp	r2, r3
 8016d0e:	d123      	bne.n	8016d58 <tcp_process+0x8c>
        acceptable = 1;
 8016d10:	2301      	movs	r3, #1
 8016d12:	76fb      	strb	r3, [r7, #27]
 8016d14:	e020      	b.n	8016d58 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8016d16:	687b      	ldr	r3, [r7, #4]
 8016d18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016d1a:	4b94      	ldr	r3, [pc, #592]	@ (8016f6c <tcp_process+0x2a0>)
 8016d1c:	681b      	ldr	r3, [r3, #0]
 8016d1e:	429a      	cmp	r2, r3
 8016d20:	d102      	bne.n	8016d28 <tcp_process+0x5c>
        acceptable = 1;
 8016d22:	2301      	movs	r3, #1
 8016d24:	76fb      	strb	r3, [r7, #27]
 8016d26:	e017      	b.n	8016d58 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8016d28:	4b90      	ldr	r3, [pc, #576]	@ (8016f6c <tcp_process+0x2a0>)
 8016d2a:	681a      	ldr	r2, [r3, #0]
 8016d2c:	687b      	ldr	r3, [r7, #4]
 8016d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016d30:	1ad3      	subs	r3, r2, r3
 8016d32:	2b00      	cmp	r3, #0
 8016d34:	db10      	blt.n	8016d58 <tcp_process+0x8c>
 8016d36:	4b8d      	ldr	r3, [pc, #564]	@ (8016f6c <tcp_process+0x2a0>)
 8016d38:	681a      	ldr	r2, [r3, #0]
 8016d3a:	687b      	ldr	r3, [r7, #4]
 8016d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016d3e:	6879      	ldr	r1, [r7, #4]
 8016d40:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8016d42:	440b      	add	r3, r1
 8016d44:	1ad3      	subs	r3, r2, r3
 8016d46:	2b00      	cmp	r3, #0
 8016d48:	dc06      	bgt.n	8016d58 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8016d4a:	687b      	ldr	r3, [r7, #4]
 8016d4c:	8b5b      	ldrh	r3, [r3, #26]
 8016d4e:	f043 0302 	orr.w	r3, r3, #2
 8016d52:	b29a      	uxth	r2, r3
 8016d54:	687b      	ldr	r3, [r7, #4]
 8016d56:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8016d58:	7efb      	ldrb	r3, [r7, #27]
 8016d5a:	2b00      	cmp	r3, #0
 8016d5c:	d01b      	beq.n	8016d96 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8016d5e:	687b      	ldr	r3, [r7, #4]
 8016d60:	7d1b      	ldrb	r3, [r3, #20]
 8016d62:	2b00      	cmp	r3, #0
 8016d64:	d106      	bne.n	8016d74 <tcp_process+0xa8>
 8016d66:	4b7c      	ldr	r3, [pc, #496]	@ (8016f58 <tcp_process+0x28c>)
 8016d68:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8016d6c:	4980      	ldr	r1, [pc, #512]	@ (8016f70 <tcp_process+0x2a4>)
 8016d6e:	487c      	ldr	r0, [pc, #496]	@ (8016f60 <tcp_process+0x294>)
 8016d70:	f007 fa0c 	bl	801e18c <iprintf>
      recv_flags |= TF_RESET;
 8016d74:	4b7f      	ldr	r3, [pc, #508]	@ (8016f74 <tcp_process+0x2a8>)
 8016d76:	781b      	ldrb	r3, [r3, #0]
 8016d78:	f043 0308 	orr.w	r3, r3, #8
 8016d7c:	b2da      	uxtb	r2, r3
 8016d7e:	4b7d      	ldr	r3, [pc, #500]	@ (8016f74 <tcp_process+0x2a8>)
 8016d80:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8016d82:	687b      	ldr	r3, [r7, #4]
 8016d84:	8b5b      	ldrh	r3, [r3, #26]
 8016d86:	f023 0301 	bic.w	r3, r3, #1
 8016d8a:	b29a      	uxth	r2, r3
 8016d8c:	687b      	ldr	r3, [r7, #4]
 8016d8e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8016d90:	f06f 030d 	mvn.w	r3, #13
 8016d94:	e37a      	b.n	801748c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8016d96:	2300      	movs	r3, #0
 8016d98:	e378      	b.n	801748c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8016d9a:	4b72      	ldr	r3, [pc, #456]	@ (8016f64 <tcp_process+0x298>)
 8016d9c:	781b      	ldrb	r3, [r3, #0]
 8016d9e:	f003 0302 	and.w	r3, r3, #2
 8016da2:	2b00      	cmp	r3, #0
 8016da4:	d010      	beq.n	8016dc8 <tcp_process+0xfc>
 8016da6:	687b      	ldr	r3, [r7, #4]
 8016da8:	7d1b      	ldrb	r3, [r3, #20]
 8016daa:	2b02      	cmp	r3, #2
 8016dac:	d00c      	beq.n	8016dc8 <tcp_process+0xfc>
 8016dae:	687b      	ldr	r3, [r7, #4]
 8016db0:	7d1b      	ldrb	r3, [r3, #20]
 8016db2:	2b03      	cmp	r3, #3
 8016db4:	d008      	beq.n	8016dc8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8016db6:	687b      	ldr	r3, [r7, #4]
 8016db8:	8b5b      	ldrh	r3, [r3, #26]
 8016dba:	f043 0302 	orr.w	r3, r3, #2
 8016dbe:	b29a      	uxth	r2, r3
 8016dc0:	687b      	ldr	r3, [r7, #4]
 8016dc2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8016dc4:	2300      	movs	r3, #0
 8016dc6:	e361      	b.n	801748c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8016dc8:	687b      	ldr	r3, [r7, #4]
 8016dca:	8b5b      	ldrh	r3, [r3, #26]
 8016dcc:	f003 0310 	and.w	r3, r3, #16
 8016dd0:	2b00      	cmp	r3, #0
 8016dd2:	d103      	bne.n	8016ddc <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8016dd4:	4b68      	ldr	r3, [pc, #416]	@ (8016f78 <tcp_process+0x2ac>)
 8016dd6:	681a      	ldr	r2, [r3, #0]
 8016dd8:	687b      	ldr	r3, [r7, #4]
 8016dda:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8016ddc:	687b      	ldr	r3, [r7, #4]
 8016dde:	2200      	movs	r2, #0
 8016de0:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8016de4:	687b      	ldr	r3, [r7, #4]
 8016de6:	2200      	movs	r2, #0
 8016de8:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8016dec:	6878      	ldr	r0, [r7, #4]
 8016dee:	f001 fc2b 	bl	8018648 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8016df2:	687b      	ldr	r3, [r7, #4]
 8016df4:	7d1b      	ldrb	r3, [r3, #20]
 8016df6:	3b02      	subs	r3, #2
 8016df8:	2b07      	cmp	r3, #7
 8016dfa:	f200 8337 	bhi.w	801746c <tcp_process+0x7a0>
 8016dfe:	a201      	add	r2, pc, #4	@ (adr r2, 8016e04 <tcp_process+0x138>)
 8016e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016e04:	08016e25 	.word	0x08016e25
 8016e08:	08017055 	.word	0x08017055
 8016e0c:	080171cd 	.word	0x080171cd
 8016e10:	080171f7 	.word	0x080171f7
 8016e14:	0801731b 	.word	0x0801731b
 8016e18:	080171cd 	.word	0x080171cd
 8016e1c:	080173a7 	.word	0x080173a7
 8016e20:	08017437 	.word	0x08017437
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8016e24:	4b4f      	ldr	r3, [pc, #316]	@ (8016f64 <tcp_process+0x298>)
 8016e26:	781b      	ldrb	r3, [r3, #0]
 8016e28:	f003 0310 	and.w	r3, r3, #16
 8016e2c:	2b00      	cmp	r3, #0
 8016e2e:	f000 80e4 	beq.w	8016ffa <tcp_process+0x32e>
 8016e32:	4b4c      	ldr	r3, [pc, #304]	@ (8016f64 <tcp_process+0x298>)
 8016e34:	781b      	ldrb	r3, [r3, #0]
 8016e36:	f003 0302 	and.w	r3, r3, #2
 8016e3a:	2b00      	cmp	r3, #0
 8016e3c:	f000 80dd 	beq.w	8016ffa <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8016e40:	687b      	ldr	r3, [r7, #4]
 8016e42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016e44:	1c5a      	adds	r2, r3, #1
 8016e46:	4b48      	ldr	r3, [pc, #288]	@ (8016f68 <tcp_process+0x29c>)
 8016e48:	681b      	ldr	r3, [r3, #0]
 8016e4a:	429a      	cmp	r2, r3
 8016e4c:	f040 80d5 	bne.w	8016ffa <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8016e50:	4b46      	ldr	r3, [pc, #280]	@ (8016f6c <tcp_process+0x2a0>)
 8016e52:	681b      	ldr	r3, [r3, #0]
 8016e54:	1c5a      	adds	r2, r3, #1
 8016e56:	687b      	ldr	r3, [r7, #4]
 8016e58:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8016e5a:	687b      	ldr	r3, [r7, #4]
 8016e5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016e5e:	687b      	ldr	r3, [r7, #4]
 8016e60:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 8016e62:	4b41      	ldr	r3, [pc, #260]	@ (8016f68 <tcp_process+0x29c>)
 8016e64:	681a      	ldr	r2, [r3, #0]
 8016e66:	687b      	ldr	r3, [r7, #4]
 8016e68:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8016e6a:	4b44      	ldr	r3, [pc, #272]	@ (8016f7c <tcp_process+0x2b0>)
 8016e6c:	681b      	ldr	r3, [r3, #0]
 8016e6e:	89db      	ldrh	r3, [r3, #14]
 8016e70:	b29a      	uxth	r2, r3
 8016e72:	687b      	ldr	r3, [r7, #4]
 8016e74:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8016e78:	687b      	ldr	r3, [r7, #4]
 8016e7a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8016e7e:	687b      	ldr	r3, [r7, #4]
 8016e80:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8016e84:	4b39      	ldr	r3, [pc, #228]	@ (8016f6c <tcp_process+0x2a0>)
 8016e86:	681b      	ldr	r3, [r3, #0]
 8016e88:	1e5a      	subs	r2, r3, #1
 8016e8a:	687b      	ldr	r3, [r7, #4]
 8016e8c:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 8016e8e:	687b      	ldr	r3, [r7, #4]
 8016e90:	2204      	movs	r2, #4
 8016e92:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8016e94:	687b      	ldr	r3, [r7, #4]
 8016e96:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8016e98:	687b      	ldr	r3, [r7, #4]
 8016e9a:	3304      	adds	r3, #4
 8016e9c:	4618      	mov	r0, r3
 8016e9e:	f004 ff41 	bl	801bd24 <ip4_route>
 8016ea2:	4601      	mov	r1, r0
 8016ea4:	687b      	ldr	r3, [r7, #4]
 8016ea6:	3304      	adds	r3, #4
 8016ea8:	461a      	mov	r2, r3
 8016eaa:	4620      	mov	r0, r4
 8016eac:	f7ff f88c 	bl	8015fc8 <tcp_eff_send_mss_netif>
 8016eb0:	4603      	mov	r3, r0
 8016eb2:	461a      	mov	r2, r3
 8016eb4:	687b      	ldr	r3, [r7, #4]
 8016eb6:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8016eb8:	687b      	ldr	r3, [r7, #4]
 8016eba:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016ebc:	009a      	lsls	r2, r3, #2
 8016ebe:	687b      	ldr	r3, [r7, #4]
 8016ec0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016ec2:	005b      	lsls	r3, r3, #1
 8016ec4:	f241 111c 	movw	r1, #4380	@ 0x111c
 8016ec8:	428b      	cmp	r3, r1
 8016eca:	bf38      	it	cc
 8016ecc:	460b      	movcc	r3, r1
 8016ece:	429a      	cmp	r2, r3
 8016ed0:	d204      	bcs.n	8016edc <tcp_process+0x210>
 8016ed2:	687b      	ldr	r3, [r7, #4]
 8016ed4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016ed6:	009b      	lsls	r3, r3, #2
 8016ed8:	b29b      	uxth	r3, r3
 8016eda:	e00d      	b.n	8016ef8 <tcp_process+0x22c>
 8016edc:	687b      	ldr	r3, [r7, #4]
 8016ede:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016ee0:	005b      	lsls	r3, r3, #1
 8016ee2:	f241 121c 	movw	r2, #4380	@ 0x111c
 8016ee6:	4293      	cmp	r3, r2
 8016ee8:	d904      	bls.n	8016ef4 <tcp_process+0x228>
 8016eea:	687b      	ldr	r3, [r7, #4]
 8016eec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016eee:	005b      	lsls	r3, r3, #1
 8016ef0:	b29b      	uxth	r3, r3
 8016ef2:	e001      	b.n	8016ef8 <tcp_process+0x22c>
 8016ef4:	f241 131c 	movw	r3, #4380	@ 0x111c
 8016ef8:	687a      	ldr	r2, [r7, #4]
 8016efa:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8016efe:	687b      	ldr	r3, [r7, #4]
 8016f00:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016f04:	2b00      	cmp	r3, #0
 8016f06:	d106      	bne.n	8016f16 <tcp_process+0x24a>
 8016f08:	4b13      	ldr	r3, [pc, #76]	@ (8016f58 <tcp_process+0x28c>)
 8016f0a:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8016f0e:	491c      	ldr	r1, [pc, #112]	@ (8016f80 <tcp_process+0x2b4>)
 8016f10:	4813      	ldr	r0, [pc, #76]	@ (8016f60 <tcp_process+0x294>)
 8016f12:	f007 f93b 	bl	801e18c <iprintf>
        --pcb->snd_queuelen;
 8016f16:	687b      	ldr	r3, [r7, #4]
 8016f18:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016f1c:	3b01      	subs	r3, #1
 8016f1e:	b29a      	uxth	r2, r3
 8016f20:	687b      	ldr	r3, [r7, #4]
 8016f22:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8016f26:	687b      	ldr	r3, [r7, #4]
 8016f28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016f2a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8016f2c:	69fb      	ldr	r3, [r7, #28]
 8016f2e:	2b00      	cmp	r3, #0
 8016f30:	d12a      	bne.n	8016f88 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8016f32:	687b      	ldr	r3, [r7, #4]
 8016f34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016f36:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8016f38:	69fb      	ldr	r3, [r7, #28]
 8016f3a:	2b00      	cmp	r3, #0
 8016f3c:	d106      	bne.n	8016f4c <tcp_process+0x280>
 8016f3e:	4b06      	ldr	r3, [pc, #24]	@ (8016f58 <tcp_process+0x28c>)
 8016f40:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8016f44:	490f      	ldr	r1, [pc, #60]	@ (8016f84 <tcp_process+0x2b8>)
 8016f46:	4806      	ldr	r0, [pc, #24]	@ (8016f60 <tcp_process+0x294>)
 8016f48:	f007 f920 	bl	801e18c <iprintf>
          pcb->unsent = rseg->next;
 8016f4c:	69fb      	ldr	r3, [r7, #28]
 8016f4e:	681a      	ldr	r2, [r3, #0]
 8016f50:	687b      	ldr	r3, [r7, #4]
 8016f52:	66da      	str	r2, [r3, #108]	@ 0x6c
 8016f54:	e01c      	b.n	8016f90 <tcp_process+0x2c4>
 8016f56:	bf00      	nop
 8016f58:	08022470 	.word	0x08022470
 8016f5c:	080226a8 	.word	0x080226a8
 8016f60:	080224bc 	.word	0x080224bc
 8016f64:	2000cb04 	.word	0x2000cb04
 8016f68:	2000cafc 	.word	0x2000cafc
 8016f6c:	2000caf8 	.word	0x2000caf8
 8016f70:	080226c4 	.word	0x080226c4
 8016f74:	2000cb05 	.word	0x2000cb05
 8016f78:	2000cac0 	.word	0x2000cac0
 8016f7c:	2000cae8 	.word	0x2000cae8
 8016f80:	080226e4 	.word	0x080226e4
 8016f84:	080226fc 	.word	0x080226fc
        } else {
          pcb->unacked = rseg->next;
 8016f88:	69fb      	ldr	r3, [r7, #28]
 8016f8a:	681a      	ldr	r2, [r3, #0]
 8016f8c:	687b      	ldr	r3, [r7, #4]
 8016f8e:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8016f90:	69f8      	ldr	r0, [r7, #28]
 8016f92:	f7fe fc7e 	bl	8015892 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8016f96:	687b      	ldr	r3, [r7, #4]
 8016f98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016f9a:	2b00      	cmp	r3, #0
 8016f9c:	d104      	bne.n	8016fa8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8016f9e:	687b      	ldr	r3, [r7, #4]
 8016fa0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016fa4:	861a      	strh	r2, [r3, #48]	@ 0x30
 8016fa6:	e006      	b.n	8016fb6 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8016fa8:	687b      	ldr	r3, [r7, #4]
 8016faa:	2200      	movs	r2, #0
 8016fac:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 8016fae:	687b      	ldr	r3, [r7, #4]
 8016fb0:	2200      	movs	r2, #0
 8016fb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8016fb6:	687b      	ldr	r3, [r7, #4]
 8016fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8016fbc:	2b00      	cmp	r3, #0
 8016fbe:	d00a      	beq.n	8016fd6 <tcp_process+0x30a>
 8016fc0:	687b      	ldr	r3, [r7, #4]
 8016fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8016fc6:	687a      	ldr	r2, [r7, #4]
 8016fc8:	6910      	ldr	r0, [r2, #16]
 8016fca:	2200      	movs	r2, #0
 8016fcc:	6879      	ldr	r1, [r7, #4]
 8016fce:	4798      	blx	r3
 8016fd0:	4603      	mov	r3, r0
 8016fd2:	76bb      	strb	r3, [r7, #26]
 8016fd4:	e001      	b.n	8016fda <tcp_process+0x30e>
 8016fd6:	2300      	movs	r3, #0
 8016fd8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8016fda:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8016fde:	f113 0f0d 	cmn.w	r3, #13
 8016fe2:	d102      	bne.n	8016fea <tcp_process+0x31e>
          return ERR_ABRT;
 8016fe4:	f06f 030c 	mvn.w	r3, #12
 8016fe8:	e250      	b.n	801748c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8016fea:	687b      	ldr	r3, [r7, #4]
 8016fec:	8b5b      	ldrh	r3, [r3, #26]
 8016fee:	f043 0302 	orr.w	r3, r3, #2
 8016ff2:	b29a      	uxth	r2, r3
 8016ff4:	687b      	ldr	r3, [r7, #4]
 8016ff6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8016ff8:	e23a      	b.n	8017470 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8016ffa:	4b98      	ldr	r3, [pc, #608]	@ (801725c <tcp_process+0x590>)
 8016ffc:	781b      	ldrb	r3, [r3, #0]
 8016ffe:	f003 0310 	and.w	r3, r3, #16
 8017002:	2b00      	cmp	r3, #0
 8017004:	f000 8234 	beq.w	8017470 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017008:	4b95      	ldr	r3, [pc, #596]	@ (8017260 <tcp_process+0x594>)
 801700a:	6819      	ldr	r1, [r3, #0]
 801700c:	4b95      	ldr	r3, [pc, #596]	@ (8017264 <tcp_process+0x598>)
 801700e:	881b      	ldrh	r3, [r3, #0]
 8017010:	461a      	mov	r2, r3
 8017012:	4b95      	ldr	r3, [pc, #596]	@ (8017268 <tcp_process+0x59c>)
 8017014:	681b      	ldr	r3, [r3, #0]
 8017016:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017018:	4b94      	ldr	r3, [pc, #592]	@ (801726c <tcp_process+0x5a0>)
 801701a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801701c:	885b      	ldrh	r3, [r3, #2]
 801701e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017020:	4a92      	ldr	r2, [pc, #584]	@ (801726c <tcp_process+0x5a0>)
 8017022:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017024:	8812      	ldrh	r2, [r2, #0]
 8017026:	b292      	uxth	r2, r2
 8017028:	9202      	str	r2, [sp, #8]
 801702a:	9301      	str	r3, [sp, #4]
 801702c:	4b90      	ldr	r3, [pc, #576]	@ (8017270 <tcp_process+0x5a4>)
 801702e:	9300      	str	r3, [sp, #0]
 8017030:	4b90      	ldr	r3, [pc, #576]	@ (8017274 <tcp_process+0x5a8>)
 8017032:	4602      	mov	r2, r0
 8017034:	6878      	ldr	r0, [r7, #4]
 8017036:	f003 f8d7 	bl	801a1e8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801703a:	687b      	ldr	r3, [r7, #4]
 801703c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8017040:	2b05      	cmp	r3, #5
 8017042:	f200 8215 	bhi.w	8017470 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8017046:	687b      	ldr	r3, [r7, #4]
 8017048:	2200      	movs	r2, #0
 801704a:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 801704c:	6878      	ldr	r0, [r7, #4]
 801704e:	f002 fea3 	bl	8019d98 <tcp_rexmit_rto>
      break;
 8017052:	e20d      	b.n	8017470 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8017054:	4b81      	ldr	r3, [pc, #516]	@ (801725c <tcp_process+0x590>)
 8017056:	781b      	ldrb	r3, [r3, #0]
 8017058:	f003 0310 	and.w	r3, r3, #16
 801705c:	2b00      	cmp	r3, #0
 801705e:	f000 80a1 	beq.w	80171a4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8017062:	4b7f      	ldr	r3, [pc, #508]	@ (8017260 <tcp_process+0x594>)
 8017064:	681a      	ldr	r2, [r3, #0]
 8017066:	687b      	ldr	r3, [r7, #4]
 8017068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801706a:	1ad3      	subs	r3, r2, r3
 801706c:	3b01      	subs	r3, #1
 801706e:	2b00      	cmp	r3, #0
 8017070:	db7e      	blt.n	8017170 <tcp_process+0x4a4>
 8017072:	4b7b      	ldr	r3, [pc, #492]	@ (8017260 <tcp_process+0x594>)
 8017074:	681a      	ldr	r2, [r3, #0]
 8017076:	687b      	ldr	r3, [r7, #4]
 8017078:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801707a:	1ad3      	subs	r3, r2, r3
 801707c:	2b00      	cmp	r3, #0
 801707e:	dc77      	bgt.n	8017170 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8017080:	687b      	ldr	r3, [r7, #4]
 8017082:	2204      	movs	r2, #4
 8017084:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8017086:	687b      	ldr	r3, [r7, #4]
 8017088:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801708a:	2b00      	cmp	r3, #0
 801708c:	d102      	bne.n	8017094 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801708e:	23fa      	movs	r3, #250	@ 0xfa
 8017090:	76bb      	strb	r3, [r7, #26]
 8017092:	e01d      	b.n	80170d0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8017094:	687b      	ldr	r3, [r7, #4]
 8017096:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017098:	699b      	ldr	r3, [r3, #24]
 801709a:	2b00      	cmp	r3, #0
 801709c:	d106      	bne.n	80170ac <tcp_process+0x3e0>
 801709e:	4b76      	ldr	r3, [pc, #472]	@ (8017278 <tcp_process+0x5ac>)
 80170a0:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 80170a4:	4975      	ldr	r1, [pc, #468]	@ (801727c <tcp_process+0x5b0>)
 80170a6:	4876      	ldr	r0, [pc, #472]	@ (8017280 <tcp_process+0x5b4>)
 80170a8:	f007 f870 	bl	801e18c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80170ac:	687b      	ldr	r3, [r7, #4]
 80170ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80170b0:	699b      	ldr	r3, [r3, #24]
 80170b2:	2b00      	cmp	r3, #0
 80170b4:	d00a      	beq.n	80170cc <tcp_process+0x400>
 80170b6:	687b      	ldr	r3, [r7, #4]
 80170b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80170ba:	699b      	ldr	r3, [r3, #24]
 80170bc:	687a      	ldr	r2, [r7, #4]
 80170be:	6910      	ldr	r0, [r2, #16]
 80170c0:	2200      	movs	r2, #0
 80170c2:	6879      	ldr	r1, [r7, #4]
 80170c4:	4798      	blx	r3
 80170c6:	4603      	mov	r3, r0
 80170c8:	76bb      	strb	r3, [r7, #26]
 80170ca:	e001      	b.n	80170d0 <tcp_process+0x404>
 80170cc:	23f0      	movs	r3, #240	@ 0xf0
 80170ce:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80170d0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80170d4:	2b00      	cmp	r3, #0
 80170d6:	d00a      	beq.n	80170ee <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80170d8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80170dc:	f113 0f0d 	cmn.w	r3, #13
 80170e0:	d002      	beq.n	80170e8 <tcp_process+0x41c>
              tcp_abort(pcb);
 80170e2:	6878      	ldr	r0, [r7, #4]
 80170e4:	f7fd fd2e 	bl	8014b44 <tcp_abort>
            }
            return ERR_ABRT;
 80170e8:	f06f 030c 	mvn.w	r3, #12
 80170ec:	e1ce      	b.n	801748c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80170ee:	6878      	ldr	r0, [r7, #4]
 80170f0:	f000 fae0 	bl	80176b4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80170f4:	4b63      	ldr	r3, [pc, #396]	@ (8017284 <tcp_process+0x5b8>)
 80170f6:	881b      	ldrh	r3, [r3, #0]
 80170f8:	2b00      	cmp	r3, #0
 80170fa:	d005      	beq.n	8017108 <tcp_process+0x43c>
            recv_acked--;
 80170fc:	4b61      	ldr	r3, [pc, #388]	@ (8017284 <tcp_process+0x5b8>)
 80170fe:	881b      	ldrh	r3, [r3, #0]
 8017100:	3b01      	subs	r3, #1
 8017102:	b29a      	uxth	r2, r3
 8017104:	4b5f      	ldr	r3, [pc, #380]	@ (8017284 <tcp_process+0x5b8>)
 8017106:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8017108:	687b      	ldr	r3, [r7, #4]
 801710a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801710c:	009a      	lsls	r2, r3, #2
 801710e:	687b      	ldr	r3, [r7, #4]
 8017110:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017112:	005b      	lsls	r3, r3, #1
 8017114:	f241 111c 	movw	r1, #4380	@ 0x111c
 8017118:	428b      	cmp	r3, r1
 801711a:	bf38      	it	cc
 801711c:	460b      	movcc	r3, r1
 801711e:	429a      	cmp	r2, r3
 8017120:	d204      	bcs.n	801712c <tcp_process+0x460>
 8017122:	687b      	ldr	r3, [r7, #4]
 8017124:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017126:	009b      	lsls	r3, r3, #2
 8017128:	b29b      	uxth	r3, r3
 801712a:	e00d      	b.n	8017148 <tcp_process+0x47c>
 801712c:	687b      	ldr	r3, [r7, #4]
 801712e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017130:	005b      	lsls	r3, r3, #1
 8017132:	f241 121c 	movw	r2, #4380	@ 0x111c
 8017136:	4293      	cmp	r3, r2
 8017138:	d904      	bls.n	8017144 <tcp_process+0x478>
 801713a:	687b      	ldr	r3, [r7, #4]
 801713c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801713e:	005b      	lsls	r3, r3, #1
 8017140:	b29b      	uxth	r3, r3
 8017142:	e001      	b.n	8017148 <tcp_process+0x47c>
 8017144:	f241 131c 	movw	r3, #4380	@ 0x111c
 8017148:	687a      	ldr	r2, [r7, #4]
 801714a:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801714e:	4b4e      	ldr	r3, [pc, #312]	@ (8017288 <tcp_process+0x5bc>)
 8017150:	781b      	ldrb	r3, [r3, #0]
 8017152:	f003 0320 	and.w	r3, r3, #32
 8017156:	2b00      	cmp	r3, #0
 8017158:	d037      	beq.n	80171ca <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801715a:	687b      	ldr	r3, [r7, #4]
 801715c:	8b5b      	ldrh	r3, [r3, #26]
 801715e:	f043 0302 	orr.w	r3, r3, #2
 8017162:	b29a      	uxth	r2, r3
 8017164:	687b      	ldr	r3, [r7, #4]
 8017166:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8017168:	687b      	ldr	r3, [r7, #4]
 801716a:	2207      	movs	r2, #7
 801716c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801716e:	e02c      	b.n	80171ca <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017170:	4b3b      	ldr	r3, [pc, #236]	@ (8017260 <tcp_process+0x594>)
 8017172:	6819      	ldr	r1, [r3, #0]
 8017174:	4b3b      	ldr	r3, [pc, #236]	@ (8017264 <tcp_process+0x598>)
 8017176:	881b      	ldrh	r3, [r3, #0]
 8017178:	461a      	mov	r2, r3
 801717a:	4b3b      	ldr	r3, [pc, #236]	@ (8017268 <tcp_process+0x59c>)
 801717c:	681b      	ldr	r3, [r3, #0]
 801717e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017180:	4b3a      	ldr	r3, [pc, #232]	@ (801726c <tcp_process+0x5a0>)
 8017182:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017184:	885b      	ldrh	r3, [r3, #2]
 8017186:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017188:	4a38      	ldr	r2, [pc, #224]	@ (801726c <tcp_process+0x5a0>)
 801718a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801718c:	8812      	ldrh	r2, [r2, #0]
 801718e:	b292      	uxth	r2, r2
 8017190:	9202      	str	r2, [sp, #8]
 8017192:	9301      	str	r3, [sp, #4]
 8017194:	4b36      	ldr	r3, [pc, #216]	@ (8017270 <tcp_process+0x5a4>)
 8017196:	9300      	str	r3, [sp, #0]
 8017198:	4b36      	ldr	r3, [pc, #216]	@ (8017274 <tcp_process+0x5a8>)
 801719a:	4602      	mov	r2, r0
 801719c:	6878      	ldr	r0, [r7, #4]
 801719e:	f003 f823 	bl	801a1e8 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80171a2:	e167      	b.n	8017474 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80171a4:	4b2d      	ldr	r3, [pc, #180]	@ (801725c <tcp_process+0x590>)
 80171a6:	781b      	ldrb	r3, [r3, #0]
 80171a8:	f003 0302 	and.w	r3, r3, #2
 80171ac:	2b00      	cmp	r3, #0
 80171ae:	f000 8161 	beq.w	8017474 <tcp_process+0x7a8>
 80171b2:	687b      	ldr	r3, [r7, #4]
 80171b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80171b6:	1e5a      	subs	r2, r3, #1
 80171b8:	4b2b      	ldr	r3, [pc, #172]	@ (8017268 <tcp_process+0x59c>)
 80171ba:	681b      	ldr	r3, [r3, #0]
 80171bc:	429a      	cmp	r2, r3
 80171be:	f040 8159 	bne.w	8017474 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80171c2:	6878      	ldr	r0, [r7, #4]
 80171c4:	f002 fe0a 	bl	8019ddc <tcp_rexmit>
      break;
 80171c8:	e154      	b.n	8017474 <tcp_process+0x7a8>
 80171ca:	e153      	b.n	8017474 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80171cc:	6878      	ldr	r0, [r7, #4]
 80171ce:	f000 fa71 	bl	80176b4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80171d2:	4b2d      	ldr	r3, [pc, #180]	@ (8017288 <tcp_process+0x5bc>)
 80171d4:	781b      	ldrb	r3, [r3, #0]
 80171d6:	f003 0320 	and.w	r3, r3, #32
 80171da:	2b00      	cmp	r3, #0
 80171dc:	f000 814c 	beq.w	8017478 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80171e0:	687b      	ldr	r3, [r7, #4]
 80171e2:	8b5b      	ldrh	r3, [r3, #26]
 80171e4:	f043 0302 	orr.w	r3, r3, #2
 80171e8:	b29a      	uxth	r2, r3
 80171ea:	687b      	ldr	r3, [r7, #4]
 80171ec:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80171ee:	687b      	ldr	r3, [r7, #4]
 80171f0:	2207      	movs	r2, #7
 80171f2:	751a      	strb	r2, [r3, #20]
      }
      break;
 80171f4:	e140      	b.n	8017478 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80171f6:	6878      	ldr	r0, [r7, #4]
 80171f8:	f000 fa5c 	bl	80176b4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80171fc:	4b22      	ldr	r3, [pc, #136]	@ (8017288 <tcp_process+0x5bc>)
 80171fe:	781b      	ldrb	r3, [r3, #0]
 8017200:	f003 0320 	and.w	r3, r3, #32
 8017204:	2b00      	cmp	r3, #0
 8017206:	d071      	beq.n	80172ec <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017208:	4b14      	ldr	r3, [pc, #80]	@ (801725c <tcp_process+0x590>)
 801720a:	781b      	ldrb	r3, [r3, #0]
 801720c:	f003 0310 	and.w	r3, r3, #16
 8017210:	2b00      	cmp	r3, #0
 8017212:	d060      	beq.n	80172d6 <tcp_process+0x60a>
 8017214:	687b      	ldr	r3, [r7, #4]
 8017216:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017218:	4b11      	ldr	r3, [pc, #68]	@ (8017260 <tcp_process+0x594>)
 801721a:	681b      	ldr	r3, [r3, #0]
 801721c:	429a      	cmp	r2, r3
 801721e:	d15a      	bne.n	80172d6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8017220:	687b      	ldr	r3, [r7, #4]
 8017222:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017224:	2b00      	cmp	r3, #0
 8017226:	d156      	bne.n	80172d6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8017228:	687b      	ldr	r3, [r7, #4]
 801722a:	8b5b      	ldrh	r3, [r3, #26]
 801722c:	f043 0302 	orr.w	r3, r3, #2
 8017230:	b29a      	uxth	r2, r3
 8017232:	687b      	ldr	r3, [r7, #4]
 8017234:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8017236:	6878      	ldr	r0, [r7, #4]
 8017238:	f7fe fdbc 	bl	8015db4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801723c:	4b13      	ldr	r3, [pc, #76]	@ (801728c <tcp_process+0x5c0>)
 801723e:	681b      	ldr	r3, [r3, #0]
 8017240:	687a      	ldr	r2, [r7, #4]
 8017242:	429a      	cmp	r2, r3
 8017244:	d105      	bne.n	8017252 <tcp_process+0x586>
 8017246:	4b11      	ldr	r3, [pc, #68]	@ (801728c <tcp_process+0x5c0>)
 8017248:	681b      	ldr	r3, [r3, #0]
 801724a:	68db      	ldr	r3, [r3, #12]
 801724c:	4a0f      	ldr	r2, [pc, #60]	@ (801728c <tcp_process+0x5c0>)
 801724e:	6013      	str	r3, [r2, #0]
 8017250:	e02e      	b.n	80172b0 <tcp_process+0x5e4>
 8017252:	4b0e      	ldr	r3, [pc, #56]	@ (801728c <tcp_process+0x5c0>)
 8017254:	681b      	ldr	r3, [r3, #0]
 8017256:	617b      	str	r3, [r7, #20]
 8017258:	e027      	b.n	80172aa <tcp_process+0x5de>
 801725a:	bf00      	nop
 801725c:	2000cb04 	.word	0x2000cb04
 8017260:	2000cafc 	.word	0x2000cafc
 8017264:	2000cb02 	.word	0x2000cb02
 8017268:	2000caf8 	.word	0x2000caf8
 801726c:	2000cae8 	.word	0x2000cae8
 8017270:	2000937c 	.word	0x2000937c
 8017274:	20009380 	.word	0x20009380
 8017278:	08022470 	.word	0x08022470
 801727c:	08022710 	.word	0x08022710
 8017280:	080224bc 	.word	0x080224bc
 8017284:	2000cb00 	.word	0x2000cb00
 8017288:	2000cb05 	.word	0x2000cb05
 801728c:	2000cacc 	.word	0x2000cacc
 8017290:	697b      	ldr	r3, [r7, #20]
 8017292:	68db      	ldr	r3, [r3, #12]
 8017294:	687a      	ldr	r2, [r7, #4]
 8017296:	429a      	cmp	r2, r3
 8017298:	d104      	bne.n	80172a4 <tcp_process+0x5d8>
 801729a:	687b      	ldr	r3, [r7, #4]
 801729c:	68da      	ldr	r2, [r3, #12]
 801729e:	697b      	ldr	r3, [r7, #20]
 80172a0:	60da      	str	r2, [r3, #12]
 80172a2:	e005      	b.n	80172b0 <tcp_process+0x5e4>
 80172a4:	697b      	ldr	r3, [r7, #20]
 80172a6:	68db      	ldr	r3, [r3, #12]
 80172a8:	617b      	str	r3, [r7, #20]
 80172aa:	697b      	ldr	r3, [r7, #20]
 80172ac:	2b00      	cmp	r3, #0
 80172ae:	d1ef      	bne.n	8017290 <tcp_process+0x5c4>
 80172b0:	687b      	ldr	r3, [r7, #4]
 80172b2:	2200      	movs	r2, #0
 80172b4:	60da      	str	r2, [r3, #12]
 80172b6:	4b77      	ldr	r3, [pc, #476]	@ (8017494 <tcp_process+0x7c8>)
 80172b8:	2201      	movs	r2, #1
 80172ba:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80172bc:	687b      	ldr	r3, [r7, #4]
 80172be:	220a      	movs	r2, #10
 80172c0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80172c2:	4b75      	ldr	r3, [pc, #468]	@ (8017498 <tcp_process+0x7cc>)
 80172c4:	681a      	ldr	r2, [r3, #0]
 80172c6:	687b      	ldr	r3, [r7, #4]
 80172c8:	60da      	str	r2, [r3, #12]
 80172ca:	4a73      	ldr	r2, [pc, #460]	@ (8017498 <tcp_process+0x7cc>)
 80172cc:	687b      	ldr	r3, [r7, #4]
 80172ce:	6013      	str	r3, [r2, #0]
 80172d0:	f003 f94c 	bl	801a56c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80172d4:	e0d2      	b.n	801747c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80172d6:	687b      	ldr	r3, [r7, #4]
 80172d8:	8b5b      	ldrh	r3, [r3, #26]
 80172da:	f043 0302 	orr.w	r3, r3, #2
 80172de:	b29a      	uxth	r2, r3
 80172e0:	687b      	ldr	r3, [r7, #4]
 80172e2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80172e4:	687b      	ldr	r3, [r7, #4]
 80172e6:	2208      	movs	r2, #8
 80172e8:	751a      	strb	r2, [r3, #20]
      break;
 80172ea:	e0c7      	b.n	801747c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80172ec:	4b6b      	ldr	r3, [pc, #428]	@ (801749c <tcp_process+0x7d0>)
 80172ee:	781b      	ldrb	r3, [r3, #0]
 80172f0:	f003 0310 	and.w	r3, r3, #16
 80172f4:	2b00      	cmp	r3, #0
 80172f6:	f000 80c1 	beq.w	801747c <tcp_process+0x7b0>
 80172fa:	687b      	ldr	r3, [r7, #4]
 80172fc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80172fe:	4b68      	ldr	r3, [pc, #416]	@ (80174a0 <tcp_process+0x7d4>)
 8017300:	681b      	ldr	r3, [r3, #0]
 8017302:	429a      	cmp	r2, r3
 8017304:	f040 80ba 	bne.w	801747c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8017308:	687b      	ldr	r3, [r7, #4]
 801730a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801730c:	2b00      	cmp	r3, #0
 801730e:	f040 80b5 	bne.w	801747c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8017312:	687b      	ldr	r3, [r7, #4]
 8017314:	2206      	movs	r2, #6
 8017316:	751a      	strb	r2, [r3, #20]
      break;
 8017318:	e0b0      	b.n	801747c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801731a:	6878      	ldr	r0, [r7, #4]
 801731c:	f000 f9ca 	bl	80176b4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8017320:	4b60      	ldr	r3, [pc, #384]	@ (80174a4 <tcp_process+0x7d8>)
 8017322:	781b      	ldrb	r3, [r3, #0]
 8017324:	f003 0320 	and.w	r3, r3, #32
 8017328:	2b00      	cmp	r3, #0
 801732a:	f000 80a9 	beq.w	8017480 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801732e:	687b      	ldr	r3, [r7, #4]
 8017330:	8b5b      	ldrh	r3, [r3, #26]
 8017332:	f043 0302 	orr.w	r3, r3, #2
 8017336:	b29a      	uxth	r2, r3
 8017338:	687b      	ldr	r3, [r7, #4]
 801733a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801733c:	6878      	ldr	r0, [r7, #4]
 801733e:	f7fe fd39 	bl	8015db4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8017342:	4b59      	ldr	r3, [pc, #356]	@ (80174a8 <tcp_process+0x7dc>)
 8017344:	681b      	ldr	r3, [r3, #0]
 8017346:	687a      	ldr	r2, [r7, #4]
 8017348:	429a      	cmp	r2, r3
 801734a:	d105      	bne.n	8017358 <tcp_process+0x68c>
 801734c:	4b56      	ldr	r3, [pc, #344]	@ (80174a8 <tcp_process+0x7dc>)
 801734e:	681b      	ldr	r3, [r3, #0]
 8017350:	68db      	ldr	r3, [r3, #12]
 8017352:	4a55      	ldr	r2, [pc, #340]	@ (80174a8 <tcp_process+0x7dc>)
 8017354:	6013      	str	r3, [r2, #0]
 8017356:	e013      	b.n	8017380 <tcp_process+0x6b4>
 8017358:	4b53      	ldr	r3, [pc, #332]	@ (80174a8 <tcp_process+0x7dc>)
 801735a:	681b      	ldr	r3, [r3, #0]
 801735c:	613b      	str	r3, [r7, #16]
 801735e:	e00c      	b.n	801737a <tcp_process+0x6ae>
 8017360:	693b      	ldr	r3, [r7, #16]
 8017362:	68db      	ldr	r3, [r3, #12]
 8017364:	687a      	ldr	r2, [r7, #4]
 8017366:	429a      	cmp	r2, r3
 8017368:	d104      	bne.n	8017374 <tcp_process+0x6a8>
 801736a:	687b      	ldr	r3, [r7, #4]
 801736c:	68da      	ldr	r2, [r3, #12]
 801736e:	693b      	ldr	r3, [r7, #16]
 8017370:	60da      	str	r2, [r3, #12]
 8017372:	e005      	b.n	8017380 <tcp_process+0x6b4>
 8017374:	693b      	ldr	r3, [r7, #16]
 8017376:	68db      	ldr	r3, [r3, #12]
 8017378:	613b      	str	r3, [r7, #16]
 801737a:	693b      	ldr	r3, [r7, #16]
 801737c:	2b00      	cmp	r3, #0
 801737e:	d1ef      	bne.n	8017360 <tcp_process+0x694>
 8017380:	687b      	ldr	r3, [r7, #4]
 8017382:	2200      	movs	r2, #0
 8017384:	60da      	str	r2, [r3, #12]
 8017386:	4b43      	ldr	r3, [pc, #268]	@ (8017494 <tcp_process+0x7c8>)
 8017388:	2201      	movs	r2, #1
 801738a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801738c:	687b      	ldr	r3, [r7, #4]
 801738e:	220a      	movs	r2, #10
 8017390:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8017392:	4b41      	ldr	r3, [pc, #260]	@ (8017498 <tcp_process+0x7cc>)
 8017394:	681a      	ldr	r2, [r3, #0]
 8017396:	687b      	ldr	r3, [r7, #4]
 8017398:	60da      	str	r2, [r3, #12]
 801739a:	4a3f      	ldr	r2, [pc, #252]	@ (8017498 <tcp_process+0x7cc>)
 801739c:	687b      	ldr	r3, [r7, #4]
 801739e:	6013      	str	r3, [r2, #0]
 80173a0:	f003 f8e4 	bl	801a56c <tcp_timer_needed>
      }
      break;
 80173a4:	e06c      	b.n	8017480 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80173a6:	6878      	ldr	r0, [r7, #4]
 80173a8:	f000 f984 	bl	80176b4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80173ac:	4b3b      	ldr	r3, [pc, #236]	@ (801749c <tcp_process+0x7d0>)
 80173ae:	781b      	ldrb	r3, [r3, #0]
 80173b0:	f003 0310 	and.w	r3, r3, #16
 80173b4:	2b00      	cmp	r3, #0
 80173b6:	d065      	beq.n	8017484 <tcp_process+0x7b8>
 80173b8:	687b      	ldr	r3, [r7, #4]
 80173ba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80173bc:	4b38      	ldr	r3, [pc, #224]	@ (80174a0 <tcp_process+0x7d4>)
 80173be:	681b      	ldr	r3, [r3, #0]
 80173c0:	429a      	cmp	r2, r3
 80173c2:	d15f      	bne.n	8017484 <tcp_process+0x7b8>
 80173c4:	687b      	ldr	r3, [r7, #4]
 80173c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80173c8:	2b00      	cmp	r3, #0
 80173ca:	d15b      	bne.n	8017484 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80173cc:	6878      	ldr	r0, [r7, #4]
 80173ce:	f7fe fcf1 	bl	8015db4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80173d2:	4b35      	ldr	r3, [pc, #212]	@ (80174a8 <tcp_process+0x7dc>)
 80173d4:	681b      	ldr	r3, [r3, #0]
 80173d6:	687a      	ldr	r2, [r7, #4]
 80173d8:	429a      	cmp	r2, r3
 80173da:	d105      	bne.n	80173e8 <tcp_process+0x71c>
 80173dc:	4b32      	ldr	r3, [pc, #200]	@ (80174a8 <tcp_process+0x7dc>)
 80173de:	681b      	ldr	r3, [r3, #0]
 80173e0:	68db      	ldr	r3, [r3, #12]
 80173e2:	4a31      	ldr	r2, [pc, #196]	@ (80174a8 <tcp_process+0x7dc>)
 80173e4:	6013      	str	r3, [r2, #0]
 80173e6:	e013      	b.n	8017410 <tcp_process+0x744>
 80173e8:	4b2f      	ldr	r3, [pc, #188]	@ (80174a8 <tcp_process+0x7dc>)
 80173ea:	681b      	ldr	r3, [r3, #0]
 80173ec:	60fb      	str	r3, [r7, #12]
 80173ee:	e00c      	b.n	801740a <tcp_process+0x73e>
 80173f0:	68fb      	ldr	r3, [r7, #12]
 80173f2:	68db      	ldr	r3, [r3, #12]
 80173f4:	687a      	ldr	r2, [r7, #4]
 80173f6:	429a      	cmp	r2, r3
 80173f8:	d104      	bne.n	8017404 <tcp_process+0x738>
 80173fa:	687b      	ldr	r3, [r7, #4]
 80173fc:	68da      	ldr	r2, [r3, #12]
 80173fe:	68fb      	ldr	r3, [r7, #12]
 8017400:	60da      	str	r2, [r3, #12]
 8017402:	e005      	b.n	8017410 <tcp_process+0x744>
 8017404:	68fb      	ldr	r3, [r7, #12]
 8017406:	68db      	ldr	r3, [r3, #12]
 8017408:	60fb      	str	r3, [r7, #12]
 801740a:	68fb      	ldr	r3, [r7, #12]
 801740c:	2b00      	cmp	r3, #0
 801740e:	d1ef      	bne.n	80173f0 <tcp_process+0x724>
 8017410:	687b      	ldr	r3, [r7, #4]
 8017412:	2200      	movs	r2, #0
 8017414:	60da      	str	r2, [r3, #12]
 8017416:	4b1f      	ldr	r3, [pc, #124]	@ (8017494 <tcp_process+0x7c8>)
 8017418:	2201      	movs	r2, #1
 801741a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801741c:	687b      	ldr	r3, [r7, #4]
 801741e:	220a      	movs	r2, #10
 8017420:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8017422:	4b1d      	ldr	r3, [pc, #116]	@ (8017498 <tcp_process+0x7cc>)
 8017424:	681a      	ldr	r2, [r3, #0]
 8017426:	687b      	ldr	r3, [r7, #4]
 8017428:	60da      	str	r2, [r3, #12]
 801742a:	4a1b      	ldr	r2, [pc, #108]	@ (8017498 <tcp_process+0x7cc>)
 801742c:	687b      	ldr	r3, [r7, #4]
 801742e:	6013      	str	r3, [r2, #0]
 8017430:	f003 f89c 	bl	801a56c <tcp_timer_needed>
      }
      break;
 8017434:	e026      	b.n	8017484 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8017436:	6878      	ldr	r0, [r7, #4]
 8017438:	f000 f93c 	bl	80176b4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801743c:	4b17      	ldr	r3, [pc, #92]	@ (801749c <tcp_process+0x7d0>)
 801743e:	781b      	ldrb	r3, [r3, #0]
 8017440:	f003 0310 	and.w	r3, r3, #16
 8017444:	2b00      	cmp	r3, #0
 8017446:	d01f      	beq.n	8017488 <tcp_process+0x7bc>
 8017448:	687b      	ldr	r3, [r7, #4]
 801744a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801744c:	4b14      	ldr	r3, [pc, #80]	@ (80174a0 <tcp_process+0x7d4>)
 801744e:	681b      	ldr	r3, [r3, #0]
 8017450:	429a      	cmp	r2, r3
 8017452:	d119      	bne.n	8017488 <tcp_process+0x7bc>
 8017454:	687b      	ldr	r3, [r7, #4]
 8017456:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017458:	2b00      	cmp	r3, #0
 801745a:	d115      	bne.n	8017488 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801745c:	4b11      	ldr	r3, [pc, #68]	@ (80174a4 <tcp_process+0x7d8>)
 801745e:	781b      	ldrb	r3, [r3, #0]
 8017460:	f043 0310 	orr.w	r3, r3, #16
 8017464:	b2da      	uxtb	r2, r3
 8017466:	4b0f      	ldr	r3, [pc, #60]	@ (80174a4 <tcp_process+0x7d8>)
 8017468:	701a      	strb	r2, [r3, #0]
      }
      break;
 801746a:	e00d      	b.n	8017488 <tcp_process+0x7bc>
    default:
      break;
 801746c:	bf00      	nop
 801746e:	e00c      	b.n	801748a <tcp_process+0x7be>
      break;
 8017470:	bf00      	nop
 8017472:	e00a      	b.n	801748a <tcp_process+0x7be>
      break;
 8017474:	bf00      	nop
 8017476:	e008      	b.n	801748a <tcp_process+0x7be>
      break;
 8017478:	bf00      	nop
 801747a:	e006      	b.n	801748a <tcp_process+0x7be>
      break;
 801747c:	bf00      	nop
 801747e:	e004      	b.n	801748a <tcp_process+0x7be>
      break;
 8017480:	bf00      	nop
 8017482:	e002      	b.n	801748a <tcp_process+0x7be>
      break;
 8017484:	bf00      	nop
 8017486:	e000      	b.n	801748a <tcp_process+0x7be>
      break;
 8017488:	bf00      	nop
  }
  return ERR_OK;
 801748a:	2300      	movs	r3, #0
}
 801748c:	4618      	mov	r0, r3
 801748e:	3724      	adds	r7, #36	@ 0x24
 8017490:	46bd      	mov	sp, r7
 8017492:	bd90      	pop	{r4, r7, pc}
 8017494:	2000cad4 	.word	0x2000cad4
 8017498:	2000cad0 	.word	0x2000cad0
 801749c:	2000cb04 	.word	0x2000cb04
 80174a0:	2000cafc 	.word	0x2000cafc
 80174a4:	2000cb05 	.word	0x2000cb05
 80174a8:	2000cacc 	.word	0x2000cacc

080174ac <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80174ac:	b590      	push	{r4, r7, lr}
 80174ae:	b085      	sub	sp, #20
 80174b0:	af00      	add	r7, sp, #0
 80174b2:	6078      	str	r0, [r7, #4]
 80174b4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80174b6:	687b      	ldr	r3, [r7, #4]
 80174b8:	2b00      	cmp	r3, #0
 80174ba:	d106      	bne.n	80174ca <tcp_oos_insert_segment+0x1e>
 80174bc:	4b3b      	ldr	r3, [pc, #236]	@ (80175ac <tcp_oos_insert_segment+0x100>)
 80174be:	f240 421f 	movw	r2, #1055	@ 0x41f
 80174c2:	493b      	ldr	r1, [pc, #236]	@ (80175b0 <tcp_oos_insert_segment+0x104>)
 80174c4:	483b      	ldr	r0, [pc, #236]	@ (80175b4 <tcp_oos_insert_segment+0x108>)
 80174c6:	f006 fe61 	bl	801e18c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80174ca:	687b      	ldr	r3, [r7, #4]
 80174cc:	68db      	ldr	r3, [r3, #12]
 80174ce:	899b      	ldrh	r3, [r3, #12]
 80174d0:	b29b      	uxth	r3, r3
 80174d2:	4618      	mov	r0, r3
 80174d4:	f7fb f9e2 	bl	801289c <lwip_htons>
 80174d8:	4603      	mov	r3, r0
 80174da:	b2db      	uxtb	r3, r3
 80174dc:	f003 0301 	and.w	r3, r3, #1
 80174e0:	2b00      	cmp	r3, #0
 80174e2:	d028      	beq.n	8017536 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80174e4:	6838      	ldr	r0, [r7, #0]
 80174e6:	f7fe f9bf 	bl	8015868 <tcp_segs_free>
    next = NULL;
 80174ea:	2300      	movs	r3, #0
 80174ec:	603b      	str	r3, [r7, #0]
 80174ee:	e056      	b.n	801759e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80174f0:	683b      	ldr	r3, [r7, #0]
 80174f2:	68db      	ldr	r3, [r3, #12]
 80174f4:	899b      	ldrh	r3, [r3, #12]
 80174f6:	b29b      	uxth	r3, r3
 80174f8:	4618      	mov	r0, r3
 80174fa:	f7fb f9cf 	bl	801289c <lwip_htons>
 80174fe:	4603      	mov	r3, r0
 8017500:	b2db      	uxtb	r3, r3
 8017502:	f003 0301 	and.w	r3, r3, #1
 8017506:	2b00      	cmp	r3, #0
 8017508:	d00d      	beq.n	8017526 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801750a:	687b      	ldr	r3, [r7, #4]
 801750c:	68db      	ldr	r3, [r3, #12]
 801750e:	899b      	ldrh	r3, [r3, #12]
 8017510:	b29c      	uxth	r4, r3
 8017512:	2001      	movs	r0, #1
 8017514:	f7fb f9c2 	bl	801289c <lwip_htons>
 8017518:	4603      	mov	r3, r0
 801751a:	461a      	mov	r2, r3
 801751c:	687b      	ldr	r3, [r7, #4]
 801751e:	68db      	ldr	r3, [r3, #12]
 8017520:	4322      	orrs	r2, r4
 8017522:	b292      	uxth	r2, r2
 8017524:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8017526:	683b      	ldr	r3, [r7, #0]
 8017528:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801752a:	683b      	ldr	r3, [r7, #0]
 801752c:	681b      	ldr	r3, [r3, #0]
 801752e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8017530:	68f8      	ldr	r0, [r7, #12]
 8017532:	f7fe f9ae 	bl	8015892 <tcp_seg_free>
    while (next &&
 8017536:	683b      	ldr	r3, [r7, #0]
 8017538:	2b00      	cmp	r3, #0
 801753a:	d00e      	beq.n	801755a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801753c:	687b      	ldr	r3, [r7, #4]
 801753e:	891b      	ldrh	r3, [r3, #8]
 8017540:	461a      	mov	r2, r3
 8017542:	4b1d      	ldr	r3, [pc, #116]	@ (80175b8 <tcp_oos_insert_segment+0x10c>)
 8017544:	681b      	ldr	r3, [r3, #0]
 8017546:	441a      	add	r2, r3
 8017548:	683b      	ldr	r3, [r7, #0]
 801754a:	68db      	ldr	r3, [r3, #12]
 801754c:	685b      	ldr	r3, [r3, #4]
 801754e:	6839      	ldr	r1, [r7, #0]
 8017550:	8909      	ldrh	r1, [r1, #8]
 8017552:	440b      	add	r3, r1
 8017554:	1ad3      	subs	r3, r2, r3
    while (next &&
 8017556:	2b00      	cmp	r3, #0
 8017558:	daca      	bge.n	80174f0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801755a:	683b      	ldr	r3, [r7, #0]
 801755c:	2b00      	cmp	r3, #0
 801755e:	d01e      	beq.n	801759e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8017560:	687b      	ldr	r3, [r7, #4]
 8017562:	891b      	ldrh	r3, [r3, #8]
 8017564:	461a      	mov	r2, r3
 8017566:	4b14      	ldr	r3, [pc, #80]	@ (80175b8 <tcp_oos_insert_segment+0x10c>)
 8017568:	681b      	ldr	r3, [r3, #0]
 801756a:	441a      	add	r2, r3
 801756c:	683b      	ldr	r3, [r7, #0]
 801756e:	68db      	ldr	r3, [r3, #12]
 8017570:	685b      	ldr	r3, [r3, #4]
 8017572:	1ad3      	subs	r3, r2, r3
    if (next &&
 8017574:	2b00      	cmp	r3, #0
 8017576:	dd12      	ble.n	801759e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8017578:	683b      	ldr	r3, [r7, #0]
 801757a:	68db      	ldr	r3, [r3, #12]
 801757c:	685b      	ldr	r3, [r3, #4]
 801757e:	b29a      	uxth	r2, r3
 8017580:	4b0d      	ldr	r3, [pc, #52]	@ (80175b8 <tcp_oos_insert_segment+0x10c>)
 8017582:	681b      	ldr	r3, [r3, #0]
 8017584:	b29b      	uxth	r3, r3
 8017586:	1ad3      	subs	r3, r2, r3
 8017588:	b29a      	uxth	r2, r3
 801758a:	687b      	ldr	r3, [r7, #4]
 801758c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801758e:	687b      	ldr	r3, [r7, #4]
 8017590:	685a      	ldr	r2, [r3, #4]
 8017592:	687b      	ldr	r3, [r7, #4]
 8017594:	891b      	ldrh	r3, [r3, #8]
 8017596:	4619      	mov	r1, r3
 8017598:	4610      	mov	r0, r2
 801759a:	f7fc fbb9 	bl	8013d10 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801759e:	687b      	ldr	r3, [r7, #4]
 80175a0:	683a      	ldr	r2, [r7, #0]
 80175a2:	601a      	str	r2, [r3, #0]
}
 80175a4:	bf00      	nop
 80175a6:	3714      	adds	r7, #20
 80175a8:	46bd      	mov	sp, r7
 80175aa:	bd90      	pop	{r4, r7, pc}
 80175ac:	08022470 	.word	0x08022470
 80175b0:	08022730 	.word	0x08022730
 80175b4:	080224bc 	.word	0x080224bc
 80175b8:	2000caf8 	.word	0x2000caf8

080175bc <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80175bc:	b5b0      	push	{r4, r5, r7, lr}
 80175be:	b086      	sub	sp, #24
 80175c0:	af00      	add	r7, sp, #0
 80175c2:	60f8      	str	r0, [r7, #12]
 80175c4:	60b9      	str	r1, [r7, #8]
 80175c6:	607a      	str	r2, [r7, #4]
 80175c8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80175ca:	e03e      	b.n	801764a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80175cc:	68bb      	ldr	r3, [r7, #8]
 80175ce:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80175d0:	68bb      	ldr	r3, [r7, #8]
 80175d2:	681b      	ldr	r3, [r3, #0]
 80175d4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80175d6:	697b      	ldr	r3, [r7, #20]
 80175d8:	685b      	ldr	r3, [r3, #4]
 80175da:	4618      	mov	r0, r3
 80175dc:	f7fc fdac 	bl	8014138 <pbuf_clen>
 80175e0:	4603      	mov	r3, r0
 80175e2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80175e4:	68fb      	ldr	r3, [r7, #12]
 80175e6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80175ea:	8a7a      	ldrh	r2, [r7, #18]
 80175ec:	429a      	cmp	r2, r3
 80175ee:	d906      	bls.n	80175fe <tcp_free_acked_segments+0x42>
 80175f0:	4b2a      	ldr	r3, [pc, #168]	@ (801769c <tcp_free_acked_segments+0xe0>)
 80175f2:	f240 4257 	movw	r2, #1111	@ 0x457
 80175f6:	492a      	ldr	r1, [pc, #168]	@ (80176a0 <tcp_free_acked_segments+0xe4>)
 80175f8:	482a      	ldr	r0, [pc, #168]	@ (80176a4 <tcp_free_acked_segments+0xe8>)
 80175fa:	f006 fdc7 	bl	801e18c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80175fe:	68fb      	ldr	r3, [r7, #12]
 8017600:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8017604:	8a7b      	ldrh	r3, [r7, #18]
 8017606:	1ad3      	subs	r3, r2, r3
 8017608:	b29a      	uxth	r2, r3
 801760a:	68fb      	ldr	r3, [r7, #12]
 801760c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8017610:	697b      	ldr	r3, [r7, #20]
 8017612:	891a      	ldrh	r2, [r3, #8]
 8017614:	4b24      	ldr	r3, [pc, #144]	@ (80176a8 <tcp_free_acked_segments+0xec>)
 8017616:	881b      	ldrh	r3, [r3, #0]
 8017618:	4413      	add	r3, r2
 801761a:	b29a      	uxth	r2, r3
 801761c:	4b22      	ldr	r3, [pc, #136]	@ (80176a8 <tcp_free_acked_segments+0xec>)
 801761e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8017620:	6978      	ldr	r0, [r7, #20]
 8017622:	f7fe f936 	bl	8015892 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8017626:	68fb      	ldr	r3, [r7, #12]
 8017628:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801762c:	2b00      	cmp	r3, #0
 801762e:	d00c      	beq.n	801764a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8017630:	68bb      	ldr	r3, [r7, #8]
 8017632:	2b00      	cmp	r3, #0
 8017634:	d109      	bne.n	801764a <tcp_free_acked_segments+0x8e>
 8017636:	683b      	ldr	r3, [r7, #0]
 8017638:	2b00      	cmp	r3, #0
 801763a:	d106      	bne.n	801764a <tcp_free_acked_segments+0x8e>
 801763c:	4b17      	ldr	r3, [pc, #92]	@ (801769c <tcp_free_acked_segments+0xe0>)
 801763e:	f240 4261 	movw	r2, #1121	@ 0x461
 8017642:	491a      	ldr	r1, [pc, #104]	@ (80176ac <tcp_free_acked_segments+0xf0>)
 8017644:	4817      	ldr	r0, [pc, #92]	@ (80176a4 <tcp_free_acked_segments+0xe8>)
 8017646:	f006 fda1 	bl	801e18c <iprintf>
  while (seg_list != NULL &&
 801764a:	68bb      	ldr	r3, [r7, #8]
 801764c:	2b00      	cmp	r3, #0
 801764e:	d020      	beq.n	8017692 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8017650:	68bb      	ldr	r3, [r7, #8]
 8017652:	68db      	ldr	r3, [r3, #12]
 8017654:	685b      	ldr	r3, [r3, #4]
 8017656:	4618      	mov	r0, r3
 8017658:	f7fb f936 	bl	80128c8 <lwip_htonl>
 801765c:	4604      	mov	r4, r0
 801765e:	68bb      	ldr	r3, [r7, #8]
 8017660:	891b      	ldrh	r3, [r3, #8]
 8017662:	461d      	mov	r5, r3
 8017664:	68bb      	ldr	r3, [r7, #8]
 8017666:	68db      	ldr	r3, [r3, #12]
 8017668:	899b      	ldrh	r3, [r3, #12]
 801766a:	b29b      	uxth	r3, r3
 801766c:	4618      	mov	r0, r3
 801766e:	f7fb f915 	bl	801289c <lwip_htons>
 8017672:	4603      	mov	r3, r0
 8017674:	b2db      	uxtb	r3, r3
 8017676:	f003 0303 	and.w	r3, r3, #3
 801767a:	2b00      	cmp	r3, #0
 801767c:	d001      	beq.n	8017682 <tcp_free_acked_segments+0xc6>
 801767e:	2301      	movs	r3, #1
 8017680:	e000      	b.n	8017684 <tcp_free_acked_segments+0xc8>
 8017682:	2300      	movs	r3, #0
 8017684:	442b      	add	r3, r5
 8017686:	18e2      	adds	r2, r4, r3
 8017688:	4b09      	ldr	r3, [pc, #36]	@ (80176b0 <tcp_free_acked_segments+0xf4>)
 801768a:	681b      	ldr	r3, [r3, #0]
 801768c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801768e:	2b00      	cmp	r3, #0
 8017690:	dd9c      	ble.n	80175cc <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8017692:	68bb      	ldr	r3, [r7, #8]
}
 8017694:	4618      	mov	r0, r3
 8017696:	3718      	adds	r7, #24
 8017698:	46bd      	mov	sp, r7
 801769a:	bdb0      	pop	{r4, r5, r7, pc}
 801769c:	08022470 	.word	0x08022470
 80176a0:	08022758 	.word	0x08022758
 80176a4:	080224bc 	.word	0x080224bc
 80176a8:	2000cb00 	.word	0x2000cb00
 80176ac:	08022780 	.word	0x08022780
 80176b0:	2000cafc 	.word	0x2000cafc

080176b4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80176b4:	b5b0      	push	{r4, r5, r7, lr}
 80176b6:	b094      	sub	sp, #80	@ 0x50
 80176b8:	af00      	add	r7, sp, #0
 80176ba:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80176bc:	2300      	movs	r3, #0
 80176be:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80176c0:	687b      	ldr	r3, [r7, #4]
 80176c2:	2b00      	cmp	r3, #0
 80176c4:	d106      	bne.n	80176d4 <tcp_receive+0x20>
 80176c6:	4b91      	ldr	r3, [pc, #580]	@ (801790c <tcp_receive+0x258>)
 80176c8:	f240 427b 	movw	r2, #1147	@ 0x47b
 80176cc:	4990      	ldr	r1, [pc, #576]	@ (8017910 <tcp_receive+0x25c>)
 80176ce:	4891      	ldr	r0, [pc, #580]	@ (8017914 <tcp_receive+0x260>)
 80176d0:	f006 fd5c 	bl	801e18c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80176d4:	687b      	ldr	r3, [r7, #4]
 80176d6:	7d1b      	ldrb	r3, [r3, #20]
 80176d8:	2b03      	cmp	r3, #3
 80176da:	d806      	bhi.n	80176ea <tcp_receive+0x36>
 80176dc:	4b8b      	ldr	r3, [pc, #556]	@ (801790c <tcp_receive+0x258>)
 80176de:	f240 427c 	movw	r2, #1148	@ 0x47c
 80176e2:	498d      	ldr	r1, [pc, #564]	@ (8017918 <tcp_receive+0x264>)
 80176e4:	488b      	ldr	r0, [pc, #556]	@ (8017914 <tcp_receive+0x260>)
 80176e6:	f006 fd51 	bl	801e18c <iprintf>

  if (flags & TCP_ACK) {
 80176ea:	4b8c      	ldr	r3, [pc, #560]	@ (801791c <tcp_receive+0x268>)
 80176ec:	781b      	ldrb	r3, [r3, #0]
 80176ee:	f003 0310 	and.w	r3, r3, #16
 80176f2:	2b00      	cmp	r3, #0
 80176f4:	f000 8264 	beq.w	8017bc0 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80176f8:	687b      	ldr	r3, [r7, #4]
 80176fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80176fe:	461a      	mov	r2, r3
 8017700:	687b      	ldr	r3, [r7, #4]
 8017702:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017704:	4413      	add	r3, r2
 8017706:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8017708:	687b      	ldr	r3, [r7, #4]
 801770a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801770c:	4b84      	ldr	r3, [pc, #528]	@ (8017920 <tcp_receive+0x26c>)
 801770e:	681b      	ldr	r3, [r3, #0]
 8017710:	1ad3      	subs	r3, r2, r3
 8017712:	2b00      	cmp	r3, #0
 8017714:	db1b      	blt.n	801774e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8017716:	687b      	ldr	r3, [r7, #4]
 8017718:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801771a:	4b81      	ldr	r3, [pc, #516]	@ (8017920 <tcp_receive+0x26c>)
 801771c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801771e:	429a      	cmp	r2, r3
 8017720:	d106      	bne.n	8017730 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8017722:	687b      	ldr	r3, [r7, #4]
 8017724:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8017726:	4b7f      	ldr	r3, [pc, #508]	@ (8017924 <tcp_receive+0x270>)
 8017728:	681b      	ldr	r3, [r3, #0]
 801772a:	1ad3      	subs	r3, r2, r3
 801772c:	2b00      	cmp	r3, #0
 801772e:	db0e      	blt.n	801774e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8017730:	687b      	ldr	r3, [r7, #4]
 8017732:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8017734:	4b7b      	ldr	r3, [pc, #492]	@ (8017924 <tcp_receive+0x270>)
 8017736:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8017738:	429a      	cmp	r2, r3
 801773a:	d125      	bne.n	8017788 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801773c:	4b7a      	ldr	r3, [pc, #488]	@ (8017928 <tcp_receive+0x274>)
 801773e:	681b      	ldr	r3, [r3, #0]
 8017740:	89db      	ldrh	r3, [r3, #14]
 8017742:	b29a      	uxth	r2, r3
 8017744:	687b      	ldr	r3, [r7, #4]
 8017746:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801774a:	429a      	cmp	r2, r3
 801774c:	d91c      	bls.n	8017788 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801774e:	4b76      	ldr	r3, [pc, #472]	@ (8017928 <tcp_receive+0x274>)
 8017750:	681b      	ldr	r3, [r3, #0]
 8017752:	89db      	ldrh	r3, [r3, #14]
 8017754:	b29a      	uxth	r2, r3
 8017756:	687b      	ldr	r3, [r7, #4]
 8017758:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801775c:	687b      	ldr	r3, [r7, #4]
 801775e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8017762:	687b      	ldr	r3, [r7, #4]
 8017764:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8017768:	429a      	cmp	r2, r3
 801776a:	d205      	bcs.n	8017778 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801776c:	687b      	ldr	r3, [r7, #4]
 801776e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8017772:	687b      	ldr	r3, [r7, #4]
 8017774:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8017778:	4b69      	ldr	r3, [pc, #420]	@ (8017920 <tcp_receive+0x26c>)
 801777a:	681a      	ldr	r2, [r3, #0]
 801777c:	687b      	ldr	r3, [r7, #4]
 801777e:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8017780:	4b68      	ldr	r3, [pc, #416]	@ (8017924 <tcp_receive+0x270>)
 8017782:	681a      	ldr	r2, [r3, #0]
 8017784:	687b      	ldr	r3, [r7, #4]
 8017786:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8017788:	4b66      	ldr	r3, [pc, #408]	@ (8017924 <tcp_receive+0x270>)
 801778a:	681a      	ldr	r2, [r3, #0]
 801778c:	687b      	ldr	r3, [r7, #4]
 801778e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017790:	1ad3      	subs	r3, r2, r3
 8017792:	2b00      	cmp	r3, #0
 8017794:	dc58      	bgt.n	8017848 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8017796:	4b65      	ldr	r3, [pc, #404]	@ (801792c <tcp_receive+0x278>)
 8017798:	881b      	ldrh	r3, [r3, #0]
 801779a:	2b00      	cmp	r3, #0
 801779c:	d14b      	bne.n	8017836 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801779e:	687b      	ldr	r3, [r7, #4]
 80177a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80177a2:	687a      	ldr	r2, [r7, #4]
 80177a4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 80177a8:	4413      	add	r3, r2
 80177aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80177ac:	429a      	cmp	r2, r3
 80177ae:	d142      	bne.n	8017836 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80177b0:	687b      	ldr	r3, [r7, #4]
 80177b2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80177b6:	2b00      	cmp	r3, #0
 80177b8:	db3d      	blt.n	8017836 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80177ba:	687b      	ldr	r3, [r7, #4]
 80177bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80177be:	4b59      	ldr	r3, [pc, #356]	@ (8017924 <tcp_receive+0x270>)
 80177c0:	681b      	ldr	r3, [r3, #0]
 80177c2:	429a      	cmp	r2, r3
 80177c4:	d137      	bne.n	8017836 <tcp_receive+0x182>
              found_dupack = 1;
 80177c6:	2301      	movs	r3, #1
 80177c8:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80177ca:	687b      	ldr	r3, [r7, #4]
 80177cc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80177d0:	2bff      	cmp	r3, #255	@ 0xff
 80177d2:	d007      	beq.n	80177e4 <tcp_receive+0x130>
                ++pcb->dupacks;
 80177d4:	687b      	ldr	r3, [r7, #4]
 80177d6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80177da:	3301      	adds	r3, #1
 80177dc:	b2da      	uxtb	r2, r3
 80177de:	687b      	ldr	r3, [r7, #4]
 80177e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 80177e4:	687b      	ldr	r3, [r7, #4]
 80177e6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80177ea:	2b03      	cmp	r3, #3
 80177ec:	d91b      	bls.n	8017826 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80177ee:	687b      	ldr	r3, [r7, #4]
 80177f0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80177f4:	687b      	ldr	r3, [r7, #4]
 80177f6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80177f8:	4413      	add	r3, r2
 80177fa:	b29a      	uxth	r2, r3
 80177fc:	687b      	ldr	r3, [r7, #4]
 80177fe:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8017802:	429a      	cmp	r2, r3
 8017804:	d30a      	bcc.n	801781c <tcp_receive+0x168>
 8017806:	687b      	ldr	r3, [r7, #4]
 8017808:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801780c:	687b      	ldr	r3, [r7, #4]
 801780e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017810:	4413      	add	r3, r2
 8017812:	b29a      	uxth	r2, r3
 8017814:	687b      	ldr	r3, [r7, #4]
 8017816:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801781a:	e004      	b.n	8017826 <tcp_receive+0x172>
 801781c:	687b      	ldr	r3, [r7, #4]
 801781e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017822:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8017826:	687b      	ldr	r3, [r7, #4]
 8017828:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801782c:	2b02      	cmp	r3, #2
 801782e:	d902      	bls.n	8017836 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8017830:	6878      	ldr	r0, [r7, #4]
 8017832:	f002 fb3f 	bl	8019eb4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8017836:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017838:	2b00      	cmp	r3, #0
 801783a:	f040 8161 	bne.w	8017b00 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 801783e:	687b      	ldr	r3, [r7, #4]
 8017840:	2200      	movs	r2, #0
 8017842:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8017846:	e15b      	b.n	8017b00 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8017848:	4b36      	ldr	r3, [pc, #216]	@ (8017924 <tcp_receive+0x270>)
 801784a:	681a      	ldr	r2, [r3, #0]
 801784c:	687b      	ldr	r3, [r7, #4]
 801784e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017850:	1ad3      	subs	r3, r2, r3
 8017852:	3b01      	subs	r3, #1
 8017854:	2b00      	cmp	r3, #0
 8017856:	f2c0 814e 	blt.w	8017af6 <tcp_receive+0x442>
 801785a:	4b32      	ldr	r3, [pc, #200]	@ (8017924 <tcp_receive+0x270>)
 801785c:	681a      	ldr	r2, [r3, #0]
 801785e:	687b      	ldr	r3, [r7, #4]
 8017860:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017862:	1ad3      	subs	r3, r2, r3
 8017864:	2b00      	cmp	r3, #0
 8017866:	f300 8146 	bgt.w	8017af6 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801786a:	687b      	ldr	r3, [r7, #4]
 801786c:	8b5b      	ldrh	r3, [r3, #26]
 801786e:	f003 0304 	and.w	r3, r3, #4
 8017872:	2b00      	cmp	r3, #0
 8017874:	d010      	beq.n	8017898 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8017876:	687b      	ldr	r3, [r7, #4]
 8017878:	8b5b      	ldrh	r3, [r3, #26]
 801787a:	f023 0304 	bic.w	r3, r3, #4
 801787e:	b29a      	uxth	r2, r3
 8017880:	687b      	ldr	r3, [r7, #4]
 8017882:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8017884:	687b      	ldr	r3, [r7, #4]
 8017886:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801788a:	687b      	ldr	r3, [r7, #4]
 801788c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8017890:	687b      	ldr	r3, [r7, #4]
 8017892:	2200      	movs	r2, #0
 8017894:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8017898:	687b      	ldr	r3, [r7, #4]
 801789a:	2200      	movs	r2, #0
 801789c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80178a0:	687b      	ldr	r3, [r7, #4]
 80178a2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80178a6:	10db      	asrs	r3, r3, #3
 80178a8:	b21b      	sxth	r3, r3
 80178aa:	b29a      	uxth	r2, r3
 80178ac:	687b      	ldr	r3, [r7, #4]
 80178ae:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80178b2:	b29b      	uxth	r3, r3
 80178b4:	4413      	add	r3, r2
 80178b6:	b29b      	uxth	r3, r3
 80178b8:	b21a      	sxth	r2, r3
 80178ba:	687b      	ldr	r3, [r7, #4]
 80178bc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80178c0:	4b18      	ldr	r3, [pc, #96]	@ (8017924 <tcp_receive+0x270>)
 80178c2:	681b      	ldr	r3, [r3, #0]
 80178c4:	b29a      	uxth	r2, r3
 80178c6:	687b      	ldr	r3, [r7, #4]
 80178c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80178ca:	b29b      	uxth	r3, r3
 80178cc:	1ad3      	subs	r3, r2, r3
 80178ce:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80178d0:	687b      	ldr	r3, [r7, #4]
 80178d2:	2200      	movs	r2, #0
 80178d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 80178d8:	4b12      	ldr	r3, [pc, #72]	@ (8017924 <tcp_receive+0x270>)
 80178da:	681a      	ldr	r2, [r3, #0]
 80178dc:	687b      	ldr	r3, [r7, #4]
 80178de:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80178e0:	687b      	ldr	r3, [r7, #4]
 80178e2:	7d1b      	ldrb	r3, [r3, #20]
 80178e4:	2b03      	cmp	r3, #3
 80178e6:	f240 8097 	bls.w	8017a18 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 80178ea:	687b      	ldr	r3, [r7, #4]
 80178ec:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80178f0:	687b      	ldr	r3, [r7, #4]
 80178f2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80178f6:	429a      	cmp	r2, r3
 80178f8:	d245      	bcs.n	8017986 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80178fa:	687b      	ldr	r3, [r7, #4]
 80178fc:	8b5b      	ldrh	r3, [r3, #26]
 80178fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8017902:	2b00      	cmp	r3, #0
 8017904:	d014      	beq.n	8017930 <tcp_receive+0x27c>
 8017906:	2301      	movs	r3, #1
 8017908:	e013      	b.n	8017932 <tcp_receive+0x27e>
 801790a:	bf00      	nop
 801790c:	08022470 	.word	0x08022470
 8017910:	080227a0 	.word	0x080227a0
 8017914:	080224bc 	.word	0x080224bc
 8017918:	080227bc 	.word	0x080227bc
 801791c:	2000cb04 	.word	0x2000cb04
 8017920:	2000caf8 	.word	0x2000caf8
 8017924:	2000cafc 	.word	0x2000cafc
 8017928:	2000cae8 	.word	0x2000cae8
 801792c:	2000cb02 	.word	0x2000cb02
 8017930:	2302      	movs	r3, #2
 8017932:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8017936:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 801793a:	b29a      	uxth	r2, r3
 801793c:	687b      	ldr	r3, [r7, #4]
 801793e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017940:	fb12 f303 	smulbb	r3, r2, r3
 8017944:	b29b      	uxth	r3, r3
 8017946:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8017948:	4293      	cmp	r3, r2
 801794a:	bf28      	it	cs
 801794c:	4613      	movcs	r3, r2
 801794e:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8017950:	687b      	ldr	r3, [r7, #4]
 8017952:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8017956:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8017958:	4413      	add	r3, r2
 801795a:	b29a      	uxth	r2, r3
 801795c:	687b      	ldr	r3, [r7, #4]
 801795e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8017962:	429a      	cmp	r2, r3
 8017964:	d309      	bcc.n	801797a <tcp_receive+0x2c6>
 8017966:	687b      	ldr	r3, [r7, #4]
 8017968:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801796c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801796e:	4413      	add	r3, r2
 8017970:	b29a      	uxth	r2, r3
 8017972:	687b      	ldr	r3, [r7, #4]
 8017974:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8017978:	e04e      	b.n	8017a18 <tcp_receive+0x364>
 801797a:	687b      	ldr	r3, [r7, #4]
 801797c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017980:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8017984:	e048      	b.n	8017a18 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8017986:	687b      	ldr	r3, [r7, #4]
 8017988:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 801798c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801798e:	4413      	add	r3, r2
 8017990:	b29a      	uxth	r2, r3
 8017992:	687b      	ldr	r3, [r7, #4]
 8017994:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8017998:	429a      	cmp	r2, r3
 801799a:	d309      	bcc.n	80179b0 <tcp_receive+0x2fc>
 801799c:	687b      	ldr	r3, [r7, #4]
 801799e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80179a2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80179a4:	4413      	add	r3, r2
 80179a6:	b29a      	uxth	r2, r3
 80179a8:	687b      	ldr	r3, [r7, #4]
 80179aa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80179ae:	e004      	b.n	80179ba <tcp_receive+0x306>
 80179b0:	687b      	ldr	r3, [r7, #4]
 80179b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80179b6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80179ba:	687b      	ldr	r3, [r7, #4]
 80179bc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80179c0:	687b      	ldr	r3, [r7, #4]
 80179c2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80179c6:	429a      	cmp	r2, r3
 80179c8:	d326      	bcc.n	8017a18 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80179ca:	687b      	ldr	r3, [r7, #4]
 80179cc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80179d0:	687b      	ldr	r3, [r7, #4]
 80179d2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80179d6:	1ad3      	subs	r3, r2, r3
 80179d8:	b29a      	uxth	r2, r3
 80179da:	687b      	ldr	r3, [r7, #4]
 80179dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80179e0:	687b      	ldr	r3, [r7, #4]
 80179e2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80179e6:	687b      	ldr	r3, [r7, #4]
 80179e8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80179ea:	4413      	add	r3, r2
 80179ec:	b29a      	uxth	r2, r3
 80179ee:	687b      	ldr	r3, [r7, #4]
 80179f0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80179f4:	429a      	cmp	r2, r3
 80179f6:	d30a      	bcc.n	8017a0e <tcp_receive+0x35a>
 80179f8:	687b      	ldr	r3, [r7, #4]
 80179fa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80179fe:	687b      	ldr	r3, [r7, #4]
 8017a00:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017a02:	4413      	add	r3, r2
 8017a04:	b29a      	uxth	r2, r3
 8017a06:	687b      	ldr	r3, [r7, #4]
 8017a08:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8017a0c:	e004      	b.n	8017a18 <tcp_receive+0x364>
 8017a0e:	687b      	ldr	r3, [r7, #4]
 8017a10:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017a14:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8017a18:	687b      	ldr	r3, [r7, #4]
 8017a1a:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8017a1c:	687b      	ldr	r3, [r7, #4]
 8017a1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017a20:	4a98      	ldr	r2, [pc, #608]	@ (8017c84 <tcp_receive+0x5d0>)
 8017a22:	6878      	ldr	r0, [r7, #4]
 8017a24:	f7ff fdca 	bl	80175bc <tcp_free_acked_segments>
 8017a28:	4602      	mov	r2, r0
 8017a2a:	687b      	ldr	r3, [r7, #4]
 8017a2c:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8017a2e:	687b      	ldr	r3, [r7, #4]
 8017a30:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8017a32:	687b      	ldr	r3, [r7, #4]
 8017a34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017a36:	4a94      	ldr	r2, [pc, #592]	@ (8017c88 <tcp_receive+0x5d4>)
 8017a38:	6878      	ldr	r0, [r7, #4]
 8017a3a:	f7ff fdbf 	bl	80175bc <tcp_free_acked_segments>
 8017a3e:	4602      	mov	r2, r0
 8017a40:	687b      	ldr	r3, [r7, #4]
 8017a42:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8017a44:	687b      	ldr	r3, [r7, #4]
 8017a46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017a48:	2b00      	cmp	r3, #0
 8017a4a:	d104      	bne.n	8017a56 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8017a4c:	687b      	ldr	r3, [r7, #4]
 8017a4e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017a52:	861a      	strh	r2, [r3, #48]	@ 0x30
 8017a54:	e002      	b.n	8017a5c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8017a56:	687b      	ldr	r3, [r7, #4]
 8017a58:	2200      	movs	r2, #0
 8017a5a:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8017a5c:	687b      	ldr	r3, [r7, #4]
 8017a5e:	2200      	movs	r2, #0
 8017a60:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8017a62:	687b      	ldr	r3, [r7, #4]
 8017a64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017a66:	2b00      	cmp	r3, #0
 8017a68:	d103      	bne.n	8017a72 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8017a6a:	687b      	ldr	r3, [r7, #4]
 8017a6c:	2200      	movs	r2, #0
 8017a6e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8017a72:	687b      	ldr	r3, [r7, #4]
 8017a74:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8017a78:	4b84      	ldr	r3, [pc, #528]	@ (8017c8c <tcp_receive+0x5d8>)
 8017a7a:	881b      	ldrh	r3, [r3, #0]
 8017a7c:	4413      	add	r3, r2
 8017a7e:	b29a      	uxth	r2, r3
 8017a80:	687b      	ldr	r3, [r7, #4]
 8017a82:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8017a86:	687b      	ldr	r3, [r7, #4]
 8017a88:	8b5b      	ldrh	r3, [r3, #26]
 8017a8a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8017a8e:	2b00      	cmp	r3, #0
 8017a90:	d035      	beq.n	8017afe <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8017a92:	687b      	ldr	r3, [r7, #4]
 8017a94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017a96:	2b00      	cmp	r3, #0
 8017a98:	d118      	bne.n	8017acc <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8017a9a:	687b      	ldr	r3, [r7, #4]
 8017a9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017a9e:	2b00      	cmp	r3, #0
 8017aa0:	d00c      	beq.n	8017abc <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8017aa2:	687b      	ldr	r3, [r7, #4]
 8017aa4:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8017aa6:	687b      	ldr	r3, [r7, #4]
 8017aa8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017aaa:	68db      	ldr	r3, [r3, #12]
 8017aac:	685b      	ldr	r3, [r3, #4]
 8017aae:	4618      	mov	r0, r3
 8017ab0:	f7fa ff0a 	bl	80128c8 <lwip_htonl>
 8017ab4:	4603      	mov	r3, r0
 8017ab6:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8017ab8:	2b00      	cmp	r3, #0
 8017aba:	dc20      	bgt.n	8017afe <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8017abc:	687b      	ldr	r3, [r7, #4]
 8017abe:	8b5b      	ldrh	r3, [r3, #26]
 8017ac0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8017ac4:	b29a      	uxth	r2, r3
 8017ac6:	687b      	ldr	r3, [r7, #4]
 8017ac8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8017aca:	e018      	b.n	8017afe <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8017acc:	687b      	ldr	r3, [r7, #4]
 8017ace:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8017ad0:	687b      	ldr	r3, [r7, #4]
 8017ad2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017ad4:	68db      	ldr	r3, [r3, #12]
 8017ad6:	685b      	ldr	r3, [r3, #4]
 8017ad8:	4618      	mov	r0, r3
 8017ada:	f7fa fef5 	bl	80128c8 <lwip_htonl>
 8017ade:	4603      	mov	r3, r0
 8017ae0:	1ae3      	subs	r3, r4, r3
 8017ae2:	2b00      	cmp	r3, #0
 8017ae4:	dc0b      	bgt.n	8017afe <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8017ae6:	687b      	ldr	r3, [r7, #4]
 8017ae8:	8b5b      	ldrh	r3, [r3, #26]
 8017aea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8017aee:	b29a      	uxth	r2, r3
 8017af0:	687b      	ldr	r3, [r7, #4]
 8017af2:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8017af4:	e003      	b.n	8017afe <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8017af6:	6878      	ldr	r0, [r7, #4]
 8017af8:	f002 fbc8 	bl	801a28c <tcp_send_empty_ack>
 8017afc:	e000      	b.n	8017b00 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8017afe:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8017b00:	687b      	ldr	r3, [r7, #4]
 8017b02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017b04:	2b00      	cmp	r3, #0
 8017b06:	d05b      	beq.n	8017bc0 <tcp_receive+0x50c>
 8017b08:	687b      	ldr	r3, [r7, #4]
 8017b0a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8017b0c:	4b60      	ldr	r3, [pc, #384]	@ (8017c90 <tcp_receive+0x5dc>)
 8017b0e:	681b      	ldr	r3, [r3, #0]
 8017b10:	1ad3      	subs	r3, r2, r3
 8017b12:	2b00      	cmp	r3, #0
 8017b14:	da54      	bge.n	8017bc0 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8017b16:	4b5f      	ldr	r3, [pc, #380]	@ (8017c94 <tcp_receive+0x5e0>)
 8017b18:	681b      	ldr	r3, [r3, #0]
 8017b1a:	b29a      	uxth	r2, r3
 8017b1c:	687b      	ldr	r3, [r7, #4]
 8017b1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017b20:	b29b      	uxth	r3, r3
 8017b22:	1ad3      	subs	r3, r2, r3
 8017b24:	b29b      	uxth	r3, r3
 8017b26:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8017b2a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8017b2e:	687b      	ldr	r3, [r7, #4]
 8017b30:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8017b34:	10db      	asrs	r3, r3, #3
 8017b36:	b21b      	sxth	r3, r3
 8017b38:	b29b      	uxth	r3, r3
 8017b3a:	1ad3      	subs	r3, r2, r3
 8017b3c:	b29b      	uxth	r3, r3
 8017b3e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8017b42:	687b      	ldr	r3, [r7, #4]
 8017b44:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8017b48:	b29a      	uxth	r2, r3
 8017b4a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8017b4e:	4413      	add	r3, r2
 8017b50:	b29b      	uxth	r3, r3
 8017b52:	b21a      	sxth	r2, r3
 8017b54:	687b      	ldr	r3, [r7, #4]
 8017b56:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8017b58:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8017b5c:	2b00      	cmp	r3, #0
 8017b5e:	da05      	bge.n	8017b6c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8017b60:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8017b64:	425b      	negs	r3, r3
 8017b66:	b29b      	uxth	r3, r3
 8017b68:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8017b6c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8017b70:	687b      	ldr	r3, [r7, #4]
 8017b72:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8017b76:	109b      	asrs	r3, r3, #2
 8017b78:	b21b      	sxth	r3, r3
 8017b7a:	b29b      	uxth	r3, r3
 8017b7c:	1ad3      	subs	r3, r2, r3
 8017b7e:	b29b      	uxth	r3, r3
 8017b80:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8017b84:	687b      	ldr	r3, [r7, #4]
 8017b86:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8017b8a:	b29a      	uxth	r2, r3
 8017b8c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8017b90:	4413      	add	r3, r2
 8017b92:	b29b      	uxth	r3, r3
 8017b94:	b21a      	sxth	r2, r3
 8017b96:	687b      	ldr	r3, [r7, #4]
 8017b98:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8017b9a:	687b      	ldr	r3, [r7, #4]
 8017b9c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8017ba0:	10db      	asrs	r3, r3, #3
 8017ba2:	b21b      	sxth	r3, r3
 8017ba4:	b29a      	uxth	r2, r3
 8017ba6:	687b      	ldr	r3, [r7, #4]
 8017ba8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8017bac:	b29b      	uxth	r3, r3
 8017bae:	4413      	add	r3, r2
 8017bb0:	b29b      	uxth	r3, r3
 8017bb2:	b21a      	sxth	r2, r3
 8017bb4:	687b      	ldr	r3, [r7, #4]
 8017bb6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8017bba:	687b      	ldr	r3, [r7, #4]
 8017bbc:	2200      	movs	r2, #0
 8017bbe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8017bc0:	4b35      	ldr	r3, [pc, #212]	@ (8017c98 <tcp_receive+0x5e4>)
 8017bc2:	881b      	ldrh	r3, [r3, #0]
 8017bc4:	2b00      	cmp	r3, #0
 8017bc6:	f000 84df 	beq.w	8018588 <tcp_receive+0xed4>
 8017bca:	687b      	ldr	r3, [r7, #4]
 8017bcc:	7d1b      	ldrb	r3, [r3, #20]
 8017bce:	2b06      	cmp	r3, #6
 8017bd0:	f200 84da 	bhi.w	8018588 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8017bd4:	687b      	ldr	r3, [r7, #4]
 8017bd6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017bd8:	4b30      	ldr	r3, [pc, #192]	@ (8017c9c <tcp_receive+0x5e8>)
 8017bda:	681b      	ldr	r3, [r3, #0]
 8017bdc:	1ad3      	subs	r3, r2, r3
 8017bde:	3b01      	subs	r3, #1
 8017be0:	2b00      	cmp	r3, #0
 8017be2:	f2c0 808f 	blt.w	8017d04 <tcp_receive+0x650>
 8017be6:	687b      	ldr	r3, [r7, #4]
 8017be8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017bea:	4b2b      	ldr	r3, [pc, #172]	@ (8017c98 <tcp_receive+0x5e4>)
 8017bec:	881b      	ldrh	r3, [r3, #0]
 8017bee:	4619      	mov	r1, r3
 8017bf0:	4b2a      	ldr	r3, [pc, #168]	@ (8017c9c <tcp_receive+0x5e8>)
 8017bf2:	681b      	ldr	r3, [r3, #0]
 8017bf4:	440b      	add	r3, r1
 8017bf6:	1ad3      	subs	r3, r2, r3
 8017bf8:	3301      	adds	r3, #1
 8017bfa:	2b00      	cmp	r3, #0
 8017bfc:	f300 8082 	bgt.w	8017d04 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8017c00:	4b27      	ldr	r3, [pc, #156]	@ (8017ca0 <tcp_receive+0x5ec>)
 8017c02:	685b      	ldr	r3, [r3, #4]
 8017c04:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8017c06:	687b      	ldr	r3, [r7, #4]
 8017c08:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017c0a:	4b24      	ldr	r3, [pc, #144]	@ (8017c9c <tcp_receive+0x5e8>)
 8017c0c:	681b      	ldr	r3, [r3, #0]
 8017c0e:	1ad3      	subs	r3, r2, r3
 8017c10:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8017c12:	4b23      	ldr	r3, [pc, #140]	@ (8017ca0 <tcp_receive+0x5ec>)
 8017c14:	685b      	ldr	r3, [r3, #4]
 8017c16:	2b00      	cmp	r3, #0
 8017c18:	d106      	bne.n	8017c28 <tcp_receive+0x574>
 8017c1a:	4b22      	ldr	r3, [pc, #136]	@ (8017ca4 <tcp_receive+0x5f0>)
 8017c1c:	f240 5294 	movw	r2, #1428	@ 0x594
 8017c20:	4921      	ldr	r1, [pc, #132]	@ (8017ca8 <tcp_receive+0x5f4>)
 8017c22:	4822      	ldr	r0, [pc, #136]	@ (8017cac <tcp_receive+0x5f8>)
 8017c24:	f006 fab2 	bl	801e18c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8017c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017c2a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8017c2e:	4293      	cmp	r3, r2
 8017c30:	d906      	bls.n	8017c40 <tcp_receive+0x58c>
 8017c32:	4b1c      	ldr	r3, [pc, #112]	@ (8017ca4 <tcp_receive+0x5f0>)
 8017c34:	f240 5295 	movw	r2, #1429	@ 0x595
 8017c38:	491d      	ldr	r1, [pc, #116]	@ (8017cb0 <tcp_receive+0x5fc>)
 8017c3a:	481c      	ldr	r0, [pc, #112]	@ (8017cac <tcp_receive+0x5f8>)
 8017c3c:	f006 faa6 	bl	801e18c <iprintf>
      off = (u16_t)off32;
 8017c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017c42:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8017c46:	4b16      	ldr	r3, [pc, #88]	@ (8017ca0 <tcp_receive+0x5ec>)
 8017c48:	685b      	ldr	r3, [r3, #4]
 8017c4a:	891b      	ldrh	r3, [r3, #8]
 8017c4c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8017c50:	429a      	cmp	r2, r3
 8017c52:	d906      	bls.n	8017c62 <tcp_receive+0x5ae>
 8017c54:	4b13      	ldr	r3, [pc, #76]	@ (8017ca4 <tcp_receive+0x5f0>)
 8017c56:	f240 5297 	movw	r2, #1431	@ 0x597
 8017c5a:	4916      	ldr	r1, [pc, #88]	@ (8017cb4 <tcp_receive+0x600>)
 8017c5c:	4813      	ldr	r0, [pc, #76]	@ (8017cac <tcp_receive+0x5f8>)
 8017c5e:	f006 fa95 	bl	801e18c <iprintf>
      inseg.len -= off;
 8017c62:	4b0f      	ldr	r3, [pc, #60]	@ (8017ca0 <tcp_receive+0x5ec>)
 8017c64:	891a      	ldrh	r2, [r3, #8]
 8017c66:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017c6a:	1ad3      	subs	r3, r2, r3
 8017c6c:	b29a      	uxth	r2, r3
 8017c6e:	4b0c      	ldr	r3, [pc, #48]	@ (8017ca0 <tcp_receive+0x5ec>)
 8017c70:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8017c72:	4b0b      	ldr	r3, [pc, #44]	@ (8017ca0 <tcp_receive+0x5ec>)
 8017c74:	685b      	ldr	r3, [r3, #4]
 8017c76:	891a      	ldrh	r2, [r3, #8]
 8017c78:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017c7c:	1ad3      	subs	r3, r2, r3
 8017c7e:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8017c80:	e02a      	b.n	8017cd8 <tcp_receive+0x624>
 8017c82:	bf00      	nop
 8017c84:	080227d8 	.word	0x080227d8
 8017c88:	080227e0 	.word	0x080227e0
 8017c8c:	2000cb00 	.word	0x2000cb00
 8017c90:	2000cafc 	.word	0x2000cafc
 8017c94:	2000cac0 	.word	0x2000cac0
 8017c98:	2000cb02 	.word	0x2000cb02
 8017c9c:	2000caf8 	.word	0x2000caf8
 8017ca0:	2000cad8 	.word	0x2000cad8
 8017ca4:	08022470 	.word	0x08022470
 8017ca8:	080227e8 	.word	0x080227e8
 8017cac:	080224bc 	.word	0x080224bc
 8017cb0:	080227f8 	.word	0x080227f8
 8017cb4:	08022808 	.word	0x08022808
        off -= p->len;
 8017cb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017cba:	895b      	ldrh	r3, [r3, #10]
 8017cbc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8017cc0:	1ad3      	subs	r3, r2, r3
 8017cc2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8017cc6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017cc8:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8017cca:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8017ccc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017cce:	2200      	movs	r2, #0
 8017cd0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8017cd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017cd4:	681b      	ldr	r3, [r3, #0]
 8017cd6:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8017cd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017cda:	895b      	ldrh	r3, [r3, #10]
 8017cdc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8017ce0:	429a      	cmp	r2, r3
 8017ce2:	d8e9      	bhi.n	8017cb8 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8017ce4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017ce8:	4619      	mov	r1, r3
 8017cea:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8017cec:	f7fc f910 	bl	8013f10 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8017cf0:	687b      	ldr	r3, [r7, #4]
 8017cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017cf4:	4a90      	ldr	r2, [pc, #576]	@ (8017f38 <tcp_receive+0x884>)
 8017cf6:	6013      	str	r3, [r2, #0]
 8017cf8:	4b90      	ldr	r3, [pc, #576]	@ (8017f3c <tcp_receive+0x888>)
 8017cfa:	68db      	ldr	r3, [r3, #12]
 8017cfc:	4a8e      	ldr	r2, [pc, #568]	@ (8017f38 <tcp_receive+0x884>)
 8017cfe:	6812      	ldr	r2, [r2, #0]
 8017d00:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8017d02:	e00d      	b.n	8017d20 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8017d04:	4b8c      	ldr	r3, [pc, #560]	@ (8017f38 <tcp_receive+0x884>)
 8017d06:	681a      	ldr	r2, [r3, #0]
 8017d08:	687b      	ldr	r3, [r7, #4]
 8017d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017d0c:	1ad3      	subs	r3, r2, r3
 8017d0e:	2b00      	cmp	r3, #0
 8017d10:	da06      	bge.n	8017d20 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8017d12:	687b      	ldr	r3, [r7, #4]
 8017d14:	8b5b      	ldrh	r3, [r3, #26]
 8017d16:	f043 0302 	orr.w	r3, r3, #2
 8017d1a:	b29a      	uxth	r2, r3
 8017d1c:	687b      	ldr	r3, [r7, #4]
 8017d1e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8017d20:	4b85      	ldr	r3, [pc, #532]	@ (8017f38 <tcp_receive+0x884>)
 8017d22:	681a      	ldr	r2, [r3, #0]
 8017d24:	687b      	ldr	r3, [r7, #4]
 8017d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017d28:	1ad3      	subs	r3, r2, r3
 8017d2a:	2b00      	cmp	r3, #0
 8017d2c:	f2c0 8427 	blt.w	801857e <tcp_receive+0xeca>
 8017d30:	4b81      	ldr	r3, [pc, #516]	@ (8017f38 <tcp_receive+0x884>)
 8017d32:	681a      	ldr	r2, [r3, #0]
 8017d34:	687b      	ldr	r3, [r7, #4]
 8017d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017d38:	6879      	ldr	r1, [r7, #4]
 8017d3a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8017d3c:	440b      	add	r3, r1
 8017d3e:	1ad3      	subs	r3, r2, r3
 8017d40:	3301      	adds	r3, #1
 8017d42:	2b00      	cmp	r3, #0
 8017d44:	f300 841b 	bgt.w	801857e <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8017d48:	687b      	ldr	r3, [r7, #4]
 8017d4a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017d4c:	4b7a      	ldr	r3, [pc, #488]	@ (8017f38 <tcp_receive+0x884>)
 8017d4e:	681b      	ldr	r3, [r3, #0]
 8017d50:	429a      	cmp	r2, r3
 8017d52:	f040 8298 	bne.w	8018286 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8017d56:	4b79      	ldr	r3, [pc, #484]	@ (8017f3c <tcp_receive+0x888>)
 8017d58:	891c      	ldrh	r4, [r3, #8]
 8017d5a:	4b78      	ldr	r3, [pc, #480]	@ (8017f3c <tcp_receive+0x888>)
 8017d5c:	68db      	ldr	r3, [r3, #12]
 8017d5e:	899b      	ldrh	r3, [r3, #12]
 8017d60:	b29b      	uxth	r3, r3
 8017d62:	4618      	mov	r0, r3
 8017d64:	f7fa fd9a 	bl	801289c <lwip_htons>
 8017d68:	4603      	mov	r3, r0
 8017d6a:	b2db      	uxtb	r3, r3
 8017d6c:	f003 0303 	and.w	r3, r3, #3
 8017d70:	2b00      	cmp	r3, #0
 8017d72:	d001      	beq.n	8017d78 <tcp_receive+0x6c4>
 8017d74:	2301      	movs	r3, #1
 8017d76:	e000      	b.n	8017d7a <tcp_receive+0x6c6>
 8017d78:	2300      	movs	r3, #0
 8017d7a:	4423      	add	r3, r4
 8017d7c:	b29a      	uxth	r2, r3
 8017d7e:	4b70      	ldr	r3, [pc, #448]	@ (8017f40 <tcp_receive+0x88c>)
 8017d80:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8017d82:	687b      	ldr	r3, [r7, #4]
 8017d84:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8017d86:	4b6e      	ldr	r3, [pc, #440]	@ (8017f40 <tcp_receive+0x88c>)
 8017d88:	881b      	ldrh	r3, [r3, #0]
 8017d8a:	429a      	cmp	r2, r3
 8017d8c:	d274      	bcs.n	8017e78 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8017d8e:	4b6b      	ldr	r3, [pc, #428]	@ (8017f3c <tcp_receive+0x888>)
 8017d90:	68db      	ldr	r3, [r3, #12]
 8017d92:	899b      	ldrh	r3, [r3, #12]
 8017d94:	b29b      	uxth	r3, r3
 8017d96:	4618      	mov	r0, r3
 8017d98:	f7fa fd80 	bl	801289c <lwip_htons>
 8017d9c:	4603      	mov	r3, r0
 8017d9e:	b2db      	uxtb	r3, r3
 8017da0:	f003 0301 	and.w	r3, r3, #1
 8017da4:	2b00      	cmp	r3, #0
 8017da6:	d01e      	beq.n	8017de6 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8017da8:	4b64      	ldr	r3, [pc, #400]	@ (8017f3c <tcp_receive+0x888>)
 8017daa:	68db      	ldr	r3, [r3, #12]
 8017dac:	899b      	ldrh	r3, [r3, #12]
 8017dae:	b29b      	uxth	r3, r3
 8017db0:	b21b      	sxth	r3, r3
 8017db2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8017db6:	b21c      	sxth	r4, r3
 8017db8:	4b60      	ldr	r3, [pc, #384]	@ (8017f3c <tcp_receive+0x888>)
 8017dba:	68db      	ldr	r3, [r3, #12]
 8017dbc:	899b      	ldrh	r3, [r3, #12]
 8017dbe:	b29b      	uxth	r3, r3
 8017dc0:	4618      	mov	r0, r3
 8017dc2:	f7fa fd6b 	bl	801289c <lwip_htons>
 8017dc6:	4603      	mov	r3, r0
 8017dc8:	b2db      	uxtb	r3, r3
 8017dca:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8017dce:	b29b      	uxth	r3, r3
 8017dd0:	4618      	mov	r0, r3
 8017dd2:	f7fa fd63 	bl	801289c <lwip_htons>
 8017dd6:	4603      	mov	r3, r0
 8017dd8:	b21b      	sxth	r3, r3
 8017dda:	4323      	orrs	r3, r4
 8017ddc:	b21a      	sxth	r2, r3
 8017dde:	4b57      	ldr	r3, [pc, #348]	@ (8017f3c <tcp_receive+0x888>)
 8017de0:	68db      	ldr	r3, [r3, #12]
 8017de2:	b292      	uxth	r2, r2
 8017de4:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8017de6:	687b      	ldr	r3, [r7, #4]
 8017de8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8017dea:	4b54      	ldr	r3, [pc, #336]	@ (8017f3c <tcp_receive+0x888>)
 8017dec:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8017dee:	4b53      	ldr	r3, [pc, #332]	@ (8017f3c <tcp_receive+0x888>)
 8017df0:	68db      	ldr	r3, [r3, #12]
 8017df2:	899b      	ldrh	r3, [r3, #12]
 8017df4:	b29b      	uxth	r3, r3
 8017df6:	4618      	mov	r0, r3
 8017df8:	f7fa fd50 	bl	801289c <lwip_htons>
 8017dfc:	4603      	mov	r3, r0
 8017dfe:	b2db      	uxtb	r3, r3
 8017e00:	f003 0302 	and.w	r3, r3, #2
 8017e04:	2b00      	cmp	r3, #0
 8017e06:	d005      	beq.n	8017e14 <tcp_receive+0x760>
            inseg.len -= 1;
 8017e08:	4b4c      	ldr	r3, [pc, #304]	@ (8017f3c <tcp_receive+0x888>)
 8017e0a:	891b      	ldrh	r3, [r3, #8]
 8017e0c:	3b01      	subs	r3, #1
 8017e0e:	b29a      	uxth	r2, r3
 8017e10:	4b4a      	ldr	r3, [pc, #296]	@ (8017f3c <tcp_receive+0x888>)
 8017e12:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8017e14:	4b49      	ldr	r3, [pc, #292]	@ (8017f3c <tcp_receive+0x888>)
 8017e16:	685b      	ldr	r3, [r3, #4]
 8017e18:	4a48      	ldr	r2, [pc, #288]	@ (8017f3c <tcp_receive+0x888>)
 8017e1a:	8912      	ldrh	r2, [r2, #8]
 8017e1c:	4611      	mov	r1, r2
 8017e1e:	4618      	mov	r0, r3
 8017e20:	f7fb ff76 	bl	8013d10 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8017e24:	4b45      	ldr	r3, [pc, #276]	@ (8017f3c <tcp_receive+0x888>)
 8017e26:	891c      	ldrh	r4, [r3, #8]
 8017e28:	4b44      	ldr	r3, [pc, #272]	@ (8017f3c <tcp_receive+0x888>)
 8017e2a:	68db      	ldr	r3, [r3, #12]
 8017e2c:	899b      	ldrh	r3, [r3, #12]
 8017e2e:	b29b      	uxth	r3, r3
 8017e30:	4618      	mov	r0, r3
 8017e32:	f7fa fd33 	bl	801289c <lwip_htons>
 8017e36:	4603      	mov	r3, r0
 8017e38:	b2db      	uxtb	r3, r3
 8017e3a:	f003 0303 	and.w	r3, r3, #3
 8017e3e:	2b00      	cmp	r3, #0
 8017e40:	d001      	beq.n	8017e46 <tcp_receive+0x792>
 8017e42:	2301      	movs	r3, #1
 8017e44:	e000      	b.n	8017e48 <tcp_receive+0x794>
 8017e46:	2300      	movs	r3, #0
 8017e48:	4423      	add	r3, r4
 8017e4a:	b29a      	uxth	r2, r3
 8017e4c:	4b3c      	ldr	r3, [pc, #240]	@ (8017f40 <tcp_receive+0x88c>)
 8017e4e:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8017e50:	4b3b      	ldr	r3, [pc, #236]	@ (8017f40 <tcp_receive+0x88c>)
 8017e52:	881b      	ldrh	r3, [r3, #0]
 8017e54:	461a      	mov	r2, r3
 8017e56:	4b38      	ldr	r3, [pc, #224]	@ (8017f38 <tcp_receive+0x884>)
 8017e58:	681b      	ldr	r3, [r3, #0]
 8017e5a:	441a      	add	r2, r3
 8017e5c:	687b      	ldr	r3, [r7, #4]
 8017e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017e60:	6879      	ldr	r1, [r7, #4]
 8017e62:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8017e64:	440b      	add	r3, r1
 8017e66:	429a      	cmp	r2, r3
 8017e68:	d006      	beq.n	8017e78 <tcp_receive+0x7c4>
 8017e6a:	4b36      	ldr	r3, [pc, #216]	@ (8017f44 <tcp_receive+0x890>)
 8017e6c:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8017e70:	4935      	ldr	r1, [pc, #212]	@ (8017f48 <tcp_receive+0x894>)
 8017e72:	4836      	ldr	r0, [pc, #216]	@ (8017f4c <tcp_receive+0x898>)
 8017e74:	f006 f98a 	bl	801e18c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8017e78:	687b      	ldr	r3, [r7, #4]
 8017e7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017e7c:	2b00      	cmp	r3, #0
 8017e7e:	f000 80e6 	beq.w	801804e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8017e82:	4b2e      	ldr	r3, [pc, #184]	@ (8017f3c <tcp_receive+0x888>)
 8017e84:	68db      	ldr	r3, [r3, #12]
 8017e86:	899b      	ldrh	r3, [r3, #12]
 8017e88:	b29b      	uxth	r3, r3
 8017e8a:	4618      	mov	r0, r3
 8017e8c:	f7fa fd06 	bl	801289c <lwip_htons>
 8017e90:	4603      	mov	r3, r0
 8017e92:	b2db      	uxtb	r3, r3
 8017e94:	f003 0301 	and.w	r3, r3, #1
 8017e98:	2b00      	cmp	r3, #0
 8017e9a:	d010      	beq.n	8017ebe <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8017e9c:	e00a      	b.n	8017eb4 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8017e9e:	687b      	ldr	r3, [r7, #4]
 8017ea0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017ea2:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8017ea4:	687b      	ldr	r3, [r7, #4]
 8017ea6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017ea8:	681a      	ldr	r2, [r3, #0]
 8017eaa:	687b      	ldr	r3, [r7, #4]
 8017eac:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8017eae:	68f8      	ldr	r0, [r7, #12]
 8017eb0:	f7fd fcef 	bl	8015892 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8017eb4:	687b      	ldr	r3, [r7, #4]
 8017eb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017eb8:	2b00      	cmp	r3, #0
 8017eba:	d1f0      	bne.n	8017e9e <tcp_receive+0x7ea>
 8017ebc:	e0c7      	b.n	801804e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8017ebe:	687b      	ldr	r3, [r7, #4]
 8017ec0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8017ec4:	e051      	b.n	8017f6a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8017ec6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017ec8:	68db      	ldr	r3, [r3, #12]
 8017eca:	899b      	ldrh	r3, [r3, #12]
 8017ecc:	b29b      	uxth	r3, r3
 8017ece:	4618      	mov	r0, r3
 8017ed0:	f7fa fce4 	bl	801289c <lwip_htons>
 8017ed4:	4603      	mov	r3, r0
 8017ed6:	b2db      	uxtb	r3, r3
 8017ed8:	f003 0301 	and.w	r3, r3, #1
 8017edc:	2b00      	cmp	r3, #0
 8017ede:	d03c      	beq.n	8017f5a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8017ee0:	4b16      	ldr	r3, [pc, #88]	@ (8017f3c <tcp_receive+0x888>)
 8017ee2:	68db      	ldr	r3, [r3, #12]
 8017ee4:	899b      	ldrh	r3, [r3, #12]
 8017ee6:	b29b      	uxth	r3, r3
 8017ee8:	4618      	mov	r0, r3
 8017eea:	f7fa fcd7 	bl	801289c <lwip_htons>
 8017eee:	4603      	mov	r3, r0
 8017ef0:	b2db      	uxtb	r3, r3
 8017ef2:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8017ef6:	2b00      	cmp	r3, #0
 8017ef8:	d12f      	bne.n	8017f5a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8017efa:	4b10      	ldr	r3, [pc, #64]	@ (8017f3c <tcp_receive+0x888>)
 8017efc:	68db      	ldr	r3, [r3, #12]
 8017efe:	899b      	ldrh	r3, [r3, #12]
 8017f00:	b29c      	uxth	r4, r3
 8017f02:	2001      	movs	r0, #1
 8017f04:	f7fa fcca 	bl	801289c <lwip_htons>
 8017f08:	4603      	mov	r3, r0
 8017f0a:	461a      	mov	r2, r3
 8017f0c:	4b0b      	ldr	r3, [pc, #44]	@ (8017f3c <tcp_receive+0x888>)
 8017f0e:	68db      	ldr	r3, [r3, #12]
 8017f10:	4322      	orrs	r2, r4
 8017f12:	b292      	uxth	r2, r2
 8017f14:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8017f16:	4b09      	ldr	r3, [pc, #36]	@ (8017f3c <tcp_receive+0x888>)
 8017f18:	891c      	ldrh	r4, [r3, #8]
 8017f1a:	4b08      	ldr	r3, [pc, #32]	@ (8017f3c <tcp_receive+0x888>)
 8017f1c:	68db      	ldr	r3, [r3, #12]
 8017f1e:	899b      	ldrh	r3, [r3, #12]
 8017f20:	b29b      	uxth	r3, r3
 8017f22:	4618      	mov	r0, r3
 8017f24:	f7fa fcba 	bl	801289c <lwip_htons>
 8017f28:	4603      	mov	r3, r0
 8017f2a:	b2db      	uxtb	r3, r3
 8017f2c:	f003 0303 	and.w	r3, r3, #3
 8017f30:	2b00      	cmp	r3, #0
 8017f32:	d00d      	beq.n	8017f50 <tcp_receive+0x89c>
 8017f34:	2301      	movs	r3, #1
 8017f36:	e00c      	b.n	8017f52 <tcp_receive+0x89e>
 8017f38:	2000caf8 	.word	0x2000caf8
 8017f3c:	2000cad8 	.word	0x2000cad8
 8017f40:	2000cb02 	.word	0x2000cb02
 8017f44:	08022470 	.word	0x08022470
 8017f48:	08022818 	.word	0x08022818
 8017f4c:	080224bc 	.word	0x080224bc
 8017f50:	2300      	movs	r3, #0
 8017f52:	4423      	add	r3, r4
 8017f54:	b29a      	uxth	r2, r3
 8017f56:	4b98      	ldr	r3, [pc, #608]	@ (80181b8 <tcp_receive+0xb04>)
 8017f58:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8017f5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017f5c:	613b      	str	r3, [r7, #16]
              next = next->next;
 8017f5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017f60:	681b      	ldr	r3, [r3, #0]
 8017f62:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8017f64:	6938      	ldr	r0, [r7, #16]
 8017f66:	f7fd fc94 	bl	8015892 <tcp_seg_free>
            while (next &&
 8017f6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017f6c:	2b00      	cmp	r3, #0
 8017f6e:	d00e      	beq.n	8017f8e <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8017f70:	4b91      	ldr	r3, [pc, #580]	@ (80181b8 <tcp_receive+0xb04>)
 8017f72:	881b      	ldrh	r3, [r3, #0]
 8017f74:	461a      	mov	r2, r3
 8017f76:	4b91      	ldr	r3, [pc, #580]	@ (80181bc <tcp_receive+0xb08>)
 8017f78:	681b      	ldr	r3, [r3, #0]
 8017f7a:	441a      	add	r2, r3
 8017f7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017f7e:	68db      	ldr	r3, [r3, #12]
 8017f80:	685b      	ldr	r3, [r3, #4]
 8017f82:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8017f84:	8909      	ldrh	r1, [r1, #8]
 8017f86:	440b      	add	r3, r1
 8017f88:	1ad3      	subs	r3, r2, r3
            while (next &&
 8017f8a:	2b00      	cmp	r3, #0
 8017f8c:	da9b      	bge.n	8017ec6 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8017f8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017f90:	2b00      	cmp	r3, #0
 8017f92:	d059      	beq.n	8018048 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8017f94:	4b88      	ldr	r3, [pc, #544]	@ (80181b8 <tcp_receive+0xb04>)
 8017f96:	881b      	ldrh	r3, [r3, #0]
 8017f98:	461a      	mov	r2, r3
 8017f9a:	4b88      	ldr	r3, [pc, #544]	@ (80181bc <tcp_receive+0xb08>)
 8017f9c:	681b      	ldr	r3, [r3, #0]
 8017f9e:	441a      	add	r2, r3
 8017fa0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017fa2:	68db      	ldr	r3, [r3, #12]
 8017fa4:	685b      	ldr	r3, [r3, #4]
 8017fa6:	1ad3      	subs	r3, r2, r3
            if (next &&
 8017fa8:	2b00      	cmp	r3, #0
 8017faa:	dd4d      	ble.n	8018048 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8017fac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017fae:	68db      	ldr	r3, [r3, #12]
 8017fb0:	685b      	ldr	r3, [r3, #4]
 8017fb2:	b29a      	uxth	r2, r3
 8017fb4:	4b81      	ldr	r3, [pc, #516]	@ (80181bc <tcp_receive+0xb08>)
 8017fb6:	681b      	ldr	r3, [r3, #0]
 8017fb8:	b29b      	uxth	r3, r3
 8017fba:	1ad3      	subs	r3, r2, r3
 8017fbc:	b29a      	uxth	r2, r3
 8017fbe:	4b80      	ldr	r3, [pc, #512]	@ (80181c0 <tcp_receive+0xb0c>)
 8017fc0:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8017fc2:	4b7f      	ldr	r3, [pc, #508]	@ (80181c0 <tcp_receive+0xb0c>)
 8017fc4:	68db      	ldr	r3, [r3, #12]
 8017fc6:	899b      	ldrh	r3, [r3, #12]
 8017fc8:	b29b      	uxth	r3, r3
 8017fca:	4618      	mov	r0, r3
 8017fcc:	f7fa fc66 	bl	801289c <lwip_htons>
 8017fd0:	4603      	mov	r3, r0
 8017fd2:	b2db      	uxtb	r3, r3
 8017fd4:	f003 0302 	and.w	r3, r3, #2
 8017fd8:	2b00      	cmp	r3, #0
 8017fda:	d005      	beq.n	8017fe8 <tcp_receive+0x934>
                inseg.len -= 1;
 8017fdc:	4b78      	ldr	r3, [pc, #480]	@ (80181c0 <tcp_receive+0xb0c>)
 8017fde:	891b      	ldrh	r3, [r3, #8]
 8017fe0:	3b01      	subs	r3, #1
 8017fe2:	b29a      	uxth	r2, r3
 8017fe4:	4b76      	ldr	r3, [pc, #472]	@ (80181c0 <tcp_receive+0xb0c>)
 8017fe6:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8017fe8:	4b75      	ldr	r3, [pc, #468]	@ (80181c0 <tcp_receive+0xb0c>)
 8017fea:	685b      	ldr	r3, [r3, #4]
 8017fec:	4a74      	ldr	r2, [pc, #464]	@ (80181c0 <tcp_receive+0xb0c>)
 8017fee:	8912      	ldrh	r2, [r2, #8]
 8017ff0:	4611      	mov	r1, r2
 8017ff2:	4618      	mov	r0, r3
 8017ff4:	f7fb fe8c 	bl	8013d10 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8017ff8:	4b71      	ldr	r3, [pc, #452]	@ (80181c0 <tcp_receive+0xb0c>)
 8017ffa:	891c      	ldrh	r4, [r3, #8]
 8017ffc:	4b70      	ldr	r3, [pc, #448]	@ (80181c0 <tcp_receive+0xb0c>)
 8017ffe:	68db      	ldr	r3, [r3, #12]
 8018000:	899b      	ldrh	r3, [r3, #12]
 8018002:	b29b      	uxth	r3, r3
 8018004:	4618      	mov	r0, r3
 8018006:	f7fa fc49 	bl	801289c <lwip_htons>
 801800a:	4603      	mov	r3, r0
 801800c:	b2db      	uxtb	r3, r3
 801800e:	f003 0303 	and.w	r3, r3, #3
 8018012:	2b00      	cmp	r3, #0
 8018014:	d001      	beq.n	801801a <tcp_receive+0x966>
 8018016:	2301      	movs	r3, #1
 8018018:	e000      	b.n	801801c <tcp_receive+0x968>
 801801a:	2300      	movs	r3, #0
 801801c:	4423      	add	r3, r4
 801801e:	b29a      	uxth	r2, r3
 8018020:	4b65      	ldr	r3, [pc, #404]	@ (80181b8 <tcp_receive+0xb04>)
 8018022:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8018024:	4b64      	ldr	r3, [pc, #400]	@ (80181b8 <tcp_receive+0xb04>)
 8018026:	881b      	ldrh	r3, [r3, #0]
 8018028:	461a      	mov	r2, r3
 801802a:	4b64      	ldr	r3, [pc, #400]	@ (80181bc <tcp_receive+0xb08>)
 801802c:	681b      	ldr	r3, [r3, #0]
 801802e:	441a      	add	r2, r3
 8018030:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018032:	68db      	ldr	r3, [r3, #12]
 8018034:	685b      	ldr	r3, [r3, #4]
 8018036:	429a      	cmp	r2, r3
 8018038:	d006      	beq.n	8018048 <tcp_receive+0x994>
 801803a:	4b62      	ldr	r3, [pc, #392]	@ (80181c4 <tcp_receive+0xb10>)
 801803c:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8018040:	4961      	ldr	r1, [pc, #388]	@ (80181c8 <tcp_receive+0xb14>)
 8018042:	4862      	ldr	r0, [pc, #392]	@ (80181cc <tcp_receive+0xb18>)
 8018044:	f006 f8a2 	bl	801e18c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8018048:	687b      	ldr	r3, [r7, #4]
 801804a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801804c:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801804e:	4b5a      	ldr	r3, [pc, #360]	@ (80181b8 <tcp_receive+0xb04>)
 8018050:	881b      	ldrh	r3, [r3, #0]
 8018052:	461a      	mov	r2, r3
 8018054:	4b59      	ldr	r3, [pc, #356]	@ (80181bc <tcp_receive+0xb08>)
 8018056:	681b      	ldr	r3, [r3, #0]
 8018058:	441a      	add	r2, r3
 801805a:	687b      	ldr	r3, [r7, #4]
 801805c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801805e:	687b      	ldr	r3, [r7, #4]
 8018060:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8018062:	4b55      	ldr	r3, [pc, #340]	@ (80181b8 <tcp_receive+0xb04>)
 8018064:	881b      	ldrh	r3, [r3, #0]
 8018066:	429a      	cmp	r2, r3
 8018068:	d206      	bcs.n	8018078 <tcp_receive+0x9c4>
 801806a:	4b56      	ldr	r3, [pc, #344]	@ (80181c4 <tcp_receive+0xb10>)
 801806c:	f240 6207 	movw	r2, #1543	@ 0x607
 8018070:	4957      	ldr	r1, [pc, #348]	@ (80181d0 <tcp_receive+0xb1c>)
 8018072:	4856      	ldr	r0, [pc, #344]	@ (80181cc <tcp_receive+0xb18>)
 8018074:	f006 f88a 	bl	801e18c <iprintf>
        pcb->rcv_wnd -= tcplen;
 8018078:	687b      	ldr	r3, [r7, #4]
 801807a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801807c:	4b4e      	ldr	r3, [pc, #312]	@ (80181b8 <tcp_receive+0xb04>)
 801807e:	881b      	ldrh	r3, [r3, #0]
 8018080:	1ad3      	subs	r3, r2, r3
 8018082:	b29a      	uxth	r2, r3
 8018084:	687b      	ldr	r3, [r7, #4]
 8018086:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8018088:	6878      	ldr	r0, [r7, #4]
 801808a:	f7fc fedb 	bl	8014e44 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801808e:	4b4c      	ldr	r3, [pc, #304]	@ (80181c0 <tcp_receive+0xb0c>)
 8018090:	685b      	ldr	r3, [r3, #4]
 8018092:	891b      	ldrh	r3, [r3, #8]
 8018094:	2b00      	cmp	r3, #0
 8018096:	d006      	beq.n	80180a6 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8018098:	4b49      	ldr	r3, [pc, #292]	@ (80181c0 <tcp_receive+0xb0c>)
 801809a:	685b      	ldr	r3, [r3, #4]
 801809c:	4a4d      	ldr	r2, [pc, #308]	@ (80181d4 <tcp_receive+0xb20>)
 801809e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80180a0:	4b47      	ldr	r3, [pc, #284]	@ (80181c0 <tcp_receive+0xb0c>)
 80180a2:	2200      	movs	r2, #0
 80180a4:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80180a6:	4b46      	ldr	r3, [pc, #280]	@ (80181c0 <tcp_receive+0xb0c>)
 80180a8:	68db      	ldr	r3, [r3, #12]
 80180aa:	899b      	ldrh	r3, [r3, #12]
 80180ac:	b29b      	uxth	r3, r3
 80180ae:	4618      	mov	r0, r3
 80180b0:	f7fa fbf4 	bl	801289c <lwip_htons>
 80180b4:	4603      	mov	r3, r0
 80180b6:	b2db      	uxtb	r3, r3
 80180b8:	f003 0301 	and.w	r3, r3, #1
 80180bc:	2b00      	cmp	r3, #0
 80180be:	f000 80b8 	beq.w	8018232 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80180c2:	4b45      	ldr	r3, [pc, #276]	@ (80181d8 <tcp_receive+0xb24>)
 80180c4:	781b      	ldrb	r3, [r3, #0]
 80180c6:	f043 0320 	orr.w	r3, r3, #32
 80180ca:	b2da      	uxtb	r2, r3
 80180cc:	4b42      	ldr	r3, [pc, #264]	@ (80181d8 <tcp_receive+0xb24>)
 80180ce:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80180d0:	e0af      	b.n	8018232 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80180d2:	687b      	ldr	r3, [r7, #4]
 80180d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80180d6:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80180d8:	687b      	ldr	r3, [r7, #4]
 80180da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80180dc:	68db      	ldr	r3, [r3, #12]
 80180de:	685b      	ldr	r3, [r3, #4]
 80180e0:	4a36      	ldr	r2, [pc, #216]	@ (80181bc <tcp_receive+0xb08>)
 80180e2:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80180e4:	68bb      	ldr	r3, [r7, #8]
 80180e6:	891b      	ldrh	r3, [r3, #8]
 80180e8:	461c      	mov	r4, r3
 80180ea:	68bb      	ldr	r3, [r7, #8]
 80180ec:	68db      	ldr	r3, [r3, #12]
 80180ee:	899b      	ldrh	r3, [r3, #12]
 80180f0:	b29b      	uxth	r3, r3
 80180f2:	4618      	mov	r0, r3
 80180f4:	f7fa fbd2 	bl	801289c <lwip_htons>
 80180f8:	4603      	mov	r3, r0
 80180fa:	b2db      	uxtb	r3, r3
 80180fc:	f003 0303 	and.w	r3, r3, #3
 8018100:	2b00      	cmp	r3, #0
 8018102:	d001      	beq.n	8018108 <tcp_receive+0xa54>
 8018104:	2301      	movs	r3, #1
 8018106:	e000      	b.n	801810a <tcp_receive+0xa56>
 8018108:	2300      	movs	r3, #0
 801810a:	191a      	adds	r2, r3, r4
 801810c:	687b      	ldr	r3, [r7, #4]
 801810e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018110:	441a      	add	r2, r3
 8018112:	687b      	ldr	r3, [r7, #4]
 8018114:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8018116:	687b      	ldr	r3, [r7, #4]
 8018118:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801811a:	461c      	mov	r4, r3
 801811c:	68bb      	ldr	r3, [r7, #8]
 801811e:	891b      	ldrh	r3, [r3, #8]
 8018120:	461d      	mov	r5, r3
 8018122:	68bb      	ldr	r3, [r7, #8]
 8018124:	68db      	ldr	r3, [r3, #12]
 8018126:	899b      	ldrh	r3, [r3, #12]
 8018128:	b29b      	uxth	r3, r3
 801812a:	4618      	mov	r0, r3
 801812c:	f7fa fbb6 	bl	801289c <lwip_htons>
 8018130:	4603      	mov	r3, r0
 8018132:	b2db      	uxtb	r3, r3
 8018134:	f003 0303 	and.w	r3, r3, #3
 8018138:	2b00      	cmp	r3, #0
 801813a:	d001      	beq.n	8018140 <tcp_receive+0xa8c>
 801813c:	2301      	movs	r3, #1
 801813e:	e000      	b.n	8018142 <tcp_receive+0xa8e>
 8018140:	2300      	movs	r3, #0
 8018142:	442b      	add	r3, r5
 8018144:	429c      	cmp	r4, r3
 8018146:	d206      	bcs.n	8018156 <tcp_receive+0xaa2>
 8018148:	4b1e      	ldr	r3, [pc, #120]	@ (80181c4 <tcp_receive+0xb10>)
 801814a:	f240 622b 	movw	r2, #1579	@ 0x62b
 801814e:	4923      	ldr	r1, [pc, #140]	@ (80181dc <tcp_receive+0xb28>)
 8018150:	481e      	ldr	r0, [pc, #120]	@ (80181cc <tcp_receive+0xb18>)
 8018152:	f006 f81b 	bl	801e18c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8018156:	68bb      	ldr	r3, [r7, #8]
 8018158:	891b      	ldrh	r3, [r3, #8]
 801815a:	461c      	mov	r4, r3
 801815c:	68bb      	ldr	r3, [r7, #8]
 801815e:	68db      	ldr	r3, [r3, #12]
 8018160:	899b      	ldrh	r3, [r3, #12]
 8018162:	b29b      	uxth	r3, r3
 8018164:	4618      	mov	r0, r3
 8018166:	f7fa fb99 	bl	801289c <lwip_htons>
 801816a:	4603      	mov	r3, r0
 801816c:	b2db      	uxtb	r3, r3
 801816e:	f003 0303 	and.w	r3, r3, #3
 8018172:	2b00      	cmp	r3, #0
 8018174:	d001      	beq.n	801817a <tcp_receive+0xac6>
 8018176:	2301      	movs	r3, #1
 8018178:	e000      	b.n	801817c <tcp_receive+0xac8>
 801817a:	2300      	movs	r3, #0
 801817c:	1919      	adds	r1, r3, r4
 801817e:	687b      	ldr	r3, [r7, #4]
 8018180:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8018182:	b28b      	uxth	r3, r1
 8018184:	1ad3      	subs	r3, r2, r3
 8018186:	b29a      	uxth	r2, r3
 8018188:	687b      	ldr	r3, [r7, #4]
 801818a:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801818c:	6878      	ldr	r0, [r7, #4]
 801818e:	f7fc fe59 	bl	8014e44 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8018192:	68bb      	ldr	r3, [r7, #8]
 8018194:	685b      	ldr	r3, [r3, #4]
 8018196:	891b      	ldrh	r3, [r3, #8]
 8018198:	2b00      	cmp	r3, #0
 801819a:	d028      	beq.n	80181ee <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801819c:	4b0d      	ldr	r3, [pc, #52]	@ (80181d4 <tcp_receive+0xb20>)
 801819e:	681b      	ldr	r3, [r3, #0]
 80181a0:	2b00      	cmp	r3, #0
 80181a2:	d01d      	beq.n	80181e0 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 80181a4:	4b0b      	ldr	r3, [pc, #44]	@ (80181d4 <tcp_receive+0xb20>)
 80181a6:	681a      	ldr	r2, [r3, #0]
 80181a8:	68bb      	ldr	r3, [r7, #8]
 80181aa:	685b      	ldr	r3, [r3, #4]
 80181ac:	4619      	mov	r1, r3
 80181ae:	4610      	mov	r0, r2
 80181b0:	f7fc f802 	bl	80141b8 <pbuf_cat>
 80181b4:	e018      	b.n	80181e8 <tcp_receive+0xb34>
 80181b6:	bf00      	nop
 80181b8:	2000cb02 	.word	0x2000cb02
 80181bc:	2000caf8 	.word	0x2000caf8
 80181c0:	2000cad8 	.word	0x2000cad8
 80181c4:	08022470 	.word	0x08022470
 80181c8:	08022850 	.word	0x08022850
 80181cc:	080224bc 	.word	0x080224bc
 80181d0:	0802288c 	.word	0x0802288c
 80181d4:	2000cb08 	.word	0x2000cb08
 80181d8:	2000cb05 	.word	0x2000cb05
 80181dc:	080228ac 	.word	0x080228ac
            } else {
              recv_data = cseg->p;
 80181e0:	68bb      	ldr	r3, [r7, #8]
 80181e2:	685b      	ldr	r3, [r3, #4]
 80181e4:	4a70      	ldr	r2, [pc, #448]	@ (80183a8 <tcp_receive+0xcf4>)
 80181e6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80181e8:	68bb      	ldr	r3, [r7, #8]
 80181ea:	2200      	movs	r2, #0
 80181ec:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80181ee:	68bb      	ldr	r3, [r7, #8]
 80181f0:	68db      	ldr	r3, [r3, #12]
 80181f2:	899b      	ldrh	r3, [r3, #12]
 80181f4:	b29b      	uxth	r3, r3
 80181f6:	4618      	mov	r0, r3
 80181f8:	f7fa fb50 	bl	801289c <lwip_htons>
 80181fc:	4603      	mov	r3, r0
 80181fe:	b2db      	uxtb	r3, r3
 8018200:	f003 0301 	and.w	r3, r3, #1
 8018204:	2b00      	cmp	r3, #0
 8018206:	d00d      	beq.n	8018224 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8018208:	4b68      	ldr	r3, [pc, #416]	@ (80183ac <tcp_receive+0xcf8>)
 801820a:	781b      	ldrb	r3, [r3, #0]
 801820c:	f043 0320 	orr.w	r3, r3, #32
 8018210:	b2da      	uxtb	r2, r3
 8018212:	4b66      	ldr	r3, [pc, #408]	@ (80183ac <tcp_receive+0xcf8>)
 8018214:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8018216:	687b      	ldr	r3, [r7, #4]
 8018218:	7d1b      	ldrb	r3, [r3, #20]
 801821a:	2b04      	cmp	r3, #4
 801821c:	d102      	bne.n	8018224 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 801821e:	687b      	ldr	r3, [r7, #4]
 8018220:	2207      	movs	r2, #7
 8018222:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8018224:	68bb      	ldr	r3, [r7, #8]
 8018226:	681a      	ldr	r2, [r3, #0]
 8018228:	687b      	ldr	r3, [r7, #4]
 801822a:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 801822c:	68b8      	ldr	r0, [r7, #8]
 801822e:	f7fd fb30 	bl	8015892 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8018232:	687b      	ldr	r3, [r7, #4]
 8018234:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018236:	2b00      	cmp	r3, #0
 8018238:	d008      	beq.n	801824c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801823a:	687b      	ldr	r3, [r7, #4]
 801823c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801823e:	68db      	ldr	r3, [r3, #12]
 8018240:	685a      	ldr	r2, [r3, #4]
 8018242:	687b      	ldr	r3, [r7, #4]
 8018244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 8018246:	429a      	cmp	r2, r3
 8018248:	f43f af43 	beq.w	80180d2 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801824c:	687b      	ldr	r3, [r7, #4]
 801824e:	8b5b      	ldrh	r3, [r3, #26]
 8018250:	f003 0301 	and.w	r3, r3, #1
 8018254:	2b00      	cmp	r3, #0
 8018256:	d00e      	beq.n	8018276 <tcp_receive+0xbc2>
 8018258:	687b      	ldr	r3, [r7, #4]
 801825a:	8b5b      	ldrh	r3, [r3, #26]
 801825c:	f023 0301 	bic.w	r3, r3, #1
 8018260:	b29a      	uxth	r2, r3
 8018262:	687b      	ldr	r3, [r7, #4]
 8018264:	835a      	strh	r2, [r3, #26]
 8018266:	687b      	ldr	r3, [r7, #4]
 8018268:	8b5b      	ldrh	r3, [r3, #26]
 801826a:	f043 0302 	orr.w	r3, r3, #2
 801826e:	b29a      	uxth	r2, r3
 8018270:	687b      	ldr	r3, [r7, #4]
 8018272:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8018274:	e187      	b.n	8018586 <tcp_receive+0xed2>
        tcp_ack(pcb);
 8018276:	687b      	ldr	r3, [r7, #4]
 8018278:	8b5b      	ldrh	r3, [r3, #26]
 801827a:	f043 0301 	orr.w	r3, r3, #1
 801827e:	b29a      	uxth	r2, r3
 8018280:	687b      	ldr	r3, [r7, #4]
 8018282:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8018284:	e17f      	b.n	8018586 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8018286:	687b      	ldr	r3, [r7, #4]
 8018288:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801828a:	2b00      	cmp	r3, #0
 801828c:	d106      	bne.n	801829c <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801828e:	4848      	ldr	r0, [pc, #288]	@ (80183b0 <tcp_receive+0xcfc>)
 8018290:	f7fd fb36 	bl	8015900 <tcp_seg_copy>
 8018294:	4602      	mov	r2, r0
 8018296:	687b      	ldr	r3, [r7, #4]
 8018298:	675a      	str	r2, [r3, #116]	@ 0x74
 801829a:	e16c      	b.n	8018576 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801829c:	2300      	movs	r3, #0
 801829e:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80182a0:	687b      	ldr	r3, [r7, #4]
 80182a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80182a4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80182a6:	e156      	b.n	8018556 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 80182a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80182aa:	68db      	ldr	r3, [r3, #12]
 80182ac:	685a      	ldr	r2, [r3, #4]
 80182ae:	4b41      	ldr	r3, [pc, #260]	@ (80183b4 <tcp_receive+0xd00>)
 80182b0:	681b      	ldr	r3, [r3, #0]
 80182b2:	429a      	cmp	r2, r3
 80182b4:	d11d      	bne.n	80182f2 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80182b6:	4b3e      	ldr	r3, [pc, #248]	@ (80183b0 <tcp_receive+0xcfc>)
 80182b8:	891a      	ldrh	r2, [r3, #8]
 80182ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80182bc:	891b      	ldrh	r3, [r3, #8]
 80182be:	429a      	cmp	r2, r3
 80182c0:	f240 814e 	bls.w	8018560 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80182c4:	483a      	ldr	r0, [pc, #232]	@ (80183b0 <tcp_receive+0xcfc>)
 80182c6:	f7fd fb1b 	bl	8015900 <tcp_seg_copy>
 80182ca:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80182cc:	697b      	ldr	r3, [r7, #20]
 80182ce:	2b00      	cmp	r3, #0
 80182d0:	f000 8148 	beq.w	8018564 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 80182d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80182d6:	2b00      	cmp	r3, #0
 80182d8:	d003      	beq.n	80182e2 <tcp_receive+0xc2e>
                    prev->next = cseg;
 80182da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80182dc:	697a      	ldr	r2, [r7, #20]
 80182de:	601a      	str	r2, [r3, #0]
 80182e0:	e002      	b.n	80182e8 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 80182e2:	687b      	ldr	r3, [r7, #4]
 80182e4:	697a      	ldr	r2, [r7, #20]
 80182e6:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80182e8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80182ea:	6978      	ldr	r0, [r7, #20]
 80182ec:	f7ff f8de 	bl	80174ac <tcp_oos_insert_segment>
                }
                break;
 80182f0:	e138      	b.n	8018564 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80182f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80182f4:	2b00      	cmp	r3, #0
 80182f6:	d117      	bne.n	8018328 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80182f8:	4b2e      	ldr	r3, [pc, #184]	@ (80183b4 <tcp_receive+0xd00>)
 80182fa:	681a      	ldr	r2, [r3, #0]
 80182fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80182fe:	68db      	ldr	r3, [r3, #12]
 8018300:	685b      	ldr	r3, [r3, #4]
 8018302:	1ad3      	subs	r3, r2, r3
 8018304:	2b00      	cmp	r3, #0
 8018306:	da57      	bge.n	80183b8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8018308:	4829      	ldr	r0, [pc, #164]	@ (80183b0 <tcp_receive+0xcfc>)
 801830a:	f7fd faf9 	bl	8015900 <tcp_seg_copy>
 801830e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8018310:	69bb      	ldr	r3, [r7, #24]
 8018312:	2b00      	cmp	r3, #0
 8018314:	f000 8128 	beq.w	8018568 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 8018318:	687b      	ldr	r3, [r7, #4]
 801831a:	69ba      	ldr	r2, [r7, #24]
 801831c:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 801831e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8018320:	69b8      	ldr	r0, [r7, #24]
 8018322:	f7ff f8c3 	bl	80174ac <tcp_oos_insert_segment>
                  }
                  break;
 8018326:	e11f      	b.n	8018568 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8018328:	4b22      	ldr	r3, [pc, #136]	@ (80183b4 <tcp_receive+0xd00>)
 801832a:	681a      	ldr	r2, [r3, #0]
 801832c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801832e:	68db      	ldr	r3, [r3, #12]
 8018330:	685b      	ldr	r3, [r3, #4]
 8018332:	1ad3      	subs	r3, r2, r3
 8018334:	3b01      	subs	r3, #1
 8018336:	2b00      	cmp	r3, #0
 8018338:	db3e      	blt.n	80183b8 <tcp_receive+0xd04>
 801833a:	4b1e      	ldr	r3, [pc, #120]	@ (80183b4 <tcp_receive+0xd00>)
 801833c:	681a      	ldr	r2, [r3, #0]
 801833e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018340:	68db      	ldr	r3, [r3, #12]
 8018342:	685b      	ldr	r3, [r3, #4]
 8018344:	1ad3      	subs	r3, r2, r3
 8018346:	3301      	adds	r3, #1
 8018348:	2b00      	cmp	r3, #0
 801834a:	dc35      	bgt.n	80183b8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801834c:	4818      	ldr	r0, [pc, #96]	@ (80183b0 <tcp_receive+0xcfc>)
 801834e:	f7fd fad7 	bl	8015900 <tcp_seg_copy>
 8018352:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8018354:	69fb      	ldr	r3, [r7, #28]
 8018356:	2b00      	cmp	r3, #0
 8018358:	f000 8108 	beq.w	801856c <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801835c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801835e:	68db      	ldr	r3, [r3, #12]
 8018360:	685b      	ldr	r3, [r3, #4]
 8018362:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8018364:	8912      	ldrh	r2, [r2, #8]
 8018366:	441a      	add	r2, r3
 8018368:	4b12      	ldr	r3, [pc, #72]	@ (80183b4 <tcp_receive+0xd00>)
 801836a:	681b      	ldr	r3, [r3, #0]
 801836c:	1ad3      	subs	r3, r2, r3
 801836e:	2b00      	cmp	r3, #0
 8018370:	dd12      	ble.n	8018398 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8018372:	4b10      	ldr	r3, [pc, #64]	@ (80183b4 <tcp_receive+0xd00>)
 8018374:	681b      	ldr	r3, [r3, #0]
 8018376:	b29a      	uxth	r2, r3
 8018378:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801837a:	68db      	ldr	r3, [r3, #12]
 801837c:	685b      	ldr	r3, [r3, #4]
 801837e:	b29b      	uxth	r3, r3
 8018380:	1ad3      	subs	r3, r2, r3
 8018382:	b29a      	uxth	r2, r3
 8018384:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018386:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8018388:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801838a:	685a      	ldr	r2, [r3, #4]
 801838c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801838e:	891b      	ldrh	r3, [r3, #8]
 8018390:	4619      	mov	r1, r3
 8018392:	4610      	mov	r0, r2
 8018394:	f7fb fcbc 	bl	8013d10 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8018398:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801839a:	69fa      	ldr	r2, [r7, #28]
 801839c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801839e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80183a0:	69f8      	ldr	r0, [r7, #28]
 80183a2:	f7ff f883 	bl	80174ac <tcp_oos_insert_segment>
                  }
                  break;
 80183a6:	e0e1      	b.n	801856c <tcp_receive+0xeb8>
 80183a8:	2000cb08 	.word	0x2000cb08
 80183ac:	2000cb05 	.word	0x2000cb05
 80183b0:	2000cad8 	.word	0x2000cad8
 80183b4:	2000caf8 	.word	0x2000caf8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80183b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80183ba:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80183bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80183be:	681b      	ldr	r3, [r3, #0]
 80183c0:	2b00      	cmp	r3, #0
 80183c2:	f040 80c5 	bne.w	8018550 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80183c6:	4b7f      	ldr	r3, [pc, #508]	@ (80185c4 <tcp_receive+0xf10>)
 80183c8:	681a      	ldr	r2, [r3, #0]
 80183ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80183cc:	68db      	ldr	r3, [r3, #12]
 80183ce:	685b      	ldr	r3, [r3, #4]
 80183d0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80183d2:	2b00      	cmp	r3, #0
 80183d4:	f340 80bc 	ble.w	8018550 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80183d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80183da:	68db      	ldr	r3, [r3, #12]
 80183dc:	899b      	ldrh	r3, [r3, #12]
 80183de:	b29b      	uxth	r3, r3
 80183e0:	4618      	mov	r0, r3
 80183e2:	f7fa fa5b 	bl	801289c <lwip_htons>
 80183e6:	4603      	mov	r3, r0
 80183e8:	b2db      	uxtb	r3, r3
 80183ea:	f003 0301 	and.w	r3, r3, #1
 80183ee:	2b00      	cmp	r3, #0
 80183f0:	f040 80be 	bne.w	8018570 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80183f4:	4874      	ldr	r0, [pc, #464]	@ (80185c8 <tcp_receive+0xf14>)
 80183f6:	f7fd fa83 	bl	8015900 <tcp_seg_copy>
 80183fa:	4602      	mov	r2, r0
 80183fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80183fe:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8018400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018402:	681b      	ldr	r3, [r3, #0]
 8018404:	2b00      	cmp	r3, #0
 8018406:	f000 80b5 	beq.w	8018574 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801840a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801840c:	68db      	ldr	r3, [r3, #12]
 801840e:	685b      	ldr	r3, [r3, #4]
 8018410:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8018412:	8912      	ldrh	r2, [r2, #8]
 8018414:	441a      	add	r2, r3
 8018416:	4b6b      	ldr	r3, [pc, #428]	@ (80185c4 <tcp_receive+0xf10>)
 8018418:	681b      	ldr	r3, [r3, #0]
 801841a:	1ad3      	subs	r3, r2, r3
 801841c:	2b00      	cmp	r3, #0
 801841e:	dd12      	ble.n	8018446 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8018420:	4b68      	ldr	r3, [pc, #416]	@ (80185c4 <tcp_receive+0xf10>)
 8018422:	681b      	ldr	r3, [r3, #0]
 8018424:	b29a      	uxth	r2, r3
 8018426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018428:	68db      	ldr	r3, [r3, #12]
 801842a:	685b      	ldr	r3, [r3, #4]
 801842c:	b29b      	uxth	r3, r3
 801842e:	1ad3      	subs	r3, r2, r3
 8018430:	b29a      	uxth	r2, r3
 8018432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018434:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8018436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018438:	685a      	ldr	r2, [r3, #4]
 801843a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801843c:	891b      	ldrh	r3, [r3, #8]
 801843e:	4619      	mov	r1, r3
 8018440:	4610      	mov	r0, r2
 8018442:	f7fb fc65 	bl	8013d10 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8018446:	4b61      	ldr	r3, [pc, #388]	@ (80185cc <tcp_receive+0xf18>)
 8018448:	881b      	ldrh	r3, [r3, #0]
 801844a:	461a      	mov	r2, r3
 801844c:	4b5d      	ldr	r3, [pc, #372]	@ (80185c4 <tcp_receive+0xf10>)
 801844e:	681b      	ldr	r3, [r3, #0]
 8018450:	441a      	add	r2, r3
 8018452:	687b      	ldr	r3, [r7, #4]
 8018454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018456:	6879      	ldr	r1, [r7, #4]
 8018458:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801845a:	440b      	add	r3, r1
 801845c:	1ad3      	subs	r3, r2, r3
 801845e:	2b00      	cmp	r3, #0
 8018460:	f340 8088 	ble.w	8018574 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8018464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018466:	681b      	ldr	r3, [r3, #0]
 8018468:	68db      	ldr	r3, [r3, #12]
 801846a:	899b      	ldrh	r3, [r3, #12]
 801846c:	b29b      	uxth	r3, r3
 801846e:	4618      	mov	r0, r3
 8018470:	f7fa fa14 	bl	801289c <lwip_htons>
 8018474:	4603      	mov	r3, r0
 8018476:	b2db      	uxtb	r3, r3
 8018478:	f003 0301 	and.w	r3, r3, #1
 801847c:	2b00      	cmp	r3, #0
 801847e:	d021      	beq.n	80184c4 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8018480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018482:	681b      	ldr	r3, [r3, #0]
 8018484:	68db      	ldr	r3, [r3, #12]
 8018486:	899b      	ldrh	r3, [r3, #12]
 8018488:	b29b      	uxth	r3, r3
 801848a:	b21b      	sxth	r3, r3
 801848c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8018490:	b21c      	sxth	r4, r3
 8018492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018494:	681b      	ldr	r3, [r3, #0]
 8018496:	68db      	ldr	r3, [r3, #12]
 8018498:	899b      	ldrh	r3, [r3, #12]
 801849a:	b29b      	uxth	r3, r3
 801849c:	4618      	mov	r0, r3
 801849e:	f7fa f9fd 	bl	801289c <lwip_htons>
 80184a2:	4603      	mov	r3, r0
 80184a4:	b2db      	uxtb	r3, r3
 80184a6:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80184aa:	b29b      	uxth	r3, r3
 80184ac:	4618      	mov	r0, r3
 80184ae:	f7fa f9f5 	bl	801289c <lwip_htons>
 80184b2:	4603      	mov	r3, r0
 80184b4:	b21b      	sxth	r3, r3
 80184b6:	4323      	orrs	r3, r4
 80184b8:	b21a      	sxth	r2, r3
 80184ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80184bc:	681b      	ldr	r3, [r3, #0]
 80184be:	68db      	ldr	r3, [r3, #12]
 80184c0:	b292      	uxth	r2, r2
 80184c2:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80184c4:	687b      	ldr	r3, [r7, #4]
 80184c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80184c8:	b29a      	uxth	r2, r3
 80184ca:	687b      	ldr	r3, [r7, #4]
 80184cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80184ce:	4413      	add	r3, r2
 80184d0:	b299      	uxth	r1, r3
 80184d2:	4b3c      	ldr	r3, [pc, #240]	@ (80185c4 <tcp_receive+0xf10>)
 80184d4:	681b      	ldr	r3, [r3, #0]
 80184d6:	b29a      	uxth	r2, r3
 80184d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80184da:	681b      	ldr	r3, [r3, #0]
 80184dc:	1a8a      	subs	r2, r1, r2
 80184de:	b292      	uxth	r2, r2
 80184e0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80184e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80184e4:	681b      	ldr	r3, [r3, #0]
 80184e6:	685a      	ldr	r2, [r3, #4]
 80184e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80184ea:	681b      	ldr	r3, [r3, #0]
 80184ec:	891b      	ldrh	r3, [r3, #8]
 80184ee:	4619      	mov	r1, r3
 80184f0:	4610      	mov	r0, r2
 80184f2:	f7fb fc0d 	bl	8013d10 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80184f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80184f8:	681b      	ldr	r3, [r3, #0]
 80184fa:	891c      	ldrh	r4, [r3, #8]
 80184fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80184fe:	681b      	ldr	r3, [r3, #0]
 8018500:	68db      	ldr	r3, [r3, #12]
 8018502:	899b      	ldrh	r3, [r3, #12]
 8018504:	b29b      	uxth	r3, r3
 8018506:	4618      	mov	r0, r3
 8018508:	f7fa f9c8 	bl	801289c <lwip_htons>
 801850c:	4603      	mov	r3, r0
 801850e:	b2db      	uxtb	r3, r3
 8018510:	f003 0303 	and.w	r3, r3, #3
 8018514:	2b00      	cmp	r3, #0
 8018516:	d001      	beq.n	801851c <tcp_receive+0xe68>
 8018518:	2301      	movs	r3, #1
 801851a:	e000      	b.n	801851e <tcp_receive+0xe6a>
 801851c:	2300      	movs	r3, #0
 801851e:	4423      	add	r3, r4
 8018520:	b29a      	uxth	r2, r3
 8018522:	4b2a      	ldr	r3, [pc, #168]	@ (80185cc <tcp_receive+0xf18>)
 8018524:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8018526:	4b29      	ldr	r3, [pc, #164]	@ (80185cc <tcp_receive+0xf18>)
 8018528:	881b      	ldrh	r3, [r3, #0]
 801852a:	461a      	mov	r2, r3
 801852c:	4b25      	ldr	r3, [pc, #148]	@ (80185c4 <tcp_receive+0xf10>)
 801852e:	681b      	ldr	r3, [r3, #0]
 8018530:	441a      	add	r2, r3
 8018532:	687b      	ldr	r3, [r7, #4]
 8018534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018536:	6879      	ldr	r1, [r7, #4]
 8018538:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801853a:	440b      	add	r3, r1
 801853c:	429a      	cmp	r2, r3
 801853e:	d019      	beq.n	8018574 <tcp_receive+0xec0>
 8018540:	4b23      	ldr	r3, [pc, #140]	@ (80185d0 <tcp_receive+0xf1c>)
 8018542:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 8018546:	4923      	ldr	r1, [pc, #140]	@ (80185d4 <tcp_receive+0xf20>)
 8018548:	4823      	ldr	r0, [pc, #140]	@ (80185d8 <tcp_receive+0xf24>)
 801854a:	f005 fe1f 	bl	801e18c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801854e:	e011      	b.n	8018574 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8018550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018552:	681b      	ldr	r3, [r3, #0]
 8018554:	63bb      	str	r3, [r7, #56]	@ 0x38
 8018556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018558:	2b00      	cmp	r3, #0
 801855a:	f47f aea5 	bne.w	80182a8 <tcp_receive+0xbf4>
 801855e:	e00a      	b.n	8018576 <tcp_receive+0xec2>
                break;
 8018560:	bf00      	nop
 8018562:	e008      	b.n	8018576 <tcp_receive+0xec2>
                break;
 8018564:	bf00      	nop
 8018566:	e006      	b.n	8018576 <tcp_receive+0xec2>
                  break;
 8018568:	bf00      	nop
 801856a:	e004      	b.n	8018576 <tcp_receive+0xec2>
                  break;
 801856c:	bf00      	nop
 801856e:	e002      	b.n	8018576 <tcp_receive+0xec2>
                  break;
 8018570:	bf00      	nop
 8018572:	e000      	b.n	8018576 <tcp_receive+0xec2>
                break;
 8018574:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8018576:	6878      	ldr	r0, [r7, #4]
 8018578:	f001 fe88 	bl	801a28c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801857c:	e003      	b.n	8018586 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801857e:	6878      	ldr	r0, [r7, #4]
 8018580:	f001 fe84 	bl	801a28c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8018584:	e01a      	b.n	80185bc <tcp_receive+0xf08>
 8018586:	e019      	b.n	80185bc <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8018588:	4b0e      	ldr	r3, [pc, #56]	@ (80185c4 <tcp_receive+0xf10>)
 801858a:	681a      	ldr	r2, [r3, #0]
 801858c:	687b      	ldr	r3, [r7, #4]
 801858e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018590:	1ad3      	subs	r3, r2, r3
 8018592:	2b00      	cmp	r3, #0
 8018594:	db0a      	blt.n	80185ac <tcp_receive+0xef8>
 8018596:	4b0b      	ldr	r3, [pc, #44]	@ (80185c4 <tcp_receive+0xf10>)
 8018598:	681a      	ldr	r2, [r3, #0]
 801859a:	687b      	ldr	r3, [r7, #4]
 801859c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801859e:	6879      	ldr	r1, [r7, #4]
 80185a0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80185a2:	440b      	add	r3, r1
 80185a4:	1ad3      	subs	r3, r2, r3
 80185a6:	3301      	adds	r3, #1
 80185a8:	2b00      	cmp	r3, #0
 80185aa:	dd07      	ble.n	80185bc <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 80185ac:	687b      	ldr	r3, [r7, #4]
 80185ae:	8b5b      	ldrh	r3, [r3, #26]
 80185b0:	f043 0302 	orr.w	r3, r3, #2
 80185b4:	b29a      	uxth	r2, r3
 80185b6:	687b      	ldr	r3, [r7, #4]
 80185b8:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80185ba:	e7ff      	b.n	80185bc <tcp_receive+0xf08>
 80185bc:	bf00      	nop
 80185be:	3750      	adds	r7, #80	@ 0x50
 80185c0:	46bd      	mov	sp, r7
 80185c2:	bdb0      	pop	{r4, r5, r7, pc}
 80185c4:	2000caf8 	.word	0x2000caf8
 80185c8:	2000cad8 	.word	0x2000cad8
 80185cc:	2000cb02 	.word	0x2000cb02
 80185d0:	08022470 	.word	0x08022470
 80185d4:	08022818 	.word	0x08022818
 80185d8:	080224bc 	.word	0x080224bc

080185dc <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80185dc:	b480      	push	{r7}
 80185de:	b083      	sub	sp, #12
 80185e0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80185e2:	4b15      	ldr	r3, [pc, #84]	@ (8018638 <tcp_get_next_optbyte+0x5c>)
 80185e4:	881b      	ldrh	r3, [r3, #0]
 80185e6:	1c5a      	adds	r2, r3, #1
 80185e8:	b291      	uxth	r1, r2
 80185ea:	4a13      	ldr	r2, [pc, #76]	@ (8018638 <tcp_get_next_optbyte+0x5c>)
 80185ec:	8011      	strh	r1, [r2, #0]
 80185ee:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80185f0:	4b12      	ldr	r3, [pc, #72]	@ (801863c <tcp_get_next_optbyte+0x60>)
 80185f2:	681b      	ldr	r3, [r3, #0]
 80185f4:	2b00      	cmp	r3, #0
 80185f6:	d004      	beq.n	8018602 <tcp_get_next_optbyte+0x26>
 80185f8:	4b11      	ldr	r3, [pc, #68]	@ (8018640 <tcp_get_next_optbyte+0x64>)
 80185fa:	881b      	ldrh	r3, [r3, #0]
 80185fc:	88fa      	ldrh	r2, [r7, #6]
 80185fe:	429a      	cmp	r2, r3
 8018600:	d208      	bcs.n	8018614 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8018602:	4b10      	ldr	r3, [pc, #64]	@ (8018644 <tcp_get_next_optbyte+0x68>)
 8018604:	681b      	ldr	r3, [r3, #0]
 8018606:	3314      	adds	r3, #20
 8018608:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801860a:	88fb      	ldrh	r3, [r7, #6]
 801860c:	683a      	ldr	r2, [r7, #0]
 801860e:	4413      	add	r3, r2
 8018610:	781b      	ldrb	r3, [r3, #0]
 8018612:	e00b      	b.n	801862c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8018614:	88fb      	ldrh	r3, [r7, #6]
 8018616:	b2da      	uxtb	r2, r3
 8018618:	4b09      	ldr	r3, [pc, #36]	@ (8018640 <tcp_get_next_optbyte+0x64>)
 801861a:	881b      	ldrh	r3, [r3, #0]
 801861c:	b2db      	uxtb	r3, r3
 801861e:	1ad3      	subs	r3, r2, r3
 8018620:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8018622:	4b06      	ldr	r3, [pc, #24]	@ (801863c <tcp_get_next_optbyte+0x60>)
 8018624:	681a      	ldr	r2, [r3, #0]
 8018626:	797b      	ldrb	r3, [r7, #5]
 8018628:	4413      	add	r3, r2
 801862a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801862c:	4618      	mov	r0, r3
 801862e:	370c      	adds	r7, #12
 8018630:	46bd      	mov	sp, r7
 8018632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018636:	4770      	bx	lr
 8018638:	2000caf4 	.word	0x2000caf4
 801863c:	2000caf0 	.word	0x2000caf0
 8018640:	2000caee 	.word	0x2000caee
 8018644:	2000cae8 	.word	0x2000cae8

08018648 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8018648:	b580      	push	{r7, lr}
 801864a:	b084      	sub	sp, #16
 801864c:	af00      	add	r7, sp, #0
 801864e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8018650:	687b      	ldr	r3, [r7, #4]
 8018652:	2b00      	cmp	r3, #0
 8018654:	d106      	bne.n	8018664 <tcp_parseopt+0x1c>
 8018656:	4b32      	ldr	r3, [pc, #200]	@ (8018720 <tcp_parseopt+0xd8>)
 8018658:	f240 727d 	movw	r2, #1917	@ 0x77d
 801865c:	4931      	ldr	r1, [pc, #196]	@ (8018724 <tcp_parseopt+0xdc>)
 801865e:	4832      	ldr	r0, [pc, #200]	@ (8018728 <tcp_parseopt+0xe0>)
 8018660:	f005 fd94 	bl	801e18c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8018664:	4b31      	ldr	r3, [pc, #196]	@ (801872c <tcp_parseopt+0xe4>)
 8018666:	881b      	ldrh	r3, [r3, #0]
 8018668:	2b00      	cmp	r3, #0
 801866a:	d056      	beq.n	801871a <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801866c:	4b30      	ldr	r3, [pc, #192]	@ (8018730 <tcp_parseopt+0xe8>)
 801866e:	2200      	movs	r2, #0
 8018670:	801a      	strh	r2, [r3, #0]
 8018672:	e046      	b.n	8018702 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8018674:	f7ff ffb2 	bl	80185dc <tcp_get_next_optbyte>
 8018678:	4603      	mov	r3, r0
 801867a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801867c:	7bfb      	ldrb	r3, [r7, #15]
 801867e:	2b02      	cmp	r3, #2
 8018680:	d006      	beq.n	8018690 <tcp_parseopt+0x48>
 8018682:	2b02      	cmp	r3, #2
 8018684:	dc2a      	bgt.n	80186dc <tcp_parseopt+0x94>
 8018686:	2b00      	cmp	r3, #0
 8018688:	d042      	beq.n	8018710 <tcp_parseopt+0xc8>
 801868a:	2b01      	cmp	r3, #1
 801868c:	d038      	beq.n	8018700 <tcp_parseopt+0xb8>
 801868e:	e025      	b.n	80186dc <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8018690:	f7ff ffa4 	bl	80185dc <tcp_get_next_optbyte>
 8018694:	4603      	mov	r3, r0
 8018696:	2b04      	cmp	r3, #4
 8018698:	d13c      	bne.n	8018714 <tcp_parseopt+0xcc>
 801869a:	4b25      	ldr	r3, [pc, #148]	@ (8018730 <tcp_parseopt+0xe8>)
 801869c:	881b      	ldrh	r3, [r3, #0]
 801869e:	3301      	adds	r3, #1
 80186a0:	4a22      	ldr	r2, [pc, #136]	@ (801872c <tcp_parseopt+0xe4>)
 80186a2:	8812      	ldrh	r2, [r2, #0]
 80186a4:	4293      	cmp	r3, r2
 80186a6:	da35      	bge.n	8018714 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80186a8:	f7ff ff98 	bl	80185dc <tcp_get_next_optbyte>
 80186ac:	4603      	mov	r3, r0
 80186ae:	021b      	lsls	r3, r3, #8
 80186b0:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80186b2:	f7ff ff93 	bl	80185dc <tcp_get_next_optbyte>
 80186b6:	4603      	mov	r3, r0
 80186b8:	461a      	mov	r2, r3
 80186ba:	89bb      	ldrh	r3, [r7, #12]
 80186bc:	4313      	orrs	r3, r2
 80186be:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80186c0:	89bb      	ldrh	r3, [r7, #12]
 80186c2:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 80186c6:	d804      	bhi.n	80186d2 <tcp_parseopt+0x8a>
 80186c8:	89bb      	ldrh	r3, [r7, #12]
 80186ca:	2b00      	cmp	r3, #0
 80186cc:	d001      	beq.n	80186d2 <tcp_parseopt+0x8a>
 80186ce:	89ba      	ldrh	r2, [r7, #12]
 80186d0:	e001      	b.n	80186d6 <tcp_parseopt+0x8e>
 80186d2:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80186d6:	687b      	ldr	r3, [r7, #4]
 80186d8:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 80186da:	e012      	b.n	8018702 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80186dc:	f7ff ff7e 	bl	80185dc <tcp_get_next_optbyte>
 80186e0:	4603      	mov	r3, r0
 80186e2:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80186e4:	7afb      	ldrb	r3, [r7, #11]
 80186e6:	2b01      	cmp	r3, #1
 80186e8:	d916      	bls.n	8018718 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80186ea:	7afb      	ldrb	r3, [r7, #11]
 80186ec:	b29a      	uxth	r2, r3
 80186ee:	4b10      	ldr	r3, [pc, #64]	@ (8018730 <tcp_parseopt+0xe8>)
 80186f0:	881b      	ldrh	r3, [r3, #0]
 80186f2:	4413      	add	r3, r2
 80186f4:	b29b      	uxth	r3, r3
 80186f6:	3b02      	subs	r3, #2
 80186f8:	b29a      	uxth	r2, r3
 80186fa:	4b0d      	ldr	r3, [pc, #52]	@ (8018730 <tcp_parseopt+0xe8>)
 80186fc:	801a      	strh	r2, [r3, #0]
 80186fe:	e000      	b.n	8018702 <tcp_parseopt+0xba>
          break;
 8018700:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8018702:	4b0b      	ldr	r3, [pc, #44]	@ (8018730 <tcp_parseopt+0xe8>)
 8018704:	881a      	ldrh	r2, [r3, #0]
 8018706:	4b09      	ldr	r3, [pc, #36]	@ (801872c <tcp_parseopt+0xe4>)
 8018708:	881b      	ldrh	r3, [r3, #0]
 801870a:	429a      	cmp	r2, r3
 801870c:	d3b2      	bcc.n	8018674 <tcp_parseopt+0x2c>
 801870e:	e004      	b.n	801871a <tcp_parseopt+0xd2>
          return;
 8018710:	bf00      	nop
 8018712:	e002      	b.n	801871a <tcp_parseopt+0xd2>
            return;
 8018714:	bf00      	nop
 8018716:	e000      	b.n	801871a <tcp_parseopt+0xd2>
            return;
 8018718:	bf00      	nop
      }
    }
  }
}
 801871a:	3710      	adds	r7, #16
 801871c:	46bd      	mov	sp, r7
 801871e:	bd80      	pop	{r7, pc}
 8018720:	08022470 	.word	0x08022470
 8018724:	080228d4 	.word	0x080228d4
 8018728:	080224bc 	.word	0x080224bc
 801872c:	2000caec 	.word	0x2000caec
 8018730:	2000caf4 	.word	0x2000caf4

08018734 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8018734:	b480      	push	{r7}
 8018736:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8018738:	4b05      	ldr	r3, [pc, #20]	@ (8018750 <tcp_trigger_input_pcb_close+0x1c>)
 801873a:	781b      	ldrb	r3, [r3, #0]
 801873c:	f043 0310 	orr.w	r3, r3, #16
 8018740:	b2da      	uxtb	r2, r3
 8018742:	4b03      	ldr	r3, [pc, #12]	@ (8018750 <tcp_trigger_input_pcb_close+0x1c>)
 8018744:	701a      	strb	r2, [r3, #0]
}
 8018746:	bf00      	nop
 8018748:	46bd      	mov	sp, r7
 801874a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801874e:	4770      	bx	lr
 8018750:	2000cb05 	.word	0x2000cb05

08018754 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8018754:	b580      	push	{r7, lr}
 8018756:	b084      	sub	sp, #16
 8018758:	af00      	add	r7, sp, #0
 801875a:	60f8      	str	r0, [r7, #12]
 801875c:	60b9      	str	r1, [r7, #8]
 801875e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8018760:	68fb      	ldr	r3, [r7, #12]
 8018762:	2b00      	cmp	r3, #0
 8018764:	d00a      	beq.n	801877c <tcp_route+0x28>
 8018766:	68fb      	ldr	r3, [r7, #12]
 8018768:	7a1b      	ldrb	r3, [r3, #8]
 801876a:	2b00      	cmp	r3, #0
 801876c:	d006      	beq.n	801877c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801876e:	68fb      	ldr	r3, [r7, #12]
 8018770:	7a1b      	ldrb	r3, [r3, #8]
 8018772:	4618      	mov	r0, r3
 8018774:	f7fb f8c4 	bl	8013900 <netif_get_by_index>
 8018778:	4603      	mov	r3, r0
 801877a:	e003      	b.n	8018784 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801877c:	6878      	ldr	r0, [r7, #4]
 801877e:	f003 fad1 	bl	801bd24 <ip4_route>
 8018782:	4603      	mov	r3, r0
  }
}
 8018784:	4618      	mov	r0, r3
 8018786:	3710      	adds	r7, #16
 8018788:	46bd      	mov	sp, r7
 801878a:	bd80      	pop	{r7, pc}

0801878c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801878c:	b590      	push	{r4, r7, lr}
 801878e:	b087      	sub	sp, #28
 8018790:	af00      	add	r7, sp, #0
 8018792:	60f8      	str	r0, [r7, #12]
 8018794:	60b9      	str	r1, [r7, #8]
 8018796:	603b      	str	r3, [r7, #0]
 8018798:	4613      	mov	r3, r2
 801879a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801879c:	68fb      	ldr	r3, [r7, #12]
 801879e:	2b00      	cmp	r3, #0
 80187a0:	d105      	bne.n	80187ae <tcp_create_segment+0x22>
 80187a2:	4b43      	ldr	r3, [pc, #268]	@ (80188b0 <tcp_create_segment+0x124>)
 80187a4:	22a3      	movs	r2, #163	@ 0xa3
 80187a6:	4943      	ldr	r1, [pc, #268]	@ (80188b4 <tcp_create_segment+0x128>)
 80187a8:	4843      	ldr	r0, [pc, #268]	@ (80188b8 <tcp_create_segment+0x12c>)
 80187aa:	f005 fcef 	bl	801e18c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80187ae:	68bb      	ldr	r3, [r7, #8]
 80187b0:	2b00      	cmp	r3, #0
 80187b2:	d105      	bne.n	80187c0 <tcp_create_segment+0x34>
 80187b4:	4b3e      	ldr	r3, [pc, #248]	@ (80188b0 <tcp_create_segment+0x124>)
 80187b6:	22a4      	movs	r2, #164	@ 0xa4
 80187b8:	4940      	ldr	r1, [pc, #256]	@ (80188bc <tcp_create_segment+0x130>)
 80187ba:	483f      	ldr	r0, [pc, #252]	@ (80188b8 <tcp_create_segment+0x12c>)
 80187bc:	f005 fce6 	bl	801e18c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80187c0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80187c4:	009b      	lsls	r3, r3, #2
 80187c6:	b2db      	uxtb	r3, r3
 80187c8:	f003 0304 	and.w	r3, r3, #4
 80187cc:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80187ce:	2003      	movs	r0, #3
 80187d0:	f7fa fd3c 	bl	801324c <memp_malloc>
 80187d4:	6138      	str	r0, [r7, #16]
 80187d6:	693b      	ldr	r3, [r7, #16]
 80187d8:	2b00      	cmp	r3, #0
 80187da:	d104      	bne.n	80187e6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80187dc:	68b8      	ldr	r0, [r7, #8]
 80187de:	f7fb fc1d 	bl	801401c <pbuf_free>
    return NULL;
 80187e2:	2300      	movs	r3, #0
 80187e4:	e060      	b.n	80188a8 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 80187e6:	693b      	ldr	r3, [r7, #16]
 80187e8:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80187ec:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80187ee:	693b      	ldr	r3, [r7, #16]
 80187f0:	2200      	movs	r2, #0
 80187f2:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80187f4:	693b      	ldr	r3, [r7, #16]
 80187f6:	68ba      	ldr	r2, [r7, #8]
 80187f8:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80187fa:	68bb      	ldr	r3, [r7, #8]
 80187fc:	891a      	ldrh	r2, [r3, #8]
 80187fe:	7dfb      	ldrb	r3, [r7, #23]
 8018800:	b29b      	uxth	r3, r3
 8018802:	429a      	cmp	r2, r3
 8018804:	d205      	bcs.n	8018812 <tcp_create_segment+0x86>
 8018806:	4b2a      	ldr	r3, [pc, #168]	@ (80188b0 <tcp_create_segment+0x124>)
 8018808:	22b0      	movs	r2, #176	@ 0xb0
 801880a:	492d      	ldr	r1, [pc, #180]	@ (80188c0 <tcp_create_segment+0x134>)
 801880c:	482a      	ldr	r0, [pc, #168]	@ (80188b8 <tcp_create_segment+0x12c>)
 801880e:	f005 fcbd 	bl	801e18c <iprintf>
  seg->len = p->tot_len - optlen;
 8018812:	68bb      	ldr	r3, [r7, #8]
 8018814:	891a      	ldrh	r2, [r3, #8]
 8018816:	7dfb      	ldrb	r3, [r7, #23]
 8018818:	b29b      	uxth	r3, r3
 801881a:	1ad3      	subs	r3, r2, r3
 801881c:	b29a      	uxth	r2, r3
 801881e:	693b      	ldr	r3, [r7, #16]
 8018820:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8018822:	2114      	movs	r1, #20
 8018824:	68b8      	ldr	r0, [r7, #8]
 8018826:	f7fb fb63 	bl	8013ef0 <pbuf_add_header>
 801882a:	4603      	mov	r3, r0
 801882c:	2b00      	cmp	r3, #0
 801882e:	d004      	beq.n	801883a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8018830:	6938      	ldr	r0, [r7, #16]
 8018832:	f7fd f82e 	bl	8015892 <tcp_seg_free>
    return NULL;
 8018836:	2300      	movs	r3, #0
 8018838:	e036      	b.n	80188a8 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801883a:	693b      	ldr	r3, [r7, #16]
 801883c:	685b      	ldr	r3, [r3, #4]
 801883e:	685a      	ldr	r2, [r3, #4]
 8018840:	693b      	ldr	r3, [r7, #16]
 8018842:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8018844:	68fb      	ldr	r3, [r7, #12]
 8018846:	8ada      	ldrh	r2, [r3, #22]
 8018848:	693b      	ldr	r3, [r7, #16]
 801884a:	68dc      	ldr	r4, [r3, #12]
 801884c:	4610      	mov	r0, r2
 801884e:	f7fa f825 	bl	801289c <lwip_htons>
 8018852:	4603      	mov	r3, r0
 8018854:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8018856:	68fb      	ldr	r3, [r7, #12]
 8018858:	8b1a      	ldrh	r2, [r3, #24]
 801885a:	693b      	ldr	r3, [r7, #16]
 801885c:	68dc      	ldr	r4, [r3, #12]
 801885e:	4610      	mov	r0, r2
 8018860:	f7fa f81c 	bl	801289c <lwip_htons>
 8018864:	4603      	mov	r3, r0
 8018866:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8018868:	693b      	ldr	r3, [r7, #16]
 801886a:	68dc      	ldr	r4, [r3, #12]
 801886c:	6838      	ldr	r0, [r7, #0]
 801886e:	f7fa f82b 	bl	80128c8 <lwip_htonl>
 8018872:	4603      	mov	r3, r0
 8018874:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8018876:	7dfb      	ldrb	r3, [r7, #23]
 8018878:	089b      	lsrs	r3, r3, #2
 801887a:	b2db      	uxtb	r3, r3
 801887c:	3305      	adds	r3, #5
 801887e:	b29b      	uxth	r3, r3
 8018880:	031b      	lsls	r3, r3, #12
 8018882:	b29a      	uxth	r2, r3
 8018884:	79fb      	ldrb	r3, [r7, #7]
 8018886:	b29b      	uxth	r3, r3
 8018888:	4313      	orrs	r3, r2
 801888a:	b29a      	uxth	r2, r3
 801888c:	693b      	ldr	r3, [r7, #16]
 801888e:	68dc      	ldr	r4, [r3, #12]
 8018890:	4610      	mov	r0, r2
 8018892:	f7fa f803 	bl	801289c <lwip_htons>
 8018896:	4603      	mov	r3, r0
 8018898:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801889a:	693b      	ldr	r3, [r7, #16]
 801889c:	68db      	ldr	r3, [r3, #12]
 801889e:	2200      	movs	r2, #0
 80188a0:	749a      	strb	r2, [r3, #18]
 80188a2:	2200      	movs	r2, #0
 80188a4:	74da      	strb	r2, [r3, #19]
  return seg;
 80188a6:	693b      	ldr	r3, [r7, #16]
}
 80188a8:	4618      	mov	r0, r3
 80188aa:	371c      	adds	r7, #28
 80188ac:	46bd      	mov	sp, r7
 80188ae:	bd90      	pop	{r4, r7, pc}
 80188b0:	080228f0 	.word	0x080228f0
 80188b4:	08022924 	.word	0x08022924
 80188b8:	08022944 	.word	0x08022944
 80188bc:	0802296c 	.word	0x0802296c
 80188c0:	08022990 	.word	0x08022990

080188c4 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80188c4:	b580      	push	{r7, lr}
 80188c6:	b086      	sub	sp, #24
 80188c8:	af00      	add	r7, sp, #0
 80188ca:	607b      	str	r3, [r7, #4]
 80188cc:	4603      	mov	r3, r0
 80188ce:	73fb      	strb	r3, [r7, #15]
 80188d0:	460b      	mov	r3, r1
 80188d2:	81bb      	strh	r3, [r7, #12]
 80188d4:	4613      	mov	r3, r2
 80188d6:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 80188d8:	89bb      	ldrh	r3, [r7, #12]
 80188da:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 80188dc:	687b      	ldr	r3, [r7, #4]
 80188de:	2b00      	cmp	r3, #0
 80188e0:	d105      	bne.n	80188ee <tcp_pbuf_prealloc+0x2a>
 80188e2:	4b30      	ldr	r3, [pc, #192]	@ (80189a4 <tcp_pbuf_prealloc+0xe0>)
 80188e4:	22e8      	movs	r2, #232	@ 0xe8
 80188e6:	4930      	ldr	r1, [pc, #192]	@ (80189a8 <tcp_pbuf_prealloc+0xe4>)
 80188e8:	4830      	ldr	r0, [pc, #192]	@ (80189ac <tcp_pbuf_prealloc+0xe8>)
 80188ea:	f005 fc4f 	bl	801e18c <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 80188ee:	6a3b      	ldr	r3, [r7, #32]
 80188f0:	2b00      	cmp	r3, #0
 80188f2:	d105      	bne.n	8018900 <tcp_pbuf_prealloc+0x3c>
 80188f4:	4b2b      	ldr	r3, [pc, #172]	@ (80189a4 <tcp_pbuf_prealloc+0xe0>)
 80188f6:	22e9      	movs	r2, #233	@ 0xe9
 80188f8:	492d      	ldr	r1, [pc, #180]	@ (80189b0 <tcp_pbuf_prealloc+0xec>)
 80188fa:	482c      	ldr	r0, [pc, #176]	@ (80189ac <tcp_pbuf_prealloc+0xe8>)
 80188fc:	f005 fc46 	bl	801e18c <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8018900:	89ba      	ldrh	r2, [r7, #12]
 8018902:	897b      	ldrh	r3, [r7, #10]
 8018904:	429a      	cmp	r2, r3
 8018906:	d221      	bcs.n	801894c <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8018908:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801890c:	f003 0302 	and.w	r3, r3, #2
 8018910:	2b00      	cmp	r3, #0
 8018912:	d111      	bne.n	8018938 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8018914:	6a3b      	ldr	r3, [r7, #32]
 8018916:	8b5b      	ldrh	r3, [r3, #26]
 8018918:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801891c:	2b00      	cmp	r3, #0
 801891e:	d115      	bne.n	801894c <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8018920:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8018924:	2b00      	cmp	r3, #0
 8018926:	d007      	beq.n	8018938 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8018928:	6a3b      	ldr	r3, [r7, #32]
 801892a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 801892c:	2b00      	cmp	r3, #0
 801892e:	d103      	bne.n	8018938 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8018930:	6a3b      	ldr	r3, [r7, #32]
 8018932:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 8018934:	2b00      	cmp	r3, #0
 8018936:	d009      	beq.n	801894c <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8018938:	89bb      	ldrh	r3, [r7, #12]
 801893a:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 801893e:	f023 0203 	bic.w	r2, r3, #3
 8018942:	897b      	ldrh	r3, [r7, #10]
 8018944:	4293      	cmp	r3, r2
 8018946:	bf28      	it	cs
 8018948:	4613      	movcs	r3, r2
 801894a:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801894c:	8af9      	ldrh	r1, [r7, #22]
 801894e:	7bfb      	ldrb	r3, [r7, #15]
 8018950:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8018954:	4618      	mov	r0, r3
 8018956:	f7fb f87d 	bl	8013a54 <pbuf_alloc>
 801895a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801895c:	693b      	ldr	r3, [r7, #16]
 801895e:	2b00      	cmp	r3, #0
 8018960:	d101      	bne.n	8018966 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8018962:	2300      	movs	r3, #0
 8018964:	e019      	b.n	801899a <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8018966:	693b      	ldr	r3, [r7, #16]
 8018968:	681b      	ldr	r3, [r3, #0]
 801896a:	2b00      	cmp	r3, #0
 801896c:	d006      	beq.n	801897c <tcp_pbuf_prealloc+0xb8>
 801896e:	4b0d      	ldr	r3, [pc, #52]	@ (80189a4 <tcp_pbuf_prealloc+0xe0>)
 8018970:	f240 120b 	movw	r2, #267	@ 0x10b
 8018974:	490f      	ldr	r1, [pc, #60]	@ (80189b4 <tcp_pbuf_prealloc+0xf0>)
 8018976:	480d      	ldr	r0, [pc, #52]	@ (80189ac <tcp_pbuf_prealloc+0xe8>)
 8018978:	f005 fc08 	bl	801e18c <iprintf>
  *oversize = p->len - length;
 801897c:	693b      	ldr	r3, [r7, #16]
 801897e:	895a      	ldrh	r2, [r3, #10]
 8018980:	89bb      	ldrh	r3, [r7, #12]
 8018982:	1ad3      	subs	r3, r2, r3
 8018984:	b29a      	uxth	r2, r3
 8018986:	687b      	ldr	r3, [r7, #4]
 8018988:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801898a:	693b      	ldr	r3, [r7, #16]
 801898c:	89ba      	ldrh	r2, [r7, #12]
 801898e:	811a      	strh	r2, [r3, #8]
 8018990:	693b      	ldr	r3, [r7, #16]
 8018992:	891a      	ldrh	r2, [r3, #8]
 8018994:	693b      	ldr	r3, [r7, #16]
 8018996:	815a      	strh	r2, [r3, #10]
  return p;
 8018998:	693b      	ldr	r3, [r7, #16]
}
 801899a:	4618      	mov	r0, r3
 801899c:	3718      	adds	r7, #24
 801899e:	46bd      	mov	sp, r7
 80189a0:	bd80      	pop	{r7, pc}
 80189a2:	bf00      	nop
 80189a4:	080228f0 	.word	0x080228f0
 80189a8:	080229a8 	.word	0x080229a8
 80189ac:	08022944 	.word	0x08022944
 80189b0:	080229cc 	.word	0x080229cc
 80189b4:	080229ec 	.word	0x080229ec

080189b8 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80189b8:	b580      	push	{r7, lr}
 80189ba:	b082      	sub	sp, #8
 80189bc:	af00      	add	r7, sp, #0
 80189be:	6078      	str	r0, [r7, #4]
 80189c0:	460b      	mov	r3, r1
 80189c2:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 80189c4:	687b      	ldr	r3, [r7, #4]
 80189c6:	2b00      	cmp	r3, #0
 80189c8:	d106      	bne.n	80189d8 <tcp_write_checks+0x20>
 80189ca:	4b33      	ldr	r3, [pc, #204]	@ (8018a98 <tcp_write_checks+0xe0>)
 80189cc:	f240 1233 	movw	r2, #307	@ 0x133
 80189d0:	4932      	ldr	r1, [pc, #200]	@ (8018a9c <tcp_write_checks+0xe4>)
 80189d2:	4833      	ldr	r0, [pc, #204]	@ (8018aa0 <tcp_write_checks+0xe8>)
 80189d4:	f005 fbda 	bl	801e18c <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 80189d8:	687b      	ldr	r3, [r7, #4]
 80189da:	7d1b      	ldrb	r3, [r3, #20]
 80189dc:	2b04      	cmp	r3, #4
 80189de:	d00e      	beq.n	80189fe <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 80189e0:	687b      	ldr	r3, [r7, #4]
 80189e2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 80189e4:	2b07      	cmp	r3, #7
 80189e6:	d00a      	beq.n	80189fe <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 80189e8:	687b      	ldr	r3, [r7, #4]
 80189ea:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 80189ec:	2b02      	cmp	r3, #2
 80189ee:	d006      	beq.n	80189fe <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 80189f0:	687b      	ldr	r3, [r7, #4]
 80189f2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 80189f4:	2b03      	cmp	r3, #3
 80189f6:	d002      	beq.n	80189fe <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 80189f8:	f06f 030a 	mvn.w	r3, #10
 80189fc:	e048      	b.n	8018a90 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 80189fe:	887b      	ldrh	r3, [r7, #2]
 8018a00:	2b00      	cmp	r3, #0
 8018a02:	d101      	bne.n	8018a08 <tcp_write_checks+0x50>
    return ERR_OK;
 8018a04:	2300      	movs	r3, #0
 8018a06:	e043      	b.n	8018a90 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8018a08:	687b      	ldr	r3, [r7, #4]
 8018a0a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8018a0e:	887a      	ldrh	r2, [r7, #2]
 8018a10:	429a      	cmp	r2, r3
 8018a12:	d909      	bls.n	8018a28 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8018a14:	687b      	ldr	r3, [r7, #4]
 8018a16:	8b5b      	ldrh	r3, [r3, #26]
 8018a18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018a1c:	b29a      	uxth	r2, r3
 8018a1e:	687b      	ldr	r3, [r7, #4]
 8018a20:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8018a22:	f04f 33ff 	mov.w	r3, #4294967295
 8018a26:	e033      	b.n	8018a90 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8018a28:	687b      	ldr	r3, [r7, #4]
 8018a2a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018a2e:	2b08      	cmp	r3, #8
 8018a30:	d909      	bls.n	8018a46 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8018a32:	687b      	ldr	r3, [r7, #4]
 8018a34:	8b5b      	ldrh	r3, [r3, #26]
 8018a36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018a3a:	b29a      	uxth	r2, r3
 8018a3c:	687b      	ldr	r3, [r7, #4]
 8018a3e:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8018a40:	f04f 33ff 	mov.w	r3, #4294967295
 8018a44:	e024      	b.n	8018a90 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8018a46:	687b      	ldr	r3, [r7, #4]
 8018a48:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018a4c:	2b00      	cmp	r3, #0
 8018a4e:	d00f      	beq.n	8018a70 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8018a50:	687b      	ldr	r3, [r7, #4]
 8018a52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018a54:	2b00      	cmp	r3, #0
 8018a56:	d11a      	bne.n	8018a8e <tcp_write_checks+0xd6>
 8018a58:	687b      	ldr	r3, [r7, #4]
 8018a5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018a5c:	2b00      	cmp	r3, #0
 8018a5e:	d116      	bne.n	8018a8e <tcp_write_checks+0xd6>
 8018a60:	4b0d      	ldr	r3, [pc, #52]	@ (8018a98 <tcp_write_checks+0xe0>)
 8018a62:	f240 1255 	movw	r2, #341	@ 0x155
 8018a66:	490f      	ldr	r1, [pc, #60]	@ (8018aa4 <tcp_write_checks+0xec>)
 8018a68:	480d      	ldr	r0, [pc, #52]	@ (8018aa0 <tcp_write_checks+0xe8>)
 8018a6a:	f005 fb8f 	bl	801e18c <iprintf>
 8018a6e:	e00e      	b.n	8018a8e <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8018a70:	687b      	ldr	r3, [r7, #4]
 8018a72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018a74:	2b00      	cmp	r3, #0
 8018a76:	d103      	bne.n	8018a80 <tcp_write_checks+0xc8>
 8018a78:	687b      	ldr	r3, [r7, #4]
 8018a7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018a7c:	2b00      	cmp	r3, #0
 8018a7e:	d006      	beq.n	8018a8e <tcp_write_checks+0xd6>
 8018a80:	4b05      	ldr	r3, [pc, #20]	@ (8018a98 <tcp_write_checks+0xe0>)
 8018a82:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 8018a86:	4908      	ldr	r1, [pc, #32]	@ (8018aa8 <tcp_write_checks+0xf0>)
 8018a88:	4805      	ldr	r0, [pc, #20]	@ (8018aa0 <tcp_write_checks+0xe8>)
 8018a8a:	f005 fb7f 	bl	801e18c <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8018a8e:	2300      	movs	r3, #0
}
 8018a90:	4618      	mov	r0, r3
 8018a92:	3708      	adds	r7, #8
 8018a94:	46bd      	mov	sp, r7
 8018a96:	bd80      	pop	{r7, pc}
 8018a98:	080228f0 	.word	0x080228f0
 8018a9c:	08022a00 	.word	0x08022a00
 8018aa0:	08022944 	.word	0x08022944
 8018aa4:	08022a20 	.word	0x08022a20
 8018aa8:	08022a5c 	.word	0x08022a5c

08018aac <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8018aac:	b590      	push	{r4, r7, lr}
 8018aae:	b09b      	sub	sp, #108	@ 0x6c
 8018ab0:	af04      	add	r7, sp, #16
 8018ab2:	60f8      	str	r0, [r7, #12]
 8018ab4:	60b9      	str	r1, [r7, #8]
 8018ab6:	4611      	mov	r1, r2
 8018ab8:	461a      	mov	r2, r3
 8018aba:	460b      	mov	r3, r1
 8018abc:	80fb      	strh	r3, [r7, #6]
 8018abe:	4613      	mov	r3, r2
 8018ac0:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8018ac2:	2300      	movs	r3, #0
 8018ac4:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8018ac6:	2300      	movs	r3, #0
 8018ac8:	653b      	str	r3, [r7, #80]	@ 0x50
 8018aca:	2300      	movs	r3, #0
 8018acc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8018ace:	2300      	movs	r3, #0
 8018ad0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8018ad2:	2300      	movs	r3, #0
 8018ad4:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8018ad6:	2300      	movs	r3, #0
 8018ad8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8018adc:	2300      	movs	r3, #0
 8018ade:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8018ae2:	2300      	movs	r3, #0
 8018ae4:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8018ae6:	2300      	movs	r3, #0
 8018ae8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8018aea:	2300      	movs	r3, #0
 8018aec:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8018aee:	68fb      	ldr	r3, [r7, #12]
 8018af0:	2b00      	cmp	r3, #0
 8018af2:	d109      	bne.n	8018b08 <tcp_write+0x5c>
 8018af4:	4ba4      	ldr	r3, [pc, #656]	@ (8018d88 <tcp_write+0x2dc>)
 8018af6:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 8018afa:	49a4      	ldr	r1, [pc, #656]	@ (8018d8c <tcp_write+0x2e0>)
 8018afc:	48a4      	ldr	r0, [pc, #656]	@ (8018d90 <tcp_write+0x2e4>)
 8018afe:	f005 fb45 	bl	801e18c <iprintf>
 8018b02:	f06f 030f 	mvn.w	r3, #15
 8018b06:	e32a      	b.n	801915e <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8018b08:	68fb      	ldr	r3, [r7, #12]
 8018b0a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8018b0e:	085b      	lsrs	r3, r3, #1
 8018b10:	b29a      	uxth	r2, r3
 8018b12:	68fb      	ldr	r3, [r7, #12]
 8018b14:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018b16:	4293      	cmp	r3, r2
 8018b18:	bf28      	it	cs
 8018b1a:	4613      	movcs	r3, r2
 8018b1c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8018b1e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8018b20:	2b00      	cmp	r3, #0
 8018b22:	d102      	bne.n	8018b2a <tcp_write+0x7e>
 8018b24:	68fb      	ldr	r3, [r7, #12]
 8018b26:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018b28:	e000      	b.n	8018b2c <tcp_write+0x80>
 8018b2a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8018b2c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8018b2e:	68bb      	ldr	r3, [r7, #8]
 8018b30:	2b00      	cmp	r3, #0
 8018b32:	d109      	bne.n	8018b48 <tcp_write+0x9c>
 8018b34:	4b94      	ldr	r3, [pc, #592]	@ (8018d88 <tcp_write+0x2dc>)
 8018b36:	f240 12ad 	movw	r2, #429	@ 0x1ad
 8018b3a:	4996      	ldr	r1, [pc, #600]	@ (8018d94 <tcp_write+0x2e8>)
 8018b3c:	4894      	ldr	r0, [pc, #592]	@ (8018d90 <tcp_write+0x2e4>)
 8018b3e:	f005 fb25 	bl	801e18c <iprintf>
 8018b42:	f06f 030f 	mvn.w	r3, #15
 8018b46:	e30a      	b.n	801915e <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8018b48:	88fb      	ldrh	r3, [r7, #6]
 8018b4a:	4619      	mov	r1, r3
 8018b4c:	68f8      	ldr	r0, [r7, #12]
 8018b4e:	f7ff ff33 	bl	80189b8 <tcp_write_checks>
 8018b52:	4603      	mov	r3, r0
 8018b54:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 8018b58:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8018b5c:	2b00      	cmp	r3, #0
 8018b5e:	d002      	beq.n	8018b66 <tcp_write+0xba>
    return err;
 8018b60:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8018b64:	e2fb      	b.n	801915e <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8018b66:	68fb      	ldr	r3, [r7, #12]
 8018b68:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018b6c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8018b70:	2300      	movs	r3, #0
 8018b72:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8018b76:	68fb      	ldr	r3, [r7, #12]
 8018b78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018b7a:	2b00      	cmp	r3, #0
 8018b7c:	f000 80f6 	beq.w	8018d6c <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8018b80:	68fb      	ldr	r3, [r7, #12]
 8018b82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018b84:	653b      	str	r3, [r7, #80]	@ 0x50
 8018b86:	e002      	b.n	8018b8e <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8018b88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018b8a:	681b      	ldr	r3, [r3, #0]
 8018b8c:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8018b8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018b90:	681b      	ldr	r3, [r3, #0]
 8018b92:	2b00      	cmp	r3, #0
 8018b94:	d1f8      	bne.n	8018b88 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8018b96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018b98:	7a9b      	ldrb	r3, [r3, #10]
 8018b9a:	009b      	lsls	r3, r3, #2
 8018b9c:	b29b      	uxth	r3, r3
 8018b9e:	f003 0304 	and.w	r3, r3, #4
 8018ba2:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8018ba4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8018ba6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018ba8:	891b      	ldrh	r3, [r3, #8]
 8018baa:	4619      	mov	r1, r3
 8018bac:	8c3b      	ldrh	r3, [r7, #32]
 8018bae:	440b      	add	r3, r1
 8018bb0:	429a      	cmp	r2, r3
 8018bb2:	da06      	bge.n	8018bc2 <tcp_write+0x116>
 8018bb4:	4b74      	ldr	r3, [pc, #464]	@ (8018d88 <tcp_write+0x2dc>)
 8018bb6:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8018bba:	4977      	ldr	r1, [pc, #476]	@ (8018d98 <tcp_write+0x2ec>)
 8018bbc:	4874      	ldr	r0, [pc, #464]	@ (8018d90 <tcp_write+0x2e4>)
 8018bbe:	f005 fae5 	bl	801e18c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8018bc2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018bc4:	891a      	ldrh	r2, [r3, #8]
 8018bc6:	8c3b      	ldrh	r3, [r7, #32]
 8018bc8:	4413      	add	r3, r2
 8018bca:	b29b      	uxth	r3, r3
 8018bcc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8018bce:	1ad3      	subs	r3, r2, r3
 8018bd0:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8018bd2:	68fb      	ldr	r3, [r7, #12]
 8018bd4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8018bd8:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8018bda:	8a7b      	ldrh	r3, [r7, #18]
 8018bdc:	2b00      	cmp	r3, #0
 8018bde:	d026      	beq.n	8018c2e <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8018be0:	8a7b      	ldrh	r3, [r7, #18]
 8018be2:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8018be4:	429a      	cmp	r2, r3
 8018be6:	d206      	bcs.n	8018bf6 <tcp_write+0x14a>
 8018be8:	4b67      	ldr	r3, [pc, #412]	@ (8018d88 <tcp_write+0x2dc>)
 8018bea:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 8018bee:	496b      	ldr	r1, [pc, #428]	@ (8018d9c <tcp_write+0x2f0>)
 8018bf0:	4867      	ldr	r0, [pc, #412]	@ (8018d90 <tcp_write+0x2e4>)
 8018bf2:	f005 facb 	bl	801e18c <iprintf>
      seg = last_unsent;
 8018bf6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018bf8:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8018bfa:	8a7b      	ldrh	r3, [r7, #18]
 8018bfc:	88fa      	ldrh	r2, [r7, #6]
 8018bfe:	4293      	cmp	r3, r2
 8018c00:	bf28      	it	cs
 8018c02:	4613      	movcs	r3, r2
 8018c04:	b29b      	uxth	r3, r3
 8018c06:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8018c08:	4293      	cmp	r3, r2
 8018c0a:	bf28      	it	cs
 8018c0c:	4613      	movcs	r3, r2
 8018c0e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 8018c10:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8018c14:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8018c16:	4413      	add	r3, r2
 8018c18:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 8018c1c:	8a7a      	ldrh	r2, [r7, #18]
 8018c1e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8018c20:	1ad3      	subs	r3, r2, r3
 8018c22:	b29b      	uxth	r3, r3
 8018c24:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8018c26:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8018c28:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8018c2a:	1ad3      	subs	r3, r2, r3
 8018c2c:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8018c2e:	8a7b      	ldrh	r3, [r7, #18]
 8018c30:	2b00      	cmp	r3, #0
 8018c32:	d00b      	beq.n	8018c4c <tcp_write+0x1a0>
 8018c34:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8018c38:	88fb      	ldrh	r3, [r7, #6]
 8018c3a:	429a      	cmp	r2, r3
 8018c3c:	d006      	beq.n	8018c4c <tcp_write+0x1a0>
 8018c3e:	4b52      	ldr	r3, [pc, #328]	@ (8018d88 <tcp_write+0x2dc>)
 8018c40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8018c44:	4956      	ldr	r1, [pc, #344]	@ (8018da0 <tcp_write+0x2f4>)
 8018c46:	4852      	ldr	r0, [pc, #328]	@ (8018d90 <tcp_write+0x2e4>)
 8018c48:	f005 faa0 	bl	801e18c <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8018c4c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8018c50:	88fb      	ldrh	r3, [r7, #6]
 8018c52:	429a      	cmp	r2, r3
 8018c54:	f080 8167 	bcs.w	8018f26 <tcp_write+0x47a>
 8018c58:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8018c5a:	2b00      	cmp	r3, #0
 8018c5c:	f000 8163 	beq.w	8018f26 <tcp_write+0x47a>
 8018c60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018c62:	891b      	ldrh	r3, [r3, #8]
 8018c64:	2b00      	cmp	r3, #0
 8018c66:	f000 815e 	beq.w	8018f26 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8018c6a:	88fa      	ldrh	r2, [r7, #6]
 8018c6c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8018c70:	1ad2      	subs	r2, r2, r3
 8018c72:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8018c74:	4293      	cmp	r3, r2
 8018c76:	bfa8      	it	ge
 8018c78:	4613      	movge	r3, r2
 8018c7a:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8018c7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018c7e:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8018c80:	797b      	ldrb	r3, [r7, #5]
 8018c82:	f003 0301 	and.w	r3, r3, #1
 8018c86:	2b00      	cmp	r3, #0
 8018c88:	d027      	beq.n	8018cda <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8018c8a:	f107 0012 	add.w	r0, r7, #18
 8018c8e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8018c90:	8bf9      	ldrh	r1, [r7, #30]
 8018c92:	2301      	movs	r3, #1
 8018c94:	9302      	str	r3, [sp, #8]
 8018c96:	797b      	ldrb	r3, [r7, #5]
 8018c98:	9301      	str	r3, [sp, #4]
 8018c9a:	68fb      	ldr	r3, [r7, #12]
 8018c9c:	9300      	str	r3, [sp, #0]
 8018c9e:	4603      	mov	r3, r0
 8018ca0:	2000      	movs	r0, #0
 8018ca2:	f7ff fe0f 	bl	80188c4 <tcp_pbuf_prealloc>
 8018ca6:	6578      	str	r0, [r7, #84]	@ 0x54
 8018ca8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018caa:	2b00      	cmp	r3, #0
 8018cac:	f000 8225 	beq.w	80190fa <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8018cb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018cb2:	6858      	ldr	r0, [r3, #4]
 8018cb4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8018cb8:	68ba      	ldr	r2, [r7, #8]
 8018cba:	4413      	add	r3, r2
 8018cbc:	8bfa      	ldrh	r2, [r7, #30]
 8018cbe:	4619      	mov	r1, r3
 8018cc0:	f005 fc17 	bl	801e4f2 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8018cc4:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8018cc6:	f7fb fa37 	bl	8014138 <pbuf_clen>
 8018cca:	4603      	mov	r3, r0
 8018ccc:	461a      	mov	r2, r3
 8018cce:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8018cd2:	4413      	add	r3, r2
 8018cd4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8018cd8:	e041      	b.n	8018d5e <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8018cda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018cdc:	685b      	ldr	r3, [r3, #4]
 8018cde:	637b      	str	r3, [r7, #52]	@ 0x34
 8018ce0:	e002      	b.n	8018ce8 <tcp_write+0x23c>
 8018ce2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018ce4:	681b      	ldr	r3, [r3, #0]
 8018ce6:	637b      	str	r3, [r7, #52]	@ 0x34
 8018ce8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018cea:	681b      	ldr	r3, [r3, #0]
 8018cec:	2b00      	cmp	r3, #0
 8018cee:	d1f8      	bne.n	8018ce2 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8018cf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018cf2:	7b1b      	ldrb	r3, [r3, #12]
 8018cf4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8018cf8:	2b00      	cmp	r3, #0
 8018cfa:	d115      	bne.n	8018d28 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8018cfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018cfe:	685b      	ldr	r3, [r3, #4]
 8018d00:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8018d02:	8952      	ldrh	r2, [r2, #10]
 8018d04:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8018d06:	68ba      	ldr	r2, [r7, #8]
 8018d08:	429a      	cmp	r2, r3
 8018d0a:	d10d      	bne.n	8018d28 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8018d0c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8018d10:	2b00      	cmp	r3, #0
 8018d12:	d006      	beq.n	8018d22 <tcp_write+0x276>
 8018d14:	4b1c      	ldr	r3, [pc, #112]	@ (8018d88 <tcp_write+0x2dc>)
 8018d16:	f240 2231 	movw	r2, #561	@ 0x231
 8018d1a:	4922      	ldr	r1, [pc, #136]	@ (8018da4 <tcp_write+0x2f8>)
 8018d1c:	481c      	ldr	r0, [pc, #112]	@ (8018d90 <tcp_write+0x2e4>)
 8018d1e:	f005 fa35 	bl	801e18c <iprintf>
          extendlen = seglen;
 8018d22:	8bfb      	ldrh	r3, [r7, #30]
 8018d24:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8018d26:	e01a      	b.n	8018d5e <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8018d28:	8bfb      	ldrh	r3, [r7, #30]
 8018d2a:	2201      	movs	r2, #1
 8018d2c:	4619      	mov	r1, r3
 8018d2e:	2000      	movs	r0, #0
 8018d30:	f7fa fe90 	bl	8013a54 <pbuf_alloc>
 8018d34:	6578      	str	r0, [r7, #84]	@ 0x54
 8018d36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018d38:	2b00      	cmp	r3, #0
 8018d3a:	f000 81e0 	beq.w	80190fe <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8018d3e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8018d42:	68ba      	ldr	r2, [r7, #8]
 8018d44:	441a      	add	r2, r3
 8018d46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018d48:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8018d4a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8018d4c:	f7fb f9f4 	bl	8014138 <pbuf_clen>
 8018d50:	4603      	mov	r3, r0
 8018d52:	461a      	mov	r2, r3
 8018d54:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8018d58:	4413      	add	r3, r2
 8018d5a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8018d5e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8018d62:	8bfb      	ldrh	r3, [r7, #30]
 8018d64:	4413      	add	r3, r2
 8018d66:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8018d6a:	e0dc      	b.n	8018f26 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8018d6c:	68fb      	ldr	r3, [r7, #12]
 8018d6e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8018d72:	2b00      	cmp	r3, #0
 8018d74:	f000 80d7 	beq.w	8018f26 <tcp_write+0x47a>
 8018d78:	4b03      	ldr	r3, [pc, #12]	@ (8018d88 <tcp_write+0x2dc>)
 8018d7a:	f240 224a 	movw	r2, #586	@ 0x24a
 8018d7e:	490a      	ldr	r1, [pc, #40]	@ (8018da8 <tcp_write+0x2fc>)
 8018d80:	4803      	ldr	r0, [pc, #12]	@ (8018d90 <tcp_write+0x2e4>)
 8018d82:	f005 fa03 	bl	801e18c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8018d86:	e0ce      	b.n	8018f26 <tcp_write+0x47a>
 8018d88:	080228f0 	.word	0x080228f0
 8018d8c:	08022a90 	.word	0x08022a90
 8018d90:	08022944 	.word	0x08022944
 8018d94:	08022aa8 	.word	0x08022aa8
 8018d98:	08022adc 	.word	0x08022adc
 8018d9c:	08022af4 	.word	0x08022af4
 8018da0:	08022b14 	.word	0x08022b14
 8018da4:	08022b34 	.word	0x08022b34
 8018da8:	08022b60 	.word	0x08022b60
    struct pbuf *p;
    u16_t left = len - pos;
 8018dac:	88fa      	ldrh	r2, [r7, #6]
 8018dae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8018db2:	1ad3      	subs	r3, r2, r3
 8018db4:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8018db6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8018dba:	b29b      	uxth	r3, r3
 8018dbc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8018dbe:	1ad3      	subs	r3, r2, r3
 8018dc0:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8018dc2:	8b7a      	ldrh	r2, [r7, #26]
 8018dc4:	8bbb      	ldrh	r3, [r7, #28]
 8018dc6:	4293      	cmp	r3, r2
 8018dc8:	bf28      	it	cs
 8018dca:	4613      	movcs	r3, r2
 8018dcc:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8018dce:	797b      	ldrb	r3, [r7, #5]
 8018dd0:	f003 0301 	and.w	r3, r3, #1
 8018dd4:	2b00      	cmp	r3, #0
 8018dd6:	d036      	beq.n	8018e46 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8018dd8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8018ddc:	b29a      	uxth	r2, r3
 8018dde:	8b3b      	ldrh	r3, [r7, #24]
 8018de0:	4413      	add	r3, r2
 8018de2:	b299      	uxth	r1, r3
 8018de4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018de6:	2b00      	cmp	r3, #0
 8018de8:	bf0c      	ite	eq
 8018dea:	2301      	moveq	r3, #1
 8018dec:	2300      	movne	r3, #0
 8018dee:	b2db      	uxtb	r3, r3
 8018df0:	f107 0012 	add.w	r0, r7, #18
 8018df4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8018df6:	9302      	str	r3, [sp, #8]
 8018df8:	797b      	ldrb	r3, [r7, #5]
 8018dfa:	9301      	str	r3, [sp, #4]
 8018dfc:	68fb      	ldr	r3, [r7, #12]
 8018dfe:	9300      	str	r3, [sp, #0]
 8018e00:	4603      	mov	r3, r0
 8018e02:	2036      	movs	r0, #54	@ 0x36
 8018e04:	f7ff fd5e 	bl	80188c4 <tcp_pbuf_prealloc>
 8018e08:	6338      	str	r0, [r7, #48]	@ 0x30
 8018e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018e0c:	2b00      	cmp	r3, #0
 8018e0e:	f000 8178 	beq.w	8019102 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8018e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018e14:	895b      	ldrh	r3, [r3, #10]
 8018e16:	8b3a      	ldrh	r2, [r7, #24]
 8018e18:	429a      	cmp	r2, r3
 8018e1a:	d906      	bls.n	8018e2a <tcp_write+0x37e>
 8018e1c:	4b8c      	ldr	r3, [pc, #560]	@ (8019050 <tcp_write+0x5a4>)
 8018e1e:	f240 2266 	movw	r2, #614	@ 0x266
 8018e22:	498c      	ldr	r1, [pc, #560]	@ (8019054 <tcp_write+0x5a8>)
 8018e24:	488c      	ldr	r0, [pc, #560]	@ (8019058 <tcp_write+0x5ac>)
 8018e26:	f005 f9b1 	bl	801e18c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8018e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018e2c:	685a      	ldr	r2, [r3, #4]
 8018e2e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8018e32:	18d0      	adds	r0, r2, r3
 8018e34:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8018e38:	68ba      	ldr	r2, [r7, #8]
 8018e3a:	4413      	add	r3, r2
 8018e3c:	8b3a      	ldrh	r2, [r7, #24]
 8018e3e:	4619      	mov	r1, r3
 8018e40:	f005 fb57 	bl	801e4f2 <memcpy>
 8018e44:	e02f      	b.n	8018ea6 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8018e46:	8a7b      	ldrh	r3, [r7, #18]
 8018e48:	2b00      	cmp	r3, #0
 8018e4a:	d006      	beq.n	8018e5a <tcp_write+0x3ae>
 8018e4c:	4b80      	ldr	r3, [pc, #512]	@ (8019050 <tcp_write+0x5a4>)
 8018e4e:	f240 2271 	movw	r2, #625	@ 0x271
 8018e52:	4982      	ldr	r1, [pc, #520]	@ (801905c <tcp_write+0x5b0>)
 8018e54:	4880      	ldr	r0, [pc, #512]	@ (8019058 <tcp_write+0x5ac>)
 8018e56:	f005 f999 	bl	801e18c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8018e5a:	8b3b      	ldrh	r3, [r7, #24]
 8018e5c:	2201      	movs	r2, #1
 8018e5e:	4619      	mov	r1, r3
 8018e60:	2036      	movs	r0, #54	@ 0x36
 8018e62:	f7fa fdf7 	bl	8013a54 <pbuf_alloc>
 8018e66:	6178      	str	r0, [r7, #20]
 8018e68:	697b      	ldr	r3, [r7, #20]
 8018e6a:	2b00      	cmp	r3, #0
 8018e6c:	f000 814b 	beq.w	8019106 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8018e70:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8018e74:	68ba      	ldr	r2, [r7, #8]
 8018e76:	441a      	add	r2, r3
 8018e78:	697b      	ldr	r3, [r7, #20]
 8018e7a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8018e7c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8018e80:	b29b      	uxth	r3, r3
 8018e82:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8018e86:	4619      	mov	r1, r3
 8018e88:	2036      	movs	r0, #54	@ 0x36
 8018e8a:	f7fa fde3 	bl	8013a54 <pbuf_alloc>
 8018e8e:	6338      	str	r0, [r7, #48]	@ 0x30
 8018e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018e92:	2b00      	cmp	r3, #0
 8018e94:	d103      	bne.n	8018e9e <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8018e96:	6978      	ldr	r0, [r7, #20]
 8018e98:	f7fb f8c0 	bl	801401c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8018e9c:	e136      	b.n	801910c <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8018e9e:	6979      	ldr	r1, [r7, #20]
 8018ea0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8018ea2:	f7fb f989 	bl	80141b8 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8018ea6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8018ea8:	f7fb f946 	bl	8014138 <pbuf_clen>
 8018eac:	4603      	mov	r3, r0
 8018eae:	461a      	mov	r2, r3
 8018eb0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8018eb4:	4413      	add	r3, r2
 8018eb6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8018eba:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8018ebe:	2b09      	cmp	r3, #9
 8018ec0:	d903      	bls.n	8018eca <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8018ec2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8018ec4:	f7fb f8aa 	bl	801401c <pbuf_free>
      goto memerr;
 8018ec8:	e120      	b.n	801910c <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8018eca:	68fb      	ldr	r3, [r7, #12]
 8018ecc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8018ece:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8018ed2:	441a      	add	r2, r3
 8018ed4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8018ed8:	9300      	str	r3, [sp, #0]
 8018eda:	4613      	mov	r3, r2
 8018edc:	2200      	movs	r2, #0
 8018ede:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8018ee0:	68f8      	ldr	r0, [r7, #12]
 8018ee2:	f7ff fc53 	bl	801878c <tcp_create_segment>
 8018ee6:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8018ee8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018eea:	2b00      	cmp	r3, #0
 8018eec:	f000 810d 	beq.w	801910a <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8018ef0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018ef2:	2b00      	cmp	r3, #0
 8018ef4:	d102      	bne.n	8018efc <tcp_write+0x450>
      queue = seg;
 8018ef6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018ef8:	647b      	str	r3, [r7, #68]	@ 0x44
 8018efa:	e00c      	b.n	8018f16 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8018efc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018efe:	2b00      	cmp	r3, #0
 8018f00:	d106      	bne.n	8018f10 <tcp_write+0x464>
 8018f02:	4b53      	ldr	r3, [pc, #332]	@ (8019050 <tcp_write+0x5a4>)
 8018f04:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8018f08:	4955      	ldr	r1, [pc, #340]	@ (8019060 <tcp_write+0x5b4>)
 8018f0a:	4853      	ldr	r0, [pc, #332]	@ (8019058 <tcp_write+0x5ac>)
 8018f0c:	f005 f93e 	bl	801e18c <iprintf>
      prev_seg->next = seg;
 8018f10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018f12:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8018f14:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8018f16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018f18:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8018f1a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8018f1e:	8b3b      	ldrh	r3, [r7, #24]
 8018f20:	4413      	add	r3, r2
 8018f22:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 8018f26:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8018f2a:	88fb      	ldrh	r3, [r7, #6]
 8018f2c:	429a      	cmp	r2, r3
 8018f2e:	f4ff af3d 	bcc.w	8018dac <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8018f32:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8018f34:	2b00      	cmp	r3, #0
 8018f36:	d02c      	beq.n	8018f92 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8018f38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018f3a:	685b      	ldr	r3, [r3, #4]
 8018f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018f3e:	e01e      	b.n	8018f7e <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8018f40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018f42:	891a      	ldrh	r2, [r3, #8]
 8018f44:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8018f46:	4413      	add	r3, r2
 8018f48:	b29a      	uxth	r2, r3
 8018f4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018f4c:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8018f4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018f50:	681b      	ldr	r3, [r3, #0]
 8018f52:	2b00      	cmp	r3, #0
 8018f54:	d110      	bne.n	8018f78 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8018f56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018f58:	685b      	ldr	r3, [r3, #4]
 8018f5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8018f5c:	8952      	ldrh	r2, [r2, #10]
 8018f5e:	4413      	add	r3, r2
 8018f60:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8018f62:	68b9      	ldr	r1, [r7, #8]
 8018f64:	4618      	mov	r0, r3
 8018f66:	f005 fac4 	bl	801e4f2 <memcpy>
        p->len += oversize_used;
 8018f6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018f6c:	895a      	ldrh	r2, [r3, #10]
 8018f6e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8018f70:	4413      	add	r3, r2
 8018f72:	b29a      	uxth	r2, r3
 8018f74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018f76:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8018f78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018f7a:	681b      	ldr	r3, [r3, #0]
 8018f7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018f7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018f80:	2b00      	cmp	r3, #0
 8018f82:	d1dd      	bne.n	8018f40 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8018f84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018f86:	891a      	ldrh	r2, [r3, #8]
 8018f88:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8018f8a:	4413      	add	r3, r2
 8018f8c:	b29a      	uxth	r2, r3
 8018f8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018f90:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8018f92:	8a7a      	ldrh	r2, [r7, #18]
 8018f94:	68fb      	ldr	r3, [r7, #12]
 8018f96:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8018f9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018f9c:	2b00      	cmp	r3, #0
 8018f9e:	d018      	beq.n	8018fd2 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8018fa0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018fa2:	2b00      	cmp	r3, #0
 8018fa4:	d106      	bne.n	8018fb4 <tcp_write+0x508>
 8018fa6:	4b2a      	ldr	r3, [pc, #168]	@ (8019050 <tcp_write+0x5a4>)
 8018fa8:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 8018fac:	492d      	ldr	r1, [pc, #180]	@ (8019064 <tcp_write+0x5b8>)
 8018fae:	482a      	ldr	r0, [pc, #168]	@ (8019058 <tcp_write+0x5ac>)
 8018fb0:	f005 f8ec 	bl	801e18c <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8018fb4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018fb6:	685b      	ldr	r3, [r3, #4]
 8018fb8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8018fba:	4618      	mov	r0, r3
 8018fbc:	f7fb f8fc 	bl	80141b8 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8018fc0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018fc2:	891a      	ldrh	r2, [r3, #8]
 8018fc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018fc6:	891b      	ldrh	r3, [r3, #8]
 8018fc8:	4413      	add	r3, r2
 8018fca:	b29a      	uxth	r2, r3
 8018fcc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018fce:	811a      	strh	r2, [r3, #8]
 8018fd0:	e037      	b.n	8019042 <tcp_write+0x596>
  } else if (extendlen > 0) {
 8018fd2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8018fd4:	2b00      	cmp	r3, #0
 8018fd6:	d034      	beq.n	8019042 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8018fd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018fda:	2b00      	cmp	r3, #0
 8018fdc:	d003      	beq.n	8018fe6 <tcp_write+0x53a>
 8018fde:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018fe0:	685b      	ldr	r3, [r3, #4]
 8018fe2:	2b00      	cmp	r3, #0
 8018fe4:	d106      	bne.n	8018ff4 <tcp_write+0x548>
 8018fe6:	4b1a      	ldr	r3, [pc, #104]	@ (8019050 <tcp_write+0x5a4>)
 8018fe8:	f240 22e6 	movw	r2, #742	@ 0x2e6
 8018fec:	491e      	ldr	r1, [pc, #120]	@ (8019068 <tcp_write+0x5bc>)
 8018fee:	481a      	ldr	r0, [pc, #104]	@ (8019058 <tcp_write+0x5ac>)
 8018ff0:	f005 f8cc 	bl	801e18c <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8018ff4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018ff6:	685b      	ldr	r3, [r3, #4]
 8018ff8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018ffa:	e009      	b.n	8019010 <tcp_write+0x564>
      p->tot_len += extendlen;
 8018ffc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018ffe:	891a      	ldrh	r2, [r3, #8]
 8019000:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8019002:	4413      	add	r3, r2
 8019004:	b29a      	uxth	r2, r3
 8019006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019008:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801900a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801900c:	681b      	ldr	r3, [r3, #0]
 801900e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019012:	681b      	ldr	r3, [r3, #0]
 8019014:	2b00      	cmp	r3, #0
 8019016:	d1f1      	bne.n	8018ffc <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8019018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801901a:	891a      	ldrh	r2, [r3, #8]
 801901c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801901e:	4413      	add	r3, r2
 8019020:	b29a      	uxth	r2, r3
 8019022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019024:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8019026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019028:	895a      	ldrh	r2, [r3, #10]
 801902a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801902c:	4413      	add	r3, r2
 801902e:	b29a      	uxth	r2, r3
 8019030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019032:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8019034:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019036:	891a      	ldrh	r2, [r3, #8]
 8019038:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801903a:	4413      	add	r3, r2
 801903c:	b29a      	uxth	r2, r3
 801903e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019040:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8019042:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019044:	2b00      	cmp	r3, #0
 8019046:	d111      	bne.n	801906c <tcp_write+0x5c0>
    pcb->unsent = queue;
 8019048:	68fb      	ldr	r3, [r7, #12]
 801904a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801904c:	66da      	str	r2, [r3, #108]	@ 0x6c
 801904e:	e010      	b.n	8019072 <tcp_write+0x5c6>
 8019050:	080228f0 	.word	0x080228f0
 8019054:	08022b90 	.word	0x08022b90
 8019058:	08022944 	.word	0x08022944
 801905c:	08022bd0 	.word	0x08022bd0
 8019060:	08022be0 	.word	0x08022be0
 8019064:	08022bf4 	.word	0x08022bf4
 8019068:	08022c2c 	.word	0x08022c2c
  } else {
    last_unsent->next = queue;
 801906c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801906e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8019070:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8019072:	68fb      	ldr	r3, [r7, #12]
 8019074:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8019076:	88fb      	ldrh	r3, [r7, #6]
 8019078:	441a      	add	r2, r3
 801907a:	68fb      	ldr	r3, [r7, #12]
 801907c:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 801907e:	68fb      	ldr	r3, [r7, #12]
 8019080:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8019084:	88fb      	ldrh	r3, [r7, #6]
 8019086:	1ad3      	subs	r3, r2, r3
 8019088:	b29a      	uxth	r2, r3
 801908a:	68fb      	ldr	r3, [r7, #12]
 801908c:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 8019090:	68fb      	ldr	r3, [r7, #12]
 8019092:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8019096:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801909a:	68fb      	ldr	r3, [r7, #12]
 801909c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80190a0:	2b00      	cmp	r3, #0
 80190a2:	d00e      	beq.n	80190c2 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 80190a4:	68fb      	ldr	r3, [r7, #12]
 80190a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80190a8:	2b00      	cmp	r3, #0
 80190aa:	d10a      	bne.n	80190c2 <tcp_write+0x616>
 80190ac:	68fb      	ldr	r3, [r7, #12]
 80190ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80190b0:	2b00      	cmp	r3, #0
 80190b2:	d106      	bne.n	80190c2 <tcp_write+0x616>
 80190b4:	4b2c      	ldr	r3, [pc, #176]	@ (8019168 <tcp_write+0x6bc>)
 80190b6:	f240 3212 	movw	r2, #786	@ 0x312
 80190ba:	492c      	ldr	r1, [pc, #176]	@ (801916c <tcp_write+0x6c0>)
 80190bc:	482c      	ldr	r0, [pc, #176]	@ (8019170 <tcp_write+0x6c4>)
 80190be:	f005 f865 	bl	801e18c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 80190c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80190c4:	2b00      	cmp	r3, #0
 80190c6:	d016      	beq.n	80190f6 <tcp_write+0x64a>
 80190c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80190ca:	68db      	ldr	r3, [r3, #12]
 80190cc:	2b00      	cmp	r3, #0
 80190ce:	d012      	beq.n	80190f6 <tcp_write+0x64a>
 80190d0:	797b      	ldrb	r3, [r7, #5]
 80190d2:	f003 0302 	and.w	r3, r3, #2
 80190d6:	2b00      	cmp	r3, #0
 80190d8:	d10d      	bne.n	80190f6 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80190da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80190dc:	68db      	ldr	r3, [r3, #12]
 80190de:	899b      	ldrh	r3, [r3, #12]
 80190e0:	b29c      	uxth	r4, r3
 80190e2:	2008      	movs	r0, #8
 80190e4:	f7f9 fbda 	bl	801289c <lwip_htons>
 80190e8:	4603      	mov	r3, r0
 80190ea:	461a      	mov	r2, r3
 80190ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80190ee:	68db      	ldr	r3, [r3, #12]
 80190f0:	4322      	orrs	r2, r4
 80190f2:	b292      	uxth	r2, r2
 80190f4:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 80190f6:	2300      	movs	r3, #0
 80190f8:	e031      	b.n	801915e <tcp_write+0x6b2>
          goto memerr;
 80190fa:	bf00      	nop
 80190fc:	e006      	b.n	801910c <tcp_write+0x660>
            goto memerr;
 80190fe:	bf00      	nop
 8019100:	e004      	b.n	801910c <tcp_write+0x660>
        goto memerr;
 8019102:	bf00      	nop
 8019104:	e002      	b.n	801910c <tcp_write+0x660>
        goto memerr;
 8019106:	bf00      	nop
 8019108:	e000      	b.n	801910c <tcp_write+0x660>
      goto memerr;
 801910a:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801910c:	68fb      	ldr	r3, [r7, #12]
 801910e:	8b5b      	ldrh	r3, [r3, #26]
 8019110:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019114:	b29a      	uxth	r2, r3
 8019116:	68fb      	ldr	r3, [r7, #12]
 8019118:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801911a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801911c:	2b00      	cmp	r3, #0
 801911e:	d002      	beq.n	8019126 <tcp_write+0x67a>
    pbuf_free(concat_p);
 8019120:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8019122:	f7fa ff7b 	bl	801401c <pbuf_free>
  }
  if (queue != NULL) {
 8019126:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019128:	2b00      	cmp	r3, #0
 801912a:	d002      	beq.n	8019132 <tcp_write+0x686>
    tcp_segs_free(queue);
 801912c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801912e:	f7fc fb9b 	bl	8015868 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8019132:	68fb      	ldr	r3, [r7, #12]
 8019134:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019138:	2b00      	cmp	r3, #0
 801913a:	d00e      	beq.n	801915a <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801913c:	68fb      	ldr	r3, [r7, #12]
 801913e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019140:	2b00      	cmp	r3, #0
 8019142:	d10a      	bne.n	801915a <tcp_write+0x6ae>
 8019144:	68fb      	ldr	r3, [r7, #12]
 8019146:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019148:	2b00      	cmp	r3, #0
 801914a:	d106      	bne.n	801915a <tcp_write+0x6ae>
 801914c:	4b06      	ldr	r3, [pc, #24]	@ (8019168 <tcp_write+0x6bc>)
 801914e:	f240 3227 	movw	r2, #807	@ 0x327
 8019152:	4906      	ldr	r1, [pc, #24]	@ (801916c <tcp_write+0x6c0>)
 8019154:	4806      	ldr	r0, [pc, #24]	@ (8019170 <tcp_write+0x6c4>)
 8019156:	f005 f819 	bl	801e18c <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801915a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801915e:	4618      	mov	r0, r3
 8019160:	375c      	adds	r7, #92	@ 0x5c
 8019162:	46bd      	mov	sp, r7
 8019164:	bd90      	pop	{r4, r7, pc}
 8019166:	bf00      	nop
 8019168:	080228f0 	.word	0x080228f0
 801916c:	08022c64 	.word	0x08022c64
 8019170:	08022944 	.word	0x08022944

08019174 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8019174:	b590      	push	{r4, r7, lr}
 8019176:	b08b      	sub	sp, #44	@ 0x2c
 8019178:	af02      	add	r7, sp, #8
 801917a:	6078      	str	r0, [r7, #4]
 801917c:	460b      	mov	r3, r1
 801917e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8019180:	2300      	movs	r3, #0
 8019182:	61fb      	str	r3, [r7, #28]
 8019184:	2300      	movs	r3, #0
 8019186:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8019188:	2300      	movs	r3, #0
 801918a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801918c:	687b      	ldr	r3, [r7, #4]
 801918e:	2b00      	cmp	r3, #0
 8019190:	d106      	bne.n	80191a0 <tcp_split_unsent_seg+0x2c>
 8019192:	4b95      	ldr	r3, [pc, #596]	@ (80193e8 <tcp_split_unsent_seg+0x274>)
 8019194:	f240 324b 	movw	r2, #843	@ 0x34b
 8019198:	4994      	ldr	r1, [pc, #592]	@ (80193ec <tcp_split_unsent_seg+0x278>)
 801919a:	4895      	ldr	r0, [pc, #596]	@ (80193f0 <tcp_split_unsent_seg+0x27c>)
 801919c:	f004 fff6 	bl	801e18c <iprintf>

  useg = pcb->unsent;
 80191a0:	687b      	ldr	r3, [r7, #4]
 80191a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80191a4:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80191a6:	697b      	ldr	r3, [r7, #20]
 80191a8:	2b00      	cmp	r3, #0
 80191aa:	d102      	bne.n	80191b2 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80191ac:	f04f 33ff 	mov.w	r3, #4294967295
 80191b0:	e116      	b.n	80193e0 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80191b2:	887b      	ldrh	r3, [r7, #2]
 80191b4:	2b00      	cmp	r3, #0
 80191b6:	d109      	bne.n	80191cc <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80191b8:	4b8b      	ldr	r3, [pc, #556]	@ (80193e8 <tcp_split_unsent_seg+0x274>)
 80191ba:	f240 3253 	movw	r2, #851	@ 0x353
 80191be:	498d      	ldr	r1, [pc, #564]	@ (80193f4 <tcp_split_unsent_seg+0x280>)
 80191c0:	488b      	ldr	r0, [pc, #556]	@ (80193f0 <tcp_split_unsent_seg+0x27c>)
 80191c2:	f004 ffe3 	bl	801e18c <iprintf>
    return ERR_VAL;
 80191c6:	f06f 0305 	mvn.w	r3, #5
 80191ca:	e109      	b.n	80193e0 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80191cc:	697b      	ldr	r3, [r7, #20]
 80191ce:	891b      	ldrh	r3, [r3, #8]
 80191d0:	887a      	ldrh	r2, [r7, #2]
 80191d2:	429a      	cmp	r2, r3
 80191d4:	d301      	bcc.n	80191da <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80191d6:	2300      	movs	r3, #0
 80191d8:	e102      	b.n	80193e0 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80191da:	687b      	ldr	r3, [r7, #4]
 80191dc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80191de:	887a      	ldrh	r2, [r7, #2]
 80191e0:	429a      	cmp	r2, r3
 80191e2:	d906      	bls.n	80191f2 <tcp_split_unsent_seg+0x7e>
 80191e4:	4b80      	ldr	r3, [pc, #512]	@ (80193e8 <tcp_split_unsent_seg+0x274>)
 80191e6:	f240 325b 	movw	r2, #859	@ 0x35b
 80191ea:	4983      	ldr	r1, [pc, #524]	@ (80193f8 <tcp_split_unsent_seg+0x284>)
 80191ec:	4880      	ldr	r0, [pc, #512]	@ (80193f0 <tcp_split_unsent_seg+0x27c>)
 80191ee:	f004 ffcd 	bl	801e18c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80191f2:	697b      	ldr	r3, [r7, #20]
 80191f4:	891b      	ldrh	r3, [r3, #8]
 80191f6:	2b00      	cmp	r3, #0
 80191f8:	d106      	bne.n	8019208 <tcp_split_unsent_seg+0x94>
 80191fa:	4b7b      	ldr	r3, [pc, #492]	@ (80193e8 <tcp_split_unsent_seg+0x274>)
 80191fc:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8019200:	497e      	ldr	r1, [pc, #504]	@ (80193fc <tcp_split_unsent_seg+0x288>)
 8019202:	487b      	ldr	r0, [pc, #492]	@ (80193f0 <tcp_split_unsent_seg+0x27c>)
 8019204:	f004 ffc2 	bl	801e18c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8019208:	697b      	ldr	r3, [r7, #20]
 801920a:	7a9b      	ldrb	r3, [r3, #10]
 801920c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801920e:	7bfb      	ldrb	r3, [r7, #15]
 8019210:	009b      	lsls	r3, r3, #2
 8019212:	b2db      	uxtb	r3, r3
 8019214:	f003 0304 	and.w	r3, r3, #4
 8019218:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801921a:	697b      	ldr	r3, [r7, #20]
 801921c:	891a      	ldrh	r2, [r3, #8]
 801921e:	887b      	ldrh	r3, [r7, #2]
 8019220:	1ad3      	subs	r3, r2, r3
 8019222:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8019224:	7bbb      	ldrb	r3, [r7, #14]
 8019226:	b29a      	uxth	r2, r3
 8019228:	89bb      	ldrh	r3, [r7, #12]
 801922a:	4413      	add	r3, r2
 801922c:	b29b      	uxth	r3, r3
 801922e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8019232:	4619      	mov	r1, r3
 8019234:	2036      	movs	r0, #54	@ 0x36
 8019236:	f7fa fc0d 	bl	8013a54 <pbuf_alloc>
 801923a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801923c:	693b      	ldr	r3, [r7, #16]
 801923e:	2b00      	cmp	r3, #0
 8019240:	f000 80b7 	beq.w	80193b2 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8019244:	697b      	ldr	r3, [r7, #20]
 8019246:	685b      	ldr	r3, [r3, #4]
 8019248:	891a      	ldrh	r2, [r3, #8]
 801924a:	697b      	ldr	r3, [r7, #20]
 801924c:	891b      	ldrh	r3, [r3, #8]
 801924e:	1ad3      	subs	r3, r2, r3
 8019250:	b29a      	uxth	r2, r3
 8019252:	887b      	ldrh	r3, [r7, #2]
 8019254:	4413      	add	r3, r2
 8019256:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8019258:	697b      	ldr	r3, [r7, #20]
 801925a:	6858      	ldr	r0, [r3, #4]
 801925c:	693b      	ldr	r3, [r7, #16]
 801925e:	685a      	ldr	r2, [r3, #4]
 8019260:	7bbb      	ldrb	r3, [r7, #14]
 8019262:	18d1      	adds	r1, r2, r3
 8019264:	897b      	ldrh	r3, [r7, #10]
 8019266:	89ba      	ldrh	r2, [r7, #12]
 8019268:	f7fb f8ce 	bl	8014408 <pbuf_copy_partial>
 801926c:	4603      	mov	r3, r0
 801926e:	461a      	mov	r2, r3
 8019270:	89bb      	ldrh	r3, [r7, #12]
 8019272:	4293      	cmp	r3, r2
 8019274:	f040 809f 	bne.w	80193b6 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8019278:	697b      	ldr	r3, [r7, #20]
 801927a:	68db      	ldr	r3, [r3, #12]
 801927c:	899b      	ldrh	r3, [r3, #12]
 801927e:	b29b      	uxth	r3, r3
 8019280:	4618      	mov	r0, r3
 8019282:	f7f9 fb0b 	bl	801289c <lwip_htons>
 8019286:	4603      	mov	r3, r0
 8019288:	b2db      	uxtb	r3, r3
 801928a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801928e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8019290:	2300      	movs	r3, #0
 8019292:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8019294:	7efb      	ldrb	r3, [r7, #27]
 8019296:	f003 0308 	and.w	r3, r3, #8
 801929a:	2b00      	cmp	r3, #0
 801929c:	d007      	beq.n	80192ae <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801929e:	7efb      	ldrb	r3, [r7, #27]
 80192a0:	f023 0308 	bic.w	r3, r3, #8
 80192a4:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80192a6:	7ebb      	ldrb	r3, [r7, #26]
 80192a8:	f043 0308 	orr.w	r3, r3, #8
 80192ac:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80192ae:	7efb      	ldrb	r3, [r7, #27]
 80192b0:	f003 0301 	and.w	r3, r3, #1
 80192b4:	2b00      	cmp	r3, #0
 80192b6:	d007      	beq.n	80192c8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80192b8:	7efb      	ldrb	r3, [r7, #27]
 80192ba:	f023 0301 	bic.w	r3, r3, #1
 80192be:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80192c0:	7ebb      	ldrb	r3, [r7, #26]
 80192c2:	f043 0301 	orr.w	r3, r3, #1
 80192c6:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80192c8:	697b      	ldr	r3, [r7, #20]
 80192ca:	68db      	ldr	r3, [r3, #12]
 80192cc:	685b      	ldr	r3, [r3, #4]
 80192ce:	4618      	mov	r0, r3
 80192d0:	f7f9 fafa 	bl	80128c8 <lwip_htonl>
 80192d4:	4602      	mov	r2, r0
 80192d6:	887b      	ldrh	r3, [r7, #2]
 80192d8:	18d1      	adds	r1, r2, r3
 80192da:	7eba      	ldrb	r2, [r7, #26]
 80192dc:	7bfb      	ldrb	r3, [r7, #15]
 80192de:	9300      	str	r3, [sp, #0]
 80192e0:	460b      	mov	r3, r1
 80192e2:	6939      	ldr	r1, [r7, #16]
 80192e4:	6878      	ldr	r0, [r7, #4]
 80192e6:	f7ff fa51 	bl	801878c <tcp_create_segment>
 80192ea:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80192ec:	69fb      	ldr	r3, [r7, #28]
 80192ee:	2b00      	cmp	r3, #0
 80192f0:	d063      	beq.n	80193ba <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80192f2:	697b      	ldr	r3, [r7, #20]
 80192f4:	685b      	ldr	r3, [r3, #4]
 80192f6:	4618      	mov	r0, r3
 80192f8:	f7fa ff1e 	bl	8014138 <pbuf_clen>
 80192fc:	4603      	mov	r3, r0
 80192fe:	461a      	mov	r2, r3
 8019300:	687b      	ldr	r3, [r7, #4]
 8019302:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019306:	1a9b      	subs	r3, r3, r2
 8019308:	b29a      	uxth	r2, r3
 801930a:	687b      	ldr	r3, [r7, #4]
 801930c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8019310:	697b      	ldr	r3, [r7, #20]
 8019312:	6858      	ldr	r0, [r3, #4]
 8019314:	697b      	ldr	r3, [r7, #20]
 8019316:	685b      	ldr	r3, [r3, #4]
 8019318:	891a      	ldrh	r2, [r3, #8]
 801931a:	89bb      	ldrh	r3, [r7, #12]
 801931c:	1ad3      	subs	r3, r2, r3
 801931e:	b29b      	uxth	r3, r3
 8019320:	4619      	mov	r1, r3
 8019322:	f7fa fcf5 	bl	8013d10 <pbuf_realloc>
  useg->len -= remainder;
 8019326:	697b      	ldr	r3, [r7, #20]
 8019328:	891a      	ldrh	r2, [r3, #8]
 801932a:	89bb      	ldrh	r3, [r7, #12]
 801932c:	1ad3      	subs	r3, r2, r3
 801932e:	b29a      	uxth	r2, r3
 8019330:	697b      	ldr	r3, [r7, #20]
 8019332:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8019334:	697b      	ldr	r3, [r7, #20]
 8019336:	68db      	ldr	r3, [r3, #12]
 8019338:	899b      	ldrh	r3, [r3, #12]
 801933a:	b29c      	uxth	r4, r3
 801933c:	7efb      	ldrb	r3, [r7, #27]
 801933e:	b29b      	uxth	r3, r3
 8019340:	4618      	mov	r0, r3
 8019342:	f7f9 faab 	bl	801289c <lwip_htons>
 8019346:	4603      	mov	r3, r0
 8019348:	461a      	mov	r2, r3
 801934a:	697b      	ldr	r3, [r7, #20]
 801934c:	68db      	ldr	r3, [r3, #12]
 801934e:	4322      	orrs	r2, r4
 8019350:	b292      	uxth	r2, r2
 8019352:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8019354:	697b      	ldr	r3, [r7, #20]
 8019356:	685b      	ldr	r3, [r3, #4]
 8019358:	4618      	mov	r0, r3
 801935a:	f7fa feed 	bl	8014138 <pbuf_clen>
 801935e:	4603      	mov	r3, r0
 8019360:	461a      	mov	r2, r3
 8019362:	687b      	ldr	r3, [r7, #4]
 8019364:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019368:	4413      	add	r3, r2
 801936a:	b29a      	uxth	r2, r3
 801936c:	687b      	ldr	r3, [r7, #4]
 801936e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8019372:	69fb      	ldr	r3, [r7, #28]
 8019374:	685b      	ldr	r3, [r3, #4]
 8019376:	4618      	mov	r0, r3
 8019378:	f7fa fede 	bl	8014138 <pbuf_clen>
 801937c:	4603      	mov	r3, r0
 801937e:	461a      	mov	r2, r3
 8019380:	687b      	ldr	r3, [r7, #4]
 8019382:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019386:	4413      	add	r3, r2
 8019388:	b29a      	uxth	r2, r3
 801938a:	687b      	ldr	r3, [r7, #4]
 801938c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8019390:	697b      	ldr	r3, [r7, #20]
 8019392:	681a      	ldr	r2, [r3, #0]
 8019394:	69fb      	ldr	r3, [r7, #28]
 8019396:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8019398:	697b      	ldr	r3, [r7, #20]
 801939a:	69fa      	ldr	r2, [r7, #28]
 801939c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801939e:	69fb      	ldr	r3, [r7, #28]
 80193a0:	681b      	ldr	r3, [r3, #0]
 80193a2:	2b00      	cmp	r3, #0
 80193a4:	d103      	bne.n	80193ae <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80193a6:	687b      	ldr	r3, [r7, #4]
 80193a8:	2200      	movs	r2, #0
 80193aa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80193ae:	2300      	movs	r3, #0
 80193b0:	e016      	b.n	80193e0 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80193b2:	bf00      	nop
 80193b4:	e002      	b.n	80193bc <tcp_split_unsent_seg+0x248>
    goto memerr;
 80193b6:	bf00      	nop
 80193b8:	e000      	b.n	80193bc <tcp_split_unsent_seg+0x248>
    goto memerr;
 80193ba:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80193bc:	69fb      	ldr	r3, [r7, #28]
 80193be:	2b00      	cmp	r3, #0
 80193c0:	d006      	beq.n	80193d0 <tcp_split_unsent_seg+0x25c>
 80193c2:	4b09      	ldr	r3, [pc, #36]	@ (80193e8 <tcp_split_unsent_seg+0x274>)
 80193c4:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 80193c8:	490d      	ldr	r1, [pc, #52]	@ (8019400 <tcp_split_unsent_seg+0x28c>)
 80193ca:	4809      	ldr	r0, [pc, #36]	@ (80193f0 <tcp_split_unsent_seg+0x27c>)
 80193cc:	f004 fede 	bl	801e18c <iprintf>
  if (p != NULL) {
 80193d0:	693b      	ldr	r3, [r7, #16]
 80193d2:	2b00      	cmp	r3, #0
 80193d4:	d002      	beq.n	80193dc <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80193d6:	6938      	ldr	r0, [r7, #16]
 80193d8:	f7fa fe20 	bl	801401c <pbuf_free>
  }

  return ERR_MEM;
 80193dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80193e0:	4618      	mov	r0, r3
 80193e2:	3724      	adds	r7, #36	@ 0x24
 80193e4:	46bd      	mov	sp, r7
 80193e6:	bd90      	pop	{r4, r7, pc}
 80193e8:	080228f0 	.word	0x080228f0
 80193ec:	08022c84 	.word	0x08022c84
 80193f0:	08022944 	.word	0x08022944
 80193f4:	08022ca8 	.word	0x08022ca8
 80193f8:	08022ccc 	.word	0x08022ccc
 80193fc:	08022cdc 	.word	0x08022cdc
 8019400:	08022cec 	.word	0x08022cec

08019404 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8019404:	b590      	push	{r4, r7, lr}
 8019406:	b085      	sub	sp, #20
 8019408:	af00      	add	r7, sp, #0
 801940a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801940c:	687b      	ldr	r3, [r7, #4]
 801940e:	2b00      	cmp	r3, #0
 8019410:	d106      	bne.n	8019420 <tcp_send_fin+0x1c>
 8019412:	4b21      	ldr	r3, [pc, #132]	@ (8019498 <tcp_send_fin+0x94>)
 8019414:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8019418:	4920      	ldr	r1, [pc, #128]	@ (801949c <tcp_send_fin+0x98>)
 801941a:	4821      	ldr	r0, [pc, #132]	@ (80194a0 <tcp_send_fin+0x9c>)
 801941c:	f004 feb6 	bl	801e18c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8019420:	687b      	ldr	r3, [r7, #4]
 8019422:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019424:	2b00      	cmp	r3, #0
 8019426:	d02e      	beq.n	8019486 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8019428:	687b      	ldr	r3, [r7, #4]
 801942a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801942c:	60fb      	str	r3, [r7, #12]
 801942e:	e002      	b.n	8019436 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8019430:	68fb      	ldr	r3, [r7, #12]
 8019432:	681b      	ldr	r3, [r3, #0]
 8019434:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8019436:	68fb      	ldr	r3, [r7, #12]
 8019438:	681b      	ldr	r3, [r3, #0]
 801943a:	2b00      	cmp	r3, #0
 801943c:	d1f8      	bne.n	8019430 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801943e:	68fb      	ldr	r3, [r7, #12]
 8019440:	68db      	ldr	r3, [r3, #12]
 8019442:	899b      	ldrh	r3, [r3, #12]
 8019444:	b29b      	uxth	r3, r3
 8019446:	4618      	mov	r0, r3
 8019448:	f7f9 fa28 	bl	801289c <lwip_htons>
 801944c:	4603      	mov	r3, r0
 801944e:	b2db      	uxtb	r3, r3
 8019450:	f003 0307 	and.w	r3, r3, #7
 8019454:	2b00      	cmp	r3, #0
 8019456:	d116      	bne.n	8019486 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8019458:	68fb      	ldr	r3, [r7, #12]
 801945a:	68db      	ldr	r3, [r3, #12]
 801945c:	899b      	ldrh	r3, [r3, #12]
 801945e:	b29c      	uxth	r4, r3
 8019460:	2001      	movs	r0, #1
 8019462:	f7f9 fa1b 	bl	801289c <lwip_htons>
 8019466:	4603      	mov	r3, r0
 8019468:	461a      	mov	r2, r3
 801946a:	68fb      	ldr	r3, [r7, #12]
 801946c:	68db      	ldr	r3, [r3, #12]
 801946e:	4322      	orrs	r2, r4
 8019470:	b292      	uxth	r2, r2
 8019472:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8019474:	687b      	ldr	r3, [r7, #4]
 8019476:	8b5b      	ldrh	r3, [r3, #26]
 8019478:	f043 0320 	orr.w	r3, r3, #32
 801947c:	b29a      	uxth	r2, r3
 801947e:	687b      	ldr	r3, [r7, #4]
 8019480:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8019482:	2300      	movs	r3, #0
 8019484:	e004      	b.n	8019490 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8019486:	2101      	movs	r1, #1
 8019488:	6878      	ldr	r0, [r7, #4]
 801948a:	f000 f80b 	bl	80194a4 <tcp_enqueue_flags>
 801948e:	4603      	mov	r3, r0
}
 8019490:	4618      	mov	r0, r3
 8019492:	3714      	adds	r7, #20
 8019494:	46bd      	mov	sp, r7
 8019496:	bd90      	pop	{r4, r7, pc}
 8019498:	080228f0 	.word	0x080228f0
 801949c:	08022cf8 	.word	0x08022cf8
 80194a0:	08022944 	.word	0x08022944

080194a4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80194a4:	b580      	push	{r7, lr}
 80194a6:	b08a      	sub	sp, #40	@ 0x28
 80194a8:	af02      	add	r7, sp, #8
 80194aa:	6078      	str	r0, [r7, #4]
 80194ac:	460b      	mov	r3, r1
 80194ae:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80194b0:	2300      	movs	r3, #0
 80194b2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80194b4:	2300      	movs	r3, #0
 80194b6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80194b8:	78fb      	ldrb	r3, [r7, #3]
 80194ba:	f003 0303 	and.w	r3, r3, #3
 80194be:	2b00      	cmp	r3, #0
 80194c0:	d106      	bne.n	80194d0 <tcp_enqueue_flags+0x2c>
 80194c2:	4b67      	ldr	r3, [pc, #412]	@ (8019660 <tcp_enqueue_flags+0x1bc>)
 80194c4:	f240 4211 	movw	r2, #1041	@ 0x411
 80194c8:	4966      	ldr	r1, [pc, #408]	@ (8019664 <tcp_enqueue_flags+0x1c0>)
 80194ca:	4867      	ldr	r0, [pc, #412]	@ (8019668 <tcp_enqueue_flags+0x1c4>)
 80194cc:	f004 fe5e 	bl	801e18c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80194d0:	687b      	ldr	r3, [r7, #4]
 80194d2:	2b00      	cmp	r3, #0
 80194d4:	d106      	bne.n	80194e4 <tcp_enqueue_flags+0x40>
 80194d6:	4b62      	ldr	r3, [pc, #392]	@ (8019660 <tcp_enqueue_flags+0x1bc>)
 80194d8:	f240 4213 	movw	r2, #1043	@ 0x413
 80194dc:	4963      	ldr	r1, [pc, #396]	@ (801966c <tcp_enqueue_flags+0x1c8>)
 80194de:	4862      	ldr	r0, [pc, #392]	@ (8019668 <tcp_enqueue_flags+0x1c4>)
 80194e0:	f004 fe54 	bl	801e18c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80194e4:	78fb      	ldrb	r3, [r7, #3]
 80194e6:	f003 0302 	and.w	r3, r3, #2
 80194ea:	2b00      	cmp	r3, #0
 80194ec:	d001      	beq.n	80194f2 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80194ee:	2301      	movs	r3, #1
 80194f0:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80194f2:	7ffb      	ldrb	r3, [r7, #31]
 80194f4:	009b      	lsls	r3, r3, #2
 80194f6:	b2db      	uxtb	r3, r3
 80194f8:	f003 0304 	and.w	r3, r3, #4
 80194fc:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80194fe:	7dfb      	ldrb	r3, [r7, #23]
 8019500:	b29b      	uxth	r3, r3
 8019502:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8019506:	4619      	mov	r1, r3
 8019508:	2036      	movs	r0, #54	@ 0x36
 801950a:	f7fa faa3 	bl	8013a54 <pbuf_alloc>
 801950e:	6138      	str	r0, [r7, #16]
 8019510:	693b      	ldr	r3, [r7, #16]
 8019512:	2b00      	cmp	r3, #0
 8019514:	d109      	bne.n	801952a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019516:	687b      	ldr	r3, [r7, #4]
 8019518:	8b5b      	ldrh	r3, [r3, #26]
 801951a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801951e:	b29a      	uxth	r2, r3
 8019520:	687b      	ldr	r3, [r7, #4]
 8019522:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8019524:	f04f 33ff 	mov.w	r3, #4294967295
 8019528:	e095      	b.n	8019656 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801952a:	693b      	ldr	r3, [r7, #16]
 801952c:	895a      	ldrh	r2, [r3, #10]
 801952e:	7dfb      	ldrb	r3, [r7, #23]
 8019530:	b29b      	uxth	r3, r3
 8019532:	429a      	cmp	r2, r3
 8019534:	d206      	bcs.n	8019544 <tcp_enqueue_flags+0xa0>
 8019536:	4b4a      	ldr	r3, [pc, #296]	@ (8019660 <tcp_enqueue_flags+0x1bc>)
 8019538:	f240 4239 	movw	r2, #1081	@ 0x439
 801953c:	494c      	ldr	r1, [pc, #304]	@ (8019670 <tcp_enqueue_flags+0x1cc>)
 801953e:	484a      	ldr	r0, [pc, #296]	@ (8019668 <tcp_enqueue_flags+0x1c4>)
 8019540:	f004 fe24 	bl	801e18c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8019544:	687b      	ldr	r3, [r7, #4]
 8019546:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8019548:	78fa      	ldrb	r2, [r7, #3]
 801954a:	7ffb      	ldrb	r3, [r7, #31]
 801954c:	9300      	str	r3, [sp, #0]
 801954e:	460b      	mov	r3, r1
 8019550:	6939      	ldr	r1, [r7, #16]
 8019552:	6878      	ldr	r0, [r7, #4]
 8019554:	f7ff f91a 	bl	801878c <tcp_create_segment>
 8019558:	60f8      	str	r0, [r7, #12]
 801955a:	68fb      	ldr	r3, [r7, #12]
 801955c:	2b00      	cmp	r3, #0
 801955e:	d109      	bne.n	8019574 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019560:	687b      	ldr	r3, [r7, #4]
 8019562:	8b5b      	ldrh	r3, [r3, #26]
 8019564:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019568:	b29a      	uxth	r2, r3
 801956a:	687b      	ldr	r3, [r7, #4]
 801956c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801956e:	f04f 33ff 	mov.w	r3, #4294967295
 8019572:	e070      	b.n	8019656 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8019574:	68fb      	ldr	r3, [r7, #12]
 8019576:	68db      	ldr	r3, [r3, #12]
 8019578:	f003 0303 	and.w	r3, r3, #3
 801957c:	2b00      	cmp	r3, #0
 801957e:	d006      	beq.n	801958e <tcp_enqueue_flags+0xea>
 8019580:	4b37      	ldr	r3, [pc, #220]	@ (8019660 <tcp_enqueue_flags+0x1bc>)
 8019582:	f240 4242 	movw	r2, #1090	@ 0x442
 8019586:	493b      	ldr	r1, [pc, #236]	@ (8019674 <tcp_enqueue_flags+0x1d0>)
 8019588:	4837      	ldr	r0, [pc, #220]	@ (8019668 <tcp_enqueue_flags+0x1c4>)
 801958a:	f004 fdff 	bl	801e18c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801958e:	68fb      	ldr	r3, [r7, #12]
 8019590:	891b      	ldrh	r3, [r3, #8]
 8019592:	2b00      	cmp	r3, #0
 8019594:	d006      	beq.n	80195a4 <tcp_enqueue_flags+0x100>
 8019596:	4b32      	ldr	r3, [pc, #200]	@ (8019660 <tcp_enqueue_flags+0x1bc>)
 8019598:	f240 4243 	movw	r2, #1091	@ 0x443
 801959c:	4936      	ldr	r1, [pc, #216]	@ (8019678 <tcp_enqueue_flags+0x1d4>)
 801959e:	4832      	ldr	r0, [pc, #200]	@ (8019668 <tcp_enqueue_flags+0x1c4>)
 80195a0:	f004 fdf4 	bl	801e18c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80195a4:	687b      	ldr	r3, [r7, #4]
 80195a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80195a8:	2b00      	cmp	r3, #0
 80195aa:	d103      	bne.n	80195b4 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80195ac:	687b      	ldr	r3, [r7, #4]
 80195ae:	68fa      	ldr	r2, [r7, #12]
 80195b0:	66da      	str	r2, [r3, #108]	@ 0x6c
 80195b2:	e00d      	b.n	80195d0 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80195b4:	687b      	ldr	r3, [r7, #4]
 80195b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80195b8:	61bb      	str	r3, [r7, #24]
 80195ba:	e002      	b.n	80195c2 <tcp_enqueue_flags+0x11e>
 80195bc:	69bb      	ldr	r3, [r7, #24]
 80195be:	681b      	ldr	r3, [r3, #0]
 80195c0:	61bb      	str	r3, [r7, #24]
 80195c2:	69bb      	ldr	r3, [r7, #24]
 80195c4:	681b      	ldr	r3, [r3, #0]
 80195c6:	2b00      	cmp	r3, #0
 80195c8:	d1f8      	bne.n	80195bc <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80195ca:	69bb      	ldr	r3, [r7, #24]
 80195cc:	68fa      	ldr	r2, [r7, #12]
 80195ce:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80195d0:	687b      	ldr	r3, [r7, #4]
 80195d2:	2200      	movs	r2, #0
 80195d4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80195d8:	78fb      	ldrb	r3, [r7, #3]
 80195da:	f003 0302 	and.w	r3, r3, #2
 80195de:	2b00      	cmp	r3, #0
 80195e0:	d104      	bne.n	80195ec <tcp_enqueue_flags+0x148>
 80195e2:	78fb      	ldrb	r3, [r7, #3]
 80195e4:	f003 0301 	and.w	r3, r3, #1
 80195e8:	2b00      	cmp	r3, #0
 80195ea:	d004      	beq.n	80195f6 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80195ec:	687b      	ldr	r3, [r7, #4]
 80195ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80195f0:	1c5a      	adds	r2, r3, #1
 80195f2:	687b      	ldr	r3, [r7, #4]
 80195f4:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80195f6:	78fb      	ldrb	r3, [r7, #3]
 80195f8:	f003 0301 	and.w	r3, r3, #1
 80195fc:	2b00      	cmp	r3, #0
 80195fe:	d006      	beq.n	801960e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8019600:	687b      	ldr	r3, [r7, #4]
 8019602:	8b5b      	ldrh	r3, [r3, #26]
 8019604:	f043 0320 	orr.w	r3, r3, #32
 8019608:	b29a      	uxth	r2, r3
 801960a:	687b      	ldr	r3, [r7, #4]
 801960c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801960e:	68fb      	ldr	r3, [r7, #12]
 8019610:	685b      	ldr	r3, [r3, #4]
 8019612:	4618      	mov	r0, r3
 8019614:	f7fa fd90 	bl	8014138 <pbuf_clen>
 8019618:	4603      	mov	r3, r0
 801961a:	461a      	mov	r2, r3
 801961c:	687b      	ldr	r3, [r7, #4]
 801961e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019622:	4413      	add	r3, r2
 8019624:	b29a      	uxth	r2, r3
 8019626:	687b      	ldr	r3, [r7, #4]
 8019628:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801962c:	687b      	ldr	r3, [r7, #4]
 801962e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019632:	2b00      	cmp	r3, #0
 8019634:	d00e      	beq.n	8019654 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8019636:	687b      	ldr	r3, [r7, #4]
 8019638:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801963a:	2b00      	cmp	r3, #0
 801963c:	d10a      	bne.n	8019654 <tcp_enqueue_flags+0x1b0>
 801963e:	687b      	ldr	r3, [r7, #4]
 8019640:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019642:	2b00      	cmp	r3, #0
 8019644:	d106      	bne.n	8019654 <tcp_enqueue_flags+0x1b0>
 8019646:	4b06      	ldr	r3, [pc, #24]	@ (8019660 <tcp_enqueue_flags+0x1bc>)
 8019648:	f240 4265 	movw	r2, #1125	@ 0x465
 801964c:	490b      	ldr	r1, [pc, #44]	@ (801967c <tcp_enqueue_flags+0x1d8>)
 801964e:	4806      	ldr	r0, [pc, #24]	@ (8019668 <tcp_enqueue_flags+0x1c4>)
 8019650:	f004 fd9c 	bl	801e18c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8019654:	2300      	movs	r3, #0
}
 8019656:	4618      	mov	r0, r3
 8019658:	3720      	adds	r7, #32
 801965a:	46bd      	mov	sp, r7
 801965c:	bd80      	pop	{r7, pc}
 801965e:	bf00      	nop
 8019660:	080228f0 	.word	0x080228f0
 8019664:	08022d14 	.word	0x08022d14
 8019668:	08022944 	.word	0x08022944
 801966c:	08022d6c 	.word	0x08022d6c
 8019670:	08022d8c 	.word	0x08022d8c
 8019674:	08022dc8 	.word	0x08022dc8
 8019678:	08022de0 	.word	0x08022de0
 801967c:	08022e0c 	.word	0x08022e0c

08019680 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8019680:	b5b0      	push	{r4, r5, r7, lr}
 8019682:	b08a      	sub	sp, #40	@ 0x28
 8019684:	af00      	add	r7, sp, #0
 8019686:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8019688:	687b      	ldr	r3, [r7, #4]
 801968a:	2b00      	cmp	r3, #0
 801968c:	d106      	bne.n	801969c <tcp_output+0x1c>
 801968e:	4b8a      	ldr	r3, [pc, #552]	@ (80198b8 <tcp_output+0x238>)
 8019690:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8019694:	4989      	ldr	r1, [pc, #548]	@ (80198bc <tcp_output+0x23c>)
 8019696:	488a      	ldr	r0, [pc, #552]	@ (80198c0 <tcp_output+0x240>)
 8019698:	f004 fd78 	bl	801e18c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801969c:	687b      	ldr	r3, [r7, #4]
 801969e:	7d1b      	ldrb	r3, [r3, #20]
 80196a0:	2b01      	cmp	r3, #1
 80196a2:	d106      	bne.n	80196b2 <tcp_output+0x32>
 80196a4:	4b84      	ldr	r3, [pc, #528]	@ (80198b8 <tcp_output+0x238>)
 80196a6:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 80196aa:	4986      	ldr	r1, [pc, #536]	@ (80198c4 <tcp_output+0x244>)
 80196ac:	4884      	ldr	r0, [pc, #528]	@ (80198c0 <tcp_output+0x240>)
 80196ae:	f004 fd6d 	bl	801e18c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80196b2:	4b85      	ldr	r3, [pc, #532]	@ (80198c8 <tcp_output+0x248>)
 80196b4:	681b      	ldr	r3, [r3, #0]
 80196b6:	687a      	ldr	r2, [r7, #4]
 80196b8:	429a      	cmp	r2, r3
 80196ba:	d101      	bne.n	80196c0 <tcp_output+0x40>
    return ERR_OK;
 80196bc:	2300      	movs	r3, #0
 80196be:	e1ce      	b.n	8019a5e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80196c0:	687b      	ldr	r3, [r7, #4]
 80196c2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80196c6:	687b      	ldr	r3, [r7, #4]
 80196c8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80196cc:	4293      	cmp	r3, r2
 80196ce:	bf28      	it	cs
 80196d0:	4613      	movcs	r3, r2
 80196d2:	b29b      	uxth	r3, r3
 80196d4:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80196d6:	687b      	ldr	r3, [r7, #4]
 80196d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80196da:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 80196dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80196de:	2b00      	cmp	r3, #0
 80196e0:	d10b      	bne.n	80196fa <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80196e2:	687b      	ldr	r3, [r7, #4]
 80196e4:	8b5b      	ldrh	r3, [r3, #26]
 80196e6:	f003 0302 	and.w	r3, r3, #2
 80196ea:	2b00      	cmp	r3, #0
 80196ec:	f000 81aa 	beq.w	8019a44 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80196f0:	6878      	ldr	r0, [r7, #4]
 80196f2:	f000 fdcb 	bl	801a28c <tcp_send_empty_ack>
 80196f6:	4603      	mov	r3, r0
 80196f8:	e1b1      	b.n	8019a5e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80196fa:	6879      	ldr	r1, [r7, #4]
 80196fc:	687b      	ldr	r3, [r7, #4]
 80196fe:	3304      	adds	r3, #4
 8019700:	461a      	mov	r2, r3
 8019702:	6878      	ldr	r0, [r7, #4]
 8019704:	f7ff f826 	bl	8018754 <tcp_route>
 8019708:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801970a:	697b      	ldr	r3, [r7, #20]
 801970c:	2b00      	cmp	r3, #0
 801970e:	d102      	bne.n	8019716 <tcp_output+0x96>
    return ERR_RTE;
 8019710:	f06f 0303 	mvn.w	r3, #3
 8019714:	e1a3      	b.n	8019a5e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8019716:	687b      	ldr	r3, [r7, #4]
 8019718:	2b00      	cmp	r3, #0
 801971a:	d003      	beq.n	8019724 <tcp_output+0xa4>
 801971c:	687b      	ldr	r3, [r7, #4]
 801971e:	681b      	ldr	r3, [r3, #0]
 8019720:	2b00      	cmp	r3, #0
 8019722:	d111      	bne.n	8019748 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8019724:	697b      	ldr	r3, [r7, #20]
 8019726:	2b00      	cmp	r3, #0
 8019728:	d002      	beq.n	8019730 <tcp_output+0xb0>
 801972a:	697b      	ldr	r3, [r7, #20]
 801972c:	3304      	adds	r3, #4
 801972e:	e000      	b.n	8019732 <tcp_output+0xb2>
 8019730:	2300      	movs	r3, #0
 8019732:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8019734:	693b      	ldr	r3, [r7, #16]
 8019736:	2b00      	cmp	r3, #0
 8019738:	d102      	bne.n	8019740 <tcp_output+0xc0>
      return ERR_RTE;
 801973a:	f06f 0303 	mvn.w	r3, #3
 801973e:	e18e      	b.n	8019a5e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8019740:	693b      	ldr	r3, [r7, #16]
 8019742:	681a      	ldr	r2, [r3, #0]
 8019744:	687b      	ldr	r3, [r7, #4]
 8019746:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8019748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801974a:	68db      	ldr	r3, [r3, #12]
 801974c:	685b      	ldr	r3, [r3, #4]
 801974e:	4618      	mov	r0, r3
 8019750:	f7f9 f8ba 	bl	80128c8 <lwip_htonl>
 8019754:	4602      	mov	r2, r0
 8019756:	687b      	ldr	r3, [r7, #4]
 8019758:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801975a:	1ad3      	subs	r3, r2, r3
 801975c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801975e:	8912      	ldrh	r2, [r2, #8]
 8019760:	4413      	add	r3, r2
 8019762:	69ba      	ldr	r2, [r7, #24]
 8019764:	429a      	cmp	r2, r3
 8019766:	d227      	bcs.n	80197b8 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8019768:	687b      	ldr	r3, [r7, #4]
 801976a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801976e:	461a      	mov	r2, r3
 8019770:	69bb      	ldr	r3, [r7, #24]
 8019772:	4293      	cmp	r3, r2
 8019774:	d114      	bne.n	80197a0 <tcp_output+0x120>
 8019776:	687b      	ldr	r3, [r7, #4]
 8019778:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801977a:	2b00      	cmp	r3, #0
 801977c:	d110      	bne.n	80197a0 <tcp_output+0x120>
 801977e:	687b      	ldr	r3, [r7, #4]
 8019780:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8019784:	2b00      	cmp	r3, #0
 8019786:	d10b      	bne.n	80197a0 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8019788:	687b      	ldr	r3, [r7, #4]
 801978a:	2200      	movs	r2, #0
 801978c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8019790:	687b      	ldr	r3, [r7, #4]
 8019792:	2201      	movs	r2, #1
 8019794:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8019798:	687b      	ldr	r3, [r7, #4]
 801979a:	2200      	movs	r2, #0
 801979c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80197a0:	687b      	ldr	r3, [r7, #4]
 80197a2:	8b5b      	ldrh	r3, [r3, #26]
 80197a4:	f003 0302 	and.w	r3, r3, #2
 80197a8:	2b00      	cmp	r3, #0
 80197aa:	f000 814d 	beq.w	8019a48 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80197ae:	6878      	ldr	r0, [r7, #4]
 80197b0:	f000 fd6c 	bl	801a28c <tcp_send_empty_ack>
 80197b4:	4603      	mov	r3, r0
 80197b6:	e152      	b.n	8019a5e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80197b8:	687b      	ldr	r3, [r7, #4]
 80197ba:	2200      	movs	r2, #0
 80197bc:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80197c0:	687b      	ldr	r3, [r7, #4]
 80197c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80197c4:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80197c6:	6a3b      	ldr	r3, [r7, #32]
 80197c8:	2b00      	cmp	r3, #0
 80197ca:	f000 811c 	beq.w	8019a06 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80197ce:	e002      	b.n	80197d6 <tcp_output+0x156>
 80197d0:	6a3b      	ldr	r3, [r7, #32]
 80197d2:	681b      	ldr	r3, [r3, #0]
 80197d4:	623b      	str	r3, [r7, #32]
 80197d6:	6a3b      	ldr	r3, [r7, #32]
 80197d8:	681b      	ldr	r3, [r3, #0]
 80197da:	2b00      	cmp	r3, #0
 80197dc:	d1f8      	bne.n	80197d0 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80197de:	e112      	b.n	8019a06 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80197e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80197e2:	68db      	ldr	r3, [r3, #12]
 80197e4:	899b      	ldrh	r3, [r3, #12]
 80197e6:	b29b      	uxth	r3, r3
 80197e8:	4618      	mov	r0, r3
 80197ea:	f7f9 f857 	bl	801289c <lwip_htons>
 80197ee:	4603      	mov	r3, r0
 80197f0:	b2db      	uxtb	r3, r3
 80197f2:	f003 0304 	and.w	r3, r3, #4
 80197f6:	2b00      	cmp	r3, #0
 80197f8:	d006      	beq.n	8019808 <tcp_output+0x188>
 80197fa:	4b2f      	ldr	r3, [pc, #188]	@ (80198b8 <tcp_output+0x238>)
 80197fc:	f240 5236 	movw	r2, #1334	@ 0x536
 8019800:	4932      	ldr	r1, [pc, #200]	@ (80198cc <tcp_output+0x24c>)
 8019802:	482f      	ldr	r0, [pc, #188]	@ (80198c0 <tcp_output+0x240>)
 8019804:	f004 fcc2 	bl	801e18c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8019808:	687b      	ldr	r3, [r7, #4]
 801980a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801980c:	2b00      	cmp	r3, #0
 801980e:	d01f      	beq.n	8019850 <tcp_output+0x1d0>
 8019810:	687b      	ldr	r3, [r7, #4]
 8019812:	8b5b      	ldrh	r3, [r3, #26]
 8019814:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8019818:	2b00      	cmp	r3, #0
 801981a:	d119      	bne.n	8019850 <tcp_output+0x1d0>
 801981c:	687b      	ldr	r3, [r7, #4]
 801981e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019820:	2b00      	cmp	r3, #0
 8019822:	d00b      	beq.n	801983c <tcp_output+0x1bc>
 8019824:	687b      	ldr	r3, [r7, #4]
 8019826:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019828:	681b      	ldr	r3, [r3, #0]
 801982a:	2b00      	cmp	r3, #0
 801982c:	d110      	bne.n	8019850 <tcp_output+0x1d0>
 801982e:	687b      	ldr	r3, [r7, #4]
 8019830:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019832:	891a      	ldrh	r2, [r3, #8]
 8019834:	687b      	ldr	r3, [r7, #4]
 8019836:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8019838:	429a      	cmp	r2, r3
 801983a:	d209      	bcs.n	8019850 <tcp_output+0x1d0>
 801983c:	687b      	ldr	r3, [r7, #4]
 801983e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8019842:	2b00      	cmp	r3, #0
 8019844:	d004      	beq.n	8019850 <tcp_output+0x1d0>
 8019846:	687b      	ldr	r3, [r7, #4]
 8019848:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801984c:	2b08      	cmp	r3, #8
 801984e:	d901      	bls.n	8019854 <tcp_output+0x1d4>
 8019850:	2301      	movs	r3, #1
 8019852:	e000      	b.n	8019856 <tcp_output+0x1d6>
 8019854:	2300      	movs	r3, #0
 8019856:	2b00      	cmp	r3, #0
 8019858:	d106      	bne.n	8019868 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801985a:	687b      	ldr	r3, [r7, #4]
 801985c:	8b5b      	ldrh	r3, [r3, #26]
 801985e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8019862:	2b00      	cmp	r3, #0
 8019864:	f000 80e4 	beq.w	8019a30 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8019868:	687b      	ldr	r3, [r7, #4]
 801986a:	7d1b      	ldrb	r3, [r3, #20]
 801986c:	2b02      	cmp	r3, #2
 801986e:	d00d      	beq.n	801988c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8019870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019872:	68db      	ldr	r3, [r3, #12]
 8019874:	899b      	ldrh	r3, [r3, #12]
 8019876:	b29c      	uxth	r4, r3
 8019878:	2010      	movs	r0, #16
 801987a:	f7f9 f80f 	bl	801289c <lwip_htons>
 801987e:	4603      	mov	r3, r0
 8019880:	461a      	mov	r2, r3
 8019882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019884:	68db      	ldr	r3, [r3, #12]
 8019886:	4322      	orrs	r2, r4
 8019888:	b292      	uxth	r2, r2
 801988a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801988c:	697a      	ldr	r2, [r7, #20]
 801988e:	6879      	ldr	r1, [r7, #4]
 8019890:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8019892:	f000 f909 	bl	8019aa8 <tcp_output_segment>
 8019896:	4603      	mov	r3, r0
 8019898:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801989a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801989e:	2b00      	cmp	r3, #0
 80198a0:	d016      	beq.n	80198d0 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80198a2:	687b      	ldr	r3, [r7, #4]
 80198a4:	8b5b      	ldrh	r3, [r3, #26]
 80198a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80198aa:	b29a      	uxth	r2, r3
 80198ac:	687b      	ldr	r3, [r7, #4]
 80198ae:	835a      	strh	r2, [r3, #26]
      return err;
 80198b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80198b4:	e0d3      	b.n	8019a5e <tcp_output+0x3de>
 80198b6:	bf00      	nop
 80198b8:	080228f0 	.word	0x080228f0
 80198bc:	08022e34 	.word	0x08022e34
 80198c0:	08022944 	.word	0x08022944
 80198c4:	08022e4c 	.word	0x08022e4c
 80198c8:	2000cb0c 	.word	0x2000cb0c
 80198cc:	08022e74 	.word	0x08022e74
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80198d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80198d2:	681a      	ldr	r2, [r3, #0]
 80198d4:	687b      	ldr	r3, [r7, #4]
 80198d6:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 80198d8:	687b      	ldr	r3, [r7, #4]
 80198da:	7d1b      	ldrb	r3, [r3, #20]
 80198dc:	2b02      	cmp	r3, #2
 80198de:	d006      	beq.n	80198ee <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80198e0:	687b      	ldr	r3, [r7, #4]
 80198e2:	8b5b      	ldrh	r3, [r3, #26]
 80198e4:	f023 0303 	bic.w	r3, r3, #3
 80198e8:	b29a      	uxth	r2, r3
 80198ea:	687b      	ldr	r3, [r7, #4]
 80198ec:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80198ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80198f0:	68db      	ldr	r3, [r3, #12]
 80198f2:	685b      	ldr	r3, [r3, #4]
 80198f4:	4618      	mov	r0, r3
 80198f6:	f7f8 ffe7 	bl	80128c8 <lwip_htonl>
 80198fa:	4604      	mov	r4, r0
 80198fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80198fe:	891b      	ldrh	r3, [r3, #8]
 8019900:	461d      	mov	r5, r3
 8019902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019904:	68db      	ldr	r3, [r3, #12]
 8019906:	899b      	ldrh	r3, [r3, #12]
 8019908:	b29b      	uxth	r3, r3
 801990a:	4618      	mov	r0, r3
 801990c:	f7f8 ffc6 	bl	801289c <lwip_htons>
 8019910:	4603      	mov	r3, r0
 8019912:	b2db      	uxtb	r3, r3
 8019914:	f003 0303 	and.w	r3, r3, #3
 8019918:	2b00      	cmp	r3, #0
 801991a:	d001      	beq.n	8019920 <tcp_output+0x2a0>
 801991c:	2301      	movs	r3, #1
 801991e:	e000      	b.n	8019922 <tcp_output+0x2a2>
 8019920:	2300      	movs	r3, #0
 8019922:	442b      	add	r3, r5
 8019924:	4423      	add	r3, r4
 8019926:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8019928:	687b      	ldr	r3, [r7, #4]
 801992a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801992c:	68bb      	ldr	r3, [r7, #8]
 801992e:	1ad3      	subs	r3, r2, r3
 8019930:	2b00      	cmp	r3, #0
 8019932:	da02      	bge.n	801993a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8019934:	687b      	ldr	r3, [r7, #4]
 8019936:	68ba      	ldr	r2, [r7, #8]
 8019938:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801993a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801993c:	891b      	ldrh	r3, [r3, #8]
 801993e:	461c      	mov	r4, r3
 8019940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019942:	68db      	ldr	r3, [r3, #12]
 8019944:	899b      	ldrh	r3, [r3, #12]
 8019946:	b29b      	uxth	r3, r3
 8019948:	4618      	mov	r0, r3
 801994a:	f7f8 ffa7 	bl	801289c <lwip_htons>
 801994e:	4603      	mov	r3, r0
 8019950:	b2db      	uxtb	r3, r3
 8019952:	f003 0303 	and.w	r3, r3, #3
 8019956:	2b00      	cmp	r3, #0
 8019958:	d001      	beq.n	801995e <tcp_output+0x2de>
 801995a:	2301      	movs	r3, #1
 801995c:	e000      	b.n	8019960 <tcp_output+0x2e0>
 801995e:	2300      	movs	r3, #0
 8019960:	4423      	add	r3, r4
 8019962:	2b00      	cmp	r3, #0
 8019964:	d049      	beq.n	80199fa <tcp_output+0x37a>
      seg->next = NULL;
 8019966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019968:	2200      	movs	r2, #0
 801996a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801996c:	687b      	ldr	r3, [r7, #4]
 801996e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019970:	2b00      	cmp	r3, #0
 8019972:	d105      	bne.n	8019980 <tcp_output+0x300>
        pcb->unacked = seg;
 8019974:	687b      	ldr	r3, [r7, #4]
 8019976:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019978:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 801997a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801997c:	623b      	str	r3, [r7, #32]
 801997e:	e03f      	b.n	8019a00 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8019980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019982:	68db      	ldr	r3, [r3, #12]
 8019984:	685b      	ldr	r3, [r3, #4]
 8019986:	4618      	mov	r0, r3
 8019988:	f7f8 ff9e 	bl	80128c8 <lwip_htonl>
 801998c:	4604      	mov	r4, r0
 801998e:	6a3b      	ldr	r3, [r7, #32]
 8019990:	68db      	ldr	r3, [r3, #12]
 8019992:	685b      	ldr	r3, [r3, #4]
 8019994:	4618      	mov	r0, r3
 8019996:	f7f8 ff97 	bl	80128c8 <lwip_htonl>
 801999a:	4603      	mov	r3, r0
 801999c:	1ae3      	subs	r3, r4, r3
 801999e:	2b00      	cmp	r3, #0
 80199a0:	da24      	bge.n	80199ec <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80199a2:	687b      	ldr	r3, [r7, #4]
 80199a4:	3370      	adds	r3, #112	@ 0x70
 80199a6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80199a8:	e002      	b.n	80199b0 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80199aa:	69fb      	ldr	r3, [r7, #28]
 80199ac:	681b      	ldr	r3, [r3, #0]
 80199ae:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80199b0:	69fb      	ldr	r3, [r7, #28]
 80199b2:	681b      	ldr	r3, [r3, #0]
 80199b4:	2b00      	cmp	r3, #0
 80199b6:	d011      	beq.n	80199dc <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80199b8:	69fb      	ldr	r3, [r7, #28]
 80199ba:	681b      	ldr	r3, [r3, #0]
 80199bc:	68db      	ldr	r3, [r3, #12]
 80199be:	685b      	ldr	r3, [r3, #4]
 80199c0:	4618      	mov	r0, r3
 80199c2:	f7f8 ff81 	bl	80128c8 <lwip_htonl>
 80199c6:	4604      	mov	r4, r0
 80199c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80199ca:	68db      	ldr	r3, [r3, #12]
 80199cc:	685b      	ldr	r3, [r3, #4]
 80199ce:	4618      	mov	r0, r3
 80199d0:	f7f8 ff7a 	bl	80128c8 <lwip_htonl>
 80199d4:	4603      	mov	r3, r0
 80199d6:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80199d8:	2b00      	cmp	r3, #0
 80199da:	dbe6      	blt.n	80199aa <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80199dc:	69fb      	ldr	r3, [r7, #28]
 80199de:	681a      	ldr	r2, [r3, #0]
 80199e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80199e2:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80199e4:	69fb      	ldr	r3, [r7, #28]
 80199e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80199e8:	601a      	str	r2, [r3, #0]
 80199ea:	e009      	b.n	8019a00 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80199ec:	6a3b      	ldr	r3, [r7, #32]
 80199ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80199f0:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80199f2:	6a3b      	ldr	r3, [r7, #32]
 80199f4:	681b      	ldr	r3, [r3, #0]
 80199f6:	623b      	str	r3, [r7, #32]
 80199f8:	e002      	b.n	8019a00 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80199fa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80199fc:	f7fb ff49 	bl	8015892 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8019a00:	687b      	ldr	r3, [r7, #4]
 8019a02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019a04:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8019a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019a08:	2b00      	cmp	r3, #0
 8019a0a:	d012      	beq.n	8019a32 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8019a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019a0e:	68db      	ldr	r3, [r3, #12]
 8019a10:	685b      	ldr	r3, [r3, #4]
 8019a12:	4618      	mov	r0, r3
 8019a14:	f7f8 ff58 	bl	80128c8 <lwip_htonl>
 8019a18:	4602      	mov	r2, r0
 8019a1a:	687b      	ldr	r3, [r7, #4]
 8019a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019a1e:	1ad3      	subs	r3, r2, r3
 8019a20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019a22:	8912      	ldrh	r2, [r2, #8]
 8019a24:	4413      	add	r3, r2
  while (seg != NULL &&
 8019a26:	69ba      	ldr	r2, [r7, #24]
 8019a28:	429a      	cmp	r2, r3
 8019a2a:	f4bf aed9 	bcs.w	80197e0 <tcp_output+0x160>
 8019a2e:	e000      	b.n	8019a32 <tcp_output+0x3b2>
      break;
 8019a30:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8019a32:	687b      	ldr	r3, [r7, #4]
 8019a34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019a36:	2b00      	cmp	r3, #0
 8019a38:	d108      	bne.n	8019a4c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8019a3a:	687b      	ldr	r3, [r7, #4]
 8019a3c:	2200      	movs	r2, #0
 8019a3e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8019a42:	e004      	b.n	8019a4e <tcp_output+0x3ce>
    goto output_done;
 8019a44:	bf00      	nop
 8019a46:	e002      	b.n	8019a4e <tcp_output+0x3ce>
    goto output_done;
 8019a48:	bf00      	nop
 8019a4a:	e000      	b.n	8019a4e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8019a4c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8019a4e:	687b      	ldr	r3, [r7, #4]
 8019a50:	8b5b      	ldrh	r3, [r3, #26]
 8019a52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8019a56:	b29a      	uxth	r2, r3
 8019a58:	687b      	ldr	r3, [r7, #4]
 8019a5a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8019a5c:	2300      	movs	r3, #0
}
 8019a5e:	4618      	mov	r0, r3
 8019a60:	3728      	adds	r7, #40	@ 0x28
 8019a62:	46bd      	mov	sp, r7
 8019a64:	bdb0      	pop	{r4, r5, r7, pc}
 8019a66:	bf00      	nop

08019a68 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8019a68:	b580      	push	{r7, lr}
 8019a6a:	b082      	sub	sp, #8
 8019a6c:	af00      	add	r7, sp, #0
 8019a6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8019a70:	687b      	ldr	r3, [r7, #4]
 8019a72:	2b00      	cmp	r3, #0
 8019a74:	d106      	bne.n	8019a84 <tcp_output_segment_busy+0x1c>
 8019a76:	4b09      	ldr	r3, [pc, #36]	@ (8019a9c <tcp_output_segment_busy+0x34>)
 8019a78:	f240 529a 	movw	r2, #1434	@ 0x59a
 8019a7c:	4908      	ldr	r1, [pc, #32]	@ (8019aa0 <tcp_output_segment_busy+0x38>)
 8019a7e:	4809      	ldr	r0, [pc, #36]	@ (8019aa4 <tcp_output_segment_busy+0x3c>)
 8019a80:	f004 fb84 	bl	801e18c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8019a84:	687b      	ldr	r3, [r7, #4]
 8019a86:	685b      	ldr	r3, [r3, #4]
 8019a88:	7b9b      	ldrb	r3, [r3, #14]
 8019a8a:	2b01      	cmp	r3, #1
 8019a8c:	d001      	beq.n	8019a92 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8019a8e:	2301      	movs	r3, #1
 8019a90:	e000      	b.n	8019a94 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8019a92:	2300      	movs	r3, #0
}
 8019a94:	4618      	mov	r0, r3
 8019a96:	3708      	adds	r7, #8
 8019a98:	46bd      	mov	sp, r7
 8019a9a:	bd80      	pop	{r7, pc}
 8019a9c:	080228f0 	.word	0x080228f0
 8019aa0:	08022e8c 	.word	0x08022e8c
 8019aa4:	08022944 	.word	0x08022944

08019aa8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8019aa8:	b5b0      	push	{r4, r5, r7, lr}
 8019aaa:	b08c      	sub	sp, #48	@ 0x30
 8019aac:	af04      	add	r7, sp, #16
 8019aae:	60f8      	str	r0, [r7, #12]
 8019ab0:	60b9      	str	r1, [r7, #8]
 8019ab2:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8019ab4:	68fb      	ldr	r3, [r7, #12]
 8019ab6:	2b00      	cmp	r3, #0
 8019ab8:	d106      	bne.n	8019ac8 <tcp_output_segment+0x20>
 8019aba:	4b64      	ldr	r3, [pc, #400]	@ (8019c4c <tcp_output_segment+0x1a4>)
 8019abc:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8019ac0:	4963      	ldr	r1, [pc, #396]	@ (8019c50 <tcp_output_segment+0x1a8>)
 8019ac2:	4864      	ldr	r0, [pc, #400]	@ (8019c54 <tcp_output_segment+0x1ac>)
 8019ac4:	f004 fb62 	bl	801e18c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8019ac8:	68bb      	ldr	r3, [r7, #8]
 8019aca:	2b00      	cmp	r3, #0
 8019acc:	d106      	bne.n	8019adc <tcp_output_segment+0x34>
 8019ace:	4b5f      	ldr	r3, [pc, #380]	@ (8019c4c <tcp_output_segment+0x1a4>)
 8019ad0:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8019ad4:	4960      	ldr	r1, [pc, #384]	@ (8019c58 <tcp_output_segment+0x1b0>)
 8019ad6:	485f      	ldr	r0, [pc, #380]	@ (8019c54 <tcp_output_segment+0x1ac>)
 8019ad8:	f004 fb58 	bl	801e18c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8019adc:	687b      	ldr	r3, [r7, #4]
 8019ade:	2b00      	cmp	r3, #0
 8019ae0:	d106      	bne.n	8019af0 <tcp_output_segment+0x48>
 8019ae2:	4b5a      	ldr	r3, [pc, #360]	@ (8019c4c <tcp_output_segment+0x1a4>)
 8019ae4:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8019ae8:	495c      	ldr	r1, [pc, #368]	@ (8019c5c <tcp_output_segment+0x1b4>)
 8019aea:	485a      	ldr	r0, [pc, #360]	@ (8019c54 <tcp_output_segment+0x1ac>)
 8019aec:	f004 fb4e 	bl	801e18c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8019af0:	68f8      	ldr	r0, [r7, #12]
 8019af2:	f7ff ffb9 	bl	8019a68 <tcp_output_segment_busy>
 8019af6:	4603      	mov	r3, r0
 8019af8:	2b00      	cmp	r3, #0
 8019afa:	d001      	beq.n	8019b00 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8019afc:	2300      	movs	r3, #0
 8019afe:	e0a1      	b.n	8019c44 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8019b00:	68bb      	ldr	r3, [r7, #8]
 8019b02:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019b04:	68fb      	ldr	r3, [r7, #12]
 8019b06:	68dc      	ldr	r4, [r3, #12]
 8019b08:	4610      	mov	r0, r2
 8019b0a:	f7f8 fedd 	bl	80128c8 <lwip_htonl>
 8019b0e:	4603      	mov	r3, r0
 8019b10:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8019b12:	68bb      	ldr	r3, [r7, #8]
 8019b14:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8019b16:	68fb      	ldr	r3, [r7, #12]
 8019b18:	68dc      	ldr	r4, [r3, #12]
 8019b1a:	4610      	mov	r0, r2
 8019b1c:	f7f8 febe 	bl	801289c <lwip_htons>
 8019b20:	4603      	mov	r3, r0
 8019b22:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8019b24:	68bb      	ldr	r3, [r7, #8]
 8019b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019b28:	68ba      	ldr	r2, [r7, #8]
 8019b2a:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8019b2c:	441a      	add	r2, r3
 8019b2e:	68bb      	ldr	r3, [r7, #8]
 8019b30:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8019b32:	68fb      	ldr	r3, [r7, #12]
 8019b34:	68db      	ldr	r3, [r3, #12]
 8019b36:	3314      	adds	r3, #20
 8019b38:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8019b3a:	68fb      	ldr	r3, [r7, #12]
 8019b3c:	7a9b      	ldrb	r3, [r3, #10]
 8019b3e:	f003 0301 	and.w	r3, r3, #1
 8019b42:	2b00      	cmp	r3, #0
 8019b44:	d015      	beq.n	8019b72 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8019b46:	68bb      	ldr	r3, [r7, #8]
 8019b48:	3304      	adds	r3, #4
 8019b4a:	461a      	mov	r2, r3
 8019b4c:	6879      	ldr	r1, [r7, #4]
 8019b4e:	f44f 7006 	mov.w	r0, #536	@ 0x218
 8019b52:	f7fc fa39 	bl	8015fc8 <tcp_eff_send_mss_netif>
 8019b56:	4603      	mov	r3, r0
 8019b58:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8019b5a:	8b7b      	ldrh	r3, [r7, #26]
 8019b5c:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8019b60:	4618      	mov	r0, r3
 8019b62:	f7f8 feb1 	bl	80128c8 <lwip_htonl>
 8019b66:	4602      	mov	r2, r0
 8019b68:	69fb      	ldr	r3, [r7, #28]
 8019b6a:	601a      	str	r2, [r3, #0]
    opts += 1;
 8019b6c:	69fb      	ldr	r3, [r7, #28]
 8019b6e:	3304      	adds	r3, #4
 8019b70:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8019b72:	68bb      	ldr	r3, [r7, #8]
 8019b74:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8019b78:	2b00      	cmp	r3, #0
 8019b7a:	da02      	bge.n	8019b82 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8019b7c:	68bb      	ldr	r3, [r7, #8]
 8019b7e:	2200      	movs	r2, #0
 8019b80:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8019b82:	68bb      	ldr	r3, [r7, #8]
 8019b84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019b86:	2b00      	cmp	r3, #0
 8019b88:	d10c      	bne.n	8019ba4 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8019b8a:	4b35      	ldr	r3, [pc, #212]	@ (8019c60 <tcp_output_segment+0x1b8>)
 8019b8c:	681a      	ldr	r2, [r3, #0]
 8019b8e:	68bb      	ldr	r3, [r7, #8]
 8019b90:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8019b92:	68fb      	ldr	r3, [r7, #12]
 8019b94:	68db      	ldr	r3, [r3, #12]
 8019b96:	685b      	ldr	r3, [r3, #4]
 8019b98:	4618      	mov	r0, r3
 8019b9a:	f7f8 fe95 	bl	80128c8 <lwip_htonl>
 8019b9e:	4602      	mov	r2, r0
 8019ba0:	68bb      	ldr	r3, [r7, #8]
 8019ba2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8019ba4:	68fb      	ldr	r3, [r7, #12]
 8019ba6:	68da      	ldr	r2, [r3, #12]
 8019ba8:	68fb      	ldr	r3, [r7, #12]
 8019baa:	685b      	ldr	r3, [r3, #4]
 8019bac:	685b      	ldr	r3, [r3, #4]
 8019bae:	1ad3      	subs	r3, r2, r3
 8019bb0:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8019bb2:	68fb      	ldr	r3, [r7, #12]
 8019bb4:	685b      	ldr	r3, [r3, #4]
 8019bb6:	8959      	ldrh	r1, [r3, #10]
 8019bb8:	68fb      	ldr	r3, [r7, #12]
 8019bba:	685b      	ldr	r3, [r3, #4]
 8019bbc:	8b3a      	ldrh	r2, [r7, #24]
 8019bbe:	1a8a      	subs	r2, r1, r2
 8019bc0:	b292      	uxth	r2, r2
 8019bc2:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8019bc4:	68fb      	ldr	r3, [r7, #12]
 8019bc6:	685b      	ldr	r3, [r3, #4]
 8019bc8:	8919      	ldrh	r1, [r3, #8]
 8019bca:	68fb      	ldr	r3, [r7, #12]
 8019bcc:	685b      	ldr	r3, [r3, #4]
 8019bce:	8b3a      	ldrh	r2, [r7, #24]
 8019bd0:	1a8a      	subs	r2, r1, r2
 8019bd2:	b292      	uxth	r2, r2
 8019bd4:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8019bd6:	68fb      	ldr	r3, [r7, #12]
 8019bd8:	685b      	ldr	r3, [r3, #4]
 8019bda:	68fa      	ldr	r2, [r7, #12]
 8019bdc:	68d2      	ldr	r2, [r2, #12]
 8019bde:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8019be0:	68fb      	ldr	r3, [r7, #12]
 8019be2:	68db      	ldr	r3, [r3, #12]
 8019be4:	2200      	movs	r2, #0
 8019be6:	741a      	strb	r2, [r3, #16]
 8019be8:	2200      	movs	r2, #0
 8019bea:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8019bec:	68fb      	ldr	r3, [r7, #12]
 8019bee:	68da      	ldr	r2, [r3, #12]
 8019bf0:	68fb      	ldr	r3, [r7, #12]
 8019bf2:	7a9b      	ldrb	r3, [r3, #10]
 8019bf4:	f003 0301 	and.w	r3, r3, #1
 8019bf8:	2b00      	cmp	r3, #0
 8019bfa:	d001      	beq.n	8019c00 <tcp_output_segment+0x158>
 8019bfc:	2318      	movs	r3, #24
 8019bfe:	e000      	b.n	8019c02 <tcp_output_segment+0x15a>
 8019c00:	2314      	movs	r3, #20
 8019c02:	4413      	add	r3, r2
 8019c04:	69fa      	ldr	r2, [r7, #28]
 8019c06:	429a      	cmp	r2, r3
 8019c08:	d006      	beq.n	8019c18 <tcp_output_segment+0x170>
 8019c0a:	4b10      	ldr	r3, [pc, #64]	@ (8019c4c <tcp_output_segment+0x1a4>)
 8019c0c:	f240 621c 	movw	r2, #1564	@ 0x61c
 8019c10:	4914      	ldr	r1, [pc, #80]	@ (8019c64 <tcp_output_segment+0x1bc>)
 8019c12:	4810      	ldr	r0, [pc, #64]	@ (8019c54 <tcp_output_segment+0x1ac>)
 8019c14:	f004 faba 	bl	801e18c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8019c18:	68fb      	ldr	r3, [r7, #12]
 8019c1a:	6858      	ldr	r0, [r3, #4]
 8019c1c:	68b9      	ldr	r1, [r7, #8]
 8019c1e:	68bb      	ldr	r3, [r7, #8]
 8019c20:	1d1c      	adds	r4, r3, #4
 8019c22:	68bb      	ldr	r3, [r7, #8]
 8019c24:	7add      	ldrb	r5, [r3, #11]
 8019c26:	68bb      	ldr	r3, [r7, #8]
 8019c28:	7a9b      	ldrb	r3, [r3, #10]
 8019c2a:	687a      	ldr	r2, [r7, #4]
 8019c2c:	9202      	str	r2, [sp, #8]
 8019c2e:	2206      	movs	r2, #6
 8019c30:	9201      	str	r2, [sp, #4]
 8019c32:	9300      	str	r3, [sp, #0]
 8019c34:	462b      	mov	r3, r5
 8019c36:	4622      	mov	r2, r4
 8019c38:	f002 fa32 	bl	801c0a0 <ip4_output_if>
 8019c3c:	4603      	mov	r3, r0
 8019c3e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8019c40:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8019c44:	4618      	mov	r0, r3
 8019c46:	3720      	adds	r7, #32
 8019c48:	46bd      	mov	sp, r7
 8019c4a:	bdb0      	pop	{r4, r5, r7, pc}
 8019c4c:	080228f0 	.word	0x080228f0
 8019c50:	08022eb4 	.word	0x08022eb4
 8019c54:	08022944 	.word	0x08022944
 8019c58:	08022ed4 	.word	0x08022ed4
 8019c5c:	08022ef4 	.word	0x08022ef4
 8019c60:	2000cac0 	.word	0x2000cac0
 8019c64:	08022f18 	.word	0x08022f18

08019c68 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8019c68:	b5b0      	push	{r4, r5, r7, lr}
 8019c6a:	b084      	sub	sp, #16
 8019c6c:	af00      	add	r7, sp, #0
 8019c6e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8019c70:	687b      	ldr	r3, [r7, #4]
 8019c72:	2b00      	cmp	r3, #0
 8019c74:	d106      	bne.n	8019c84 <tcp_rexmit_rto_prepare+0x1c>
 8019c76:	4b31      	ldr	r3, [pc, #196]	@ (8019d3c <tcp_rexmit_rto_prepare+0xd4>)
 8019c78:	f240 6263 	movw	r2, #1635	@ 0x663
 8019c7c:	4930      	ldr	r1, [pc, #192]	@ (8019d40 <tcp_rexmit_rto_prepare+0xd8>)
 8019c7e:	4831      	ldr	r0, [pc, #196]	@ (8019d44 <tcp_rexmit_rto_prepare+0xdc>)
 8019c80:	f004 fa84 	bl	801e18c <iprintf>

  if (pcb->unacked == NULL) {
 8019c84:	687b      	ldr	r3, [r7, #4]
 8019c86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019c88:	2b00      	cmp	r3, #0
 8019c8a:	d102      	bne.n	8019c92 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8019c8c:	f06f 0305 	mvn.w	r3, #5
 8019c90:	e050      	b.n	8019d34 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8019c92:	687b      	ldr	r3, [r7, #4]
 8019c94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019c96:	60fb      	str	r3, [r7, #12]
 8019c98:	e00b      	b.n	8019cb2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8019c9a:	68f8      	ldr	r0, [r7, #12]
 8019c9c:	f7ff fee4 	bl	8019a68 <tcp_output_segment_busy>
 8019ca0:	4603      	mov	r3, r0
 8019ca2:	2b00      	cmp	r3, #0
 8019ca4:	d002      	beq.n	8019cac <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8019ca6:	f06f 0305 	mvn.w	r3, #5
 8019caa:	e043      	b.n	8019d34 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8019cac:	68fb      	ldr	r3, [r7, #12]
 8019cae:	681b      	ldr	r3, [r3, #0]
 8019cb0:	60fb      	str	r3, [r7, #12]
 8019cb2:	68fb      	ldr	r3, [r7, #12]
 8019cb4:	681b      	ldr	r3, [r3, #0]
 8019cb6:	2b00      	cmp	r3, #0
 8019cb8:	d1ef      	bne.n	8019c9a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8019cba:	68f8      	ldr	r0, [r7, #12]
 8019cbc:	f7ff fed4 	bl	8019a68 <tcp_output_segment_busy>
 8019cc0:	4603      	mov	r3, r0
 8019cc2:	2b00      	cmp	r3, #0
 8019cc4:	d002      	beq.n	8019ccc <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8019cc6:	f06f 0305 	mvn.w	r3, #5
 8019cca:	e033      	b.n	8019d34 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8019ccc:	687b      	ldr	r3, [r7, #4]
 8019cce:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8019cd0:	68fb      	ldr	r3, [r7, #12]
 8019cd2:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8019cd4:	687b      	ldr	r3, [r7, #4]
 8019cd6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8019cd8:	687b      	ldr	r3, [r7, #4]
 8019cda:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8019cdc:	687b      	ldr	r3, [r7, #4]
 8019cde:	2200      	movs	r2, #0
 8019ce0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8019ce2:	687b      	ldr	r3, [r7, #4]
 8019ce4:	8b5b      	ldrh	r3, [r3, #26]
 8019ce6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8019cea:	b29a      	uxth	r2, r3
 8019cec:	687b      	ldr	r3, [r7, #4]
 8019cee:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8019cf0:	68fb      	ldr	r3, [r7, #12]
 8019cf2:	68db      	ldr	r3, [r3, #12]
 8019cf4:	685b      	ldr	r3, [r3, #4]
 8019cf6:	4618      	mov	r0, r3
 8019cf8:	f7f8 fde6 	bl	80128c8 <lwip_htonl>
 8019cfc:	4604      	mov	r4, r0
 8019cfe:	68fb      	ldr	r3, [r7, #12]
 8019d00:	891b      	ldrh	r3, [r3, #8]
 8019d02:	461d      	mov	r5, r3
 8019d04:	68fb      	ldr	r3, [r7, #12]
 8019d06:	68db      	ldr	r3, [r3, #12]
 8019d08:	899b      	ldrh	r3, [r3, #12]
 8019d0a:	b29b      	uxth	r3, r3
 8019d0c:	4618      	mov	r0, r3
 8019d0e:	f7f8 fdc5 	bl	801289c <lwip_htons>
 8019d12:	4603      	mov	r3, r0
 8019d14:	b2db      	uxtb	r3, r3
 8019d16:	f003 0303 	and.w	r3, r3, #3
 8019d1a:	2b00      	cmp	r3, #0
 8019d1c:	d001      	beq.n	8019d22 <tcp_rexmit_rto_prepare+0xba>
 8019d1e:	2301      	movs	r3, #1
 8019d20:	e000      	b.n	8019d24 <tcp_rexmit_rto_prepare+0xbc>
 8019d22:	2300      	movs	r3, #0
 8019d24:	442b      	add	r3, r5
 8019d26:	18e2      	adds	r2, r4, r3
 8019d28:	687b      	ldr	r3, [r7, #4]
 8019d2a:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8019d2c:	687b      	ldr	r3, [r7, #4]
 8019d2e:	2200      	movs	r2, #0
 8019d30:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8019d32:	2300      	movs	r3, #0
}
 8019d34:	4618      	mov	r0, r3
 8019d36:	3710      	adds	r7, #16
 8019d38:	46bd      	mov	sp, r7
 8019d3a:	bdb0      	pop	{r4, r5, r7, pc}
 8019d3c:	080228f0 	.word	0x080228f0
 8019d40:	08022f2c 	.word	0x08022f2c
 8019d44:	08022944 	.word	0x08022944

08019d48 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8019d48:	b580      	push	{r7, lr}
 8019d4a:	b082      	sub	sp, #8
 8019d4c:	af00      	add	r7, sp, #0
 8019d4e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8019d50:	687b      	ldr	r3, [r7, #4]
 8019d52:	2b00      	cmp	r3, #0
 8019d54:	d106      	bne.n	8019d64 <tcp_rexmit_rto_commit+0x1c>
 8019d56:	4b0d      	ldr	r3, [pc, #52]	@ (8019d8c <tcp_rexmit_rto_commit+0x44>)
 8019d58:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8019d5c:	490c      	ldr	r1, [pc, #48]	@ (8019d90 <tcp_rexmit_rto_commit+0x48>)
 8019d5e:	480d      	ldr	r0, [pc, #52]	@ (8019d94 <tcp_rexmit_rto_commit+0x4c>)
 8019d60:	f004 fa14 	bl	801e18c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8019d64:	687b      	ldr	r3, [r7, #4]
 8019d66:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8019d6a:	2bff      	cmp	r3, #255	@ 0xff
 8019d6c:	d007      	beq.n	8019d7e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8019d6e:	687b      	ldr	r3, [r7, #4]
 8019d70:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8019d74:	3301      	adds	r3, #1
 8019d76:	b2da      	uxtb	r2, r3
 8019d78:	687b      	ldr	r3, [r7, #4]
 8019d7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8019d7e:	6878      	ldr	r0, [r7, #4]
 8019d80:	f7ff fc7e 	bl	8019680 <tcp_output>
}
 8019d84:	bf00      	nop
 8019d86:	3708      	adds	r7, #8
 8019d88:	46bd      	mov	sp, r7
 8019d8a:	bd80      	pop	{r7, pc}
 8019d8c:	080228f0 	.word	0x080228f0
 8019d90:	08022f50 	.word	0x08022f50
 8019d94:	08022944 	.word	0x08022944

08019d98 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8019d98:	b580      	push	{r7, lr}
 8019d9a:	b082      	sub	sp, #8
 8019d9c:	af00      	add	r7, sp, #0
 8019d9e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8019da0:	687b      	ldr	r3, [r7, #4]
 8019da2:	2b00      	cmp	r3, #0
 8019da4:	d106      	bne.n	8019db4 <tcp_rexmit_rto+0x1c>
 8019da6:	4b0a      	ldr	r3, [pc, #40]	@ (8019dd0 <tcp_rexmit_rto+0x38>)
 8019da8:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8019dac:	4909      	ldr	r1, [pc, #36]	@ (8019dd4 <tcp_rexmit_rto+0x3c>)
 8019dae:	480a      	ldr	r0, [pc, #40]	@ (8019dd8 <tcp_rexmit_rto+0x40>)
 8019db0:	f004 f9ec 	bl	801e18c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8019db4:	6878      	ldr	r0, [r7, #4]
 8019db6:	f7ff ff57 	bl	8019c68 <tcp_rexmit_rto_prepare>
 8019dba:	4603      	mov	r3, r0
 8019dbc:	2b00      	cmp	r3, #0
 8019dbe:	d102      	bne.n	8019dc6 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8019dc0:	6878      	ldr	r0, [r7, #4]
 8019dc2:	f7ff ffc1 	bl	8019d48 <tcp_rexmit_rto_commit>
  }
}
 8019dc6:	bf00      	nop
 8019dc8:	3708      	adds	r7, #8
 8019dca:	46bd      	mov	sp, r7
 8019dcc:	bd80      	pop	{r7, pc}
 8019dce:	bf00      	nop
 8019dd0:	080228f0 	.word	0x080228f0
 8019dd4:	08022f74 	.word	0x08022f74
 8019dd8:	08022944 	.word	0x08022944

08019ddc <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8019ddc:	b590      	push	{r4, r7, lr}
 8019dde:	b085      	sub	sp, #20
 8019de0:	af00      	add	r7, sp, #0
 8019de2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8019de4:	687b      	ldr	r3, [r7, #4]
 8019de6:	2b00      	cmp	r3, #0
 8019de8:	d106      	bne.n	8019df8 <tcp_rexmit+0x1c>
 8019dea:	4b2f      	ldr	r3, [pc, #188]	@ (8019ea8 <tcp_rexmit+0xcc>)
 8019dec:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8019df0:	492e      	ldr	r1, [pc, #184]	@ (8019eac <tcp_rexmit+0xd0>)
 8019df2:	482f      	ldr	r0, [pc, #188]	@ (8019eb0 <tcp_rexmit+0xd4>)
 8019df4:	f004 f9ca 	bl	801e18c <iprintf>

  if (pcb->unacked == NULL) {
 8019df8:	687b      	ldr	r3, [r7, #4]
 8019dfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019dfc:	2b00      	cmp	r3, #0
 8019dfe:	d102      	bne.n	8019e06 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8019e00:	f06f 0305 	mvn.w	r3, #5
 8019e04:	e04c      	b.n	8019ea0 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8019e06:	687b      	ldr	r3, [r7, #4]
 8019e08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019e0a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8019e0c:	68b8      	ldr	r0, [r7, #8]
 8019e0e:	f7ff fe2b 	bl	8019a68 <tcp_output_segment_busy>
 8019e12:	4603      	mov	r3, r0
 8019e14:	2b00      	cmp	r3, #0
 8019e16:	d002      	beq.n	8019e1e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8019e18:	f06f 0305 	mvn.w	r3, #5
 8019e1c:	e040      	b.n	8019ea0 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8019e1e:	68bb      	ldr	r3, [r7, #8]
 8019e20:	681a      	ldr	r2, [r3, #0]
 8019e22:	687b      	ldr	r3, [r7, #4]
 8019e24:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8019e26:	687b      	ldr	r3, [r7, #4]
 8019e28:	336c      	adds	r3, #108	@ 0x6c
 8019e2a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8019e2c:	e002      	b.n	8019e34 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8019e2e:	68fb      	ldr	r3, [r7, #12]
 8019e30:	681b      	ldr	r3, [r3, #0]
 8019e32:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8019e34:	68fb      	ldr	r3, [r7, #12]
 8019e36:	681b      	ldr	r3, [r3, #0]
 8019e38:	2b00      	cmp	r3, #0
 8019e3a:	d011      	beq.n	8019e60 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8019e3c:	68fb      	ldr	r3, [r7, #12]
 8019e3e:	681b      	ldr	r3, [r3, #0]
 8019e40:	68db      	ldr	r3, [r3, #12]
 8019e42:	685b      	ldr	r3, [r3, #4]
 8019e44:	4618      	mov	r0, r3
 8019e46:	f7f8 fd3f 	bl	80128c8 <lwip_htonl>
 8019e4a:	4604      	mov	r4, r0
 8019e4c:	68bb      	ldr	r3, [r7, #8]
 8019e4e:	68db      	ldr	r3, [r3, #12]
 8019e50:	685b      	ldr	r3, [r3, #4]
 8019e52:	4618      	mov	r0, r3
 8019e54:	f7f8 fd38 	bl	80128c8 <lwip_htonl>
 8019e58:	4603      	mov	r3, r0
 8019e5a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8019e5c:	2b00      	cmp	r3, #0
 8019e5e:	dbe6      	blt.n	8019e2e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8019e60:	68fb      	ldr	r3, [r7, #12]
 8019e62:	681a      	ldr	r2, [r3, #0]
 8019e64:	68bb      	ldr	r3, [r7, #8]
 8019e66:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8019e68:	68fb      	ldr	r3, [r7, #12]
 8019e6a:	68ba      	ldr	r2, [r7, #8]
 8019e6c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8019e6e:	68bb      	ldr	r3, [r7, #8]
 8019e70:	681b      	ldr	r3, [r3, #0]
 8019e72:	2b00      	cmp	r3, #0
 8019e74:	d103      	bne.n	8019e7e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8019e76:	687b      	ldr	r3, [r7, #4]
 8019e78:	2200      	movs	r2, #0
 8019e7a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8019e7e:	687b      	ldr	r3, [r7, #4]
 8019e80:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8019e84:	2bff      	cmp	r3, #255	@ 0xff
 8019e86:	d007      	beq.n	8019e98 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8019e88:	687b      	ldr	r3, [r7, #4]
 8019e8a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8019e8e:	3301      	adds	r3, #1
 8019e90:	b2da      	uxtb	r2, r3
 8019e92:	687b      	ldr	r3, [r7, #4]
 8019e94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8019e98:	687b      	ldr	r3, [r7, #4]
 8019e9a:	2200      	movs	r2, #0
 8019e9c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8019e9e:	2300      	movs	r3, #0
}
 8019ea0:	4618      	mov	r0, r3
 8019ea2:	3714      	adds	r7, #20
 8019ea4:	46bd      	mov	sp, r7
 8019ea6:	bd90      	pop	{r4, r7, pc}
 8019ea8:	080228f0 	.word	0x080228f0
 8019eac:	08022f90 	.word	0x08022f90
 8019eb0:	08022944 	.word	0x08022944

08019eb4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8019eb4:	b580      	push	{r7, lr}
 8019eb6:	b082      	sub	sp, #8
 8019eb8:	af00      	add	r7, sp, #0
 8019eba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8019ebc:	687b      	ldr	r3, [r7, #4]
 8019ebe:	2b00      	cmp	r3, #0
 8019ec0:	d106      	bne.n	8019ed0 <tcp_rexmit_fast+0x1c>
 8019ec2:	4b2a      	ldr	r3, [pc, #168]	@ (8019f6c <tcp_rexmit_fast+0xb8>)
 8019ec4:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8019ec8:	4929      	ldr	r1, [pc, #164]	@ (8019f70 <tcp_rexmit_fast+0xbc>)
 8019eca:	482a      	ldr	r0, [pc, #168]	@ (8019f74 <tcp_rexmit_fast+0xc0>)
 8019ecc:	f004 f95e 	bl	801e18c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8019ed0:	687b      	ldr	r3, [r7, #4]
 8019ed2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019ed4:	2b00      	cmp	r3, #0
 8019ed6:	d044      	beq.n	8019f62 <tcp_rexmit_fast+0xae>
 8019ed8:	687b      	ldr	r3, [r7, #4]
 8019eda:	8b5b      	ldrh	r3, [r3, #26]
 8019edc:	f003 0304 	and.w	r3, r3, #4
 8019ee0:	2b00      	cmp	r3, #0
 8019ee2:	d13e      	bne.n	8019f62 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8019ee4:	6878      	ldr	r0, [r7, #4]
 8019ee6:	f7ff ff79 	bl	8019ddc <tcp_rexmit>
 8019eea:	4603      	mov	r3, r0
 8019eec:	2b00      	cmp	r3, #0
 8019eee:	d138      	bne.n	8019f62 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8019ef0:	687b      	ldr	r3, [r7, #4]
 8019ef2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8019ef6:	687b      	ldr	r3, [r7, #4]
 8019ef8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8019efc:	4293      	cmp	r3, r2
 8019efe:	bf28      	it	cs
 8019f00:	4613      	movcs	r3, r2
 8019f02:	b29b      	uxth	r3, r3
 8019f04:	0fda      	lsrs	r2, r3, #31
 8019f06:	4413      	add	r3, r2
 8019f08:	105b      	asrs	r3, r3, #1
 8019f0a:	b29a      	uxth	r2, r3
 8019f0c:	687b      	ldr	r3, [r7, #4]
 8019f0e:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8019f12:	687b      	ldr	r3, [r7, #4]
 8019f14:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8019f18:	461a      	mov	r2, r3
 8019f1a:	687b      	ldr	r3, [r7, #4]
 8019f1c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8019f1e:	005b      	lsls	r3, r3, #1
 8019f20:	429a      	cmp	r2, r3
 8019f22:	d206      	bcs.n	8019f32 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8019f24:	687b      	ldr	r3, [r7, #4]
 8019f26:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8019f28:	005b      	lsls	r3, r3, #1
 8019f2a:	b29a      	uxth	r2, r3
 8019f2c:	687b      	ldr	r3, [r7, #4]
 8019f2e:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8019f32:	687b      	ldr	r3, [r7, #4]
 8019f34:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8019f38:	687b      	ldr	r3, [r7, #4]
 8019f3a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8019f3c:	4619      	mov	r1, r3
 8019f3e:	0049      	lsls	r1, r1, #1
 8019f40:	440b      	add	r3, r1
 8019f42:	b29b      	uxth	r3, r3
 8019f44:	4413      	add	r3, r2
 8019f46:	b29a      	uxth	r2, r3
 8019f48:	687b      	ldr	r3, [r7, #4]
 8019f4a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8019f4e:	687b      	ldr	r3, [r7, #4]
 8019f50:	8b5b      	ldrh	r3, [r3, #26]
 8019f52:	f043 0304 	orr.w	r3, r3, #4
 8019f56:	b29a      	uxth	r2, r3
 8019f58:	687b      	ldr	r3, [r7, #4]
 8019f5a:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8019f5c:	687b      	ldr	r3, [r7, #4]
 8019f5e:	2200      	movs	r2, #0
 8019f60:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8019f62:	bf00      	nop
 8019f64:	3708      	adds	r7, #8
 8019f66:	46bd      	mov	sp, r7
 8019f68:	bd80      	pop	{r7, pc}
 8019f6a:	bf00      	nop
 8019f6c:	080228f0 	.word	0x080228f0
 8019f70:	08022fa8 	.word	0x08022fa8
 8019f74:	08022944 	.word	0x08022944

08019f78 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8019f78:	b580      	push	{r7, lr}
 8019f7a:	b086      	sub	sp, #24
 8019f7c:	af00      	add	r7, sp, #0
 8019f7e:	60f8      	str	r0, [r7, #12]
 8019f80:	607b      	str	r3, [r7, #4]
 8019f82:	460b      	mov	r3, r1
 8019f84:	817b      	strh	r3, [r7, #10]
 8019f86:	4613      	mov	r3, r2
 8019f88:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8019f8a:	897a      	ldrh	r2, [r7, #10]
 8019f8c:	893b      	ldrh	r3, [r7, #8]
 8019f8e:	4413      	add	r3, r2
 8019f90:	b29b      	uxth	r3, r3
 8019f92:	3314      	adds	r3, #20
 8019f94:	b29b      	uxth	r3, r3
 8019f96:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8019f9a:	4619      	mov	r1, r3
 8019f9c:	2022      	movs	r0, #34	@ 0x22
 8019f9e:	f7f9 fd59 	bl	8013a54 <pbuf_alloc>
 8019fa2:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8019fa4:	697b      	ldr	r3, [r7, #20]
 8019fa6:	2b00      	cmp	r3, #0
 8019fa8:	d04d      	beq.n	801a046 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8019faa:	897b      	ldrh	r3, [r7, #10]
 8019fac:	3313      	adds	r3, #19
 8019fae:	697a      	ldr	r2, [r7, #20]
 8019fb0:	8952      	ldrh	r2, [r2, #10]
 8019fb2:	4293      	cmp	r3, r2
 8019fb4:	db06      	blt.n	8019fc4 <tcp_output_alloc_header_common+0x4c>
 8019fb6:	4b26      	ldr	r3, [pc, #152]	@ (801a050 <tcp_output_alloc_header_common+0xd8>)
 8019fb8:	f240 7223 	movw	r2, #1827	@ 0x723
 8019fbc:	4925      	ldr	r1, [pc, #148]	@ (801a054 <tcp_output_alloc_header_common+0xdc>)
 8019fbe:	4826      	ldr	r0, [pc, #152]	@ (801a058 <tcp_output_alloc_header_common+0xe0>)
 8019fc0:	f004 f8e4 	bl	801e18c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8019fc4:	697b      	ldr	r3, [r7, #20]
 8019fc6:	685b      	ldr	r3, [r3, #4]
 8019fc8:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8019fca:	8c3b      	ldrh	r3, [r7, #32]
 8019fcc:	4618      	mov	r0, r3
 8019fce:	f7f8 fc65 	bl	801289c <lwip_htons>
 8019fd2:	4603      	mov	r3, r0
 8019fd4:	461a      	mov	r2, r3
 8019fd6:	693b      	ldr	r3, [r7, #16]
 8019fd8:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8019fda:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019fdc:	4618      	mov	r0, r3
 8019fde:	f7f8 fc5d 	bl	801289c <lwip_htons>
 8019fe2:	4603      	mov	r3, r0
 8019fe4:	461a      	mov	r2, r3
 8019fe6:	693b      	ldr	r3, [r7, #16]
 8019fe8:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8019fea:	693b      	ldr	r3, [r7, #16]
 8019fec:	687a      	ldr	r2, [r7, #4]
 8019fee:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8019ff0:	68f8      	ldr	r0, [r7, #12]
 8019ff2:	f7f8 fc69 	bl	80128c8 <lwip_htonl>
 8019ff6:	4602      	mov	r2, r0
 8019ff8:	693b      	ldr	r3, [r7, #16]
 8019ffa:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8019ffc:	897b      	ldrh	r3, [r7, #10]
 8019ffe:	089b      	lsrs	r3, r3, #2
 801a000:	b29b      	uxth	r3, r3
 801a002:	3305      	adds	r3, #5
 801a004:	b29b      	uxth	r3, r3
 801a006:	031b      	lsls	r3, r3, #12
 801a008:	b29a      	uxth	r2, r3
 801a00a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801a00e:	b29b      	uxth	r3, r3
 801a010:	4313      	orrs	r3, r2
 801a012:	b29b      	uxth	r3, r3
 801a014:	4618      	mov	r0, r3
 801a016:	f7f8 fc41 	bl	801289c <lwip_htons>
 801a01a:	4603      	mov	r3, r0
 801a01c:	461a      	mov	r2, r3
 801a01e:	693b      	ldr	r3, [r7, #16]
 801a020:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801a022:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801a024:	4618      	mov	r0, r3
 801a026:	f7f8 fc39 	bl	801289c <lwip_htons>
 801a02a:	4603      	mov	r3, r0
 801a02c:	461a      	mov	r2, r3
 801a02e:	693b      	ldr	r3, [r7, #16]
 801a030:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801a032:	693b      	ldr	r3, [r7, #16]
 801a034:	2200      	movs	r2, #0
 801a036:	741a      	strb	r2, [r3, #16]
 801a038:	2200      	movs	r2, #0
 801a03a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801a03c:	693b      	ldr	r3, [r7, #16]
 801a03e:	2200      	movs	r2, #0
 801a040:	749a      	strb	r2, [r3, #18]
 801a042:	2200      	movs	r2, #0
 801a044:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801a046:	697b      	ldr	r3, [r7, #20]
}
 801a048:	4618      	mov	r0, r3
 801a04a:	3718      	adds	r7, #24
 801a04c:	46bd      	mov	sp, r7
 801a04e:	bd80      	pop	{r7, pc}
 801a050:	080228f0 	.word	0x080228f0
 801a054:	08022fc8 	.word	0x08022fc8
 801a058:	08022944 	.word	0x08022944

0801a05c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801a05c:	b5b0      	push	{r4, r5, r7, lr}
 801a05e:	b08a      	sub	sp, #40	@ 0x28
 801a060:	af04      	add	r7, sp, #16
 801a062:	60f8      	str	r0, [r7, #12]
 801a064:	607b      	str	r3, [r7, #4]
 801a066:	460b      	mov	r3, r1
 801a068:	817b      	strh	r3, [r7, #10]
 801a06a:	4613      	mov	r3, r2
 801a06c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801a06e:	68fb      	ldr	r3, [r7, #12]
 801a070:	2b00      	cmp	r3, #0
 801a072:	d106      	bne.n	801a082 <tcp_output_alloc_header+0x26>
 801a074:	4b15      	ldr	r3, [pc, #84]	@ (801a0cc <tcp_output_alloc_header+0x70>)
 801a076:	f240 7242 	movw	r2, #1858	@ 0x742
 801a07a:	4915      	ldr	r1, [pc, #84]	@ (801a0d0 <tcp_output_alloc_header+0x74>)
 801a07c:	4815      	ldr	r0, [pc, #84]	@ (801a0d4 <tcp_output_alloc_header+0x78>)
 801a07e:	f004 f885 	bl	801e18c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801a082:	68fb      	ldr	r3, [r7, #12]
 801a084:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 801a086:	68fb      	ldr	r3, [r7, #12]
 801a088:	8adb      	ldrh	r3, [r3, #22]
 801a08a:	68fa      	ldr	r2, [r7, #12]
 801a08c:	8b12      	ldrh	r2, [r2, #24]
 801a08e:	68f9      	ldr	r1, [r7, #12]
 801a090:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 801a092:	893d      	ldrh	r5, [r7, #8]
 801a094:	897c      	ldrh	r4, [r7, #10]
 801a096:	9103      	str	r1, [sp, #12]
 801a098:	2110      	movs	r1, #16
 801a09a:	9102      	str	r1, [sp, #8]
 801a09c:	9201      	str	r2, [sp, #4]
 801a09e:	9300      	str	r3, [sp, #0]
 801a0a0:	687b      	ldr	r3, [r7, #4]
 801a0a2:	462a      	mov	r2, r5
 801a0a4:	4621      	mov	r1, r4
 801a0a6:	f7ff ff67 	bl	8019f78 <tcp_output_alloc_header_common>
 801a0aa:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801a0ac:	697b      	ldr	r3, [r7, #20]
 801a0ae:	2b00      	cmp	r3, #0
 801a0b0:	d006      	beq.n	801a0c0 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801a0b2:	68fb      	ldr	r3, [r7, #12]
 801a0b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a0b6:	68fa      	ldr	r2, [r7, #12]
 801a0b8:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801a0ba:	441a      	add	r2, r3
 801a0bc:	68fb      	ldr	r3, [r7, #12]
 801a0be:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 801a0c0:	697b      	ldr	r3, [r7, #20]
}
 801a0c2:	4618      	mov	r0, r3
 801a0c4:	3718      	adds	r7, #24
 801a0c6:	46bd      	mov	sp, r7
 801a0c8:	bdb0      	pop	{r4, r5, r7, pc}
 801a0ca:	bf00      	nop
 801a0cc:	080228f0 	.word	0x080228f0
 801a0d0:	08022ff8 	.word	0x08022ff8
 801a0d4:	08022944 	.word	0x08022944

0801a0d8 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801a0d8:	b580      	push	{r7, lr}
 801a0da:	b088      	sub	sp, #32
 801a0dc:	af00      	add	r7, sp, #0
 801a0de:	60f8      	str	r0, [r7, #12]
 801a0e0:	60b9      	str	r1, [r7, #8]
 801a0e2:	4611      	mov	r1, r2
 801a0e4:	461a      	mov	r2, r3
 801a0e6:	460b      	mov	r3, r1
 801a0e8:	71fb      	strb	r3, [r7, #7]
 801a0ea:	4613      	mov	r3, r2
 801a0ec:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801a0ee:	2300      	movs	r3, #0
 801a0f0:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801a0f2:	68bb      	ldr	r3, [r7, #8]
 801a0f4:	2b00      	cmp	r3, #0
 801a0f6:	d106      	bne.n	801a106 <tcp_output_fill_options+0x2e>
 801a0f8:	4b12      	ldr	r3, [pc, #72]	@ (801a144 <tcp_output_fill_options+0x6c>)
 801a0fa:	f240 7256 	movw	r2, #1878	@ 0x756
 801a0fe:	4912      	ldr	r1, [pc, #72]	@ (801a148 <tcp_output_fill_options+0x70>)
 801a100:	4812      	ldr	r0, [pc, #72]	@ (801a14c <tcp_output_fill_options+0x74>)
 801a102:	f004 f843 	bl	801e18c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801a106:	68bb      	ldr	r3, [r7, #8]
 801a108:	685b      	ldr	r3, [r3, #4]
 801a10a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801a10c:	69bb      	ldr	r3, [r7, #24]
 801a10e:	3314      	adds	r3, #20
 801a110:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801a112:	8bfb      	ldrh	r3, [r7, #30]
 801a114:	009b      	lsls	r3, r3, #2
 801a116:	461a      	mov	r2, r3
 801a118:	79fb      	ldrb	r3, [r7, #7]
 801a11a:	009b      	lsls	r3, r3, #2
 801a11c:	f003 0304 	and.w	r3, r3, #4
 801a120:	4413      	add	r3, r2
 801a122:	3314      	adds	r3, #20
 801a124:	69ba      	ldr	r2, [r7, #24]
 801a126:	4413      	add	r3, r2
 801a128:	697a      	ldr	r2, [r7, #20]
 801a12a:	429a      	cmp	r2, r3
 801a12c:	d006      	beq.n	801a13c <tcp_output_fill_options+0x64>
 801a12e:	4b05      	ldr	r3, [pc, #20]	@ (801a144 <tcp_output_fill_options+0x6c>)
 801a130:	f240 7275 	movw	r2, #1909	@ 0x775
 801a134:	4906      	ldr	r1, [pc, #24]	@ (801a150 <tcp_output_fill_options+0x78>)
 801a136:	4805      	ldr	r0, [pc, #20]	@ (801a14c <tcp_output_fill_options+0x74>)
 801a138:	f004 f828 	bl	801e18c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801a13c:	bf00      	nop
 801a13e:	3720      	adds	r7, #32
 801a140:	46bd      	mov	sp, r7
 801a142:	bd80      	pop	{r7, pc}
 801a144:	080228f0 	.word	0x080228f0
 801a148:	08023020 	.word	0x08023020
 801a14c:	08022944 	.word	0x08022944
 801a150:	08022f18 	.word	0x08022f18

0801a154 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801a154:	b580      	push	{r7, lr}
 801a156:	b08a      	sub	sp, #40	@ 0x28
 801a158:	af04      	add	r7, sp, #16
 801a15a:	60f8      	str	r0, [r7, #12]
 801a15c:	60b9      	str	r1, [r7, #8]
 801a15e:	607a      	str	r2, [r7, #4]
 801a160:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801a162:	68bb      	ldr	r3, [r7, #8]
 801a164:	2b00      	cmp	r3, #0
 801a166:	d106      	bne.n	801a176 <tcp_output_control_segment+0x22>
 801a168:	4b1c      	ldr	r3, [pc, #112]	@ (801a1dc <tcp_output_control_segment+0x88>)
 801a16a:	f240 7287 	movw	r2, #1927	@ 0x787
 801a16e:	491c      	ldr	r1, [pc, #112]	@ (801a1e0 <tcp_output_control_segment+0x8c>)
 801a170:	481c      	ldr	r0, [pc, #112]	@ (801a1e4 <tcp_output_control_segment+0x90>)
 801a172:	f004 f80b 	bl	801e18c <iprintf>

  netif = tcp_route(pcb, src, dst);
 801a176:	683a      	ldr	r2, [r7, #0]
 801a178:	6879      	ldr	r1, [r7, #4]
 801a17a:	68f8      	ldr	r0, [r7, #12]
 801a17c:	f7fe faea 	bl	8018754 <tcp_route>
 801a180:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801a182:	693b      	ldr	r3, [r7, #16]
 801a184:	2b00      	cmp	r3, #0
 801a186:	d102      	bne.n	801a18e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801a188:	23fc      	movs	r3, #252	@ 0xfc
 801a18a:	75fb      	strb	r3, [r7, #23]
 801a18c:	e01c      	b.n	801a1c8 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801a18e:	68fb      	ldr	r3, [r7, #12]
 801a190:	2b00      	cmp	r3, #0
 801a192:	d006      	beq.n	801a1a2 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801a194:	68fb      	ldr	r3, [r7, #12]
 801a196:	7adb      	ldrb	r3, [r3, #11]
 801a198:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801a19a:	68fb      	ldr	r3, [r7, #12]
 801a19c:	7a9b      	ldrb	r3, [r3, #10]
 801a19e:	757b      	strb	r3, [r7, #21]
 801a1a0:	e003      	b.n	801a1aa <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801a1a2:	23ff      	movs	r3, #255	@ 0xff
 801a1a4:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801a1a6:	2300      	movs	r3, #0
 801a1a8:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801a1aa:	7dba      	ldrb	r2, [r7, #22]
 801a1ac:	693b      	ldr	r3, [r7, #16]
 801a1ae:	9302      	str	r3, [sp, #8]
 801a1b0:	2306      	movs	r3, #6
 801a1b2:	9301      	str	r3, [sp, #4]
 801a1b4:	7d7b      	ldrb	r3, [r7, #21]
 801a1b6:	9300      	str	r3, [sp, #0]
 801a1b8:	4613      	mov	r3, r2
 801a1ba:	683a      	ldr	r2, [r7, #0]
 801a1bc:	6879      	ldr	r1, [r7, #4]
 801a1be:	68b8      	ldr	r0, [r7, #8]
 801a1c0:	f001 ff6e 	bl	801c0a0 <ip4_output_if>
 801a1c4:	4603      	mov	r3, r0
 801a1c6:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801a1c8:	68b8      	ldr	r0, [r7, #8]
 801a1ca:	f7f9 ff27 	bl	801401c <pbuf_free>
  return err;
 801a1ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801a1d2:	4618      	mov	r0, r3
 801a1d4:	3718      	adds	r7, #24
 801a1d6:	46bd      	mov	sp, r7
 801a1d8:	bd80      	pop	{r7, pc}
 801a1da:	bf00      	nop
 801a1dc:	080228f0 	.word	0x080228f0
 801a1e0:	08023048 	.word	0x08023048
 801a1e4:	08022944 	.word	0x08022944

0801a1e8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801a1e8:	b590      	push	{r4, r7, lr}
 801a1ea:	b08b      	sub	sp, #44	@ 0x2c
 801a1ec:	af04      	add	r7, sp, #16
 801a1ee:	60f8      	str	r0, [r7, #12]
 801a1f0:	60b9      	str	r1, [r7, #8]
 801a1f2:	607a      	str	r2, [r7, #4]
 801a1f4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801a1f6:	683b      	ldr	r3, [r7, #0]
 801a1f8:	2b00      	cmp	r3, #0
 801a1fa:	d106      	bne.n	801a20a <tcp_rst+0x22>
 801a1fc:	4b1f      	ldr	r3, [pc, #124]	@ (801a27c <tcp_rst+0x94>)
 801a1fe:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 801a202:	491f      	ldr	r1, [pc, #124]	@ (801a280 <tcp_rst+0x98>)
 801a204:	481f      	ldr	r0, [pc, #124]	@ (801a284 <tcp_rst+0x9c>)
 801a206:	f003 ffc1 	bl	801e18c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801a20a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a20c:	2b00      	cmp	r3, #0
 801a20e:	d106      	bne.n	801a21e <tcp_rst+0x36>
 801a210:	4b1a      	ldr	r3, [pc, #104]	@ (801a27c <tcp_rst+0x94>)
 801a212:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 801a216:	491c      	ldr	r1, [pc, #112]	@ (801a288 <tcp_rst+0xa0>)
 801a218:	481a      	ldr	r0, [pc, #104]	@ (801a284 <tcp_rst+0x9c>)
 801a21a:	f003 ffb7 	bl	801e18c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801a21e:	2300      	movs	r3, #0
 801a220:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801a222:	f246 0308 	movw	r3, #24584	@ 0x6008
 801a226:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801a228:	7dfb      	ldrb	r3, [r7, #23]
 801a22a:	b29c      	uxth	r4, r3
 801a22c:	68b8      	ldr	r0, [r7, #8]
 801a22e:	f7f8 fb4b 	bl	80128c8 <lwip_htonl>
 801a232:	4602      	mov	r2, r0
 801a234:	8abb      	ldrh	r3, [r7, #20]
 801a236:	9303      	str	r3, [sp, #12]
 801a238:	2314      	movs	r3, #20
 801a23a:	9302      	str	r3, [sp, #8]
 801a23c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801a23e:	9301      	str	r3, [sp, #4]
 801a240:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801a242:	9300      	str	r3, [sp, #0]
 801a244:	4613      	mov	r3, r2
 801a246:	2200      	movs	r2, #0
 801a248:	4621      	mov	r1, r4
 801a24a:	6878      	ldr	r0, [r7, #4]
 801a24c:	f7ff fe94 	bl	8019f78 <tcp_output_alloc_header_common>
 801a250:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801a252:	693b      	ldr	r3, [r7, #16]
 801a254:	2b00      	cmp	r3, #0
 801a256:	d00c      	beq.n	801a272 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801a258:	7dfb      	ldrb	r3, [r7, #23]
 801a25a:	2200      	movs	r2, #0
 801a25c:	6939      	ldr	r1, [r7, #16]
 801a25e:	68f8      	ldr	r0, [r7, #12]
 801a260:	f7ff ff3a 	bl	801a0d8 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801a264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a266:	683a      	ldr	r2, [r7, #0]
 801a268:	6939      	ldr	r1, [r7, #16]
 801a26a:	68f8      	ldr	r0, [r7, #12]
 801a26c:	f7ff ff72 	bl	801a154 <tcp_output_control_segment>
 801a270:	e000      	b.n	801a274 <tcp_rst+0x8c>
    return;
 801a272:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801a274:	371c      	adds	r7, #28
 801a276:	46bd      	mov	sp, r7
 801a278:	bd90      	pop	{r4, r7, pc}
 801a27a:	bf00      	nop
 801a27c:	080228f0 	.word	0x080228f0
 801a280:	08023074 	.word	0x08023074
 801a284:	08022944 	.word	0x08022944
 801a288:	08023090 	.word	0x08023090

0801a28c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801a28c:	b590      	push	{r4, r7, lr}
 801a28e:	b087      	sub	sp, #28
 801a290:	af00      	add	r7, sp, #0
 801a292:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801a294:	2300      	movs	r3, #0
 801a296:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801a298:	2300      	movs	r3, #0
 801a29a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801a29c:	687b      	ldr	r3, [r7, #4]
 801a29e:	2b00      	cmp	r3, #0
 801a2a0:	d106      	bne.n	801a2b0 <tcp_send_empty_ack+0x24>
 801a2a2:	4b28      	ldr	r3, [pc, #160]	@ (801a344 <tcp_send_empty_ack+0xb8>)
 801a2a4:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 801a2a8:	4927      	ldr	r1, [pc, #156]	@ (801a348 <tcp_send_empty_ack+0xbc>)
 801a2aa:	4828      	ldr	r0, [pc, #160]	@ (801a34c <tcp_send_empty_ack+0xc0>)
 801a2ac:	f003 ff6e 	bl	801e18c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801a2b0:	7dfb      	ldrb	r3, [r7, #23]
 801a2b2:	009b      	lsls	r3, r3, #2
 801a2b4:	b2db      	uxtb	r3, r3
 801a2b6:	f003 0304 	and.w	r3, r3, #4
 801a2ba:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801a2bc:	7d7b      	ldrb	r3, [r7, #21]
 801a2be:	b29c      	uxth	r4, r3
 801a2c0:	687b      	ldr	r3, [r7, #4]
 801a2c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a2c4:	4618      	mov	r0, r3
 801a2c6:	f7f8 faff 	bl	80128c8 <lwip_htonl>
 801a2ca:	4603      	mov	r3, r0
 801a2cc:	2200      	movs	r2, #0
 801a2ce:	4621      	mov	r1, r4
 801a2d0:	6878      	ldr	r0, [r7, #4]
 801a2d2:	f7ff fec3 	bl	801a05c <tcp_output_alloc_header>
 801a2d6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801a2d8:	693b      	ldr	r3, [r7, #16]
 801a2da:	2b00      	cmp	r3, #0
 801a2dc:	d109      	bne.n	801a2f2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801a2de:	687b      	ldr	r3, [r7, #4]
 801a2e0:	8b5b      	ldrh	r3, [r3, #26]
 801a2e2:	f043 0303 	orr.w	r3, r3, #3
 801a2e6:	b29a      	uxth	r2, r3
 801a2e8:	687b      	ldr	r3, [r7, #4]
 801a2ea:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801a2ec:	f06f 0301 	mvn.w	r3, #1
 801a2f0:	e023      	b.n	801a33a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801a2f2:	7dbb      	ldrb	r3, [r7, #22]
 801a2f4:	7dfa      	ldrb	r2, [r7, #23]
 801a2f6:	6939      	ldr	r1, [r7, #16]
 801a2f8:	6878      	ldr	r0, [r7, #4]
 801a2fa:	f7ff feed 	bl	801a0d8 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801a2fe:	687a      	ldr	r2, [r7, #4]
 801a300:	687b      	ldr	r3, [r7, #4]
 801a302:	3304      	adds	r3, #4
 801a304:	6939      	ldr	r1, [r7, #16]
 801a306:	6878      	ldr	r0, [r7, #4]
 801a308:	f7ff ff24 	bl	801a154 <tcp_output_control_segment>
 801a30c:	4603      	mov	r3, r0
 801a30e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801a310:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a314:	2b00      	cmp	r3, #0
 801a316:	d007      	beq.n	801a328 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801a318:	687b      	ldr	r3, [r7, #4]
 801a31a:	8b5b      	ldrh	r3, [r3, #26]
 801a31c:	f043 0303 	orr.w	r3, r3, #3
 801a320:	b29a      	uxth	r2, r3
 801a322:	687b      	ldr	r3, [r7, #4]
 801a324:	835a      	strh	r2, [r3, #26]
 801a326:	e006      	b.n	801a336 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801a328:	687b      	ldr	r3, [r7, #4]
 801a32a:	8b5b      	ldrh	r3, [r3, #26]
 801a32c:	f023 0303 	bic.w	r3, r3, #3
 801a330:	b29a      	uxth	r2, r3
 801a332:	687b      	ldr	r3, [r7, #4]
 801a334:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801a336:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801a33a:	4618      	mov	r0, r3
 801a33c:	371c      	adds	r7, #28
 801a33e:	46bd      	mov	sp, r7
 801a340:	bd90      	pop	{r4, r7, pc}
 801a342:	bf00      	nop
 801a344:	080228f0 	.word	0x080228f0
 801a348:	080230ac 	.word	0x080230ac
 801a34c:	08022944 	.word	0x08022944

0801a350 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801a350:	b590      	push	{r4, r7, lr}
 801a352:	b087      	sub	sp, #28
 801a354:	af00      	add	r7, sp, #0
 801a356:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801a358:	2300      	movs	r3, #0
 801a35a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801a35c:	687b      	ldr	r3, [r7, #4]
 801a35e:	2b00      	cmp	r3, #0
 801a360:	d106      	bne.n	801a370 <tcp_keepalive+0x20>
 801a362:	4b18      	ldr	r3, [pc, #96]	@ (801a3c4 <tcp_keepalive+0x74>)
 801a364:	f640 0224 	movw	r2, #2084	@ 0x824
 801a368:	4917      	ldr	r1, [pc, #92]	@ (801a3c8 <tcp_keepalive+0x78>)
 801a36a:	4818      	ldr	r0, [pc, #96]	@ (801a3cc <tcp_keepalive+0x7c>)
 801a36c:	f003 ff0e 	bl	801e18c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801a370:	7dfb      	ldrb	r3, [r7, #23]
 801a372:	b29c      	uxth	r4, r3
 801a374:	687b      	ldr	r3, [r7, #4]
 801a376:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a378:	3b01      	subs	r3, #1
 801a37a:	4618      	mov	r0, r3
 801a37c:	f7f8 faa4 	bl	80128c8 <lwip_htonl>
 801a380:	4603      	mov	r3, r0
 801a382:	2200      	movs	r2, #0
 801a384:	4621      	mov	r1, r4
 801a386:	6878      	ldr	r0, [r7, #4]
 801a388:	f7ff fe68 	bl	801a05c <tcp_output_alloc_header>
 801a38c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801a38e:	693b      	ldr	r3, [r7, #16]
 801a390:	2b00      	cmp	r3, #0
 801a392:	d102      	bne.n	801a39a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801a394:	f04f 33ff 	mov.w	r3, #4294967295
 801a398:	e010      	b.n	801a3bc <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801a39a:	7dfb      	ldrb	r3, [r7, #23]
 801a39c:	2200      	movs	r2, #0
 801a39e:	6939      	ldr	r1, [r7, #16]
 801a3a0:	6878      	ldr	r0, [r7, #4]
 801a3a2:	f7ff fe99 	bl	801a0d8 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801a3a6:	687a      	ldr	r2, [r7, #4]
 801a3a8:	687b      	ldr	r3, [r7, #4]
 801a3aa:	3304      	adds	r3, #4
 801a3ac:	6939      	ldr	r1, [r7, #16]
 801a3ae:	6878      	ldr	r0, [r7, #4]
 801a3b0:	f7ff fed0 	bl	801a154 <tcp_output_control_segment>
 801a3b4:	4603      	mov	r3, r0
 801a3b6:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801a3b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801a3bc:	4618      	mov	r0, r3
 801a3be:	371c      	adds	r7, #28
 801a3c0:	46bd      	mov	sp, r7
 801a3c2:	bd90      	pop	{r4, r7, pc}
 801a3c4:	080228f0 	.word	0x080228f0
 801a3c8:	080230cc 	.word	0x080230cc
 801a3cc:	08022944 	.word	0x08022944

0801a3d0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801a3d0:	b590      	push	{r4, r7, lr}
 801a3d2:	b08b      	sub	sp, #44	@ 0x2c
 801a3d4:	af00      	add	r7, sp, #0
 801a3d6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801a3d8:	2300      	movs	r3, #0
 801a3da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801a3de:	687b      	ldr	r3, [r7, #4]
 801a3e0:	2b00      	cmp	r3, #0
 801a3e2:	d106      	bne.n	801a3f2 <tcp_zero_window_probe+0x22>
 801a3e4:	4b4c      	ldr	r3, [pc, #304]	@ (801a518 <tcp_zero_window_probe+0x148>)
 801a3e6:	f640 024f 	movw	r2, #2127	@ 0x84f
 801a3ea:	494c      	ldr	r1, [pc, #304]	@ (801a51c <tcp_zero_window_probe+0x14c>)
 801a3ec:	484c      	ldr	r0, [pc, #304]	@ (801a520 <tcp_zero_window_probe+0x150>)
 801a3ee:	f003 fecd 	bl	801e18c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801a3f2:	687b      	ldr	r3, [r7, #4]
 801a3f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a3f6:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801a3f8:	6a3b      	ldr	r3, [r7, #32]
 801a3fa:	2b00      	cmp	r3, #0
 801a3fc:	d101      	bne.n	801a402 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801a3fe:	2300      	movs	r3, #0
 801a400:	e086      	b.n	801a510 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801a402:	687b      	ldr	r3, [r7, #4]
 801a404:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801a408:	2bff      	cmp	r3, #255	@ 0xff
 801a40a:	d007      	beq.n	801a41c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801a40c:	687b      	ldr	r3, [r7, #4]
 801a40e:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801a412:	3301      	adds	r3, #1
 801a414:	b2da      	uxtb	r2, r3
 801a416:	687b      	ldr	r3, [r7, #4]
 801a418:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801a41c:	6a3b      	ldr	r3, [r7, #32]
 801a41e:	68db      	ldr	r3, [r3, #12]
 801a420:	899b      	ldrh	r3, [r3, #12]
 801a422:	b29b      	uxth	r3, r3
 801a424:	4618      	mov	r0, r3
 801a426:	f7f8 fa39 	bl	801289c <lwip_htons>
 801a42a:	4603      	mov	r3, r0
 801a42c:	b2db      	uxtb	r3, r3
 801a42e:	f003 0301 	and.w	r3, r3, #1
 801a432:	2b00      	cmp	r3, #0
 801a434:	d005      	beq.n	801a442 <tcp_zero_window_probe+0x72>
 801a436:	6a3b      	ldr	r3, [r7, #32]
 801a438:	891b      	ldrh	r3, [r3, #8]
 801a43a:	2b00      	cmp	r3, #0
 801a43c:	d101      	bne.n	801a442 <tcp_zero_window_probe+0x72>
 801a43e:	2301      	movs	r3, #1
 801a440:	e000      	b.n	801a444 <tcp_zero_window_probe+0x74>
 801a442:	2300      	movs	r3, #0
 801a444:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801a446:	7ffb      	ldrb	r3, [r7, #31]
 801a448:	2b00      	cmp	r3, #0
 801a44a:	bf0c      	ite	eq
 801a44c:	2301      	moveq	r3, #1
 801a44e:	2300      	movne	r3, #0
 801a450:	b2db      	uxtb	r3, r3
 801a452:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801a454:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a458:	b299      	uxth	r1, r3
 801a45a:	6a3b      	ldr	r3, [r7, #32]
 801a45c:	68db      	ldr	r3, [r3, #12]
 801a45e:	685b      	ldr	r3, [r3, #4]
 801a460:	8bba      	ldrh	r2, [r7, #28]
 801a462:	6878      	ldr	r0, [r7, #4]
 801a464:	f7ff fdfa 	bl	801a05c <tcp_output_alloc_header>
 801a468:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801a46a:	69bb      	ldr	r3, [r7, #24]
 801a46c:	2b00      	cmp	r3, #0
 801a46e:	d102      	bne.n	801a476 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801a470:	f04f 33ff 	mov.w	r3, #4294967295
 801a474:	e04c      	b.n	801a510 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801a476:	69bb      	ldr	r3, [r7, #24]
 801a478:	685b      	ldr	r3, [r3, #4]
 801a47a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801a47c:	7ffb      	ldrb	r3, [r7, #31]
 801a47e:	2b00      	cmp	r3, #0
 801a480:	d011      	beq.n	801a4a6 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801a482:	697b      	ldr	r3, [r7, #20]
 801a484:	899b      	ldrh	r3, [r3, #12]
 801a486:	b29b      	uxth	r3, r3
 801a488:	b21b      	sxth	r3, r3
 801a48a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801a48e:	b21c      	sxth	r4, r3
 801a490:	2011      	movs	r0, #17
 801a492:	f7f8 fa03 	bl	801289c <lwip_htons>
 801a496:	4603      	mov	r3, r0
 801a498:	b21b      	sxth	r3, r3
 801a49a:	4323      	orrs	r3, r4
 801a49c:	b21b      	sxth	r3, r3
 801a49e:	b29a      	uxth	r2, r3
 801a4a0:	697b      	ldr	r3, [r7, #20]
 801a4a2:	819a      	strh	r2, [r3, #12]
 801a4a4:	e010      	b.n	801a4c8 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801a4a6:	69bb      	ldr	r3, [r7, #24]
 801a4a8:	685b      	ldr	r3, [r3, #4]
 801a4aa:	3314      	adds	r3, #20
 801a4ac:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801a4ae:	6a3b      	ldr	r3, [r7, #32]
 801a4b0:	6858      	ldr	r0, [r3, #4]
 801a4b2:	6a3b      	ldr	r3, [r7, #32]
 801a4b4:	685b      	ldr	r3, [r3, #4]
 801a4b6:	891a      	ldrh	r2, [r3, #8]
 801a4b8:	6a3b      	ldr	r3, [r7, #32]
 801a4ba:	891b      	ldrh	r3, [r3, #8]
 801a4bc:	1ad3      	subs	r3, r2, r3
 801a4be:	b29b      	uxth	r3, r3
 801a4c0:	2201      	movs	r2, #1
 801a4c2:	6939      	ldr	r1, [r7, #16]
 801a4c4:	f7f9 ffa0 	bl	8014408 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801a4c8:	6a3b      	ldr	r3, [r7, #32]
 801a4ca:	68db      	ldr	r3, [r3, #12]
 801a4cc:	685b      	ldr	r3, [r3, #4]
 801a4ce:	4618      	mov	r0, r3
 801a4d0:	f7f8 f9fa 	bl	80128c8 <lwip_htonl>
 801a4d4:	4603      	mov	r3, r0
 801a4d6:	3301      	adds	r3, #1
 801a4d8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801a4da:	687b      	ldr	r3, [r7, #4]
 801a4dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801a4de:	68fb      	ldr	r3, [r7, #12]
 801a4e0:	1ad3      	subs	r3, r2, r3
 801a4e2:	2b00      	cmp	r3, #0
 801a4e4:	da02      	bge.n	801a4ec <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801a4e6:	687b      	ldr	r3, [r7, #4]
 801a4e8:	68fa      	ldr	r2, [r7, #12]
 801a4ea:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801a4ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a4f0:	2200      	movs	r2, #0
 801a4f2:	69b9      	ldr	r1, [r7, #24]
 801a4f4:	6878      	ldr	r0, [r7, #4]
 801a4f6:	f7ff fdef 	bl	801a0d8 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801a4fa:	687a      	ldr	r2, [r7, #4]
 801a4fc:	687b      	ldr	r3, [r7, #4]
 801a4fe:	3304      	adds	r3, #4
 801a500:	69b9      	ldr	r1, [r7, #24]
 801a502:	6878      	ldr	r0, [r7, #4]
 801a504:	f7ff fe26 	bl	801a154 <tcp_output_control_segment>
 801a508:	4603      	mov	r3, r0
 801a50a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801a50c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801a510:	4618      	mov	r0, r3
 801a512:	372c      	adds	r7, #44	@ 0x2c
 801a514:	46bd      	mov	sp, r7
 801a516:	bd90      	pop	{r4, r7, pc}
 801a518:	080228f0 	.word	0x080228f0
 801a51c:	080230e8 	.word	0x080230e8
 801a520:	08022944 	.word	0x08022944

0801a524 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801a524:	b580      	push	{r7, lr}
 801a526:	b082      	sub	sp, #8
 801a528:	af00      	add	r7, sp, #0
 801a52a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801a52c:	f7fa f85a 	bl	80145e4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801a530:	4b0a      	ldr	r3, [pc, #40]	@ (801a55c <tcpip_tcp_timer+0x38>)
 801a532:	681b      	ldr	r3, [r3, #0]
 801a534:	2b00      	cmp	r3, #0
 801a536:	d103      	bne.n	801a540 <tcpip_tcp_timer+0x1c>
 801a538:	4b09      	ldr	r3, [pc, #36]	@ (801a560 <tcpip_tcp_timer+0x3c>)
 801a53a:	681b      	ldr	r3, [r3, #0]
 801a53c:	2b00      	cmp	r3, #0
 801a53e:	d005      	beq.n	801a54c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801a540:	2200      	movs	r2, #0
 801a542:	4908      	ldr	r1, [pc, #32]	@ (801a564 <tcpip_tcp_timer+0x40>)
 801a544:	20fa      	movs	r0, #250	@ 0xfa
 801a546:	f000 f8f3 	bl	801a730 <sys_timeout>
 801a54a:	e003      	b.n	801a554 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801a54c:	4b06      	ldr	r3, [pc, #24]	@ (801a568 <tcpip_tcp_timer+0x44>)
 801a54e:	2200      	movs	r2, #0
 801a550:	601a      	str	r2, [r3, #0]
  }
}
 801a552:	bf00      	nop
 801a554:	bf00      	nop
 801a556:	3708      	adds	r7, #8
 801a558:	46bd      	mov	sp, r7
 801a55a:	bd80      	pop	{r7, pc}
 801a55c:	2000cacc 	.word	0x2000cacc
 801a560:	2000cad0 	.word	0x2000cad0
 801a564:	0801a525 	.word	0x0801a525
 801a568:	2000cb18 	.word	0x2000cb18

0801a56c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801a56c:	b580      	push	{r7, lr}
 801a56e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801a570:	4b0a      	ldr	r3, [pc, #40]	@ (801a59c <tcp_timer_needed+0x30>)
 801a572:	681b      	ldr	r3, [r3, #0]
 801a574:	2b00      	cmp	r3, #0
 801a576:	d10f      	bne.n	801a598 <tcp_timer_needed+0x2c>
 801a578:	4b09      	ldr	r3, [pc, #36]	@ (801a5a0 <tcp_timer_needed+0x34>)
 801a57a:	681b      	ldr	r3, [r3, #0]
 801a57c:	2b00      	cmp	r3, #0
 801a57e:	d103      	bne.n	801a588 <tcp_timer_needed+0x1c>
 801a580:	4b08      	ldr	r3, [pc, #32]	@ (801a5a4 <tcp_timer_needed+0x38>)
 801a582:	681b      	ldr	r3, [r3, #0]
 801a584:	2b00      	cmp	r3, #0
 801a586:	d007      	beq.n	801a598 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801a588:	4b04      	ldr	r3, [pc, #16]	@ (801a59c <tcp_timer_needed+0x30>)
 801a58a:	2201      	movs	r2, #1
 801a58c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801a58e:	2200      	movs	r2, #0
 801a590:	4905      	ldr	r1, [pc, #20]	@ (801a5a8 <tcp_timer_needed+0x3c>)
 801a592:	20fa      	movs	r0, #250	@ 0xfa
 801a594:	f000 f8cc 	bl	801a730 <sys_timeout>
  }
}
 801a598:	bf00      	nop
 801a59a:	bd80      	pop	{r7, pc}
 801a59c:	2000cb18 	.word	0x2000cb18
 801a5a0:	2000cacc 	.word	0x2000cacc
 801a5a4:	2000cad0 	.word	0x2000cad0
 801a5a8:	0801a525 	.word	0x0801a525

0801a5ac <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801a5ac:	b580      	push	{r7, lr}
 801a5ae:	b086      	sub	sp, #24
 801a5b0:	af00      	add	r7, sp, #0
 801a5b2:	60f8      	str	r0, [r7, #12]
 801a5b4:	60b9      	str	r1, [r7, #8]
 801a5b6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801a5b8:	200a      	movs	r0, #10
 801a5ba:	f7f8 fe47 	bl	801324c <memp_malloc>
 801a5be:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801a5c0:	693b      	ldr	r3, [r7, #16]
 801a5c2:	2b00      	cmp	r3, #0
 801a5c4:	d109      	bne.n	801a5da <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801a5c6:	693b      	ldr	r3, [r7, #16]
 801a5c8:	2b00      	cmp	r3, #0
 801a5ca:	d151      	bne.n	801a670 <sys_timeout_abs+0xc4>
 801a5cc:	4b2a      	ldr	r3, [pc, #168]	@ (801a678 <sys_timeout_abs+0xcc>)
 801a5ce:	22be      	movs	r2, #190	@ 0xbe
 801a5d0:	492a      	ldr	r1, [pc, #168]	@ (801a67c <sys_timeout_abs+0xd0>)
 801a5d2:	482b      	ldr	r0, [pc, #172]	@ (801a680 <sys_timeout_abs+0xd4>)
 801a5d4:	f003 fdda 	bl	801e18c <iprintf>
    return;
 801a5d8:	e04a      	b.n	801a670 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801a5da:	693b      	ldr	r3, [r7, #16]
 801a5dc:	2200      	movs	r2, #0
 801a5de:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801a5e0:	693b      	ldr	r3, [r7, #16]
 801a5e2:	68ba      	ldr	r2, [r7, #8]
 801a5e4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801a5e6:	693b      	ldr	r3, [r7, #16]
 801a5e8:	687a      	ldr	r2, [r7, #4]
 801a5ea:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801a5ec:	693b      	ldr	r3, [r7, #16]
 801a5ee:	68fa      	ldr	r2, [r7, #12]
 801a5f0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801a5f2:	4b24      	ldr	r3, [pc, #144]	@ (801a684 <sys_timeout_abs+0xd8>)
 801a5f4:	681b      	ldr	r3, [r3, #0]
 801a5f6:	2b00      	cmp	r3, #0
 801a5f8:	d103      	bne.n	801a602 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801a5fa:	4a22      	ldr	r2, [pc, #136]	@ (801a684 <sys_timeout_abs+0xd8>)
 801a5fc:	693b      	ldr	r3, [r7, #16]
 801a5fe:	6013      	str	r3, [r2, #0]
    return;
 801a600:	e037      	b.n	801a672 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801a602:	693b      	ldr	r3, [r7, #16]
 801a604:	685a      	ldr	r2, [r3, #4]
 801a606:	4b1f      	ldr	r3, [pc, #124]	@ (801a684 <sys_timeout_abs+0xd8>)
 801a608:	681b      	ldr	r3, [r3, #0]
 801a60a:	685b      	ldr	r3, [r3, #4]
 801a60c:	1ad3      	subs	r3, r2, r3
 801a60e:	0fdb      	lsrs	r3, r3, #31
 801a610:	f003 0301 	and.w	r3, r3, #1
 801a614:	b2db      	uxtb	r3, r3
 801a616:	2b00      	cmp	r3, #0
 801a618:	d007      	beq.n	801a62a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801a61a:	4b1a      	ldr	r3, [pc, #104]	@ (801a684 <sys_timeout_abs+0xd8>)
 801a61c:	681a      	ldr	r2, [r3, #0]
 801a61e:	693b      	ldr	r3, [r7, #16]
 801a620:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801a622:	4a18      	ldr	r2, [pc, #96]	@ (801a684 <sys_timeout_abs+0xd8>)
 801a624:	693b      	ldr	r3, [r7, #16]
 801a626:	6013      	str	r3, [r2, #0]
 801a628:	e023      	b.n	801a672 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801a62a:	4b16      	ldr	r3, [pc, #88]	@ (801a684 <sys_timeout_abs+0xd8>)
 801a62c:	681b      	ldr	r3, [r3, #0]
 801a62e:	617b      	str	r3, [r7, #20]
 801a630:	e01a      	b.n	801a668 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801a632:	697b      	ldr	r3, [r7, #20]
 801a634:	681b      	ldr	r3, [r3, #0]
 801a636:	2b00      	cmp	r3, #0
 801a638:	d00b      	beq.n	801a652 <sys_timeout_abs+0xa6>
 801a63a:	693b      	ldr	r3, [r7, #16]
 801a63c:	685a      	ldr	r2, [r3, #4]
 801a63e:	697b      	ldr	r3, [r7, #20]
 801a640:	681b      	ldr	r3, [r3, #0]
 801a642:	685b      	ldr	r3, [r3, #4]
 801a644:	1ad3      	subs	r3, r2, r3
 801a646:	0fdb      	lsrs	r3, r3, #31
 801a648:	f003 0301 	and.w	r3, r3, #1
 801a64c:	b2db      	uxtb	r3, r3
 801a64e:	2b00      	cmp	r3, #0
 801a650:	d007      	beq.n	801a662 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801a652:	697b      	ldr	r3, [r7, #20]
 801a654:	681a      	ldr	r2, [r3, #0]
 801a656:	693b      	ldr	r3, [r7, #16]
 801a658:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801a65a:	697b      	ldr	r3, [r7, #20]
 801a65c:	693a      	ldr	r2, [r7, #16]
 801a65e:	601a      	str	r2, [r3, #0]
        break;
 801a660:	e007      	b.n	801a672 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801a662:	697b      	ldr	r3, [r7, #20]
 801a664:	681b      	ldr	r3, [r3, #0]
 801a666:	617b      	str	r3, [r7, #20]
 801a668:	697b      	ldr	r3, [r7, #20]
 801a66a:	2b00      	cmp	r3, #0
 801a66c:	d1e1      	bne.n	801a632 <sys_timeout_abs+0x86>
 801a66e:	e000      	b.n	801a672 <sys_timeout_abs+0xc6>
    return;
 801a670:	bf00      	nop
      }
    }
  }
}
 801a672:	3718      	adds	r7, #24
 801a674:	46bd      	mov	sp, r7
 801a676:	bd80      	pop	{r7, pc}
 801a678:	0802310c 	.word	0x0802310c
 801a67c:	08023140 	.word	0x08023140
 801a680:	08023180 	.word	0x08023180
 801a684:	2000cb10 	.word	0x2000cb10

0801a688 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801a688:	b580      	push	{r7, lr}
 801a68a:	b086      	sub	sp, #24
 801a68c:	af00      	add	r7, sp, #0
 801a68e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801a690:	687b      	ldr	r3, [r7, #4]
 801a692:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801a694:	697b      	ldr	r3, [r7, #20]
 801a696:	685b      	ldr	r3, [r3, #4]
 801a698:	4798      	blx	r3

  now = sys_now();
 801a69a:	f7f2 fccb 	bl	800d034 <sys_now>
 801a69e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801a6a0:	697b      	ldr	r3, [r7, #20]
 801a6a2:	681a      	ldr	r2, [r3, #0]
 801a6a4:	4b0f      	ldr	r3, [pc, #60]	@ (801a6e4 <lwip_cyclic_timer+0x5c>)
 801a6a6:	681b      	ldr	r3, [r3, #0]
 801a6a8:	4413      	add	r3, r2
 801a6aa:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801a6ac:	68fa      	ldr	r2, [r7, #12]
 801a6ae:	693b      	ldr	r3, [r7, #16]
 801a6b0:	1ad3      	subs	r3, r2, r3
 801a6b2:	0fdb      	lsrs	r3, r3, #31
 801a6b4:	f003 0301 	and.w	r3, r3, #1
 801a6b8:	b2db      	uxtb	r3, r3
 801a6ba:	2b00      	cmp	r3, #0
 801a6bc:	d009      	beq.n	801a6d2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801a6be:	697b      	ldr	r3, [r7, #20]
 801a6c0:	681a      	ldr	r2, [r3, #0]
 801a6c2:	693b      	ldr	r3, [r7, #16]
 801a6c4:	4413      	add	r3, r2
 801a6c6:	687a      	ldr	r2, [r7, #4]
 801a6c8:	4907      	ldr	r1, [pc, #28]	@ (801a6e8 <lwip_cyclic_timer+0x60>)
 801a6ca:	4618      	mov	r0, r3
 801a6cc:	f7ff ff6e 	bl	801a5ac <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801a6d0:	e004      	b.n	801a6dc <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801a6d2:	687a      	ldr	r2, [r7, #4]
 801a6d4:	4904      	ldr	r1, [pc, #16]	@ (801a6e8 <lwip_cyclic_timer+0x60>)
 801a6d6:	68f8      	ldr	r0, [r7, #12]
 801a6d8:	f7ff ff68 	bl	801a5ac <sys_timeout_abs>
}
 801a6dc:	bf00      	nop
 801a6de:	3718      	adds	r7, #24
 801a6e0:	46bd      	mov	sp, r7
 801a6e2:	bd80      	pop	{r7, pc}
 801a6e4:	2000cb14 	.word	0x2000cb14
 801a6e8:	0801a689 	.word	0x0801a689

0801a6ec <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801a6ec:	b580      	push	{r7, lr}
 801a6ee:	b082      	sub	sp, #8
 801a6f0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801a6f2:	2301      	movs	r3, #1
 801a6f4:	607b      	str	r3, [r7, #4]
 801a6f6:	e00e      	b.n	801a716 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801a6f8:	4a0b      	ldr	r2, [pc, #44]	@ (801a728 <sys_timeouts_init+0x3c>)
 801a6fa:	687b      	ldr	r3, [r7, #4]
 801a6fc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801a700:	687b      	ldr	r3, [r7, #4]
 801a702:	00db      	lsls	r3, r3, #3
 801a704:	4a08      	ldr	r2, [pc, #32]	@ (801a728 <sys_timeouts_init+0x3c>)
 801a706:	4413      	add	r3, r2
 801a708:	461a      	mov	r2, r3
 801a70a:	4908      	ldr	r1, [pc, #32]	@ (801a72c <sys_timeouts_init+0x40>)
 801a70c:	f000 f810 	bl	801a730 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801a710:	687b      	ldr	r3, [r7, #4]
 801a712:	3301      	adds	r3, #1
 801a714:	607b      	str	r3, [r7, #4]
 801a716:	687b      	ldr	r3, [r7, #4]
 801a718:	2b02      	cmp	r3, #2
 801a71a:	d9ed      	bls.n	801a6f8 <sys_timeouts_init+0xc>
  }
}
 801a71c:	bf00      	nop
 801a71e:	bf00      	nop
 801a720:	3708      	adds	r7, #8
 801a722:	46bd      	mov	sp, r7
 801a724:	bd80      	pop	{r7, pc}
 801a726:	bf00      	nop
 801a728:	08023d88 	.word	0x08023d88
 801a72c:	0801a689 	.word	0x0801a689

0801a730 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801a730:	b580      	push	{r7, lr}
 801a732:	b086      	sub	sp, #24
 801a734:	af00      	add	r7, sp, #0
 801a736:	60f8      	str	r0, [r7, #12]
 801a738:	60b9      	str	r1, [r7, #8]
 801a73a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801a73c:	68fb      	ldr	r3, [r7, #12]
 801a73e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801a742:	d306      	bcc.n	801a752 <sys_timeout+0x22>
 801a744:	4b0a      	ldr	r3, [pc, #40]	@ (801a770 <sys_timeout+0x40>)
 801a746:	f240 1229 	movw	r2, #297	@ 0x129
 801a74a:	490a      	ldr	r1, [pc, #40]	@ (801a774 <sys_timeout+0x44>)
 801a74c:	480a      	ldr	r0, [pc, #40]	@ (801a778 <sys_timeout+0x48>)
 801a74e:	f003 fd1d 	bl	801e18c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801a752:	f7f2 fc6f 	bl	800d034 <sys_now>
 801a756:	4602      	mov	r2, r0
 801a758:	68fb      	ldr	r3, [r7, #12]
 801a75a:	4413      	add	r3, r2
 801a75c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801a75e:	687a      	ldr	r2, [r7, #4]
 801a760:	68b9      	ldr	r1, [r7, #8]
 801a762:	6978      	ldr	r0, [r7, #20]
 801a764:	f7ff ff22 	bl	801a5ac <sys_timeout_abs>
#endif
}
 801a768:	bf00      	nop
 801a76a:	3718      	adds	r7, #24
 801a76c:	46bd      	mov	sp, r7
 801a76e:	bd80      	pop	{r7, pc}
 801a770:	0802310c 	.word	0x0802310c
 801a774:	080231a8 	.word	0x080231a8
 801a778:	08023180 	.word	0x08023180

0801a77c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801a77c:	b580      	push	{r7, lr}
 801a77e:	b084      	sub	sp, #16
 801a780:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801a782:	f7f2 fc57 	bl	800d034 <sys_now>
 801a786:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801a788:	4b17      	ldr	r3, [pc, #92]	@ (801a7e8 <sys_check_timeouts+0x6c>)
 801a78a:	681b      	ldr	r3, [r3, #0]
 801a78c:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801a78e:	68bb      	ldr	r3, [r7, #8]
 801a790:	2b00      	cmp	r3, #0
 801a792:	d022      	beq.n	801a7da <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801a794:	68bb      	ldr	r3, [r7, #8]
 801a796:	685b      	ldr	r3, [r3, #4]
 801a798:	68fa      	ldr	r2, [r7, #12]
 801a79a:	1ad3      	subs	r3, r2, r3
 801a79c:	0fdb      	lsrs	r3, r3, #31
 801a79e:	f003 0301 	and.w	r3, r3, #1
 801a7a2:	b2db      	uxtb	r3, r3
 801a7a4:	2b00      	cmp	r3, #0
 801a7a6:	d11a      	bne.n	801a7de <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801a7a8:	68bb      	ldr	r3, [r7, #8]
 801a7aa:	681b      	ldr	r3, [r3, #0]
 801a7ac:	4a0e      	ldr	r2, [pc, #56]	@ (801a7e8 <sys_check_timeouts+0x6c>)
 801a7ae:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801a7b0:	68bb      	ldr	r3, [r7, #8]
 801a7b2:	689b      	ldr	r3, [r3, #8]
 801a7b4:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801a7b6:	68bb      	ldr	r3, [r7, #8]
 801a7b8:	68db      	ldr	r3, [r3, #12]
 801a7ba:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801a7bc:	68bb      	ldr	r3, [r7, #8]
 801a7be:	685b      	ldr	r3, [r3, #4]
 801a7c0:	4a0a      	ldr	r2, [pc, #40]	@ (801a7ec <sys_check_timeouts+0x70>)
 801a7c2:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801a7c4:	68b9      	ldr	r1, [r7, #8]
 801a7c6:	200a      	movs	r0, #10
 801a7c8:	f7f8 fdb6 	bl	8013338 <memp_free>
    if (handler != NULL) {
 801a7cc:	687b      	ldr	r3, [r7, #4]
 801a7ce:	2b00      	cmp	r3, #0
 801a7d0:	d0da      	beq.n	801a788 <sys_check_timeouts+0xc>
      handler(arg);
 801a7d2:	687b      	ldr	r3, [r7, #4]
 801a7d4:	6838      	ldr	r0, [r7, #0]
 801a7d6:	4798      	blx	r3
  do {
 801a7d8:	e7d6      	b.n	801a788 <sys_check_timeouts+0xc>
      return;
 801a7da:	bf00      	nop
 801a7dc:	e000      	b.n	801a7e0 <sys_check_timeouts+0x64>
      return;
 801a7de:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801a7e0:	3710      	adds	r7, #16
 801a7e2:	46bd      	mov	sp, r7
 801a7e4:	bd80      	pop	{r7, pc}
 801a7e6:	bf00      	nop
 801a7e8:	2000cb10 	.word	0x2000cb10
 801a7ec:	2000cb14 	.word	0x2000cb14

0801a7f0 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801a7f0:	b580      	push	{r7, lr}
 801a7f2:	b082      	sub	sp, #8
 801a7f4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801a7f6:	4b16      	ldr	r3, [pc, #88]	@ (801a850 <sys_timeouts_sleeptime+0x60>)
 801a7f8:	681b      	ldr	r3, [r3, #0]
 801a7fa:	2b00      	cmp	r3, #0
 801a7fc:	d102      	bne.n	801a804 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801a7fe:	f04f 33ff 	mov.w	r3, #4294967295
 801a802:	e020      	b.n	801a846 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801a804:	f7f2 fc16 	bl	800d034 <sys_now>
 801a808:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801a80a:	4b11      	ldr	r3, [pc, #68]	@ (801a850 <sys_timeouts_sleeptime+0x60>)
 801a80c:	681b      	ldr	r3, [r3, #0]
 801a80e:	685a      	ldr	r2, [r3, #4]
 801a810:	687b      	ldr	r3, [r7, #4]
 801a812:	1ad3      	subs	r3, r2, r3
 801a814:	0fdb      	lsrs	r3, r3, #31
 801a816:	f003 0301 	and.w	r3, r3, #1
 801a81a:	b2db      	uxtb	r3, r3
 801a81c:	2b00      	cmp	r3, #0
 801a81e:	d001      	beq.n	801a824 <sys_timeouts_sleeptime+0x34>
    return 0;
 801a820:	2300      	movs	r3, #0
 801a822:	e010      	b.n	801a846 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801a824:	4b0a      	ldr	r3, [pc, #40]	@ (801a850 <sys_timeouts_sleeptime+0x60>)
 801a826:	681b      	ldr	r3, [r3, #0]
 801a828:	685a      	ldr	r2, [r3, #4]
 801a82a:	687b      	ldr	r3, [r7, #4]
 801a82c:	1ad3      	subs	r3, r2, r3
 801a82e:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801a830:	683b      	ldr	r3, [r7, #0]
 801a832:	2b00      	cmp	r3, #0
 801a834:	da06      	bge.n	801a844 <sys_timeouts_sleeptime+0x54>
 801a836:	4b07      	ldr	r3, [pc, #28]	@ (801a854 <sys_timeouts_sleeptime+0x64>)
 801a838:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 801a83c:	4906      	ldr	r1, [pc, #24]	@ (801a858 <sys_timeouts_sleeptime+0x68>)
 801a83e:	4807      	ldr	r0, [pc, #28]	@ (801a85c <sys_timeouts_sleeptime+0x6c>)
 801a840:	f003 fca4 	bl	801e18c <iprintf>
    return ret;
 801a844:	683b      	ldr	r3, [r7, #0]
  }
}
 801a846:	4618      	mov	r0, r3
 801a848:	3708      	adds	r7, #8
 801a84a:	46bd      	mov	sp, r7
 801a84c:	bd80      	pop	{r7, pc}
 801a84e:	bf00      	nop
 801a850:	2000cb10 	.word	0x2000cb10
 801a854:	0802310c 	.word	0x0802310c
 801a858:	080231e0 	.word	0x080231e0
 801a85c:	08023180 	.word	0x08023180

0801a860 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801a860:	b580      	push	{r7, lr}
 801a862:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801a864:	f003 fb0e 	bl	801de84 <rand>
 801a868:	4603      	mov	r3, r0
 801a86a:	b29b      	uxth	r3, r3
 801a86c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801a870:	b29b      	uxth	r3, r3
 801a872:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 801a876:	b29a      	uxth	r2, r3
 801a878:	4b01      	ldr	r3, [pc, #4]	@ (801a880 <udp_init+0x20>)
 801a87a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801a87c:	bf00      	nop
 801a87e:	bd80      	pop	{r7, pc}
 801a880:	200000ac 	.word	0x200000ac

0801a884 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801a884:	b580      	push	{r7, lr}
 801a886:	b084      	sub	sp, #16
 801a888:	af00      	add	r7, sp, #0
 801a88a:	60f8      	str	r0, [r7, #12]
 801a88c:	60b9      	str	r1, [r7, #8]
 801a88e:	4613      	mov	r3, r2
 801a890:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801a892:	68fb      	ldr	r3, [r7, #12]
 801a894:	2b00      	cmp	r3, #0
 801a896:	d105      	bne.n	801a8a4 <udp_input_local_match+0x20>
 801a898:	4b27      	ldr	r3, [pc, #156]	@ (801a938 <udp_input_local_match+0xb4>)
 801a89a:	2287      	movs	r2, #135	@ 0x87
 801a89c:	4927      	ldr	r1, [pc, #156]	@ (801a93c <udp_input_local_match+0xb8>)
 801a89e:	4828      	ldr	r0, [pc, #160]	@ (801a940 <udp_input_local_match+0xbc>)
 801a8a0:	f003 fc74 	bl	801e18c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801a8a4:	68bb      	ldr	r3, [r7, #8]
 801a8a6:	2b00      	cmp	r3, #0
 801a8a8:	d105      	bne.n	801a8b6 <udp_input_local_match+0x32>
 801a8aa:	4b23      	ldr	r3, [pc, #140]	@ (801a938 <udp_input_local_match+0xb4>)
 801a8ac:	2288      	movs	r2, #136	@ 0x88
 801a8ae:	4925      	ldr	r1, [pc, #148]	@ (801a944 <udp_input_local_match+0xc0>)
 801a8b0:	4823      	ldr	r0, [pc, #140]	@ (801a940 <udp_input_local_match+0xbc>)
 801a8b2:	f003 fc6b 	bl	801e18c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801a8b6:	68fb      	ldr	r3, [r7, #12]
 801a8b8:	7a1b      	ldrb	r3, [r3, #8]
 801a8ba:	2b00      	cmp	r3, #0
 801a8bc:	d00b      	beq.n	801a8d6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801a8be:	68fb      	ldr	r3, [r7, #12]
 801a8c0:	7a1a      	ldrb	r2, [r3, #8]
 801a8c2:	4b21      	ldr	r3, [pc, #132]	@ (801a948 <udp_input_local_match+0xc4>)
 801a8c4:	685b      	ldr	r3, [r3, #4]
 801a8c6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801a8ca:	3301      	adds	r3, #1
 801a8cc:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801a8ce:	429a      	cmp	r2, r3
 801a8d0:	d001      	beq.n	801a8d6 <udp_input_local_match+0x52>
    return 0;
 801a8d2:	2300      	movs	r3, #0
 801a8d4:	e02b      	b.n	801a92e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801a8d6:	79fb      	ldrb	r3, [r7, #7]
 801a8d8:	2b00      	cmp	r3, #0
 801a8da:	d018      	beq.n	801a90e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801a8dc:	68fb      	ldr	r3, [r7, #12]
 801a8de:	2b00      	cmp	r3, #0
 801a8e0:	d013      	beq.n	801a90a <udp_input_local_match+0x86>
 801a8e2:	68fb      	ldr	r3, [r7, #12]
 801a8e4:	681b      	ldr	r3, [r3, #0]
 801a8e6:	2b00      	cmp	r3, #0
 801a8e8:	d00f      	beq.n	801a90a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801a8ea:	4b17      	ldr	r3, [pc, #92]	@ (801a948 <udp_input_local_match+0xc4>)
 801a8ec:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801a8ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a8f2:	d00a      	beq.n	801a90a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801a8f4:	68fb      	ldr	r3, [r7, #12]
 801a8f6:	681a      	ldr	r2, [r3, #0]
 801a8f8:	4b13      	ldr	r3, [pc, #76]	@ (801a948 <udp_input_local_match+0xc4>)
 801a8fa:	695b      	ldr	r3, [r3, #20]
 801a8fc:	405a      	eors	r2, r3
 801a8fe:	68bb      	ldr	r3, [r7, #8]
 801a900:	3308      	adds	r3, #8
 801a902:	681b      	ldr	r3, [r3, #0]
 801a904:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801a906:	2b00      	cmp	r3, #0
 801a908:	d110      	bne.n	801a92c <udp_input_local_match+0xa8>
          return 1;
 801a90a:	2301      	movs	r3, #1
 801a90c:	e00f      	b.n	801a92e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801a90e:	68fb      	ldr	r3, [r7, #12]
 801a910:	2b00      	cmp	r3, #0
 801a912:	d009      	beq.n	801a928 <udp_input_local_match+0xa4>
 801a914:	68fb      	ldr	r3, [r7, #12]
 801a916:	681b      	ldr	r3, [r3, #0]
 801a918:	2b00      	cmp	r3, #0
 801a91a:	d005      	beq.n	801a928 <udp_input_local_match+0xa4>
 801a91c:	68fb      	ldr	r3, [r7, #12]
 801a91e:	681a      	ldr	r2, [r3, #0]
 801a920:	4b09      	ldr	r3, [pc, #36]	@ (801a948 <udp_input_local_match+0xc4>)
 801a922:	695b      	ldr	r3, [r3, #20]
 801a924:	429a      	cmp	r2, r3
 801a926:	d101      	bne.n	801a92c <udp_input_local_match+0xa8>
        return 1;
 801a928:	2301      	movs	r3, #1
 801a92a:	e000      	b.n	801a92e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801a92c:	2300      	movs	r3, #0
}
 801a92e:	4618      	mov	r0, r3
 801a930:	3710      	adds	r7, #16
 801a932:	46bd      	mov	sp, r7
 801a934:	bd80      	pop	{r7, pc}
 801a936:	bf00      	nop
 801a938:	080231f4 	.word	0x080231f4
 801a93c:	08023224 	.word	0x08023224
 801a940:	08023248 	.word	0x08023248
 801a944:	08023270 	.word	0x08023270
 801a948:	2000936c 	.word	0x2000936c

0801a94c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801a94c:	b590      	push	{r4, r7, lr}
 801a94e:	b08d      	sub	sp, #52	@ 0x34
 801a950:	af02      	add	r7, sp, #8
 801a952:	6078      	str	r0, [r7, #4]
 801a954:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801a956:	2300      	movs	r3, #0
 801a958:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801a95a:	687b      	ldr	r3, [r7, #4]
 801a95c:	2b00      	cmp	r3, #0
 801a95e:	d105      	bne.n	801a96c <udp_input+0x20>
 801a960:	4b7c      	ldr	r3, [pc, #496]	@ (801ab54 <udp_input+0x208>)
 801a962:	22cf      	movs	r2, #207	@ 0xcf
 801a964:	497c      	ldr	r1, [pc, #496]	@ (801ab58 <udp_input+0x20c>)
 801a966:	487d      	ldr	r0, [pc, #500]	@ (801ab5c <udp_input+0x210>)
 801a968:	f003 fc10 	bl	801e18c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801a96c:	683b      	ldr	r3, [r7, #0]
 801a96e:	2b00      	cmp	r3, #0
 801a970:	d105      	bne.n	801a97e <udp_input+0x32>
 801a972:	4b78      	ldr	r3, [pc, #480]	@ (801ab54 <udp_input+0x208>)
 801a974:	22d0      	movs	r2, #208	@ 0xd0
 801a976:	497a      	ldr	r1, [pc, #488]	@ (801ab60 <udp_input+0x214>)
 801a978:	4878      	ldr	r0, [pc, #480]	@ (801ab5c <udp_input+0x210>)
 801a97a:	f003 fc07 	bl	801e18c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801a97e:	687b      	ldr	r3, [r7, #4]
 801a980:	895b      	ldrh	r3, [r3, #10]
 801a982:	2b07      	cmp	r3, #7
 801a984:	d803      	bhi.n	801a98e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801a986:	6878      	ldr	r0, [r7, #4]
 801a988:	f7f9 fb48 	bl	801401c <pbuf_free>
    goto end;
 801a98c:	e0de      	b.n	801ab4c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801a98e:	687b      	ldr	r3, [r7, #4]
 801a990:	685b      	ldr	r3, [r3, #4]
 801a992:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801a994:	4b73      	ldr	r3, [pc, #460]	@ (801ab64 <udp_input+0x218>)
 801a996:	695b      	ldr	r3, [r3, #20]
 801a998:	4a72      	ldr	r2, [pc, #456]	@ (801ab64 <udp_input+0x218>)
 801a99a:	6812      	ldr	r2, [r2, #0]
 801a99c:	4611      	mov	r1, r2
 801a99e:	4618      	mov	r0, r3
 801a9a0:	f001 fc56 	bl	801c250 <ip4_addr_isbroadcast_u32>
 801a9a4:	4603      	mov	r3, r0
 801a9a6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801a9a8:	697b      	ldr	r3, [r7, #20]
 801a9aa:	881b      	ldrh	r3, [r3, #0]
 801a9ac:	b29b      	uxth	r3, r3
 801a9ae:	4618      	mov	r0, r3
 801a9b0:	f7f7 ff74 	bl	801289c <lwip_htons>
 801a9b4:	4603      	mov	r3, r0
 801a9b6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801a9b8:	697b      	ldr	r3, [r7, #20]
 801a9ba:	885b      	ldrh	r3, [r3, #2]
 801a9bc:	b29b      	uxth	r3, r3
 801a9be:	4618      	mov	r0, r3
 801a9c0:	f7f7 ff6c 	bl	801289c <lwip_htons>
 801a9c4:	4603      	mov	r3, r0
 801a9c6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801a9c8:	2300      	movs	r3, #0
 801a9ca:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 801a9cc:	2300      	movs	r3, #0
 801a9ce:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801a9d0:	2300      	movs	r3, #0
 801a9d2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801a9d4:	4b64      	ldr	r3, [pc, #400]	@ (801ab68 <udp_input+0x21c>)
 801a9d6:	681b      	ldr	r3, [r3, #0]
 801a9d8:	627b      	str	r3, [r7, #36]	@ 0x24
 801a9da:	e054      	b.n	801aa86 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801a9dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a9de:	8a5b      	ldrh	r3, [r3, #18]
 801a9e0:	89fa      	ldrh	r2, [r7, #14]
 801a9e2:	429a      	cmp	r2, r3
 801a9e4:	d14a      	bne.n	801aa7c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801a9e6:	7cfb      	ldrb	r3, [r7, #19]
 801a9e8:	461a      	mov	r2, r3
 801a9ea:	6839      	ldr	r1, [r7, #0]
 801a9ec:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a9ee:	f7ff ff49 	bl	801a884 <udp_input_local_match>
 801a9f2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801a9f4:	2b00      	cmp	r3, #0
 801a9f6:	d041      	beq.n	801aa7c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801a9f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a9fa:	7c1b      	ldrb	r3, [r3, #16]
 801a9fc:	f003 0304 	and.w	r3, r3, #4
 801aa00:	2b00      	cmp	r3, #0
 801aa02:	d11d      	bne.n	801aa40 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801aa04:	69fb      	ldr	r3, [r7, #28]
 801aa06:	2b00      	cmp	r3, #0
 801aa08:	d102      	bne.n	801aa10 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801aa0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aa0c:	61fb      	str	r3, [r7, #28]
 801aa0e:	e017      	b.n	801aa40 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801aa10:	7cfb      	ldrb	r3, [r7, #19]
 801aa12:	2b00      	cmp	r3, #0
 801aa14:	d014      	beq.n	801aa40 <udp_input+0xf4>
 801aa16:	4b53      	ldr	r3, [pc, #332]	@ (801ab64 <udp_input+0x218>)
 801aa18:	695b      	ldr	r3, [r3, #20]
 801aa1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801aa1e:	d10f      	bne.n	801aa40 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801aa20:	69fb      	ldr	r3, [r7, #28]
 801aa22:	681a      	ldr	r2, [r3, #0]
 801aa24:	683b      	ldr	r3, [r7, #0]
 801aa26:	3304      	adds	r3, #4
 801aa28:	681b      	ldr	r3, [r3, #0]
 801aa2a:	429a      	cmp	r2, r3
 801aa2c:	d008      	beq.n	801aa40 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801aa2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aa30:	681a      	ldr	r2, [r3, #0]
 801aa32:	683b      	ldr	r3, [r7, #0]
 801aa34:	3304      	adds	r3, #4
 801aa36:	681b      	ldr	r3, [r3, #0]
 801aa38:	429a      	cmp	r2, r3
 801aa3a:	d101      	bne.n	801aa40 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801aa3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aa3e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801aa40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aa42:	8a9b      	ldrh	r3, [r3, #20]
 801aa44:	8a3a      	ldrh	r2, [r7, #16]
 801aa46:	429a      	cmp	r2, r3
 801aa48:	d118      	bne.n	801aa7c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801aa4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aa4c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801aa4e:	2b00      	cmp	r3, #0
 801aa50:	d005      	beq.n	801aa5e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801aa52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aa54:	685a      	ldr	r2, [r3, #4]
 801aa56:	4b43      	ldr	r3, [pc, #268]	@ (801ab64 <udp_input+0x218>)
 801aa58:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801aa5a:	429a      	cmp	r2, r3
 801aa5c:	d10e      	bne.n	801aa7c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801aa5e:	6a3b      	ldr	r3, [r7, #32]
 801aa60:	2b00      	cmp	r3, #0
 801aa62:	d014      	beq.n	801aa8e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801aa64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aa66:	68da      	ldr	r2, [r3, #12]
 801aa68:	6a3b      	ldr	r3, [r7, #32]
 801aa6a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801aa6c:	4b3e      	ldr	r3, [pc, #248]	@ (801ab68 <udp_input+0x21c>)
 801aa6e:	681a      	ldr	r2, [r3, #0]
 801aa70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aa72:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801aa74:	4a3c      	ldr	r2, [pc, #240]	@ (801ab68 <udp_input+0x21c>)
 801aa76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aa78:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801aa7a:	e008      	b.n	801aa8e <udp_input+0x142>
      }
    }

    prev = pcb;
 801aa7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aa7e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801aa80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aa82:	68db      	ldr	r3, [r3, #12]
 801aa84:	627b      	str	r3, [r7, #36]	@ 0x24
 801aa86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aa88:	2b00      	cmp	r3, #0
 801aa8a:	d1a7      	bne.n	801a9dc <udp_input+0x90>
 801aa8c:	e000      	b.n	801aa90 <udp_input+0x144>
        break;
 801aa8e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801aa90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aa92:	2b00      	cmp	r3, #0
 801aa94:	d101      	bne.n	801aa9a <udp_input+0x14e>
    pcb = uncon_pcb;
 801aa96:	69fb      	ldr	r3, [r7, #28]
 801aa98:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801aa9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aa9c:	2b00      	cmp	r3, #0
 801aa9e:	d002      	beq.n	801aaa6 <udp_input+0x15a>
    for_us = 1;
 801aaa0:	2301      	movs	r3, #1
 801aaa2:	76fb      	strb	r3, [r7, #27]
 801aaa4:	e00a      	b.n	801aabc <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801aaa6:	683b      	ldr	r3, [r7, #0]
 801aaa8:	3304      	adds	r3, #4
 801aaaa:	681a      	ldr	r2, [r3, #0]
 801aaac:	4b2d      	ldr	r3, [pc, #180]	@ (801ab64 <udp_input+0x218>)
 801aaae:	695b      	ldr	r3, [r3, #20]
 801aab0:	429a      	cmp	r2, r3
 801aab2:	bf0c      	ite	eq
 801aab4:	2301      	moveq	r3, #1
 801aab6:	2300      	movne	r3, #0
 801aab8:	b2db      	uxtb	r3, r3
 801aaba:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801aabc:	7efb      	ldrb	r3, [r7, #27]
 801aabe:	2b00      	cmp	r3, #0
 801aac0:	d041      	beq.n	801ab46 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801aac2:	2108      	movs	r1, #8
 801aac4:	6878      	ldr	r0, [r7, #4]
 801aac6:	f7f9 fa23 	bl	8013f10 <pbuf_remove_header>
 801aaca:	4603      	mov	r3, r0
 801aacc:	2b00      	cmp	r3, #0
 801aace:	d00a      	beq.n	801aae6 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801aad0:	4b20      	ldr	r3, [pc, #128]	@ (801ab54 <udp_input+0x208>)
 801aad2:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 801aad6:	4925      	ldr	r1, [pc, #148]	@ (801ab6c <udp_input+0x220>)
 801aad8:	4820      	ldr	r0, [pc, #128]	@ (801ab5c <udp_input+0x210>)
 801aada:	f003 fb57 	bl	801e18c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801aade:	6878      	ldr	r0, [r7, #4]
 801aae0:	f7f9 fa9c 	bl	801401c <pbuf_free>
      goto end;
 801aae4:	e032      	b.n	801ab4c <udp_input+0x200>
    }

    if (pcb != NULL) {
 801aae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aae8:	2b00      	cmp	r3, #0
 801aaea:	d012      	beq.n	801ab12 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801aaec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aaee:	699b      	ldr	r3, [r3, #24]
 801aaf0:	2b00      	cmp	r3, #0
 801aaf2:	d00a      	beq.n	801ab0a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801aaf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aaf6:	699c      	ldr	r4, [r3, #24]
 801aaf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aafa:	69d8      	ldr	r0, [r3, #28]
 801aafc:	8a3b      	ldrh	r3, [r7, #16]
 801aafe:	9300      	str	r3, [sp, #0]
 801ab00:	4b1b      	ldr	r3, [pc, #108]	@ (801ab70 <udp_input+0x224>)
 801ab02:	687a      	ldr	r2, [r7, #4]
 801ab04:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801ab06:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801ab08:	e021      	b.n	801ab4e <udp_input+0x202>
        pbuf_free(p);
 801ab0a:	6878      	ldr	r0, [r7, #4]
 801ab0c:	f7f9 fa86 	bl	801401c <pbuf_free>
        goto end;
 801ab10:	e01c      	b.n	801ab4c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801ab12:	7cfb      	ldrb	r3, [r7, #19]
 801ab14:	2b00      	cmp	r3, #0
 801ab16:	d112      	bne.n	801ab3e <udp_input+0x1f2>
 801ab18:	4b12      	ldr	r3, [pc, #72]	@ (801ab64 <udp_input+0x218>)
 801ab1a:	695b      	ldr	r3, [r3, #20]
 801ab1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801ab20:	2be0      	cmp	r3, #224	@ 0xe0
 801ab22:	d00c      	beq.n	801ab3e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801ab24:	4b0f      	ldr	r3, [pc, #60]	@ (801ab64 <udp_input+0x218>)
 801ab26:	899b      	ldrh	r3, [r3, #12]
 801ab28:	3308      	adds	r3, #8
 801ab2a:	b29b      	uxth	r3, r3
 801ab2c:	b21b      	sxth	r3, r3
 801ab2e:	4619      	mov	r1, r3
 801ab30:	6878      	ldr	r0, [r7, #4]
 801ab32:	f7f9 fa60 	bl	8013ff6 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801ab36:	2103      	movs	r1, #3
 801ab38:	6878      	ldr	r0, [r7, #4]
 801ab3a:	f001 f869 	bl	801bc10 <icmp_dest_unreach>
      pbuf_free(p);
 801ab3e:	6878      	ldr	r0, [r7, #4]
 801ab40:	f7f9 fa6c 	bl	801401c <pbuf_free>
  return;
 801ab44:	e003      	b.n	801ab4e <udp_input+0x202>
    pbuf_free(p);
 801ab46:	6878      	ldr	r0, [r7, #4]
 801ab48:	f7f9 fa68 	bl	801401c <pbuf_free>
  return;
 801ab4c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801ab4e:	372c      	adds	r7, #44	@ 0x2c
 801ab50:	46bd      	mov	sp, r7
 801ab52:	bd90      	pop	{r4, r7, pc}
 801ab54:	080231f4 	.word	0x080231f4
 801ab58:	08023298 	.word	0x08023298
 801ab5c:	08023248 	.word	0x08023248
 801ab60:	080232b0 	.word	0x080232b0
 801ab64:	2000936c 	.word	0x2000936c
 801ab68:	2000cb1c 	.word	0x2000cb1c
 801ab6c:	080232cc 	.word	0x080232cc
 801ab70:	2000937c 	.word	0x2000937c

0801ab74 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801ab74:	b480      	push	{r7}
 801ab76:	b085      	sub	sp, #20
 801ab78:	af00      	add	r7, sp, #0
 801ab7a:	6078      	str	r0, [r7, #4]
 801ab7c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801ab7e:	687b      	ldr	r3, [r7, #4]
 801ab80:	2b00      	cmp	r3, #0
 801ab82:	d01e      	beq.n	801abc2 <udp_netif_ip_addr_changed+0x4e>
 801ab84:	687b      	ldr	r3, [r7, #4]
 801ab86:	681b      	ldr	r3, [r3, #0]
 801ab88:	2b00      	cmp	r3, #0
 801ab8a:	d01a      	beq.n	801abc2 <udp_netif_ip_addr_changed+0x4e>
 801ab8c:	683b      	ldr	r3, [r7, #0]
 801ab8e:	2b00      	cmp	r3, #0
 801ab90:	d017      	beq.n	801abc2 <udp_netif_ip_addr_changed+0x4e>
 801ab92:	683b      	ldr	r3, [r7, #0]
 801ab94:	681b      	ldr	r3, [r3, #0]
 801ab96:	2b00      	cmp	r3, #0
 801ab98:	d013      	beq.n	801abc2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801ab9a:	4b0d      	ldr	r3, [pc, #52]	@ (801abd0 <udp_netif_ip_addr_changed+0x5c>)
 801ab9c:	681b      	ldr	r3, [r3, #0]
 801ab9e:	60fb      	str	r3, [r7, #12]
 801aba0:	e00c      	b.n	801abbc <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801aba2:	68fb      	ldr	r3, [r7, #12]
 801aba4:	681a      	ldr	r2, [r3, #0]
 801aba6:	687b      	ldr	r3, [r7, #4]
 801aba8:	681b      	ldr	r3, [r3, #0]
 801abaa:	429a      	cmp	r2, r3
 801abac:	d103      	bne.n	801abb6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801abae:	683b      	ldr	r3, [r7, #0]
 801abb0:	681a      	ldr	r2, [r3, #0]
 801abb2:	68fb      	ldr	r3, [r7, #12]
 801abb4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801abb6:	68fb      	ldr	r3, [r7, #12]
 801abb8:	68db      	ldr	r3, [r3, #12]
 801abba:	60fb      	str	r3, [r7, #12]
 801abbc:	68fb      	ldr	r3, [r7, #12]
 801abbe:	2b00      	cmp	r3, #0
 801abc0:	d1ef      	bne.n	801aba2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801abc2:	bf00      	nop
 801abc4:	3714      	adds	r7, #20
 801abc6:	46bd      	mov	sp, r7
 801abc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abcc:	4770      	bx	lr
 801abce:	bf00      	nop
 801abd0:	2000cb1c 	.word	0x2000cb1c

0801abd4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801abd4:	b580      	push	{r7, lr}
 801abd6:	b082      	sub	sp, #8
 801abd8:	af00      	add	r7, sp, #0
 801abda:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801abdc:	4915      	ldr	r1, [pc, #84]	@ (801ac34 <etharp_free_entry+0x60>)
 801abde:	687a      	ldr	r2, [r7, #4]
 801abe0:	4613      	mov	r3, r2
 801abe2:	005b      	lsls	r3, r3, #1
 801abe4:	4413      	add	r3, r2
 801abe6:	00db      	lsls	r3, r3, #3
 801abe8:	440b      	add	r3, r1
 801abea:	681b      	ldr	r3, [r3, #0]
 801abec:	2b00      	cmp	r3, #0
 801abee:	d013      	beq.n	801ac18 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801abf0:	4910      	ldr	r1, [pc, #64]	@ (801ac34 <etharp_free_entry+0x60>)
 801abf2:	687a      	ldr	r2, [r7, #4]
 801abf4:	4613      	mov	r3, r2
 801abf6:	005b      	lsls	r3, r3, #1
 801abf8:	4413      	add	r3, r2
 801abfa:	00db      	lsls	r3, r3, #3
 801abfc:	440b      	add	r3, r1
 801abfe:	681b      	ldr	r3, [r3, #0]
 801ac00:	4618      	mov	r0, r3
 801ac02:	f7f9 fa0b 	bl	801401c <pbuf_free>
    arp_table[i].q = NULL;
 801ac06:	490b      	ldr	r1, [pc, #44]	@ (801ac34 <etharp_free_entry+0x60>)
 801ac08:	687a      	ldr	r2, [r7, #4]
 801ac0a:	4613      	mov	r3, r2
 801ac0c:	005b      	lsls	r3, r3, #1
 801ac0e:	4413      	add	r3, r2
 801ac10:	00db      	lsls	r3, r3, #3
 801ac12:	440b      	add	r3, r1
 801ac14:	2200      	movs	r2, #0
 801ac16:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801ac18:	4906      	ldr	r1, [pc, #24]	@ (801ac34 <etharp_free_entry+0x60>)
 801ac1a:	687a      	ldr	r2, [r7, #4]
 801ac1c:	4613      	mov	r3, r2
 801ac1e:	005b      	lsls	r3, r3, #1
 801ac20:	4413      	add	r3, r2
 801ac22:	00db      	lsls	r3, r3, #3
 801ac24:	440b      	add	r3, r1
 801ac26:	3314      	adds	r3, #20
 801ac28:	2200      	movs	r2, #0
 801ac2a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801ac2c:	bf00      	nop
 801ac2e:	3708      	adds	r7, #8
 801ac30:	46bd      	mov	sp, r7
 801ac32:	bd80      	pop	{r7, pc}
 801ac34:	2000cb20 	.word	0x2000cb20

0801ac38 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801ac38:	b580      	push	{r7, lr}
 801ac3a:	b082      	sub	sp, #8
 801ac3c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801ac3e:	2300      	movs	r3, #0
 801ac40:	607b      	str	r3, [r7, #4]
 801ac42:	e096      	b.n	801ad72 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801ac44:	494f      	ldr	r1, [pc, #316]	@ (801ad84 <etharp_tmr+0x14c>)
 801ac46:	687a      	ldr	r2, [r7, #4]
 801ac48:	4613      	mov	r3, r2
 801ac4a:	005b      	lsls	r3, r3, #1
 801ac4c:	4413      	add	r3, r2
 801ac4e:	00db      	lsls	r3, r3, #3
 801ac50:	440b      	add	r3, r1
 801ac52:	3314      	adds	r3, #20
 801ac54:	781b      	ldrb	r3, [r3, #0]
 801ac56:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801ac58:	78fb      	ldrb	r3, [r7, #3]
 801ac5a:	2b00      	cmp	r3, #0
 801ac5c:	f000 8086 	beq.w	801ad6c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801ac60:	4948      	ldr	r1, [pc, #288]	@ (801ad84 <etharp_tmr+0x14c>)
 801ac62:	687a      	ldr	r2, [r7, #4]
 801ac64:	4613      	mov	r3, r2
 801ac66:	005b      	lsls	r3, r3, #1
 801ac68:	4413      	add	r3, r2
 801ac6a:	00db      	lsls	r3, r3, #3
 801ac6c:	440b      	add	r3, r1
 801ac6e:	3312      	adds	r3, #18
 801ac70:	881b      	ldrh	r3, [r3, #0]
 801ac72:	3301      	adds	r3, #1
 801ac74:	b298      	uxth	r0, r3
 801ac76:	4943      	ldr	r1, [pc, #268]	@ (801ad84 <etharp_tmr+0x14c>)
 801ac78:	687a      	ldr	r2, [r7, #4]
 801ac7a:	4613      	mov	r3, r2
 801ac7c:	005b      	lsls	r3, r3, #1
 801ac7e:	4413      	add	r3, r2
 801ac80:	00db      	lsls	r3, r3, #3
 801ac82:	440b      	add	r3, r1
 801ac84:	3312      	adds	r3, #18
 801ac86:	4602      	mov	r2, r0
 801ac88:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801ac8a:	493e      	ldr	r1, [pc, #248]	@ (801ad84 <etharp_tmr+0x14c>)
 801ac8c:	687a      	ldr	r2, [r7, #4]
 801ac8e:	4613      	mov	r3, r2
 801ac90:	005b      	lsls	r3, r3, #1
 801ac92:	4413      	add	r3, r2
 801ac94:	00db      	lsls	r3, r3, #3
 801ac96:	440b      	add	r3, r1
 801ac98:	3312      	adds	r3, #18
 801ac9a:	881b      	ldrh	r3, [r3, #0]
 801ac9c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 801aca0:	d215      	bcs.n	801acce <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801aca2:	4938      	ldr	r1, [pc, #224]	@ (801ad84 <etharp_tmr+0x14c>)
 801aca4:	687a      	ldr	r2, [r7, #4]
 801aca6:	4613      	mov	r3, r2
 801aca8:	005b      	lsls	r3, r3, #1
 801acaa:	4413      	add	r3, r2
 801acac:	00db      	lsls	r3, r3, #3
 801acae:	440b      	add	r3, r1
 801acb0:	3314      	adds	r3, #20
 801acb2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801acb4:	2b01      	cmp	r3, #1
 801acb6:	d10e      	bne.n	801acd6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801acb8:	4932      	ldr	r1, [pc, #200]	@ (801ad84 <etharp_tmr+0x14c>)
 801acba:	687a      	ldr	r2, [r7, #4]
 801acbc:	4613      	mov	r3, r2
 801acbe:	005b      	lsls	r3, r3, #1
 801acc0:	4413      	add	r3, r2
 801acc2:	00db      	lsls	r3, r3, #3
 801acc4:	440b      	add	r3, r1
 801acc6:	3312      	adds	r3, #18
 801acc8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801acca:	2b04      	cmp	r3, #4
 801accc:	d903      	bls.n	801acd6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801acce:	6878      	ldr	r0, [r7, #4]
 801acd0:	f7ff ff80 	bl	801abd4 <etharp_free_entry>
 801acd4:	e04a      	b.n	801ad6c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801acd6:	492b      	ldr	r1, [pc, #172]	@ (801ad84 <etharp_tmr+0x14c>)
 801acd8:	687a      	ldr	r2, [r7, #4]
 801acda:	4613      	mov	r3, r2
 801acdc:	005b      	lsls	r3, r3, #1
 801acde:	4413      	add	r3, r2
 801ace0:	00db      	lsls	r3, r3, #3
 801ace2:	440b      	add	r3, r1
 801ace4:	3314      	adds	r3, #20
 801ace6:	781b      	ldrb	r3, [r3, #0]
 801ace8:	2b03      	cmp	r3, #3
 801acea:	d10a      	bne.n	801ad02 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801acec:	4925      	ldr	r1, [pc, #148]	@ (801ad84 <etharp_tmr+0x14c>)
 801acee:	687a      	ldr	r2, [r7, #4]
 801acf0:	4613      	mov	r3, r2
 801acf2:	005b      	lsls	r3, r3, #1
 801acf4:	4413      	add	r3, r2
 801acf6:	00db      	lsls	r3, r3, #3
 801acf8:	440b      	add	r3, r1
 801acfa:	3314      	adds	r3, #20
 801acfc:	2204      	movs	r2, #4
 801acfe:	701a      	strb	r2, [r3, #0]
 801ad00:	e034      	b.n	801ad6c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801ad02:	4920      	ldr	r1, [pc, #128]	@ (801ad84 <etharp_tmr+0x14c>)
 801ad04:	687a      	ldr	r2, [r7, #4]
 801ad06:	4613      	mov	r3, r2
 801ad08:	005b      	lsls	r3, r3, #1
 801ad0a:	4413      	add	r3, r2
 801ad0c:	00db      	lsls	r3, r3, #3
 801ad0e:	440b      	add	r3, r1
 801ad10:	3314      	adds	r3, #20
 801ad12:	781b      	ldrb	r3, [r3, #0]
 801ad14:	2b04      	cmp	r3, #4
 801ad16:	d10a      	bne.n	801ad2e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801ad18:	491a      	ldr	r1, [pc, #104]	@ (801ad84 <etharp_tmr+0x14c>)
 801ad1a:	687a      	ldr	r2, [r7, #4]
 801ad1c:	4613      	mov	r3, r2
 801ad1e:	005b      	lsls	r3, r3, #1
 801ad20:	4413      	add	r3, r2
 801ad22:	00db      	lsls	r3, r3, #3
 801ad24:	440b      	add	r3, r1
 801ad26:	3314      	adds	r3, #20
 801ad28:	2202      	movs	r2, #2
 801ad2a:	701a      	strb	r2, [r3, #0]
 801ad2c:	e01e      	b.n	801ad6c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801ad2e:	4915      	ldr	r1, [pc, #84]	@ (801ad84 <etharp_tmr+0x14c>)
 801ad30:	687a      	ldr	r2, [r7, #4]
 801ad32:	4613      	mov	r3, r2
 801ad34:	005b      	lsls	r3, r3, #1
 801ad36:	4413      	add	r3, r2
 801ad38:	00db      	lsls	r3, r3, #3
 801ad3a:	440b      	add	r3, r1
 801ad3c:	3314      	adds	r3, #20
 801ad3e:	781b      	ldrb	r3, [r3, #0]
 801ad40:	2b01      	cmp	r3, #1
 801ad42:	d113      	bne.n	801ad6c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801ad44:	490f      	ldr	r1, [pc, #60]	@ (801ad84 <etharp_tmr+0x14c>)
 801ad46:	687a      	ldr	r2, [r7, #4]
 801ad48:	4613      	mov	r3, r2
 801ad4a:	005b      	lsls	r3, r3, #1
 801ad4c:	4413      	add	r3, r2
 801ad4e:	00db      	lsls	r3, r3, #3
 801ad50:	440b      	add	r3, r1
 801ad52:	3308      	adds	r3, #8
 801ad54:	6818      	ldr	r0, [r3, #0]
 801ad56:	687a      	ldr	r2, [r7, #4]
 801ad58:	4613      	mov	r3, r2
 801ad5a:	005b      	lsls	r3, r3, #1
 801ad5c:	4413      	add	r3, r2
 801ad5e:	00db      	lsls	r3, r3, #3
 801ad60:	4a08      	ldr	r2, [pc, #32]	@ (801ad84 <etharp_tmr+0x14c>)
 801ad62:	4413      	add	r3, r2
 801ad64:	3304      	adds	r3, #4
 801ad66:	4619      	mov	r1, r3
 801ad68:	f000 fe3e 	bl	801b9e8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801ad6c:	687b      	ldr	r3, [r7, #4]
 801ad6e:	3301      	adds	r3, #1
 801ad70:	607b      	str	r3, [r7, #4]
 801ad72:	687b      	ldr	r3, [r7, #4]
 801ad74:	2b09      	cmp	r3, #9
 801ad76:	f77f af65 	ble.w	801ac44 <etharp_tmr+0xc>
      }
    }
  }
}
 801ad7a:	bf00      	nop
 801ad7c:	bf00      	nop
 801ad7e:	3708      	adds	r7, #8
 801ad80:	46bd      	mov	sp, r7
 801ad82:	bd80      	pop	{r7, pc}
 801ad84:	2000cb20 	.word	0x2000cb20

0801ad88 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801ad88:	b580      	push	{r7, lr}
 801ad8a:	b08a      	sub	sp, #40	@ 0x28
 801ad8c:	af00      	add	r7, sp, #0
 801ad8e:	60f8      	str	r0, [r7, #12]
 801ad90:	460b      	mov	r3, r1
 801ad92:	607a      	str	r2, [r7, #4]
 801ad94:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801ad96:	230a      	movs	r3, #10
 801ad98:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801ad9a:	230a      	movs	r3, #10
 801ad9c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801ad9e:	230a      	movs	r3, #10
 801ada0:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 801ada2:	2300      	movs	r3, #0
 801ada4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801ada6:	230a      	movs	r3, #10
 801ada8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801adaa:	2300      	movs	r3, #0
 801adac:	83bb      	strh	r3, [r7, #28]
 801adae:	2300      	movs	r3, #0
 801adb0:	837b      	strh	r3, [r7, #26]
 801adb2:	2300      	movs	r3, #0
 801adb4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801adb6:	2300      	movs	r3, #0
 801adb8:	843b      	strh	r3, [r7, #32]
 801adba:	e0ae      	b.n	801af1a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801adbc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801adc0:	49a6      	ldr	r1, [pc, #664]	@ (801b05c <etharp_find_entry+0x2d4>)
 801adc2:	4613      	mov	r3, r2
 801adc4:	005b      	lsls	r3, r3, #1
 801adc6:	4413      	add	r3, r2
 801adc8:	00db      	lsls	r3, r3, #3
 801adca:	440b      	add	r3, r1
 801adcc:	3314      	adds	r3, #20
 801adce:	781b      	ldrb	r3, [r3, #0]
 801add0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801add2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801add6:	2b0a      	cmp	r3, #10
 801add8:	d105      	bne.n	801ade6 <etharp_find_entry+0x5e>
 801adda:	7dfb      	ldrb	r3, [r7, #23]
 801addc:	2b00      	cmp	r3, #0
 801adde:	d102      	bne.n	801ade6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801ade0:	8c3b      	ldrh	r3, [r7, #32]
 801ade2:	847b      	strh	r3, [r7, #34]	@ 0x22
 801ade4:	e095      	b.n	801af12 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801ade6:	7dfb      	ldrb	r3, [r7, #23]
 801ade8:	2b00      	cmp	r3, #0
 801adea:	f000 8092 	beq.w	801af12 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801adee:	7dfb      	ldrb	r3, [r7, #23]
 801adf0:	2b01      	cmp	r3, #1
 801adf2:	d009      	beq.n	801ae08 <etharp_find_entry+0x80>
 801adf4:	7dfb      	ldrb	r3, [r7, #23]
 801adf6:	2b01      	cmp	r3, #1
 801adf8:	d806      	bhi.n	801ae08 <etharp_find_entry+0x80>
 801adfa:	4b99      	ldr	r3, [pc, #612]	@ (801b060 <etharp_find_entry+0x2d8>)
 801adfc:	f240 1223 	movw	r2, #291	@ 0x123
 801ae00:	4998      	ldr	r1, [pc, #608]	@ (801b064 <etharp_find_entry+0x2dc>)
 801ae02:	4899      	ldr	r0, [pc, #612]	@ (801b068 <etharp_find_entry+0x2e0>)
 801ae04:	f003 f9c2 	bl	801e18c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801ae08:	68fb      	ldr	r3, [r7, #12]
 801ae0a:	2b00      	cmp	r3, #0
 801ae0c:	d020      	beq.n	801ae50 <etharp_find_entry+0xc8>
 801ae0e:	68fb      	ldr	r3, [r7, #12]
 801ae10:	6819      	ldr	r1, [r3, #0]
 801ae12:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ae16:	4891      	ldr	r0, [pc, #580]	@ (801b05c <etharp_find_entry+0x2d4>)
 801ae18:	4613      	mov	r3, r2
 801ae1a:	005b      	lsls	r3, r3, #1
 801ae1c:	4413      	add	r3, r2
 801ae1e:	00db      	lsls	r3, r3, #3
 801ae20:	4403      	add	r3, r0
 801ae22:	3304      	adds	r3, #4
 801ae24:	681b      	ldr	r3, [r3, #0]
 801ae26:	4299      	cmp	r1, r3
 801ae28:	d112      	bne.n	801ae50 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801ae2a:	687b      	ldr	r3, [r7, #4]
 801ae2c:	2b00      	cmp	r3, #0
 801ae2e:	d00c      	beq.n	801ae4a <etharp_find_entry+0xc2>
 801ae30:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ae34:	4989      	ldr	r1, [pc, #548]	@ (801b05c <etharp_find_entry+0x2d4>)
 801ae36:	4613      	mov	r3, r2
 801ae38:	005b      	lsls	r3, r3, #1
 801ae3a:	4413      	add	r3, r2
 801ae3c:	00db      	lsls	r3, r3, #3
 801ae3e:	440b      	add	r3, r1
 801ae40:	3308      	adds	r3, #8
 801ae42:	681b      	ldr	r3, [r3, #0]
 801ae44:	687a      	ldr	r2, [r7, #4]
 801ae46:	429a      	cmp	r2, r3
 801ae48:	d102      	bne.n	801ae50 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801ae4a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801ae4e:	e100      	b.n	801b052 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801ae50:	7dfb      	ldrb	r3, [r7, #23]
 801ae52:	2b01      	cmp	r3, #1
 801ae54:	d140      	bne.n	801aed8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801ae56:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ae5a:	4980      	ldr	r1, [pc, #512]	@ (801b05c <etharp_find_entry+0x2d4>)
 801ae5c:	4613      	mov	r3, r2
 801ae5e:	005b      	lsls	r3, r3, #1
 801ae60:	4413      	add	r3, r2
 801ae62:	00db      	lsls	r3, r3, #3
 801ae64:	440b      	add	r3, r1
 801ae66:	681b      	ldr	r3, [r3, #0]
 801ae68:	2b00      	cmp	r3, #0
 801ae6a:	d01a      	beq.n	801aea2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801ae6c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ae70:	497a      	ldr	r1, [pc, #488]	@ (801b05c <etharp_find_entry+0x2d4>)
 801ae72:	4613      	mov	r3, r2
 801ae74:	005b      	lsls	r3, r3, #1
 801ae76:	4413      	add	r3, r2
 801ae78:	00db      	lsls	r3, r3, #3
 801ae7a:	440b      	add	r3, r1
 801ae7c:	3312      	adds	r3, #18
 801ae7e:	881b      	ldrh	r3, [r3, #0]
 801ae80:	8bba      	ldrh	r2, [r7, #28]
 801ae82:	429a      	cmp	r2, r3
 801ae84:	d845      	bhi.n	801af12 <etharp_find_entry+0x18a>
            old_queue = i;
 801ae86:	8c3b      	ldrh	r3, [r7, #32]
 801ae88:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801ae8a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ae8e:	4973      	ldr	r1, [pc, #460]	@ (801b05c <etharp_find_entry+0x2d4>)
 801ae90:	4613      	mov	r3, r2
 801ae92:	005b      	lsls	r3, r3, #1
 801ae94:	4413      	add	r3, r2
 801ae96:	00db      	lsls	r3, r3, #3
 801ae98:	440b      	add	r3, r1
 801ae9a:	3312      	adds	r3, #18
 801ae9c:	881b      	ldrh	r3, [r3, #0]
 801ae9e:	83bb      	strh	r3, [r7, #28]
 801aea0:	e037      	b.n	801af12 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801aea2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801aea6:	496d      	ldr	r1, [pc, #436]	@ (801b05c <etharp_find_entry+0x2d4>)
 801aea8:	4613      	mov	r3, r2
 801aeaa:	005b      	lsls	r3, r3, #1
 801aeac:	4413      	add	r3, r2
 801aeae:	00db      	lsls	r3, r3, #3
 801aeb0:	440b      	add	r3, r1
 801aeb2:	3312      	adds	r3, #18
 801aeb4:	881b      	ldrh	r3, [r3, #0]
 801aeb6:	8b7a      	ldrh	r2, [r7, #26]
 801aeb8:	429a      	cmp	r2, r3
 801aeba:	d82a      	bhi.n	801af12 <etharp_find_entry+0x18a>
            old_pending = i;
 801aebc:	8c3b      	ldrh	r3, [r7, #32]
 801aebe:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 801aec0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801aec4:	4965      	ldr	r1, [pc, #404]	@ (801b05c <etharp_find_entry+0x2d4>)
 801aec6:	4613      	mov	r3, r2
 801aec8:	005b      	lsls	r3, r3, #1
 801aeca:	4413      	add	r3, r2
 801aecc:	00db      	lsls	r3, r3, #3
 801aece:	440b      	add	r3, r1
 801aed0:	3312      	adds	r3, #18
 801aed2:	881b      	ldrh	r3, [r3, #0]
 801aed4:	837b      	strh	r3, [r7, #26]
 801aed6:	e01c      	b.n	801af12 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801aed8:	7dfb      	ldrb	r3, [r7, #23]
 801aeda:	2b01      	cmp	r3, #1
 801aedc:	d919      	bls.n	801af12 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801aede:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801aee2:	495e      	ldr	r1, [pc, #376]	@ (801b05c <etharp_find_entry+0x2d4>)
 801aee4:	4613      	mov	r3, r2
 801aee6:	005b      	lsls	r3, r3, #1
 801aee8:	4413      	add	r3, r2
 801aeea:	00db      	lsls	r3, r3, #3
 801aeec:	440b      	add	r3, r1
 801aeee:	3312      	adds	r3, #18
 801aef0:	881b      	ldrh	r3, [r3, #0]
 801aef2:	8b3a      	ldrh	r2, [r7, #24]
 801aef4:	429a      	cmp	r2, r3
 801aef6:	d80c      	bhi.n	801af12 <etharp_find_entry+0x18a>
            old_stable = i;
 801aef8:	8c3b      	ldrh	r3, [r7, #32]
 801aefa:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 801aefc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801af00:	4956      	ldr	r1, [pc, #344]	@ (801b05c <etharp_find_entry+0x2d4>)
 801af02:	4613      	mov	r3, r2
 801af04:	005b      	lsls	r3, r3, #1
 801af06:	4413      	add	r3, r2
 801af08:	00db      	lsls	r3, r3, #3
 801af0a:	440b      	add	r3, r1
 801af0c:	3312      	adds	r3, #18
 801af0e:	881b      	ldrh	r3, [r3, #0]
 801af10:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801af12:	8c3b      	ldrh	r3, [r7, #32]
 801af14:	3301      	adds	r3, #1
 801af16:	b29b      	uxth	r3, r3
 801af18:	843b      	strh	r3, [r7, #32]
 801af1a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801af1e:	2b09      	cmp	r3, #9
 801af20:	f77f af4c 	ble.w	801adbc <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801af24:	7afb      	ldrb	r3, [r7, #11]
 801af26:	f003 0302 	and.w	r3, r3, #2
 801af2a:	2b00      	cmp	r3, #0
 801af2c:	d108      	bne.n	801af40 <etharp_find_entry+0x1b8>
 801af2e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801af32:	2b0a      	cmp	r3, #10
 801af34:	d107      	bne.n	801af46 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801af36:	7afb      	ldrb	r3, [r7, #11]
 801af38:	f003 0301 	and.w	r3, r3, #1
 801af3c:	2b00      	cmp	r3, #0
 801af3e:	d102      	bne.n	801af46 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801af40:	f04f 33ff 	mov.w	r3, #4294967295
 801af44:	e085      	b.n	801b052 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801af46:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801af4a:	2b09      	cmp	r3, #9
 801af4c:	dc02      	bgt.n	801af54 <etharp_find_entry+0x1cc>
    i = empty;
 801af4e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801af50:	843b      	strh	r3, [r7, #32]
 801af52:	e039      	b.n	801afc8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801af54:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 801af58:	2b09      	cmp	r3, #9
 801af5a:	dc14      	bgt.n	801af86 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801af5c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801af5e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801af60:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801af64:	493d      	ldr	r1, [pc, #244]	@ (801b05c <etharp_find_entry+0x2d4>)
 801af66:	4613      	mov	r3, r2
 801af68:	005b      	lsls	r3, r3, #1
 801af6a:	4413      	add	r3, r2
 801af6c:	00db      	lsls	r3, r3, #3
 801af6e:	440b      	add	r3, r1
 801af70:	681b      	ldr	r3, [r3, #0]
 801af72:	2b00      	cmp	r3, #0
 801af74:	d018      	beq.n	801afa8 <etharp_find_entry+0x220>
 801af76:	4b3a      	ldr	r3, [pc, #232]	@ (801b060 <etharp_find_entry+0x2d8>)
 801af78:	f240 126d 	movw	r2, #365	@ 0x16d
 801af7c:	493b      	ldr	r1, [pc, #236]	@ (801b06c <etharp_find_entry+0x2e4>)
 801af7e:	483a      	ldr	r0, [pc, #232]	@ (801b068 <etharp_find_entry+0x2e0>)
 801af80:	f003 f904 	bl	801e18c <iprintf>
 801af84:	e010      	b.n	801afa8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801af86:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801af8a:	2b09      	cmp	r3, #9
 801af8c:	dc02      	bgt.n	801af94 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801af8e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801af90:	843b      	strh	r3, [r7, #32]
 801af92:	e009      	b.n	801afa8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801af94:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801af98:	2b09      	cmp	r3, #9
 801af9a:	dc02      	bgt.n	801afa2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801af9c:	8bfb      	ldrh	r3, [r7, #30]
 801af9e:	843b      	strh	r3, [r7, #32]
 801afa0:	e002      	b.n	801afa8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801afa2:	f04f 33ff 	mov.w	r3, #4294967295
 801afa6:	e054      	b.n	801b052 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801afa8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801afac:	2b09      	cmp	r3, #9
 801afae:	dd06      	ble.n	801afbe <etharp_find_entry+0x236>
 801afb0:	4b2b      	ldr	r3, [pc, #172]	@ (801b060 <etharp_find_entry+0x2d8>)
 801afb2:	f240 127f 	movw	r2, #383	@ 0x17f
 801afb6:	492e      	ldr	r1, [pc, #184]	@ (801b070 <etharp_find_entry+0x2e8>)
 801afb8:	482b      	ldr	r0, [pc, #172]	@ (801b068 <etharp_find_entry+0x2e0>)
 801afba:	f003 f8e7 	bl	801e18c <iprintf>
    etharp_free_entry(i);
 801afbe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801afc2:	4618      	mov	r0, r3
 801afc4:	f7ff fe06 	bl	801abd4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801afc8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801afcc:	2b09      	cmp	r3, #9
 801afce:	dd06      	ble.n	801afde <etharp_find_entry+0x256>
 801afd0:	4b23      	ldr	r3, [pc, #140]	@ (801b060 <etharp_find_entry+0x2d8>)
 801afd2:	f240 1283 	movw	r2, #387	@ 0x183
 801afd6:	4926      	ldr	r1, [pc, #152]	@ (801b070 <etharp_find_entry+0x2e8>)
 801afd8:	4823      	ldr	r0, [pc, #140]	@ (801b068 <etharp_find_entry+0x2e0>)
 801afda:	f003 f8d7 	bl	801e18c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801afde:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801afe2:	491e      	ldr	r1, [pc, #120]	@ (801b05c <etharp_find_entry+0x2d4>)
 801afe4:	4613      	mov	r3, r2
 801afe6:	005b      	lsls	r3, r3, #1
 801afe8:	4413      	add	r3, r2
 801afea:	00db      	lsls	r3, r3, #3
 801afec:	440b      	add	r3, r1
 801afee:	3314      	adds	r3, #20
 801aff0:	781b      	ldrb	r3, [r3, #0]
 801aff2:	2b00      	cmp	r3, #0
 801aff4:	d006      	beq.n	801b004 <etharp_find_entry+0x27c>
 801aff6:	4b1a      	ldr	r3, [pc, #104]	@ (801b060 <etharp_find_entry+0x2d8>)
 801aff8:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 801affc:	491d      	ldr	r1, [pc, #116]	@ (801b074 <etharp_find_entry+0x2ec>)
 801affe:	481a      	ldr	r0, [pc, #104]	@ (801b068 <etharp_find_entry+0x2e0>)
 801b000:	f003 f8c4 	bl	801e18c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801b004:	68fb      	ldr	r3, [r7, #12]
 801b006:	2b00      	cmp	r3, #0
 801b008:	d00b      	beq.n	801b022 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801b00a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b00e:	68fb      	ldr	r3, [r7, #12]
 801b010:	6819      	ldr	r1, [r3, #0]
 801b012:	4812      	ldr	r0, [pc, #72]	@ (801b05c <etharp_find_entry+0x2d4>)
 801b014:	4613      	mov	r3, r2
 801b016:	005b      	lsls	r3, r3, #1
 801b018:	4413      	add	r3, r2
 801b01a:	00db      	lsls	r3, r3, #3
 801b01c:	4403      	add	r3, r0
 801b01e:	3304      	adds	r3, #4
 801b020:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801b022:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b026:	490d      	ldr	r1, [pc, #52]	@ (801b05c <etharp_find_entry+0x2d4>)
 801b028:	4613      	mov	r3, r2
 801b02a:	005b      	lsls	r3, r3, #1
 801b02c:	4413      	add	r3, r2
 801b02e:	00db      	lsls	r3, r3, #3
 801b030:	440b      	add	r3, r1
 801b032:	3312      	adds	r3, #18
 801b034:	2200      	movs	r2, #0
 801b036:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801b038:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b03c:	4907      	ldr	r1, [pc, #28]	@ (801b05c <etharp_find_entry+0x2d4>)
 801b03e:	4613      	mov	r3, r2
 801b040:	005b      	lsls	r3, r3, #1
 801b042:	4413      	add	r3, r2
 801b044:	00db      	lsls	r3, r3, #3
 801b046:	440b      	add	r3, r1
 801b048:	3308      	adds	r3, #8
 801b04a:	687a      	ldr	r2, [r7, #4]
 801b04c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801b04e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801b052:	4618      	mov	r0, r3
 801b054:	3728      	adds	r7, #40	@ 0x28
 801b056:	46bd      	mov	sp, r7
 801b058:	bd80      	pop	{r7, pc}
 801b05a:	bf00      	nop
 801b05c:	2000cb20 	.word	0x2000cb20
 801b060:	08023558 	.word	0x08023558
 801b064:	08023590 	.word	0x08023590
 801b068:	080235d0 	.word	0x080235d0
 801b06c:	080235f8 	.word	0x080235f8
 801b070:	08023610 	.word	0x08023610
 801b074:	08023624 	.word	0x08023624

0801b078 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801b078:	b580      	push	{r7, lr}
 801b07a:	b088      	sub	sp, #32
 801b07c:	af02      	add	r7, sp, #8
 801b07e:	60f8      	str	r0, [r7, #12]
 801b080:	60b9      	str	r1, [r7, #8]
 801b082:	607a      	str	r2, [r7, #4]
 801b084:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801b086:	68fb      	ldr	r3, [r7, #12]
 801b088:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801b08c:	2b06      	cmp	r3, #6
 801b08e:	d006      	beq.n	801b09e <etharp_update_arp_entry+0x26>
 801b090:	4b48      	ldr	r3, [pc, #288]	@ (801b1b4 <etharp_update_arp_entry+0x13c>)
 801b092:	f240 12a9 	movw	r2, #425	@ 0x1a9
 801b096:	4948      	ldr	r1, [pc, #288]	@ (801b1b8 <etharp_update_arp_entry+0x140>)
 801b098:	4848      	ldr	r0, [pc, #288]	@ (801b1bc <etharp_update_arp_entry+0x144>)
 801b09a:	f003 f877 	bl	801e18c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801b09e:	68bb      	ldr	r3, [r7, #8]
 801b0a0:	2b00      	cmp	r3, #0
 801b0a2:	d012      	beq.n	801b0ca <etharp_update_arp_entry+0x52>
 801b0a4:	68bb      	ldr	r3, [r7, #8]
 801b0a6:	681b      	ldr	r3, [r3, #0]
 801b0a8:	2b00      	cmp	r3, #0
 801b0aa:	d00e      	beq.n	801b0ca <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801b0ac:	68bb      	ldr	r3, [r7, #8]
 801b0ae:	681b      	ldr	r3, [r3, #0]
 801b0b0:	68f9      	ldr	r1, [r7, #12]
 801b0b2:	4618      	mov	r0, r3
 801b0b4:	f001 f8cc 	bl	801c250 <ip4_addr_isbroadcast_u32>
 801b0b8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801b0ba:	2b00      	cmp	r3, #0
 801b0bc:	d105      	bne.n	801b0ca <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801b0be:	68bb      	ldr	r3, [r7, #8]
 801b0c0:	681b      	ldr	r3, [r3, #0]
 801b0c2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801b0c6:	2be0      	cmp	r3, #224	@ 0xe0
 801b0c8:	d102      	bne.n	801b0d0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801b0ca:	f06f 030f 	mvn.w	r3, #15
 801b0ce:	e06c      	b.n	801b1aa <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801b0d0:	78fb      	ldrb	r3, [r7, #3]
 801b0d2:	68fa      	ldr	r2, [r7, #12]
 801b0d4:	4619      	mov	r1, r3
 801b0d6:	68b8      	ldr	r0, [r7, #8]
 801b0d8:	f7ff fe56 	bl	801ad88 <etharp_find_entry>
 801b0dc:	4603      	mov	r3, r0
 801b0de:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801b0e0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801b0e4:	2b00      	cmp	r3, #0
 801b0e6:	da02      	bge.n	801b0ee <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801b0e8:	8afb      	ldrh	r3, [r7, #22]
 801b0ea:	b25b      	sxtb	r3, r3
 801b0ec:	e05d      	b.n	801b1aa <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801b0ee:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b0f2:	4933      	ldr	r1, [pc, #204]	@ (801b1c0 <etharp_update_arp_entry+0x148>)
 801b0f4:	4613      	mov	r3, r2
 801b0f6:	005b      	lsls	r3, r3, #1
 801b0f8:	4413      	add	r3, r2
 801b0fa:	00db      	lsls	r3, r3, #3
 801b0fc:	440b      	add	r3, r1
 801b0fe:	3314      	adds	r3, #20
 801b100:	2202      	movs	r2, #2
 801b102:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801b104:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b108:	492d      	ldr	r1, [pc, #180]	@ (801b1c0 <etharp_update_arp_entry+0x148>)
 801b10a:	4613      	mov	r3, r2
 801b10c:	005b      	lsls	r3, r3, #1
 801b10e:	4413      	add	r3, r2
 801b110:	00db      	lsls	r3, r3, #3
 801b112:	440b      	add	r3, r1
 801b114:	3308      	adds	r3, #8
 801b116:	68fa      	ldr	r2, [r7, #12]
 801b118:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801b11a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b11e:	4613      	mov	r3, r2
 801b120:	005b      	lsls	r3, r3, #1
 801b122:	4413      	add	r3, r2
 801b124:	00db      	lsls	r3, r3, #3
 801b126:	3308      	adds	r3, #8
 801b128:	4a25      	ldr	r2, [pc, #148]	@ (801b1c0 <etharp_update_arp_entry+0x148>)
 801b12a:	4413      	add	r3, r2
 801b12c:	3304      	adds	r3, #4
 801b12e:	2206      	movs	r2, #6
 801b130:	6879      	ldr	r1, [r7, #4]
 801b132:	4618      	mov	r0, r3
 801b134:	f003 f9dd 	bl	801e4f2 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801b138:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b13c:	4920      	ldr	r1, [pc, #128]	@ (801b1c0 <etharp_update_arp_entry+0x148>)
 801b13e:	4613      	mov	r3, r2
 801b140:	005b      	lsls	r3, r3, #1
 801b142:	4413      	add	r3, r2
 801b144:	00db      	lsls	r3, r3, #3
 801b146:	440b      	add	r3, r1
 801b148:	3312      	adds	r3, #18
 801b14a:	2200      	movs	r2, #0
 801b14c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801b14e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b152:	491b      	ldr	r1, [pc, #108]	@ (801b1c0 <etharp_update_arp_entry+0x148>)
 801b154:	4613      	mov	r3, r2
 801b156:	005b      	lsls	r3, r3, #1
 801b158:	4413      	add	r3, r2
 801b15a:	00db      	lsls	r3, r3, #3
 801b15c:	440b      	add	r3, r1
 801b15e:	681b      	ldr	r3, [r3, #0]
 801b160:	2b00      	cmp	r3, #0
 801b162:	d021      	beq.n	801b1a8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801b164:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b168:	4915      	ldr	r1, [pc, #84]	@ (801b1c0 <etharp_update_arp_entry+0x148>)
 801b16a:	4613      	mov	r3, r2
 801b16c:	005b      	lsls	r3, r3, #1
 801b16e:	4413      	add	r3, r2
 801b170:	00db      	lsls	r3, r3, #3
 801b172:	440b      	add	r3, r1
 801b174:	681b      	ldr	r3, [r3, #0]
 801b176:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801b178:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b17c:	4910      	ldr	r1, [pc, #64]	@ (801b1c0 <etharp_update_arp_entry+0x148>)
 801b17e:	4613      	mov	r3, r2
 801b180:	005b      	lsls	r3, r3, #1
 801b182:	4413      	add	r3, r2
 801b184:	00db      	lsls	r3, r3, #3
 801b186:	440b      	add	r3, r1
 801b188:	2200      	movs	r2, #0
 801b18a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801b18c:	68fb      	ldr	r3, [r7, #12]
 801b18e:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801b192:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801b196:	9300      	str	r3, [sp, #0]
 801b198:	687b      	ldr	r3, [r7, #4]
 801b19a:	6939      	ldr	r1, [r7, #16]
 801b19c:	68f8      	ldr	r0, [r7, #12]
 801b19e:	f001 fff5 	bl	801d18c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801b1a2:	6938      	ldr	r0, [r7, #16]
 801b1a4:	f7f8 ff3a 	bl	801401c <pbuf_free>
  }
  return ERR_OK;
 801b1a8:	2300      	movs	r3, #0
}
 801b1aa:	4618      	mov	r0, r3
 801b1ac:	3718      	adds	r7, #24
 801b1ae:	46bd      	mov	sp, r7
 801b1b0:	bd80      	pop	{r7, pc}
 801b1b2:	bf00      	nop
 801b1b4:	08023558 	.word	0x08023558
 801b1b8:	08023650 	.word	0x08023650
 801b1bc:	080235d0 	.word	0x080235d0
 801b1c0:	2000cb20 	.word	0x2000cb20

0801b1c4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801b1c4:	b5b0      	push	{r4, r5, r7, lr}
 801b1c6:	b08a      	sub	sp, #40	@ 0x28
 801b1c8:	af04      	add	r7, sp, #16
 801b1ca:	6078      	str	r0, [r7, #4]
 801b1cc:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801b1ce:	683b      	ldr	r3, [r7, #0]
 801b1d0:	2b00      	cmp	r3, #0
 801b1d2:	d107      	bne.n	801b1e4 <etharp_input+0x20>
 801b1d4:	4b3d      	ldr	r3, [pc, #244]	@ (801b2cc <etharp_input+0x108>)
 801b1d6:	f240 228a 	movw	r2, #650	@ 0x28a
 801b1da:	493d      	ldr	r1, [pc, #244]	@ (801b2d0 <etharp_input+0x10c>)
 801b1dc:	483d      	ldr	r0, [pc, #244]	@ (801b2d4 <etharp_input+0x110>)
 801b1de:	f002 ffd5 	bl	801e18c <iprintf>
 801b1e2:	e06f      	b.n	801b2c4 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801b1e4:	687b      	ldr	r3, [r7, #4]
 801b1e6:	685b      	ldr	r3, [r3, #4]
 801b1e8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801b1ea:	693b      	ldr	r3, [r7, #16]
 801b1ec:	881b      	ldrh	r3, [r3, #0]
 801b1ee:	b29b      	uxth	r3, r3
 801b1f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801b1f4:	d10c      	bne.n	801b210 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801b1f6:	693b      	ldr	r3, [r7, #16]
 801b1f8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801b1fa:	2b06      	cmp	r3, #6
 801b1fc:	d108      	bne.n	801b210 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801b1fe:	693b      	ldr	r3, [r7, #16]
 801b200:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801b202:	2b04      	cmp	r3, #4
 801b204:	d104      	bne.n	801b210 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801b206:	693b      	ldr	r3, [r7, #16]
 801b208:	885b      	ldrh	r3, [r3, #2]
 801b20a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801b20c:	2b08      	cmp	r3, #8
 801b20e:	d003      	beq.n	801b218 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801b210:	6878      	ldr	r0, [r7, #4]
 801b212:	f7f8 ff03 	bl	801401c <pbuf_free>
    return;
 801b216:	e055      	b.n	801b2c4 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801b218:	693b      	ldr	r3, [r7, #16]
 801b21a:	330e      	adds	r3, #14
 801b21c:	681b      	ldr	r3, [r3, #0]
 801b21e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801b220:	693b      	ldr	r3, [r7, #16]
 801b222:	3318      	adds	r3, #24
 801b224:	681b      	ldr	r3, [r3, #0]
 801b226:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801b228:	683b      	ldr	r3, [r7, #0]
 801b22a:	3304      	adds	r3, #4
 801b22c:	681b      	ldr	r3, [r3, #0]
 801b22e:	2b00      	cmp	r3, #0
 801b230:	d102      	bne.n	801b238 <etharp_input+0x74>
    for_us = 0;
 801b232:	2300      	movs	r3, #0
 801b234:	75fb      	strb	r3, [r7, #23]
 801b236:	e009      	b.n	801b24c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801b238:	68ba      	ldr	r2, [r7, #8]
 801b23a:	683b      	ldr	r3, [r7, #0]
 801b23c:	3304      	adds	r3, #4
 801b23e:	681b      	ldr	r3, [r3, #0]
 801b240:	429a      	cmp	r2, r3
 801b242:	bf0c      	ite	eq
 801b244:	2301      	moveq	r3, #1
 801b246:	2300      	movne	r3, #0
 801b248:	b2db      	uxtb	r3, r3
 801b24a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801b24c:	693b      	ldr	r3, [r7, #16]
 801b24e:	f103 0208 	add.w	r2, r3, #8
 801b252:	7dfb      	ldrb	r3, [r7, #23]
 801b254:	2b00      	cmp	r3, #0
 801b256:	d001      	beq.n	801b25c <etharp_input+0x98>
 801b258:	2301      	movs	r3, #1
 801b25a:	e000      	b.n	801b25e <etharp_input+0x9a>
 801b25c:	2302      	movs	r3, #2
 801b25e:	f107 010c 	add.w	r1, r7, #12
 801b262:	6838      	ldr	r0, [r7, #0]
 801b264:	f7ff ff08 	bl	801b078 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801b268:	693b      	ldr	r3, [r7, #16]
 801b26a:	88db      	ldrh	r3, [r3, #6]
 801b26c:	b29b      	uxth	r3, r3
 801b26e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801b272:	d003      	beq.n	801b27c <etharp_input+0xb8>
 801b274:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801b278:	d01e      	beq.n	801b2b8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801b27a:	e020      	b.n	801b2be <etharp_input+0xfa>
      if (for_us) {
 801b27c:	7dfb      	ldrb	r3, [r7, #23]
 801b27e:	2b00      	cmp	r3, #0
 801b280:	d01c      	beq.n	801b2bc <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801b282:	683b      	ldr	r3, [r7, #0]
 801b284:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 801b288:	693b      	ldr	r3, [r7, #16]
 801b28a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801b28e:	683b      	ldr	r3, [r7, #0]
 801b290:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 801b294:	683b      	ldr	r3, [r7, #0]
 801b296:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801b298:	693a      	ldr	r2, [r7, #16]
 801b29a:	3208      	adds	r2, #8
        etharp_raw(netif,
 801b29c:	2102      	movs	r1, #2
 801b29e:	9103      	str	r1, [sp, #12]
 801b2a0:	f107 010c 	add.w	r1, r7, #12
 801b2a4:	9102      	str	r1, [sp, #8]
 801b2a6:	9201      	str	r2, [sp, #4]
 801b2a8:	9300      	str	r3, [sp, #0]
 801b2aa:	462b      	mov	r3, r5
 801b2ac:	4622      	mov	r2, r4
 801b2ae:	4601      	mov	r1, r0
 801b2b0:	6838      	ldr	r0, [r7, #0]
 801b2b2:	f000 faeb 	bl	801b88c <etharp_raw>
      break;
 801b2b6:	e001      	b.n	801b2bc <etharp_input+0xf8>
      break;
 801b2b8:	bf00      	nop
 801b2ba:	e000      	b.n	801b2be <etharp_input+0xfa>
      break;
 801b2bc:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801b2be:	6878      	ldr	r0, [r7, #4]
 801b2c0:	f7f8 feac 	bl	801401c <pbuf_free>
}
 801b2c4:	3718      	adds	r7, #24
 801b2c6:	46bd      	mov	sp, r7
 801b2c8:	bdb0      	pop	{r4, r5, r7, pc}
 801b2ca:	bf00      	nop
 801b2cc:	08023558 	.word	0x08023558
 801b2d0:	080236a8 	.word	0x080236a8
 801b2d4:	080235d0 	.word	0x080235d0

0801b2d8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801b2d8:	b580      	push	{r7, lr}
 801b2da:	b086      	sub	sp, #24
 801b2dc:	af02      	add	r7, sp, #8
 801b2de:	60f8      	str	r0, [r7, #12]
 801b2e0:	60b9      	str	r1, [r7, #8]
 801b2e2:	4613      	mov	r3, r2
 801b2e4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801b2e6:	79fa      	ldrb	r2, [r7, #7]
 801b2e8:	4944      	ldr	r1, [pc, #272]	@ (801b3fc <etharp_output_to_arp_index+0x124>)
 801b2ea:	4613      	mov	r3, r2
 801b2ec:	005b      	lsls	r3, r3, #1
 801b2ee:	4413      	add	r3, r2
 801b2f0:	00db      	lsls	r3, r3, #3
 801b2f2:	440b      	add	r3, r1
 801b2f4:	3314      	adds	r3, #20
 801b2f6:	781b      	ldrb	r3, [r3, #0]
 801b2f8:	2b01      	cmp	r3, #1
 801b2fa:	d806      	bhi.n	801b30a <etharp_output_to_arp_index+0x32>
 801b2fc:	4b40      	ldr	r3, [pc, #256]	@ (801b400 <etharp_output_to_arp_index+0x128>)
 801b2fe:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801b302:	4940      	ldr	r1, [pc, #256]	@ (801b404 <etharp_output_to_arp_index+0x12c>)
 801b304:	4840      	ldr	r0, [pc, #256]	@ (801b408 <etharp_output_to_arp_index+0x130>)
 801b306:	f002 ff41 	bl	801e18c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801b30a:	79fa      	ldrb	r2, [r7, #7]
 801b30c:	493b      	ldr	r1, [pc, #236]	@ (801b3fc <etharp_output_to_arp_index+0x124>)
 801b30e:	4613      	mov	r3, r2
 801b310:	005b      	lsls	r3, r3, #1
 801b312:	4413      	add	r3, r2
 801b314:	00db      	lsls	r3, r3, #3
 801b316:	440b      	add	r3, r1
 801b318:	3314      	adds	r3, #20
 801b31a:	781b      	ldrb	r3, [r3, #0]
 801b31c:	2b02      	cmp	r3, #2
 801b31e:	d153      	bne.n	801b3c8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801b320:	79fa      	ldrb	r2, [r7, #7]
 801b322:	4936      	ldr	r1, [pc, #216]	@ (801b3fc <etharp_output_to_arp_index+0x124>)
 801b324:	4613      	mov	r3, r2
 801b326:	005b      	lsls	r3, r3, #1
 801b328:	4413      	add	r3, r2
 801b32a:	00db      	lsls	r3, r3, #3
 801b32c:	440b      	add	r3, r1
 801b32e:	3312      	adds	r3, #18
 801b330:	881b      	ldrh	r3, [r3, #0]
 801b332:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 801b336:	d919      	bls.n	801b36c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801b338:	79fa      	ldrb	r2, [r7, #7]
 801b33a:	4613      	mov	r3, r2
 801b33c:	005b      	lsls	r3, r3, #1
 801b33e:	4413      	add	r3, r2
 801b340:	00db      	lsls	r3, r3, #3
 801b342:	4a2e      	ldr	r2, [pc, #184]	@ (801b3fc <etharp_output_to_arp_index+0x124>)
 801b344:	4413      	add	r3, r2
 801b346:	3304      	adds	r3, #4
 801b348:	4619      	mov	r1, r3
 801b34a:	68f8      	ldr	r0, [r7, #12]
 801b34c:	f000 fb4c 	bl	801b9e8 <etharp_request>
 801b350:	4603      	mov	r3, r0
 801b352:	2b00      	cmp	r3, #0
 801b354:	d138      	bne.n	801b3c8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801b356:	79fa      	ldrb	r2, [r7, #7]
 801b358:	4928      	ldr	r1, [pc, #160]	@ (801b3fc <etharp_output_to_arp_index+0x124>)
 801b35a:	4613      	mov	r3, r2
 801b35c:	005b      	lsls	r3, r3, #1
 801b35e:	4413      	add	r3, r2
 801b360:	00db      	lsls	r3, r3, #3
 801b362:	440b      	add	r3, r1
 801b364:	3314      	adds	r3, #20
 801b366:	2203      	movs	r2, #3
 801b368:	701a      	strb	r2, [r3, #0]
 801b36a:	e02d      	b.n	801b3c8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801b36c:	79fa      	ldrb	r2, [r7, #7]
 801b36e:	4923      	ldr	r1, [pc, #140]	@ (801b3fc <etharp_output_to_arp_index+0x124>)
 801b370:	4613      	mov	r3, r2
 801b372:	005b      	lsls	r3, r3, #1
 801b374:	4413      	add	r3, r2
 801b376:	00db      	lsls	r3, r3, #3
 801b378:	440b      	add	r3, r1
 801b37a:	3312      	adds	r3, #18
 801b37c:	881b      	ldrh	r3, [r3, #0]
 801b37e:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 801b382:	d321      	bcc.n	801b3c8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801b384:	79fa      	ldrb	r2, [r7, #7]
 801b386:	4613      	mov	r3, r2
 801b388:	005b      	lsls	r3, r3, #1
 801b38a:	4413      	add	r3, r2
 801b38c:	00db      	lsls	r3, r3, #3
 801b38e:	4a1b      	ldr	r2, [pc, #108]	@ (801b3fc <etharp_output_to_arp_index+0x124>)
 801b390:	4413      	add	r3, r2
 801b392:	1d19      	adds	r1, r3, #4
 801b394:	79fa      	ldrb	r2, [r7, #7]
 801b396:	4613      	mov	r3, r2
 801b398:	005b      	lsls	r3, r3, #1
 801b39a:	4413      	add	r3, r2
 801b39c:	00db      	lsls	r3, r3, #3
 801b39e:	3308      	adds	r3, #8
 801b3a0:	4a16      	ldr	r2, [pc, #88]	@ (801b3fc <etharp_output_to_arp_index+0x124>)
 801b3a2:	4413      	add	r3, r2
 801b3a4:	3304      	adds	r3, #4
 801b3a6:	461a      	mov	r2, r3
 801b3a8:	68f8      	ldr	r0, [r7, #12]
 801b3aa:	f000 fafb 	bl	801b9a4 <etharp_request_dst>
 801b3ae:	4603      	mov	r3, r0
 801b3b0:	2b00      	cmp	r3, #0
 801b3b2:	d109      	bne.n	801b3c8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801b3b4:	79fa      	ldrb	r2, [r7, #7]
 801b3b6:	4911      	ldr	r1, [pc, #68]	@ (801b3fc <etharp_output_to_arp_index+0x124>)
 801b3b8:	4613      	mov	r3, r2
 801b3ba:	005b      	lsls	r3, r3, #1
 801b3bc:	4413      	add	r3, r2
 801b3be:	00db      	lsls	r3, r3, #3
 801b3c0:	440b      	add	r3, r1
 801b3c2:	3314      	adds	r3, #20
 801b3c4:	2203      	movs	r2, #3
 801b3c6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801b3c8:	68fb      	ldr	r3, [r7, #12]
 801b3ca:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 801b3ce:	79fa      	ldrb	r2, [r7, #7]
 801b3d0:	4613      	mov	r3, r2
 801b3d2:	005b      	lsls	r3, r3, #1
 801b3d4:	4413      	add	r3, r2
 801b3d6:	00db      	lsls	r3, r3, #3
 801b3d8:	3308      	adds	r3, #8
 801b3da:	4a08      	ldr	r2, [pc, #32]	@ (801b3fc <etharp_output_to_arp_index+0x124>)
 801b3dc:	4413      	add	r3, r2
 801b3de:	3304      	adds	r3, #4
 801b3e0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801b3e4:	9200      	str	r2, [sp, #0]
 801b3e6:	460a      	mov	r2, r1
 801b3e8:	68b9      	ldr	r1, [r7, #8]
 801b3ea:	68f8      	ldr	r0, [r7, #12]
 801b3ec:	f001 fece 	bl	801d18c <ethernet_output>
 801b3f0:	4603      	mov	r3, r0
}
 801b3f2:	4618      	mov	r0, r3
 801b3f4:	3710      	adds	r7, #16
 801b3f6:	46bd      	mov	sp, r7
 801b3f8:	bd80      	pop	{r7, pc}
 801b3fa:	bf00      	nop
 801b3fc:	2000cb20 	.word	0x2000cb20
 801b400:	08023558 	.word	0x08023558
 801b404:	080236c8 	.word	0x080236c8
 801b408:	080235d0 	.word	0x080235d0

0801b40c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801b40c:	b580      	push	{r7, lr}
 801b40e:	b08a      	sub	sp, #40	@ 0x28
 801b410:	af02      	add	r7, sp, #8
 801b412:	60f8      	str	r0, [r7, #12]
 801b414:	60b9      	str	r1, [r7, #8]
 801b416:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801b418:	687b      	ldr	r3, [r7, #4]
 801b41a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801b41c:	68fb      	ldr	r3, [r7, #12]
 801b41e:	2b00      	cmp	r3, #0
 801b420:	d106      	bne.n	801b430 <etharp_output+0x24>
 801b422:	4b73      	ldr	r3, [pc, #460]	@ (801b5f0 <etharp_output+0x1e4>)
 801b424:	f240 321e 	movw	r2, #798	@ 0x31e
 801b428:	4972      	ldr	r1, [pc, #456]	@ (801b5f4 <etharp_output+0x1e8>)
 801b42a:	4873      	ldr	r0, [pc, #460]	@ (801b5f8 <etharp_output+0x1ec>)
 801b42c:	f002 feae 	bl	801e18c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801b430:	68bb      	ldr	r3, [r7, #8]
 801b432:	2b00      	cmp	r3, #0
 801b434:	d106      	bne.n	801b444 <etharp_output+0x38>
 801b436:	4b6e      	ldr	r3, [pc, #440]	@ (801b5f0 <etharp_output+0x1e4>)
 801b438:	f240 321f 	movw	r2, #799	@ 0x31f
 801b43c:	496f      	ldr	r1, [pc, #444]	@ (801b5fc <etharp_output+0x1f0>)
 801b43e:	486e      	ldr	r0, [pc, #440]	@ (801b5f8 <etharp_output+0x1ec>)
 801b440:	f002 fea4 	bl	801e18c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801b444:	687b      	ldr	r3, [r7, #4]
 801b446:	2b00      	cmp	r3, #0
 801b448:	d106      	bne.n	801b458 <etharp_output+0x4c>
 801b44a:	4b69      	ldr	r3, [pc, #420]	@ (801b5f0 <etharp_output+0x1e4>)
 801b44c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 801b450:	496b      	ldr	r1, [pc, #428]	@ (801b600 <etharp_output+0x1f4>)
 801b452:	4869      	ldr	r0, [pc, #420]	@ (801b5f8 <etharp_output+0x1ec>)
 801b454:	f002 fe9a 	bl	801e18c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801b458:	687b      	ldr	r3, [r7, #4]
 801b45a:	681b      	ldr	r3, [r3, #0]
 801b45c:	68f9      	ldr	r1, [r7, #12]
 801b45e:	4618      	mov	r0, r3
 801b460:	f000 fef6 	bl	801c250 <ip4_addr_isbroadcast_u32>
 801b464:	4603      	mov	r3, r0
 801b466:	2b00      	cmp	r3, #0
 801b468:	d002      	beq.n	801b470 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801b46a:	4b66      	ldr	r3, [pc, #408]	@ (801b604 <etharp_output+0x1f8>)
 801b46c:	61fb      	str	r3, [r7, #28]
 801b46e:	e0af      	b.n	801b5d0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801b470:	687b      	ldr	r3, [r7, #4]
 801b472:	681b      	ldr	r3, [r3, #0]
 801b474:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801b478:	2be0      	cmp	r3, #224	@ 0xe0
 801b47a:	d118      	bne.n	801b4ae <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801b47c:	2301      	movs	r3, #1
 801b47e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801b480:	2300      	movs	r3, #0
 801b482:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801b484:	235e      	movs	r3, #94	@ 0x5e
 801b486:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801b488:	687b      	ldr	r3, [r7, #4]
 801b48a:	3301      	adds	r3, #1
 801b48c:	781b      	ldrb	r3, [r3, #0]
 801b48e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801b492:	b2db      	uxtb	r3, r3
 801b494:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801b496:	687b      	ldr	r3, [r7, #4]
 801b498:	3302      	adds	r3, #2
 801b49a:	781b      	ldrb	r3, [r3, #0]
 801b49c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801b49e:	687b      	ldr	r3, [r7, #4]
 801b4a0:	3303      	adds	r3, #3
 801b4a2:	781b      	ldrb	r3, [r3, #0]
 801b4a4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801b4a6:	f107 0310 	add.w	r3, r7, #16
 801b4aa:	61fb      	str	r3, [r7, #28]
 801b4ac:	e090      	b.n	801b5d0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801b4ae:	687b      	ldr	r3, [r7, #4]
 801b4b0:	681a      	ldr	r2, [r3, #0]
 801b4b2:	68fb      	ldr	r3, [r7, #12]
 801b4b4:	3304      	adds	r3, #4
 801b4b6:	681b      	ldr	r3, [r3, #0]
 801b4b8:	405a      	eors	r2, r3
 801b4ba:	68fb      	ldr	r3, [r7, #12]
 801b4bc:	3308      	adds	r3, #8
 801b4be:	681b      	ldr	r3, [r3, #0]
 801b4c0:	4013      	ands	r3, r2
 801b4c2:	2b00      	cmp	r3, #0
 801b4c4:	d012      	beq.n	801b4ec <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801b4c6:	687b      	ldr	r3, [r7, #4]
 801b4c8:	681b      	ldr	r3, [r3, #0]
 801b4ca:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801b4cc:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 801b4d0:	4293      	cmp	r3, r2
 801b4d2:	d00b      	beq.n	801b4ec <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801b4d4:	68fb      	ldr	r3, [r7, #12]
 801b4d6:	330c      	adds	r3, #12
 801b4d8:	681b      	ldr	r3, [r3, #0]
 801b4da:	2b00      	cmp	r3, #0
 801b4dc:	d003      	beq.n	801b4e6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801b4de:	68fb      	ldr	r3, [r7, #12]
 801b4e0:	330c      	adds	r3, #12
 801b4e2:	61bb      	str	r3, [r7, #24]
 801b4e4:	e002      	b.n	801b4ec <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801b4e6:	f06f 0303 	mvn.w	r3, #3
 801b4ea:	e07d      	b.n	801b5e8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801b4ec:	4b46      	ldr	r3, [pc, #280]	@ (801b608 <etharp_output+0x1fc>)
 801b4ee:	781b      	ldrb	r3, [r3, #0]
 801b4f0:	4619      	mov	r1, r3
 801b4f2:	4a46      	ldr	r2, [pc, #280]	@ (801b60c <etharp_output+0x200>)
 801b4f4:	460b      	mov	r3, r1
 801b4f6:	005b      	lsls	r3, r3, #1
 801b4f8:	440b      	add	r3, r1
 801b4fa:	00db      	lsls	r3, r3, #3
 801b4fc:	4413      	add	r3, r2
 801b4fe:	3314      	adds	r3, #20
 801b500:	781b      	ldrb	r3, [r3, #0]
 801b502:	2b01      	cmp	r3, #1
 801b504:	d925      	bls.n	801b552 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801b506:	4b40      	ldr	r3, [pc, #256]	@ (801b608 <etharp_output+0x1fc>)
 801b508:	781b      	ldrb	r3, [r3, #0]
 801b50a:	4619      	mov	r1, r3
 801b50c:	4a3f      	ldr	r2, [pc, #252]	@ (801b60c <etharp_output+0x200>)
 801b50e:	460b      	mov	r3, r1
 801b510:	005b      	lsls	r3, r3, #1
 801b512:	440b      	add	r3, r1
 801b514:	00db      	lsls	r3, r3, #3
 801b516:	4413      	add	r3, r2
 801b518:	3308      	adds	r3, #8
 801b51a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801b51c:	68fa      	ldr	r2, [r7, #12]
 801b51e:	429a      	cmp	r2, r3
 801b520:	d117      	bne.n	801b552 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801b522:	69bb      	ldr	r3, [r7, #24]
 801b524:	681a      	ldr	r2, [r3, #0]
 801b526:	4b38      	ldr	r3, [pc, #224]	@ (801b608 <etharp_output+0x1fc>)
 801b528:	781b      	ldrb	r3, [r3, #0]
 801b52a:	4618      	mov	r0, r3
 801b52c:	4937      	ldr	r1, [pc, #220]	@ (801b60c <etharp_output+0x200>)
 801b52e:	4603      	mov	r3, r0
 801b530:	005b      	lsls	r3, r3, #1
 801b532:	4403      	add	r3, r0
 801b534:	00db      	lsls	r3, r3, #3
 801b536:	440b      	add	r3, r1
 801b538:	3304      	adds	r3, #4
 801b53a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801b53c:	429a      	cmp	r2, r3
 801b53e:	d108      	bne.n	801b552 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801b540:	4b31      	ldr	r3, [pc, #196]	@ (801b608 <etharp_output+0x1fc>)
 801b542:	781b      	ldrb	r3, [r3, #0]
 801b544:	461a      	mov	r2, r3
 801b546:	68b9      	ldr	r1, [r7, #8]
 801b548:	68f8      	ldr	r0, [r7, #12]
 801b54a:	f7ff fec5 	bl	801b2d8 <etharp_output_to_arp_index>
 801b54e:	4603      	mov	r3, r0
 801b550:	e04a      	b.n	801b5e8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801b552:	2300      	movs	r3, #0
 801b554:	75fb      	strb	r3, [r7, #23]
 801b556:	e031      	b.n	801b5bc <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801b558:	7dfa      	ldrb	r2, [r7, #23]
 801b55a:	492c      	ldr	r1, [pc, #176]	@ (801b60c <etharp_output+0x200>)
 801b55c:	4613      	mov	r3, r2
 801b55e:	005b      	lsls	r3, r3, #1
 801b560:	4413      	add	r3, r2
 801b562:	00db      	lsls	r3, r3, #3
 801b564:	440b      	add	r3, r1
 801b566:	3314      	adds	r3, #20
 801b568:	781b      	ldrb	r3, [r3, #0]
 801b56a:	2b01      	cmp	r3, #1
 801b56c:	d923      	bls.n	801b5b6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801b56e:	7dfa      	ldrb	r2, [r7, #23]
 801b570:	4926      	ldr	r1, [pc, #152]	@ (801b60c <etharp_output+0x200>)
 801b572:	4613      	mov	r3, r2
 801b574:	005b      	lsls	r3, r3, #1
 801b576:	4413      	add	r3, r2
 801b578:	00db      	lsls	r3, r3, #3
 801b57a:	440b      	add	r3, r1
 801b57c:	3308      	adds	r3, #8
 801b57e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801b580:	68fa      	ldr	r2, [r7, #12]
 801b582:	429a      	cmp	r2, r3
 801b584:	d117      	bne.n	801b5b6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801b586:	69bb      	ldr	r3, [r7, #24]
 801b588:	6819      	ldr	r1, [r3, #0]
 801b58a:	7dfa      	ldrb	r2, [r7, #23]
 801b58c:	481f      	ldr	r0, [pc, #124]	@ (801b60c <etharp_output+0x200>)
 801b58e:	4613      	mov	r3, r2
 801b590:	005b      	lsls	r3, r3, #1
 801b592:	4413      	add	r3, r2
 801b594:	00db      	lsls	r3, r3, #3
 801b596:	4403      	add	r3, r0
 801b598:	3304      	adds	r3, #4
 801b59a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801b59c:	4299      	cmp	r1, r3
 801b59e:	d10a      	bne.n	801b5b6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801b5a0:	4a19      	ldr	r2, [pc, #100]	@ (801b608 <etharp_output+0x1fc>)
 801b5a2:	7dfb      	ldrb	r3, [r7, #23]
 801b5a4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801b5a6:	7dfb      	ldrb	r3, [r7, #23]
 801b5a8:	461a      	mov	r2, r3
 801b5aa:	68b9      	ldr	r1, [r7, #8]
 801b5ac:	68f8      	ldr	r0, [r7, #12]
 801b5ae:	f7ff fe93 	bl	801b2d8 <etharp_output_to_arp_index>
 801b5b2:	4603      	mov	r3, r0
 801b5b4:	e018      	b.n	801b5e8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801b5b6:	7dfb      	ldrb	r3, [r7, #23]
 801b5b8:	3301      	adds	r3, #1
 801b5ba:	75fb      	strb	r3, [r7, #23]
 801b5bc:	7dfb      	ldrb	r3, [r7, #23]
 801b5be:	2b09      	cmp	r3, #9
 801b5c0:	d9ca      	bls.n	801b558 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801b5c2:	68ba      	ldr	r2, [r7, #8]
 801b5c4:	69b9      	ldr	r1, [r7, #24]
 801b5c6:	68f8      	ldr	r0, [r7, #12]
 801b5c8:	f000 f822 	bl	801b610 <etharp_query>
 801b5cc:	4603      	mov	r3, r0
 801b5ce:	e00b      	b.n	801b5e8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801b5d0:	68fb      	ldr	r3, [r7, #12]
 801b5d2:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801b5d6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801b5da:	9300      	str	r3, [sp, #0]
 801b5dc:	69fb      	ldr	r3, [r7, #28]
 801b5de:	68b9      	ldr	r1, [r7, #8]
 801b5e0:	68f8      	ldr	r0, [r7, #12]
 801b5e2:	f001 fdd3 	bl	801d18c <ethernet_output>
 801b5e6:	4603      	mov	r3, r0
}
 801b5e8:	4618      	mov	r0, r3
 801b5ea:	3720      	adds	r7, #32
 801b5ec:	46bd      	mov	sp, r7
 801b5ee:	bd80      	pop	{r7, pc}
 801b5f0:	08023558 	.word	0x08023558
 801b5f4:	080236a8 	.word	0x080236a8
 801b5f8:	080235d0 	.word	0x080235d0
 801b5fc:	080236f8 	.word	0x080236f8
 801b600:	08023698 	.word	0x08023698
 801b604:	08023da4 	.word	0x08023da4
 801b608:	2000cc10 	.word	0x2000cc10
 801b60c:	2000cb20 	.word	0x2000cb20

0801b610 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801b610:	b580      	push	{r7, lr}
 801b612:	b08c      	sub	sp, #48	@ 0x30
 801b614:	af02      	add	r7, sp, #8
 801b616:	60f8      	str	r0, [r7, #12]
 801b618:	60b9      	str	r1, [r7, #8]
 801b61a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801b61c:	68fb      	ldr	r3, [r7, #12]
 801b61e:	3326      	adds	r3, #38	@ 0x26
 801b620:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801b622:	23ff      	movs	r3, #255	@ 0xff
 801b624:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 801b628:	2300      	movs	r3, #0
 801b62a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801b62c:	68bb      	ldr	r3, [r7, #8]
 801b62e:	681b      	ldr	r3, [r3, #0]
 801b630:	68f9      	ldr	r1, [r7, #12]
 801b632:	4618      	mov	r0, r3
 801b634:	f000 fe0c 	bl	801c250 <ip4_addr_isbroadcast_u32>
 801b638:	4603      	mov	r3, r0
 801b63a:	2b00      	cmp	r3, #0
 801b63c:	d10c      	bne.n	801b658 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801b63e:	68bb      	ldr	r3, [r7, #8]
 801b640:	681b      	ldr	r3, [r3, #0]
 801b642:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801b646:	2be0      	cmp	r3, #224	@ 0xe0
 801b648:	d006      	beq.n	801b658 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801b64a:	68bb      	ldr	r3, [r7, #8]
 801b64c:	2b00      	cmp	r3, #0
 801b64e:	d003      	beq.n	801b658 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801b650:	68bb      	ldr	r3, [r7, #8]
 801b652:	681b      	ldr	r3, [r3, #0]
 801b654:	2b00      	cmp	r3, #0
 801b656:	d102      	bne.n	801b65e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801b658:	f06f 030f 	mvn.w	r3, #15
 801b65c:	e101      	b.n	801b862 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801b65e:	68fa      	ldr	r2, [r7, #12]
 801b660:	2101      	movs	r1, #1
 801b662:	68b8      	ldr	r0, [r7, #8]
 801b664:	f7ff fb90 	bl	801ad88 <etharp_find_entry>
 801b668:	4603      	mov	r3, r0
 801b66a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801b66c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801b670:	2b00      	cmp	r3, #0
 801b672:	da02      	bge.n	801b67a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801b674:	8a7b      	ldrh	r3, [r7, #18]
 801b676:	b25b      	sxtb	r3, r3
 801b678:	e0f3      	b.n	801b862 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801b67a:	8a7b      	ldrh	r3, [r7, #18]
 801b67c:	2b7e      	cmp	r3, #126	@ 0x7e
 801b67e:	d906      	bls.n	801b68e <etharp_query+0x7e>
 801b680:	4b7a      	ldr	r3, [pc, #488]	@ (801b86c <etharp_query+0x25c>)
 801b682:	f240 32c1 	movw	r2, #961	@ 0x3c1
 801b686:	497a      	ldr	r1, [pc, #488]	@ (801b870 <etharp_query+0x260>)
 801b688:	487a      	ldr	r0, [pc, #488]	@ (801b874 <etharp_query+0x264>)
 801b68a:	f002 fd7f 	bl	801e18c <iprintf>
  i = (netif_addr_idx_t)i_err;
 801b68e:	8a7b      	ldrh	r3, [r7, #18]
 801b690:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801b692:	7c7a      	ldrb	r2, [r7, #17]
 801b694:	4978      	ldr	r1, [pc, #480]	@ (801b878 <etharp_query+0x268>)
 801b696:	4613      	mov	r3, r2
 801b698:	005b      	lsls	r3, r3, #1
 801b69a:	4413      	add	r3, r2
 801b69c:	00db      	lsls	r3, r3, #3
 801b69e:	440b      	add	r3, r1
 801b6a0:	3314      	adds	r3, #20
 801b6a2:	781b      	ldrb	r3, [r3, #0]
 801b6a4:	2b00      	cmp	r3, #0
 801b6a6:	d115      	bne.n	801b6d4 <etharp_query+0xc4>
    is_new_entry = 1;
 801b6a8:	2301      	movs	r3, #1
 801b6aa:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801b6ac:	7c7a      	ldrb	r2, [r7, #17]
 801b6ae:	4972      	ldr	r1, [pc, #456]	@ (801b878 <etharp_query+0x268>)
 801b6b0:	4613      	mov	r3, r2
 801b6b2:	005b      	lsls	r3, r3, #1
 801b6b4:	4413      	add	r3, r2
 801b6b6:	00db      	lsls	r3, r3, #3
 801b6b8:	440b      	add	r3, r1
 801b6ba:	3314      	adds	r3, #20
 801b6bc:	2201      	movs	r2, #1
 801b6be:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801b6c0:	7c7a      	ldrb	r2, [r7, #17]
 801b6c2:	496d      	ldr	r1, [pc, #436]	@ (801b878 <etharp_query+0x268>)
 801b6c4:	4613      	mov	r3, r2
 801b6c6:	005b      	lsls	r3, r3, #1
 801b6c8:	4413      	add	r3, r2
 801b6ca:	00db      	lsls	r3, r3, #3
 801b6cc:	440b      	add	r3, r1
 801b6ce:	3308      	adds	r3, #8
 801b6d0:	68fa      	ldr	r2, [r7, #12]
 801b6d2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801b6d4:	7c7a      	ldrb	r2, [r7, #17]
 801b6d6:	4968      	ldr	r1, [pc, #416]	@ (801b878 <etharp_query+0x268>)
 801b6d8:	4613      	mov	r3, r2
 801b6da:	005b      	lsls	r3, r3, #1
 801b6dc:	4413      	add	r3, r2
 801b6de:	00db      	lsls	r3, r3, #3
 801b6e0:	440b      	add	r3, r1
 801b6e2:	3314      	adds	r3, #20
 801b6e4:	781b      	ldrb	r3, [r3, #0]
 801b6e6:	2b01      	cmp	r3, #1
 801b6e8:	d011      	beq.n	801b70e <etharp_query+0xfe>
 801b6ea:	7c7a      	ldrb	r2, [r7, #17]
 801b6ec:	4962      	ldr	r1, [pc, #392]	@ (801b878 <etharp_query+0x268>)
 801b6ee:	4613      	mov	r3, r2
 801b6f0:	005b      	lsls	r3, r3, #1
 801b6f2:	4413      	add	r3, r2
 801b6f4:	00db      	lsls	r3, r3, #3
 801b6f6:	440b      	add	r3, r1
 801b6f8:	3314      	adds	r3, #20
 801b6fa:	781b      	ldrb	r3, [r3, #0]
 801b6fc:	2b01      	cmp	r3, #1
 801b6fe:	d806      	bhi.n	801b70e <etharp_query+0xfe>
 801b700:	4b5a      	ldr	r3, [pc, #360]	@ (801b86c <etharp_query+0x25c>)
 801b702:	f240 32cd 	movw	r2, #973	@ 0x3cd
 801b706:	495d      	ldr	r1, [pc, #372]	@ (801b87c <etharp_query+0x26c>)
 801b708:	485a      	ldr	r0, [pc, #360]	@ (801b874 <etharp_query+0x264>)
 801b70a:	f002 fd3f 	bl	801e18c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801b70e:	6a3b      	ldr	r3, [r7, #32]
 801b710:	2b00      	cmp	r3, #0
 801b712:	d102      	bne.n	801b71a <etharp_query+0x10a>
 801b714:	687b      	ldr	r3, [r7, #4]
 801b716:	2b00      	cmp	r3, #0
 801b718:	d10c      	bne.n	801b734 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801b71a:	68b9      	ldr	r1, [r7, #8]
 801b71c:	68f8      	ldr	r0, [r7, #12]
 801b71e:	f000 f963 	bl	801b9e8 <etharp_request>
 801b722:	4603      	mov	r3, r0
 801b724:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801b728:	687b      	ldr	r3, [r7, #4]
 801b72a:	2b00      	cmp	r3, #0
 801b72c:	d102      	bne.n	801b734 <etharp_query+0x124>
      return result;
 801b72e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801b732:	e096      	b.n	801b862 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801b734:	687b      	ldr	r3, [r7, #4]
 801b736:	2b00      	cmp	r3, #0
 801b738:	d106      	bne.n	801b748 <etharp_query+0x138>
 801b73a:	4b4c      	ldr	r3, [pc, #304]	@ (801b86c <etharp_query+0x25c>)
 801b73c:	f240 32e1 	movw	r2, #993	@ 0x3e1
 801b740:	494f      	ldr	r1, [pc, #316]	@ (801b880 <etharp_query+0x270>)
 801b742:	484c      	ldr	r0, [pc, #304]	@ (801b874 <etharp_query+0x264>)
 801b744:	f002 fd22 	bl	801e18c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801b748:	7c7a      	ldrb	r2, [r7, #17]
 801b74a:	494b      	ldr	r1, [pc, #300]	@ (801b878 <etharp_query+0x268>)
 801b74c:	4613      	mov	r3, r2
 801b74e:	005b      	lsls	r3, r3, #1
 801b750:	4413      	add	r3, r2
 801b752:	00db      	lsls	r3, r3, #3
 801b754:	440b      	add	r3, r1
 801b756:	3314      	adds	r3, #20
 801b758:	781b      	ldrb	r3, [r3, #0]
 801b75a:	2b01      	cmp	r3, #1
 801b75c:	d917      	bls.n	801b78e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801b75e:	4a49      	ldr	r2, [pc, #292]	@ (801b884 <etharp_query+0x274>)
 801b760:	7c7b      	ldrb	r3, [r7, #17]
 801b762:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801b764:	7c7a      	ldrb	r2, [r7, #17]
 801b766:	4613      	mov	r3, r2
 801b768:	005b      	lsls	r3, r3, #1
 801b76a:	4413      	add	r3, r2
 801b76c:	00db      	lsls	r3, r3, #3
 801b76e:	3308      	adds	r3, #8
 801b770:	4a41      	ldr	r2, [pc, #260]	@ (801b878 <etharp_query+0x268>)
 801b772:	4413      	add	r3, r2
 801b774:	3304      	adds	r3, #4
 801b776:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801b77a:	9200      	str	r2, [sp, #0]
 801b77c:	697a      	ldr	r2, [r7, #20]
 801b77e:	6879      	ldr	r1, [r7, #4]
 801b780:	68f8      	ldr	r0, [r7, #12]
 801b782:	f001 fd03 	bl	801d18c <ethernet_output>
 801b786:	4603      	mov	r3, r0
 801b788:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801b78c:	e067      	b.n	801b85e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801b78e:	7c7a      	ldrb	r2, [r7, #17]
 801b790:	4939      	ldr	r1, [pc, #228]	@ (801b878 <etharp_query+0x268>)
 801b792:	4613      	mov	r3, r2
 801b794:	005b      	lsls	r3, r3, #1
 801b796:	4413      	add	r3, r2
 801b798:	00db      	lsls	r3, r3, #3
 801b79a:	440b      	add	r3, r1
 801b79c:	3314      	adds	r3, #20
 801b79e:	781b      	ldrb	r3, [r3, #0]
 801b7a0:	2b01      	cmp	r3, #1
 801b7a2:	d15c      	bne.n	801b85e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801b7a4:	2300      	movs	r3, #0
 801b7a6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801b7a8:	687b      	ldr	r3, [r7, #4]
 801b7aa:	61fb      	str	r3, [r7, #28]
    while (p) {
 801b7ac:	e01c      	b.n	801b7e8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801b7ae:	69fb      	ldr	r3, [r7, #28]
 801b7b0:	895a      	ldrh	r2, [r3, #10]
 801b7b2:	69fb      	ldr	r3, [r7, #28]
 801b7b4:	891b      	ldrh	r3, [r3, #8]
 801b7b6:	429a      	cmp	r2, r3
 801b7b8:	d10a      	bne.n	801b7d0 <etharp_query+0x1c0>
 801b7ba:	69fb      	ldr	r3, [r7, #28]
 801b7bc:	681b      	ldr	r3, [r3, #0]
 801b7be:	2b00      	cmp	r3, #0
 801b7c0:	d006      	beq.n	801b7d0 <etharp_query+0x1c0>
 801b7c2:	4b2a      	ldr	r3, [pc, #168]	@ (801b86c <etharp_query+0x25c>)
 801b7c4:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 801b7c8:	492f      	ldr	r1, [pc, #188]	@ (801b888 <etharp_query+0x278>)
 801b7ca:	482a      	ldr	r0, [pc, #168]	@ (801b874 <etharp_query+0x264>)
 801b7cc:	f002 fcde 	bl	801e18c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801b7d0:	69fb      	ldr	r3, [r7, #28]
 801b7d2:	7b1b      	ldrb	r3, [r3, #12]
 801b7d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801b7d8:	2b00      	cmp	r3, #0
 801b7da:	d002      	beq.n	801b7e2 <etharp_query+0x1d2>
        copy_needed = 1;
 801b7dc:	2301      	movs	r3, #1
 801b7de:	61bb      	str	r3, [r7, #24]
        break;
 801b7e0:	e005      	b.n	801b7ee <etharp_query+0x1de>
      }
      p = p->next;
 801b7e2:	69fb      	ldr	r3, [r7, #28]
 801b7e4:	681b      	ldr	r3, [r3, #0]
 801b7e6:	61fb      	str	r3, [r7, #28]
    while (p) {
 801b7e8:	69fb      	ldr	r3, [r7, #28]
 801b7ea:	2b00      	cmp	r3, #0
 801b7ec:	d1df      	bne.n	801b7ae <etharp_query+0x19e>
    }
    if (copy_needed) {
 801b7ee:	69bb      	ldr	r3, [r7, #24]
 801b7f0:	2b00      	cmp	r3, #0
 801b7f2:	d007      	beq.n	801b804 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801b7f4:	687a      	ldr	r2, [r7, #4]
 801b7f6:	f44f 7120 	mov.w	r1, #640	@ 0x280
 801b7fa:	200e      	movs	r0, #14
 801b7fc:	f7f8 fe76 	bl	80144ec <pbuf_clone>
 801b800:	61f8      	str	r0, [r7, #28]
 801b802:	e004      	b.n	801b80e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801b804:	687b      	ldr	r3, [r7, #4]
 801b806:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801b808:	69f8      	ldr	r0, [r7, #28]
 801b80a:	f7f8 fcad 	bl	8014168 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801b80e:	69fb      	ldr	r3, [r7, #28]
 801b810:	2b00      	cmp	r3, #0
 801b812:	d021      	beq.n	801b858 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801b814:	7c7a      	ldrb	r2, [r7, #17]
 801b816:	4918      	ldr	r1, [pc, #96]	@ (801b878 <etharp_query+0x268>)
 801b818:	4613      	mov	r3, r2
 801b81a:	005b      	lsls	r3, r3, #1
 801b81c:	4413      	add	r3, r2
 801b81e:	00db      	lsls	r3, r3, #3
 801b820:	440b      	add	r3, r1
 801b822:	681b      	ldr	r3, [r3, #0]
 801b824:	2b00      	cmp	r3, #0
 801b826:	d00a      	beq.n	801b83e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801b828:	7c7a      	ldrb	r2, [r7, #17]
 801b82a:	4913      	ldr	r1, [pc, #76]	@ (801b878 <etharp_query+0x268>)
 801b82c:	4613      	mov	r3, r2
 801b82e:	005b      	lsls	r3, r3, #1
 801b830:	4413      	add	r3, r2
 801b832:	00db      	lsls	r3, r3, #3
 801b834:	440b      	add	r3, r1
 801b836:	681b      	ldr	r3, [r3, #0]
 801b838:	4618      	mov	r0, r3
 801b83a:	f7f8 fbef 	bl	801401c <pbuf_free>
      }
      arp_table[i].q = p;
 801b83e:	7c7a      	ldrb	r2, [r7, #17]
 801b840:	490d      	ldr	r1, [pc, #52]	@ (801b878 <etharp_query+0x268>)
 801b842:	4613      	mov	r3, r2
 801b844:	005b      	lsls	r3, r3, #1
 801b846:	4413      	add	r3, r2
 801b848:	00db      	lsls	r3, r3, #3
 801b84a:	440b      	add	r3, r1
 801b84c:	69fa      	ldr	r2, [r7, #28]
 801b84e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801b850:	2300      	movs	r3, #0
 801b852:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801b856:	e002      	b.n	801b85e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801b858:	23ff      	movs	r3, #255	@ 0xff
 801b85a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 801b85e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 801b862:	4618      	mov	r0, r3
 801b864:	3728      	adds	r7, #40	@ 0x28
 801b866:	46bd      	mov	sp, r7
 801b868:	bd80      	pop	{r7, pc}
 801b86a:	bf00      	nop
 801b86c:	08023558 	.word	0x08023558
 801b870:	08023704 	.word	0x08023704
 801b874:	080235d0 	.word	0x080235d0
 801b878:	2000cb20 	.word	0x2000cb20
 801b87c:	08023714 	.word	0x08023714
 801b880:	080236f8 	.word	0x080236f8
 801b884:	2000cc10 	.word	0x2000cc10
 801b888:	0802373c 	.word	0x0802373c

0801b88c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801b88c:	b580      	push	{r7, lr}
 801b88e:	b08a      	sub	sp, #40	@ 0x28
 801b890:	af02      	add	r7, sp, #8
 801b892:	60f8      	str	r0, [r7, #12]
 801b894:	60b9      	str	r1, [r7, #8]
 801b896:	607a      	str	r2, [r7, #4]
 801b898:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801b89a:	2300      	movs	r3, #0
 801b89c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801b89e:	68fb      	ldr	r3, [r7, #12]
 801b8a0:	2b00      	cmp	r3, #0
 801b8a2:	d106      	bne.n	801b8b2 <etharp_raw+0x26>
 801b8a4:	4b3a      	ldr	r3, [pc, #232]	@ (801b990 <etharp_raw+0x104>)
 801b8a6:	f240 4257 	movw	r2, #1111	@ 0x457
 801b8aa:	493a      	ldr	r1, [pc, #232]	@ (801b994 <etharp_raw+0x108>)
 801b8ac:	483a      	ldr	r0, [pc, #232]	@ (801b998 <etharp_raw+0x10c>)
 801b8ae:	f002 fc6d 	bl	801e18c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801b8b2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801b8b6:	211c      	movs	r1, #28
 801b8b8:	200e      	movs	r0, #14
 801b8ba:	f7f8 f8cb 	bl	8013a54 <pbuf_alloc>
 801b8be:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801b8c0:	69bb      	ldr	r3, [r7, #24]
 801b8c2:	2b00      	cmp	r3, #0
 801b8c4:	d102      	bne.n	801b8cc <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801b8c6:	f04f 33ff 	mov.w	r3, #4294967295
 801b8ca:	e05d      	b.n	801b988 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801b8cc:	69bb      	ldr	r3, [r7, #24]
 801b8ce:	895b      	ldrh	r3, [r3, #10]
 801b8d0:	2b1b      	cmp	r3, #27
 801b8d2:	d806      	bhi.n	801b8e2 <etharp_raw+0x56>
 801b8d4:	4b2e      	ldr	r3, [pc, #184]	@ (801b990 <etharp_raw+0x104>)
 801b8d6:	f240 4262 	movw	r2, #1122	@ 0x462
 801b8da:	4930      	ldr	r1, [pc, #192]	@ (801b99c <etharp_raw+0x110>)
 801b8dc:	482e      	ldr	r0, [pc, #184]	@ (801b998 <etharp_raw+0x10c>)
 801b8de:	f002 fc55 	bl	801e18c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801b8e2:	69bb      	ldr	r3, [r7, #24]
 801b8e4:	685b      	ldr	r3, [r3, #4]
 801b8e6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801b8e8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801b8ea:	4618      	mov	r0, r3
 801b8ec:	f7f6 ffd6 	bl	801289c <lwip_htons>
 801b8f0:	4603      	mov	r3, r0
 801b8f2:	461a      	mov	r2, r3
 801b8f4:	697b      	ldr	r3, [r7, #20]
 801b8f6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801b8f8:	68fb      	ldr	r3, [r7, #12]
 801b8fa:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801b8fe:	2b06      	cmp	r3, #6
 801b900:	d006      	beq.n	801b910 <etharp_raw+0x84>
 801b902:	4b23      	ldr	r3, [pc, #140]	@ (801b990 <etharp_raw+0x104>)
 801b904:	f240 4269 	movw	r2, #1129	@ 0x469
 801b908:	4925      	ldr	r1, [pc, #148]	@ (801b9a0 <etharp_raw+0x114>)
 801b90a:	4823      	ldr	r0, [pc, #140]	@ (801b998 <etharp_raw+0x10c>)
 801b90c:	f002 fc3e 	bl	801e18c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801b910:	697b      	ldr	r3, [r7, #20]
 801b912:	3308      	adds	r3, #8
 801b914:	2206      	movs	r2, #6
 801b916:	6839      	ldr	r1, [r7, #0]
 801b918:	4618      	mov	r0, r3
 801b91a:	f002 fdea 	bl	801e4f2 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801b91e:	697b      	ldr	r3, [r7, #20]
 801b920:	3312      	adds	r3, #18
 801b922:	2206      	movs	r2, #6
 801b924:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801b926:	4618      	mov	r0, r3
 801b928:	f002 fde3 	bl	801e4f2 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801b92c:	697b      	ldr	r3, [r7, #20]
 801b92e:	330e      	adds	r3, #14
 801b930:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801b932:	6812      	ldr	r2, [r2, #0]
 801b934:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801b936:	697b      	ldr	r3, [r7, #20]
 801b938:	3318      	adds	r3, #24
 801b93a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801b93c:	6812      	ldr	r2, [r2, #0]
 801b93e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801b940:	697b      	ldr	r3, [r7, #20]
 801b942:	2200      	movs	r2, #0
 801b944:	701a      	strb	r2, [r3, #0]
 801b946:	2200      	movs	r2, #0
 801b948:	f042 0201 	orr.w	r2, r2, #1
 801b94c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801b94e:	697b      	ldr	r3, [r7, #20]
 801b950:	2200      	movs	r2, #0
 801b952:	f042 0208 	orr.w	r2, r2, #8
 801b956:	709a      	strb	r2, [r3, #2]
 801b958:	2200      	movs	r2, #0
 801b95a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801b95c:	697b      	ldr	r3, [r7, #20]
 801b95e:	2206      	movs	r2, #6
 801b960:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801b962:	697b      	ldr	r3, [r7, #20]
 801b964:	2204      	movs	r2, #4
 801b966:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801b968:	f640 0306 	movw	r3, #2054	@ 0x806
 801b96c:	9300      	str	r3, [sp, #0]
 801b96e:	687b      	ldr	r3, [r7, #4]
 801b970:	68ba      	ldr	r2, [r7, #8]
 801b972:	69b9      	ldr	r1, [r7, #24]
 801b974:	68f8      	ldr	r0, [r7, #12]
 801b976:	f001 fc09 	bl	801d18c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801b97a:	69b8      	ldr	r0, [r7, #24]
 801b97c:	f7f8 fb4e 	bl	801401c <pbuf_free>
  p = NULL;
 801b980:	2300      	movs	r3, #0
 801b982:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801b984:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801b988:	4618      	mov	r0, r3
 801b98a:	3720      	adds	r7, #32
 801b98c:	46bd      	mov	sp, r7
 801b98e:	bd80      	pop	{r7, pc}
 801b990:	08023558 	.word	0x08023558
 801b994:	080236a8 	.word	0x080236a8
 801b998:	080235d0 	.word	0x080235d0
 801b99c:	08023758 	.word	0x08023758
 801b9a0:	0802378c 	.word	0x0802378c

0801b9a4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801b9a4:	b580      	push	{r7, lr}
 801b9a6:	b088      	sub	sp, #32
 801b9a8:	af04      	add	r7, sp, #16
 801b9aa:	60f8      	str	r0, [r7, #12]
 801b9ac:	60b9      	str	r1, [r7, #8]
 801b9ae:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801b9b0:	68fb      	ldr	r3, [r7, #12]
 801b9b2:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801b9b6:	68fb      	ldr	r3, [r7, #12]
 801b9b8:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 801b9bc:	68fb      	ldr	r3, [r7, #12]
 801b9be:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801b9c0:	2201      	movs	r2, #1
 801b9c2:	9203      	str	r2, [sp, #12]
 801b9c4:	68ba      	ldr	r2, [r7, #8]
 801b9c6:	9202      	str	r2, [sp, #8]
 801b9c8:	4a06      	ldr	r2, [pc, #24]	@ (801b9e4 <etharp_request_dst+0x40>)
 801b9ca:	9201      	str	r2, [sp, #4]
 801b9cc:	9300      	str	r3, [sp, #0]
 801b9ce:	4603      	mov	r3, r0
 801b9d0:	687a      	ldr	r2, [r7, #4]
 801b9d2:	68f8      	ldr	r0, [r7, #12]
 801b9d4:	f7ff ff5a 	bl	801b88c <etharp_raw>
 801b9d8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801b9da:	4618      	mov	r0, r3
 801b9dc:	3710      	adds	r7, #16
 801b9de:	46bd      	mov	sp, r7
 801b9e0:	bd80      	pop	{r7, pc}
 801b9e2:	bf00      	nop
 801b9e4:	08023dac 	.word	0x08023dac

0801b9e8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801b9e8:	b580      	push	{r7, lr}
 801b9ea:	b082      	sub	sp, #8
 801b9ec:	af00      	add	r7, sp, #0
 801b9ee:	6078      	str	r0, [r7, #4]
 801b9f0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801b9f2:	4a05      	ldr	r2, [pc, #20]	@ (801ba08 <etharp_request+0x20>)
 801b9f4:	6839      	ldr	r1, [r7, #0]
 801b9f6:	6878      	ldr	r0, [r7, #4]
 801b9f8:	f7ff ffd4 	bl	801b9a4 <etharp_request_dst>
 801b9fc:	4603      	mov	r3, r0
}
 801b9fe:	4618      	mov	r0, r3
 801ba00:	3708      	adds	r7, #8
 801ba02:	46bd      	mov	sp, r7
 801ba04:	bd80      	pop	{r7, pc}
 801ba06:	bf00      	nop
 801ba08:	08023da4 	.word	0x08023da4

0801ba0c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801ba0c:	b580      	push	{r7, lr}
 801ba0e:	b08e      	sub	sp, #56	@ 0x38
 801ba10:	af04      	add	r7, sp, #16
 801ba12:	6078      	str	r0, [r7, #4]
 801ba14:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801ba16:	4b78      	ldr	r3, [pc, #480]	@ (801bbf8 <icmp_input+0x1ec>)
 801ba18:	689b      	ldr	r3, [r3, #8]
 801ba1a:	623b      	str	r3, [r7, #32]
  hlen = IPH_HL_BYTES(iphdr_in);
 801ba1c:	6a3b      	ldr	r3, [r7, #32]
 801ba1e:	781b      	ldrb	r3, [r3, #0]
 801ba20:	f003 030f 	and.w	r3, r3, #15
 801ba24:	b2db      	uxtb	r3, r3
 801ba26:	009b      	lsls	r3, r3, #2
 801ba28:	b2db      	uxtb	r3, r3
 801ba2a:	83fb      	strh	r3, [r7, #30]
  if (hlen < IP_HLEN) {
 801ba2c:	8bfb      	ldrh	r3, [r7, #30]
 801ba2e:	2b13      	cmp	r3, #19
 801ba30:	f240 80cf 	bls.w	801bbd2 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801ba34:	687b      	ldr	r3, [r7, #4]
 801ba36:	895b      	ldrh	r3, [r3, #10]
 801ba38:	2b03      	cmp	r3, #3
 801ba3a:	f240 80cc 	bls.w	801bbd6 <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801ba3e:	687b      	ldr	r3, [r7, #4]
 801ba40:	685b      	ldr	r3, [r3, #4]
 801ba42:	781b      	ldrb	r3, [r3, #0]
 801ba44:	777b      	strb	r3, [r7, #29]
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801ba46:	7f7b      	ldrb	r3, [r7, #29]
 801ba48:	2b00      	cmp	r3, #0
 801ba4a:	f000 80bb 	beq.w	801bbc4 <icmp_input+0x1b8>
 801ba4e:	2b08      	cmp	r3, #8
 801ba50:	f040 80bb 	bne.w	801bbca <icmp_input+0x1be>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801ba54:	4b69      	ldr	r3, [pc, #420]	@ (801bbfc <icmp_input+0x1f0>)
 801ba56:	627b      	str	r3, [r7, #36]	@ 0x24
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801ba58:	4b67      	ldr	r3, [pc, #412]	@ (801bbf8 <icmp_input+0x1ec>)
 801ba5a:	695b      	ldr	r3, [r3, #20]
 801ba5c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801ba60:	2be0      	cmp	r3, #224	@ 0xe0
 801ba62:	d102      	bne.n	801ba6a <icmp_input+0x5e>
#if LWIP_MULTICAST_PING
        /* For multicast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
 801ba64:	683b      	ldr	r3, [r7, #0]
 801ba66:	3304      	adds	r3, #4
 801ba68:	627b      	str	r3, [r7, #36]	@ 0x24
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801ba6a:	4b63      	ldr	r3, [pc, #396]	@ (801bbf8 <icmp_input+0x1ec>)
 801ba6c:	695b      	ldr	r3, [r3, #20]
 801ba6e:	4a62      	ldr	r2, [pc, #392]	@ (801bbf8 <icmp_input+0x1ec>)
 801ba70:	6812      	ldr	r2, [r2, #0]
 801ba72:	4611      	mov	r1, r2
 801ba74:	4618      	mov	r0, r3
 801ba76:	f000 fbeb 	bl	801c250 <ip4_addr_isbroadcast_u32>
 801ba7a:	4603      	mov	r3, r0
 801ba7c:	2b00      	cmp	r3, #0
 801ba7e:	d002      	beq.n	801ba86 <icmp_input+0x7a>
#if LWIP_BROADCAST_PING
        /* For broadcast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
 801ba80:	683b      	ldr	r3, [r7, #0]
 801ba82:	3304      	adds	r3, #4
 801ba84:	627b      	str	r3, [r7, #36]	@ 0x24
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801ba86:	687b      	ldr	r3, [r7, #4]
 801ba88:	891b      	ldrh	r3, [r3, #8]
 801ba8a:	2b07      	cmp	r3, #7
 801ba8c:	f240 80a5 	bls.w	801bbda <icmp_input+0x1ce>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801ba90:	8bfb      	ldrh	r3, [r7, #30]
 801ba92:	330e      	adds	r3, #14
 801ba94:	4619      	mov	r1, r3
 801ba96:	6878      	ldr	r0, [r7, #4]
 801ba98:	f7f8 fa2a 	bl	8013ef0 <pbuf_add_header>
 801ba9c:	4603      	mov	r3, r0
 801ba9e:	2b00      	cmp	r3, #0
 801baa0:	d04b      	beq.n	801bb3a <icmp_input+0x12e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801baa2:	687b      	ldr	r3, [r7, #4]
 801baa4:	891a      	ldrh	r2, [r3, #8]
 801baa6:	8bfb      	ldrh	r3, [r7, #30]
 801baa8:	4413      	add	r3, r2
 801baaa:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801baac:	687b      	ldr	r3, [r7, #4]
 801baae:	891b      	ldrh	r3, [r3, #8]
 801bab0:	8b7a      	ldrh	r2, [r7, #26]
 801bab2:	429a      	cmp	r2, r3
 801bab4:	f0c0 8096 	bcc.w	801bbe4 <icmp_input+0x1d8>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801bab8:	8b7b      	ldrh	r3, [r7, #26]
 801baba:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801babe:	4619      	mov	r1, r3
 801bac0:	200e      	movs	r0, #14
 801bac2:	f7f7 ffc7 	bl	8013a54 <pbuf_alloc>
 801bac6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801bac8:	697b      	ldr	r3, [r7, #20]
 801baca:	2b00      	cmp	r3, #0
 801bacc:	f000 808c 	beq.w	801bbe8 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801bad0:	697b      	ldr	r3, [r7, #20]
 801bad2:	895b      	ldrh	r3, [r3, #10]
 801bad4:	461a      	mov	r2, r3
 801bad6:	8bfb      	ldrh	r3, [r7, #30]
 801bad8:	3308      	adds	r3, #8
 801bada:	429a      	cmp	r2, r3
 801badc:	d203      	bcs.n	801bae6 <icmp_input+0xda>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801bade:	6978      	ldr	r0, [r7, #20]
 801bae0:	f7f8 fa9c 	bl	801401c <pbuf_free>
          goto icmperr;
 801bae4:	e081      	b.n	801bbea <icmp_input+0x1de>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801bae6:	697b      	ldr	r3, [r7, #20]
 801bae8:	685b      	ldr	r3, [r3, #4]
 801baea:	8bfa      	ldrh	r2, [r7, #30]
 801baec:	6a39      	ldr	r1, [r7, #32]
 801baee:	4618      	mov	r0, r3
 801baf0:	f002 fcff 	bl	801e4f2 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801baf4:	8bfb      	ldrh	r3, [r7, #30]
 801baf6:	4619      	mov	r1, r3
 801baf8:	6978      	ldr	r0, [r7, #20]
 801bafa:	f7f8 fa09 	bl	8013f10 <pbuf_remove_header>
 801bafe:	4603      	mov	r3, r0
 801bb00:	2b00      	cmp	r3, #0
 801bb02:	d009      	beq.n	801bb18 <icmp_input+0x10c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801bb04:	4b3e      	ldr	r3, [pc, #248]	@ (801bc00 <icmp_input+0x1f4>)
 801bb06:	22b6      	movs	r2, #182	@ 0xb6
 801bb08:	493e      	ldr	r1, [pc, #248]	@ (801bc04 <icmp_input+0x1f8>)
 801bb0a:	483f      	ldr	r0, [pc, #252]	@ (801bc08 <icmp_input+0x1fc>)
 801bb0c:	f002 fb3e 	bl	801e18c <iprintf>
          pbuf_free(r);
 801bb10:	6978      	ldr	r0, [r7, #20]
 801bb12:	f7f8 fa83 	bl	801401c <pbuf_free>
          goto icmperr;
 801bb16:	e068      	b.n	801bbea <icmp_input+0x1de>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801bb18:	6879      	ldr	r1, [r7, #4]
 801bb1a:	6978      	ldr	r0, [r7, #20]
 801bb1c:	f7f8 fba2 	bl	8014264 <pbuf_copy>
 801bb20:	4603      	mov	r3, r0
 801bb22:	2b00      	cmp	r3, #0
 801bb24:	d003      	beq.n	801bb2e <icmp_input+0x122>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801bb26:	6978      	ldr	r0, [r7, #20]
 801bb28:	f7f8 fa78 	bl	801401c <pbuf_free>
          goto icmperr;
 801bb2c:	e05d      	b.n	801bbea <icmp_input+0x1de>
        }
        /* free the original p */
        pbuf_free(p);
 801bb2e:	6878      	ldr	r0, [r7, #4]
 801bb30:	f7f8 fa74 	bl	801401c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801bb34:	697b      	ldr	r3, [r7, #20]
 801bb36:	607b      	str	r3, [r7, #4]
 801bb38:	e00f      	b.n	801bb5a <icmp_input+0x14e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801bb3a:	8bfb      	ldrh	r3, [r7, #30]
 801bb3c:	330e      	adds	r3, #14
 801bb3e:	4619      	mov	r1, r3
 801bb40:	6878      	ldr	r0, [r7, #4]
 801bb42:	f7f8 f9e5 	bl	8013f10 <pbuf_remove_header>
 801bb46:	4603      	mov	r3, r0
 801bb48:	2b00      	cmp	r3, #0
 801bb4a:	d006      	beq.n	801bb5a <icmp_input+0x14e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801bb4c:	4b2c      	ldr	r3, [pc, #176]	@ (801bc00 <icmp_input+0x1f4>)
 801bb4e:	22c7      	movs	r2, #199	@ 0xc7
 801bb50:	492e      	ldr	r1, [pc, #184]	@ (801bc0c <icmp_input+0x200>)
 801bb52:	482d      	ldr	r0, [pc, #180]	@ (801bc08 <icmp_input+0x1fc>)
 801bb54:	f002 fb1a 	bl	801e18c <iprintf>
          goto icmperr;
 801bb58:	e047      	b.n	801bbea <icmp_input+0x1de>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801bb5a:	687b      	ldr	r3, [r7, #4]
 801bb5c:	685b      	ldr	r3, [r3, #4]
 801bb5e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801bb60:	8bfb      	ldrh	r3, [r7, #30]
 801bb62:	4619      	mov	r1, r3
 801bb64:	6878      	ldr	r0, [r7, #4]
 801bb66:	f7f8 f9c3 	bl	8013ef0 <pbuf_add_header>
 801bb6a:	4603      	mov	r3, r0
 801bb6c:	2b00      	cmp	r3, #0
 801bb6e:	d12b      	bne.n	801bbc8 <icmp_input+0x1bc>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801bb70:	687b      	ldr	r3, [r7, #4]
 801bb72:	685b      	ldr	r3, [r3, #4]
 801bb74:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801bb76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bb78:	681a      	ldr	r2, [r3, #0]
 801bb7a:	68fb      	ldr	r3, [r7, #12]
 801bb7c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801bb7e:	4b1e      	ldr	r3, [pc, #120]	@ (801bbf8 <icmp_input+0x1ec>)
 801bb80:	691a      	ldr	r2, [r3, #16]
 801bb82:	68fb      	ldr	r3, [r7, #12]
 801bb84:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801bb86:	693b      	ldr	r3, [r7, #16]
 801bb88:	2200      	movs	r2, #0
 801bb8a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801bb8c:	693b      	ldr	r3, [r7, #16]
 801bb8e:	2200      	movs	r2, #0
 801bb90:	709a      	strb	r2, [r3, #2]
 801bb92:	2200      	movs	r2, #0
 801bb94:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801bb96:	68fb      	ldr	r3, [r7, #12]
 801bb98:	22ff      	movs	r2, #255	@ 0xff
 801bb9a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801bb9c:	68fb      	ldr	r3, [r7, #12]
 801bb9e:	2200      	movs	r2, #0
 801bba0:	729a      	strb	r2, [r3, #10]
 801bba2:	2200      	movs	r2, #0
 801bba4:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801bba6:	683b      	ldr	r3, [r7, #0]
 801bba8:	9302      	str	r3, [sp, #8]
 801bbaa:	2301      	movs	r3, #1
 801bbac:	9301      	str	r3, [sp, #4]
 801bbae:	2300      	movs	r3, #0
 801bbb0:	9300      	str	r3, [sp, #0]
 801bbb2:	23ff      	movs	r3, #255	@ 0xff
 801bbb4:	2200      	movs	r2, #0
 801bbb6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801bbb8:	6878      	ldr	r0, [r7, #4]
 801bbba:	f000 fa71 	bl	801c0a0 <ip4_output_if>
 801bbbe:	4603      	mov	r3, r0
 801bbc0:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801bbc2:	e001      	b.n	801bbc8 <icmp_input+0x1bc>
      break;
 801bbc4:	bf00      	nop
 801bbc6:	e000      	b.n	801bbca <icmp_input+0x1be>
      break;
 801bbc8:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801bbca:	6878      	ldr	r0, [r7, #4]
 801bbcc:	f7f8 fa26 	bl	801401c <pbuf_free>
  return;
 801bbd0:	e00f      	b.n	801bbf2 <icmp_input+0x1e6>
    goto lenerr;
 801bbd2:	bf00      	nop
 801bbd4:	e002      	b.n	801bbdc <icmp_input+0x1d0>
    goto lenerr;
 801bbd6:	bf00      	nop
 801bbd8:	e000      	b.n	801bbdc <icmp_input+0x1d0>
        goto lenerr;
 801bbda:	bf00      	nop
lenerr:
  pbuf_free(p);
 801bbdc:	6878      	ldr	r0, [r7, #4]
 801bbde:	f7f8 fa1d 	bl	801401c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801bbe2:	e006      	b.n	801bbf2 <icmp_input+0x1e6>
          goto icmperr;
 801bbe4:	bf00      	nop
 801bbe6:	e000      	b.n	801bbea <icmp_input+0x1de>
          goto icmperr;
 801bbe8:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801bbea:	6878      	ldr	r0, [r7, #4]
 801bbec:	f7f8 fa16 	bl	801401c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801bbf0:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801bbf2:	3728      	adds	r7, #40	@ 0x28
 801bbf4:	46bd      	mov	sp, r7
 801bbf6:	bd80      	pop	{r7, pc}
 801bbf8:	2000936c 	.word	0x2000936c
 801bbfc:	20009380 	.word	0x20009380
 801bc00:	080237d0 	.word	0x080237d0
 801bc04:	08023808 	.word	0x08023808
 801bc08:	08023840 	.word	0x08023840
 801bc0c:	08023868 	.word	0x08023868

0801bc10 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801bc10:	b580      	push	{r7, lr}
 801bc12:	b082      	sub	sp, #8
 801bc14:	af00      	add	r7, sp, #0
 801bc16:	6078      	str	r0, [r7, #4]
 801bc18:	460b      	mov	r3, r1
 801bc1a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801bc1c:	78fb      	ldrb	r3, [r7, #3]
 801bc1e:	461a      	mov	r2, r3
 801bc20:	2103      	movs	r1, #3
 801bc22:	6878      	ldr	r0, [r7, #4]
 801bc24:	f000 f814 	bl	801bc50 <icmp_send_response>
}
 801bc28:	bf00      	nop
 801bc2a:	3708      	adds	r7, #8
 801bc2c:	46bd      	mov	sp, r7
 801bc2e:	bd80      	pop	{r7, pc}

0801bc30 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801bc30:	b580      	push	{r7, lr}
 801bc32:	b082      	sub	sp, #8
 801bc34:	af00      	add	r7, sp, #0
 801bc36:	6078      	str	r0, [r7, #4]
 801bc38:	460b      	mov	r3, r1
 801bc3a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801bc3c:	78fb      	ldrb	r3, [r7, #3]
 801bc3e:	461a      	mov	r2, r3
 801bc40:	210b      	movs	r1, #11
 801bc42:	6878      	ldr	r0, [r7, #4]
 801bc44:	f000 f804 	bl	801bc50 <icmp_send_response>
}
 801bc48:	bf00      	nop
 801bc4a:	3708      	adds	r7, #8
 801bc4c:	46bd      	mov	sp, r7
 801bc4e:	bd80      	pop	{r7, pc}

0801bc50 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801bc50:	b580      	push	{r7, lr}
 801bc52:	b08c      	sub	sp, #48	@ 0x30
 801bc54:	af04      	add	r7, sp, #16
 801bc56:	6078      	str	r0, [r7, #4]
 801bc58:	460b      	mov	r3, r1
 801bc5a:	70fb      	strb	r3, [r7, #3]
 801bc5c:	4613      	mov	r3, r2
 801bc5e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801bc60:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801bc64:	2124      	movs	r1, #36	@ 0x24
 801bc66:	2022      	movs	r0, #34	@ 0x22
 801bc68:	f7f7 fef4 	bl	8013a54 <pbuf_alloc>
 801bc6c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801bc6e:	69fb      	ldr	r3, [r7, #28]
 801bc70:	2b00      	cmp	r3, #0
 801bc72:	d04c      	beq.n	801bd0e <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801bc74:	69fb      	ldr	r3, [r7, #28]
 801bc76:	895b      	ldrh	r3, [r3, #10]
 801bc78:	2b23      	cmp	r3, #35	@ 0x23
 801bc7a:	d806      	bhi.n	801bc8a <icmp_send_response+0x3a>
 801bc7c:	4b26      	ldr	r3, [pc, #152]	@ (801bd18 <icmp_send_response+0xc8>)
 801bc7e:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 801bc82:	4926      	ldr	r1, [pc, #152]	@ (801bd1c <icmp_send_response+0xcc>)
 801bc84:	4826      	ldr	r0, [pc, #152]	@ (801bd20 <icmp_send_response+0xd0>)
 801bc86:	f002 fa81 	bl	801e18c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801bc8a:	687b      	ldr	r3, [r7, #4]
 801bc8c:	685b      	ldr	r3, [r3, #4]
 801bc8e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801bc90:	69fb      	ldr	r3, [r7, #28]
 801bc92:	685b      	ldr	r3, [r3, #4]
 801bc94:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801bc96:	697b      	ldr	r3, [r7, #20]
 801bc98:	78fa      	ldrb	r2, [r7, #3]
 801bc9a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801bc9c:	697b      	ldr	r3, [r7, #20]
 801bc9e:	78ba      	ldrb	r2, [r7, #2]
 801bca0:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801bca2:	697b      	ldr	r3, [r7, #20]
 801bca4:	2200      	movs	r2, #0
 801bca6:	711a      	strb	r2, [r3, #4]
 801bca8:	2200      	movs	r2, #0
 801bcaa:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801bcac:	697b      	ldr	r3, [r7, #20]
 801bcae:	2200      	movs	r2, #0
 801bcb0:	719a      	strb	r2, [r3, #6]
 801bcb2:	2200      	movs	r2, #0
 801bcb4:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801bcb6:	69fb      	ldr	r3, [r7, #28]
 801bcb8:	685b      	ldr	r3, [r3, #4]
 801bcba:	f103 0008 	add.w	r0, r3, #8
 801bcbe:	687b      	ldr	r3, [r7, #4]
 801bcc0:	685b      	ldr	r3, [r3, #4]
 801bcc2:	221c      	movs	r2, #28
 801bcc4:	4619      	mov	r1, r3
 801bcc6:	f002 fc14 	bl	801e4f2 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801bcca:	69bb      	ldr	r3, [r7, #24]
 801bccc:	68db      	ldr	r3, [r3, #12]
 801bcce:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801bcd0:	f107 030c 	add.w	r3, r7, #12
 801bcd4:	4618      	mov	r0, r3
 801bcd6:	f000 f825 	bl	801bd24 <ip4_route>
 801bcda:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801bcdc:	693b      	ldr	r3, [r7, #16]
 801bcde:	2b00      	cmp	r3, #0
 801bce0:	d011      	beq.n	801bd06 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801bce2:	697b      	ldr	r3, [r7, #20]
 801bce4:	2200      	movs	r2, #0
 801bce6:	709a      	strb	r2, [r3, #2]
 801bce8:	2200      	movs	r2, #0
 801bcea:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801bcec:	f107 020c 	add.w	r2, r7, #12
 801bcf0:	693b      	ldr	r3, [r7, #16]
 801bcf2:	9302      	str	r3, [sp, #8]
 801bcf4:	2301      	movs	r3, #1
 801bcf6:	9301      	str	r3, [sp, #4]
 801bcf8:	2300      	movs	r3, #0
 801bcfa:	9300      	str	r3, [sp, #0]
 801bcfc:	23ff      	movs	r3, #255	@ 0xff
 801bcfe:	2100      	movs	r1, #0
 801bd00:	69f8      	ldr	r0, [r7, #28]
 801bd02:	f000 f9cd 	bl	801c0a0 <ip4_output_if>
  }
  pbuf_free(q);
 801bd06:	69f8      	ldr	r0, [r7, #28]
 801bd08:	f7f8 f988 	bl	801401c <pbuf_free>
 801bd0c:	e000      	b.n	801bd10 <icmp_send_response+0xc0>
    return;
 801bd0e:	bf00      	nop
}
 801bd10:	3720      	adds	r7, #32
 801bd12:	46bd      	mov	sp, r7
 801bd14:	bd80      	pop	{r7, pc}
 801bd16:	bf00      	nop
 801bd18:	080237d0 	.word	0x080237d0
 801bd1c:	0802389c 	.word	0x0802389c
 801bd20:	08023840 	.word	0x08023840

0801bd24 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801bd24:	b480      	push	{r7}
 801bd26:	b085      	sub	sp, #20
 801bd28:	af00      	add	r7, sp, #0
 801bd2a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801bd2c:	4b33      	ldr	r3, [pc, #204]	@ (801bdfc <ip4_route+0xd8>)
 801bd2e:	681b      	ldr	r3, [r3, #0]
 801bd30:	60fb      	str	r3, [r7, #12]
 801bd32:	e036      	b.n	801bda2 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801bd34:	68fb      	ldr	r3, [r7, #12]
 801bd36:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801bd3a:	f003 0301 	and.w	r3, r3, #1
 801bd3e:	b2db      	uxtb	r3, r3
 801bd40:	2b00      	cmp	r3, #0
 801bd42:	d02b      	beq.n	801bd9c <ip4_route+0x78>
 801bd44:	68fb      	ldr	r3, [r7, #12]
 801bd46:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801bd4a:	089b      	lsrs	r3, r3, #2
 801bd4c:	f003 0301 	and.w	r3, r3, #1
 801bd50:	b2db      	uxtb	r3, r3
 801bd52:	2b00      	cmp	r3, #0
 801bd54:	d022      	beq.n	801bd9c <ip4_route+0x78>
 801bd56:	68fb      	ldr	r3, [r7, #12]
 801bd58:	3304      	adds	r3, #4
 801bd5a:	681b      	ldr	r3, [r3, #0]
 801bd5c:	2b00      	cmp	r3, #0
 801bd5e:	d01d      	beq.n	801bd9c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801bd60:	687b      	ldr	r3, [r7, #4]
 801bd62:	681a      	ldr	r2, [r3, #0]
 801bd64:	68fb      	ldr	r3, [r7, #12]
 801bd66:	3304      	adds	r3, #4
 801bd68:	681b      	ldr	r3, [r3, #0]
 801bd6a:	405a      	eors	r2, r3
 801bd6c:	68fb      	ldr	r3, [r7, #12]
 801bd6e:	3308      	adds	r3, #8
 801bd70:	681b      	ldr	r3, [r3, #0]
 801bd72:	4013      	ands	r3, r2
 801bd74:	2b00      	cmp	r3, #0
 801bd76:	d101      	bne.n	801bd7c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801bd78:	68fb      	ldr	r3, [r7, #12]
 801bd7a:	e038      	b.n	801bdee <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801bd7c:	68fb      	ldr	r3, [r7, #12]
 801bd7e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801bd82:	f003 0302 	and.w	r3, r3, #2
 801bd86:	2b00      	cmp	r3, #0
 801bd88:	d108      	bne.n	801bd9c <ip4_route+0x78>
 801bd8a:	687b      	ldr	r3, [r7, #4]
 801bd8c:	681a      	ldr	r2, [r3, #0]
 801bd8e:	68fb      	ldr	r3, [r7, #12]
 801bd90:	330c      	adds	r3, #12
 801bd92:	681b      	ldr	r3, [r3, #0]
 801bd94:	429a      	cmp	r2, r3
 801bd96:	d101      	bne.n	801bd9c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801bd98:	68fb      	ldr	r3, [r7, #12]
 801bd9a:	e028      	b.n	801bdee <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801bd9c:	68fb      	ldr	r3, [r7, #12]
 801bd9e:	681b      	ldr	r3, [r3, #0]
 801bda0:	60fb      	str	r3, [r7, #12]
 801bda2:	68fb      	ldr	r3, [r7, #12]
 801bda4:	2b00      	cmp	r3, #0
 801bda6:	d1c5      	bne.n	801bd34 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801bda8:	4b15      	ldr	r3, [pc, #84]	@ (801be00 <ip4_route+0xdc>)
 801bdaa:	681b      	ldr	r3, [r3, #0]
 801bdac:	2b00      	cmp	r3, #0
 801bdae:	d01a      	beq.n	801bde6 <ip4_route+0xc2>
 801bdb0:	4b13      	ldr	r3, [pc, #76]	@ (801be00 <ip4_route+0xdc>)
 801bdb2:	681b      	ldr	r3, [r3, #0]
 801bdb4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801bdb8:	f003 0301 	and.w	r3, r3, #1
 801bdbc:	2b00      	cmp	r3, #0
 801bdbe:	d012      	beq.n	801bde6 <ip4_route+0xc2>
 801bdc0:	4b0f      	ldr	r3, [pc, #60]	@ (801be00 <ip4_route+0xdc>)
 801bdc2:	681b      	ldr	r3, [r3, #0]
 801bdc4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801bdc8:	f003 0304 	and.w	r3, r3, #4
 801bdcc:	2b00      	cmp	r3, #0
 801bdce:	d00a      	beq.n	801bde6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801bdd0:	4b0b      	ldr	r3, [pc, #44]	@ (801be00 <ip4_route+0xdc>)
 801bdd2:	681b      	ldr	r3, [r3, #0]
 801bdd4:	3304      	adds	r3, #4
 801bdd6:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801bdd8:	2b00      	cmp	r3, #0
 801bdda:	d004      	beq.n	801bde6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801bddc:	687b      	ldr	r3, [r7, #4]
 801bdde:	681b      	ldr	r3, [r3, #0]
 801bde0:	b2db      	uxtb	r3, r3
 801bde2:	2b7f      	cmp	r3, #127	@ 0x7f
 801bde4:	d101      	bne.n	801bdea <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801bde6:	2300      	movs	r3, #0
 801bde8:	e001      	b.n	801bdee <ip4_route+0xca>
  }

  return netif_default;
 801bdea:	4b05      	ldr	r3, [pc, #20]	@ (801be00 <ip4_route+0xdc>)
 801bdec:	681b      	ldr	r3, [r3, #0]
}
 801bdee:	4618      	mov	r0, r3
 801bdf0:	3714      	adds	r7, #20
 801bdf2:	46bd      	mov	sp, r7
 801bdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bdf8:	4770      	bx	lr
 801bdfa:	bf00      	nop
 801bdfc:	2000cab4 	.word	0x2000cab4
 801be00:	2000cab8 	.word	0x2000cab8

0801be04 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801be04:	b580      	push	{r7, lr}
 801be06:	b082      	sub	sp, #8
 801be08:	af00      	add	r7, sp, #0
 801be0a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801be0c:	687b      	ldr	r3, [r7, #4]
 801be0e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801be12:	f003 0301 	and.w	r3, r3, #1
 801be16:	b2db      	uxtb	r3, r3
 801be18:	2b00      	cmp	r3, #0
 801be1a:	d016      	beq.n	801be4a <ip4_input_accept+0x46>
 801be1c:	687b      	ldr	r3, [r7, #4]
 801be1e:	3304      	adds	r3, #4
 801be20:	681b      	ldr	r3, [r3, #0]
 801be22:	2b00      	cmp	r3, #0
 801be24:	d011      	beq.n	801be4a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801be26:	4b0b      	ldr	r3, [pc, #44]	@ (801be54 <ip4_input_accept+0x50>)
 801be28:	695a      	ldr	r2, [r3, #20]
 801be2a:	687b      	ldr	r3, [r7, #4]
 801be2c:	3304      	adds	r3, #4
 801be2e:	681b      	ldr	r3, [r3, #0]
 801be30:	429a      	cmp	r2, r3
 801be32:	d008      	beq.n	801be46 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801be34:	4b07      	ldr	r3, [pc, #28]	@ (801be54 <ip4_input_accept+0x50>)
 801be36:	695b      	ldr	r3, [r3, #20]
 801be38:	6879      	ldr	r1, [r7, #4]
 801be3a:	4618      	mov	r0, r3
 801be3c:	f000 fa08 	bl	801c250 <ip4_addr_isbroadcast_u32>
 801be40:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801be42:	2b00      	cmp	r3, #0
 801be44:	d001      	beq.n	801be4a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801be46:	2301      	movs	r3, #1
 801be48:	e000      	b.n	801be4c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801be4a:	2300      	movs	r3, #0
}
 801be4c:	4618      	mov	r0, r3
 801be4e:	3708      	adds	r7, #8
 801be50:	46bd      	mov	sp, r7
 801be52:	bd80      	pop	{r7, pc}
 801be54:	2000936c 	.word	0x2000936c

0801be58 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801be58:	b580      	push	{r7, lr}
 801be5a:	b086      	sub	sp, #24
 801be5c:	af00      	add	r7, sp, #0
 801be5e:	6078      	str	r0, [r7, #4]
 801be60:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801be62:	687b      	ldr	r3, [r7, #4]
 801be64:	685b      	ldr	r3, [r3, #4]
 801be66:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801be68:	697b      	ldr	r3, [r7, #20]
 801be6a:	781b      	ldrb	r3, [r3, #0]
 801be6c:	091b      	lsrs	r3, r3, #4
 801be6e:	b2db      	uxtb	r3, r3
 801be70:	2b04      	cmp	r3, #4
 801be72:	d004      	beq.n	801be7e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801be74:	6878      	ldr	r0, [r7, #4]
 801be76:	f7f8 f8d1 	bl	801401c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801be7a:	2300      	movs	r3, #0
 801be7c:	e107      	b.n	801c08e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801be7e:	697b      	ldr	r3, [r7, #20]
 801be80:	781b      	ldrb	r3, [r3, #0]
 801be82:	f003 030f 	and.w	r3, r3, #15
 801be86:	b2db      	uxtb	r3, r3
 801be88:	009b      	lsls	r3, r3, #2
 801be8a:	b2db      	uxtb	r3, r3
 801be8c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801be8e:	697b      	ldr	r3, [r7, #20]
 801be90:	885b      	ldrh	r3, [r3, #2]
 801be92:	b29b      	uxth	r3, r3
 801be94:	4618      	mov	r0, r3
 801be96:	f7f6 fd01 	bl	801289c <lwip_htons>
 801be9a:	4603      	mov	r3, r0
 801be9c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801be9e:	687b      	ldr	r3, [r7, #4]
 801bea0:	891b      	ldrh	r3, [r3, #8]
 801bea2:	89ba      	ldrh	r2, [r7, #12]
 801bea4:	429a      	cmp	r2, r3
 801bea6:	d204      	bcs.n	801beb2 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801bea8:	89bb      	ldrh	r3, [r7, #12]
 801beaa:	4619      	mov	r1, r3
 801beac:	6878      	ldr	r0, [r7, #4]
 801beae:	f7f7 ff2f 	bl	8013d10 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801beb2:	687b      	ldr	r3, [r7, #4]
 801beb4:	895b      	ldrh	r3, [r3, #10]
 801beb6:	89fa      	ldrh	r2, [r7, #14]
 801beb8:	429a      	cmp	r2, r3
 801beba:	d807      	bhi.n	801becc <ip4_input+0x74>
 801bebc:	687b      	ldr	r3, [r7, #4]
 801bebe:	891b      	ldrh	r3, [r3, #8]
 801bec0:	89ba      	ldrh	r2, [r7, #12]
 801bec2:	429a      	cmp	r2, r3
 801bec4:	d802      	bhi.n	801becc <ip4_input+0x74>
 801bec6:	89fb      	ldrh	r3, [r7, #14]
 801bec8:	2b13      	cmp	r3, #19
 801beca:	d804      	bhi.n	801bed6 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801becc:	6878      	ldr	r0, [r7, #4]
 801bece:	f7f8 f8a5 	bl	801401c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801bed2:	2300      	movs	r3, #0
 801bed4:	e0db      	b.n	801c08e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801bed6:	697b      	ldr	r3, [r7, #20]
 801bed8:	691b      	ldr	r3, [r3, #16]
 801beda:	4a6f      	ldr	r2, [pc, #444]	@ (801c098 <ip4_input+0x240>)
 801bedc:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801bede:	697b      	ldr	r3, [r7, #20]
 801bee0:	68db      	ldr	r3, [r3, #12]
 801bee2:	4a6d      	ldr	r2, [pc, #436]	@ (801c098 <ip4_input+0x240>)
 801bee4:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801bee6:	4b6c      	ldr	r3, [pc, #432]	@ (801c098 <ip4_input+0x240>)
 801bee8:	695b      	ldr	r3, [r3, #20]
 801beea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801beee:	2be0      	cmp	r3, #224	@ 0xe0
 801bef0:	d112      	bne.n	801bf18 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801bef2:	683b      	ldr	r3, [r7, #0]
 801bef4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801bef8:	f003 0301 	and.w	r3, r3, #1
 801befc:	b2db      	uxtb	r3, r3
 801befe:	2b00      	cmp	r3, #0
 801bf00:	d007      	beq.n	801bf12 <ip4_input+0xba>
 801bf02:	683b      	ldr	r3, [r7, #0]
 801bf04:	3304      	adds	r3, #4
 801bf06:	681b      	ldr	r3, [r3, #0]
 801bf08:	2b00      	cmp	r3, #0
 801bf0a:	d002      	beq.n	801bf12 <ip4_input+0xba>
      netif = inp;
 801bf0c:	683b      	ldr	r3, [r7, #0]
 801bf0e:	613b      	str	r3, [r7, #16]
 801bf10:	e02a      	b.n	801bf68 <ip4_input+0x110>
    } else {
      netif = NULL;
 801bf12:	2300      	movs	r3, #0
 801bf14:	613b      	str	r3, [r7, #16]
 801bf16:	e027      	b.n	801bf68 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801bf18:	6838      	ldr	r0, [r7, #0]
 801bf1a:	f7ff ff73 	bl	801be04 <ip4_input_accept>
 801bf1e:	4603      	mov	r3, r0
 801bf20:	2b00      	cmp	r3, #0
 801bf22:	d002      	beq.n	801bf2a <ip4_input+0xd2>
      netif = inp;
 801bf24:	683b      	ldr	r3, [r7, #0]
 801bf26:	613b      	str	r3, [r7, #16]
 801bf28:	e01e      	b.n	801bf68 <ip4_input+0x110>
    } else {
      netif = NULL;
 801bf2a:	2300      	movs	r3, #0
 801bf2c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801bf2e:	4b5a      	ldr	r3, [pc, #360]	@ (801c098 <ip4_input+0x240>)
 801bf30:	695b      	ldr	r3, [r3, #20]
 801bf32:	b2db      	uxtb	r3, r3
 801bf34:	2b7f      	cmp	r3, #127	@ 0x7f
 801bf36:	d017      	beq.n	801bf68 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801bf38:	4b58      	ldr	r3, [pc, #352]	@ (801c09c <ip4_input+0x244>)
 801bf3a:	681b      	ldr	r3, [r3, #0]
 801bf3c:	613b      	str	r3, [r7, #16]
 801bf3e:	e00e      	b.n	801bf5e <ip4_input+0x106>
          if (netif == inp) {
 801bf40:	693a      	ldr	r2, [r7, #16]
 801bf42:	683b      	ldr	r3, [r7, #0]
 801bf44:	429a      	cmp	r2, r3
 801bf46:	d006      	beq.n	801bf56 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801bf48:	6938      	ldr	r0, [r7, #16]
 801bf4a:	f7ff ff5b 	bl	801be04 <ip4_input_accept>
 801bf4e:	4603      	mov	r3, r0
 801bf50:	2b00      	cmp	r3, #0
 801bf52:	d108      	bne.n	801bf66 <ip4_input+0x10e>
 801bf54:	e000      	b.n	801bf58 <ip4_input+0x100>
            continue;
 801bf56:	bf00      	nop
        NETIF_FOREACH(netif) {
 801bf58:	693b      	ldr	r3, [r7, #16]
 801bf5a:	681b      	ldr	r3, [r3, #0]
 801bf5c:	613b      	str	r3, [r7, #16]
 801bf5e:	693b      	ldr	r3, [r7, #16]
 801bf60:	2b00      	cmp	r3, #0
 801bf62:	d1ed      	bne.n	801bf40 <ip4_input+0xe8>
 801bf64:	e000      	b.n	801bf68 <ip4_input+0x110>
            break;
 801bf66:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801bf68:	4b4b      	ldr	r3, [pc, #300]	@ (801c098 <ip4_input+0x240>)
 801bf6a:	691b      	ldr	r3, [r3, #16]
 801bf6c:	6839      	ldr	r1, [r7, #0]
 801bf6e:	4618      	mov	r0, r3
 801bf70:	f000 f96e 	bl	801c250 <ip4_addr_isbroadcast_u32>
 801bf74:	4603      	mov	r3, r0
 801bf76:	2b00      	cmp	r3, #0
 801bf78:	d105      	bne.n	801bf86 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801bf7a:	4b47      	ldr	r3, [pc, #284]	@ (801c098 <ip4_input+0x240>)
 801bf7c:	691b      	ldr	r3, [r3, #16]
 801bf7e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801bf82:	2be0      	cmp	r3, #224	@ 0xe0
 801bf84:	d104      	bne.n	801bf90 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801bf86:	6878      	ldr	r0, [r7, #4]
 801bf88:	f7f8 f848 	bl	801401c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801bf8c:	2300      	movs	r3, #0
 801bf8e:	e07e      	b.n	801c08e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801bf90:	693b      	ldr	r3, [r7, #16]
 801bf92:	2b00      	cmp	r3, #0
 801bf94:	d104      	bne.n	801bfa0 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801bf96:	6878      	ldr	r0, [r7, #4]
 801bf98:	f7f8 f840 	bl	801401c <pbuf_free>
    return ERR_OK;
 801bf9c:	2300      	movs	r3, #0
 801bf9e:	e076      	b.n	801c08e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801bfa0:	697b      	ldr	r3, [r7, #20]
 801bfa2:	88db      	ldrh	r3, [r3, #6]
 801bfa4:	b29b      	uxth	r3, r3
 801bfa6:	461a      	mov	r2, r3
 801bfa8:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 801bfac:	4013      	ands	r3, r2
 801bfae:	2b00      	cmp	r3, #0
 801bfb0:	d00b      	beq.n	801bfca <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801bfb2:	6878      	ldr	r0, [r7, #4]
 801bfb4:	f000 fd22 	bl	801c9fc <ip4_reass>
 801bfb8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801bfba:	687b      	ldr	r3, [r7, #4]
 801bfbc:	2b00      	cmp	r3, #0
 801bfbe:	d101      	bne.n	801bfc4 <ip4_input+0x16c>
      return ERR_OK;
 801bfc0:	2300      	movs	r3, #0
 801bfc2:	e064      	b.n	801c08e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801bfc4:	687b      	ldr	r3, [r7, #4]
 801bfc6:	685b      	ldr	r3, [r3, #4]
 801bfc8:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801bfca:	4a33      	ldr	r2, [pc, #204]	@ (801c098 <ip4_input+0x240>)
 801bfcc:	693b      	ldr	r3, [r7, #16]
 801bfce:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801bfd0:	4a31      	ldr	r2, [pc, #196]	@ (801c098 <ip4_input+0x240>)
 801bfd2:	683b      	ldr	r3, [r7, #0]
 801bfd4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801bfd6:	4a30      	ldr	r2, [pc, #192]	@ (801c098 <ip4_input+0x240>)
 801bfd8:	697b      	ldr	r3, [r7, #20]
 801bfda:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801bfdc:	697b      	ldr	r3, [r7, #20]
 801bfde:	781b      	ldrb	r3, [r3, #0]
 801bfe0:	f003 030f 	and.w	r3, r3, #15
 801bfe4:	b2db      	uxtb	r3, r3
 801bfe6:	009b      	lsls	r3, r3, #2
 801bfe8:	b2db      	uxtb	r3, r3
 801bfea:	461a      	mov	r2, r3
 801bfec:	4b2a      	ldr	r3, [pc, #168]	@ (801c098 <ip4_input+0x240>)
 801bfee:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801bff0:	89fb      	ldrh	r3, [r7, #14]
 801bff2:	4619      	mov	r1, r3
 801bff4:	6878      	ldr	r0, [r7, #4]
 801bff6:	f7f7 ff8b 	bl	8013f10 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801bffa:	697b      	ldr	r3, [r7, #20]
 801bffc:	7a5b      	ldrb	r3, [r3, #9]
 801bffe:	2b11      	cmp	r3, #17
 801c000:	d006      	beq.n	801c010 <ip4_input+0x1b8>
 801c002:	2b11      	cmp	r3, #17
 801c004:	dc13      	bgt.n	801c02e <ip4_input+0x1d6>
 801c006:	2b01      	cmp	r3, #1
 801c008:	d00c      	beq.n	801c024 <ip4_input+0x1cc>
 801c00a:	2b06      	cmp	r3, #6
 801c00c:	d005      	beq.n	801c01a <ip4_input+0x1c2>
 801c00e:	e00e      	b.n	801c02e <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801c010:	6839      	ldr	r1, [r7, #0]
 801c012:	6878      	ldr	r0, [r7, #4]
 801c014:	f7fe fc9a 	bl	801a94c <udp_input>
        break;
 801c018:	e026      	b.n	801c068 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801c01a:	6839      	ldr	r1, [r7, #0]
 801c01c:	6878      	ldr	r0, [r7, #4]
 801c01e:	f7fa f891 	bl	8016144 <tcp_input>
        break;
 801c022:	e021      	b.n	801c068 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801c024:	6839      	ldr	r1, [r7, #0]
 801c026:	6878      	ldr	r0, [r7, #4]
 801c028:	f7ff fcf0 	bl	801ba0c <icmp_input>
        break;
 801c02c:	e01c      	b.n	801c068 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801c02e:	4b1a      	ldr	r3, [pc, #104]	@ (801c098 <ip4_input+0x240>)
 801c030:	695b      	ldr	r3, [r3, #20]
 801c032:	6939      	ldr	r1, [r7, #16]
 801c034:	4618      	mov	r0, r3
 801c036:	f000 f90b 	bl	801c250 <ip4_addr_isbroadcast_u32>
 801c03a:	4603      	mov	r3, r0
 801c03c:	2b00      	cmp	r3, #0
 801c03e:	d10f      	bne.n	801c060 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801c040:	4b15      	ldr	r3, [pc, #84]	@ (801c098 <ip4_input+0x240>)
 801c042:	695b      	ldr	r3, [r3, #20]
 801c044:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801c048:	2be0      	cmp	r3, #224	@ 0xe0
 801c04a:	d009      	beq.n	801c060 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801c04c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801c050:	4619      	mov	r1, r3
 801c052:	6878      	ldr	r0, [r7, #4]
 801c054:	f7f7 ffcf 	bl	8013ff6 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801c058:	2102      	movs	r1, #2
 801c05a:	6878      	ldr	r0, [r7, #4]
 801c05c:	f7ff fdd8 	bl	801bc10 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801c060:	6878      	ldr	r0, [r7, #4]
 801c062:	f7f7 ffdb 	bl	801401c <pbuf_free>
        break;
 801c066:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801c068:	4b0b      	ldr	r3, [pc, #44]	@ (801c098 <ip4_input+0x240>)
 801c06a:	2200      	movs	r2, #0
 801c06c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801c06e:	4b0a      	ldr	r3, [pc, #40]	@ (801c098 <ip4_input+0x240>)
 801c070:	2200      	movs	r2, #0
 801c072:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801c074:	4b08      	ldr	r3, [pc, #32]	@ (801c098 <ip4_input+0x240>)
 801c076:	2200      	movs	r2, #0
 801c078:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801c07a:	4b07      	ldr	r3, [pc, #28]	@ (801c098 <ip4_input+0x240>)
 801c07c:	2200      	movs	r2, #0
 801c07e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801c080:	4b05      	ldr	r3, [pc, #20]	@ (801c098 <ip4_input+0x240>)
 801c082:	2200      	movs	r2, #0
 801c084:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801c086:	4b04      	ldr	r3, [pc, #16]	@ (801c098 <ip4_input+0x240>)
 801c088:	2200      	movs	r2, #0
 801c08a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801c08c:	2300      	movs	r3, #0
}
 801c08e:	4618      	mov	r0, r3
 801c090:	3718      	adds	r7, #24
 801c092:	46bd      	mov	sp, r7
 801c094:	bd80      	pop	{r7, pc}
 801c096:	bf00      	nop
 801c098:	2000936c 	.word	0x2000936c
 801c09c:	2000cab4 	.word	0x2000cab4

0801c0a0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801c0a0:	b580      	push	{r7, lr}
 801c0a2:	b08a      	sub	sp, #40	@ 0x28
 801c0a4:	af04      	add	r7, sp, #16
 801c0a6:	60f8      	str	r0, [r7, #12]
 801c0a8:	60b9      	str	r1, [r7, #8]
 801c0aa:	607a      	str	r2, [r7, #4]
 801c0ac:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801c0ae:	68bb      	ldr	r3, [r7, #8]
 801c0b0:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801c0b2:	687b      	ldr	r3, [r7, #4]
 801c0b4:	2b00      	cmp	r3, #0
 801c0b6:	d009      	beq.n	801c0cc <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801c0b8:	68bb      	ldr	r3, [r7, #8]
 801c0ba:	2b00      	cmp	r3, #0
 801c0bc:	d003      	beq.n	801c0c6 <ip4_output_if+0x26>
 801c0be:	68bb      	ldr	r3, [r7, #8]
 801c0c0:	681b      	ldr	r3, [r3, #0]
 801c0c2:	2b00      	cmp	r3, #0
 801c0c4:	d102      	bne.n	801c0cc <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801c0c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c0c8:	3304      	adds	r3, #4
 801c0ca:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801c0cc:	78fa      	ldrb	r2, [r7, #3]
 801c0ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c0d0:	9302      	str	r3, [sp, #8]
 801c0d2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801c0d6:	9301      	str	r3, [sp, #4]
 801c0d8:	f897 3020 	ldrb.w	r3, [r7, #32]
 801c0dc:	9300      	str	r3, [sp, #0]
 801c0de:	4613      	mov	r3, r2
 801c0e0:	687a      	ldr	r2, [r7, #4]
 801c0e2:	6979      	ldr	r1, [r7, #20]
 801c0e4:	68f8      	ldr	r0, [r7, #12]
 801c0e6:	f000 f805 	bl	801c0f4 <ip4_output_if_src>
 801c0ea:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801c0ec:	4618      	mov	r0, r3
 801c0ee:	3718      	adds	r7, #24
 801c0f0:	46bd      	mov	sp, r7
 801c0f2:	bd80      	pop	{r7, pc}

0801c0f4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801c0f4:	b580      	push	{r7, lr}
 801c0f6:	b088      	sub	sp, #32
 801c0f8:	af00      	add	r7, sp, #0
 801c0fa:	60f8      	str	r0, [r7, #12]
 801c0fc:	60b9      	str	r1, [r7, #8]
 801c0fe:	607a      	str	r2, [r7, #4]
 801c100:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801c102:	68fb      	ldr	r3, [r7, #12]
 801c104:	7b9b      	ldrb	r3, [r3, #14]
 801c106:	2b01      	cmp	r3, #1
 801c108:	d006      	beq.n	801c118 <ip4_output_if_src+0x24>
 801c10a:	4b4b      	ldr	r3, [pc, #300]	@ (801c238 <ip4_output_if_src+0x144>)
 801c10c:	f44f 7255 	mov.w	r2, #852	@ 0x354
 801c110:	494a      	ldr	r1, [pc, #296]	@ (801c23c <ip4_output_if_src+0x148>)
 801c112:	484b      	ldr	r0, [pc, #300]	@ (801c240 <ip4_output_if_src+0x14c>)
 801c114:	f002 f83a 	bl	801e18c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801c118:	687b      	ldr	r3, [r7, #4]
 801c11a:	2b00      	cmp	r3, #0
 801c11c:	d060      	beq.n	801c1e0 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801c11e:	2314      	movs	r3, #20
 801c120:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801c122:	2114      	movs	r1, #20
 801c124:	68f8      	ldr	r0, [r7, #12]
 801c126:	f7f7 fee3 	bl	8013ef0 <pbuf_add_header>
 801c12a:	4603      	mov	r3, r0
 801c12c:	2b00      	cmp	r3, #0
 801c12e:	d002      	beq.n	801c136 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801c130:	f06f 0301 	mvn.w	r3, #1
 801c134:	e07c      	b.n	801c230 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801c136:	68fb      	ldr	r3, [r7, #12]
 801c138:	685b      	ldr	r3, [r3, #4]
 801c13a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801c13c:	68fb      	ldr	r3, [r7, #12]
 801c13e:	895b      	ldrh	r3, [r3, #10]
 801c140:	2b13      	cmp	r3, #19
 801c142:	d806      	bhi.n	801c152 <ip4_output_if_src+0x5e>
 801c144:	4b3c      	ldr	r3, [pc, #240]	@ (801c238 <ip4_output_if_src+0x144>)
 801c146:	f44f 7262 	mov.w	r2, #904	@ 0x388
 801c14a:	493e      	ldr	r1, [pc, #248]	@ (801c244 <ip4_output_if_src+0x150>)
 801c14c:	483c      	ldr	r0, [pc, #240]	@ (801c240 <ip4_output_if_src+0x14c>)
 801c14e:	f002 f81d 	bl	801e18c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801c152:	69fb      	ldr	r3, [r7, #28]
 801c154:	78fa      	ldrb	r2, [r7, #3]
 801c156:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801c158:	69fb      	ldr	r3, [r7, #28]
 801c15a:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 801c15e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801c160:	687b      	ldr	r3, [r7, #4]
 801c162:	681a      	ldr	r2, [r3, #0]
 801c164:	69fb      	ldr	r3, [r7, #28]
 801c166:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801c168:	8b7b      	ldrh	r3, [r7, #26]
 801c16a:	089b      	lsrs	r3, r3, #2
 801c16c:	b29b      	uxth	r3, r3
 801c16e:	b2db      	uxtb	r3, r3
 801c170:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c174:	b2da      	uxtb	r2, r3
 801c176:	69fb      	ldr	r3, [r7, #28]
 801c178:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801c17a:	69fb      	ldr	r3, [r7, #28]
 801c17c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801c180:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801c182:	68fb      	ldr	r3, [r7, #12]
 801c184:	891b      	ldrh	r3, [r3, #8]
 801c186:	4618      	mov	r0, r3
 801c188:	f7f6 fb88 	bl	801289c <lwip_htons>
 801c18c:	4603      	mov	r3, r0
 801c18e:	461a      	mov	r2, r3
 801c190:	69fb      	ldr	r3, [r7, #28]
 801c192:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801c194:	69fb      	ldr	r3, [r7, #28]
 801c196:	2200      	movs	r2, #0
 801c198:	719a      	strb	r2, [r3, #6]
 801c19a:	2200      	movs	r2, #0
 801c19c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801c19e:	4b2a      	ldr	r3, [pc, #168]	@ (801c248 <ip4_output_if_src+0x154>)
 801c1a0:	881b      	ldrh	r3, [r3, #0]
 801c1a2:	4618      	mov	r0, r3
 801c1a4:	f7f6 fb7a 	bl	801289c <lwip_htons>
 801c1a8:	4603      	mov	r3, r0
 801c1aa:	461a      	mov	r2, r3
 801c1ac:	69fb      	ldr	r3, [r7, #28]
 801c1ae:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801c1b0:	4b25      	ldr	r3, [pc, #148]	@ (801c248 <ip4_output_if_src+0x154>)
 801c1b2:	881b      	ldrh	r3, [r3, #0]
 801c1b4:	3301      	adds	r3, #1
 801c1b6:	b29a      	uxth	r2, r3
 801c1b8:	4b23      	ldr	r3, [pc, #140]	@ (801c248 <ip4_output_if_src+0x154>)
 801c1ba:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801c1bc:	68bb      	ldr	r3, [r7, #8]
 801c1be:	2b00      	cmp	r3, #0
 801c1c0:	d104      	bne.n	801c1cc <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801c1c2:	4b22      	ldr	r3, [pc, #136]	@ (801c24c <ip4_output_if_src+0x158>)
 801c1c4:	681a      	ldr	r2, [r3, #0]
 801c1c6:	69fb      	ldr	r3, [r7, #28]
 801c1c8:	60da      	str	r2, [r3, #12]
 801c1ca:	e003      	b.n	801c1d4 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801c1cc:	68bb      	ldr	r3, [r7, #8]
 801c1ce:	681a      	ldr	r2, [r3, #0]
 801c1d0:	69fb      	ldr	r3, [r7, #28]
 801c1d2:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801c1d4:	69fb      	ldr	r3, [r7, #28]
 801c1d6:	2200      	movs	r2, #0
 801c1d8:	729a      	strb	r2, [r3, #10]
 801c1da:	2200      	movs	r2, #0
 801c1dc:	72da      	strb	r2, [r3, #11]
 801c1de:	e00f      	b.n	801c200 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801c1e0:	68fb      	ldr	r3, [r7, #12]
 801c1e2:	895b      	ldrh	r3, [r3, #10]
 801c1e4:	2b13      	cmp	r3, #19
 801c1e6:	d802      	bhi.n	801c1ee <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801c1e8:	f06f 0301 	mvn.w	r3, #1
 801c1ec:	e020      	b.n	801c230 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801c1ee:	68fb      	ldr	r3, [r7, #12]
 801c1f0:	685b      	ldr	r3, [r3, #4]
 801c1f2:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801c1f4:	69fb      	ldr	r3, [r7, #28]
 801c1f6:	691b      	ldr	r3, [r3, #16]
 801c1f8:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801c1fa:	f107 0314 	add.w	r3, r7, #20
 801c1fe:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801c200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c202:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801c204:	2b00      	cmp	r3, #0
 801c206:	d00c      	beq.n	801c222 <ip4_output_if_src+0x12e>
 801c208:	68fb      	ldr	r3, [r7, #12]
 801c20a:	891a      	ldrh	r2, [r3, #8]
 801c20c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c20e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801c210:	429a      	cmp	r2, r3
 801c212:	d906      	bls.n	801c222 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801c214:	687a      	ldr	r2, [r7, #4]
 801c216:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801c218:	68f8      	ldr	r0, [r7, #12]
 801c21a:	f000 fde3 	bl	801cde4 <ip4_frag>
 801c21e:	4603      	mov	r3, r0
 801c220:	e006      	b.n	801c230 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801c222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c224:	695b      	ldr	r3, [r3, #20]
 801c226:	687a      	ldr	r2, [r7, #4]
 801c228:	68f9      	ldr	r1, [r7, #12]
 801c22a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801c22c:	4798      	blx	r3
 801c22e:	4603      	mov	r3, r0
}
 801c230:	4618      	mov	r0, r3
 801c232:	3720      	adds	r7, #32
 801c234:	46bd      	mov	sp, r7
 801c236:	bd80      	pop	{r7, pc}
 801c238:	080238c8 	.word	0x080238c8
 801c23c:	080238fc 	.word	0x080238fc
 801c240:	08023908 	.word	0x08023908
 801c244:	08023930 	.word	0x08023930
 801c248:	2000cc12 	.word	0x2000cc12
 801c24c:	08023da0 	.word	0x08023da0

0801c250 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801c250:	b480      	push	{r7}
 801c252:	b085      	sub	sp, #20
 801c254:	af00      	add	r7, sp, #0
 801c256:	6078      	str	r0, [r7, #4]
 801c258:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801c25a:	687b      	ldr	r3, [r7, #4]
 801c25c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801c25e:	687b      	ldr	r3, [r7, #4]
 801c260:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c264:	d002      	beq.n	801c26c <ip4_addr_isbroadcast_u32+0x1c>
 801c266:	687b      	ldr	r3, [r7, #4]
 801c268:	2b00      	cmp	r3, #0
 801c26a:	d101      	bne.n	801c270 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801c26c:	2301      	movs	r3, #1
 801c26e:	e02a      	b.n	801c2c6 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801c270:	683b      	ldr	r3, [r7, #0]
 801c272:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801c276:	f003 0302 	and.w	r3, r3, #2
 801c27a:	2b00      	cmp	r3, #0
 801c27c:	d101      	bne.n	801c282 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801c27e:	2300      	movs	r3, #0
 801c280:	e021      	b.n	801c2c6 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801c282:	683b      	ldr	r3, [r7, #0]
 801c284:	3304      	adds	r3, #4
 801c286:	681b      	ldr	r3, [r3, #0]
 801c288:	687a      	ldr	r2, [r7, #4]
 801c28a:	429a      	cmp	r2, r3
 801c28c:	d101      	bne.n	801c292 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801c28e:	2300      	movs	r3, #0
 801c290:	e019      	b.n	801c2c6 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801c292:	68fa      	ldr	r2, [r7, #12]
 801c294:	683b      	ldr	r3, [r7, #0]
 801c296:	3304      	adds	r3, #4
 801c298:	681b      	ldr	r3, [r3, #0]
 801c29a:	405a      	eors	r2, r3
 801c29c:	683b      	ldr	r3, [r7, #0]
 801c29e:	3308      	adds	r3, #8
 801c2a0:	681b      	ldr	r3, [r3, #0]
 801c2a2:	4013      	ands	r3, r2
 801c2a4:	2b00      	cmp	r3, #0
 801c2a6:	d10d      	bne.n	801c2c4 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801c2a8:	683b      	ldr	r3, [r7, #0]
 801c2aa:	3308      	adds	r3, #8
 801c2ac:	681b      	ldr	r3, [r3, #0]
 801c2ae:	43da      	mvns	r2, r3
 801c2b0:	687b      	ldr	r3, [r7, #4]
 801c2b2:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801c2b4:	683b      	ldr	r3, [r7, #0]
 801c2b6:	3308      	adds	r3, #8
 801c2b8:	681b      	ldr	r3, [r3, #0]
 801c2ba:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801c2bc:	429a      	cmp	r2, r3
 801c2be:	d101      	bne.n	801c2c4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801c2c0:	2301      	movs	r3, #1
 801c2c2:	e000      	b.n	801c2c6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801c2c4:	2300      	movs	r3, #0
  }
}
 801c2c6:	4618      	mov	r0, r3
 801c2c8:	3714      	adds	r7, #20
 801c2ca:	46bd      	mov	sp, r7
 801c2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c2d0:	4770      	bx	lr
	...

0801c2d4 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 801c2d4:	b580      	push	{r7, lr}
 801c2d6:	b082      	sub	sp, #8
 801c2d8:	af00      	add	r7, sp, #0
 801c2da:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 801c2dc:	2210      	movs	r2, #16
 801c2de:	4904      	ldr	r1, [pc, #16]	@ (801c2f0 <ip4addr_ntoa+0x1c>)
 801c2e0:	6878      	ldr	r0, [r7, #4]
 801c2e2:	f000 f807 	bl	801c2f4 <ip4addr_ntoa_r>
 801c2e6:	4603      	mov	r3, r0
}
 801c2e8:	4618      	mov	r0, r3
 801c2ea:	3708      	adds	r7, #8
 801c2ec:	46bd      	mov	sp, r7
 801c2ee:	bd80      	pop	{r7, pc}
 801c2f0:	2000cc14 	.word	0x2000cc14

0801c2f4 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 801c2f4:	b480      	push	{r7}
 801c2f6:	b08d      	sub	sp, #52	@ 0x34
 801c2f8:	af00      	add	r7, sp, #0
 801c2fa:	60f8      	str	r0, [r7, #12]
 801c2fc:	60b9      	str	r1, [r7, #8]
 801c2fe:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 801c300:	2300      	movs	r3, #0
 801c302:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 801c304:	68fb      	ldr	r3, [r7, #12]
 801c306:	681b      	ldr	r3, [r3, #0]
 801c308:	61bb      	str	r3, [r7, #24]

  rp = buf;
 801c30a:	68bb      	ldr	r3, [r7, #8]
 801c30c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ap = (u8_t *)&s_addr;
 801c30e:	f107 0318 	add.w	r3, r7, #24
 801c312:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 801c314:	2300      	movs	r3, #0
 801c316:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801c31a:	e058      	b.n	801c3ce <ip4addr_ntoa_r+0xda>
    i = 0;
 801c31c:	2300      	movs	r3, #0
 801c31e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    do {
      rem = *ap % (u8_t)10;
 801c322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c324:	781a      	ldrb	r2, [r3, #0]
 801c326:	4b32      	ldr	r3, [pc, #200]	@ (801c3f0 <ip4addr_ntoa_r+0xfc>)
 801c328:	fba3 1302 	umull	r1, r3, r3, r2
 801c32c:	08d9      	lsrs	r1, r3, #3
 801c32e:	460b      	mov	r3, r1
 801c330:	009b      	lsls	r3, r3, #2
 801c332:	440b      	add	r3, r1
 801c334:	005b      	lsls	r3, r3, #1
 801c336:	1ad3      	subs	r3, r2, r3
 801c338:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 801c33a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c33c:	781b      	ldrb	r3, [r3, #0]
 801c33e:	4a2c      	ldr	r2, [pc, #176]	@ (801c3f0 <ip4addr_ntoa_r+0xfc>)
 801c340:	fba2 2303 	umull	r2, r3, r2, r3
 801c344:	08db      	lsrs	r3, r3, #3
 801c346:	b2da      	uxtb	r2, r3
 801c348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c34a:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 801c34c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c350:	1c5a      	adds	r2, r3, #1
 801c352:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 801c356:	4619      	mov	r1, r3
 801c358:	7ffb      	ldrb	r3, [r7, #31]
 801c35a:	3330      	adds	r3, #48	@ 0x30
 801c35c:	b2da      	uxtb	r2, r3
 801c35e:	f101 0330 	add.w	r3, r1, #48	@ 0x30
 801c362:	443b      	add	r3, r7
 801c364:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 801c368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c36a:	781b      	ldrb	r3, [r3, #0]
 801c36c:	2b00      	cmp	r3, #0
 801c36e:	d1d8      	bne.n	801c322 <ip4addr_ntoa_r+0x2e>
    while (i--) {
 801c370:	e011      	b.n	801c396 <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 801c372:	6a3b      	ldr	r3, [r7, #32]
 801c374:	1c5a      	adds	r2, r3, #1
 801c376:	623a      	str	r2, [r7, #32]
 801c378:	687a      	ldr	r2, [r7, #4]
 801c37a:	429a      	cmp	r2, r3
 801c37c:	dc01      	bgt.n	801c382 <ip4addr_ntoa_r+0x8e>
        return NULL;
 801c37e:	2300      	movs	r3, #0
 801c380:	e030      	b.n	801c3e4 <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 801c382:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 801c386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c388:	1c59      	adds	r1, r3, #1
 801c38a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801c38c:	3230      	adds	r2, #48	@ 0x30
 801c38e:	443a      	add	r2, r7
 801c390:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 801c394:	701a      	strb	r2, [r3, #0]
    while (i--) {
 801c396:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c39a:	1e5a      	subs	r2, r3, #1
 801c39c:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 801c3a0:	2b00      	cmp	r3, #0
 801c3a2:	d1e6      	bne.n	801c372 <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 801c3a4:	6a3b      	ldr	r3, [r7, #32]
 801c3a6:	1c5a      	adds	r2, r3, #1
 801c3a8:	623a      	str	r2, [r7, #32]
 801c3aa:	687a      	ldr	r2, [r7, #4]
 801c3ac:	429a      	cmp	r2, r3
 801c3ae:	dc01      	bgt.n	801c3b4 <ip4addr_ntoa_r+0xc0>
      return NULL;
 801c3b0:	2300      	movs	r3, #0
 801c3b2:	e017      	b.n	801c3e4 <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 801c3b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c3b6:	1c5a      	adds	r2, r3, #1
 801c3b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801c3ba:	222e      	movs	r2, #46	@ 0x2e
 801c3bc:	701a      	strb	r2, [r3, #0]
    ap++;
 801c3be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c3c0:	3301      	adds	r3, #1
 801c3c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 801c3c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c3c8:	3301      	adds	r3, #1
 801c3ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801c3ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c3d2:	2b03      	cmp	r3, #3
 801c3d4:	d9a2      	bls.n	801c31c <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 801c3d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c3d8:	3b01      	subs	r3, #1
 801c3da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801c3dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c3de:	2200      	movs	r2, #0
 801c3e0:	701a      	strb	r2, [r3, #0]
  return buf;
 801c3e2:	68bb      	ldr	r3, [r7, #8]
}
 801c3e4:	4618      	mov	r0, r3
 801c3e6:	3734      	adds	r7, #52	@ 0x34
 801c3e8:	46bd      	mov	sp, r7
 801c3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c3ee:	4770      	bx	lr
 801c3f0:	cccccccd 	.word	0xcccccccd

0801c3f4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801c3f4:	b580      	push	{r7, lr}
 801c3f6:	b084      	sub	sp, #16
 801c3f8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801c3fa:	2300      	movs	r3, #0
 801c3fc:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801c3fe:	4b12      	ldr	r3, [pc, #72]	@ (801c448 <ip_reass_tmr+0x54>)
 801c400:	681b      	ldr	r3, [r3, #0]
 801c402:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801c404:	e018      	b.n	801c438 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801c406:	68fb      	ldr	r3, [r7, #12]
 801c408:	7fdb      	ldrb	r3, [r3, #31]
 801c40a:	2b00      	cmp	r3, #0
 801c40c:	d00b      	beq.n	801c426 <ip_reass_tmr+0x32>
      r->timer--;
 801c40e:	68fb      	ldr	r3, [r7, #12]
 801c410:	7fdb      	ldrb	r3, [r3, #31]
 801c412:	3b01      	subs	r3, #1
 801c414:	b2da      	uxtb	r2, r3
 801c416:	68fb      	ldr	r3, [r7, #12]
 801c418:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801c41a:	68fb      	ldr	r3, [r7, #12]
 801c41c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801c41e:	68fb      	ldr	r3, [r7, #12]
 801c420:	681b      	ldr	r3, [r3, #0]
 801c422:	60fb      	str	r3, [r7, #12]
 801c424:	e008      	b.n	801c438 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801c426:	68fb      	ldr	r3, [r7, #12]
 801c428:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801c42a:	68fb      	ldr	r3, [r7, #12]
 801c42c:	681b      	ldr	r3, [r3, #0]
 801c42e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801c430:	68b9      	ldr	r1, [r7, #8]
 801c432:	6878      	ldr	r0, [r7, #4]
 801c434:	f000 f80a 	bl	801c44c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801c438:	68fb      	ldr	r3, [r7, #12]
 801c43a:	2b00      	cmp	r3, #0
 801c43c:	d1e3      	bne.n	801c406 <ip_reass_tmr+0x12>
    }
  }
}
 801c43e:	bf00      	nop
 801c440:	bf00      	nop
 801c442:	3710      	adds	r7, #16
 801c444:	46bd      	mov	sp, r7
 801c446:	bd80      	pop	{r7, pc}
 801c448:	2000cc24 	.word	0x2000cc24

0801c44c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801c44c:	b580      	push	{r7, lr}
 801c44e:	b088      	sub	sp, #32
 801c450:	af00      	add	r7, sp, #0
 801c452:	6078      	str	r0, [r7, #4]
 801c454:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801c456:	2300      	movs	r3, #0
 801c458:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801c45a:	683a      	ldr	r2, [r7, #0]
 801c45c:	687b      	ldr	r3, [r7, #4]
 801c45e:	429a      	cmp	r2, r3
 801c460:	d105      	bne.n	801c46e <ip_reass_free_complete_datagram+0x22>
 801c462:	4b45      	ldr	r3, [pc, #276]	@ (801c578 <ip_reass_free_complete_datagram+0x12c>)
 801c464:	22ab      	movs	r2, #171	@ 0xab
 801c466:	4945      	ldr	r1, [pc, #276]	@ (801c57c <ip_reass_free_complete_datagram+0x130>)
 801c468:	4845      	ldr	r0, [pc, #276]	@ (801c580 <ip_reass_free_complete_datagram+0x134>)
 801c46a:	f001 fe8f 	bl	801e18c <iprintf>
  if (prev != NULL) {
 801c46e:	683b      	ldr	r3, [r7, #0]
 801c470:	2b00      	cmp	r3, #0
 801c472:	d00a      	beq.n	801c48a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801c474:	683b      	ldr	r3, [r7, #0]
 801c476:	681b      	ldr	r3, [r3, #0]
 801c478:	687a      	ldr	r2, [r7, #4]
 801c47a:	429a      	cmp	r2, r3
 801c47c:	d005      	beq.n	801c48a <ip_reass_free_complete_datagram+0x3e>
 801c47e:	4b3e      	ldr	r3, [pc, #248]	@ (801c578 <ip_reass_free_complete_datagram+0x12c>)
 801c480:	22ad      	movs	r2, #173	@ 0xad
 801c482:	4940      	ldr	r1, [pc, #256]	@ (801c584 <ip_reass_free_complete_datagram+0x138>)
 801c484:	483e      	ldr	r0, [pc, #248]	@ (801c580 <ip_reass_free_complete_datagram+0x134>)
 801c486:	f001 fe81 	bl	801e18c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801c48a:	687b      	ldr	r3, [r7, #4]
 801c48c:	685b      	ldr	r3, [r3, #4]
 801c48e:	685b      	ldr	r3, [r3, #4]
 801c490:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801c492:	697b      	ldr	r3, [r7, #20]
 801c494:	889b      	ldrh	r3, [r3, #4]
 801c496:	b29b      	uxth	r3, r3
 801c498:	2b00      	cmp	r3, #0
 801c49a:	d12a      	bne.n	801c4f2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801c49c:	687b      	ldr	r3, [r7, #4]
 801c49e:	685b      	ldr	r3, [r3, #4]
 801c4a0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801c4a2:	697b      	ldr	r3, [r7, #20]
 801c4a4:	681a      	ldr	r2, [r3, #0]
 801c4a6:	687b      	ldr	r3, [r7, #4]
 801c4a8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801c4aa:	69bb      	ldr	r3, [r7, #24]
 801c4ac:	6858      	ldr	r0, [r3, #4]
 801c4ae:	687b      	ldr	r3, [r7, #4]
 801c4b0:	3308      	adds	r3, #8
 801c4b2:	2214      	movs	r2, #20
 801c4b4:	4619      	mov	r1, r3
 801c4b6:	f002 f81c 	bl	801e4f2 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801c4ba:	2101      	movs	r1, #1
 801c4bc:	69b8      	ldr	r0, [r7, #24]
 801c4be:	f7ff fbb7 	bl	801bc30 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801c4c2:	69b8      	ldr	r0, [r7, #24]
 801c4c4:	f7f7 fe38 	bl	8014138 <pbuf_clen>
 801c4c8:	4603      	mov	r3, r0
 801c4ca:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801c4cc:	8bfa      	ldrh	r2, [r7, #30]
 801c4ce:	8a7b      	ldrh	r3, [r7, #18]
 801c4d0:	4413      	add	r3, r2
 801c4d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801c4d6:	db05      	blt.n	801c4e4 <ip_reass_free_complete_datagram+0x98>
 801c4d8:	4b27      	ldr	r3, [pc, #156]	@ (801c578 <ip_reass_free_complete_datagram+0x12c>)
 801c4da:	22bc      	movs	r2, #188	@ 0xbc
 801c4dc:	492a      	ldr	r1, [pc, #168]	@ (801c588 <ip_reass_free_complete_datagram+0x13c>)
 801c4de:	4828      	ldr	r0, [pc, #160]	@ (801c580 <ip_reass_free_complete_datagram+0x134>)
 801c4e0:	f001 fe54 	bl	801e18c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801c4e4:	8bfa      	ldrh	r2, [r7, #30]
 801c4e6:	8a7b      	ldrh	r3, [r7, #18]
 801c4e8:	4413      	add	r3, r2
 801c4ea:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801c4ec:	69b8      	ldr	r0, [r7, #24]
 801c4ee:	f7f7 fd95 	bl	801401c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801c4f2:	687b      	ldr	r3, [r7, #4]
 801c4f4:	685b      	ldr	r3, [r3, #4]
 801c4f6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801c4f8:	e01f      	b.n	801c53a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801c4fa:	69bb      	ldr	r3, [r7, #24]
 801c4fc:	685b      	ldr	r3, [r3, #4]
 801c4fe:	617b      	str	r3, [r7, #20]
    pcur = p;
 801c500:	69bb      	ldr	r3, [r7, #24]
 801c502:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801c504:	697b      	ldr	r3, [r7, #20]
 801c506:	681b      	ldr	r3, [r3, #0]
 801c508:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801c50a:	68f8      	ldr	r0, [r7, #12]
 801c50c:	f7f7 fe14 	bl	8014138 <pbuf_clen>
 801c510:	4603      	mov	r3, r0
 801c512:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801c514:	8bfa      	ldrh	r2, [r7, #30]
 801c516:	8a7b      	ldrh	r3, [r7, #18]
 801c518:	4413      	add	r3, r2
 801c51a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801c51e:	db05      	blt.n	801c52c <ip_reass_free_complete_datagram+0xe0>
 801c520:	4b15      	ldr	r3, [pc, #84]	@ (801c578 <ip_reass_free_complete_datagram+0x12c>)
 801c522:	22cc      	movs	r2, #204	@ 0xcc
 801c524:	4918      	ldr	r1, [pc, #96]	@ (801c588 <ip_reass_free_complete_datagram+0x13c>)
 801c526:	4816      	ldr	r0, [pc, #88]	@ (801c580 <ip_reass_free_complete_datagram+0x134>)
 801c528:	f001 fe30 	bl	801e18c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801c52c:	8bfa      	ldrh	r2, [r7, #30]
 801c52e:	8a7b      	ldrh	r3, [r7, #18]
 801c530:	4413      	add	r3, r2
 801c532:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801c534:	68f8      	ldr	r0, [r7, #12]
 801c536:	f7f7 fd71 	bl	801401c <pbuf_free>
  while (p != NULL) {
 801c53a:	69bb      	ldr	r3, [r7, #24]
 801c53c:	2b00      	cmp	r3, #0
 801c53e:	d1dc      	bne.n	801c4fa <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801c540:	6839      	ldr	r1, [r7, #0]
 801c542:	6878      	ldr	r0, [r7, #4]
 801c544:	f000 f8c2 	bl	801c6cc <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801c548:	4b10      	ldr	r3, [pc, #64]	@ (801c58c <ip_reass_free_complete_datagram+0x140>)
 801c54a:	881b      	ldrh	r3, [r3, #0]
 801c54c:	8bfa      	ldrh	r2, [r7, #30]
 801c54e:	429a      	cmp	r2, r3
 801c550:	d905      	bls.n	801c55e <ip_reass_free_complete_datagram+0x112>
 801c552:	4b09      	ldr	r3, [pc, #36]	@ (801c578 <ip_reass_free_complete_datagram+0x12c>)
 801c554:	22d2      	movs	r2, #210	@ 0xd2
 801c556:	490e      	ldr	r1, [pc, #56]	@ (801c590 <ip_reass_free_complete_datagram+0x144>)
 801c558:	4809      	ldr	r0, [pc, #36]	@ (801c580 <ip_reass_free_complete_datagram+0x134>)
 801c55a:	f001 fe17 	bl	801e18c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801c55e:	4b0b      	ldr	r3, [pc, #44]	@ (801c58c <ip_reass_free_complete_datagram+0x140>)
 801c560:	881a      	ldrh	r2, [r3, #0]
 801c562:	8bfb      	ldrh	r3, [r7, #30]
 801c564:	1ad3      	subs	r3, r2, r3
 801c566:	b29a      	uxth	r2, r3
 801c568:	4b08      	ldr	r3, [pc, #32]	@ (801c58c <ip_reass_free_complete_datagram+0x140>)
 801c56a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801c56c:	8bfb      	ldrh	r3, [r7, #30]
}
 801c56e:	4618      	mov	r0, r3
 801c570:	3720      	adds	r7, #32
 801c572:	46bd      	mov	sp, r7
 801c574:	bd80      	pop	{r7, pc}
 801c576:	bf00      	nop
 801c578:	08023960 	.word	0x08023960
 801c57c:	0802399c 	.word	0x0802399c
 801c580:	080239a8 	.word	0x080239a8
 801c584:	080239d0 	.word	0x080239d0
 801c588:	080239e4 	.word	0x080239e4
 801c58c:	2000cc28 	.word	0x2000cc28
 801c590:	08023a04 	.word	0x08023a04

0801c594 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801c594:	b580      	push	{r7, lr}
 801c596:	b08a      	sub	sp, #40	@ 0x28
 801c598:	af00      	add	r7, sp, #0
 801c59a:	6078      	str	r0, [r7, #4]
 801c59c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801c59e:	2300      	movs	r3, #0
 801c5a0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801c5a2:	2300      	movs	r3, #0
 801c5a4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801c5a6:	2300      	movs	r3, #0
 801c5a8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801c5aa:	2300      	movs	r3, #0
 801c5ac:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801c5ae:	2300      	movs	r3, #0
 801c5b0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801c5b2:	4b28      	ldr	r3, [pc, #160]	@ (801c654 <ip_reass_remove_oldest_datagram+0xc0>)
 801c5b4:	681b      	ldr	r3, [r3, #0]
 801c5b6:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801c5b8:	e030      	b.n	801c61c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801c5ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c5bc:	695a      	ldr	r2, [r3, #20]
 801c5be:	687b      	ldr	r3, [r7, #4]
 801c5c0:	68db      	ldr	r3, [r3, #12]
 801c5c2:	429a      	cmp	r2, r3
 801c5c4:	d10c      	bne.n	801c5e0 <ip_reass_remove_oldest_datagram+0x4c>
 801c5c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c5c8:	699a      	ldr	r2, [r3, #24]
 801c5ca:	687b      	ldr	r3, [r7, #4]
 801c5cc:	691b      	ldr	r3, [r3, #16]
 801c5ce:	429a      	cmp	r2, r3
 801c5d0:	d106      	bne.n	801c5e0 <ip_reass_remove_oldest_datagram+0x4c>
 801c5d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c5d4:	899a      	ldrh	r2, [r3, #12]
 801c5d6:	687b      	ldr	r3, [r7, #4]
 801c5d8:	889b      	ldrh	r3, [r3, #4]
 801c5da:	b29b      	uxth	r3, r3
 801c5dc:	429a      	cmp	r2, r3
 801c5de:	d014      	beq.n	801c60a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801c5e0:	693b      	ldr	r3, [r7, #16]
 801c5e2:	3301      	adds	r3, #1
 801c5e4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801c5e6:	6a3b      	ldr	r3, [r7, #32]
 801c5e8:	2b00      	cmp	r3, #0
 801c5ea:	d104      	bne.n	801c5f6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801c5ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c5ee:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801c5f0:	69fb      	ldr	r3, [r7, #28]
 801c5f2:	61bb      	str	r3, [r7, #24]
 801c5f4:	e009      	b.n	801c60a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801c5f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c5f8:	7fda      	ldrb	r2, [r3, #31]
 801c5fa:	6a3b      	ldr	r3, [r7, #32]
 801c5fc:	7fdb      	ldrb	r3, [r3, #31]
 801c5fe:	429a      	cmp	r2, r3
 801c600:	d803      	bhi.n	801c60a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801c602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c604:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801c606:	69fb      	ldr	r3, [r7, #28]
 801c608:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801c60a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c60c:	681b      	ldr	r3, [r3, #0]
 801c60e:	2b00      	cmp	r3, #0
 801c610:	d001      	beq.n	801c616 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801c612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c614:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801c616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c618:	681b      	ldr	r3, [r3, #0]
 801c61a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801c61c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c61e:	2b00      	cmp	r3, #0
 801c620:	d1cb      	bne.n	801c5ba <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801c622:	6a3b      	ldr	r3, [r7, #32]
 801c624:	2b00      	cmp	r3, #0
 801c626:	d008      	beq.n	801c63a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801c628:	69b9      	ldr	r1, [r7, #24]
 801c62a:	6a38      	ldr	r0, [r7, #32]
 801c62c:	f7ff ff0e 	bl	801c44c <ip_reass_free_complete_datagram>
 801c630:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801c632:	697a      	ldr	r2, [r7, #20]
 801c634:	68fb      	ldr	r3, [r7, #12]
 801c636:	4413      	add	r3, r2
 801c638:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801c63a:	697a      	ldr	r2, [r7, #20]
 801c63c:	683b      	ldr	r3, [r7, #0]
 801c63e:	429a      	cmp	r2, r3
 801c640:	da02      	bge.n	801c648 <ip_reass_remove_oldest_datagram+0xb4>
 801c642:	693b      	ldr	r3, [r7, #16]
 801c644:	2b01      	cmp	r3, #1
 801c646:	dcac      	bgt.n	801c5a2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801c648:	697b      	ldr	r3, [r7, #20]
}
 801c64a:	4618      	mov	r0, r3
 801c64c:	3728      	adds	r7, #40	@ 0x28
 801c64e:	46bd      	mov	sp, r7
 801c650:	bd80      	pop	{r7, pc}
 801c652:	bf00      	nop
 801c654:	2000cc24 	.word	0x2000cc24

0801c658 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801c658:	b580      	push	{r7, lr}
 801c65a:	b084      	sub	sp, #16
 801c65c:	af00      	add	r7, sp, #0
 801c65e:	6078      	str	r0, [r7, #4]
 801c660:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801c662:	2004      	movs	r0, #4
 801c664:	f7f6 fdf2 	bl	801324c <memp_malloc>
 801c668:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801c66a:	68fb      	ldr	r3, [r7, #12]
 801c66c:	2b00      	cmp	r3, #0
 801c66e:	d110      	bne.n	801c692 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801c670:	6839      	ldr	r1, [r7, #0]
 801c672:	6878      	ldr	r0, [r7, #4]
 801c674:	f7ff ff8e 	bl	801c594 <ip_reass_remove_oldest_datagram>
 801c678:	4602      	mov	r2, r0
 801c67a:	683b      	ldr	r3, [r7, #0]
 801c67c:	4293      	cmp	r3, r2
 801c67e:	dc03      	bgt.n	801c688 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801c680:	2004      	movs	r0, #4
 801c682:	f7f6 fde3 	bl	801324c <memp_malloc>
 801c686:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801c688:	68fb      	ldr	r3, [r7, #12]
 801c68a:	2b00      	cmp	r3, #0
 801c68c:	d101      	bne.n	801c692 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801c68e:	2300      	movs	r3, #0
 801c690:	e016      	b.n	801c6c0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801c692:	2220      	movs	r2, #32
 801c694:	2100      	movs	r1, #0
 801c696:	68f8      	ldr	r0, [r7, #12]
 801c698:	f001 fe2d 	bl	801e2f6 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801c69c:	68fb      	ldr	r3, [r7, #12]
 801c69e:	220f      	movs	r2, #15
 801c6a0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801c6a2:	4b09      	ldr	r3, [pc, #36]	@ (801c6c8 <ip_reass_enqueue_new_datagram+0x70>)
 801c6a4:	681a      	ldr	r2, [r3, #0]
 801c6a6:	68fb      	ldr	r3, [r7, #12]
 801c6a8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801c6aa:	4a07      	ldr	r2, [pc, #28]	@ (801c6c8 <ip_reass_enqueue_new_datagram+0x70>)
 801c6ac:	68fb      	ldr	r3, [r7, #12]
 801c6ae:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801c6b0:	68fb      	ldr	r3, [r7, #12]
 801c6b2:	3308      	adds	r3, #8
 801c6b4:	2214      	movs	r2, #20
 801c6b6:	6879      	ldr	r1, [r7, #4]
 801c6b8:	4618      	mov	r0, r3
 801c6ba:	f001 ff1a 	bl	801e4f2 <memcpy>
  return ipr;
 801c6be:	68fb      	ldr	r3, [r7, #12]
}
 801c6c0:	4618      	mov	r0, r3
 801c6c2:	3710      	adds	r7, #16
 801c6c4:	46bd      	mov	sp, r7
 801c6c6:	bd80      	pop	{r7, pc}
 801c6c8:	2000cc24 	.word	0x2000cc24

0801c6cc <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801c6cc:	b580      	push	{r7, lr}
 801c6ce:	b082      	sub	sp, #8
 801c6d0:	af00      	add	r7, sp, #0
 801c6d2:	6078      	str	r0, [r7, #4]
 801c6d4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801c6d6:	4b10      	ldr	r3, [pc, #64]	@ (801c718 <ip_reass_dequeue_datagram+0x4c>)
 801c6d8:	681b      	ldr	r3, [r3, #0]
 801c6da:	687a      	ldr	r2, [r7, #4]
 801c6dc:	429a      	cmp	r2, r3
 801c6de:	d104      	bne.n	801c6ea <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801c6e0:	687b      	ldr	r3, [r7, #4]
 801c6e2:	681b      	ldr	r3, [r3, #0]
 801c6e4:	4a0c      	ldr	r2, [pc, #48]	@ (801c718 <ip_reass_dequeue_datagram+0x4c>)
 801c6e6:	6013      	str	r3, [r2, #0]
 801c6e8:	e00d      	b.n	801c706 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801c6ea:	683b      	ldr	r3, [r7, #0]
 801c6ec:	2b00      	cmp	r3, #0
 801c6ee:	d106      	bne.n	801c6fe <ip_reass_dequeue_datagram+0x32>
 801c6f0:	4b0a      	ldr	r3, [pc, #40]	@ (801c71c <ip_reass_dequeue_datagram+0x50>)
 801c6f2:	f240 1245 	movw	r2, #325	@ 0x145
 801c6f6:	490a      	ldr	r1, [pc, #40]	@ (801c720 <ip_reass_dequeue_datagram+0x54>)
 801c6f8:	480a      	ldr	r0, [pc, #40]	@ (801c724 <ip_reass_dequeue_datagram+0x58>)
 801c6fa:	f001 fd47 	bl	801e18c <iprintf>
    prev->next = ipr->next;
 801c6fe:	687b      	ldr	r3, [r7, #4]
 801c700:	681a      	ldr	r2, [r3, #0]
 801c702:	683b      	ldr	r3, [r7, #0]
 801c704:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801c706:	6879      	ldr	r1, [r7, #4]
 801c708:	2004      	movs	r0, #4
 801c70a:	f7f6 fe15 	bl	8013338 <memp_free>
}
 801c70e:	bf00      	nop
 801c710:	3708      	adds	r7, #8
 801c712:	46bd      	mov	sp, r7
 801c714:	bd80      	pop	{r7, pc}
 801c716:	bf00      	nop
 801c718:	2000cc24 	.word	0x2000cc24
 801c71c:	08023960 	.word	0x08023960
 801c720:	08023a28 	.word	0x08023a28
 801c724:	080239a8 	.word	0x080239a8

0801c728 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801c728:	b580      	push	{r7, lr}
 801c72a:	b08c      	sub	sp, #48	@ 0x30
 801c72c:	af00      	add	r7, sp, #0
 801c72e:	60f8      	str	r0, [r7, #12]
 801c730:	60b9      	str	r1, [r7, #8]
 801c732:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801c734:	2300      	movs	r3, #0
 801c736:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801c738:	2301      	movs	r3, #1
 801c73a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801c73c:	68bb      	ldr	r3, [r7, #8]
 801c73e:	685b      	ldr	r3, [r3, #4]
 801c740:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801c742:	69fb      	ldr	r3, [r7, #28]
 801c744:	885b      	ldrh	r3, [r3, #2]
 801c746:	b29b      	uxth	r3, r3
 801c748:	4618      	mov	r0, r3
 801c74a:	f7f6 f8a7 	bl	801289c <lwip_htons>
 801c74e:	4603      	mov	r3, r0
 801c750:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801c752:	69fb      	ldr	r3, [r7, #28]
 801c754:	781b      	ldrb	r3, [r3, #0]
 801c756:	f003 030f 	and.w	r3, r3, #15
 801c75a:	b2db      	uxtb	r3, r3
 801c75c:	009b      	lsls	r3, r3, #2
 801c75e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801c760:	7e7b      	ldrb	r3, [r7, #25]
 801c762:	b29b      	uxth	r3, r3
 801c764:	8b7a      	ldrh	r2, [r7, #26]
 801c766:	429a      	cmp	r2, r3
 801c768:	d202      	bcs.n	801c770 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c76a:	f04f 33ff 	mov.w	r3, #4294967295
 801c76e:	e135      	b.n	801c9dc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801c770:	7e7b      	ldrb	r3, [r7, #25]
 801c772:	b29b      	uxth	r3, r3
 801c774:	8b7a      	ldrh	r2, [r7, #26]
 801c776:	1ad3      	subs	r3, r2, r3
 801c778:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801c77a:	69fb      	ldr	r3, [r7, #28]
 801c77c:	88db      	ldrh	r3, [r3, #6]
 801c77e:	b29b      	uxth	r3, r3
 801c780:	4618      	mov	r0, r3
 801c782:	f7f6 f88b 	bl	801289c <lwip_htons>
 801c786:	4603      	mov	r3, r0
 801c788:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c78c:	b29b      	uxth	r3, r3
 801c78e:	00db      	lsls	r3, r3, #3
 801c790:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801c792:	68bb      	ldr	r3, [r7, #8]
 801c794:	685b      	ldr	r3, [r3, #4]
 801c796:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 801c798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c79a:	2200      	movs	r2, #0
 801c79c:	701a      	strb	r2, [r3, #0]
 801c79e:	2200      	movs	r2, #0
 801c7a0:	705a      	strb	r2, [r3, #1]
 801c7a2:	2200      	movs	r2, #0
 801c7a4:	709a      	strb	r2, [r3, #2]
 801c7a6:	2200      	movs	r2, #0
 801c7a8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801c7aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c7ac:	8afa      	ldrh	r2, [r7, #22]
 801c7ae:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801c7b0:	8afa      	ldrh	r2, [r7, #22]
 801c7b2:	8b7b      	ldrh	r3, [r7, #26]
 801c7b4:	4413      	add	r3, r2
 801c7b6:	b29a      	uxth	r2, r3
 801c7b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c7ba:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801c7bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c7be:	88db      	ldrh	r3, [r3, #6]
 801c7c0:	b29b      	uxth	r3, r3
 801c7c2:	8afa      	ldrh	r2, [r7, #22]
 801c7c4:	429a      	cmp	r2, r3
 801c7c6:	d902      	bls.n	801c7ce <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c7c8:	f04f 33ff 	mov.w	r3, #4294967295
 801c7cc:	e106      	b.n	801c9dc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801c7ce:	68fb      	ldr	r3, [r7, #12]
 801c7d0:	685b      	ldr	r3, [r3, #4]
 801c7d2:	627b      	str	r3, [r7, #36]	@ 0x24
 801c7d4:	e068      	b.n	801c8a8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801c7d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c7d8:	685b      	ldr	r3, [r3, #4]
 801c7da:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801c7dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c7de:	889b      	ldrh	r3, [r3, #4]
 801c7e0:	b29a      	uxth	r2, r3
 801c7e2:	693b      	ldr	r3, [r7, #16]
 801c7e4:	889b      	ldrh	r3, [r3, #4]
 801c7e6:	b29b      	uxth	r3, r3
 801c7e8:	429a      	cmp	r2, r3
 801c7ea:	d235      	bcs.n	801c858 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801c7ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c7ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c7f0:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801c7f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c7f4:	2b00      	cmp	r3, #0
 801c7f6:	d020      	beq.n	801c83a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801c7f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c7fa:	889b      	ldrh	r3, [r3, #4]
 801c7fc:	b29a      	uxth	r2, r3
 801c7fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c800:	88db      	ldrh	r3, [r3, #6]
 801c802:	b29b      	uxth	r3, r3
 801c804:	429a      	cmp	r2, r3
 801c806:	d307      	bcc.n	801c818 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801c808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c80a:	88db      	ldrh	r3, [r3, #6]
 801c80c:	b29a      	uxth	r2, r3
 801c80e:	693b      	ldr	r3, [r7, #16]
 801c810:	889b      	ldrh	r3, [r3, #4]
 801c812:	b29b      	uxth	r3, r3
 801c814:	429a      	cmp	r2, r3
 801c816:	d902      	bls.n	801c81e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c818:	f04f 33ff 	mov.w	r3, #4294967295
 801c81c:	e0de      	b.n	801c9dc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801c81e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c820:	68ba      	ldr	r2, [r7, #8]
 801c822:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801c824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c826:	88db      	ldrh	r3, [r3, #6]
 801c828:	b29a      	uxth	r2, r3
 801c82a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c82c:	889b      	ldrh	r3, [r3, #4]
 801c82e:	b29b      	uxth	r3, r3
 801c830:	429a      	cmp	r2, r3
 801c832:	d03d      	beq.n	801c8b0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801c834:	2300      	movs	r3, #0
 801c836:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801c838:	e03a      	b.n	801c8b0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801c83a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c83c:	88db      	ldrh	r3, [r3, #6]
 801c83e:	b29a      	uxth	r2, r3
 801c840:	693b      	ldr	r3, [r7, #16]
 801c842:	889b      	ldrh	r3, [r3, #4]
 801c844:	b29b      	uxth	r3, r3
 801c846:	429a      	cmp	r2, r3
 801c848:	d902      	bls.n	801c850 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c84a:	f04f 33ff 	mov.w	r3, #4294967295
 801c84e:	e0c5      	b.n	801c9dc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801c850:	68fb      	ldr	r3, [r7, #12]
 801c852:	68ba      	ldr	r2, [r7, #8]
 801c854:	605a      	str	r2, [r3, #4]
      break;
 801c856:	e02b      	b.n	801c8b0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801c858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c85a:	889b      	ldrh	r3, [r3, #4]
 801c85c:	b29a      	uxth	r2, r3
 801c85e:	693b      	ldr	r3, [r7, #16]
 801c860:	889b      	ldrh	r3, [r3, #4]
 801c862:	b29b      	uxth	r3, r3
 801c864:	429a      	cmp	r2, r3
 801c866:	d102      	bne.n	801c86e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c868:	f04f 33ff 	mov.w	r3, #4294967295
 801c86c:	e0b6      	b.n	801c9dc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801c86e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c870:	889b      	ldrh	r3, [r3, #4]
 801c872:	b29a      	uxth	r2, r3
 801c874:	693b      	ldr	r3, [r7, #16]
 801c876:	88db      	ldrh	r3, [r3, #6]
 801c878:	b29b      	uxth	r3, r3
 801c87a:	429a      	cmp	r2, r3
 801c87c:	d202      	bcs.n	801c884 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c87e:	f04f 33ff 	mov.w	r3, #4294967295
 801c882:	e0ab      	b.n	801c9dc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801c884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c886:	2b00      	cmp	r3, #0
 801c888:	d009      	beq.n	801c89e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801c88a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c88c:	88db      	ldrh	r3, [r3, #6]
 801c88e:	b29a      	uxth	r2, r3
 801c890:	693b      	ldr	r3, [r7, #16]
 801c892:	889b      	ldrh	r3, [r3, #4]
 801c894:	b29b      	uxth	r3, r3
 801c896:	429a      	cmp	r2, r3
 801c898:	d001      	beq.n	801c89e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801c89a:	2300      	movs	r3, #0
 801c89c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801c89e:	693b      	ldr	r3, [r7, #16]
 801c8a0:	681b      	ldr	r3, [r3, #0]
 801c8a2:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 801c8a4:	693b      	ldr	r3, [r7, #16]
 801c8a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 801c8a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c8aa:	2b00      	cmp	r3, #0
 801c8ac:	d193      	bne.n	801c7d6 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801c8ae:	e000      	b.n	801c8b2 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801c8b0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801c8b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c8b4:	2b00      	cmp	r3, #0
 801c8b6:	d12d      	bne.n	801c914 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801c8b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c8ba:	2b00      	cmp	r3, #0
 801c8bc:	d01c      	beq.n	801c8f8 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801c8be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c8c0:	88db      	ldrh	r3, [r3, #6]
 801c8c2:	b29a      	uxth	r2, r3
 801c8c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c8c6:	889b      	ldrh	r3, [r3, #4]
 801c8c8:	b29b      	uxth	r3, r3
 801c8ca:	429a      	cmp	r2, r3
 801c8cc:	d906      	bls.n	801c8dc <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801c8ce:	4b45      	ldr	r3, [pc, #276]	@ (801c9e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801c8d0:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 801c8d4:	4944      	ldr	r1, [pc, #272]	@ (801c9e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801c8d6:	4845      	ldr	r0, [pc, #276]	@ (801c9ec <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801c8d8:	f001 fc58 	bl	801e18c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801c8dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c8de:	68ba      	ldr	r2, [r7, #8]
 801c8e0:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801c8e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c8e4:	88db      	ldrh	r3, [r3, #6]
 801c8e6:	b29a      	uxth	r2, r3
 801c8e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c8ea:	889b      	ldrh	r3, [r3, #4]
 801c8ec:	b29b      	uxth	r3, r3
 801c8ee:	429a      	cmp	r2, r3
 801c8f0:	d010      	beq.n	801c914 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801c8f2:	2300      	movs	r3, #0
 801c8f4:	623b      	str	r3, [r7, #32]
 801c8f6:	e00d      	b.n	801c914 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801c8f8:	68fb      	ldr	r3, [r7, #12]
 801c8fa:	685b      	ldr	r3, [r3, #4]
 801c8fc:	2b00      	cmp	r3, #0
 801c8fe:	d006      	beq.n	801c90e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801c900:	4b38      	ldr	r3, [pc, #224]	@ (801c9e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801c902:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 801c906:	493a      	ldr	r1, [pc, #232]	@ (801c9f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801c908:	4838      	ldr	r0, [pc, #224]	@ (801c9ec <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801c90a:	f001 fc3f 	bl	801e18c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801c90e:	68fb      	ldr	r3, [r7, #12]
 801c910:	68ba      	ldr	r2, [r7, #8]
 801c912:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801c914:	687b      	ldr	r3, [r7, #4]
 801c916:	2b00      	cmp	r3, #0
 801c918:	d105      	bne.n	801c926 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801c91a:	68fb      	ldr	r3, [r7, #12]
 801c91c:	7f9b      	ldrb	r3, [r3, #30]
 801c91e:	f003 0301 	and.w	r3, r3, #1
 801c922:	2b00      	cmp	r3, #0
 801c924:	d059      	beq.n	801c9da <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801c926:	6a3b      	ldr	r3, [r7, #32]
 801c928:	2b00      	cmp	r3, #0
 801c92a:	d04f      	beq.n	801c9cc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801c92c:	68fb      	ldr	r3, [r7, #12]
 801c92e:	685b      	ldr	r3, [r3, #4]
 801c930:	2b00      	cmp	r3, #0
 801c932:	d006      	beq.n	801c942 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801c934:	68fb      	ldr	r3, [r7, #12]
 801c936:	685b      	ldr	r3, [r3, #4]
 801c938:	685b      	ldr	r3, [r3, #4]
 801c93a:	889b      	ldrh	r3, [r3, #4]
 801c93c:	b29b      	uxth	r3, r3
 801c93e:	2b00      	cmp	r3, #0
 801c940:	d002      	beq.n	801c948 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801c942:	2300      	movs	r3, #0
 801c944:	623b      	str	r3, [r7, #32]
 801c946:	e041      	b.n	801c9cc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801c948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c94a:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 801c94c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c94e:	681b      	ldr	r3, [r3, #0]
 801c950:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801c952:	e012      	b.n	801c97a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801c954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c956:	685b      	ldr	r3, [r3, #4]
 801c958:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 801c95a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c95c:	88db      	ldrh	r3, [r3, #6]
 801c95e:	b29a      	uxth	r2, r3
 801c960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c962:	889b      	ldrh	r3, [r3, #4]
 801c964:	b29b      	uxth	r3, r3
 801c966:	429a      	cmp	r2, r3
 801c968:	d002      	beq.n	801c970 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801c96a:	2300      	movs	r3, #0
 801c96c:	623b      	str	r3, [r7, #32]
            break;
 801c96e:	e007      	b.n	801c980 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801c970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c972:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 801c974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c976:	681b      	ldr	r3, [r3, #0]
 801c978:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801c97a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c97c:	2b00      	cmp	r3, #0
 801c97e:	d1e9      	bne.n	801c954 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801c980:	6a3b      	ldr	r3, [r7, #32]
 801c982:	2b00      	cmp	r3, #0
 801c984:	d022      	beq.n	801c9cc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801c986:	68fb      	ldr	r3, [r7, #12]
 801c988:	685b      	ldr	r3, [r3, #4]
 801c98a:	2b00      	cmp	r3, #0
 801c98c:	d106      	bne.n	801c99c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801c98e:	4b15      	ldr	r3, [pc, #84]	@ (801c9e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801c990:	f240 12df 	movw	r2, #479	@ 0x1df
 801c994:	4917      	ldr	r1, [pc, #92]	@ (801c9f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801c996:	4815      	ldr	r0, [pc, #84]	@ (801c9ec <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801c998:	f001 fbf8 	bl	801e18c <iprintf>
          LWIP_ASSERT("sanity check",
 801c99c:	68fb      	ldr	r3, [r7, #12]
 801c99e:	685b      	ldr	r3, [r3, #4]
 801c9a0:	685b      	ldr	r3, [r3, #4]
 801c9a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c9a4:	429a      	cmp	r2, r3
 801c9a6:	d106      	bne.n	801c9b6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801c9a8:	4b0e      	ldr	r3, [pc, #56]	@ (801c9e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801c9aa:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 801c9ae:	4911      	ldr	r1, [pc, #68]	@ (801c9f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801c9b0:	480e      	ldr	r0, [pc, #56]	@ (801c9ec <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801c9b2:	f001 fbeb 	bl	801e18c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801c9b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c9b8:	681b      	ldr	r3, [r3, #0]
 801c9ba:	2b00      	cmp	r3, #0
 801c9bc:	d006      	beq.n	801c9cc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801c9be:	4b09      	ldr	r3, [pc, #36]	@ (801c9e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801c9c0:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 801c9c4:	490c      	ldr	r1, [pc, #48]	@ (801c9f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801c9c6:	4809      	ldr	r0, [pc, #36]	@ (801c9ec <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801c9c8:	f001 fbe0 	bl	801e18c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801c9cc:	6a3b      	ldr	r3, [r7, #32]
 801c9ce:	2b00      	cmp	r3, #0
 801c9d0:	bf14      	ite	ne
 801c9d2:	2301      	movne	r3, #1
 801c9d4:	2300      	moveq	r3, #0
 801c9d6:	b2db      	uxtb	r3, r3
 801c9d8:	e000      	b.n	801c9dc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801c9da:	2300      	movs	r3, #0
}
 801c9dc:	4618      	mov	r0, r3
 801c9de:	3730      	adds	r7, #48	@ 0x30
 801c9e0:	46bd      	mov	sp, r7
 801c9e2:	bd80      	pop	{r7, pc}
 801c9e4:	08023960 	.word	0x08023960
 801c9e8:	08023a44 	.word	0x08023a44
 801c9ec:	080239a8 	.word	0x080239a8
 801c9f0:	08023a64 	.word	0x08023a64
 801c9f4:	08023a9c 	.word	0x08023a9c
 801c9f8:	08023aac 	.word	0x08023aac

0801c9fc <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801c9fc:	b580      	push	{r7, lr}
 801c9fe:	b08e      	sub	sp, #56	@ 0x38
 801ca00:	af00      	add	r7, sp, #0
 801ca02:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801ca04:	687b      	ldr	r3, [r7, #4]
 801ca06:	685b      	ldr	r3, [r3, #4]
 801ca08:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801ca0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ca0c:	781b      	ldrb	r3, [r3, #0]
 801ca0e:	f003 030f 	and.w	r3, r3, #15
 801ca12:	b2db      	uxtb	r3, r3
 801ca14:	009b      	lsls	r3, r3, #2
 801ca16:	b2db      	uxtb	r3, r3
 801ca18:	2b14      	cmp	r3, #20
 801ca1a:	f040 8171 	bne.w	801cd00 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801ca1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ca20:	88db      	ldrh	r3, [r3, #6]
 801ca22:	b29b      	uxth	r3, r3
 801ca24:	4618      	mov	r0, r3
 801ca26:	f7f5 ff39 	bl	801289c <lwip_htons>
 801ca2a:	4603      	mov	r3, r0
 801ca2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ca30:	b29b      	uxth	r3, r3
 801ca32:	00db      	lsls	r3, r3, #3
 801ca34:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801ca36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ca38:	885b      	ldrh	r3, [r3, #2]
 801ca3a:	b29b      	uxth	r3, r3
 801ca3c:	4618      	mov	r0, r3
 801ca3e:	f7f5 ff2d 	bl	801289c <lwip_htons>
 801ca42:	4603      	mov	r3, r0
 801ca44:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801ca46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ca48:	781b      	ldrb	r3, [r3, #0]
 801ca4a:	f003 030f 	and.w	r3, r3, #15
 801ca4e:	b2db      	uxtb	r3, r3
 801ca50:	009b      	lsls	r3, r3, #2
 801ca52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 801ca56:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801ca5a:	b29b      	uxth	r3, r3
 801ca5c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801ca5e:	429a      	cmp	r2, r3
 801ca60:	f0c0 8150 	bcc.w	801cd04 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801ca64:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801ca68:	b29b      	uxth	r3, r3
 801ca6a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801ca6c:	1ad3      	subs	r3, r2, r3
 801ca6e:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801ca70:	6878      	ldr	r0, [r7, #4]
 801ca72:	f7f7 fb61 	bl	8014138 <pbuf_clen>
 801ca76:	4603      	mov	r3, r0
 801ca78:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801ca7a:	4b8c      	ldr	r3, [pc, #560]	@ (801ccac <ip4_reass+0x2b0>)
 801ca7c:	881b      	ldrh	r3, [r3, #0]
 801ca7e:	461a      	mov	r2, r3
 801ca80:	8c3b      	ldrh	r3, [r7, #32]
 801ca82:	4413      	add	r3, r2
 801ca84:	2b0a      	cmp	r3, #10
 801ca86:	dd10      	ble.n	801caaa <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801ca88:	8c3b      	ldrh	r3, [r7, #32]
 801ca8a:	4619      	mov	r1, r3
 801ca8c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801ca8e:	f7ff fd81 	bl	801c594 <ip_reass_remove_oldest_datagram>
 801ca92:	4603      	mov	r3, r0
 801ca94:	2b00      	cmp	r3, #0
 801ca96:	f000 8137 	beq.w	801cd08 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801ca9a:	4b84      	ldr	r3, [pc, #528]	@ (801ccac <ip4_reass+0x2b0>)
 801ca9c:	881b      	ldrh	r3, [r3, #0]
 801ca9e:	461a      	mov	r2, r3
 801caa0:	8c3b      	ldrh	r3, [r7, #32]
 801caa2:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801caa4:	2b0a      	cmp	r3, #10
 801caa6:	f300 812f 	bgt.w	801cd08 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801caaa:	4b81      	ldr	r3, [pc, #516]	@ (801ccb0 <ip4_reass+0x2b4>)
 801caac:	681b      	ldr	r3, [r3, #0]
 801caae:	633b      	str	r3, [r7, #48]	@ 0x30
 801cab0:	e015      	b.n	801cade <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801cab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cab4:	695a      	ldr	r2, [r3, #20]
 801cab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cab8:	68db      	ldr	r3, [r3, #12]
 801caba:	429a      	cmp	r2, r3
 801cabc:	d10c      	bne.n	801cad8 <ip4_reass+0xdc>
 801cabe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cac0:	699a      	ldr	r2, [r3, #24]
 801cac2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cac4:	691b      	ldr	r3, [r3, #16]
 801cac6:	429a      	cmp	r2, r3
 801cac8:	d106      	bne.n	801cad8 <ip4_reass+0xdc>
 801caca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cacc:	899a      	ldrh	r2, [r3, #12]
 801cace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cad0:	889b      	ldrh	r3, [r3, #4]
 801cad2:	b29b      	uxth	r3, r3
 801cad4:	429a      	cmp	r2, r3
 801cad6:	d006      	beq.n	801cae6 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801cad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cada:	681b      	ldr	r3, [r3, #0]
 801cadc:	633b      	str	r3, [r7, #48]	@ 0x30
 801cade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cae0:	2b00      	cmp	r3, #0
 801cae2:	d1e6      	bne.n	801cab2 <ip4_reass+0xb6>
 801cae4:	e000      	b.n	801cae8 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801cae6:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801cae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801caea:	2b00      	cmp	r3, #0
 801caec:	d109      	bne.n	801cb02 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801caee:	8c3b      	ldrh	r3, [r7, #32]
 801caf0:	4619      	mov	r1, r3
 801caf2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801caf4:	f7ff fdb0 	bl	801c658 <ip_reass_enqueue_new_datagram>
 801caf8:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801cafa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cafc:	2b00      	cmp	r3, #0
 801cafe:	d11c      	bne.n	801cb3a <ip4_reass+0x13e>
      goto nullreturn;
 801cb00:	e105      	b.n	801cd0e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801cb02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cb04:	88db      	ldrh	r3, [r3, #6]
 801cb06:	b29b      	uxth	r3, r3
 801cb08:	4618      	mov	r0, r3
 801cb0a:	f7f5 fec7 	bl	801289c <lwip_htons>
 801cb0e:	4603      	mov	r3, r0
 801cb10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801cb14:	2b00      	cmp	r3, #0
 801cb16:	d110      	bne.n	801cb3a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801cb18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cb1a:	89db      	ldrh	r3, [r3, #14]
 801cb1c:	4618      	mov	r0, r3
 801cb1e:	f7f5 febd 	bl	801289c <lwip_htons>
 801cb22:	4603      	mov	r3, r0
 801cb24:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801cb28:	2b00      	cmp	r3, #0
 801cb2a:	d006      	beq.n	801cb3a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801cb2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cb2e:	3308      	adds	r3, #8
 801cb30:	2214      	movs	r2, #20
 801cb32:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801cb34:	4618      	mov	r0, r3
 801cb36:	f001 fcdc 	bl	801e4f2 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801cb3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cb3c:	88db      	ldrh	r3, [r3, #6]
 801cb3e:	b29b      	uxth	r3, r3
 801cb40:	f003 0320 	and.w	r3, r3, #32
 801cb44:	2b00      	cmp	r3, #0
 801cb46:	bf0c      	ite	eq
 801cb48:	2301      	moveq	r3, #1
 801cb4a:	2300      	movne	r3, #0
 801cb4c:	b2db      	uxtb	r3, r3
 801cb4e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801cb50:	69fb      	ldr	r3, [r7, #28]
 801cb52:	2b00      	cmp	r3, #0
 801cb54:	d00e      	beq.n	801cb74 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801cb56:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801cb58:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cb5a:	4413      	add	r3, r2
 801cb5c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801cb5e:	8b7a      	ldrh	r2, [r7, #26]
 801cb60:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801cb62:	429a      	cmp	r2, r3
 801cb64:	f0c0 80a0 	bcc.w	801cca8 <ip4_reass+0x2ac>
 801cb68:	8b7b      	ldrh	r3, [r7, #26]
 801cb6a:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801cb6e:	4293      	cmp	r3, r2
 801cb70:	f200 809a 	bhi.w	801cca8 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801cb74:	69fa      	ldr	r2, [r7, #28]
 801cb76:	6879      	ldr	r1, [r7, #4]
 801cb78:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801cb7a:	f7ff fdd5 	bl	801c728 <ip_reass_chain_frag_into_datagram_and_validate>
 801cb7e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801cb80:	697b      	ldr	r3, [r7, #20]
 801cb82:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cb86:	f000 809b 	beq.w	801ccc0 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801cb8a:	4b48      	ldr	r3, [pc, #288]	@ (801ccac <ip4_reass+0x2b0>)
 801cb8c:	881a      	ldrh	r2, [r3, #0]
 801cb8e:	8c3b      	ldrh	r3, [r7, #32]
 801cb90:	4413      	add	r3, r2
 801cb92:	b29a      	uxth	r2, r3
 801cb94:	4b45      	ldr	r3, [pc, #276]	@ (801ccac <ip4_reass+0x2b0>)
 801cb96:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801cb98:	69fb      	ldr	r3, [r7, #28]
 801cb9a:	2b00      	cmp	r3, #0
 801cb9c:	d00d      	beq.n	801cbba <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801cb9e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801cba0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cba2:	4413      	add	r3, r2
 801cba4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801cba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cba8:	8a7a      	ldrh	r2, [r7, #18]
 801cbaa:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801cbac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cbae:	7f9b      	ldrb	r3, [r3, #30]
 801cbb0:	f043 0301 	orr.w	r3, r3, #1
 801cbb4:	b2da      	uxtb	r2, r3
 801cbb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cbb8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801cbba:	697b      	ldr	r3, [r7, #20]
 801cbbc:	2b01      	cmp	r3, #1
 801cbbe:	d171      	bne.n	801cca4 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801cbc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cbc2:	8b9b      	ldrh	r3, [r3, #28]
 801cbc4:	3314      	adds	r3, #20
 801cbc6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801cbc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cbca:	685b      	ldr	r3, [r3, #4]
 801cbcc:	685b      	ldr	r3, [r3, #4]
 801cbce:	681b      	ldr	r3, [r3, #0]
 801cbd0:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801cbd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cbd4:	685b      	ldr	r3, [r3, #4]
 801cbd6:	685b      	ldr	r3, [r3, #4]
 801cbd8:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801cbda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cbdc:	3308      	adds	r3, #8
 801cbde:	2214      	movs	r2, #20
 801cbe0:	4619      	mov	r1, r3
 801cbe2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801cbe4:	f001 fc85 	bl	801e4f2 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801cbe8:	8a3b      	ldrh	r3, [r7, #16]
 801cbea:	4618      	mov	r0, r3
 801cbec:	f7f5 fe56 	bl	801289c <lwip_htons>
 801cbf0:	4603      	mov	r3, r0
 801cbf2:	461a      	mov	r2, r3
 801cbf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cbf6:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801cbf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cbfa:	2200      	movs	r2, #0
 801cbfc:	719a      	strb	r2, [r3, #6]
 801cbfe:	2200      	movs	r2, #0
 801cc00:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801cc02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cc04:	2200      	movs	r2, #0
 801cc06:	729a      	strb	r2, [r3, #10]
 801cc08:	2200      	movs	r2, #0
 801cc0a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801cc0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cc0e:	685b      	ldr	r3, [r3, #4]
 801cc10:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801cc12:	e00d      	b.n	801cc30 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801cc14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801cc16:	685b      	ldr	r3, [r3, #4]
 801cc18:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801cc1a:	2114      	movs	r1, #20
 801cc1c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801cc1e:	f7f7 f977 	bl	8013f10 <pbuf_remove_header>
      pbuf_cat(p, r);
 801cc22:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801cc24:	6878      	ldr	r0, [r7, #4]
 801cc26:	f7f7 fac7 	bl	80141b8 <pbuf_cat>
      r = iprh->next_pbuf;
 801cc2a:	68fb      	ldr	r3, [r7, #12]
 801cc2c:	681b      	ldr	r3, [r3, #0]
 801cc2e:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 801cc30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801cc32:	2b00      	cmp	r3, #0
 801cc34:	d1ee      	bne.n	801cc14 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801cc36:	4b1e      	ldr	r3, [pc, #120]	@ (801ccb0 <ip4_reass+0x2b4>)
 801cc38:	681b      	ldr	r3, [r3, #0]
 801cc3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801cc3c:	429a      	cmp	r2, r3
 801cc3e:	d102      	bne.n	801cc46 <ip4_reass+0x24a>
      ipr_prev = NULL;
 801cc40:	2300      	movs	r3, #0
 801cc42:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801cc44:	e010      	b.n	801cc68 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801cc46:	4b1a      	ldr	r3, [pc, #104]	@ (801ccb0 <ip4_reass+0x2b4>)
 801cc48:	681b      	ldr	r3, [r3, #0]
 801cc4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801cc4c:	e007      	b.n	801cc5e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801cc4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cc50:	681b      	ldr	r3, [r3, #0]
 801cc52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801cc54:	429a      	cmp	r2, r3
 801cc56:	d006      	beq.n	801cc66 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801cc58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cc5a:	681b      	ldr	r3, [r3, #0]
 801cc5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801cc5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cc60:	2b00      	cmp	r3, #0
 801cc62:	d1f4      	bne.n	801cc4e <ip4_reass+0x252>
 801cc64:	e000      	b.n	801cc68 <ip4_reass+0x26c>
          break;
 801cc66:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801cc68:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801cc6a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801cc6c:	f7ff fd2e 	bl	801c6cc <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801cc70:	6878      	ldr	r0, [r7, #4]
 801cc72:	f7f7 fa61 	bl	8014138 <pbuf_clen>
 801cc76:	4603      	mov	r3, r0
 801cc78:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801cc7a:	4b0c      	ldr	r3, [pc, #48]	@ (801ccac <ip4_reass+0x2b0>)
 801cc7c:	881b      	ldrh	r3, [r3, #0]
 801cc7e:	8c3a      	ldrh	r2, [r7, #32]
 801cc80:	429a      	cmp	r2, r3
 801cc82:	d906      	bls.n	801cc92 <ip4_reass+0x296>
 801cc84:	4b0b      	ldr	r3, [pc, #44]	@ (801ccb4 <ip4_reass+0x2b8>)
 801cc86:	f240 229b 	movw	r2, #667	@ 0x29b
 801cc8a:	490b      	ldr	r1, [pc, #44]	@ (801ccb8 <ip4_reass+0x2bc>)
 801cc8c:	480b      	ldr	r0, [pc, #44]	@ (801ccbc <ip4_reass+0x2c0>)
 801cc8e:	f001 fa7d 	bl	801e18c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801cc92:	4b06      	ldr	r3, [pc, #24]	@ (801ccac <ip4_reass+0x2b0>)
 801cc94:	881a      	ldrh	r2, [r3, #0]
 801cc96:	8c3b      	ldrh	r3, [r7, #32]
 801cc98:	1ad3      	subs	r3, r2, r3
 801cc9a:	b29a      	uxth	r2, r3
 801cc9c:	4b03      	ldr	r3, [pc, #12]	@ (801ccac <ip4_reass+0x2b0>)
 801cc9e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801cca0:	687b      	ldr	r3, [r7, #4]
 801cca2:	e038      	b.n	801cd16 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801cca4:	2300      	movs	r3, #0
 801cca6:	e036      	b.n	801cd16 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801cca8:	bf00      	nop
 801ccaa:	e00a      	b.n	801ccc2 <ip4_reass+0x2c6>
 801ccac:	2000cc28 	.word	0x2000cc28
 801ccb0:	2000cc24 	.word	0x2000cc24
 801ccb4:	08023960 	.word	0x08023960
 801ccb8:	08023ad0 	.word	0x08023ad0
 801ccbc:	080239a8 	.word	0x080239a8
    goto nullreturn_ipr;
 801ccc0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801ccc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ccc4:	2b00      	cmp	r3, #0
 801ccc6:	d106      	bne.n	801ccd6 <ip4_reass+0x2da>
 801ccc8:	4b15      	ldr	r3, [pc, #84]	@ (801cd20 <ip4_reass+0x324>)
 801ccca:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 801ccce:	4915      	ldr	r1, [pc, #84]	@ (801cd24 <ip4_reass+0x328>)
 801ccd0:	4815      	ldr	r0, [pc, #84]	@ (801cd28 <ip4_reass+0x32c>)
 801ccd2:	f001 fa5b 	bl	801e18c <iprintf>
  if (ipr->p == NULL) {
 801ccd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ccd8:	685b      	ldr	r3, [r3, #4]
 801ccda:	2b00      	cmp	r3, #0
 801ccdc:	d116      	bne.n	801cd0c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801ccde:	4b13      	ldr	r3, [pc, #76]	@ (801cd2c <ip4_reass+0x330>)
 801cce0:	681b      	ldr	r3, [r3, #0]
 801cce2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801cce4:	429a      	cmp	r2, r3
 801cce6:	d006      	beq.n	801ccf6 <ip4_reass+0x2fa>
 801cce8:	4b0d      	ldr	r3, [pc, #52]	@ (801cd20 <ip4_reass+0x324>)
 801ccea:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801ccee:	4910      	ldr	r1, [pc, #64]	@ (801cd30 <ip4_reass+0x334>)
 801ccf0:	480d      	ldr	r0, [pc, #52]	@ (801cd28 <ip4_reass+0x32c>)
 801ccf2:	f001 fa4b 	bl	801e18c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801ccf6:	2100      	movs	r1, #0
 801ccf8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801ccfa:	f7ff fce7 	bl	801c6cc <ip_reass_dequeue_datagram>
 801ccfe:	e006      	b.n	801cd0e <ip4_reass+0x312>
    goto nullreturn;
 801cd00:	bf00      	nop
 801cd02:	e004      	b.n	801cd0e <ip4_reass+0x312>
    goto nullreturn;
 801cd04:	bf00      	nop
 801cd06:	e002      	b.n	801cd0e <ip4_reass+0x312>
      goto nullreturn;
 801cd08:	bf00      	nop
 801cd0a:	e000      	b.n	801cd0e <ip4_reass+0x312>
  }

nullreturn:
 801cd0c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801cd0e:	6878      	ldr	r0, [r7, #4]
 801cd10:	f7f7 f984 	bl	801401c <pbuf_free>
  return NULL;
 801cd14:	2300      	movs	r3, #0
}
 801cd16:	4618      	mov	r0, r3
 801cd18:	3738      	adds	r7, #56	@ 0x38
 801cd1a:	46bd      	mov	sp, r7
 801cd1c:	bd80      	pop	{r7, pc}
 801cd1e:	bf00      	nop
 801cd20:	08023960 	.word	0x08023960
 801cd24:	08023aec 	.word	0x08023aec
 801cd28:	080239a8 	.word	0x080239a8
 801cd2c:	2000cc24 	.word	0x2000cc24
 801cd30:	08023af8 	.word	0x08023af8

0801cd34 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801cd34:	b580      	push	{r7, lr}
 801cd36:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801cd38:	2005      	movs	r0, #5
 801cd3a:	f7f6 fa87 	bl	801324c <memp_malloc>
 801cd3e:	4603      	mov	r3, r0
}
 801cd40:	4618      	mov	r0, r3
 801cd42:	bd80      	pop	{r7, pc}

0801cd44 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801cd44:	b580      	push	{r7, lr}
 801cd46:	b082      	sub	sp, #8
 801cd48:	af00      	add	r7, sp, #0
 801cd4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801cd4c:	687b      	ldr	r3, [r7, #4]
 801cd4e:	2b00      	cmp	r3, #0
 801cd50:	d106      	bne.n	801cd60 <ip_frag_free_pbuf_custom_ref+0x1c>
 801cd52:	4b07      	ldr	r3, [pc, #28]	@ (801cd70 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801cd54:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 801cd58:	4906      	ldr	r1, [pc, #24]	@ (801cd74 <ip_frag_free_pbuf_custom_ref+0x30>)
 801cd5a:	4807      	ldr	r0, [pc, #28]	@ (801cd78 <ip_frag_free_pbuf_custom_ref+0x34>)
 801cd5c:	f001 fa16 	bl	801e18c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801cd60:	6879      	ldr	r1, [r7, #4]
 801cd62:	2005      	movs	r0, #5
 801cd64:	f7f6 fae8 	bl	8013338 <memp_free>
}
 801cd68:	bf00      	nop
 801cd6a:	3708      	adds	r7, #8
 801cd6c:	46bd      	mov	sp, r7
 801cd6e:	bd80      	pop	{r7, pc}
 801cd70:	08023960 	.word	0x08023960
 801cd74:	08023b18 	.word	0x08023b18
 801cd78:	080239a8 	.word	0x080239a8

0801cd7c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801cd7c:	b580      	push	{r7, lr}
 801cd7e:	b084      	sub	sp, #16
 801cd80:	af00      	add	r7, sp, #0
 801cd82:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801cd84:	687b      	ldr	r3, [r7, #4]
 801cd86:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801cd88:	68fb      	ldr	r3, [r7, #12]
 801cd8a:	2b00      	cmp	r3, #0
 801cd8c:	d106      	bne.n	801cd9c <ipfrag_free_pbuf_custom+0x20>
 801cd8e:	4b11      	ldr	r3, [pc, #68]	@ (801cdd4 <ipfrag_free_pbuf_custom+0x58>)
 801cd90:	f240 22ce 	movw	r2, #718	@ 0x2ce
 801cd94:	4910      	ldr	r1, [pc, #64]	@ (801cdd8 <ipfrag_free_pbuf_custom+0x5c>)
 801cd96:	4811      	ldr	r0, [pc, #68]	@ (801cddc <ipfrag_free_pbuf_custom+0x60>)
 801cd98:	f001 f9f8 	bl	801e18c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801cd9c:	68fa      	ldr	r2, [r7, #12]
 801cd9e:	687b      	ldr	r3, [r7, #4]
 801cda0:	429a      	cmp	r2, r3
 801cda2:	d006      	beq.n	801cdb2 <ipfrag_free_pbuf_custom+0x36>
 801cda4:	4b0b      	ldr	r3, [pc, #44]	@ (801cdd4 <ipfrag_free_pbuf_custom+0x58>)
 801cda6:	f240 22cf 	movw	r2, #719	@ 0x2cf
 801cdaa:	490d      	ldr	r1, [pc, #52]	@ (801cde0 <ipfrag_free_pbuf_custom+0x64>)
 801cdac:	480b      	ldr	r0, [pc, #44]	@ (801cddc <ipfrag_free_pbuf_custom+0x60>)
 801cdae:	f001 f9ed 	bl	801e18c <iprintf>
  if (pcr->original != NULL) {
 801cdb2:	68fb      	ldr	r3, [r7, #12]
 801cdb4:	695b      	ldr	r3, [r3, #20]
 801cdb6:	2b00      	cmp	r3, #0
 801cdb8:	d004      	beq.n	801cdc4 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801cdba:	68fb      	ldr	r3, [r7, #12]
 801cdbc:	695b      	ldr	r3, [r3, #20]
 801cdbe:	4618      	mov	r0, r3
 801cdc0:	f7f7 f92c 	bl	801401c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801cdc4:	68f8      	ldr	r0, [r7, #12]
 801cdc6:	f7ff ffbd 	bl	801cd44 <ip_frag_free_pbuf_custom_ref>
}
 801cdca:	bf00      	nop
 801cdcc:	3710      	adds	r7, #16
 801cdce:	46bd      	mov	sp, r7
 801cdd0:	bd80      	pop	{r7, pc}
 801cdd2:	bf00      	nop
 801cdd4:	08023960 	.word	0x08023960
 801cdd8:	08023b24 	.word	0x08023b24
 801cddc:	080239a8 	.word	0x080239a8
 801cde0:	08023b30 	.word	0x08023b30

0801cde4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801cde4:	b580      	push	{r7, lr}
 801cde6:	b094      	sub	sp, #80	@ 0x50
 801cde8:	af02      	add	r7, sp, #8
 801cdea:	60f8      	str	r0, [r7, #12]
 801cdec:	60b9      	str	r1, [r7, #8]
 801cdee:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801cdf0:	2300      	movs	r3, #0
 801cdf2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801cdf6:	68bb      	ldr	r3, [r7, #8]
 801cdf8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801cdfa:	3b14      	subs	r3, #20
 801cdfc:	2b00      	cmp	r3, #0
 801cdfe:	da00      	bge.n	801ce02 <ip4_frag+0x1e>
 801ce00:	3307      	adds	r3, #7
 801ce02:	10db      	asrs	r3, r3, #3
 801ce04:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801ce06:	2314      	movs	r3, #20
 801ce08:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801ce0a:	68fb      	ldr	r3, [r7, #12]
 801ce0c:	685b      	ldr	r3, [r3, #4]
 801ce0e:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 801ce10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ce12:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801ce14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ce16:	781b      	ldrb	r3, [r3, #0]
 801ce18:	f003 030f 	and.w	r3, r3, #15
 801ce1c:	b2db      	uxtb	r3, r3
 801ce1e:	009b      	lsls	r3, r3, #2
 801ce20:	b2db      	uxtb	r3, r3
 801ce22:	2b14      	cmp	r3, #20
 801ce24:	d002      	beq.n	801ce2c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801ce26:	f06f 0305 	mvn.w	r3, #5
 801ce2a:	e110      	b.n	801d04e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801ce2c:	68fb      	ldr	r3, [r7, #12]
 801ce2e:	895b      	ldrh	r3, [r3, #10]
 801ce30:	2b13      	cmp	r3, #19
 801ce32:	d809      	bhi.n	801ce48 <ip4_frag+0x64>
 801ce34:	4b88      	ldr	r3, [pc, #544]	@ (801d058 <ip4_frag+0x274>)
 801ce36:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 801ce3a:	4988      	ldr	r1, [pc, #544]	@ (801d05c <ip4_frag+0x278>)
 801ce3c:	4888      	ldr	r0, [pc, #544]	@ (801d060 <ip4_frag+0x27c>)
 801ce3e:	f001 f9a5 	bl	801e18c <iprintf>
 801ce42:	f06f 0305 	mvn.w	r3, #5
 801ce46:	e102      	b.n	801d04e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801ce48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ce4a:	88db      	ldrh	r3, [r3, #6]
 801ce4c:	b29b      	uxth	r3, r3
 801ce4e:	4618      	mov	r0, r3
 801ce50:	f7f5 fd24 	bl	801289c <lwip_htons>
 801ce54:	4603      	mov	r3, r0
 801ce56:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 801ce58:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801ce5a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ce5e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801ce62:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801ce64:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801ce68:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801ce6a:	68fb      	ldr	r3, [r7, #12]
 801ce6c:	891b      	ldrh	r3, [r3, #8]
 801ce6e:	3b14      	subs	r3, #20
 801ce70:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 801ce74:	e0e1      	b.n	801d03a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801ce76:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801ce78:	00db      	lsls	r3, r3, #3
 801ce7a:	b29b      	uxth	r3, r3
 801ce7c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801ce80:	4293      	cmp	r3, r2
 801ce82:	bf28      	it	cs
 801ce84:	4613      	movcs	r3, r2
 801ce86:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801ce88:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801ce8c:	2114      	movs	r1, #20
 801ce8e:	200e      	movs	r0, #14
 801ce90:	f7f6 fde0 	bl	8013a54 <pbuf_alloc>
 801ce94:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 801ce96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ce98:	2b00      	cmp	r3, #0
 801ce9a:	f000 80d5 	beq.w	801d048 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801ce9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cea0:	895b      	ldrh	r3, [r3, #10]
 801cea2:	2b13      	cmp	r3, #19
 801cea4:	d806      	bhi.n	801ceb4 <ip4_frag+0xd0>
 801cea6:	4b6c      	ldr	r3, [pc, #432]	@ (801d058 <ip4_frag+0x274>)
 801cea8:	f44f 7249 	mov.w	r2, #804	@ 0x324
 801ceac:	496d      	ldr	r1, [pc, #436]	@ (801d064 <ip4_frag+0x280>)
 801ceae:	486c      	ldr	r0, [pc, #432]	@ (801d060 <ip4_frag+0x27c>)
 801ceb0:	f001 f96c 	bl	801e18c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801ceb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ceb6:	685b      	ldr	r3, [r3, #4]
 801ceb8:	2214      	movs	r2, #20
 801ceba:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801cebc:	4618      	mov	r0, r3
 801cebe:	f001 fb18 	bl	801e4f2 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801cec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cec4:	685b      	ldr	r3, [r3, #4]
 801cec6:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 801cec8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801ceca:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 801cece:	e064      	b.n	801cf9a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801ced0:	68fb      	ldr	r3, [r7, #12]
 801ced2:	895a      	ldrh	r2, [r3, #10]
 801ced4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801ced6:	1ad3      	subs	r3, r2, r3
 801ced8:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801ceda:	68fb      	ldr	r3, [r7, #12]
 801cedc:	895b      	ldrh	r3, [r3, #10]
 801cede:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801cee0:	429a      	cmp	r2, r3
 801cee2:	d906      	bls.n	801cef2 <ip4_frag+0x10e>
 801cee4:	4b5c      	ldr	r3, [pc, #368]	@ (801d058 <ip4_frag+0x274>)
 801cee6:	f240 322d 	movw	r2, #813	@ 0x32d
 801ceea:	495f      	ldr	r1, [pc, #380]	@ (801d068 <ip4_frag+0x284>)
 801ceec:	485c      	ldr	r0, [pc, #368]	@ (801d060 <ip4_frag+0x27c>)
 801ceee:	f001 f94d 	bl	801e18c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801cef2:	8bfa      	ldrh	r2, [r7, #30]
 801cef4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801cef8:	4293      	cmp	r3, r2
 801cefa:	bf28      	it	cs
 801cefc:	4613      	movcs	r3, r2
 801cefe:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801cf02:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801cf06:	2b00      	cmp	r3, #0
 801cf08:	d105      	bne.n	801cf16 <ip4_frag+0x132>
        poff = 0;
 801cf0a:	2300      	movs	r3, #0
 801cf0c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801cf0e:	68fb      	ldr	r3, [r7, #12]
 801cf10:	681b      	ldr	r3, [r3, #0]
 801cf12:	60fb      	str	r3, [r7, #12]
        continue;
 801cf14:	e041      	b.n	801cf9a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801cf16:	f7ff ff0d 	bl	801cd34 <ip_frag_alloc_pbuf_custom_ref>
 801cf1a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801cf1c:	69bb      	ldr	r3, [r7, #24]
 801cf1e:	2b00      	cmp	r3, #0
 801cf20:	d103      	bne.n	801cf2a <ip4_frag+0x146>
        pbuf_free(rambuf);
 801cf22:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801cf24:	f7f7 f87a 	bl	801401c <pbuf_free>
        goto memerr;
 801cf28:	e08f      	b.n	801d04a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801cf2a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801cf2c:	68fb      	ldr	r3, [r7, #12]
 801cf2e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801cf30:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801cf32:	4413      	add	r3, r2
 801cf34:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 801cf38:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801cf3c:	9201      	str	r2, [sp, #4]
 801cf3e:	9300      	str	r3, [sp, #0]
 801cf40:	4603      	mov	r3, r0
 801cf42:	2241      	movs	r2, #65	@ 0x41
 801cf44:	2000      	movs	r0, #0
 801cf46:	f7f6 feaf 	bl	8013ca8 <pbuf_alloced_custom>
 801cf4a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801cf4c:	697b      	ldr	r3, [r7, #20]
 801cf4e:	2b00      	cmp	r3, #0
 801cf50:	d106      	bne.n	801cf60 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801cf52:	69b8      	ldr	r0, [r7, #24]
 801cf54:	f7ff fef6 	bl	801cd44 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801cf58:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801cf5a:	f7f7 f85f 	bl	801401c <pbuf_free>
        goto memerr;
 801cf5e:	e074      	b.n	801d04a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801cf60:	68f8      	ldr	r0, [r7, #12]
 801cf62:	f7f7 f901 	bl	8014168 <pbuf_ref>
      pcr->original = p;
 801cf66:	69bb      	ldr	r3, [r7, #24]
 801cf68:	68fa      	ldr	r2, [r7, #12]
 801cf6a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801cf6c:	69bb      	ldr	r3, [r7, #24]
 801cf6e:	4a3f      	ldr	r2, [pc, #252]	@ (801d06c <ip4_frag+0x288>)
 801cf70:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801cf72:	6979      	ldr	r1, [r7, #20]
 801cf74:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801cf76:	f7f7 f91f 	bl	80141b8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801cf7a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801cf7e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801cf82:	1ad3      	subs	r3, r2, r3
 801cf84:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 801cf88:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801cf8c:	2b00      	cmp	r3, #0
 801cf8e:	d004      	beq.n	801cf9a <ip4_frag+0x1b6>
        poff = 0;
 801cf90:	2300      	movs	r3, #0
 801cf92:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801cf94:	68fb      	ldr	r3, [r7, #12]
 801cf96:	681b      	ldr	r3, [r3, #0]
 801cf98:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801cf9a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801cf9e:	2b00      	cmp	r3, #0
 801cfa0:	d196      	bne.n	801ced0 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801cfa2:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801cfa4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801cfa8:	4413      	add	r3, r2
 801cfaa:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801cfac:	68bb      	ldr	r3, [r7, #8]
 801cfae:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801cfb0:	f1a3 0213 	sub.w	r2, r3, #19
 801cfb4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801cfb8:	429a      	cmp	r2, r3
 801cfba:	bfcc      	ite	gt
 801cfbc:	2301      	movgt	r3, #1
 801cfbe:	2300      	movle	r3, #0
 801cfc0:	b2db      	uxtb	r3, r3
 801cfc2:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801cfc4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801cfc8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801cfcc:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 801cfce:	6a3b      	ldr	r3, [r7, #32]
 801cfd0:	2b00      	cmp	r3, #0
 801cfd2:	d002      	beq.n	801cfda <ip4_frag+0x1f6>
 801cfd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cfd6:	2b00      	cmp	r3, #0
 801cfd8:	d003      	beq.n	801cfe2 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801cfda:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801cfdc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801cfe0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801cfe2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801cfe4:	4618      	mov	r0, r3
 801cfe6:	f7f5 fc59 	bl	801289c <lwip_htons>
 801cfea:	4603      	mov	r3, r0
 801cfec:	461a      	mov	r2, r3
 801cfee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cff0:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801cff2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801cff4:	3314      	adds	r3, #20
 801cff6:	b29b      	uxth	r3, r3
 801cff8:	4618      	mov	r0, r3
 801cffa:	f7f5 fc4f 	bl	801289c <lwip_htons>
 801cffe:	4603      	mov	r3, r0
 801d000:	461a      	mov	r2, r3
 801d002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d004:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801d006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d008:	2200      	movs	r2, #0
 801d00a:	729a      	strb	r2, [r3, #10]
 801d00c:	2200      	movs	r2, #0
 801d00e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801d010:	68bb      	ldr	r3, [r7, #8]
 801d012:	695b      	ldr	r3, [r3, #20]
 801d014:	687a      	ldr	r2, [r7, #4]
 801d016:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801d018:	68b8      	ldr	r0, [r7, #8]
 801d01a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801d01c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801d01e:	f7f6 fffd 	bl	801401c <pbuf_free>
    left = (u16_t)(left - fragsize);
 801d022:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801d026:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801d028:	1ad3      	subs	r3, r2, r3
 801d02a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 801d02e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801d032:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801d034:	4413      	add	r3, r2
 801d036:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 801d03a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801d03e:	2b00      	cmp	r3, #0
 801d040:	f47f af19 	bne.w	801ce76 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801d044:	2300      	movs	r3, #0
 801d046:	e002      	b.n	801d04e <ip4_frag+0x26a>
      goto memerr;
 801d048:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801d04a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801d04e:	4618      	mov	r0, r3
 801d050:	3748      	adds	r7, #72	@ 0x48
 801d052:	46bd      	mov	sp, r7
 801d054:	bd80      	pop	{r7, pc}
 801d056:	bf00      	nop
 801d058:	08023960 	.word	0x08023960
 801d05c:	08023b3c 	.word	0x08023b3c
 801d060:	080239a8 	.word	0x080239a8
 801d064:	08023b58 	.word	0x08023b58
 801d068:	08023b78 	.word	0x08023b78
 801d06c:	0801cd7d 	.word	0x0801cd7d

0801d070 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801d070:	b580      	push	{r7, lr}
 801d072:	b086      	sub	sp, #24
 801d074:	af00      	add	r7, sp, #0
 801d076:	6078      	str	r0, [r7, #4]
 801d078:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801d07a:	230e      	movs	r3, #14
 801d07c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801d07e:	687b      	ldr	r3, [r7, #4]
 801d080:	895b      	ldrh	r3, [r3, #10]
 801d082:	2b0e      	cmp	r3, #14
 801d084:	d96e      	bls.n	801d164 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801d086:	687b      	ldr	r3, [r7, #4]
 801d088:	7bdb      	ldrb	r3, [r3, #15]
 801d08a:	2b00      	cmp	r3, #0
 801d08c:	d106      	bne.n	801d09c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801d08e:	683b      	ldr	r3, [r7, #0]
 801d090:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801d094:	3301      	adds	r3, #1
 801d096:	b2da      	uxtb	r2, r3
 801d098:	687b      	ldr	r3, [r7, #4]
 801d09a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801d09c:	687b      	ldr	r3, [r7, #4]
 801d09e:	685b      	ldr	r3, [r3, #4]
 801d0a0:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801d0a2:	693b      	ldr	r3, [r7, #16]
 801d0a4:	7b1a      	ldrb	r2, [r3, #12]
 801d0a6:	7b5b      	ldrb	r3, [r3, #13]
 801d0a8:	021b      	lsls	r3, r3, #8
 801d0aa:	4313      	orrs	r3, r2
 801d0ac:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801d0ae:	693b      	ldr	r3, [r7, #16]
 801d0b0:	781b      	ldrb	r3, [r3, #0]
 801d0b2:	f003 0301 	and.w	r3, r3, #1
 801d0b6:	2b00      	cmp	r3, #0
 801d0b8:	d023      	beq.n	801d102 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801d0ba:	693b      	ldr	r3, [r7, #16]
 801d0bc:	781b      	ldrb	r3, [r3, #0]
 801d0be:	2b01      	cmp	r3, #1
 801d0c0:	d10f      	bne.n	801d0e2 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801d0c2:	693b      	ldr	r3, [r7, #16]
 801d0c4:	785b      	ldrb	r3, [r3, #1]
 801d0c6:	2b00      	cmp	r3, #0
 801d0c8:	d11b      	bne.n	801d102 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801d0ca:	693b      	ldr	r3, [r7, #16]
 801d0cc:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801d0ce:	2b5e      	cmp	r3, #94	@ 0x5e
 801d0d0:	d117      	bne.n	801d102 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801d0d2:	687b      	ldr	r3, [r7, #4]
 801d0d4:	7b5b      	ldrb	r3, [r3, #13]
 801d0d6:	f043 0310 	orr.w	r3, r3, #16
 801d0da:	b2da      	uxtb	r2, r3
 801d0dc:	687b      	ldr	r3, [r7, #4]
 801d0de:	735a      	strb	r2, [r3, #13]
 801d0e0:	e00f      	b.n	801d102 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801d0e2:	693b      	ldr	r3, [r7, #16]
 801d0e4:	2206      	movs	r2, #6
 801d0e6:	4928      	ldr	r1, [pc, #160]	@ (801d188 <ethernet_input+0x118>)
 801d0e8:	4618      	mov	r0, r3
 801d0ea:	f001 f8da 	bl	801e2a2 <memcmp>
 801d0ee:	4603      	mov	r3, r0
 801d0f0:	2b00      	cmp	r3, #0
 801d0f2:	d106      	bne.n	801d102 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801d0f4:	687b      	ldr	r3, [r7, #4]
 801d0f6:	7b5b      	ldrb	r3, [r3, #13]
 801d0f8:	f043 0308 	orr.w	r3, r3, #8
 801d0fc:	b2da      	uxtb	r2, r3
 801d0fe:	687b      	ldr	r3, [r7, #4]
 801d100:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801d102:	89fb      	ldrh	r3, [r7, #14]
 801d104:	2b08      	cmp	r3, #8
 801d106:	d003      	beq.n	801d110 <ethernet_input+0xa0>
 801d108:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 801d10c:	d014      	beq.n	801d138 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801d10e:	e032      	b.n	801d176 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801d110:	683b      	ldr	r3, [r7, #0]
 801d112:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801d116:	f003 0308 	and.w	r3, r3, #8
 801d11a:	2b00      	cmp	r3, #0
 801d11c:	d024      	beq.n	801d168 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801d11e:	8afb      	ldrh	r3, [r7, #22]
 801d120:	4619      	mov	r1, r3
 801d122:	6878      	ldr	r0, [r7, #4]
 801d124:	f7f6 fef4 	bl	8013f10 <pbuf_remove_header>
 801d128:	4603      	mov	r3, r0
 801d12a:	2b00      	cmp	r3, #0
 801d12c:	d11e      	bne.n	801d16c <ethernet_input+0xfc>
        ip4_input(p, netif);
 801d12e:	6839      	ldr	r1, [r7, #0]
 801d130:	6878      	ldr	r0, [r7, #4]
 801d132:	f7fe fe91 	bl	801be58 <ip4_input>
      break;
 801d136:	e013      	b.n	801d160 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801d138:	683b      	ldr	r3, [r7, #0]
 801d13a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801d13e:	f003 0308 	and.w	r3, r3, #8
 801d142:	2b00      	cmp	r3, #0
 801d144:	d014      	beq.n	801d170 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801d146:	8afb      	ldrh	r3, [r7, #22]
 801d148:	4619      	mov	r1, r3
 801d14a:	6878      	ldr	r0, [r7, #4]
 801d14c:	f7f6 fee0 	bl	8013f10 <pbuf_remove_header>
 801d150:	4603      	mov	r3, r0
 801d152:	2b00      	cmp	r3, #0
 801d154:	d10e      	bne.n	801d174 <ethernet_input+0x104>
        etharp_input(p, netif);
 801d156:	6839      	ldr	r1, [r7, #0]
 801d158:	6878      	ldr	r0, [r7, #4]
 801d15a:	f7fe f833 	bl	801b1c4 <etharp_input>
      break;
 801d15e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801d160:	2300      	movs	r3, #0
 801d162:	e00c      	b.n	801d17e <ethernet_input+0x10e>
    goto free_and_return;
 801d164:	bf00      	nop
 801d166:	e006      	b.n	801d176 <ethernet_input+0x106>
        goto free_and_return;
 801d168:	bf00      	nop
 801d16a:	e004      	b.n	801d176 <ethernet_input+0x106>
        goto free_and_return;
 801d16c:	bf00      	nop
 801d16e:	e002      	b.n	801d176 <ethernet_input+0x106>
        goto free_and_return;
 801d170:	bf00      	nop
 801d172:	e000      	b.n	801d176 <ethernet_input+0x106>
        goto free_and_return;
 801d174:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801d176:	6878      	ldr	r0, [r7, #4]
 801d178:	f7f6 ff50 	bl	801401c <pbuf_free>
  return ERR_OK;
 801d17c:	2300      	movs	r3, #0
}
 801d17e:	4618      	mov	r0, r3
 801d180:	3718      	adds	r7, #24
 801d182:	46bd      	mov	sp, r7
 801d184:	bd80      	pop	{r7, pc}
 801d186:	bf00      	nop
 801d188:	08023da4 	.word	0x08023da4

0801d18c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801d18c:	b580      	push	{r7, lr}
 801d18e:	b086      	sub	sp, #24
 801d190:	af00      	add	r7, sp, #0
 801d192:	60f8      	str	r0, [r7, #12]
 801d194:	60b9      	str	r1, [r7, #8]
 801d196:	607a      	str	r2, [r7, #4]
 801d198:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801d19a:	8c3b      	ldrh	r3, [r7, #32]
 801d19c:	4618      	mov	r0, r3
 801d19e:	f7f5 fb7d 	bl	801289c <lwip_htons>
 801d1a2:	4603      	mov	r3, r0
 801d1a4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801d1a6:	210e      	movs	r1, #14
 801d1a8:	68b8      	ldr	r0, [r7, #8]
 801d1aa:	f7f6 fea1 	bl	8013ef0 <pbuf_add_header>
 801d1ae:	4603      	mov	r3, r0
 801d1b0:	2b00      	cmp	r3, #0
 801d1b2:	d125      	bne.n	801d200 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801d1b4:	68bb      	ldr	r3, [r7, #8]
 801d1b6:	685b      	ldr	r3, [r3, #4]
 801d1b8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801d1ba:	693b      	ldr	r3, [r7, #16]
 801d1bc:	8afa      	ldrh	r2, [r7, #22]
 801d1be:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801d1c0:	693b      	ldr	r3, [r7, #16]
 801d1c2:	2206      	movs	r2, #6
 801d1c4:	6839      	ldr	r1, [r7, #0]
 801d1c6:	4618      	mov	r0, r3
 801d1c8:	f001 f993 	bl	801e4f2 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801d1cc:	693b      	ldr	r3, [r7, #16]
 801d1ce:	3306      	adds	r3, #6
 801d1d0:	2206      	movs	r2, #6
 801d1d2:	6879      	ldr	r1, [r7, #4]
 801d1d4:	4618      	mov	r0, r3
 801d1d6:	f001 f98c 	bl	801e4f2 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801d1da:	68fb      	ldr	r3, [r7, #12]
 801d1dc:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801d1e0:	2b06      	cmp	r3, #6
 801d1e2:	d006      	beq.n	801d1f2 <ethernet_output+0x66>
 801d1e4:	4b0a      	ldr	r3, [pc, #40]	@ (801d210 <ethernet_output+0x84>)
 801d1e6:	f44f 7299 	mov.w	r2, #306	@ 0x132
 801d1ea:	490a      	ldr	r1, [pc, #40]	@ (801d214 <ethernet_output+0x88>)
 801d1ec:	480a      	ldr	r0, [pc, #40]	@ (801d218 <ethernet_output+0x8c>)
 801d1ee:	f000 ffcd 	bl	801e18c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801d1f2:	68fb      	ldr	r3, [r7, #12]
 801d1f4:	699b      	ldr	r3, [r3, #24]
 801d1f6:	68b9      	ldr	r1, [r7, #8]
 801d1f8:	68f8      	ldr	r0, [r7, #12]
 801d1fa:	4798      	blx	r3
 801d1fc:	4603      	mov	r3, r0
 801d1fe:	e002      	b.n	801d206 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801d200:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801d202:	f06f 0301 	mvn.w	r3, #1
}
 801d206:	4618      	mov	r0, r3
 801d208:	3718      	adds	r7, #24
 801d20a:	46bd      	mov	sp, r7
 801d20c:	bd80      	pop	{r7, pc}
 801d20e:	bf00      	nop
 801d210:	08023b88 	.word	0x08023b88
 801d214:	08023bc0 	.word	0x08023bc0
 801d218:	08023bf4 	.word	0x08023bf4

0801d21c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801d21c:	b580      	push	{r7, lr}
 801d21e:	b086      	sub	sp, #24
 801d220:	af00      	add	r7, sp, #0
 801d222:	6078      	str	r0, [r7, #4]
 801d224:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801d226:	683b      	ldr	r3, [r7, #0]
 801d228:	60bb      	str	r3, [r7, #8]
 801d22a:	2304      	movs	r3, #4
 801d22c:	60fb      	str	r3, [r7, #12]
 801d22e:	2300      	movs	r3, #0
 801d230:	613b      	str	r3, [r7, #16]
 801d232:	2300      	movs	r3, #0
 801d234:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801d236:	f107 0308 	add.w	r3, r7, #8
 801d23a:	2100      	movs	r1, #0
 801d23c:	4618      	mov	r0, r3
 801d23e:	f7f2 fc15 	bl	800fa6c <osMessageCreate>
 801d242:	4602      	mov	r2, r0
 801d244:	687b      	ldr	r3, [r7, #4]
 801d246:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801d248:	687b      	ldr	r3, [r7, #4]
 801d24a:	681b      	ldr	r3, [r3, #0]
 801d24c:	2b00      	cmp	r3, #0
 801d24e:	d102      	bne.n	801d256 <sys_mbox_new+0x3a>
    return ERR_MEM;
 801d250:	f04f 33ff 	mov.w	r3, #4294967295
 801d254:	e000      	b.n	801d258 <sys_mbox_new+0x3c>

  return ERR_OK;
 801d256:	2300      	movs	r3, #0
}
 801d258:	4618      	mov	r0, r3
 801d25a:	3718      	adds	r7, #24
 801d25c:	46bd      	mov	sp, r7
 801d25e:	bd80      	pop	{r7, pc}

0801d260 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801d260:	b580      	push	{r7, lr}
 801d262:	b084      	sub	sp, #16
 801d264:	af00      	add	r7, sp, #0
 801d266:	6078      	str	r0, [r7, #4]
 801d268:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801d26a:	687b      	ldr	r3, [r7, #4]
 801d26c:	681b      	ldr	r3, [r3, #0]
 801d26e:	6839      	ldr	r1, [r7, #0]
 801d270:	2200      	movs	r2, #0
 801d272:	4618      	mov	r0, r3
 801d274:	f7f2 fc22 	bl	800fabc <osMessagePut>
 801d278:	4603      	mov	r3, r0
 801d27a:	2b00      	cmp	r3, #0
 801d27c:	d102      	bne.n	801d284 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801d27e:	2300      	movs	r3, #0
 801d280:	73fb      	strb	r3, [r7, #15]
 801d282:	e001      	b.n	801d288 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801d284:	23ff      	movs	r3, #255	@ 0xff
 801d286:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801d288:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801d28c:	4618      	mov	r0, r3
 801d28e:	3710      	adds	r7, #16
 801d290:	46bd      	mov	sp, r7
 801d292:	bd80      	pop	{r7, pc}

0801d294 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801d294:	b580      	push	{r7, lr}
 801d296:	b08c      	sub	sp, #48	@ 0x30
 801d298:	af00      	add	r7, sp, #0
 801d29a:	61f8      	str	r0, [r7, #28]
 801d29c:	61b9      	str	r1, [r7, #24]
 801d29e:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 801d2a0:	f7f2 fa22 	bl	800f6e8 <osKernelSysTick>
 801d2a4:	62f8      	str	r0, [r7, #44]	@ 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801d2a6:	697b      	ldr	r3, [r7, #20]
 801d2a8:	2b00      	cmp	r3, #0
 801d2aa:	d017      	beq.n	801d2dc <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 801d2ac:	69fb      	ldr	r3, [r7, #28]
 801d2ae:	6819      	ldr	r1, [r3, #0]
 801d2b0:	f107 0320 	add.w	r3, r7, #32
 801d2b4:	697a      	ldr	r2, [r7, #20]
 801d2b6:	4618      	mov	r0, r3
 801d2b8:	f7f2 fc40 	bl	800fb3c <osMessageGet>

    if(event.status == osEventMessage)
 801d2bc:	6a3b      	ldr	r3, [r7, #32]
 801d2be:	2b10      	cmp	r3, #16
 801d2c0:	d109      	bne.n	801d2d6 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801d2c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d2c4:	461a      	mov	r2, r3
 801d2c6:	69bb      	ldr	r3, [r7, #24]
 801d2c8:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801d2ca:	f7f2 fa0d 	bl	800f6e8 <osKernelSysTick>
 801d2ce:	4602      	mov	r2, r0
 801d2d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d2d2:	1ad3      	subs	r3, r2, r3
 801d2d4:	e019      	b.n	801d30a <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801d2d6:	f04f 33ff 	mov.w	r3, #4294967295
 801d2da:	e016      	b.n	801d30a <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801d2dc:	69fb      	ldr	r3, [r7, #28]
 801d2de:	6819      	ldr	r1, [r3, #0]
 801d2e0:	463b      	mov	r3, r7
 801d2e2:	f04f 32ff 	mov.w	r2, #4294967295
 801d2e6:	4618      	mov	r0, r3
 801d2e8:	f7f2 fc28 	bl	800fb3c <osMessageGet>
 801d2ec:	f107 0320 	add.w	r3, r7, #32
 801d2f0:	463a      	mov	r2, r7
 801d2f2:	ca07      	ldmia	r2, {r0, r1, r2}
 801d2f4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801d2f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d2fa:	461a      	mov	r2, r3
 801d2fc:	69bb      	ldr	r3, [r7, #24]
 801d2fe:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801d300:	f7f2 f9f2 	bl	800f6e8 <osKernelSysTick>
 801d304:	4602      	mov	r2, r0
 801d306:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d308:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801d30a:	4618      	mov	r0, r3
 801d30c:	3730      	adds	r7, #48	@ 0x30
 801d30e:	46bd      	mov	sp, r7
 801d310:	bd80      	pop	{r7, pc}

0801d312 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801d312:	b480      	push	{r7}
 801d314:	b083      	sub	sp, #12
 801d316:	af00      	add	r7, sp, #0
 801d318:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801d31a:	687b      	ldr	r3, [r7, #4]
 801d31c:	681b      	ldr	r3, [r3, #0]
 801d31e:	2b00      	cmp	r3, #0
 801d320:	d101      	bne.n	801d326 <sys_mbox_valid+0x14>
    return 0;
 801d322:	2300      	movs	r3, #0
 801d324:	e000      	b.n	801d328 <sys_mbox_valid+0x16>
  else
    return 1;
 801d326:	2301      	movs	r3, #1
}
 801d328:	4618      	mov	r0, r3
 801d32a:	370c      	adds	r7, #12
 801d32c:	46bd      	mov	sp, r7
 801d32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d332:	4770      	bx	lr

0801d334 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801d334:	b580      	push	{r7, lr}
 801d336:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801d338:	4803      	ldr	r0, [pc, #12]	@ (801d348 <sys_init+0x14>)
 801d33a:	f7f2 fa45 	bl	800f7c8 <osMutexCreate>
 801d33e:	4603      	mov	r3, r0
 801d340:	4a02      	ldr	r2, [pc, #8]	@ (801d34c <sys_init+0x18>)
 801d342:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801d344:	bf00      	nop
 801d346:	bd80      	pop	{r7, pc}
 801d348:	08023db4 	.word	0x08023db4
 801d34c:	2000cc2c 	.word	0x2000cc2c

0801d350 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801d350:	b580      	push	{r7, lr}
 801d352:	b084      	sub	sp, #16
 801d354:	af00      	add	r7, sp, #0
 801d356:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801d358:	2300      	movs	r3, #0
 801d35a:	60bb      	str	r3, [r7, #8]
 801d35c:	2300      	movs	r3, #0
 801d35e:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 801d360:	f107 0308 	add.w	r3, r7, #8
 801d364:	4618      	mov	r0, r3
 801d366:	f7f2 fa2f 	bl	800f7c8 <osMutexCreate>
 801d36a:	4602      	mov	r2, r0
 801d36c:	687b      	ldr	r3, [r7, #4]
 801d36e:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 801d370:	687b      	ldr	r3, [r7, #4]
 801d372:	681b      	ldr	r3, [r3, #0]
 801d374:	2b00      	cmp	r3, #0
 801d376:	d102      	bne.n	801d37e <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801d378:	f04f 33ff 	mov.w	r3, #4294967295
 801d37c:	e000      	b.n	801d380 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801d37e:	2300      	movs	r3, #0
}
 801d380:	4618      	mov	r0, r3
 801d382:	3710      	adds	r7, #16
 801d384:	46bd      	mov	sp, r7
 801d386:	bd80      	pop	{r7, pc}

0801d388 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801d388:	b580      	push	{r7, lr}
 801d38a:	b082      	sub	sp, #8
 801d38c:	af00      	add	r7, sp, #0
 801d38e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801d390:	687b      	ldr	r3, [r7, #4]
 801d392:	681b      	ldr	r3, [r3, #0]
 801d394:	f04f 31ff 	mov.w	r1, #4294967295
 801d398:	4618      	mov	r0, r3
 801d39a:	f7f2 fa2d 	bl	800f7f8 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801d39e:	bf00      	nop
 801d3a0:	3708      	adds	r7, #8
 801d3a2:	46bd      	mov	sp, r7
 801d3a4:	bd80      	pop	{r7, pc}

0801d3a6 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801d3a6:	b580      	push	{r7, lr}
 801d3a8:	b082      	sub	sp, #8
 801d3aa:	af00      	add	r7, sp, #0
 801d3ac:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801d3ae:	687b      	ldr	r3, [r7, #4]
 801d3b0:	681b      	ldr	r3, [r3, #0]
 801d3b2:	4618      	mov	r0, r3
 801d3b4:	f7f2 fa6e 	bl	800f894 <osMutexRelease>
}
 801d3b8:	bf00      	nop
 801d3ba:	3708      	adds	r7, #8
 801d3bc:	46bd      	mov	sp, r7
 801d3be:	bd80      	pop	{r7, pc}

0801d3c0 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801d3c0:	b580      	push	{r7, lr}
 801d3c2:	b08c      	sub	sp, #48	@ 0x30
 801d3c4:	af00      	add	r7, sp, #0
 801d3c6:	60f8      	str	r0, [r7, #12]
 801d3c8:	60b9      	str	r1, [r7, #8]
 801d3ca:	607a      	str	r2, [r7, #4]
 801d3cc:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801d3ce:	f107 0314 	add.w	r3, r7, #20
 801d3d2:	2200      	movs	r2, #0
 801d3d4:	601a      	str	r2, [r3, #0]
 801d3d6:	605a      	str	r2, [r3, #4]
 801d3d8:	609a      	str	r2, [r3, #8]
 801d3da:	60da      	str	r2, [r3, #12]
 801d3dc:	611a      	str	r2, [r3, #16]
 801d3de:	615a      	str	r2, [r3, #20]
 801d3e0:	619a      	str	r2, [r3, #24]
 801d3e2:	68fb      	ldr	r3, [r7, #12]
 801d3e4:	617b      	str	r3, [r7, #20]
 801d3e6:	68bb      	ldr	r3, [r7, #8]
 801d3e8:	61bb      	str	r3, [r7, #24]
 801d3ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d3ec:	b21b      	sxth	r3, r3
 801d3ee:	83bb      	strh	r3, [r7, #28]
 801d3f0:	683b      	ldr	r3, [r7, #0]
 801d3f2:	627b      	str	r3, [r7, #36]	@ 0x24
  return osThreadCreate(&os_thread_def, arg);
 801d3f4:	f107 0314 	add.w	r3, r7, #20
 801d3f8:	6879      	ldr	r1, [r7, #4]
 801d3fa:	4618      	mov	r0, r3
 801d3fc:	f7f2 f984 	bl	800f708 <osThreadCreate>
 801d400:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801d402:	4618      	mov	r0, r3
 801d404:	3730      	adds	r7, #48	@ 0x30
 801d406:	46bd      	mov	sp, r7
 801d408:	bd80      	pop	{r7, pc}
	...

0801d40c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801d40c:	b580      	push	{r7, lr}
 801d40e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801d410:	4b04      	ldr	r3, [pc, #16]	@ (801d424 <sys_arch_protect+0x18>)
 801d412:	681b      	ldr	r3, [r3, #0]
 801d414:	f04f 31ff 	mov.w	r1, #4294967295
 801d418:	4618      	mov	r0, r3
 801d41a:	f7f2 f9ed 	bl	800f7f8 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801d41e:	2301      	movs	r3, #1
}
 801d420:	4618      	mov	r0, r3
 801d422:	bd80      	pop	{r7, pc}
 801d424:	2000cc2c 	.word	0x2000cc2c

0801d428 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801d428:	b580      	push	{r7, lr}
 801d42a:	b082      	sub	sp, #8
 801d42c:	af00      	add	r7, sp, #0
 801d42e:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801d430:	4b04      	ldr	r3, [pc, #16]	@ (801d444 <sys_arch_unprotect+0x1c>)
 801d432:	681b      	ldr	r3, [r3, #0]
 801d434:	4618      	mov	r0, r3
 801d436:	f7f2 fa2d 	bl	800f894 <osMutexRelease>
}
 801d43a:	bf00      	nop
 801d43c:	3708      	adds	r7, #8
 801d43e:	46bd      	mov	sp, r7
 801d440:	bd80      	pop	{r7, pc}
 801d442:	bf00      	nop
 801d444:	2000cc2c 	.word	0x2000cc2c

0801d448 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801d448:	b580      	push	{r7, lr}
 801d44a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801d44c:	2200      	movs	r2, #0
 801d44e:	4912      	ldr	r1, [pc, #72]	@ (801d498 <MX_USB_DEVICE_Init+0x50>)
 801d450:	4812      	ldr	r0, [pc, #72]	@ (801d49c <MX_USB_DEVICE_Init+0x54>)
 801d452:	f7f0 fdf9 	bl	800e048 <USBD_Init>
 801d456:	4603      	mov	r3, r0
 801d458:	2b00      	cmp	r3, #0
 801d45a:	d001      	beq.n	801d460 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801d45c:	f7e4 fdee 	bl	800203c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801d460:	490f      	ldr	r1, [pc, #60]	@ (801d4a0 <MX_USB_DEVICE_Init+0x58>)
 801d462:	480e      	ldr	r0, [pc, #56]	@ (801d49c <MX_USB_DEVICE_Init+0x54>)
 801d464:	f7f0 fe20 	bl	800e0a8 <USBD_RegisterClass>
 801d468:	4603      	mov	r3, r0
 801d46a:	2b00      	cmp	r3, #0
 801d46c:	d001      	beq.n	801d472 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801d46e:	f7e4 fde5 	bl	800203c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801d472:	490c      	ldr	r1, [pc, #48]	@ (801d4a4 <MX_USB_DEVICE_Init+0x5c>)
 801d474:	4809      	ldr	r0, [pc, #36]	@ (801d49c <MX_USB_DEVICE_Init+0x54>)
 801d476:	f7f0 fd17 	bl	800dea8 <USBD_CDC_RegisterInterface>
 801d47a:	4603      	mov	r3, r0
 801d47c:	2b00      	cmp	r3, #0
 801d47e:	d001      	beq.n	801d484 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801d480:	f7e4 fddc 	bl	800203c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801d484:	4805      	ldr	r0, [pc, #20]	@ (801d49c <MX_USB_DEVICE_Init+0x54>)
 801d486:	f7f0 fe45 	bl	800e114 <USBD_Start>
 801d48a:	4603      	mov	r3, r0
 801d48c:	2b00      	cmp	r3, #0
 801d48e:	d001      	beq.n	801d494 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801d490:	f7e4 fdd4 	bl	800203c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801d494:	bf00      	nop
 801d496:	bd80      	pop	{r7, pc}
 801d498:	200000c4 	.word	0x200000c4
 801d49c:	2000cc30 	.word	0x2000cc30
 801d4a0:	20000020 	.word	0x20000020
 801d4a4:	200000b0 	.word	0x200000b0

0801d4a8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801d4a8:	b580      	push	{r7, lr}
 801d4aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801d4ac:	2200      	movs	r2, #0
 801d4ae:	4905      	ldr	r1, [pc, #20]	@ (801d4c4 <CDC_Init_FS+0x1c>)
 801d4b0:	4805      	ldr	r0, [pc, #20]	@ (801d4c8 <CDC_Init_FS+0x20>)
 801d4b2:	f7f0 fd13 	bl	800dedc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801d4b6:	4905      	ldr	r1, [pc, #20]	@ (801d4cc <CDC_Init_FS+0x24>)
 801d4b8:	4803      	ldr	r0, [pc, #12]	@ (801d4c8 <CDC_Init_FS+0x20>)
 801d4ba:	f7f0 fd31 	bl	800df20 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801d4be:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801d4c0:	4618      	mov	r0, r3
 801d4c2:	bd80      	pop	{r7, pc}
 801d4c4:	2000d70c 	.word	0x2000d70c
 801d4c8:	2000cc30 	.word	0x2000cc30
 801d4cc:	2000cf0c 	.word	0x2000cf0c

0801d4d0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801d4d0:	b480      	push	{r7}
 801d4d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801d4d4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801d4d6:	4618      	mov	r0, r3
 801d4d8:	46bd      	mov	sp, r7
 801d4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d4de:	4770      	bx	lr

0801d4e0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801d4e0:	b480      	push	{r7}
 801d4e2:	b083      	sub	sp, #12
 801d4e4:	af00      	add	r7, sp, #0
 801d4e6:	4603      	mov	r3, r0
 801d4e8:	6039      	str	r1, [r7, #0]
 801d4ea:	71fb      	strb	r3, [r7, #7]
 801d4ec:	4613      	mov	r3, r2
 801d4ee:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801d4f0:	79fb      	ldrb	r3, [r7, #7]
 801d4f2:	2b23      	cmp	r3, #35	@ 0x23
 801d4f4:	d84a      	bhi.n	801d58c <CDC_Control_FS+0xac>
 801d4f6:	a201      	add	r2, pc, #4	@ (adr r2, 801d4fc <CDC_Control_FS+0x1c>)
 801d4f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d4fc:	0801d58d 	.word	0x0801d58d
 801d500:	0801d58d 	.word	0x0801d58d
 801d504:	0801d58d 	.word	0x0801d58d
 801d508:	0801d58d 	.word	0x0801d58d
 801d50c:	0801d58d 	.word	0x0801d58d
 801d510:	0801d58d 	.word	0x0801d58d
 801d514:	0801d58d 	.word	0x0801d58d
 801d518:	0801d58d 	.word	0x0801d58d
 801d51c:	0801d58d 	.word	0x0801d58d
 801d520:	0801d58d 	.word	0x0801d58d
 801d524:	0801d58d 	.word	0x0801d58d
 801d528:	0801d58d 	.word	0x0801d58d
 801d52c:	0801d58d 	.word	0x0801d58d
 801d530:	0801d58d 	.word	0x0801d58d
 801d534:	0801d58d 	.word	0x0801d58d
 801d538:	0801d58d 	.word	0x0801d58d
 801d53c:	0801d58d 	.word	0x0801d58d
 801d540:	0801d58d 	.word	0x0801d58d
 801d544:	0801d58d 	.word	0x0801d58d
 801d548:	0801d58d 	.word	0x0801d58d
 801d54c:	0801d58d 	.word	0x0801d58d
 801d550:	0801d58d 	.word	0x0801d58d
 801d554:	0801d58d 	.word	0x0801d58d
 801d558:	0801d58d 	.word	0x0801d58d
 801d55c:	0801d58d 	.word	0x0801d58d
 801d560:	0801d58d 	.word	0x0801d58d
 801d564:	0801d58d 	.word	0x0801d58d
 801d568:	0801d58d 	.word	0x0801d58d
 801d56c:	0801d58d 	.word	0x0801d58d
 801d570:	0801d58d 	.word	0x0801d58d
 801d574:	0801d58d 	.word	0x0801d58d
 801d578:	0801d58d 	.word	0x0801d58d
 801d57c:	0801d58d 	.word	0x0801d58d
 801d580:	0801d58d 	.word	0x0801d58d
 801d584:	0801d58d 	.word	0x0801d58d
 801d588:	0801d58d 	.word	0x0801d58d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801d58c:	bf00      	nop
  }

  return (USBD_OK);
 801d58e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801d590:	4618      	mov	r0, r3
 801d592:	370c      	adds	r7, #12
 801d594:	46bd      	mov	sp, r7
 801d596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d59a:	4770      	bx	lr

0801d59c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801d59c:	b580      	push	{r7, lr}
 801d59e:	b082      	sub	sp, #8
 801d5a0:	af00      	add	r7, sp, #0
 801d5a2:	6078      	str	r0, [r7, #4]
 801d5a4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801d5a6:	6879      	ldr	r1, [r7, #4]
 801d5a8:	4805      	ldr	r0, [pc, #20]	@ (801d5c0 <CDC_Receive_FS+0x24>)
 801d5aa:	f7f0 fcb9 	bl	800df20 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801d5ae:	4804      	ldr	r0, [pc, #16]	@ (801d5c0 <CDC_Receive_FS+0x24>)
 801d5b0:	f7f0 fd14 	bl	800dfdc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801d5b4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801d5b6:	4618      	mov	r0, r3
 801d5b8:	3708      	adds	r7, #8
 801d5ba:	46bd      	mov	sp, r7
 801d5bc:	bd80      	pop	{r7, pc}
 801d5be:	bf00      	nop
 801d5c0:	2000cc30 	.word	0x2000cc30

0801d5c4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801d5c4:	b580      	push	{r7, lr}
 801d5c6:	b084      	sub	sp, #16
 801d5c8:	af00      	add	r7, sp, #0
 801d5ca:	6078      	str	r0, [r7, #4]
 801d5cc:	460b      	mov	r3, r1
 801d5ce:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801d5d0:	2300      	movs	r3, #0
 801d5d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801d5d4:	4b0d      	ldr	r3, [pc, #52]	@ (801d60c <CDC_Transmit_FS+0x48>)
 801d5d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801d5da:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801d5dc:	68bb      	ldr	r3, [r7, #8]
 801d5de:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 801d5e2:	2b00      	cmp	r3, #0
 801d5e4:	d001      	beq.n	801d5ea <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801d5e6:	2301      	movs	r3, #1
 801d5e8:	e00b      	b.n	801d602 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801d5ea:	887b      	ldrh	r3, [r7, #2]
 801d5ec:	461a      	mov	r2, r3
 801d5ee:	6879      	ldr	r1, [r7, #4]
 801d5f0:	4806      	ldr	r0, [pc, #24]	@ (801d60c <CDC_Transmit_FS+0x48>)
 801d5f2:	f7f0 fc73 	bl	800dedc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801d5f6:	4805      	ldr	r0, [pc, #20]	@ (801d60c <CDC_Transmit_FS+0x48>)
 801d5f8:	f7f0 fcb0 	bl	800df5c <USBD_CDC_TransmitPacket>
 801d5fc:	4603      	mov	r3, r0
 801d5fe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 801d600:	7bfb      	ldrb	r3, [r7, #15]
}
 801d602:	4618      	mov	r0, r3
 801d604:	3710      	adds	r7, #16
 801d606:	46bd      	mov	sp, r7
 801d608:	bd80      	pop	{r7, pc}
 801d60a:	bf00      	nop
 801d60c:	2000cc30 	.word	0x2000cc30

0801d610 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801d610:	b480      	push	{r7}
 801d612:	b087      	sub	sp, #28
 801d614:	af00      	add	r7, sp, #0
 801d616:	60f8      	str	r0, [r7, #12]
 801d618:	60b9      	str	r1, [r7, #8]
 801d61a:	4613      	mov	r3, r2
 801d61c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801d61e:	2300      	movs	r3, #0
 801d620:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801d622:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801d626:	4618      	mov	r0, r3
 801d628:	371c      	adds	r7, #28
 801d62a:	46bd      	mov	sp, r7
 801d62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d630:	4770      	bx	lr
	...

0801d634 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d634:	b480      	push	{r7}
 801d636:	b083      	sub	sp, #12
 801d638:	af00      	add	r7, sp, #0
 801d63a:	4603      	mov	r3, r0
 801d63c:	6039      	str	r1, [r7, #0]
 801d63e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801d640:	683b      	ldr	r3, [r7, #0]
 801d642:	2212      	movs	r2, #18
 801d644:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801d646:	4b03      	ldr	r3, [pc, #12]	@ (801d654 <USBD_FS_DeviceDescriptor+0x20>)
}
 801d648:	4618      	mov	r0, r3
 801d64a:	370c      	adds	r7, #12
 801d64c:	46bd      	mov	sp, r7
 801d64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d652:	4770      	bx	lr
 801d654:	200000e0 	.word	0x200000e0

0801d658 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d658:	b480      	push	{r7}
 801d65a:	b083      	sub	sp, #12
 801d65c:	af00      	add	r7, sp, #0
 801d65e:	4603      	mov	r3, r0
 801d660:	6039      	str	r1, [r7, #0]
 801d662:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801d664:	683b      	ldr	r3, [r7, #0]
 801d666:	2204      	movs	r2, #4
 801d668:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801d66a:	4b03      	ldr	r3, [pc, #12]	@ (801d678 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801d66c:	4618      	mov	r0, r3
 801d66e:	370c      	adds	r7, #12
 801d670:	46bd      	mov	sp, r7
 801d672:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d676:	4770      	bx	lr
 801d678:	200000f4 	.word	0x200000f4

0801d67c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d67c:	b580      	push	{r7, lr}
 801d67e:	b082      	sub	sp, #8
 801d680:	af00      	add	r7, sp, #0
 801d682:	4603      	mov	r3, r0
 801d684:	6039      	str	r1, [r7, #0]
 801d686:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801d688:	79fb      	ldrb	r3, [r7, #7]
 801d68a:	2b00      	cmp	r3, #0
 801d68c:	d105      	bne.n	801d69a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801d68e:	683a      	ldr	r2, [r7, #0]
 801d690:	4907      	ldr	r1, [pc, #28]	@ (801d6b0 <USBD_FS_ProductStrDescriptor+0x34>)
 801d692:	4808      	ldr	r0, [pc, #32]	@ (801d6b4 <USBD_FS_ProductStrDescriptor+0x38>)
 801d694:	f7f1 ff04 	bl	800f4a0 <USBD_GetString>
 801d698:	e004      	b.n	801d6a4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801d69a:	683a      	ldr	r2, [r7, #0]
 801d69c:	4904      	ldr	r1, [pc, #16]	@ (801d6b0 <USBD_FS_ProductStrDescriptor+0x34>)
 801d69e:	4805      	ldr	r0, [pc, #20]	@ (801d6b4 <USBD_FS_ProductStrDescriptor+0x38>)
 801d6a0:	f7f1 fefe 	bl	800f4a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 801d6a4:	4b02      	ldr	r3, [pc, #8]	@ (801d6b0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801d6a6:	4618      	mov	r0, r3
 801d6a8:	3708      	adds	r7, #8
 801d6aa:	46bd      	mov	sp, r7
 801d6ac:	bd80      	pop	{r7, pc}
 801d6ae:	bf00      	nop
 801d6b0:	2000df0c 	.word	0x2000df0c
 801d6b4:	08023c1c 	.word	0x08023c1c

0801d6b8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d6b8:	b580      	push	{r7, lr}
 801d6ba:	b082      	sub	sp, #8
 801d6bc:	af00      	add	r7, sp, #0
 801d6be:	4603      	mov	r3, r0
 801d6c0:	6039      	str	r1, [r7, #0]
 801d6c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801d6c4:	683a      	ldr	r2, [r7, #0]
 801d6c6:	4904      	ldr	r1, [pc, #16]	@ (801d6d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801d6c8:	4804      	ldr	r0, [pc, #16]	@ (801d6dc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801d6ca:	f7f1 fee9 	bl	800f4a0 <USBD_GetString>
  return USBD_StrDesc;
 801d6ce:	4b02      	ldr	r3, [pc, #8]	@ (801d6d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801d6d0:	4618      	mov	r0, r3
 801d6d2:	3708      	adds	r7, #8
 801d6d4:	46bd      	mov	sp, r7
 801d6d6:	bd80      	pop	{r7, pc}
 801d6d8:	2000df0c 	.word	0x2000df0c
 801d6dc:	08023c34 	.word	0x08023c34

0801d6e0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d6e0:	b580      	push	{r7, lr}
 801d6e2:	b082      	sub	sp, #8
 801d6e4:	af00      	add	r7, sp, #0
 801d6e6:	4603      	mov	r3, r0
 801d6e8:	6039      	str	r1, [r7, #0]
 801d6ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801d6ec:	683b      	ldr	r3, [r7, #0]
 801d6ee:	221a      	movs	r2, #26
 801d6f0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801d6f2:	f000 f843 	bl	801d77c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801d6f6:	4b02      	ldr	r3, [pc, #8]	@ (801d700 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801d6f8:	4618      	mov	r0, r3
 801d6fa:	3708      	adds	r7, #8
 801d6fc:	46bd      	mov	sp, r7
 801d6fe:	bd80      	pop	{r7, pc}
 801d700:	200000f8 	.word	0x200000f8

0801d704 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d704:	b580      	push	{r7, lr}
 801d706:	b082      	sub	sp, #8
 801d708:	af00      	add	r7, sp, #0
 801d70a:	4603      	mov	r3, r0
 801d70c:	6039      	str	r1, [r7, #0]
 801d70e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801d710:	79fb      	ldrb	r3, [r7, #7]
 801d712:	2b00      	cmp	r3, #0
 801d714:	d105      	bne.n	801d722 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801d716:	683a      	ldr	r2, [r7, #0]
 801d718:	4907      	ldr	r1, [pc, #28]	@ (801d738 <USBD_FS_ConfigStrDescriptor+0x34>)
 801d71a:	4808      	ldr	r0, [pc, #32]	@ (801d73c <USBD_FS_ConfigStrDescriptor+0x38>)
 801d71c:	f7f1 fec0 	bl	800f4a0 <USBD_GetString>
 801d720:	e004      	b.n	801d72c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801d722:	683a      	ldr	r2, [r7, #0]
 801d724:	4904      	ldr	r1, [pc, #16]	@ (801d738 <USBD_FS_ConfigStrDescriptor+0x34>)
 801d726:	4805      	ldr	r0, [pc, #20]	@ (801d73c <USBD_FS_ConfigStrDescriptor+0x38>)
 801d728:	f7f1 feba 	bl	800f4a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 801d72c:	4b02      	ldr	r3, [pc, #8]	@ (801d738 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801d72e:	4618      	mov	r0, r3
 801d730:	3708      	adds	r7, #8
 801d732:	46bd      	mov	sp, r7
 801d734:	bd80      	pop	{r7, pc}
 801d736:	bf00      	nop
 801d738:	2000df0c 	.word	0x2000df0c
 801d73c:	08023c48 	.word	0x08023c48

0801d740 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d740:	b580      	push	{r7, lr}
 801d742:	b082      	sub	sp, #8
 801d744:	af00      	add	r7, sp, #0
 801d746:	4603      	mov	r3, r0
 801d748:	6039      	str	r1, [r7, #0]
 801d74a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801d74c:	79fb      	ldrb	r3, [r7, #7]
 801d74e:	2b00      	cmp	r3, #0
 801d750:	d105      	bne.n	801d75e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801d752:	683a      	ldr	r2, [r7, #0]
 801d754:	4907      	ldr	r1, [pc, #28]	@ (801d774 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801d756:	4808      	ldr	r0, [pc, #32]	@ (801d778 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801d758:	f7f1 fea2 	bl	800f4a0 <USBD_GetString>
 801d75c:	e004      	b.n	801d768 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801d75e:	683a      	ldr	r2, [r7, #0]
 801d760:	4904      	ldr	r1, [pc, #16]	@ (801d774 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801d762:	4805      	ldr	r0, [pc, #20]	@ (801d778 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801d764:	f7f1 fe9c 	bl	800f4a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 801d768:	4b02      	ldr	r3, [pc, #8]	@ (801d774 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801d76a:	4618      	mov	r0, r3
 801d76c:	3708      	adds	r7, #8
 801d76e:	46bd      	mov	sp, r7
 801d770:	bd80      	pop	{r7, pc}
 801d772:	bf00      	nop
 801d774:	2000df0c 	.word	0x2000df0c
 801d778:	08023c54 	.word	0x08023c54

0801d77c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801d77c:	b580      	push	{r7, lr}
 801d77e:	b084      	sub	sp, #16
 801d780:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801d782:	4b0f      	ldr	r3, [pc, #60]	@ (801d7c0 <Get_SerialNum+0x44>)
 801d784:	681b      	ldr	r3, [r3, #0]
 801d786:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801d788:	4b0e      	ldr	r3, [pc, #56]	@ (801d7c4 <Get_SerialNum+0x48>)
 801d78a:	681b      	ldr	r3, [r3, #0]
 801d78c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801d78e:	4b0e      	ldr	r3, [pc, #56]	@ (801d7c8 <Get_SerialNum+0x4c>)
 801d790:	681b      	ldr	r3, [r3, #0]
 801d792:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801d794:	68fa      	ldr	r2, [r7, #12]
 801d796:	687b      	ldr	r3, [r7, #4]
 801d798:	4413      	add	r3, r2
 801d79a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801d79c:	68fb      	ldr	r3, [r7, #12]
 801d79e:	2b00      	cmp	r3, #0
 801d7a0:	d009      	beq.n	801d7b6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801d7a2:	2208      	movs	r2, #8
 801d7a4:	4909      	ldr	r1, [pc, #36]	@ (801d7cc <Get_SerialNum+0x50>)
 801d7a6:	68f8      	ldr	r0, [r7, #12]
 801d7a8:	f000 f814 	bl	801d7d4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801d7ac:	2204      	movs	r2, #4
 801d7ae:	4908      	ldr	r1, [pc, #32]	@ (801d7d0 <Get_SerialNum+0x54>)
 801d7b0:	68b8      	ldr	r0, [r7, #8]
 801d7b2:	f000 f80f 	bl	801d7d4 <IntToUnicode>
  }
}
 801d7b6:	bf00      	nop
 801d7b8:	3710      	adds	r7, #16
 801d7ba:	46bd      	mov	sp, r7
 801d7bc:	bd80      	pop	{r7, pc}
 801d7be:	bf00      	nop
 801d7c0:	1fff7a10 	.word	0x1fff7a10
 801d7c4:	1fff7a14 	.word	0x1fff7a14
 801d7c8:	1fff7a18 	.word	0x1fff7a18
 801d7cc:	200000fa 	.word	0x200000fa
 801d7d0:	2000010a 	.word	0x2000010a

0801d7d4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801d7d4:	b480      	push	{r7}
 801d7d6:	b087      	sub	sp, #28
 801d7d8:	af00      	add	r7, sp, #0
 801d7da:	60f8      	str	r0, [r7, #12]
 801d7dc:	60b9      	str	r1, [r7, #8]
 801d7de:	4613      	mov	r3, r2
 801d7e0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801d7e2:	2300      	movs	r3, #0
 801d7e4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801d7e6:	2300      	movs	r3, #0
 801d7e8:	75fb      	strb	r3, [r7, #23]
 801d7ea:	e027      	b.n	801d83c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801d7ec:	68fb      	ldr	r3, [r7, #12]
 801d7ee:	0f1b      	lsrs	r3, r3, #28
 801d7f0:	2b09      	cmp	r3, #9
 801d7f2:	d80b      	bhi.n	801d80c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801d7f4:	68fb      	ldr	r3, [r7, #12]
 801d7f6:	0f1b      	lsrs	r3, r3, #28
 801d7f8:	b2da      	uxtb	r2, r3
 801d7fa:	7dfb      	ldrb	r3, [r7, #23]
 801d7fc:	005b      	lsls	r3, r3, #1
 801d7fe:	4619      	mov	r1, r3
 801d800:	68bb      	ldr	r3, [r7, #8]
 801d802:	440b      	add	r3, r1
 801d804:	3230      	adds	r2, #48	@ 0x30
 801d806:	b2d2      	uxtb	r2, r2
 801d808:	701a      	strb	r2, [r3, #0]
 801d80a:	e00a      	b.n	801d822 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801d80c:	68fb      	ldr	r3, [r7, #12]
 801d80e:	0f1b      	lsrs	r3, r3, #28
 801d810:	b2da      	uxtb	r2, r3
 801d812:	7dfb      	ldrb	r3, [r7, #23]
 801d814:	005b      	lsls	r3, r3, #1
 801d816:	4619      	mov	r1, r3
 801d818:	68bb      	ldr	r3, [r7, #8]
 801d81a:	440b      	add	r3, r1
 801d81c:	3237      	adds	r2, #55	@ 0x37
 801d81e:	b2d2      	uxtb	r2, r2
 801d820:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801d822:	68fb      	ldr	r3, [r7, #12]
 801d824:	011b      	lsls	r3, r3, #4
 801d826:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801d828:	7dfb      	ldrb	r3, [r7, #23]
 801d82a:	005b      	lsls	r3, r3, #1
 801d82c:	3301      	adds	r3, #1
 801d82e:	68ba      	ldr	r2, [r7, #8]
 801d830:	4413      	add	r3, r2
 801d832:	2200      	movs	r2, #0
 801d834:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801d836:	7dfb      	ldrb	r3, [r7, #23]
 801d838:	3301      	adds	r3, #1
 801d83a:	75fb      	strb	r3, [r7, #23]
 801d83c:	7dfa      	ldrb	r2, [r7, #23]
 801d83e:	79fb      	ldrb	r3, [r7, #7]
 801d840:	429a      	cmp	r2, r3
 801d842:	d3d3      	bcc.n	801d7ec <IntToUnicode+0x18>
  }
}
 801d844:	bf00      	nop
 801d846:	bf00      	nop
 801d848:	371c      	adds	r7, #28
 801d84a:	46bd      	mov	sp, r7
 801d84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d850:	4770      	bx	lr
	...

0801d854 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801d854:	b580      	push	{r7, lr}
 801d856:	b08a      	sub	sp, #40	@ 0x28
 801d858:	af00      	add	r7, sp, #0
 801d85a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801d85c:	f107 0314 	add.w	r3, r7, #20
 801d860:	2200      	movs	r2, #0
 801d862:	601a      	str	r2, [r3, #0]
 801d864:	605a      	str	r2, [r3, #4]
 801d866:	609a      	str	r2, [r3, #8]
 801d868:	60da      	str	r2, [r3, #12]
 801d86a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 801d86c:	687b      	ldr	r3, [r7, #4]
 801d86e:	681b      	ldr	r3, [r3, #0]
 801d870:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801d874:	d13a      	bne.n	801d8ec <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801d876:	2300      	movs	r3, #0
 801d878:	613b      	str	r3, [r7, #16]
 801d87a:	4b1e      	ldr	r3, [pc, #120]	@ (801d8f4 <HAL_PCD_MspInit+0xa0>)
 801d87c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d87e:	4a1d      	ldr	r2, [pc, #116]	@ (801d8f4 <HAL_PCD_MspInit+0xa0>)
 801d880:	f043 0301 	orr.w	r3, r3, #1
 801d884:	6313      	str	r3, [r2, #48]	@ 0x30
 801d886:	4b1b      	ldr	r3, [pc, #108]	@ (801d8f4 <HAL_PCD_MspInit+0xa0>)
 801d888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d88a:	f003 0301 	and.w	r3, r3, #1
 801d88e:	613b      	str	r3, [r7, #16]
 801d890:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801d892:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 801d896:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801d898:	2302      	movs	r3, #2
 801d89a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d89c:	2300      	movs	r3, #0
 801d89e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801d8a0:	2303      	movs	r3, #3
 801d8a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801d8a4:	230a      	movs	r3, #10
 801d8a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801d8a8:	f107 0314 	add.w	r3, r7, #20
 801d8ac:	4619      	mov	r1, r3
 801d8ae:	4812      	ldr	r0, [pc, #72]	@ (801d8f8 <HAL_PCD_MspInit+0xa4>)
 801d8b0:	f7e9 f90c 	bl	8006acc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801d8b4:	4b0f      	ldr	r3, [pc, #60]	@ (801d8f4 <HAL_PCD_MspInit+0xa0>)
 801d8b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d8b8:	4a0e      	ldr	r2, [pc, #56]	@ (801d8f4 <HAL_PCD_MspInit+0xa0>)
 801d8ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801d8be:	6353      	str	r3, [r2, #52]	@ 0x34
 801d8c0:	2300      	movs	r3, #0
 801d8c2:	60fb      	str	r3, [r7, #12]
 801d8c4:	4b0b      	ldr	r3, [pc, #44]	@ (801d8f4 <HAL_PCD_MspInit+0xa0>)
 801d8c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801d8c8:	4a0a      	ldr	r2, [pc, #40]	@ (801d8f4 <HAL_PCD_MspInit+0xa0>)
 801d8ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 801d8ce:	6453      	str	r3, [r2, #68]	@ 0x44
 801d8d0:	4b08      	ldr	r3, [pc, #32]	@ (801d8f4 <HAL_PCD_MspInit+0xa0>)
 801d8d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801d8d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801d8d8:	60fb      	str	r3, [r7, #12]
 801d8da:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 801d8dc:	2200      	movs	r2, #0
 801d8de:	2106      	movs	r1, #6
 801d8e0:	2043      	movs	r0, #67	@ 0x43
 801d8e2:	f7e7 fa93 	bl	8004e0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801d8e6:	2043      	movs	r0, #67	@ 0x43
 801d8e8:	f7e7 faac 	bl	8004e44 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801d8ec:	bf00      	nop
 801d8ee:	3728      	adds	r7, #40	@ 0x28
 801d8f0:	46bd      	mov	sp, r7
 801d8f2:	bd80      	pop	{r7, pc}
 801d8f4:	40023800 	.word	0x40023800
 801d8f8:	40020000 	.word	0x40020000

0801d8fc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d8fc:	b580      	push	{r7, lr}
 801d8fe:	b082      	sub	sp, #8
 801d900:	af00      	add	r7, sp, #0
 801d902:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801d904:	687b      	ldr	r3, [r7, #4]
 801d906:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 801d90a:	687b      	ldr	r3, [r7, #4]
 801d90c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 801d910:	4619      	mov	r1, r3
 801d912:	4610      	mov	r0, r2
 801d914:	f7f0 fc4b 	bl	800e1ae <USBD_LL_SetupStage>
}
 801d918:	bf00      	nop
 801d91a:	3708      	adds	r7, #8
 801d91c:	46bd      	mov	sp, r7
 801d91e:	bd80      	pop	{r7, pc}

0801d920 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d920:	b580      	push	{r7, lr}
 801d922:	b082      	sub	sp, #8
 801d924:	af00      	add	r7, sp, #0
 801d926:	6078      	str	r0, [r7, #4]
 801d928:	460b      	mov	r3, r1
 801d92a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801d92c:	687b      	ldr	r3, [r7, #4]
 801d92e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801d932:	78fa      	ldrb	r2, [r7, #3]
 801d934:	6879      	ldr	r1, [r7, #4]
 801d936:	4613      	mov	r3, r2
 801d938:	00db      	lsls	r3, r3, #3
 801d93a:	4413      	add	r3, r2
 801d93c:	009b      	lsls	r3, r3, #2
 801d93e:	440b      	add	r3, r1
 801d940:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801d944:	681a      	ldr	r2, [r3, #0]
 801d946:	78fb      	ldrb	r3, [r7, #3]
 801d948:	4619      	mov	r1, r3
 801d94a:	f7f0 fc85 	bl	800e258 <USBD_LL_DataOutStage>
}
 801d94e:	bf00      	nop
 801d950:	3708      	adds	r7, #8
 801d952:	46bd      	mov	sp, r7
 801d954:	bd80      	pop	{r7, pc}

0801d956 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d956:	b580      	push	{r7, lr}
 801d958:	b082      	sub	sp, #8
 801d95a:	af00      	add	r7, sp, #0
 801d95c:	6078      	str	r0, [r7, #4]
 801d95e:	460b      	mov	r3, r1
 801d960:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801d962:	687b      	ldr	r3, [r7, #4]
 801d964:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801d968:	78fa      	ldrb	r2, [r7, #3]
 801d96a:	6879      	ldr	r1, [r7, #4]
 801d96c:	4613      	mov	r3, r2
 801d96e:	00db      	lsls	r3, r3, #3
 801d970:	4413      	add	r3, r2
 801d972:	009b      	lsls	r3, r3, #2
 801d974:	440b      	add	r3, r1
 801d976:	3320      	adds	r3, #32
 801d978:	681a      	ldr	r2, [r3, #0]
 801d97a:	78fb      	ldrb	r3, [r7, #3]
 801d97c:	4619      	mov	r1, r3
 801d97e:	f7f0 fd27 	bl	800e3d0 <USBD_LL_DataInStage>
}
 801d982:	bf00      	nop
 801d984:	3708      	adds	r7, #8
 801d986:	46bd      	mov	sp, r7
 801d988:	bd80      	pop	{r7, pc}

0801d98a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d98a:	b580      	push	{r7, lr}
 801d98c:	b082      	sub	sp, #8
 801d98e:	af00      	add	r7, sp, #0
 801d990:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801d992:	687b      	ldr	r3, [r7, #4]
 801d994:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801d998:	4618      	mov	r0, r3
 801d99a:	f7f0 fe6b 	bl	800e674 <USBD_LL_SOF>
}
 801d99e:	bf00      	nop
 801d9a0:	3708      	adds	r7, #8
 801d9a2:	46bd      	mov	sp, r7
 801d9a4:	bd80      	pop	{r7, pc}

0801d9a6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d9a6:	b580      	push	{r7, lr}
 801d9a8:	b084      	sub	sp, #16
 801d9aa:	af00      	add	r7, sp, #0
 801d9ac:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801d9ae:	2301      	movs	r3, #1
 801d9b0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801d9b2:	687b      	ldr	r3, [r7, #4]
 801d9b4:	79db      	ldrb	r3, [r3, #7]
 801d9b6:	2b00      	cmp	r3, #0
 801d9b8:	d102      	bne.n	801d9c0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801d9ba:	2300      	movs	r3, #0
 801d9bc:	73fb      	strb	r3, [r7, #15]
 801d9be:	e008      	b.n	801d9d2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801d9c0:	687b      	ldr	r3, [r7, #4]
 801d9c2:	79db      	ldrb	r3, [r3, #7]
 801d9c4:	2b02      	cmp	r3, #2
 801d9c6:	d102      	bne.n	801d9ce <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801d9c8:	2301      	movs	r3, #1
 801d9ca:	73fb      	strb	r3, [r7, #15]
 801d9cc:	e001      	b.n	801d9d2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801d9ce:	f7e4 fb35 	bl	800203c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801d9d2:	687b      	ldr	r3, [r7, #4]
 801d9d4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801d9d8:	7bfa      	ldrb	r2, [r7, #15]
 801d9da:	4611      	mov	r1, r2
 801d9dc:	4618      	mov	r0, r3
 801d9de:	f7f0 fe05 	bl	800e5ec <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801d9e2:	687b      	ldr	r3, [r7, #4]
 801d9e4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801d9e8:	4618      	mov	r0, r3
 801d9ea:	f7f0 fdac 	bl	800e546 <USBD_LL_Reset>
}
 801d9ee:	bf00      	nop
 801d9f0:	3710      	adds	r7, #16
 801d9f2:	46bd      	mov	sp, r7
 801d9f4:	bd80      	pop	{r7, pc}
	...

0801d9f8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d9f8:	b580      	push	{r7, lr}
 801d9fa:	b082      	sub	sp, #8
 801d9fc:	af00      	add	r7, sp, #0
 801d9fe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801da00:	687b      	ldr	r3, [r7, #4]
 801da02:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801da06:	4618      	mov	r0, r3
 801da08:	f7f0 fe00 	bl	800e60c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801da0c:	687b      	ldr	r3, [r7, #4]
 801da0e:	681b      	ldr	r3, [r3, #0]
 801da10:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801da14:	681b      	ldr	r3, [r3, #0]
 801da16:	687a      	ldr	r2, [r7, #4]
 801da18:	6812      	ldr	r2, [r2, #0]
 801da1a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801da1e:	f043 0301 	orr.w	r3, r3, #1
 801da22:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801da24:	687b      	ldr	r3, [r7, #4]
 801da26:	7adb      	ldrb	r3, [r3, #11]
 801da28:	2b00      	cmp	r3, #0
 801da2a:	d005      	beq.n	801da38 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801da2c:	4b04      	ldr	r3, [pc, #16]	@ (801da40 <HAL_PCD_SuspendCallback+0x48>)
 801da2e:	691b      	ldr	r3, [r3, #16]
 801da30:	4a03      	ldr	r2, [pc, #12]	@ (801da40 <HAL_PCD_SuspendCallback+0x48>)
 801da32:	f043 0306 	orr.w	r3, r3, #6
 801da36:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801da38:	bf00      	nop
 801da3a:	3708      	adds	r7, #8
 801da3c:	46bd      	mov	sp, r7
 801da3e:	bd80      	pop	{r7, pc}
 801da40:	e000ed00 	.word	0xe000ed00

0801da44 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801da44:	b580      	push	{r7, lr}
 801da46:	b082      	sub	sp, #8
 801da48:	af00      	add	r7, sp, #0
 801da4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801da4c:	687b      	ldr	r3, [r7, #4]
 801da4e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801da52:	4618      	mov	r0, r3
 801da54:	f7f0 fdf6 	bl	800e644 <USBD_LL_Resume>
}
 801da58:	bf00      	nop
 801da5a:	3708      	adds	r7, #8
 801da5c:	46bd      	mov	sp, r7
 801da5e:	bd80      	pop	{r7, pc}

0801da60 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801da60:	b580      	push	{r7, lr}
 801da62:	b082      	sub	sp, #8
 801da64:	af00      	add	r7, sp, #0
 801da66:	6078      	str	r0, [r7, #4]
 801da68:	460b      	mov	r3, r1
 801da6a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801da6c:	687b      	ldr	r3, [r7, #4]
 801da6e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801da72:	78fa      	ldrb	r2, [r7, #3]
 801da74:	4611      	mov	r1, r2
 801da76:	4618      	mov	r0, r3
 801da78:	f7f0 fe4e 	bl	800e718 <USBD_LL_IsoOUTIncomplete>
}
 801da7c:	bf00      	nop
 801da7e:	3708      	adds	r7, #8
 801da80:	46bd      	mov	sp, r7
 801da82:	bd80      	pop	{r7, pc}

0801da84 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801da84:	b580      	push	{r7, lr}
 801da86:	b082      	sub	sp, #8
 801da88:	af00      	add	r7, sp, #0
 801da8a:	6078      	str	r0, [r7, #4]
 801da8c:	460b      	mov	r3, r1
 801da8e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801da90:	687b      	ldr	r3, [r7, #4]
 801da92:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801da96:	78fa      	ldrb	r2, [r7, #3]
 801da98:	4611      	mov	r1, r2
 801da9a:	4618      	mov	r0, r3
 801da9c:	f7f0 fe0a 	bl	800e6b4 <USBD_LL_IsoINIncomplete>
}
 801daa0:	bf00      	nop
 801daa2:	3708      	adds	r7, #8
 801daa4:	46bd      	mov	sp, r7
 801daa6:	bd80      	pop	{r7, pc}

0801daa8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801daa8:	b580      	push	{r7, lr}
 801daaa:	b082      	sub	sp, #8
 801daac:	af00      	add	r7, sp, #0
 801daae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801dab0:	687b      	ldr	r3, [r7, #4]
 801dab2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801dab6:	4618      	mov	r0, r3
 801dab8:	f7f0 fe60 	bl	800e77c <USBD_LL_DevConnected>
}
 801dabc:	bf00      	nop
 801dabe:	3708      	adds	r7, #8
 801dac0:	46bd      	mov	sp, r7
 801dac2:	bd80      	pop	{r7, pc}

0801dac4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801dac4:	b580      	push	{r7, lr}
 801dac6:	b082      	sub	sp, #8
 801dac8:	af00      	add	r7, sp, #0
 801daca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801dacc:	687b      	ldr	r3, [r7, #4]
 801dace:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801dad2:	4618      	mov	r0, r3
 801dad4:	f7f0 fe5d 	bl	800e792 <USBD_LL_DevDisconnected>
}
 801dad8:	bf00      	nop
 801dada:	3708      	adds	r7, #8
 801dadc:	46bd      	mov	sp, r7
 801dade:	bd80      	pop	{r7, pc}

0801dae0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801dae0:	b580      	push	{r7, lr}
 801dae2:	b082      	sub	sp, #8
 801dae4:	af00      	add	r7, sp, #0
 801dae6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801dae8:	687b      	ldr	r3, [r7, #4]
 801daea:	781b      	ldrb	r3, [r3, #0]
 801daec:	2b00      	cmp	r3, #0
 801daee:	d13c      	bne.n	801db6a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801daf0:	4a20      	ldr	r2, [pc, #128]	@ (801db74 <USBD_LL_Init+0x94>)
 801daf2:	687b      	ldr	r3, [r7, #4]
 801daf4:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 801daf8:	687b      	ldr	r3, [r7, #4]
 801dafa:	4a1e      	ldr	r2, [pc, #120]	@ (801db74 <USBD_LL_Init+0x94>)
 801dafc:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801db00:	4b1c      	ldr	r3, [pc, #112]	@ (801db74 <USBD_LL_Init+0x94>)
 801db02:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 801db06:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 801db08:	4b1a      	ldr	r3, [pc, #104]	@ (801db74 <USBD_LL_Init+0x94>)
 801db0a:	2204      	movs	r2, #4
 801db0c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801db0e:	4b19      	ldr	r3, [pc, #100]	@ (801db74 <USBD_LL_Init+0x94>)
 801db10:	2202      	movs	r2, #2
 801db12:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801db14:	4b17      	ldr	r3, [pc, #92]	@ (801db74 <USBD_LL_Init+0x94>)
 801db16:	2200      	movs	r2, #0
 801db18:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801db1a:	4b16      	ldr	r3, [pc, #88]	@ (801db74 <USBD_LL_Init+0x94>)
 801db1c:	2202      	movs	r2, #2
 801db1e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801db20:	4b14      	ldr	r3, [pc, #80]	@ (801db74 <USBD_LL_Init+0x94>)
 801db22:	2200      	movs	r2, #0
 801db24:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801db26:	4b13      	ldr	r3, [pc, #76]	@ (801db74 <USBD_LL_Init+0x94>)
 801db28:	2200      	movs	r2, #0
 801db2a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801db2c:	4b11      	ldr	r3, [pc, #68]	@ (801db74 <USBD_LL_Init+0x94>)
 801db2e:	2200      	movs	r2, #0
 801db30:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801db32:	4b10      	ldr	r3, [pc, #64]	@ (801db74 <USBD_LL_Init+0x94>)
 801db34:	2200      	movs	r2, #0
 801db36:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801db38:	4b0e      	ldr	r3, [pc, #56]	@ (801db74 <USBD_LL_Init+0x94>)
 801db3a:	2200      	movs	r2, #0
 801db3c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801db3e:	480d      	ldr	r0, [pc, #52]	@ (801db74 <USBD_LL_Init+0x94>)
 801db40:	f7e9 f979 	bl	8006e36 <HAL_PCD_Init>
 801db44:	4603      	mov	r3, r0
 801db46:	2b00      	cmp	r3, #0
 801db48:	d001      	beq.n	801db4e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801db4a:	f7e4 fa77 	bl	800203c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801db4e:	2180      	movs	r1, #128	@ 0x80
 801db50:	4808      	ldr	r0, [pc, #32]	@ (801db74 <USBD_LL_Init+0x94>)
 801db52:	f7ea fba6 	bl	80082a2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801db56:	2240      	movs	r2, #64	@ 0x40
 801db58:	2100      	movs	r1, #0
 801db5a:	4806      	ldr	r0, [pc, #24]	@ (801db74 <USBD_LL_Init+0x94>)
 801db5c:	f7ea fb5a 	bl	8008214 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801db60:	2280      	movs	r2, #128	@ 0x80
 801db62:	2101      	movs	r1, #1
 801db64:	4803      	ldr	r0, [pc, #12]	@ (801db74 <USBD_LL_Init+0x94>)
 801db66:	f7ea fb55 	bl	8008214 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801db6a:	2300      	movs	r3, #0
}
 801db6c:	4618      	mov	r0, r3
 801db6e:	3708      	adds	r7, #8
 801db70:	46bd      	mov	sp, r7
 801db72:	bd80      	pop	{r7, pc}
 801db74:	2000e10c 	.word	0x2000e10c

0801db78 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801db78:	b580      	push	{r7, lr}
 801db7a:	b084      	sub	sp, #16
 801db7c:	af00      	add	r7, sp, #0
 801db7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801db80:	2300      	movs	r3, #0
 801db82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801db84:	2300      	movs	r3, #0
 801db86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801db88:	687b      	ldr	r3, [r7, #4]
 801db8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801db8e:	4618      	mov	r0, r3
 801db90:	f7e9 fa60 	bl	8007054 <HAL_PCD_Start>
 801db94:	4603      	mov	r3, r0
 801db96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801db98:	7bfb      	ldrb	r3, [r7, #15]
 801db9a:	4618      	mov	r0, r3
 801db9c:	f000 f942 	bl	801de24 <USBD_Get_USB_Status>
 801dba0:	4603      	mov	r3, r0
 801dba2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801dba4:	7bbb      	ldrb	r3, [r7, #14]
}
 801dba6:	4618      	mov	r0, r3
 801dba8:	3710      	adds	r7, #16
 801dbaa:	46bd      	mov	sp, r7
 801dbac:	bd80      	pop	{r7, pc}

0801dbae <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801dbae:	b580      	push	{r7, lr}
 801dbb0:	b084      	sub	sp, #16
 801dbb2:	af00      	add	r7, sp, #0
 801dbb4:	6078      	str	r0, [r7, #4]
 801dbb6:	4608      	mov	r0, r1
 801dbb8:	4611      	mov	r1, r2
 801dbba:	461a      	mov	r2, r3
 801dbbc:	4603      	mov	r3, r0
 801dbbe:	70fb      	strb	r3, [r7, #3]
 801dbc0:	460b      	mov	r3, r1
 801dbc2:	70bb      	strb	r3, [r7, #2]
 801dbc4:	4613      	mov	r3, r2
 801dbc6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801dbc8:	2300      	movs	r3, #0
 801dbca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801dbcc:	2300      	movs	r3, #0
 801dbce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801dbd0:	687b      	ldr	r3, [r7, #4]
 801dbd2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801dbd6:	78bb      	ldrb	r3, [r7, #2]
 801dbd8:	883a      	ldrh	r2, [r7, #0]
 801dbda:	78f9      	ldrb	r1, [r7, #3]
 801dbdc:	f7e9 ff34 	bl	8007a48 <HAL_PCD_EP_Open>
 801dbe0:	4603      	mov	r3, r0
 801dbe2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801dbe4:	7bfb      	ldrb	r3, [r7, #15]
 801dbe6:	4618      	mov	r0, r3
 801dbe8:	f000 f91c 	bl	801de24 <USBD_Get_USB_Status>
 801dbec:	4603      	mov	r3, r0
 801dbee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801dbf0:	7bbb      	ldrb	r3, [r7, #14]
}
 801dbf2:	4618      	mov	r0, r3
 801dbf4:	3710      	adds	r7, #16
 801dbf6:	46bd      	mov	sp, r7
 801dbf8:	bd80      	pop	{r7, pc}

0801dbfa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801dbfa:	b580      	push	{r7, lr}
 801dbfc:	b084      	sub	sp, #16
 801dbfe:	af00      	add	r7, sp, #0
 801dc00:	6078      	str	r0, [r7, #4]
 801dc02:	460b      	mov	r3, r1
 801dc04:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801dc06:	2300      	movs	r3, #0
 801dc08:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801dc0a:	2300      	movs	r3, #0
 801dc0c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801dc0e:	687b      	ldr	r3, [r7, #4]
 801dc10:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801dc14:	78fa      	ldrb	r2, [r7, #3]
 801dc16:	4611      	mov	r1, r2
 801dc18:	4618      	mov	r0, r3
 801dc1a:	f7e9 ff7f 	bl	8007b1c <HAL_PCD_EP_Close>
 801dc1e:	4603      	mov	r3, r0
 801dc20:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801dc22:	7bfb      	ldrb	r3, [r7, #15]
 801dc24:	4618      	mov	r0, r3
 801dc26:	f000 f8fd 	bl	801de24 <USBD_Get_USB_Status>
 801dc2a:	4603      	mov	r3, r0
 801dc2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801dc2e:	7bbb      	ldrb	r3, [r7, #14]
}
 801dc30:	4618      	mov	r0, r3
 801dc32:	3710      	adds	r7, #16
 801dc34:	46bd      	mov	sp, r7
 801dc36:	bd80      	pop	{r7, pc}

0801dc38 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801dc38:	b580      	push	{r7, lr}
 801dc3a:	b084      	sub	sp, #16
 801dc3c:	af00      	add	r7, sp, #0
 801dc3e:	6078      	str	r0, [r7, #4]
 801dc40:	460b      	mov	r3, r1
 801dc42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801dc44:	2300      	movs	r3, #0
 801dc46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801dc48:	2300      	movs	r3, #0
 801dc4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801dc4c:	687b      	ldr	r3, [r7, #4]
 801dc4e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801dc52:	78fa      	ldrb	r2, [r7, #3]
 801dc54:	4611      	mov	r1, r2
 801dc56:	4618      	mov	r0, r3
 801dc58:	f7ea f837 	bl	8007cca <HAL_PCD_EP_SetStall>
 801dc5c:	4603      	mov	r3, r0
 801dc5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801dc60:	7bfb      	ldrb	r3, [r7, #15]
 801dc62:	4618      	mov	r0, r3
 801dc64:	f000 f8de 	bl	801de24 <USBD_Get_USB_Status>
 801dc68:	4603      	mov	r3, r0
 801dc6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801dc6c:	7bbb      	ldrb	r3, [r7, #14]
}
 801dc6e:	4618      	mov	r0, r3
 801dc70:	3710      	adds	r7, #16
 801dc72:	46bd      	mov	sp, r7
 801dc74:	bd80      	pop	{r7, pc}

0801dc76 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801dc76:	b580      	push	{r7, lr}
 801dc78:	b084      	sub	sp, #16
 801dc7a:	af00      	add	r7, sp, #0
 801dc7c:	6078      	str	r0, [r7, #4]
 801dc7e:	460b      	mov	r3, r1
 801dc80:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801dc82:	2300      	movs	r3, #0
 801dc84:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801dc86:	2300      	movs	r3, #0
 801dc88:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801dc8a:	687b      	ldr	r3, [r7, #4]
 801dc8c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801dc90:	78fa      	ldrb	r2, [r7, #3]
 801dc92:	4611      	mov	r1, r2
 801dc94:	4618      	mov	r0, r3
 801dc96:	f7ea f87b 	bl	8007d90 <HAL_PCD_EP_ClrStall>
 801dc9a:	4603      	mov	r3, r0
 801dc9c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801dc9e:	7bfb      	ldrb	r3, [r7, #15]
 801dca0:	4618      	mov	r0, r3
 801dca2:	f000 f8bf 	bl	801de24 <USBD_Get_USB_Status>
 801dca6:	4603      	mov	r3, r0
 801dca8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801dcaa:	7bbb      	ldrb	r3, [r7, #14]
}
 801dcac:	4618      	mov	r0, r3
 801dcae:	3710      	adds	r7, #16
 801dcb0:	46bd      	mov	sp, r7
 801dcb2:	bd80      	pop	{r7, pc}

0801dcb4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801dcb4:	b480      	push	{r7}
 801dcb6:	b085      	sub	sp, #20
 801dcb8:	af00      	add	r7, sp, #0
 801dcba:	6078      	str	r0, [r7, #4]
 801dcbc:	460b      	mov	r3, r1
 801dcbe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801dcc0:	687b      	ldr	r3, [r7, #4]
 801dcc2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801dcc6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801dcc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801dccc:	2b00      	cmp	r3, #0
 801dcce:	da0b      	bge.n	801dce8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801dcd0:	78fb      	ldrb	r3, [r7, #3]
 801dcd2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801dcd6:	68f9      	ldr	r1, [r7, #12]
 801dcd8:	4613      	mov	r3, r2
 801dcda:	00db      	lsls	r3, r3, #3
 801dcdc:	4413      	add	r3, r2
 801dcde:	009b      	lsls	r3, r3, #2
 801dce0:	440b      	add	r3, r1
 801dce2:	3316      	adds	r3, #22
 801dce4:	781b      	ldrb	r3, [r3, #0]
 801dce6:	e00b      	b.n	801dd00 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801dce8:	78fb      	ldrb	r3, [r7, #3]
 801dcea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801dcee:	68f9      	ldr	r1, [r7, #12]
 801dcf0:	4613      	mov	r3, r2
 801dcf2:	00db      	lsls	r3, r3, #3
 801dcf4:	4413      	add	r3, r2
 801dcf6:	009b      	lsls	r3, r3, #2
 801dcf8:	440b      	add	r3, r1
 801dcfa:	f203 2356 	addw	r3, r3, #598	@ 0x256
 801dcfe:	781b      	ldrb	r3, [r3, #0]
  }
}
 801dd00:	4618      	mov	r0, r3
 801dd02:	3714      	adds	r7, #20
 801dd04:	46bd      	mov	sp, r7
 801dd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd0a:	4770      	bx	lr

0801dd0c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801dd0c:	b580      	push	{r7, lr}
 801dd0e:	b084      	sub	sp, #16
 801dd10:	af00      	add	r7, sp, #0
 801dd12:	6078      	str	r0, [r7, #4]
 801dd14:	460b      	mov	r3, r1
 801dd16:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801dd18:	2300      	movs	r3, #0
 801dd1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801dd1c:	2300      	movs	r3, #0
 801dd1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801dd20:	687b      	ldr	r3, [r7, #4]
 801dd22:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801dd26:	78fa      	ldrb	r2, [r7, #3]
 801dd28:	4611      	mov	r1, r2
 801dd2a:	4618      	mov	r0, r3
 801dd2c:	f7e9 fe68 	bl	8007a00 <HAL_PCD_SetAddress>
 801dd30:	4603      	mov	r3, r0
 801dd32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801dd34:	7bfb      	ldrb	r3, [r7, #15]
 801dd36:	4618      	mov	r0, r3
 801dd38:	f000 f874 	bl	801de24 <USBD_Get_USB_Status>
 801dd3c:	4603      	mov	r3, r0
 801dd3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801dd40:	7bbb      	ldrb	r3, [r7, #14]
}
 801dd42:	4618      	mov	r0, r3
 801dd44:	3710      	adds	r7, #16
 801dd46:	46bd      	mov	sp, r7
 801dd48:	bd80      	pop	{r7, pc}

0801dd4a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801dd4a:	b580      	push	{r7, lr}
 801dd4c:	b086      	sub	sp, #24
 801dd4e:	af00      	add	r7, sp, #0
 801dd50:	60f8      	str	r0, [r7, #12]
 801dd52:	607a      	str	r2, [r7, #4]
 801dd54:	603b      	str	r3, [r7, #0]
 801dd56:	460b      	mov	r3, r1
 801dd58:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801dd5a:	2300      	movs	r3, #0
 801dd5c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801dd5e:	2300      	movs	r3, #0
 801dd60:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801dd62:	68fb      	ldr	r3, [r7, #12]
 801dd64:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801dd68:	7af9      	ldrb	r1, [r7, #11]
 801dd6a:	683b      	ldr	r3, [r7, #0]
 801dd6c:	687a      	ldr	r2, [r7, #4]
 801dd6e:	f7e9 ff72 	bl	8007c56 <HAL_PCD_EP_Transmit>
 801dd72:	4603      	mov	r3, r0
 801dd74:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801dd76:	7dfb      	ldrb	r3, [r7, #23]
 801dd78:	4618      	mov	r0, r3
 801dd7a:	f000 f853 	bl	801de24 <USBD_Get_USB_Status>
 801dd7e:	4603      	mov	r3, r0
 801dd80:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801dd82:	7dbb      	ldrb	r3, [r7, #22]
}
 801dd84:	4618      	mov	r0, r3
 801dd86:	3718      	adds	r7, #24
 801dd88:	46bd      	mov	sp, r7
 801dd8a:	bd80      	pop	{r7, pc}

0801dd8c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801dd8c:	b580      	push	{r7, lr}
 801dd8e:	b086      	sub	sp, #24
 801dd90:	af00      	add	r7, sp, #0
 801dd92:	60f8      	str	r0, [r7, #12]
 801dd94:	607a      	str	r2, [r7, #4]
 801dd96:	603b      	str	r3, [r7, #0]
 801dd98:	460b      	mov	r3, r1
 801dd9a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801dd9c:	2300      	movs	r3, #0
 801dd9e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801dda0:	2300      	movs	r3, #0
 801dda2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801dda4:	68fb      	ldr	r3, [r7, #12]
 801dda6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801ddaa:	7af9      	ldrb	r1, [r7, #11]
 801ddac:	683b      	ldr	r3, [r7, #0]
 801ddae:	687a      	ldr	r2, [r7, #4]
 801ddb0:	f7e9 fefe 	bl	8007bb0 <HAL_PCD_EP_Receive>
 801ddb4:	4603      	mov	r3, r0
 801ddb6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ddb8:	7dfb      	ldrb	r3, [r7, #23]
 801ddba:	4618      	mov	r0, r3
 801ddbc:	f000 f832 	bl	801de24 <USBD_Get_USB_Status>
 801ddc0:	4603      	mov	r3, r0
 801ddc2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801ddc4:	7dbb      	ldrb	r3, [r7, #22]
}
 801ddc6:	4618      	mov	r0, r3
 801ddc8:	3718      	adds	r7, #24
 801ddca:	46bd      	mov	sp, r7
 801ddcc:	bd80      	pop	{r7, pc}

0801ddce <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ddce:	b580      	push	{r7, lr}
 801ddd0:	b082      	sub	sp, #8
 801ddd2:	af00      	add	r7, sp, #0
 801ddd4:	6078      	str	r0, [r7, #4]
 801ddd6:	460b      	mov	r3, r1
 801ddd8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801ddda:	687b      	ldr	r3, [r7, #4]
 801dddc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801dde0:	78fa      	ldrb	r2, [r7, #3]
 801dde2:	4611      	mov	r1, r2
 801dde4:	4618      	mov	r0, r3
 801dde6:	f7e9 ff1e 	bl	8007c26 <HAL_PCD_EP_GetRxCount>
 801ddea:	4603      	mov	r3, r0
}
 801ddec:	4618      	mov	r0, r3
 801ddee:	3708      	adds	r7, #8
 801ddf0:	46bd      	mov	sp, r7
 801ddf2:	bd80      	pop	{r7, pc}

0801ddf4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801ddf4:	b480      	push	{r7}
 801ddf6:	b083      	sub	sp, #12
 801ddf8:	af00      	add	r7, sp, #0
 801ddfa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801ddfc:	4b03      	ldr	r3, [pc, #12]	@ (801de0c <USBD_static_malloc+0x18>)
}
 801ddfe:	4618      	mov	r0, r3
 801de00:	370c      	adds	r7, #12
 801de02:	46bd      	mov	sp, r7
 801de04:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de08:	4770      	bx	lr
 801de0a:	bf00      	nop
 801de0c:	2000e5f0 	.word	0x2000e5f0

0801de10 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801de10:	b480      	push	{r7}
 801de12:	b083      	sub	sp, #12
 801de14:	af00      	add	r7, sp, #0
 801de16:	6078      	str	r0, [r7, #4]

}
 801de18:	bf00      	nop
 801de1a:	370c      	adds	r7, #12
 801de1c:	46bd      	mov	sp, r7
 801de1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de22:	4770      	bx	lr

0801de24 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801de24:	b480      	push	{r7}
 801de26:	b085      	sub	sp, #20
 801de28:	af00      	add	r7, sp, #0
 801de2a:	4603      	mov	r3, r0
 801de2c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801de2e:	2300      	movs	r3, #0
 801de30:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801de32:	79fb      	ldrb	r3, [r7, #7]
 801de34:	2b03      	cmp	r3, #3
 801de36:	d817      	bhi.n	801de68 <USBD_Get_USB_Status+0x44>
 801de38:	a201      	add	r2, pc, #4	@ (adr r2, 801de40 <USBD_Get_USB_Status+0x1c>)
 801de3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801de3e:	bf00      	nop
 801de40:	0801de51 	.word	0x0801de51
 801de44:	0801de57 	.word	0x0801de57
 801de48:	0801de5d 	.word	0x0801de5d
 801de4c:	0801de63 	.word	0x0801de63
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801de50:	2300      	movs	r3, #0
 801de52:	73fb      	strb	r3, [r7, #15]
    break;
 801de54:	e00b      	b.n	801de6e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801de56:	2303      	movs	r3, #3
 801de58:	73fb      	strb	r3, [r7, #15]
    break;
 801de5a:	e008      	b.n	801de6e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801de5c:	2301      	movs	r3, #1
 801de5e:	73fb      	strb	r3, [r7, #15]
    break;
 801de60:	e005      	b.n	801de6e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801de62:	2303      	movs	r3, #3
 801de64:	73fb      	strb	r3, [r7, #15]
    break;
 801de66:	e002      	b.n	801de6e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801de68:	2303      	movs	r3, #3
 801de6a:	73fb      	strb	r3, [r7, #15]
    break;
 801de6c:	bf00      	nop
  }
  return usb_status;
 801de6e:	7bfb      	ldrb	r3, [r7, #15]
}
 801de70:	4618      	mov	r0, r3
 801de72:	3714      	adds	r7, #20
 801de74:	46bd      	mov	sp, r7
 801de76:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de7a:	4770      	bx	lr

0801de7c <atoi>:
 801de7c:	220a      	movs	r2, #10
 801de7e:	2100      	movs	r1, #0
 801de80:	f000 b8b8 	b.w	801dff4 <strtol>

0801de84 <rand>:
 801de84:	4b16      	ldr	r3, [pc, #88]	@ (801dee0 <rand+0x5c>)
 801de86:	b510      	push	{r4, lr}
 801de88:	681c      	ldr	r4, [r3, #0]
 801de8a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801de8c:	b9b3      	cbnz	r3, 801debc <rand+0x38>
 801de8e:	2018      	movs	r0, #24
 801de90:	f000 fba6 	bl	801e5e0 <malloc>
 801de94:	4602      	mov	r2, r0
 801de96:	6320      	str	r0, [r4, #48]	@ 0x30
 801de98:	b920      	cbnz	r0, 801dea4 <rand+0x20>
 801de9a:	4b12      	ldr	r3, [pc, #72]	@ (801dee4 <rand+0x60>)
 801de9c:	4812      	ldr	r0, [pc, #72]	@ (801dee8 <rand+0x64>)
 801de9e:	2152      	movs	r1, #82	@ 0x52
 801dea0:	f000 fb36 	bl	801e510 <__assert_func>
 801dea4:	4911      	ldr	r1, [pc, #68]	@ (801deec <rand+0x68>)
 801dea6:	4b12      	ldr	r3, [pc, #72]	@ (801def0 <rand+0x6c>)
 801dea8:	e9c0 1300 	strd	r1, r3, [r0]
 801deac:	4b11      	ldr	r3, [pc, #68]	@ (801def4 <rand+0x70>)
 801deae:	6083      	str	r3, [r0, #8]
 801deb0:	230b      	movs	r3, #11
 801deb2:	8183      	strh	r3, [r0, #12]
 801deb4:	2100      	movs	r1, #0
 801deb6:	2001      	movs	r0, #1
 801deb8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801debc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801debe:	480e      	ldr	r0, [pc, #56]	@ (801def8 <rand+0x74>)
 801dec0:	690b      	ldr	r3, [r1, #16]
 801dec2:	694c      	ldr	r4, [r1, #20]
 801dec4:	4a0d      	ldr	r2, [pc, #52]	@ (801defc <rand+0x78>)
 801dec6:	4358      	muls	r0, r3
 801dec8:	fb02 0004 	mla	r0, r2, r4, r0
 801decc:	fba3 3202 	umull	r3, r2, r3, r2
 801ded0:	3301      	adds	r3, #1
 801ded2:	eb40 0002 	adc.w	r0, r0, r2
 801ded6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801deda:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801dede:	bd10      	pop	{r4, pc}
 801dee0:	20000120 	.word	0x20000120
 801dee4:	08023dbc 	.word	0x08023dbc
 801dee8:	08023dd3 	.word	0x08023dd3
 801deec:	abcd330e 	.word	0xabcd330e
 801def0:	e66d1234 	.word	0xe66d1234
 801def4:	0005deec 	.word	0x0005deec
 801def8:	5851f42d 	.word	0x5851f42d
 801defc:	4c957f2d 	.word	0x4c957f2d

0801df00 <_strtol_l.isra.0>:
 801df00:	2b24      	cmp	r3, #36	@ 0x24
 801df02:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801df06:	4686      	mov	lr, r0
 801df08:	4690      	mov	r8, r2
 801df0a:	d801      	bhi.n	801df10 <_strtol_l.isra.0+0x10>
 801df0c:	2b01      	cmp	r3, #1
 801df0e:	d106      	bne.n	801df1e <_strtol_l.isra.0+0x1e>
 801df10:	f000 faba 	bl	801e488 <__errno>
 801df14:	2316      	movs	r3, #22
 801df16:	6003      	str	r3, [r0, #0]
 801df18:	2000      	movs	r0, #0
 801df1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801df1e:	4834      	ldr	r0, [pc, #208]	@ (801dff0 <_strtol_l.isra.0+0xf0>)
 801df20:	460d      	mov	r5, r1
 801df22:	462a      	mov	r2, r5
 801df24:	f815 4b01 	ldrb.w	r4, [r5], #1
 801df28:	5d06      	ldrb	r6, [r0, r4]
 801df2a:	f016 0608 	ands.w	r6, r6, #8
 801df2e:	d1f8      	bne.n	801df22 <_strtol_l.isra.0+0x22>
 801df30:	2c2d      	cmp	r4, #45	@ 0x2d
 801df32:	d110      	bne.n	801df56 <_strtol_l.isra.0+0x56>
 801df34:	782c      	ldrb	r4, [r5, #0]
 801df36:	2601      	movs	r6, #1
 801df38:	1c95      	adds	r5, r2, #2
 801df3a:	f033 0210 	bics.w	r2, r3, #16
 801df3e:	d115      	bne.n	801df6c <_strtol_l.isra.0+0x6c>
 801df40:	2c30      	cmp	r4, #48	@ 0x30
 801df42:	d10d      	bne.n	801df60 <_strtol_l.isra.0+0x60>
 801df44:	782a      	ldrb	r2, [r5, #0]
 801df46:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801df4a:	2a58      	cmp	r2, #88	@ 0x58
 801df4c:	d108      	bne.n	801df60 <_strtol_l.isra.0+0x60>
 801df4e:	786c      	ldrb	r4, [r5, #1]
 801df50:	3502      	adds	r5, #2
 801df52:	2310      	movs	r3, #16
 801df54:	e00a      	b.n	801df6c <_strtol_l.isra.0+0x6c>
 801df56:	2c2b      	cmp	r4, #43	@ 0x2b
 801df58:	bf04      	itt	eq
 801df5a:	782c      	ldrbeq	r4, [r5, #0]
 801df5c:	1c95      	addeq	r5, r2, #2
 801df5e:	e7ec      	b.n	801df3a <_strtol_l.isra.0+0x3a>
 801df60:	2b00      	cmp	r3, #0
 801df62:	d1f6      	bne.n	801df52 <_strtol_l.isra.0+0x52>
 801df64:	2c30      	cmp	r4, #48	@ 0x30
 801df66:	bf14      	ite	ne
 801df68:	230a      	movne	r3, #10
 801df6a:	2308      	moveq	r3, #8
 801df6c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801df70:	f10c 3cff 	add.w	ip, ip, #4294967295
 801df74:	2200      	movs	r2, #0
 801df76:	fbbc f9f3 	udiv	r9, ip, r3
 801df7a:	4610      	mov	r0, r2
 801df7c:	fb03 ca19 	mls	sl, r3, r9, ip
 801df80:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801df84:	2f09      	cmp	r7, #9
 801df86:	d80f      	bhi.n	801dfa8 <_strtol_l.isra.0+0xa8>
 801df88:	463c      	mov	r4, r7
 801df8a:	42a3      	cmp	r3, r4
 801df8c:	dd1b      	ble.n	801dfc6 <_strtol_l.isra.0+0xc6>
 801df8e:	1c57      	adds	r7, r2, #1
 801df90:	d007      	beq.n	801dfa2 <_strtol_l.isra.0+0xa2>
 801df92:	4581      	cmp	r9, r0
 801df94:	d314      	bcc.n	801dfc0 <_strtol_l.isra.0+0xc0>
 801df96:	d101      	bne.n	801df9c <_strtol_l.isra.0+0x9c>
 801df98:	45a2      	cmp	sl, r4
 801df9a:	db11      	blt.n	801dfc0 <_strtol_l.isra.0+0xc0>
 801df9c:	fb00 4003 	mla	r0, r0, r3, r4
 801dfa0:	2201      	movs	r2, #1
 801dfa2:	f815 4b01 	ldrb.w	r4, [r5], #1
 801dfa6:	e7eb      	b.n	801df80 <_strtol_l.isra.0+0x80>
 801dfa8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801dfac:	2f19      	cmp	r7, #25
 801dfae:	d801      	bhi.n	801dfb4 <_strtol_l.isra.0+0xb4>
 801dfb0:	3c37      	subs	r4, #55	@ 0x37
 801dfb2:	e7ea      	b.n	801df8a <_strtol_l.isra.0+0x8a>
 801dfb4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801dfb8:	2f19      	cmp	r7, #25
 801dfba:	d804      	bhi.n	801dfc6 <_strtol_l.isra.0+0xc6>
 801dfbc:	3c57      	subs	r4, #87	@ 0x57
 801dfbe:	e7e4      	b.n	801df8a <_strtol_l.isra.0+0x8a>
 801dfc0:	f04f 32ff 	mov.w	r2, #4294967295
 801dfc4:	e7ed      	b.n	801dfa2 <_strtol_l.isra.0+0xa2>
 801dfc6:	1c53      	adds	r3, r2, #1
 801dfc8:	d108      	bne.n	801dfdc <_strtol_l.isra.0+0xdc>
 801dfca:	2322      	movs	r3, #34	@ 0x22
 801dfcc:	f8ce 3000 	str.w	r3, [lr]
 801dfd0:	4660      	mov	r0, ip
 801dfd2:	f1b8 0f00 	cmp.w	r8, #0
 801dfd6:	d0a0      	beq.n	801df1a <_strtol_l.isra.0+0x1a>
 801dfd8:	1e69      	subs	r1, r5, #1
 801dfda:	e006      	b.n	801dfea <_strtol_l.isra.0+0xea>
 801dfdc:	b106      	cbz	r6, 801dfe0 <_strtol_l.isra.0+0xe0>
 801dfde:	4240      	negs	r0, r0
 801dfe0:	f1b8 0f00 	cmp.w	r8, #0
 801dfe4:	d099      	beq.n	801df1a <_strtol_l.isra.0+0x1a>
 801dfe6:	2a00      	cmp	r2, #0
 801dfe8:	d1f6      	bne.n	801dfd8 <_strtol_l.isra.0+0xd8>
 801dfea:	f8c8 1000 	str.w	r1, [r8]
 801dfee:	e794      	b.n	801df1a <_strtol_l.isra.0+0x1a>
 801dff0:	08023e9b 	.word	0x08023e9b

0801dff4 <strtol>:
 801dff4:	4613      	mov	r3, r2
 801dff6:	460a      	mov	r2, r1
 801dff8:	4601      	mov	r1, r0
 801dffa:	4802      	ldr	r0, [pc, #8]	@ (801e004 <strtol+0x10>)
 801dffc:	6800      	ldr	r0, [r0, #0]
 801dffe:	f7ff bf7f 	b.w	801df00 <_strtol_l.isra.0>
 801e002:	bf00      	nop
 801e004:	20000120 	.word	0x20000120

0801e008 <std>:
 801e008:	2300      	movs	r3, #0
 801e00a:	b510      	push	{r4, lr}
 801e00c:	4604      	mov	r4, r0
 801e00e:	e9c0 3300 	strd	r3, r3, [r0]
 801e012:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801e016:	6083      	str	r3, [r0, #8]
 801e018:	8181      	strh	r1, [r0, #12]
 801e01a:	6643      	str	r3, [r0, #100]	@ 0x64
 801e01c:	81c2      	strh	r2, [r0, #14]
 801e01e:	6183      	str	r3, [r0, #24]
 801e020:	4619      	mov	r1, r3
 801e022:	2208      	movs	r2, #8
 801e024:	305c      	adds	r0, #92	@ 0x5c
 801e026:	f000 f966 	bl	801e2f6 <memset>
 801e02a:	4b0d      	ldr	r3, [pc, #52]	@ (801e060 <std+0x58>)
 801e02c:	6263      	str	r3, [r4, #36]	@ 0x24
 801e02e:	4b0d      	ldr	r3, [pc, #52]	@ (801e064 <std+0x5c>)
 801e030:	62a3      	str	r3, [r4, #40]	@ 0x28
 801e032:	4b0d      	ldr	r3, [pc, #52]	@ (801e068 <std+0x60>)
 801e034:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801e036:	4b0d      	ldr	r3, [pc, #52]	@ (801e06c <std+0x64>)
 801e038:	6323      	str	r3, [r4, #48]	@ 0x30
 801e03a:	4b0d      	ldr	r3, [pc, #52]	@ (801e070 <std+0x68>)
 801e03c:	6224      	str	r4, [r4, #32]
 801e03e:	429c      	cmp	r4, r3
 801e040:	d006      	beq.n	801e050 <std+0x48>
 801e042:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801e046:	4294      	cmp	r4, r2
 801e048:	d002      	beq.n	801e050 <std+0x48>
 801e04a:	33d0      	adds	r3, #208	@ 0xd0
 801e04c:	429c      	cmp	r4, r3
 801e04e:	d105      	bne.n	801e05c <std+0x54>
 801e050:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801e054:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e058:	f000 ba40 	b.w	801e4dc <__retarget_lock_init_recursive>
 801e05c:	bd10      	pop	{r4, pc}
 801e05e:	bf00      	nop
 801e060:	0801e21d 	.word	0x0801e21d
 801e064:	0801e23f 	.word	0x0801e23f
 801e068:	0801e277 	.word	0x0801e277
 801e06c:	0801e29b 	.word	0x0801e29b
 801e070:	2000e810 	.word	0x2000e810

0801e074 <stdio_exit_handler>:
 801e074:	4a02      	ldr	r2, [pc, #8]	@ (801e080 <stdio_exit_handler+0xc>)
 801e076:	4903      	ldr	r1, [pc, #12]	@ (801e084 <stdio_exit_handler+0x10>)
 801e078:	4803      	ldr	r0, [pc, #12]	@ (801e088 <stdio_exit_handler+0x14>)
 801e07a:	f000 b869 	b.w	801e150 <_fwalk_sglue>
 801e07e:	bf00      	nop
 801e080:	20000114 	.word	0x20000114
 801e084:	0801f0a1 	.word	0x0801f0a1
 801e088:	20000124 	.word	0x20000124

0801e08c <cleanup_stdio>:
 801e08c:	6841      	ldr	r1, [r0, #4]
 801e08e:	4b0c      	ldr	r3, [pc, #48]	@ (801e0c0 <cleanup_stdio+0x34>)
 801e090:	4299      	cmp	r1, r3
 801e092:	b510      	push	{r4, lr}
 801e094:	4604      	mov	r4, r0
 801e096:	d001      	beq.n	801e09c <cleanup_stdio+0x10>
 801e098:	f001 f802 	bl	801f0a0 <_fflush_r>
 801e09c:	68a1      	ldr	r1, [r4, #8]
 801e09e:	4b09      	ldr	r3, [pc, #36]	@ (801e0c4 <cleanup_stdio+0x38>)
 801e0a0:	4299      	cmp	r1, r3
 801e0a2:	d002      	beq.n	801e0aa <cleanup_stdio+0x1e>
 801e0a4:	4620      	mov	r0, r4
 801e0a6:	f000 fffb 	bl	801f0a0 <_fflush_r>
 801e0aa:	68e1      	ldr	r1, [r4, #12]
 801e0ac:	4b06      	ldr	r3, [pc, #24]	@ (801e0c8 <cleanup_stdio+0x3c>)
 801e0ae:	4299      	cmp	r1, r3
 801e0b0:	d004      	beq.n	801e0bc <cleanup_stdio+0x30>
 801e0b2:	4620      	mov	r0, r4
 801e0b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e0b8:	f000 bff2 	b.w	801f0a0 <_fflush_r>
 801e0bc:	bd10      	pop	{r4, pc}
 801e0be:	bf00      	nop
 801e0c0:	2000e810 	.word	0x2000e810
 801e0c4:	2000e878 	.word	0x2000e878
 801e0c8:	2000e8e0 	.word	0x2000e8e0

0801e0cc <global_stdio_init.part.0>:
 801e0cc:	b510      	push	{r4, lr}
 801e0ce:	4b0b      	ldr	r3, [pc, #44]	@ (801e0fc <global_stdio_init.part.0+0x30>)
 801e0d0:	4c0b      	ldr	r4, [pc, #44]	@ (801e100 <global_stdio_init.part.0+0x34>)
 801e0d2:	4a0c      	ldr	r2, [pc, #48]	@ (801e104 <global_stdio_init.part.0+0x38>)
 801e0d4:	601a      	str	r2, [r3, #0]
 801e0d6:	4620      	mov	r0, r4
 801e0d8:	2200      	movs	r2, #0
 801e0da:	2104      	movs	r1, #4
 801e0dc:	f7ff ff94 	bl	801e008 <std>
 801e0e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801e0e4:	2201      	movs	r2, #1
 801e0e6:	2109      	movs	r1, #9
 801e0e8:	f7ff ff8e 	bl	801e008 <std>
 801e0ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801e0f0:	2202      	movs	r2, #2
 801e0f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e0f6:	2112      	movs	r1, #18
 801e0f8:	f7ff bf86 	b.w	801e008 <std>
 801e0fc:	2000e948 	.word	0x2000e948
 801e100:	2000e810 	.word	0x2000e810
 801e104:	0801e075 	.word	0x0801e075

0801e108 <__sfp_lock_acquire>:
 801e108:	4801      	ldr	r0, [pc, #4]	@ (801e110 <__sfp_lock_acquire+0x8>)
 801e10a:	f000 b9e8 	b.w	801e4de <__retarget_lock_acquire_recursive>
 801e10e:	bf00      	nop
 801e110:	2000e951 	.word	0x2000e951

0801e114 <__sfp_lock_release>:
 801e114:	4801      	ldr	r0, [pc, #4]	@ (801e11c <__sfp_lock_release+0x8>)
 801e116:	f000 b9e3 	b.w	801e4e0 <__retarget_lock_release_recursive>
 801e11a:	bf00      	nop
 801e11c:	2000e951 	.word	0x2000e951

0801e120 <__sinit>:
 801e120:	b510      	push	{r4, lr}
 801e122:	4604      	mov	r4, r0
 801e124:	f7ff fff0 	bl	801e108 <__sfp_lock_acquire>
 801e128:	6a23      	ldr	r3, [r4, #32]
 801e12a:	b11b      	cbz	r3, 801e134 <__sinit+0x14>
 801e12c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e130:	f7ff bff0 	b.w	801e114 <__sfp_lock_release>
 801e134:	4b04      	ldr	r3, [pc, #16]	@ (801e148 <__sinit+0x28>)
 801e136:	6223      	str	r3, [r4, #32]
 801e138:	4b04      	ldr	r3, [pc, #16]	@ (801e14c <__sinit+0x2c>)
 801e13a:	681b      	ldr	r3, [r3, #0]
 801e13c:	2b00      	cmp	r3, #0
 801e13e:	d1f5      	bne.n	801e12c <__sinit+0xc>
 801e140:	f7ff ffc4 	bl	801e0cc <global_stdio_init.part.0>
 801e144:	e7f2      	b.n	801e12c <__sinit+0xc>
 801e146:	bf00      	nop
 801e148:	0801e08d 	.word	0x0801e08d
 801e14c:	2000e948 	.word	0x2000e948

0801e150 <_fwalk_sglue>:
 801e150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e154:	4607      	mov	r7, r0
 801e156:	4688      	mov	r8, r1
 801e158:	4614      	mov	r4, r2
 801e15a:	2600      	movs	r6, #0
 801e15c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801e160:	f1b9 0901 	subs.w	r9, r9, #1
 801e164:	d505      	bpl.n	801e172 <_fwalk_sglue+0x22>
 801e166:	6824      	ldr	r4, [r4, #0]
 801e168:	2c00      	cmp	r4, #0
 801e16a:	d1f7      	bne.n	801e15c <_fwalk_sglue+0xc>
 801e16c:	4630      	mov	r0, r6
 801e16e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e172:	89ab      	ldrh	r3, [r5, #12]
 801e174:	2b01      	cmp	r3, #1
 801e176:	d907      	bls.n	801e188 <_fwalk_sglue+0x38>
 801e178:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801e17c:	3301      	adds	r3, #1
 801e17e:	d003      	beq.n	801e188 <_fwalk_sglue+0x38>
 801e180:	4629      	mov	r1, r5
 801e182:	4638      	mov	r0, r7
 801e184:	47c0      	blx	r8
 801e186:	4306      	orrs	r6, r0
 801e188:	3568      	adds	r5, #104	@ 0x68
 801e18a:	e7e9      	b.n	801e160 <_fwalk_sglue+0x10>

0801e18c <iprintf>:
 801e18c:	b40f      	push	{r0, r1, r2, r3}
 801e18e:	b507      	push	{r0, r1, r2, lr}
 801e190:	4906      	ldr	r1, [pc, #24]	@ (801e1ac <iprintf+0x20>)
 801e192:	ab04      	add	r3, sp, #16
 801e194:	6808      	ldr	r0, [r1, #0]
 801e196:	f853 2b04 	ldr.w	r2, [r3], #4
 801e19a:	6881      	ldr	r1, [r0, #8]
 801e19c:	9301      	str	r3, [sp, #4]
 801e19e:	f000 fc57 	bl	801ea50 <_vfiprintf_r>
 801e1a2:	b003      	add	sp, #12
 801e1a4:	f85d eb04 	ldr.w	lr, [sp], #4
 801e1a8:	b004      	add	sp, #16
 801e1aa:	4770      	bx	lr
 801e1ac:	20000120 	.word	0x20000120

0801e1b0 <sniprintf>:
 801e1b0:	b40c      	push	{r2, r3}
 801e1b2:	b530      	push	{r4, r5, lr}
 801e1b4:	4b18      	ldr	r3, [pc, #96]	@ (801e218 <sniprintf+0x68>)
 801e1b6:	1e0c      	subs	r4, r1, #0
 801e1b8:	681d      	ldr	r5, [r3, #0]
 801e1ba:	b09d      	sub	sp, #116	@ 0x74
 801e1bc:	da08      	bge.n	801e1d0 <sniprintf+0x20>
 801e1be:	238b      	movs	r3, #139	@ 0x8b
 801e1c0:	602b      	str	r3, [r5, #0]
 801e1c2:	f04f 30ff 	mov.w	r0, #4294967295
 801e1c6:	b01d      	add	sp, #116	@ 0x74
 801e1c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801e1cc:	b002      	add	sp, #8
 801e1ce:	4770      	bx	lr
 801e1d0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801e1d4:	f8ad 3014 	strh.w	r3, [sp, #20]
 801e1d8:	f04f 0300 	mov.w	r3, #0
 801e1dc:	931b      	str	r3, [sp, #108]	@ 0x6c
 801e1de:	bf14      	ite	ne
 801e1e0:	f104 33ff 	addne.w	r3, r4, #4294967295
 801e1e4:	4623      	moveq	r3, r4
 801e1e6:	9304      	str	r3, [sp, #16]
 801e1e8:	9307      	str	r3, [sp, #28]
 801e1ea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801e1ee:	9002      	str	r0, [sp, #8]
 801e1f0:	9006      	str	r0, [sp, #24]
 801e1f2:	f8ad 3016 	strh.w	r3, [sp, #22]
 801e1f6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801e1f8:	ab21      	add	r3, sp, #132	@ 0x84
 801e1fa:	a902      	add	r1, sp, #8
 801e1fc:	4628      	mov	r0, r5
 801e1fe:	9301      	str	r3, [sp, #4]
 801e200:	f000 fb00 	bl	801e804 <_svfiprintf_r>
 801e204:	1c43      	adds	r3, r0, #1
 801e206:	bfbc      	itt	lt
 801e208:	238b      	movlt	r3, #139	@ 0x8b
 801e20a:	602b      	strlt	r3, [r5, #0]
 801e20c:	2c00      	cmp	r4, #0
 801e20e:	d0da      	beq.n	801e1c6 <sniprintf+0x16>
 801e210:	9b02      	ldr	r3, [sp, #8]
 801e212:	2200      	movs	r2, #0
 801e214:	701a      	strb	r2, [r3, #0]
 801e216:	e7d6      	b.n	801e1c6 <sniprintf+0x16>
 801e218:	20000120 	.word	0x20000120

0801e21c <__sread>:
 801e21c:	b510      	push	{r4, lr}
 801e21e:	460c      	mov	r4, r1
 801e220:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e224:	f000 f90c 	bl	801e440 <_read_r>
 801e228:	2800      	cmp	r0, #0
 801e22a:	bfab      	itete	ge
 801e22c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801e22e:	89a3      	ldrhlt	r3, [r4, #12]
 801e230:	181b      	addge	r3, r3, r0
 801e232:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801e236:	bfac      	ite	ge
 801e238:	6563      	strge	r3, [r4, #84]	@ 0x54
 801e23a:	81a3      	strhlt	r3, [r4, #12]
 801e23c:	bd10      	pop	{r4, pc}

0801e23e <__swrite>:
 801e23e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e242:	461f      	mov	r7, r3
 801e244:	898b      	ldrh	r3, [r1, #12]
 801e246:	05db      	lsls	r3, r3, #23
 801e248:	4605      	mov	r5, r0
 801e24a:	460c      	mov	r4, r1
 801e24c:	4616      	mov	r6, r2
 801e24e:	d505      	bpl.n	801e25c <__swrite+0x1e>
 801e250:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e254:	2302      	movs	r3, #2
 801e256:	2200      	movs	r2, #0
 801e258:	f000 f8e0 	bl	801e41c <_lseek_r>
 801e25c:	89a3      	ldrh	r3, [r4, #12]
 801e25e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e262:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801e266:	81a3      	strh	r3, [r4, #12]
 801e268:	4632      	mov	r2, r6
 801e26a:	463b      	mov	r3, r7
 801e26c:	4628      	mov	r0, r5
 801e26e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e272:	f000 b8f7 	b.w	801e464 <_write_r>

0801e276 <__sseek>:
 801e276:	b510      	push	{r4, lr}
 801e278:	460c      	mov	r4, r1
 801e27a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e27e:	f000 f8cd 	bl	801e41c <_lseek_r>
 801e282:	1c43      	adds	r3, r0, #1
 801e284:	89a3      	ldrh	r3, [r4, #12]
 801e286:	bf15      	itete	ne
 801e288:	6560      	strne	r0, [r4, #84]	@ 0x54
 801e28a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801e28e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801e292:	81a3      	strheq	r3, [r4, #12]
 801e294:	bf18      	it	ne
 801e296:	81a3      	strhne	r3, [r4, #12]
 801e298:	bd10      	pop	{r4, pc}

0801e29a <__sclose>:
 801e29a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e29e:	f000 b84f 	b.w	801e340 <_close_r>

0801e2a2 <memcmp>:
 801e2a2:	b510      	push	{r4, lr}
 801e2a4:	3901      	subs	r1, #1
 801e2a6:	4402      	add	r2, r0
 801e2a8:	4290      	cmp	r0, r2
 801e2aa:	d101      	bne.n	801e2b0 <memcmp+0xe>
 801e2ac:	2000      	movs	r0, #0
 801e2ae:	e005      	b.n	801e2bc <memcmp+0x1a>
 801e2b0:	7803      	ldrb	r3, [r0, #0]
 801e2b2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801e2b6:	42a3      	cmp	r3, r4
 801e2b8:	d001      	beq.n	801e2be <memcmp+0x1c>
 801e2ba:	1b18      	subs	r0, r3, r4
 801e2bc:	bd10      	pop	{r4, pc}
 801e2be:	3001      	adds	r0, #1
 801e2c0:	e7f2      	b.n	801e2a8 <memcmp+0x6>

0801e2c2 <memmove>:
 801e2c2:	4288      	cmp	r0, r1
 801e2c4:	b510      	push	{r4, lr}
 801e2c6:	eb01 0402 	add.w	r4, r1, r2
 801e2ca:	d902      	bls.n	801e2d2 <memmove+0x10>
 801e2cc:	4284      	cmp	r4, r0
 801e2ce:	4623      	mov	r3, r4
 801e2d0:	d807      	bhi.n	801e2e2 <memmove+0x20>
 801e2d2:	1e43      	subs	r3, r0, #1
 801e2d4:	42a1      	cmp	r1, r4
 801e2d6:	d008      	beq.n	801e2ea <memmove+0x28>
 801e2d8:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e2dc:	f803 2f01 	strb.w	r2, [r3, #1]!
 801e2e0:	e7f8      	b.n	801e2d4 <memmove+0x12>
 801e2e2:	4402      	add	r2, r0
 801e2e4:	4601      	mov	r1, r0
 801e2e6:	428a      	cmp	r2, r1
 801e2e8:	d100      	bne.n	801e2ec <memmove+0x2a>
 801e2ea:	bd10      	pop	{r4, pc}
 801e2ec:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801e2f0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801e2f4:	e7f7      	b.n	801e2e6 <memmove+0x24>

0801e2f6 <memset>:
 801e2f6:	4402      	add	r2, r0
 801e2f8:	4603      	mov	r3, r0
 801e2fa:	4293      	cmp	r3, r2
 801e2fc:	d100      	bne.n	801e300 <memset+0xa>
 801e2fe:	4770      	bx	lr
 801e300:	f803 1b01 	strb.w	r1, [r3], #1
 801e304:	e7f9      	b.n	801e2fa <memset+0x4>

0801e306 <strcat>:
 801e306:	b510      	push	{r4, lr}
 801e308:	4602      	mov	r2, r0
 801e30a:	7814      	ldrb	r4, [r2, #0]
 801e30c:	4613      	mov	r3, r2
 801e30e:	3201      	adds	r2, #1
 801e310:	2c00      	cmp	r4, #0
 801e312:	d1fa      	bne.n	801e30a <strcat+0x4>
 801e314:	3b01      	subs	r3, #1
 801e316:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e31a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801e31e:	2a00      	cmp	r2, #0
 801e320:	d1f9      	bne.n	801e316 <strcat+0x10>
 801e322:	bd10      	pop	{r4, pc}

0801e324 <strchr>:
 801e324:	b2c9      	uxtb	r1, r1
 801e326:	4603      	mov	r3, r0
 801e328:	4618      	mov	r0, r3
 801e32a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e32e:	b112      	cbz	r2, 801e336 <strchr+0x12>
 801e330:	428a      	cmp	r2, r1
 801e332:	d1f9      	bne.n	801e328 <strchr+0x4>
 801e334:	4770      	bx	lr
 801e336:	2900      	cmp	r1, #0
 801e338:	bf18      	it	ne
 801e33a:	2000      	movne	r0, #0
 801e33c:	4770      	bx	lr
	...

0801e340 <_close_r>:
 801e340:	b538      	push	{r3, r4, r5, lr}
 801e342:	4d06      	ldr	r5, [pc, #24]	@ (801e35c <_close_r+0x1c>)
 801e344:	2300      	movs	r3, #0
 801e346:	4604      	mov	r4, r0
 801e348:	4608      	mov	r0, r1
 801e34a:	602b      	str	r3, [r5, #0]
 801e34c:	f7e5 ffba 	bl	80042c4 <_close>
 801e350:	1c43      	adds	r3, r0, #1
 801e352:	d102      	bne.n	801e35a <_close_r+0x1a>
 801e354:	682b      	ldr	r3, [r5, #0]
 801e356:	b103      	cbz	r3, 801e35a <_close_r+0x1a>
 801e358:	6023      	str	r3, [r4, #0]
 801e35a:	bd38      	pop	{r3, r4, r5, pc}
 801e35c:	2000e94c 	.word	0x2000e94c

0801e360 <_reclaim_reent>:
 801e360:	4b2d      	ldr	r3, [pc, #180]	@ (801e418 <_reclaim_reent+0xb8>)
 801e362:	681b      	ldr	r3, [r3, #0]
 801e364:	4283      	cmp	r3, r0
 801e366:	b570      	push	{r4, r5, r6, lr}
 801e368:	4604      	mov	r4, r0
 801e36a:	d053      	beq.n	801e414 <_reclaim_reent+0xb4>
 801e36c:	69c3      	ldr	r3, [r0, #28]
 801e36e:	b31b      	cbz	r3, 801e3b8 <_reclaim_reent+0x58>
 801e370:	68db      	ldr	r3, [r3, #12]
 801e372:	b163      	cbz	r3, 801e38e <_reclaim_reent+0x2e>
 801e374:	2500      	movs	r5, #0
 801e376:	69e3      	ldr	r3, [r4, #28]
 801e378:	68db      	ldr	r3, [r3, #12]
 801e37a:	5959      	ldr	r1, [r3, r5]
 801e37c:	b9b1      	cbnz	r1, 801e3ac <_reclaim_reent+0x4c>
 801e37e:	3504      	adds	r5, #4
 801e380:	2d80      	cmp	r5, #128	@ 0x80
 801e382:	d1f8      	bne.n	801e376 <_reclaim_reent+0x16>
 801e384:	69e3      	ldr	r3, [r4, #28]
 801e386:	4620      	mov	r0, r4
 801e388:	68d9      	ldr	r1, [r3, #12]
 801e38a:	f000 f8df 	bl	801e54c <_free_r>
 801e38e:	69e3      	ldr	r3, [r4, #28]
 801e390:	6819      	ldr	r1, [r3, #0]
 801e392:	b111      	cbz	r1, 801e39a <_reclaim_reent+0x3a>
 801e394:	4620      	mov	r0, r4
 801e396:	f000 f8d9 	bl	801e54c <_free_r>
 801e39a:	69e3      	ldr	r3, [r4, #28]
 801e39c:	689d      	ldr	r5, [r3, #8]
 801e39e:	b15d      	cbz	r5, 801e3b8 <_reclaim_reent+0x58>
 801e3a0:	4629      	mov	r1, r5
 801e3a2:	4620      	mov	r0, r4
 801e3a4:	682d      	ldr	r5, [r5, #0]
 801e3a6:	f000 f8d1 	bl	801e54c <_free_r>
 801e3aa:	e7f8      	b.n	801e39e <_reclaim_reent+0x3e>
 801e3ac:	680e      	ldr	r6, [r1, #0]
 801e3ae:	4620      	mov	r0, r4
 801e3b0:	f000 f8cc 	bl	801e54c <_free_r>
 801e3b4:	4631      	mov	r1, r6
 801e3b6:	e7e1      	b.n	801e37c <_reclaim_reent+0x1c>
 801e3b8:	6961      	ldr	r1, [r4, #20]
 801e3ba:	b111      	cbz	r1, 801e3c2 <_reclaim_reent+0x62>
 801e3bc:	4620      	mov	r0, r4
 801e3be:	f000 f8c5 	bl	801e54c <_free_r>
 801e3c2:	69e1      	ldr	r1, [r4, #28]
 801e3c4:	b111      	cbz	r1, 801e3cc <_reclaim_reent+0x6c>
 801e3c6:	4620      	mov	r0, r4
 801e3c8:	f000 f8c0 	bl	801e54c <_free_r>
 801e3cc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801e3ce:	b111      	cbz	r1, 801e3d6 <_reclaim_reent+0x76>
 801e3d0:	4620      	mov	r0, r4
 801e3d2:	f000 f8bb 	bl	801e54c <_free_r>
 801e3d6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801e3d8:	b111      	cbz	r1, 801e3e0 <_reclaim_reent+0x80>
 801e3da:	4620      	mov	r0, r4
 801e3dc:	f000 f8b6 	bl	801e54c <_free_r>
 801e3e0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801e3e2:	b111      	cbz	r1, 801e3ea <_reclaim_reent+0x8a>
 801e3e4:	4620      	mov	r0, r4
 801e3e6:	f000 f8b1 	bl	801e54c <_free_r>
 801e3ea:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801e3ec:	b111      	cbz	r1, 801e3f4 <_reclaim_reent+0x94>
 801e3ee:	4620      	mov	r0, r4
 801e3f0:	f000 f8ac 	bl	801e54c <_free_r>
 801e3f4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801e3f6:	b111      	cbz	r1, 801e3fe <_reclaim_reent+0x9e>
 801e3f8:	4620      	mov	r0, r4
 801e3fa:	f000 f8a7 	bl	801e54c <_free_r>
 801e3fe:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801e400:	b111      	cbz	r1, 801e408 <_reclaim_reent+0xa8>
 801e402:	4620      	mov	r0, r4
 801e404:	f000 f8a2 	bl	801e54c <_free_r>
 801e408:	6a23      	ldr	r3, [r4, #32]
 801e40a:	b11b      	cbz	r3, 801e414 <_reclaim_reent+0xb4>
 801e40c:	4620      	mov	r0, r4
 801e40e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e412:	4718      	bx	r3
 801e414:	bd70      	pop	{r4, r5, r6, pc}
 801e416:	bf00      	nop
 801e418:	20000120 	.word	0x20000120

0801e41c <_lseek_r>:
 801e41c:	b538      	push	{r3, r4, r5, lr}
 801e41e:	4d07      	ldr	r5, [pc, #28]	@ (801e43c <_lseek_r+0x20>)
 801e420:	4604      	mov	r4, r0
 801e422:	4608      	mov	r0, r1
 801e424:	4611      	mov	r1, r2
 801e426:	2200      	movs	r2, #0
 801e428:	602a      	str	r2, [r5, #0]
 801e42a:	461a      	mov	r2, r3
 801e42c:	f7e5 ff71 	bl	8004312 <_lseek>
 801e430:	1c43      	adds	r3, r0, #1
 801e432:	d102      	bne.n	801e43a <_lseek_r+0x1e>
 801e434:	682b      	ldr	r3, [r5, #0]
 801e436:	b103      	cbz	r3, 801e43a <_lseek_r+0x1e>
 801e438:	6023      	str	r3, [r4, #0]
 801e43a:	bd38      	pop	{r3, r4, r5, pc}
 801e43c:	2000e94c 	.word	0x2000e94c

0801e440 <_read_r>:
 801e440:	b538      	push	{r3, r4, r5, lr}
 801e442:	4d07      	ldr	r5, [pc, #28]	@ (801e460 <_read_r+0x20>)
 801e444:	4604      	mov	r4, r0
 801e446:	4608      	mov	r0, r1
 801e448:	4611      	mov	r1, r2
 801e44a:	2200      	movs	r2, #0
 801e44c:	602a      	str	r2, [r5, #0]
 801e44e:	461a      	mov	r2, r3
 801e450:	f7e5 feff 	bl	8004252 <_read>
 801e454:	1c43      	adds	r3, r0, #1
 801e456:	d102      	bne.n	801e45e <_read_r+0x1e>
 801e458:	682b      	ldr	r3, [r5, #0]
 801e45a:	b103      	cbz	r3, 801e45e <_read_r+0x1e>
 801e45c:	6023      	str	r3, [r4, #0]
 801e45e:	bd38      	pop	{r3, r4, r5, pc}
 801e460:	2000e94c 	.word	0x2000e94c

0801e464 <_write_r>:
 801e464:	b538      	push	{r3, r4, r5, lr}
 801e466:	4d07      	ldr	r5, [pc, #28]	@ (801e484 <_write_r+0x20>)
 801e468:	4604      	mov	r4, r0
 801e46a:	4608      	mov	r0, r1
 801e46c:	4611      	mov	r1, r2
 801e46e:	2200      	movs	r2, #0
 801e470:	602a      	str	r2, [r5, #0]
 801e472:	461a      	mov	r2, r3
 801e474:	f7e5 ff0a 	bl	800428c <_write>
 801e478:	1c43      	adds	r3, r0, #1
 801e47a:	d102      	bne.n	801e482 <_write_r+0x1e>
 801e47c:	682b      	ldr	r3, [r5, #0]
 801e47e:	b103      	cbz	r3, 801e482 <_write_r+0x1e>
 801e480:	6023      	str	r3, [r4, #0]
 801e482:	bd38      	pop	{r3, r4, r5, pc}
 801e484:	2000e94c 	.word	0x2000e94c

0801e488 <__errno>:
 801e488:	4b01      	ldr	r3, [pc, #4]	@ (801e490 <__errno+0x8>)
 801e48a:	6818      	ldr	r0, [r3, #0]
 801e48c:	4770      	bx	lr
 801e48e:	bf00      	nop
 801e490:	20000120 	.word	0x20000120

0801e494 <__libc_init_array>:
 801e494:	b570      	push	{r4, r5, r6, lr}
 801e496:	4d0d      	ldr	r5, [pc, #52]	@ (801e4cc <__libc_init_array+0x38>)
 801e498:	4c0d      	ldr	r4, [pc, #52]	@ (801e4d0 <__libc_init_array+0x3c>)
 801e49a:	1b64      	subs	r4, r4, r5
 801e49c:	10a4      	asrs	r4, r4, #2
 801e49e:	2600      	movs	r6, #0
 801e4a0:	42a6      	cmp	r6, r4
 801e4a2:	d109      	bne.n	801e4b8 <__libc_init_array+0x24>
 801e4a4:	4d0b      	ldr	r5, [pc, #44]	@ (801e4d4 <__libc_init_array+0x40>)
 801e4a6:	4c0c      	ldr	r4, [pc, #48]	@ (801e4d8 <__libc_init_array+0x44>)
 801e4a8:	f000 ffde 	bl	801f468 <_init>
 801e4ac:	1b64      	subs	r4, r4, r5
 801e4ae:	10a4      	asrs	r4, r4, #2
 801e4b0:	2600      	movs	r6, #0
 801e4b2:	42a6      	cmp	r6, r4
 801e4b4:	d105      	bne.n	801e4c2 <__libc_init_array+0x2e>
 801e4b6:	bd70      	pop	{r4, r5, r6, pc}
 801e4b8:	f855 3b04 	ldr.w	r3, [r5], #4
 801e4bc:	4798      	blx	r3
 801e4be:	3601      	adds	r6, #1
 801e4c0:	e7ee      	b.n	801e4a0 <__libc_init_array+0xc>
 801e4c2:	f855 3b04 	ldr.w	r3, [r5], #4
 801e4c6:	4798      	blx	r3
 801e4c8:	3601      	adds	r6, #1
 801e4ca:	e7f2      	b.n	801e4b2 <__libc_init_array+0x1e>
 801e4cc:	08023fa4 	.word	0x08023fa4
 801e4d0:	08023fa4 	.word	0x08023fa4
 801e4d4:	08023fa4 	.word	0x08023fa4
 801e4d8:	08023fa8 	.word	0x08023fa8

0801e4dc <__retarget_lock_init_recursive>:
 801e4dc:	4770      	bx	lr

0801e4de <__retarget_lock_acquire_recursive>:
 801e4de:	4770      	bx	lr

0801e4e0 <__retarget_lock_release_recursive>:
 801e4e0:	4770      	bx	lr

0801e4e2 <strcpy>:
 801e4e2:	4603      	mov	r3, r0
 801e4e4:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e4e8:	f803 2b01 	strb.w	r2, [r3], #1
 801e4ec:	2a00      	cmp	r2, #0
 801e4ee:	d1f9      	bne.n	801e4e4 <strcpy+0x2>
 801e4f0:	4770      	bx	lr

0801e4f2 <memcpy>:
 801e4f2:	440a      	add	r2, r1
 801e4f4:	4291      	cmp	r1, r2
 801e4f6:	f100 33ff 	add.w	r3, r0, #4294967295
 801e4fa:	d100      	bne.n	801e4fe <memcpy+0xc>
 801e4fc:	4770      	bx	lr
 801e4fe:	b510      	push	{r4, lr}
 801e500:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e504:	f803 4f01 	strb.w	r4, [r3, #1]!
 801e508:	4291      	cmp	r1, r2
 801e50a:	d1f9      	bne.n	801e500 <memcpy+0xe>
 801e50c:	bd10      	pop	{r4, pc}
	...

0801e510 <__assert_func>:
 801e510:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e512:	4614      	mov	r4, r2
 801e514:	461a      	mov	r2, r3
 801e516:	4b09      	ldr	r3, [pc, #36]	@ (801e53c <__assert_func+0x2c>)
 801e518:	681b      	ldr	r3, [r3, #0]
 801e51a:	4605      	mov	r5, r0
 801e51c:	68d8      	ldr	r0, [r3, #12]
 801e51e:	b14c      	cbz	r4, 801e534 <__assert_func+0x24>
 801e520:	4b07      	ldr	r3, [pc, #28]	@ (801e540 <__assert_func+0x30>)
 801e522:	9100      	str	r1, [sp, #0]
 801e524:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801e528:	4906      	ldr	r1, [pc, #24]	@ (801e544 <__assert_func+0x34>)
 801e52a:	462b      	mov	r3, r5
 801e52c:	f000 fde0 	bl	801f0f0 <fiprintf>
 801e530:	f000 fe94 	bl	801f25c <abort>
 801e534:	4b04      	ldr	r3, [pc, #16]	@ (801e548 <__assert_func+0x38>)
 801e536:	461c      	mov	r4, r3
 801e538:	e7f3      	b.n	801e522 <__assert_func+0x12>
 801e53a:	bf00      	nop
 801e53c:	20000120 	.word	0x20000120
 801e540:	08023e2b 	.word	0x08023e2b
 801e544:	08023e38 	.word	0x08023e38
 801e548:	08023e66 	.word	0x08023e66

0801e54c <_free_r>:
 801e54c:	b538      	push	{r3, r4, r5, lr}
 801e54e:	4605      	mov	r5, r0
 801e550:	2900      	cmp	r1, #0
 801e552:	d041      	beq.n	801e5d8 <_free_r+0x8c>
 801e554:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e558:	1f0c      	subs	r4, r1, #4
 801e55a:	2b00      	cmp	r3, #0
 801e55c:	bfb8      	it	lt
 801e55e:	18e4      	addlt	r4, r4, r3
 801e560:	f000 f8e8 	bl	801e734 <__malloc_lock>
 801e564:	4a1d      	ldr	r2, [pc, #116]	@ (801e5dc <_free_r+0x90>)
 801e566:	6813      	ldr	r3, [r2, #0]
 801e568:	b933      	cbnz	r3, 801e578 <_free_r+0x2c>
 801e56a:	6063      	str	r3, [r4, #4]
 801e56c:	6014      	str	r4, [r2, #0]
 801e56e:	4628      	mov	r0, r5
 801e570:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e574:	f000 b8e4 	b.w	801e740 <__malloc_unlock>
 801e578:	42a3      	cmp	r3, r4
 801e57a:	d908      	bls.n	801e58e <_free_r+0x42>
 801e57c:	6820      	ldr	r0, [r4, #0]
 801e57e:	1821      	adds	r1, r4, r0
 801e580:	428b      	cmp	r3, r1
 801e582:	bf01      	itttt	eq
 801e584:	6819      	ldreq	r1, [r3, #0]
 801e586:	685b      	ldreq	r3, [r3, #4]
 801e588:	1809      	addeq	r1, r1, r0
 801e58a:	6021      	streq	r1, [r4, #0]
 801e58c:	e7ed      	b.n	801e56a <_free_r+0x1e>
 801e58e:	461a      	mov	r2, r3
 801e590:	685b      	ldr	r3, [r3, #4]
 801e592:	b10b      	cbz	r3, 801e598 <_free_r+0x4c>
 801e594:	42a3      	cmp	r3, r4
 801e596:	d9fa      	bls.n	801e58e <_free_r+0x42>
 801e598:	6811      	ldr	r1, [r2, #0]
 801e59a:	1850      	adds	r0, r2, r1
 801e59c:	42a0      	cmp	r0, r4
 801e59e:	d10b      	bne.n	801e5b8 <_free_r+0x6c>
 801e5a0:	6820      	ldr	r0, [r4, #0]
 801e5a2:	4401      	add	r1, r0
 801e5a4:	1850      	adds	r0, r2, r1
 801e5a6:	4283      	cmp	r3, r0
 801e5a8:	6011      	str	r1, [r2, #0]
 801e5aa:	d1e0      	bne.n	801e56e <_free_r+0x22>
 801e5ac:	6818      	ldr	r0, [r3, #0]
 801e5ae:	685b      	ldr	r3, [r3, #4]
 801e5b0:	6053      	str	r3, [r2, #4]
 801e5b2:	4408      	add	r0, r1
 801e5b4:	6010      	str	r0, [r2, #0]
 801e5b6:	e7da      	b.n	801e56e <_free_r+0x22>
 801e5b8:	d902      	bls.n	801e5c0 <_free_r+0x74>
 801e5ba:	230c      	movs	r3, #12
 801e5bc:	602b      	str	r3, [r5, #0]
 801e5be:	e7d6      	b.n	801e56e <_free_r+0x22>
 801e5c0:	6820      	ldr	r0, [r4, #0]
 801e5c2:	1821      	adds	r1, r4, r0
 801e5c4:	428b      	cmp	r3, r1
 801e5c6:	bf04      	itt	eq
 801e5c8:	6819      	ldreq	r1, [r3, #0]
 801e5ca:	685b      	ldreq	r3, [r3, #4]
 801e5cc:	6063      	str	r3, [r4, #4]
 801e5ce:	bf04      	itt	eq
 801e5d0:	1809      	addeq	r1, r1, r0
 801e5d2:	6021      	streq	r1, [r4, #0]
 801e5d4:	6054      	str	r4, [r2, #4]
 801e5d6:	e7ca      	b.n	801e56e <_free_r+0x22>
 801e5d8:	bd38      	pop	{r3, r4, r5, pc}
 801e5da:	bf00      	nop
 801e5dc:	2000e958 	.word	0x2000e958

0801e5e0 <malloc>:
 801e5e0:	4b02      	ldr	r3, [pc, #8]	@ (801e5ec <malloc+0xc>)
 801e5e2:	4601      	mov	r1, r0
 801e5e4:	6818      	ldr	r0, [r3, #0]
 801e5e6:	f000 b825 	b.w	801e634 <_malloc_r>
 801e5ea:	bf00      	nop
 801e5ec:	20000120 	.word	0x20000120

0801e5f0 <sbrk_aligned>:
 801e5f0:	b570      	push	{r4, r5, r6, lr}
 801e5f2:	4e0f      	ldr	r6, [pc, #60]	@ (801e630 <sbrk_aligned+0x40>)
 801e5f4:	460c      	mov	r4, r1
 801e5f6:	6831      	ldr	r1, [r6, #0]
 801e5f8:	4605      	mov	r5, r0
 801e5fa:	b911      	cbnz	r1, 801e602 <sbrk_aligned+0x12>
 801e5fc:	f000 fe1e 	bl	801f23c <_sbrk_r>
 801e600:	6030      	str	r0, [r6, #0]
 801e602:	4621      	mov	r1, r4
 801e604:	4628      	mov	r0, r5
 801e606:	f000 fe19 	bl	801f23c <_sbrk_r>
 801e60a:	1c43      	adds	r3, r0, #1
 801e60c:	d103      	bne.n	801e616 <sbrk_aligned+0x26>
 801e60e:	f04f 34ff 	mov.w	r4, #4294967295
 801e612:	4620      	mov	r0, r4
 801e614:	bd70      	pop	{r4, r5, r6, pc}
 801e616:	1cc4      	adds	r4, r0, #3
 801e618:	f024 0403 	bic.w	r4, r4, #3
 801e61c:	42a0      	cmp	r0, r4
 801e61e:	d0f8      	beq.n	801e612 <sbrk_aligned+0x22>
 801e620:	1a21      	subs	r1, r4, r0
 801e622:	4628      	mov	r0, r5
 801e624:	f000 fe0a 	bl	801f23c <_sbrk_r>
 801e628:	3001      	adds	r0, #1
 801e62a:	d1f2      	bne.n	801e612 <sbrk_aligned+0x22>
 801e62c:	e7ef      	b.n	801e60e <sbrk_aligned+0x1e>
 801e62e:	bf00      	nop
 801e630:	2000e954 	.word	0x2000e954

0801e634 <_malloc_r>:
 801e634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e638:	1ccd      	adds	r5, r1, #3
 801e63a:	f025 0503 	bic.w	r5, r5, #3
 801e63e:	3508      	adds	r5, #8
 801e640:	2d0c      	cmp	r5, #12
 801e642:	bf38      	it	cc
 801e644:	250c      	movcc	r5, #12
 801e646:	2d00      	cmp	r5, #0
 801e648:	4606      	mov	r6, r0
 801e64a:	db01      	blt.n	801e650 <_malloc_r+0x1c>
 801e64c:	42a9      	cmp	r1, r5
 801e64e:	d904      	bls.n	801e65a <_malloc_r+0x26>
 801e650:	230c      	movs	r3, #12
 801e652:	6033      	str	r3, [r6, #0]
 801e654:	2000      	movs	r0, #0
 801e656:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e65a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801e730 <_malloc_r+0xfc>
 801e65e:	f000 f869 	bl	801e734 <__malloc_lock>
 801e662:	f8d8 3000 	ldr.w	r3, [r8]
 801e666:	461c      	mov	r4, r3
 801e668:	bb44      	cbnz	r4, 801e6bc <_malloc_r+0x88>
 801e66a:	4629      	mov	r1, r5
 801e66c:	4630      	mov	r0, r6
 801e66e:	f7ff ffbf 	bl	801e5f0 <sbrk_aligned>
 801e672:	1c43      	adds	r3, r0, #1
 801e674:	4604      	mov	r4, r0
 801e676:	d158      	bne.n	801e72a <_malloc_r+0xf6>
 801e678:	f8d8 4000 	ldr.w	r4, [r8]
 801e67c:	4627      	mov	r7, r4
 801e67e:	2f00      	cmp	r7, #0
 801e680:	d143      	bne.n	801e70a <_malloc_r+0xd6>
 801e682:	2c00      	cmp	r4, #0
 801e684:	d04b      	beq.n	801e71e <_malloc_r+0xea>
 801e686:	6823      	ldr	r3, [r4, #0]
 801e688:	4639      	mov	r1, r7
 801e68a:	4630      	mov	r0, r6
 801e68c:	eb04 0903 	add.w	r9, r4, r3
 801e690:	f000 fdd4 	bl	801f23c <_sbrk_r>
 801e694:	4581      	cmp	r9, r0
 801e696:	d142      	bne.n	801e71e <_malloc_r+0xea>
 801e698:	6821      	ldr	r1, [r4, #0]
 801e69a:	1a6d      	subs	r5, r5, r1
 801e69c:	4629      	mov	r1, r5
 801e69e:	4630      	mov	r0, r6
 801e6a0:	f7ff ffa6 	bl	801e5f0 <sbrk_aligned>
 801e6a4:	3001      	adds	r0, #1
 801e6a6:	d03a      	beq.n	801e71e <_malloc_r+0xea>
 801e6a8:	6823      	ldr	r3, [r4, #0]
 801e6aa:	442b      	add	r3, r5
 801e6ac:	6023      	str	r3, [r4, #0]
 801e6ae:	f8d8 3000 	ldr.w	r3, [r8]
 801e6b2:	685a      	ldr	r2, [r3, #4]
 801e6b4:	bb62      	cbnz	r2, 801e710 <_malloc_r+0xdc>
 801e6b6:	f8c8 7000 	str.w	r7, [r8]
 801e6ba:	e00f      	b.n	801e6dc <_malloc_r+0xa8>
 801e6bc:	6822      	ldr	r2, [r4, #0]
 801e6be:	1b52      	subs	r2, r2, r5
 801e6c0:	d420      	bmi.n	801e704 <_malloc_r+0xd0>
 801e6c2:	2a0b      	cmp	r2, #11
 801e6c4:	d917      	bls.n	801e6f6 <_malloc_r+0xc2>
 801e6c6:	1961      	adds	r1, r4, r5
 801e6c8:	42a3      	cmp	r3, r4
 801e6ca:	6025      	str	r5, [r4, #0]
 801e6cc:	bf18      	it	ne
 801e6ce:	6059      	strne	r1, [r3, #4]
 801e6d0:	6863      	ldr	r3, [r4, #4]
 801e6d2:	bf08      	it	eq
 801e6d4:	f8c8 1000 	streq.w	r1, [r8]
 801e6d8:	5162      	str	r2, [r4, r5]
 801e6da:	604b      	str	r3, [r1, #4]
 801e6dc:	4630      	mov	r0, r6
 801e6de:	f000 f82f 	bl	801e740 <__malloc_unlock>
 801e6e2:	f104 000b 	add.w	r0, r4, #11
 801e6e6:	1d23      	adds	r3, r4, #4
 801e6e8:	f020 0007 	bic.w	r0, r0, #7
 801e6ec:	1ac2      	subs	r2, r0, r3
 801e6ee:	bf1c      	itt	ne
 801e6f0:	1a1b      	subne	r3, r3, r0
 801e6f2:	50a3      	strne	r3, [r4, r2]
 801e6f4:	e7af      	b.n	801e656 <_malloc_r+0x22>
 801e6f6:	6862      	ldr	r2, [r4, #4]
 801e6f8:	42a3      	cmp	r3, r4
 801e6fa:	bf0c      	ite	eq
 801e6fc:	f8c8 2000 	streq.w	r2, [r8]
 801e700:	605a      	strne	r2, [r3, #4]
 801e702:	e7eb      	b.n	801e6dc <_malloc_r+0xa8>
 801e704:	4623      	mov	r3, r4
 801e706:	6864      	ldr	r4, [r4, #4]
 801e708:	e7ae      	b.n	801e668 <_malloc_r+0x34>
 801e70a:	463c      	mov	r4, r7
 801e70c:	687f      	ldr	r7, [r7, #4]
 801e70e:	e7b6      	b.n	801e67e <_malloc_r+0x4a>
 801e710:	461a      	mov	r2, r3
 801e712:	685b      	ldr	r3, [r3, #4]
 801e714:	42a3      	cmp	r3, r4
 801e716:	d1fb      	bne.n	801e710 <_malloc_r+0xdc>
 801e718:	2300      	movs	r3, #0
 801e71a:	6053      	str	r3, [r2, #4]
 801e71c:	e7de      	b.n	801e6dc <_malloc_r+0xa8>
 801e71e:	230c      	movs	r3, #12
 801e720:	6033      	str	r3, [r6, #0]
 801e722:	4630      	mov	r0, r6
 801e724:	f000 f80c 	bl	801e740 <__malloc_unlock>
 801e728:	e794      	b.n	801e654 <_malloc_r+0x20>
 801e72a:	6005      	str	r5, [r0, #0]
 801e72c:	e7d6      	b.n	801e6dc <_malloc_r+0xa8>
 801e72e:	bf00      	nop
 801e730:	2000e958 	.word	0x2000e958

0801e734 <__malloc_lock>:
 801e734:	4801      	ldr	r0, [pc, #4]	@ (801e73c <__malloc_lock+0x8>)
 801e736:	f7ff bed2 	b.w	801e4de <__retarget_lock_acquire_recursive>
 801e73a:	bf00      	nop
 801e73c:	2000e950 	.word	0x2000e950

0801e740 <__malloc_unlock>:
 801e740:	4801      	ldr	r0, [pc, #4]	@ (801e748 <__malloc_unlock+0x8>)
 801e742:	f7ff becd 	b.w	801e4e0 <__retarget_lock_release_recursive>
 801e746:	bf00      	nop
 801e748:	2000e950 	.word	0x2000e950

0801e74c <__ssputs_r>:
 801e74c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e750:	688e      	ldr	r6, [r1, #8]
 801e752:	461f      	mov	r7, r3
 801e754:	42be      	cmp	r6, r7
 801e756:	680b      	ldr	r3, [r1, #0]
 801e758:	4682      	mov	sl, r0
 801e75a:	460c      	mov	r4, r1
 801e75c:	4690      	mov	r8, r2
 801e75e:	d82d      	bhi.n	801e7bc <__ssputs_r+0x70>
 801e760:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801e764:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801e768:	d026      	beq.n	801e7b8 <__ssputs_r+0x6c>
 801e76a:	6965      	ldr	r5, [r4, #20]
 801e76c:	6909      	ldr	r1, [r1, #16]
 801e76e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e772:	eba3 0901 	sub.w	r9, r3, r1
 801e776:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801e77a:	1c7b      	adds	r3, r7, #1
 801e77c:	444b      	add	r3, r9
 801e77e:	106d      	asrs	r5, r5, #1
 801e780:	429d      	cmp	r5, r3
 801e782:	bf38      	it	cc
 801e784:	461d      	movcc	r5, r3
 801e786:	0553      	lsls	r3, r2, #21
 801e788:	d527      	bpl.n	801e7da <__ssputs_r+0x8e>
 801e78a:	4629      	mov	r1, r5
 801e78c:	f7ff ff52 	bl	801e634 <_malloc_r>
 801e790:	4606      	mov	r6, r0
 801e792:	b360      	cbz	r0, 801e7ee <__ssputs_r+0xa2>
 801e794:	6921      	ldr	r1, [r4, #16]
 801e796:	464a      	mov	r2, r9
 801e798:	f7ff feab 	bl	801e4f2 <memcpy>
 801e79c:	89a3      	ldrh	r3, [r4, #12]
 801e79e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801e7a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801e7a6:	81a3      	strh	r3, [r4, #12]
 801e7a8:	6126      	str	r6, [r4, #16]
 801e7aa:	6165      	str	r5, [r4, #20]
 801e7ac:	444e      	add	r6, r9
 801e7ae:	eba5 0509 	sub.w	r5, r5, r9
 801e7b2:	6026      	str	r6, [r4, #0]
 801e7b4:	60a5      	str	r5, [r4, #8]
 801e7b6:	463e      	mov	r6, r7
 801e7b8:	42be      	cmp	r6, r7
 801e7ba:	d900      	bls.n	801e7be <__ssputs_r+0x72>
 801e7bc:	463e      	mov	r6, r7
 801e7be:	6820      	ldr	r0, [r4, #0]
 801e7c0:	4632      	mov	r2, r6
 801e7c2:	4641      	mov	r1, r8
 801e7c4:	f7ff fd7d 	bl	801e2c2 <memmove>
 801e7c8:	68a3      	ldr	r3, [r4, #8]
 801e7ca:	1b9b      	subs	r3, r3, r6
 801e7cc:	60a3      	str	r3, [r4, #8]
 801e7ce:	6823      	ldr	r3, [r4, #0]
 801e7d0:	4433      	add	r3, r6
 801e7d2:	6023      	str	r3, [r4, #0]
 801e7d4:	2000      	movs	r0, #0
 801e7d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e7da:	462a      	mov	r2, r5
 801e7dc:	f000 fd45 	bl	801f26a <_realloc_r>
 801e7e0:	4606      	mov	r6, r0
 801e7e2:	2800      	cmp	r0, #0
 801e7e4:	d1e0      	bne.n	801e7a8 <__ssputs_r+0x5c>
 801e7e6:	6921      	ldr	r1, [r4, #16]
 801e7e8:	4650      	mov	r0, sl
 801e7ea:	f7ff feaf 	bl	801e54c <_free_r>
 801e7ee:	230c      	movs	r3, #12
 801e7f0:	f8ca 3000 	str.w	r3, [sl]
 801e7f4:	89a3      	ldrh	r3, [r4, #12]
 801e7f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e7fa:	81a3      	strh	r3, [r4, #12]
 801e7fc:	f04f 30ff 	mov.w	r0, #4294967295
 801e800:	e7e9      	b.n	801e7d6 <__ssputs_r+0x8a>
	...

0801e804 <_svfiprintf_r>:
 801e804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e808:	4698      	mov	r8, r3
 801e80a:	898b      	ldrh	r3, [r1, #12]
 801e80c:	061b      	lsls	r3, r3, #24
 801e80e:	b09d      	sub	sp, #116	@ 0x74
 801e810:	4607      	mov	r7, r0
 801e812:	460d      	mov	r5, r1
 801e814:	4614      	mov	r4, r2
 801e816:	d510      	bpl.n	801e83a <_svfiprintf_r+0x36>
 801e818:	690b      	ldr	r3, [r1, #16]
 801e81a:	b973      	cbnz	r3, 801e83a <_svfiprintf_r+0x36>
 801e81c:	2140      	movs	r1, #64	@ 0x40
 801e81e:	f7ff ff09 	bl	801e634 <_malloc_r>
 801e822:	6028      	str	r0, [r5, #0]
 801e824:	6128      	str	r0, [r5, #16]
 801e826:	b930      	cbnz	r0, 801e836 <_svfiprintf_r+0x32>
 801e828:	230c      	movs	r3, #12
 801e82a:	603b      	str	r3, [r7, #0]
 801e82c:	f04f 30ff 	mov.w	r0, #4294967295
 801e830:	b01d      	add	sp, #116	@ 0x74
 801e832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e836:	2340      	movs	r3, #64	@ 0x40
 801e838:	616b      	str	r3, [r5, #20]
 801e83a:	2300      	movs	r3, #0
 801e83c:	9309      	str	r3, [sp, #36]	@ 0x24
 801e83e:	2320      	movs	r3, #32
 801e840:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801e844:	f8cd 800c 	str.w	r8, [sp, #12]
 801e848:	2330      	movs	r3, #48	@ 0x30
 801e84a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801e9e8 <_svfiprintf_r+0x1e4>
 801e84e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801e852:	f04f 0901 	mov.w	r9, #1
 801e856:	4623      	mov	r3, r4
 801e858:	469a      	mov	sl, r3
 801e85a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e85e:	b10a      	cbz	r2, 801e864 <_svfiprintf_r+0x60>
 801e860:	2a25      	cmp	r2, #37	@ 0x25
 801e862:	d1f9      	bne.n	801e858 <_svfiprintf_r+0x54>
 801e864:	ebba 0b04 	subs.w	fp, sl, r4
 801e868:	d00b      	beq.n	801e882 <_svfiprintf_r+0x7e>
 801e86a:	465b      	mov	r3, fp
 801e86c:	4622      	mov	r2, r4
 801e86e:	4629      	mov	r1, r5
 801e870:	4638      	mov	r0, r7
 801e872:	f7ff ff6b 	bl	801e74c <__ssputs_r>
 801e876:	3001      	adds	r0, #1
 801e878:	f000 80a7 	beq.w	801e9ca <_svfiprintf_r+0x1c6>
 801e87c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e87e:	445a      	add	r2, fp
 801e880:	9209      	str	r2, [sp, #36]	@ 0x24
 801e882:	f89a 3000 	ldrb.w	r3, [sl]
 801e886:	2b00      	cmp	r3, #0
 801e888:	f000 809f 	beq.w	801e9ca <_svfiprintf_r+0x1c6>
 801e88c:	2300      	movs	r3, #0
 801e88e:	f04f 32ff 	mov.w	r2, #4294967295
 801e892:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e896:	f10a 0a01 	add.w	sl, sl, #1
 801e89a:	9304      	str	r3, [sp, #16]
 801e89c:	9307      	str	r3, [sp, #28]
 801e89e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801e8a2:	931a      	str	r3, [sp, #104]	@ 0x68
 801e8a4:	4654      	mov	r4, sl
 801e8a6:	2205      	movs	r2, #5
 801e8a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e8ac:	484e      	ldr	r0, [pc, #312]	@ (801e9e8 <_svfiprintf_r+0x1e4>)
 801e8ae:	f7e1 fc97 	bl	80001e0 <memchr>
 801e8b2:	9a04      	ldr	r2, [sp, #16]
 801e8b4:	b9d8      	cbnz	r0, 801e8ee <_svfiprintf_r+0xea>
 801e8b6:	06d0      	lsls	r0, r2, #27
 801e8b8:	bf44      	itt	mi
 801e8ba:	2320      	movmi	r3, #32
 801e8bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e8c0:	0711      	lsls	r1, r2, #28
 801e8c2:	bf44      	itt	mi
 801e8c4:	232b      	movmi	r3, #43	@ 0x2b
 801e8c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e8ca:	f89a 3000 	ldrb.w	r3, [sl]
 801e8ce:	2b2a      	cmp	r3, #42	@ 0x2a
 801e8d0:	d015      	beq.n	801e8fe <_svfiprintf_r+0xfa>
 801e8d2:	9a07      	ldr	r2, [sp, #28]
 801e8d4:	4654      	mov	r4, sl
 801e8d6:	2000      	movs	r0, #0
 801e8d8:	f04f 0c0a 	mov.w	ip, #10
 801e8dc:	4621      	mov	r1, r4
 801e8de:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e8e2:	3b30      	subs	r3, #48	@ 0x30
 801e8e4:	2b09      	cmp	r3, #9
 801e8e6:	d94b      	bls.n	801e980 <_svfiprintf_r+0x17c>
 801e8e8:	b1b0      	cbz	r0, 801e918 <_svfiprintf_r+0x114>
 801e8ea:	9207      	str	r2, [sp, #28]
 801e8ec:	e014      	b.n	801e918 <_svfiprintf_r+0x114>
 801e8ee:	eba0 0308 	sub.w	r3, r0, r8
 801e8f2:	fa09 f303 	lsl.w	r3, r9, r3
 801e8f6:	4313      	orrs	r3, r2
 801e8f8:	9304      	str	r3, [sp, #16]
 801e8fa:	46a2      	mov	sl, r4
 801e8fc:	e7d2      	b.n	801e8a4 <_svfiprintf_r+0xa0>
 801e8fe:	9b03      	ldr	r3, [sp, #12]
 801e900:	1d19      	adds	r1, r3, #4
 801e902:	681b      	ldr	r3, [r3, #0]
 801e904:	9103      	str	r1, [sp, #12]
 801e906:	2b00      	cmp	r3, #0
 801e908:	bfbb      	ittet	lt
 801e90a:	425b      	neglt	r3, r3
 801e90c:	f042 0202 	orrlt.w	r2, r2, #2
 801e910:	9307      	strge	r3, [sp, #28]
 801e912:	9307      	strlt	r3, [sp, #28]
 801e914:	bfb8      	it	lt
 801e916:	9204      	strlt	r2, [sp, #16]
 801e918:	7823      	ldrb	r3, [r4, #0]
 801e91a:	2b2e      	cmp	r3, #46	@ 0x2e
 801e91c:	d10a      	bne.n	801e934 <_svfiprintf_r+0x130>
 801e91e:	7863      	ldrb	r3, [r4, #1]
 801e920:	2b2a      	cmp	r3, #42	@ 0x2a
 801e922:	d132      	bne.n	801e98a <_svfiprintf_r+0x186>
 801e924:	9b03      	ldr	r3, [sp, #12]
 801e926:	1d1a      	adds	r2, r3, #4
 801e928:	681b      	ldr	r3, [r3, #0]
 801e92a:	9203      	str	r2, [sp, #12]
 801e92c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801e930:	3402      	adds	r4, #2
 801e932:	9305      	str	r3, [sp, #20]
 801e934:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801e9f8 <_svfiprintf_r+0x1f4>
 801e938:	7821      	ldrb	r1, [r4, #0]
 801e93a:	2203      	movs	r2, #3
 801e93c:	4650      	mov	r0, sl
 801e93e:	f7e1 fc4f 	bl	80001e0 <memchr>
 801e942:	b138      	cbz	r0, 801e954 <_svfiprintf_r+0x150>
 801e944:	9b04      	ldr	r3, [sp, #16]
 801e946:	eba0 000a 	sub.w	r0, r0, sl
 801e94a:	2240      	movs	r2, #64	@ 0x40
 801e94c:	4082      	lsls	r2, r0
 801e94e:	4313      	orrs	r3, r2
 801e950:	3401      	adds	r4, #1
 801e952:	9304      	str	r3, [sp, #16]
 801e954:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e958:	4824      	ldr	r0, [pc, #144]	@ (801e9ec <_svfiprintf_r+0x1e8>)
 801e95a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801e95e:	2206      	movs	r2, #6
 801e960:	f7e1 fc3e 	bl	80001e0 <memchr>
 801e964:	2800      	cmp	r0, #0
 801e966:	d036      	beq.n	801e9d6 <_svfiprintf_r+0x1d2>
 801e968:	4b21      	ldr	r3, [pc, #132]	@ (801e9f0 <_svfiprintf_r+0x1ec>)
 801e96a:	bb1b      	cbnz	r3, 801e9b4 <_svfiprintf_r+0x1b0>
 801e96c:	9b03      	ldr	r3, [sp, #12]
 801e96e:	3307      	adds	r3, #7
 801e970:	f023 0307 	bic.w	r3, r3, #7
 801e974:	3308      	adds	r3, #8
 801e976:	9303      	str	r3, [sp, #12]
 801e978:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e97a:	4433      	add	r3, r6
 801e97c:	9309      	str	r3, [sp, #36]	@ 0x24
 801e97e:	e76a      	b.n	801e856 <_svfiprintf_r+0x52>
 801e980:	fb0c 3202 	mla	r2, ip, r2, r3
 801e984:	460c      	mov	r4, r1
 801e986:	2001      	movs	r0, #1
 801e988:	e7a8      	b.n	801e8dc <_svfiprintf_r+0xd8>
 801e98a:	2300      	movs	r3, #0
 801e98c:	3401      	adds	r4, #1
 801e98e:	9305      	str	r3, [sp, #20]
 801e990:	4619      	mov	r1, r3
 801e992:	f04f 0c0a 	mov.w	ip, #10
 801e996:	4620      	mov	r0, r4
 801e998:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e99c:	3a30      	subs	r2, #48	@ 0x30
 801e99e:	2a09      	cmp	r2, #9
 801e9a0:	d903      	bls.n	801e9aa <_svfiprintf_r+0x1a6>
 801e9a2:	2b00      	cmp	r3, #0
 801e9a4:	d0c6      	beq.n	801e934 <_svfiprintf_r+0x130>
 801e9a6:	9105      	str	r1, [sp, #20]
 801e9a8:	e7c4      	b.n	801e934 <_svfiprintf_r+0x130>
 801e9aa:	fb0c 2101 	mla	r1, ip, r1, r2
 801e9ae:	4604      	mov	r4, r0
 801e9b0:	2301      	movs	r3, #1
 801e9b2:	e7f0      	b.n	801e996 <_svfiprintf_r+0x192>
 801e9b4:	ab03      	add	r3, sp, #12
 801e9b6:	9300      	str	r3, [sp, #0]
 801e9b8:	462a      	mov	r2, r5
 801e9ba:	4b0e      	ldr	r3, [pc, #56]	@ (801e9f4 <_svfiprintf_r+0x1f0>)
 801e9bc:	a904      	add	r1, sp, #16
 801e9be:	4638      	mov	r0, r7
 801e9c0:	f3af 8000 	nop.w
 801e9c4:	1c42      	adds	r2, r0, #1
 801e9c6:	4606      	mov	r6, r0
 801e9c8:	d1d6      	bne.n	801e978 <_svfiprintf_r+0x174>
 801e9ca:	89ab      	ldrh	r3, [r5, #12]
 801e9cc:	065b      	lsls	r3, r3, #25
 801e9ce:	f53f af2d 	bmi.w	801e82c <_svfiprintf_r+0x28>
 801e9d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e9d4:	e72c      	b.n	801e830 <_svfiprintf_r+0x2c>
 801e9d6:	ab03      	add	r3, sp, #12
 801e9d8:	9300      	str	r3, [sp, #0]
 801e9da:	462a      	mov	r2, r5
 801e9dc:	4b05      	ldr	r3, [pc, #20]	@ (801e9f4 <_svfiprintf_r+0x1f0>)
 801e9de:	a904      	add	r1, sp, #16
 801e9e0:	4638      	mov	r0, r7
 801e9e2:	f000 f9bb 	bl	801ed5c <_printf_i>
 801e9e6:	e7ed      	b.n	801e9c4 <_svfiprintf_r+0x1c0>
 801e9e8:	08023e67 	.word	0x08023e67
 801e9ec:	08023e71 	.word	0x08023e71
 801e9f0:	00000000 	.word	0x00000000
 801e9f4:	0801e74d 	.word	0x0801e74d
 801e9f8:	08023e6d 	.word	0x08023e6d

0801e9fc <__sfputc_r>:
 801e9fc:	6893      	ldr	r3, [r2, #8]
 801e9fe:	3b01      	subs	r3, #1
 801ea00:	2b00      	cmp	r3, #0
 801ea02:	b410      	push	{r4}
 801ea04:	6093      	str	r3, [r2, #8]
 801ea06:	da08      	bge.n	801ea1a <__sfputc_r+0x1e>
 801ea08:	6994      	ldr	r4, [r2, #24]
 801ea0a:	42a3      	cmp	r3, r4
 801ea0c:	db01      	blt.n	801ea12 <__sfputc_r+0x16>
 801ea0e:	290a      	cmp	r1, #10
 801ea10:	d103      	bne.n	801ea1a <__sfputc_r+0x1e>
 801ea12:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ea16:	f000 bb7d 	b.w	801f114 <__swbuf_r>
 801ea1a:	6813      	ldr	r3, [r2, #0]
 801ea1c:	1c58      	adds	r0, r3, #1
 801ea1e:	6010      	str	r0, [r2, #0]
 801ea20:	7019      	strb	r1, [r3, #0]
 801ea22:	4608      	mov	r0, r1
 801ea24:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ea28:	4770      	bx	lr

0801ea2a <__sfputs_r>:
 801ea2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ea2c:	4606      	mov	r6, r0
 801ea2e:	460f      	mov	r7, r1
 801ea30:	4614      	mov	r4, r2
 801ea32:	18d5      	adds	r5, r2, r3
 801ea34:	42ac      	cmp	r4, r5
 801ea36:	d101      	bne.n	801ea3c <__sfputs_r+0x12>
 801ea38:	2000      	movs	r0, #0
 801ea3a:	e007      	b.n	801ea4c <__sfputs_r+0x22>
 801ea3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ea40:	463a      	mov	r2, r7
 801ea42:	4630      	mov	r0, r6
 801ea44:	f7ff ffda 	bl	801e9fc <__sfputc_r>
 801ea48:	1c43      	adds	r3, r0, #1
 801ea4a:	d1f3      	bne.n	801ea34 <__sfputs_r+0xa>
 801ea4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801ea50 <_vfiprintf_r>:
 801ea50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ea54:	460d      	mov	r5, r1
 801ea56:	b09d      	sub	sp, #116	@ 0x74
 801ea58:	4614      	mov	r4, r2
 801ea5a:	4698      	mov	r8, r3
 801ea5c:	4606      	mov	r6, r0
 801ea5e:	b118      	cbz	r0, 801ea68 <_vfiprintf_r+0x18>
 801ea60:	6a03      	ldr	r3, [r0, #32]
 801ea62:	b90b      	cbnz	r3, 801ea68 <_vfiprintf_r+0x18>
 801ea64:	f7ff fb5c 	bl	801e120 <__sinit>
 801ea68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801ea6a:	07d9      	lsls	r1, r3, #31
 801ea6c:	d405      	bmi.n	801ea7a <_vfiprintf_r+0x2a>
 801ea6e:	89ab      	ldrh	r3, [r5, #12]
 801ea70:	059a      	lsls	r2, r3, #22
 801ea72:	d402      	bmi.n	801ea7a <_vfiprintf_r+0x2a>
 801ea74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801ea76:	f7ff fd32 	bl	801e4de <__retarget_lock_acquire_recursive>
 801ea7a:	89ab      	ldrh	r3, [r5, #12]
 801ea7c:	071b      	lsls	r3, r3, #28
 801ea7e:	d501      	bpl.n	801ea84 <_vfiprintf_r+0x34>
 801ea80:	692b      	ldr	r3, [r5, #16]
 801ea82:	b99b      	cbnz	r3, 801eaac <_vfiprintf_r+0x5c>
 801ea84:	4629      	mov	r1, r5
 801ea86:	4630      	mov	r0, r6
 801ea88:	f000 fb82 	bl	801f190 <__swsetup_r>
 801ea8c:	b170      	cbz	r0, 801eaac <_vfiprintf_r+0x5c>
 801ea8e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801ea90:	07dc      	lsls	r4, r3, #31
 801ea92:	d504      	bpl.n	801ea9e <_vfiprintf_r+0x4e>
 801ea94:	f04f 30ff 	mov.w	r0, #4294967295
 801ea98:	b01d      	add	sp, #116	@ 0x74
 801ea9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ea9e:	89ab      	ldrh	r3, [r5, #12]
 801eaa0:	0598      	lsls	r0, r3, #22
 801eaa2:	d4f7      	bmi.n	801ea94 <_vfiprintf_r+0x44>
 801eaa4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801eaa6:	f7ff fd1b 	bl	801e4e0 <__retarget_lock_release_recursive>
 801eaaa:	e7f3      	b.n	801ea94 <_vfiprintf_r+0x44>
 801eaac:	2300      	movs	r3, #0
 801eaae:	9309      	str	r3, [sp, #36]	@ 0x24
 801eab0:	2320      	movs	r3, #32
 801eab2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801eab6:	f8cd 800c 	str.w	r8, [sp, #12]
 801eaba:	2330      	movs	r3, #48	@ 0x30
 801eabc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801ec6c <_vfiprintf_r+0x21c>
 801eac0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801eac4:	f04f 0901 	mov.w	r9, #1
 801eac8:	4623      	mov	r3, r4
 801eaca:	469a      	mov	sl, r3
 801eacc:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ead0:	b10a      	cbz	r2, 801ead6 <_vfiprintf_r+0x86>
 801ead2:	2a25      	cmp	r2, #37	@ 0x25
 801ead4:	d1f9      	bne.n	801eaca <_vfiprintf_r+0x7a>
 801ead6:	ebba 0b04 	subs.w	fp, sl, r4
 801eada:	d00b      	beq.n	801eaf4 <_vfiprintf_r+0xa4>
 801eadc:	465b      	mov	r3, fp
 801eade:	4622      	mov	r2, r4
 801eae0:	4629      	mov	r1, r5
 801eae2:	4630      	mov	r0, r6
 801eae4:	f7ff ffa1 	bl	801ea2a <__sfputs_r>
 801eae8:	3001      	adds	r0, #1
 801eaea:	f000 80a7 	beq.w	801ec3c <_vfiprintf_r+0x1ec>
 801eaee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801eaf0:	445a      	add	r2, fp
 801eaf2:	9209      	str	r2, [sp, #36]	@ 0x24
 801eaf4:	f89a 3000 	ldrb.w	r3, [sl]
 801eaf8:	2b00      	cmp	r3, #0
 801eafa:	f000 809f 	beq.w	801ec3c <_vfiprintf_r+0x1ec>
 801eafe:	2300      	movs	r3, #0
 801eb00:	f04f 32ff 	mov.w	r2, #4294967295
 801eb04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801eb08:	f10a 0a01 	add.w	sl, sl, #1
 801eb0c:	9304      	str	r3, [sp, #16]
 801eb0e:	9307      	str	r3, [sp, #28]
 801eb10:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801eb14:	931a      	str	r3, [sp, #104]	@ 0x68
 801eb16:	4654      	mov	r4, sl
 801eb18:	2205      	movs	r2, #5
 801eb1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801eb1e:	4853      	ldr	r0, [pc, #332]	@ (801ec6c <_vfiprintf_r+0x21c>)
 801eb20:	f7e1 fb5e 	bl	80001e0 <memchr>
 801eb24:	9a04      	ldr	r2, [sp, #16]
 801eb26:	b9d8      	cbnz	r0, 801eb60 <_vfiprintf_r+0x110>
 801eb28:	06d1      	lsls	r1, r2, #27
 801eb2a:	bf44      	itt	mi
 801eb2c:	2320      	movmi	r3, #32
 801eb2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801eb32:	0713      	lsls	r3, r2, #28
 801eb34:	bf44      	itt	mi
 801eb36:	232b      	movmi	r3, #43	@ 0x2b
 801eb38:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801eb3c:	f89a 3000 	ldrb.w	r3, [sl]
 801eb40:	2b2a      	cmp	r3, #42	@ 0x2a
 801eb42:	d015      	beq.n	801eb70 <_vfiprintf_r+0x120>
 801eb44:	9a07      	ldr	r2, [sp, #28]
 801eb46:	4654      	mov	r4, sl
 801eb48:	2000      	movs	r0, #0
 801eb4a:	f04f 0c0a 	mov.w	ip, #10
 801eb4e:	4621      	mov	r1, r4
 801eb50:	f811 3b01 	ldrb.w	r3, [r1], #1
 801eb54:	3b30      	subs	r3, #48	@ 0x30
 801eb56:	2b09      	cmp	r3, #9
 801eb58:	d94b      	bls.n	801ebf2 <_vfiprintf_r+0x1a2>
 801eb5a:	b1b0      	cbz	r0, 801eb8a <_vfiprintf_r+0x13a>
 801eb5c:	9207      	str	r2, [sp, #28]
 801eb5e:	e014      	b.n	801eb8a <_vfiprintf_r+0x13a>
 801eb60:	eba0 0308 	sub.w	r3, r0, r8
 801eb64:	fa09 f303 	lsl.w	r3, r9, r3
 801eb68:	4313      	orrs	r3, r2
 801eb6a:	9304      	str	r3, [sp, #16]
 801eb6c:	46a2      	mov	sl, r4
 801eb6e:	e7d2      	b.n	801eb16 <_vfiprintf_r+0xc6>
 801eb70:	9b03      	ldr	r3, [sp, #12]
 801eb72:	1d19      	adds	r1, r3, #4
 801eb74:	681b      	ldr	r3, [r3, #0]
 801eb76:	9103      	str	r1, [sp, #12]
 801eb78:	2b00      	cmp	r3, #0
 801eb7a:	bfbb      	ittet	lt
 801eb7c:	425b      	neglt	r3, r3
 801eb7e:	f042 0202 	orrlt.w	r2, r2, #2
 801eb82:	9307      	strge	r3, [sp, #28]
 801eb84:	9307      	strlt	r3, [sp, #28]
 801eb86:	bfb8      	it	lt
 801eb88:	9204      	strlt	r2, [sp, #16]
 801eb8a:	7823      	ldrb	r3, [r4, #0]
 801eb8c:	2b2e      	cmp	r3, #46	@ 0x2e
 801eb8e:	d10a      	bne.n	801eba6 <_vfiprintf_r+0x156>
 801eb90:	7863      	ldrb	r3, [r4, #1]
 801eb92:	2b2a      	cmp	r3, #42	@ 0x2a
 801eb94:	d132      	bne.n	801ebfc <_vfiprintf_r+0x1ac>
 801eb96:	9b03      	ldr	r3, [sp, #12]
 801eb98:	1d1a      	adds	r2, r3, #4
 801eb9a:	681b      	ldr	r3, [r3, #0]
 801eb9c:	9203      	str	r2, [sp, #12]
 801eb9e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801eba2:	3402      	adds	r4, #2
 801eba4:	9305      	str	r3, [sp, #20]
 801eba6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801ec7c <_vfiprintf_r+0x22c>
 801ebaa:	7821      	ldrb	r1, [r4, #0]
 801ebac:	2203      	movs	r2, #3
 801ebae:	4650      	mov	r0, sl
 801ebb0:	f7e1 fb16 	bl	80001e0 <memchr>
 801ebb4:	b138      	cbz	r0, 801ebc6 <_vfiprintf_r+0x176>
 801ebb6:	9b04      	ldr	r3, [sp, #16]
 801ebb8:	eba0 000a 	sub.w	r0, r0, sl
 801ebbc:	2240      	movs	r2, #64	@ 0x40
 801ebbe:	4082      	lsls	r2, r0
 801ebc0:	4313      	orrs	r3, r2
 801ebc2:	3401      	adds	r4, #1
 801ebc4:	9304      	str	r3, [sp, #16]
 801ebc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ebca:	4829      	ldr	r0, [pc, #164]	@ (801ec70 <_vfiprintf_r+0x220>)
 801ebcc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801ebd0:	2206      	movs	r2, #6
 801ebd2:	f7e1 fb05 	bl	80001e0 <memchr>
 801ebd6:	2800      	cmp	r0, #0
 801ebd8:	d03f      	beq.n	801ec5a <_vfiprintf_r+0x20a>
 801ebda:	4b26      	ldr	r3, [pc, #152]	@ (801ec74 <_vfiprintf_r+0x224>)
 801ebdc:	bb1b      	cbnz	r3, 801ec26 <_vfiprintf_r+0x1d6>
 801ebde:	9b03      	ldr	r3, [sp, #12]
 801ebe0:	3307      	adds	r3, #7
 801ebe2:	f023 0307 	bic.w	r3, r3, #7
 801ebe6:	3308      	adds	r3, #8
 801ebe8:	9303      	str	r3, [sp, #12]
 801ebea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ebec:	443b      	add	r3, r7
 801ebee:	9309      	str	r3, [sp, #36]	@ 0x24
 801ebf0:	e76a      	b.n	801eac8 <_vfiprintf_r+0x78>
 801ebf2:	fb0c 3202 	mla	r2, ip, r2, r3
 801ebf6:	460c      	mov	r4, r1
 801ebf8:	2001      	movs	r0, #1
 801ebfa:	e7a8      	b.n	801eb4e <_vfiprintf_r+0xfe>
 801ebfc:	2300      	movs	r3, #0
 801ebfe:	3401      	adds	r4, #1
 801ec00:	9305      	str	r3, [sp, #20]
 801ec02:	4619      	mov	r1, r3
 801ec04:	f04f 0c0a 	mov.w	ip, #10
 801ec08:	4620      	mov	r0, r4
 801ec0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ec0e:	3a30      	subs	r2, #48	@ 0x30
 801ec10:	2a09      	cmp	r2, #9
 801ec12:	d903      	bls.n	801ec1c <_vfiprintf_r+0x1cc>
 801ec14:	2b00      	cmp	r3, #0
 801ec16:	d0c6      	beq.n	801eba6 <_vfiprintf_r+0x156>
 801ec18:	9105      	str	r1, [sp, #20]
 801ec1a:	e7c4      	b.n	801eba6 <_vfiprintf_r+0x156>
 801ec1c:	fb0c 2101 	mla	r1, ip, r1, r2
 801ec20:	4604      	mov	r4, r0
 801ec22:	2301      	movs	r3, #1
 801ec24:	e7f0      	b.n	801ec08 <_vfiprintf_r+0x1b8>
 801ec26:	ab03      	add	r3, sp, #12
 801ec28:	9300      	str	r3, [sp, #0]
 801ec2a:	462a      	mov	r2, r5
 801ec2c:	4b12      	ldr	r3, [pc, #72]	@ (801ec78 <_vfiprintf_r+0x228>)
 801ec2e:	a904      	add	r1, sp, #16
 801ec30:	4630      	mov	r0, r6
 801ec32:	f3af 8000 	nop.w
 801ec36:	4607      	mov	r7, r0
 801ec38:	1c78      	adds	r0, r7, #1
 801ec3a:	d1d6      	bne.n	801ebea <_vfiprintf_r+0x19a>
 801ec3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801ec3e:	07d9      	lsls	r1, r3, #31
 801ec40:	d405      	bmi.n	801ec4e <_vfiprintf_r+0x1fe>
 801ec42:	89ab      	ldrh	r3, [r5, #12]
 801ec44:	059a      	lsls	r2, r3, #22
 801ec46:	d402      	bmi.n	801ec4e <_vfiprintf_r+0x1fe>
 801ec48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801ec4a:	f7ff fc49 	bl	801e4e0 <__retarget_lock_release_recursive>
 801ec4e:	89ab      	ldrh	r3, [r5, #12]
 801ec50:	065b      	lsls	r3, r3, #25
 801ec52:	f53f af1f 	bmi.w	801ea94 <_vfiprintf_r+0x44>
 801ec56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ec58:	e71e      	b.n	801ea98 <_vfiprintf_r+0x48>
 801ec5a:	ab03      	add	r3, sp, #12
 801ec5c:	9300      	str	r3, [sp, #0]
 801ec5e:	462a      	mov	r2, r5
 801ec60:	4b05      	ldr	r3, [pc, #20]	@ (801ec78 <_vfiprintf_r+0x228>)
 801ec62:	a904      	add	r1, sp, #16
 801ec64:	4630      	mov	r0, r6
 801ec66:	f000 f879 	bl	801ed5c <_printf_i>
 801ec6a:	e7e4      	b.n	801ec36 <_vfiprintf_r+0x1e6>
 801ec6c:	08023e67 	.word	0x08023e67
 801ec70:	08023e71 	.word	0x08023e71
 801ec74:	00000000 	.word	0x00000000
 801ec78:	0801ea2b 	.word	0x0801ea2b
 801ec7c:	08023e6d 	.word	0x08023e6d

0801ec80 <_printf_common>:
 801ec80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ec84:	4616      	mov	r6, r2
 801ec86:	4698      	mov	r8, r3
 801ec88:	688a      	ldr	r2, [r1, #8]
 801ec8a:	690b      	ldr	r3, [r1, #16]
 801ec8c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801ec90:	4293      	cmp	r3, r2
 801ec92:	bfb8      	it	lt
 801ec94:	4613      	movlt	r3, r2
 801ec96:	6033      	str	r3, [r6, #0]
 801ec98:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801ec9c:	4607      	mov	r7, r0
 801ec9e:	460c      	mov	r4, r1
 801eca0:	b10a      	cbz	r2, 801eca6 <_printf_common+0x26>
 801eca2:	3301      	adds	r3, #1
 801eca4:	6033      	str	r3, [r6, #0]
 801eca6:	6823      	ldr	r3, [r4, #0]
 801eca8:	0699      	lsls	r1, r3, #26
 801ecaa:	bf42      	ittt	mi
 801ecac:	6833      	ldrmi	r3, [r6, #0]
 801ecae:	3302      	addmi	r3, #2
 801ecb0:	6033      	strmi	r3, [r6, #0]
 801ecb2:	6825      	ldr	r5, [r4, #0]
 801ecb4:	f015 0506 	ands.w	r5, r5, #6
 801ecb8:	d106      	bne.n	801ecc8 <_printf_common+0x48>
 801ecba:	f104 0a19 	add.w	sl, r4, #25
 801ecbe:	68e3      	ldr	r3, [r4, #12]
 801ecc0:	6832      	ldr	r2, [r6, #0]
 801ecc2:	1a9b      	subs	r3, r3, r2
 801ecc4:	42ab      	cmp	r3, r5
 801ecc6:	dc26      	bgt.n	801ed16 <_printf_common+0x96>
 801ecc8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801eccc:	6822      	ldr	r2, [r4, #0]
 801ecce:	3b00      	subs	r3, #0
 801ecd0:	bf18      	it	ne
 801ecd2:	2301      	movne	r3, #1
 801ecd4:	0692      	lsls	r2, r2, #26
 801ecd6:	d42b      	bmi.n	801ed30 <_printf_common+0xb0>
 801ecd8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801ecdc:	4641      	mov	r1, r8
 801ecde:	4638      	mov	r0, r7
 801ece0:	47c8      	blx	r9
 801ece2:	3001      	adds	r0, #1
 801ece4:	d01e      	beq.n	801ed24 <_printf_common+0xa4>
 801ece6:	6823      	ldr	r3, [r4, #0]
 801ece8:	6922      	ldr	r2, [r4, #16]
 801ecea:	f003 0306 	and.w	r3, r3, #6
 801ecee:	2b04      	cmp	r3, #4
 801ecf0:	bf02      	ittt	eq
 801ecf2:	68e5      	ldreq	r5, [r4, #12]
 801ecf4:	6833      	ldreq	r3, [r6, #0]
 801ecf6:	1aed      	subeq	r5, r5, r3
 801ecf8:	68a3      	ldr	r3, [r4, #8]
 801ecfa:	bf0c      	ite	eq
 801ecfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801ed00:	2500      	movne	r5, #0
 801ed02:	4293      	cmp	r3, r2
 801ed04:	bfc4      	itt	gt
 801ed06:	1a9b      	subgt	r3, r3, r2
 801ed08:	18ed      	addgt	r5, r5, r3
 801ed0a:	2600      	movs	r6, #0
 801ed0c:	341a      	adds	r4, #26
 801ed0e:	42b5      	cmp	r5, r6
 801ed10:	d11a      	bne.n	801ed48 <_printf_common+0xc8>
 801ed12:	2000      	movs	r0, #0
 801ed14:	e008      	b.n	801ed28 <_printf_common+0xa8>
 801ed16:	2301      	movs	r3, #1
 801ed18:	4652      	mov	r2, sl
 801ed1a:	4641      	mov	r1, r8
 801ed1c:	4638      	mov	r0, r7
 801ed1e:	47c8      	blx	r9
 801ed20:	3001      	adds	r0, #1
 801ed22:	d103      	bne.n	801ed2c <_printf_common+0xac>
 801ed24:	f04f 30ff 	mov.w	r0, #4294967295
 801ed28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ed2c:	3501      	adds	r5, #1
 801ed2e:	e7c6      	b.n	801ecbe <_printf_common+0x3e>
 801ed30:	18e1      	adds	r1, r4, r3
 801ed32:	1c5a      	adds	r2, r3, #1
 801ed34:	2030      	movs	r0, #48	@ 0x30
 801ed36:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801ed3a:	4422      	add	r2, r4
 801ed3c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801ed40:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801ed44:	3302      	adds	r3, #2
 801ed46:	e7c7      	b.n	801ecd8 <_printf_common+0x58>
 801ed48:	2301      	movs	r3, #1
 801ed4a:	4622      	mov	r2, r4
 801ed4c:	4641      	mov	r1, r8
 801ed4e:	4638      	mov	r0, r7
 801ed50:	47c8      	blx	r9
 801ed52:	3001      	adds	r0, #1
 801ed54:	d0e6      	beq.n	801ed24 <_printf_common+0xa4>
 801ed56:	3601      	adds	r6, #1
 801ed58:	e7d9      	b.n	801ed0e <_printf_common+0x8e>
	...

0801ed5c <_printf_i>:
 801ed5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801ed60:	7e0f      	ldrb	r7, [r1, #24]
 801ed62:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801ed64:	2f78      	cmp	r7, #120	@ 0x78
 801ed66:	4691      	mov	r9, r2
 801ed68:	4680      	mov	r8, r0
 801ed6a:	460c      	mov	r4, r1
 801ed6c:	469a      	mov	sl, r3
 801ed6e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801ed72:	d807      	bhi.n	801ed84 <_printf_i+0x28>
 801ed74:	2f62      	cmp	r7, #98	@ 0x62
 801ed76:	d80a      	bhi.n	801ed8e <_printf_i+0x32>
 801ed78:	2f00      	cmp	r7, #0
 801ed7a:	f000 80d1 	beq.w	801ef20 <_printf_i+0x1c4>
 801ed7e:	2f58      	cmp	r7, #88	@ 0x58
 801ed80:	f000 80b8 	beq.w	801eef4 <_printf_i+0x198>
 801ed84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801ed88:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801ed8c:	e03a      	b.n	801ee04 <_printf_i+0xa8>
 801ed8e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801ed92:	2b15      	cmp	r3, #21
 801ed94:	d8f6      	bhi.n	801ed84 <_printf_i+0x28>
 801ed96:	a101      	add	r1, pc, #4	@ (adr r1, 801ed9c <_printf_i+0x40>)
 801ed98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801ed9c:	0801edf5 	.word	0x0801edf5
 801eda0:	0801ee09 	.word	0x0801ee09
 801eda4:	0801ed85 	.word	0x0801ed85
 801eda8:	0801ed85 	.word	0x0801ed85
 801edac:	0801ed85 	.word	0x0801ed85
 801edb0:	0801ed85 	.word	0x0801ed85
 801edb4:	0801ee09 	.word	0x0801ee09
 801edb8:	0801ed85 	.word	0x0801ed85
 801edbc:	0801ed85 	.word	0x0801ed85
 801edc0:	0801ed85 	.word	0x0801ed85
 801edc4:	0801ed85 	.word	0x0801ed85
 801edc8:	0801ef07 	.word	0x0801ef07
 801edcc:	0801ee33 	.word	0x0801ee33
 801edd0:	0801eec1 	.word	0x0801eec1
 801edd4:	0801ed85 	.word	0x0801ed85
 801edd8:	0801ed85 	.word	0x0801ed85
 801eddc:	0801ef29 	.word	0x0801ef29
 801ede0:	0801ed85 	.word	0x0801ed85
 801ede4:	0801ee33 	.word	0x0801ee33
 801ede8:	0801ed85 	.word	0x0801ed85
 801edec:	0801ed85 	.word	0x0801ed85
 801edf0:	0801eec9 	.word	0x0801eec9
 801edf4:	6833      	ldr	r3, [r6, #0]
 801edf6:	1d1a      	adds	r2, r3, #4
 801edf8:	681b      	ldr	r3, [r3, #0]
 801edfa:	6032      	str	r2, [r6, #0]
 801edfc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801ee00:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801ee04:	2301      	movs	r3, #1
 801ee06:	e09c      	b.n	801ef42 <_printf_i+0x1e6>
 801ee08:	6833      	ldr	r3, [r6, #0]
 801ee0a:	6820      	ldr	r0, [r4, #0]
 801ee0c:	1d19      	adds	r1, r3, #4
 801ee0e:	6031      	str	r1, [r6, #0]
 801ee10:	0606      	lsls	r6, r0, #24
 801ee12:	d501      	bpl.n	801ee18 <_printf_i+0xbc>
 801ee14:	681d      	ldr	r5, [r3, #0]
 801ee16:	e003      	b.n	801ee20 <_printf_i+0xc4>
 801ee18:	0645      	lsls	r5, r0, #25
 801ee1a:	d5fb      	bpl.n	801ee14 <_printf_i+0xb8>
 801ee1c:	f9b3 5000 	ldrsh.w	r5, [r3]
 801ee20:	2d00      	cmp	r5, #0
 801ee22:	da03      	bge.n	801ee2c <_printf_i+0xd0>
 801ee24:	232d      	movs	r3, #45	@ 0x2d
 801ee26:	426d      	negs	r5, r5
 801ee28:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801ee2c:	4858      	ldr	r0, [pc, #352]	@ (801ef90 <_printf_i+0x234>)
 801ee2e:	230a      	movs	r3, #10
 801ee30:	e011      	b.n	801ee56 <_printf_i+0xfa>
 801ee32:	6821      	ldr	r1, [r4, #0]
 801ee34:	6833      	ldr	r3, [r6, #0]
 801ee36:	0608      	lsls	r0, r1, #24
 801ee38:	f853 5b04 	ldr.w	r5, [r3], #4
 801ee3c:	d402      	bmi.n	801ee44 <_printf_i+0xe8>
 801ee3e:	0649      	lsls	r1, r1, #25
 801ee40:	bf48      	it	mi
 801ee42:	b2ad      	uxthmi	r5, r5
 801ee44:	2f6f      	cmp	r7, #111	@ 0x6f
 801ee46:	4852      	ldr	r0, [pc, #328]	@ (801ef90 <_printf_i+0x234>)
 801ee48:	6033      	str	r3, [r6, #0]
 801ee4a:	bf14      	ite	ne
 801ee4c:	230a      	movne	r3, #10
 801ee4e:	2308      	moveq	r3, #8
 801ee50:	2100      	movs	r1, #0
 801ee52:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801ee56:	6866      	ldr	r6, [r4, #4]
 801ee58:	60a6      	str	r6, [r4, #8]
 801ee5a:	2e00      	cmp	r6, #0
 801ee5c:	db05      	blt.n	801ee6a <_printf_i+0x10e>
 801ee5e:	6821      	ldr	r1, [r4, #0]
 801ee60:	432e      	orrs	r6, r5
 801ee62:	f021 0104 	bic.w	r1, r1, #4
 801ee66:	6021      	str	r1, [r4, #0]
 801ee68:	d04b      	beq.n	801ef02 <_printf_i+0x1a6>
 801ee6a:	4616      	mov	r6, r2
 801ee6c:	fbb5 f1f3 	udiv	r1, r5, r3
 801ee70:	fb03 5711 	mls	r7, r3, r1, r5
 801ee74:	5dc7      	ldrb	r7, [r0, r7]
 801ee76:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801ee7a:	462f      	mov	r7, r5
 801ee7c:	42bb      	cmp	r3, r7
 801ee7e:	460d      	mov	r5, r1
 801ee80:	d9f4      	bls.n	801ee6c <_printf_i+0x110>
 801ee82:	2b08      	cmp	r3, #8
 801ee84:	d10b      	bne.n	801ee9e <_printf_i+0x142>
 801ee86:	6823      	ldr	r3, [r4, #0]
 801ee88:	07df      	lsls	r7, r3, #31
 801ee8a:	d508      	bpl.n	801ee9e <_printf_i+0x142>
 801ee8c:	6923      	ldr	r3, [r4, #16]
 801ee8e:	6861      	ldr	r1, [r4, #4]
 801ee90:	4299      	cmp	r1, r3
 801ee92:	bfde      	ittt	le
 801ee94:	2330      	movle	r3, #48	@ 0x30
 801ee96:	f806 3c01 	strble.w	r3, [r6, #-1]
 801ee9a:	f106 36ff 	addle.w	r6, r6, #4294967295
 801ee9e:	1b92      	subs	r2, r2, r6
 801eea0:	6122      	str	r2, [r4, #16]
 801eea2:	f8cd a000 	str.w	sl, [sp]
 801eea6:	464b      	mov	r3, r9
 801eea8:	aa03      	add	r2, sp, #12
 801eeaa:	4621      	mov	r1, r4
 801eeac:	4640      	mov	r0, r8
 801eeae:	f7ff fee7 	bl	801ec80 <_printf_common>
 801eeb2:	3001      	adds	r0, #1
 801eeb4:	d14a      	bne.n	801ef4c <_printf_i+0x1f0>
 801eeb6:	f04f 30ff 	mov.w	r0, #4294967295
 801eeba:	b004      	add	sp, #16
 801eebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801eec0:	6823      	ldr	r3, [r4, #0]
 801eec2:	f043 0320 	orr.w	r3, r3, #32
 801eec6:	6023      	str	r3, [r4, #0]
 801eec8:	4832      	ldr	r0, [pc, #200]	@ (801ef94 <_printf_i+0x238>)
 801eeca:	2778      	movs	r7, #120	@ 0x78
 801eecc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801eed0:	6823      	ldr	r3, [r4, #0]
 801eed2:	6831      	ldr	r1, [r6, #0]
 801eed4:	061f      	lsls	r7, r3, #24
 801eed6:	f851 5b04 	ldr.w	r5, [r1], #4
 801eeda:	d402      	bmi.n	801eee2 <_printf_i+0x186>
 801eedc:	065f      	lsls	r7, r3, #25
 801eede:	bf48      	it	mi
 801eee0:	b2ad      	uxthmi	r5, r5
 801eee2:	6031      	str	r1, [r6, #0]
 801eee4:	07d9      	lsls	r1, r3, #31
 801eee6:	bf44      	itt	mi
 801eee8:	f043 0320 	orrmi.w	r3, r3, #32
 801eeec:	6023      	strmi	r3, [r4, #0]
 801eeee:	b11d      	cbz	r5, 801eef8 <_printf_i+0x19c>
 801eef0:	2310      	movs	r3, #16
 801eef2:	e7ad      	b.n	801ee50 <_printf_i+0xf4>
 801eef4:	4826      	ldr	r0, [pc, #152]	@ (801ef90 <_printf_i+0x234>)
 801eef6:	e7e9      	b.n	801eecc <_printf_i+0x170>
 801eef8:	6823      	ldr	r3, [r4, #0]
 801eefa:	f023 0320 	bic.w	r3, r3, #32
 801eefe:	6023      	str	r3, [r4, #0]
 801ef00:	e7f6      	b.n	801eef0 <_printf_i+0x194>
 801ef02:	4616      	mov	r6, r2
 801ef04:	e7bd      	b.n	801ee82 <_printf_i+0x126>
 801ef06:	6833      	ldr	r3, [r6, #0]
 801ef08:	6825      	ldr	r5, [r4, #0]
 801ef0a:	6961      	ldr	r1, [r4, #20]
 801ef0c:	1d18      	adds	r0, r3, #4
 801ef0e:	6030      	str	r0, [r6, #0]
 801ef10:	062e      	lsls	r6, r5, #24
 801ef12:	681b      	ldr	r3, [r3, #0]
 801ef14:	d501      	bpl.n	801ef1a <_printf_i+0x1be>
 801ef16:	6019      	str	r1, [r3, #0]
 801ef18:	e002      	b.n	801ef20 <_printf_i+0x1c4>
 801ef1a:	0668      	lsls	r0, r5, #25
 801ef1c:	d5fb      	bpl.n	801ef16 <_printf_i+0x1ba>
 801ef1e:	8019      	strh	r1, [r3, #0]
 801ef20:	2300      	movs	r3, #0
 801ef22:	6123      	str	r3, [r4, #16]
 801ef24:	4616      	mov	r6, r2
 801ef26:	e7bc      	b.n	801eea2 <_printf_i+0x146>
 801ef28:	6833      	ldr	r3, [r6, #0]
 801ef2a:	1d1a      	adds	r2, r3, #4
 801ef2c:	6032      	str	r2, [r6, #0]
 801ef2e:	681e      	ldr	r6, [r3, #0]
 801ef30:	6862      	ldr	r2, [r4, #4]
 801ef32:	2100      	movs	r1, #0
 801ef34:	4630      	mov	r0, r6
 801ef36:	f7e1 f953 	bl	80001e0 <memchr>
 801ef3a:	b108      	cbz	r0, 801ef40 <_printf_i+0x1e4>
 801ef3c:	1b80      	subs	r0, r0, r6
 801ef3e:	6060      	str	r0, [r4, #4]
 801ef40:	6863      	ldr	r3, [r4, #4]
 801ef42:	6123      	str	r3, [r4, #16]
 801ef44:	2300      	movs	r3, #0
 801ef46:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801ef4a:	e7aa      	b.n	801eea2 <_printf_i+0x146>
 801ef4c:	6923      	ldr	r3, [r4, #16]
 801ef4e:	4632      	mov	r2, r6
 801ef50:	4649      	mov	r1, r9
 801ef52:	4640      	mov	r0, r8
 801ef54:	47d0      	blx	sl
 801ef56:	3001      	adds	r0, #1
 801ef58:	d0ad      	beq.n	801eeb6 <_printf_i+0x15a>
 801ef5a:	6823      	ldr	r3, [r4, #0]
 801ef5c:	079b      	lsls	r3, r3, #30
 801ef5e:	d413      	bmi.n	801ef88 <_printf_i+0x22c>
 801ef60:	68e0      	ldr	r0, [r4, #12]
 801ef62:	9b03      	ldr	r3, [sp, #12]
 801ef64:	4298      	cmp	r0, r3
 801ef66:	bfb8      	it	lt
 801ef68:	4618      	movlt	r0, r3
 801ef6a:	e7a6      	b.n	801eeba <_printf_i+0x15e>
 801ef6c:	2301      	movs	r3, #1
 801ef6e:	4632      	mov	r2, r6
 801ef70:	4649      	mov	r1, r9
 801ef72:	4640      	mov	r0, r8
 801ef74:	47d0      	blx	sl
 801ef76:	3001      	adds	r0, #1
 801ef78:	d09d      	beq.n	801eeb6 <_printf_i+0x15a>
 801ef7a:	3501      	adds	r5, #1
 801ef7c:	68e3      	ldr	r3, [r4, #12]
 801ef7e:	9903      	ldr	r1, [sp, #12]
 801ef80:	1a5b      	subs	r3, r3, r1
 801ef82:	42ab      	cmp	r3, r5
 801ef84:	dcf2      	bgt.n	801ef6c <_printf_i+0x210>
 801ef86:	e7eb      	b.n	801ef60 <_printf_i+0x204>
 801ef88:	2500      	movs	r5, #0
 801ef8a:	f104 0619 	add.w	r6, r4, #25
 801ef8e:	e7f5      	b.n	801ef7c <_printf_i+0x220>
 801ef90:	08023e78 	.word	0x08023e78
 801ef94:	08023e89 	.word	0x08023e89

0801ef98 <__sflush_r>:
 801ef98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801ef9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801efa0:	0716      	lsls	r6, r2, #28
 801efa2:	4605      	mov	r5, r0
 801efa4:	460c      	mov	r4, r1
 801efa6:	d454      	bmi.n	801f052 <__sflush_r+0xba>
 801efa8:	684b      	ldr	r3, [r1, #4]
 801efaa:	2b00      	cmp	r3, #0
 801efac:	dc02      	bgt.n	801efb4 <__sflush_r+0x1c>
 801efae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801efb0:	2b00      	cmp	r3, #0
 801efb2:	dd48      	ble.n	801f046 <__sflush_r+0xae>
 801efb4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801efb6:	2e00      	cmp	r6, #0
 801efb8:	d045      	beq.n	801f046 <__sflush_r+0xae>
 801efba:	2300      	movs	r3, #0
 801efbc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801efc0:	682f      	ldr	r7, [r5, #0]
 801efc2:	6a21      	ldr	r1, [r4, #32]
 801efc4:	602b      	str	r3, [r5, #0]
 801efc6:	d030      	beq.n	801f02a <__sflush_r+0x92>
 801efc8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801efca:	89a3      	ldrh	r3, [r4, #12]
 801efcc:	0759      	lsls	r1, r3, #29
 801efce:	d505      	bpl.n	801efdc <__sflush_r+0x44>
 801efd0:	6863      	ldr	r3, [r4, #4]
 801efd2:	1ad2      	subs	r2, r2, r3
 801efd4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801efd6:	b10b      	cbz	r3, 801efdc <__sflush_r+0x44>
 801efd8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801efda:	1ad2      	subs	r2, r2, r3
 801efdc:	2300      	movs	r3, #0
 801efde:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801efe0:	6a21      	ldr	r1, [r4, #32]
 801efe2:	4628      	mov	r0, r5
 801efe4:	47b0      	blx	r6
 801efe6:	1c43      	adds	r3, r0, #1
 801efe8:	89a3      	ldrh	r3, [r4, #12]
 801efea:	d106      	bne.n	801effa <__sflush_r+0x62>
 801efec:	6829      	ldr	r1, [r5, #0]
 801efee:	291d      	cmp	r1, #29
 801eff0:	d82b      	bhi.n	801f04a <__sflush_r+0xb2>
 801eff2:	4a2a      	ldr	r2, [pc, #168]	@ (801f09c <__sflush_r+0x104>)
 801eff4:	40ca      	lsrs	r2, r1
 801eff6:	07d6      	lsls	r6, r2, #31
 801eff8:	d527      	bpl.n	801f04a <__sflush_r+0xb2>
 801effa:	2200      	movs	r2, #0
 801effc:	6062      	str	r2, [r4, #4]
 801effe:	04d9      	lsls	r1, r3, #19
 801f000:	6922      	ldr	r2, [r4, #16]
 801f002:	6022      	str	r2, [r4, #0]
 801f004:	d504      	bpl.n	801f010 <__sflush_r+0x78>
 801f006:	1c42      	adds	r2, r0, #1
 801f008:	d101      	bne.n	801f00e <__sflush_r+0x76>
 801f00a:	682b      	ldr	r3, [r5, #0]
 801f00c:	b903      	cbnz	r3, 801f010 <__sflush_r+0x78>
 801f00e:	6560      	str	r0, [r4, #84]	@ 0x54
 801f010:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801f012:	602f      	str	r7, [r5, #0]
 801f014:	b1b9      	cbz	r1, 801f046 <__sflush_r+0xae>
 801f016:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801f01a:	4299      	cmp	r1, r3
 801f01c:	d002      	beq.n	801f024 <__sflush_r+0x8c>
 801f01e:	4628      	mov	r0, r5
 801f020:	f7ff fa94 	bl	801e54c <_free_r>
 801f024:	2300      	movs	r3, #0
 801f026:	6363      	str	r3, [r4, #52]	@ 0x34
 801f028:	e00d      	b.n	801f046 <__sflush_r+0xae>
 801f02a:	2301      	movs	r3, #1
 801f02c:	4628      	mov	r0, r5
 801f02e:	47b0      	blx	r6
 801f030:	4602      	mov	r2, r0
 801f032:	1c50      	adds	r0, r2, #1
 801f034:	d1c9      	bne.n	801efca <__sflush_r+0x32>
 801f036:	682b      	ldr	r3, [r5, #0]
 801f038:	2b00      	cmp	r3, #0
 801f03a:	d0c6      	beq.n	801efca <__sflush_r+0x32>
 801f03c:	2b1d      	cmp	r3, #29
 801f03e:	d001      	beq.n	801f044 <__sflush_r+0xac>
 801f040:	2b16      	cmp	r3, #22
 801f042:	d11e      	bne.n	801f082 <__sflush_r+0xea>
 801f044:	602f      	str	r7, [r5, #0]
 801f046:	2000      	movs	r0, #0
 801f048:	e022      	b.n	801f090 <__sflush_r+0xf8>
 801f04a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801f04e:	b21b      	sxth	r3, r3
 801f050:	e01b      	b.n	801f08a <__sflush_r+0xf2>
 801f052:	690f      	ldr	r7, [r1, #16]
 801f054:	2f00      	cmp	r7, #0
 801f056:	d0f6      	beq.n	801f046 <__sflush_r+0xae>
 801f058:	0793      	lsls	r3, r2, #30
 801f05a:	680e      	ldr	r6, [r1, #0]
 801f05c:	bf08      	it	eq
 801f05e:	694b      	ldreq	r3, [r1, #20]
 801f060:	600f      	str	r7, [r1, #0]
 801f062:	bf18      	it	ne
 801f064:	2300      	movne	r3, #0
 801f066:	eba6 0807 	sub.w	r8, r6, r7
 801f06a:	608b      	str	r3, [r1, #8]
 801f06c:	f1b8 0f00 	cmp.w	r8, #0
 801f070:	dde9      	ble.n	801f046 <__sflush_r+0xae>
 801f072:	6a21      	ldr	r1, [r4, #32]
 801f074:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801f076:	4643      	mov	r3, r8
 801f078:	463a      	mov	r2, r7
 801f07a:	4628      	mov	r0, r5
 801f07c:	47b0      	blx	r6
 801f07e:	2800      	cmp	r0, #0
 801f080:	dc08      	bgt.n	801f094 <__sflush_r+0xfc>
 801f082:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f086:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801f08a:	81a3      	strh	r3, [r4, #12]
 801f08c:	f04f 30ff 	mov.w	r0, #4294967295
 801f090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f094:	4407      	add	r7, r0
 801f096:	eba8 0800 	sub.w	r8, r8, r0
 801f09a:	e7e7      	b.n	801f06c <__sflush_r+0xd4>
 801f09c:	20400001 	.word	0x20400001

0801f0a0 <_fflush_r>:
 801f0a0:	b538      	push	{r3, r4, r5, lr}
 801f0a2:	690b      	ldr	r3, [r1, #16]
 801f0a4:	4605      	mov	r5, r0
 801f0a6:	460c      	mov	r4, r1
 801f0a8:	b913      	cbnz	r3, 801f0b0 <_fflush_r+0x10>
 801f0aa:	2500      	movs	r5, #0
 801f0ac:	4628      	mov	r0, r5
 801f0ae:	bd38      	pop	{r3, r4, r5, pc}
 801f0b0:	b118      	cbz	r0, 801f0ba <_fflush_r+0x1a>
 801f0b2:	6a03      	ldr	r3, [r0, #32]
 801f0b4:	b90b      	cbnz	r3, 801f0ba <_fflush_r+0x1a>
 801f0b6:	f7ff f833 	bl	801e120 <__sinit>
 801f0ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f0be:	2b00      	cmp	r3, #0
 801f0c0:	d0f3      	beq.n	801f0aa <_fflush_r+0xa>
 801f0c2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801f0c4:	07d0      	lsls	r0, r2, #31
 801f0c6:	d404      	bmi.n	801f0d2 <_fflush_r+0x32>
 801f0c8:	0599      	lsls	r1, r3, #22
 801f0ca:	d402      	bmi.n	801f0d2 <_fflush_r+0x32>
 801f0cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801f0ce:	f7ff fa06 	bl	801e4de <__retarget_lock_acquire_recursive>
 801f0d2:	4628      	mov	r0, r5
 801f0d4:	4621      	mov	r1, r4
 801f0d6:	f7ff ff5f 	bl	801ef98 <__sflush_r>
 801f0da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801f0dc:	07da      	lsls	r2, r3, #31
 801f0de:	4605      	mov	r5, r0
 801f0e0:	d4e4      	bmi.n	801f0ac <_fflush_r+0xc>
 801f0e2:	89a3      	ldrh	r3, [r4, #12]
 801f0e4:	059b      	lsls	r3, r3, #22
 801f0e6:	d4e1      	bmi.n	801f0ac <_fflush_r+0xc>
 801f0e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801f0ea:	f7ff f9f9 	bl	801e4e0 <__retarget_lock_release_recursive>
 801f0ee:	e7dd      	b.n	801f0ac <_fflush_r+0xc>

0801f0f0 <fiprintf>:
 801f0f0:	b40e      	push	{r1, r2, r3}
 801f0f2:	b503      	push	{r0, r1, lr}
 801f0f4:	4601      	mov	r1, r0
 801f0f6:	ab03      	add	r3, sp, #12
 801f0f8:	4805      	ldr	r0, [pc, #20]	@ (801f110 <fiprintf+0x20>)
 801f0fa:	f853 2b04 	ldr.w	r2, [r3], #4
 801f0fe:	6800      	ldr	r0, [r0, #0]
 801f100:	9301      	str	r3, [sp, #4]
 801f102:	f7ff fca5 	bl	801ea50 <_vfiprintf_r>
 801f106:	b002      	add	sp, #8
 801f108:	f85d eb04 	ldr.w	lr, [sp], #4
 801f10c:	b003      	add	sp, #12
 801f10e:	4770      	bx	lr
 801f110:	20000120 	.word	0x20000120

0801f114 <__swbuf_r>:
 801f114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f116:	460e      	mov	r6, r1
 801f118:	4614      	mov	r4, r2
 801f11a:	4605      	mov	r5, r0
 801f11c:	b118      	cbz	r0, 801f126 <__swbuf_r+0x12>
 801f11e:	6a03      	ldr	r3, [r0, #32]
 801f120:	b90b      	cbnz	r3, 801f126 <__swbuf_r+0x12>
 801f122:	f7fe fffd 	bl	801e120 <__sinit>
 801f126:	69a3      	ldr	r3, [r4, #24]
 801f128:	60a3      	str	r3, [r4, #8]
 801f12a:	89a3      	ldrh	r3, [r4, #12]
 801f12c:	071a      	lsls	r2, r3, #28
 801f12e:	d501      	bpl.n	801f134 <__swbuf_r+0x20>
 801f130:	6923      	ldr	r3, [r4, #16]
 801f132:	b943      	cbnz	r3, 801f146 <__swbuf_r+0x32>
 801f134:	4621      	mov	r1, r4
 801f136:	4628      	mov	r0, r5
 801f138:	f000 f82a 	bl	801f190 <__swsetup_r>
 801f13c:	b118      	cbz	r0, 801f146 <__swbuf_r+0x32>
 801f13e:	f04f 37ff 	mov.w	r7, #4294967295
 801f142:	4638      	mov	r0, r7
 801f144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f146:	6823      	ldr	r3, [r4, #0]
 801f148:	6922      	ldr	r2, [r4, #16]
 801f14a:	1a98      	subs	r0, r3, r2
 801f14c:	6963      	ldr	r3, [r4, #20]
 801f14e:	b2f6      	uxtb	r6, r6
 801f150:	4283      	cmp	r3, r0
 801f152:	4637      	mov	r7, r6
 801f154:	dc05      	bgt.n	801f162 <__swbuf_r+0x4e>
 801f156:	4621      	mov	r1, r4
 801f158:	4628      	mov	r0, r5
 801f15a:	f7ff ffa1 	bl	801f0a0 <_fflush_r>
 801f15e:	2800      	cmp	r0, #0
 801f160:	d1ed      	bne.n	801f13e <__swbuf_r+0x2a>
 801f162:	68a3      	ldr	r3, [r4, #8]
 801f164:	3b01      	subs	r3, #1
 801f166:	60a3      	str	r3, [r4, #8]
 801f168:	6823      	ldr	r3, [r4, #0]
 801f16a:	1c5a      	adds	r2, r3, #1
 801f16c:	6022      	str	r2, [r4, #0]
 801f16e:	701e      	strb	r6, [r3, #0]
 801f170:	6962      	ldr	r2, [r4, #20]
 801f172:	1c43      	adds	r3, r0, #1
 801f174:	429a      	cmp	r2, r3
 801f176:	d004      	beq.n	801f182 <__swbuf_r+0x6e>
 801f178:	89a3      	ldrh	r3, [r4, #12]
 801f17a:	07db      	lsls	r3, r3, #31
 801f17c:	d5e1      	bpl.n	801f142 <__swbuf_r+0x2e>
 801f17e:	2e0a      	cmp	r6, #10
 801f180:	d1df      	bne.n	801f142 <__swbuf_r+0x2e>
 801f182:	4621      	mov	r1, r4
 801f184:	4628      	mov	r0, r5
 801f186:	f7ff ff8b 	bl	801f0a0 <_fflush_r>
 801f18a:	2800      	cmp	r0, #0
 801f18c:	d0d9      	beq.n	801f142 <__swbuf_r+0x2e>
 801f18e:	e7d6      	b.n	801f13e <__swbuf_r+0x2a>

0801f190 <__swsetup_r>:
 801f190:	b538      	push	{r3, r4, r5, lr}
 801f192:	4b29      	ldr	r3, [pc, #164]	@ (801f238 <__swsetup_r+0xa8>)
 801f194:	4605      	mov	r5, r0
 801f196:	6818      	ldr	r0, [r3, #0]
 801f198:	460c      	mov	r4, r1
 801f19a:	b118      	cbz	r0, 801f1a4 <__swsetup_r+0x14>
 801f19c:	6a03      	ldr	r3, [r0, #32]
 801f19e:	b90b      	cbnz	r3, 801f1a4 <__swsetup_r+0x14>
 801f1a0:	f7fe ffbe 	bl	801e120 <__sinit>
 801f1a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f1a8:	0719      	lsls	r1, r3, #28
 801f1aa:	d422      	bmi.n	801f1f2 <__swsetup_r+0x62>
 801f1ac:	06da      	lsls	r2, r3, #27
 801f1ae:	d407      	bmi.n	801f1c0 <__swsetup_r+0x30>
 801f1b0:	2209      	movs	r2, #9
 801f1b2:	602a      	str	r2, [r5, #0]
 801f1b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801f1b8:	81a3      	strh	r3, [r4, #12]
 801f1ba:	f04f 30ff 	mov.w	r0, #4294967295
 801f1be:	e033      	b.n	801f228 <__swsetup_r+0x98>
 801f1c0:	0758      	lsls	r0, r3, #29
 801f1c2:	d512      	bpl.n	801f1ea <__swsetup_r+0x5a>
 801f1c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801f1c6:	b141      	cbz	r1, 801f1da <__swsetup_r+0x4a>
 801f1c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801f1cc:	4299      	cmp	r1, r3
 801f1ce:	d002      	beq.n	801f1d6 <__swsetup_r+0x46>
 801f1d0:	4628      	mov	r0, r5
 801f1d2:	f7ff f9bb 	bl	801e54c <_free_r>
 801f1d6:	2300      	movs	r3, #0
 801f1d8:	6363      	str	r3, [r4, #52]	@ 0x34
 801f1da:	89a3      	ldrh	r3, [r4, #12]
 801f1dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801f1e0:	81a3      	strh	r3, [r4, #12]
 801f1e2:	2300      	movs	r3, #0
 801f1e4:	6063      	str	r3, [r4, #4]
 801f1e6:	6923      	ldr	r3, [r4, #16]
 801f1e8:	6023      	str	r3, [r4, #0]
 801f1ea:	89a3      	ldrh	r3, [r4, #12]
 801f1ec:	f043 0308 	orr.w	r3, r3, #8
 801f1f0:	81a3      	strh	r3, [r4, #12]
 801f1f2:	6923      	ldr	r3, [r4, #16]
 801f1f4:	b94b      	cbnz	r3, 801f20a <__swsetup_r+0x7a>
 801f1f6:	89a3      	ldrh	r3, [r4, #12]
 801f1f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801f1fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801f200:	d003      	beq.n	801f20a <__swsetup_r+0x7a>
 801f202:	4621      	mov	r1, r4
 801f204:	4628      	mov	r0, r5
 801f206:	f000 f884 	bl	801f312 <__smakebuf_r>
 801f20a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f20e:	f013 0201 	ands.w	r2, r3, #1
 801f212:	d00a      	beq.n	801f22a <__swsetup_r+0x9a>
 801f214:	2200      	movs	r2, #0
 801f216:	60a2      	str	r2, [r4, #8]
 801f218:	6962      	ldr	r2, [r4, #20]
 801f21a:	4252      	negs	r2, r2
 801f21c:	61a2      	str	r2, [r4, #24]
 801f21e:	6922      	ldr	r2, [r4, #16]
 801f220:	b942      	cbnz	r2, 801f234 <__swsetup_r+0xa4>
 801f222:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801f226:	d1c5      	bne.n	801f1b4 <__swsetup_r+0x24>
 801f228:	bd38      	pop	{r3, r4, r5, pc}
 801f22a:	0799      	lsls	r1, r3, #30
 801f22c:	bf58      	it	pl
 801f22e:	6962      	ldrpl	r2, [r4, #20]
 801f230:	60a2      	str	r2, [r4, #8]
 801f232:	e7f4      	b.n	801f21e <__swsetup_r+0x8e>
 801f234:	2000      	movs	r0, #0
 801f236:	e7f7      	b.n	801f228 <__swsetup_r+0x98>
 801f238:	20000120 	.word	0x20000120

0801f23c <_sbrk_r>:
 801f23c:	b538      	push	{r3, r4, r5, lr}
 801f23e:	4d06      	ldr	r5, [pc, #24]	@ (801f258 <_sbrk_r+0x1c>)
 801f240:	2300      	movs	r3, #0
 801f242:	4604      	mov	r4, r0
 801f244:	4608      	mov	r0, r1
 801f246:	602b      	str	r3, [r5, #0]
 801f248:	f7e5 f870 	bl	800432c <_sbrk>
 801f24c:	1c43      	adds	r3, r0, #1
 801f24e:	d102      	bne.n	801f256 <_sbrk_r+0x1a>
 801f250:	682b      	ldr	r3, [r5, #0]
 801f252:	b103      	cbz	r3, 801f256 <_sbrk_r+0x1a>
 801f254:	6023      	str	r3, [r4, #0]
 801f256:	bd38      	pop	{r3, r4, r5, pc}
 801f258:	2000e94c 	.word	0x2000e94c

0801f25c <abort>:
 801f25c:	b508      	push	{r3, lr}
 801f25e:	2006      	movs	r0, #6
 801f260:	f000 f8bc 	bl	801f3dc <raise>
 801f264:	2001      	movs	r0, #1
 801f266:	f7e4 ffe9 	bl	800423c <_exit>

0801f26a <_realloc_r>:
 801f26a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f26e:	4607      	mov	r7, r0
 801f270:	4614      	mov	r4, r2
 801f272:	460d      	mov	r5, r1
 801f274:	b921      	cbnz	r1, 801f280 <_realloc_r+0x16>
 801f276:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f27a:	4611      	mov	r1, r2
 801f27c:	f7ff b9da 	b.w	801e634 <_malloc_r>
 801f280:	b92a      	cbnz	r2, 801f28e <_realloc_r+0x24>
 801f282:	f7ff f963 	bl	801e54c <_free_r>
 801f286:	4625      	mov	r5, r4
 801f288:	4628      	mov	r0, r5
 801f28a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f28e:	f000 f8e3 	bl	801f458 <_malloc_usable_size_r>
 801f292:	4284      	cmp	r4, r0
 801f294:	4606      	mov	r6, r0
 801f296:	d802      	bhi.n	801f29e <_realloc_r+0x34>
 801f298:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801f29c:	d8f4      	bhi.n	801f288 <_realloc_r+0x1e>
 801f29e:	4621      	mov	r1, r4
 801f2a0:	4638      	mov	r0, r7
 801f2a2:	f7ff f9c7 	bl	801e634 <_malloc_r>
 801f2a6:	4680      	mov	r8, r0
 801f2a8:	b908      	cbnz	r0, 801f2ae <_realloc_r+0x44>
 801f2aa:	4645      	mov	r5, r8
 801f2ac:	e7ec      	b.n	801f288 <_realloc_r+0x1e>
 801f2ae:	42b4      	cmp	r4, r6
 801f2b0:	4622      	mov	r2, r4
 801f2b2:	4629      	mov	r1, r5
 801f2b4:	bf28      	it	cs
 801f2b6:	4632      	movcs	r2, r6
 801f2b8:	f7ff f91b 	bl	801e4f2 <memcpy>
 801f2bc:	4629      	mov	r1, r5
 801f2be:	4638      	mov	r0, r7
 801f2c0:	f7ff f944 	bl	801e54c <_free_r>
 801f2c4:	e7f1      	b.n	801f2aa <_realloc_r+0x40>

0801f2c6 <__swhatbuf_r>:
 801f2c6:	b570      	push	{r4, r5, r6, lr}
 801f2c8:	460c      	mov	r4, r1
 801f2ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f2ce:	2900      	cmp	r1, #0
 801f2d0:	b096      	sub	sp, #88	@ 0x58
 801f2d2:	4615      	mov	r5, r2
 801f2d4:	461e      	mov	r6, r3
 801f2d6:	da0d      	bge.n	801f2f4 <__swhatbuf_r+0x2e>
 801f2d8:	89a3      	ldrh	r3, [r4, #12]
 801f2da:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801f2de:	f04f 0100 	mov.w	r1, #0
 801f2e2:	bf14      	ite	ne
 801f2e4:	2340      	movne	r3, #64	@ 0x40
 801f2e6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801f2ea:	2000      	movs	r0, #0
 801f2ec:	6031      	str	r1, [r6, #0]
 801f2ee:	602b      	str	r3, [r5, #0]
 801f2f0:	b016      	add	sp, #88	@ 0x58
 801f2f2:	bd70      	pop	{r4, r5, r6, pc}
 801f2f4:	466a      	mov	r2, sp
 801f2f6:	f000 f879 	bl	801f3ec <_fstat_r>
 801f2fa:	2800      	cmp	r0, #0
 801f2fc:	dbec      	blt.n	801f2d8 <__swhatbuf_r+0x12>
 801f2fe:	9901      	ldr	r1, [sp, #4]
 801f300:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801f304:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801f308:	4259      	negs	r1, r3
 801f30a:	4159      	adcs	r1, r3
 801f30c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801f310:	e7eb      	b.n	801f2ea <__swhatbuf_r+0x24>

0801f312 <__smakebuf_r>:
 801f312:	898b      	ldrh	r3, [r1, #12]
 801f314:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f316:	079d      	lsls	r5, r3, #30
 801f318:	4606      	mov	r6, r0
 801f31a:	460c      	mov	r4, r1
 801f31c:	d507      	bpl.n	801f32e <__smakebuf_r+0x1c>
 801f31e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801f322:	6023      	str	r3, [r4, #0]
 801f324:	6123      	str	r3, [r4, #16]
 801f326:	2301      	movs	r3, #1
 801f328:	6163      	str	r3, [r4, #20]
 801f32a:	b003      	add	sp, #12
 801f32c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f32e:	ab01      	add	r3, sp, #4
 801f330:	466a      	mov	r2, sp
 801f332:	f7ff ffc8 	bl	801f2c6 <__swhatbuf_r>
 801f336:	9f00      	ldr	r7, [sp, #0]
 801f338:	4605      	mov	r5, r0
 801f33a:	4639      	mov	r1, r7
 801f33c:	4630      	mov	r0, r6
 801f33e:	f7ff f979 	bl	801e634 <_malloc_r>
 801f342:	b948      	cbnz	r0, 801f358 <__smakebuf_r+0x46>
 801f344:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f348:	059a      	lsls	r2, r3, #22
 801f34a:	d4ee      	bmi.n	801f32a <__smakebuf_r+0x18>
 801f34c:	f023 0303 	bic.w	r3, r3, #3
 801f350:	f043 0302 	orr.w	r3, r3, #2
 801f354:	81a3      	strh	r3, [r4, #12]
 801f356:	e7e2      	b.n	801f31e <__smakebuf_r+0xc>
 801f358:	89a3      	ldrh	r3, [r4, #12]
 801f35a:	6020      	str	r0, [r4, #0]
 801f35c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801f360:	81a3      	strh	r3, [r4, #12]
 801f362:	9b01      	ldr	r3, [sp, #4]
 801f364:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801f368:	b15b      	cbz	r3, 801f382 <__smakebuf_r+0x70>
 801f36a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f36e:	4630      	mov	r0, r6
 801f370:	f000 f84e 	bl	801f410 <_isatty_r>
 801f374:	b128      	cbz	r0, 801f382 <__smakebuf_r+0x70>
 801f376:	89a3      	ldrh	r3, [r4, #12]
 801f378:	f023 0303 	bic.w	r3, r3, #3
 801f37c:	f043 0301 	orr.w	r3, r3, #1
 801f380:	81a3      	strh	r3, [r4, #12]
 801f382:	89a3      	ldrh	r3, [r4, #12]
 801f384:	431d      	orrs	r5, r3
 801f386:	81a5      	strh	r5, [r4, #12]
 801f388:	e7cf      	b.n	801f32a <__smakebuf_r+0x18>

0801f38a <_raise_r>:
 801f38a:	291f      	cmp	r1, #31
 801f38c:	b538      	push	{r3, r4, r5, lr}
 801f38e:	4605      	mov	r5, r0
 801f390:	460c      	mov	r4, r1
 801f392:	d904      	bls.n	801f39e <_raise_r+0x14>
 801f394:	2316      	movs	r3, #22
 801f396:	6003      	str	r3, [r0, #0]
 801f398:	f04f 30ff 	mov.w	r0, #4294967295
 801f39c:	bd38      	pop	{r3, r4, r5, pc}
 801f39e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801f3a0:	b112      	cbz	r2, 801f3a8 <_raise_r+0x1e>
 801f3a2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801f3a6:	b94b      	cbnz	r3, 801f3bc <_raise_r+0x32>
 801f3a8:	4628      	mov	r0, r5
 801f3aa:	f000 f853 	bl	801f454 <_getpid_r>
 801f3ae:	4622      	mov	r2, r4
 801f3b0:	4601      	mov	r1, r0
 801f3b2:	4628      	mov	r0, r5
 801f3b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f3b8:	f000 b83a 	b.w	801f430 <_kill_r>
 801f3bc:	2b01      	cmp	r3, #1
 801f3be:	d00a      	beq.n	801f3d6 <_raise_r+0x4c>
 801f3c0:	1c59      	adds	r1, r3, #1
 801f3c2:	d103      	bne.n	801f3cc <_raise_r+0x42>
 801f3c4:	2316      	movs	r3, #22
 801f3c6:	6003      	str	r3, [r0, #0]
 801f3c8:	2001      	movs	r0, #1
 801f3ca:	e7e7      	b.n	801f39c <_raise_r+0x12>
 801f3cc:	2100      	movs	r1, #0
 801f3ce:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801f3d2:	4620      	mov	r0, r4
 801f3d4:	4798      	blx	r3
 801f3d6:	2000      	movs	r0, #0
 801f3d8:	e7e0      	b.n	801f39c <_raise_r+0x12>
	...

0801f3dc <raise>:
 801f3dc:	4b02      	ldr	r3, [pc, #8]	@ (801f3e8 <raise+0xc>)
 801f3de:	4601      	mov	r1, r0
 801f3e0:	6818      	ldr	r0, [r3, #0]
 801f3e2:	f7ff bfd2 	b.w	801f38a <_raise_r>
 801f3e6:	bf00      	nop
 801f3e8:	20000120 	.word	0x20000120

0801f3ec <_fstat_r>:
 801f3ec:	b538      	push	{r3, r4, r5, lr}
 801f3ee:	4d07      	ldr	r5, [pc, #28]	@ (801f40c <_fstat_r+0x20>)
 801f3f0:	2300      	movs	r3, #0
 801f3f2:	4604      	mov	r4, r0
 801f3f4:	4608      	mov	r0, r1
 801f3f6:	4611      	mov	r1, r2
 801f3f8:	602b      	str	r3, [r5, #0]
 801f3fa:	f7e4 ff6f 	bl	80042dc <_fstat>
 801f3fe:	1c43      	adds	r3, r0, #1
 801f400:	d102      	bne.n	801f408 <_fstat_r+0x1c>
 801f402:	682b      	ldr	r3, [r5, #0]
 801f404:	b103      	cbz	r3, 801f408 <_fstat_r+0x1c>
 801f406:	6023      	str	r3, [r4, #0]
 801f408:	bd38      	pop	{r3, r4, r5, pc}
 801f40a:	bf00      	nop
 801f40c:	2000e94c 	.word	0x2000e94c

0801f410 <_isatty_r>:
 801f410:	b538      	push	{r3, r4, r5, lr}
 801f412:	4d06      	ldr	r5, [pc, #24]	@ (801f42c <_isatty_r+0x1c>)
 801f414:	2300      	movs	r3, #0
 801f416:	4604      	mov	r4, r0
 801f418:	4608      	mov	r0, r1
 801f41a:	602b      	str	r3, [r5, #0]
 801f41c:	f7e4 ff6e 	bl	80042fc <_isatty>
 801f420:	1c43      	adds	r3, r0, #1
 801f422:	d102      	bne.n	801f42a <_isatty_r+0x1a>
 801f424:	682b      	ldr	r3, [r5, #0]
 801f426:	b103      	cbz	r3, 801f42a <_isatty_r+0x1a>
 801f428:	6023      	str	r3, [r4, #0]
 801f42a:	bd38      	pop	{r3, r4, r5, pc}
 801f42c:	2000e94c 	.word	0x2000e94c

0801f430 <_kill_r>:
 801f430:	b538      	push	{r3, r4, r5, lr}
 801f432:	4d07      	ldr	r5, [pc, #28]	@ (801f450 <_kill_r+0x20>)
 801f434:	2300      	movs	r3, #0
 801f436:	4604      	mov	r4, r0
 801f438:	4608      	mov	r0, r1
 801f43a:	4611      	mov	r1, r2
 801f43c:	602b      	str	r3, [r5, #0]
 801f43e:	f7e4 feeb 	bl	8004218 <_kill>
 801f442:	1c43      	adds	r3, r0, #1
 801f444:	d102      	bne.n	801f44c <_kill_r+0x1c>
 801f446:	682b      	ldr	r3, [r5, #0]
 801f448:	b103      	cbz	r3, 801f44c <_kill_r+0x1c>
 801f44a:	6023      	str	r3, [r4, #0]
 801f44c:	bd38      	pop	{r3, r4, r5, pc}
 801f44e:	bf00      	nop
 801f450:	2000e94c 	.word	0x2000e94c

0801f454 <_getpid_r>:
 801f454:	f7e4 bed8 	b.w	8004208 <_getpid>

0801f458 <_malloc_usable_size_r>:
 801f458:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f45c:	1f18      	subs	r0, r3, #4
 801f45e:	2b00      	cmp	r3, #0
 801f460:	bfbc      	itt	lt
 801f462:	580b      	ldrlt	r3, [r1, r0]
 801f464:	18c0      	addlt	r0, r0, r3
 801f466:	4770      	bx	lr

0801f468 <_init>:
 801f468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f46a:	bf00      	nop
 801f46c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f46e:	bc08      	pop	{r3}
 801f470:	469e      	mov	lr, r3
 801f472:	4770      	bx	lr

0801f474 <_fini>:
 801f474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f476:	bf00      	nop
 801f478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f47a:	bc08      	pop	{r3}
 801f47c:	469e      	mov	lr, r3
 801f47e:	4770      	bx	lr


dispenserBeneth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000183e4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002f5c  08018574  08018574  00019574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b4d0  0801b4d0  0001d168  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801b4d0  0801b4d0  0001c4d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b4d8  0801b4d8  0001d168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b4d8  0801b4d8  0001c4d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801b4dc  0801b4dc  0001c4dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000168  20000000  0801b4e0  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001d168  2**0
                  CONTENTS
 10 .bss          0000e3ac  20000168  20000168  0001d168  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000e514  2000e514  0001d168  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001d168  2**0
                  CONTENTS, READONLY
 13 .debug_info   000375a2  00000000  00000000  0001d198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008fa1  00000000  00000000  0005473a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002908  00000000  00000000  0005d6e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002024  00000000  00000000  0005ffe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00013b1a  00000000  00000000  0006200c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003e0e2  00000000  00000000  00075b26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f607f  00000000  00000000  000b3c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001a9c87  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000b3fc  00000000  00000000  001a9ccc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  001b50c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000168 	.word	0x20000168
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801855c 	.word	0x0801855c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000016c 	.word	0x2000016c
 80001cc:	0801855c 	.word	0x0801855c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	4a07      	ldr	r2, [pc, #28]	@ (80005d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80005bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	4a06      	ldr	r2, [pc, #24]	@ (80005dc <vApplicationGetIdleTaskMemory+0x30>)
 80005c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2280      	movs	r2, #128	@ 0x80
 80005c8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ca:	bf00      	nop
 80005cc:	3714      	adds	r7, #20
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	20000184 	.word	0x20000184
 80005dc:	20000224 	.word	0x20000224

080005e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e0:	b5b0      	push	{r4, r5, r7, lr}
 80005e2:	b088      	sub	sp, #32
 80005e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e6:	f000 ff4b 	bl	8001480 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ea:	f000 f823 	bl	8000634 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ee:	f000 f915 	bl	800081c <MX_GPIO_Init>
  MX_FSMC_Init();
 80005f2:	f000 f9b7 	bl	8000964 <MX_FSMC_Init>
  MX_USART1_UART_Init();
 80005f6:	f000 f8bd 	bl	8000774 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80005fa:	f000 f8e5 	bl	80007c8 <MX_USART6_UART_Init>
  MX_TIM7_Init();
 80005fe:	f000 f883 	bl	8000708 <MX_TIM7_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 8000602:	4b0a      	ldr	r3, [pc, #40]	@ (800062c <main+0x4c>)
 8000604:	1d3c      	adds	r4, r7, #4
 8000606:	461d      	mov	r5, r3
 8000608:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800060a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800060c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000610:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000614:	1d3b      	adds	r3, r7, #4
 8000616:	2100      	movs	r1, #0
 8000618:	4618      	mov	r0, r3
 800061a:	f009 f8e1 	bl	80097e0 <osThreadCreate>
 800061e:	4603      	mov	r3, r0
 8000620:	4a03      	ldr	r2, [pc, #12]	@ (8000630 <main+0x50>)
 8000622:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000624:	f009 f8c5 	bl	80097b2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000628:	bf00      	nop
 800062a:	e7fd      	b.n	8000628 <main+0x48>
 800062c:	08018580 	.word	0x08018580
 8000630:	2000054c 	.word	0x2000054c

08000634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b094      	sub	sp, #80	@ 0x50
 8000638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063a:	f107 0320 	add.w	r3, r7, #32
 800063e:	2230      	movs	r2, #48	@ 0x30
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f016 fefb 	bl	801743e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000648:	f107 030c 	add.w	r3, r7, #12
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000658:	2300      	movs	r3, #0
 800065a:	60bb      	str	r3, [r7, #8]
 800065c:	4b28      	ldr	r3, [pc, #160]	@ (8000700 <SystemClock_Config+0xcc>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000660:	4a27      	ldr	r2, [pc, #156]	@ (8000700 <SystemClock_Config+0xcc>)
 8000662:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000666:	6413      	str	r3, [r2, #64]	@ 0x40
 8000668:	4b25      	ldr	r3, [pc, #148]	@ (8000700 <SystemClock_Config+0xcc>)
 800066a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800066c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000670:	60bb      	str	r3, [r7, #8]
 8000672:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000674:	2300      	movs	r3, #0
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	4b22      	ldr	r3, [pc, #136]	@ (8000704 <SystemClock_Config+0xd0>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a21      	ldr	r2, [pc, #132]	@ (8000704 <SystemClock_Config+0xd0>)
 800067e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000682:	6013      	str	r3, [r2, #0]
 8000684:	4b1f      	ldr	r3, [pc, #124]	@ (8000704 <SystemClock_Config+0xd0>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800068c:	607b      	str	r3, [r7, #4]
 800068e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000690:	2301      	movs	r3, #1
 8000692:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000694:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000698:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069a:	2302      	movs	r3, #2
 800069c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800069e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 80006a4:	230f      	movs	r3, #15
 80006a6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80006a8:	2390      	movs	r3, #144	@ 0x90
 80006aa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ac:	2302      	movs	r3, #2
 80006ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80006b0:	2305      	movs	r3, #5
 80006b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b4:	f107 0320 	add.w	r3, r7, #32
 80006b8:	4618      	mov	r0, r3
 80006ba:	f003 fc49 	bl	8003f50 <HAL_RCC_OscConfig>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006c4:	f000 fa1a 	bl	8000afc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c8:	230f      	movs	r3, #15
 80006ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006cc:	2302      	movs	r3, #2
 80006ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006d4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006e0:	f107 030c 	add.w	r3, r7, #12
 80006e4:	2103      	movs	r1, #3
 80006e6:	4618      	mov	r0, r3
 80006e8:	f003 feaa 	bl	8004440 <HAL_RCC_ClockConfig>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006f2:	f000 fa03 	bl	8000afc <Error_Handler>
  }
}
 80006f6:	bf00      	nop
 80006f8:	3750      	adds	r7, #80	@ 0x50
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40023800 	.word	0x40023800
 8000704:	40007000 	.word	0x40007000

08000708 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800070e:	463b      	mov	r3, r7
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000716:	4b15      	ldr	r3, [pc, #84]	@ (800076c <MX_TIM7_Init+0x64>)
 8000718:	4a15      	ldr	r2, [pc, #84]	@ (8000770 <MX_TIM7_Init+0x68>)
 800071a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7999;
 800071c:	4b13      	ldr	r3, [pc, #76]	@ (800076c <MX_TIM7_Init+0x64>)
 800071e:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000722:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000724:	4b11      	ldr	r3, [pc, #68]	@ (800076c <MX_TIM7_Init+0x64>)
 8000726:	2200      	movs	r2, #0
 8000728:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 800072a:	4b10      	ldr	r3, [pc, #64]	@ (800076c <MX_TIM7_Init+0x64>)
 800072c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000730:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000732:	4b0e      	ldr	r3, [pc, #56]	@ (800076c <MX_TIM7_Init+0x64>)
 8000734:	2200      	movs	r2, #0
 8000736:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000738:	480c      	ldr	r0, [pc, #48]	@ (800076c <MX_TIM7_Init+0x64>)
 800073a:	f004 f8db 	bl	80048f4 <HAL_TIM_Base_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000744:	f000 f9da 	bl	8000afc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000748:	2300      	movs	r3, #0
 800074a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800074c:	2300      	movs	r3, #0
 800074e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000750:	463b      	mov	r3, r7
 8000752:	4619      	mov	r1, r3
 8000754:	4805      	ldr	r0, [pc, #20]	@ (800076c <MX_TIM7_Init+0x64>)
 8000756:	f004 fb4b 	bl	8004df0 <HAL_TIMEx_MasterConfigSynchronization>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000760:	f000 f9cc 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000764:	bf00      	nop
 8000766:	3708      	adds	r7, #8
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	20000424 	.word	0x20000424
 8000770:	40001400 	.word	0x40001400

08000774 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000778:	4b11      	ldr	r3, [pc, #68]	@ (80007c0 <MX_USART1_UART_Init+0x4c>)
 800077a:	4a12      	ldr	r2, [pc, #72]	@ (80007c4 <MX_USART1_UART_Init+0x50>)
 800077c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800077e:	4b10      	ldr	r3, [pc, #64]	@ (80007c0 <MX_USART1_UART_Init+0x4c>)
 8000780:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000784:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000786:	4b0e      	ldr	r3, [pc, #56]	@ (80007c0 <MX_USART1_UART_Init+0x4c>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800078c:	4b0c      	ldr	r3, [pc, #48]	@ (80007c0 <MX_USART1_UART_Init+0x4c>)
 800078e:	2200      	movs	r2, #0
 8000790:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000792:	4b0b      	ldr	r3, [pc, #44]	@ (80007c0 <MX_USART1_UART_Init+0x4c>)
 8000794:	2200      	movs	r2, #0
 8000796:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000798:	4b09      	ldr	r3, [pc, #36]	@ (80007c0 <MX_USART1_UART_Init+0x4c>)
 800079a:	220c      	movs	r2, #12
 800079c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800079e:	4b08      	ldr	r3, [pc, #32]	@ (80007c0 <MX_USART1_UART_Init+0x4c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a4:	4b06      	ldr	r3, [pc, #24]	@ (80007c0 <MX_USART1_UART_Init+0x4c>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007aa:	4805      	ldr	r0, [pc, #20]	@ (80007c0 <MX_USART1_UART_Init+0x4c>)
 80007ac:	f004 fbb0 	bl	8004f10 <HAL_UART_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007b6:	f000 f9a1 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	2000046c 	.word	0x2000046c
 80007c4:	40011000 	.word	0x40011000

080007c8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80007cc:	4b11      	ldr	r3, [pc, #68]	@ (8000814 <MX_USART6_UART_Init+0x4c>)
 80007ce:	4a12      	ldr	r2, [pc, #72]	@ (8000818 <MX_USART6_UART_Init+0x50>)
 80007d0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80007d2:	4b10      	ldr	r3, [pc, #64]	@ (8000814 <MX_USART6_UART_Init+0x4c>)
 80007d4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80007d8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80007da:	4b0e      	ldr	r3, [pc, #56]	@ (8000814 <MX_USART6_UART_Init+0x4c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80007e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000814 <MX_USART6_UART_Init+0x4c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80007e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000814 <MX_USART6_UART_Init+0x4c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80007ec:	4b09      	ldr	r3, [pc, #36]	@ (8000814 <MX_USART6_UART_Init+0x4c>)
 80007ee:	220c      	movs	r2, #12
 80007f0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007f2:	4b08      	ldr	r3, [pc, #32]	@ (8000814 <MX_USART6_UART_Init+0x4c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f8:	4b06      	ldr	r3, [pc, #24]	@ (8000814 <MX_USART6_UART_Init+0x4c>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80007fe:	4805      	ldr	r0, [pc, #20]	@ (8000814 <MX_USART6_UART_Init+0x4c>)
 8000800:	f004 fb86 	bl	8004f10 <HAL_UART_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800080a:	f000 f977 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	200004b4 	.word	0x200004b4
 8000818:	40011400 	.word	0x40011400

0800081c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b08e      	sub	sp, #56	@ 0x38
 8000820:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000822:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
 800082a:	605a      	str	r2, [r3, #4]
 800082c:	609a      	str	r2, [r3, #8]
 800082e:	60da      	str	r2, [r3, #12]
 8000830:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	623b      	str	r3, [r7, #32]
 8000836:	4b49      	ldr	r3, [pc, #292]	@ (800095c <MX_GPIO_Init+0x140>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	4a48      	ldr	r2, [pc, #288]	@ (800095c <MX_GPIO_Init+0x140>)
 800083c:	f043 0304 	orr.w	r3, r3, #4
 8000840:	6313      	str	r3, [r2, #48]	@ 0x30
 8000842:	4b46      	ldr	r3, [pc, #280]	@ (800095c <MX_GPIO_Init+0x140>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	f003 0304 	and.w	r3, r3, #4
 800084a:	623b      	str	r3, [r7, #32]
 800084c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	61fb      	str	r3, [r7, #28]
 8000852:	4b42      	ldr	r3, [pc, #264]	@ (800095c <MX_GPIO_Init+0x140>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	4a41      	ldr	r2, [pc, #260]	@ (800095c <MX_GPIO_Init+0x140>)
 8000858:	f043 0320 	orr.w	r3, r3, #32
 800085c:	6313      	str	r3, [r2, #48]	@ 0x30
 800085e:	4b3f      	ldr	r3, [pc, #252]	@ (800095c <MX_GPIO_Init+0x140>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	f003 0320 	and.w	r3, r3, #32
 8000866:	61fb      	str	r3, [r7, #28]
 8000868:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	61bb      	str	r3, [r7, #24]
 800086e:	4b3b      	ldr	r3, [pc, #236]	@ (800095c <MX_GPIO_Init+0x140>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	4a3a      	ldr	r2, [pc, #232]	@ (800095c <MX_GPIO_Init+0x140>)
 8000874:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000878:	6313      	str	r3, [r2, #48]	@ 0x30
 800087a:	4b38      	ldr	r3, [pc, #224]	@ (800095c <MX_GPIO_Init+0x140>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000882:	61bb      	str	r3, [r7, #24]
 8000884:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	617b      	str	r3, [r7, #20]
 800088a:	4b34      	ldr	r3, [pc, #208]	@ (800095c <MX_GPIO_Init+0x140>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	4a33      	ldr	r2, [pc, #204]	@ (800095c <MX_GPIO_Init+0x140>)
 8000890:	f043 0301 	orr.w	r3, r3, #1
 8000894:	6313      	str	r3, [r2, #48]	@ 0x30
 8000896:	4b31      	ldr	r3, [pc, #196]	@ (800095c <MX_GPIO_Init+0x140>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	617b      	str	r3, [r7, #20]
 80008a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	613b      	str	r3, [r7, #16]
 80008a6:	4b2d      	ldr	r3, [pc, #180]	@ (800095c <MX_GPIO_Init+0x140>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008aa:	4a2c      	ldr	r2, [pc, #176]	@ (800095c <MX_GPIO_Init+0x140>)
 80008ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008b2:	4b2a      	ldr	r3, [pc, #168]	@ (800095c <MX_GPIO_Init+0x140>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008ba:	613b      	str	r3, [r7, #16]
 80008bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	60fb      	str	r3, [r7, #12]
 80008c2:	4b26      	ldr	r3, [pc, #152]	@ (800095c <MX_GPIO_Init+0x140>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c6:	4a25      	ldr	r2, [pc, #148]	@ (800095c <MX_GPIO_Init+0x140>)
 80008c8:	f043 0310 	orr.w	r3, r3, #16
 80008cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ce:	4b23      	ldr	r3, [pc, #140]	@ (800095c <MX_GPIO_Init+0x140>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	f003 0310 	and.w	r3, r3, #16
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	60bb      	str	r3, [r7, #8]
 80008de:	4b1f      	ldr	r3, [pc, #124]	@ (800095c <MX_GPIO_Init+0x140>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	4a1e      	ldr	r2, [pc, #120]	@ (800095c <MX_GPIO_Init+0x140>)
 80008e4:	f043 0302 	orr.w	r3, r3, #2
 80008e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ea:	4b1c      	ldr	r3, [pc, #112]	@ (800095c <MX_GPIO_Init+0x140>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ee:	f003 0302 	and.w	r3, r3, #2
 80008f2:	60bb      	str	r3, [r7, #8]
 80008f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	607b      	str	r3, [r7, #4]
 80008fa:	4b18      	ldr	r3, [pc, #96]	@ (800095c <MX_GPIO_Init+0x140>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	4a17      	ldr	r2, [pc, #92]	@ (800095c <MX_GPIO_Init+0x140>)
 8000900:	f043 0308 	orr.w	r3, r3, #8
 8000904:	6313      	str	r3, [r2, #48]	@ 0x30
 8000906:	4b15      	ldr	r3, [pc, #84]	@ (800095c <MX_GPIO_Init+0x140>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090a:	f003 0308 	and.w	r3, r3, #8
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET);
 8000912:	2201      	movs	r2, #1
 8000914:	2108      	movs	r1, #8
 8000916:	4812      	ldr	r0, [pc, #72]	@ (8000960 <MX_GPIO_Init+0x144>)
 8000918:	f002 f8ae 	bl	8002a78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800091c:	2308      	movs	r3, #8
 800091e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000920:	2301      	movs	r3, #1
 8000922:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000928:	2300      	movs	r3, #0
 800092a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800092c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000930:	4619      	mov	r1, r3
 8000932:	480b      	ldr	r0, [pc, #44]	@ (8000960 <MX_GPIO_Init+0x144>)
 8000934:	f001 ff04 	bl	8002740 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  // PHY 复位
      HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET); // 拉低
 8000938:	2200      	movs	r2, #0
 800093a:	2108      	movs	r1, #8
 800093c:	4808      	ldr	r0, [pc, #32]	@ (8000960 <MX_GPIO_Init+0x144>)
 800093e:	f002 f89b 	bl	8002a78 <HAL_GPIO_WritePin>
      HAL_Delay(20); // 延时 >10ms
 8000942:	2014      	movs	r0, #20
 8000944:	f000 fdde 	bl	8001504 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET);   // 拉高
 8000948:	2201      	movs	r2, #1
 800094a:	2108      	movs	r1, #8
 800094c:	4804      	ldr	r0, [pc, #16]	@ (8000960 <MX_GPIO_Init+0x144>)
 800094e:	f002 f893 	bl	8002a78 <HAL_GPIO_WritePin>
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000952:	bf00      	nop
 8000954:	3738      	adds	r7, #56	@ 0x38
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40023800 	.word	0x40023800
 8000960:	40020c00 	.word	0x40020c00

08000964 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b088      	sub	sp, #32
 8000968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800096a:	1d3b      	adds	r3, r7, #4
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
 8000972:	609a      	str	r2, [r3, #8]
 8000974:	60da      	str	r2, [r3, #12]
 8000976:	611a      	str	r2, [r3, #16]
 8000978:	615a      	str	r2, [r3, #20]
 800097a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM3 memory initialization sequence
  */
  hsram3.Instance = FSMC_NORSRAM_DEVICE;
 800097c:	4b26      	ldr	r3, [pc, #152]	@ (8000a18 <MX_FSMC_Init+0xb4>)
 800097e:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 8000982:	601a      	str	r2, [r3, #0]
  hsram3.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000984:	4b24      	ldr	r3, [pc, #144]	@ (8000a18 <MX_FSMC_Init+0xb4>)
 8000986:	4a25      	ldr	r2, [pc, #148]	@ (8000a1c <MX_FSMC_Init+0xb8>)
 8000988:	605a      	str	r2, [r3, #4]
  /* hsram3.Init */
  hsram3.Init.NSBank = FSMC_NORSRAM_BANK3;
 800098a:	4b23      	ldr	r3, [pc, #140]	@ (8000a18 <MX_FSMC_Init+0xb4>)
 800098c:	2204      	movs	r2, #4
 800098e:	609a      	str	r2, [r3, #8]
  hsram3.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000990:	4b21      	ldr	r3, [pc, #132]	@ (8000a18 <MX_FSMC_Init+0xb4>)
 8000992:	2200      	movs	r2, #0
 8000994:	60da      	str	r2, [r3, #12]
  hsram3.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000996:	4b20      	ldr	r3, [pc, #128]	@ (8000a18 <MX_FSMC_Init+0xb4>)
 8000998:	2200      	movs	r2, #0
 800099a:	611a      	str	r2, [r3, #16]
  hsram3.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800099c:	4b1e      	ldr	r3, [pc, #120]	@ (8000a18 <MX_FSMC_Init+0xb4>)
 800099e:	2210      	movs	r2, #16
 80009a0:	615a      	str	r2, [r3, #20]
  hsram3.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80009a2:	4b1d      	ldr	r3, [pc, #116]	@ (8000a18 <MX_FSMC_Init+0xb4>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	619a      	str	r2, [r3, #24]
  hsram3.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80009a8:	4b1b      	ldr	r3, [pc, #108]	@ (8000a18 <MX_FSMC_Init+0xb4>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	61da      	str	r2, [r3, #28]
  hsram3.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80009ae:	4b1a      	ldr	r3, [pc, #104]	@ (8000a18 <MX_FSMC_Init+0xb4>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	621a      	str	r2, [r3, #32]
  hsram3.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80009b4:	4b18      	ldr	r3, [pc, #96]	@ (8000a18 <MX_FSMC_Init+0xb4>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram3.Init.WriteOperation = FSMC_WRITE_OPERATION_DISABLE;
 80009ba:	4b17      	ldr	r3, [pc, #92]	@ (8000a18 <MX_FSMC_Init+0xb4>)
 80009bc:	2200      	movs	r2, #0
 80009be:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram3.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80009c0:	4b15      	ldr	r3, [pc, #84]	@ (8000a18 <MX_FSMC_Init+0xb4>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram3.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80009c6:	4b14      	ldr	r3, [pc, #80]	@ (8000a18 <MX_FSMC_Init+0xb4>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram3.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80009cc:	4b12      	ldr	r3, [pc, #72]	@ (8000a18 <MX_FSMC_Init+0xb4>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram3.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80009d2:	4b11      	ldr	r3, [pc, #68]	@ (8000a18 <MX_FSMC_Init+0xb4>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram3.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80009d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000a18 <MX_FSMC_Init+0xb4>)
 80009da:	2200      	movs	r2, #0
 80009dc:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 80009de:	230f      	movs	r3, #15
 80009e0:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80009e2:	230f      	movs	r3, #15
 80009e4:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80009e6:	23ff      	movs	r3, #255	@ 0xff
 80009e8:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80009ea:	230f      	movs	r3, #15
 80009ec:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80009ee:	2310      	movs	r3, #16
 80009f0:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80009f2:	2311      	movs	r3, #17
 80009f4:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80009f6:	2300      	movs	r3, #0
 80009f8:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram3, &Timing, NULL) != HAL_OK)
 80009fa:	1d3b      	adds	r3, r7, #4
 80009fc:	2200      	movs	r2, #0
 80009fe:	4619      	mov	r1, r3
 8000a00:	4805      	ldr	r0, [pc, #20]	@ (8000a18 <MX_FSMC_Init+0xb4>)
 8000a02:	f003 ff2f 	bl	8004864 <HAL_SRAM_Init>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_FSMC_Init+0xac>
  {
    Error_Handler( );
 8000a0c:	f000 f876 	bl	8000afc <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000a10:	bf00      	nop
 8000a12:	3720      	adds	r7, #32
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	200004fc 	.word	0x200004fc
 8000a1c:	a0000104 	.word	0xa0000104

08000a20 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000a20:	b590      	push	{r4, r7, lr}
 8000a22:	b093      	sub	sp, #76	@ 0x4c
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000a28:	f015 fe3a 	bl	80166a0 <MX_USB_DEVICE_Init>

  /* init code for LWIP */
  MX_LWIP_Init();
 8000a2c:	f006 f952 	bl	8006cd4 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  char msg1[] = "TEST BEGIN\r\n";
 8000a30:	4b25      	ldr	r3, [pc, #148]	@ (8000ac8 <StartDefaultTask+0xa8>)
 8000a32:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8000a36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a38:	c407      	stmia	r4!, {r0, r1, r2}
 8000a3a:	7023      	strb	r3, [r4, #0]
  char msg2[] = "TEST END\r\n";
 8000a3c:	4a23      	ldr	r2, [pc, #140]	@ (8000acc <StartDefaultTask+0xac>)
 8000a3e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a42:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a44:	c303      	stmia	r3!, {r0, r1}
 8000a46:	801a      	strh	r2, [r3, #0]
 8000a48:	3302      	adds	r3, #2
 8000a4a:	0c12      	lsrs	r2, r2, #16
 8000a4c:	701a      	strb	r2, [r3, #0]


  // 等待 USB 枚举就绪
  osDelay(2000);
 8000a4e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000a52:	f008 ff11 	bl	8009878 <osDelay>

  for(;;)
  {
    // 格式化并发送调试消息：开始测试
	CDC_Transmit_FS(msg2,strlen(msg2));
 8000a56:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f7ff fbb8 	bl	80001d0 <strlen>
 8000a60:	4602      	mov	r2, r0
 8000a62:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a66:	4611      	mov	r1, r2
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f015 fed7 	bl	801681c <CDC_Transmit_FS>

    HAL_Delay(500); // 短暂延迟，避免缓冲溢出
 8000a6e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a72:	f000 fd47 	bl	8001504 <HAL_Delay>
    int32_t phy_status = yt8512c_get_link_state(&yt8512c);
 8000a76:	4816      	ldr	r0, [pc, #88]	@ (8000ad0 <StartDefaultTask+0xb0>)
 8000a78:	f000 fcaa 	bl	80013d0 <yt8512c_get_link_state>
 8000a7c:	6478      	str	r0, [r7, #68]	@ 0x44
	char buffer[32];
	snprintf(buffer, sizeof(buffer), "Main PHY Status: %d\r\n", phy_status);
 8000a7e:	f107 0008 	add.w	r0, r7, #8
 8000a82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000a84:	4a13      	ldr	r2, [pc, #76]	@ (8000ad4 <StartDefaultTask+0xb4>)
 8000a86:	2120      	movs	r1, #32
 8000a88:	f016 fc36 	bl	80172f8 <sniprintf>
	CDC_Transmit_FS((uint8_t *)buffer, strlen(buffer));
 8000a8c:	f107 0308 	add.w	r3, r7, #8
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff fb9d 	bl	80001d0 <strlen>
 8000a96:	4602      	mov	r2, r0
 8000a98:	f107 0308 	add.w	r3, r7, #8
 8000a9c:	4611      	mov	r1, r2
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f015 febc 	bl	801681c <CDC_Transmit_FS>
    // 舵机动作：移动到 800 位置（假设 BusServo_Move 已定义）
    //BusServo_Move(1, 800, 500);
    // 舵机动作：移动到 0 位置
    //BusServo_Move(1, 0, 500);
    // 格式化并发送调试消息：结束测试
    CDC_Transmit_FS(msg1,strlen(msg1));
 8000aa4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f7ff fb91 	bl	80001d0 <strlen>
 8000aae:	4602      	mov	r2, r0
 8000ab0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000ab4:	4611      	mov	r1, r2
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f015 feb0 	bl	801681c <CDC_Transmit_FS>
    HAL_Delay(500);
 8000abc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000ac0:	f000 fd20 	bl	8001504 <HAL_Delay>
  {
 8000ac4:	bf00      	nop
 8000ac6:	e7c6      	b.n	8000a56 <StartDefaultTask+0x36>
 8000ac8:	080185b4 	.word	0x080185b4
 8000acc:	080185c4 	.word	0x080185c4
 8000ad0:	200005f0 	.word	0x200005f0
 8000ad4:	0801859c 	.word	0x0801859c

08000ad8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a04      	ldr	r2, [pc, #16]	@ (8000af8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d101      	bne.n	8000aee <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000aea:	f000 fceb 	bl	80014c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000aee:	bf00      	nop
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40002000 	.word	0x40002000

08000afc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b00:	b672      	cpsid	i
}
 8000b02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b04:	bf00      	nop
 8000b06:	e7fd      	b.n	8000b04 <Error_Handler+0x8>

08000b08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	607b      	str	r3, [r7, #4]
 8000b12:	4b12      	ldr	r3, [pc, #72]	@ (8000b5c <HAL_MspInit+0x54>)
 8000b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b16:	4a11      	ldr	r2, [pc, #68]	@ (8000b5c <HAL_MspInit+0x54>)
 8000b18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000b5c <HAL_MspInit+0x54>)
 8000b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b26:	607b      	str	r3, [r7, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	603b      	str	r3, [r7, #0]
 8000b2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b5c <HAL_MspInit+0x54>)
 8000b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b32:	4a0a      	ldr	r2, [pc, #40]	@ (8000b5c <HAL_MspInit+0x54>)
 8000b34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b38:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b3a:	4b08      	ldr	r3, [pc, #32]	@ (8000b5c <HAL_MspInit+0x54>)
 8000b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b42:	603b      	str	r3, [r7, #0]
 8000b44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b46:	2200      	movs	r2, #0
 8000b48:	210f      	movs	r1, #15
 8000b4a:	f06f 0001 	mvn.w	r0, #1
 8000b4e:	f000 fdb5 	bl	80016bc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b52:	bf00      	nop
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40023800 	.word	0x40023800

08000b60 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a0e      	ldr	r2, [pc, #56]	@ (8000ba8 <HAL_TIM_Base_MspInit+0x48>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d115      	bne.n	8000b9e <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM7_MspInit 0 */

    /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	60fb      	str	r3, [r7, #12]
 8000b76:	4b0d      	ldr	r3, [pc, #52]	@ (8000bac <HAL_TIM_Base_MspInit+0x4c>)
 8000b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b7a:	4a0c      	ldr	r2, [pc, #48]	@ (8000bac <HAL_TIM_Base_MspInit+0x4c>)
 8000b7c:	f043 0320 	orr.w	r3, r3, #32
 8000b80:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b82:	4b0a      	ldr	r3, [pc, #40]	@ (8000bac <HAL_TIM_Base_MspInit+0x4c>)
 8000b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b86:	f003 0320 	and.w	r3, r3, #32
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	2105      	movs	r1, #5
 8000b92:	2037      	movs	r0, #55	@ 0x37
 8000b94:	f000 fd92 	bl	80016bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000b98:	2037      	movs	r0, #55	@ 0x37
 8000b9a:	f000 fdab 	bl	80016f4 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM7_MspInit 1 */

  }

}
 8000b9e:	bf00      	nop
 8000ba0:	3710      	adds	r7, #16
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40001400 	.word	0x40001400
 8000bac:	40023800 	.word	0x40023800

08000bb0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08c      	sub	sp, #48	@ 0x30
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb8:	f107 031c 	add.w	r3, r7, #28
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
 8000bc6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a32      	ldr	r2, [pc, #200]	@ (8000c98 <HAL_UART_MspInit+0xe8>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d12d      	bne.n	8000c2e <HAL_UART_MspInit+0x7e>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	61bb      	str	r3, [r7, #24]
 8000bd6:	4b31      	ldr	r3, [pc, #196]	@ (8000c9c <HAL_UART_MspInit+0xec>)
 8000bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bda:	4a30      	ldr	r2, [pc, #192]	@ (8000c9c <HAL_UART_MspInit+0xec>)
 8000bdc:	f043 0310 	orr.w	r3, r3, #16
 8000be0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000be2:	4b2e      	ldr	r3, [pc, #184]	@ (8000c9c <HAL_UART_MspInit+0xec>)
 8000be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000be6:	f003 0310 	and.w	r3, r3, #16
 8000bea:	61bb      	str	r3, [r7, #24]
 8000bec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	617b      	str	r3, [r7, #20]
 8000bf2:	4b2a      	ldr	r3, [pc, #168]	@ (8000c9c <HAL_UART_MspInit+0xec>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf6:	4a29      	ldr	r2, [pc, #164]	@ (8000c9c <HAL_UART_MspInit+0xec>)
 8000bf8:	f043 0301 	orr.w	r3, r3, #1
 8000bfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bfe:	4b27      	ldr	r3, [pc, #156]	@ (8000c9c <HAL_UART_MspInit+0xec>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c02:	f003 0301 	and.w	r3, r3, #1
 8000c06:	617b      	str	r3, [r7, #20]
 8000c08:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c0a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000c0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c10:	2302      	movs	r3, #2
 8000c12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	2300      	movs	r3, #0
 8000c16:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c18:	2303      	movs	r3, #3
 8000c1a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c1c:	2307      	movs	r3, #7
 8000c1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c20:	f107 031c 	add.w	r3, r7, #28
 8000c24:	4619      	mov	r1, r3
 8000c26:	481e      	ldr	r0, [pc, #120]	@ (8000ca0 <HAL_UART_MspInit+0xf0>)
 8000c28:	f001 fd8a 	bl	8002740 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8000c2c:	e030      	b.n	8000c90 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART6)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4a1c      	ldr	r2, [pc, #112]	@ (8000ca4 <HAL_UART_MspInit+0xf4>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d12b      	bne.n	8000c90 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000c38:	2300      	movs	r3, #0
 8000c3a:	613b      	str	r3, [r7, #16]
 8000c3c:	4b17      	ldr	r3, [pc, #92]	@ (8000c9c <HAL_UART_MspInit+0xec>)
 8000c3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c40:	4a16      	ldr	r2, [pc, #88]	@ (8000c9c <HAL_UART_MspInit+0xec>)
 8000c42:	f043 0320 	orr.w	r3, r3, #32
 8000c46:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c48:	4b14      	ldr	r3, [pc, #80]	@ (8000c9c <HAL_UART_MspInit+0xec>)
 8000c4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c4c:	f003 0320 	and.w	r3, r3, #32
 8000c50:	613b      	str	r3, [r7, #16]
 8000c52:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c54:	2300      	movs	r3, #0
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	4b10      	ldr	r3, [pc, #64]	@ (8000c9c <HAL_UART_MspInit+0xec>)
 8000c5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5c:	4a0f      	ldr	r2, [pc, #60]	@ (8000c9c <HAL_UART_MspInit+0xec>)
 8000c5e:	f043 0304 	orr.w	r3, r3, #4
 8000c62:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c64:	4b0d      	ldr	r3, [pc, #52]	@ (8000c9c <HAL_UART_MspInit+0xec>)
 8000c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c68:	f003 0304 	and.w	r3, r3, #4
 8000c6c:	60fb      	str	r3, [r7, #12]
 8000c6e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c70:	23c0      	movs	r3, #192	@ 0xc0
 8000c72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c74:	2302      	movs	r3, #2
 8000c76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7c:	2303      	movs	r3, #3
 8000c7e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000c80:	2308      	movs	r3, #8
 8000c82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c84:	f107 031c 	add.w	r3, r7, #28
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4807      	ldr	r0, [pc, #28]	@ (8000ca8 <HAL_UART_MspInit+0xf8>)
 8000c8c:	f001 fd58 	bl	8002740 <HAL_GPIO_Init>
}
 8000c90:	bf00      	nop
 8000c92:	3730      	adds	r7, #48	@ 0x30
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	40011000 	.word	0x40011000
 8000c9c:	40023800 	.word	0x40023800
 8000ca0:	40020000 	.word	0x40020000
 8000ca4:	40011400 	.word	0x40011400
 8000ca8:	40020800 	.word	0x40020800

08000cac <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b086      	sub	sp, #24
 8000cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8000cb2:	1d3b      	adds	r3, r7, #4
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	60da      	str	r2, [r3, #12]
 8000cbe:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8000cc0:	4b2c      	ldr	r3, [pc, #176]	@ (8000d74 <HAL_FSMC_MspInit+0xc8>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d151      	bne.n	8000d6c <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 8000cc8:	4b2a      	ldr	r3, [pc, #168]	@ (8000d74 <HAL_FSMC_MspInit+0xc8>)
 8000cca:	2201      	movs	r2, #1
 8000ccc:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	603b      	str	r3, [r7, #0]
 8000cd2:	4b29      	ldr	r3, [pc, #164]	@ (8000d78 <HAL_FSMC_MspInit+0xcc>)
 8000cd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000cd6:	4a28      	ldr	r2, [pc, #160]	@ (8000d78 <HAL_FSMC_MspInit+0xcc>)
 8000cd8:	f043 0301 	orr.w	r3, r3, #1
 8000cdc:	6393      	str	r3, [r2, #56]	@ 0x38
 8000cde:	4b26      	ldr	r3, [pc, #152]	@ (8000d78 <HAL_FSMC_MspInit+0xcc>)
 8000ce0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ce2:	f003 0301 	and.w	r3, r3, #1
 8000ce6:	603b      	str	r3, [r7, #0]
 8000ce8:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PG10   ------> FSMC_NE3
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000cea:	f24f 033f 	movw	r3, #61503	@ 0xf03f
 8000cee:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf8:	2303      	movs	r3, #3
 8000cfa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000cfc:	230c      	movs	r3, #12
 8000cfe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d00:	1d3b      	adds	r3, r7, #4
 8000d02:	4619      	mov	r1, r3
 8000d04:	481d      	ldr	r0, [pc, #116]	@ (8000d7c <HAL_FSMC_MspInit+0xd0>)
 8000d06:	f001 fd1b 	bl	8002740 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000d0a:	f240 433f 	movw	r3, #1087	@ 0x43f
 8000d0e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d10:	2302      	movs	r3, #2
 8000d12:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d18:	2303      	movs	r3, #3
 8000d1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000d1c:	230c      	movs	r3, #12
 8000d1e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d20:	1d3b      	adds	r3, r7, #4
 8000d22:	4619      	mov	r1, r3
 8000d24:	4816      	ldr	r0, [pc, #88]	@ (8000d80 <HAL_FSMC_MspInit+0xd4>)
 8000d26:	f001 fd0b 	bl	8002740 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000d2a:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8000d2e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d30:	2302      	movs	r3, #2
 8000d32:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d38:	2303      	movs	r3, #3
 8000d3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000d3c:	230c      	movs	r3, #12
 8000d3e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d40:	1d3b      	adds	r3, r7, #4
 8000d42:	4619      	mov	r1, r3
 8000d44:	480f      	ldr	r0, [pc, #60]	@ (8000d84 <HAL_FSMC_MspInit+0xd8>)
 8000d46:	f001 fcfb 	bl	8002740 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000d4a:	f64f 7333 	movw	r3, #65331	@ 0xff33
 8000d4e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d50:	2302      	movs	r3, #2
 8000d52:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d58:	2303      	movs	r3, #3
 8000d5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000d5c:	230c      	movs	r3, #12
 8000d5e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d60:	1d3b      	adds	r3, r7, #4
 8000d62:	4619      	mov	r1, r3
 8000d64:	4808      	ldr	r0, [pc, #32]	@ (8000d88 <HAL_FSMC_MspInit+0xdc>)
 8000d66:	f001 fceb 	bl	8002740 <HAL_GPIO_Init>
 8000d6a:	e000      	b.n	8000d6e <HAL_FSMC_MspInit+0xc2>
    return;
 8000d6c:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000d6e:	3718      	adds	r7, #24
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	20000550 	.word	0x20000550
 8000d78:	40023800 	.word	0x40023800
 8000d7c:	40021400 	.word	0x40021400
 8000d80:	40021800 	.word	0x40021800
 8000d84:	40021000 	.word	0x40021000
 8000d88:	40020c00 	.word	0x40020c00

08000d8c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000d94:	f7ff ff8a 	bl	8000cac <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000d98:	bf00      	nop
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b08e      	sub	sp, #56	@ 0x38
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000da8:	2300      	movs	r3, #0
 8000daa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000dac:	2300      	movs	r3, #0
 8000dae:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000db0:	2300      	movs	r3, #0
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	4b33      	ldr	r3, [pc, #204]	@ (8000e84 <HAL_InitTick+0xe4>)
 8000db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db8:	4a32      	ldr	r2, [pc, #200]	@ (8000e84 <HAL_InitTick+0xe4>)
 8000dba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dbe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dc0:	4b30      	ldr	r3, [pc, #192]	@ (8000e84 <HAL_InitTick+0xe4>)
 8000dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000dc8:	60fb      	str	r3, [r7, #12]
 8000dca:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000dcc:	f107 0210 	add.w	r2, r7, #16
 8000dd0:	f107 0314 	add.w	r3, r7, #20
 8000dd4:	4611      	mov	r1, r2
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f003 fd12 	bl	8004800 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ddc:	6a3b      	ldr	r3, [r7, #32]
 8000dde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000de0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d103      	bne.n	8000dee <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000de6:	f003 fce3 	bl	80047b0 <HAL_RCC_GetPCLK1Freq>
 8000dea:	6378      	str	r0, [r7, #52]	@ 0x34
 8000dec:	e004      	b.n	8000df8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000dee:	f003 fcdf 	bl	80047b0 <HAL_RCC_GetPCLK1Freq>
 8000df2:	4603      	mov	r3, r0
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000df8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000dfa:	4a23      	ldr	r2, [pc, #140]	@ (8000e88 <HAL_InitTick+0xe8>)
 8000dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8000e00:	0c9b      	lsrs	r3, r3, #18
 8000e02:	3b01      	subs	r3, #1
 8000e04:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000e06:	4b21      	ldr	r3, [pc, #132]	@ (8000e8c <HAL_InitTick+0xec>)
 8000e08:	4a21      	ldr	r2, [pc, #132]	@ (8000e90 <HAL_InitTick+0xf0>)
 8000e0a:	601a      	str	r2, [r3, #0]
   * Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8000e0c:	4b1f      	ldr	r3, [pc, #124]	@ (8000e8c <HAL_InitTick+0xec>)
 8000e0e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e12:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000e14:	4a1d      	ldr	r2, [pc, #116]	@ (8000e8c <HAL_InitTick+0xec>)
 8000e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e18:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8000e1a:	4b1c      	ldr	r3, [pc, #112]	@ (8000e8c <HAL_InitTick+0xec>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e20:	4b1a      	ldr	r3, [pc, #104]	@ (8000e8c <HAL_InitTick+0xec>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e26:	4b19      	ldr	r3, [pc, #100]	@ (8000e8c <HAL_InitTick+0xec>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8000e2c:	4817      	ldr	r0, [pc, #92]	@ (8000e8c <HAL_InitTick+0xec>)
 8000e2e:	f003 fd61 	bl	80048f4 <HAL_TIM_Base_Init>
 8000e32:	4603      	mov	r3, r0
 8000e34:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000e38:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d11b      	bne.n	8000e78 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8000e40:	4812      	ldr	r0, [pc, #72]	@ (8000e8c <HAL_InitTick+0xec>)
 8000e42:	f003 fda7 	bl	8004994 <HAL_TIM_Base_Start_IT>
 8000e46:	4603      	mov	r3, r0
 8000e48:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000e4c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d111      	bne.n	8000e78 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000e54:	202d      	movs	r0, #45	@ 0x2d
 8000e56:	f000 fc4d 	bl	80016f4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2b0f      	cmp	r3, #15
 8000e5e:	d808      	bhi.n	8000e72 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8000e60:	2200      	movs	r2, #0
 8000e62:	6879      	ldr	r1, [r7, #4]
 8000e64:	202d      	movs	r0, #45	@ 0x2d
 8000e66:	f000 fc29 	bl	80016bc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e94 <HAL_InitTick+0xf4>)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6013      	str	r3, [r2, #0]
 8000e70:	e002      	b.n	8000e78 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000e72:	2301      	movs	r3, #1
 8000e74:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000e78:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3738      	adds	r7, #56	@ 0x38
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40023800 	.word	0x40023800
 8000e88:	431bde83 	.word	0x431bde83
 8000e8c:	20000554 	.word	0x20000554
 8000e90:	40002000 	.word	0x40002000
 8000e94:	20000004 	.word	0x20000004

08000e98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e9c:	bf00      	nop
 8000e9e:	e7fd      	b.n	8000e9c <NMI_Handler+0x4>

08000ea0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ea4:	bf00      	nop
 8000ea6:	e7fd      	b.n	8000ea4 <HardFault_Handler+0x4>

08000ea8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eac:	bf00      	nop
 8000eae:	e7fd      	b.n	8000eac <MemManage_Handler+0x4>

08000eb0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eb4:	bf00      	nop
 8000eb6:	e7fd      	b.n	8000eb4 <BusFault_Handler+0x4>

08000eb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ebc:	bf00      	nop
 8000ebe:	e7fd      	b.n	8000ebc <UsageFault_Handler+0x4>

08000ec0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
	...

08000ed0 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000ed4:	4802      	ldr	r0, [pc, #8]	@ (8000ee0 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000ed6:	f003 fdcd 	bl	8004a74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	20000554 	.word	0x20000554

08000ee4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000ee8:	4802      	ldr	r0, [pc, #8]	@ (8000ef4 <TIM7_IRQHandler+0x10>)
 8000eea:	f003 fdc3 	bl	8004a74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20000424 	.word	0x20000424

08000ef8 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000efc:	4802      	ldr	r0, [pc, #8]	@ (8000f08 <ETH_IRQHandler+0x10>)
 8000efe:	f000 feaf 	bl	8001c60 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	200050e4 	.word	0x200050e4

08000f0c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000f10:	4802      	ldr	r0, [pc, #8]	@ (8000f1c <OTG_FS_IRQHandler+0x10>)
 8000f12:	f001 ff0e 	bl	8002d32 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	2000dcc4 	.word	0x2000dcc4

08000f20 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  return 1;
 8000f24:	2301      	movs	r3, #1
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <_kill>:

int _kill(int pid, int sig)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000f3a:	4b05      	ldr	r3, [pc, #20]	@ (8000f50 <_kill+0x20>)
 8000f3c:	2216      	movs	r2, #22
 8000f3e:	601a      	str	r2, [r3, #0]
  return -1;
 8000f40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	2000e504 	.word	0x2000e504

08000f54 <_exit>:

void _exit (int status)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000f5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	f7ff ffe5 	bl	8000f30 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000f66:	bf00      	nop
 8000f68:	e7fd      	b.n	8000f66 <_exit+0x12>

08000f6a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b086      	sub	sp, #24
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	60f8      	str	r0, [r7, #12]
 8000f72:	60b9      	str	r1, [r7, #8]
 8000f74:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f76:	2300      	movs	r3, #0
 8000f78:	617b      	str	r3, [r7, #20]
 8000f7a:	e00a      	b.n	8000f92 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f7c:	f3af 8000 	nop.w
 8000f80:	4601      	mov	r1, r0
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	1c5a      	adds	r2, r3, #1
 8000f86:	60ba      	str	r2, [r7, #8]
 8000f88:	b2ca      	uxtb	r2, r1
 8000f8a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	617b      	str	r3, [r7, #20]
 8000f92:	697a      	ldr	r2, [r7, #20]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	429a      	cmp	r2, r3
 8000f98:	dbf0      	blt.n	8000f7c <_read+0x12>
  }

  return len;
 8000f9a:	687b      	ldr	r3, [r7, #4]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3718      	adds	r7, #24
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b086      	sub	sp, #24
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]
 8000fb4:	e009      	b.n	8000fca <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	1c5a      	adds	r2, r3, #1
 8000fba:	60ba      	str	r2, [r7, #8]
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	617b      	str	r3, [r7, #20]
 8000fca:	697a      	ldr	r2, [r7, #20]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	dbf1      	blt.n	8000fb6 <_write+0x12>
  }
  return len;
 8000fd2:	687b      	ldr	r3, [r7, #4]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3718      	adds	r7, #24
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <_close>:

int _close(int file)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fe4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001004:	605a      	str	r2, [r3, #4]
  return 0;
 8001006:	2300      	movs	r3, #0
}
 8001008:	4618      	mov	r0, r3
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr

08001014 <_isatty>:

int _isatty(int file)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800101c:	2301      	movs	r3, #1
}
 800101e:	4618      	mov	r0, r3
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr

0800102a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800102a:	b480      	push	{r7}
 800102c:	b085      	sub	sp, #20
 800102e:	af00      	add	r7, sp, #0
 8001030:	60f8      	str	r0, [r7, #12]
 8001032:	60b9      	str	r1, [r7, #8]
 8001034:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001036:	2300      	movs	r3, #0
}
 8001038:	4618      	mov	r0, r3
 800103a:	3714      	adds	r7, #20
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001044:	b480      	push	{r7}
 8001046:	b087      	sub	sp, #28
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800104c:	4a14      	ldr	r2, [pc, #80]	@ (80010a0 <_sbrk+0x5c>)
 800104e:	4b15      	ldr	r3, [pc, #84]	@ (80010a4 <_sbrk+0x60>)
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001058:	4b13      	ldr	r3, [pc, #76]	@ (80010a8 <_sbrk+0x64>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d102      	bne.n	8001066 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001060:	4b11      	ldr	r3, [pc, #68]	@ (80010a8 <_sbrk+0x64>)
 8001062:	4a12      	ldr	r2, [pc, #72]	@ (80010ac <_sbrk+0x68>)
 8001064:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001066:	4b10      	ldr	r3, [pc, #64]	@ (80010a8 <_sbrk+0x64>)
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4413      	add	r3, r2
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	429a      	cmp	r2, r3
 8001072:	d205      	bcs.n	8001080 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001074:	4b0e      	ldr	r3, [pc, #56]	@ (80010b0 <_sbrk+0x6c>)
 8001076:	220c      	movs	r2, #12
 8001078:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800107a:	f04f 33ff 	mov.w	r3, #4294967295
 800107e:	e009      	b.n	8001094 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001080:	4b09      	ldr	r3, [pc, #36]	@ (80010a8 <_sbrk+0x64>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001086:	4b08      	ldr	r3, [pc, #32]	@ (80010a8 <_sbrk+0x64>)
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4413      	add	r3, r2
 800108e:	4a06      	ldr	r2, [pc, #24]	@ (80010a8 <_sbrk+0x64>)
 8001090:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001092:	68fb      	ldr	r3, [r7, #12]
}
 8001094:	4618      	mov	r0, r3
 8001096:	371c      	adds	r7, #28
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	20020000 	.word	0x20020000
 80010a4:	00000400 	.word	0x00000400
 80010a8:	2000059c 	.word	0x2000059c
 80010ac:	2000e518 	.word	0x2000e518
 80010b0:	2000e504 	.word	0x2000e504

080010b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010b8:	4b06      	ldr	r3, [pc, #24]	@ (80010d4 <SystemInit+0x20>)
 80010ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010be:	4a05      	ldr	r2, [pc, #20]	@ (80010d4 <SystemInit+0x20>)
 80010c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	e000ed00 	.word	0xe000ed00

080010d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80010d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001110 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80010dc:	f7ff ffea 	bl	80010b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010e0:	480c      	ldr	r0, [pc, #48]	@ (8001114 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010e2:	490d      	ldr	r1, [pc, #52]	@ (8001118 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010e4:	4a0d      	ldr	r2, [pc, #52]	@ (800111c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010e8:	e002      	b.n	80010f0 <LoopCopyDataInit>

080010ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ee:	3304      	adds	r3, #4

080010f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010f4:	d3f9      	bcc.n	80010ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001120 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010f8:	4c0a      	ldr	r4, [pc, #40]	@ (8001124 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010fc:	e001      	b.n	8001102 <LoopFillZerobss>

080010fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001100:	3204      	adds	r2, #4

08001102 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001102:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001104:	d3fb      	bcc.n	80010fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001106:	f016 fa47 	bl	8017598 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800110a:	f7ff fa69 	bl	80005e0 <main>
  bx  lr    
 800110e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001110:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001114:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001118:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 800111c:	0801b4e0 	.word	0x0801b4e0
  ldr r2, =_sbss
 8001120:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 8001124:	2000e514 	.word	0x2000e514

08001128 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001128:	e7fe      	b.n	8001128 <ADC_IRQHandler>

0800112a <yt8512c_regster_bus_io>:
  * @param       ioctx：保存设备IO功能
  * @retval      YT8512C_STATUS_OK：OK
  *              YT8512C_STATUS_ERROR：缺少功能
  */
int32_t  yt8512c_regster_bus_io(yt8512c_object_t *pobj, yt8512c_ioc_tx_t *ioctx)
{
 800112a:	b480      	push	{r7}
 800112c:	b083      	sub	sp, #12
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
 8001132:	6039      	str	r1, [r7, #0]
    if (!pobj || !ioctx->readreg || !ioctx->writereg || !ioctx->gettick)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d00b      	beq.n	8001152 <yt8512c_regster_bus_io+0x28>
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	68db      	ldr	r3, [r3, #12]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d007      	beq.n	8001152 <yt8512c_regster_bus_io+0x28>
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d003      	beq.n	8001152 <yt8512c_regster_bus_io+0x28>
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	691b      	ldr	r3, [r3, #16]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d102      	bne.n	8001158 <yt8512c_regster_bus_io+0x2e>
    {
        return YT8512C_STATUS_ERROR;
 8001152:	f04f 33ff 	mov.w	r3, #4294967295
 8001156:	e014      	b.n	8001182 <yt8512c_regster_bus_io+0x58>
    }

    pobj->io.init = ioctx->init;
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	609a      	str	r2, [r3, #8]
    pobj->io.deinit = ioctx->deinit;
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685a      	ldr	r2, [r3, #4]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	60da      	str	r2, [r3, #12]
    pobj->io.readreg = ioctx->readreg;
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	68da      	ldr	r2, [r3, #12]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	615a      	str	r2, [r3, #20]
    pobj->io.writereg = ioctx->writereg;
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	689a      	ldr	r2, [r3, #8]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	611a      	str	r2, [r3, #16]
    pobj->io.gettick = ioctx->gettick;
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	691a      	ldr	r2, [r3, #16]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	619a      	str	r2, [r3, #24]

    return YT8512C_STATUS_OK;
 8001180:	2300      	movs	r3, #0
}
 8001182:	4618      	mov	r0, r3
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
	...

08001190 <yt8512c_init>:
                 YT8512C_STATUS_READ_ERROR：不能读取寄存器
                 YT8512C_STATUS_WRITE_ERROR：不能写入寄存器
                 YT8512C_STATUS_RESET_TIMEOUT：无法执行软件复位
  */
int32_t yt8512c_init(yt8512c_object_t *pobj)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b08e      	sub	sp, #56	@ 0x38
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001198:	2300      	movs	r3, #0
 800119a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800119c:	2300      	movs	r3, #0
 800119e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80011a0:	2300      	movs	r3, #0
 80011a2:	637b      	str	r3, [r7, #52]	@ 0x34
    int32_t status = YT8512C_STATUS_OK;
 80011a4:	2300      	movs	r3, #0
 80011a6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (pobj->is_initialized == 0)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d17c      	bne.n	80012aa <yt8512c_init+0x11a>
    {
        if (pobj->io.init != 0)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d002      	beq.n	80011be <yt8512c_init+0x2e>
        {
            pobj->io.init();
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	4798      	blx	r3
        }

        pobj->devaddr = YT8512C_MAX_DEV_ADDR + 1;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2220      	movs	r2, #32
 80011c2:	601a      	str	r2, [r3, #0]

        for (addr = 0; addr <= YT8512C_MAX_DEV_ADDR; addr++)
 80011c4:	2300      	movs	r3, #0
 80011c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80011c8:	e01c      	b.n	8001204 <yt8512c_init+0x74>
        {
            if (pobj->io.readreg(addr, YT8512C_PHYSCSR, &regvalue) < 0)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	695b      	ldr	r3, [r3, #20]
 80011ce:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80011d2:	2111      	movs	r1, #17
 80011d4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80011d6:	4798      	blx	r3
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	da03      	bge.n	80011e6 <yt8512c_init+0x56>
            {
                status = YT8512C_STATUS_READ_ERROR;
 80011de:	f06f 0304 	mvn.w	r3, #4
 80011e2:	633b      	str	r3, [r7, #48]	@ 0x30
                continue;
 80011e4:	e00b      	b.n	80011fe <yt8512c_init+0x6e>
            }
            if ((regvalue & YT8512C_PHY_COUNT) == addr)
 80011e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011e8:	f003 031f 	and.w	r3, r3, #31
 80011ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d105      	bne.n	80011fe <yt8512c_init+0x6e>
            {
                pobj->devaddr = addr;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80011f6:	601a      	str	r2, [r3, #0]
                status = YT8512C_STATUS_OK;
 80011f8:	2300      	movs	r3, #0
 80011fa:	633b      	str	r3, [r7, #48]	@ 0x30
                break;
 80011fc:	e005      	b.n	800120a <yt8512c_init+0x7a>
        for (addr = 0; addr <= YT8512C_MAX_DEV_ADDR; addr++)
 80011fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001200:	3301      	adds	r3, #1
 8001202:	637b      	str	r3, [r7, #52]	@ 0x34
 8001204:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001206:	2b1f      	cmp	r3, #31
 8001208:	d9df      	bls.n	80011ca <yt8512c_init+0x3a>
            }
        }

        if (pobj->devaddr > YT8512C_MAX_DEV_ADDR)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2b1f      	cmp	r3, #31
 8001210:	d902      	bls.n	8001218 <yt8512c_init+0x88>
        {
            status = YT8512C_STATUS_ADDRESS_ERROR;
 8001212:	f06f 0302 	mvn.w	r3, #2
 8001216:	633b      	str	r3, [r7, #48]	@ 0x30
        }

        if (status == YT8512C_STATUS_OK)
 8001218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800121a:	2b00      	cmp	r3, #0
 800121c:	d145      	bne.n	80012aa <yt8512c_init+0x11a>
        {
            if (pobj->io.writereg(pobj->devaddr, YT8512C_BCR, YT8512C_BCR_SOFT_RESET) >= 0)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	691b      	ldr	r3, [r3, #16]
 8001222:	687a      	ldr	r2, [r7, #4]
 8001224:	6810      	ldr	r0, [r2, #0]
 8001226:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800122a:	2100      	movs	r1, #0
 800122c:	4798      	blx	r3
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	db37      	blt.n	80012a4 <yt8512c_init+0x114>
            {
                if (pobj->io.readreg(pobj->devaddr, YT8512C_BCR, &regvalue) >= 0)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	695b      	ldr	r3, [r3, #20]
 8001238:	687a      	ldr	r2, [r7, #4]
 800123a:	6810      	ldr	r0, [r2, #0]
 800123c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001240:	2100      	movs	r1, #0
 8001242:	4798      	blx	r3
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	db28      	blt.n	800129c <yt8512c_init+0x10c>
                {
                    tickstart = pobj->io.gettick();
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	699b      	ldr	r3, [r3, #24]
 800124e:	4798      	blx	r3
 8001250:	4603      	mov	r3, r0
 8001252:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    while (regvalue & YT8512C_BCR_SOFT_RESET)
 8001254:	e01c      	b.n	8001290 <yt8512c_init+0x100>
                    {
                        if ((pobj->io.gettick() - tickstart) <= 2000)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	699b      	ldr	r3, [r3, #24]
 800125a:	4798      	blx	r3
 800125c:	4603      	mov	r3, r0
 800125e:	461a      	mov	r2, r3
 8001260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001262:	1ad3      	subs	r3, r2, r3
 8001264:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001268:	d80e      	bhi.n	8001288 <yt8512c_init+0xf8>
                        {
                            if (pobj->io.readreg(pobj->devaddr, YT8512C_BCR, &regvalue) < 0)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	695b      	ldr	r3, [r3, #20]
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	6810      	ldr	r0, [r2, #0]
 8001272:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001276:	2100      	movs	r1, #0
 8001278:	4798      	blx	r3
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	da07      	bge.n	8001290 <yt8512c_init+0x100>
                            {
                                status = YT8512C_STATUS_READ_ERROR;
 8001280:	f06f 0304 	mvn.w	r3, #4
 8001284:	633b      	str	r3, [r7, #48]	@ 0x30
                                break;
 8001286:	e010      	b.n	80012aa <yt8512c_init+0x11a>
                            }
                        }
                        else
                        {
                            status = YT8512C_STATUS_RESET_TIMEOUT;
 8001288:	f06f 0301 	mvn.w	r3, #1
 800128c:	633b      	str	r3, [r7, #48]	@ 0x30
                            break;
 800128e:	e00c      	b.n	80012aa <yt8512c_init+0x11a>
                    while (regvalue & YT8512C_BCR_SOFT_RESET)
 8001290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001292:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d1dd      	bne.n	8001256 <yt8512c_init+0xc6>
 800129a:	e006      	b.n	80012aa <yt8512c_init+0x11a>
                        }
                    }
                }
                else
                {
                    status = YT8512C_STATUS_READ_ERROR;
 800129c:	f06f 0304 	mvn.w	r3, #4
 80012a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80012a2:	e002      	b.n	80012aa <yt8512c_init+0x11a>
                }
            }
            else
            {
                status = YT8512C_STATUS_WRITE_ERROR;
 80012a4:	f06f 0303 	mvn.w	r3, #3
 80012a8:	633b      	str	r3, [r7, #48]	@ 0x30
            }
        }
    }

    if (status == YT8512C_STATUS_OK)
 80012aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d127      	bne.n	8001300 <yt8512c_init+0x170>
    {
        tickstart = pobj->io.gettick();
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	4798      	blx	r3
 80012b6:	4603      	mov	r3, r0
 80012b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while ((pobj->io.gettick() - tickstart) <= 2000)
 80012ba:	bf00      	nop
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	4798      	blx	r3
 80012c2:	4603      	mov	r3, r0
 80012c4:	461a      	mov	r2, r3
 80012c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80012ce:	d9f5      	bls.n	80012bc <yt8512c_init+0x12c>
        {
        }
        pobj->is_initialized = 1;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2201      	movs	r2, #1
 80012d4:	605a      	str	r2, [r3, #4]
        char buffer[32];
        snprintf(buffer, sizeof(buffer), "YT8512C Init OK, Addr: 0x%02X\r\n", pobj->devaddr);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f107 0008 	add.w	r0, r7, #8
 80012de:	4a0d      	ldr	r2, [pc, #52]	@ (8001314 <yt8512c_init+0x184>)
 80012e0:	2120      	movs	r1, #32
 80012e2:	f016 f809 	bl	80172f8 <sniprintf>
        CDC_Transmit_FS((uint8_t *)buffer, strlen(buffer));
 80012e6:	f107 0308 	add.w	r3, r7, #8
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7fe ff70 	bl	80001d0 <strlen>
 80012f0:	4602      	mov	r2, r0
 80012f2:	f107 0308 	add.w	r3, r7, #8
 80012f6:	4611      	mov	r1, r2
 80012f8:	4618      	mov	r0, r3
 80012fa:	f015 fa8f 	bl	801681c <CDC_Transmit_FS>
 80012fe:	e003      	b.n	8001308 <yt8512c_init+0x178>
    }
    else
    {
        CDC_Transmit_FS((uint8_t *)"YT8512C Init Failed\r\n", 20);
 8001300:	2114      	movs	r1, #20
 8001302:	4805      	ldr	r0, [pc, #20]	@ (8001318 <yt8512c_init+0x188>)
 8001304:	f015 fa8a 	bl	801681c <CDC_Transmit_FS>
    }
    return status;
 8001308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 800130a:	4618      	mov	r0, r3
 800130c:	3738      	adds	r7, #56	@ 0x38
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	080185d0 	.word	0x080185d0
 8001318:	080185f0 	.word	0x080185f0

0800131c <yt8512c_disable_power_down_mode>:
  * @retval      YT8512C_STATUS_OK：关闭成功
                 YT8512C_STATUS_READ_ERROR：不能读取寄存器
                 YT8512C_STATUS_WRITE_ERROR：不能写寄存器
  */
int32_t yt8512c_disable_power_down_mode(yt8512c_object_t *pobj)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
    uint32_t readval = 0;
 8001324:	2300      	movs	r3, #0
 8001326:	60bb      	str	r3, [r7, #8]
    int32_t status = YT8512C_STATUS_OK;
 8001328:	2300      	movs	r3, #0
 800132a:	60fb      	str	r3, [r7, #12]

    if (pobj->io.readreg(pobj->devaddr, YT8512C_BCR, &readval) >= 0)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	695b      	ldr	r3, [r3, #20]
 8001330:	687a      	ldr	r2, [r7, #4]
 8001332:	6810      	ldr	r0, [r2, #0]
 8001334:	f107 0208 	add.w	r2, r7, #8
 8001338:	2100      	movs	r1, #0
 800133a:	4798      	blx	r3
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	db11      	blt.n	8001366 <yt8512c_disable_power_down_mode+0x4a>
    {
        readval &= ~YT8512C_BCR_POWER_DOWN;
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001348:	60bb      	str	r3, [r7, #8]

        /* 清除下电模式 */
        if (pobj->io.writereg(pobj->devaddr, YT8512C_BCR, readval) < 0)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	691b      	ldr	r3, [r3, #16]
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	6810      	ldr	r0, [r2, #0]
 8001352:	68ba      	ldr	r2, [r7, #8]
 8001354:	2100      	movs	r1, #0
 8001356:	4798      	blx	r3
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	da06      	bge.n	800136c <yt8512c_disable_power_down_mode+0x50>
        {
            status =  YT8512C_STATUS_WRITE_ERROR;
 800135e:	f06f 0303 	mvn.w	r3, #3
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	e002      	b.n	800136c <yt8512c_disable_power_down_mode+0x50>
        }
    }
    else
    {
        status = YT8512C_STATUS_READ_ERROR;
 8001366:	f06f 0304 	mvn.w	r3, #4
 800136a:	60fb      	str	r3, [r7, #12]
    }

    return status;
 800136c:	68fb      	ldr	r3, [r7, #12]
}
 800136e:	4618      	mov	r0, r3
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <yt8512c_start_auto_nego>:
  * @retval      YT8512C_STATUS_OK：关闭成功
                 YT8512C_STATUS_READ_ERROR：不能读取寄存器
                 YT8512C_STATUS_WRITE_ERROR：不能写寄存器
  */
int32_t yt8512c_start_auto_nego(yt8512c_object_t *pobj)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b084      	sub	sp, #16
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
    uint32_t readval = 0;
 800137e:	2300      	movs	r3, #0
 8001380:	60bb      	str	r3, [r7, #8]
    int32_t status = YT8512C_STATUS_OK;
 8001382:	2300      	movs	r3, #0
 8001384:	60fb      	str	r3, [r7, #12]

    if (pobj->io.readreg(pobj->devaddr, YT8512C_BCR, &readval) >= 0)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	695b      	ldr	r3, [r3, #20]
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	6810      	ldr	r0, [r2, #0]
 800138e:	f107 0208 	add.w	r2, r7, #8
 8001392:	2100      	movs	r1, #0
 8001394:	4798      	blx	r3
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	db11      	blt.n	80013c0 <yt8512c_start_auto_nego+0x4a>
    {
        readval |= YT8512C_BCR_AUTONEGO_EN;
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80013a2:	60bb      	str	r3, [r7, #8]

        /* 启动自动协商 */
        if (pobj->io.writereg(pobj->devaddr, YT8512C_BCR, readval) < 0)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	691b      	ldr	r3, [r3, #16]
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	6810      	ldr	r0, [r2, #0]
 80013ac:	68ba      	ldr	r2, [r7, #8]
 80013ae:	2100      	movs	r1, #0
 80013b0:	4798      	blx	r3
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	da06      	bge.n	80013c6 <yt8512c_start_auto_nego+0x50>
        {
            status =  YT8512C_STATUS_WRITE_ERROR;
 80013b8:	f06f 0303 	mvn.w	r3, #3
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	e002      	b.n	80013c6 <yt8512c_start_auto_nego+0x50>
        }
    }
    else
    {
        status = YT8512C_STATUS_READ_ERROR;
 80013c0:	f06f 0304 	mvn.w	r3, #4
 80013c4:	60fb      	str	r3, [r7, #12]
    }

    return status;
 80013c6:	68fb      	ldr	r3, [r7, #12]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3710      	adds	r7, #16
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <yt8512c_get_link_state>:
                 YT8512C_STATUS_10MBITS_FULLDUPLEX：10M，全双工
                 YT8512C_STATUS_10MBITS_HALFDUPLEX ：10M，半双工
                 YT8512C_STATUS_READ_ERROR：不能读取寄存器
  */
int32_t yt8512c_get_link_state(yt8512c_object_t *pobj)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
    uint32_t bsr_value = 0;
 80013d8:	2300      	movs	r3, #0
 80013da:	60fb      	str	r3, [r7, #12]
    if (pobj->io.readreg(pobj->devaddr, YT8512C_BSR, &bsr_value) < 0)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	695b      	ldr	r3, [r3, #20]
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	6810      	ldr	r0, [r2, #0]
 80013e4:	f107 020c 	add.w	r2, r7, #12
 80013e8:	2101      	movs	r1, #1
 80013ea:	4798      	blx	r3
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	da06      	bge.n	8001400 <yt8512c_get_link_state+0x30>
    {
        CDC_Transmit_FS((uint8_t *)"BSR Read Error\r\n", 14);
 80013f2:	210e      	movs	r1, #14
 80013f4:	4820      	ldr	r0, [pc, #128]	@ (8001478 <yt8512c_get_link_state+0xa8>)
 80013f6:	f015 fa11 	bl	801681c <CDC_Transmit_FS>
        return YT8512C_STATUS_READ_ERROR;
 80013fa:	f06f 0304 	mvn.w	r3, #4
 80013fe:	e037      	b.n	8001470 <yt8512c_get_link_state+0xa0>
    }
    if (!(bsr_value & YT8512C_BSR_LINK_STATUS))
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	f003 0304 	and.w	r3, r3, #4
 8001406:	2b00      	cmp	r3, #0
 8001408:	d101      	bne.n	800140e <yt8512c_get_link_state+0x3e>
    {
        return YT8512C_STATUS_LINK_DOWN;
 800140a:	2301      	movs	r3, #1
 800140c:	e030      	b.n	8001470 <yt8512c_get_link_state+0xa0>
    }

    uint32_t phycsr_value = 0;
 800140e:	2300      	movs	r3, #0
 8001410:	60bb      	str	r3, [r7, #8]
    if (pobj->io.readreg(pobj->devaddr, YT8512C_PHYSCSR, &phycsr_value) < 0)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	695b      	ldr	r3, [r3, #20]
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	6810      	ldr	r0, [r2, #0]
 800141a:	f107 0208 	add.w	r2, r7, #8
 800141e:	2111      	movs	r1, #17
 8001420:	4798      	blx	r3
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	da06      	bge.n	8001436 <yt8512c_get_link_state+0x66>
    {
        CDC_Transmit_FS((uint8_t *)"PHYCSR Read Error\r\n", 18);
 8001428:	2112      	movs	r1, #18
 800142a:	4814      	ldr	r0, [pc, #80]	@ (800147c <yt8512c_get_link_state+0xac>)
 800142c:	f015 f9f6 	bl	801681c <CDC_Transmit_FS>
        return YT8512C_STATUS_READ_ERROR;
 8001430:	f06f 0304 	mvn.w	r3, #4
 8001434:	e01c      	b.n	8001470 <yt8512c_get_link_state+0xa0>
    }
    if ((phycsr_value & YT8512C_SPEED_STATUS) && (phycsr_value & YT8512C_DUPLEX_STATUS))
 8001436:	68ba      	ldr	r2, [r7, #8]
 8001438:	f244 0310 	movw	r3, #16400	@ 0x4010
 800143c:	4013      	ands	r3, r2
 800143e:	2b00      	cmp	r3, #0
 8001440:	d006      	beq.n	8001450 <yt8512c_get_link_state+0x80>
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <yt8512c_get_link_state+0x80>
    {
        return YT8512C_STATUS_100MBITS_FULLDUPLEX;
 800144c:	2302      	movs	r3, #2
 800144e:	e00f      	b.n	8001470 <yt8512c_get_link_state+0xa0>
    }
    else if (phycsr_value & YT8512C_SPEED_STATUS)
 8001450:	68ba      	ldr	r2, [r7, #8]
 8001452:	f244 0310 	movw	r3, #16400	@ 0x4010
 8001456:	4013      	ands	r3, r2
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <yt8512c_get_link_state+0x90>
    {
        return YT8512C_STATUS_100MBITS_HALFDUPLEX;
 800145c:	2303      	movs	r3, #3
 800145e:	e007      	b.n	8001470 <yt8512c_get_link_state+0xa0>
    }
    else if (phycsr_value & YT8512C_BCR_DUPLEX_MODE)
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <yt8512c_get_link_state+0x9e>
    {
        return YT8512C_STATUS_10MBITS_FULLDUPLEX;
 800146a:	2304      	movs	r3, #4
 800146c:	e000      	b.n	8001470 <yt8512c_get_link_state+0xa0>
    }
    else
    {
        return YT8512C_STATUS_10MBITS_HALFDUPLEX;
 800146e:	2305      	movs	r3, #5
    }
}
 8001470:	4618      	mov	r0, r3
 8001472:	3710      	adds	r7, #16
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	08018608 	.word	0x08018608
 800147c:	0801861c 	.word	0x0801861c

08001480 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001484:	4b0e      	ldr	r3, [pc, #56]	@ (80014c0 <HAL_Init+0x40>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a0d      	ldr	r2, [pc, #52]	@ (80014c0 <HAL_Init+0x40>)
 800148a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800148e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001490:	4b0b      	ldr	r3, [pc, #44]	@ (80014c0 <HAL_Init+0x40>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a0a      	ldr	r2, [pc, #40]	@ (80014c0 <HAL_Init+0x40>)
 8001496:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800149a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800149c:	4b08      	ldr	r3, [pc, #32]	@ (80014c0 <HAL_Init+0x40>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a07      	ldr	r2, [pc, #28]	@ (80014c0 <HAL_Init+0x40>)
 80014a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014a8:	2003      	movs	r0, #3
 80014aa:	f000 f8fc 	bl	80016a6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014ae:	200f      	movs	r0, #15
 80014b0:	f7ff fc76 	bl	8000da0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014b4:	f7ff fb28 	bl	8000b08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40023c00 	.word	0x40023c00

080014c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014c8:	4b06      	ldr	r3, [pc, #24]	@ (80014e4 <HAL_IncTick+0x20>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	461a      	mov	r2, r3
 80014ce:	4b06      	ldr	r3, [pc, #24]	@ (80014e8 <HAL_IncTick+0x24>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4413      	add	r3, r2
 80014d4:	4a04      	ldr	r2, [pc, #16]	@ (80014e8 <HAL_IncTick+0x24>)
 80014d6:	6013      	str	r3, [r2, #0]
}
 80014d8:	bf00      	nop
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	20000008 	.word	0x20000008
 80014e8:	200005a0 	.word	0x200005a0

080014ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  return uwTick;
 80014f0:	4b03      	ldr	r3, [pc, #12]	@ (8001500 <HAL_GetTick+0x14>)
 80014f2:	681b      	ldr	r3, [r3, #0]
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	200005a0 	.word	0x200005a0

08001504 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800150c:	f7ff ffee 	bl	80014ec <HAL_GetTick>
 8001510:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800151c:	d005      	beq.n	800152a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800151e:	4b0a      	ldr	r3, [pc, #40]	@ (8001548 <HAL_Delay+0x44>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	461a      	mov	r2, r3
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	4413      	add	r3, r2
 8001528:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800152a:	bf00      	nop
 800152c:	f7ff ffde 	bl	80014ec <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	68fa      	ldr	r2, [r7, #12]
 8001538:	429a      	cmp	r2, r3
 800153a:	d8f7      	bhi.n	800152c <HAL_Delay+0x28>
  {
  }
}
 800153c:	bf00      	nop
 800153e:	bf00      	nop
 8001540:	3710      	adds	r7, #16
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	20000008 	.word	0x20000008

0800154c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f003 0307 	and.w	r3, r3, #7
 800155a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800155c:	4b0c      	ldr	r3, [pc, #48]	@ (8001590 <__NVIC_SetPriorityGrouping+0x44>)
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001562:	68ba      	ldr	r2, [r7, #8]
 8001564:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001568:	4013      	ands	r3, r2
 800156a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001574:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001578:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800157c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800157e:	4a04      	ldr	r2, [pc, #16]	@ (8001590 <__NVIC_SetPriorityGrouping+0x44>)
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	60d3      	str	r3, [r2, #12]
}
 8001584:	bf00      	nop
 8001586:	3714      	adds	r7, #20
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	e000ed00 	.word	0xe000ed00

08001594 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001598:	4b04      	ldr	r3, [pc, #16]	@ (80015ac <__NVIC_GetPriorityGrouping+0x18>)
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	0a1b      	lsrs	r3, r3, #8
 800159e:	f003 0307 	and.w	r3, r3, #7
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr
 80015ac:	e000ed00 	.word	0xe000ed00

080015b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	4603      	mov	r3, r0
 80015b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	db0b      	blt.n	80015da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015c2:	79fb      	ldrb	r3, [r7, #7]
 80015c4:	f003 021f 	and.w	r2, r3, #31
 80015c8:	4907      	ldr	r1, [pc, #28]	@ (80015e8 <__NVIC_EnableIRQ+0x38>)
 80015ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ce:	095b      	lsrs	r3, r3, #5
 80015d0:	2001      	movs	r0, #1
 80015d2:	fa00 f202 	lsl.w	r2, r0, r2
 80015d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015da:	bf00      	nop
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	e000e100 	.word	0xe000e100

080015ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	6039      	str	r1, [r7, #0]
 80015f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	db0a      	blt.n	8001616 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	b2da      	uxtb	r2, r3
 8001604:	490c      	ldr	r1, [pc, #48]	@ (8001638 <__NVIC_SetPriority+0x4c>)
 8001606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160a:	0112      	lsls	r2, r2, #4
 800160c:	b2d2      	uxtb	r2, r2
 800160e:	440b      	add	r3, r1
 8001610:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001614:	e00a      	b.n	800162c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	b2da      	uxtb	r2, r3
 800161a:	4908      	ldr	r1, [pc, #32]	@ (800163c <__NVIC_SetPriority+0x50>)
 800161c:	79fb      	ldrb	r3, [r7, #7]
 800161e:	f003 030f 	and.w	r3, r3, #15
 8001622:	3b04      	subs	r3, #4
 8001624:	0112      	lsls	r2, r2, #4
 8001626:	b2d2      	uxtb	r2, r2
 8001628:	440b      	add	r3, r1
 800162a:	761a      	strb	r2, [r3, #24]
}
 800162c:	bf00      	nop
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr
 8001638:	e000e100 	.word	0xe000e100
 800163c:	e000ed00 	.word	0xe000ed00

08001640 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001640:	b480      	push	{r7}
 8001642:	b089      	sub	sp, #36	@ 0x24
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f003 0307 	and.w	r3, r3, #7
 8001652:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	f1c3 0307 	rsb	r3, r3, #7
 800165a:	2b04      	cmp	r3, #4
 800165c:	bf28      	it	cs
 800165e:	2304      	movcs	r3, #4
 8001660:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	3304      	adds	r3, #4
 8001666:	2b06      	cmp	r3, #6
 8001668:	d902      	bls.n	8001670 <NVIC_EncodePriority+0x30>
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	3b03      	subs	r3, #3
 800166e:	e000      	b.n	8001672 <NVIC_EncodePriority+0x32>
 8001670:	2300      	movs	r3, #0
 8001672:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001674:	f04f 32ff 	mov.w	r2, #4294967295
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	43da      	mvns	r2, r3
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	401a      	ands	r2, r3
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001688:	f04f 31ff 	mov.w	r1, #4294967295
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	fa01 f303 	lsl.w	r3, r1, r3
 8001692:	43d9      	mvns	r1, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001698:	4313      	orrs	r3, r2
         );
}
 800169a:	4618      	mov	r0, r3
 800169c:	3724      	adds	r7, #36	@ 0x24
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr

080016a6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b082      	sub	sp, #8
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f7ff ff4c 	bl	800154c <__NVIC_SetPriorityGrouping>
}
 80016b4:	bf00      	nop
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016bc:	b580      	push	{r7, lr}
 80016be:	b086      	sub	sp, #24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	60b9      	str	r1, [r7, #8]
 80016c6:	607a      	str	r2, [r7, #4]
 80016c8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016ca:	2300      	movs	r3, #0
 80016cc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016ce:	f7ff ff61 	bl	8001594 <__NVIC_GetPriorityGrouping>
 80016d2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	68b9      	ldr	r1, [r7, #8]
 80016d8:	6978      	ldr	r0, [r7, #20]
 80016da:	f7ff ffb1 	bl	8001640 <NVIC_EncodePriority>
 80016de:	4602      	mov	r2, r0
 80016e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016e4:	4611      	mov	r1, r2
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff ff80 	bl	80015ec <__NVIC_SetPriority>
}
 80016ec:	bf00      	nop
 80016ee:	3718      	adds	r7, #24
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff ff54 	bl	80015b0 <__NVIC_EnableIRQ>
}
 8001708:	bf00      	nop
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d101      	bne.n	8001722 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e08a      	b.n	8001838 <HAL_ETH_Init+0x128>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001728:	2b00      	cmp	r3, #0
 800172a:	d106      	bne.n	800173a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2220      	movs	r2, #32
 8001730:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f000 f887 	bl	8001848 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	60bb      	str	r3, [r7, #8]
 800173e:	4b40      	ldr	r3, [pc, #256]	@ (8001840 <HAL_ETH_Init+0x130>)
 8001740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001742:	4a3f      	ldr	r2, [pc, #252]	@ (8001840 <HAL_ETH_Init+0x130>)
 8001744:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001748:	6453      	str	r3, [r2, #68]	@ 0x44
 800174a:	4b3d      	ldr	r3, [pc, #244]	@ (8001840 <HAL_ETH_Init+0x130>)
 800174c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800174e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001752:	60bb      	str	r3, [r7, #8]
 8001754:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001756:	4b3b      	ldr	r3, [pc, #236]	@ (8001844 <HAL_ETH_Init+0x134>)
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	4a3a      	ldr	r2, [pc, #232]	@ (8001844 <HAL_ETH_Init+0x134>)
 800175c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001760:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001762:	4b38      	ldr	r3, [pc, #224]	@ (8001844 <HAL_ETH_Init+0x134>)
 8001764:	685a      	ldr	r2, [r3, #4]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	4936      	ldr	r1, [pc, #216]	@ (8001844 <HAL_ETH_Init+0x134>)
 800176c:	4313      	orrs	r3, r2
 800176e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001770:	4b34      	ldr	r3, [pc, #208]	@ (8001844 <HAL_ETH_Init+0x134>)
 8001772:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	6812      	ldr	r2, [r2, #0]
 8001782:	f043 0301 	orr.w	r3, r3, #1
 8001786:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800178a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800178c:	f7ff feae 	bl	80014ec <HAL_GetTick>
 8001790:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001792:	e011      	b.n	80017b8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001794:	f7ff feaa 	bl	80014ec <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80017a2:	d909      	bls.n	80017b8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2204      	movs	r2, #4
 80017a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	22e0      	movs	r2, #224	@ 0xe0
 80017b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e03f      	b.n	8001838 <HAL_ETH_Init+0x128>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d1e4      	bne.n	8001794 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f000 fcfa 	bl	80021c4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f000 fda5 	bl	8002320 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f000 fdfb 	bl	80023d2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	461a      	mov	r2, r3
 80017e2:	2100      	movs	r1, #0
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f000 fd63 	bl	80022b0 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80017f8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	6812      	ldr	r2, [r2, #0]
 8001806:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800180a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800180e:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8001822:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2200      	movs	r2, #0
 800182a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2210      	movs	r2, #16
 8001832:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001836:	2300      	movs	r3, #0
}
 8001838:	4618      	mov	r0, r3
 800183a:	3710      	adds	r7, #16
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40023800 	.word	0x40023800
 8001844:	40013800 	.word	0x40013800

08001848 <HAL_ETH_MspInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MspInit(ETH_HandleTypeDef *heth)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MspInit could be implemented in the user file
  */
}
 8001850:	bf00      	nop
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d109      	bne.n	8001880 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001872:	f043 0201 	orr.w	r2, r3, #1
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e045      	b.n	800190c <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001886:	2b40      	cmp	r3, #64	@ 0x40
 8001888:	d13f      	bne.n	800190a <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001892:	2201      	movs	r2, #1
 8001894:	6839      	ldr	r1, [r7, #0]
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f000 fe0a 	bl	80024b0 <ETH_Prepare_Tx_Descriptors>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d009      	beq.n	80018b6 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018a8:	f043 0202 	orr.w	r2, r3, #2
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e02a      	b.n	800190c <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 80018b6:	f3bf 8f4f 	dsb	sy
}
 80018ba:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018c0:	1c5a      	adds	r2, r3, #1
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	629a      	str	r2, [r3, #40]	@ 0x28
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018ca:	2b03      	cmp	r3, #3
 80018cc:	d904      	bls.n	80018d8 <HAL_ETH_Transmit_IT+0x7c>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018d2:	1f1a      	subs	r2, r3, #4
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018e0:	695b      	ldr	r3, [r3, #20]
 80018e2:	f003 0304 	and.w	r3, r3, #4
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d00d      	beq.n	8001906 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018f2:	461a      	mov	r2, r3
 80018f4:	2304      	movs	r3, #4
 80018f6:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001900:	461a      	mov	r2, r3
 8001902:	2300      	movs	r3, #0
 8001904:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8001906:	2300      	movs	r3, #0
 8001908:	e000      	b.n	800190c <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
  }
}
 800190c:	4618      	mov	r0, r3
 800190e:	3708      	adds	r7, #8
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}

08001914 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b088      	sub	sp, #32
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 800191e:	2300      	movs	r3, #0
 8001920:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001922:	2300      	movs	r3, #0
 8001924:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d109      	bne.n	8001940 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001932:	f043 0201 	orr.w	r2, r3, #1
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e0a4      	b.n	8001a8a <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001946:	2b40      	cmp	r3, #64	@ 0x40
 8001948:	d001      	beq.n	800194e <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e09d      	b.n	8001a8a <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001952:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	69fa      	ldr	r2, [r7, #28]
 8001958:	3212      	adds	r2, #18
 800195a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800195e:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001964:	f1c3 0304 	rsb	r3, r3, #4
 8001968:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800196a:	e066      	b.n	8001a3a <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001974:	2b00      	cmp	r3, #0
 8001976:	d007      	beq.n	8001988 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	69da      	ldr	r2, [r3, #28]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	699a      	ldr	r2, [r3, #24]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001990:	2b00      	cmp	r3, #0
 8001992:	d103      	bne.n	800199c <HAL_ETH_ReadData+0x88>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001998:	2b00      	cmp	r3, #0
 800199a:	d03c      	beq.n	8001a16 <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d005      	beq.n	80019b4 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2200      	movs	r2, #0
 80019b2:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	0c1b      	lsrs	r3, r3, #16
 80019ba:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80019be:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d005      	beq.n	80019d8 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 80019d4:	2301      	movs	r3, #1
 80019d6:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	689a      	ldr	r2, [r3, #8]
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80019f0:	461a      	mov	r2, r3
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	f005 fe77 	bl	80076e8 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019fe:	1c5a      	adds	r2, r3, #1
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	441a      	add	r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	2200      	movs	r2, #0
 8001a14:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	61fb      	str	r3, [r7, #28]
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	2b03      	cmp	r3, #3
 8001a20:	d902      	bls.n	8001a28 <HAL_ETH_ReadData+0x114>
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	3b04      	subs	r3, #4
 8001a26:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	69fa      	ldr	r2, [r7, #28]
 8001a2c:	3212      	adds	r2, #18
 8001a2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a32:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	3301      	adds	r3, #1
 8001a38:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	db06      	blt.n	8001a50 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001a42:	697a      	ldr	r2, [r7, #20]
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d202      	bcs.n	8001a50 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 8001a4a:	7cfb      	ldrb	r3, [r7, #19]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d08d      	beq.n	800196c <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	441a      	add	r2, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d002      	beq.n	8001a6a <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f000 f814 	bl	8001a92 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	69fa      	ldr	r2, [r7, #28]
 8001a6e:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8001a70:	7cfb      	ldrb	r3, [r7, #19]
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d108      	bne.n	8001a88 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2200      	movs	r2, #0
 8001a82:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8001a84:	2300      	movs	r3, #0
 8001a86:	e000      	b.n	8001a8a <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3720      	adds	r7, #32
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b088      	sub	sp, #32
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001aa6:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	69fa      	ldr	r2, [r7, #28]
 8001aac:	3212      	adds	r2, #18
 8001aae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ab2:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ab8:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001aba:	e044      	b.n	8001b46 <ETH_UpdateDescriptor+0xb4>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	6a1b      	ldr	r3, [r3, #32]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d112      	bne.n	8001aea <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001ac4:	f107 0308 	add.w	r3, r7, #8
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f005 fddd 	bl	8007688 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d102      	bne.n	8001ada <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	74fb      	strb	r3, [r7, #19]
 8001ad8:	e007      	b.n	8001aea <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	461a      	mov	r2, r3
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001aea:	7cfb      	ldrb	r3, [r7, #19]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d02a      	beq.n	8001b46 <ETH_UpdateDescriptor+0xb4>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d108      	bne.n	8001b0a <ETH_UpdateDescriptor+0x78>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	695b      	ldr	r3, [r3, #20]
 8001afc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001b00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b04:	697a      	ldr	r2, [r7, #20]
 8001b06:	6053      	str	r3, [r2, #4]
 8001b08:	e005      	b.n	8001b16 <ETH_UpdateDescriptor+0x84>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	695b      	ldr	r3, [r3, #20]
 8001b0e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	3301      	adds	r3, #1
 8001b26:	61fb      	str	r3, [r7, #28]
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	2b03      	cmp	r3, #3
 8001b2c:	d902      	bls.n	8001b34 <ETH_UpdateDescriptor+0xa2>
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	3b04      	subs	r3, #4
 8001b32:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	69fa      	ldr	r2, [r7, #28]
 8001b38:	3212      	adds	r2, #18
 8001b3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b3e:	617b      	str	r3, [r7, #20]
      desccount--;
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	3b01      	subs	r3, #1
 8001b44:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d002      	beq.n	8001b52 <ETH_UpdateDescriptor+0xc0>
 8001b4c:	7cfb      	ldrb	r3, [r7, #19]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d1b4      	bne.n	8001abc <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d01a      	beq.n	8001b92 <ETH_UpdateDescriptor+0x100>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	3303      	adds	r3, #3
 8001b60:	f003 0303 	and.w	r3, r3, #3
 8001b64:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8001b66:	f3bf 8f5f 	dmb	sy
}
 8001b6a:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6919      	ldr	r1, [r3, #16]
 8001b70:	68fa      	ldr	r2, [r7, #12]
 8001b72:	4613      	mov	r3, r2
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	4413      	add	r3, r2
 8001b78:	00db      	lsls	r3, r3, #3
 8001b7a:	18ca      	adds	r2, r1, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b84:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	69fa      	ldr	r2, [r7, #28]
 8001b8a:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8001b92:	bf00      	nop
 8001b94:	3720      	adds	r7, #32
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b086      	sub	sp, #24
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	3318      	adds	r3, #24
 8001ba6:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bac:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bb2:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001bb8:	e047      	b.n	8001c4a <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	3b01      	subs	r3, #1
 8001bc2:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8001bc4:	68ba      	ldr	r2, [r7, #8]
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	3304      	adds	r3, #4
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	4413      	add	r3, r2
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d10a      	bne.n	8001bea <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	613b      	str	r3, [r7, #16]
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	2b03      	cmp	r3, #3
 8001bde:	d902      	bls.n	8001be6 <HAL_ETH_ReleaseTxPacket+0x4c>
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	3b04      	subs	r3, #4
 8001be4:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8001be6:	2300      	movs	r3, #0
 8001be8:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8001bea:	7bbb      	ldrb	r3, [r7, #14]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d02c      	beq.n	8001c4a <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	68d9      	ldr	r1, [r3, #12]
 8001bf4:	693a      	ldr	r2, [r7, #16]
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	4413      	add	r3, r2
 8001bfc:	00db      	lsls	r3, r3, #3
 8001bfe:	440b      	add	r3, r1
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	db1f      	blt.n	8001c46 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001c06:	68ba      	ldr	r2, [r7, #8]
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	3304      	adds	r3, #4
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	4413      	add	r3, r2
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f005 fda8 	bl	8007768 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8001c18:	68ba      	ldr	r2, [r7, #8]
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	3304      	adds	r3, #4
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	4413      	add	r3, r2
 8001c22:	2200      	movs	r2, #0
 8001c24:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	613b      	str	r3, [r7, #16]
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	2b03      	cmp	r3, #3
 8001c30:	d902      	bls.n	8001c38 <HAL_ETH_ReleaseTxPacket+0x9e>
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	3b04      	subs	r3, #4
 8001c36:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	697a      	ldr	r2, [r7, #20]
 8001c3c:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	693a      	ldr	r2, [r7, #16]
 8001c42:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001c44:	e001      	b.n	8001c4a <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8001c46:	2300      	movs	r3, #0
 8001c48:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d002      	beq.n	8001c56 <HAL_ETH_ReleaseTxPacket+0xbc>
 8001c50:	7bfb      	ldrb	r3, [r7, #15]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d1b1      	bne.n	8001bba <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8001c56:	2300      	movs	r3, #0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3718      	adds	r7, #24
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b086      	sub	sp, #24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c6e:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c78:	695b      	ldr	r3, [r3, #20]
 8001c7a:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c84:	69db      	ldr	r3, [r3, #28]
 8001c86:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8001c88:	4b4b      	ldr	r3, [pc, #300]	@ (8001db8 <HAL_ETH_IRQHandler+0x158>)
 8001c8a:	695b      	ldr	r3, [r3, #20]
 8001c8c:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d00e      	beq.n	8001cb6 <HAL_ETH_IRQHandler+0x56>
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d009      	beq.n	8001cb6 <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001caa:	461a      	mov	r2, r3
 8001cac:	4b43      	ldr	r3, [pc, #268]	@ (8001dbc <HAL_ETH_IRQHandler+0x15c>)
 8001cae:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f005 f9bb 	bl	800702c <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	f003 0301 	and.w	r3, r3, #1
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d00f      	beq.n	8001ce0 <HAL_ETH_IRQHandler+0x80>
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f003 0301 	and.w	r3, r3, #1
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d00a      	beq.n	8001ce0 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8001cd8:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f005 f9b6 	bl	800704c <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d042      	beq.n	8001d70 <HAL_ETH_IRQHandler+0x110>
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d03d      	beq.n	8001d70 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cfa:	f043 0208 	orr.w	r2, r3, #8
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d01a      	beq.n	8001d44 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d16:	695a      	ldr	r2, [r3, #20]
 8001d18:	4b29      	ldr	r3, [pc, #164]	@ (8001dc0 <HAL_ETH_IRQHandler+0x160>)
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d2a:	69db      	ldr	r3, [r3, #28]
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	6812      	ldr	r2, [r2, #0]
 8001d30:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8001d34:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d38:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	22e0      	movs	r2, #224	@ 0xe0
 8001d3e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8001d42:	e012      	b.n	8001d6a <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d4c:	695a      	ldr	r2, [r3, #20]
 8001d4e:	f248 6380 	movw	r3, #34432	@ 0x8680
 8001d52:	4013      	ands	r3, r2
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d62:	461a      	mov	r2, r3
 8001d64:	f248 6380 	movw	r3, #34432	@ 0x8680
 8001d68:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f005 f97e 	bl	800706c <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	f003 0308 	and.w	r3, r3, #8
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d00e      	beq.n	8001d98 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d80:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 f81a 	bl	8001dc4 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d006      	beq.n	8001db0 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001da2:	4b05      	ldr	r3, [pc, #20]	@ (8001db8 <HAL_ETH_IRQHandler+0x158>)
 8001da4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001da8:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 f814 	bl	8001dd8 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8001db0:	bf00      	nop
 8001db2:	3718      	adds	r7, #24
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	40013c00 	.word	0x40013c00
 8001dbc:	00010040 	.word	0x00010040
 8001dc0:	007e2000 	.word	0x007e2000

08001dc4 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001de0:	bf00      	nop
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b086      	sub	sp, #24
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	60f8      	str	r0, [r7, #12]
 8001df4:	60b9      	str	r1, [r7, #8]
 8001df6:	607a      	str	r2, [r7, #4]
 8001df8:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	691b      	ldr	r3, [r3, #16]
 8001e00:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	f003 031c 	and.w	r3, r3, #28
 8001e08:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	02db      	lsls	r3, r3, #11
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	697a      	ldr	r2, [r7, #20]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	019b      	lsls	r3, r3, #6
 8001e1a:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8001e1e:	697a      	ldr	r2, [r7, #20]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	f023 0302 	bic.w	r3, r3, #2
 8001e2a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	f043 0301 	orr.w	r3, r3, #1
 8001e32:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	697a      	ldr	r2, [r7, #20]
 8001e3a:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001e3c:	f7ff fb56 	bl	80014ec <HAL_GetTick>
 8001e40:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e42:	e00d      	b.n	8001e60 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001e44:	f7ff fb52 	bl	80014ec <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e52:	d301      	bcc.n	8001e58 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e010      	b.n	8001e7a <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	691b      	ldr	r3, [r3, #16]
 8001e5e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d1ec      	bne.n	8001e44 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	695b      	ldr	r3, [r3, #20]
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	461a      	mov	r2, r3
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3718      	adds	r7, #24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b086      	sub	sp, #24
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	60f8      	str	r0, [r7, #12]
 8001e8a:	60b9      	str	r1, [r7, #8]
 8001e8c:	607a      	str	r2, [r7, #4]
 8001e8e:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	f003 031c 	and.w	r3, r3, #28
 8001e9e:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	02db      	lsls	r3, r3, #11
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	697a      	ldr	r2, [r7, #20]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	019b      	lsls	r3, r3, #6
 8001eb0:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8001eb4:	697a      	ldr	r2, [r7, #20]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	f043 0302 	orr.w	r3, r3, #2
 8001ec0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	f043 0301 	orr.w	r3, r3, #1
 8001ec8:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	b29a      	uxth	r2, r3
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	697a      	ldr	r2, [r7, #20]
 8001eda:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001edc:	f7ff fb06 	bl	80014ec <HAL_GetTick>
 8001ee0:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001ee2:	e00d      	b.n	8001f00 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001ee4:	f7ff fb02 	bl	80014ec <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ef2:	d301      	bcc.n	8001ef8 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e009      	b.n	8001f0c <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	691b      	ldr	r3, [r3, #16]
 8001efe:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d1ec      	bne.n	8001ee4 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001f0a:	2300      	movs	r3, #0
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3718      	adds	r7, #24
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr

08001f2e <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	b083      	sub	sp, #12
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	4b53      	ldr	r3, [pc, #332]	@ (80020ac <ETH_SetMACConfig+0x164>)
 8001f5e:	4013      	ands	r3, r2
 8001f60:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	7b9b      	ldrb	r3, [r3, #14]
 8001f66:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001f68:	683a      	ldr	r2, [r7, #0]
 8001f6a:	7c12      	ldrb	r2, [r2, #16]
 8001f6c:	2a00      	cmp	r2, #0
 8001f6e:	d102      	bne.n	8001f76 <ETH_SetMACConfig+0x2e>
 8001f70:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001f74:	e000      	b.n	8001f78 <ETH_SetMACConfig+0x30>
 8001f76:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001f78:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001f7a:	683a      	ldr	r2, [r7, #0]
 8001f7c:	7c52      	ldrb	r2, [r2, #17]
 8001f7e:	2a00      	cmp	r2, #0
 8001f80:	d102      	bne.n	8001f88 <ETH_SetMACConfig+0x40>
 8001f82:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001f86:	e000      	b.n	8001f8a <ETH_SetMACConfig+0x42>
 8001f88:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001f8a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001f90:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	7fdb      	ldrb	r3, [r3, #31]
 8001f96:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001f98:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001f9e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001fa0:	683a      	ldr	r2, [r7, #0]
 8001fa2:	7f92      	ldrb	r2, [r2, #30]
 8001fa4:	2a00      	cmp	r2, #0
 8001fa6:	d102      	bne.n	8001fae <ETH_SetMACConfig+0x66>
 8001fa8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001fac:	e000      	b.n	8001fb0 <ETH_SetMACConfig+0x68>
 8001fae:	2200      	movs	r2, #0
                        macconf->Speed |
 8001fb0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	7f1b      	ldrb	r3, [r3, #28]
 8001fb6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001fb8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001fbe:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	791b      	ldrb	r3, [r3, #4]
 8001fc4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001fc6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001fc8:	683a      	ldr	r2, [r7, #0]
 8001fca:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001fce:	2a00      	cmp	r2, #0
 8001fd0:	d102      	bne.n	8001fd8 <ETH_SetMACConfig+0x90>
 8001fd2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fd6:	e000      	b.n	8001fda <ETH_SetMACConfig+0x92>
 8001fd8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001fda:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	7bdb      	ldrb	r3, [r3, #15]
 8001fe0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001fe2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001fe8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001ff0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	68fa      	ldr	r2, [r7, #12]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800200a:	2001      	movs	r0, #1
 800200c:	f7ff fa7a 	bl	8001504 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	68fa      	ldr	r2, [r7, #12]
 8002016:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	699b      	ldr	r3, [r3, #24]
 800201e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002020:	68fa      	ldr	r2, [r7, #12]
 8002022:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8002026:	4013      	ands	r3, r2
 8002028:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800202e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002030:	683a      	ldr	r2, [r7, #0]
 8002032:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002036:	2a00      	cmp	r2, #0
 8002038:	d101      	bne.n	800203e <ETH_SetMACConfig+0xf6>
 800203a:	2280      	movs	r2, #128	@ 0x80
 800203c:	e000      	b.n	8002040 <ETH_SetMACConfig+0xf8>
 800203e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002040:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002046:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002048:	683a      	ldr	r2, [r7, #0]
 800204a:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800204e:	2a01      	cmp	r2, #1
 8002050:	d101      	bne.n	8002056 <ETH_SetMACConfig+0x10e>
 8002052:	2208      	movs	r2, #8
 8002054:	e000      	b.n	8002058 <ETH_SetMACConfig+0x110>
 8002056:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002058:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800205a:	683a      	ldr	r2, [r7, #0]
 800205c:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002060:	2a01      	cmp	r2, #1
 8002062:	d101      	bne.n	8002068 <ETH_SetMACConfig+0x120>
 8002064:	2204      	movs	r2, #4
 8002066:	e000      	b.n	800206a <ETH_SetMACConfig+0x122>
 8002068:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800206a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800206c:	683a      	ldr	r2, [r7, #0]
 800206e:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8002072:	2a01      	cmp	r2, #1
 8002074:	d101      	bne.n	800207a <ETH_SetMACConfig+0x132>
 8002076:	2202      	movs	r2, #2
 8002078:	e000      	b.n	800207c <ETH_SetMACConfig+0x134>
 800207a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800207c:	4313      	orrs	r3, r2
 800207e:	68fa      	ldr	r2, [r7, #12]
 8002080:	4313      	orrs	r3, r2
 8002082:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	68fa      	ldr	r2, [r7, #12]
 800208a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002094:	2001      	movs	r0, #1
 8002096:	f7ff fa35 	bl	8001504 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	619a      	str	r2, [r3, #24]
}
 80020a2:	bf00      	nop
 80020a4:	3710      	adds	r7, #16
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	fd20810f 	.word	0xfd20810f

080020b0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020c2:	699b      	ldr	r3, [r3, #24]
 80020c4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80020c6:	68fa      	ldr	r2, [r7, #12]
 80020c8:	4b3d      	ldr	r3, [pc, #244]	@ (80021c0 <ETH_SetDMAConfig+0x110>)
 80020ca:	4013      	ands	r3, r2
 80020cc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	7b1b      	ldrb	r3, [r3, #12]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d102      	bne.n	80020dc <ETH_SetDMAConfig+0x2c>
 80020d6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80020da:	e000      	b.n	80020de <ETH_SetDMAConfig+0x2e>
 80020dc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	7b5b      	ldrb	r3, [r3, #13]
 80020e2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80020e4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80020e6:	683a      	ldr	r2, [r7, #0]
 80020e8:	7f52      	ldrb	r2, [r2, #29]
 80020ea:	2a00      	cmp	r2, #0
 80020ec:	d102      	bne.n	80020f4 <ETH_SetDMAConfig+0x44>
 80020ee:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80020f2:	e000      	b.n	80020f6 <ETH_SetDMAConfig+0x46>
 80020f4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80020f6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	7b9b      	ldrb	r3, [r3, #14]
 80020fc:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80020fe:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002104:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	7f1b      	ldrb	r3, [r3, #28]
 800210a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800210c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	7f9b      	ldrb	r3, [r3, #30]
 8002112:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002114:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800211a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002122:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002124:	4313      	orrs	r3, r2
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	4313      	orrs	r3, r2
 800212a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002134:	461a      	mov	r2, r3
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002142:	699b      	ldr	r3, [r3, #24]
 8002144:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002146:	2001      	movs	r0, #1
 8002148:	f7ff f9dc 	bl	8001504 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002154:	461a      	mov	r2, r3
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	791b      	ldrb	r3, [r3, #4]
 800215e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002164:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800216a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002170:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002178:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800217a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002180:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002182:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002188:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	6812      	ldr	r2, [r2, #0]
 800218e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002192:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002196:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80021a4:	2001      	movs	r0, #1
 80021a6:	f7ff f9ad 	bl	8001504 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021b2:	461a      	mov	r2, r3
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	6013      	str	r3, [r2, #0]
}
 80021b8:	bf00      	nop
 80021ba:	3710      	adds	r7, #16
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	f8de3f23 	.word	0xf8de3f23

080021c4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b0a6      	sub	sp, #152	@ 0x98
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80021cc:	2301      	movs	r3, #1
 80021ce:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80021d2:	2301      	movs	r3, #1
 80021d4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80021d8:	2300      	movs	r3, #0
 80021da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80021dc:	2300      	movs	r3, #0
 80021de:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80021e2:	2301      	movs	r3, #1
 80021e4:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80021e8:	2300      	movs	r3, #0
 80021ea:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80021ee:	2301      	movs	r3, #1
 80021f0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 80021f4:	2301      	movs	r3, #1
 80021f6:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80021fa:	2300      	movs	r3, #0
 80021fc:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002200:	2300      	movs	r3, #0
 8002202:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002206:	2300      	movs	r3, #0
 8002208:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800220a:	2300      	movs	r3, #0
 800220c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002210:	2300      	movs	r3, #0
 8002212:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002214:	2300      	movs	r3, #0
 8002216:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800221a:	2300      	movs	r3, #0
 800221c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002220:	2300      	movs	r3, #0
 8002222:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002226:	2300      	movs	r3, #0
 8002228:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800222c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002230:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002232:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002236:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002238:	2300      	movs	r3, #0
 800223a:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800223e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002242:	4619      	mov	r1, r3
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f7ff fe7f 	bl	8001f48 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800224a:	2301      	movs	r3, #1
 800224c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800224e:	2301      	movs	r3, #1
 8002250:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002252:	2301      	movs	r3, #1
 8002254:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002258:	2301      	movs	r3, #1
 800225a:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800225c:	2300      	movs	r3, #0
 800225e:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002260:	2300      	movs	r3, #0
 8002262:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002266:	2300      	movs	r3, #0
 8002268:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800226c:	2300      	movs	r3, #0
 800226e:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002270:	2301      	movs	r3, #1
 8002272:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002276:	2301      	movs	r3, #1
 8002278:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800227a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800227e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002280:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002284:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002286:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800228a:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800228c:	2301      	movs	r3, #1
 800228e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002292:	2300      	movs	r3, #0
 8002294:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002296:	2300      	movs	r3, #0
 8002298:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800229a:	f107 0308 	add.w	r3, r7, #8
 800229e:	4619      	mov	r1, r3
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f7ff ff05 	bl	80020b0 <ETH_SetDMAConfig>
}
 80022a6:	bf00      	nop
 80022a8:	3798      	adds	r7, #152	@ 0x98
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
	...

080022b0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b087      	sub	sp, #28
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	3305      	adds	r3, #5
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	021b      	lsls	r3, r3, #8
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	3204      	adds	r2, #4
 80022c8:	7812      	ldrb	r2, [r2, #0]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80022ce:	68ba      	ldr	r2, [r7, #8]
 80022d0:	4b11      	ldr	r3, [pc, #68]	@ (8002318 <ETH_MACAddressConfig+0x68>)
 80022d2:	4413      	add	r3, r2
 80022d4:	461a      	mov	r2, r3
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	3303      	adds	r3, #3
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	061a      	lsls	r2, r3, #24
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	3302      	adds	r3, #2
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	041b      	lsls	r3, r3, #16
 80022ea:	431a      	orrs	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	3301      	adds	r3, #1
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	021b      	lsls	r3, r3, #8
 80022f4:	4313      	orrs	r3, r2
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	7812      	ldrb	r2, [r2, #0]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80022fe:	68ba      	ldr	r2, [r7, #8]
 8002300:	4b06      	ldr	r3, [pc, #24]	@ (800231c <ETH_MACAddressConfig+0x6c>)
 8002302:	4413      	add	r3, r2
 8002304:	461a      	mov	r2, r3
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	6013      	str	r3, [r2, #0]
}
 800230a:	bf00      	nop
 800230c:	371c      	adds	r7, #28
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	40028040 	.word	0x40028040
 800231c:	40028044 	.word	0x40028044

08002320 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002320:	b480      	push	{r7}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002328:	2300      	movs	r3, #0
 800232a:	60fb      	str	r3, [r7, #12]
 800232c:	e03e      	b.n	80023ac <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	68d9      	ldr	r1, [r3, #12]
 8002332:	68fa      	ldr	r2, [r7, #12]
 8002334:	4613      	mov	r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	4413      	add	r3, r2
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	440b      	add	r3, r1
 800233e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	2200      	movs	r2, #0
 8002344:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	2200      	movs	r2, #0
 800234a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	2200      	movs	r2, #0
 8002350:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	2200      	movs	r2, #0
 8002356:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002358:	68b9      	ldr	r1, [r7, #8]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	68fa      	ldr	r2, [r7, #12]
 800235e:	3206      	adds	r2, #6
 8002360:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2b02      	cmp	r3, #2
 8002374:	d80c      	bhi.n	8002390 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	68d9      	ldr	r1, [r3, #12]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	1c5a      	adds	r2, r3, #1
 800237e:	4613      	mov	r3, r2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	4413      	add	r3, r2
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	440b      	add	r3, r1
 8002388:	461a      	mov	r2, r3
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	60da      	str	r2, [r3, #12]
 800238e:	e004      	b.n	800239a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	461a      	mov	r2, r3
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	3301      	adds	r3, #1
 80023aa:	60fb      	str	r3, [r7, #12]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2b03      	cmp	r3, #3
 80023b0:	d9bd      	bls.n	800232e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	68da      	ldr	r2, [r3, #12]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023c4:	611a      	str	r2, [r3, #16]
}
 80023c6:	bf00      	nop
 80023c8:	3714      	adds	r7, #20
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr

080023d2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80023d2:	b480      	push	{r7}
 80023d4:	b085      	sub	sp, #20
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80023da:	2300      	movs	r3, #0
 80023dc:	60fb      	str	r3, [r7, #12]
 80023de:	e048      	b.n	8002472 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6919      	ldr	r1, [r3, #16]
 80023e4:	68fa      	ldr	r2, [r7, #12]
 80023e6:	4613      	mov	r3, r2
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	4413      	add	r3, r2
 80023ec:	00db      	lsls	r3, r3, #3
 80023ee:	440b      	add	r3, r1
 80023f0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	2200      	movs	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	2200      	movs	r2, #0
 80023fc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	2200      	movs	r2, #0
 8002402:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	2200      	movs	r2, #0
 8002408:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	2200      	movs	r2, #0
 800240e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	2200      	movs	r2, #0
 8002414:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800241c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002436:	68b9      	ldr	r1, [r7, #8]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	68fa      	ldr	r2, [r7, #12]
 800243c:	3212      	adds	r2, #18
 800243e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2b02      	cmp	r3, #2
 8002446:	d80c      	bhi.n	8002462 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6919      	ldr	r1, [r3, #16]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	1c5a      	adds	r2, r3, #1
 8002450:	4613      	mov	r3, r2
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	4413      	add	r3, r2
 8002456:	00db      	lsls	r3, r3, #3
 8002458:	440b      	add	r3, r1
 800245a:	461a      	mov	r2, r3
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	60da      	str	r2, [r3, #12]
 8002460:	e004      	b.n	800246c <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	461a      	mov	r2, r3
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	3301      	adds	r3, #1
 8002470:	60fb      	str	r3, [r7, #12]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2b03      	cmp	r3, #3
 8002476:	d9b3      	bls.n	80023e0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	691a      	ldr	r2, [r3, #16]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024a2:	60da      	str	r2, [r3, #12]
}
 80024a4:	bf00      	nop
 80024a6:	3714      	adds	r7, #20
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b091      	sub	sp, #68	@ 0x44
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	3318      	adds	r3, #24
 80024c0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80024c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c4:	691b      	ldr	r3, [r3, #16]
 80024c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80024c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ca:	691b      	ldr	r3, [r3, #16]
 80024cc:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 80024ce:	2300      	movs	r3, #0
 80024d0:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80024d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80024d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024da:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 80024e2:	2300      	movs	r3, #0
 80024e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80024e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80024ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80024f2:	d007      	beq.n	8002504 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80024f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024f8:	3304      	adds	r3, #4
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	4413      	add	r3, r2
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002504:	2302      	movs	r3, #2
 8002506:	e115      	b.n	8002734 <ETH_Prepare_Tx_Descriptors+0x284>
  }


  descnbr += 1U;
 8002508:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800250a:	3301      	adds	r3, #1
 800250c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800250e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	461a      	mov	r2, r3
 8002514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002516:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8002520:	f023 031f 	bic.w	r3, r3, #31
 8002524:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002526:	6852      	ldr	r2, [r2, #4]
 8002528:	431a      	orrs	r2, r3
 800252a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800252c:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	2b00      	cmp	r3, #0
 8002538:	d008      	beq.n	800254c <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800253a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	695b      	ldr	r3, [r3, #20]
 8002546:	431a      	orrs	r2, r3
 8002548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800254a:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0320 	and.w	r3, r3, #32
 8002554:	2b00      	cmp	r3, #0
 8002556:	d008      	beq.n	800256a <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	691b      	ldr	r3, [r3, #16]
 8002564:	431a      	orrs	r2, r3
 8002566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002568:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0304 	and.w	r3, r3, #4
 8002572:	2b00      	cmp	r3, #0
 8002574:	d005      	beq.n	8002582 <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800257e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002580:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800258a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800258c:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800258e:	e084      	b.n	800269a <ETH_Prepare_Tx_Descriptors+0x1ea>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800259a:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d006      	beq.n	80025b0 <ETH_Prepare_Tx_Descriptors+0x100>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80025a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80025aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025ac:	601a      	str	r2, [r3, #0]
 80025ae:	e005      	b.n	80025bc <ETH_Prepare_Tx_Descriptors+0x10c>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80025b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80025b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025ba:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80025bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025be:	3301      	adds	r3, #1
 80025c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80025c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025c4:	2b03      	cmp	r3, #3
 80025c6:	d902      	bls.n	80025ce <ETH_Prepare_Tx_Descriptors+0x11e>
 80025c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025ca:	3b04      	subs	r3, #4
 80025cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80025ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80025d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025d6:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80025d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80025e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80025e4:	d007      	beq.n	80025f6 <ETH_Prepare_Tx_Descriptors+0x146>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80025e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025ea:	3304      	adds	r3, #4
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	4413      	add	r3, r2
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d029      	beq.n	800264a <ETH_Prepare_Tx_Descriptors+0x19a>
    {
      descidx = firstdescidx;
 80025f6:	6a3b      	ldr	r3, [r7, #32]
 80025f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80025fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025fc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80025fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002602:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002604:	2300      	movs	r3, #0
 8002606:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002608:	e019      	b.n	800263e <ETH_Prepare_Tx_Descriptors+0x18e>
  __ASM volatile ("dmb 0xF":::"memory");
 800260a:	f3bf 8f5f 	dmb	sy
}
 800260e:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800261a:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800261c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800261e:	3301      	adds	r3, #1
 8002620:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002622:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002624:	2b03      	cmp	r3, #3
 8002626:	d902      	bls.n	800262e <ETH_Prepare_Tx_Descriptors+0x17e>
 8002628:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800262a:	3b04      	subs	r3, #4
 800262c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800262e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002630:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002632:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002636:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8002638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800263a:	3301      	adds	r3, #1
 800263c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800263e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002640:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002642:	429a      	cmp	r2, r3
 8002644:	d3e1      	bcc.n	800260a <ETH_Prepare_Tx_Descriptors+0x15a>
      }

      return HAL_ETH_ERROR_BUSY;
 8002646:	2302      	movs	r3, #2
 8002648:	e074      	b.n	8002734 <ETH_Prepare_Tx_Descriptors+0x284>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800264a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002654:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8002656:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002658:	3301      	adds	r3, #1
 800265a:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800265c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	461a      	mov	r2, r3
 8002668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800266a:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800266c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8002674:	f023 031f 	bic.w	r3, r3, #31
 8002678:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800267a:	6852      	ldr	r2, [r2, #4]
 800267c:	431a      	orrs	r2, r3
 800267e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002680:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002684:	3301      	adds	r3, #1
 8002686:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8002688:	f3bf 8f5f 	dmb	sy
}
 800268c:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800268e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002698:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 800269a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	f47f af76 	bne.w	8002590 <ETH_Prepare_Tx_Descriptors+0xe0>
  }

  if (ItMode != ((uint32_t)RESET))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d006      	beq.n	80026b8 <ETH_Prepare_Tx_Descriptors+0x208>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80026aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80026b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026b4:	601a      	str	r2, [r3, #0]
 80026b6:	e005      	b.n	80026c4 <ETH_Prepare_Tx_Descriptors+0x214>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80026b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80026c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026c2:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80026c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80026cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026ce:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80026d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d2:	6a3a      	ldr	r2, [r7, #32]
 80026d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026d8:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 80026da:	f3bf 8f5f 	dmb	sy
}
 80026de:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80026e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80026e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026ea:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80026ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80026f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80026f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026f4:	3304      	adds	r3, #4
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	440b      	add	r3, r1
 80026fa:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80026fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026fe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002700:	611a      	str	r2, [r3, #16]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002702:	f3ef 8310 	mrs	r3, PRIMASK
 8002706:	613b      	str	r3, [r7, #16]
  return(result);
 8002708:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 800270a:	61fb      	str	r3, [r7, #28]
 800270c:	2301      	movs	r3, #1
 800270e:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	f383 8810 	msr	PRIMASK, r3
}
 8002716:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800271a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800271c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800271e:	4413      	add	r3, r2
 8002720:	1c5a      	adds	r2, r3, #1
 8002722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002724:	629a      	str	r2, [r3, #40]	@ 0x28
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	f383 8810 	msr	PRIMASK, r3
}
 8002730:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002732:	2300      	movs	r3, #0
}
 8002734:	4618      	mov	r0, r3
 8002736:	3744      	adds	r7, #68	@ 0x44
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002740:	b480      	push	{r7}
 8002742:	b089      	sub	sp, #36	@ 0x24
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800274a:	2300      	movs	r3, #0
 800274c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800274e:	2300      	movs	r3, #0
 8002750:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002752:	2300      	movs	r3, #0
 8002754:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002756:	2300      	movs	r3, #0
 8002758:	61fb      	str	r3, [r7, #28]
 800275a:	e16b      	b.n	8002a34 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800275c:	2201      	movs	r2, #1
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	697a      	ldr	r2, [r7, #20]
 800276c:	4013      	ands	r3, r2
 800276e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002770:	693a      	ldr	r2, [r7, #16]
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	429a      	cmp	r2, r3
 8002776:	f040 815a 	bne.w	8002a2e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f003 0303 	and.w	r3, r3, #3
 8002782:	2b01      	cmp	r3, #1
 8002784:	d005      	beq.n	8002792 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800278e:	2b02      	cmp	r3, #2
 8002790:	d130      	bne.n	80027f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	005b      	lsls	r3, r3, #1
 800279c:	2203      	movs	r2, #3
 800279e:	fa02 f303 	lsl.w	r3, r2, r3
 80027a2:	43db      	mvns	r3, r3
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	4013      	ands	r3, r2
 80027a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	68da      	ldr	r2, [r3, #12]
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	fa02 f303 	lsl.w	r3, r2, r3
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027c8:	2201      	movs	r2, #1
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	fa02 f303 	lsl.w	r3, r2, r3
 80027d0:	43db      	mvns	r3, r3
 80027d2:	69ba      	ldr	r2, [r7, #24]
 80027d4:	4013      	ands	r3, r2
 80027d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	091b      	lsrs	r3, r3, #4
 80027de:	f003 0201 	and.w	r2, r3, #1
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f003 0303 	and.w	r3, r3, #3
 80027fc:	2b03      	cmp	r3, #3
 80027fe:	d017      	beq.n	8002830 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	2203      	movs	r2, #3
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	43db      	mvns	r3, r3
 8002812:	69ba      	ldr	r2, [r7, #24]
 8002814:	4013      	ands	r3, r2
 8002816:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	689a      	ldr	r2, [r3, #8]
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	005b      	lsls	r3, r3, #1
 8002820:	fa02 f303 	lsl.w	r3, r2, r3
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	4313      	orrs	r3, r2
 8002828:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f003 0303 	and.w	r3, r3, #3
 8002838:	2b02      	cmp	r3, #2
 800283a:	d123      	bne.n	8002884 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	08da      	lsrs	r2, r3, #3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	3208      	adds	r2, #8
 8002844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002848:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	f003 0307 	and.w	r3, r3, #7
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	220f      	movs	r2, #15
 8002854:	fa02 f303 	lsl.w	r3, r2, r3
 8002858:	43db      	mvns	r3, r3
 800285a:	69ba      	ldr	r2, [r7, #24]
 800285c:	4013      	ands	r3, r2
 800285e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	691a      	ldr	r2, [r3, #16]
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	f003 0307 	and.w	r3, r3, #7
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	4313      	orrs	r3, r2
 8002874:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	08da      	lsrs	r2, r3, #3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	3208      	adds	r2, #8
 800287e:	69b9      	ldr	r1, [r7, #24]
 8002880:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	2203      	movs	r2, #3
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	43db      	mvns	r3, r3
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	4013      	ands	r3, r2
 800289a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f003 0203 	and.w	r2, r3, #3
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	f000 80b4 	beq.w	8002a2e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028c6:	2300      	movs	r3, #0
 80028c8:	60fb      	str	r3, [r7, #12]
 80028ca:	4b60      	ldr	r3, [pc, #384]	@ (8002a4c <HAL_GPIO_Init+0x30c>)
 80028cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ce:	4a5f      	ldr	r2, [pc, #380]	@ (8002a4c <HAL_GPIO_Init+0x30c>)
 80028d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80028d6:	4b5d      	ldr	r3, [pc, #372]	@ (8002a4c <HAL_GPIO_Init+0x30c>)
 80028d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028de:	60fb      	str	r3, [r7, #12]
 80028e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028e2:	4a5b      	ldr	r2, [pc, #364]	@ (8002a50 <HAL_GPIO_Init+0x310>)
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	089b      	lsrs	r3, r3, #2
 80028e8:	3302      	adds	r3, #2
 80028ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	f003 0303 	and.w	r3, r3, #3
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	220f      	movs	r2, #15
 80028fa:	fa02 f303 	lsl.w	r3, r2, r3
 80028fe:	43db      	mvns	r3, r3
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	4013      	ands	r3, r2
 8002904:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a52      	ldr	r2, [pc, #328]	@ (8002a54 <HAL_GPIO_Init+0x314>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d02b      	beq.n	8002966 <HAL_GPIO_Init+0x226>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a51      	ldr	r2, [pc, #324]	@ (8002a58 <HAL_GPIO_Init+0x318>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d025      	beq.n	8002962 <HAL_GPIO_Init+0x222>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a50      	ldr	r2, [pc, #320]	@ (8002a5c <HAL_GPIO_Init+0x31c>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d01f      	beq.n	800295e <HAL_GPIO_Init+0x21e>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a4f      	ldr	r2, [pc, #316]	@ (8002a60 <HAL_GPIO_Init+0x320>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d019      	beq.n	800295a <HAL_GPIO_Init+0x21a>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a4e      	ldr	r2, [pc, #312]	@ (8002a64 <HAL_GPIO_Init+0x324>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d013      	beq.n	8002956 <HAL_GPIO_Init+0x216>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a4d      	ldr	r2, [pc, #308]	@ (8002a68 <HAL_GPIO_Init+0x328>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d00d      	beq.n	8002952 <HAL_GPIO_Init+0x212>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a4c      	ldr	r2, [pc, #304]	@ (8002a6c <HAL_GPIO_Init+0x32c>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d007      	beq.n	800294e <HAL_GPIO_Init+0x20e>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a4b      	ldr	r2, [pc, #300]	@ (8002a70 <HAL_GPIO_Init+0x330>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d101      	bne.n	800294a <HAL_GPIO_Init+0x20a>
 8002946:	2307      	movs	r3, #7
 8002948:	e00e      	b.n	8002968 <HAL_GPIO_Init+0x228>
 800294a:	2308      	movs	r3, #8
 800294c:	e00c      	b.n	8002968 <HAL_GPIO_Init+0x228>
 800294e:	2306      	movs	r3, #6
 8002950:	e00a      	b.n	8002968 <HAL_GPIO_Init+0x228>
 8002952:	2305      	movs	r3, #5
 8002954:	e008      	b.n	8002968 <HAL_GPIO_Init+0x228>
 8002956:	2304      	movs	r3, #4
 8002958:	e006      	b.n	8002968 <HAL_GPIO_Init+0x228>
 800295a:	2303      	movs	r3, #3
 800295c:	e004      	b.n	8002968 <HAL_GPIO_Init+0x228>
 800295e:	2302      	movs	r3, #2
 8002960:	e002      	b.n	8002968 <HAL_GPIO_Init+0x228>
 8002962:	2301      	movs	r3, #1
 8002964:	e000      	b.n	8002968 <HAL_GPIO_Init+0x228>
 8002966:	2300      	movs	r3, #0
 8002968:	69fa      	ldr	r2, [r7, #28]
 800296a:	f002 0203 	and.w	r2, r2, #3
 800296e:	0092      	lsls	r2, r2, #2
 8002970:	4093      	lsls	r3, r2
 8002972:	69ba      	ldr	r2, [r7, #24]
 8002974:	4313      	orrs	r3, r2
 8002976:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002978:	4935      	ldr	r1, [pc, #212]	@ (8002a50 <HAL_GPIO_Init+0x310>)
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	089b      	lsrs	r3, r3, #2
 800297e:	3302      	adds	r3, #2
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002986:	4b3b      	ldr	r3, [pc, #236]	@ (8002a74 <HAL_GPIO_Init+0x334>)
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	43db      	mvns	r3, r3
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	4013      	ands	r3, r2
 8002994:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d003      	beq.n	80029aa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80029a2:	69ba      	ldr	r2, [r7, #24]
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029aa:	4a32      	ldr	r2, [pc, #200]	@ (8002a74 <HAL_GPIO_Init+0x334>)
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029b0:	4b30      	ldr	r3, [pc, #192]	@ (8002a74 <HAL_GPIO_Init+0x334>)
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	43db      	mvns	r3, r3
 80029ba:	69ba      	ldr	r2, [r7, #24]
 80029bc:	4013      	ands	r3, r2
 80029be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d003      	beq.n	80029d4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029d4:	4a27      	ldr	r2, [pc, #156]	@ (8002a74 <HAL_GPIO_Init+0x334>)
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029da:	4b26      	ldr	r3, [pc, #152]	@ (8002a74 <HAL_GPIO_Init+0x334>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	43db      	mvns	r3, r3
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	4013      	ands	r3, r2
 80029e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d003      	beq.n	80029fe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029fe:	4a1d      	ldr	r2, [pc, #116]	@ (8002a74 <HAL_GPIO_Init+0x334>)
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a04:	4b1b      	ldr	r3, [pc, #108]	@ (8002a74 <HAL_GPIO_Init+0x334>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	43db      	mvns	r3, r3
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	4013      	ands	r3, r2
 8002a12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d003      	beq.n	8002a28 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a28:	4a12      	ldr	r2, [pc, #72]	@ (8002a74 <HAL_GPIO_Init+0x334>)
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	3301      	adds	r3, #1
 8002a32:	61fb      	str	r3, [r7, #28]
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	2b0f      	cmp	r3, #15
 8002a38:	f67f ae90 	bls.w	800275c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a3c:	bf00      	nop
 8002a3e:	bf00      	nop
 8002a40:	3724      	adds	r7, #36	@ 0x24
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	40023800 	.word	0x40023800
 8002a50:	40013800 	.word	0x40013800
 8002a54:	40020000 	.word	0x40020000
 8002a58:	40020400 	.word	0x40020400
 8002a5c:	40020800 	.word	0x40020800
 8002a60:	40020c00 	.word	0x40020c00
 8002a64:	40021000 	.word	0x40021000
 8002a68:	40021400 	.word	0x40021400
 8002a6c:	40021800 	.word	0x40021800
 8002a70:	40021c00 	.word	0x40021c00
 8002a74:	40013c00 	.word	0x40013c00

08002a78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	460b      	mov	r3, r1
 8002a82:	807b      	strh	r3, [r7, #2]
 8002a84:	4613      	mov	r3, r2
 8002a86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a88:	787b      	ldrb	r3, [r7, #1]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d003      	beq.n	8002a96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a8e:	887a      	ldrh	r2, [r7, #2]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a94:	e003      	b.n	8002a9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a96:	887b      	ldrh	r3, [r7, #2]
 8002a98:	041a      	lsls	r2, r3, #16
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	619a      	str	r2, [r3, #24]
}
 8002a9e:	bf00      	nop
 8002aa0:	370c      	adds	r7, #12
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr

08002aaa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002aaa:	b580      	push	{r7, lr}
 8002aac:	b086      	sub	sp, #24
 8002aae:	af02      	add	r7, sp, #8
 8002ab0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d101      	bne.n	8002abc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e101      	b.n	8002cc0 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d106      	bne.n	8002adc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f013 ffe8 	bl	8016aac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2203      	movs	r2, #3
 8002ae0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002aea:	d102      	bne.n	8002af2 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f002 feb5 	bl	8005866 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6818      	ldr	r0, [r3, #0]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	7c1a      	ldrb	r2, [r3, #16]
 8002b04:	f88d 2000 	strb.w	r2, [sp]
 8002b08:	3304      	adds	r3, #4
 8002b0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b0c:	f002 fd94 	bl	8005638 <USB_CoreInit>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d005      	beq.n	8002b22 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2202      	movs	r2, #2
 8002b1a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e0ce      	b.n	8002cc0 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2100      	movs	r1, #0
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f002 fead 	bl	8005888 <USB_SetCurrentMode>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d005      	beq.n	8002b40 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2202      	movs	r2, #2
 8002b38:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e0bf      	b.n	8002cc0 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b40:	2300      	movs	r3, #0
 8002b42:	73fb      	strb	r3, [r7, #15]
 8002b44:	e04a      	b.n	8002bdc <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b46:	7bfa      	ldrb	r2, [r7, #15]
 8002b48:	6879      	ldr	r1, [r7, #4]
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	00db      	lsls	r3, r3, #3
 8002b4e:	4413      	add	r3, r2
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	440b      	add	r3, r1
 8002b54:	3315      	adds	r3, #21
 8002b56:	2201      	movs	r2, #1
 8002b58:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b5a:	7bfa      	ldrb	r2, [r7, #15]
 8002b5c:	6879      	ldr	r1, [r7, #4]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	00db      	lsls	r3, r3, #3
 8002b62:	4413      	add	r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	440b      	add	r3, r1
 8002b68:	3314      	adds	r3, #20
 8002b6a:	7bfa      	ldrb	r2, [r7, #15]
 8002b6c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002b6e:	7bfa      	ldrb	r2, [r7, #15]
 8002b70:	7bfb      	ldrb	r3, [r7, #15]
 8002b72:	b298      	uxth	r0, r3
 8002b74:	6879      	ldr	r1, [r7, #4]
 8002b76:	4613      	mov	r3, r2
 8002b78:	00db      	lsls	r3, r3, #3
 8002b7a:	4413      	add	r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	440b      	add	r3, r1
 8002b80:	332e      	adds	r3, #46	@ 0x2e
 8002b82:	4602      	mov	r2, r0
 8002b84:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b86:	7bfa      	ldrb	r2, [r7, #15]
 8002b88:	6879      	ldr	r1, [r7, #4]
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	00db      	lsls	r3, r3, #3
 8002b8e:	4413      	add	r3, r2
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	440b      	add	r3, r1
 8002b94:	3318      	adds	r3, #24
 8002b96:	2200      	movs	r2, #0
 8002b98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b9a:	7bfa      	ldrb	r2, [r7, #15]
 8002b9c:	6879      	ldr	r1, [r7, #4]
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	00db      	lsls	r3, r3, #3
 8002ba2:	4413      	add	r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	440b      	add	r3, r1
 8002ba8:	331c      	adds	r3, #28
 8002baa:	2200      	movs	r2, #0
 8002bac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002bae:	7bfa      	ldrb	r2, [r7, #15]
 8002bb0:	6879      	ldr	r1, [r7, #4]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	00db      	lsls	r3, r3, #3
 8002bb6:	4413      	add	r3, r2
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	440b      	add	r3, r1
 8002bbc:	3320      	adds	r3, #32
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002bc2:	7bfa      	ldrb	r2, [r7, #15]
 8002bc4:	6879      	ldr	r1, [r7, #4]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	00db      	lsls	r3, r3, #3
 8002bca:	4413      	add	r3, r2
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	440b      	add	r3, r1
 8002bd0:	3324      	adds	r3, #36	@ 0x24
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bd6:	7bfb      	ldrb	r3, [r7, #15]
 8002bd8:	3301      	adds	r3, #1
 8002bda:	73fb      	strb	r3, [r7, #15]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	791b      	ldrb	r3, [r3, #4]
 8002be0:	7bfa      	ldrb	r2, [r7, #15]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d3af      	bcc.n	8002b46 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002be6:	2300      	movs	r3, #0
 8002be8:	73fb      	strb	r3, [r7, #15]
 8002bea:	e044      	b.n	8002c76 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002bec:	7bfa      	ldrb	r2, [r7, #15]
 8002bee:	6879      	ldr	r1, [r7, #4]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	4413      	add	r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	440b      	add	r3, r1
 8002bfa:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002bfe:	2200      	movs	r2, #0
 8002c00:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c02:	7bfa      	ldrb	r2, [r7, #15]
 8002c04:	6879      	ldr	r1, [r7, #4]
 8002c06:	4613      	mov	r3, r2
 8002c08:	00db      	lsls	r3, r3, #3
 8002c0a:	4413      	add	r3, r2
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	440b      	add	r3, r1
 8002c10:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002c14:	7bfa      	ldrb	r2, [r7, #15]
 8002c16:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c18:	7bfa      	ldrb	r2, [r7, #15]
 8002c1a:	6879      	ldr	r1, [r7, #4]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	4413      	add	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	440b      	add	r3, r1
 8002c26:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c2e:	7bfa      	ldrb	r2, [r7, #15]
 8002c30:	6879      	ldr	r1, [r7, #4]
 8002c32:	4613      	mov	r3, r2
 8002c34:	00db      	lsls	r3, r3, #3
 8002c36:	4413      	add	r3, r2
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	440b      	add	r3, r1
 8002c3c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002c40:	2200      	movs	r2, #0
 8002c42:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c44:	7bfa      	ldrb	r2, [r7, #15]
 8002c46:	6879      	ldr	r1, [r7, #4]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	4413      	add	r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	440b      	add	r3, r1
 8002c52:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002c56:	2200      	movs	r2, #0
 8002c58:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c5a:	7bfa      	ldrb	r2, [r7, #15]
 8002c5c:	6879      	ldr	r1, [r7, #4]
 8002c5e:	4613      	mov	r3, r2
 8002c60:	00db      	lsls	r3, r3, #3
 8002c62:	4413      	add	r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	440b      	add	r3, r1
 8002c68:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c70:	7bfb      	ldrb	r3, [r7, #15]
 8002c72:	3301      	adds	r3, #1
 8002c74:	73fb      	strb	r3, [r7, #15]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	791b      	ldrb	r3, [r3, #4]
 8002c7a:	7bfa      	ldrb	r2, [r7, #15]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d3b5      	bcc.n	8002bec <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6818      	ldr	r0, [r3, #0]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	7c1a      	ldrb	r2, [r3, #16]
 8002c88:	f88d 2000 	strb.w	r2, [sp]
 8002c8c:	3304      	adds	r3, #4
 8002c8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c90:	f002 fe46 	bl	8005920 <USB_DevInit>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d005      	beq.n	8002ca6 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2202      	movs	r2, #2
 8002c9e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e00c      	b.n	8002cc0 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f003 fe90 	bl	80069de <USB_DevDisconnect>

  return HAL_OK;
 8002cbe:	2300      	movs	r3, #0
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3710      	adds	r7, #16
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d101      	bne.n	8002ce4 <HAL_PCD_Start+0x1c>
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	e022      	b.n	8002d2a <HAL_PCD_Start+0x62>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d009      	beq.n	8002d0c <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d105      	bne.n	8002d0c <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d04:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4618      	mov	r0, r3
 8002d12:	f002 fd97 	bl	8005844 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f003 fe3e 	bl	800699c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3710      	adds	r7, #16
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002d32:	b590      	push	{r4, r7, lr}
 8002d34:	b08d      	sub	sp, #52	@ 0x34
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d40:	6a3b      	ldr	r3, [r7, #32]
 8002d42:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f003 fefc 	bl	8006b46 <USB_GetMode>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f040 848c 	bne.w	800366e <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f003 fe60 	bl	8006a20 <USB_ReadInterrupts>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	f000 8482 	beq.w	800366c <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	0a1b      	lsrs	r3, r3, #8
 8002d72:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f003 fe4d 	bl	8006a20 <USB_ReadInterrupts>
 8002d86:	4603      	mov	r3, r0
 8002d88:	f003 0302 	and.w	r3, r3, #2
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d107      	bne.n	8002da0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	695a      	ldr	r2, [r3, #20]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f002 0202 	and.w	r2, r2, #2
 8002d9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f003 fe3b 	bl	8006a20 <USB_ReadInterrupts>
 8002daa:	4603      	mov	r3, r0
 8002dac:	f003 0310 	and.w	r3, r3, #16
 8002db0:	2b10      	cmp	r3, #16
 8002db2:	d161      	bne.n	8002e78 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	699a      	ldr	r2, [r3, #24]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f022 0210 	bic.w	r2, r2, #16
 8002dc2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002dc4:	6a3b      	ldr	r3, [r7, #32]
 8002dc6:	6a1b      	ldr	r3, [r3, #32]
 8002dc8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	f003 020f 	and.w	r2, r3, #15
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	00db      	lsls	r3, r3, #3
 8002dd4:	4413      	add	r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	4413      	add	r3, r2
 8002de0:	3304      	adds	r3, #4
 8002de2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8002dea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002dee:	d124      	bne.n	8002e3a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002df6:	4013      	ands	r3, r2
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d035      	beq.n	8002e68 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	091b      	lsrs	r3, r3, #4
 8002e04:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002e06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	6a38      	ldr	r0, [r7, #32]
 8002e10:	f003 fc72 	bl	80066f8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	68da      	ldr	r2, [r3, #12]
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	091b      	lsrs	r3, r3, #4
 8002e1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e20:	441a      	add	r2, r3
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	695a      	ldr	r2, [r3, #20]
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	091b      	lsrs	r3, r3, #4
 8002e2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e32:	441a      	add	r2, r3
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	615a      	str	r2, [r3, #20]
 8002e38:	e016      	b.n	8002e68 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8002e40:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002e44:	d110      	bne.n	8002e68 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002e4c:	2208      	movs	r2, #8
 8002e4e:	4619      	mov	r1, r3
 8002e50:	6a38      	ldr	r0, [r7, #32]
 8002e52:	f003 fc51 	bl	80066f8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	695a      	ldr	r2, [r3, #20]
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	091b      	lsrs	r3, r3, #4
 8002e5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e62:	441a      	add	r2, r3
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	699a      	ldr	r2, [r3, #24]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f042 0210 	orr.w	r2, r2, #16
 8002e76:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f003 fdcf 	bl	8006a20 <USB_ReadInterrupts>
 8002e82:	4603      	mov	r3, r0
 8002e84:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e88:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002e8c:	f040 80a7 	bne.w	8002fde <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002e90:	2300      	movs	r3, #0
 8002e92:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f003 fdd4 	bl	8006a46 <USB_ReadDevAllOutEpInterrupt>
 8002e9e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002ea0:	e099      	b.n	8002fd6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ea4:	f003 0301 	and.w	r3, r3, #1
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	f000 808e 	beq.w	8002fca <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002eb4:	b2d2      	uxtb	r2, r2
 8002eb6:	4611      	mov	r1, r2
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f003 fdf8 	bl	8006aae <USB_ReadDevOutEPInterrupt>
 8002ebe:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00c      	beq.n	8002ee4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ecc:	015a      	lsls	r2, r3, #5
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	4413      	add	r3, r2
 8002ed2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	2301      	movs	r3, #1
 8002eda:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002edc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 fea4 	bl	8003c2c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	f003 0308 	and.w	r3, r3, #8
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d00c      	beq.n	8002f08 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef0:	015a      	lsls	r2, r3, #5
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002efa:	461a      	mov	r2, r3
 8002efc:	2308      	movs	r3, #8
 8002efe:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002f00:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 ff7a 	bl	8003dfc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	f003 0310 	and.w	r3, r3, #16
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d008      	beq.n	8002f24 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f14:	015a      	lsls	r2, r3, #5
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	4413      	add	r3, r2
 8002f1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f1e:	461a      	mov	r2, r3
 8002f20:	2310      	movs	r3, #16
 8002f22:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d030      	beq.n	8002f90 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002f2e:	6a3b      	ldr	r3, [r7, #32]
 8002f30:	695b      	ldr	r3, [r3, #20]
 8002f32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f36:	2b80      	cmp	r3, #128	@ 0x80
 8002f38:	d109      	bne.n	8002f4e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	69fa      	ldr	r2, [r7, #28]
 8002f44:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f48:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f4c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002f4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f50:	4613      	mov	r3, r2
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	4413      	add	r3, r2
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	4413      	add	r3, r2
 8002f60:	3304      	adds	r3, #4
 8002f62:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	78db      	ldrb	r3, [r3, #3]
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d108      	bne.n	8002f7e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	4619      	mov	r1, r3
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f013 fe9d 	bl	8016cb8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f80:	015a      	lsls	r2, r3, #5
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	4413      	add	r3, r2
 8002f86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	2302      	movs	r3, #2
 8002f8e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	f003 0320 	and.w	r3, r3, #32
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d008      	beq.n	8002fac <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f9c:	015a      	lsls	r2, r3, #5
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	2320      	movs	r3, #32
 8002faa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d009      	beq.n	8002fca <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb8:	015a      	lsls	r2, r3, #5
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002fc8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fcc:	3301      	adds	r3, #1
 8002fce:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002fd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fd2:	085b      	lsrs	r3, r3, #1
 8002fd4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	f47f af62 	bne.w	8002ea2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f003 fd1c 	bl	8006a20 <USB_ReadInterrupts>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002fee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002ff2:	f040 80db 	bne.w	80031ac <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f003 fd3d 	bl	8006a7a <USB_ReadDevAllInEpInterrupt>
 8003000:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003002:	2300      	movs	r3, #0
 8003004:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003006:	e0cd      	b.n	80031a4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b00      	cmp	r3, #0
 8003010:	f000 80c2 	beq.w	8003198 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800301a:	b2d2      	uxtb	r2, r2
 800301c:	4611      	mov	r1, r2
 800301e:	4618      	mov	r0, r3
 8003020:	f003 fd63 	bl	8006aea <USB_ReadDevInEPInterrupt>
 8003024:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	f003 0301 	and.w	r3, r3, #1
 800302c:	2b00      	cmp	r3, #0
 800302e:	d057      	beq.n	80030e0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003032:	f003 030f 	and.w	r3, r3, #15
 8003036:	2201      	movs	r2, #1
 8003038:	fa02 f303 	lsl.w	r3, r2, r3
 800303c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003044:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	43db      	mvns	r3, r3
 800304a:	69f9      	ldr	r1, [r7, #28]
 800304c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003050:	4013      	ands	r3, r2
 8003052:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003056:	015a      	lsls	r2, r3, #5
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	4413      	add	r3, r2
 800305c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003060:	461a      	mov	r2, r3
 8003062:	2301      	movs	r3, #1
 8003064:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	799b      	ldrb	r3, [r3, #6]
 800306a:	2b01      	cmp	r3, #1
 800306c:	d132      	bne.n	80030d4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800306e:	6879      	ldr	r1, [r7, #4]
 8003070:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003072:	4613      	mov	r3, r2
 8003074:	00db      	lsls	r3, r3, #3
 8003076:	4413      	add	r3, r2
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	440b      	add	r3, r1
 800307c:	3320      	adds	r3, #32
 800307e:	6819      	ldr	r1, [r3, #0]
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003084:	4613      	mov	r3, r2
 8003086:	00db      	lsls	r3, r3, #3
 8003088:	4413      	add	r3, r2
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	4403      	add	r3, r0
 800308e:	331c      	adds	r3, #28
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4419      	add	r1, r3
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003098:	4613      	mov	r3, r2
 800309a:	00db      	lsls	r3, r3, #3
 800309c:	4413      	add	r3, r2
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	4403      	add	r3, r0
 80030a2:	3320      	adds	r3, #32
 80030a4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80030a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d113      	bne.n	80030d4 <HAL_PCD_IRQHandler+0x3a2>
 80030ac:	6879      	ldr	r1, [r7, #4]
 80030ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030b0:	4613      	mov	r3, r2
 80030b2:	00db      	lsls	r3, r3, #3
 80030b4:	4413      	add	r3, r2
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	440b      	add	r3, r1
 80030ba:	3324      	adds	r3, #36	@ 0x24
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d108      	bne.n	80030d4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6818      	ldr	r0, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80030cc:	461a      	mov	r2, r3
 80030ce:	2101      	movs	r1, #1
 80030d0:	f003 fd6a 	bl	8006ba8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80030d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	4619      	mov	r1, r3
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f013 fd67 	bl	8016bae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	f003 0308 	and.w	r3, r3, #8
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d008      	beq.n	80030fc <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80030ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ec:	015a      	lsls	r2, r3, #5
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	4413      	add	r3, r2
 80030f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80030f6:	461a      	mov	r2, r3
 80030f8:	2308      	movs	r3, #8
 80030fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	f003 0310 	and.w	r3, r3, #16
 8003102:	2b00      	cmp	r3, #0
 8003104:	d008      	beq.n	8003118 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003108:	015a      	lsls	r2, r3, #5
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	4413      	add	r3, r2
 800310e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003112:	461a      	mov	r2, r3
 8003114:	2310      	movs	r3, #16
 8003116:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800311e:	2b00      	cmp	r3, #0
 8003120:	d008      	beq.n	8003134 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003124:	015a      	lsls	r2, r3, #5
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	4413      	add	r3, r2
 800312a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800312e:	461a      	mov	r2, r3
 8003130:	2340      	movs	r3, #64	@ 0x40
 8003132:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	2b00      	cmp	r3, #0
 800313c:	d023      	beq.n	8003186 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800313e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003140:	6a38      	ldr	r0, [r7, #32]
 8003142:	f002 fd51 	bl	8005be8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003146:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003148:	4613      	mov	r3, r2
 800314a:	00db      	lsls	r3, r3, #3
 800314c:	4413      	add	r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	3310      	adds	r3, #16
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	4413      	add	r3, r2
 8003156:	3304      	adds	r3, #4
 8003158:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	78db      	ldrb	r3, [r3, #3]
 800315e:	2b01      	cmp	r3, #1
 8003160:	d108      	bne.n	8003174 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	2200      	movs	r2, #0
 8003166:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800316a:	b2db      	uxtb	r3, r3
 800316c:	4619      	mov	r1, r3
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f013 fdb4 	bl	8016cdc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003176:	015a      	lsls	r2, r3, #5
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	4413      	add	r3, r2
 800317c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003180:	461a      	mov	r2, r3
 8003182:	2302      	movs	r3, #2
 8003184:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800318c:	2b00      	cmp	r3, #0
 800318e:	d003      	beq.n	8003198 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003190:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 fcbd 	bl	8003b12 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800319a:	3301      	adds	r3, #1
 800319c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800319e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031a0:	085b      	lsrs	r3, r3, #1
 80031a2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80031a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	f47f af2e 	bne.w	8003008 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4618      	mov	r0, r3
 80031b2:	f003 fc35 	bl	8006a20 <USB_ReadInterrupts>
 80031b6:	4603      	mov	r3, r0
 80031b8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80031bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80031c0:	d122      	bne.n	8003208 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	69fa      	ldr	r2, [r7, #28]
 80031cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80031d0:	f023 0301 	bic.w	r3, r3, #1
 80031d4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d108      	bne.n	80031f2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80031e8:	2100      	movs	r1, #0
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 fea4 	bl	8003f38 <HAL_PCDEx_LPM_Callback>
 80031f0:	e002      	b.n	80031f8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f013 fd52 	bl	8016c9c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	695a      	ldr	r2, [r3, #20]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003206:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4618      	mov	r0, r3
 800320e:	f003 fc07 	bl	8006a20 <USB_ReadInterrupts>
 8003212:	4603      	mov	r3, r0
 8003214:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003218:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800321c:	d112      	bne.n	8003244 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	2b01      	cmp	r3, #1
 800322c:	d102      	bne.n	8003234 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f013 fd0e 	bl	8016c50 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	695a      	ldr	r2, [r3, #20]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003242:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4618      	mov	r0, r3
 800324a:	f003 fbe9 	bl	8006a20 <USB_ReadInterrupts>
 800324e:	4603      	mov	r3, r0
 8003250:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003254:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003258:	f040 80b7 	bne.w	80033ca <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	69fa      	ldr	r2, [r7, #28]
 8003266:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800326a:	f023 0301 	bic.w	r3, r3, #1
 800326e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2110      	movs	r1, #16
 8003276:	4618      	mov	r0, r3
 8003278:	f002 fcb6 	bl	8005be8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800327c:	2300      	movs	r3, #0
 800327e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003280:	e046      	b.n	8003310 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003284:	015a      	lsls	r2, r3, #5
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	4413      	add	r3, r2
 800328a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800328e:	461a      	mov	r2, r3
 8003290:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003294:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003298:	015a      	lsls	r2, r3, #5
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	4413      	add	r3, r2
 800329e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80032a6:	0151      	lsls	r1, r2, #5
 80032a8:	69fa      	ldr	r2, [r7, #28]
 80032aa:	440a      	add	r2, r1
 80032ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80032b0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80032b4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80032b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032b8:	015a      	lsls	r2, r3, #5
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	4413      	add	r3, r2
 80032be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032c2:	461a      	mov	r2, r3
 80032c4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80032c8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80032ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032cc:	015a      	lsls	r2, r3, #5
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	4413      	add	r3, r2
 80032d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80032da:	0151      	lsls	r1, r2, #5
 80032dc:	69fa      	ldr	r2, [r7, #28]
 80032de:	440a      	add	r2, r1
 80032e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80032e4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80032e8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80032ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032ec:	015a      	lsls	r2, r3, #5
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	4413      	add	r3, r2
 80032f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80032fa:	0151      	lsls	r1, r2, #5
 80032fc:	69fa      	ldr	r2, [r7, #28]
 80032fe:	440a      	add	r2, r1
 8003300:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003304:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003308:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800330a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800330c:	3301      	adds	r3, #1
 800330e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	791b      	ldrb	r3, [r3, #4]
 8003314:	461a      	mov	r2, r3
 8003316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003318:	4293      	cmp	r3, r2
 800331a:	d3b2      	bcc.n	8003282 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003322:	69db      	ldr	r3, [r3, #28]
 8003324:	69fa      	ldr	r2, [r7, #28]
 8003326:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800332a:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800332e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	7bdb      	ldrb	r3, [r3, #15]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d016      	beq.n	8003366 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800333e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003342:	69fa      	ldr	r2, [r7, #28]
 8003344:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003348:	f043 030b 	orr.w	r3, r3, #11
 800334c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003356:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003358:	69fa      	ldr	r2, [r7, #28]
 800335a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800335e:	f043 030b 	orr.w	r3, r3, #11
 8003362:	6453      	str	r3, [r2, #68]	@ 0x44
 8003364:	e015      	b.n	8003392 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800336c:	695b      	ldr	r3, [r3, #20]
 800336e:	69fa      	ldr	r2, [r7, #28]
 8003370:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003374:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003378:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800337c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	69fa      	ldr	r2, [r7, #28]
 8003388:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800338c:	f043 030b 	orr.w	r3, r3, #11
 8003390:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	69fa      	ldr	r2, [r7, #28]
 800339c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80033a0:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80033a4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6818      	ldr	r0, [r3, #0]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80033b4:	461a      	mov	r2, r3
 80033b6:	f003 fbf7 	bl	8006ba8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	695a      	ldr	r2, [r3, #20]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80033c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f003 fb26 	bl	8006a20 <USB_ReadInterrupts>
 80033d4:	4603      	mov	r3, r0
 80033d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80033da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033de:	d123      	bne.n	8003428 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4618      	mov	r0, r3
 80033e6:	f003 fbbc 	bl	8006b62 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f002 fc73 	bl	8005cda <USB_GetDevSpeed>
 80033f4:	4603      	mov	r3, r0
 80033f6:	461a      	mov	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681c      	ldr	r4, [r3, #0]
 8003400:	f001 f9ca 	bl	8004798 <HAL_RCC_GetHCLKFreq>
 8003404:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800340a:	461a      	mov	r2, r3
 800340c:	4620      	mov	r0, r4
 800340e:	f002 f977 	bl	8005700 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f013 fbf3 	bl	8016bfe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	695a      	ldr	r2, [r3, #20]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003426:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4618      	mov	r0, r3
 800342e:	f003 faf7 	bl	8006a20 <USB_ReadInterrupts>
 8003432:	4603      	mov	r3, r0
 8003434:	f003 0308 	and.w	r3, r3, #8
 8003438:	2b08      	cmp	r3, #8
 800343a:	d10a      	bne.n	8003452 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f013 fbd0 	bl	8016be2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	695a      	ldr	r2, [r3, #20]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f002 0208 	and.w	r2, r2, #8
 8003450:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4618      	mov	r0, r3
 8003458:	f003 fae2 	bl	8006a20 <USB_ReadInterrupts>
 800345c:	4603      	mov	r3, r0
 800345e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003462:	2b80      	cmp	r3, #128	@ 0x80
 8003464:	d123      	bne.n	80034ae <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003466:	6a3b      	ldr	r3, [r7, #32]
 8003468:	699b      	ldr	r3, [r3, #24]
 800346a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800346e:	6a3b      	ldr	r3, [r7, #32]
 8003470:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003472:	2301      	movs	r3, #1
 8003474:	627b      	str	r3, [r7, #36]	@ 0x24
 8003476:	e014      	b.n	80034a2 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003478:	6879      	ldr	r1, [r7, #4]
 800347a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800347c:	4613      	mov	r3, r2
 800347e:	00db      	lsls	r3, r3, #3
 8003480:	4413      	add	r3, r2
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	440b      	add	r3, r1
 8003486:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d105      	bne.n	800349c <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003492:	b2db      	uxtb	r3, r3
 8003494:	4619      	mov	r1, r3
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 fb0a 	bl	8003ab0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800349c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800349e:	3301      	adds	r3, #1
 80034a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	791b      	ldrb	r3, [r3, #4]
 80034a6:	461a      	mov	r2, r3
 80034a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d3e4      	bcc.n	8003478 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4618      	mov	r0, r3
 80034b4:	f003 fab4 	bl	8006a20 <USB_ReadInterrupts>
 80034b8:	4603      	mov	r3, r0
 80034ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80034c2:	d13c      	bne.n	800353e <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80034c4:	2301      	movs	r3, #1
 80034c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80034c8:	e02b      	b.n	8003522 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80034ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034cc:	015a      	lsls	r2, r3, #5
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	4413      	add	r3, r2
 80034d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80034da:	6879      	ldr	r1, [r7, #4]
 80034dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034de:	4613      	mov	r3, r2
 80034e0:	00db      	lsls	r3, r3, #3
 80034e2:	4413      	add	r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	440b      	add	r3, r1
 80034e8:	3318      	adds	r3, #24
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d115      	bne.n	800351c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80034f0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	da12      	bge.n	800351c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80034f6:	6879      	ldr	r1, [r7, #4]
 80034f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034fa:	4613      	mov	r3, r2
 80034fc:	00db      	lsls	r3, r3, #3
 80034fe:	4413      	add	r3, r2
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	440b      	add	r3, r1
 8003504:	3317      	adds	r3, #23
 8003506:	2201      	movs	r2, #1
 8003508:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800350a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800350c:	b2db      	uxtb	r3, r3
 800350e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003512:	b2db      	uxtb	r3, r3
 8003514:	4619      	mov	r1, r3
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 faca 	bl	8003ab0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800351c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800351e:	3301      	adds	r3, #1
 8003520:	627b      	str	r3, [r7, #36]	@ 0x24
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	791b      	ldrb	r3, [r3, #4]
 8003526:	461a      	mov	r2, r3
 8003528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800352a:	4293      	cmp	r3, r2
 800352c:	d3cd      	bcc.n	80034ca <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	695a      	ldr	r2, [r3, #20]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800353c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4618      	mov	r0, r3
 8003544:	f003 fa6c 	bl	8006a20 <USB_ReadInterrupts>
 8003548:	4603      	mov	r3, r0
 800354a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800354e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003552:	d156      	bne.n	8003602 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003554:	2301      	movs	r3, #1
 8003556:	627b      	str	r3, [r7, #36]	@ 0x24
 8003558:	e045      	b.n	80035e6 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800355a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800355c:	015a      	lsls	r2, r3, #5
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	4413      	add	r3, r2
 8003562:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800356a:	6879      	ldr	r1, [r7, #4]
 800356c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800356e:	4613      	mov	r3, r2
 8003570:	00db      	lsls	r3, r3, #3
 8003572:	4413      	add	r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	440b      	add	r3, r1
 8003578:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	2b01      	cmp	r3, #1
 8003580:	d12e      	bne.n	80035e0 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003582:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003584:	2b00      	cmp	r3, #0
 8003586:	da2b      	bge.n	80035e0 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	0c1a      	lsrs	r2, r3, #16
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003592:	4053      	eors	r3, r2
 8003594:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003598:	2b00      	cmp	r3, #0
 800359a:	d121      	bne.n	80035e0 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800359c:	6879      	ldr	r1, [r7, #4]
 800359e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035a0:	4613      	mov	r3, r2
 80035a2:	00db      	lsls	r3, r3, #3
 80035a4:	4413      	add	r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	440b      	add	r3, r1
 80035aa:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80035ae:	2201      	movs	r2, #1
 80035b0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80035b2:	6a3b      	ldr	r3, [r7, #32]
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80035ba:	6a3b      	ldr	r3, [r7, #32]
 80035bc:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80035be:	6a3b      	ldr	r3, [r7, #32]
 80035c0:	695b      	ldr	r3, [r3, #20]
 80035c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d10a      	bne.n	80035e0 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	69fa      	ldr	r2, [r7, #28]
 80035d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80035d8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80035dc:	6053      	str	r3, [r2, #4]
            break;
 80035de:	e008      	b.n	80035f2 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80035e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e2:	3301      	adds	r3, #1
 80035e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	791b      	ldrb	r3, [r3, #4]
 80035ea:	461a      	mov	r2, r3
 80035ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d3b3      	bcc.n	800355a <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	695a      	ldr	r2, [r3, #20]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003600:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4618      	mov	r0, r3
 8003608:	f003 fa0a 	bl	8006a20 <USB_ReadInterrupts>
 800360c:	4603      	mov	r3, r0
 800360e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003612:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003616:	d10a      	bne.n	800362e <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f013 fb71 	bl	8016d00 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	695a      	ldr	r2, [r3, #20]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800362c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4618      	mov	r0, r3
 8003634:	f003 f9f4 	bl	8006a20 <USB_ReadInterrupts>
 8003638:	4603      	mov	r3, r0
 800363a:	f003 0304 	and.w	r3, r3, #4
 800363e:	2b04      	cmp	r3, #4
 8003640:	d115      	bne.n	800366e <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	f003 0304 	and.w	r3, r3, #4
 8003650:	2b00      	cmp	r3, #0
 8003652:	d002      	beq.n	800365a <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f013 fb61 	bl	8016d1c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	6859      	ldr	r1, [r3, #4]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	69ba      	ldr	r2, [r7, #24]
 8003666:	430a      	orrs	r2, r1
 8003668:	605a      	str	r2, [r3, #4]
 800366a:	e000      	b.n	800366e <HAL_PCD_IRQHandler+0x93c>
      return;
 800366c:	bf00      	nop
    }
  }
}
 800366e:	3734      	adds	r7, #52	@ 0x34
 8003670:	46bd      	mov	sp, r7
 8003672:	bd90      	pop	{r4, r7, pc}

08003674 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	460b      	mov	r3, r1
 800367e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003686:	2b01      	cmp	r3, #1
 8003688:	d101      	bne.n	800368e <HAL_PCD_SetAddress+0x1a>
 800368a:	2302      	movs	r3, #2
 800368c:	e012      	b.n	80036b4 <HAL_PCD_SetAddress+0x40>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2201      	movs	r2, #1
 8003692:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	78fa      	ldrb	r2, [r7, #3]
 800369a:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	78fa      	ldrb	r2, [r7, #3]
 80036a2:	4611      	mov	r1, r2
 80036a4:	4618      	mov	r0, r3
 80036a6:	f003 f953 	bl	8006950 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80036b2:	2300      	movs	r3, #0
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3708      	adds	r7, #8
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	4608      	mov	r0, r1
 80036c6:	4611      	mov	r1, r2
 80036c8:	461a      	mov	r2, r3
 80036ca:	4603      	mov	r3, r0
 80036cc:	70fb      	strb	r3, [r7, #3]
 80036ce:	460b      	mov	r3, r1
 80036d0:	803b      	strh	r3, [r7, #0]
 80036d2:	4613      	mov	r3, r2
 80036d4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80036d6:	2300      	movs	r3, #0
 80036d8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80036da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	da0f      	bge.n	8003702 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036e2:	78fb      	ldrb	r3, [r7, #3]
 80036e4:	f003 020f 	and.w	r2, r3, #15
 80036e8:	4613      	mov	r3, r2
 80036ea:	00db      	lsls	r3, r3, #3
 80036ec:	4413      	add	r3, r2
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	3310      	adds	r3, #16
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	4413      	add	r3, r2
 80036f6:	3304      	adds	r3, #4
 80036f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2201      	movs	r2, #1
 80036fe:	705a      	strb	r2, [r3, #1]
 8003700:	e00f      	b.n	8003722 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003702:	78fb      	ldrb	r3, [r7, #3]
 8003704:	f003 020f 	and.w	r2, r3, #15
 8003708:	4613      	mov	r3, r2
 800370a:	00db      	lsls	r3, r3, #3
 800370c:	4413      	add	r3, r2
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	4413      	add	r3, r2
 8003718:	3304      	adds	r3, #4
 800371a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003722:	78fb      	ldrb	r3, [r7, #3]
 8003724:	f003 030f 	and.w	r3, r3, #15
 8003728:	b2da      	uxtb	r2, r3
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800372e:	883b      	ldrh	r3, [r7, #0]
 8003730:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	78ba      	ldrb	r2, [r7, #2]
 800373c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	785b      	ldrb	r3, [r3, #1]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d004      	beq.n	8003750 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	461a      	mov	r2, r3
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003750:	78bb      	ldrb	r3, [r7, #2]
 8003752:	2b02      	cmp	r3, #2
 8003754:	d102      	bne.n	800375c <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2200      	movs	r2, #0
 800375a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003762:	2b01      	cmp	r3, #1
 8003764:	d101      	bne.n	800376a <HAL_PCD_EP_Open+0xae>
 8003766:	2302      	movs	r3, #2
 8003768:	e00e      	b.n	8003788 <HAL_PCD_EP_Open+0xcc>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2201      	movs	r2, #1
 800376e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	68f9      	ldr	r1, [r7, #12]
 8003778:	4618      	mov	r0, r3
 800377a:	f002 fad3 	bl	8005d24 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003786:	7afb      	ldrb	r3, [r7, #11]
}
 8003788:	4618      	mov	r0, r3
 800378a:	3710      	adds	r7, #16
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	460b      	mov	r3, r1
 800379a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800379c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	da0f      	bge.n	80037c4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037a4:	78fb      	ldrb	r3, [r7, #3]
 80037a6:	f003 020f 	and.w	r2, r3, #15
 80037aa:	4613      	mov	r3, r2
 80037ac:	00db      	lsls	r3, r3, #3
 80037ae:	4413      	add	r3, r2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	3310      	adds	r3, #16
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	4413      	add	r3, r2
 80037b8:	3304      	adds	r3, #4
 80037ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2201      	movs	r2, #1
 80037c0:	705a      	strb	r2, [r3, #1]
 80037c2:	e00f      	b.n	80037e4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037c4:	78fb      	ldrb	r3, [r7, #3]
 80037c6:	f003 020f 	and.w	r2, r3, #15
 80037ca:	4613      	mov	r3, r2
 80037cc:	00db      	lsls	r3, r3, #3
 80037ce:	4413      	add	r3, r2
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	4413      	add	r3, r2
 80037da:	3304      	adds	r3, #4
 80037dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2200      	movs	r2, #0
 80037e2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80037e4:	78fb      	ldrb	r3, [r7, #3]
 80037e6:	f003 030f 	and.w	r3, r3, #15
 80037ea:	b2da      	uxtb	r2, r3
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d101      	bne.n	80037fe <HAL_PCD_EP_Close+0x6e>
 80037fa:	2302      	movs	r3, #2
 80037fc:	e00e      	b.n	800381c <HAL_PCD_EP_Close+0x8c>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2201      	movs	r2, #1
 8003802:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	68f9      	ldr	r1, [r7, #12]
 800380c:	4618      	mov	r0, r3
 800380e:	f002 fb11 	bl	8005e34 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800381a:	2300      	movs	r3, #0
}
 800381c:	4618      	mov	r0, r3
 800381e:	3710      	adds	r7, #16
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}

08003824 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b086      	sub	sp, #24
 8003828:	af00      	add	r7, sp, #0
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	607a      	str	r2, [r7, #4]
 800382e:	603b      	str	r3, [r7, #0]
 8003830:	460b      	mov	r3, r1
 8003832:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003834:	7afb      	ldrb	r3, [r7, #11]
 8003836:	f003 020f 	and.w	r2, r3, #15
 800383a:	4613      	mov	r3, r2
 800383c:	00db      	lsls	r3, r3, #3
 800383e:	4413      	add	r3, r2
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003846:	68fa      	ldr	r2, [r7, #12]
 8003848:	4413      	add	r3, r2
 800384a:	3304      	adds	r3, #4
 800384c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	683a      	ldr	r2, [r7, #0]
 8003858:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	2200      	movs	r2, #0
 800385e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	2200      	movs	r2, #0
 8003864:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003866:	7afb      	ldrb	r3, [r7, #11]
 8003868:	f003 030f 	and.w	r3, r3, #15
 800386c:	b2da      	uxtb	r2, r3
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	799b      	ldrb	r3, [r3, #6]
 8003876:	2b01      	cmp	r3, #1
 8003878:	d102      	bne.n	8003880 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6818      	ldr	r0, [r3, #0]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	799b      	ldrb	r3, [r3, #6]
 8003888:	461a      	mov	r2, r3
 800388a:	6979      	ldr	r1, [r7, #20]
 800388c:	f002 fbae 	bl	8005fec <USB_EPStartXfer>

  return HAL_OK;
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3718      	adds	r7, #24
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}

0800389a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800389a:	b480      	push	{r7}
 800389c:	b083      	sub	sp, #12
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
 80038a2:	460b      	mov	r3, r1
 80038a4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80038a6:	78fb      	ldrb	r3, [r7, #3]
 80038a8:	f003 020f 	and.w	r2, r3, #15
 80038ac:	6879      	ldr	r1, [r7, #4]
 80038ae:	4613      	mov	r3, r2
 80038b0:	00db      	lsls	r3, r3, #3
 80038b2:	4413      	add	r3, r2
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	440b      	add	r3, r1
 80038b8:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80038bc:	681b      	ldr	r3, [r3, #0]
}
 80038be:	4618      	mov	r0, r3
 80038c0:	370c      	adds	r7, #12
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr

080038ca <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80038ca:	b580      	push	{r7, lr}
 80038cc:	b086      	sub	sp, #24
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	60f8      	str	r0, [r7, #12]
 80038d2:	607a      	str	r2, [r7, #4]
 80038d4:	603b      	str	r3, [r7, #0]
 80038d6:	460b      	mov	r3, r1
 80038d8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038da:	7afb      	ldrb	r3, [r7, #11]
 80038dc:	f003 020f 	and.w	r2, r3, #15
 80038e0:	4613      	mov	r3, r2
 80038e2:	00db      	lsls	r3, r3, #3
 80038e4:	4413      	add	r3, r2
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	3310      	adds	r3, #16
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	4413      	add	r3, r2
 80038ee:	3304      	adds	r3, #4
 80038f0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	683a      	ldr	r2, [r7, #0]
 80038fc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	2200      	movs	r2, #0
 8003902:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	2201      	movs	r2, #1
 8003908:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800390a:	7afb      	ldrb	r3, [r7, #11]
 800390c:	f003 030f 	and.w	r3, r3, #15
 8003910:	b2da      	uxtb	r2, r3
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	799b      	ldrb	r3, [r3, #6]
 800391a:	2b01      	cmp	r3, #1
 800391c:	d102      	bne.n	8003924 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6818      	ldr	r0, [r3, #0]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	799b      	ldrb	r3, [r3, #6]
 800392c:	461a      	mov	r2, r3
 800392e:	6979      	ldr	r1, [r7, #20]
 8003930:	f002 fb5c 	bl	8005fec <USB_EPStartXfer>

  return HAL_OK;
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	3718      	adds	r7, #24
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}

0800393e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800393e:	b580      	push	{r7, lr}
 8003940:	b084      	sub	sp, #16
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
 8003946:	460b      	mov	r3, r1
 8003948:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800394a:	78fb      	ldrb	r3, [r7, #3]
 800394c:	f003 030f 	and.w	r3, r3, #15
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	7912      	ldrb	r2, [r2, #4]
 8003954:	4293      	cmp	r3, r2
 8003956:	d901      	bls.n	800395c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e04f      	b.n	80039fc <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800395c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003960:	2b00      	cmp	r3, #0
 8003962:	da0f      	bge.n	8003984 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003964:	78fb      	ldrb	r3, [r7, #3]
 8003966:	f003 020f 	and.w	r2, r3, #15
 800396a:	4613      	mov	r3, r2
 800396c:	00db      	lsls	r3, r3, #3
 800396e:	4413      	add	r3, r2
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	3310      	adds	r3, #16
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	4413      	add	r3, r2
 8003978:	3304      	adds	r3, #4
 800397a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2201      	movs	r2, #1
 8003980:	705a      	strb	r2, [r3, #1]
 8003982:	e00d      	b.n	80039a0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003984:	78fa      	ldrb	r2, [r7, #3]
 8003986:	4613      	mov	r3, r2
 8003988:	00db      	lsls	r3, r3, #3
 800398a:	4413      	add	r3, r2
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	4413      	add	r3, r2
 8003996:	3304      	adds	r3, #4
 8003998:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2200      	movs	r2, #0
 800399e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2201      	movs	r2, #1
 80039a4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039a6:	78fb      	ldrb	r3, [r7, #3]
 80039a8:	f003 030f 	and.w	r3, r3, #15
 80039ac:	b2da      	uxtb	r2, r3
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d101      	bne.n	80039c0 <HAL_PCD_EP_SetStall+0x82>
 80039bc:	2302      	movs	r3, #2
 80039be:	e01d      	b.n	80039fc <HAL_PCD_EP_SetStall+0xbe>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68f9      	ldr	r1, [r7, #12]
 80039ce:	4618      	mov	r0, r3
 80039d0:	f002 feea 	bl	80067a8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80039d4:	78fb      	ldrb	r3, [r7, #3]
 80039d6:	f003 030f 	and.w	r3, r3, #15
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d109      	bne.n	80039f2 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6818      	ldr	r0, [r3, #0]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	7999      	ldrb	r1, [r3, #6]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80039ec:	461a      	mov	r2, r3
 80039ee:	f003 f8db 	bl	8006ba8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80039fa:	2300      	movs	r3, #0
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3710      	adds	r7, #16
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003a10:	78fb      	ldrb	r3, [r7, #3]
 8003a12:	f003 030f 	and.w	r3, r3, #15
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	7912      	ldrb	r2, [r2, #4]
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d901      	bls.n	8003a22 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e042      	b.n	8003aa8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	da0f      	bge.n	8003a4a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a2a:	78fb      	ldrb	r3, [r7, #3]
 8003a2c:	f003 020f 	and.w	r2, r3, #15
 8003a30:	4613      	mov	r3, r2
 8003a32:	00db      	lsls	r3, r3, #3
 8003a34:	4413      	add	r3, r2
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	3310      	adds	r3, #16
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	4413      	add	r3, r2
 8003a3e:	3304      	adds	r3, #4
 8003a40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2201      	movs	r2, #1
 8003a46:	705a      	strb	r2, [r3, #1]
 8003a48:	e00f      	b.n	8003a6a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a4a:	78fb      	ldrb	r3, [r7, #3]
 8003a4c:	f003 020f 	and.w	r2, r3, #15
 8003a50:	4613      	mov	r3, r2
 8003a52:	00db      	lsls	r3, r3, #3
 8003a54:	4413      	add	r3, r2
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	4413      	add	r3, r2
 8003a60:	3304      	adds	r3, #4
 8003a62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2200      	movs	r2, #0
 8003a68:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a70:	78fb      	ldrb	r3, [r7, #3]
 8003a72:	f003 030f 	and.w	r3, r3, #15
 8003a76:	b2da      	uxtb	r2, r3
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d101      	bne.n	8003a8a <HAL_PCD_EP_ClrStall+0x86>
 8003a86:	2302      	movs	r3, #2
 8003a88:	e00e      	b.n	8003aa8 <HAL_PCD_EP_ClrStall+0xa4>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68f9      	ldr	r1, [r7, #12]
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f002 fef3 	bl	8006884 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003aa6:	2300      	movs	r3, #0
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3710      	adds	r7, #16
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	460b      	mov	r3, r1
 8003aba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003abc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	da0c      	bge.n	8003ade <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ac4:	78fb      	ldrb	r3, [r7, #3]
 8003ac6:	f003 020f 	and.w	r2, r3, #15
 8003aca:	4613      	mov	r3, r2
 8003acc:	00db      	lsls	r3, r3, #3
 8003ace:	4413      	add	r3, r2
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	3310      	adds	r3, #16
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	3304      	adds	r3, #4
 8003ada:	60fb      	str	r3, [r7, #12]
 8003adc:	e00c      	b.n	8003af8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ade:	78fb      	ldrb	r3, [r7, #3]
 8003ae0:	f003 020f 	and.w	r2, r3, #15
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	00db      	lsls	r3, r3, #3
 8003ae8:	4413      	add	r3, r2
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	4413      	add	r3, r2
 8003af4:	3304      	adds	r3, #4
 8003af6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68f9      	ldr	r1, [r7, #12]
 8003afe:	4618      	mov	r0, r3
 8003b00:	f002 fd12 	bl	8006528 <USB_EPStopXfer>
 8003b04:	4603      	mov	r3, r0
 8003b06:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003b08:	7afb      	ldrb	r3, [r7, #11]
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3710      	adds	r7, #16
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b12:	b580      	push	{r7, lr}
 8003b14:	b08a      	sub	sp, #40	@ 0x28
 8003b16:	af02      	add	r7, sp, #8
 8003b18:	6078      	str	r0, [r7, #4]
 8003b1a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003b26:	683a      	ldr	r2, [r7, #0]
 8003b28:	4613      	mov	r3, r2
 8003b2a:	00db      	lsls	r3, r3, #3
 8003b2c:	4413      	add	r3, r2
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	3310      	adds	r3, #16
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	4413      	add	r3, r2
 8003b36:	3304      	adds	r3, #4
 8003b38:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	695a      	ldr	r2, [r3, #20]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d901      	bls.n	8003b4a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e06b      	b.n	8003c22 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	691a      	ldr	r2, [r3, #16]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	69fa      	ldr	r2, [r7, #28]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d902      	bls.n	8003b66 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	3303      	adds	r3, #3
 8003b6a:	089b      	lsrs	r3, r3, #2
 8003b6c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b6e:	e02a      	b.n	8003bc6 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	691a      	ldr	r2, [r3, #16]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	695b      	ldr	r3, [r3, #20]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	69fa      	ldr	r2, [r7, #28]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d902      	bls.n	8003b8c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	3303      	adds	r3, #3
 8003b90:	089b      	lsrs	r3, r3, #2
 8003b92:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	68d9      	ldr	r1, [r3, #12]
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	b2da      	uxtb	r2, r3
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003ba4:	9300      	str	r3, [sp, #0]
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	6978      	ldr	r0, [r7, #20]
 8003baa:	f002 fd67 	bl	800667c <USB_WritePacket>

    ep->xfer_buff  += len;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	68da      	ldr	r2, [r3, #12]
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	441a      	add	r2, r3
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	695a      	ldr	r2, [r3, #20]
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	441a      	add	r2, r3
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	015a      	lsls	r2, r3, #5
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	4413      	add	r3, r2
 8003bce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bd2:	699b      	ldr	r3, [r3, #24]
 8003bd4:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003bd6:	69ba      	ldr	r2, [r7, #24]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d809      	bhi.n	8003bf0 <PCD_WriteEmptyTxFifo+0xde>
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	695a      	ldr	r2, [r3, #20]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d203      	bcs.n	8003bf0 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	691b      	ldr	r3, [r3, #16]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d1bf      	bne.n	8003b70 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	691a      	ldr	r2, [r3, #16]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	695b      	ldr	r3, [r3, #20]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d811      	bhi.n	8003c20 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	f003 030f 	and.w	r3, r3, #15
 8003c02:	2201      	movs	r2, #1
 8003c04:	fa02 f303 	lsl.w	r3, r2, r3
 8003c08:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	43db      	mvns	r3, r3
 8003c16:	6939      	ldr	r1, [r7, #16]
 8003c18:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3720      	adds	r7, #32
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
	...

08003c2c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b088      	sub	sp, #32
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	333c      	adds	r3, #60	@ 0x3c
 8003c44:	3304      	adds	r3, #4
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	015a      	lsls	r2, r3, #5
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	4413      	add	r3, r2
 8003c52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	799b      	ldrb	r3, [r3, #6]
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d17b      	bne.n	8003d5a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	f003 0308 	and.w	r3, r3, #8
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d015      	beq.n	8003c98 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	4a61      	ldr	r2, [pc, #388]	@ (8003df4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	f240 80b9 	bls.w	8003de8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	f000 80b3 	beq.w	8003de8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	015a      	lsls	r2, r3, #5
 8003c86:	69bb      	ldr	r3, [r7, #24]
 8003c88:	4413      	add	r3, r2
 8003c8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c8e:	461a      	mov	r2, r3
 8003c90:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c94:	6093      	str	r3, [r2, #8]
 8003c96:	e0a7      	b.n	8003de8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	f003 0320 	and.w	r3, r3, #32
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d009      	beq.n	8003cb6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	015a      	lsls	r2, r3, #5
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	4413      	add	r3, r2
 8003caa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cae:	461a      	mov	r2, r3
 8003cb0:	2320      	movs	r3, #32
 8003cb2:	6093      	str	r3, [r2, #8]
 8003cb4:	e098      	b.n	8003de8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	f040 8093 	bne.w	8003de8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	4a4b      	ldr	r2, [pc, #300]	@ (8003df4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d90f      	bls.n	8003cea <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d00a      	beq.n	8003cea <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	015a      	lsls	r2, r3, #5
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	4413      	add	r3, r2
 8003cdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ce6:	6093      	str	r3, [r2, #8]
 8003ce8:	e07e      	b.n	8003de8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003cea:	683a      	ldr	r2, [r7, #0]
 8003cec:	4613      	mov	r3, r2
 8003cee:	00db      	lsls	r3, r3, #3
 8003cf0:	4413      	add	r3, r2
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	3304      	adds	r3, #4
 8003cfe:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6a1a      	ldr	r2, [r3, #32]
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	0159      	lsls	r1, r3, #5
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	440b      	add	r3, r1
 8003d0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d16:	1ad2      	subs	r2, r2, r3
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d114      	bne.n	8003d4c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d109      	bne.n	8003d3e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6818      	ldr	r0, [r3, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003d34:	461a      	mov	r2, r3
 8003d36:	2101      	movs	r1, #1
 8003d38:	f002 ff36 	bl	8006ba8 <USB_EP0_OutStart>
 8003d3c:	e006      	b.n	8003d4c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	68da      	ldr	r2, [r3, #12]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	695b      	ldr	r3, [r3, #20]
 8003d46:	441a      	add	r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	4619      	mov	r1, r3
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f012 ff10 	bl	8016b78 <HAL_PCD_DataOutStageCallback>
 8003d58:	e046      	b.n	8003de8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	4a26      	ldr	r2, [pc, #152]	@ (8003df8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d124      	bne.n	8003dac <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d00a      	beq.n	8003d82 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	015a      	lsls	r2, r3, #5
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	4413      	add	r3, r2
 8003d74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d78:	461a      	mov	r2, r3
 8003d7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d7e:	6093      	str	r3, [r2, #8]
 8003d80:	e032      	b.n	8003de8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	f003 0320 	and.w	r3, r3, #32
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d008      	beq.n	8003d9e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	015a      	lsls	r2, r3, #5
 8003d90:	69bb      	ldr	r3, [r7, #24]
 8003d92:	4413      	add	r3, r2
 8003d94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d98:	461a      	mov	r2, r3
 8003d9a:	2320      	movs	r3, #32
 8003d9c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	4619      	mov	r1, r3
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f012 fee7 	bl	8016b78 <HAL_PCD_DataOutStageCallback>
 8003daa:	e01d      	b.n	8003de8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d114      	bne.n	8003ddc <PCD_EP_OutXfrComplete_int+0x1b0>
 8003db2:	6879      	ldr	r1, [r7, #4]
 8003db4:	683a      	ldr	r2, [r7, #0]
 8003db6:	4613      	mov	r3, r2
 8003db8:	00db      	lsls	r3, r3, #3
 8003dba:	4413      	add	r3, r2
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	440b      	add	r3, r1
 8003dc0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d108      	bne.n	8003ddc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6818      	ldr	r0, [r3, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	2100      	movs	r1, #0
 8003dd8:	f002 fee6 	bl	8006ba8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	4619      	mov	r1, r3
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f012 fec8 	bl	8016b78 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003de8:	2300      	movs	r3, #0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3720      	adds	r7, #32
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	4f54300a 	.word	0x4f54300a
 8003df8:	4f54310a 	.word	0x4f54310a

08003dfc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b086      	sub	sp, #24
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	333c      	adds	r3, #60	@ 0x3c
 8003e14:	3304      	adds	r3, #4
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	015a      	lsls	r2, r3, #5
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	4413      	add	r3, r2
 8003e22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	4a15      	ldr	r2, [pc, #84]	@ (8003e84 <PCD_EP_OutSetupPacket_int+0x88>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d90e      	bls.n	8003e50 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d009      	beq.n	8003e50 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	015a      	lsls	r2, r3, #5
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	4413      	add	r3, r2
 8003e44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e48:	461a      	mov	r2, r3
 8003e4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e4e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f012 fe7f 	bl	8016b54 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	4a0a      	ldr	r2, [pc, #40]	@ (8003e84 <PCD_EP_OutSetupPacket_int+0x88>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d90c      	bls.n	8003e78 <PCD_EP_OutSetupPacket_int+0x7c>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	799b      	ldrb	r3, [r3, #6]
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d108      	bne.n	8003e78 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6818      	ldr	r0, [r3, #0]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003e70:	461a      	mov	r2, r3
 8003e72:	2101      	movs	r1, #1
 8003e74:	f002 fe98 	bl	8006ba8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003e78:	2300      	movs	r3, #0
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3718      	adds	r7, #24
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	4f54300a 	.word	0x4f54300a

08003e88 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b085      	sub	sp, #20
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	460b      	mov	r3, r1
 8003e92:	70fb      	strb	r3, [r7, #3]
 8003e94:	4613      	mov	r3, r2
 8003e96:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e9e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003ea0:	78fb      	ldrb	r3, [r7, #3]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d107      	bne.n	8003eb6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003ea6:	883b      	ldrh	r3, [r7, #0]
 8003ea8:	0419      	lsls	r1, r3, #16
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68ba      	ldr	r2, [r7, #8]
 8003eb0:	430a      	orrs	r2, r1
 8003eb2:	629a      	str	r2, [r3, #40]	@ 0x28
 8003eb4:	e028      	b.n	8003f08 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ebc:	0c1b      	lsrs	r3, r3, #16
 8003ebe:	68ba      	ldr	r2, [r7, #8]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	73fb      	strb	r3, [r7, #15]
 8003ec8:	e00d      	b.n	8003ee6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	7bfb      	ldrb	r3, [r7, #15]
 8003ed0:	3340      	adds	r3, #64	@ 0x40
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	4413      	add	r3, r2
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	0c1b      	lsrs	r3, r3, #16
 8003eda:	68ba      	ldr	r2, [r7, #8]
 8003edc:	4413      	add	r3, r2
 8003ede:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003ee0:	7bfb      	ldrb	r3, [r7, #15]
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	73fb      	strb	r3, [r7, #15]
 8003ee6:	7bfa      	ldrb	r2, [r7, #15]
 8003ee8:	78fb      	ldrb	r3, [r7, #3]
 8003eea:	3b01      	subs	r3, #1
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d3ec      	bcc.n	8003eca <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003ef0:	883b      	ldrh	r3, [r7, #0]
 8003ef2:	0418      	lsls	r0, r3, #16
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6819      	ldr	r1, [r3, #0]
 8003ef8:	78fb      	ldrb	r3, [r7, #3]
 8003efa:	3b01      	subs	r3, #1
 8003efc:	68ba      	ldr	r2, [r7, #8]
 8003efe:	4302      	orrs	r2, r0
 8003f00:	3340      	adds	r3, #64	@ 0x40
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	440b      	add	r3, r1
 8003f06:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3714      	adds	r7, #20
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr

08003f16 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003f16:	b480      	push	{r7}
 8003f18:	b083      	sub	sp, #12
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
 8003f1e:	460b      	mov	r3, r1
 8003f20:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	887a      	ldrh	r2, [r7, #2]
 8003f28:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003f2a:	2300      	movs	r3, #0
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	460b      	mov	r3, r1
 8003f42:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003f44:	bf00      	nop
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b086      	sub	sp, #24
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d101      	bne.n	8003f62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e267      	b.n	8004432 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d075      	beq.n	800405a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003f6e:	4b88      	ldr	r3, [pc, #544]	@ (8004190 <HAL_RCC_OscConfig+0x240>)
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f003 030c 	and.w	r3, r3, #12
 8003f76:	2b04      	cmp	r3, #4
 8003f78:	d00c      	beq.n	8003f94 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f7a:	4b85      	ldr	r3, [pc, #532]	@ (8004190 <HAL_RCC_OscConfig+0x240>)
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003f82:	2b08      	cmp	r3, #8
 8003f84:	d112      	bne.n	8003fac <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f86:	4b82      	ldr	r3, [pc, #520]	@ (8004190 <HAL_RCC_OscConfig+0x240>)
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f8e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f92:	d10b      	bne.n	8003fac <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f94:	4b7e      	ldr	r3, [pc, #504]	@ (8004190 <HAL_RCC_OscConfig+0x240>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d05b      	beq.n	8004058 <HAL_RCC_OscConfig+0x108>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d157      	bne.n	8004058 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e242      	b.n	8004432 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fb4:	d106      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x74>
 8003fb6:	4b76      	ldr	r3, [pc, #472]	@ (8004190 <HAL_RCC_OscConfig+0x240>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a75      	ldr	r2, [pc, #468]	@ (8004190 <HAL_RCC_OscConfig+0x240>)
 8003fbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fc0:	6013      	str	r3, [r2, #0]
 8003fc2:	e01d      	b.n	8004000 <HAL_RCC_OscConfig+0xb0>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003fcc:	d10c      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x98>
 8003fce:	4b70      	ldr	r3, [pc, #448]	@ (8004190 <HAL_RCC_OscConfig+0x240>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a6f      	ldr	r2, [pc, #444]	@ (8004190 <HAL_RCC_OscConfig+0x240>)
 8003fd4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003fd8:	6013      	str	r3, [r2, #0]
 8003fda:	4b6d      	ldr	r3, [pc, #436]	@ (8004190 <HAL_RCC_OscConfig+0x240>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a6c      	ldr	r2, [pc, #432]	@ (8004190 <HAL_RCC_OscConfig+0x240>)
 8003fe0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fe4:	6013      	str	r3, [r2, #0]
 8003fe6:	e00b      	b.n	8004000 <HAL_RCC_OscConfig+0xb0>
 8003fe8:	4b69      	ldr	r3, [pc, #420]	@ (8004190 <HAL_RCC_OscConfig+0x240>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a68      	ldr	r2, [pc, #416]	@ (8004190 <HAL_RCC_OscConfig+0x240>)
 8003fee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ff2:	6013      	str	r3, [r2, #0]
 8003ff4:	4b66      	ldr	r3, [pc, #408]	@ (8004190 <HAL_RCC_OscConfig+0x240>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a65      	ldr	r2, [pc, #404]	@ (8004190 <HAL_RCC_OscConfig+0x240>)
 8003ffa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ffe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d013      	beq.n	8004030 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004008:	f7fd fa70 	bl	80014ec <HAL_GetTick>
 800400c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800400e:	e008      	b.n	8004022 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004010:	f7fd fa6c 	bl	80014ec <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	2b64      	cmp	r3, #100	@ 0x64
 800401c:	d901      	bls.n	8004022 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e207      	b.n	8004432 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004022:	4b5b      	ldr	r3, [pc, #364]	@ (8004190 <HAL_RCC_OscConfig+0x240>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d0f0      	beq.n	8004010 <HAL_RCC_OscConfig+0xc0>
 800402e:	e014      	b.n	800405a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004030:	f7fd fa5c 	bl	80014ec <HAL_GetTick>
 8004034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004036:	e008      	b.n	800404a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004038:	f7fd fa58 	bl	80014ec <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	2b64      	cmp	r3, #100	@ 0x64
 8004044:	d901      	bls.n	800404a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e1f3      	b.n	8004432 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800404a:	4b51      	ldr	r3, [pc, #324]	@ (8004190 <HAL_RCC_OscConfig+0x240>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d1f0      	bne.n	8004038 <HAL_RCC_OscConfig+0xe8>
 8004056:	e000      	b.n	800405a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004058:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0302 	and.w	r3, r3, #2
 8004062:	2b00      	cmp	r3, #0
 8004064:	d063      	beq.n	800412e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004066:	4b4a      	ldr	r3, [pc, #296]	@ (8004190 <HAL_RCC_OscConfig+0x240>)
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f003 030c 	and.w	r3, r3, #12
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00b      	beq.n	800408a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004072:	4b47      	ldr	r3, [pc, #284]	@ (8004190 <HAL_RCC_OscConfig+0x240>)
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800407a:	2b08      	cmp	r3, #8
 800407c:	d11c      	bne.n	80040b8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800407e:	4b44      	ldr	r3, [pc, #272]	@ (8004190 <HAL_RCC_OscConfig+0x240>)
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d116      	bne.n	80040b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800408a:	4b41      	ldr	r3, [pc, #260]	@ (8004190 <HAL_RCC_OscConfig+0x240>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0302 	and.w	r3, r3, #2
 8004092:	2b00      	cmp	r3, #0
 8004094:	d005      	beq.n	80040a2 <HAL_RCC_OscConfig+0x152>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	2b01      	cmp	r3, #1
 800409c:	d001      	beq.n	80040a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e1c7      	b.n	8004432 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040a2:	4b3b      	ldr	r3, [pc, #236]	@ (8004190 <HAL_RCC_OscConfig+0x240>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	00db      	lsls	r3, r3, #3
 80040b0:	4937      	ldr	r1, [pc, #220]	@ (8004190 <HAL_RCC_OscConfig+0x240>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040b6:	e03a      	b.n	800412e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d020      	beq.n	8004102 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040c0:	4b34      	ldr	r3, [pc, #208]	@ (8004194 <HAL_RCC_OscConfig+0x244>)
 80040c2:	2201      	movs	r2, #1
 80040c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c6:	f7fd fa11 	bl	80014ec <HAL_GetTick>
 80040ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040cc:	e008      	b.n	80040e0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040ce:	f7fd fa0d 	bl	80014ec <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d901      	bls.n	80040e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e1a8      	b.n	8004432 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040e0:	4b2b      	ldr	r3, [pc, #172]	@ (8004190 <HAL_RCC_OscConfig+0x240>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0302 	and.w	r3, r3, #2
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d0f0      	beq.n	80040ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040ec:	4b28      	ldr	r3, [pc, #160]	@ (8004190 <HAL_RCC_OscConfig+0x240>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	691b      	ldr	r3, [r3, #16]
 80040f8:	00db      	lsls	r3, r3, #3
 80040fa:	4925      	ldr	r1, [pc, #148]	@ (8004190 <HAL_RCC_OscConfig+0x240>)
 80040fc:	4313      	orrs	r3, r2
 80040fe:	600b      	str	r3, [r1, #0]
 8004100:	e015      	b.n	800412e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004102:	4b24      	ldr	r3, [pc, #144]	@ (8004194 <HAL_RCC_OscConfig+0x244>)
 8004104:	2200      	movs	r2, #0
 8004106:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004108:	f7fd f9f0 	bl	80014ec <HAL_GetTick>
 800410c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800410e:	e008      	b.n	8004122 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004110:	f7fd f9ec 	bl	80014ec <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	2b02      	cmp	r3, #2
 800411c:	d901      	bls.n	8004122 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e187      	b.n	8004432 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004122:	4b1b      	ldr	r3, [pc, #108]	@ (8004190 <HAL_RCC_OscConfig+0x240>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0302 	and.w	r3, r3, #2
 800412a:	2b00      	cmp	r3, #0
 800412c:	d1f0      	bne.n	8004110 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0308 	and.w	r3, r3, #8
 8004136:	2b00      	cmp	r3, #0
 8004138:	d036      	beq.n	80041a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	695b      	ldr	r3, [r3, #20]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d016      	beq.n	8004170 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004142:	4b15      	ldr	r3, [pc, #84]	@ (8004198 <HAL_RCC_OscConfig+0x248>)
 8004144:	2201      	movs	r2, #1
 8004146:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004148:	f7fd f9d0 	bl	80014ec <HAL_GetTick>
 800414c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800414e:	e008      	b.n	8004162 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004150:	f7fd f9cc 	bl	80014ec <HAL_GetTick>
 8004154:	4602      	mov	r2, r0
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	2b02      	cmp	r3, #2
 800415c:	d901      	bls.n	8004162 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	e167      	b.n	8004432 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004162:	4b0b      	ldr	r3, [pc, #44]	@ (8004190 <HAL_RCC_OscConfig+0x240>)
 8004164:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004166:	f003 0302 	and.w	r3, r3, #2
 800416a:	2b00      	cmp	r3, #0
 800416c:	d0f0      	beq.n	8004150 <HAL_RCC_OscConfig+0x200>
 800416e:	e01b      	b.n	80041a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004170:	4b09      	ldr	r3, [pc, #36]	@ (8004198 <HAL_RCC_OscConfig+0x248>)
 8004172:	2200      	movs	r2, #0
 8004174:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004176:	f7fd f9b9 	bl	80014ec <HAL_GetTick>
 800417a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800417c:	e00e      	b.n	800419c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800417e:	f7fd f9b5 	bl	80014ec <HAL_GetTick>
 8004182:	4602      	mov	r2, r0
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	2b02      	cmp	r3, #2
 800418a:	d907      	bls.n	800419c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	e150      	b.n	8004432 <HAL_RCC_OscConfig+0x4e2>
 8004190:	40023800 	.word	0x40023800
 8004194:	42470000 	.word	0x42470000
 8004198:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800419c:	4b88      	ldr	r3, [pc, #544]	@ (80043c0 <HAL_RCC_OscConfig+0x470>)
 800419e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041a0:	f003 0302 	and.w	r3, r3, #2
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d1ea      	bne.n	800417e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0304 	and.w	r3, r3, #4
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	f000 8097 	beq.w	80042e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041b6:	2300      	movs	r3, #0
 80041b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041ba:	4b81      	ldr	r3, [pc, #516]	@ (80043c0 <HAL_RCC_OscConfig+0x470>)
 80041bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d10f      	bne.n	80041e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041c6:	2300      	movs	r3, #0
 80041c8:	60bb      	str	r3, [r7, #8]
 80041ca:	4b7d      	ldr	r3, [pc, #500]	@ (80043c0 <HAL_RCC_OscConfig+0x470>)
 80041cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ce:	4a7c      	ldr	r2, [pc, #496]	@ (80043c0 <HAL_RCC_OscConfig+0x470>)
 80041d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80041d6:	4b7a      	ldr	r3, [pc, #488]	@ (80043c0 <HAL_RCC_OscConfig+0x470>)
 80041d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041de:	60bb      	str	r3, [r7, #8]
 80041e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041e2:	2301      	movs	r3, #1
 80041e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041e6:	4b77      	ldr	r3, [pc, #476]	@ (80043c4 <HAL_RCC_OscConfig+0x474>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d118      	bne.n	8004224 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041f2:	4b74      	ldr	r3, [pc, #464]	@ (80043c4 <HAL_RCC_OscConfig+0x474>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a73      	ldr	r2, [pc, #460]	@ (80043c4 <HAL_RCC_OscConfig+0x474>)
 80041f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041fe:	f7fd f975 	bl	80014ec <HAL_GetTick>
 8004202:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004204:	e008      	b.n	8004218 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004206:	f7fd f971 	bl	80014ec <HAL_GetTick>
 800420a:	4602      	mov	r2, r0
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	2b02      	cmp	r3, #2
 8004212:	d901      	bls.n	8004218 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	e10c      	b.n	8004432 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004218:	4b6a      	ldr	r3, [pc, #424]	@ (80043c4 <HAL_RCC_OscConfig+0x474>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004220:	2b00      	cmp	r3, #0
 8004222:	d0f0      	beq.n	8004206 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	2b01      	cmp	r3, #1
 800422a:	d106      	bne.n	800423a <HAL_RCC_OscConfig+0x2ea>
 800422c:	4b64      	ldr	r3, [pc, #400]	@ (80043c0 <HAL_RCC_OscConfig+0x470>)
 800422e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004230:	4a63      	ldr	r2, [pc, #396]	@ (80043c0 <HAL_RCC_OscConfig+0x470>)
 8004232:	f043 0301 	orr.w	r3, r3, #1
 8004236:	6713      	str	r3, [r2, #112]	@ 0x70
 8004238:	e01c      	b.n	8004274 <HAL_RCC_OscConfig+0x324>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	2b05      	cmp	r3, #5
 8004240:	d10c      	bne.n	800425c <HAL_RCC_OscConfig+0x30c>
 8004242:	4b5f      	ldr	r3, [pc, #380]	@ (80043c0 <HAL_RCC_OscConfig+0x470>)
 8004244:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004246:	4a5e      	ldr	r2, [pc, #376]	@ (80043c0 <HAL_RCC_OscConfig+0x470>)
 8004248:	f043 0304 	orr.w	r3, r3, #4
 800424c:	6713      	str	r3, [r2, #112]	@ 0x70
 800424e:	4b5c      	ldr	r3, [pc, #368]	@ (80043c0 <HAL_RCC_OscConfig+0x470>)
 8004250:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004252:	4a5b      	ldr	r2, [pc, #364]	@ (80043c0 <HAL_RCC_OscConfig+0x470>)
 8004254:	f043 0301 	orr.w	r3, r3, #1
 8004258:	6713      	str	r3, [r2, #112]	@ 0x70
 800425a:	e00b      	b.n	8004274 <HAL_RCC_OscConfig+0x324>
 800425c:	4b58      	ldr	r3, [pc, #352]	@ (80043c0 <HAL_RCC_OscConfig+0x470>)
 800425e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004260:	4a57      	ldr	r2, [pc, #348]	@ (80043c0 <HAL_RCC_OscConfig+0x470>)
 8004262:	f023 0301 	bic.w	r3, r3, #1
 8004266:	6713      	str	r3, [r2, #112]	@ 0x70
 8004268:	4b55      	ldr	r3, [pc, #340]	@ (80043c0 <HAL_RCC_OscConfig+0x470>)
 800426a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800426c:	4a54      	ldr	r2, [pc, #336]	@ (80043c0 <HAL_RCC_OscConfig+0x470>)
 800426e:	f023 0304 	bic.w	r3, r3, #4
 8004272:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d015      	beq.n	80042a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800427c:	f7fd f936 	bl	80014ec <HAL_GetTick>
 8004280:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004282:	e00a      	b.n	800429a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004284:	f7fd f932 	bl	80014ec <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004292:	4293      	cmp	r3, r2
 8004294:	d901      	bls.n	800429a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e0cb      	b.n	8004432 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800429a:	4b49      	ldr	r3, [pc, #292]	@ (80043c0 <HAL_RCC_OscConfig+0x470>)
 800429c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800429e:	f003 0302 	and.w	r3, r3, #2
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d0ee      	beq.n	8004284 <HAL_RCC_OscConfig+0x334>
 80042a6:	e014      	b.n	80042d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042a8:	f7fd f920 	bl	80014ec <HAL_GetTick>
 80042ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042ae:	e00a      	b.n	80042c6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042b0:	f7fd f91c 	bl	80014ec <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042be:	4293      	cmp	r3, r2
 80042c0:	d901      	bls.n	80042c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e0b5      	b.n	8004432 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042c6:	4b3e      	ldr	r3, [pc, #248]	@ (80043c0 <HAL_RCC_OscConfig+0x470>)
 80042c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1ee      	bne.n	80042b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80042d2:	7dfb      	ldrb	r3, [r7, #23]
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d105      	bne.n	80042e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042d8:	4b39      	ldr	r3, [pc, #228]	@ (80043c0 <HAL_RCC_OscConfig+0x470>)
 80042da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042dc:	4a38      	ldr	r2, [pc, #224]	@ (80043c0 <HAL_RCC_OscConfig+0x470>)
 80042de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80042e2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	699b      	ldr	r3, [r3, #24]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	f000 80a1 	beq.w	8004430 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042ee:	4b34      	ldr	r3, [pc, #208]	@ (80043c0 <HAL_RCC_OscConfig+0x470>)
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f003 030c 	and.w	r3, r3, #12
 80042f6:	2b08      	cmp	r3, #8
 80042f8:	d05c      	beq.n	80043b4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	699b      	ldr	r3, [r3, #24]
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d141      	bne.n	8004386 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004302:	4b31      	ldr	r3, [pc, #196]	@ (80043c8 <HAL_RCC_OscConfig+0x478>)
 8004304:	2200      	movs	r2, #0
 8004306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004308:	f7fd f8f0 	bl	80014ec <HAL_GetTick>
 800430c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800430e:	e008      	b.n	8004322 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004310:	f7fd f8ec 	bl	80014ec <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	2b02      	cmp	r3, #2
 800431c:	d901      	bls.n	8004322 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e087      	b.n	8004432 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004322:	4b27      	ldr	r3, [pc, #156]	@ (80043c0 <HAL_RCC_OscConfig+0x470>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d1f0      	bne.n	8004310 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	69da      	ldr	r2, [r3, #28]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a1b      	ldr	r3, [r3, #32]
 8004336:	431a      	orrs	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800433c:	019b      	lsls	r3, r3, #6
 800433e:	431a      	orrs	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004344:	085b      	lsrs	r3, r3, #1
 8004346:	3b01      	subs	r3, #1
 8004348:	041b      	lsls	r3, r3, #16
 800434a:	431a      	orrs	r2, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004350:	061b      	lsls	r3, r3, #24
 8004352:	491b      	ldr	r1, [pc, #108]	@ (80043c0 <HAL_RCC_OscConfig+0x470>)
 8004354:	4313      	orrs	r3, r2
 8004356:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004358:	4b1b      	ldr	r3, [pc, #108]	@ (80043c8 <HAL_RCC_OscConfig+0x478>)
 800435a:	2201      	movs	r2, #1
 800435c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800435e:	f7fd f8c5 	bl	80014ec <HAL_GetTick>
 8004362:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004364:	e008      	b.n	8004378 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004366:	f7fd f8c1 	bl	80014ec <HAL_GetTick>
 800436a:	4602      	mov	r2, r0
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	2b02      	cmp	r3, #2
 8004372:	d901      	bls.n	8004378 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004374:	2303      	movs	r3, #3
 8004376:	e05c      	b.n	8004432 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004378:	4b11      	ldr	r3, [pc, #68]	@ (80043c0 <HAL_RCC_OscConfig+0x470>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004380:	2b00      	cmp	r3, #0
 8004382:	d0f0      	beq.n	8004366 <HAL_RCC_OscConfig+0x416>
 8004384:	e054      	b.n	8004430 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004386:	4b10      	ldr	r3, [pc, #64]	@ (80043c8 <HAL_RCC_OscConfig+0x478>)
 8004388:	2200      	movs	r2, #0
 800438a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800438c:	f7fd f8ae 	bl	80014ec <HAL_GetTick>
 8004390:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004392:	e008      	b.n	80043a6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004394:	f7fd f8aa 	bl	80014ec <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d901      	bls.n	80043a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e045      	b.n	8004432 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043a6:	4b06      	ldr	r3, [pc, #24]	@ (80043c0 <HAL_RCC_OscConfig+0x470>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d1f0      	bne.n	8004394 <HAL_RCC_OscConfig+0x444>
 80043b2:	e03d      	b.n	8004430 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	699b      	ldr	r3, [r3, #24]
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d107      	bne.n	80043cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e038      	b.n	8004432 <HAL_RCC_OscConfig+0x4e2>
 80043c0:	40023800 	.word	0x40023800
 80043c4:	40007000 	.word	0x40007000
 80043c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80043cc:	4b1b      	ldr	r3, [pc, #108]	@ (800443c <HAL_RCC_OscConfig+0x4ec>)
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	699b      	ldr	r3, [r3, #24]
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d028      	beq.n	800442c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d121      	bne.n	800442c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d11a      	bne.n	800442c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043f6:	68fa      	ldr	r2, [r7, #12]
 80043f8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80043fc:	4013      	ands	r3, r2
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004402:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004404:	4293      	cmp	r3, r2
 8004406:	d111      	bne.n	800442c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004412:	085b      	lsrs	r3, r3, #1
 8004414:	3b01      	subs	r3, #1
 8004416:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004418:	429a      	cmp	r2, r3
 800441a:	d107      	bne.n	800442c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004426:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004428:	429a      	cmp	r2, r3
 800442a:	d001      	beq.n	8004430 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e000      	b.n	8004432 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004430:	2300      	movs	r3, #0
}
 8004432:	4618      	mov	r0, r3
 8004434:	3718      	adds	r7, #24
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	40023800 	.word	0x40023800

08004440 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d101      	bne.n	8004454 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e0cc      	b.n	80045ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004454:	4b68      	ldr	r3, [pc, #416]	@ (80045f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0307 	and.w	r3, r3, #7
 800445c:	683a      	ldr	r2, [r7, #0]
 800445e:	429a      	cmp	r2, r3
 8004460:	d90c      	bls.n	800447c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004462:	4b65      	ldr	r3, [pc, #404]	@ (80045f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004464:	683a      	ldr	r2, [r7, #0]
 8004466:	b2d2      	uxtb	r2, r2
 8004468:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800446a:	4b63      	ldr	r3, [pc, #396]	@ (80045f8 <HAL_RCC_ClockConfig+0x1b8>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 0307 	and.w	r3, r3, #7
 8004472:	683a      	ldr	r2, [r7, #0]
 8004474:	429a      	cmp	r2, r3
 8004476:	d001      	beq.n	800447c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e0b8      	b.n	80045ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0302 	and.w	r3, r3, #2
 8004484:	2b00      	cmp	r3, #0
 8004486:	d020      	beq.n	80044ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0304 	and.w	r3, r3, #4
 8004490:	2b00      	cmp	r3, #0
 8004492:	d005      	beq.n	80044a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004494:	4b59      	ldr	r3, [pc, #356]	@ (80045fc <HAL_RCC_ClockConfig+0x1bc>)
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	4a58      	ldr	r2, [pc, #352]	@ (80045fc <HAL_RCC_ClockConfig+0x1bc>)
 800449a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800449e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 0308 	and.w	r3, r3, #8
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d005      	beq.n	80044b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044ac:	4b53      	ldr	r3, [pc, #332]	@ (80045fc <HAL_RCC_ClockConfig+0x1bc>)
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	4a52      	ldr	r2, [pc, #328]	@ (80045fc <HAL_RCC_ClockConfig+0x1bc>)
 80044b2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80044b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044b8:	4b50      	ldr	r3, [pc, #320]	@ (80045fc <HAL_RCC_ClockConfig+0x1bc>)
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	494d      	ldr	r1, [pc, #308]	@ (80045fc <HAL_RCC_ClockConfig+0x1bc>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0301 	and.w	r3, r3, #1
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d044      	beq.n	8004560 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d107      	bne.n	80044ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044de:	4b47      	ldr	r3, [pc, #284]	@ (80045fc <HAL_RCC_ClockConfig+0x1bc>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d119      	bne.n	800451e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e07f      	b.n	80045ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d003      	beq.n	80044fe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044fa:	2b03      	cmp	r3, #3
 80044fc:	d107      	bne.n	800450e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044fe:	4b3f      	ldr	r3, [pc, #252]	@ (80045fc <HAL_RCC_ClockConfig+0x1bc>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d109      	bne.n	800451e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e06f      	b.n	80045ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800450e:	4b3b      	ldr	r3, [pc, #236]	@ (80045fc <HAL_RCC_ClockConfig+0x1bc>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0302 	and.w	r3, r3, #2
 8004516:	2b00      	cmp	r3, #0
 8004518:	d101      	bne.n	800451e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e067      	b.n	80045ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800451e:	4b37      	ldr	r3, [pc, #220]	@ (80045fc <HAL_RCC_ClockConfig+0x1bc>)
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	f023 0203 	bic.w	r2, r3, #3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	4934      	ldr	r1, [pc, #208]	@ (80045fc <HAL_RCC_ClockConfig+0x1bc>)
 800452c:	4313      	orrs	r3, r2
 800452e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004530:	f7fc ffdc 	bl	80014ec <HAL_GetTick>
 8004534:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004536:	e00a      	b.n	800454e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004538:	f7fc ffd8 	bl	80014ec <HAL_GetTick>
 800453c:	4602      	mov	r2, r0
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004546:	4293      	cmp	r3, r2
 8004548:	d901      	bls.n	800454e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e04f      	b.n	80045ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800454e:	4b2b      	ldr	r3, [pc, #172]	@ (80045fc <HAL_RCC_ClockConfig+0x1bc>)
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f003 020c 	and.w	r2, r3, #12
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	429a      	cmp	r2, r3
 800455e:	d1eb      	bne.n	8004538 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004560:	4b25      	ldr	r3, [pc, #148]	@ (80045f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0307 	and.w	r3, r3, #7
 8004568:	683a      	ldr	r2, [r7, #0]
 800456a:	429a      	cmp	r2, r3
 800456c:	d20c      	bcs.n	8004588 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800456e:	4b22      	ldr	r3, [pc, #136]	@ (80045f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004570:	683a      	ldr	r2, [r7, #0]
 8004572:	b2d2      	uxtb	r2, r2
 8004574:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004576:	4b20      	ldr	r3, [pc, #128]	@ (80045f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0307 	and.w	r3, r3, #7
 800457e:	683a      	ldr	r2, [r7, #0]
 8004580:	429a      	cmp	r2, r3
 8004582:	d001      	beq.n	8004588 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e032      	b.n	80045ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0304 	and.w	r3, r3, #4
 8004590:	2b00      	cmp	r3, #0
 8004592:	d008      	beq.n	80045a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004594:	4b19      	ldr	r3, [pc, #100]	@ (80045fc <HAL_RCC_ClockConfig+0x1bc>)
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	4916      	ldr	r1, [pc, #88]	@ (80045fc <HAL_RCC_ClockConfig+0x1bc>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0308 	and.w	r3, r3, #8
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d009      	beq.n	80045c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045b2:	4b12      	ldr	r3, [pc, #72]	@ (80045fc <HAL_RCC_ClockConfig+0x1bc>)
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	691b      	ldr	r3, [r3, #16]
 80045be:	00db      	lsls	r3, r3, #3
 80045c0:	490e      	ldr	r1, [pc, #56]	@ (80045fc <HAL_RCC_ClockConfig+0x1bc>)
 80045c2:	4313      	orrs	r3, r2
 80045c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80045c6:	f000 f821 	bl	800460c <HAL_RCC_GetSysClockFreq>
 80045ca:	4602      	mov	r2, r0
 80045cc:	4b0b      	ldr	r3, [pc, #44]	@ (80045fc <HAL_RCC_ClockConfig+0x1bc>)
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	091b      	lsrs	r3, r3, #4
 80045d2:	f003 030f 	and.w	r3, r3, #15
 80045d6:	490a      	ldr	r1, [pc, #40]	@ (8004600 <HAL_RCC_ClockConfig+0x1c0>)
 80045d8:	5ccb      	ldrb	r3, [r1, r3]
 80045da:	fa22 f303 	lsr.w	r3, r2, r3
 80045de:	4a09      	ldr	r2, [pc, #36]	@ (8004604 <HAL_RCC_ClockConfig+0x1c4>)
 80045e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80045e2:	4b09      	ldr	r3, [pc, #36]	@ (8004608 <HAL_RCC_ClockConfig+0x1c8>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4618      	mov	r0, r3
 80045e8:	f7fc fbda 	bl	8000da0 <HAL_InitTick>

  return HAL_OK;
 80045ec:	2300      	movs	r3, #0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3710      	adds	r7, #16
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	40023c00 	.word	0x40023c00
 80045fc:	40023800 	.word	0x40023800
 8004600:	0801b2a0 	.word	0x0801b2a0
 8004604:	20000000 	.word	0x20000000
 8004608:	20000004 	.word	0x20000004

0800460c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800460c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004610:	b090      	sub	sp, #64	@ 0x40
 8004612:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004614:	2300      	movs	r3, #0
 8004616:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004618:	2300      	movs	r3, #0
 800461a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800461c:	2300      	movs	r3, #0
 800461e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004620:	2300      	movs	r3, #0
 8004622:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004624:	4b59      	ldr	r3, [pc, #356]	@ (800478c <HAL_RCC_GetSysClockFreq+0x180>)
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	f003 030c 	and.w	r3, r3, #12
 800462c:	2b08      	cmp	r3, #8
 800462e:	d00d      	beq.n	800464c <HAL_RCC_GetSysClockFreq+0x40>
 8004630:	2b08      	cmp	r3, #8
 8004632:	f200 80a1 	bhi.w	8004778 <HAL_RCC_GetSysClockFreq+0x16c>
 8004636:	2b00      	cmp	r3, #0
 8004638:	d002      	beq.n	8004640 <HAL_RCC_GetSysClockFreq+0x34>
 800463a:	2b04      	cmp	r3, #4
 800463c:	d003      	beq.n	8004646 <HAL_RCC_GetSysClockFreq+0x3a>
 800463e:	e09b      	b.n	8004778 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004640:	4b53      	ldr	r3, [pc, #332]	@ (8004790 <HAL_RCC_GetSysClockFreq+0x184>)
 8004642:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004644:	e09b      	b.n	800477e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004646:	4b53      	ldr	r3, [pc, #332]	@ (8004794 <HAL_RCC_GetSysClockFreq+0x188>)
 8004648:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800464a:	e098      	b.n	800477e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800464c:	4b4f      	ldr	r3, [pc, #316]	@ (800478c <HAL_RCC_GetSysClockFreq+0x180>)
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004654:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004656:	4b4d      	ldr	r3, [pc, #308]	@ (800478c <HAL_RCC_GetSysClockFreq+0x180>)
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800465e:	2b00      	cmp	r3, #0
 8004660:	d028      	beq.n	80046b4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004662:	4b4a      	ldr	r3, [pc, #296]	@ (800478c <HAL_RCC_GetSysClockFreq+0x180>)
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	099b      	lsrs	r3, r3, #6
 8004668:	2200      	movs	r2, #0
 800466a:	623b      	str	r3, [r7, #32]
 800466c:	627a      	str	r2, [r7, #36]	@ 0x24
 800466e:	6a3b      	ldr	r3, [r7, #32]
 8004670:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004674:	2100      	movs	r1, #0
 8004676:	4b47      	ldr	r3, [pc, #284]	@ (8004794 <HAL_RCC_GetSysClockFreq+0x188>)
 8004678:	fb03 f201 	mul.w	r2, r3, r1
 800467c:	2300      	movs	r3, #0
 800467e:	fb00 f303 	mul.w	r3, r0, r3
 8004682:	4413      	add	r3, r2
 8004684:	4a43      	ldr	r2, [pc, #268]	@ (8004794 <HAL_RCC_GetSysClockFreq+0x188>)
 8004686:	fba0 1202 	umull	r1, r2, r0, r2
 800468a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800468c:	460a      	mov	r2, r1
 800468e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004690:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004692:	4413      	add	r3, r2
 8004694:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004696:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004698:	2200      	movs	r2, #0
 800469a:	61bb      	str	r3, [r7, #24]
 800469c:	61fa      	str	r2, [r7, #28]
 800469e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046a2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80046a6:	f7fb fdeb 	bl	8000280 <__aeabi_uldivmod>
 80046aa:	4602      	mov	r2, r0
 80046ac:	460b      	mov	r3, r1
 80046ae:	4613      	mov	r3, r2
 80046b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80046b2:	e053      	b.n	800475c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046b4:	4b35      	ldr	r3, [pc, #212]	@ (800478c <HAL_RCC_GetSysClockFreq+0x180>)
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	099b      	lsrs	r3, r3, #6
 80046ba:	2200      	movs	r2, #0
 80046bc:	613b      	str	r3, [r7, #16]
 80046be:	617a      	str	r2, [r7, #20]
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80046c6:	f04f 0b00 	mov.w	fp, #0
 80046ca:	4652      	mov	r2, sl
 80046cc:	465b      	mov	r3, fp
 80046ce:	f04f 0000 	mov.w	r0, #0
 80046d2:	f04f 0100 	mov.w	r1, #0
 80046d6:	0159      	lsls	r1, r3, #5
 80046d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046dc:	0150      	lsls	r0, r2, #5
 80046de:	4602      	mov	r2, r0
 80046e0:	460b      	mov	r3, r1
 80046e2:	ebb2 080a 	subs.w	r8, r2, sl
 80046e6:	eb63 090b 	sbc.w	r9, r3, fp
 80046ea:	f04f 0200 	mov.w	r2, #0
 80046ee:	f04f 0300 	mov.w	r3, #0
 80046f2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80046f6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80046fa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80046fe:	ebb2 0408 	subs.w	r4, r2, r8
 8004702:	eb63 0509 	sbc.w	r5, r3, r9
 8004706:	f04f 0200 	mov.w	r2, #0
 800470a:	f04f 0300 	mov.w	r3, #0
 800470e:	00eb      	lsls	r3, r5, #3
 8004710:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004714:	00e2      	lsls	r2, r4, #3
 8004716:	4614      	mov	r4, r2
 8004718:	461d      	mov	r5, r3
 800471a:	eb14 030a 	adds.w	r3, r4, sl
 800471e:	603b      	str	r3, [r7, #0]
 8004720:	eb45 030b 	adc.w	r3, r5, fp
 8004724:	607b      	str	r3, [r7, #4]
 8004726:	f04f 0200 	mov.w	r2, #0
 800472a:	f04f 0300 	mov.w	r3, #0
 800472e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004732:	4629      	mov	r1, r5
 8004734:	028b      	lsls	r3, r1, #10
 8004736:	4621      	mov	r1, r4
 8004738:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800473c:	4621      	mov	r1, r4
 800473e:	028a      	lsls	r2, r1, #10
 8004740:	4610      	mov	r0, r2
 8004742:	4619      	mov	r1, r3
 8004744:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004746:	2200      	movs	r2, #0
 8004748:	60bb      	str	r3, [r7, #8]
 800474a:	60fa      	str	r2, [r7, #12]
 800474c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004750:	f7fb fd96 	bl	8000280 <__aeabi_uldivmod>
 8004754:	4602      	mov	r2, r0
 8004756:	460b      	mov	r3, r1
 8004758:	4613      	mov	r3, r2
 800475a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800475c:	4b0b      	ldr	r3, [pc, #44]	@ (800478c <HAL_RCC_GetSysClockFreq+0x180>)
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	0c1b      	lsrs	r3, r3, #16
 8004762:	f003 0303 	and.w	r3, r3, #3
 8004766:	3301      	adds	r3, #1
 8004768:	005b      	lsls	r3, r3, #1
 800476a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800476c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800476e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004770:	fbb2 f3f3 	udiv	r3, r2, r3
 8004774:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004776:	e002      	b.n	800477e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004778:	4b05      	ldr	r3, [pc, #20]	@ (8004790 <HAL_RCC_GetSysClockFreq+0x184>)
 800477a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800477c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800477e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004780:	4618      	mov	r0, r3
 8004782:	3740      	adds	r7, #64	@ 0x40
 8004784:	46bd      	mov	sp, r7
 8004786:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800478a:	bf00      	nop
 800478c:	40023800 	.word	0x40023800
 8004790:	00f42400 	.word	0x00f42400
 8004794:	017d7840 	.word	0x017d7840

08004798 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004798:	b480      	push	{r7}
 800479a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800479c:	4b03      	ldr	r3, [pc, #12]	@ (80047ac <HAL_RCC_GetHCLKFreq+0x14>)
 800479e:	681b      	ldr	r3, [r3, #0]
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	20000000 	.word	0x20000000

080047b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80047b4:	f7ff fff0 	bl	8004798 <HAL_RCC_GetHCLKFreq>
 80047b8:	4602      	mov	r2, r0
 80047ba:	4b05      	ldr	r3, [pc, #20]	@ (80047d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	0a9b      	lsrs	r3, r3, #10
 80047c0:	f003 0307 	and.w	r3, r3, #7
 80047c4:	4903      	ldr	r1, [pc, #12]	@ (80047d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047c6:	5ccb      	ldrb	r3, [r1, r3]
 80047c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	40023800 	.word	0x40023800
 80047d4:	0801b2b0 	.word	0x0801b2b0

080047d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80047dc:	f7ff ffdc 	bl	8004798 <HAL_RCC_GetHCLKFreq>
 80047e0:	4602      	mov	r2, r0
 80047e2:	4b05      	ldr	r3, [pc, #20]	@ (80047f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	0b5b      	lsrs	r3, r3, #13
 80047e8:	f003 0307 	and.w	r3, r3, #7
 80047ec:	4903      	ldr	r1, [pc, #12]	@ (80047fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80047ee:	5ccb      	ldrb	r3, [r1, r3]
 80047f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	40023800 	.word	0x40023800
 80047fc:	0801b2b0 	.word	0x0801b2b0

08004800 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	220f      	movs	r2, #15
 800480e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004810:	4b12      	ldr	r3, [pc, #72]	@ (800485c <HAL_RCC_GetClockConfig+0x5c>)
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	f003 0203 	and.w	r2, r3, #3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800481c:	4b0f      	ldr	r3, [pc, #60]	@ (800485c <HAL_RCC_GetClockConfig+0x5c>)
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004828:	4b0c      	ldr	r3, [pc, #48]	@ (800485c <HAL_RCC_GetClockConfig+0x5c>)
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004834:	4b09      	ldr	r3, [pc, #36]	@ (800485c <HAL_RCC_GetClockConfig+0x5c>)
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	08db      	lsrs	r3, r3, #3
 800483a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004842:	4b07      	ldr	r3, [pc, #28]	@ (8004860 <HAL_RCC_GetClockConfig+0x60>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 0207 	and.w	r2, r3, #7
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	601a      	str	r2, [r3, #0]
}
 800484e:	bf00      	nop
 8004850:	370c      	adds	r7, #12
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr
 800485a:	bf00      	nop
 800485c:	40023800 	.word	0x40023800
 8004860:	40023c00 	.word	0x40023c00

08004864 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	60b9      	str	r1, [r7, #8]
 800486e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d101      	bne.n	800487a <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e038      	b.n	80048ec <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8004880:	b2db      	uxtb	r3, r3
 8004882:	2b00      	cmp	r3, #0
 8004884:	d106      	bne.n	8004894 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800488e:	68f8      	ldr	r0, [r7, #12]
 8004890:	f7fc fa7c 	bl	8000d8c <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	3308      	adds	r3, #8
 800489c:	4619      	mov	r1, r3
 800489e:	4610      	mov	r0, r2
 80048a0:	f000 fdfa 	bl	8005498 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6818      	ldr	r0, [r3, #0]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	461a      	mov	r2, r3
 80048ae:	68b9      	ldr	r1, [r7, #8]
 80048b0:	f000 fe5c 	bl	800556c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6858      	ldr	r0, [r3, #4]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	689a      	ldr	r2, [r3, #8]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048c0:	6879      	ldr	r1, [r7, #4]
 80048c2:	f000 fe81 	bl	80055c8 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	68fa      	ldr	r2, [r7, #12]
 80048cc:	6892      	ldr	r2, [r2, #8]
 80048ce:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	68fa      	ldr	r2, [r7, #12]
 80048d8:	6892      	ldr	r2, [r2, #8]
 80048da:	f041 0101 	orr.w	r1, r1, #1
 80048de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2201      	movs	r2, #1
 80048e6:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 80048ea:	2300      	movs	r3, #0
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3710      	adds	r7, #16
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b082      	sub	sp, #8
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d101      	bne.n	8004906 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e041      	b.n	800498a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800490c:	b2db      	uxtb	r3, r3
 800490e:	2b00      	cmp	r3, #0
 8004910:	d106      	bne.n	8004920 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f7fc f920 	bl	8000b60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2202      	movs	r2, #2
 8004924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	3304      	adds	r3, #4
 8004930:	4619      	mov	r1, r3
 8004932:	4610      	mov	r0, r2
 8004934:	f000 f9b6 	bl	8004ca4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004988:	2300      	movs	r3, #0
}
 800498a:	4618      	mov	r0, r3
 800498c:	3708      	adds	r7, #8
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
	...

08004994 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004994:	b480      	push	{r7}
 8004996:	b085      	sub	sp, #20
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d001      	beq.n	80049ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e04e      	b.n	8004a4a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2202      	movs	r2, #2
 80049b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	68da      	ldr	r2, [r3, #12]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f042 0201 	orr.w	r2, r2, #1
 80049c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a23      	ldr	r2, [pc, #140]	@ (8004a58 <HAL_TIM_Base_Start_IT+0xc4>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d022      	beq.n	8004a14 <HAL_TIM_Base_Start_IT+0x80>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049d6:	d01d      	beq.n	8004a14 <HAL_TIM_Base_Start_IT+0x80>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a1f      	ldr	r2, [pc, #124]	@ (8004a5c <HAL_TIM_Base_Start_IT+0xc8>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d018      	beq.n	8004a14 <HAL_TIM_Base_Start_IT+0x80>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a1e      	ldr	r2, [pc, #120]	@ (8004a60 <HAL_TIM_Base_Start_IT+0xcc>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d013      	beq.n	8004a14 <HAL_TIM_Base_Start_IT+0x80>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a1c      	ldr	r2, [pc, #112]	@ (8004a64 <HAL_TIM_Base_Start_IT+0xd0>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d00e      	beq.n	8004a14 <HAL_TIM_Base_Start_IT+0x80>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a1b      	ldr	r2, [pc, #108]	@ (8004a68 <HAL_TIM_Base_Start_IT+0xd4>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d009      	beq.n	8004a14 <HAL_TIM_Base_Start_IT+0x80>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a19      	ldr	r2, [pc, #100]	@ (8004a6c <HAL_TIM_Base_Start_IT+0xd8>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d004      	beq.n	8004a14 <HAL_TIM_Base_Start_IT+0x80>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a18      	ldr	r2, [pc, #96]	@ (8004a70 <HAL_TIM_Base_Start_IT+0xdc>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d111      	bne.n	8004a38 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	f003 0307 	and.w	r3, r3, #7
 8004a1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2b06      	cmp	r3, #6
 8004a24:	d010      	beq.n	8004a48 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f042 0201 	orr.w	r2, r2, #1
 8004a34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a36:	e007      	b.n	8004a48 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f042 0201 	orr.w	r2, r2, #1
 8004a46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3714      	adds	r7, #20
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop
 8004a58:	40010000 	.word	0x40010000
 8004a5c:	40000400 	.word	0x40000400
 8004a60:	40000800 	.word	0x40000800
 8004a64:	40000c00 	.word	0x40000c00
 8004a68:	40010400 	.word	0x40010400
 8004a6c:	40014000 	.word	0x40014000
 8004a70:	40001800 	.word	0x40001800

08004a74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b084      	sub	sp, #16
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	f003 0302 	and.w	r3, r3, #2
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d020      	beq.n	8004ad8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f003 0302 	and.w	r3, r3, #2
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d01b      	beq.n	8004ad8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f06f 0202 	mvn.w	r2, #2
 8004aa8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2201      	movs	r2, #1
 8004aae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	699b      	ldr	r3, [r3, #24]
 8004ab6:	f003 0303 	and.w	r3, r3, #3
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d003      	beq.n	8004ac6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f000 f8d2 	bl	8004c68 <HAL_TIM_IC_CaptureCallback>
 8004ac4:	e005      	b.n	8004ad2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 f8c4 	bl	8004c54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f000 f8d5 	bl	8004c7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	f003 0304 	and.w	r3, r3, #4
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d020      	beq.n	8004b24 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	f003 0304 	and.w	r3, r3, #4
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d01b      	beq.n	8004b24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f06f 0204 	mvn.w	r2, #4
 8004af4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2202      	movs	r2, #2
 8004afa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	699b      	ldr	r3, [r3, #24]
 8004b02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d003      	beq.n	8004b12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f000 f8ac 	bl	8004c68 <HAL_TIM_IC_CaptureCallback>
 8004b10:	e005      	b.n	8004b1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f000 f89e 	bl	8004c54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f000 f8af 	bl	8004c7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	f003 0308 	and.w	r3, r3, #8
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d020      	beq.n	8004b70 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f003 0308 	and.w	r3, r3, #8
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d01b      	beq.n	8004b70 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f06f 0208 	mvn.w	r2, #8
 8004b40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2204      	movs	r2, #4
 8004b46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	69db      	ldr	r3, [r3, #28]
 8004b4e:	f003 0303 	and.w	r3, r3, #3
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d003      	beq.n	8004b5e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f000 f886 	bl	8004c68 <HAL_TIM_IC_CaptureCallback>
 8004b5c:	e005      	b.n	8004b6a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 f878 	bl	8004c54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f000 f889 	bl	8004c7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	f003 0310 	and.w	r3, r3, #16
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d020      	beq.n	8004bbc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f003 0310 	and.w	r3, r3, #16
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d01b      	beq.n	8004bbc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f06f 0210 	mvn.w	r2, #16
 8004b8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2208      	movs	r2, #8
 8004b92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	69db      	ldr	r3, [r3, #28]
 8004b9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d003      	beq.n	8004baa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 f860 	bl	8004c68 <HAL_TIM_IC_CaptureCallback>
 8004ba8:	e005      	b.n	8004bb6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f000 f852 	bl	8004c54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f000 f863 	bl	8004c7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	f003 0301 	and.w	r3, r3, #1
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d00c      	beq.n	8004be0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f003 0301 	and.w	r3, r3, #1
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d007      	beq.n	8004be0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f06f 0201 	mvn.w	r2, #1
 8004bd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f7fb ff7c 	bl	8000ad8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d00c      	beq.n	8004c04 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d007      	beq.n	8004c04 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004bfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 f97c 	bl	8004efc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d00c      	beq.n	8004c28 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d007      	beq.n	8004c28 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004c20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 f834 	bl	8004c90 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	f003 0320 	and.w	r3, r3, #32
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00c      	beq.n	8004c4c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	f003 0320 	and.w	r3, r3, #32
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d007      	beq.n	8004c4c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f06f 0220 	mvn.w	r2, #32
 8004c44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 f94e 	bl	8004ee8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c4c:	bf00      	nop
 8004c4e:	3710      	adds	r7, #16
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c5c:	bf00      	nop
 8004c5e:	370c      	adds	r7, #12
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c70:	bf00      	nop
 8004c72:	370c      	adds	r7, #12
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c84:	bf00      	nop
 8004c86:	370c      	adds	r7, #12
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c98:	bf00      	nop
 8004c9a:	370c      	adds	r7, #12
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr

08004ca4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b085      	sub	sp, #20
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	4a43      	ldr	r2, [pc, #268]	@ (8004dc4 <TIM_Base_SetConfig+0x120>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d013      	beq.n	8004ce4 <TIM_Base_SetConfig+0x40>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cc2:	d00f      	beq.n	8004ce4 <TIM_Base_SetConfig+0x40>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4a40      	ldr	r2, [pc, #256]	@ (8004dc8 <TIM_Base_SetConfig+0x124>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d00b      	beq.n	8004ce4 <TIM_Base_SetConfig+0x40>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4a3f      	ldr	r2, [pc, #252]	@ (8004dcc <TIM_Base_SetConfig+0x128>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d007      	beq.n	8004ce4 <TIM_Base_SetConfig+0x40>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4a3e      	ldr	r2, [pc, #248]	@ (8004dd0 <TIM_Base_SetConfig+0x12c>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d003      	beq.n	8004ce4 <TIM_Base_SetConfig+0x40>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a3d      	ldr	r2, [pc, #244]	@ (8004dd4 <TIM_Base_SetConfig+0x130>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d108      	bne.n	8004cf6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	68fa      	ldr	r2, [r7, #12]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a32      	ldr	r2, [pc, #200]	@ (8004dc4 <TIM_Base_SetConfig+0x120>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d02b      	beq.n	8004d56 <TIM_Base_SetConfig+0xb2>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d04:	d027      	beq.n	8004d56 <TIM_Base_SetConfig+0xb2>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4a2f      	ldr	r2, [pc, #188]	@ (8004dc8 <TIM_Base_SetConfig+0x124>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d023      	beq.n	8004d56 <TIM_Base_SetConfig+0xb2>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a2e      	ldr	r2, [pc, #184]	@ (8004dcc <TIM_Base_SetConfig+0x128>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d01f      	beq.n	8004d56 <TIM_Base_SetConfig+0xb2>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a2d      	ldr	r2, [pc, #180]	@ (8004dd0 <TIM_Base_SetConfig+0x12c>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d01b      	beq.n	8004d56 <TIM_Base_SetConfig+0xb2>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a2c      	ldr	r2, [pc, #176]	@ (8004dd4 <TIM_Base_SetConfig+0x130>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d017      	beq.n	8004d56 <TIM_Base_SetConfig+0xb2>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a2b      	ldr	r2, [pc, #172]	@ (8004dd8 <TIM_Base_SetConfig+0x134>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d013      	beq.n	8004d56 <TIM_Base_SetConfig+0xb2>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a2a      	ldr	r2, [pc, #168]	@ (8004ddc <TIM_Base_SetConfig+0x138>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d00f      	beq.n	8004d56 <TIM_Base_SetConfig+0xb2>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4a29      	ldr	r2, [pc, #164]	@ (8004de0 <TIM_Base_SetConfig+0x13c>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d00b      	beq.n	8004d56 <TIM_Base_SetConfig+0xb2>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a28      	ldr	r2, [pc, #160]	@ (8004de4 <TIM_Base_SetConfig+0x140>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d007      	beq.n	8004d56 <TIM_Base_SetConfig+0xb2>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a27      	ldr	r2, [pc, #156]	@ (8004de8 <TIM_Base_SetConfig+0x144>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d003      	beq.n	8004d56 <TIM_Base_SetConfig+0xb2>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a26      	ldr	r2, [pc, #152]	@ (8004dec <TIM_Base_SetConfig+0x148>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d108      	bne.n	8004d68 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	68fa      	ldr	r2, [r7, #12]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	695b      	ldr	r3, [r3, #20]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	689a      	ldr	r2, [r3, #8]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a0e      	ldr	r2, [pc, #56]	@ (8004dc4 <TIM_Base_SetConfig+0x120>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d003      	beq.n	8004d96 <TIM_Base_SetConfig+0xf2>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a10      	ldr	r2, [pc, #64]	@ (8004dd4 <TIM_Base_SetConfig+0x130>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d103      	bne.n	8004d9e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	691a      	ldr	r2, [r3, #16]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f043 0204 	orr.w	r2, r3, #4
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2201      	movs	r2, #1
 8004dae:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	68fa      	ldr	r2, [r7, #12]
 8004db4:	601a      	str	r2, [r3, #0]
}
 8004db6:	bf00      	nop
 8004db8:	3714      	adds	r7, #20
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr
 8004dc2:	bf00      	nop
 8004dc4:	40010000 	.word	0x40010000
 8004dc8:	40000400 	.word	0x40000400
 8004dcc:	40000800 	.word	0x40000800
 8004dd0:	40000c00 	.word	0x40000c00
 8004dd4:	40010400 	.word	0x40010400
 8004dd8:	40014000 	.word	0x40014000
 8004ddc:	40014400 	.word	0x40014400
 8004de0:	40014800 	.word	0x40014800
 8004de4:	40001800 	.word	0x40001800
 8004de8:	40001c00 	.word	0x40001c00
 8004dec:	40002000 	.word	0x40002000

08004df0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b085      	sub	sp, #20
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d101      	bne.n	8004e08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e04:	2302      	movs	r3, #2
 8004e06:	e05a      	b.n	8004ebe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2202      	movs	r2, #2
 8004e14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68fa      	ldr	r2, [r7, #12]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	68fa      	ldr	r2, [r7, #12]
 8004e40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a21      	ldr	r2, [pc, #132]	@ (8004ecc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d022      	beq.n	8004e92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e54:	d01d      	beq.n	8004e92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a1d      	ldr	r2, [pc, #116]	@ (8004ed0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d018      	beq.n	8004e92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a1b      	ldr	r2, [pc, #108]	@ (8004ed4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d013      	beq.n	8004e92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a1a      	ldr	r2, [pc, #104]	@ (8004ed8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d00e      	beq.n	8004e92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a18      	ldr	r2, [pc, #96]	@ (8004edc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d009      	beq.n	8004e92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a17      	ldr	r2, [pc, #92]	@ (8004ee0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d004      	beq.n	8004e92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a15      	ldr	r2, [pc, #84]	@ (8004ee4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d10c      	bne.n	8004eac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	68ba      	ldr	r2, [r7, #8]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	68ba      	ldr	r2, [r7, #8]
 8004eaa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3714      	adds	r7, #20
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr
 8004eca:	bf00      	nop
 8004ecc:	40010000 	.word	0x40010000
 8004ed0:	40000400 	.word	0x40000400
 8004ed4:	40000800 	.word	0x40000800
 8004ed8:	40000c00 	.word	0x40000c00
 8004edc:	40010400 	.word	0x40010400
 8004ee0:	40014000 	.word	0x40014000
 8004ee4:	40001800 	.word	0x40001800

08004ee8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b083      	sub	sp, #12
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ef0:	bf00      	nop
 8004ef2:	370c      	adds	r7, #12
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr

08004efc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b083      	sub	sp, #12
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f04:	bf00      	nop
 8004f06:	370c      	adds	r7, #12
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr

08004f10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b082      	sub	sp, #8
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d101      	bne.n	8004f22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e042      	b.n	8004fa8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d106      	bne.n	8004f3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f7fb fe3a 	bl	8000bb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2224      	movs	r2, #36	@ 0x24
 8004f40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	68da      	ldr	r2, [r3, #12]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004f52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f000 f82b 	bl	8004fb0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	691a      	ldr	r2, [r3, #16]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004f68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	695a      	ldr	r2, [r3, #20]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004f78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	68da      	ldr	r2, [r3, #12]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004f88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2220      	movs	r2, #32
 8004f94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2220      	movs	r2, #32
 8004f9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004fa6:	2300      	movs	r3, #0
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3708      	adds	r7, #8
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}

08004fb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fb4:	b0c0      	sub	sp, #256	@ 0x100
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	691b      	ldr	r3, [r3, #16]
 8004fc4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fcc:	68d9      	ldr	r1, [r3, #12]
 8004fce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	ea40 0301 	orr.w	r3, r0, r1
 8004fd8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fde:	689a      	ldr	r2, [r3, #8]
 8004fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fe4:	691b      	ldr	r3, [r3, #16]
 8004fe6:	431a      	orrs	r2, r3
 8004fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fec:	695b      	ldr	r3, [r3, #20]
 8004fee:	431a      	orrs	r2, r3
 8004ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ff4:	69db      	ldr	r3, [r3, #28]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005008:	f021 010c 	bic.w	r1, r1, #12
 800500c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005016:	430b      	orrs	r3, r1
 8005018:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800501a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	695b      	ldr	r3, [r3, #20]
 8005022:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800502a:	6999      	ldr	r1, [r3, #24]
 800502c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	ea40 0301 	orr.w	r3, r0, r1
 8005036:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	4b8f      	ldr	r3, [pc, #572]	@ (800527c <UART_SetConfig+0x2cc>)
 8005040:	429a      	cmp	r2, r3
 8005042:	d005      	beq.n	8005050 <UART_SetConfig+0xa0>
 8005044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	4b8d      	ldr	r3, [pc, #564]	@ (8005280 <UART_SetConfig+0x2d0>)
 800504c:	429a      	cmp	r2, r3
 800504e:	d104      	bne.n	800505a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005050:	f7ff fbc2 	bl	80047d8 <HAL_RCC_GetPCLK2Freq>
 8005054:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005058:	e003      	b.n	8005062 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800505a:	f7ff fba9 	bl	80047b0 <HAL_RCC_GetPCLK1Freq>
 800505e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005066:	69db      	ldr	r3, [r3, #28]
 8005068:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800506c:	f040 810c 	bne.w	8005288 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005070:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005074:	2200      	movs	r2, #0
 8005076:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800507a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800507e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005082:	4622      	mov	r2, r4
 8005084:	462b      	mov	r3, r5
 8005086:	1891      	adds	r1, r2, r2
 8005088:	65b9      	str	r1, [r7, #88]	@ 0x58
 800508a:	415b      	adcs	r3, r3
 800508c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800508e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005092:	4621      	mov	r1, r4
 8005094:	eb12 0801 	adds.w	r8, r2, r1
 8005098:	4629      	mov	r1, r5
 800509a:	eb43 0901 	adc.w	r9, r3, r1
 800509e:	f04f 0200 	mov.w	r2, #0
 80050a2:	f04f 0300 	mov.w	r3, #0
 80050a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80050aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80050ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80050b2:	4690      	mov	r8, r2
 80050b4:	4699      	mov	r9, r3
 80050b6:	4623      	mov	r3, r4
 80050b8:	eb18 0303 	adds.w	r3, r8, r3
 80050bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80050c0:	462b      	mov	r3, r5
 80050c2:	eb49 0303 	adc.w	r3, r9, r3
 80050c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80050ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80050d6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80050da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80050de:	460b      	mov	r3, r1
 80050e0:	18db      	adds	r3, r3, r3
 80050e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80050e4:	4613      	mov	r3, r2
 80050e6:	eb42 0303 	adc.w	r3, r2, r3
 80050ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80050ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80050f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80050f4:	f7fb f8c4 	bl	8000280 <__aeabi_uldivmod>
 80050f8:	4602      	mov	r2, r0
 80050fa:	460b      	mov	r3, r1
 80050fc:	4b61      	ldr	r3, [pc, #388]	@ (8005284 <UART_SetConfig+0x2d4>)
 80050fe:	fba3 2302 	umull	r2, r3, r3, r2
 8005102:	095b      	lsrs	r3, r3, #5
 8005104:	011c      	lsls	r4, r3, #4
 8005106:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800510a:	2200      	movs	r2, #0
 800510c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005110:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005114:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005118:	4642      	mov	r2, r8
 800511a:	464b      	mov	r3, r9
 800511c:	1891      	adds	r1, r2, r2
 800511e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005120:	415b      	adcs	r3, r3
 8005122:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005124:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005128:	4641      	mov	r1, r8
 800512a:	eb12 0a01 	adds.w	sl, r2, r1
 800512e:	4649      	mov	r1, r9
 8005130:	eb43 0b01 	adc.w	fp, r3, r1
 8005134:	f04f 0200 	mov.w	r2, #0
 8005138:	f04f 0300 	mov.w	r3, #0
 800513c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005140:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005144:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005148:	4692      	mov	sl, r2
 800514a:	469b      	mov	fp, r3
 800514c:	4643      	mov	r3, r8
 800514e:	eb1a 0303 	adds.w	r3, sl, r3
 8005152:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005156:	464b      	mov	r3, r9
 8005158:	eb4b 0303 	adc.w	r3, fp, r3
 800515c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800516c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005170:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005174:	460b      	mov	r3, r1
 8005176:	18db      	adds	r3, r3, r3
 8005178:	643b      	str	r3, [r7, #64]	@ 0x40
 800517a:	4613      	mov	r3, r2
 800517c:	eb42 0303 	adc.w	r3, r2, r3
 8005180:	647b      	str	r3, [r7, #68]	@ 0x44
 8005182:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005186:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800518a:	f7fb f879 	bl	8000280 <__aeabi_uldivmod>
 800518e:	4602      	mov	r2, r0
 8005190:	460b      	mov	r3, r1
 8005192:	4611      	mov	r1, r2
 8005194:	4b3b      	ldr	r3, [pc, #236]	@ (8005284 <UART_SetConfig+0x2d4>)
 8005196:	fba3 2301 	umull	r2, r3, r3, r1
 800519a:	095b      	lsrs	r3, r3, #5
 800519c:	2264      	movs	r2, #100	@ 0x64
 800519e:	fb02 f303 	mul.w	r3, r2, r3
 80051a2:	1acb      	subs	r3, r1, r3
 80051a4:	00db      	lsls	r3, r3, #3
 80051a6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80051aa:	4b36      	ldr	r3, [pc, #216]	@ (8005284 <UART_SetConfig+0x2d4>)
 80051ac:	fba3 2302 	umull	r2, r3, r3, r2
 80051b0:	095b      	lsrs	r3, r3, #5
 80051b2:	005b      	lsls	r3, r3, #1
 80051b4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80051b8:	441c      	add	r4, r3
 80051ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051be:	2200      	movs	r2, #0
 80051c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80051c4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80051c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80051cc:	4642      	mov	r2, r8
 80051ce:	464b      	mov	r3, r9
 80051d0:	1891      	adds	r1, r2, r2
 80051d2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80051d4:	415b      	adcs	r3, r3
 80051d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80051d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80051dc:	4641      	mov	r1, r8
 80051de:	1851      	adds	r1, r2, r1
 80051e0:	6339      	str	r1, [r7, #48]	@ 0x30
 80051e2:	4649      	mov	r1, r9
 80051e4:	414b      	adcs	r3, r1
 80051e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80051e8:	f04f 0200 	mov.w	r2, #0
 80051ec:	f04f 0300 	mov.w	r3, #0
 80051f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80051f4:	4659      	mov	r1, fp
 80051f6:	00cb      	lsls	r3, r1, #3
 80051f8:	4651      	mov	r1, sl
 80051fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051fe:	4651      	mov	r1, sl
 8005200:	00ca      	lsls	r2, r1, #3
 8005202:	4610      	mov	r0, r2
 8005204:	4619      	mov	r1, r3
 8005206:	4603      	mov	r3, r0
 8005208:	4642      	mov	r2, r8
 800520a:	189b      	adds	r3, r3, r2
 800520c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005210:	464b      	mov	r3, r9
 8005212:	460a      	mov	r2, r1
 8005214:	eb42 0303 	adc.w	r3, r2, r3
 8005218:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800521c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005228:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800522c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005230:	460b      	mov	r3, r1
 8005232:	18db      	adds	r3, r3, r3
 8005234:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005236:	4613      	mov	r3, r2
 8005238:	eb42 0303 	adc.w	r3, r2, r3
 800523c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800523e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005242:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005246:	f7fb f81b 	bl	8000280 <__aeabi_uldivmod>
 800524a:	4602      	mov	r2, r0
 800524c:	460b      	mov	r3, r1
 800524e:	4b0d      	ldr	r3, [pc, #52]	@ (8005284 <UART_SetConfig+0x2d4>)
 8005250:	fba3 1302 	umull	r1, r3, r3, r2
 8005254:	095b      	lsrs	r3, r3, #5
 8005256:	2164      	movs	r1, #100	@ 0x64
 8005258:	fb01 f303 	mul.w	r3, r1, r3
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	00db      	lsls	r3, r3, #3
 8005260:	3332      	adds	r3, #50	@ 0x32
 8005262:	4a08      	ldr	r2, [pc, #32]	@ (8005284 <UART_SetConfig+0x2d4>)
 8005264:	fba2 2303 	umull	r2, r3, r2, r3
 8005268:	095b      	lsrs	r3, r3, #5
 800526a:	f003 0207 	and.w	r2, r3, #7
 800526e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4422      	add	r2, r4
 8005276:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005278:	e106      	b.n	8005488 <UART_SetConfig+0x4d8>
 800527a:	bf00      	nop
 800527c:	40011000 	.word	0x40011000
 8005280:	40011400 	.word	0x40011400
 8005284:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005288:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800528c:	2200      	movs	r2, #0
 800528e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005292:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005296:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800529a:	4642      	mov	r2, r8
 800529c:	464b      	mov	r3, r9
 800529e:	1891      	adds	r1, r2, r2
 80052a0:	6239      	str	r1, [r7, #32]
 80052a2:	415b      	adcs	r3, r3
 80052a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80052a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80052aa:	4641      	mov	r1, r8
 80052ac:	1854      	adds	r4, r2, r1
 80052ae:	4649      	mov	r1, r9
 80052b0:	eb43 0501 	adc.w	r5, r3, r1
 80052b4:	f04f 0200 	mov.w	r2, #0
 80052b8:	f04f 0300 	mov.w	r3, #0
 80052bc:	00eb      	lsls	r3, r5, #3
 80052be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80052c2:	00e2      	lsls	r2, r4, #3
 80052c4:	4614      	mov	r4, r2
 80052c6:	461d      	mov	r5, r3
 80052c8:	4643      	mov	r3, r8
 80052ca:	18e3      	adds	r3, r4, r3
 80052cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80052d0:	464b      	mov	r3, r9
 80052d2:	eb45 0303 	adc.w	r3, r5, r3
 80052d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80052da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80052e6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80052ea:	f04f 0200 	mov.w	r2, #0
 80052ee:	f04f 0300 	mov.w	r3, #0
 80052f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80052f6:	4629      	mov	r1, r5
 80052f8:	008b      	lsls	r3, r1, #2
 80052fa:	4621      	mov	r1, r4
 80052fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005300:	4621      	mov	r1, r4
 8005302:	008a      	lsls	r2, r1, #2
 8005304:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005308:	f7fa ffba 	bl	8000280 <__aeabi_uldivmod>
 800530c:	4602      	mov	r2, r0
 800530e:	460b      	mov	r3, r1
 8005310:	4b60      	ldr	r3, [pc, #384]	@ (8005494 <UART_SetConfig+0x4e4>)
 8005312:	fba3 2302 	umull	r2, r3, r3, r2
 8005316:	095b      	lsrs	r3, r3, #5
 8005318:	011c      	lsls	r4, r3, #4
 800531a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800531e:	2200      	movs	r2, #0
 8005320:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005324:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005328:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800532c:	4642      	mov	r2, r8
 800532e:	464b      	mov	r3, r9
 8005330:	1891      	adds	r1, r2, r2
 8005332:	61b9      	str	r1, [r7, #24]
 8005334:	415b      	adcs	r3, r3
 8005336:	61fb      	str	r3, [r7, #28]
 8005338:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800533c:	4641      	mov	r1, r8
 800533e:	1851      	adds	r1, r2, r1
 8005340:	6139      	str	r1, [r7, #16]
 8005342:	4649      	mov	r1, r9
 8005344:	414b      	adcs	r3, r1
 8005346:	617b      	str	r3, [r7, #20]
 8005348:	f04f 0200 	mov.w	r2, #0
 800534c:	f04f 0300 	mov.w	r3, #0
 8005350:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005354:	4659      	mov	r1, fp
 8005356:	00cb      	lsls	r3, r1, #3
 8005358:	4651      	mov	r1, sl
 800535a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800535e:	4651      	mov	r1, sl
 8005360:	00ca      	lsls	r2, r1, #3
 8005362:	4610      	mov	r0, r2
 8005364:	4619      	mov	r1, r3
 8005366:	4603      	mov	r3, r0
 8005368:	4642      	mov	r2, r8
 800536a:	189b      	adds	r3, r3, r2
 800536c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005370:	464b      	mov	r3, r9
 8005372:	460a      	mov	r2, r1
 8005374:	eb42 0303 	adc.w	r3, r2, r3
 8005378:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800537c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005386:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005388:	f04f 0200 	mov.w	r2, #0
 800538c:	f04f 0300 	mov.w	r3, #0
 8005390:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005394:	4649      	mov	r1, r9
 8005396:	008b      	lsls	r3, r1, #2
 8005398:	4641      	mov	r1, r8
 800539a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800539e:	4641      	mov	r1, r8
 80053a0:	008a      	lsls	r2, r1, #2
 80053a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80053a6:	f7fa ff6b 	bl	8000280 <__aeabi_uldivmod>
 80053aa:	4602      	mov	r2, r0
 80053ac:	460b      	mov	r3, r1
 80053ae:	4611      	mov	r1, r2
 80053b0:	4b38      	ldr	r3, [pc, #224]	@ (8005494 <UART_SetConfig+0x4e4>)
 80053b2:	fba3 2301 	umull	r2, r3, r3, r1
 80053b6:	095b      	lsrs	r3, r3, #5
 80053b8:	2264      	movs	r2, #100	@ 0x64
 80053ba:	fb02 f303 	mul.w	r3, r2, r3
 80053be:	1acb      	subs	r3, r1, r3
 80053c0:	011b      	lsls	r3, r3, #4
 80053c2:	3332      	adds	r3, #50	@ 0x32
 80053c4:	4a33      	ldr	r2, [pc, #204]	@ (8005494 <UART_SetConfig+0x4e4>)
 80053c6:	fba2 2303 	umull	r2, r3, r2, r3
 80053ca:	095b      	lsrs	r3, r3, #5
 80053cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80053d0:	441c      	add	r4, r3
 80053d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053d6:	2200      	movs	r2, #0
 80053d8:	673b      	str	r3, [r7, #112]	@ 0x70
 80053da:	677a      	str	r2, [r7, #116]	@ 0x74
 80053dc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80053e0:	4642      	mov	r2, r8
 80053e2:	464b      	mov	r3, r9
 80053e4:	1891      	adds	r1, r2, r2
 80053e6:	60b9      	str	r1, [r7, #8]
 80053e8:	415b      	adcs	r3, r3
 80053ea:	60fb      	str	r3, [r7, #12]
 80053ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80053f0:	4641      	mov	r1, r8
 80053f2:	1851      	adds	r1, r2, r1
 80053f4:	6039      	str	r1, [r7, #0]
 80053f6:	4649      	mov	r1, r9
 80053f8:	414b      	adcs	r3, r1
 80053fa:	607b      	str	r3, [r7, #4]
 80053fc:	f04f 0200 	mov.w	r2, #0
 8005400:	f04f 0300 	mov.w	r3, #0
 8005404:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005408:	4659      	mov	r1, fp
 800540a:	00cb      	lsls	r3, r1, #3
 800540c:	4651      	mov	r1, sl
 800540e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005412:	4651      	mov	r1, sl
 8005414:	00ca      	lsls	r2, r1, #3
 8005416:	4610      	mov	r0, r2
 8005418:	4619      	mov	r1, r3
 800541a:	4603      	mov	r3, r0
 800541c:	4642      	mov	r2, r8
 800541e:	189b      	adds	r3, r3, r2
 8005420:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005422:	464b      	mov	r3, r9
 8005424:	460a      	mov	r2, r1
 8005426:	eb42 0303 	adc.w	r3, r2, r3
 800542a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800542c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	663b      	str	r3, [r7, #96]	@ 0x60
 8005436:	667a      	str	r2, [r7, #100]	@ 0x64
 8005438:	f04f 0200 	mov.w	r2, #0
 800543c:	f04f 0300 	mov.w	r3, #0
 8005440:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005444:	4649      	mov	r1, r9
 8005446:	008b      	lsls	r3, r1, #2
 8005448:	4641      	mov	r1, r8
 800544a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800544e:	4641      	mov	r1, r8
 8005450:	008a      	lsls	r2, r1, #2
 8005452:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005456:	f7fa ff13 	bl	8000280 <__aeabi_uldivmod>
 800545a:	4602      	mov	r2, r0
 800545c:	460b      	mov	r3, r1
 800545e:	4b0d      	ldr	r3, [pc, #52]	@ (8005494 <UART_SetConfig+0x4e4>)
 8005460:	fba3 1302 	umull	r1, r3, r3, r2
 8005464:	095b      	lsrs	r3, r3, #5
 8005466:	2164      	movs	r1, #100	@ 0x64
 8005468:	fb01 f303 	mul.w	r3, r1, r3
 800546c:	1ad3      	subs	r3, r2, r3
 800546e:	011b      	lsls	r3, r3, #4
 8005470:	3332      	adds	r3, #50	@ 0x32
 8005472:	4a08      	ldr	r2, [pc, #32]	@ (8005494 <UART_SetConfig+0x4e4>)
 8005474:	fba2 2303 	umull	r2, r3, r2, r3
 8005478:	095b      	lsrs	r3, r3, #5
 800547a:	f003 020f 	and.w	r2, r3, #15
 800547e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4422      	add	r2, r4
 8005486:	609a      	str	r2, [r3, #8]
}
 8005488:	bf00      	nop
 800548a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800548e:	46bd      	mov	sp, r7
 8005490:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005494:	51eb851f 	.word	0x51eb851f

08005498 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                     const FSMC_NORSRAM_InitTypeDef *Init)
{
 8005498:	b480      	push	{r7}
 800549a:	b087      	sub	sp, #28
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054ac:	683a      	ldr	r2, [r7, #0]
 80054ae:	6812      	ldr	r2, [r2, #0]
 80054b0:	f023 0101 	bic.w	r1, r3, #1
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	2b08      	cmp	r3, #8
 80054c0:	d102      	bne.n	80054c8 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80054c2:	2340      	movs	r3, #64	@ 0x40
 80054c4:	617b      	str	r3, [r7, #20]
 80054c6:	e001      	b.n	80054cc <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80054c8:	2300      	movs	r3, #0
 80054ca:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80054d8:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80054de:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80054e4:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80054ea:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 80054f0:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 80054f6:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 80054fc:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 8005502:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 8005508:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 800550e:	4313      	orrs	r3, r2
 8005510:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	699b      	ldr	r3, [r3, #24]
 8005516:	693a      	ldr	r2, [r7, #16]
 8005518:	4313      	orrs	r3, r2
 800551a:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005520:	693a      	ldr	r2, [r7, #16]
 8005522:	4313      	orrs	r3, r2
 8005524:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 8005526:	4b10      	ldr	r3, [pc, #64]	@ (8005568 <FSMC_NORSRAM_Init+0xd0>)
 8005528:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005530:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8005538:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	43db      	mvns	r3, r3
 8005548:	ea02 0103 	and.w	r1, r2, r3
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	4319      	orrs	r1, r3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 800555a:	2300      	movs	r3, #0
}
 800555c:	4618      	mov	r0, r3
 800555e:	371c      	adds	r7, #28
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr
 8005568:	0008fb7f 	.word	0x0008fb7f

0800556c <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                           const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800556c:	b480      	push	{r7}
 800556e:	b085      	sub	sp, #20
 8005570:	af00      	add	r7, sp, #0
 8005572:	60f8      	str	r0, [r7, #12]
 8005574:	60b9      	str	r1, [r7, #8]
 8005576:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  Device->BTCR[Bank + 1U] =
    (Timing->AddressSetupTime << FSMC_BTR1_ADDSET_Pos) |
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	681a      	ldr	r2, [r3, #0]
    (Timing->AddressHoldTime << FSMC_BTR1_ADDHLD_Pos) |
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	011b      	lsls	r3, r3, #4
    (Timing->AddressSetupTime << FSMC_BTR1_ADDSET_Pos) |
 8005582:	431a      	orrs	r2, r3
    (Timing->DataSetupTime << FSMC_BTR1_DATAST_Pos) |
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	021b      	lsls	r3, r3, #8
    (Timing->AddressHoldTime << FSMC_BTR1_ADDHLD_Pos) |
 800558a:	431a      	orrs	r2, r3
    (Timing->BusTurnAroundDuration << FSMC_BTR1_BUSTURN_Pos) |
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	041b      	lsls	r3, r3, #16
    (Timing->DataSetupTime << FSMC_BTR1_DATAST_Pos) |
 8005592:	431a      	orrs	r2, r3
    ((Timing->CLKDivision - 1U) << FSMC_BTR1_CLKDIV_Pos) |
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	691b      	ldr	r3, [r3, #16]
 8005598:	3b01      	subs	r3, #1
 800559a:	051b      	lsls	r3, r3, #20
    (Timing->BusTurnAroundDuration << FSMC_BTR1_BUSTURN_Pos) |
 800559c:	431a      	orrs	r2, r3
    ((Timing->DataLatency - 2U) << FSMC_BTR1_DATLAT_Pos) |
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	695b      	ldr	r3, [r3, #20]
 80055a2:	3b02      	subs	r3, #2
 80055a4:	061b      	lsls	r3, r3, #24
    ((Timing->CLKDivision - 1U) << FSMC_BTR1_CLKDIV_Pos) |
 80055a6:	ea42 0103 	orr.w	r1, r2, r3
    Timing->AccessMode;
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	699b      	ldr	r3, [r3, #24]
  Device->BTCR[Bank + 1U] =
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	3201      	adds	r2, #1
    ((Timing->DataLatency - 2U) << FSMC_BTR1_DATLAT_Pos) |
 80055b2:	4319      	orrs	r1, r3
  Device->BTCR[Bank + 1U] =
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif /* FSMC_BCR1_CCLKEN */
  return HAL_OK;
 80055ba:	2300      	movs	r3, #0
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3714      	adds	r7, #20
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                    const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                    uint32_t ExtendedMode)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b085      	sub	sp, #20
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	60b9      	str	r1, [r7, #8]
 80055d2:	607a      	str	r2, [r7, #4]
 80055d4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80055dc:	d11d      	bne.n	800561a <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80055e6:	4b13      	ldr	r3, [pc, #76]	@ (8005634 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80055e8:	4013      	ands	r3, r2
 80055ea:	68ba      	ldr	r2, [r7, #8]
 80055ec:	6811      	ldr	r1, [r2, #0]
 80055ee:	68ba      	ldr	r2, [r7, #8]
 80055f0:	6852      	ldr	r2, [r2, #4]
 80055f2:	0112      	lsls	r2, r2, #4
 80055f4:	4311      	orrs	r1, r2
 80055f6:	68ba      	ldr	r2, [r7, #8]
 80055f8:	6892      	ldr	r2, [r2, #8]
 80055fa:	0212      	lsls	r2, r2, #8
 80055fc:	4311      	orrs	r1, r2
 80055fe:	68ba      	ldr	r2, [r7, #8]
 8005600:	6992      	ldr	r2, [r2, #24]
 8005602:	4311      	orrs	r1, r2
 8005604:	68ba      	ldr	r2, [r7, #8]
 8005606:	68d2      	ldr	r2, [r2, #12]
 8005608:	0412      	lsls	r2, r2, #16
 800560a:	430a      	orrs	r2, r1
 800560c:	ea43 0102 	orr.w	r1, r3, r2
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005618:	e005      	b.n	8005626 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8005622:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8005626:	2300      	movs	r3, #0
}
 8005628:	4618      	mov	r0, r3
 800562a:	3714      	adds	r7, #20
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr
 8005634:	cff00000 	.word	0xcff00000

08005638 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005638:	b084      	sub	sp, #16
 800563a:	b580      	push	{r7, lr}
 800563c:	b084      	sub	sp, #16
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
 8005642:	f107 001c 	add.w	r0, r7, #28
 8005646:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800564a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800564e:	2b01      	cmp	r3, #1
 8005650:	d123      	bne.n	800569a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005656:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005666:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	68db      	ldr	r3, [r3, #12]
 8005672:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800567a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800567e:	2b01      	cmp	r3, #1
 8005680:	d105      	bne.n	800568e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f001 fae8 	bl	8006c64 <USB_CoreReset>
 8005694:	4603      	mov	r3, r0
 8005696:	73fb      	strb	r3, [r7, #15]
 8005698:	e01b      	b.n	80056d2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	68db      	ldr	r3, [r3, #12]
 800569e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f001 fadc 	bl	8006c64 <USB_CoreReset>
 80056ac:	4603      	mov	r3, r0
 80056ae:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80056b0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d106      	bne.n	80056c6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056bc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	639a      	str	r2, [r3, #56]	@ 0x38
 80056c4:	e005      	b.n	80056d2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056ca:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80056d2:	7fbb      	ldrb	r3, [r7, #30]
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d10b      	bne.n	80056f0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	f043 0206 	orr.w	r2, r3, #6
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	f043 0220 	orr.w	r2, r3, #32
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80056f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3710      	adds	r7, #16
 80056f6:	46bd      	mov	sp, r7
 80056f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80056fc:	b004      	add	sp, #16
 80056fe:	4770      	bx	lr

08005700 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005700:	b480      	push	{r7}
 8005702:	b087      	sub	sp, #28
 8005704:	af00      	add	r7, sp, #0
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	4613      	mov	r3, r2
 800570c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800570e:	79fb      	ldrb	r3, [r7, #7]
 8005710:	2b02      	cmp	r3, #2
 8005712:	d165      	bne.n	80057e0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	4a41      	ldr	r2, [pc, #260]	@ (800581c <USB_SetTurnaroundTime+0x11c>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d906      	bls.n	800572a <USB_SetTurnaroundTime+0x2a>
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	4a40      	ldr	r2, [pc, #256]	@ (8005820 <USB_SetTurnaroundTime+0x120>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d202      	bcs.n	800572a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005724:	230f      	movs	r3, #15
 8005726:	617b      	str	r3, [r7, #20]
 8005728:	e062      	b.n	80057f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	4a3c      	ldr	r2, [pc, #240]	@ (8005820 <USB_SetTurnaroundTime+0x120>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d306      	bcc.n	8005740 <USB_SetTurnaroundTime+0x40>
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	4a3b      	ldr	r2, [pc, #236]	@ (8005824 <USB_SetTurnaroundTime+0x124>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d202      	bcs.n	8005740 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800573a:	230e      	movs	r3, #14
 800573c:	617b      	str	r3, [r7, #20]
 800573e:	e057      	b.n	80057f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	4a38      	ldr	r2, [pc, #224]	@ (8005824 <USB_SetTurnaroundTime+0x124>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d306      	bcc.n	8005756 <USB_SetTurnaroundTime+0x56>
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	4a37      	ldr	r2, [pc, #220]	@ (8005828 <USB_SetTurnaroundTime+0x128>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d202      	bcs.n	8005756 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005750:	230d      	movs	r3, #13
 8005752:	617b      	str	r3, [r7, #20]
 8005754:	e04c      	b.n	80057f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	4a33      	ldr	r2, [pc, #204]	@ (8005828 <USB_SetTurnaroundTime+0x128>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d306      	bcc.n	800576c <USB_SetTurnaroundTime+0x6c>
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	4a32      	ldr	r2, [pc, #200]	@ (800582c <USB_SetTurnaroundTime+0x12c>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d802      	bhi.n	800576c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005766:	230c      	movs	r3, #12
 8005768:	617b      	str	r3, [r7, #20]
 800576a:	e041      	b.n	80057f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	4a2f      	ldr	r2, [pc, #188]	@ (800582c <USB_SetTurnaroundTime+0x12c>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d906      	bls.n	8005782 <USB_SetTurnaroundTime+0x82>
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	4a2e      	ldr	r2, [pc, #184]	@ (8005830 <USB_SetTurnaroundTime+0x130>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d802      	bhi.n	8005782 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800577c:	230b      	movs	r3, #11
 800577e:	617b      	str	r3, [r7, #20]
 8005780:	e036      	b.n	80057f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	4a2a      	ldr	r2, [pc, #168]	@ (8005830 <USB_SetTurnaroundTime+0x130>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d906      	bls.n	8005798 <USB_SetTurnaroundTime+0x98>
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	4a29      	ldr	r2, [pc, #164]	@ (8005834 <USB_SetTurnaroundTime+0x134>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d802      	bhi.n	8005798 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005792:	230a      	movs	r3, #10
 8005794:	617b      	str	r3, [r7, #20]
 8005796:	e02b      	b.n	80057f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	4a26      	ldr	r2, [pc, #152]	@ (8005834 <USB_SetTurnaroundTime+0x134>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d906      	bls.n	80057ae <USB_SetTurnaroundTime+0xae>
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	4a25      	ldr	r2, [pc, #148]	@ (8005838 <USB_SetTurnaroundTime+0x138>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d202      	bcs.n	80057ae <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80057a8:	2309      	movs	r3, #9
 80057aa:	617b      	str	r3, [r7, #20]
 80057ac:	e020      	b.n	80057f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	4a21      	ldr	r2, [pc, #132]	@ (8005838 <USB_SetTurnaroundTime+0x138>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d306      	bcc.n	80057c4 <USB_SetTurnaroundTime+0xc4>
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	4a20      	ldr	r2, [pc, #128]	@ (800583c <USB_SetTurnaroundTime+0x13c>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d802      	bhi.n	80057c4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80057be:	2308      	movs	r3, #8
 80057c0:	617b      	str	r3, [r7, #20]
 80057c2:	e015      	b.n	80057f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	4a1d      	ldr	r2, [pc, #116]	@ (800583c <USB_SetTurnaroundTime+0x13c>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d906      	bls.n	80057da <USB_SetTurnaroundTime+0xda>
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	4a1c      	ldr	r2, [pc, #112]	@ (8005840 <USB_SetTurnaroundTime+0x140>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d202      	bcs.n	80057da <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80057d4:	2307      	movs	r3, #7
 80057d6:	617b      	str	r3, [r7, #20]
 80057d8:	e00a      	b.n	80057f0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80057da:	2306      	movs	r3, #6
 80057dc:	617b      	str	r3, [r7, #20]
 80057de:	e007      	b.n	80057f0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80057e0:	79fb      	ldrb	r3, [r7, #7]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d102      	bne.n	80057ec <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80057e6:	2309      	movs	r3, #9
 80057e8:	617b      	str	r3, [r7, #20]
 80057ea:	e001      	b.n	80057f0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80057ec:	2309      	movs	r3, #9
 80057ee:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	68da      	ldr	r2, [r3, #12]
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	029b      	lsls	r3, r3, #10
 8005804:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005808:	431a      	orrs	r2, r3
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800580e:	2300      	movs	r3, #0
}
 8005810:	4618      	mov	r0, r3
 8005812:	371c      	adds	r7, #28
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr
 800581c:	00d8acbf 	.word	0x00d8acbf
 8005820:	00e4e1c0 	.word	0x00e4e1c0
 8005824:	00f42400 	.word	0x00f42400
 8005828:	01067380 	.word	0x01067380
 800582c:	011a499f 	.word	0x011a499f
 8005830:	01312cff 	.word	0x01312cff
 8005834:	014ca43f 	.word	0x014ca43f
 8005838:	016e3600 	.word	0x016e3600
 800583c:	01a6ab1f 	.word	0x01a6ab1f
 8005840:	01e84800 	.word	0x01e84800

08005844 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005844:	b480      	push	{r7}
 8005846:	b083      	sub	sp, #12
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	f043 0201 	orr.w	r2, r3, #1
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005858:	2300      	movs	r3, #0
}
 800585a:	4618      	mov	r0, r3
 800585c:	370c      	adds	r7, #12
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr

08005866 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005866:	b480      	push	{r7}
 8005868:	b083      	sub	sp, #12
 800586a:	af00      	add	r7, sp, #0
 800586c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	f023 0201 	bic.w	r2, r3, #1
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800587a:	2300      	movs	r3, #0
}
 800587c:	4618      	mov	r0, r3
 800587e:	370c      	adds	r7, #12
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr

08005888 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b084      	sub	sp, #16
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	460b      	mov	r3, r1
 8005892:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005894:	2300      	movs	r3, #0
 8005896:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80058a4:	78fb      	ldrb	r3, [r7, #3]
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d115      	bne.n	80058d6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80058b6:	200a      	movs	r0, #10
 80058b8:	f7fb fe24 	bl	8001504 <HAL_Delay>
      ms += 10U;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	330a      	adds	r3, #10
 80058c0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f001 f93f 	bl	8006b46 <USB_GetMode>
 80058c8:	4603      	mov	r3, r0
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d01e      	beq.n	800590c <USB_SetCurrentMode+0x84>
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2bc7      	cmp	r3, #199	@ 0xc7
 80058d2:	d9f0      	bls.n	80058b6 <USB_SetCurrentMode+0x2e>
 80058d4:	e01a      	b.n	800590c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80058d6:	78fb      	ldrb	r3, [r7, #3]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d115      	bne.n	8005908 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80058e8:	200a      	movs	r0, #10
 80058ea:	f7fb fe0b 	bl	8001504 <HAL_Delay>
      ms += 10U;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	330a      	adds	r3, #10
 80058f2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f001 f926 	bl	8006b46 <USB_GetMode>
 80058fa:	4603      	mov	r3, r0
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d005      	beq.n	800590c <USB_SetCurrentMode+0x84>
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2bc7      	cmp	r3, #199	@ 0xc7
 8005904:	d9f0      	bls.n	80058e8 <USB_SetCurrentMode+0x60>
 8005906:	e001      	b.n	800590c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	e005      	b.n	8005918 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2bc8      	cmp	r3, #200	@ 0xc8
 8005910:	d101      	bne.n	8005916 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	e000      	b.n	8005918 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005916:	2300      	movs	r3, #0
}
 8005918:	4618      	mov	r0, r3
 800591a:	3710      	adds	r7, #16
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005920:	b084      	sub	sp, #16
 8005922:	b580      	push	{r7, lr}
 8005924:	b086      	sub	sp, #24
 8005926:	af00      	add	r7, sp, #0
 8005928:	6078      	str	r0, [r7, #4]
 800592a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800592e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005932:	2300      	movs	r3, #0
 8005934:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800593a:	2300      	movs	r3, #0
 800593c:	613b      	str	r3, [r7, #16]
 800593e:	e009      	b.n	8005954 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	3340      	adds	r3, #64	@ 0x40
 8005946:	009b      	lsls	r3, r3, #2
 8005948:	4413      	add	r3, r2
 800594a:	2200      	movs	r2, #0
 800594c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	3301      	adds	r3, #1
 8005952:	613b      	str	r3, [r7, #16]
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	2b0e      	cmp	r3, #14
 8005958:	d9f2      	bls.n	8005940 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800595a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800595e:	2b00      	cmp	r3, #0
 8005960:	d11c      	bne.n	800599c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	68fa      	ldr	r2, [r7, #12]
 800596c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005970:	f043 0302 	orr.w	r3, r3, #2
 8005974:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800597a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005986:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005992:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	639a      	str	r2, [r3, #56]	@ 0x38
 800599a:	e00b      	b.n	80059b4 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059a0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059ac:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80059ba:	461a      	mov	r2, r3
 80059bc:	2300      	movs	r3, #0
 80059be:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80059c0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d10d      	bne.n	80059e4 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80059c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d104      	bne.n	80059da <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80059d0:	2100      	movs	r1, #0
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 f968 	bl	8005ca8 <USB_SetDevSpeed>
 80059d8:	e008      	b.n	80059ec <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80059da:	2101      	movs	r1, #1
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f000 f963 	bl	8005ca8 <USB_SetDevSpeed>
 80059e2:	e003      	b.n	80059ec <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80059e4:	2103      	movs	r1, #3
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 f95e 	bl	8005ca8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80059ec:	2110      	movs	r1, #16
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f000 f8fa 	bl	8005be8 <USB_FlushTxFifo>
 80059f4:	4603      	mov	r3, r0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d001      	beq.n	80059fe <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 f924 	bl	8005c4c <USB_FlushRxFifo>
 8005a04:	4603      	mov	r3, r0
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d001      	beq.n	8005a0e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a14:	461a      	mov	r2, r3
 8005a16:	2300      	movs	r3, #0
 8005a18:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a20:	461a      	mov	r2, r3
 8005a22:	2300      	movs	r3, #0
 8005a24:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	2300      	movs	r3, #0
 8005a30:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a32:	2300      	movs	r3, #0
 8005a34:	613b      	str	r3, [r7, #16]
 8005a36:	e043      	b.n	8005ac0 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	015a      	lsls	r2, r3, #5
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	4413      	add	r3, r2
 8005a40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005a4a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005a4e:	d118      	bne.n	8005a82 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d10a      	bne.n	8005a6c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	015a      	lsls	r2, r3, #5
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	4413      	add	r3, r2
 8005a5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a62:	461a      	mov	r2, r3
 8005a64:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005a68:	6013      	str	r3, [r2, #0]
 8005a6a:	e013      	b.n	8005a94 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	015a      	lsls	r2, r3, #5
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	4413      	add	r3, r2
 8005a74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a78:	461a      	mov	r2, r3
 8005a7a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005a7e:	6013      	str	r3, [r2, #0]
 8005a80:	e008      	b.n	8005a94 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	015a      	lsls	r2, r3, #5
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	4413      	add	r3, r2
 8005a8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a8e:	461a      	mov	r2, r3
 8005a90:	2300      	movs	r3, #0
 8005a92:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	015a      	lsls	r2, r3, #5
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	4413      	add	r3, r2
 8005a9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	015a      	lsls	r2, r3, #5
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	4413      	add	r3, r2
 8005aae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005ab8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	3301      	adds	r3, #1
 8005abe:	613b      	str	r3, [r7, #16]
 8005ac0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d3b5      	bcc.n	8005a38 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005acc:	2300      	movs	r3, #0
 8005ace:	613b      	str	r3, [r7, #16]
 8005ad0:	e043      	b.n	8005b5a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	015a      	lsls	r2, r3, #5
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	4413      	add	r3, r2
 8005ada:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005ae4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ae8:	d118      	bne.n	8005b1c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d10a      	bne.n	8005b06 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	015a      	lsls	r2, r3, #5
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	4413      	add	r3, r2
 8005af8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005afc:	461a      	mov	r2, r3
 8005afe:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005b02:	6013      	str	r3, [r2, #0]
 8005b04:	e013      	b.n	8005b2e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	015a      	lsls	r2, r3, #5
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	4413      	add	r3, r2
 8005b0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b12:	461a      	mov	r2, r3
 8005b14:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005b18:	6013      	str	r3, [r2, #0]
 8005b1a:	e008      	b.n	8005b2e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	015a      	lsls	r2, r3, #5
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	4413      	add	r3, r2
 8005b24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b28:	461a      	mov	r2, r3
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	015a      	lsls	r2, r3, #5
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	4413      	add	r3, r2
 8005b36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	015a      	lsls	r2, r3, #5
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	4413      	add	r3, r2
 8005b48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005b52:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	3301      	adds	r3, #1
 8005b58:	613b      	str	r3, [r7, #16]
 8005b5a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005b5e:	461a      	mov	r2, r3
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d3b5      	bcc.n	8005ad2 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b6c:	691b      	ldr	r3, [r3, #16]
 8005b6e:	68fa      	ldr	r2, [r7, #12]
 8005b70:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b78:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005b86:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005b88:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d105      	bne.n	8005b9c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	699b      	ldr	r3, [r3, #24]
 8005b94:	f043 0210 	orr.w	r2, r3, #16
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	699a      	ldr	r2, [r3, #24]
 8005ba0:	4b10      	ldr	r3, [pc, #64]	@ (8005be4 <USB_DevInit+0x2c4>)
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005ba8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d005      	beq.n	8005bbc <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	699b      	ldr	r3, [r3, #24]
 8005bb4:	f043 0208 	orr.w	r2, r3, #8
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005bbc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d107      	bne.n	8005bd4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	699b      	ldr	r3, [r3, #24]
 8005bc8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005bcc:	f043 0304 	orr.w	r3, r3, #4
 8005bd0:	687a      	ldr	r2, [r7, #4]
 8005bd2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005bd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3718      	adds	r7, #24
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005be0:	b004      	add	sp, #16
 8005be2:	4770      	bx	lr
 8005be4:	803c3800 	.word	0x803c3800

08005be8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b085      	sub	sp, #20
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	3301      	adds	r3, #1
 8005bfa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005c02:	d901      	bls.n	8005c08 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005c04:	2303      	movs	r3, #3
 8005c06:	e01b      	b.n	8005c40 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	691b      	ldr	r3, [r3, #16]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	daf2      	bge.n	8005bf6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005c10:	2300      	movs	r3, #0
 8005c12:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	019b      	lsls	r3, r3, #6
 8005c18:	f043 0220 	orr.w	r2, r3, #32
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	3301      	adds	r3, #1
 8005c24:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005c2c:	d901      	bls.n	8005c32 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005c2e:	2303      	movs	r3, #3
 8005c30:	e006      	b.n	8005c40 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	691b      	ldr	r3, [r3, #16]
 8005c36:	f003 0320 	and.w	r3, r3, #32
 8005c3a:	2b20      	cmp	r3, #32
 8005c3c:	d0f0      	beq.n	8005c20 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005c3e:	2300      	movs	r3, #0
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3714      	adds	r7, #20
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr

08005c4c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b085      	sub	sp, #20
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c54:	2300      	movs	r3, #0
 8005c56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005c64:	d901      	bls.n	8005c6a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005c66:	2303      	movs	r3, #3
 8005c68:	e018      	b.n	8005c9c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	691b      	ldr	r3, [r3, #16]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	daf2      	bge.n	8005c58 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005c72:	2300      	movs	r3, #0
 8005c74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2210      	movs	r2, #16
 8005c7a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	3301      	adds	r3, #1
 8005c80:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005c88:	d901      	bls.n	8005c8e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005c8a:	2303      	movs	r3, #3
 8005c8c:	e006      	b.n	8005c9c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	691b      	ldr	r3, [r3, #16]
 8005c92:	f003 0310 	and.w	r3, r3, #16
 8005c96:	2b10      	cmp	r3, #16
 8005c98:	d0f0      	beq.n	8005c7c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005c9a:	2300      	movs	r3, #0
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3714      	adds	r7, #20
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b085      	sub	sp, #20
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	460b      	mov	r3, r1
 8005cb2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	78fb      	ldrb	r3, [r7, #3]
 8005cc2:	68f9      	ldr	r1, [r7, #12]
 8005cc4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005ccc:	2300      	movs	r3, #0
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3714      	adds	r7, #20
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr

08005cda <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005cda:	b480      	push	{r7}
 8005cdc:	b087      	sub	sp, #28
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	f003 0306 	and.w	r3, r3, #6
 8005cf2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d102      	bne.n	8005d00 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	75fb      	strb	r3, [r7, #23]
 8005cfe:	e00a      	b.n	8005d16 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2b02      	cmp	r3, #2
 8005d04:	d002      	beq.n	8005d0c <USB_GetDevSpeed+0x32>
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2b06      	cmp	r3, #6
 8005d0a:	d102      	bne.n	8005d12 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005d0c:	2302      	movs	r3, #2
 8005d0e:	75fb      	strb	r3, [r7, #23]
 8005d10:	e001      	b.n	8005d16 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005d12:	230f      	movs	r3, #15
 8005d14:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005d16:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	371c      	adds	r7, #28
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr

08005d24 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b085      	sub	sp, #20
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	785b      	ldrb	r3, [r3, #1]
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d13a      	bne.n	8005db6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d46:	69da      	ldr	r2, [r3, #28]
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	f003 030f 	and.w	r3, r3, #15
 8005d50:	2101      	movs	r1, #1
 8005d52:	fa01 f303 	lsl.w	r3, r1, r3
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	68f9      	ldr	r1, [r7, #12]
 8005d5a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	015a      	lsls	r2, r3, #5
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	4413      	add	r3, r2
 8005d6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d155      	bne.n	8005e24 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	015a      	lsls	r2, r3, #5
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	4413      	add	r3, r2
 8005d80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	791b      	ldrb	r3, [r3, #4]
 8005d92:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005d94:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	059b      	lsls	r3, r3, #22
 8005d9a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	68ba      	ldr	r2, [r7, #8]
 8005da0:	0151      	lsls	r1, r2, #5
 8005da2:	68fa      	ldr	r2, [r7, #12]
 8005da4:	440a      	add	r2, r1
 8005da6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005daa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005dae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005db2:	6013      	str	r3, [r2, #0]
 8005db4:	e036      	b.n	8005e24 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005dbc:	69da      	ldr	r2, [r3, #28]
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	781b      	ldrb	r3, [r3, #0]
 8005dc2:	f003 030f 	and.w	r3, r3, #15
 8005dc6:	2101      	movs	r1, #1
 8005dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8005dcc:	041b      	lsls	r3, r3, #16
 8005dce:	68f9      	ldr	r1, [r7, #12]
 8005dd0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	015a      	lsls	r2, r3, #5
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	4413      	add	r3, r2
 8005de0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d11a      	bne.n	8005e24 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	015a      	lsls	r2, r3, #5
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	4413      	add	r3, r2
 8005df6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	791b      	ldrb	r3, [r3, #4]
 8005e08:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005e0a:	430b      	orrs	r3, r1
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	68ba      	ldr	r2, [r7, #8]
 8005e10:	0151      	lsls	r1, r2, #5
 8005e12:	68fa      	ldr	r2, [r7, #12]
 8005e14:	440a      	add	r2, r1
 8005e16:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e22:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005e24:	2300      	movs	r3, #0
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3714      	adds	r7, #20
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e30:	4770      	bx	lr
	...

08005e34 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b085      	sub	sp, #20
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	785b      	ldrb	r3, [r3, #1]
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d161      	bne.n	8005f14 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	015a      	lsls	r2, r3, #5
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	4413      	add	r3, r2
 8005e58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005e62:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005e66:	d11f      	bne.n	8005ea8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	015a      	lsls	r2, r3, #5
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	4413      	add	r3, r2
 8005e70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	68ba      	ldr	r2, [r7, #8]
 8005e78:	0151      	lsls	r1, r2, #5
 8005e7a:	68fa      	ldr	r2, [r7, #12]
 8005e7c:	440a      	add	r2, r1
 8005e7e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e82:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005e86:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	015a      	lsls	r2, r3, #5
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	4413      	add	r3, r2
 8005e90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	68ba      	ldr	r2, [r7, #8]
 8005e98:	0151      	lsls	r1, r2, #5
 8005e9a:	68fa      	ldr	r2, [r7, #12]
 8005e9c:	440a      	add	r2, r1
 8005e9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ea2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005ea6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005eae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	781b      	ldrb	r3, [r3, #0]
 8005eb4:	f003 030f 	and.w	r3, r3, #15
 8005eb8:	2101      	movs	r1, #1
 8005eba:	fa01 f303 	lsl.w	r3, r1, r3
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	43db      	mvns	r3, r3
 8005ec2:	68f9      	ldr	r1, [r7, #12]
 8005ec4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005ec8:	4013      	ands	r3, r2
 8005eca:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ed2:	69da      	ldr	r2, [r3, #28]
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	f003 030f 	and.w	r3, r3, #15
 8005edc:	2101      	movs	r1, #1
 8005ede:	fa01 f303 	lsl.w	r3, r1, r3
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	43db      	mvns	r3, r3
 8005ee6:	68f9      	ldr	r1, [r7, #12]
 8005ee8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005eec:	4013      	ands	r3, r2
 8005eee:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	015a      	lsls	r2, r3, #5
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	4413      	add	r3, r2
 8005ef8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	0159      	lsls	r1, r3, #5
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	440b      	add	r3, r1
 8005f06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f0a:	4619      	mov	r1, r3
 8005f0c:	4b35      	ldr	r3, [pc, #212]	@ (8005fe4 <USB_DeactivateEndpoint+0x1b0>)
 8005f0e:	4013      	ands	r3, r2
 8005f10:	600b      	str	r3, [r1, #0]
 8005f12:	e060      	b.n	8005fd6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	015a      	lsls	r2, r3, #5
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	4413      	add	r3, r2
 8005f1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005f26:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f2a:	d11f      	bne.n	8005f6c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	015a      	lsls	r2, r3, #5
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	4413      	add	r3, r2
 8005f34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	68ba      	ldr	r2, [r7, #8]
 8005f3c:	0151      	lsls	r1, r2, #5
 8005f3e:	68fa      	ldr	r2, [r7, #12]
 8005f40:	440a      	add	r2, r1
 8005f42:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f46:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005f4a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	015a      	lsls	r2, r3, #5
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	4413      	add	r3, r2
 8005f54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	68ba      	ldr	r2, [r7, #8]
 8005f5c:	0151      	lsls	r1, r2, #5
 8005f5e:	68fa      	ldr	r2, [r7, #12]
 8005f60:	440a      	add	r2, r1
 8005f62:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f66:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005f6a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f72:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	f003 030f 	and.w	r3, r3, #15
 8005f7c:	2101      	movs	r1, #1
 8005f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8005f82:	041b      	lsls	r3, r3, #16
 8005f84:	43db      	mvns	r3, r3
 8005f86:	68f9      	ldr	r1, [r7, #12]
 8005f88:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005f8c:	4013      	ands	r3, r2
 8005f8e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f96:	69da      	ldr	r2, [r3, #28]
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	f003 030f 	and.w	r3, r3, #15
 8005fa0:	2101      	movs	r1, #1
 8005fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8005fa6:	041b      	lsls	r3, r3, #16
 8005fa8:	43db      	mvns	r3, r3
 8005faa:	68f9      	ldr	r1, [r7, #12]
 8005fac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005fb0:	4013      	ands	r3, r2
 8005fb2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	015a      	lsls	r2, r3, #5
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	4413      	add	r3, r2
 8005fbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	0159      	lsls	r1, r3, #5
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	440b      	add	r3, r1
 8005fca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fce:	4619      	mov	r1, r3
 8005fd0:	4b05      	ldr	r3, [pc, #20]	@ (8005fe8 <USB_DeactivateEndpoint+0x1b4>)
 8005fd2:	4013      	ands	r3, r2
 8005fd4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005fd6:	2300      	movs	r3, #0
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3714      	adds	r7, #20
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr
 8005fe4:	ec337800 	.word	0xec337800
 8005fe8:	eff37800 	.word	0xeff37800

08005fec <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b08a      	sub	sp, #40	@ 0x28
 8005ff0:	af02      	add	r7, sp, #8
 8005ff2:	60f8      	str	r0, [r7, #12]
 8005ff4:	60b9      	str	r1, [r7, #8]
 8005ff6:	4613      	mov	r3, r2
 8005ff8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	781b      	ldrb	r3, [r3, #0]
 8006002:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	785b      	ldrb	r3, [r3, #1]
 8006008:	2b01      	cmp	r3, #1
 800600a:	f040 817f 	bne.w	800630c <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	691b      	ldr	r3, [r3, #16]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d132      	bne.n	800607c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006016:	69bb      	ldr	r3, [r7, #24]
 8006018:	015a      	lsls	r2, r3, #5
 800601a:	69fb      	ldr	r3, [r7, #28]
 800601c:	4413      	add	r3, r2
 800601e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006022:	691b      	ldr	r3, [r3, #16]
 8006024:	69ba      	ldr	r2, [r7, #24]
 8006026:	0151      	lsls	r1, r2, #5
 8006028:	69fa      	ldr	r2, [r7, #28]
 800602a:	440a      	add	r2, r1
 800602c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006030:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006034:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006038:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800603a:	69bb      	ldr	r3, [r7, #24]
 800603c:	015a      	lsls	r2, r3, #5
 800603e:	69fb      	ldr	r3, [r7, #28]
 8006040:	4413      	add	r3, r2
 8006042:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006046:	691b      	ldr	r3, [r3, #16]
 8006048:	69ba      	ldr	r2, [r7, #24]
 800604a:	0151      	lsls	r1, r2, #5
 800604c:	69fa      	ldr	r2, [r7, #28]
 800604e:	440a      	add	r2, r1
 8006050:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006054:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006058:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800605a:	69bb      	ldr	r3, [r7, #24]
 800605c:	015a      	lsls	r2, r3, #5
 800605e:	69fb      	ldr	r3, [r7, #28]
 8006060:	4413      	add	r3, r2
 8006062:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006066:	691b      	ldr	r3, [r3, #16]
 8006068:	69ba      	ldr	r2, [r7, #24]
 800606a:	0151      	lsls	r1, r2, #5
 800606c:	69fa      	ldr	r2, [r7, #28]
 800606e:	440a      	add	r2, r1
 8006070:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006074:	0cdb      	lsrs	r3, r3, #19
 8006076:	04db      	lsls	r3, r3, #19
 8006078:	6113      	str	r3, [r2, #16]
 800607a:	e097      	b.n	80061ac <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800607c:	69bb      	ldr	r3, [r7, #24]
 800607e:	015a      	lsls	r2, r3, #5
 8006080:	69fb      	ldr	r3, [r7, #28]
 8006082:	4413      	add	r3, r2
 8006084:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006088:	691b      	ldr	r3, [r3, #16]
 800608a:	69ba      	ldr	r2, [r7, #24]
 800608c:	0151      	lsls	r1, r2, #5
 800608e:	69fa      	ldr	r2, [r7, #28]
 8006090:	440a      	add	r2, r1
 8006092:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006096:	0cdb      	lsrs	r3, r3, #19
 8006098:	04db      	lsls	r3, r3, #19
 800609a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800609c:	69bb      	ldr	r3, [r7, #24]
 800609e:	015a      	lsls	r2, r3, #5
 80060a0:	69fb      	ldr	r3, [r7, #28]
 80060a2:	4413      	add	r3, r2
 80060a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	69ba      	ldr	r2, [r7, #24]
 80060ac:	0151      	lsls	r1, r2, #5
 80060ae:	69fa      	ldr	r2, [r7, #28]
 80060b0:	440a      	add	r2, r1
 80060b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060b6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80060ba:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80060be:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80060c0:	69bb      	ldr	r3, [r7, #24]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d11a      	bne.n	80060fc <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	691a      	ldr	r2, [r3, #16]
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d903      	bls.n	80060da <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	689a      	ldr	r2, [r3, #8]
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80060da:	69bb      	ldr	r3, [r7, #24]
 80060dc:	015a      	lsls	r2, r3, #5
 80060de:	69fb      	ldr	r3, [r7, #28]
 80060e0:	4413      	add	r3, r2
 80060e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060e6:	691b      	ldr	r3, [r3, #16]
 80060e8:	69ba      	ldr	r2, [r7, #24]
 80060ea:	0151      	lsls	r1, r2, #5
 80060ec:	69fa      	ldr	r2, [r7, #28]
 80060ee:	440a      	add	r2, r1
 80060f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060f4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80060f8:	6113      	str	r3, [r2, #16]
 80060fa:	e044      	b.n	8006186 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	691a      	ldr	r2, [r3, #16]
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	4413      	add	r3, r2
 8006106:	1e5a      	subs	r2, r3, #1
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006110:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8006112:	69bb      	ldr	r3, [r7, #24]
 8006114:	015a      	lsls	r2, r3, #5
 8006116:	69fb      	ldr	r3, [r7, #28]
 8006118:	4413      	add	r3, r2
 800611a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800611e:	691a      	ldr	r2, [r3, #16]
 8006120:	8afb      	ldrh	r3, [r7, #22]
 8006122:	04d9      	lsls	r1, r3, #19
 8006124:	4ba4      	ldr	r3, [pc, #656]	@ (80063b8 <USB_EPStartXfer+0x3cc>)
 8006126:	400b      	ands	r3, r1
 8006128:	69b9      	ldr	r1, [r7, #24]
 800612a:	0148      	lsls	r0, r1, #5
 800612c:	69f9      	ldr	r1, [r7, #28]
 800612e:	4401      	add	r1, r0
 8006130:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006134:	4313      	orrs	r3, r2
 8006136:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	791b      	ldrb	r3, [r3, #4]
 800613c:	2b01      	cmp	r3, #1
 800613e:	d122      	bne.n	8006186 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006140:	69bb      	ldr	r3, [r7, #24]
 8006142:	015a      	lsls	r2, r3, #5
 8006144:	69fb      	ldr	r3, [r7, #28]
 8006146:	4413      	add	r3, r2
 8006148:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800614c:	691b      	ldr	r3, [r3, #16]
 800614e:	69ba      	ldr	r2, [r7, #24]
 8006150:	0151      	lsls	r1, r2, #5
 8006152:	69fa      	ldr	r2, [r7, #28]
 8006154:	440a      	add	r2, r1
 8006156:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800615a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800615e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8006160:	69bb      	ldr	r3, [r7, #24]
 8006162:	015a      	lsls	r2, r3, #5
 8006164:	69fb      	ldr	r3, [r7, #28]
 8006166:	4413      	add	r3, r2
 8006168:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800616c:	691a      	ldr	r2, [r3, #16]
 800616e:	8afb      	ldrh	r3, [r7, #22]
 8006170:	075b      	lsls	r3, r3, #29
 8006172:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8006176:	69b9      	ldr	r1, [r7, #24]
 8006178:	0148      	lsls	r0, r1, #5
 800617a:	69f9      	ldr	r1, [r7, #28]
 800617c:	4401      	add	r1, r0
 800617e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006182:	4313      	orrs	r3, r2
 8006184:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006186:	69bb      	ldr	r3, [r7, #24]
 8006188:	015a      	lsls	r2, r3, #5
 800618a:	69fb      	ldr	r3, [r7, #28]
 800618c:	4413      	add	r3, r2
 800618e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006192:	691a      	ldr	r2, [r3, #16]
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	691b      	ldr	r3, [r3, #16]
 8006198:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800619c:	69b9      	ldr	r1, [r7, #24]
 800619e:	0148      	lsls	r0, r1, #5
 80061a0:	69f9      	ldr	r1, [r7, #28]
 80061a2:	4401      	add	r1, r0
 80061a4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80061a8:	4313      	orrs	r3, r2
 80061aa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80061ac:	79fb      	ldrb	r3, [r7, #7]
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d14b      	bne.n	800624a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	69db      	ldr	r3, [r3, #28]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d009      	beq.n	80061ce <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80061ba:	69bb      	ldr	r3, [r7, #24]
 80061bc:	015a      	lsls	r2, r3, #5
 80061be:	69fb      	ldr	r3, [r7, #28]
 80061c0:	4413      	add	r3, r2
 80061c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061c6:	461a      	mov	r2, r3
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	69db      	ldr	r3, [r3, #28]
 80061cc:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	791b      	ldrb	r3, [r3, #4]
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d128      	bne.n	8006228 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80061d6:	69fb      	ldr	r3, [r7, #28]
 80061d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d110      	bne.n	8006208 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	015a      	lsls	r2, r3, #5
 80061ea:	69fb      	ldr	r3, [r7, #28]
 80061ec:	4413      	add	r3, r2
 80061ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	69ba      	ldr	r2, [r7, #24]
 80061f6:	0151      	lsls	r1, r2, #5
 80061f8:	69fa      	ldr	r2, [r7, #28]
 80061fa:	440a      	add	r2, r1
 80061fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006200:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006204:	6013      	str	r3, [r2, #0]
 8006206:	e00f      	b.n	8006228 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006208:	69bb      	ldr	r3, [r7, #24]
 800620a:	015a      	lsls	r2, r3, #5
 800620c:	69fb      	ldr	r3, [r7, #28]
 800620e:	4413      	add	r3, r2
 8006210:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	69ba      	ldr	r2, [r7, #24]
 8006218:	0151      	lsls	r1, r2, #5
 800621a:	69fa      	ldr	r2, [r7, #28]
 800621c:	440a      	add	r2, r1
 800621e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006222:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006226:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006228:	69bb      	ldr	r3, [r7, #24]
 800622a:	015a      	lsls	r2, r3, #5
 800622c:	69fb      	ldr	r3, [r7, #28]
 800622e:	4413      	add	r3, r2
 8006230:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	69ba      	ldr	r2, [r7, #24]
 8006238:	0151      	lsls	r1, r2, #5
 800623a:	69fa      	ldr	r2, [r7, #28]
 800623c:	440a      	add	r2, r1
 800623e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006242:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006246:	6013      	str	r3, [r2, #0]
 8006248:	e166      	b.n	8006518 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800624a:	69bb      	ldr	r3, [r7, #24]
 800624c:	015a      	lsls	r2, r3, #5
 800624e:	69fb      	ldr	r3, [r7, #28]
 8006250:	4413      	add	r3, r2
 8006252:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	69ba      	ldr	r2, [r7, #24]
 800625a:	0151      	lsls	r1, r2, #5
 800625c:	69fa      	ldr	r2, [r7, #28]
 800625e:	440a      	add	r2, r1
 8006260:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006264:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006268:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	791b      	ldrb	r3, [r3, #4]
 800626e:	2b01      	cmp	r3, #1
 8006270:	d015      	beq.n	800629e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	691b      	ldr	r3, [r3, #16]
 8006276:	2b00      	cmp	r3, #0
 8006278:	f000 814e 	beq.w	8006518 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800627c:	69fb      	ldr	r3, [r7, #28]
 800627e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006282:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	f003 030f 	and.w	r3, r3, #15
 800628c:	2101      	movs	r1, #1
 800628e:	fa01 f303 	lsl.w	r3, r1, r3
 8006292:	69f9      	ldr	r1, [r7, #28]
 8006294:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006298:	4313      	orrs	r3, r2
 800629a:	634b      	str	r3, [r1, #52]	@ 0x34
 800629c:	e13c      	b.n	8006518 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800629e:	69fb      	ldr	r3, [r7, #28]
 80062a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d110      	bne.n	80062d0 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80062ae:	69bb      	ldr	r3, [r7, #24]
 80062b0:	015a      	lsls	r2, r3, #5
 80062b2:	69fb      	ldr	r3, [r7, #28]
 80062b4:	4413      	add	r3, r2
 80062b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	69ba      	ldr	r2, [r7, #24]
 80062be:	0151      	lsls	r1, r2, #5
 80062c0:	69fa      	ldr	r2, [r7, #28]
 80062c2:	440a      	add	r2, r1
 80062c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062c8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80062cc:	6013      	str	r3, [r2, #0]
 80062ce:	e00f      	b.n	80062f0 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80062d0:	69bb      	ldr	r3, [r7, #24]
 80062d2:	015a      	lsls	r2, r3, #5
 80062d4:	69fb      	ldr	r3, [r7, #28]
 80062d6:	4413      	add	r3, r2
 80062d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	69ba      	ldr	r2, [r7, #24]
 80062e0:	0151      	lsls	r1, r2, #5
 80062e2:	69fa      	ldr	r2, [r7, #28]
 80062e4:	440a      	add	r2, r1
 80062e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062ee:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	68d9      	ldr	r1, [r3, #12]
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	781a      	ldrb	r2, [r3, #0]
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	691b      	ldr	r3, [r3, #16]
 80062fc:	b298      	uxth	r0, r3
 80062fe:	79fb      	ldrb	r3, [r7, #7]
 8006300:	9300      	str	r3, [sp, #0]
 8006302:	4603      	mov	r3, r0
 8006304:	68f8      	ldr	r0, [r7, #12]
 8006306:	f000 f9b9 	bl	800667c <USB_WritePacket>
 800630a:	e105      	b.n	8006518 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800630c:	69bb      	ldr	r3, [r7, #24]
 800630e:	015a      	lsls	r2, r3, #5
 8006310:	69fb      	ldr	r3, [r7, #28]
 8006312:	4413      	add	r3, r2
 8006314:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006318:	691b      	ldr	r3, [r3, #16]
 800631a:	69ba      	ldr	r2, [r7, #24]
 800631c:	0151      	lsls	r1, r2, #5
 800631e:	69fa      	ldr	r2, [r7, #28]
 8006320:	440a      	add	r2, r1
 8006322:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006326:	0cdb      	lsrs	r3, r3, #19
 8006328:	04db      	lsls	r3, r3, #19
 800632a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800632c:	69bb      	ldr	r3, [r7, #24]
 800632e:	015a      	lsls	r2, r3, #5
 8006330:	69fb      	ldr	r3, [r7, #28]
 8006332:	4413      	add	r3, r2
 8006334:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006338:	691b      	ldr	r3, [r3, #16]
 800633a:	69ba      	ldr	r2, [r7, #24]
 800633c:	0151      	lsls	r1, r2, #5
 800633e:	69fa      	ldr	r2, [r7, #28]
 8006340:	440a      	add	r2, r1
 8006342:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006346:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800634a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800634e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006350:	69bb      	ldr	r3, [r7, #24]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d132      	bne.n	80063bc <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	691b      	ldr	r3, [r3, #16]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d003      	beq.n	8006366 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	689a      	ldr	r2, [r3, #8]
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	689a      	ldr	r2, [r3, #8]
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800636e:	69bb      	ldr	r3, [r7, #24]
 8006370:	015a      	lsls	r2, r3, #5
 8006372:	69fb      	ldr	r3, [r7, #28]
 8006374:	4413      	add	r3, r2
 8006376:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800637a:	691a      	ldr	r2, [r3, #16]
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	6a1b      	ldr	r3, [r3, #32]
 8006380:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006384:	69b9      	ldr	r1, [r7, #24]
 8006386:	0148      	lsls	r0, r1, #5
 8006388:	69f9      	ldr	r1, [r7, #28]
 800638a:	4401      	add	r1, r0
 800638c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006390:	4313      	orrs	r3, r2
 8006392:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006394:	69bb      	ldr	r3, [r7, #24]
 8006396:	015a      	lsls	r2, r3, #5
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	4413      	add	r3, r2
 800639c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063a0:	691b      	ldr	r3, [r3, #16]
 80063a2:	69ba      	ldr	r2, [r7, #24]
 80063a4:	0151      	lsls	r1, r2, #5
 80063a6:	69fa      	ldr	r2, [r7, #28]
 80063a8:	440a      	add	r2, r1
 80063aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80063ae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80063b2:	6113      	str	r3, [r2, #16]
 80063b4:	e062      	b.n	800647c <USB_EPStartXfer+0x490>
 80063b6:	bf00      	nop
 80063b8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	691b      	ldr	r3, [r3, #16]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d123      	bne.n	800640c <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80063c4:	69bb      	ldr	r3, [r7, #24]
 80063c6:	015a      	lsls	r2, r3, #5
 80063c8:	69fb      	ldr	r3, [r7, #28]
 80063ca:	4413      	add	r3, r2
 80063cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063d0:	691a      	ldr	r2, [r3, #16]
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063da:	69b9      	ldr	r1, [r7, #24]
 80063dc:	0148      	lsls	r0, r1, #5
 80063de:	69f9      	ldr	r1, [r7, #28]
 80063e0:	4401      	add	r1, r0
 80063e2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80063e6:	4313      	orrs	r3, r2
 80063e8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80063ea:	69bb      	ldr	r3, [r7, #24]
 80063ec:	015a      	lsls	r2, r3, #5
 80063ee:	69fb      	ldr	r3, [r7, #28]
 80063f0:	4413      	add	r3, r2
 80063f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063f6:	691b      	ldr	r3, [r3, #16]
 80063f8:	69ba      	ldr	r2, [r7, #24]
 80063fa:	0151      	lsls	r1, r2, #5
 80063fc:	69fa      	ldr	r2, [r7, #28]
 80063fe:	440a      	add	r2, r1
 8006400:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006404:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006408:	6113      	str	r3, [r2, #16]
 800640a:	e037      	b.n	800647c <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	691a      	ldr	r2, [r3, #16]
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	4413      	add	r3, r2
 8006416:	1e5a      	subs	r2, r3, #1
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006420:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	689b      	ldr	r3, [r3, #8]
 8006426:	8afa      	ldrh	r2, [r7, #22]
 8006428:	fb03 f202 	mul.w	r2, r3, r2
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006430:	69bb      	ldr	r3, [r7, #24]
 8006432:	015a      	lsls	r2, r3, #5
 8006434:	69fb      	ldr	r3, [r7, #28]
 8006436:	4413      	add	r3, r2
 8006438:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800643c:	691a      	ldr	r2, [r3, #16]
 800643e:	8afb      	ldrh	r3, [r7, #22]
 8006440:	04d9      	lsls	r1, r3, #19
 8006442:	4b38      	ldr	r3, [pc, #224]	@ (8006524 <USB_EPStartXfer+0x538>)
 8006444:	400b      	ands	r3, r1
 8006446:	69b9      	ldr	r1, [r7, #24]
 8006448:	0148      	lsls	r0, r1, #5
 800644a:	69f9      	ldr	r1, [r7, #28]
 800644c:	4401      	add	r1, r0
 800644e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006452:	4313      	orrs	r3, r2
 8006454:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006456:	69bb      	ldr	r3, [r7, #24]
 8006458:	015a      	lsls	r2, r3, #5
 800645a:	69fb      	ldr	r3, [r7, #28]
 800645c:	4413      	add	r3, r2
 800645e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006462:	691a      	ldr	r2, [r3, #16]
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	6a1b      	ldr	r3, [r3, #32]
 8006468:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800646c:	69b9      	ldr	r1, [r7, #24]
 800646e:	0148      	lsls	r0, r1, #5
 8006470:	69f9      	ldr	r1, [r7, #28]
 8006472:	4401      	add	r1, r0
 8006474:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006478:	4313      	orrs	r3, r2
 800647a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800647c:	79fb      	ldrb	r3, [r7, #7]
 800647e:	2b01      	cmp	r3, #1
 8006480:	d10d      	bne.n	800649e <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	68db      	ldr	r3, [r3, #12]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d009      	beq.n	800649e <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	68d9      	ldr	r1, [r3, #12]
 800648e:	69bb      	ldr	r3, [r7, #24]
 8006490:	015a      	lsls	r2, r3, #5
 8006492:	69fb      	ldr	r3, [r7, #28]
 8006494:	4413      	add	r3, r2
 8006496:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800649a:	460a      	mov	r2, r1
 800649c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	791b      	ldrb	r3, [r3, #4]
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d128      	bne.n	80064f8 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80064a6:	69fb      	ldr	r3, [r7, #28]
 80064a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d110      	bne.n	80064d8 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80064b6:	69bb      	ldr	r3, [r7, #24]
 80064b8:	015a      	lsls	r2, r3, #5
 80064ba:	69fb      	ldr	r3, [r7, #28]
 80064bc:	4413      	add	r3, r2
 80064be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	69ba      	ldr	r2, [r7, #24]
 80064c6:	0151      	lsls	r1, r2, #5
 80064c8:	69fa      	ldr	r2, [r7, #28]
 80064ca:	440a      	add	r2, r1
 80064cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064d0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80064d4:	6013      	str	r3, [r2, #0]
 80064d6:	e00f      	b.n	80064f8 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80064d8:	69bb      	ldr	r3, [r7, #24]
 80064da:	015a      	lsls	r2, r3, #5
 80064dc:	69fb      	ldr	r3, [r7, #28]
 80064de:	4413      	add	r3, r2
 80064e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	69ba      	ldr	r2, [r7, #24]
 80064e8:	0151      	lsls	r1, r2, #5
 80064ea:	69fa      	ldr	r2, [r7, #28]
 80064ec:	440a      	add	r2, r1
 80064ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80064f6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80064f8:	69bb      	ldr	r3, [r7, #24]
 80064fa:	015a      	lsls	r2, r3, #5
 80064fc:	69fb      	ldr	r3, [r7, #28]
 80064fe:	4413      	add	r3, r2
 8006500:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	69ba      	ldr	r2, [r7, #24]
 8006508:	0151      	lsls	r1, r2, #5
 800650a:	69fa      	ldr	r2, [r7, #28]
 800650c:	440a      	add	r2, r1
 800650e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006512:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006516:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006518:	2300      	movs	r3, #0
}
 800651a:	4618      	mov	r0, r3
 800651c:	3720      	adds	r7, #32
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}
 8006522:	bf00      	nop
 8006524:	1ff80000 	.word	0x1ff80000

08006528 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006528:	b480      	push	{r7}
 800652a:	b087      	sub	sp, #28
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006532:	2300      	movs	r3, #0
 8006534:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006536:	2300      	movs	r3, #0
 8006538:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	785b      	ldrb	r3, [r3, #1]
 8006542:	2b01      	cmp	r3, #1
 8006544:	d14a      	bne.n	80065dc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	781b      	ldrb	r3, [r3, #0]
 800654a:	015a      	lsls	r2, r3, #5
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	4413      	add	r3, r2
 8006550:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800655a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800655e:	f040 8086 	bne.w	800666e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	781b      	ldrb	r3, [r3, #0]
 8006566:	015a      	lsls	r2, r3, #5
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	4413      	add	r3, r2
 800656c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	683a      	ldr	r2, [r7, #0]
 8006574:	7812      	ldrb	r2, [r2, #0]
 8006576:	0151      	lsls	r1, r2, #5
 8006578:	693a      	ldr	r2, [r7, #16]
 800657a:	440a      	add	r2, r1
 800657c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006580:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006584:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	015a      	lsls	r2, r3, #5
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	4413      	add	r3, r2
 8006590:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	683a      	ldr	r2, [r7, #0]
 8006598:	7812      	ldrb	r2, [r2, #0]
 800659a:	0151      	lsls	r1, r2, #5
 800659c:	693a      	ldr	r2, [r7, #16]
 800659e:	440a      	add	r2, r1
 80065a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80065a4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80065a8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	3301      	adds	r3, #1
 80065ae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d902      	bls.n	80065c0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	75fb      	strb	r3, [r7, #23]
          break;
 80065be:	e056      	b.n	800666e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	015a      	lsls	r2, r3, #5
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	4413      	add	r3, r2
 80065ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80065d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80065d8:	d0e7      	beq.n	80065aa <USB_EPStopXfer+0x82>
 80065da:	e048      	b.n	800666e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	781b      	ldrb	r3, [r3, #0]
 80065e0:	015a      	lsls	r2, r3, #5
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	4413      	add	r3, r2
 80065e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80065f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80065f4:	d13b      	bne.n	800666e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	781b      	ldrb	r3, [r3, #0]
 80065fa:	015a      	lsls	r2, r3, #5
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	4413      	add	r3, r2
 8006600:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	683a      	ldr	r2, [r7, #0]
 8006608:	7812      	ldrb	r2, [r2, #0]
 800660a:	0151      	lsls	r1, r2, #5
 800660c:	693a      	ldr	r2, [r7, #16]
 800660e:	440a      	add	r2, r1
 8006610:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006614:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006618:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	781b      	ldrb	r3, [r3, #0]
 800661e:	015a      	lsls	r2, r3, #5
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	4413      	add	r3, r2
 8006624:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	683a      	ldr	r2, [r7, #0]
 800662c:	7812      	ldrb	r2, [r2, #0]
 800662e:	0151      	lsls	r1, r2, #5
 8006630:	693a      	ldr	r2, [r7, #16]
 8006632:	440a      	add	r2, r1
 8006634:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006638:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800663c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	3301      	adds	r3, #1
 8006642:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f242 7210 	movw	r2, #10000	@ 0x2710
 800664a:	4293      	cmp	r3, r2
 800664c:	d902      	bls.n	8006654 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800664e:	2301      	movs	r3, #1
 8006650:	75fb      	strb	r3, [r7, #23]
          break;
 8006652:	e00c      	b.n	800666e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	015a      	lsls	r2, r3, #5
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	4413      	add	r3, r2
 800665e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006668:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800666c:	d0e7      	beq.n	800663e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800666e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006670:	4618      	mov	r0, r3
 8006672:	371c      	adds	r7, #28
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr

0800667c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800667c:	b480      	push	{r7}
 800667e:	b089      	sub	sp, #36	@ 0x24
 8006680:	af00      	add	r7, sp, #0
 8006682:	60f8      	str	r0, [r7, #12]
 8006684:	60b9      	str	r1, [r7, #8]
 8006686:	4611      	mov	r1, r2
 8006688:	461a      	mov	r2, r3
 800668a:	460b      	mov	r3, r1
 800668c:	71fb      	strb	r3, [r7, #7]
 800668e:	4613      	mov	r3, r2
 8006690:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800669a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d123      	bne.n	80066ea <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80066a2:	88bb      	ldrh	r3, [r7, #4]
 80066a4:	3303      	adds	r3, #3
 80066a6:	089b      	lsrs	r3, r3, #2
 80066a8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80066aa:	2300      	movs	r3, #0
 80066ac:	61bb      	str	r3, [r7, #24]
 80066ae:	e018      	b.n	80066e2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80066b0:	79fb      	ldrb	r3, [r7, #7]
 80066b2:	031a      	lsls	r2, r3, #12
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	4413      	add	r3, r2
 80066b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066bc:	461a      	mov	r2, r3
 80066be:	69fb      	ldr	r3, [r7, #28]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80066c4:	69fb      	ldr	r3, [r7, #28]
 80066c6:	3301      	adds	r3, #1
 80066c8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80066ca:	69fb      	ldr	r3, [r7, #28]
 80066cc:	3301      	adds	r3, #1
 80066ce:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80066d0:	69fb      	ldr	r3, [r7, #28]
 80066d2:	3301      	adds	r3, #1
 80066d4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80066d6:	69fb      	ldr	r3, [r7, #28]
 80066d8:	3301      	adds	r3, #1
 80066da:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80066dc:	69bb      	ldr	r3, [r7, #24]
 80066de:	3301      	adds	r3, #1
 80066e0:	61bb      	str	r3, [r7, #24]
 80066e2:	69ba      	ldr	r2, [r7, #24]
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d3e2      	bcc.n	80066b0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80066ea:	2300      	movs	r3, #0
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3724      	adds	r7, #36	@ 0x24
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr

080066f8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b08b      	sub	sp, #44	@ 0x2c
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	60f8      	str	r0, [r7, #12]
 8006700:	60b9      	str	r1, [r7, #8]
 8006702:	4613      	mov	r3, r2
 8006704:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800670e:	88fb      	ldrh	r3, [r7, #6]
 8006710:	089b      	lsrs	r3, r3, #2
 8006712:	b29b      	uxth	r3, r3
 8006714:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006716:	88fb      	ldrh	r3, [r7, #6]
 8006718:	f003 0303 	and.w	r3, r3, #3
 800671c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800671e:	2300      	movs	r3, #0
 8006720:	623b      	str	r3, [r7, #32]
 8006722:	e014      	b.n	800674e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006724:	69bb      	ldr	r3, [r7, #24]
 8006726:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800672e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006732:	3301      	adds	r3, #1
 8006734:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006738:	3301      	adds	r3, #1
 800673a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800673c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800673e:	3301      	adds	r3, #1
 8006740:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006744:	3301      	adds	r3, #1
 8006746:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006748:	6a3b      	ldr	r3, [r7, #32]
 800674a:	3301      	adds	r3, #1
 800674c:	623b      	str	r3, [r7, #32]
 800674e:	6a3a      	ldr	r2, [r7, #32]
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	429a      	cmp	r2, r3
 8006754:	d3e6      	bcc.n	8006724 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006756:	8bfb      	ldrh	r3, [r7, #30]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d01e      	beq.n	800679a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800675c:	2300      	movs	r3, #0
 800675e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006760:	69bb      	ldr	r3, [r7, #24]
 8006762:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006766:	461a      	mov	r2, r3
 8006768:	f107 0310 	add.w	r3, r7, #16
 800676c:	6812      	ldr	r2, [r2, #0]
 800676e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006770:	693a      	ldr	r2, [r7, #16]
 8006772:	6a3b      	ldr	r3, [r7, #32]
 8006774:	b2db      	uxtb	r3, r3
 8006776:	00db      	lsls	r3, r3, #3
 8006778:	fa22 f303 	lsr.w	r3, r2, r3
 800677c:	b2da      	uxtb	r2, r3
 800677e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006780:	701a      	strb	r2, [r3, #0]
      i++;
 8006782:	6a3b      	ldr	r3, [r7, #32]
 8006784:	3301      	adds	r3, #1
 8006786:	623b      	str	r3, [r7, #32]
      pDest++;
 8006788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800678a:	3301      	adds	r3, #1
 800678c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800678e:	8bfb      	ldrh	r3, [r7, #30]
 8006790:	3b01      	subs	r3, #1
 8006792:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006794:	8bfb      	ldrh	r3, [r7, #30]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d1ea      	bne.n	8006770 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800679a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800679c:	4618      	mov	r0, r3
 800679e:	372c      	adds	r7, #44	@ 0x2c
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr

080067a8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b085      	sub	sp, #20
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	781b      	ldrb	r3, [r3, #0]
 80067ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	785b      	ldrb	r3, [r3, #1]
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d12c      	bne.n	800681e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	015a      	lsls	r2, r3, #5
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	4413      	add	r3, r2
 80067cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	db12      	blt.n	80067fc <USB_EPSetStall+0x54>
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d00f      	beq.n	80067fc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	015a      	lsls	r2, r3, #5
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	4413      	add	r3, r2
 80067e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	68ba      	ldr	r2, [r7, #8]
 80067ec:	0151      	lsls	r1, r2, #5
 80067ee:	68fa      	ldr	r2, [r7, #12]
 80067f0:	440a      	add	r2, r1
 80067f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80067f6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80067fa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	015a      	lsls	r2, r3, #5
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	4413      	add	r3, r2
 8006804:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	68ba      	ldr	r2, [r7, #8]
 800680c:	0151      	lsls	r1, r2, #5
 800680e:	68fa      	ldr	r2, [r7, #12]
 8006810:	440a      	add	r2, r1
 8006812:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006816:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800681a:	6013      	str	r3, [r2, #0]
 800681c:	e02b      	b.n	8006876 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	015a      	lsls	r2, r3, #5
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	4413      	add	r3, r2
 8006826:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	2b00      	cmp	r3, #0
 800682e:	db12      	blt.n	8006856 <USB_EPSetStall+0xae>
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d00f      	beq.n	8006856 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	015a      	lsls	r2, r3, #5
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	4413      	add	r3, r2
 800683e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	68ba      	ldr	r2, [r7, #8]
 8006846:	0151      	lsls	r1, r2, #5
 8006848:	68fa      	ldr	r2, [r7, #12]
 800684a:	440a      	add	r2, r1
 800684c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006850:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006854:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	015a      	lsls	r2, r3, #5
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	4413      	add	r3, r2
 800685e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	68ba      	ldr	r2, [r7, #8]
 8006866:	0151      	lsls	r1, r2, #5
 8006868:	68fa      	ldr	r2, [r7, #12]
 800686a:	440a      	add	r2, r1
 800686c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006870:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006874:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006876:	2300      	movs	r3, #0
}
 8006878:	4618      	mov	r0, r3
 800687a:	3714      	adds	r7, #20
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr

08006884 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006884:	b480      	push	{r7}
 8006886:	b085      	sub	sp, #20
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	781b      	ldrb	r3, [r3, #0]
 8006896:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	785b      	ldrb	r3, [r3, #1]
 800689c:	2b01      	cmp	r3, #1
 800689e:	d128      	bne.n	80068f2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	015a      	lsls	r2, r3, #5
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	4413      	add	r3, r2
 80068a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	68ba      	ldr	r2, [r7, #8]
 80068b0:	0151      	lsls	r1, r2, #5
 80068b2:	68fa      	ldr	r2, [r7, #12]
 80068b4:	440a      	add	r2, r1
 80068b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068ba:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80068be:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	791b      	ldrb	r3, [r3, #4]
 80068c4:	2b03      	cmp	r3, #3
 80068c6:	d003      	beq.n	80068d0 <USB_EPClearStall+0x4c>
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	791b      	ldrb	r3, [r3, #4]
 80068cc:	2b02      	cmp	r3, #2
 80068ce:	d138      	bne.n	8006942 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	015a      	lsls	r2, r3, #5
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	4413      	add	r3, r2
 80068d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	68ba      	ldr	r2, [r7, #8]
 80068e0:	0151      	lsls	r1, r2, #5
 80068e2:	68fa      	ldr	r2, [r7, #12]
 80068e4:	440a      	add	r2, r1
 80068e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80068ee:	6013      	str	r3, [r2, #0]
 80068f0:	e027      	b.n	8006942 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	015a      	lsls	r2, r3, #5
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	4413      	add	r3, r2
 80068fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	68ba      	ldr	r2, [r7, #8]
 8006902:	0151      	lsls	r1, r2, #5
 8006904:	68fa      	ldr	r2, [r7, #12]
 8006906:	440a      	add	r2, r1
 8006908:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800690c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006910:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	791b      	ldrb	r3, [r3, #4]
 8006916:	2b03      	cmp	r3, #3
 8006918:	d003      	beq.n	8006922 <USB_EPClearStall+0x9e>
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	791b      	ldrb	r3, [r3, #4]
 800691e:	2b02      	cmp	r3, #2
 8006920:	d10f      	bne.n	8006942 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	015a      	lsls	r2, r3, #5
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	4413      	add	r3, r2
 800692a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	68ba      	ldr	r2, [r7, #8]
 8006932:	0151      	lsls	r1, r2, #5
 8006934:	68fa      	ldr	r2, [r7, #12]
 8006936:	440a      	add	r2, r1
 8006938:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800693c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006940:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006942:	2300      	movs	r3, #0
}
 8006944:	4618      	mov	r0, r3
 8006946:	3714      	adds	r7, #20
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr

08006950 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006950:	b480      	push	{r7}
 8006952:	b085      	sub	sp, #20
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	460b      	mov	r3, r1
 800695a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	68fa      	ldr	r2, [r7, #12]
 800696a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800696e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006972:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	78fb      	ldrb	r3, [r7, #3]
 800697e:	011b      	lsls	r3, r3, #4
 8006980:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006984:	68f9      	ldr	r1, [r7, #12]
 8006986:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800698a:	4313      	orrs	r3, r2
 800698c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800698e:	2300      	movs	r3, #0
}
 8006990:	4618      	mov	r0, r3
 8006992:	3714      	adds	r7, #20
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr

0800699c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800699c:	b480      	push	{r7}
 800699e:	b085      	sub	sp, #20
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	68fa      	ldr	r2, [r7, #12]
 80069b2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80069b6:	f023 0303 	bic.w	r3, r3, #3
 80069ba:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	68fa      	ldr	r2, [r7, #12]
 80069c6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80069ca:	f023 0302 	bic.w	r3, r3, #2
 80069ce:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80069d0:	2300      	movs	r3, #0
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3714      	adds	r7, #20
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr

080069de <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80069de:	b480      	push	{r7}
 80069e0:	b085      	sub	sp, #20
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	68fa      	ldr	r2, [r7, #12]
 80069f4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80069f8:	f023 0303 	bic.w	r3, r3, #3
 80069fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	68fa      	ldr	r2, [r7, #12]
 8006a08:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006a0c:	f043 0302 	orr.w	r3, r3, #2
 8006a10:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006a12:	2300      	movs	r3, #0
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3714      	adds	r7, #20
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr

08006a20 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b085      	sub	sp, #20
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	695b      	ldr	r3, [r3, #20]
 8006a2c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	699b      	ldr	r3, [r3, #24]
 8006a32:	68fa      	ldr	r2, [r7, #12]
 8006a34:	4013      	ands	r3, r2
 8006a36:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006a38:	68fb      	ldr	r3, [r7, #12]
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3714      	adds	r7, #20
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr

08006a46 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006a46:	b480      	push	{r7}
 8006a48:	b085      	sub	sp, #20
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a58:	699b      	ldr	r3, [r3, #24]
 8006a5a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a62:	69db      	ldr	r3, [r3, #28]
 8006a64:	68ba      	ldr	r2, [r7, #8]
 8006a66:	4013      	ands	r3, r2
 8006a68:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	0c1b      	lsrs	r3, r3, #16
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3714      	adds	r7, #20
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr

08006a7a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006a7a:	b480      	push	{r7}
 8006a7c:	b085      	sub	sp, #20
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a8c:	699b      	ldr	r3, [r3, #24]
 8006a8e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a96:	69db      	ldr	r3, [r3, #28]
 8006a98:	68ba      	ldr	r2, [r7, #8]
 8006a9a:	4013      	ands	r3, r2
 8006a9c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	b29b      	uxth	r3, r3
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3714      	adds	r7, #20
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr

08006aae <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006aae:	b480      	push	{r7}
 8006ab0:	b085      	sub	sp, #20
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	6078      	str	r0, [r7, #4]
 8006ab6:	460b      	mov	r3, r1
 8006ab8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006abe:	78fb      	ldrb	r3, [r7, #3]
 8006ac0:	015a      	lsls	r2, r3, #5
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	4413      	add	r3, r2
 8006ac6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ad4:	695b      	ldr	r3, [r3, #20]
 8006ad6:	68ba      	ldr	r2, [r7, #8]
 8006ad8:	4013      	ands	r3, r2
 8006ada:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006adc:	68bb      	ldr	r3, [r7, #8]
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3714      	adds	r7, #20
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr

08006aea <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006aea:	b480      	push	{r7}
 8006aec:	b087      	sub	sp, #28
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
 8006af2:	460b      	mov	r3, r1
 8006af4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b00:	691b      	ldr	r3, [r3, #16]
 8006b02:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b0c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006b0e:	78fb      	ldrb	r3, [r7, #3]
 8006b10:	f003 030f 	and.w	r3, r3, #15
 8006b14:	68fa      	ldr	r2, [r7, #12]
 8006b16:	fa22 f303 	lsr.w	r3, r2, r3
 8006b1a:	01db      	lsls	r3, r3, #7
 8006b1c:	b2db      	uxtb	r3, r3
 8006b1e:	693a      	ldr	r2, [r7, #16]
 8006b20:	4313      	orrs	r3, r2
 8006b22:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006b24:	78fb      	ldrb	r3, [r7, #3]
 8006b26:	015a      	lsls	r2, r3, #5
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	4413      	add	r3, r2
 8006b2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b30:	689b      	ldr	r3, [r3, #8]
 8006b32:	693a      	ldr	r2, [r7, #16]
 8006b34:	4013      	ands	r3, r2
 8006b36:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006b38:	68bb      	ldr	r3, [r7, #8]
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	371c      	adds	r7, #28
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr

08006b46 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006b46:	b480      	push	{r7}
 8006b48:	b083      	sub	sp, #12
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	695b      	ldr	r3, [r3, #20]
 8006b52:	f003 0301 	and.w	r3, r3, #1
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	370c      	adds	r7, #12
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr

08006b62 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006b62:	b480      	push	{r7}
 8006b64:	b085      	sub	sp, #20
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	68fa      	ldr	r2, [r7, #12]
 8006b78:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b7c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006b80:	f023 0307 	bic.w	r3, r3, #7
 8006b84:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	68fa      	ldr	r2, [r7, #12]
 8006b90:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006b94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b98:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006b9a:	2300      	movs	r3, #0
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3714      	adds	r7, #20
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba6:	4770      	bx	lr

08006ba8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b087      	sub	sp, #28
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	60f8      	str	r0, [r7, #12]
 8006bb0:	460b      	mov	r3, r1
 8006bb2:	607a      	str	r2, [r7, #4]
 8006bb4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	333c      	adds	r3, #60	@ 0x3c
 8006bbe:	3304      	adds	r3, #4
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	4a26      	ldr	r2, [pc, #152]	@ (8006c60 <USB_EP0_OutStart+0xb8>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d90a      	bls.n	8006be2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006bd8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006bdc:	d101      	bne.n	8006be2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006bde:	2300      	movs	r3, #0
 8006be0:	e037      	b.n	8006c52 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006be8:	461a      	mov	r2, r3
 8006bea:	2300      	movs	r3, #0
 8006bec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bf4:	691b      	ldr	r3, [r3, #16]
 8006bf6:	697a      	ldr	r2, [r7, #20]
 8006bf8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006bfc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006c00:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c08:	691b      	ldr	r3, [r3, #16]
 8006c0a:	697a      	ldr	r2, [r7, #20]
 8006c0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c10:	f043 0318 	orr.w	r3, r3, #24
 8006c14:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c1c:	691b      	ldr	r3, [r3, #16]
 8006c1e:	697a      	ldr	r2, [r7, #20]
 8006c20:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c24:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006c28:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006c2a:	7afb      	ldrb	r3, [r7, #11]
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	d10f      	bne.n	8006c50 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c36:	461a      	mov	r2, r3
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	697a      	ldr	r2, [r7, #20]
 8006c46:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c4a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8006c4e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006c50:	2300      	movs	r3, #0
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	371c      	adds	r7, #28
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr
 8006c5e:	bf00      	nop
 8006c60:	4f54300a 	.word	0x4f54300a

08006c64 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b085      	sub	sp, #20
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	3301      	adds	r3, #1
 8006c74:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006c7c:	d901      	bls.n	8006c82 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006c7e:	2303      	movs	r3, #3
 8006c80:	e022      	b.n	8006cc8 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	691b      	ldr	r3, [r3, #16]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	daf2      	bge.n	8006c70 <USB_CoreReset+0xc>

  count = 10U;
 8006c8a:	230a      	movs	r3, #10
 8006c8c:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8006c8e:	e002      	b.n	8006c96 <USB_CoreReset+0x32>
  {
    count--;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	3b01      	subs	r3, #1
 8006c94:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d1f9      	bne.n	8006c90 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	691b      	ldr	r3, [r3, #16]
 8006ca0:	f043 0201 	orr.w	r2, r3, #1
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	3301      	adds	r3, #1
 8006cac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006cb4:	d901      	bls.n	8006cba <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8006cb6:	2303      	movs	r3, #3
 8006cb8:	e006      	b.n	8006cc8 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	691b      	ldr	r3, [r3, #16]
 8006cbe:	f003 0301 	and.w	r3, r3, #1
 8006cc2:	2b01      	cmp	r3, #1
 8006cc4:	d0f0      	beq.n	8006ca8 <USB_CoreReset+0x44>

  return HAL_OK;
 8006cc6:	2300      	movs	r3, #0
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3714      	adds	r7, #20
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr

08006cd4 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8006cd4:	b5b0      	push	{r4, r5, r7, lr}
 8006cd6:	b08c      	sub	sp, #48	@ 0x30
 8006cd8:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8006cda:	4b8f      	ldr	r3, [pc, #572]	@ (8006f18 <MX_LWIP_Init+0x244>)
 8006cdc:	22c0      	movs	r2, #192	@ 0xc0
 8006cde:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8006ce0:	4b8d      	ldr	r3, [pc, #564]	@ (8006f18 <MX_LWIP_Init+0x244>)
 8006ce2:	22a8      	movs	r2, #168	@ 0xa8
 8006ce4:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 2;
 8006ce6:	4b8c      	ldr	r3, [pc, #560]	@ (8006f18 <MX_LWIP_Init+0x244>)
 8006ce8:	2202      	movs	r2, #2
 8006cea:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 4;
 8006cec:	4b8a      	ldr	r3, [pc, #552]	@ (8006f18 <MX_LWIP_Init+0x244>)
 8006cee:	2204      	movs	r2, #4
 8006cf0:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8006cf2:	4b8a      	ldr	r3, [pc, #552]	@ (8006f1c <MX_LWIP_Init+0x248>)
 8006cf4:	22ff      	movs	r2, #255	@ 0xff
 8006cf6:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8006cf8:	4b88      	ldr	r3, [pc, #544]	@ (8006f1c <MX_LWIP_Init+0x248>)
 8006cfa:	22ff      	movs	r2, #255	@ 0xff
 8006cfc:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8006cfe:	4b87      	ldr	r3, [pc, #540]	@ (8006f1c <MX_LWIP_Init+0x248>)
 8006d00:	22ff      	movs	r2, #255	@ 0xff
 8006d02:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8006d04:	4b85      	ldr	r3, [pc, #532]	@ (8006f1c <MX_LWIP_Init+0x248>)
 8006d06:	2200      	movs	r2, #0
 8006d08:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8006d0a:	4b85      	ldr	r3, [pc, #532]	@ (8006f20 <MX_LWIP_Init+0x24c>)
 8006d0c:	22c0      	movs	r2, #192	@ 0xc0
 8006d0e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8006d10:	4b83      	ldr	r3, [pc, #524]	@ (8006f20 <MX_LWIP_Init+0x24c>)
 8006d12:	22a8      	movs	r2, #168	@ 0xa8
 8006d14:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 2;
 8006d16:	4b82      	ldr	r3, [pc, #520]	@ (8006f20 <MX_LWIP_Init+0x24c>)
 8006d18:	2202      	movs	r2, #2
 8006d1a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8006d1c:	4b80      	ldr	r3, [pc, #512]	@ (8006f20 <MX_LWIP_Init+0x24c>)
 8006d1e:	2201      	movs	r2, #1
 8006d20:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8006d22:	2100      	movs	r1, #0
 8006d24:	2000      	movs	r0, #0
 8006d26:	f005 fddf 	bl	800c8e8 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8006d2a:	4b7b      	ldr	r3, [pc, #492]	@ (8006f18 <MX_LWIP_Init+0x244>)
 8006d2c:	781b      	ldrb	r3, [r3, #0]
 8006d2e:	061a      	lsls	r2, r3, #24
 8006d30:	4b79      	ldr	r3, [pc, #484]	@ (8006f18 <MX_LWIP_Init+0x244>)
 8006d32:	785b      	ldrb	r3, [r3, #1]
 8006d34:	041b      	lsls	r3, r3, #16
 8006d36:	431a      	orrs	r2, r3
 8006d38:	4b77      	ldr	r3, [pc, #476]	@ (8006f18 <MX_LWIP_Init+0x244>)
 8006d3a:	789b      	ldrb	r3, [r3, #2]
 8006d3c:	021b      	lsls	r3, r3, #8
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	4a75      	ldr	r2, [pc, #468]	@ (8006f18 <MX_LWIP_Init+0x244>)
 8006d42:	78d2      	ldrb	r2, [r2, #3]
 8006d44:	4313      	orrs	r3, r2
 8006d46:	061a      	lsls	r2, r3, #24
 8006d48:	4b73      	ldr	r3, [pc, #460]	@ (8006f18 <MX_LWIP_Init+0x244>)
 8006d4a:	781b      	ldrb	r3, [r3, #0]
 8006d4c:	0619      	lsls	r1, r3, #24
 8006d4e:	4b72      	ldr	r3, [pc, #456]	@ (8006f18 <MX_LWIP_Init+0x244>)
 8006d50:	785b      	ldrb	r3, [r3, #1]
 8006d52:	041b      	lsls	r3, r3, #16
 8006d54:	4319      	orrs	r1, r3
 8006d56:	4b70      	ldr	r3, [pc, #448]	@ (8006f18 <MX_LWIP_Init+0x244>)
 8006d58:	789b      	ldrb	r3, [r3, #2]
 8006d5a:	021b      	lsls	r3, r3, #8
 8006d5c:	430b      	orrs	r3, r1
 8006d5e:	496e      	ldr	r1, [pc, #440]	@ (8006f18 <MX_LWIP_Init+0x244>)
 8006d60:	78c9      	ldrb	r1, [r1, #3]
 8006d62:	430b      	orrs	r3, r1
 8006d64:	021b      	lsls	r3, r3, #8
 8006d66:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006d6a:	431a      	orrs	r2, r3
 8006d6c:	4b6a      	ldr	r3, [pc, #424]	@ (8006f18 <MX_LWIP_Init+0x244>)
 8006d6e:	781b      	ldrb	r3, [r3, #0]
 8006d70:	0619      	lsls	r1, r3, #24
 8006d72:	4b69      	ldr	r3, [pc, #420]	@ (8006f18 <MX_LWIP_Init+0x244>)
 8006d74:	785b      	ldrb	r3, [r3, #1]
 8006d76:	041b      	lsls	r3, r3, #16
 8006d78:	4319      	orrs	r1, r3
 8006d7a:	4b67      	ldr	r3, [pc, #412]	@ (8006f18 <MX_LWIP_Init+0x244>)
 8006d7c:	789b      	ldrb	r3, [r3, #2]
 8006d7e:	021b      	lsls	r3, r3, #8
 8006d80:	430b      	orrs	r3, r1
 8006d82:	4965      	ldr	r1, [pc, #404]	@ (8006f18 <MX_LWIP_Init+0x244>)
 8006d84:	78c9      	ldrb	r1, [r1, #3]
 8006d86:	430b      	orrs	r3, r1
 8006d88:	0a1b      	lsrs	r3, r3, #8
 8006d8a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006d8e:	431a      	orrs	r2, r3
 8006d90:	4b61      	ldr	r3, [pc, #388]	@ (8006f18 <MX_LWIP_Init+0x244>)
 8006d92:	781b      	ldrb	r3, [r3, #0]
 8006d94:	0619      	lsls	r1, r3, #24
 8006d96:	4b60      	ldr	r3, [pc, #384]	@ (8006f18 <MX_LWIP_Init+0x244>)
 8006d98:	785b      	ldrb	r3, [r3, #1]
 8006d9a:	041b      	lsls	r3, r3, #16
 8006d9c:	4319      	orrs	r1, r3
 8006d9e:	4b5e      	ldr	r3, [pc, #376]	@ (8006f18 <MX_LWIP_Init+0x244>)
 8006da0:	789b      	ldrb	r3, [r3, #2]
 8006da2:	021b      	lsls	r3, r3, #8
 8006da4:	430b      	orrs	r3, r1
 8006da6:	495c      	ldr	r1, [pc, #368]	@ (8006f18 <MX_LWIP_Init+0x244>)
 8006da8:	78c9      	ldrb	r1, [r1, #3]
 8006daa:	430b      	orrs	r3, r1
 8006dac:	0e1b      	lsrs	r3, r3, #24
 8006dae:	4313      	orrs	r3, r2
 8006db0:	4a5c      	ldr	r2, [pc, #368]	@ (8006f24 <MX_LWIP_Init+0x250>)
 8006db2:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8006db4:	4b59      	ldr	r3, [pc, #356]	@ (8006f1c <MX_LWIP_Init+0x248>)
 8006db6:	781b      	ldrb	r3, [r3, #0]
 8006db8:	061a      	lsls	r2, r3, #24
 8006dba:	4b58      	ldr	r3, [pc, #352]	@ (8006f1c <MX_LWIP_Init+0x248>)
 8006dbc:	785b      	ldrb	r3, [r3, #1]
 8006dbe:	041b      	lsls	r3, r3, #16
 8006dc0:	431a      	orrs	r2, r3
 8006dc2:	4b56      	ldr	r3, [pc, #344]	@ (8006f1c <MX_LWIP_Init+0x248>)
 8006dc4:	789b      	ldrb	r3, [r3, #2]
 8006dc6:	021b      	lsls	r3, r3, #8
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	4a54      	ldr	r2, [pc, #336]	@ (8006f1c <MX_LWIP_Init+0x248>)
 8006dcc:	78d2      	ldrb	r2, [r2, #3]
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	061a      	lsls	r2, r3, #24
 8006dd2:	4b52      	ldr	r3, [pc, #328]	@ (8006f1c <MX_LWIP_Init+0x248>)
 8006dd4:	781b      	ldrb	r3, [r3, #0]
 8006dd6:	0619      	lsls	r1, r3, #24
 8006dd8:	4b50      	ldr	r3, [pc, #320]	@ (8006f1c <MX_LWIP_Init+0x248>)
 8006dda:	785b      	ldrb	r3, [r3, #1]
 8006ddc:	041b      	lsls	r3, r3, #16
 8006dde:	4319      	orrs	r1, r3
 8006de0:	4b4e      	ldr	r3, [pc, #312]	@ (8006f1c <MX_LWIP_Init+0x248>)
 8006de2:	789b      	ldrb	r3, [r3, #2]
 8006de4:	021b      	lsls	r3, r3, #8
 8006de6:	430b      	orrs	r3, r1
 8006de8:	494c      	ldr	r1, [pc, #304]	@ (8006f1c <MX_LWIP_Init+0x248>)
 8006dea:	78c9      	ldrb	r1, [r1, #3]
 8006dec:	430b      	orrs	r3, r1
 8006dee:	021b      	lsls	r3, r3, #8
 8006df0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006df4:	431a      	orrs	r2, r3
 8006df6:	4b49      	ldr	r3, [pc, #292]	@ (8006f1c <MX_LWIP_Init+0x248>)
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	0619      	lsls	r1, r3, #24
 8006dfc:	4b47      	ldr	r3, [pc, #284]	@ (8006f1c <MX_LWIP_Init+0x248>)
 8006dfe:	785b      	ldrb	r3, [r3, #1]
 8006e00:	041b      	lsls	r3, r3, #16
 8006e02:	4319      	orrs	r1, r3
 8006e04:	4b45      	ldr	r3, [pc, #276]	@ (8006f1c <MX_LWIP_Init+0x248>)
 8006e06:	789b      	ldrb	r3, [r3, #2]
 8006e08:	021b      	lsls	r3, r3, #8
 8006e0a:	430b      	orrs	r3, r1
 8006e0c:	4943      	ldr	r1, [pc, #268]	@ (8006f1c <MX_LWIP_Init+0x248>)
 8006e0e:	78c9      	ldrb	r1, [r1, #3]
 8006e10:	430b      	orrs	r3, r1
 8006e12:	0a1b      	lsrs	r3, r3, #8
 8006e14:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006e18:	431a      	orrs	r2, r3
 8006e1a:	4b40      	ldr	r3, [pc, #256]	@ (8006f1c <MX_LWIP_Init+0x248>)
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	0619      	lsls	r1, r3, #24
 8006e20:	4b3e      	ldr	r3, [pc, #248]	@ (8006f1c <MX_LWIP_Init+0x248>)
 8006e22:	785b      	ldrb	r3, [r3, #1]
 8006e24:	041b      	lsls	r3, r3, #16
 8006e26:	4319      	orrs	r1, r3
 8006e28:	4b3c      	ldr	r3, [pc, #240]	@ (8006f1c <MX_LWIP_Init+0x248>)
 8006e2a:	789b      	ldrb	r3, [r3, #2]
 8006e2c:	021b      	lsls	r3, r3, #8
 8006e2e:	430b      	orrs	r3, r1
 8006e30:	493a      	ldr	r1, [pc, #232]	@ (8006f1c <MX_LWIP_Init+0x248>)
 8006e32:	78c9      	ldrb	r1, [r1, #3]
 8006e34:	430b      	orrs	r3, r1
 8006e36:	0e1b      	lsrs	r3, r3, #24
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	4a3b      	ldr	r2, [pc, #236]	@ (8006f28 <MX_LWIP_Init+0x254>)
 8006e3c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8006e3e:	4b38      	ldr	r3, [pc, #224]	@ (8006f20 <MX_LWIP_Init+0x24c>)
 8006e40:	781b      	ldrb	r3, [r3, #0]
 8006e42:	061a      	lsls	r2, r3, #24
 8006e44:	4b36      	ldr	r3, [pc, #216]	@ (8006f20 <MX_LWIP_Init+0x24c>)
 8006e46:	785b      	ldrb	r3, [r3, #1]
 8006e48:	041b      	lsls	r3, r3, #16
 8006e4a:	431a      	orrs	r2, r3
 8006e4c:	4b34      	ldr	r3, [pc, #208]	@ (8006f20 <MX_LWIP_Init+0x24c>)
 8006e4e:	789b      	ldrb	r3, [r3, #2]
 8006e50:	021b      	lsls	r3, r3, #8
 8006e52:	4313      	orrs	r3, r2
 8006e54:	4a32      	ldr	r2, [pc, #200]	@ (8006f20 <MX_LWIP_Init+0x24c>)
 8006e56:	78d2      	ldrb	r2, [r2, #3]
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	061a      	lsls	r2, r3, #24
 8006e5c:	4b30      	ldr	r3, [pc, #192]	@ (8006f20 <MX_LWIP_Init+0x24c>)
 8006e5e:	781b      	ldrb	r3, [r3, #0]
 8006e60:	0619      	lsls	r1, r3, #24
 8006e62:	4b2f      	ldr	r3, [pc, #188]	@ (8006f20 <MX_LWIP_Init+0x24c>)
 8006e64:	785b      	ldrb	r3, [r3, #1]
 8006e66:	041b      	lsls	r3, r3, #16
 8006e68:	4319      	orrs	r1, r3
 8006e6a:	4b2d      	ldr	r3, [pc, #180]	@ (8006f20 <MX_LWIP_Init+0x24c>)
 8006e6c:	789b      	ldrb	r3, [r3, #2]
 8006e6e:	021b      	lsls	r3, r3, #8
 8006e70:	430b      	orrs	r3, r1
 8006e72:	492b      	ldr	r1, [pc, #172]	@ (8006f20 <MX_LWIP_Init+0x24c>)
 8006e74:	78c9      	ldrb	r1, [r1, #3]
 8006e76:	430b      	orrs	r3, r1
 8006e78:	021b      	lsls	r3, r3, #8
 8006e7a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006e7e:	431a      	orrs	r2, r3
 8006e80:	4b27      	ldr	r3, [pc, #156]	@ (8006f20 <MX_LWIP_Init+0x24c>)
 8006e82:	781b      	ldrb	r3, [r3, #0]
 8006e84:	0619      	lsls	r1, r3, #24
 8006e86:	4b26      	ldr	r3, [pc, #152]	@ (8006f20 <MX_LWIP_Init+0x24c>)
 8006e88:	785b      	ldrb	r3, [r3, #1]
 8006e8a:	041b      	lsls	r3, r3, #16
 8006e8c:	4319      	orrs	r1, r3
 8006e8e:	4b24      	ldr	r3, [pc, #144]	@ (8006f20 <MX_LWIP_Init+0x24c>)
 8006e90:	789b      	ldrb	r3, [r3, #2]
 8006e92:	021b      	lsls	r3, r3, #8
 8006e94:	430b      	orrs	r3, r1
 8006e96:	4922      	ldr	r1, [pc, #136]	@ (8006f20 <MX_LWIP_Init+0x24c>)
 8006e98:	78c9      	ldrb	r1, [r1, #3]
 8006e9a:	430b      	orrs	r3, r1
 8006e9c:	0a1b      	lsrs	r3, r3, #8
 8006e9e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006ea2:	431a      	orrs	r2, r3
 8006ea4:	4b1e      	ldr	r3, [pc, #120]	@ (8006f20 <MX_LWIP_Init+0x24c>)
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	0619      	lsls	r1, r3, #24
 8006eaa:	4b1d      	ldr	r3, [pc, #116]	@ (8006f20 <MX_LWIP_Init+0x24c>)
 8006eac:	785b      	ldrb	r3, [r3, #1]
 8006eae:	041b      	lsls	r3, r3, #16
 8006eb0:	4319      	orrs	r1, r3
 8006eb2:	4b1b      	ldr	r3, [pc, #108]	@ (8006f20 <MX_LWIP_Init+0x24c>)
 8006eb4:	789b      	ldrb	r3, [r3, #2]
 8006eb6:	021b      	lsls	r3, r3, #8
 8006eb8:	430b      	orrs	r3, r1
 8006eba:	4919      	ldr	r1, [pc, #100]	@ (8006f20 <MX_LWIP_Init+0x24c>)
 8006ebc:	78c9      	ldrb	r1, [r1, #3]
 8006ebe:	430b      	orrs	r3, r1
 8006ec0:	0e1b      	lsrs	r3, r3, #24
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	4a19      	ldr	r2, [pc, #100]	@ (8006f2c <MX_LWIP_Init+0x258>)
 8006ec6:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8006ec8:	4b19      	ldr	r3, [pc, #100]	@ (8006f30 <MX_LWIP_Init+0x25c>)
 8006eca:	9302      	str	r3, [sp, #8]
 8006ecc:	4b19      	ldr	r3, [pc, #100]	@ (8006f34 <MX_LWIP_Init+0x260>)
 8006ece:	9301      	str	r3, [sp, #4]
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	9300      	str	r3, [sp, #0]
 8006ed4:	4b15      	ldr	r3, [pc, #84]	@ (8006f2c <MX_LWIP_Init+0x258>)
 8006ed6:	4a14      	ldr	r2, [pc, #80]	@ (8006f28 <MX_LWIP_Init+0x254>)
 8006ed8:	4912      	ldr	r1, [pc, #72]	@ (8006f24 <MX_LWIP_Init+0x250>)
 8006eda:	4817      	ldr	r0, [pc, #92]	@ (8006f38 <MX_LWIP_Init+0x264>)
 8006edc:	f006 face 	bl	800d47c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8006ee0:	4815      	ldr	r0, [pc, #84]	@ (8006f38 <MX_LWIP_Init+0x264>)
 8006ee2:	f006 fc7d 	bl	800d7e0 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8006ee6:	4814      	ldr	r0, [pc, #80]	@ (8006f38 <MX_LWIP_Init+0x264>)
 8006ee8:	f006 fc8a 	bl	800d800 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8006eec:	4913      	ldr	r1, [pc, #76]	@ (8006f3c <MX_LWIP_Init+0x268>)
 8006eee:	4812      	ldr	r0, [pc, #72]	@ (8006f38 <MX_LWIP_Init+0x264>)
 8006ef0:	f006 fd56 	bl	800d9a0 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 8006ef4:	4b12      	ldr	r3, [pc, #72]	@ (8006f40 <MX_LWIP_Init+0x26c>)
 8006ef6:	1d3c      	adds	r4, r7, #4
 8006ef8:	461d      	mov	r5, r3
 8006efa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006efc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006efe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006f02:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 8006f06:	1d3b      	adds	r3, r7, #4
 8006f08:	490b      	ldr	r1, [pc, #44]	@ (8006f38 <MX_LWIP_Init+0x264>)
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f002 fc68 	bl	80097e0 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8006f10:	bf00      	nop
 8006f12:	3720      	adds	r7, #32
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bdb0      	pop	{r4, r5, r7, pc}
 8006f18:	200005e4 	.word	0x200005e4
 8006f1c:	200005e8 	.word	0x200005e8
 8006f20:	200005ec 	.word	0x200005ec
 8006f24:	200005d8 	.word	0x200005d8
 8006f28:	200005dc 	.word	0x200005dc
 8006f2c:	200005e0 	.word	0x200005e0
 8006f30:	0800c825 	.word	0x0800c825
 8006f34:	08007565 	.word	0x08007565
 8006f38:	200005a4 	.word	0x200005a4
 8006f3c:	08006f45 	.word	0x08006f45
 8006f40:	08018638 	.word	0x08018638

08006f44 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b083      	sub	sp, #12
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8006f4c:	bf00      	nop
 8006f4e:	370c      	adds	r7, #12
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr

08006f58 <YT8512C_ReadReg>:
/* USER CODE BEGIN 0 */
extern ETH_HandleTypeDef heth;  // 声明heth以解决undeclared错误

/* YT8512C PHY 对象和IO函数 */
yt8512c_object_t yt8512c;
static int32_t YT8512C_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pData) {
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b08e      	sub	sp, #56	@ 0x38
 8006f5c:	af02      	add	r7, sp, #8
 8006f5e:	60f8      	str	r0, [r7, #12]
 8006f60:	60b9      	str	r1, [r7, #8]
 8006f62:	607a      	str	r2, [r7, #4]
    if (HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pData) == HAL_OK) {
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	68ba      	ldr	r2, [r7, #8]
 8006f68:	68f9      	ldr	r1, [r7, #12]
 8006f6a:	4814      	ldr	r0, [pc, #80]	@ (8006fbc <YT8512C_ReadReg+0x64>)
 8006f6c:	f7fa ff3e 	bl	8001dec <HAL_ETH_ReadPHYRegister>
 8006f70:	4603      	mov	r3, r0
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d118      	bne.n	8006fa8 <YT8512C_ReadReg+0x50>
        char buffer[32];
        snprintf(buffer, sizeof(buffer), "Read Reg 0x%02X: 0x%04X\r\n", RegAddr, *pData & 0xFFFF);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	f107 0010 	add.w	r0, r7, #16
 8006f80:	9300      	str	r3, [sp, #0]
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	4a0e      	ldr	r2, [pc, #56]	@ (8006fc0 <YT8512C_ReadReg+0x68>)
 8006f86:	2120      	movs	r1, #32
 8006f88:	f010 f9b6 	bl	80172f8 <sniprintf>
        CDC_Transmit_FS((uint8_t *)buffer, strlen(buffer));
 8006f8c:	f107 0310 	add.w	r3, r7, #16
 8006f90:	4618      	mov	r0, r3
 8006f92:	f7f9 f91d 	bl	80001d0 <strlen>
 8006f96:	4602      	mov	r2, r0
 8006f98:	f107 0310 	add.w	r3, r7, #16
 8006f9c:	4611      	mov	r1, r2
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f00f fc3c 	bl	801681c <CDC_Transmit_FS>
        return YT8512C_STATUS_OK;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	e005      	b.n	8006fb4 <YT8512C_ReadReg+0x5c>
    }
    CDC_Transmit_FS((uint8_t *)"Read Error\r\n", 11);
 8006fa8:	210b      	movs	r1, #11
 8006faa:	4806      	ldr	r0, [pc, #24]	@ (8006fc4 <YT8512C_ReadReg+0x6c>)
 8006fac:	f00f fc36 	bl	801681c <CDC_Transmit_FS>
    return YT8512C_STATUS_READ_ERROR;
 8006fb0:	f06f 0304 	mvn.w	r3, #4
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3730      	adds	r7, #48	@ 0x30
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}
 8006fbc:	200050e4 	.word	0x200050e4
 8006fc0:	08018654 	.word	0x08018654
 8006fc4:	08018670 	.word	0x08018670

08006fc8 <YT8512C_WriteReg>:
static int32_t YT8512C_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t Data) {
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b084      	sub	sp, #16
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	60f8      	str	r0, [r7, #12]
 8006fd0:	60b9      	str	r1, [r7, #8]
 8006fd2:	607a      	str	r2, [r7, #4]
  return (HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, Data) == HAL_OK) ? YT8512C_STATUS_OK : YT8512C_STATUS_WRITE_ERROR;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	68ba      	ldr	r2, [r7, #8]
 8006fd8:	68f9      	ldr	r1, [r7, #12]
 8006fda:	4807      	ldr	r0, [pc, #28]	@ (8006ff8 <YT8512C_WriteReg+0x30>)
 8006fdc:	f7fa ff51 	bl	8001e82 <HAL_ETH_WritePHYRegister>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d101      	bne.n	8006fea <YT8512C_WriteReg+0x22>
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	e001      	b.n	8006fee <YT8512C_WriteReg+0x26>
 8006fea:	f06f 0303 	mvn.w	r3, #3
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3710      	adds	r7, #16
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
 8006ff6:	bf00      	nop
 8006ff8:	200050e4 	.word	0x200050e4

08006ffc <YT8512C_GetTick>:
static int32_t YT8512C_GetTick(void) {  // 包装以解决类型警告
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 8007000:	f7fa fa74 	bl	80014ec <HAL_GetTick>
 8007004:	4603      	mov	r3, r0
}
 8007006:	4618      	mov	r0, r3
 8007008:	bd80      	pop	{r7, pc}

0800700a <YT8512C_Init>:
static int32_t YT8512C_Init(void) { return YT8512C_STATUS_OK; }  // 可空实现，HAL已处理
 800700a:	b480      	push	{r7}
 800700c:	af00      	add	r7, sp, #0
 800700e:	2300      	movs	r3, #0
 8007010:	4618      	mov	r0, r3
 8007012:	46bd      	mov	sp, r7
 8007014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007018:	4770      	bx	lr

0800701a <YT8512C_DeInit>:
static int32_t YT8512C_DeInit(void) { return YT8512C_STATUS_OK; }  // 可空实现
 800701a:	b480      	push	{r7}
 800701c:	af00      	add	r7, sp, #0
 800701e:	2300      	movs	r3, #0
 8007020:	4618      	mov	r0, r3
 8007022:	46bd      	mov	sp, r7
 8007024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007028:	4770      	bx	lr
	...

0800702c <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b082      	sub	sp, #8
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8007034:	4b04      	ldr	r3, [pc, #16]	@ (8007048 <HAL_ETH_RxCpltCallback+0x1c>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4618      	mov	r0, r3
 800703a:	f002 fd4d 	bl	8009ad8 <osSemaphoreRelease>
}
 800703e:	bf00      	nop
 8007040:	3708      	adds	r7, #8
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}
 8007046:	bf00      	nop
 8007048:	200050dc 	.word	0x200050dc

0800704c <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b082      	sub	sp, #8
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8007054:	4b04      	ldr	r3, [pc, #16]	@ (8007068 <HAL_ETH_TxCpltCallback+0x1c>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4618      	mov	r0, r3
 800705a:	f002 fd3d 	bl	8009ad8 <osSemaphoreRelease>
}
 800705e:	bf00      	nop
 8007060:	3708      	adds	r7, #8
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}
 8007066:	bf00      	nop
 8007068:	200050e0 	.word	0x200050e0

0800706c <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b082      	sub	sp, #8
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f7fa ff5a 	bl	8001f2e <HAL_ETH_GetDMAError>
 800707a:	4603      	mov	r3, r0
 800707c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007080:	2b80      	cmp	r3, #128	@ 0x80
 8007082:	d104      	bne.n	800708e <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8007084:	4b04      	ldr	r3, [pc, #16]	@ (8007098 <HAL_ETH_ErrorCallback+0x2c>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4618      	mov	r0, r3
 800708a:	f002 fd25 	bl	8009ad8 <osSemaphoreRelease>
  }
}
 800708e:	bf00      	nop
 8007090:	3708      	adds	r7, #8
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}
 8007096:	bf00      	nop
 8007098:	200050dc 	.word	0x200050dc

0800709c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800709c:	b5b0      	push	{r4, r5, r7, lr}
 800709e:	b0a0      	sub	sp, #128	@ 0x80
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80070a4:	2300      	movs	r3, #0
 80070a6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
/* USER CODE BEGIN low_level_init Variables Initialization for User BSP */
  yt8512c_ioc_tx_t ioctx;
  ioctx.init = YT8512C_Init;
 80070aa:	4b9e      	ldr	r3, [pc, #632]	@ (8007324 <low_level_init+0x288>)
 80070ac:	663b      	str	r3, [r7, #96]	@ 0x60
  ioctx.deinit = YT8512C_DeInit;
 80070ae:	4b9e      	ldr	r3, [pc, #632]	@ (8007328 <low_level_init+0x28c>)
 80070b0:	667b      	str	r3, [r7, #100]	@ 0x64
  ioctx.readreg = YT8512C_ReadReg;
 80070b2:	4b9e      	ldr	r3, [pc, #632]	@ (800732c <low_level_init+0x290>)
 80070b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  ioctx.writereg = YT8512C_WriteReg;
 80070b6:	4b9e      	ldr	r3, [pc, #632]	@ (8007330 <low_level_init+0x294>)
 80070b8:	66bb      	str	r3, [r7, #104]	@ 0x68
  ioctx.gettick = YT8512C_GetTick;
 80070ba:	4b9e      	ldr	r3, [pc, #632]	@ (8007334 <low_level_init+0x298>)
 80070bc:	673b      	str	r3, [r7, #112]	@ 0x70

  yt8512c_regster_bus_io(&yt8512c, &ioctx);
 80070be:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80070c2:	4619      	mov	r1, r3
 80070c4:	489c      	ldr	r0, [pc, #624]	@ (8007338 <low_level_init+0x29c>)
 80070c6:	f7fa f830 	bl	800112a <yt8512c_regster_bus_io>
  yt8512c.devaddr = YT8512C_ADDR;  // 默认0x00（替换PHY_ADDRESS）
 80070ca:	4b9b      	ldr	r3, [pc, #620]	@ (8007338 <low_level_init+0x29c>)
 80070cc:	2200      	movs	r2, #0
 80070ce:	601a      	str	r2, [r3, #0]
/* USER CODE END low_level_init Variables Initialization for User BSP */
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80070d0:	4b9a      	ldr	r3, [pc, #616]	@ (800733c <low_level_init+0x2a0>)
 80070d2:	4a9b      	ldr	r2, [pc, #620]	@ (8007340 <low_level_init+0x2a4>)
 80070d4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80070d6:	2300      	movs	r3, #0
 80070d8:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
  MACAddr[1] = 0x80;
 80070dc:	2380      	movs	r3, #128	@ 0x80
 80070de:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
  MACAddr[2] = 0xE1;
 80070e2:	23e1      	movs	r3, #225	@ 0xe1
 80070e4:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
  MACAddr[3] = 0x00;
 80070e8:	2300      	movs	r3, #0
 80070ea:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
  MACAddr[4] = 0x00;
 80070ee:	2300      	movs	r3, #0
 80070f0:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  MACAddr[5] = 0x00;
 80070f4:	2300      	movs	r3, #0
 80070f6:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  heth.Init.MACAddr = &MACAddr[0];
 80070fa:	4a90      	ldr	r2, [pc, #576]	@ (800733c <low_level_init+0x2a0>)
 80070fc:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8007100:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8007102:	4b8e      	ldr	r3, [pc, #568]	@ (800733c <low_level_init+0x2a0>)
 8007104:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8007108:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800710a:	4b8c      	ldr	r3, [pc, #560]	@ (800733c <low_level_init+0x2a0>)
 800710c:	4a8d      	ldr	r2, [pc, #564]	@ (8007344 <low_level_init+0x2a8>)
 800710e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8007110:	4b8a      	ldr	r3, [pc, #552]	@ (800733c <low_level_init+0x2a0>)
 8007112:	4a8d      	ldr	r2, [pc, #564]	@ (8007348 <low_level_init+0x2ac>)
 8007114:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8007116:	4b89      	ldr	r3, [pc, #548]	@ (800733c <low_level_init+0x2a0>)
 8007118:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800711c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */
  if (hal_eth_init_status == HAL_OK) {
 800711e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8007122:	2b00      	cmp	r3, #0
 8007124:	d16d      	bne.n	8007202 <low_level_init+0x166>
      int32_t init_result = yt8512c_init(&yt8512c);
 8007126:	4884      	ldr	r0, [pc, #528]	@ (8007338 <low_level_init+0x29c>)
 8007128:	f7fa f832 	bl	8001190 <yt8512c_init>
 800712c:	67b8      	str	r0, [r7, #120]	@ 0x78
      char buffer[32];
      snprintf(buffer, sizeof(buffer), "YT8512C Init Result: %d\r\n", init_result);
 800712e:	f107 0008 	add.w	r0, r7, #8
 8007132:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007134:	4a85      	ldr	r2, [pc, #532]	@ (800734c <low_level_init+0x2b0>)
 8007136:	2120      	movs	r1, #32
 8007138:	f010 f8de 	bl	80172f8 <sniprintf>
      CDC_Transmit_FS((uint8_t *)buffer, strlen(buffer));
 800713c:	f107 0308 	add.w	r3, r7, #8
 8007140:	4618      	mov	r0, r3
 8007142:	f7f9 f845 	bl	80001d0 <strlen>
 8007146:	4602      	mov	r2, r0
 8007148:	f107 0308 	add.w	r3, r7, #8
 800714c:	4611      	mov	r1, r2
 800714e:	4618      	mov	r0, r3
 8007150:	f00f fb64 	bl	801681c <CDC_Transmit_FS>

      if (init_result == YT8512C_STATUS_OK) {
 8007154:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007156:	2b00      	cmp	r3, #0
 8007158:	d14e      	bne.n	80071f8 <low_level_init+0x15c>
          yt8512c_disable_power_down_mode(&yt8512c);
 800715a:	4877      	ldr	r0, [pc, #476]	@ (8007338 <low_level_init+0x29c>)
 800715c:	f7fa f8de 	bl	800131c <yt8512c_disable_power_down_mode>
          CDC_Transmit_FS((uint8_t *)"Power Down Disabled\r\n", 21);
 8007160:	2115      	movs	r1, #21
 8007162:	487b      	ldr	r0, [pc, #492]	@ (8007350 <low_level_init+0x2b4>)
 8007164:	f00f fb5a 	bl	801681c <CDC_Transmit_FS>

          yt8512c_start_auto_nego(&yt8512c);
 8007168:	4873      	ldr	r0, [pc, #460]	@ (8007338 <low_level_init+0x29c>)
 800716a:	f7fa f904 	bl	8001376 <yt8512c_start_auto_nego>
          CDC_Transmit_FS((uint8_t *)"Auto Negotiation Started\r\n", 27);
 800716e:	211b      	movs	r1, #27
 8007170:	4878      	ldr	r0, [pc, #480]	@ (8007354 <low_level_init+0x2b8>)
 8007172:	f00f fb53 	bl	801681c <CDC_Transmit_FS>

          HAL_Delay(2000); // 等待 2 秒协商
 8007176:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800717a:	f7fa f9c3 	bl	8001504 <HAL_Delay>
          int32_t init_status = yt8512c_get_link_state(&yt8512c);
 800717e:	486e      	ldr	r0, [pc, #440]	@ (8007338 <low_level_init+0x29c>)
 8007180:	f7fa f926 	bl	80013d0 <yt8512c_get_link_state>
 8007184:	6778      	str	r0, [r7, #116]	@ 0x74
          snprintf(buffer, sizeof(buffer), "Init PHY Status: %d\r\n", init_status);
 8007186:	f107 0008 	add.w	r0, r7, #8
 800718a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800718c:	4a72      	ldr	r2, [pc, #456]	@ (8007358 <low_level_init+0x2bc>)
 800718e:	2120      	movs	r1, #32
 8007190:	f010 f8b2 	bl	80172f8 <sniprintf>
          CDC_Transmit_FS((uint8_t *)buffer, strlen(buffer));
 8007194:	f107 0308 	add.w	r3, r7, #8
 8007198:	4618      	mov	r0, r3
 800719a:	f7f9 f819 	bl	80001d0 <strlen>
 800719e:	4602      	mov	r2, r0
 80071a0:	f107 0308 	add.w	r3, r7, #8
 80071a4:	4611      	mov	r1, r2
 80071a6:	4618      	mov	r0, r3
 80071a8:	f00f fb38 	bl	801681c <CDC_Transmit_FS>

          uint32_t bsr_value = 0;
 80071ac:	2300      	movs	r3, #0
 80071ae:	62bb      	str	r3, [r7, #40]	@ 0x28
          if (YT8512C_ReadReg(yt8512c.devaddr, YT8512C_BSR, &bsr_value) >= 0) {
 80071b0:	4b61      	ldr	r3, [pc, #388]	@ (8007338 <low_level_init+0x29c>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80071b8:	2101      	movs	r1, #1
 80071ba:	4618      	mov	r0, r3
 80071bc:	f7ff fecc 	bl	8006f58 <YT8512C_ReadReg>
 80071c0:	4603      	mov	r3, r0
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	db13      	blt.n	80071ee <low_level_init+0x152>
              snprintf(buffer, sizeof(buffer), "BSR Value: 0x%04X\r\n", bsr_value);
 80071c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071c8:	f107 0008 	add.w	r0, r7, #8
 80071cc:	4a63      	ldr	r2, [pc, #396]	@ (800735c <low_level_init+0x2c0>)
 80071ce:	2120      	movs	r1, #32
 80071d0:	f010 f892 	bl	80172f8 <sniprintf>
              CDC_Transmit_FS((uint8_t *)buffer, strlen(buffer));
 80071d4:	f107 0308 	add.w	r3, r7, #8
 80071d8:	4618      	mov	r0, r3
 80071da:	f7f8 fff9 	bl	80001d0 <strlen>
 80071de:	4602      	mov	r2, r0
 80071e0:	f107 0308 	add.w	r3, r7, #8
 80071e4:	4611      	mov	r1, r2
 80071e6:	4618      	mov	r0, r3
 80071e8:	f00f fb18 	bl	801681c <CDC_Transmit_FS>
 80071ec:	e00d      	b.n	800720a <low_level_init+0x16e>
          } else {
              CDC_Transmit_FS((uint8_t *)"BSR Read Error\r\n", 14);
 80071ee:	210e      	movs	r1, #14
 80071f0:	485b      	ldr	r0, [pc, #364]	@ (8007360 <low_level_init+0x2c4>)
 80071f2:	f00f fb13 	bl	801681c <CDC_Transmit_FS>
 80071f6:	e008      	b.n	800720a <low_level_init+0x16e>
          }
      } else {
          CDC_Transmit_FS((uint8_t *)"YT8512C Init Failed\r\n", 21);
 80071f8:	2115      	movs	r1, #21
 80071fa:	485a      	ldr	r0, [pc, #360]	@ (8007364 <low_level_init+0x2c8>)
 80071fc:	f00f fb0e 	bl	801681c <CDC_Transmit_FS>
 8007200:	e003      	b.n	800720a <low_level_init+0x16e>
      }
  } else {
      CDC_Transmit_FS((uint8_t *)"ETH Init Failed\r\n", 17);
 8007202:	2111      	movs	r1, #17
 8007204:	4858      	ldr	r0, [pc, #352]	@ (8007368 <low_level_init+0x2cc>)
 8007206:	f00f fb09 	bl	801681c <CDC_Transmit_FS>
  }
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800720a:	484c      	ldr	r0, [pc, #304]	@ (800733c <low_level_init+0x2a0>)
 800720c:	f7fa fa80 	bl	8001710 <HAL_ETH_Init>
 8007210:	4603      	mov	r3, r0
 8007212:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8007216:	2238      	movs	r2, #56	@ 0x38
 8007218:	2100      	movs	r1, #0
 800721a:	4854      	ldr	r0, [pc, #336]	@ (800736c <low_level_init+0x2d0>)
 800721c:	f010 f90f 	bl	801743e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8007220:	4b52      	ldr	r3, [pc, #328]	@ (800736c <low_level_init+0x2d0>)
 8007222:	2221      	movs	r2, #33	@ 0x21
 8007224:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8007226:	4b51      	ldr	r3, [pc, #324]	@ (800736c <low_level_init+0x2d0>)
 8007228:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800722c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800722e:	4b4f      	ldr	r3, [pc, #316]	@ (800736c <low_level_init+0x2d0>)
 8007230:	2200      	movs	r2, #0
 8007232:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8007234:	484e      	ldr	r0, [pc, #312]	@ (8007370 <low_level_init+0x2d4>)
 8007236:	f005 ffdb 	bl	800d1f0 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2206      	movs	r2, #6
 800723e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8007242:	4b3e      	ldr	r3, [pc, #248]	@ (800733c <low_level_init+0x2a0>)
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	781a      	ldrb	r2, [r3, #0]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800724e:	4b3b      	ldr	r3, [pc, #236]	@ (800733c <low_level_init+0x2a0>)
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	785a      	ldrb	r2, [r3, #1]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800725a:	4b38      	ldr	r3, [pc, #224]	@ (800733c <low_level_init+0x2a0>)
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	789a      	ldrb	r2, [r3, #2]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8007266:	4b35      	ldr	r3, [pc, #212]	@ (800733c <low_level_init+0x2a0>)
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	78da      	ldrb	r2, [r3, #3]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8007272:	4b32      	ldr	r3, [pc, #200]	@ (800733c <low_level_init+0x2a0>)
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	791a      	ldrb	r2, [r3, #4]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800727e:	4b2f      	ldr	r3, [pc, #188]	@ (800733c <low_level_init+0x2a0>)
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	795a      	ldrb	r2, [r3, #5]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8007290:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007298:	f043 030a 	orr.w	r3, r3, #10
 800729c:	b2da      	uxtb	r2, r3
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(RxSem);
 80072a4:	2300      	movs	r3, #0
 80072a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80072a8:	2300      	movs	r3, #0
 80072aa:	657b      	str	r3, [r7, #84]	@ 0x54
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(RxSem), 1);
 80072ac:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80072b0:	2101      	movs	r1, #1
 80072b2:	4618      	mov	r0, r3
 80072b4:	f002 fb90 	bl	80099d8 <osSemaphoreCreate>
 80072b8:	4603      	mov	r3, r0
 80072ba:	4a2e      	ldr	r2, [pc, #184]	@ (8007374 <low_level_init+0x2d8>)
 80072bc:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  osSemaphoreDef(TxSem);
 80072be:	2300      	movs	r3, #0
 80072c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80072c2:	2300      	movs	r3, #0
 80072c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  TxPktSemaphore = osSemaphoreCreate(osSemaphore(TxSem), 1);
 80072c6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80072ca:	2101      	movs	r1, #1
 80072cc:	4618      	mov	r0, r3
 80072ce:	f002 fb83 	bl	80099d8 <osSemaphoreCreate>
 80072d2:	4603      	mov	r3, r0
 80072d4:	4a28      	ldr	r2, [pc, #160]	@ (8007378 <low_level_init+0x2dc>)
 80072d6:	6013      	str	r3, [r2, #0]

  /* Decrease the semaphore's initial count from 1 to 0 */
  osSemaphoreWait(RxPktSemaphore, 0);
 80072d8:	4b26      	ldr	r3, [pc, #152]	@ (8007374 <low_level_init+0x2d8>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	2100      	movs	r1, #0
 80072de:	4618      	mov	r0, r3
 80072e0:	f002 fbac 	bl	8009a3c <osSemaphoreWait>
  osSemaphoreWait(TxPktSemaphore, 0);
 80072e4:	4b24      	ldr	r3, [pc, #144]	@ (8007378 <low_level_init+0x2dc>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	2100      	movs	r1, #0
 80072ea:	4618      	mov	r0, r3
 80072ec:	f002 fba6 	bl	8009a3c <osSemaphoreWait>

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80072f0:	4b22      	ldr	r3, [pc, #136]	@ (800737c <low_level_init+0x2e0>)
 80072f2:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 80072f6:	461d      	mov	r5, r3
 80072f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80072fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007300:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8007304:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007308:	6879      	ldr	r1, [r7, #4]
 800730a:	4618      	mov	r0, r3
 800730c:	f002 fa68 	bl	80097e0 <osThreadCreate>

/* USER CODE BEGIN low_level_init Code 1 for User BSP */

/* USER CODE END low_level_init Code 1 for User BSP */

  if (hal_eth_init_status == HAL_OK)
 8007310:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8007314:	2b00      	cmp	r3, #0
 8007316:	d001      	beq.n	800731c <low_level_init+0x280>
/* USER CODE END low_level_init Code 2 for User BSP */

  }
  else
  {
    Error_Handler();
 8007318:	f7f9 fbf0 	bl	8000afc <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800731c:	bf00      	nop
 800731e:	3780      	adds	r7, #128	@ 0x80
 8007320:	46bd      	mov	sp, r7
 8007322:	bdb0      	pop	{r4, r5, r7, pc}
 8007324:	0800700b 	.word	0x0800700b
 8007328:	0800701b 	.word	0x0800701b
 800732c:	08006f59 	.word	0x08006f59
 8007330:	08006fc9 	.word	0x08006fc9
 8007334:	08006ffd 	.word	0x08006ffd
 8007338:	200005f0 	.word	0x200005f0
 800733c:	200050e4 	.word	0x200050e4
 8007340:	40028000 	.word	0x40028000
 8007344:	2000503c 	.word	0x2000503c
 8007348:	20004f9c 	.word	0x20004f9c
 800734c:	08018680 	.word	0x08018680
 8007350:	0801869c 	.word	0x0801869c
 8007354:	080186b4 	.word	0x080186b4
 8007358:	080186d0 	.word	0x080186d0
 800735c:	080186e8 	.word	0x080186e8
 8007360:	080186fc 	.word	0x080186fc
 8007364:	08018710 	.word	0x08018710
 8007368:	08018728 	.word	0x08018728
 800736c:	20005194 	.word	0x20005194
 8007370:	0801b2b8 	.word	0x0801b2b8
 8007374:	200050dc 	.word	0x200050dc
 8007378:	200050e0 	.word	0x200050e0
 800737c:	08018744 	.word	0x08018744

08007380 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b092      	sub	sp, #72	@ 0x48
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800738a:	2300      	movs	r3, #0
 800738c:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800738e:	2300      	movs	r3, #0
 8007390:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8007392:	2300      	movs	r3, #0
 8007394:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8007398:	f107 030c 	add.w	r3, r7, #12
 800739c:	2230      	movs	r2, #48	@ 0x30
 800739e:	2100      	movs	r1, #0
 80073a0:	4618      	mov	r0, r3
 80073a2:	f010 f84c 	bl	801743e <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80073a6:	f107 030c 	add.w	r3, r7, #12
 80073aa:	2230      	movs	r2, #48	@ 0x30
 80073ac:	2100      	movs	r1, #0
 80073ae:	4618      	mov	r0, r3
 80073b0:	f010 f845 	bl	801743e <memset>

  for(q = p; q != NULL; q = q->next)
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	643b      	str	r3, [r7, #64]	@ 0x40
 80073b8:	e045      	b.n	8007446 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80073ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073bc:	2b03      	cmp	r3, #3
 80073be:	d902      	bls.n	80073c6 <low_level_output+0x46>
      return ERR_IF;
 80073c0:	f06f 030b 	mvn.w	r3, #11
 80073c4:	e07f      	b.n	80074c6 <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 80073c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80073c8:	6859      	ldr	r1, [r3, #4]
 80073ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80073cc:	4613      	mov	r3, r2
 80073ce:	005b      	lsls	r3, r3, #1
 80073d0:	4413      	add	r3, r2
 80073d2:	009b      	lsls	r3, r3, #2
 80073d4:	3348      	adds	r3, #72	@ 0x48
 80073d6:	443b      	add	r3, r7
 80073d8:	3b3c      	subs	r3, #60	@ 0x3c
 80073da:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80073dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80073de:	895b      	ldrh	r3, [r3, #10]
 80073e0:	4619      	mov	r1, r3
 80073e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80073e4:	4613      	mov	r3, r2
 80073e6:	005b      	lsls	r3, r3, #1
 80073e8:	4413      	add	r3, r2
 80073ea:	009b      	lsls	r3, r3, #2
 80073ec:	3348      	adds	r3, #72	@ 0x48
 80073ee:	443b      	add	r3, r7
 80073f0:	3b38      	subs	r3, #56	@ 0x38
 80073f2:	6019      	str	r1, [r3, #0]

    if(i>0)
 80073f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d011      	beq.n	800741e <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80073fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073fc:	1e5a      	subs	r2, r3, #1
 80073fe:	f107 000c 	add.w	r0, r7, #12
 8007402:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007404:	460b      	mov	r3, r1
 8007406:	005b      	lsls	r3, r3, #1
 8007408:	440b      	add	r3, r1
 800740a:	009b      	lsls	r3, r3, #2
 800740c:	18c1      	adds	r1, r0, r3
 800740e:	4613      	mov	r3, r2
 8007410:	005b      	lsls	r3, r3, #1
 8007412:	4413      	add	r3, r2
 8007414:	009b      	lsls	r3, r3, #2
 8007416:	3348      	adds	r3, #72	@ 0x48
 8007418:	443b      	add	r3, r7
 800741a:	3b34      	subs	r3, #52	@ 0x34
 800741c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800741e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d109      	bne.n	800743a <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8007426:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007428:	4613      	mov	r3, r2
 800742a:	005b      	lsls	r3, r3, #1
 800742c:	4413      	add	r3, r2
 800742e:	009b      	lsls	r3, r3, #2
 8007430:	3348      	adds	r3, #72	@ 0x48
 8007432:	443b      	add	r3, r7
 8007434:	3b34      	subs	r3, #52	@ 0x34
 8007436:	2200      	movs	r2, #0
 8007438:	601a      	str	r2, [r3, #0]
    }

    i++;
 800743a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800743c:	3301      	adds	r3, #1
 800743e:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8007440:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	643b      	str	r3, [r7, #64]	@ 0x40
 8007446:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007448:	2b00      	cmp	r3, #0
 800744a:	d1b6      	bne.n	80073ba <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	891b      	ldrh	r3, [r3, #8]
 8007450:	461a      	mov	r2, r3
 8007452:	4b1f      	ldr	r3, [pc, #124]	@ (80074d0 <low_level_output+0x150>)
 8007454:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8007456:	4a1e      	ldr	r2, [pc, #120]	@ (80074d0 <low_level_output+0x150>)
 8007458:	f107 030c 	add.w	r3, r7, #12
 800745c:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800745e:	4a1c      	ldr	r2, [pc, #112]	@ (80074d0 <low_level_output+0x150>)
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 8007464:	6838      	ldr	r0, [r7, #0]
 8007466:	f006 feef 	bl	800e248 <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 800746a:	4919      	ldr	r1, [pc, #100]	@ (80074d0 <low_level_output+0x150>)
 800746c:	4819      	ldr	r0, [pc, #100]	@ (80074d4 <low_level_output+0x154>)
 800746e:	f7fa f9f5 	bl	800185c <HAL_ETH_Transmit_IT>
 8007472:	4603      	mov	r3, r0
 8007474:	2b00      	cmp	r3, #0
 8007476:	d103      	bne.n	8007480 <low_level_output+0x100>
    {
      errval = ERR_OK;
 8007478:	2300      	movs	r3, #0
 800747a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800747e:	e01b      	b.n	80074b8 <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 8007480:	4814      	ldr	r0, [pc, #80]	@ (80074d4 <low_level_output+0x154>)
 8007482:	f7fa fd47 	bl	8001f14 <HAL_ETH_GetError>
 8007486:	4603      	mov	r3, r0
 8007488:	f003 0302 	and.w	r3, r3, #2
 800748c:	2b00      	cmp	r3, #0
 800748e:	d00d      	beq.n	80074ac <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreWait(TxPktSemaphore, ETHIF_TX_TIMEOUT);
 8007490:	4b11      	ldr	r3, [pc, #68]	@ (80074d8 <low_level_output+0x158>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8007498:	4618      	mov	r0, r3
 800749a:	f002 facf 	bl	8009a3c <osSemaphoreWait>
        HAL_ETH_ReleaseTxPacket(&heth);
 800749e:	480d      	ldr	r0, [pc, #52]	@ (80074d4 <low_level_output+0x154>)
 80074a0:	f7fa fb7b 	bl	8001b9a <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 80074a4:	23fe      	movs	r3, #254	@ 0xfe
 80074a6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80074aa:	e005      	b.n	80074b8 <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 80074ac:	6838      	ldr	r0, [r7, #0]
 80074ae:	f006 fe25 	bl	800e0fc <pbuf_free>
        errval =  ERR_IF;
 80074b2:	23f4      	movs	r3, #244	@ 0xf4
 80074b4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 80074b8:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80074bc:	f113 0f02 	cmn.w	r3, #2
 80074c0:	d0d3      	beq.n	800746a <low_level_output+0xea>

  return errval;
 80074c2:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3748      	adds	r7, #72	@ 0x48
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}
 80074ce:	bf00      	nop
 80074d0:	20005194 	.word	0x20005194
 80074d4:	200050e4 	.word	0x200050e4
 80074d8:	200050e0 	.word	0x200050e0

080074dc <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b084      	sub	sp, #16
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80074e4:	2300      	movs	r3, #0
 80074e6:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80074e8:	4b07      	ldr	r3, [pc, #28]	@ (8007508 <low_level_input+0x2c>)
 80074ea:	781b      	ldrb	r3, [r3, #0]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d105      	bne.n	80074fc <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80074f0:	f107 030c 	add.w	r3, r7, #12
 80074f4:	4619      	mov	r1, r3
 80074f6:	4805      	ldr	r0, [pc, #20]	@ (800750c <low_level_input+0x30>)
 80074f8:	f7fa fa0c 	bl	8001914 <HAL_ETH_ReadData>
  }

  return p;
 80074fc:	68fb      	ldr	r3, [r7, #12]
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3710      	adds	r7, #16
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}
 8007506:	bf00      	nop
 8007508:	20004f98 	.word	0x20004f98
 800750c:	200050e4 	.word	0x200050e4

08007510 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b084      	sub	sp, #16
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8007518:	2300      	movs	r3, #0
 800751a:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8007520:	4b0f      	ldr	r3, [pc, #60]	@ (8007560 <ethernetif_input+0x50>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f04f 31ff 	mov.w	r1, #4294967295
 8007528:	4618      	mov	r0, r3
 800752a:	f002 fa87 	bl	8009a3c <osSemaphoreWait>
 800752e:	4603      	mov	r3, r0
 8007530:	2b00      	cmp	r3, #0
 8007532:	d1f5      	bne.n	8007520 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8007534:	68b8      	ldr	r0, [r7, #8]
 8007536:	f7ff ffd1 	bl	80074dc <low_level_input>
 800753a:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d00a      	beq.n	8007558 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	691b      	ldr	r3, [r3, #16]
 8007546:	68b9      	ldr	r1, [r7, #8]
 8007548:	68f8      	ldr	r0, [r7, #12]
 800754a:	4798      	blx	r3
 800754c:	4603      	mov	r3, r0
 800754e:	2b00      	cmp	r3, #0
 8007550:	d002      	beq.n	8007558 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8007552:	68f8      	ldr	r0, [r7, #12]
 8007554:	f006 fdd2 	bl	800e0fc <pbuf_free>
          }
        }
      } while(p!=NULL);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d1ea      	bne.n	8007534 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800755e:	e7df      	b.n	8007520 <ethernetif_input+0x10>
 8007560:	200050dc 	.word	0x200050dc

08007564 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b082      	sub	sp, #8
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d106      	bne.n	8007580 <ethernetif_init+0x1c>
 8007572:	4b0e      	ldr	r3, [pc, #56]	@ (80075ac <ethernetif_init+0x48>)
 8007574:	f44f 72fd 	mov.w	r2, #506	@ 0x1fa
 8007578:	490d      	ldr	r1, [pc, #52]	@ (80075b0 <ethernetif_init+0x4c>)
 800757a:	480e      	ldr	r0, [pc, #56]	@ (80075b4 <ethernetif_init+0x50>)
 800757c:	f00f feaa 	bl	80172d4 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2273      	movs	r2, #115	@ 0x73
 8007584:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2274      	movs	r2, #116	@ 0x74
 800758c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	4a09      	ldr	r2, [pc, #36]	@ (80075b8 <ethernetif_init+0x54>)
 8007594:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	4a08      	ldr	r2, [pc, #32]	@ (80075bc <ethernetif_init+0x58>)
 800759a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f7ff fd7d 	bl	800709c <low_level_init>

  return ERR_OK;
 80075a2:	2300      	movs	r3, #0
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3708      	adds	r7, #8
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}
 80075ac:	08018760 	.word	0x08018760
 80075b0:	0801877c 	.word	0x0801877c
 80075b4:	0801878c 	.word	0x0801878c
 80075b8:	08014781 	.word	0x08014781
 80075bc:	08007381 	.word	0x08007381

080075c0 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b084      	sub	sp, #16
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80075cc:	68f9      	ldr	r1, [r7, #12]
 80075ce:	4809      	ldr	r0, [pc, #36]	@ (80075f4 <pbuf_free_custom+0x34>)
 80075d0:	f005 fefe 	bl	800d3d0 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80075d4:	4b08      	ldr	r3, [pc, #32]	@ (80075f8 <pbuf_free_custom+0x38>)
 80075d6:	781b      	ldrb	r3, [r3, #0]
 80075d8:	2b01      	cmp	r3, #1
 80075da:	d107      	bne.n	80075ec <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80075dc:	4b06      	ldr	r3, [pc, #24]	@ (80075f8 <pbuf_free_custom+0x38>)
 80075de:	2200      	movs	r2, #0
 80075e0:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 80075e2:	4b06      	ldr	r3, [pc, #24]	@ (80075fc <pbuf_free_custom+0x3c>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4618      	mov	r0, r3
 80075e8:	f002 fa76 	bl	8009ad8 <osSemaphoreRelease>
  }
}
 80075ec:	bf00      	nop
 80075ee:	3710      	adds	r7, #16
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}
 80075f4:	0801b2b8 	.word	0x0801b2b8
 80075f8:	20004f98 	.word	0x20004f98
 80075fc:	200050dc 	.word	0x200050dc

08007600 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8007604:	f7f9 ff72 	bl	80014ec <HAL_GetTick>
 8007608:	4603      	mov	r3, r0
}
 800760a:	4618      	mov	r0, r3
 800760c:	bd80      	pop	{r7, pc}
	...

08007610 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b08c      	sub	sp, #48	@ 0x30
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]

  for(;;)
  {

/* USER CODE BEGIN ETH link Thread core code for User BSP */
	  struct netif *netif = (struct netif *) argument;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	    int32_t phy_status = yt8512c_get_link_state(&yt8512c);
 800761c:	4818      	ldr	r0, [pc, #96]	@ (8007680 <ethernet_link_thread+0x70>)
 800761e:	f7f9 fed7 	bl	80013d0 <yt8512c_get_link_state>
 8007622:	62b8      	str	r0, [r7, #40]	@ 0x28

	    char buffer[32];
	    snprintf(buffer, sizeof(buffer), "PHY Status: %d\r\n", phy_status);
 8007624:	f107 0008 	add.w	r0, r7, #8
 8007628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800762a:	4a16      	ldr	r2, [pc, #88]	@ (8007684 <ethernet_link_thread+0x74>)
 800762c:	2120      	movs	r1, #32
 800762e:	f00f fe63 	bl	80172f8 <sniprintf>
	    CDC_Transmit_FS((uint8_t *)buffer, strlen(buffer));
 8007632:	f107 0308 	add.w	r3, r7, #8
 8007636:	4618      	mov	r0, r3
 8007638:	f7f8 fdca 	bl	80001d0 <strlen>
 800763c:	4602      	mov	r2, r0
 800763e:	f107 0308 	add.w	r3, r7, #8
 8007642:	4611      	mov	r1, r2
 8007644:	4618      	mov	r0, r3
 8007646:	f00f f8e9 	bl	801681c <CDC_Transmit_FS>

	    if (phy_status == YT8512C_STATUS_LINK_DOWN || phy_status < YT8512C_STATUS_OK) {
 800764a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800764c:	2b01      	cmp	r3, #1
 800764e:	d002      	beq.n	8007656 <ethernet_link_thread+0x46>
 8007650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007652:	2b00      	cmp	r3, #0
 8007654:	da03      	bge.n	800765e <ethernet_link_thread+0x4e>
	        netif_set_link_down(netif);
 8007656:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007658:	f006 f972 	bl	800d940 <netif_set_link_down>
 800765c:	e00c      	b.n	8007678 <ethernet_link_thread+0x68>
	    } else if (phy_status >= YT8512C_STATUS_100MBITS_FULLDUPLEX && phy_status <= YT8512C_STATUS_10MBITS_HALFDUPLEX) {
 800765e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007660:	2b01      	cmp	r3, #1
 8007662:	dd06      	ble.n	8007672 <ethernet_link_thread+0x62>
 8007664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007666:	2b05      	cmp	r3, #5
 8007668:	dc03      	bgt.n	8007672 <ethernet_link_thread+0x62>
	        netif_set_link_up(netif);
 800766a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800766c:	f006 f934 	bl	800d8d8 <netif_set_link_up>
 8007670:	e002      	b.n	8007678 <ethernet_link_thread+0x68>
	    } else {
	        netif_set_link_down(netif);
 8007672:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007674:	f006 f964 	bl	800d940 <netif_set_link_down>
	    }
/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8007678:	2064      	movs	r0, #100	@ 0x64
 800767a:	f002 f8fd 	bl	8009878 <osDelay>
  {
 800767e:	e7cb      	b.n	8007618 <ethernet_link_thread+0x8>
 8007680:	200005f0 	.word	0x200005f0
 8007684:	080187b4 	.word	0x080187b4

08007688 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b086      	sub	sp, #24
 800768c:	af02      	add	r7, sp, #8
 800768e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8007690:	4812      	ldr	r0, [pc, #72]	@ (80076dc <HAL_ETH_RxAllocateCallback+0x54>)
 8007692:	f005 fe29 	bl	800d2e8 <memp_malloc_pool>
 8007696:	60f8      	str	r0, [r7, #12]
  if (p)
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d014      	beq.n	80076c8 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	f103 0220 	add.w	r2, r3, #32
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	4a0d      	ldr	r2, [pc, #52]	@ (80076e0 <HAL_ETH_RxAllocateCallback+0x58>)
 80076ac:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80076b6:	9201      	str	r2, [sp, #4]
 80076b8:	9300      	str	r3, [sp, #0]
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2241      	movs	r2, #65	@ 0x41
 80076be:	2100      	movs	r1, #0
 80076c0:	2000      	movs	r0, #0
 80076c2:	f006 fb61 	bl	800dd88 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80076c6:	e005      	b.n	80076d4 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80076c8:	4b06      	ldr	r3, [pc, #24]	@ (80076e4 <HAL_ETH_RxAllocateCallback+0x5c>)
 80076ca:	2201      	movs	r2, #1
 80076cc:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2200      	movs	r2, #0
 80076d2:	601a      	str	r2, [r3, #0]
}
 80076d4:	bf00      	nop
 80076d6:	3710      	adds	r7, #16
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}
 80076dc:	0801b2b8 	.word	0x0801b2b8
 80076e0:	080075c1 	.word	0x080075c1
 80076e4:	20004f98 	.word	0x20004f98

080076e8 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b089      	sub	sp, #36	@ 0x24
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	60f8      	str	r0, [r7, #12]
 80076f0:	60b9      	str	r1, [r7, #8]
 80076f2:	607a      	str	r2, [r7, #4]
 80076f4:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80076fe:	2300      	movs	r3, #0
 8007700:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	3b20      	subs	r3, #32
 8007706:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8007708:	69fb      	ldr	r3, [r7, #28]
 800770a:	2200      	movs	r2, #0
 800770c:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800770e:	69fb      	ldr	r3, [r7, #28]
 8007710:	2200      	movs	r2, #0
 8007712:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8007714:	69fb      	ldr	r3, [r7, #28]
 8007716:	887a      	ldrh	r2, [r7, #2]
 8007718:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800771a:	69bb      	ldr	r3, [r7, #24]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d103      	bne.n	800772a <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8007722:	69bb      	ldr	r3, [r7, #24]
 8007724:	69fa      	ldr	r2, [r7, #28]
 8007726:	601a      	str	r2, [r3, #0]
 8007728:	e003      	b.n	8007732 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	69fa      	ldr	r2, [r7, #28]
 8007730:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	69fa      	ldr	r2, [r7, #28]
 8007736:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8007738:	69bb      	ldr	r3, [r7, #24]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	61fb      	str	r3, [r7, #28]
 800773e:	e009      	b.n	8007754 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8007740:	69fb      	ldr	r3, [r7, #28]
 8007742:	891a      	ldrh	r2, [r3, #8]
 8007744:	887b      	ldrh	r3, [r7, #2]
 8007746:	4413      	add	r3, r2
 8007748:	b29a      	uxth	r2, r3
 800774a:	69fb      	ldr	r3, [r7, #28]
 800774c:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800774e:	69fb      	ldr	r3, [r7, #28]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	61fb      	str	r3, [r7, #28]
 8007754:	69fb      	ldr	r3, [r7, #28]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d1f2      	bne.n	8007740 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 800775a:	bf00      	nop
 800775c:	bf00      	nop
 800775e:	3724      	adds	r7, #36	@ 0x24
 8007760:	46bd      	mov	sp, r7
 8007762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007766:	4770      	bx	lr

08007768 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b082      	sub	sp, #8
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f006 fcc3 	bl	800e0fc <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8007776:	bf00      	nop
 8007778:	3708      	adds	r7, #8
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}
	...

08007780 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b084      	sub	sp, #16
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	460b      	mov	r3, r1
 800778a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800778c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007790:	f00f fc5c 	bl	801704c <USBD_static_malloc>
 8007794:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d109      	bne.n	80077b0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	32b0      	adds	r2, #176	@ 0xb0
 80077a6:	2100      	movs	r1, #0
 80077a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80077ac:	2302      	movs	r3, #2
 80077ae:	e0d4      	b.n	800795a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80077b0:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80077b4:	2100      	movs	r1, #0
 80077b6:	68f8      	ldr	r0, [r7, #12]
 80077b8:	f00f fe41 	bl	801743e <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	32b0      	adds	r2, #176	@ 0xb0
 80077c6:	68f9      	ldr	r1, [r7, #12]
 80077c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	32b0      	adds	r2, #176	@ 0xb0
 80077d6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	7c1b      	ldrb	r3, [r3, #16]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d138      	bne.n	800785a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80077e8:	4b5e      	ldr	r3, [pc, #376]	@ (8007964 <USBD_CDC_Init+0x1e4>)
 80077ea:	7819      	ldrb	r1, [r3, #0]
 80077ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80077f0:	2202      	movs	r2, #2
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f00f fb07 	bl	8016e06 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80077f8:	4b5a      	ldr	r3, [pc, #360]	@ (8007964 <USBD_CDC_Init+0x1e4>)
 80077fa:	781b      	ldrb	r3, [r3, #0]
 80077fc:	f003 020f 	and.w	r2, r3, #15
 8007800:	6879      	ldr	r1, [r7, #4]
 8007802:	4613      	mov	r3, r2
 8007804:	009b      	lsls	r3, r3, #2
 8007806:	4413      	add	r3, r2
 8007808:	009b      	lsls	r3, r3, #2
 800780a:	440b      	add	r3, r1
 800780c:	3323      	adds	r3, #35	@ 0x23
 800780e:	2201      	movs	r2, #1
 8007810:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007812:	4b55      	ldr	r3, [pc, #340]	@ (8007968 <USBD_CDC_Init+0x1e8>)
 8007814:	7819      	ldrb	r1, [r3, #0]
 8007816:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800781a:	2202      	movs	r2, #2
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f00f faf2 	bl	8016e06 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007822:	4b51      	ldr	r3, [pc, #324]	@ (8007968 <USBD_CDC_Init+0x1e8>)
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	f003 020f 	and.w	r2, r3, #15
 800782a:	6879      	ldr	r1, [r7, #4]
 800782c:	4613      	mov	r3, r2
 800782e:	009b      	lsls	r3, r3, #2
 8007830:	4413      	add	r3, r2
 8007832:	009b      	lsls	r3, r3, #2
 8007834:	440b      	add	r3, r1
 8007836:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800783a:	2201      	movs	r2, #1
 800783c:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800783e:	4b4b      	ldr	r3, [pc, #300]	@ (800796c <USBD_CDC_Init+0x1ec>)
 8007840:	781b      	ldrb	r3, [r3, #0]
 8007842:	f003 020f 	and.w	r2, r3, #15
 8007846:	6879      	ldr	r1, [r7, #4]
 8007848:	4613      	mov	r3, r2
 800784a:	009b      	lsls	r3, r3, #2
 800784c:	4413      	add	r3, r2
 800784e:	009b      	lsls	r3, r3, #2
 8007850:	440b      	add	r3, r1
 8007852:	331c      	adds	r3, #28
 8007854:	2210      	movs	r2, #16
 8007856:	601a      	str	r2, [r3, #0]
 8007858:	e035      	b.n	80078c6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800785a:	4b42      	ldr	r3, [pc, #264]	@ (8007964 <USBD_CDC_Init+0x1e4>)
 800785c:	7819      	ldrb	r1, [r3, #0]
 800785e:	2340      	movs	r3, #64	@ 0x40
 8007860:	2202      	movs	r2, #2
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f00f facf 	bl	8016e06 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007868:	4b3e      	ldr	r3, [pc, #248]	@ (8007964 <USBD_CDC_Init+0x1e4>)
 800786a:	781b      	ldrb	r3, [r3, #0]
 800786c:	f003 020f 	and.w	r2, r3, #15
 8007870:	6879      	ldr	r1, [r7, #4]
 8007872:	4613      	mov	r3, r2
 8007874:	009b      	lsls	r3, r3, #2
 8007876:	4413      	add	r3, r2
 8007878:	009b      	lsls	r3, r3, #2
 800787a:	440b      	add	r3, r1
 800787c:	3323      	adds	r3, #35	@ 0x23
 800787e:	2201      	movs	r2, #1
 8007880:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007882:	4b39      	ldr	r3, [pc, #228]	@ (8007968 <USBD_CDC_Init+0x1e8>)
 8007884:	7819      	ldrb	r1, [r3, #0]
 8007886:	2340      	movs	r3, #64	@ 0x40
 8007888:	2202      	movs	r2, #2
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f00f fabb 	bl	8016e06 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007890:	4b35      	ldr	r3, [pc, #212]	@ (8007968 <USBD_CDC_Init+0x1e8>)
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	f003 020f 	and.w	r2, r3, #15
 8007898:	6879      	ldr	r1, [r7, #4]
 800789a:	4613      	mov	r3, r2
 800789c:	009b      	lsls	r3, r3, #2
 800789e:	4413      	add	r3, r2
 80078a0:	009b      	lsls	r3, r3, #2
 80078a2:	440b      	add	r3, r1
 80078a4:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80078a8:	2201      	movs	r2, #1
 80078aa:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80078ac:	4b2f      	ldr	r3, [pc, #188]	@ (800796c <USBD_CDC_Init+0x1ec>)
 80078ae:	781b      	ldrb	r3, [r3, #0]
 80078b0:	f003 020f 	and.w	r2, r3, #15
 80078b4:	6879      	ldr	r1, [r7, #4]
 80078b6:	4613      	mov	r3, r2
 80078b8:	009b      	lsls	r3, r3, #2
 80078ba:	4413      	add	r3, r2
 80078bc:	009b      	lsls	r3, r3, #2
 80078be:	440b      	add	r3, r1
 80078c0:	331c      	adds	r3, #28
 80078c2:	2210      	movs	r2, #16
 80078c4:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80078c6:	4b29      	ldr	r3, [pc, #164]	@ (800796c <USBD_CDC_Init+0x1ec>)
 80078c8:	7819      	ldrb	r1, [r3, #0]
 80078ca:	2308      	movs	r3, #8
 80078cc:	2203      	movs	r2, #3
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f00f fa99 	bl	8016e06 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80078d4:	4b25      	ldr	r3, [pc, #148]	@ (800796c <USBD_CDC_Init+0x1ec>)
 80078d6:	781b      	ldrb	r3, [r3, #0]
 80078d8:	f003 020f 	and.w	r2, r3, #15
 80078dc:	6879      	ldr	r1, [r7, #4]
 80078de:	4613      	mov	r3, r2
 80078e0:	009b      	lsls	r3, r3, #2
 80078e2:	4413      	add	r3, r2
 80078e4:	009b      	lsls	r3, r3, #2
 80078e6:	440b      	add	r3, r1
 80078e8:	3323      	adds	r3, #35	@ 0x23
 80078ea:	2201      	movs	r2, #1
 80078ec:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2200      	movs	r2, #0
 80078f2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80078fc:	687a      	ldr	r2, [r7, #4]
 80078fe:	33b0      	adds	r3, #176	@ 0xb0
 8007900:	009b      	lsls	r3, r3, #2
 8007902:	4413      	add	r3, r2
 8007904:	685b      	ldr	r3, [r3, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	2200      	movs	r2, #0
 800790e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2200      	movs	r2, #0
 8007916:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8007920:	2b00      	cmp	r3, #0
 8007922:	d101      	bne.n	8007928 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007924:	2302      	movs	r3, #2
 8007926:	e018      	b.n	800795a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	7c1b      	ldrb	r3, [r3, #16]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d10a      	bne.n	8007946 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007930:	4b0d      	ldr	r3, [pc, #52]	@ (8007968 <USBD_CDC_Init+0x1e8>)
 8007932:	7819      	ldrb	r1, [r3, #0]
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800793a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f00f fb50 	bl	8016fe4 <USBD_LL_PrepareReceive>
 8007944:	e008      	b.n	8007958 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007946:	4b08      	ldr	r3, [pc, #32]	@ (8007968 <USBD_CDC_Init+0x1e8>)
 8007948:	7819      	ldrb	r1, [r3, #0]
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007950:	2340      	movs	r3, #64	@ 0x40
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f00f fb46 	bl	8016fe4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007958:	2300      	movs	r3, #0
}
 800795a:	4618      	mov	r0, r3
 800795c:	3710      	adds	r7, #16
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}
 8007962:	bf00      	nop
 8007964:	20000093 	.word	0x20000093
 8007968:	20000094 	.word	0x20000094
 800796c:	20000095 	.word	0x20000095

08007970 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b082      	sub	sp, #8
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	460b      	mov	r3, r1
 800797a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800797c:	4b3a      	ldr	r3, [pc, #232]	@ (8007a68 <USBD_CDC_DeInit+0xf8>)
 800797e:	781b      	ldrb	r3, [r3, #0]
 8007980:	4619      	mov	r1, r3
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f00f fa65 	bl	8016e52 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007988:	4b37      	ldr	r3, [pc, #220]	@ (8007a68 <USBD_CDC_DeInit+0xf8>)
 800798a:	781b      	ldrb	r3, [r3, #0]
 800798c:	f003 020f 	and.w	r2, r3, #15
 8007990:	6879      	ldr	r1, [r7, #4]
 8007992:	4613      	mov	r3, r2
 8007994:	009b      	lsls	r3, r3, #2
 8007996:	4413      	add	r3, r2
 8007998:	009b      	lsls	r3, r3, #2
 800799a:	440b      	add	r3, r1
 800799c:	3323      	adds	r3, #35	@ 0x23
 800799e:	2200      	movs	r2, #0
 80079a0:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80079a2:	4b32      	ldr	r3, [pc, #200]	@ (8007a6c <USBD_CDC_DeInit+0xfc>)
 80079a4:	781b      	ldrb	r3, [r3, #0]
 80079a6:	4619      	mov	r1, r3
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f00f fa52 	bl	8016e52 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80079ae:	4b2f      	ldr	r3, [pc, #188]	@ (8007a6c <USBD_CDC_DeInit+0xfc>)
 80079b0:	781b      	ldrb	r3, [r3, #0]
 80079b2:	f003 020f 	and.w	r2, r3, #15
 80079b6:	6879      	ldr	r1, [r7, #4]
 80079b8:	4613      	mov	r3, r2
 80079ba:	009b      	lsls	r3, r3, #2
 80079bc:	4413      	add	r3, r2
 80079be:	009b      	lsls	r3, r3, #2
 80079c0:	440b      	add	r3, r1
 80079c2:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80079c6:	2200      	movs	r2, #0
 80079c8:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80079ca:	4b29      	ldr	r3, [pc, #164]	@ (8007a70 <USBD_CDC_DeInit+0x100>)
 80079cc:	781b      	ldrb	r3, [r3, #0]
 80079ce:	4619      	mov	r1, r3
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f00f fa3e 	bl	8016e52 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80079d6:	4b26      	ldr	r3, [pc, #152]	@ (8007a70 <USBD_CDC_DeInit+0x100>)
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	f003 020f 	and.w	r2, r3, #15
 80079de:	6879      	ldr	r1, [r7, #4]
 80079e0:	4613      	mov	r3, r2
 80079e2:	009b      	lsls	r3, r3, #2
 80079e4:	4413      	add	r3, r2
 80079e6:	009b      	lsls	r3, r3, #2
 80079e8:	440b      	add	r3, r1
 80079ea:	3323      	adds	r3, #35	@ 0x23
 80079ec:	2200      	movs	r2, #0
 80079ee:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80079f0:	4b1f      	ldr	r3, [pc, #124]	@ (8007a70 <USBD_CDC_DeInit+0x100>)
 80079f2:	781b      	ldrb	r3, [r3, #0]
 80079f4:	f003 020f 	and.w	r2, r3, #15
 80079f8:	6879      	ldr	r1, [r7, #4]
 80079fa:	4613      	mov	r3, r2
 80079fc:	009b      	lsls	r3, r3, #2
 80079fe:	4413      	add	r3, r2
 8007a00:	009b      	lsls	r3, r3, #2
 8007a02:	440b      	add	r3, r1
 8007a04:	331c      	adds	r3, #28
 8007a06:	2200      	movs	r2, #0
 8007a08:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	32b0      	adds	r2, #176	@ 0xb0
 8007a14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d01f      	beq.n	8007a5c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007a22:	687a      	ldr	r2, [r7, #4]
 8007a24:	33b0      	adds	r3, #176	@ 0xb0
 8007a26:	009b      	lsls	r3, r3, #2
 8007a28:	4413      	add	r3, r2
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	32b0      	adds	r2, #176	@ 0xb0
 8007a3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f00f fb12 	bl	8017068 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	32b0      	adds	r2, #176	@ 0xb0
 8007a4e:	2100      	movs	r1, #0
 8007a50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2200      	movs	r2, #0
 8007a58:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007a5c:	2300      	movs	r3, #0
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3708      	adds	r7, #8
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}
 8007a66:	bf00      	nop
 8007a68:	20000093 	.word	0x20000093
 8007a6c:	20000094 	.word	0x20000094
 8007a70:	20000095 	.word	0x20000095

08007a74 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b086      	sub	sp, #24
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	32b0      	adds	r2, #176	@ 0xb0
 8007a88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a8c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007a92:	2300      	movs	r3, #0
 8007a94:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a96:	2300      	movs	r3, #0
 8007a98:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d101      	bne.n	8007aa4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007aa0:	2303      	movs	r3, #3
 8007aa2:	e0bf      	b.n	8007c24 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	781b      	ldrb	r3, [r3, #0]
 8007aa8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d050      	beq.n	8007b52 <USBD_CDC_Setup+0xde>
 8007ab0:	2b20      	cmp	r3, #32
 8007ab2:	f040 80af 	bne.w	8007c14 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	88db      	ldrh	r3, [r3, #6]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d03a      	beq.n	8007b34 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	b25b      	sxtb	r3, r3
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	da1b      	bge.n	8007b00 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	33b0      	adds	r3, #176	@ 0xb0
 8007ad2:	009b      	lsls	r3, r3, #2
 8007ad4:	4413      	add	r3, r2
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	689b      	ldr	r3, [r3, #8]
 8007ada:	683a      	ldr	r2, [r7, #0]
 8007adc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007ade:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007ae0:	683a      	ldr	r2, [r7, #0]
 8007ae2:	88d2      	ldrh	r2, [r2, #6]
 8007ae4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	88db      	ldrh	r3, [r3, #6]
 8007aea:	2b07      	cmp	r3, #7
 8007aec:	bf28      	it	cs
 8007aee:	2307      	movcs	r3, #7
 8007af0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	89fa      	ldrh	r2, [r7, #14]
 8007af6:	4619      	mov	r1, r3
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f001 fda9 	bl	8009650 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007afe:	e090      	b.n	8007c22 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	785a      	ldrb	r2, [r3, #1]
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	88db      	ldrh	r3, [r3, #6]
 8007b0e:	2b3f      	cmp	r3, #63	@ 0x3f
 8007b10:	d803      	bhi.n	8007b1a <USBD_CDC_Setup+0xa6>
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	88db      	ldrh	r3, [r3, #6]
 8007b16:	b2da      	uxtb	r2, r3
 8007b18:	e000      	b.n	8007b1c <USBD_CDC_Setup+0xa8>
 8007b1a:	2240      	movs	r2, #64	@ 0x40
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007b22:	6939      	ldr	r1, [r7, #16]
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8007b2a:	461a      	mov	r2, r3
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f001 fdbe 	bl	80096ae <USBD_CtlPrepareRx>
      break;
 8007b32:	e076      	b.n	8007c22 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007b3a:	687a      	ldr	r2, [r7, #4]
 8007b3c:	33b0      	adds	r3, #176	@ 0xb0
 8007b3e:	009b      	lsls	r3, r3, #2
 8007b40:	4413      	add	r3, r2
 8007b42:	685b      	ldr	r3, [r3, #4]
 8007b44:	689b      	ldr	r3, [r3, #8]
 8007b46:	683a      	ldr	r2, [r7, #0]
 8007b48:	7850      	ldrb	r0, [r2, #1]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	6839      	ldr	r1, [r7, #0]
 8007b4e:	4798      	blx	r3
      break;
 8007b50:	e067      	b.n	8007c22 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	785b      	ldrb	r3, [r3, #1]
 8007b56:	2b0b      	cmp	r3, #11
 8007b58:	d851      	bhi.n	8007bfe <USBD_CDC_Setup+0x18a>
 8007b5a:	a201      	add	r2, pc, #4	@ (adr r2, 8007b60 <USBD_CDC_Setup+0xec>)
 8007b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b60:	08007b91 	.word	0x08007b91
 8007b64:	08007c0d 	.word	0x08007c0d
 8007b68:	08007bff 	.word	0x08007bff
 8007b6c:	08007bff 	.word	0x08007bff
 8007b70:	08007bff 	.word	0x08007bff
 8007b74:	08007bff 	.word	0x08007bff
 8007b78:	08007bff 	.word	0x08007bff
 8007b7c:	08007bff 	.word	0x08007bff
 8007b80:	08007bff 	.word	0x08007bff
 8007b84:	08007bff 	.word	0x08007bff
 8007b88:	08007bbb 	.word	0x08007bbb
 8007b8c:	08007be5 	.word	0x08007be5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b96:	b2db      	uxtb	r3, r3
 8007b98:	2b03      	cmp	r3, #3
 8007b9a:	d107      	bne.n	8007bac <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007b9c:	f107 030a 	add.w	r3, r7, #10
 8007ba0:	2202      	movs	r2, #2
 8007ba2:	4619      	mov	r1, r3
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f001 fd53 	bl	8009650 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007baa:	e032      	b.n	8007c12 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007bac:	6839      	ldr	r1, [r7, #0]
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f001 fcd1 	bl	8009556 <USBD_CtlError>
            ret = USBD_FAIL;
 8007bb4:	2303      	movs	r3, #3
 8007bb6:	75fb      	strb	r3, [r7, #23]
          break;
 8007bb8:	e02b      	b.n	8007c12 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007bc0:	b2db      	uxtb	r3, r3
 8007bc2:	2b03      	cmp	r3, #3
 8007bc4:	d107      	bne.n	8007bd6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007bc6:	f107 030d 	add.w	r3, r7, #13
 8007bca:	2201      	movs	r2, #1
 8007bcc:	4619      	mov	r1, r3
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f001 fd3e 	bl	8009650 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007bd4:	e01d      	b.n	8007c12 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007bd6:	6839      	ldr	r1, [r7, #0]
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f001 fcbc 	bl	8009556 <USBD_CtlError>
            ret = USBD_FAIL;
 8007bde:	2303      	movs	r3, #3
 8007be0:	75fb      	strb	r3, [r7, #23]
          break;
 8007be2:	e016      	b.n	8007c12 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007bea:	b2db      	uxtb	r3, r3
 8007bec:	2b03      	cmp	r3, #3
 8007bee:	d00f      	beq.n	8007c10 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007bf0:	6839      	ldr	r1, [r7, #0]
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f001 fcaf 	bl	8009556 <USBD_CtlError>
            ret = USBD_FAIL;
 8007bf8:	2303      	movs	r3, #3
 8007bfa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007bfc:	e008      	b.n	8007c10 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007bfe:	6839      	ldr	r1, [r7, #0]
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f001 fca8 	bl	8009556 <USBD_CtlError>
          ret = USBD_FAIL;
 8007c06:	2303      	movs	r3, #3
 8007c08:	75fb      	strb	r3, [r7, #23]
          break;
 8007c0a:	e002      	b.n	8007c12 <USBD_CDC_Setup+0x19e>
          break;
 8007c0c:	bf00      	nop
 8007c0e:	e008      	b.n	8007c22 <USBD_CDC_Setup+0x1ae>
          break;
 8007c10:	bf00      	nop
      }
      break;
 8007c12:	e006      	b.n	8007c22 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007c14:	6839      	ldr	r1, [r7, #0]
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f001 fc9d 	bl	8009556 <USBD_CtlError>
      ret = USBD_FAIL;
 8007c1c:	2303      	movs	r3, #3
 8007c1e:	75fb      	strb	r3, [r7, #23]
      break;
 8007c20:	bf00      	nop
  }

  return (uint8_t)ret;
 8007c22:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3718      	adds	r7, #24
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}

08007c2c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b084      	sub	sp, #16
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
 8007c34:	460b      	mov	r3, r1
 8007c36:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007c3e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	32b0      	adds	r2, #176	@ 0xb0
 8007c4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d101      	bne.n	8007c56 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007c52:	2303      	movs	r3, #3
 8007c54:	e065      	b.n	8007d22 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	32b0      	adds	r2, #176	@ 0xb0
 8007c60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c64:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007c66:	78fb      	ldrb	r3, [r7, #3]
 8007c68:	f003 020f 	and.w	r2, r3, #15
 8007c6c:	6879      	ldr	r1, [r7, #4]
 8007c6e:	4613      	mov	r3, r2
 8007c70:	009b      	lsls	r3, r3, #2
 8007c72:	4413      	add	r3, r2
 8007c74:	009b      	lsls	r3, r3, #2
 8007c76:	440b      	add	r3, r1
 8007c78:	3314      	adds	r3, #20
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d02f      	beq.n	8007ce0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007c80:	78fb      	ldrb	r3, [r7, #3]
 8007c82:	f003 020f 	and.w	r2, r3, #15
 8007c86:	6879      	ldr	r1, [r7, #4]
 8007c88:	4613      	mov	r3, r2
 8007c8a:	009b      	lsls	r3, r3, #2
 8007c8c:	4413      	add	r3, r2
 8007c8e:	009b      	lsls	r3, r3, #2
 8007c90:	440b      	add	r3, r1
 8007c92:	3314      	adds	r3, #20
 8007c94:	681a      	ldr	r2, [r3, #0]
 8007c96:	78fb      	ldrb	r3, [r7, #3]
 8007c98:	f003 010f 	and.w	r1, r3, #15
 8007c9c:	68f8      	ldr	r0, [r7, #12]
 8007c9e:	460b      	mov	r3, r1
 8007ca0:	00db      	lsls	r3, r3, #3
 8007ca2:	440b      	add	r3, r1
 8007ca4:	009b      	lsls	r3, r3, #2
 8007ca6:	4403      	add	r3, r0
 8007ca8:	331c      	adds	r3, #28
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	fbb2 f1f3 	udiv	r1, r2, r3
 8007cb0:	fb01 f303 	mul.w	r3, r1, r3
 8007cb4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d112      	bne.n	8007ce0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007cba:	78fb      	ldrb	r3, [r7, #3]
 8007cbc:	f003 020f 	and.w	r2, r3, #15
 8007cc0:	6879      	ldr	r1, [r7, #4]
 8007cc2:	4613      	mov	r3, r2
 8007cc4:	009b      	lsls	r3, r3, #2
 8007cc6:	4413      	add	r3, r2
 8007cc8:	009b      	lsls	r3, r3, #2
 8007cca:	440b      	add	r3, r1
 8007ccc:	3314      	adds	r3, #20
 8007cce:	2200      	movs	r2, #0
 8007cd0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007cd2:	78f9      	ldrb	r1, [r7, #3]
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f00f f962 	bl	8016fa2 <USBD_LL_Transmit>
 8007cde:	e01f      	b.n	8007d20 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007cee:	687a      	ldr	r2, [r7, #4]
 8007cf0:	33b0      	adds	r3, #176	@ 0xb0
 8007cf2:	009b      	lsls	r3, r3, #2
 8007cf4:	4413      	add	r3, r2
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	691b      	ldr	r3, [r3, #16]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d010      	beq.n	8007d20 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007d04:	687a      	ldr	r2, [r7, #4]
 8007d06:	33b0      	adds	r3, #176	@ 0xb0
 8007d08:	009b      	lsls	r3, r3, #2
 8007d0a:	4413      	add	r3, r2
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	691b      	ldr	r3, [r3, #16]
 8007d10:	68ba      	ldr	r2, [r7, #8]
 8007d12:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8007d16:	68ba      	ldr	r2, [r7, #8]
 8007d18:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007d1c:	78fa      	ldrb	r2, [r7, #3]
 8007d1e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007d20:	2300      	movs	r3, #0
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3710      	adds	r7, #16
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}

08007d2a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007d2a:	b580      	push	{r7, lr}
 8007d2c:	b084      	sub	sp, #16
 8007d2e:	af00      	add	r7, sp, #0
 8007d30:	6078      	str	r0, [r7, #4]
 8007d32:	460b      	mov	r3, r1
 8007d34:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	32b0      	adds	r2, #176	@ 0xb0
 8007d40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d44:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	32b0      	adds	r2, #176	@ 0xb0
 8007d50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d101      	bne.n	8007d5c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007d58:	2303      	movs	r3, #3
 8007d5a:	e01a      	b.n	8007d92 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007d5c:	78fb      	ldrb	r3, [r7, #3]
 8007d5e:	4619      	mov	r1, r3
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f00f f960 	bl	8017026 <USBD_LL_GetRxDataSize>
 8007d66:	4602      	mov	r2, r0
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	33b0      	adds	r3, #176	@ 0xb0
 8007d78:	009b      	lsls	r3, r3, #2
 8007d7a:	4413      	add	r3, r2
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	68db      	ldr	r3, [r3, #12]
 8007d80:	68fa      	ldr	r2, [r7, #12]
 8007d82:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007d86:	68fa      	ldr	r2, [r7, #12]
 8007d88:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007d8c:	4611      	mov	r1, r2
 8007d8e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007d90:	2300      	movs	r3, #0
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3710      	adds	r7, #16
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}

08007d9a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007d9a:	b580      	push	{r7, lr}
 8007d9c:	b084      	sub	sp, #16
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	32b0      	adds	r2, #176	@ 0xb0
 8007dac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007db0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d101      	bne.n	8007dbc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007db8:	2303      	movs	r3, #3
 8007dba:	e024      	b.n	8007e06 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007dc2:	687a      	ldr	r2, [r7, #4]
 8007dc4:	33b0      	adds	r3, #176	@ 0xb0
 8007dc6:	009b      	lsls	r3, r3, #2
 8007dc8:	4413      	add	r3, r2
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d019      	beq.n	8007e04 <USBD_CDC_EP0_RxReady+0x6a>
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007dd6:	2bff      	cmp	r3, #255	@ 0xff
 8007dd8:	d014      	beq.n	8007e04 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007de0:	687a      	ldr	r2, [r7, #4]
 8007de2:	33b0      	adds	r3, #176	@ 0xb0
 8007de4:	009b      	lsls	r3, r3, #2
 8007de6:	4413      	add	r3, r2
 8007de8:	685b      	ldr	r3, [r3, #4]
 8007dea:	689b      	ldr	r3, [r3, #8]
 8007dec:	68fa      	ldr	r2, [r7, #12]
 8007dee:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8007df2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007df4:	68fa      	ldr	r2, [r7, #12]
 8007df6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007dfa:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	22ff      	movs	r2, #255	@ 0xff
 8007e00:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007e04:	2300      	movs	r3, #0
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	3710      	adds	r7, #16
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}
	...

08007e10 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b086      	sub	sp, #24
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007e18:	2182      	movs	r1, #130	@ 0x82
 8007e1a:	4818      	ldr	r0, [pc, #96]	@ (8007e7c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007e1c:	f000 fd62 	bl	80088e4 <USBD_GetEpDesc>
 8007e20:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007e22:	2101      	movs	r1, #1
 8007e24:	4815      	ldr	r0, [pc, #84]	@ (8007e7c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007e26:	f000 fd5d 	bl	80088e4 <USBD_GetEpDesc>
 8007e2a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007e2c:	2181      	movs	r1, #129	@ 0x81
 8007e2e:	4813      	ldr	r0, [pc, #76]	@ (8007e7c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007e30:	f000 fd58 	bl	80088e4 <USBD_GetEpDesc>
 8007e34:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d002      	beq.n	8007e42 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	2210      	movs	r2, #16
 8007e40:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d006      	beq.n	8007e56 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007e50:	711a      	strb	r2, [r3, #4]
 8007e52:	2200      	movs	r2, #0
 8007e54:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d006      	beq.n	8007e6a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007e64:	711a      	strb	r2, [r3, #4]
 8007e66:	2200      	movs	r2, #0
 8007e68:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2243      	movs	r2, #67	@ 0x43
 8007e6e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007e70:	4b02      	ldr	r3, [pc, #8]	@ (8007e7c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3718      	adds	r7, #24
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}
 8007e7a:	bf00      	nop
 8007e7c:	20000050 	.word	0x20000050

08007e80 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b086      	sub	sp, #24
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007e88:	2182      	movs	r1, #130	@ 0x82
 8007e8a:	4818      	ldr	r0, [pc, #96]	@ (8007eec <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007e8c:	f000 fd2a 	bl	80088e4 <USBD_GetEpDesc>
 8007e90:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007e92:	2101      	movs	r1, #1
 8007e94:	4815      	ldr	r0, [pc, #84]	@ (8007eec <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007e96:	f000 fd25 	bl	80088e4 <USBD_GetEpDesc>
 8007e9a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007e9c:	2181      	movs	r1, #129	@ 0x81
 8007e9e:	4813      	ldr	r0, [pc, #76]	@ (8007eec <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007ea0:	f000 fd20 	bl	80088e4 <USBD_GetEpDesc>
 8007ea4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d002      	beq.n	8007eb2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	2210      	movs	r2, #16
 8007eb0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d006      	beq.n	8007ec6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007eb8:	693b      	ldr	r3, [r7, #16]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	711a      	strb	r2, [r3, #4]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	f042 0202 	orr.w	r2, r2, #2
 8007ec4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d006      	beq.n	8007eda <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	711a      	strb	r2, [r3, #4]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	f042 0202 	orr.w	r2, r2, #2
 8007ed8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2243      	movs	r2, #67	@ 0x43
 8007ede:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007ee0:	4b02      	ldr	r3, [pc, #8]	@ (8007eec <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3718      	adds	r7, #24
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}
 8007eea:	bf00      	nop
 8007eec:	20000050 	.word	0x20000050

08007ef0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b086      	sub	sp, #24
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007ef8:	2182      	movs	r1, #130	@ 0x82
 8007efa:	4818      	ldr	r0, [pc, #96]	@ (8007f5c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007efc:	f000 fcf2 	bl	80088e4 <USBD_GetEpDesc>
 8007f00:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007f02:	2101      	movs	r1, #1
 8007f04:	4815      	ldr	r0, [pc, #84]	@ (8007f5c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007f06:	f000 fced 	bl	80088e4 <USBD_GetEpDesc>
 8007f0a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007f0c:	2181      	movs	r1, #129	@ 0x81
 8007f0e:	4813      	ldr	r0, [pc, #76]	@ (8007f5c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007f10:	f000 fce8 	bl	80088e4 <USBD_GetEpDesc>
 8007f14:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d002      	beq.n	8007f22 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	2210      	movs	r2, #16
 8007f20:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d006      	beq.n	8007f36 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007f30:	711a      	strb	r2, [r3, #4]
 8007f32:	2200      	movs	r2, #0
 8007f34:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d006      	beq.n	8007f4a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007f44:	711a      	strb	r2, [r3, #4]
 8007f46:	2200      	movs	r2, #0
 8007f48:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2243      	movs	r2, #67	@ 0x43
 8007f4e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007f50:	4b02      	ldr	r3, [pc, #8]	@ (8007f5c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	3718      	adds	r7, #24
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}
 8007f5a:	bf00      	nop
 8007f5c:	20000050 	.word	0x20000050

08007f60 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007f60:	b480      	push	{r7}
 8007f62:	b083      	sub	sp, #12
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	220a      	movs	r2, #10
 8007f6c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007f6e:	4b03      	ldr	r3, [pc, #12]	@ (8007f7c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	370c      	adds	r7, #12
 8007f74:	46bd      	mov	sp, r7
 8007f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7a:	4770      	bx	lr
 8007f7c:	2000000c 	.word	0x2000000c

08007f80 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b083      	sub	sp, #12
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
 8007f88:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d101      	bne.n	8007f94 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007f90:	2303      	movs	r3, #3
 8007f92:	e009      	b.n	8007fa8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007f9a:	687a      	ldr	r2, [r7, #4]
 8007f9c:	33b0      	adds	r3, #176	@ 0xb0
 8007f9e:	009b      	lsls	r3, r3, #2
 8007fa0:	4413      	add	r3, r2
 8007fa2:	683a      	ldr	r2, [r7, #0]
 8007fa4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007fa6:	2300      	movs	r3, #0
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	370c      	adds	r7, #12
 8007fac:	46bd      	mov	sp, r7
 8007fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb2:	4770      	bx	lr

08007fb4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b087      	sub	sp, #28
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	60f8      	str	r0, [r7, #12]
 8007fbc:	60b9      	str	r1, [r7, #8]
 8007fbe:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	32b0      	adds	r2, #176	@ 0xb0
 8007fca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fce:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d101      	bne.n	8007fda <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007fd6:	2303      	movs	r3, #3
 8007fd8:	e008      	b.n	8007fec <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	68ba      	ldr	r2, [r7, #8]
 8007fde:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	687a      	ldr	r2, [r7, #4]
 8007fe6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8007fea:	2300      	movs	r3, #0
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	371c      	adds	r7, #28
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff6:	4770      	bx	lr

08007ff8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b085      	sub	sp, #20
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
 8008000:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	32b0      	adds	r2, #176	@ 0xb0
 800800c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008010:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d101      	bne.n	800801c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008018:	2303      	movs	r3, #3
 800801a:	e004      	b.n	8008026 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	683a      	ldr	r2, [r7, #0]
 8008020:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8008024:	2300      	movs	r3, #0
}
 8008026:	4618      	mov	r0, r3
 8008028:	3714      	adds	r7, #20
 800802a:	46bd      	mov	sp, r7
 800802c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008030:	4770      	bx	lr
	...

08008034 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b084      	sub	sp, #16
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	32b0      	adds	r2, #176	@ 0xb0
 8008046:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800804a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800804c:	2301      	movs	r3, #1
 800804e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d101      	bne.n	800805a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008056:	2303      	movs	r3, #3
 8008058:	e025      	b.n	80080a6 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008060:	2b00      	cmp	r3, #0
 8008062:	d11f      	bne.n	80080a4 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	2201      	movs	r2, #1
 8008068:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800806c:	4b10      	ldr	r3, [pc, #64]	@ (80080b0 <USBD_CDC_TransmitPacket+0x7c>)
 800806e:	781b      	ldrb	r3, [r3, #0]
 8008070:	f003 020f 	and.w	r2, r3, #15
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	4613      	mov	r3, r2
 800807e:	009b      	lsls	r3, r3, #2
 8008080:	4413      	add	r3, r2
 8008082:	009b      	lsls	r3, r3, #2
 8008084:	4403      	add	r3, r0
 8008086:	3314      	adds	r3, #20
 8008088:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800808a:	4b09      	ldr	r3, [pc, #36]	@ (80080b0 <USBD_CDC_TransmitPacket+0x7c>)
 800808c:	7819      	ldrb	r1, [r3, #0]
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f00e ff81 	bl	8016fa2 <USBD_LL_Transmit>

    ret = USBD_OK;
 80080a0:	2300      	movs	r3, #0
 80080a2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80080a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	3710      	adds	r7, #16
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}
 80080ae:	bf00      	nop
 80080b0:	20000093 	.word	0x20000093

080080b4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b084      	sub	sp, #16
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	32b0      	adds	r2, #176	@ 0xb0
 80080c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080ca:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	32b0      	adds	r2, #176	@ 0xb0
 80080d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d101      	bne.n	80080e2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80080de:	2303      	movs	r3, #3
 80080e0:	e018      	b.n	8008114 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	7c1b      	ldrb	r3, [r3, #16]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d10a      	bne.n	8008100 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80080ea:	4b0c      	ldr	r3, [pc, #48]	@ (800811c <USBD_CDC_ReceivePacket+0x68>)
 80080ec:	7819      	ldrb	r1, [r3, #0]
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80080f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f00e ff73 	bl	8016fe4 <USBD_LL_PrepareReceive>
 80080fe:	e008      	b.n	8008112 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008100:	4b06      	ldr	r3, [pc, #24]	@ (800811c <USBD_CDC_ReceivePacket+0x68>)
 8008102:	7819      	ldrb	r1, [r3, #0]
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800810a:	2340      	movs	r3, #64	@ 0x40
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f00e ff69 	bl	8016fe4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008112:	2300      	movs	r3, #0
}
 8008114:	4618      	mov	r0, r3
 8008116:	3710      	adds	r7, #16
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}
 800811c:	20000094 	.word	0x20000094

08008120 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b086      	sub	sp, #24
 8008124:	af00      	add	r7, sp, #0
 8008126:	60f8      	str	r0, [r7, #12]
 8008128:	60b9      	str	r1, [r7, #8]
 800812a:	4613      	mov	r3, r2
 800812c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d101      	bne.n	8008138 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008134:	2303      	movs	r3, #3
 8008136:	e01f      	b.n	8008178 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	2200      	movs	r2, #0
 800813c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	2200      	movs	r2, #0
 8008144:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	2200      	movs	r2, #0
 800814c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d003      	beq.n	800815e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	68ba      	ldr	r2, [r7, #8]
 800815a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	2201      	movs	r2, #1
 8008162:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	79fa      	ldrb	r2, [r7, #7]
 800816a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800816c:	68f8      	ldr	r0, [r7, #12]
 800816e:	f00e fde3 	bl	8016d38 <USBD_LL_Init>
 8008172:	4603      	mov	r3, r0
 8008174:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008176:	7dfb      	ldrb	r3, [r7, #23]
}
 8008178:	4618      	mov	r0, r3
 800817a:	3718      	adds	r7, #24
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}

08008180 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b084      	sub	sp, #16
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
 8008188:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800818a:	2300      	movs	r3, #0
 800818c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d101      	bne.n	8008198 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008194:	2303      	movs	r3, #3
 8008196:	e025      	b.n	80081e4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	683a      	ldr	r2, [r7, #0]
 800819c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	32ae      	adds	r2, #174	@ 0xae
 80081aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d00f      	beq.n	80081d4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	32ae      	adds	r2, #174	@ 0xae
 80081be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081c4:	f107 020e 	add.w	r2, r7, #14
 80081c8:	4610      	mov	r0, r2
 80081ca:	4798      	blx	r3
 80081cc:	4602      	mov	r2, r0
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80081da:	1c5a      	adds	r2, r3, #1
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80081e2:	2300      	movs	r3, #0
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	3710      	adds	r7, #16
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}

080081ec <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b082      	sub	sp, #8
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f00e fdeb 	bl	8016dd0 <USBD_LL_Start>
 80081fa:	4603      	mov	r3, r0
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3708      	adds	r7, #8
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}

08008204 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008204:	b480      	push	{r7}
 8008206:	b083      	sub	sp, #12
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800820c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800820e:	4618      	mov	r0, r3
 8008210:	370c      	adds	r7, #12
 8008212:	46bd      	mov	sp, r7
 8008214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008218:	4770      	bx	lr

0800821a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800821a:	b580      	push	{r7, lr}
 800821c:	b084      	sub	sp, #16
 800821e:	af00      	add	r7, sp, #0
 8008220:	6078      	str	r0, [r7, #4]
 8008222:	460b      	mov	r3, r1
 8008224:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008226:	2300      	movs	r3, #0
 8008228:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008230:	2b00      	cmp	r3, #0
 8008232:	d009      	beq.n	8008248 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	78fa      	ldrb	r2, [r7, #3]
 800823e:	4611      	mov	r1, r2
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	4798      	blx	r3
 8008244:	4603      	mov	r3, r0
 8008246:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008248:	7bfb      	ldrb	r3, [r7, #15]
}
 800824a:	4618      	mov	r0, r3
 800824c:	3710      	adds	r7, #16
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}

08008252 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008252:	b580      	push	{r7, lr}
 8008254:	b084      	sub	sp, #16
 8008256:	af00      	add	r7, sp, #0
 8008258:	6078      	str	r0, [r7, #4]
 800825a:	460b      	mov	r3, r1
 800825c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800825e:	2300      	movs	r3, #0
 8008260:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	78fa      	ldrb	r2, [r7, #3]
 800826c:	4611      	mov	r1, r2
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	4798      	blx	r3
 8008272:	4603      	mov	r3, r0
 8008274:	2b00      	cmp	r3, #0
 8008276:	d001      	beq.n	800827c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008278:	2303      	movs	r3, #3
 800827a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800827c:	7bfb      	ldrb	r3, [r7, #15]
}
 800827e:	4618      	mov	r0, r3
 8008280:	3710      	adds	r7, #16
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}

08008286 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008286:	b580      	push	{r7, lr}
 8008288:	b084      	sub	sp, #16
 800828a:	af00      	add	r7, sp, #0
 800828c:	6078      	str	r0, [r7, #4]
 800828e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008296:	6839      	ldr	r1, [r7, #0]
 8008298:	4618      	mov	r0, r3
 800829a:	f001 f922 	bl	80094e2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2201      	movs	r2, #1
 80082a2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80082ac:	461a      	mov	r2, r3
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80082ba:	f003 031f 	and.w	r3, r3, #31
 80082be:	2b02      	cmp	r3, #2
 80082c0:	d01a      	beq.n	80082f8 <USBD_LL_SetupStage+0x72>
 80082c2:	2b02      	cmp	r3, #2
 80082c4:	d822      	bhi.n	800830c <USBD_LL_SetupStage+0x86>
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d002      	beq.n	80082d0 <USBD_LL_SetupStage+0x4a>
 80082ca:	2b01      	cmp	r3, #1
 80082cc:	d00a      	beq.n	80082e4 <USBD_LL_SetupStage+0x5e>
 80082ce:	e01d      	b.n	800830c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80082d6:	4619      	mov	r1, r3
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f000 fb77 	bl	80089cc <USBD_StdDevReq>
 80082de:	4603      	mov	r3, r0
 80082e0:	73fb      	strb	r3, [r7, #15]
      break;
 80082e2:	e020      	b.n	8008326 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80082ea:	4619      	mov	r1, r3
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f000 fbdf 	bl	8008ab0 <USBD_StdItfReq>
 80082f2:	4603      	mov	r3, r0
 80082f4:	73fb      	strb	r3, [r7, #15]
      break;
 80082f6:	e016      	b.n	8008326 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80082fe:	4619      	mov	r1, r3
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f000 fc41 	bl	8008b88 <USBD_StdEPReq>
 8008306:	4603      	mov	r3, r0
 8008308:	73fb      	strb	r3, [r7, #15]
      break;
 800830a:	e00c      	b.n	8008326 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008312:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008316:	b2db      	uxtb	r3, r3
 8008318:	4619      	mov	r1, r3
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f00e fdb8 	bl	8016e90 <USBD_LL_StallEP>
 8008320:	4603      	mov	r3, r0
 8008322:	73fb      	strb	r3, [r7, #15]
      break;
 8008324:	bf00      	nop
  }

  return ret;
 8008326:	7bfb      	ldrb	r3, [r7, #15]
}
 8008328:	4618      	mov	r0, r3
 800832a:	3710      	adds	r7, #16
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}

08008330 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b086      	sub	sp, #24
 8008334:	af00      	add	r7, sp, #0
 8008336:	60f8      	str	r0, [r7, #12]
 8008338:	460b      	mov	r3, r1
 800833a:	607a      	str	r2, [r7, #4]
 800833c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800833e:	2300      	movs	r3, #0
 8008340:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8008342:	7afb      	ldrb	r3, [r7, #11]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d177      	bne.n	8008438 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800834e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008356:	2b03      	cmp	r3, #3
 8008358:	f040 80a1 	bne.w	800849e <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 800835c:	693b      	ldr	r3, [r7, #16]
 800835e:	685b      	ldr	r3, [r3, #4]
 8008360:	693a      	ldr	r2, [r7, #16]
 8008362:	8992      	ldrh	r2, [r2, #12]
 8008364:	4293      	cmp	r3, r2
 8008366:	d91c      	bls.n	80083a2 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	685b      	ldr	r3, [r3, #4]
 800836c:	693a      	ldr	r2, [r7, #16]
 800836e:	8992      	ldrh	r2, [r2, #12]
 8008370:	1a9a      	subs	r2, r3, r2
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	691b      	ldr	r3, [r3, #16]
 800837a:	693a      	ldr	r2, [r7, #16]
 800837c:	8992      	ldrh	r2, [r2, #12]
 800837e:	441a      	add	r2, r3
 8008380:	693b      	ldr	r3, [r7, #16]
 8008382:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	6919      	ldr	r1, [r3, #16]
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	899b      	ldrh	r3, [r3, #12]
 800838c:	461a      	mov	r2, r3
 800838e:	693b      	ldr	r3, [r7, #16]
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	4293      	cmp	r3, r2
 8008394:	bf38      	it	cc
 8008396:	4613      	movcc	r3, r2
 8008398:	461a      	mov	r2, r3
 800839a:	68f8      	ldr	r0, [r7, #12]
 800839c:	f001 f9a8 	bl	80096f0 <USBD_CtlContinueRx>
 80083a0:	e07d      	b.n	800849e <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80083a8:	f003 031f 	and.w	r3, r3, #31
 80083ac:	2b02      	cmp	r3, #2
 80083ae:	d014      	beq.n	80083da <USBD_LL_DataOutStage+0xaa>
 80083b0:	2b02      	cmp	r3, #2
 80083b2:	d81d      	bhi.n	80083f0 <USBD_LL_DataOutStage+0xc0>
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d002      	beq.n	80083be <USBD_LL_DataOutStage+0x8e>
 80083b8:	2b01      	cmp	r3, #1
 80083ba:	d003      	beq.n	80083c4 <USBD_LL_DataOutStage+0x94>
 80083bc:	e018      	b.n	80083f0 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80083be:	2300      	movs	r3, #0
 80083c0:	75bb      	strb	r3, [r7, #22]
            break;
 80083c2:	e018      	b.n	80083f6 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80083ca:	b2db      	uxtb	r3, r3
 80083cc:	4619      	mov	r1, r3
 80083ce:	68f8      	ldr	r0, [r7, #12]
 80083d0:	f000 fa6e 	bl	80088b0 <USBD_CoreFindIF>
 80083d4:	4603      	mov	r3, r0
 80083d6:	75bb      	strb	r3, [r7, #22]
            break;
 80083d8:	e00d      	b.n	80083f6 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80083e0:	b2db      	uxtb	r3, r3
 80083e2:	4619      	mov	r1, r3
 80083e4:	68f8      	ldr	r0, [r7, #12]
 80083e6:	f000 fa70 	bl	80088ca <USBD_CoreFindEP>
 80083ea:	4603      	mov	r3, r0
 80083ec:	75bb      	strb	r3, [r7, #22]
            break;
 80083ee:	e002      	b.n	80083f6 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80083f0:	2300      	movs	r3, #0
 80083f2:	75bb      	strb	r3, [r7, #22]
            break;
 80083f4:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80083f6:	7dbb      	ldrb	r3, [r7, #22]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d119      	bne.n	8008430 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008402:	b2db      	uxtb	r3, r3
 8008404:	2b03      	cmp	r3, #3
 8008406:	d113      	bne.n	8008430 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008408:	7dba      	ldrb	r2, [r7, #22]
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	32ae      	adds	r2, #174	@ 0xae
 800840e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008412:	691b      	ldr	r3, [r3, #16]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d00b      	beq.n	8008430 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8008418:	7dba      	ldrb	r2, [r7, #22]
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008420:	7dba      	ldrb	r2, [r7, #22]
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	32ae      	adds	r2, #174	@ 0xae
 8008426:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800842a:	691b      	ldr	r3, [r3, #16]
 800842c:	68f8      	ldr	r0, [r7, #12]
 800842e:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008430:	68f8      	ldr	r0, [r7, #12]
 8008432:	f001 f96e 	bl	8009712 <USBD_CtlSendStatus>
 8008436:	e032      	b.n	800849e <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008438:	7afb      	ldrb	r3, [r7, #11]
 800843a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800843e:	b2db      	uxtb	r3, r3
 8008440:	4619      	mov	r1, r3
 8008442:	68f8      	ldr	r0, [r7, #12]
 8008444:	f000 fa41 	bl	80088ca <USBD_CoreFindEP>
 8008448:	4603      	mov	r3, r0
 800844a:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800844c:	7dbb      	ldrb	r3, [r7, #22]
 800844e:	2bff      	cmp	r3, #255	@ 0xff
 8008450:	d025      	beq.n	800849e <USBD_LL_DataOutStage+0x16e>
 8008452:	7dbb      	ldrb	r3, [r7, #22]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d122      	bne.n	800849e <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800845e:	b2db      	uxtb	r3, r3
 8008460:	2b03      	cmp	r3, #3
 8008462:	d117      	bne.n	8008494 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008464:	7dba      	ldrb	r2, [r7, #22]
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	32ae      	adds	r2, #174	@ 0xae
 800846a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800846e:	699b      	ldr	r3, [r3, #24]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d00f      	beq.n	8008494 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8008474:	7dba      	ldrb	r2, [r7, #22]
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800847c:	7dba      	ldrb	r2, [r7, #22]
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	32ae      	adds	r2, #174	@ 0xae
 8008482:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008486:	699b      	ldr	r3, [r3, #24]
 8008488:	7afa      	ldrb	r2, [r7, #11]
 800848a:	4611      	mov	r1, r2
 800848c:	68f8      	ldr	r0, [r7, #12]
 800848e:	4798      	blx	r3
 8008490:	4603      	mov	r3, r0
 8008492:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008494:	7dfb      	ldrb	r3, [r7, #23]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d001      	beq.n	800849e <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800849a:	7dfb      	ldrb	r3, [r7, #23]
 800849c:	e000      	b.n	80084a0 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800849e:	2300      	movs	r3, #0
}
 80084a0:	4618      	mov	r0, r3
 80084a2:	3718      	adds	r7, #24
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}

080084a8 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b086      	sub	sp, #24
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	60f8      	str	r0, [r7, #12]
 80084b0:	460b      	mov	r3, r1
 80084b2:	607a      	str	r2, [r7, #4]
 80084b4:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 80084b6:	7afb      	ldrb	r3, [r7, #11]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d178      	bne.n	80085ae <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	3314      	adds	r3, #20
 80084c0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80084c8:	2b02      	cmp	r3, #2
 80084ca:	d163      	bne.n	8008594 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 80084cc:	693b      	ldr	r3, [r7, #16]
 80084ce:	685b      	ldr	r3, [r3, #4]
 80084d0:	693a      	ldr	r2, [r7, #16]
 80084d2:	8992      	ldrh	r2, [r2, #12]
 80084d4:	4293      	cmp	r3, r2
 80084d6:	d91c      	bls.n	8008512 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	685b      	ldr	r3, [r3, #4]
 80084dc:	693a      	ldr	r2, [r7, #16]
 80084de:	8992      	ldrh	r2, [r2, #12]
 80084e0:	1a9a      	subs	r2, r3, r2
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	691b      	ldr	r3, [r3, #16]
 80084ea:	693a      	ldr	r2, [r7, #16]
 80084ec:	8992      	ldrh	r2, [r2, #12]
 80084ee:	441a      	add	r2, r3
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	6919      	ldr	r1, [r3, #16]
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	685b      	ldr	r3, [r3, #4]
 80084fc:	461a      	mov	r2, r3
 80084fe:	68f8      	ldr	r0, [r7, #12]
 8008500:	f001 f8c4 	bl	800968c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008504:	2300      	movs	r3, #0
 8008506:	2200      	movs	r2, #0
 8008508:	2100      	movs	r1, #0
 800850a:	68f8      	ldr	r0, [r7, #12]
 800850c:	f00e fd6a 	bl	8016fe4 <USBD_LL_PrepareReceive>
 8008510:	e040      	b.n	8008594 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	899b      	ldrh	r3, [r3, #12]
 8008516:	461a      	mov	r2, r3
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	685b      	ldr	r3, [r3, #4]
 800851c:	429a      	cmp	r2, r3
 800851e:	d11c      	bne.n	800855a <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8008520:	693b      	ldr	r3, [r7, #16]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	693a      	ldr	r2, [r7, #16]
 8008526:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008528:	4293      	cmp	r3, r2
 800852a:	d316      	bcc.n	800855a <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	681a      	ldr	r2, [r3, #0]
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008536:	429a      	cmp	r2, r3
 8008538:	d20f      	bcs.n	800855a <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800853a:	2200      	movs	r2, #0
 800853c:	2100      	movs	r1, #0
 800853e:	68f8      	ldr	r0, [r7, #12]
 8008540:	f001 f8a4 	bl	800968c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	2200      	movs	r2, #0
 8008548:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800854c:	2300      	movs	r3, #0
 800854e:	2200      	movs	r2, #0
 8008550:	2100      	movs	r1, #0
 8008552:	68f8      	ldr	r0, [r7, #12]
 8008554:	f00e fd46 	bl	8016fe4 <USBD_LL_PrepareReceive>
 8008558:	e01c      	b.n	8008594 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008560:	b2db      	uxtb	r3, r3
 8008562:	2b03      	cmp	r3, #3
 8008564:	d10f      	bne.n	8008586 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800856c:	68db      	ldr	r3, [r3, #12]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d009      	beq.n	8008586 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	2200      	movs	r2, #0
 8008576:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008580:	68db      	ldr	r3, [r3, #12]
 8008582:	68f8      	ldr	r0, [r7, #12]
 8008584:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008586:	2180      	movs	r1, #128	@ 0x80
 8008588:	68f8      	ldr	r0, [r7, #12]
 800858a:	f00e fc81 	bl	8016e90 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800858e:	68f8      	ldr	r0, [r7, #12]
 8008590:	f001 f8d2 	bl	8009738 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800859a:	2b00      	cmp	r3, #0
 800859c:	d03a      	beq.n	8008614 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800859e:	68f8      	ldr	r0, [r7, #12]
 80085a0:	f7ff fe30 	bl	8008204 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	2200      	movs	r2, #0
 80085a8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80085ac:	e032      	b.n	8008614 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80085ae:	7afb      	ldrb	r3, [r7, #11]
 80085b0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80085b4:	b2db      	uxtb	r3, r3
 80085b6:	4619      	mov	r1, r3
 80085b8:	68f8      	ldr	r0, [r7, #12]
 80085ba:	f000 f986 	bl	80088ca <USBD_CoreFindEP>
 80085be:	4603      	mov	r3, r0
 80085c0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80085c2:	7dfb      	ldrb	r3, [r7, #23]
 80085c4:	2bff      	cmp	r3, #255	@ 0xff
 80085c6:	d025      	beq.n	8008614 <USBD_LL_DataInStage+0x16c>
 80085c8:	7dfb      	ldrb	r3, [r7, #23]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d122      	bne.n	8008614 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085d4:	b2db      	uxtb	r3, r3
 80085d6:	2b03      	cmp	r3, #3
 80085d8:	d11c      	bne.n	8008614 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80085da:	7dfa      	ldrb	r2, [r7, #23]
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	32ae      	adds	r2, #174	@ 0xae
 80085e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085e4:	695b      	ldr	r3, [r3, #20]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d014      	beq.n	8008614 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 80085ea:	7dfa      	ldrb	r2, [r7, #23]
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80085f2:	7dfa      	ldrb	r2, [r7, #23]
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	32ae      	adds	r2, #174	@ 0xae
 80085f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085fc:	695b      	ldr	r3, [r3, #20]
 80085fe:	7afa      	ldrb	r2, [r7, #11]
 8008600:	4611      	mov	r1, r2
 8008602:	68f8      	ldr	r0, [r7, #12]
 8008604:	4798      	blx	r3
 8008606:	4603      	mov	r3, r0
 8008608:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800860a:	7dbb      	ldrb	r3, [r7, #22]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d001      	beq.n	8008614 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 8008610:	7dbb      	ldrb	r3, [r7, #22]
 8008612:	e000      	b.n	8008616 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8008614:	2300      	movs	r3, #0
}
 8008616:	4618      	mov	r0, r3
 8008618:	3718      	adds	r7, #24
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}

0800861e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800861e:	b580      	push	{r7, lr}
 8008620:	b084      	sub	sp, #16
 8008622:	af00      	add	r7, sp, #0
 8008624:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008626:	2300      	movs	r3, #0
 8008628:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2201      	movs	r2, #1
 800862e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2200      	movs	r2, #0
 8008636:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2200      	movs	r2, #0
 800863e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2200      	movs	r2, #0
 8008644:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2200      	movs	r2, #0
 800864c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008656:	2b00      	cmp	r3, #0
 8008658:	d014      	beq.n	8008684 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008660:	685b      	ldr	r3, [r3, #4]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d00e      	beq.n	8008684 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800866c:	685b      	ldr	r3, [r3, #4]
 800866e:	687a      	ldr	r2, [r7, #4]
 8008670:	6852      	ldr	r2, [r2, #4]
 8008672:	b2d2      	uxtb	r2, r2
 8008674:	4611      	mov	r1, r2
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	4798      	blx	r3
 800867a:	4603      	mov	r3, r0
 800867c:	2b00      	cmp	r3, #0
 800867e:	d001      	beq.n	8008684 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008680:	2303      	movs	r3, #3
 8008682:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008684:	2340      	movs	r3, #64	@ 0x40
 8008686:	2200      	movs	r2, #0
 8008688:	2100      	movs	r1, #0
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f00e fbbb 	bl	8016e06 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2201      	movs	r2, #1
 8008694:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2240      	movs	r2, #64	@ 0x40
 800869c:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80086a0:	2340      	movs	r3, #64	@ 0x40
 80086a2:	2200      	movs	r2, #0
 80086a4:	2180      	movs	r1, #128	@ 0x80
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f00e fbad 	bl	8016e06 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2201      	movs	r2, #1
 80086b0:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2240      	movs	r2, #64	@ 0x40
 80086b8:	841a      	strh	r2, [r3, #32]

  return ret;
 80086ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80086bc:	4618      	mov	r0, r3
 80086be:	3710      	adds	r7, #16
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}

080086c4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b083      	sub	sp, #12
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
 80086cc:	460b      	mov	r3, r1
 80086ce:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	78fa      	ldrb	r2, [r7, #3]
 80086d4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80086d6:	2300      	movs	r3, #0
}
 80086d8:	4618      	mov	r0, r3
 80086da:	370c      	adds	r7, #12
 80086dc:	46bd      	mov	sp, r7
 80086de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e2:	4770      	bx	lr

080086e4 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80086e4:	b480      	push	{r7}
 80086e6:	b083      	sub	sp, #12
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086f2:	b2db      	uxtb	r3, r3
 80086f4:	2b04      	cmp	r3, #4
 80086f6:	d006      	beq.n	8008706 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086fe:	b2da      	uxtb	r2, r3
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2204      	movs	r2, #4
 800870a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800870e:	2300      	movs	r3, #0
}
 8008710:	4618      	mov	r0, r3
 8008712:	370c      	adds	r7, #12
 8008714:	46bd      	mov	sp, r7
 8008716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871a:	4770      	bx	lr

0800871c <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800871c:	b480      	push	{r7}
 800871e:	b083      	sub	sp, #12
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800872a:	b2db      	uxtb	r3, r3
 800872c:	2b04      	cmp	r3, #4
 800872e:	d106      	bne.n	800873e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8008736:	b2da      	uxtb	r2, r3
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800873e:	2300      	movs	r3, #0
}
 8008740:	4618      	mov	r0, r3
 8008742:	370c      	adds	r7, #12
 8008744:	46bd      	mov	sp, r7
 8008746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874a:	4770      	bx	lr

0800874c <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b082      	sub	sp, #8
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800875a:	b2db      	uxtb	r3, r3
 800875c:	2b03      	cmp	r3, #3
 800875e:	d110      	bne.n	8008782 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008766:	2b00      	cmp	r3, #0
 8008768:	d00b      	beq.n	8008782 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008770:	69db      	ldr	r3, [r3, #28]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d005      	beq.n	8008782 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800877c:	69db      	ldr	r3, [r3, #28]
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008782:	2300      	movs	r3, #0
}
 8008784:	4618      	mov	r0, r3
 8008786:	3708      	adds	r7, #8
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}

0800878c <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b082      	sub	sp, #8
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	460b      	mov	r3, r1
 8008796:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	32ae      	adds	r2, #174	@ 0xae
 80087a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d101      	bne.n	80087ae <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80087aa:	2303      	movs	r3, #3
 80087ac:	e01c      	b.n	80087e8 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087b4:	b2db      	uxtb	r3, r3
 80087b6:	2b03      	cmp	r3, #3
 80087b8:	d115      	bne.n	80087e6 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	32ae      	adds	r2, #174	@ 0xae
 80087c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087c8:	6a1b      	ldr	r3, [r3, #32]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d00b      	beq.n	80087e6 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	32ae      	adds	r2, #174	@ 0xae
 80087d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087dc:	6a1b      	ldr	r3, [r3, #32]
 80087de:	78fa      	ldrb	r2, [r7, #3]
 80087e0:	4611      	mov	r1, r2
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80087e6:	2300      	movs	r3, #0
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	3708      	adds	r7, #8
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}

080087f0 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b082      	sub	sp, #8
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
 80087f8:	460b      	mov	r3, r1
 80087fa:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	32ae      	adds	r2, #174	@ 0xae
 8008806:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d101      	bne.n	8008812 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800880e:	2303      	movs	r3, #3
 8008810:	e01c      	b.n	800884c <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008818:	b2db      	uxtb	r3, r3
 800881a:	2b03      	cmp	r3, #3
 800881c:	d115      	bne.n	800884a <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	32ae      	adds	r2, #174	@ 0xae
 8008828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800882c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800882e:	2b00      	cmp	r3, #0
 8008830:	d00b      	beq.n	800884a <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	32ae      	adds	r2, #174	@ 0xae
 800883c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008842:	78fa      	ldrb	r2, [r7, #3]
 8008844:	4611      	mov	r1, r2
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800884a:	2300      	movs	r3, #0
}
 800884c:	4618      	mov	r0, r3
 800884e:	3708      	adds	r7, #8
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}

08008854 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008854:	b480      	push	{r7}
 8008856:	b083      	sub	sp, #12
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800885c:	2300      	movs	r3, #0
}
 800885e:	4618      	mov	r0, r3
 8008860:	370c      	adds	r7, #12
 8008862:	46bd      	mov	sp, r7
 8008864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008868:	4770      	bx	lr

0800886a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800886a:	b580      	push	{r7, lr}
 800886c:	b084      	sub	sp, #16
 800886e:	af00      	add	r7, sp, #0
 8008870:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008872:	2300      	movs	r3, #0
 8008874:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2201      	movs	r2, #1
 800887a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008884:	2b00      	cmp	r3, #0
 8008886:	d00e      	beq.n	80088a6 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800888e:	685b      	ldr	r3, [r3, #4]
 8008890:	687a      	ldr	r2, [r7, #4]
 8008892:	6852      	ldr	r2, [r2, #4]
 8008894:	b2d2      	uxtb	r2, r2
 8008896:	4611      	mov	r1, r2
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	4798      	blx	r3
 800889c:	4603      	mov	r3, r0
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d001      	beq.n	80088a6 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80088a2:	2303      	movs	r3, #3
 80088a4:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80088a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	3710      	adds	r7, #16
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}

080088b0 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80088b0:	b480      	push	{r7}
 80088b2:	b083      	sub	sp, #12
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
 80088b8:	460b      	mov	r3, r1
 80088ba:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80088bc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80088be:	4618      	mov	r0, r3
 80088c0:	370c      	adds	r7, #12
 80088c2:	46bd      	mov	sp, r7
 80088c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c8:	4770      	bx	lr

080088ca <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80088ca:	b480      	push	{r7}
 80088cc:	b083      	sub	sp, #12
 80088ce:	af00      	add	r7, sp, #0
 80088d0:	6078      	str	r0, [r7, #4]
 80088d2:	460b      	mov	r3, r1
 80088d4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80088d6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80088d8:	4618      	mov	r0, r3
 80088da:	370c      	adds	r7, #12
 80088dc:	46bd      	mov	sp, r7
 80088de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e2:	4770      	bx	lr

080088e4 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b086      	sub	sp, #24
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
 80088ec:	460b      	mov	r3, r1
 80088ee:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80088f8:	2300      	movs	r3, #0
 80088fa:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	885b      	ldrh	r3, [r3, #2]
 8008900:	b29b      	uxth	r3, r3
 8008902:	68fa      	ldr	r2, [r7, #12]
 8008904:	7812      	ldrb	r2, [r2, #0]
 8008906:	4293      	cmp	r3, r2
 8008908:	d91f      	bls.n	800894a <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	781b      	ldrb	r3, [r3, #0]
 800890e:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008910:	e013      	b.n	800893a <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008912:	f107 030a 	add.w	r3, r7, #10
 8008916:	4619      	mov	r1, r3
 8008918:	6978      	ldr	r0, [r7, #20]
 800891a:	f000 f81b 	bl	8008954 <USBD_GetNextDesc>
 800891e:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	785b      	ldrb	r3, [r3, #1]
 8008924:	2b05      	cmp	r3, #5
 8008926:	d108      	bne.n	800893a <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800892c:	693b      	ldr	r3, [r7, #16]
 800892e:	789b      	ldrb	r3, [r3, #2]
 8008930:	78fa      	ldrb	r2, [r7, #3]
 8008932:	429a      	cmp	r2, r3
 8008934:	d008      	beq.n	8008948 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008936:	2300      	movs	r3, #0
 8008938:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	885b      	ldrh	r3, [r3, #2]
 800893e:	b29a      	uxth	r2, r3
 8008940:	897b      	ldrh	r3, [r7, #10]
 8008942:	429a      	cmp	r2, r3
 8008944:	d8e5      	bhi.n	8008912 <USBD_GetEpDesc+0x2e>
 8008946:	e000      	b.n	800894a <USBD_GetEpDesc+0x66>
          break;
 8008948:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800894a:	693b      	ldr	r3, [r7, #16]
}
 800894c:	4618      	mov	r0, r3
 800894e:	3718      	adds	r7, #24
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}

08008954 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008954:	b480      	push	{r7}
 8008956:	b085      	sub	sp, #20
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
 800895c:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	881b      	ldrh	r3, [r3, #0]
 8008966:	68fa      	ldr	r2, [r7, #12]
 8008968:	7812      	ldrb	r2, [r2, #0]
 800896a:	4413      	add	r3, r2
 800896c:	b29a      	uxth	r2, r3
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	781b      	ldrb	r3, [r3, #0]
 8008976:	461a      	mov	r2, r3
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	4413      	add	r3, r2
 800897c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800897e:	68fb      	ldr	r3, [r7, #12]
}
 8008980:	4618      	mov	r0, r3
 8008982:	3714      	adds	r7, #20
 8008984:	46bd      	mov	sp, r7
 8008986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898a:	4770      	bx	lr

0800898c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800898c:	b480      	push	{r7}
 800898e:	b087      	sub	sp, #28
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	781b      	ldrb	r3, [r3, #0]
 800899c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800899e:	697b      	ldr	r3, [r7, #20]
 80089a0:	3301      	adds	r3, #1
 80089a2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80089a4:	697b      	ldr	r3, [r7, #20]
 80089a6:	781b      	ldrb	r3, [r3, #0]
 80089a8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80089aa:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80089ae:	021b      	lsls	r3, r3, #8
 80089b0:	b21a      	sxth	r2, r3
 80089b2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80089b6:	4313      	orrs	r3, r2
 80089b8:	b21b      	sxth	r3, r3
 80089ba:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80089bc:	89fb      	ldrh	r3, [r7, #14]
}
 80089be:	4618      	mov	r0, r3
 80089c0:	371c      	adds	r7, #28
 80089c2:	46bd      	mov	sp, r7
 80089c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c8:	4770      	bx	lr
	...

080089cc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b084      	sub	sp, #16
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
 80089d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80089d6:	2300      	movs	r3, #0
 80089d8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	781b      	ldrb	r3, [r3, #0]
 80089de:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80089e2:	2b40      	cmp	r3, #64	@ 0x40
 80089e4:	d005      	beq.n	80089f2 <USBD_StdDevReq+0x26>
 80089e6:	2b40      	cmp	r3, #64	@ 0x40
 80089e8:	d857      	bhi.n	8008a9a <USBD_StdDevReq+0xce>
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d00f      	beq.n	8008a0e <USBD_StdDevReq+0x42>
 80089ee:	2b20      	cmp	r3, #32
 80089f0:	d153      	bne.n	8008a9a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	32ae      	adds	r2, #174	@ 0xae
 80089fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a00:	689b      	ldr	r3, [r3, #8]
 8008a02:	6839      	ldr	r1, [r7, #0]
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	4798      	blx	r3
 8008a08:	4603      	mov	r3, r0
 8008a0a:	73fb      	strb	r3, [r7, #15]
      break;
 8008a0c:	e04a      	b.n	8008aa4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	785b      	ldrb	r3, [r3, #1]
 8008a12:	2b09      	cmp	r3, #9
 8008a14:	d83b      	bhi.n	8008a8e <USBD_StdDevReq+0xc2>
 8008a16:	a201      	add	r2, pc, #4	@ (adr r2, 8008a1c <USBD_StdDevReq+0x50>)
 8008a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a1c:	08008a71 	.word	0x08008a71
 8008a20:	08008a85 	.word	0x08008a85
 8008a24:	08008a8f 	.word	0x08008a8f
 8008a28:	08008a7b 	.word	0x08008a7b
 8008a2c:	08008a8f 	.word	0x08008a8f
 8008a30:	08008a4f 	.word	0x08008a4f
 8008a34:	08008a45 	.word	0x08008a45
 8008a38:	08008a8f 	.word	0x08008a8f
 8008a3c:	08008a67 	.word	0x08008a67
 8008a40:	08008a59 	.word	0x08008a59
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008a44:	6839      	ldr	r1, [r7, #0]
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f000 fa3e 	bl	8008ec8 <USBD_GetDescriptor>
          break;
 8008a4c:	e024      	b.n	8008a98 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008a4e:	6839      	ldr	r1, [r7, #0]
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f000 fba3 	bl	800919c <USBD_SetAddress>
          break;
 8008a56:	e01f      	b.n	8008a98 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008a58:	6839      	ldr	r1, [r7, #0]
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f000 fbe2 	bl	8009224 <USBD_SetConfig>
 8008a60:	4603      	mov	r3, r0
 8008a62:	73fb      	strb	r3, [r7, #15]
          break;
 8008a64:	e018      	b.n	8008a98 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008a66:	6839      	ldr	r1, [r7, #0]
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f000 fc85 	bl	8009378 <USBD_GetConfig>
          break;
 8008a6e:	e013      	b.n	8008a98 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008a70:	6839      	ldr	r1, [r7, #0]
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f000 fcb6 	bl	80093e4 <USBD_GetStatus>
          break;
 8008a78:	e00e      	b.n	8008a98 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008a7a:	6839      	ldr	r1, [r7, #0]
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f000 fce5 	bl	800944c <USBD_SetFeature>
          break;
 8008a82:	e009      	b.n	8008a98 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008a84:	6839      	ldr	r1, [r7, #0]
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f000 fd09 	bl	800949e <USBD_ClrFeature>
          break;
 8008a8c:	e004      	b.n	8008a98 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008a8e:	6839      	ldr	r1, [r7, #0]
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f000 fd60 	bl	8009556 <USBD_CtlError>
          break;
 8008a96:	bf00      	nop
      }
      break;
 8008a98:	e004      	b.n	8008aa4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008a9a:	6839      	ldr	r1, [r7, #0]
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f000 fd5a 	bl	8009556 <USBD_CtlError>
      break;
 8008aa2:	bf00      	nop
  }

  return ret;
 8008aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	3710      	adds	r7, #16
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}
 8008aae:	bf00      	nop

08008ab0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b084      	sub	sp, #16
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
 8008ab8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008aba:	2300      	movs	r3, #0
 8008abc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	781b      	ldrb	r3, [r3, #0]
 8008ac2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008ac6:	2b40      	cmp	r3, #64	@ 0x40
 8008ac8:	d005      	beq.n	8008ad6 <USBD_StdItfReq+0x26>
 8008aca:	2b40      	cmp	r3, #64	@ 0x40
 8008acc:	d852      	bhi.n	8008b74 <USBD_StdItfReq+0xc4>
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d001      	beq.n	8008ad6 <USBD_StdItfReq+0x26>
 8008ad2:	2b20      	cmp	r3, #32
 8008ad4:	d14e      	bne.n	8008b74 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008adc:	b2db      	uxtb	r3, r3
 8008ade:	3b01      	subs	r3, #1
 8008ae0:	2b02      	cmp	r3, #2
 8008ae2:	d840      	bhi.n	8008b66 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	889b      	ldrh	r3, [r3, #4]
 8008ae8:	b2db      	uxtb	r3, r3
 8008aea:	2b01      	cmp	r3, #1
 8008aec:	d836      	bhi.n	8008b5c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	889b      	ldrh	r3, [r3, #4]
 8008af2:	b2db      	uxtb	r3, r3
 8008af4:	4619      	mov	r1, r3
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f7ff feda 	bl	80088b0 <USBD_CoreFindIF>
 8008afc:	4603      	mov	r3, r0
 8008afe:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008b00:	7bbb      	ldrb	r3, [r7, #14]
 8008b02:	2bff      	cmp	r3, #255	@ 0xff
 8008b04:	d01d      	beq.n	8008b42 <USBD_StdItfReq+0x92>
 8008b06:	7bbb      	ldrb	r3, [r7, #14]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d11a      	bne.n	8008b42 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008b0c:	7bba      	ldrb	r2, [r7, #14]
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	32ae      	adds	r2, #174	@ 0xae
 8008b12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b16:	689b      	ldr	r3, [r3, #8]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d00f      	beq.n	8008b3c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008b1c:	7bba      	ldrb	r2, [r7, #14]
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008b24:	7bba      	ldrb	r2, [r7, #14]
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	32ae      	adds	r2, #174	@ 0xae
 8008b2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b2e:	689b      	ldr	r3, [r3, #8]
 8008b30:	6839      	ldr	r1, [r7, #0]
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	4798      	blx	r3
 8008b36:	4603      	mov	r3, r0
 8008b38:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008b3a:	e004      	b.n	8008b46 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008b3c:	2303      	movs	r3, #3
 8008b3e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008b40:	e001      	b.n	8008b46 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008b42:	2303      	movs	r3, #3
 8008b44:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	88db      	ldrh	r3, [r3, #6]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d110      	bne.n	8008b70 <USBD_StdItfReq+0xc0>
 8008b4e:	7bfb      	ldrb	r3, [r7, #15]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d10d      	bne.n	8008b70 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f000 fddc 	bl	8009712 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008b5a:	e009      	b.n	8008b70 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008b5c:	6839      	ldr	r1, [r7, #0]
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f000 fcf9 	bl	8009556 <USBD_CtlError>
          break;
 8008b64:	e004      	b.n	8008b70 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008b66:	6839      	ldr	r1, [r7, #0]
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f000 fcf4 	bl	8009556 <USBD_CtlError>
          break;
 8008b6e:	e000      	b.n	8008b72 <USBD_StdItfReq+0xc2>
          break;
 8008b70:	bf00      	nop
      }
      break;
 8008b72:	e004      	b.n	8008b7e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008b74:	6839      	ldr	r1, [r7, #0]
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f000 fced 	bl	8009556 <USBD_CtlError>
      break;
 8008b7c:	bf00      	nop
  }

  return ret;
 8008b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3710      	adds	r7, #16
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}

08008b88 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b084      	sub	sp, #16
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
 8008b90:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008b92:	2300      	movs	r3, #0
 8008b94:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	889b      	ldrh	r3, [r3, #4]
 8008b9a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	781b      	ldrb	r3, [r3, #0]
 8008ba0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008ba4:	2b40      	cmp	r3, #64	@ 0x40
 8008ba6:	d007      	beq.n	8008bb8 <USBD_StdEPReq+0x30>
 8008ba8:	2b40      	cmp	r3, #64	@ 0x40
 8008baa:	f200 8181 	bhi.w	8008eb0 <USBD_StdEPReq+0x328>
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d02a      	beq.n	8008c08 <USBD_StdEPReq+0x80>
 8008bb2:	2b20      	cmp	r3, #32
 8008bb4:	f040 817c 	bne.w	8008eb0 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008bb8:	7bbb      	ldrb	r3, [r7, #14]
 8008bba:	4619      	mov	r1, r3
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f7ff fe84 	bl	80088ca <USBD_CoreFindEP>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008bc6:	7b7b      	ldrb	r3, [r7, #13]
 8008bc8:	2bff      	cmp	r3, #255	@ 0xff
 8008bca:	f000 8176 	beq.w	8008eba <USBD_StdEPReq+0x332>
 8008bce:	7b7b      	ldrb	r3, [r7, #13]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	f040 8172 	bne.w	8008eba <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 8008bd6:	7b7a      	ldrb	r2, [r7, #13]
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008bde:	7b7a      	ldrb	r2, [r7, #13]
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	32ae      	adds	r2, #174	@ 0xae
 8008be4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008be8:	689b      	ldr	r3, [r3, #8]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	f000 8165 	beq.w	8008eba <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008bf0:	7b7a      	ldrb	r2, [r7, #13]
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	32ae      	adds	r2, #174	@ 0xae
 8008bf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bfa:	689b      	ldr	r3, [r3, #8]
 8008bfc:	6839      	ldr	r1, [r7, #0]
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	4798      	blx	r3
 8008c02:	4603      	mov	r3, r0
 8008c04:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008c06:	e158      	b.n	8008eba <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	785b      	ldrb	r3, [r3, #1]
 8008c0c:	2b03      	cmp	r3, #3
 8008c0e:	d008      	beq.n	8008c22 <USBD_StdEPReq+0x9a>
 8008c10:	2b03      	cmp	r3, #3
 8008c12:	f300 8147 	bgt.w	8008ea4 <USBD_StdEPReq+0x31c>
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	f000 809b 	beq.w	8008d52 <USBD_StdEPReq+0x1ca>
 8008c1c:	2b01      	cmp	r3, #1
 8008c1e:	d03c      	beq.n	8008c9a <USBD_StdEPReq+0x112>
 8008c20:	e140      	b.n	8008ea4 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c28:	b2db      	uxtb	r3, r3
 8008c2a:	2b02      	cmp	r3, #2
 8008c2c:	d002      	beq.n	8008c34 <USBD_StdEPReq+0xac>
 8008c2e:	2b03      	cmp	r3, #3
 8008c30:	d016      	beq.n	8008c60 <USBD_StdEPReq+0xd8>
 8008c32:	e02c      	b.n	8008c8e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c34:	7bbb      	ldrb	r3, [r7, #14]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d00d      	beq.n	8008c56 <USBD_StdEPReq+0xce>
 8008c3a:	7bbb      	ldrb	r3, [r7, #14]
 8008c3c:	2b80      	cmp	r3, #128	@ 0x80
 8008c3e:	d00a      	beq.n	8008c56 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008c40:	7bbb      	ldrb	r3, [r7, #14]
 8008c42:	4619      	mov	r1, r3
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f00e f923 	bl	8016e90 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008c4a:	2180      	movs	r1, #128	@ 0x80
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f00e f91f 	bl	8016e90 <USBD_LL_StallEP>
 8008c52:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008c54:	e020      	b.n	8008c98 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008c56:	6839      	ldr	r1, [r7, #0]
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f000 fc7c 	bl	8009556 <USBD_CtlError>
              break;
 8008c5e:	e01b      	b.n	8008c98 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	885b      	ldrh	r3, [r3, #2]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d10e      	bne.n	8008c86 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008c68:	7bbb      	ldrb	r3, [r7, #14]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d00b      	beq.n	8008c86 <USBD_StdEPReq+0xfe>
 8008c6e:	7bbb      	ldrb	r3, [r7, #14]
 8008c70:	2b80      	cmp	r3, #128	@ 0x80
 8008c72:	d008      	beq.n	8008c86 <USBD_StdEPReq+0xfe>
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	88db      	ldrh	r3, [r3, #6]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d104      	bne.n	8008c86 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008c7c:	7bbb      	ldrb	r3, [r7, #14]
 8008c7e:	4619      	mov	r1, r3
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f00e f905 	bl	8016e90 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f000 fd43 	bl	8009712 <USBD_CtlSendStatus>

              break;
 8008c8c:	e004      	b.n	8008c98 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008c8e:	6839      	ldr	r1, [r7, #0]
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f000 fc60 	bl	8009556 <USBD_CtlError>
              break;
 8008c96:	bf00      	nop
          }
          break;
 8008c98:	e109      	b.n	8008eae <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ca0:	b2db      	uxtb	r3, r3
 8008ca2:	2b02      	cmp	r3, #2
 8008ca4:	d002      	beq.n	8008cac <USBD_StdEPReq+0x124>
 8008ca6:	2b03      	cmp	r3, #3
 8008ca8:	d016      	beq.n	8008cd8 <USBD_StdEPReq+0x150>
 8008caa:	e04b      	b.n	8008d44 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008cac:	7bbb      	ldrb	r3, [r7, #14]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d00d      	beq.n	8008cce <USBD_StdEPReq+0x146>
 8008cb2:	7bbb      	ldrb	r3, [r7, #14]
 8008cb4:	2b80      	cmp	r3, #128	@ 0x80
 8008cb6:	d00a      	beq.n	8008cce <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008cb8:	7bbb      	ldrb	r3, [r7, #14]
 8008cba:	4619      	mov	r1, r3
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f00e f8e7 	bl	8016e90 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008cc2:	2180      	movs	r1, #128	@ 0x80
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f00e f8e3 	bl	8016e90 <USBD_LL_StallEP>
 8008cca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008ccc:	e040      	b.n	8008d50 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008cce:	6839      	ldr	r1, [r7, #0]
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f000 fc40 	bl	8009556 <USBD_CtlError>
              break;
 8008cd6:	e03b      	b.n	8008d50 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	885b      	ldrh	r3, [r3, #2]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d136      	bne.n	8008d4e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008ce0:	7bbb      	ldrb	r3, [r7, #14]
 8008ce2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d004      	beq.n	8008cf4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008cea:	7bbb      	ldrb	r3, [r7, #14]
 8008cec:	4619      	mov	r1, r3
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f00e f8ed 	bl	8016ece <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f000 fd0c 	bl	8009712 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008cfa:	7bbb      	ldrb	r3, [r7, #14]
 8008cfc:	4619      	mov	r1, r3
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f7ff fde3 	bl	80088ca <USBD_CoreFindEP>
 8008d04:	4603      	mov	r3, r0
 8008d06:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008d08:	7b7b      	ldrb	r3, [r7, #13]
 8008d0a:	2bff      	cmp	r3, #255	@ 0xff
 8008d0c:	d01f      	beq.n	8008d4e <USBD_StdEPReq+0x1c6>
 8008d0e:	7b7b      	ldrb	r3, [r7, #13]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d11c      	bne.n	8008d4e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008d14:	7b7a      	ldrb	r2, [r7, #13]
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008d1c:	7b7a      	ldrb	r2, [r7, #13]
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	32ae      	adds	r2, #174	@ 0xae
 8008d22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d26:	689b      	ldr	r3, [r3, #8]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d010      	beq.n	8008d4e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008d2c:	7b7a      	ldrb	r2, [r7, #13]
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	32ae      	adds	r2, #174	@ 0xae
 8008d32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d36:	689b      	ldr	r3, [r3, #8]
 8008d38:	6839      	ldr	r1, [r7, #0]
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	4798      	blx	r3
 8008d3e:	4603      	mov	r3, r0
 8008d40:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008d42:	e004      	b.n	8008d4e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008d44:	6839      	ldr	r1, [r7, #0]
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f000 fc05 	bl	8009556 <USBD_CtlError>
              break;
 8008d4c:	e000      	b.n	8008d50 <USBD_StdEPReq+0x1c8>
              break;
 8008d4e:	bf00      	nop
          }
          break;
 8008d50:	e0ad      	b.n	8008eae <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d58:	b2db      	uxtb	r3, r3
 8008d5a:	2b02      	cmp	r3, #2
 8008d5c:	d002      	beq.n	8008d64 <USBD_StdEPReq+0x1dc>
 8008d5e:	2b03      	cmp	r3, #3
 8008d60:	d033      	beq.n	8008dca <USBD_StdEPReq+0x242>
 8008d62:	e099      	b.n	8008e98 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008d64:	7bbb      	ldrb	r3, [r7, #14]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d007      	beq.n	8008d7a <USBD_StdEPReq+0x1f2>
 8008d6a:	7bbb      	ldrb	r3, [r7, #14]
 8008d6c:	2b80      	cmp	r3, #128	@ 0x80
 8008d6e:	d004      	beq.n	8008d7a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008d70:	6839      	ldr	r1, [r7, #0]
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f000 fbef 	bl	8009556 <USBD_CtlError>
                break;
 8008d78:	e093      	b.n	8008ea2 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d7a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	da0b      	bge.n	8008d9a <USBD_StdEPReq+0x212>
 8008d82:	7bbb      	ldrb	r3, [r7, #14]
 8008d84:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008d88:	4613      	mov	r3, r2
 8008d8a:	009b      	lsls	r3, r3, #2
 8008d8c:	4413      	add	r3, r2
 8008d8e:	009b      	lsls	r3, r3, #2
 8008d90:	3310      	adds	r3, #16
 8008d92:	687a      	ldr	r2, [r7, #4]
 8008d94:	4413      	add	r3, r2
 8008d96:	3304      	adds	r3, #4
 8008d98:	e00b      	b.n	8008db2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008d9a:	7bbb      	ldrb	r3, [r7, #14]
 8008d9c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008da0:	4613      	mov	r3, r2
 8008da2:	009b      	lsls	r3, r3, #2
 8008da4:	4413      	add	r3, r2
 8008da6:	009b      	lsls	r3, r3, #2
 8008da8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008dac:	687a      	ldr	r2, [r7, #4]
 8008dae:	4413      	add	r3, r2
 8008db0:	3304      	adds	r3, #4
 8008db2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	2200      	movs	r2, #0
 8008db8:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	330e      	adds	r3, #14
 8008dbe:	2202      	movs	r2, #2
 8008dc0:	4619      	mov	r1, r3
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f000 fc44 	bl	8009650 <USBD_CtlSendData>
              break;
 8008dc8:	e06b      	b.n	8008ea2 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008dca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	da11      	bge.n	8008df6 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008dd2:	7bbb      	ldrb	r3, [r7, #14]
 8008dd4:	f003 020f 	and.w	r2, r3, #15
 8008dd8:	6879      	ldr	r1, [r7, #4]
 8008dda:	4613      	mov	r3, r2
 8008ddc:	009b      	lsls	r3, r3, #2
 8008dde:	4413      	add	r3, r2
 8008de0:	009b      	lsls	r3, r3, #2
 8008de2:	440b      	add	r3, r1
 8008de4:	3323      	adds	r3, #35	@ 0x23
 8008de6:	781b      	ldrb	r3, [r3, #0]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d117      	bne.n	8008e1c <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8008dec:	6839      	ldr	r1, [r7, #0]
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f000 fbb1 	bl	8009556 <USBD_CtlError>
                  break;
 8008df4:	e055      	b.n	8008ea2 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008df6:	7bbb      	ldrb	r3, [r7, #14]
 8008df8:	f003 020f 	and.w	r2, r3, #15
 8008dfc:	6879      	ldr	r1, [r7, #4]
 8008dfe:	4613      	mov	r3, r2
 8008e00:	009b      	lsls	r3, r3, #2
 8008e02:	4413      	add	r3, r2
 8008e04:	009b      	lsls	r3, r3, #2
 8008e06:	440b      	add	r3, r1
 8008e08:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8008e0c:	781b      	ldrb	r3, [r3, #0]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d104      	bne.n	8008e1c <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8008e12:	6839      	ldr	r1, [r7, #0]
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f000 fb9e 	bl	8009556 <USBD_CtlError>
                  break;
 8008e1a:	e042      	b.n	8008ea2 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	da0b      	bge.n	8008e3c <USBD_StdEPReq+0x2b4>
 8008e24:	7bbb      	ldrb	r3, [r7, #14]
 8008e26:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008e2a:	4613      	mov	r3, r2
 8008e2c:	009b      	lsls	r3, r3, #2
 8008e2e:	4413      	add	r3, r2
 8008e30:	009b      	lsls	r3, r3, #2
 8008e32:	3310      	adds	r3, #16
 8008e34:	687a      	ldr	r2, [r7, #4]
 8008e36:	4413      	add	r3, r2
 8008e38:	3304      	adds	r3, #4
 8008e3a:	e00b      	b.n	8008e54 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008e3c:	7bbb      	ldrb	r3, [r7, #14]
 8008e3e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e42:	4613      	mov	r3, r2
 8008e44:	009b      	lsls	r3, r3, #2
 8008e46:	4413      	add	r3, r2
 8008e48:	009b      	lsls	r3, r3, #2
 8008e4a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008e4e:	687a      	ldr	r2, [r7, #4]
 8008e50:	4413      	add	r3, r2
 8008e52:	3304      	adds	r3, #4
 8008e54:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008e56:	7bbb      	ldrb	r3, [r7, #14]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d002      	beq.n	8008e62 <USBD_StdEPReq+0x2da>
 8008e5c:	7bbb      	ldrb	r3, [r7, #14]
 8008e5e:	2b80      	cmp	r3, #128	@ 0x80
 8008e60:	d103      	bne.n	8008e6a <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	2200      	movs	r2, #0
 8008e66:	739a      	strb	r2, [r3, #14]
 8008e68:	e00e      	b.n	8008e88 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008e6a:	7bbb      	ldrb	r3, [r7, #14]
 8008e6c:	4619      	mov	r1, r3
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f00e f84c 	bl	8016f0c <USBD_LL_IsStallEP>
 8008e74:	4603      	mov	r3, r0
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d003      	beq.n	8008e82 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	2201      	movs	r2, #1
 8008e7e:	739a      	strb	r2, [r3, #14]
 8008e80:	e002      	b.n	8008e88 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	2200      	movs	r2, #0
 8008e86:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	330e      	adds	r3, #14
 8008e8c:	2202      	movs	r2, #2
 8008e8e:	4619      	mov	r1, r3
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	f000 fbdd 	bl	8009650 <USBD_CtlSendData>
              break;
 8008e96:	e004      	b.n	8008ea2 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8008e98:	6839      	ldr	r1, [r7, #0]
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f000 fb5b 	bl	8009556 <USBD_CtlError>
              break;
 8008ea0:	bf00      	nop
          }
          break;
 8008ea2:	e004      	b.n	8008eae <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 8008ea4:	6839      	ldr	r1, [r7, #0]
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f000 fb55 	bl	8009556 <USBD_CtlError>
          break;
 8008eac:	bf00      	nop
      }
      break;
 8008eae:	e005      	b.n	8008ebc <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 8008eb0:	6839      	ldr	r1, [r7, #0]
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f000 fb4f 	bl	8009556 <USBD_CtlError>
      break;
 8008eb8:	e000      	b.n	8008ebc <USBD_StdEPReq+0x334>
      break;
 8008eba:	bf00      	nop
  }

  return ret;
 8008ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	3710      	adds	r7, #16
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}
	...

08008ec8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b084      	sub	sp, #16
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
 8008ed0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008eda:	2300      	movs	r3, #0
 8008edc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	885b      	ldrh	r3, [r3, #2]
 8008ee2:	0a1b      	lsrs	r3, r3, #8
 8008ee4:	b29b      	uxth	r3, r3
 8008ee6:	3b01      	subs	r3, #1
 8008ee8:	2b06      	cmp	r3, #6
 8008eea:	f200 8128 	bhi.w	800913e <USBD_GetDescriptor+0x276>
 8008eee:	a201      	add	r2, pc, #4	@ (adr r2, 8008ef4 <USBD_GetDescriptor+0x2c>)
 8008ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ef4:	08008f11 	.word	0x08008f11
 8008ef8:	08008f29 	.word	0x08008f29
 8008efc:	08008f69 	.word	0x08008f69
 8008f00:	0800913f 	.word	0x0800913f
 8008f04:	0800913f 	.word	0x0800913f
 8008f08:	080090df 	.word	0x080090df
 8008f0c:	0800910b 	.word	0x0800910b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	687a      	ldr	r2, [r7, #4]
 8008f1a:	7c12      	ldrb	r2, [r2, #16]
 8008f1c:	f107 0108 	add.w	r1, r7, #8
 8008f20:	4610      	mov	r0, r2
 8008f22:	4798      	blx	r3
 8008f24:	60f8      	str	r0, [r7, #12]
      break;
 8008f26:	e112      	b.n	800914e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	7c1b      	ldrb	r3, [r3, #16]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d10d      	bne.n	8008f4c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f38:	f107 0208 	add.w	r2, r7, #8
 8008f3c:	4610      	mov	r0, r2
 8008f3e:	4798      	blx	r3
 8008f40:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	3301      	adds	r3, #1
 8008f46:	2202      	movs	r2, #2
 8008f48:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008f4a:	e100      	b.n	800914e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f54:	f107 0208 	add.w	r2, r7, #8
 8008f58:	4610      	mov	r0, r2
 8008f5a:	4798      	blx	r3
 8008f5c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	3301      	adds	r3, #1
 8008f62:	2202      	movs	r2, #2
 8008f64:	701a      	strb	r2, [r3, #0]
      break;
 8008f66:	e0f2      	b.n	800914e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	885b      	ldrh	r3, [r3, #2]
 8008f6c:	b2db      	uxtb	r3, r3
 8008f6e:	2b05      	cmp	r3, #5
 8008f70:	f200 80ac 	bhi.w	80090cc <USBD_GetDescriptor+0x204>
 8008f74:	a201      	add	r2, pc, #4	@ (adr r2, 8008f7c <USBD_GetDescriptor+0xb4>)
 8008f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f7a:	bf00      	nop
 8008f7c:	08008f95 	.word	0x08008f95
 8008f80:	08008fc9 	.word	0x08008fc9
 8008f84:	08008ffd 	.word	0x08008ffd
 8008f88:	08009031 	.word	0x08009031
 8008f8c:	08009065 	.word	0x08009065
 8008f90:	08009099 	.word	0x08009099
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f9a:	685b      	ldr	r3, [r3, #4]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d00b      	beq.n	8008fb8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008fa6:	685b      	ldr	r3, [r3, #4]
 8008fa8:	687a      	ldr	r2, [r7, #4]
 8008faa:	7c12      	ldrb	r2, [r2, #16]
 8008fac:	f107 0108 	add.w	r1, r7, #8
 8008fb0:	4610      	mov	r0, r2
 8008fb2:	4798      	blx	r3
 8008fb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008fb6:	e091      	b.n	80090dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008fb8:	6839      	ldr	r1, [r7, #0]
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f000 facb 	bl	8009556 <USBD_CtlError>
            err++;
 8008fc0:	7afb      	ldrb	r3, [r7, #11]
 8008fc2:	3301      	adds	r3, #1
 8008fc4:	72fb      	strb	r3, [r7, #11]
          break;
 8008fc6:	e089      	b.n	80090dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008fce:	689b      	ldr	r3, [r3, #8]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d00b      	beq.n	8008fec <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008fda:	689b      	ldr	r3, [r3, #8]
 8008fdc:	687a      	ldr	r2, [r7, #4]
 8008fde:	7c12      	ldrb	r2, [r2, #16]
 8008fe0:	f107 0108 	add.w	r1, r7, #8
 8008fe4:	4610      	mov	r0, r2
 8008fe6:	4798      	blx	r3
 8008fe8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008fea:	e077      	b.n	80090dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008fec:	6839      	ldr	r1, [r7, #0]
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f000 fab1 	bl	8009556 <USBD_CtlError>
            err++;
 8008ff4:	7afb      	ldrb	r3, [r7, #11]
 8008ff6:	3301      	adds	r3, #1
 8008ff8:	72fb      	strb	r3, [r7, #11]
          break;
 8008ffa:	e06f      	b.n	80090dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009002:	68db      	ldr	r3, [r3, #12]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d00b      	beq.n	8009020 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800900e:	68db      	ldr	r3, [r3, #12]
 8009010:	687a      	ldr	r2, [r7, #4]
 8009012:	7c12      	ldrb	r2, [r2, #16]
 8009014:	f107 0108 	add.w	r1, r7, #8
 8009018:	4610      	mov	r0, r2
 800901a:	4798      	blx	r3
 800901c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800901e:	e05d      	b.n	80090dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009020:	6839      	ldr	r1, [r7, #0]
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f000 fa97 	bl	8009556 <USBD_CtlError>
            err++;
 8009028:	7afb      	ldrb	r3, [r7, #11]
 800902a:	3301      	adds	r3, #1
 800902c:	72fb      	strb	r3, [r7, #11]
          break;
 800902e:	e055      	b.n	80090dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009036:	691b      	ldr	r3, [r3, #16]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d00b      	beq.n	8009054 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009042:	691b      	ldr	r3, [r3, #16]
 8009044:	687a      	ldr	r2, [r7, #4]
 8009046:	7c12      	ldrb	r2, [r2, #16]
 8009048:	f107 0108 	add.w	r1, r7, #8
 800904c:	4610      	mov	r0, r2
 800904e:	4798      	blx	r3
 8009050:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009052:	e043      	b.n	80090dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009054:	6839      	ldr	r1, [r7, #0]
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f000 fa7d 	bl	8009556 <USBD_CtlError>
            err++;
 800905c:	7afb      	ldrb	r3, [r7, #11]
 800905e:	3301      	adds	r3, #1
 8009060:	72fb      	strb	r3, [r7, #11]
          break;
 8009062:	e03b      	b.n	80090dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800906a:	695b      	ldr	r3, [r3, #20]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d00b      	beq.n	8009088 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009076:	695b      	ldr	r3, [r3, #20]
 8009078:	687a      	ldr	r2, [r7, #4]
 800907a:	7c12      	ldrb	r2, [r2, #16]
 800907c:	f107 0108 	add.w	r1, r7, #8
 8009080:	4610      	mov	r0, r2
 8009082:	4798      	blx	r3
 8009084:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009086:	e029      	b.n	80090dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009088:	6839      	ldr	r1, [r7, #0]
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f000 fa63 	bl	8009556 <USBD_CtlError>
            err++;
 8009090:	7afb      	ldrb	r3, [r7, #11]
 8009092:	3301      	adds	r3, #1
 8009094:	72fb      	strb	r3, [r7, #11]
          break;
 8009096:	e021      	b.n	80090dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800909e:	699b      	ldr	r3, [r3, #24]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d00b      	beq.n	80090bc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090aa:	699b      	ldr	r3, [r3, #24]
 80090ac:	687a      	ldr	r2, [r7, #4]
 80090ae:	7c12      	ldrb	r2, [r2, #16]
 80090b0:	f107 0108 	add.w	r1, r7, #8
 80090b4:	4610      	mov	r0, r2
 80090b6:	4798      	blx	r3
 80090b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80090ba:	e00f      	b.n	80090dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80090bc:	6839      	ldr	r1, [r7, #0]
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f000 fa49 	bl	8009556 <USBD_CtlError>
            err++;
 80090c4:	7afb      	ldrb	r3, [r7, #11]
 80090c6:	3301      	adds	r3, #1
 80090c8:	72fb      	strb	r3, [r7, #11]
          break;
 80090ca:	e007      	b.n	80090dc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80090cc:	6839      	ldr	r1, [r7, #0]
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f000 fa41 	bl	8009556 <USBD_CtlError>
          err++;
 80090d4:	7afb      	ldrb	r3, [r7, #11]
 80090d6:	3301      	adds	r3, #1
 80090d8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80090da:	bf00      	nop
      }
      break;
 80090dc:	e037      	b.n	800914e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	7c1b      	ldrb	r3, [r3, #16]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d109      	bne.n	80090fa <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090ee:	f107 0208 	add.w	r2, r7, #8
 80090f2:	4610      	mov	r0, r2
 80090f4:	4798      	blx	r3
 80090f6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80090f8:	e029      	b.n	800914e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80090fa:	6839      	ldr	r1, [r7, #0]
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f000 fa2a 	bl	8009556 <USBD_CtlError>
        err++;
 8009102:	7afb      	ldrb	r3, [r7, #11]
 8009104:	3301      	adds	r3, #1
 8009106:	72fb      	strb	r3, [r7, #11]
      break;
 8009108:	e021      	b.n	800914e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	7c1b      	ldrb	r3, [r3, #16]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d10d      	bne.n	800912e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800911a:	f107 0208 	add.w	r2, r7, #8
 800911e:	4610      	mov	r0, r2
 8009120:	4798      	blx	r3
 8009122:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	3301      	adds	r3, #1
 8009128:	2207      	movs	r2, #7
 800912a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800912c:	e00f      	b.n	800914e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800912e:	6839      	ldr	r1, [r7, #0]
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f000 fa10 	bl	8009556 <USBD_CtlError>
        err++;
 8009136:	7afb      	ldrb	r3, [r7, #11]
 8009138:	3301      	adds	r3, #1
 800913a:	72fb      	strb	r3, [r7, #11]
      break;
 800913c:	e007      	b.n	800914e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800913e:	6839      	ldr	r1, [r7, #0]
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f000 fa08 	bl	8009556 <USBD_CtlError>
      err++;
 8009146:	7afb      	ldrb	r3, [r7, #11]
 8009148:	3301      	adds	r3, #1
 800914a:	72fb      	strb	r3, [r7, #11]
      break;
 800914c:	bf00      	nop
  }

  if (err != 0U)
 800914e:	7afb      	ldrb	r3, [r7, #11]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d11e      	bne.n	8009192 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	88db      	ldrh	r3, [r3, #6]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d016      	beq.n	800918a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800915c:	893b      	ldrh	r3, [r7, #8]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d00e      	beq.n	8009180 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	88da      	ldrh	r2, [r3, #6]
 8009166:	893b      	ldrh	r3, [r7, #8]
 8009168:	4293      	cmp	r3, r2
 800916a:	bf28      	it	cs
 800916c:	4613      	movcs	r3, r2
 800916e:	b29b      	uxth	r3, r3
 8009170:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009172:	893b      	ldrh	r3, [r7, #8]
 8009174:	461a      	mov	r2, r3
 8009176:	68f9      	ldr	r1, [r7, #12]
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f000 fa69 	bl	8009650 <USBD_CtlSendData>
 800917e:	e009      	b.n	8009194 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009180:	6839      	ldr	r1, [r7, #0]
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f000 f9e7 	bl	8009556 <USBD_CtlError>
 8009188:	e004      	b.n	8009194 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f000 fac1 	bl	8009712 <USBD_CtlSendStatus>
 8009190:	e000      	b.n	8009194 <USBD_GetDescriptor+0x2cc>
    return;
 8009192:	bf00      	nop
  }
}
 8009194:	3710      	adds	r7, #16
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}
 800919a:	bf00      	nop

0800919c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b084      	sub	sp, #16
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
 80091a4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	889b      	ldrh	r3, [r3, #4]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d131      	bne.n	8009212 <USBD_SetAddress+0x76>
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	88db      	ldrh	r3, [r3, #6]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d12d      	bne.n	8009212 <USBD_SetAddress+0x76>
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	885b      	ldrh	r3, [r3, #2]
 80091ba:	2b7f      	cmp	r3, #127	@ 0x7f
 80091bc:	d829      	bhi.n	8009212 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	885b      	ldrh	r3, [r3, #2]
 80091c2:	b2db      	uxtb	r3, r3
 80091c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80091c8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091d0:	b2db      	uxtb	r3, r3
 80091d2:	2b03      	cmp	r3, #3
 80091d4:	d104      	bne.n	80091e0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80091d6:	6839      	ldr	r1, [r7, #0]
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f000 f9bc 	bl	8009556 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091de:	e01d      	b.n	800921c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	7bfa      	ldrb	r2, [r7, #15]
 80091e4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80091e8:	7bfb      	ldrb	r3, [r7, #15]
 80091ea:	4619      	mov	r1, r3
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f00d feb9 	bl	8016f64 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f000 fa8d 	bl	8009712 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80091f8:	7bfb      	ldrb	r3, [r7, #15]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d004      	beq.n	8009208 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2202      	movs	r2, #2
 8009202:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009206:	e009      	b.n	800921c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2201      	movs	r2, #1
 800920c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009210:	e004      	b.n	800921c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009212:	6839      	ldr	r1, [r7, #0]
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f000 f99e 	bl	8009556 <USBD_CtlError>
  }
}
 800921a:	bf00      	nop
 800921c:	bf00      	nop
 800921e:	3710      	adds	r7, #16
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}

08009224 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b084      	sub	sp, #16
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
 800922c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800922e:	2300      	movs	r3, #0
 8009230:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	885b      	ldrh	r3, [r3, #2]
 8009236:	b2da      	uxtb	r2, r3
 8009238:	4b4e      	ldr	r3, [pc, #312]	@ (8009374 <USBD_SetConfig+0x150>)
 800923a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800923c:	4b4d      	ldr	r3, [pc, #308]	@ (8009374 <USBD_SetConfig+0x150>)
 800923e:	781b      	ldrb	r3, [r3, #0]
 8009240:	2b01      	cmp	r3, #1
 8009242:	d905      	bls.n	8009250 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009244:	6839      	ldr	r1, [r7, #0]
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f000 f985 	bl	8009556 <USBD_CtlError>
    return USBD_FAIL;
 800924c:	2303      	movs	r3, #3
 800924e:	e08c      	b.n	800936a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009256:	b2db      	uxtb	r3, r3
 8009258:	2b02      	cmp	r3, #2
 800925a:	d002      	beq.n	8009262 <USBD_SetConfig+0x3e>
 800925c:	2b03      	cmp	r3, #3
 800925e:	d029      	beq.n	80092b4 <USBD_SetConfig+0x90>
 8009260:	e075      	b.n	800934e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009262:	4b44      	ldr	r3, [pc, #272]	@ (8009374 <USBD_SetConfig+0x150>)
 8009264:	781b      	ldrb	r3, [r3, #0]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d020      	beq.n	80092ac <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800926a:	4b42      	ldr	r3, [pc, #264]	@ (8009374 <USBD_SetConfig+0x150>)
 800926c:	781b      	ldrb	r3, [r3, #0]
 800926e:	461a      	mov	r2, r3
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009274:	4b3f      	ldr	r3, [pc, #252]	@ (8009374 <USBD_SetConfig+0x150>)
 8009276:	781b      	ldrb	r3, [r3, #0]
 8009278:	4619      	mov	r1, r3
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f7fe ffcd 	bl	800821a <USBD_SetClassConfig>
 8009280:	4603      	mov	r3, r0
 8009282:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009284:	7bfb      	ldrb	r3, [r7, #15]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d008      	beq.n	800929c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800928a:	6839      	ldr	r1, [r7, #0]
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f000 f962 	bl	8009556 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2202      	movs	r2, #2
 8009296:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800929a:	e065      	b.n	8009368 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f000 fa38 	bl	8009712 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2203      	movs	r2, #3
 80092a6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80092aa:	e05d      	b.n	8009368 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f000 fa30 	bl	8009712 <USBD_CtlSendStatus>
      break;
 80092b2:	e059      	b.n	8009368 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80092b4:	4b2f      	ldr	r3, [pc, #188]	@ (8009374 <USBD_SetConfig+0x150>)
 80092b6:	781b      	ldrb	r3, [r3, #0]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d112      	bne.n	80092e2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2202      	movs	r2, #2
 80092c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80092c4:	4b2b      	ldr	r3, [pc, #172]	@ (8009374 <USBD_SetConfig+0x150>)
 80092c6:	781b      	ldrb	r3, [r3, #0]
 80092c8:	461a      	mov	r2, r3
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80092ce:	4b29      	ldr	r3, [pc, #164]	@ (8009374 <USBD_SetConfig+0x150>)
 80092d0:	781b      	ldrb	r3, [r3, #0]
 80092d2:	4619      	mov	r1, r3
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f7fe ffbc 	bl	8008252 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f000 fa19 	bl	8009712 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80092e0:	e042      	b.n	8009368 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80092e2:	4b24      	ldr	r3, [pc, #144]	@ (8009374 <USBD_SetConfig+0x150>)
 80092e4:	781b      	ldrb	r3, [r3, #0]
 80092e6:	461a      	mov	r2, r3
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	685b      	ldr	r3, [r3, #4]
 80092ec:	429a      	cmp	r2, r3
 80092ee:	d02a      	beq.n	8009346 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	685b      	ldr	r3, [r3, #4]
 80092f4:	b2db      	uxtb	r3, r3
 80092f6:	4619      	mov	r1, r3
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f7fe ffaa 	bl	8008252 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80092fe:	4b1d      	ldr	r3, [pc, #116]	@ (8009374 <USBD_SetConfig+0x150>)
 8009300:	781b      	ldrb	r3, [r3, #0]
 8009302:	461a      	mov	r2, r3
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009308:	4b1a      	ldr	r3, [pc, #104]	@ (8009374 <USBD_SetConfig+0x150>)
 800930a:	781b      	ldrb	r3, [r3, #0]
 800930c:	4619      	mov	r1, r3
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f7fe ff83 	bl	800821a <USBD_SetClassConfig>
 8009314:	4603      	mov	r3, r0
 8009316:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009318:	7bfb      	ldrb	r3, [r7, #15]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d00f      	beq.n	800933e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800931e:	6839      	ldr	r1, [r7, #0]
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f000 f918 	bl	8009556 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	685b      	ldr	r3, [r3, #4]
 800932a:	b2db      	uxtb	r3, r3
 800932c:	4619      	mov	r1, r3
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	f7fe ff8f 	bl	8008252 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2202      	movs	r2, #2
 8009338:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800933c:	e014      	b.n	8009368 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f000 f9e7 	bl	8009712 <USBD_CtlSendStatus>
      break;
 8009344:	e010      	b.n	8009368 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f000 f9e3 	bl	8009712 <USBD_CtlSendStatus>
      break;
 800934c:	e00c      	b.n	8009368 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800934e:	6839      	ldr	r1, [r7, #0]
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f000 f900 	bl	8009556 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009356:	4b07      	ldr	r3, [pc, #28]	@ (8009374 <USBD_SetConfig+0x150>)
 8009358:	781b      	ldrb	r3, [r3, #0]
 800935a:	4619      	mov	r1, r3
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f7fe ff78 	bl	8008252 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009362:	2303      	movs	r3, #3
 8009364:	73fb      	strb	r3, [r7, #15]
      break;
 8009366:	bf00      	nop
  }

  return ret;
 8009368:	7bfb      	ldrb	r3, [r7, #15]
}
 800936a:	4618      	mov	r0, r3
 800936c:	3710      	adds	r7, #16
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}
 8009372:	bf00      	nop
 8009374:	200051cc 	.word	0x200051cc

08009378 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b082      	sub	sp, #8
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
 8009380:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	88db      	ldrh	r3, [r3, #6]
 8009386:	2b01      	cmp	r3, #1
 8009388:	d004      	beq.n	8009394 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800938a:	6839      	ldr	r1, [r7, #0]
 800938c:	6878      	ldr	r0, [r7, #4]
 800938e:	f000 f8e2 	bl	8009556 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009392:	e023      	b.n	80093dc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800939a:	b2db      	uxtb	r3, r3
 800939c:	2b02      	cmp	r3, #2
 800939e:	dc02      	bgt.n	80093a6 <USBD_GetConfig+0x2e>
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	dc03      	bgt.n	80093ac <USBD_GetConfig+0x34>
 80093a4:	e015      	b.n	80093d2 <USBD_GetConfig+0x5a>
 80093a6:	2b03      	cmp	r3, #3
 80093a8:	d00b      	beq.n	80093c2 <USBD_GetConfig+0x4a>
 80093aa:	e012      	b.n	80093d2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2200      	movs	r2, #0
 80093b0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	3308      	adds	r3, #8
 80093b6:	2201      	movs	r2, #1
 80093b8:	4619      	mov	r1, r3
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f000 f948 	bl	8009650 <USBD_CtlSendData>
        break;
 80093c0:	e00c      	b.n	80093dc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	3304      	adds	r3, #4
 80093c6:	2201      	movs	r2, #1
 80093c8:	4619      	mov	r1, r3
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	f000 f940 	bl	8009650 <USBD_CtlSendData>
        break;
 80093d0:	e004      	b.n	80093dc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80093d2:	6839      	ldr	r1, [r7, #0]
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	f000 f8be 	bl	8009556 <USBD_CtlError>
        break;
 80093da:	bf00      	nop
}
 80093dc:	bf00      	nop
 80093de:	3708      	adds	r7, #8
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bd80      	pop	{r7, pc}

080093e4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b082      	sub	sp, #8
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
 80093ec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093f4:	b2db      	uxtb	r3, r3
 80093f6:	3b01      	subs	r3, #1
 80093f8:	2b02      	cmp	r3, #2
 80093fa:	d81e      	bhi.n	800943a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	88db      	ldrh	r3, [r3, #6]
 8009400:	2b02      	cmp	r3, #2
 8009402:	d004      	beq.n	800940e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009404:	6839      	ldr	r1, [r7, #0]
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f000 f8a5 	bl	8009556 <USBD_CtlError>
        break;
 800940c:	e01a      	b.n	8009444 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2201      	movs	r2, #1
 8009412:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800941a:	2b00      	cmp	r3, #0
 800941c:	d005      	beq.n	800942a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	68db      	ldr	r3, [r3, #12]
 8009422:	f043 0202 	orr.w	r2, r3, #2
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	330c      	adds	r3, #12
 800942e:	2202      	movs	r2, #2
 8009430:	4619      	mov	r1, r3
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f000 f90c 	bl	8009650 <USBD_CtlSendData>
      break;
 8009438:	e004      	b.n	8009444 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800943a:	6839      	ldr	r1, [r7, #0]
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	f000 f88a 	bl	8009556 <USBD_CtlError>
      break;
 8009442:	bf00      	nop
  }
}
 8009444:	bf00      	nop
 8009446:	3708      	adds	r7, #8
 8009448:	46bd      	mov	sp, r7
 800944a:	bd80      	pop	{r7, pc}

0800944c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b082      	sub	sp, #8
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
 8009454:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	885b      	ldrh	r3, [r3, #2]
 800945a:	2b01      	cmp	r3, #1
 800945c:	d107      	bne.n	800946e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2201      	movs	r2, #1
 8009462:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	f000 f953 	bl	8009712 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800946c:	e013      	b.n	8009496 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	885b      	ldrh	r3, [r3, #2]
 8009472:	2b02      	cmp	r3, #2
 8009474:	d10b      	bne.n	800948e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	889b      	ldrh	r3, [r3, #4]
 800947a:	0a1b      	lsrs	r3, r3, #8
 800947c:	b29b      	uxth	r3, r3
 800947e:	b2da      	uxtb	r2, r3
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f000 f943 	bl	8009712 <USBD_CtlSendStatus>
}
 800948c:	e003      	b.n	8009496 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800948e:	6839      	ldr	r1, [r7, #0]
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f000 f860 	bl	8009556 <USBD_CtlError>
}
 8009496:	bf00      	nop
 8009498:	3708      	adds	r7, #8
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}

0800949e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800949e:	b580      	push	{r7, lr}
 80094a0:	b082      	sub	sp, #8
 80094a2:	af00      	add	r7, sp, #0
 80094a4:	6078      	str	r0, [r7, #4]
 80094a6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094ae:	b2db      	uxtb	r3, r3
 80094b0:	3b01      	subs	r3, #1
 80094b2:	2b02      	cmp	r3, #2
 80094b4:	d80b      	bhi.n	80094ce <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	885b      	ldrh	r3, [r3, #2]
 80094ba:	2b01      	cmp	r3, #1
 80094bc:	d10c      	bne.n	80094d8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2200      	movs	r2, #0
 80094c2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f000 f923 	bl	8009712 <USBD_CtlSendStatus>
      }
      break;
 80094cc:	e004      	b.n	80094d8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80094ce:	6839      	ldr	r1, [r7, #0]
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	f000 f840 	bl	8009556 <USBD_CtlError>
      break;
 80094d6:	e000      	b.n	80094da <USBD_ClrFeature+0x3c>
      break;
 80094d8:	bf00      	nop
  }
}
 80094da:	bf00      	nop
 80094dc:	3708      	adds	r7, #8
 80094de:	46bd      	mov	sp, r7
 80094e0:	bd80      	pop	{r7, pc}

080094e2 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80094e2:	b580      	push	{r7, lr}
 80094e4:	b084      	sub	sp, #16
 80094e6:	af00      	add	r7, sp, #0
 80094e8:	6078      	str	r0, [r7, #4]
 80094ea:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	781a      	ldrb	r2, [r3, #0]
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	3301      	adds	r3, #1
 80094fc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	781a      	ldrb	r2, [r3, #0]
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	3301      	adds	r3, #1
 800950a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800950c:	68f8      	ldr	r0, [r7, #12]
 800950e:	f7ff fa3d 	bl	800898c <SWAPBYTE>
 8009512:	4603      	mov	r3, r0
 8009514:	461a      	mov	r2, r3
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	3301      	adds	r3, #1
 800951e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	3301      	adds	r3, #1
 8009524:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009526:	68f8      	ldr	r0, [r7, #12]
 8009528:	f7ff fa30 	bl	800898c <SWAPBYTE>
 800952c:	4603      	mov	r3, r0
 800952e:	461a      	mov	r2, r3
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	3301      	adds	r3, #1
 8009538:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	3301      	adds	r3, #1
 800953e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009540:	68f8      	ldr	r0, [r7, #12]
 8009542:	f7ff fa23 	bl	800898c <SWAPBYTE>
 8009546:	4603      	mov	r3, r0
 8009548:	461a      	mov	r2, r3
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	80da      	strh	r2, [r3, #6]
}
 800954e:	bf00      	nop
 8009550:	3710      	adds	r7, #16
 8009552:	46bd      	mov	sp, r7
 8009554:	bd80      	pop	{r7, pc}

08009556 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009556:	b580      	push	{r7, lr}
 8009558:	b082      	sub	sp, #8
 800955a:	af00      	add	r7, sp, #0
 800955c:	6078      	str	r0, [r7, #4]
 800955e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009560:	2180      	movs	r1, #128	@ 0x80
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f00d fc94 	bl	8016e90 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009568:	2100      	movs	r1, #0
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f00d fc90 	bl	8016e90 <USBD_LL_StallEP>
}
 8009570:	bf00      	nop
 8009572:	3708      	adds	r7, #8
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}

08009578 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b086      	sub	sp, #24
 800957c:	af00      	add	r7, sp, #0
 800957e:	60f8      	str	r0, [r7, #12]
 8009580:	60b9      	str	r1, [r7, #8]
 8009582:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009584:	2300      	movs	r3, #0
 8009586:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d042      	beq.n	8009614 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8009592:	6938      	ldr	r0, [r7, #16]
 8009594:	f000 f842 	bl	800961c <USBD_GetLen>
 8009598:	4603      	mov	r3, r0
 800959a:	3301      	adds	r3, #1
 800959c:	005b      	lsls	r3, r3, #1
 800959e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80095a2:	d808      	bhi.n	80095b6 <USBD_GetString+0x3e>
 80095a4:	6938      	ldr	r0, [r7, #16]
 80095a6:	f000 f839 	bl	800961c <USBD_GetLen>
 80095aa:	4603      	mov	r3, r0
 80095ac:	3301      	adds	r3, #1
 80095ae:	b29b      	uxth	r3, r3
 80095b0:	005b      	lsls	r3, r3, #1
 80095b2:	b29a      	uxth	r2, r3
 80095b4:	e001      	b.n	80095ba <USBD_GetString+0x42>
 80095b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80095be:	7dfb      	ldrb	r3, [r7, #23]
 80095c0:	68ba      	ldr	r2, [r7, #8]
 80095c2:	4413      	add	r3, r2
 80095c4:	687a      	ldr	r2, [r7, #4]
 80095c6:	7812      	ldrb	r2, [r2, #0]
 80095c8:	701a      	strb	r2, [r3, #0]
  idx++;
 80095ca:	7dfb      	ldrb	r3, [r7, #23]
 80095cc:	3301      	adds	r3, #1
 80095ce:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80095d0:	7dfb      	ldrb	r3, [r7, #23]
 80095d2:	68ba      	ldr	r2, [r7, #8]
 80095d4:	4413      	add	r3, r2
 80095d6:	2203      	movs	r2, #3
 80095d8:	701a      	strb	r2, [r3, #0]
  idx++;
 80095da:	7dfb      	ldrb	r3, [r7, #23]
 80095dc:	3301      	adds	r3, #1
 80095de:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80095e0:	e013      	b.n	800960a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80095e2:	7dfb      	ldrb	r3, [r7, #23]
 80095e4:	68ba      	ldr	r2, [r7, #8]
 80095e6:	4413      	add	r3, r2
 80095e8:	693a      	ldr	r2, [r7, #16]
 80095ea:	7812      	ldrb	r2, [r2, #0]
 80095ec:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80095ee:	693b      	ldr	r3, [r7, #16]
 80095f0:	3301      	adds	r3, #1
 80095f2:	613b      	str	r3, [r7, #16]
    idx++;
 80095f4:	7dfb      	ldrb	r3, [r7, #23]
 80095f6:	3301      	adds	r3, #1
 80095f8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80095fa:	7dfb      	ldrb	r3, [r7, #23]
 80095fc:	68ba      	ldr	r2, [r7, #8]
 80095fe:	4413      	add	r3, r2
 8009600:	2200      	movs	r2, #0
 8009602:	701a      	strb	r2, [r3, #0]
    idx++;
 8009604:	7dfb      	ldrb	r3, [r7, #23]
 8009606:	3301      	adds	r3, #1
 8009608:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800960a:	693b      	ldr	r3, [r7, #16]
 800960c:	781b      	ldrb	r3, [r3, #0]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d1e7      	bne.n	80095e2 <USBD_GetString+0x6a>
 8009612:	e000      	b.n	8009616 <USBD_GetString+0x9e>
    return;
 8009614:	bf00      	nop
  }
}
 8009616:	3718      	adds	r7, #24
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}

0800961c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800961c:	b480      	push	{r7}
 800961e:	b085      	sub	sp, #20
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009624:	2300      	movs	r3, #0
 8009626:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800962c:	e005      	b.n	800963a <USBD_GetLen+0x1e>
  {
    len++;
 800962e:	7bfb      	ldrb	r3, [r7, #15]
 8009630:	3301      	adds	r3, #1
 8009632:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	3301      	adds	r3, #1
 8009638:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800963a:	68bb      	ldr	r3, [r7, #8]
 800963c:	781b      	ldrb	r3, [r3, #0]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d1f5      	bne.n	800962e <USBD_GetLen+0x12>
  }

  return len;
 8009642:	7bfb      	ldrb	r3, [r7, #15]
}
 8009644:	4618      	mov	r0, r3
 8009646:	3714      	adds	r7, #20
 8009648:	46bd      	mov	sp, r7
 800964a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964e:	4770      	bx	lr

08009650 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b084      	sub	sp, #16
 8009654:	af00      	add	r7, sp, #0
 8009656:	60f8      	str	r0, [r7, #12]
 8009658:	60b9      	str	r1, [r7, #8]
 800965a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	2202      	movs	r2, #2
 8009660:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	687a      	ldr	r2, [r7, #4]
 8009668:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	68ba      	ldr	r2, [r7, #8]
 800966e:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	687a      	ldr	r2, [r7, #4]
 8009674:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	68ba      	ldr	r2, [r7, #8]
 800967a:	2100      	movs	r1, #0
 800967c:	68f8      	ldr	r0, [r7, #12]
 800967e:	f00d fc90 	bl	8016fa2 <USBD_LL_Transmit>

  return USBD_OK;
 8009682:	2300      	movs	r3, #0
}
 8009684:	4618      	mov	r0, r3
 8009686:	3710      	adds	r7, #16
 8009688:	46bd      	mov	sp, r7
 800968a:	bd80      	pop	{r7, pc}

0800968c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b084      	sub	sp, #16
 8009690:	af00      	add	r7, sp, #0
 8009692:	60f8      	str	r0, [r7, #12]
 8009694:	60b9      	str	r1, [r7, #8]
 8009696:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	68ba      	ldr	r2, [r7, #8]
 800969c:	2100      	movs	r1, #0
 800969e:	68f8      	ldr	r0, [r7, #12]
 80096a0:	f00d fc7f 	bl	8016fa2 <USBD_LL_Transmit>

  return USBD_OK;
 80096a4:	2300      	movs	r3, #0
}
 80096a6:	4618      	mov	r0, r3
 80096a8:	3710      	adds	r7, #16
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}

080096ae <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80096ae:	b580      	push	{r7, lr}
 80096b0:	b084      	sub	sp, #16
 80096b2:	af00      	add	r7, sp, #0
 80096b4:	60f8      	str	r0, [r7, #12]
 80096b6:	60b9      	str	r1, [r7, #8]
 80096b8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	2203      	movs	r2, #3
 80096be:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	687a      	ldr	r2, [r7, #4]
 80096c6:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	68ba      	ldr	r2, [r7, #8]
 80096ce:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	687a      	ldr	r2, [r7, #4]
 80096d6:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	68ba      	ldr	r2, [r7, #8]
 80096de:	2100      	movs	r1, #0
 80096e0:	68f8      	ldr	r0, [r7, #12]
 80096e2:	f00d fc7f 	bl	8016fe4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80096e6:	2300      	movs	r3, #0
}
 80096e8:	4618      	mov	r0, r3
 80096ea:	3710      	adds	r7, #16
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bd80      	pop	{r7, pc}

080096f0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b084      	sub	sp, #16
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	60f8      	str	r0, [r7, #12]
 80096f8:	60b9      	str	r1, [r7, #8]
 80096fa:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	68ba      	ldr	r2, [r7, #8]
 8009700:	2100      	movs	r1, #0
 8009702:	68f8      	ldr	r0, [r7, #12]
 8009704:	f00d fc6e 	bl	8016fe4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009708:	2300      	movs	r3, #0
}
 800970a:	4618      	mov	r0, r3
 800970c:	3710      	adds	r7, #16
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}

08009712 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009712:	b580      	push	{r7, lr}
 8009714:	b082      	sub	sp, #8
 8009716:	af00      	add	r7, sp, #0
 8009718:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2204      	movs	r2, #4
 800971e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009722:	2300      	movs	r3, #0
 8009724:	2200      	movs	r2, #0
 8009726:	2100      	movs	r1, #0
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f00d fc3a 	bl	8016fa2 <USBD_LL_Transmit>

  return USBD_OK;
 800972e:	2300      	movs	r3, #0
}
 8009730:	4618      	mov	r0, r3
 8009732:	3708      	adds	r7, #8
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}

08009738 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b082      	sub	sp, #8
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2205      	movs	r2, #5
 8009744:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009748:	2300      	movs	r3, #0
 800974a:	2200      	movs	r2, #0
 800974c:	2100      	movs	r1, #0
 800974e:	6878      	ldr	r0, [r7, #4]
 8009750:	f00d fc48 	bl	8016fe4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009754:	2300      	movs	r3, #0
}
 8009756:	4618      	mov	r0, r3
 8009758:	3708      	adds	r7, #8
 800975a:	46bd      	mov	sp, r7
 800975c:	bd80      	pop	{r7, pc}

0800975e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800975e:	b480      	push	{r7}
 8009760:	b085      	sub	sp, #20
 8009762:	af00      	add	r7, sp, #0
 8009764:	4603      	mov	r3, r0
 8009766:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009768:	2300      	movs	r3, #0
 800976a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800976c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009770:	2b84      	cmp	r3, #132	@ 0x84
 8009772:	d005      	beq.n	8009780 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009774:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	4413      	add	r3, r2
 800977c:	3303      	adds	r3, #3
 800977e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009780:	68fb      	ldr	r3, [r7, #12]
}
 8009782:	4618      	mov	r0, r3
 8009784:	3714      	adds	r7, #20
 8009786:	46bd      	mov	sp, r7
 8009788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978c:	4770      	bx	lr

0800978e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800978e:	b480      	push	{r7}
 8009790:	b083      	sub	sp, #12
 8009792:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009794:	f3ef 8305 	mrs	r3, IPSR
 8009798:	607b      	str	r3, [r7, #4]
  return(result);
 800979a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800979c:	2b00      	cmp	r3, #0
 800979e:	bf14      	ite	ne
 80097a0:	2301      	movne	r3, #1
 80097a2:	2300      	moveq	r3, #0
 80097a4:	b2db      	uxtb	r3, r3
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	370c      	adds	r7, #12
 80097aa:	46bd      	mov	sp, r7
 80097ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b0:	4770      	bx	lr

080097b2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80097b2:	b580      	push	{r7, lr}
 80097b4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80097b6:	f001 fc95 	bl	800b0e4 <vTaskStartScheduler>
  
  return osOK;
 80097ba:	2300      	movs	r3, #0
}
 80097bc:	4618      	mov	r0, r3
 80097be:	bd80      	pop	{r7, pc}

080097c0 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80097c4:	f7ff ffe3 	bl	800978e <inHandlerMode>
 80097c8:	4603      	mov	r3, r0
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d003      	beq.n	80097d6 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80097ce:	f001 fdaf 	bl	800b330 <xTaskGetTickCountFromISR>
 80097d2:	4603      	mov	r3, r0
 80097d4:	e002      	b.n	80097dc <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80097d6:	f001 fd9b 	bl	800b310 <xTaskGetTickCount>
 80097da:	4603      	mov	r3, r0
  }
}
 80097dc:	4618      	mov	r0, r3
 80097de:	bd80      	pop	{r7, pc}

080097e0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80097e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80097e2:	b089      	sub	sp, #36	@ 0x24
 80097e4:	af04      	add	r7, sp, #16
 80097e6:	6078      	str	r0, [r7, #4]
 80097e8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	695b      	ldr	r3, [r3, #20]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d020      	beq.n	8009834 <osThreadCreate+0x54>
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	699b      	ldr	r3, [r3, #24]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d01c      	beq.n	8009834 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	685c      	ldr	r4, [r3, #4]
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	691e      	ldr	r6, [r3, #16]
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800980c:	4618      	mov	r0, r3
 800980e:	f7ff ffa6 	bl	800975e <makeFreeRtosPriority>
 8009812:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	695b      	ldr	r3, [r3, #20]
 8009818:	687a      	ldr	r2, [r7, #4]
 800981a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800981c:	9202      	str	r2, [sp, #8]
 800981e:	9301      	str	r3, [sp, #4]
 8009820:	9100      	str	r1, [sp, #0]
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	4632      	mov	r2, r6
 8009826:	4629      	mov	r1, r5
 8009828:	4620      	mov	r0, r4
 800982a:	f001 fa75 	bl	800ad18 <xTaskCreateStatic>
 800982e:	4603      	mov	r3, r0
 8009830:	60fb      	str	r3, [r7, #12]
 8009832:	e01c      	b.n	800986e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	685c      	ldr	r4, [r3, #4]
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009840:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009848:	4618      	mov	r0, r3
 800984a:	f7ff ff88 	bl	800975e <makeFreeRtosPriority>
 800984e:	4602      	mov	r2, r0
 8009850:	f107 030c 	add.w	r3, r7, #12
 8009854:	9301      	str	r3, [sp, #4]
 8009856:	9200      	str	r2, [sp, #0]
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	4632      	mov	r2, r6
 800985c:	4629      	mov	r1, r5
 800985e:	4620      	mov	r0, r4
 8009860:	f001 faba 	bl	800add8 <xTaskCreate>
 8009864:	4603      	mov	r3, r0
 8009866:	2b01      	cmp	r3, #1
 8009868:	d001      	beq.n	800986e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800986a:	2300      	movs	r3, #0
 800986c:	e000      	b.n	8009870 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800986e:	68fb      	ldr	r3, [r7, #12]
}
 8009870:	4618      	mov	r0, r3
 8009872:	3714      	adds	r7, #20
 8009874:	46bd      	mov	sp, r7
 8009876:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009878 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b084      	sub	sp, #16
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d001      	beq.n	800988e <osDelay+0x16>
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	e000      	b.n	8009890 <osDelay+0x18>
 800988e:	2301      	movs	r3, #1
 8009890:	4618      	mov	r0, r3
 8009892:	f001 fbf1 	bl	800b078 <vTaskDelay>
  
  return osOK;
 8009896:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009898:	4618      	mov	r0, r3
 800989a:	3710      	adds	r7, #16
 800989c:	46bd      	mov	sp, r7
 800989e:	bd80      	pop	{r7, pc}

080098a0 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b082      	sub	sp, #8
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	685b      	ldr	r3, [r3, #4]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d007      	beq.n	80098c0 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	685b      	ldr	r3, [r3, #4]
 80098b4:	4619      	mov	r1, r3
 80098b6:	2001      	movs	r0, #1
 80098b8:	f000 fc47 	bl	800a14a <xQueueCreateMutexStatic>
 80098bc:	4603      	mov	r3, r0
 80098be:	e003      	b.n	80098c8 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80098c0:	2001      	movs	r0, #1
 80098c2:	f000 fc2a 	bl	800a11a <xQueueCreateMutex>
 80098c6:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	3708      	adds	r7, #8
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd80      	pop	{r7, pc}

080098d0 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b084      	sub	sp, #16
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
 80098d8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80098da:	2300      	movs	r3, #0
 80098dc:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d101      	bne.n	80098e8 <osMutexWait+0x18>
    return osErrorParameter;
 80098e4:	2380      	movs	r3, #128	@ 0x80
 80098e6:	e03a      	b.n	800995e <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80098e8:	2300      	movs	r3, #0
 80098ea:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098f2:	d103      	bne.n	80098fc <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80098f4:	f04f 33ff 	mov.w	r3, #4294967295
 80098f8:	60fb      	str	r3, [r7, #12]
 80098fa:	e009      	b.n	8009910 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d006      	beq.n	8009910 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d101      	bne.n	8009910 <osMutexWait+0x40>
      ticks = 1;
 800990c:	2301      	movs	r3, #1
 800990e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8009910:	f7ff ff3d 	bl	800978e <inHandlerMode>
 8009914:	4603      	mov	r3, r0
 8009916:	2b00      	cmp	r3, #0
 8009918:	d017      	beq.n	800994a <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800991a:	f107 0308 	add.w	r3, r7, #8
 800991e:	461a      	mov	r2, r3
 8009920:	2100      	movs	r1, #0
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	f001 f84e 	bl	800a9c4 <xQueueReceiveFromISR>
 8009928:	4603      	mov	r3, r0
 800992a:	2b01      	cmp	r3, #1
 800992c:	d001      	beq.n	8009932 <osMutexWait+0x62>
      return osErrorOS;
 800992e:	23ff      	movs	r3, #255	@ 0xff
 8009930:	e015      	b.n	800995e <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8009932:	68bb      	ldr	r3, [r7, #8]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d011      	beq.n	800995c <osMutexWait+0x8c>
 8009938:	4b0b      	ldr	r3, [pc, #44]	@ (8009968 <osMutexWait+0x98>)
 800993a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800993e:	601a      	str	r2, [r3, #0]
 8009940:	f3bf 8f4f 	dsb	sy
 8009944:	f3bf 8f6f 	isb	sy
 8009948:	e008      	b.n	800995c <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800994a:	68f9      	ldr	r1, [r7, #12]
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f000 ff29 	bl	800a7a4 <xQueueSemaphoreTake>
 8009952:	4603      	mov	r3, r0
 8009954:	2b01      	cmp	r3, #1
 8009956:	d001      	beq.n	800995c <osMutexWait+0x8c>
    return osErrorOS;
 8009958:	23ff      	movs	r3, #255	@ 0xff
 800995a:	e000      	b.n	800995e <osMutexWait+0x8e>
  }
  
  return osOK;
 800995c:	2300      	movs	r3, #0
}
 800995e:	4618      	mov	r0, r3
 8009960:	3710      	adds	r7, #16
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}
 8009966:	bf00      	nop
 8009968:	e000ed04 	.word	0xe000ed04

0800996c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b084      	sub	sp, #16
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8009974:	2300      	movs	r3, #0
 8009976:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8009978:	2300      	movs	r3, #0
 800997a:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800997c:	f7ff ff07 	bl	800978e <inHandlerMode>
 8009980:	4603      	mov	r3, r0
 8009982:	2b00      	cmp	r3, #0
 8009984:	d016      	beq.n	80099b4 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8009986:	f107 0308 	add.w	r3, r7, #8
 800998a:	4619      	mov	r1, r3
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f000 fd97 	bl	800a4c0 <xQueueGiveFromISR>
 8009992:	4603      	mov	r3, r0
 8009994:	2b01      	cmp	r3, #1
 8009996:	d001      	beq.n	800999c <osMutexRelease+0x30>
      return osErrorOS;
 8009998:	23ff      	movs	r3, #255	@ 0xff
 800999a:	e017      	b.n	80099cc <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d013      	beq.n	80099ca <osMutexRelease+0x5e>
 80099a2:	4b0c      	ldr	r3, [pc, #48]	@ (80099d4 <osMutexRelease+0x68>)
 80099a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80099a8:	601a      	str	r2, [r3, #0]
 80099aa:	f3bf 8f4f 	dsb	sy
 80099ae:	f3bf 8f6f 	isb	sy
 80099b2:	e00a      	b.n	80099ca <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80099b4:	2300      	movs	r3, #0
 80099b6:	2200      	movs	r2, #0
 80099b8:	2100      	movs	r1, #0
 80099ba:	6878      	ldr	r0, [r7, #4]
 80099bc:	f000 fbe0 	bl	800a180 <xQueueGenericSend>
 80099c0:	4603      	mov	r3, r0
 80099c2:	2b01      	cmp	r3, #1
 80099c4:	d001      	beq.n	80099ca <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80099c6:	23ff      	movs	r3, #255	@ 0xff
 80099c8:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80099ca:	68fb      	ldr	r3, [r7, #12]
}
 80099cc:	4618      	mov	r0, r3
 80099ce:	3710      	adds	r7, #16
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bd80      	pop	{r7, pc}
 80099d4:	e000ed04 	.word	0xe000ed04

080099d8 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80099d8:	b580      	push	{r7, lr}
 80099da:	b086      	sub	sp, #24
 80099dc:	af02      	add	r7, sp, #8
 80099de:	6078      	str	r0, [r7, #4]
 80099e0:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	685b      	ldr	r3, [r3, #4]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d00f      	beq.n	8009a0a <osSemaphoreCreate+0x32>
    if (count == 1) {
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	2b01      	cmp	r3, #1
 80099ee:	d10a      	bne.n	8009a06 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	685b      	ldr	r3, [r3, #4]
 80099f4:	2203      	movs	r2, #3
 80099f6:	9200      	str	r2, [sp, #0]
 80099f8:	2200      	movs	r2, #0
 80099fa:	2100      	movs	r1, #0
 80099fc:	2001      	movs	r0, #1
 80099fe:	f000 fa9b 	bl	8009f38 <xQueueGenericCreateStatic>
 8009a02:	4603      	mov	r3, r0
 8009a04:	e016      	b.n	8009a34 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8009a06:	2300      	movs	r3, #0
 8009a08:	e014      	b.n	8009a34 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	2b01      	cmp	r3, #1
 8009a0e:	d110      	bne.n	8009a32 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8009a10:	2203      	movs	r2, #3
 8009a12:	2100      	movs	r1, #0
 8009a14:	2001      	movs	r0, #1
 8009a16:	f000 fb0c 	bl	800a032 <xQueueGenericCreate>
 8009a1a:	60f8      	str	r0, [r7, #12]
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d005      	beq.n	8009a2e <osSemaphoreCreate+0x56>
 8009a22:	2300      	movs	r3, #0
 8009a24:	2200      	movs	r2, #0
 8009a26:	2100      	movs	r1, #0
 8009a28:	68f8      	ldr	r0, [r7, #12]
 8009a2a:	f000 fba9 	bl	800a180 <xQueueGenericSend>
      return sema;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	e000      	b.n	8009a34 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8009a32:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8009a34:	4618      	mov	r0, r3
 8009a36:	3710      	adds	r7, #16
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}

08009a3c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b084      	sub	sp, #16
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
 8009a44:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8009a46:	2300      	movs	r3, #0
 8009a48:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d101      	bne.n	8009a54 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8009a50:	2380      	movs	r3, #128	@ 0x80
 8009a52:	e03a      	b.n	8009aca <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8009a54:	2300      	movs	r3, #0
 8009a56:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a5e:	d103      	bne.n	8009a68 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8009a60:	f04f 33ff 	mov.w	r3, #4294967295
 8009a64:	60fb      	str	r3, [r7, #12]
 8009a66:	e009      	b.n	8009a7c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d006      	beq.n	8009a7c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d101      	bne.n	8009a7c <osSemaphoreWait+0x40>
      ticks = 1;
 8009a78:	2301      	movs	r3, #1
 8009a7a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8009a7c:	f7ff fe87 	bl	800978e <inHandlerMode>
 8009a80:	4603      	mov	r3, r0
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d017      	beq.n	8009ab6 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8009a86:	f107 0308 	add.w	r3, r7, #8
 8009a8a:	461a      	mov	r2, r3
 8009a8c:	2100      	movs	r1, #0
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f000 ff98 	bl	800a9c4 <xQueueReceiveFromISR>
 8009a94:	4603      	mov	r3, r0
 8009a96:	2b01      	cmp	r3, #1
 8009a98:	d001      	beq.n	8009a9e <osSemaphoreWait+0x62>
      return osErrorOS;
 8009a9a:	23ff      	movs	r3, #255	@ 0xff
 8009a9c:	e015      	b.n	8009aca <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d011      	beq.n	8009ac8 <osSemaphoreWait+0x8c>
 8009aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8009ad4 <osSemaphoreWait+0x98>)
 8009aa6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009aaa:	601a      	str	r2, [r3, #0]
 8009aac:	f3bf 8f4f 	dsb	sy
 8009ab0:	f3bf 8f6f 	isb	sy
 8009ab4:	e008      	b.n	8009ac8 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8009ab6:	68f9      	ldr	r1, [r7, #12]
 8009ab8:	6878      	ldr	r0, [r7, #4]
 8009aba:	f000 fe73 	bl	800a7a4 <xQueueSemaphoreTake>
 8009abe:	4603      	mov	r3, r0
 8009ac0:	2b01      	cmp	r3, #1
 8009ac2:	d001      	beq.n	8009ac8 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8009ac4:	23ff      	movs	r3, #255	@ 0xff
 8009ac6:	e000      	b.n	8009aca <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8009ac8:	2300      	movs	r3, #0
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	3710      	adds	r7, #16
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}
 8009ad2:	bf00      	nop
 8009ad4:	e000ed04 	.word	0xe000ed04

08009ad8 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b084      	sub	sp, #16
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8009ae8:	f7ff fe51 	bl	800978e <inHandlerMode>
 8009aec:	4603      	mov	r3, r0
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d016      	beq.n	8009b20 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8009af2:	f107 0308 	add.w	r3, r7, #8
 8009af6:	4619      	mov	r1, r3
 8009af8:	6878      	ldr	r0, [r7, #4]
 8009afa:	f000 fce1 	bl	800a4c0 <xQueueGiveFromISR>
 8009afe:	4603      	mov	r3, r0
 8009b00:	2b01      	cmp	r3, #1
 8009b02:	d001      	beq.n	8009b08 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8009b04:	23ff      	movs	r3, #255	@ 0xff
 8009b06:	e017      	b.n	8009b38 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d013      	beq.n	8009b36 <osSemaphoreRelease+0x5e>
 8009b0e:	4b0c      	ldr	r3, [pc, #48]	@ (8009b40 <osSemaphoreRelease+0x68>)
 8009b10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b14:	601a      	str	r2, [r3, #0]
 8009b16:	f3bf 8f4f 	dsb	sy
 8009b1a:	f3bf 8f6f 	isb	sy
 8009b1e:	e00a      	b.n	8009b36 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8009b20:	2300      	movs	r3, #0
 8009b22:	2200      	movs	r2, #0
 8009b24:	2100      	movs	r1, #0
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f000 fb2a 	bl	800a180 <xQueueGenericSend>
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	2b01      	cmp	r3, #1
 8009b30:	d001      	beq.n	8009b36 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8009b32:	23ff      	movs	r3, #255	@ 0xff
 8009b34:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8009b36:	68fb      	ldr	r3, [r7, #12]
}
 8009b38:	4618      	mov	r0, r3
 8009b3a:	3710      	adds	r7, #16
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	bd80      	pop	{r7, pc}
 8009b40:	e000ed04 	.word	0xe000ed04

08009b44 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8009b44:	b590      	push	{r4, r7, lr}
 8009b46:	b085      	sub	sp, #20
 8009b48:	af02      	add	r7, sp, #8
 8009b4a:	6078      	str	r0, [r7, #4]
 8009b4c:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	689b      	ldr	r3, [r3, #8]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d011      	beq.n	8009b7a <osMessageCreate+0x36>
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	68db      	ldr	r3, [r3, #12]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d00d      	beq.n	8009b7a <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6818      	ldr	r0, [r3, #0]
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6859      	ldr	r1, [r3, #4]
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	689a      	ldr	r2, [r3, #8]
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	68db      	ldr	r3, [r3, #12]
 8009b6e:	2400      	movs	r4, #0
 8009b70:	9400      	str	r4, [sp, #0]
 8009b72:	f000 f9e1 	bl	8009f38 <xQueueGenericCreateStatic>
 8009b76:	4603      	mov	r3, r0
 8009b78:	e008      	b.n	8009b8c <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	6818      	ldr	r0, [r3, #0]
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	685b      	ldr	r3, [r3, #4]
 8009b82:	2200      	movs	r2, #0
 8009b84:	4619      	mov	r1, r3
 8009b86:	f000 fa54 	bl	800a032 <xQueueGenericCreate>
 8009b8a:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	370c      	adds	r7, #12
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd90      	pop	{r4, r7, pc}

08009b94 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b086      	sub	sp, #24
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	60f8      	str	r0, [r7, #12]
 8009b9c:	60b9      	str	r1, [r7, #8]
 8009b9e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8009ba8:	697b      	ldr	r3, [r7, #20]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d101      	bne.n	8009bb2 <osMessagePut+0x1e>
    ticks = 1;
 8009bae:	2301      	movs	r3, #1
 8009bb0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8009bb2:	f7ff fdec 	bl	800978e <inHandlerMode>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d018      	beq.n	8009bee <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8009bbc:	f107 0210 	add.w	r2, r7, #16
 8009bc0:	f107 0108 	add.w	r1, r7, #8
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	68f8      	ldr	r0, [r7, #12]
 8009bc8:	f000 fbdc 	bl	800a384 <xQueueGenericSendFromISR>
 8009bcc:	4603      	mov	r3, r0
 8009bce:	2b01      	cmp	r3, #1
 8009bd0:	d001      	beq.n	8009bd6 <osMessagePut+0x42>
      return osErrorOS;
 8009bd2:	23ff      	movs	r3, #255	@ 0xff
 8009bd4:	e018      	b.n	8009c08 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009bd6:	693b      	ldr	r3, [r7, #16]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d014      	beq.n	8009c06 <osMessagePut+0x72>
 8009bdc:	4b0c      	ldr	r3, [pc, #48]	@ (8009c10 <osMessagePut+0x7c>)
 8009bde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009be2:	601a      	str	r2, [r3, #0]
 8009be4:	f3bf 8f4f 	dsb	sy
 8009be8:	f3bf 8f6f 	isb	sy
 8009bec:	e00b      	b.n	8009c06 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8009bee:	f107 0108 	add.w	r1, r7, #8
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	697a      	ldr	r2, [r7, #20]
 8009bf6:	68f8      	ldr	r0, [r7, #12]
 8009bf8:	f000 fac2 	bl	800a180 <xQueueGenericSend>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	2b01      	cmp	r3, #1
 8009c00:	d001      	beq.n	8009c06 <osMessagePut+0x72>
      return osErrorOS;
 8009c02:	23ff      	movs	r3, #255	@ 0xff
 8009c04:	e000      	b.n	8009c08 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8009c06:	2300      	movs	r3, #0
}
 8009c08:	4618      	mov	r0, r3
 8009c0a:	3718      	adds	r7, #24
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	bd80      	pop	{r7, pc}
 8009c10:	e000ed04 	.word	0xe000ed04

08009c14 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8009c14:	b590      	push	{r4, r7, lr}
 8009c16:	b08b      	sub	sp, #44	@ 0x2c
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	60f8      	str	r0, [r7, #12]
 8009c1c:	60b9      	str	r1, [r7, #8]
 8009c1e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8009c24:	2300      	movs	r3, #0
 8009c26:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d10a      	bne.n	8009c44 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8009c2e:	2380      	movs	r3, #128	@ 0x80
 8009c30:	617b      	str	r3, [r7, #20]
    return event;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	461c      	mov	r4, r3
 8009c36:	f107 0314 	add.w	r3, r7, #20
 8009c3a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009c3e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009c42:	e054      	b.n	8009cee <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8009c44:	2300      	movs	r3, #0
 8009c46:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8009c48:	2300      	movs	r3, #0
 8009c4a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c52:	d103      	bne.n	8009c5c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8009c54:	f04f 33ff 	mov.w	r3, #4294967295
 8009c58:	627b      	str	r3, [r7, #36]	@ 0x24
 8009c5a:	e009      	b.n	8009c70 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d006      	beq.n	8009c70 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8009c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d101      	bne.n	8009c70 <osMessageGet+0x5c>
      ticks = 1;
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8009c70:	f7ff fd8d 	bl	800978e <inHandlerMode>
 8009c74:	4603      	mov	r3, r0
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d01c      	beq.n	8009cb4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8009c7a:	f107 0220 	add.w	r2, r7, #32
 8009c7e:	f107 0314 	add.w	r3, r7, #20
 8009c82:	3304      	adds	r3, #4
 8009c84:	4619      	mov	r1, r3
 8009c86:	68b8      	ldr	r0, [r7, #8]
 8009c88:	f000 fe9c 	bl	800a9c4 <xQueueReceiveFromISR>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	2b01      	cmp	r3, #1
 8009c90:	d102      	bne.n	8009c98 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8009c92:	2310      	movs	r3, #16
 8009c94:	617b      	str	r3, [r7, #20]
 8009c96:	e001      	b.n	8009c9c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8009c98:	2300      	movs	r3, #0
 8009c9a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009c9c:	6a3b      	ldr	r3, [r7, #32]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d01d      	beq.n	8009cde <osMessageGet+0xca>
 8009ca2:	4b15      	ldr	r3, [pc, #84]	@ (8009cf8 <osMessageGet+0xe4>)
 8009ca4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ca8:	601a      	str	r2, [r3, #0]
 8009caa:	f3bf 8f4f 	dsb	sy
 8009cae:	f3bf 8f6f 	isb	sy
 8009cb2:	e014      	b.n	8009cde <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8009cb4:	f107 0314 	add.w	r3, r7, #20
 8009cb8:	3304      	adds	r3, #4
 8009cba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009cbc:	4619      	mov	r1, r3
 8009cbe:	68b8      	ldr	r0, [r7, #8]
 8009cc0:	f000 fc8e 	bl	800a5e0 <xQueueReceive>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	2b01      	cmp	r3, #1
 8009cc8:	d102      	bne.n	8009cd0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8009cca:	2310      	movs	r3, #16
 8009ccc:	617b      	str	r3, [r7, #20]
 8009cce:	e006      	b.n	8009cde <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8009cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d101      	bne.n	8009cda <osMessageGet+0xc6>
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	e000      	b.n	8009cdc <osMessageGet+0xc8>
 8009cda:	2340      	movs	r3, #64	@ 0x40
 8009cdc:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	461c      	mov	r4, r3
 8009ce2:	f107 0314 	add.w	r3, r7, #20
 8009ce6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009cea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8009cee:	68f8      	ldr	r0, [r7, #12]
 8009cf0:	372c      	adds	r7, #44	@ 0x2c
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd90      	pop	{r4, r7, pc}
 8009cf6:	bf00      	nop
 8009cf8:	e000ed04 	.word	0xe000ed04

08009cfc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009cfc:	b480      	push	{r7}
 8009cfe:	b083      	sub	sp, #12
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f103 0208 	add.w	r2, r3, #8
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	f04f 32ff 	mov.w	r2, #4294967295
 8009d14:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	f103 0208 	add.w	r2, r3, #8
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f103 0208 	add.w	r2, r3, #8
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009d30:	bf00      	nop
 8009d32:	370c      	adds	r7, #12
 8009d34:	46bd      	mov	sp, r7
 8009d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3a:	4770      	bx	lr

08009d3c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009d3c:	b480      	push	{r7}
 8009d3e:	b083      	sub	sp, #12
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2200      	movs	r2, #0
 8009d48:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009d4a:	bf00      	nop
 8009d4c:	370c      	adds	r7, #12
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d54:	4770      	bx	lr

08009d56 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009d56:	b480      	push	{r7}
 8009d58:	b085      	sub	sp, #20
 8009d5a:	af00      	add	r7, sp, #0
 8009d5c:	6078      	str	r0, [r7, #4]
 8009d5e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	685b      	ldr	r3, [r3, #4]
 8009d64:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	68fa      	ldr	r2, [r7, #12]
 8009d6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	689a      	ldr	r2, [r3, #8]
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	689b      	ldr	r3, [r3, #8]
 8009d78:	683a      	ldr	r2, [r7, #0]
 8009d7a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	683a      	ldr	r2, [r7, #0]
 8009d80:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	687a      	ldr	r2, [r7, #4]
 8009d86:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	1c5a      	adds	r2, r3, #1
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	601a      	str	r2, [r3, #0]
}
 8009d92:	bf00      	nop
 8009d94:	3714      	adds	r7, #20
 8009d96:	46bd      	mov	sp, r7
 8009d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9c:	4770      	bx	lr

08009d9e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009d9e:	b480      	push	{r7}
 8009da0:	b085      	sub	sp, #20
 8009da2:	af00      	add	r7, sp, #0
 8009da4:	6078      	str	r0, [r7, #4]
 8009da6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009dae:	68bb      	ldr	r3, [r7, #8]
 8009db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009db4:	d103      	bne.n	8009dbe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	691b      	ldr	r3, [r3, #16]
 8009dba:	60fb      	str	r3, [r7, #12]
 8009dbc:	e00c      	b.n	8009dd8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	3308      	adds	r3, #8
 8009dc2:	60fb      	str	r3, [r7, #12]
 8009dc4:	e002      	b.n	8009dcc <vListInsert+0x2e>
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	685b      	ldr	r3, [r3, #4]
 8009dca:	60fb      	str	r3, [r7, #12]
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	685b      	ldr	r3, [r3, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	68ba      	ldr	r2, [r7, #8]
 8009dd4:	429a      	cmp	r2, r3
 8009dd6:	d2f6      	bcs.n	8009dc6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	685a      	ldr	r2, [r3, #4]
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	685b      	ldr	r3, [r3, #4]
 8009de4:	683a      	ldr	r2, [r7, #0]
 8009de6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	68fa      	ldr	r2, [r7, #12]
 8009dec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	683a      	ldr	r2, [r7, #0]
 8009df2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	687a      	ldr	r2, [r7, #4]
 8009df8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	1c5a      	adds	r2, r3, #1
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	601a      	str	r2, [r3, #0]
}
 8009e04:	bf00      	nop
 8009e06:	3714      	adds	r7, #20
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0e:	4770      	bx	lr

08009e10 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009e10:	b480      	push	{r7}
 8009e12:	b085      	sub	sp, #20
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	691b      	ldr	r3, [r3, #16]
 8009e1c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	685b      	ldr	r3, [r3, #4]
 8009e22:	687a      	ldr	r2, [r7, #4]
 8009e24:	6892      	ldr	r2, [r2, #8]
 8009e26:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	689b      	ldr	r3, [r3, #8]
 8009e2c:	687a      	ldr	r2, [r7, #4]
 8009e2e:	6852      	ldr	r2, [r2, #4]
 8009e30:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	685b      	ldr	r3, [r3, #4]
 8009e36:	687a      	ldr	r2, [r7, #4]
 8009e38:	429a      	cmp	r2, r3
 8009e3a:	d103      	bne.n	8009e44 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	689a      	ldr	r2, [r3, #8]
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2200      	movs	r2, #0
 8009e48:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	1e5a      	subs	r2, r3, #1
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	681b      	ldr	r3, [r3, #0]
}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	3714      	adds	r7, #20
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e62:	4770      	bx	lr

08009e64 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b084      	sub	sp, #16
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
 8009e6c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d10b      	bne.n	8009e90 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009e78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e7c:	f383 8811 	msr	BASEPRI, r3
 8009e80:	f3bf 8f6f 	isb	sy
 8009e84:	f3bf 8f4f 	dsb	sy
 8009e88:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009e8a:	bf00      	nop
 8009e8c:	bf00      	nop
 8009e8e:	e7fd      	b.n	8009e8c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009e90:	f002 f8c2 	bl	800c018 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	681a      	ldr	r2, [r3, #0]
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e9c:	68f9      	ldr	r1, [r7, #12]
 8009e9e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009ea0:	fb01 f303 	mul.w	r3, r1, r3
 8009ea4:	441a      	add	r2, r3
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	2200      	movs	r2, #0
 8009eae:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	681a      	ldr	r2, [r3, #0]
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	681a      	ldr	r2, [r3, #0]
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ec0:	3b01      	subs	r3, #1
 8009ec2:	68f9      	ldr	r1, [r7, #12]
 8009ec4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009ec6:	fb01 f303 	mul.w	r3, r1, r3
 8009eca:	441a      	add	r2, r3
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	22ff      	movs	r2, #255	@ 0xff
 8009ed4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	22ff      	movs	r2, #255	@ 0xff
 8009edc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d114      	bne.n	8009f10 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	691b      	ldr	r3, [r3, #16]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d01a      	beq.n	8009f24 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	3310      	adds	r3, #16
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f001 fb72 	bl	800b5dc <xTaskRemoveFromEventList>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d012      	beq.n	8009f24 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009efe:	4b0d      	ldr	r3, [pc, #52]	@ (8009f34 <xQueueGenericReset+0xd0>)
 8009f00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f04:	601a      	str	r2, [r3, #0]
 8009f06:	f3bf 8f4f 	dsb	sy
 8009f0a:	f3bf 8f6f 	isb	sy
 8009f0e:	e009      	b.n	8009f24 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	3310      	adds	r3, #16
 8009f14:	4618      	mov	r0, r3
 8009f16:	f7ff fef1 	bl	8009cfc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	3324      	adds	r3, #36	@ 0x24
 8009f1e:	4618      	mov	r0, r3
 8009f20:	f7ff feec 	bl	8009cfc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009f24:	f002 f8aa 	bl	800c07c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009f28:	2301      	movs	r3, #1
}
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	3710      	adds	r7, #16
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	bd80      	pop	{r7, pc}
 8009f32:	bf00      	nop
 8009f34:	e000ed04 	.word	0xe000ed04

08009f38 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b08e      	sub	sp, #56	@ 0x38
 8009f3c:	af02      	add	r7, sp, #8
 8009f3e:	60f8      	str	r0, [r7, #12]
 8009f40:	60b9      	str	r1, [r7, #8]
 8009f42:	607a      	str	r2, [r7, #4]
 8009f44:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d10b      	bne.n	8009f64 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8009f4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f50:	f383 8811 	msr	BASEPRI, r3
 8009f54:	f3bf 8f6f 	isb	sy
 8009f58:	f3bf 8f4f 	dsb	sy
 8009f5c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009f5e:	bf00      	nop
 8009f60:	bf00      	nop
 8009f62:	e7fd      	b.n	8009f60 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d10b      	bne.n	8009f82 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8009f6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f6e:	f383 8811 	msr	BASEPRI, r3
 8009f72:	f3bf 8f6f 	isb	sy
 8009f76:	f3bf 8f4f 	dsb	sy
 8009f7a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009f7c:	bf00      	nop
 8009f7e:	bf00      	nop
 8009f80:	e7fd      	b.n	8009f7e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d002      	beq.n	8009f8e <xQueueGenericCreateStatic+0x56>
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d001      	beq.n	8009f92 <xQueueGenericCreateStatic+0x5a>
 8009f8e:	2301      	movs	r3, #1
 8009f90:	e000      	b.n	8009f94 <xQueueGenericCreateStatic+0x5c>
 8009f92:	2300      	movs	r3, #0
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d10b      	bne.n	8009fb0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8009f98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f9c:	f383 8811 	msr	BASEPRI, r3
 8009fa0:	f3bf 8f6f 	isb	sy
 8009fa4:	f3bf 8f4f 	dsb	sy
 8009fa8:	623b      	str	r3, [r7, #32]
}
 8009faa:	bf00      	nop
 8009fac:	bf00      	nop
 8009fae:	e7fd      	b.n	8009fac <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d102      	bne.n	8009fbc <xQueueGenericCreateStatic+0x84>
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d101      	bne.n	8009fc0 <xQueueGenericCreateStatic+0x88>
 8009fbc:	2301      	movs	r3, #1
 8009fbe:	e000      	b.n	8009fc2 <xQueueGenericCreateStatic+0x8a>
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d10b      	bne.n	8009fde <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8009fc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fca:	f383 8811 	msr	BASEPRI, r3
 8009fce:	f3bf 8f6f 	isb	sy
 8009fd2:	f3bf 8f4f 	dsb	sy
 8009fd6:	61fb      	str	r3, [r7, #28]
}
 8009fd8:	bf00      	nop
 8009fda:	bf00      	nop
 8009fdc:	e7fd      	b.n	8009fda <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009fde:	2348      	movs	r3, #72	@ 0x48
 8009fe0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009fe2:	697b      	ldr	r3, [r7, #20]
 8009fe4:	2b48      	cmp	r3, #72	@ 0x48
 8009fe6:	d00b      	beq.n	800a000 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8009fe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fec:	f383 8811 	msr	BASEPRI, r3
 8009ff0:	f3bf 8f6f 	isb	sy
 8009ff4:	f3bf 8f4f 	dsb	sy
 8009ff8:	61bb      	str	r3, [r7, #24]
}
 8009ffa:	bf00      	nop
 8009ffc:	bf00      	nop
 8009ffe:	e7fd      	b.n	8009ffc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a000:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a006:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d00d      	beq.n	800a028 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a00c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a00e:	2201      	movs	r2, #1
 800a010:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a014:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a018:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a01a:	9300      	str	r3, [sp, #0]
 800a01c:	4613      	mov	r3, r2
 800a01e:	687a      	ldr	r2, [r7, #4]
 800a020:	68b9      	ldr	r1, [r7, #8]
 800a022:	68f8      	ldr	r0, [r7, #12]
 800a024:	f000 f840 	bl	800a0a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a02a:	4618      	mov	r0, r3
 800a02c:	3730      	adds	r7, #48	@ 0x30
 800a02e:	46bd      	mov	sp, r7
 800a030:	bd80      	pop	{r7, pc}

0800a032 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a032:	b580      	push	{r7, lr}
 800a034:	b08a      	sub	sp, #40	@ 0x28
 800a036:	af02      	add	r7, sp, #8
 800a038:	60f8      	str	r0, [r7, #12]
 800a03a:	60b9      	str	r1, [r7, #8]
 800a03c:	4613      	mov	r3, r2
 800a03e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d10b      	bne.n	800a05e <xQueueGenericCreate+0x2c>
	__asm volatile
 800a046:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a04a:	f383 8811 	msr	BASEPRI, r3
 800a04e:	f3bf 8f6f 	isb	sy
 800a052:	f3bf 8f4f 	dsb	sy
 800a056:	613b      	str	r3, [r7, #16]
}
 800a058:	bf00      	nop
 800a05a:	bf00      	nop
 800a05c:	e7fd      	b.n	800a05a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	68ba      	ldr	r2, [r7, #8]
 800a062:	fb02 f303 	mul.w	r3, r2, r3
 800a066:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a068:	69fb      	ldr	r3, [r7, #28]
 800a06a:	3348      	adds	r3, #72	@ 0x48
 800a06c:	4618      	mov	r0, r3
 800a06e:	f002 f8f5 	bl	800c25c <pvPortMalloc>
 800a072:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a074:	69bb      	ldr	r3, [r7, #24]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d011      	beq.n	800a09e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a07a:	69bb      	ldr	r3, [r7, #24]
 800a07c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a07e:	697b      	ldr	r3, [r7, #20]
 800a080:	3348      	adds	r3, #72	@ 0x48
 800a082:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a084:	69bb      	ldr	r3, [r7, #24]
 800a086:	2200      	movs	r2, #0
 800a088:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a08c:	79fa      	ldrb	r2, [r7, #7]
 800a08e:	69bb      	ldr	r3, [r7, #24]
 800a090:	9300      	str	r3, [sp, #0]
 800a092:	4613      	mov	r3, r2
 800a094:	697a      	ldr	r2, [r7, #20]
 800a096:	68b9      	ldr	r1, [r7, #8]
 800a098:	68f8      	ldr	r0, [r7, #12]
 800a09a:	f000 f805 	bl	800a0a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a09e:	69bb      	ldr	r3, [r7, #24]
	}
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	3720      	adds	r7, #32
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bd80      	pop	{r7, pc}

0800a0a8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b084      	sub	sp, #16
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	60f8      	str	r0, [r7, #12]
 800a0b0:	60b9      	str	r1, [r7, #8]
 800a0b2:	607a      	str	r2, [r7, #4]
 800a0b4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d103      	bne.n	800a0c4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a0bc:	69bb      	ldr	r3, [r7, #24]
 800a0be:	69ba      	ldr	r2, [r7, #24]
 800a0c0:	601a      	str	r2, [r3, #0]
 800a0c2:	e002      	b.n	800a0ca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a0c4:	69bb      	ldr	r3, [r7, #24]
 800a0c6:	687a      	ldr	r2, [r7, #4]
 800a0c8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a0ca:	69bb      	ldr	r3, [r7, #24]
 800a0cc:	68fa      	ldr	r2, [r7, #12]
 800a0ce:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a0d0:	69bb      	ldr	r3, [r7, #24]
 800a0d2:	68ba      	ldr	r2, [r7, #8]
 800a0d4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a0d6:	2101      	movs	r1, #1
 800a0d8:	69b8      	ldr	r0, [r7, #24]
 800a0da:	f7ff fec3 	bl	8009e64 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a0de:	bf00      	nop
 800a0e0:	3710      	adds	r7, #16
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}

0800a0e6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a0e6:	b580      	push	{r7, lr}
 800a0e8:	b082      	sub	sp, #8
 800a0ea:	af00      	add	r7, sp, #0
 800a0ec:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d00e      	beq.n	800a112 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2200      	movs	r2, #0
 800a104:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a106:	2300      	movs	r3, #0
 800a108:	2200      	movs	r2, #0
 800a10a:	2100      	movs	r1, #0
 800a10c:	6878      	ldr	r0, [r7, #4]
 800a10e:	f000 f837 	bl	800a180 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a112:	bf00      	nop
 800a114:	3708      	adds	r7, #8
 800a116:	46bd      	mov	sp, r7
 800a118:	bd80      	pop	{r7, pc}

0800a11a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a11a:	b580      	push	{r7, lr}
 800a11c:	b086      	sub	sp, #24
 800a11e:	af00      	add	r7, sp, #0
 800a120:	4603      	mov	r3, r0
 800a122:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a124:	2301      	movs	r3, #1
 800a126:	617b      	str	r3, [r7, #20]
 800a128:	2300      	movs	r3, #0
 800a12a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a12c:	79fb      	ldrb	r3, [r7, #7]
 800a12e:	461a      	mov	r2, r3
 800a130:	6939      	ldr	r1, [r7, #16]
 800a132:	6978      	ldr	r0, [r7, #20]
 800a134:	f7ff ff7d 	bl	800a032 <xQueueGenericCreate>
 800a138:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a13a:	68f8      	ldr	r0, [r7, #12]
 800a13c:	f7ff ffd3 	bl	800a0e6 <prvInitialiseMutex>

		return xNewQueue;
 800a140:	68fb      	ldr	r3, [r7, #12]
	}
 800a142:	4618      	mov	r0, r3
 800a144:	3718      	adds	r7, #24
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}

0800a14a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800a14a:	b580      	push	{r7, lr}
 800a14c:	b088      	sub	sp, #32
 800a14e:	af02      	add	r7, sp, #8
 800a150:	4603      	mov	r3, r0
 800a152:	6039      	str	r1, [r7, #0]
 800a154:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a156:	2301      	movs	r3, #1
 800a158:	617b      	str	r3, [r7, #20]
 800a15a:	2300      	movs	r3, #0
 800a15c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a15e:	79fb      	ldrb	r3, [r7, #7]
 800a160:	9300      	str	r3, [sp, #0]
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	2200      	movs	r2, #0
 800a166:	6939      	ldr	r1, [r7, #16]
 800a168:	6978      	ldr	r0, [r7, #20]
 800a16a:	f7ff fee5 	bl	8009f38 <xQueueGenericCreateStatic>
 800a16e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a170:	68f8      	ldr	r0, [r7, #12]
 800a172:	f7ff ffb8 	bl	800a0e6 <prvInitialiseMutex>

		return xNewQueue;
 800a176:	68fb      	ldr	r3, [r7, #12]
	}
 800a178:	4618      	mov	r0, r3
 800a17a:	3718      	adds	r7, #24
 800a17c:	46bd      	mov	sp, r7
 800a17e:	bd80      	pop	{r7, pc}

0800a180 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b08e      	sub	sp, #56	@ 0x38
 800a184:	af00      	add	r7, sp, #0
 800a186:	60f8      	str	r0, [r7, #12]
 800a188:	60b9      	str	r1, [r7, #8]
 800a18a:	607a      	str	r2, [r7, #4]
 800a18c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a18e:	2300      	movs	r3, #0
 800a190:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d10b      	bne.n	800a1b4 <xQueueGenericSend+0x34>
	__asm volatile
 800a19c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1a0:	f383 8811 	msr	BASEPRI, r3
 800a1a4:	f3bf 8f6f 	isb	sy
 800a1a8:	f3bf 8f4f 	dsb	sy
 800a1ac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a1ae:	bf00      	nop
 800a1b0:	bf00      	nop
 800a1b2:	e7fd      	b.n	800a1b0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d103      	bne.n	800a1c2 <xQueueGenericSend+0x42>
 800a1ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d101      	bne.n	800a1c6 <xQueueGenericSend+0x46>
 800a1c2:	2301      	movs	r3, #1
 800a1c4:	e000      	b.n	800a1c8 <xQueueGenericSend+0x48>
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d10b      	bne.n	800a1e4 <xQueueGenericSend+0x64>
	__asm volatile
 800a1cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1d0:	f383 8811 	msr	BASEPRI, r3
 800a1d4:	f3bf 8f6f 	isb	sy
 800a1d8:	f3bf 8f4f 	dsb	sy
 800a1dc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a1de:	bf00      	nop
 800a1e0:	bf00      	nop
 800a1e2:	e7fd      	b.n	800a1e0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	2b02      	cmp	r3, #2
 800a1e8:	d103      	bne.n	800a1f2 <xQueueGenericSend+0x72>
 800a1ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1ee:	2b01      	cmp	r3, #1
 800a1f0:	d101      	bne.n	800a1f6 <xQueueGenericSend+0x76>
 800a1f2:	2301      	movs	r3, #1
 800a1f4:	e000      	b.n	800a1f8 <xQueueGenericSend+0x78>
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d10b      	bne.n	800a214 <xQueueGenericSend+0x94>
	__asm volatile
 800a1fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a200:	f383 8811 	msr	BASEPRI, r3
 800a204:	f3bf 8f6f 	isb	sy
 800a208:	f3bf 8f4f 	dsb	sy
 800a20c:	623b      	str	r3, [r7, #32]
}
 800a20e:	bf00      	nop
 800a210:	bf00      	nop
 800a212:	e7fd      	b.n	800a210 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a214:	f001 fba8 	bl	800b968 <xTaskGetSchedulerState>
 800a218:	4603      	mov	r3, r0
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d102      	bne.n	800a224 <xQueueGenericSend+0xa4>
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d101      	bne.n	800a228 <xQueueGenericSend+0xa8>
 800a224:	2301      	movs	r3, #1
 800a226:	e000      	b.n	800a22a <xQueueGenericSend+0xaa>
 800a228:	2300      	movs	r3, #0
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d10b      	bne.n	800a246 <xQueueGenericSend+0xc6>
	__asm volatile
 800a22e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a232:	f383 8811 	msr	BASEPRI, r3
 800a236:	f3bf 8f6f 	isb	sy
 800a23a:	f3bf 8f4f 	dsb	sy
 800a23e:	61fb      	str	r3, [r7, #28]
}
 800a240:	bf00      	nop
 800a242:	bf00      	nop
 800a244:	e7fd      	b.n	800a242 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a246:	f001 fee7 	bl	800c018 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a24a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a24c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a24e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a250:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a252:	429a      	cmp	r2, r3
 800a254:	d302      	bcc.n	800a25c <xQueueGenericSend+0xdc>
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	2b02      	cmp	r3, #2
 800a25a:	d129      	bne.n	800a2b0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a25c:	683a      	ldr	r2, [r7, #0]
 800a25e:	68b9      	ldr	r1, [r7, #8]
 800a260:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a262:	f000 fc49 	bl	800aaf8 <prvCopyDataToQueue>
 800a266:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a26a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d010      	beq.n	800a292 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a272:	3324      	adds	r3, #36	@ 0x24
 800a274:	4618      	mov	r0, r3
 800a276:	f001 f9b1 	bl	800b5dc <xTaskRemoveFromEventList>
 800a27a:	4603      	mov	r3, r0
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d013      	beq.n	800a2a8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a280:	4b3f      	ldr	r3, [pc, #252]	@ (800a380 <xQueueGenericSend+0x200>)
 800a282:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a286:	601a      	str	r2, [r3, #0]
 800a288:	f3bf 8f4f 	dsb	sy
 800a28c:	f3bf 8f6f 	isb	sy
 800a290:	e00a      	b.n	800a2a8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a292:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a294:	2b00      	cmp	r3, #0
 800a296:	d007      	beq.n	800a2a8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a298:	4b39      	ldr	r3, [pc, #228]	@ (800a380 <xQueueGenericSend+0x200>)
 800a29a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a29e:	601a      	str	r2, [r3, #0]
 800a2a0:	f3bf 8f4f 	dsb	sy
 800a2a4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a2a8:	f001 fee8 	bl	800c07c <vPortExitCritical>
				return pdPASS;
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	e063      	b.n	800a378 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d103      	bne.n	800a2be <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a2b6:	f001 fee1 	bl	800c07c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	e05c      	b.n	800a378 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a2be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d106      	bne.n	800a2d2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a2c4:	f107 0314 	add.w	r3, r7, #20
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	f001 f9eb 	bl	800b6a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a2d2:	f001 fed3 	bl	800c07c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a2d6:	f000 ff6f 	bl	800b1b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a2da:	f001 fe9d 	bl	800c018 <vPortEnterCritical>
 800a2de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a2e4:	b25b      	sxtb	r3, r3
 800a2e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2ea:	d103      	bne.n	800a2f4 <xQueueGenericSend+0x174>
 800a2ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a2f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a2fa:	b25b      	sxtb	r3, r3
 800a2fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a300:	d103      	bne.n	800a30a <xQueueGenericSend+0x18a>
 800a302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a304:	2200      	movs	r2, #0
 800a306:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a30a:	f001 feb7 	bl	800c07c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a30e:	1d3a      	adds	r2, r7, #4
 800a310:	f107 0314 	add.w	r3, r7, #20
 800a314:	4611      	mov	r1, r2
 800a316:	4618      	mov	r0, r3
 800a318:	f001 f9da 	bl	800b6d0 <xTaskCheckForTimeOut>
 800a31c:	4603      	mov	r3, r0
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d124      	bne.n	800a36c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a322:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a324:	f000 fce0 	bl	800ace8 <prvIsQueueFull>
 800a328:	4603      	mov	r3, r0
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d018      	beq.n	800a360 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a32e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a330:	3310      	adds	r3, #16
 800a332:	687a      	ldr	r2, [r7, #4]
 800a334:	4611      	mov	r1, r2
 800a336:	4618      	mov	r0, r3
 800a338:	f001 f92a 	bl	800b590 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a33c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a33e:	f000 fc6b 	bl	800ac18 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a342:	f000 ff47 	bl	800b1d4 <xTaskResumeAll>
 800a346:	4603      	mov	r3, r0
 800a348:	2b00      	cmp	r3, #0
 800a34a:	f47f af7c 	bne.w	800a246 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a34e:	4b0c      	ldr	r3, [pc, #48]	@ (800a380 <xQueueGenericSend+0x200>)
 800a350:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a354:	601a      	str	r2, [r3, #0]
 800a356:	f3bf 8f4f 	dsb	sy
 800a35a:	f3bf 8f6f 	isb	sy
 800a35e:	e772      	b.n	800a246 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a360:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a362:	f000 fc59 	bl	800ac18 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a366:	f000 ff35 	bl	800b1d4 <xTaskResumeAll>
 800a36a:	e76c      	b.n	800a246 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a36c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a36e:	f000 fc53 	bl	800ac18 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a372:	f000 ff2f 	bl	800b1d4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a376:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a378:	4618      	mov	r0, r3
 800a37a:	3738      	adds	r7, #56	@ 0x38
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bd80      	pop	{r7, pc}
 800a380:	e000ed04 	.word	0xe000ed04

0800a384 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b090      	sub	sp, #64	@ 0x40
 800a388:	af00      	add	r7, sp, #0
 800a38a:	60f8      	str	r0, [r7, #12]
 800a38c:	60b9      	str	r1, [r7, #8]
 800a38e:	607a      	str	r2, [r7, #4]
 800a390:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800a396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d10b      	bne.n	800a3b4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a39c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3a0:	f383 8811 	msr	BASEPRI, r3
 800a3a4:	f3bf 8f6f 	isb	sy
 800a3a8:	f3bf 8f4f 	dsb	sy
 800a3ac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a3ae:	bf00      	nop
 800a3b0:	bf00      	nop
 800a3b2:	e7fd      	b.n	800a3b0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a3b4:	68bb      	ldr	r3, [r7, #8]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d103      	bne.n	800a3c2 <xQueueGenericSendFromISR+0x3e>
 800a3ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d101      	bne.n	800a3c6 <xQueueGenericSendFromISR+0x42>
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	e000      	b.n	800a3c8 <xQueueGenericSendFromISR+0x44>
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d10b      	bne.n	800a3e4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a3cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3d0:	f383 8811 	msr	BASEPRI, r3
 800a3d4:	f3bf 8f6f 	isb	sy
 800a3d8:	f3bf 8f4f 	dsb	sy
 800a3dc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a3de:	bf00      	nop
 800a3e0:	bf00      	nop
 800a3e2:	e7fd      	b.n	800a3e0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	2b02      	cmp	r3, #2
 800a3e8:	d103      	bne.n	800a3f2 <xQueueGenericSendFromISR+0x6e>
 800a3ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3ee:	2b01      	cmp	r3, #1
 800a3f0:	d101      	bne.n	800a3f6 <xQueueGenericSendFromISR+0x72>
 800a3f2:	2301      	movs	r3, #1
 800a3f4:	e000      	b.n	800a3f8 <xQueueGenericSendFromISR+0x74>
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d10b      	bne.n	800a414 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a3fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a400:	f383 8811 	msr	BASEPRI, r3
 800a404:	f3bf 8f6f 	isb	sy
 800a408:	f3bf 8f4f 	dsb	sy
 800a40c:	623b      	str	r3, [r7, #32]
}
 800a40e:	bf00      	nop
 800a410:	bf00      	nop
 800a412:	e7fd      	b.n	800a410 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a414:	f001 fee0 	bl	800c1d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a418:	f3ef 8211 	mrs	r2, BASEPRI
 800a41c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a420:	f383 8811 	msr	BASEPRI, r3
 800a424:	f3bf 8f6f 	isb	sy
 800a428:	f3bf 8f4f 	dsb	sy
 800a42c:	61fa      	str	r2, [r7, #28]
 800a42e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a430:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a432:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a436:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a43a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a43c:	429a      	cmp	r2, r3
 800a43e:	d302      	bcc.n	800a446 <xQueueGenericSendFromISR+0xc2>
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	2b02      	cmp	r3, #2
 800a444:	d12f      	bne.n	800a4a6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a448:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a44c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a452:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a454:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a456:	683a      	ldr	r2, [r7, #0]
 800a458:	68b9      	ldr	r1, [r7, #8]
 800a45a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a45c:	f000 fb4c 	bl	800aaf8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a460:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800a464:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a468:	d112      	bne.n	800a490 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a46a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a46c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d016      	beq.n	800a4a0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a474:	3324      	adds	r3, #36	@ 0x24
 800a476:	4618      	mov	r0, r3
 800a478:	f001 f8b0 	bl	800b5dc <xTaskRemoveFromEventList>
 800a47c:	4603      	mov	r3, r0
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d00e      	beq.n	800a4a0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d00b      	beq.n	800a4a0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2201      	movs	r2, #1
 800a48c:	601a      	str	r2, [r3, #0]
 800a48e:	e007      	b.n	800a4a0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a490:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a494:	3301      	adds	r3, #1
 800a496:	b2db      	uxtb	r3, r3
 800a498:	b25a      	sxtb	r2, r3
 800a49a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a49c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800a4a4:	e001      	b.n	800a4aa <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a4aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4ac:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a4ae:	697b      	ldr	r3, [r7, #20]
 800a4b0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a4b4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a4b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	3740      	adds	r7, #64	@ 0x40
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	bd80      	pop	{r7, pc}

0800a4c0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b08e      	sub	sp, #56	@ 0x38
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
 800a4c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a4ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d10b      	bne.n	800a4ec <xQueueGiveFromISR+0x2c>
	__asm volatile
 800a4d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4d8:	f383 8811 	msr	BASEPRI, r3
 800a4dc:	f3bf 8f6f 	isb	sy
 800a4e0:	f3bf 8f4f 	dsb	sy
 800a4e4:	623b      	str	r3, [r7, #32]
}
 800a4e6:	bf00      	nop
 800a4e8:	bf00      	nop
 800a4ea:	e7fd      	b.n	800a4e8 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a4ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d00b      	beq.n	800a50c <xQueueGiveFromISR+0x4c>
	__asm volatile
 800a4f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4f8:	f383 8811 	msr	BASEPRI, r3
 800a4fc:	f3bf 8f6f 	isb	sy
 800a500:	f3bf 8f4f 	dsb	sy
 800a504:	61fb      	str	r3, [r7, #28]
}
 800a506:	bf00      	nop
 800a508:	bf00      	nop
 800a50a:	e7fd      	b.n	800a508 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a50c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d103      	bne.n	800a51c <xQueueGiveFromISR+0x5c>
 800a514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a516:	689b      	ldr	r3, [r3, #8]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d101      	bne.n	800a520 <xQueueGiveFromISR+0x60>
 800a51c:	2301      	movs	r3, #1
 800a51e:	e000      	b.n	800a522 <xQueueGiveFromISR+0x62>
 800a520:	2300      	movs	r3, #0
 800a522:	2b00      	cmp	r3, #0
 800a524:	d10b      	bne.n	800a53e <xQueueGiveFromISR+0x7e>
	__asm volatile
 800a526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a52a:	f383 8811 	msr	BASEPRI, r3
 800a52e:	f3bf 8f6f 	isb	sy
 800a532:	f3bf 8f4f 	dsb	sy
 800a536:	61bb      	str	r3, [r7, #24]
}
 800a538:	bf00      	nop
 800a53a:	bf00      	nop
 800a53c:	e7fd      	b.n	800a53a <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a53e:	f001 fe4b 	bl	800c1d8 <vPortValidateInterruptPriority>
	__asm volatile
 800a542:	f3ef 8211 	mrs	r2, BASEPRI
 800a546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a54a:	f383 8811 	msr	BASEPRI, r3
 800a54e:	f3bf 8f6f 	isb	sy
 800a552:	f3bf 8f4f 	dsb	sy
 800a556:	617a      	str	r2, [r7, #20]
 800a558:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a55a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a55c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a55e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a560:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a562:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a566:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a568:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a56a:	429a      	cmp	r2, r3
 800a56c:	d22b      	bcs.n	800a5c6 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a56e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a570:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a574:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a57a:	1c5a      	adds	r2, r3, #1
 800a57c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a57e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a580:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a584:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a588:	d112      	bne.n	800a5b0 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a58a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a58c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d016      	beq.n	800a5c0 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a594:	3324      	adds	r3, #36	@ 0x24
 800a596:	4618      	mov	r0, r3
 800a598:	f001 f820 	bl	800b5dc <xTaskRemoveFromEventList>
 800a59c:	4603      	mov	r3, r0
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d00e      	beq.n	800a5c0 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d00b      	beq.n	800a5c0 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	2201      	movs	r2, #1
 800a5ac:	601a      	str	r2, [r3, #0]
 800a5ae:	e007      	b.n	800a5c0 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a5b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a5b4:	3301      	adds	r3, #1
 800a5b6:	b2db      	uxtb	r3, r3
 800a5b8:	b25a      	sxtb	r2, r3
 800a5ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a5c0:	2301      	movs	r3, #1
 800a5c2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a5c4:	e001      	b.n	800a5ca <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a5ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5cc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	f383 8811 	msr	BASEPRI, r3
}
 800a5d4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a5d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a5d8:	4618      	mov	r0, r3
 800a5da:	3738      	adds	r7, #56	@ 0x38
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	bd80      	pop	{r7, pc}

0800a5e0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b08c      	sub	sp, #48	@ 0x30
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	60f8      	str	r0, [r7, #12]
 800a5e8:	60b9      	str	r1, [r7, #8]
 800a5ea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a5f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d10b      	bne.n	800a612 <xQueueReceive+0x32>
	__asm volatile
 800a5fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5fe:	f383 8811 	msr	BASEPRI, r3
 800a602:	f3bf 8f6f 	isb	sy
 800a606:	f3bf 8f4f 	dsb	sy
 800a60a:	623b      	str	r3, [r7, #32]
}
 800a60c:	bf00      	nop
 800a60e:	bf00      	nop
 800a610:	e7fd      	b.n	800a60e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a612:	68bb      	ldr	r3, [r7, #8]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d103      	bne.n	800a620 <xQueueReceive+0x40>
 800a618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a61a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d101      	bne.n	800a624 <xQueueReceive+0x44>
 800a620:	2301      	movs	r3, #1
 800a622:	e000      	b.n	800a626 <xQueueReceive+0x46>
 800a624:	2300      	movs	r3, #0
 800a626:	2b00      	cmp	r3, #0
 800a628:	d10b      	bne.n	800a642 <xQueueReceive+0x62>
	__asm volatile
 800a62a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a62e:	f383 8811 	msr	BASEPRI, r3
 800a632:	f3bf 8f6f 	isb	sy
 800a636:	f3bf 8f4f 	dsb	sy
 800a63a:	61fb      	str	r3, [r7, #28]
}
 800a63c:	bf00      	nop
 800a63e:	bf00      	nop
 800a640:	e7fd      	b.n	800a63e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a642:	f001 f991 	bl	800b968 <xTaskGetSchedulerState>
 800a646:	4603      	mov	r3, r0
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d102      	bne.n	800a652 <xQueueReceive+0x72>
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d101      	bne.n	800a656 <xQueueReceive+0x76>
 800a652:	2301      	movs	r3, #1
 800a654:	e000      	b.n	800a658 <xQueueReceive+0x78>
 800a656:	2300      	movs	r3, #0
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d10b      	bne.n	800a674 <xQueueReceive+0x94>
	__asm volatile
 800a65c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a660:	f383 8811 	msr	BASEPRI, r3
 800a664:	f3bf 8f6f 	isb	sy
 800a668:	f3bf 8f4f 	dsb	sy
 800a66c:	61bb      	str	r3, [r7, #24]
}
 800a66e:	bf00      	nop
 800a670:	bf00      	nop
 800a672:	e7fd      	b.n	800a670 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a674:	f001 fcd0 	bl	800c018 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a67a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a67c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a67e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a680:	2b00      	cmp	r3, #0
 800a682:	d01f      	beq.n	800a6c4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a684:	68b9      	ldr	r1, [r7, #8]
 800a686:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a688:	f000 faa0 	bl	800abcc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a68c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a68e:	1e5a      	subs	r2, r3, #1
 800a690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a692:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a696:	691b      	ldr	r3, [r3, #16]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d00f      	beq.n	800a6bc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a69c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a69e:	3310      	adds	r3, #16
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	f000 ff9b 	bl	800b5dc <xTaskRemoveFromEventList>
 800a6a6:	4603      	mov	r3, r0
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d007      	beq.n	800a6bc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a6ac:	4b3c      	ldr	r3, [pc, #240]	@ (800a7a0 <xQueueReceive+0x1c0>)
 800a6ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a6b2:	601a      	str	r2, [r3, #0]
 800a6b4:	f3bf 8f4f 	dsb	sy
 800a6b8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a6bc:	f001 fcde 	bl	800c07c <vPortExitCritical>
				return pdPASS;
 800a6c0:	2301      	movs	r3, #1
 800a6c2:	e069      	b.n	800a798 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d103      	bne.n	800a6d2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a6ca:	f001 fcd7 	bl	800c07c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	e062      	b.n	800a798 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a6d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d106      	bne.n	800a6e6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a6d8:	f107 0310 	add.w	r3, r7, #16
 800a6dc:	4618      	mov	r0, r3
 800a6de:	f000 ffe1 	bl	800b6a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a6e2:	2301      	movs	r3, #1
 800a6e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a6e6:	f001 fcc9 	bl	800c07c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a6ea:	f000 fd65 	bl	800b1b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a6ee:	f001 fc93 	bl	800c018 <vPortEnterCritical>
 800a6f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a6f8:	b25b      	sxtb	r3, r3
 800a6fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6fe:	d103      	bne.n	800a708 <xQueueReceive+0x128>
 800a700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a702:	2200      	movs	r2, #0
 800a704:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a70a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a70e:	b25b      	sxtb	r3, r3
 800a710:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a714:	d103      	bne.n	800a71e <xQueueReceive+0x13e>
 800a716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a718:	2200      	movs	r2, #0
 800a71a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a71e:	f001 fcad 	bl	800c07c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a722:	1d3a      	adds	r2, r7, #4
 800a724:	f107 0310 	add.w	r3, r7, #16
 800a728:	4611      	mov	r1, r2
 800a72a:	4618      	mov	r0, r3
 800a72c:	f000 ffd0 	bl	800b6d0 <xTaskCheckForTimeOut>
 800a730:	4603      	mov	r3, r0
 800a732:	2b00      	cmp	r3, #0
 800a734:	d123      	bne.n	800a77e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a736:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a738:	f000 fac0 	bl	800acbc <prvIsQueueEmpty>
 800a73c:	4603      	mov	r3, r0
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d017      	beq.n	800a772 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a744:	3324      	adds	r3, #36	@ 0x24
 800a746:	687a      	ldr	r2, [r7, #4]
 800a748:	4611      	mov	r1, r2
 800a74a:	4618      	mov	r0, r3
 800a74c:	f000 ff20 	bl	800b590 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a750:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a752:	f000 fa61 	bl	800ac18 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a756:	f000 fd3d 	bl	800b1d4 <xTaskResumeAll>
 800a75a:	4603      	mov	r3, r0
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d189      	bne.n	800a674 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a760:	4b0f      	ldr	r3, [pc, #60]	@ (800a7a0 <xQueueReceive+0x1c0>)
 800a762:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a766:	601a      	str	r2, [r3, #0]
 800a768:	f3bf 8f4f 	dsb	sy
 800a76c:	f3bf 8f6f 	isb	sy
 800a770:	e780      	b.n	800a674 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a772:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a774:	f000 fa50 	bl	800ac18 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a778:	f000 fd2c 	bl	800b1d4 <xTaskResumeAll>
 800a77c:	e77a      	b.n	800a674 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a77e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a780:	f000 fa4a 	bl	800ac18 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a784:	f000 fd26 	bl	800b1d4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a788:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a78a:	f000 fa97 	bl	800acbc <prvIsQueueEmpty>
 800a78e:	4603      	mov	r3, r0
 800a790:	2b00      	cmp	r3, #0
 800a792:	f43f af6f 	beq.w	800a674 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a796:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a798:	4618      	mov	r0, r3
 800a79a:	3730      	adds	r7, #48	@ 0x30
 800a79c:	46bd      	mov	sp, r7
 800a79e:	bd80      	pop	{r7, pc}
 800a7a0:	e000ed04 	.word	0xe000ed04

0800a7a4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b08e      	sub	sp, #56	@ 0x38
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
 800a7ac:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a7ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d10b      	bne.n	800a7d8 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800a7c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7c4:	f383 8811 	msr	BASEPRI, r3
 800a7c8:	f3bf 8f6f 	isb	sy
 800a7cc:	f3bf 8f4f 	dsb	sy
 800a7d0:	623b      	str	r3, [r7, #32]
}
 800a7d2:	bf00      	nop
 800a7d4:	bf00      	nop
 800a7d6:	e7fd      	b.n	800a7d4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a7d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d00b      	beq.n	800a7f8 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800a7e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7e4:	f383 8811 	msr	BASEPRI, r3
 800a7e8:	f3bf 8f6f 	isb	sy
 800a7ec:	f3bf 8f4f 	dsb	sy
 800a7f0:	61fb      	str	r3, [r7, #28]
}
 800a7f2:	bf00      	nop
 800a7f4:	bf00      	nop
 800a7f6:	e7fd      	b.n	800a7f4 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a7f8:	f001 f8b6 	bl	800b968 <xTaskGetSchedulerState>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d102      	bne.n	800a808 <xQueueSemaphoreTake+0x64>
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d101      	bne.n	800a80c <xQueueSemaphoreTake+0x68>
 800a808:	2301      	movs	r3, #1
 800a80a:	e000      	b.n	800a80e <xQueueSemaphoreTake+0x6a>
 800a80c:	2300      	movs	r3, #0
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d10b      	bne.n	800a82a <xQueueSemaphoreTake+0x86>
	__asm volatile
 800a812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a816:	f383 8811 	msr	BASEPRI, r3
 800a81a:	f3bf 8f6f 	isb	sy
 800a81e:	f3bf 8f4f 	dsb	sy
 800a822:	61bb      	str	r3, [r7, #24]
}
 800a824:	bf00      	nop
 800a826:	bf00      	nop
 800a828:	e7fd      	b.n	800a826 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a82a:	f001 fbf5 	bl	800c018 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a82e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a830:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a832:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a836:	2b00      	cmp	r3, #0
 800a838:	d024      	beq.n	800a884 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a83a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a83c:	1e5a      	subs	r2, r3, #1
 800a83e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a840:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a842:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d104      	bne.n	800a854 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a84a:	f001 fa39 	bl	800bcc0 <pvTaskIncrementMutexHeldCount>
 800a84e:	4602      	mov	r2, r0
 800a850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a852:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a856:	691b      	ldr	r3, [r3, #16]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d00f      	beq.n	800a87c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a85c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a85e:	3310      	adds	r3, #16
 800a860:	4618      	mov	r0, r3
 800a862:	f000 febb 	bl	800b5dc <xTaskRemoveFromEventList>
 800a866:	4603      	mov	r3, r0
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d007      	beq.n	800a87c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a86c:	4b54      	ldr	r3, [pc, #336]	@ (800a9c0 <xQueueSemaphoreTake+0x21c>)
 800a86e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a872:	601a      	str	r2, [r3, #0]
 800a874:	f3bf 8f4f 	dsb	sy
 800a878:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a87c:	f001 fbfe 	bl	800c07c <vPortExitCritical>
				return pdPASS;
 800a880:	2301      	movs	r3, #1
 800a882:	e098      	b.n	800a9b6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d112      	bne.n	800a8b0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a88a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d00b      	beq.n	800a8a8 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800a890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a894:	f383 8811 	msr	BASEPRI, r3
 800a898:	f3bf 8f6f 	isb	sy
 800a89c:	f3bf 8f4f 	dsb	sy
 800a8a0:	617b      	str	r3, [r7, #20]
}
 800a8a2:	bf00      	nop
 800a8a4:	bf00      	nop
 800a8a6:	e7fd      	b.n	800a8a4 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a8a8:	f001 fbe8 	bl	800c07c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	e082      	b.n	800a9b6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a8b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d106      	bne.n	800a8c4 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a8b6:	f107 030c 	add.w	r3, r7, #12
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	f000 fef2 	bl	800b6a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a8c4:	f001 fbda 	bl	800c07c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a8c8:	f000 fc76 	bl	800b1b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a8cc:	f001 fba4 	bl	800c018 <vPortEnterCritical>
 800a8d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8d2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a8d6:	b25b      	sxtb	r3, r3
 800a8d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8dc:	d103      	bne.n	800a8e6 <xQueueSemaphoreTake+0x142>
 800a8de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a8e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8e8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a8ec:	b25b      	sxtb	r3, r3
 800a8ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8f2:	d103      	bne.n	800a8fc <xQueueSemaphoreTake+0x158>
 800a8f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a8fc:	f001 fbbe 	bl	800c07c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a900:	463a      	mov	r2, r7
 800a902:	f107 030c 	add.w	r3, r7, #12
 800a906:	4611      	mov	r1, r2
 800a908:	4618      	mov	r0, r3
 800a90a:	f000 fee1 	bl	800b6d0 <xTaskCheckForTimeOut>
 800a90e:	4603      	mov	r3, r0
 800a910:	2b00      	cmp	r3, #0
 800a912:	d132      	bne.n	800a97a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a914:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a916:	f000 f9d1 	bl	800acbc <prvIsQueueEmpty>
 800a91a:	4603      	mov	r3, r0
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d026      	beq.n	800a96e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d109      	bne.n	800a93c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800a928:	f001 fb76 	bl	800c018 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a92c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a92e:	689b      	ldr	r3, [r3, #8]
 800a930:	4618      	mov	r0, r3
 800a932:	f001 f837 	bl	800b9a4 <xTaskPriorityInherit>
 800a936:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800a938:	f001 fba0 	bl	800c07c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a93c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a93e:	3324      	adds	r3, #36	@ 0x24
 800a940:	683a      	ldr	r2, [r7, #0]
 800a942:	4611      	mov	r1, r2
 800a944:	4618      	mov	r0, r3
 800a946:	f000 fe23 	bl	800b590 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a94a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a94c:	f000 f964 	bl	800ac18 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a950:	f000 fc40 	bl	800b1d4 <xTaskResumeAll>
 800a954:	4603      	mov	r3, r0
 800a956:	2b00      	cmp	r3, #0
 800a958:	f47f af67 	bne.w	800a82a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800a95c:	4b18      	ldr	r3, [pc, #96]	@ (800a9c0 <xQueueSemaphoreTake+0x21c>)
 800a95e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a962:	601a      	str	r2, [r3, #0]
 800a964:	f3bf 8f4f 	dsb	sy
 800a968:	f3bf 8f6f 	isb	sy
 800a96c:	e75d      	b.n	800a82a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a96e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a970:	f000 f952 	bl	800ac18 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a974:	f000 fc2e 	bl	800b1d4 <xTaskResumeAll>
 800a978:	e757      	b.n	800a82a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a97a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a97c:	f000 f94c 	bl	800ac18 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a980:	f000 fc28 	bl	800b1d4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a984:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a986:	f000 f999 	bl	800acbc <prvIsQueueEmpty>
 800a98a:	4603      	mov	r3, r0
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	f43f af4c 	beq.w	800a82a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a994:	2b00      	cmp	r3, #0
 800a996:	d00d      	beq.n	800a9b4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800a998:	f001 fb3e 	bl	800c018 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a99c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a99e:	f000 f893 	bl	800aac8 <prvGetDisinheritPriorityAfterTimeout>
 800a9a2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a9a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9a6:	689b      	ldr	r3, [r3, #8]
 800a9a8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	f001 f8f8 	bl	800bba0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a9b0:	f001 fb64 	bl	800c07c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a9b4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	3738      	adds	r7, #56	@ 0x38
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}
 800a9be:	bf00      	nop
 800a9c0:	e000ed04 	.word	0xe000ed04

0800a9c4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b08e      	sub	sp, #56	@ 0x38
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	60f8      	str	r0, [r7, #12]
 800a9cc:	60b9      	str	r1, [r7, #8]
 800a9ce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a9d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d10b      	bne.n	800a9f2 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800a9da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9de:	f383 8811 	msr	BASEPRI, r3
 800a9e2:	f3bf 8f6f 	isb	sy
 800a9e6:	f3bf 8f4f 	dsb	sy
 800a9ea:	623b      	str	r3, [r7, #32]
}
 800a9ec:	bf00      	nop
 800a9ee:	bf00      	nop
 800a9f0:	e7fd      	b.n	800a9ee <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a9f2:	68bb      	ldr	r3, [r7, #8]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d103      	bne.n	800aa00 <xQueueReceiveFromISR+0x3c>
 800a9f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d101      	bne.n	800aa04 <xQueueReceiveFromISR+0x40>
 800aa00:	2301      	movs	r3, #1
 800aa02:	e000      	b.n	800aa06 <xQueueReceiveFromISR+0x42>
 800aa04:	2300      	movs	r3, #0
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d10b      	bne.n	800aa22 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800aa0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa0e:	f383 8811 	msr	BASEPRI, r3
 800aa12:	f3bf 8f6f 	isb	sy
 800aa16:	f3bf 8f4f 	dsb	sy
 800aa1a:	61fb      	str	r3, [r7, #28]
}
 800aa1c:	bf00      	nop
 800aa1e:	bf00      	nop
 800aa20:	e7fd      	b.n	800aa1e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aa22:	f001 fbd9 	bl	800c1d8 <vPortValidateInterruptPriority>
	__asm volatile
 800aa26:	f3ef 8211 	mrs	r2, BASEPRI
 800aa2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa2e:	f383 8811 	msr	BASEPRI, r3
 800aa32:	f3bf 8f6f 	isb	sy
 800aa36:	f3bf 8f4f 	dsb	sy
 800aa3a:	61ba      	str	r2, [r7, #24]
 800aa3c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800aa3e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aa40:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aa42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa46:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aa48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d02f      	beq.n	800aaae <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800aa4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa50:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800aa54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800aa58:	68b9      	ldr	r1, [r7, #8]
 800aa5a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800aa5c:	f000 f8b6 	bl	800abcc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800aa60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa62:	1e5a      	subs	r2, r3, #1
 800aa64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa66:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800aa68:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800aa6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa70:	d112      	bne.n	800aa98 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aa72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa74:	691b      	ldr	r3, [r3, #16]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d016      	beq.n	800aaa8 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aa7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa7c:	3310      	adds	r3, #16
 800aa7e:	4618      	mov	r0, r3
 800aa80:	f000 fdac 	bl	800b5dc <xTaskRemoveFromEventList>
 800aa84:	4603      	mov	r3, r0
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d00e      	beq.n	800aaa8 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d00b      	beq.n	800aaa8 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2201      	movs	r2, #1
 800aa94:	601a      	str	r2, [r3, #0]
 800aa96:	e007      	b.n	800aaa8 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800aa98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aa9c:	3301      	adds	r3, #1
 800aa9e:	b2db      	uxtb	r3, r3
 800aaa0:	b25a      	sxtb	r2, r3
 800aaa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaa4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800aaa8:	2301      	movs	r3, #1
 800aaaa:	637b      	str	r3, [r7, #52]	@ 0x34
 800aaac:	e001      	b.n	800aab2 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800aaae:	2300      	movs	r3, #0
 800aab0:	637b      	str	r3, [r7, #52]	@ 0x34
 800aab2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aab4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800aab6:	693b      	ldr	r3, [r7, #16]
 800aab8:	f383 8811 	msr	BASEPRI, r3
}
 800aabc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800aabe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800aac0:	4618      	mov	r0, r3
 800aac2:	3738      	adds	r7, #56	@ 0x38
 800aac4:	46bd      	mov	sp, r7
 800aac6:	bd80      	pop	{r7, pc}

0800aac8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800aac8:	b480      	push	{r7}
 800aaca:	b085      	sub	sp, #20
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d006      	beq.n	800aae6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	f1c3 0307 	rsb	r3, r3, #7
 800aae2:	60fb      	str	r3, [r7, #12]
 800aae4:	e001      	b.n	800aaea <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800aae6:	2300      	movs	r3, #0
 800aae8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800aaea:	68fb      	ldr	r3, [r7, #12]
	}
 800aaec:	4618      	mov	r0, r3
 800aaee:	3714      	adds	r7, #20
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf6:	4770      	bx	lr

0800aaf8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b086      	sub	sp, #24
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	60f8      	str	r0, [r7, #12]
 800ab00:	60b9      	str	r1, [r7, #8]
 800ab02:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ab04:	2300      	movs	r3, #0
 800ab06:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab0c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d10d      	bne.n	800ab32 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d14d      	bne.n	800abba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	689b      	ldr	r3, [r3, #8]
 800ab22:	4618      	mov	r0, r3
 800ab24:	f000 ffb4 	bl	800ba90 <xTaskPriorityDisinherit>
 800ab28:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	609a      	str	r2, [r3, #8]
 800ab30:	e043      	b.n	800abba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d119      	bne.n	800ab6c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	6858      	ldr	r0, [r3, #4]
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab40:	461a      	mov	r2, r3
 800ab42:	68b9      	ldr	r1, [r7, #8]
 800ab44:	f00c fd4f 	bl	80175e6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	685a      	ldr	r2, [r3, #4]
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab50:	441a      	add	r2, r3
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	685a      	ldr	r2, [r3, #4]
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	689b      	ldr	r3, [r3, #8]
 800ab5e:	429a      	cmp	r2, r3
 800ab60:	d32b      	bcc.n	800abba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	681a      	ldr	r2, [r3, #0]
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	605a      	str	r2, [r3, #4]
 800ab6a:	e026      	b.n	800abba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	68d8      	ldr	r0, [r3, #12]
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab74:	461a      	mov	r2, r3
 800ab76:	68b9      	ldr	r1, [r7, #8]
 800ab78:	f00c fd35 	bl	80175e6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	68da      	ldr	r2, [r3, #12]
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab84:	425b      	negs	r3, r3
 800ab86:	441a      	add	r2, r3
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	68da      	ldr	r2, [r3, #12]
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	429a      	cmp	r2, r3
 800ab96:	d207      	bcs.n	800aba8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	689a      	ldr	r2, [r3, #8]
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aba0:	425b      	negs	r3, r3
 800aba2:	441a      	add	r2, r3
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2b02      	cmp	r3, #2
 800abac:	d105      	bne.n	800abba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800abae:	693b      	ldr	r3, [r7, #16]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d002      	beq.n	800abba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800abb4:	693b      	ldr	r3, [r7, #16]
 800abb6:	3b01      	subs	r3, #1
 800abb8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800abba:	693b      	ldr	r3, [r7, #16]
 800abbc:	1c5a      	adds	r2, r3, #1
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800abc2:	697b      	ldr	r3, [r7, #20]
}
 800abc4:	4618      	mov	r0, r3
 800abc6:	3718      	adds	r7, #24
 800abc8:	46bd      	mov	sp, r7
 800abca:	bd80      	pop	{r7, pc}

0800abcc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b082      	sub	sp, #8
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
 800abd4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d018      	beq.n	800ac10 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	68da      	ldr	r2, [r3, #12]
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abe6:	441a      	add	r2, r3
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	68da      	ldr	r2, [r3, #12]
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	689b      	ldr	r3, [r3, #8]
 800abf4:	429a      	cmp	r2, r3
 800abf6:	d303      	bcc.n	800ac00 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681a      	ldr	r2, [r3, #0]
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	68d9      	ldr	r1, [r3, #12]
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac08:	461a      	mov	r2, r3
 800ac0a:	6838      	ldr	r0, [r7, #0]
 800ac0c:	f00c fceb 	bl	80175e6 <memcpy>
	}
}
 800ac10:	bf00      	nop
 800ac12:	3708      	adds	r7, #8
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bd80      	pop	{r7, pc}

0800ac18 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b084      	sub	sp, #16
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ac20:	f001 f9fa 	bl	800c018 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ac2a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ac2c:	e011      	b.n	800ac52 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d012      	beq.n	800ac5c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	3324      	adds	r3, #36	@ 0x24
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f000 fcce 	bl	800b5dc <xTaskRemoveFromEventList>
 800ac40:	4603      	mov	r3, r0
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d001      	beq.n	800ac4a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ac46:	f000 fda7 	bl	800b798 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ac4a:	7bfb      	ldrb	r3, [r7, #15]
 800ac4c:	3b01      	subs	r3, #1
 800ac4e:	b2db      	uxtb	r3, r3
 800ac50:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ac52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	dce9      	bgt.n	800ac2e <prvUnlockQueue+0x16>
 800ac5a:	e000      	b.n	800ac5e <prvUnlockQueue+0x46>
					break;
 800ac5c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	22ff      	movs	r2, #255	@ 0xff
 800ac62:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800ac66:	f001 fa09 	bl	800c07c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ac6a:	f001 f9d5 	bl	800c018 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ac74:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ac76:	e011      	b.n	800ac9c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	691b      	ldr	r3, [r3, #16]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d012      	beq.n	800aca6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	3310      	adds	r3, #16
 800ac84:	4618      	mov	r0, r3
 800ac86:	f000 fca9 	bl	800b5dc <xTaskRemoveFromEventList>
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d001      	beq.n	800ac94 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ac90:	f000 fd82 	bl	800b798 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ac94:	7bbb      	ldrb	r3, [r7, #14]
 800ac96:	3b01      	subs	r3, #1
 800ac98:	b2db      	uxtb	r3, r3
 800ac9a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ac9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	dce9      	bgt.n	800ac78 <prvUnlockQueue+0x60>
 800aca4:	e000      	b.n	800aca8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800aca6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	22ff      	movs	r2, #255	@ 0xff
 800acac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800acb0:	f001 f9e4 	bl	800c07c <vPortExitCritical>
}
 800acb4:	bf00      	nop
 800acb6:	3710      	adds	r7, #16
 800acb8:	46bd      	mov	sp, r7
 800acba:	bd80      	pop	{r7, pc}

0800acbc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b084      	sub	sp, #16
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800acc4:	f001 f9a8 	bl	800c018 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800accc:	2b00      	cmp	r3, #0
 800acce:	d102      	bne.n	800acd6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800acd0:	2301      	movs	r3, #1
 800acd2:	60fb      	str	r3, [r7, #12]
 800acd4:	e001      	b.n	800acda <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800acd6:	2300      	movs	r3, #0
 800acd8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800acda:	f001 f9cf 	bl	800c07c <vPortExitCritical>

	return xReturn;
 800acde:	68fb      	ldr	r3, [r7, #12]
}
 800ace0:	4618      	mov	r0, r3
 800ace2:	3710      	adds	r7, #16
 800ace4:	46bd      	mov	sp, r7
 800ace6:	bd80      	pop	{r7, pc}

0800ace8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b084      	sub	sp, #16
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800acf0:	f001 f992 	bl	800c018 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800acfc:	429a      	cmp	r2, r3
 800acfe:	d102      	bne.n	800ad06 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ad00:	2301      	movs	r3, #1
 800ad02:	60fb      	str	r3, [r7, #12]
 800ad04:	e001      	b.n	800ad0a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ad06:	2300      	movs	r3, #0
 800ad08:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ad0a:	f001 f9b7 	bl	800c07c <vPortExitCritical>

	return xReturn;
 800ad0e:	68fb      	ldr	r3, [r7, #12]
}
 800ad10:	4618      	mov	r0, r3
 800ad12:	3710      	adds	r7, #16
 800ad14:	46bd      	mov	sp, r7
 800ad16:	bd80      	pop	{r7, pc}

0800ad18 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b08e      	sub	sp, #56	@ 0x38
 800ad1c:	af04      	add	r7, sp, #16
 800ad1e:	60f8      	str	r0, [r7, #12]
 800ad20:	60b9      	str	r1, [r7, #8]
 800ad22:	607a      	str	r2, [r7, #4]
 800ad24:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ad26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d10b      	bne.n	800ad44 <xTaskCreateStatic+0x2c>
	__asm volatile
 800ad2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad30:	f383 8811 	msr	BASEPRI, r3
 800ad34:	f3bf 8f6f 	isb	sy
 800ad38:	f3bf 8f4f 	dsb	sy
 800ad3c:	623b      	str	r3, [r7, #32]
}
 800ad3e:	bf00      	nop
 800ad40:	bf00      	nop
 800ad42:	e7fd      	b.n	800ad40 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ad44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d10b      	bne.n	800ad62 <xTaskCreateStatic+0x4a>
	__asm volatile
 800ad4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad4e:	f383 8811 	msr	BASEPRI, r3
 800ad52:	f3bf 8f6f 	isb	sy
 800ad56:	f3bf 8f4f 	dsb	sy
 800ad5a:	61fb      	str	r3, [r7, #28]
}
 800ad5c:	bf00      	nop
 800ad5e:	bf00      	nop
 800ad60:	e7fd      	b.n	800ad5e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ad62:	23a0      	movs	r3, #160	@ 0xa0
 800ad64:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ad66:	693b      	ldr	r3, [r7, #16]
 800ad68:	2ba0      	cmp	r3, #160	@ 0xa0
 800ad6a:	d00b      	beq.n	800ad84 <xTaskCreateStatic+0x6c>
	__asm volatile
 800ad6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad70:	f383 8811 	msr	BASEPRI, r3
 800ad74:	f3bf 8f6f 	isb	sy
 800ad78:	f3bf 8f4f 	dsb	sy
 800ad7c:	61bb      	str	r3, [r7, #24]
}
 800ad7e:	bf00      	nop
 800ad80:	bf00      	nop
 800ad82:	e7fd      	b.n	800ad80 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ad84:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ad86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d01e      	beq.n	800adca <xTaskCreateStatic+0xb2>
 800ad8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d01b      	beq.n	800adca <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ad92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad94:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ad96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad98:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ad9a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ad9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad9e:	2202      	movs	r2, #2
 800ada0:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ada4:	2300      	movs	r3, #0
 800ada6:	9303      	str	r3, [sp, #12]
 800ada8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adaa:	9302      	str	r3, [sp, #8]
 800adac:	f107 0314 	add.w	r3, r7, #20
 800adb0:	9301      	str	r3, [sp, #4]
 800adb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adb4:	9300      	str	r3, [sp, #0]
 800adb6:	683b      	ldr	r3, [r7, #0]
 800adb8:	687a      	ldr	r2, [r7, #4]
 800adba:	68b9      	ldr	r1, [r7, #8]
 800adbc:	68f8      	ldr	r0, [r7, #12]
 800adbe:	f000 f851 	bl	800ae64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800adc2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800adc4:	f000 f8ee 	bl	800afa4 <prvAddNewTaskToReadyList>
 800adc8:	e001      	b.n	800adce <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800adca:	2300      	movs	r3, #0
 800adcc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800adce:	697b      	ldr	r3, [r7, #20]
	}
 800add0:	4618      	mov	r0, r3
 800add2:	3728      	adds	r7, #40	@ 0x28
 800add4:	46bd      	mov	sp, r7
 800add6:	bd80      	pop	{r7, pc}

0800add8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800add8:	b580      	push	{r7, lr}
 800adda:	b08c      	sub	sp, #48	@ 0x30
 800addc:	af04      	add	r7, sp, #16
 800adde:	60f8      	str	r0, [r7, #12]
 800ade0:	60b9      	str	r1, [r7, #8]
 800ade2:	603b      	str	r3, [r7, #0]
 800ade4:	4613      	mov	r3, r2
 800ade6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ade8:	88fb      	ldrh	r3, [r7, #6]
 800adea:	009b      	lsls	r3, r3, #2
 800adec:	4618      	mov	r0, r3
 800adee:	f001 fa35 	bl	800c25c <pvPortMalloc>
 800adf2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800adf4:	697b      	ldr	r3, [r7, #20]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d00e      	beq.n	800ae18 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800adfa:	20a0      	movs	r0, #160	@ 0xa0
 800adfc:	f001 fa2e 	bl	800c25c <pvPortMalloc>
 800ae00:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ae02:	69fb      	ldr	r3, [r7, #28]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d003      	beq.n	800ae10 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ae08:	69fb      	ldr	r3, [r7, #28]
 800ae0a:	697a      	ldr	r2, [r7, #20]
 800ae0c:	631a      	str	r2, [r3, #48]	@ 0x30
 800ae0e:	e005      	b.n	800ae1c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ae10:	6978      	ldr	r0, [r7, #20]
 800ae12:	f001 faf1 	bl	800c3f8 <vPortFree>
 800ae16:	e001      	b.n	800ae1c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ae18:	2300      	movs	r3, #0
 800ae1a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ae1c:	69fb      	ldr	r3, [r7, #28]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d017      	beq.n	800ae52 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ae22:	69fb      	ldr	r3, [r7, #28]
 800ae24:	2200      	movs	r2, #0
 800ae26:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ae2a:	88fa      	ldrh	r2, [r7, #6]
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	9303      	str	r3, [sp, #12]
 800ae30:	69fb      	ldr	r3, [r7, #28]
 800ae32:	9302      	str	r3, [sp, #8]
 800ae34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae36:	9301      	str	r3, [sp, #4]
 800ae38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae3a:	9300      	str	r3, [sp, #0]
 800ae3c:	683b      	ldr	r3, [r7, #0]
 800ae3e:	68b9      	ldr	r1, [r7, #8]
 800ae40:	68f8      	ldr	r0, [r7, #12]
 800ae42:	f000 f80f 	bl	800ae64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ae46:	69f8      	ldr	r0, [r7, #28]
 800ae48:	f000 f8ac 	bl	800afa4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ae4c:	2301      	movs	r3, #1
 800ae4e:	61bb      	str	r3, [r7, #24]
 800ae50:	e002      	b.n	800ae58 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ae52:	f04f 33ff 	mov.w	r3, #4294967295
 800ae56:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ae58:	69bb      	ldr	r3, [r7, #24]
	}
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	3720      	adds	r7, #32
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	bd80      	pop	{r7, pc}
	...

0800ae64 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b088      	sub	sp, #32
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	60f8      	str	r0, [r7, #12]
 800ae6c:	60b9      	str	r1, [r7, #8]
 800ae6e:	607a      	str	r2, [r7, #4]
 800ae70:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ae72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae74:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ae7c:	3b01      	subs	r3, #1
 800ae7e:	009b      	lsls	r3, r3, #2
 800ae80:	4413      	add	r3, r2
 800ae82:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ae84:	69bb      	ldr	r3, [r7, #24]
 800ae86:	f023 0307 	bic.w	r3, r3, #7
 800ae8a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ae8c:	69bb      	ldr	r3, [r7, #24]
 800ae8e:	f003 0307 	and.w	r3, r3, #7
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d00b      	beq.n	800aeae <prvInitialiseNewTask+0x4a>
	__asm volatile
 800ae96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae9a:	f383 8811 	msr	BASEPRI, r3
 800ae9e:	f3bf 8f6f 	isb	sy
 800aea2:	f3bf 8f4f 	dsb	sy
 800aea6:	617b      	str	r3, [r7, #20]
}
 800aea8:	bf00      	nop
 800aeaa:	bf00      	nop
 800aeac:	e7fd      	b.n	800aeaa <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800aeae:	68bb      	ldr	r3, [r7, #8]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d01f      	beq.n	800aef4 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	61fb      	str	r3, [r7, #28]
 800aeb8:	e012      	b.n	800aee0 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800aeba:	68ba      	ldr	r2, [r7, #8]
 800aebc:	69fb      	ldr	r3, [r7, #28]
 800aebe:	4413      	add	r3, r2
 800aec0:	7819      	ldrb	r1, [r3, #0]
 800aec2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aec4:	69fb      	ldr	r3, [r7, #28]
 800aec6:	4413      	add	r3, r2
 800aec8:	3334      	adds	r3, #52	@ 0x34
 800aeca:	460a      	mov	r2, r1
 800aecc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800aece:	68ba      	ldr	r2, [r7, #8]
 800aed0:	69fb      	ldr	r3, [r7, #28]
 800aed2:	4413      	add	r3, r2
 800aed4:	781b      	ldrb	r3, [r3, #0]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d006      	beq.n	800aee8 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aeda:	69fb      	ldr	r3, [r7, #28]
 800aedc:	3301      	adds	r3, #1
 800aede:	61fb      	str	r3, [r7, #28]
 800aee0:	69fb      	ldr	r3, [r7, #28]
 800aee2:	2b0f      	cmp	r3, #15
 800aee4:	d9e9      	bls.n	800aeba <prvInitialiseNewTask+0x56>
 800aee6:	e000      	b.n	800aeea <prvInitialiseNewTask+0x86>
			{
				break;
 800aee8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800aeea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aeec:	2200      	movs	r2, #0
 800aeee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800aef2:	e003      	b.n	800aefc <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800aef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aef6:	2200      	movs	r2, #0
 800aef8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800aefc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aefe:	2b06      	cmp	r3, #6
 800af00:	d901      	bls.n	800af06 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800af02:	2306      	movs	r3, #6
 800af04:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800af06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af08:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800af0a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800af0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af0e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800af10:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800af12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af14:	2200      	movs	r2, #0
 800af16:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800af18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af1a:	3304      	adds	r3, #4
 800af1c:	4618      	mov	r0, r3
 800af1e:	f7fe ff0d 	bl	8009d3c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800af22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af24:	3318      	adds	r3, #24
 800af26:	4618      	mov	r0, r3
 800af28:	f7fe ff08 	bl	8009d3c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800af2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af30:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af34:	f1c3 0207 	rsb	r2, r3, #7
 800af38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af3a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800af3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af40:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800af42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af44:	2200      	movs	r2, #0
 800af46:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800af4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af4c:	2200      	movs	r2, #0
 800af4e:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800af52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af54:	334c      	adds	r3, #76	@ 0x4c
 800af56:	224c      	movs	r2, #76	@ 0x4c
 800af58:	2100      	movs	r1, #0
 800af5a:	4618      	mov	r0, r3
 800af5c:	f00c fa6f 	bl	801743e <memset>
 800af60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af62:	4a0d      	ldr	r2, [pc, #52]	@ (800af98 <prvInitialiseNewTask+0x134>)
 800af64:	651a      	str	r2, [r3, #80]	@ 0x50
 800af66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af68:	4a0c      	ldr	r2, [pc, #48]	@ (800af9c <prvInitialiseNewTask+0x138>)
 800af6a:	655a      	str	r2, [r3, #84]	@ 0x54
 800af6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af6e:	4a0c      	ldr	r2, [pc, #48]	@ (800afa0 <prvInitialiseNewTask+0x13c>)
 800af70:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800af72:	683a      	ldr	r2, [r7, #0]
 800af74:	68f9      	ldr	r1, [r7, #12]
 800af76:	69b8      	ldr	r0, [r7, #24]
 800af78:	f000 ff1c 	bl	800bdb4 <pxPortInitialiseStack>
 800af7c:	4602      	mov	r2, r0
 800af7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af80:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800af82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af84:	2b00      	cmp	r3, #0
 800af86:	d002      	beq.n	800af8e <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800af88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af8c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800af8e:	bf00      	nop
 800af90:	3720      	adds	r7, #32
 800af92:	46bd      	mov	sp, r7
 800af94:	bd80      	pop	{r7, pc}
 800af96:	bf00      	nop
 800af98:	2000e3c8 	.word	0x2000e3c8
 800af9c:	2000e430 	.word	0x2000e430
 800afa0:	2000e498 	.word	0x2000e498

0800afa4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b082      	sub	sp, #8
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800afac:	f001 f834 	bl	800c018 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800afb0:	4b2a      	ldr	r3, [pc, #168]	@ (800b05c <prvAddNewTaskToReadyList+0xb8>)
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	3301      	adds	r3, #1
 800afb6:	4a29      	ldr	r2, [pc, #164]	@ (800b05c <prvAddNewTaskToReadyList+0xb8>)
 800afb8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800afba:	4b29      	ldr	r3, [pc, #164]	@ (800b060 <prvAddNewTaskToReadyList+0xbc>)
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d109      	bne.n	800afd6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800afc2:	4a27      	ldr	r2, [pc, #156]	@ (800b060 <prvAddNewTaskToReadyList+0xbc>)
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800afc8:	4b24      	ldr	r3, [pc, #144]	@ (800b05c <prvAddNewTaskToReadyList+0xb8>)
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	2b01      	cmp	r3, #1
 800afce:	d110      	bne.n	800aff2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800afd0:	f000 fc06 	bl	800b7e0 <prvInitialiseTaskLists>
 800afd4:	e00d      	b.n	800aff2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800afd6:	4b23      	ldr	r3, [pc, #140]	@ (800b064 <prvAddNewTaskToReadyList+0xc0>)
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d109      	bne.n	800aff2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800afde:	4b20      	ldr	r3, [pc, #128]	@ (800b060 <prvAddNewTaskToReadyList+0xbc>)
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afe8:	429a      	cmp	r2, r3
 800afea:	d802      	bhi.n	800aff2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800afec:	4a1c      	ldr	r2, [pc, #112]	@ (800b060 <prvAddNewTaskToReadyList+0xbc>)
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800aff2:	4b1d      	ldr	r3, [pc, #116]	@ (800b068 <prvAddNewTaskToReadyList+0xc4>)
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	3301      	adds	r3, #1
 800aff8:	4a1b      	ldr	r2, [pc, #108]	@ (800b068 <prvAddNewTaskToReadyList+0xc4>)
 800affa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b000:	2201      	movs	r2, #1
 800b002:	409a      	lsls	r2, r3
 800b004:	4b19      	ldr	r3, [pc, #100]	@ (800b06c <prvAddNewTaskToReadyList+0xc8>)
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	4313      	orrs	r3, r2
 800b00a:	4a18      	ldr	r2, [pc, #96]	@ (800b06c <prvAddNewTaskToReadyList+0xc8>)
 800b00c:	6013      	str	r3, [r2, #0]
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b012:	4613      	mov	r3, r2
 800b014:	009b      	lsls	r3, r3, #2
 800b016:	4413      	add	r3, r2
 800b018:	009b      	lsls	r3, r3, #2
 800b01a:	4a15      	ldr	r2, [pc, #84]	@ (800b070 <prvAddNewTaskToReadyList+0xcc>)
 800b01c:	441a      	add	r2, r3
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	3304      	adds	r3, #4
 800b022:	4619      	mov	r1, r3
 800b024:	4610      	mov	r0, r2
 800b026:	f7fe fe96 	bl	8009d56 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b02a:	f001 f827 	bl	800c07c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b02e:	4b0d      	ldr	r3, [pc, #52]	@ (800b064 <prvAddNewTaskToReadyList+0xc0>)
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d00e      	beq.n	800b054 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b036:	4b0a      	ldr	r3, [pc, #40]	@ (800b060 <prvAddNewTaskToReadyList+0xbc>)
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b040:	429a      	cmp	r2, r3
 800b042:	d207      	bcs.n	800b054 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b044:	4b0b      	ldr	r3, [pc, #44]	@ (800b074 <prvAddNewTaskToReadyList+0xd0>)
 800b046:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b04a:	601a      	str	r2, [r3, #0]
 800b04c:	f3bf 8f4f 	dsb	sy
 800b050:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b054:	bf00      	nop
 800b056:	3708      	adds	r7, #8
 800b058:	46bd      	mov	sp, r7
 800b05a:	bd80      	pop	{r7, pc}
 800b05c:	200052d0 	.word	0x200052d0
 800b060:	200051d0 	.word	0x200051d0
 800b064:	200052dc 	.word	0x200052dc
 800b068:	200052ec 	.word	0x200052ec
 800b06c:	200052d8 	.word	0x200052d8
 800b070:	200051d4 	.word	0x200051d4
 800b074:	e000ed04 	.word	0xe000ed04

0800b078 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b084      	sub	sp, #16
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b080:	2300      	movs	r3, #0
 800b082:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d018      	beq.n	800b0bc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b08a:	4b14      	ldr	r3, [pc, #80]	@ (800b0dc <vTaskDelay+0x64>)
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d00b      	beq.n	800b0aa <vTaskDelay+0x32>
	__asm volatile
 800b092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b096:	f383 8811 	msr	BASEPRI, r3
 800b09a:	f3bf 8f6f 	isb	sy
 800b09e:	f3bf 8f4f 	dsb	sy
 800b0a2:	60bb      	str	r3, [r7, #8]
}
 800b0a4:	bf00      	nop
 800b0a6:	bf00      	nop
 800b0a8:	e7fd      	b.n	800b0a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b0aa:	f000 f885 	bl	800b1b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b0ae:	2100      	movs	r1, #0
 800b0b0:	6878      	ldr	r0, [r7, #4]
 800b0b2:	f000 fe19 	bl	800bce8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b0b6:	f000 f88d 	bl	800b1d4 <xTaskResumeAll>
 800b0ba:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d107      	bne.n	800b0d2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b0c2:	4b07      	ldr	r3, [pc, #28]	@ (800b0e0 <vTaskDelay+0x68>)
 800b0c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b0c8:	601a      	str	r2, [r3, #0]
 800b0ca:	f3bf 8f4f 	dsb	sy
 800b0ce:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b0d2:	bf00      	nop
 800b0d4:	3710      	adds	r7, #16
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	bd80      	pop	{r7, pc}
 800b0da:	bf00      	nop
 800b0dc:	200052f8 	.word	0x200052f8
 800b0e0:	e000ed04 	.word	0xe000ed04

0800b0e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b08a      	sub	sp, #40	@ 0x28
 800b0e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b0f2:	463a      	mov	r2, r7
 800b0f4:	1d39      	adds	r1, r7, #4
 800b0f6:	f107 0308 	add.w	r3, r7, #8
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	f7f5 fa56 	bl	80005ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b100:	6839      	ldr	r1, [r7, #0]
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	68ba      	ldr	r2, [r7, #8]
 800b106:	9202      	str	r2, [sp, #8]
 800b108:	9301      	str	r3, [sp, #4]
 800b10a:	2300      	movs	r3, #0
 800b10c:	9300      	str	r3, [sp, #0]
 800b10e:	2300      	movs	r3, #0
 800b110:	460a      	mov	r2, r1
 800b112:	4921      	ldr	r1, [pc, #132]	@ (800b198 <vTaskStartScheduler+0xb4>)
 800b114:	4821      	ldr	r0, [pc, #132]	@ (800b19c <vTaskStartScheduler+0xb8>)
 800b116:	f7ff fdff 	bl	800ad18 <xTaskCreateStatic>
 800b11a:	4603      	mov	r3, r0
 800b11c:	4a20      	ldr	r2, [pc, #128]	@ (800b1a0 <vTaskStartScheduler+0xbc>)
 800b11e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b120:	4b1f      	ldr	r3, [pc, #124]	@ (800b1a0 <vTaskStartScheduler+0xbc>)
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d002      	beq.n	800b12e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b128:	2301      	movs	r3, #1
 800b12a:	617b      	str	r3, [r7, #20]
 800b12c:	e001      	b.n	800b132 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b12e:	2300      	movs	r3, #0
 800b130:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b132:	697b      	ldr	r3, [r7, #20]
 800b134:	2b01      	cmp	r3, #1
 800b136:	d11b      	bne.n	800b170 <vTaskStartScheduler+0x8c>
	__asm volatile
 800b138:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b13c:	f383 8811 	msr	BASEPRI, r3
 800b140:	f3bf 8f6f 	isb	sy
 800b144:	f3bf 8f4f 	dsb	sy
 800b148:	613b      	str	r3, [r7, #16]
}
 800b14a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b14c:	4b15      	ldr	r3, [pc, #84]	@ (800b1a4 <vTaskStartScheduler+0xc0>)
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	334c      	adds	r3, #76	@ 0x4c
 800b152:	4a15      	ldr	r2, [pc, #84]	@ (800b1a8 <vTaskStartScheduler+0xc4>)
 800b154:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b156:	4b15      	ldr	r3, [pc, #84]	@ (800b1ac <vTaskStartScheduler+0xc8>)
 800b158:	f04f 32ff 	mov.w	r2, #4294967295
 800b15c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b15e:	4b14      	ldr	r3, [pc, #80]	@ (800b1b0 <vTaskStartScheduler+0xcc>)
 800b160:	2201      	movs	r2, #1
 800b162:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b164:	4b13      	ldr	r3, [pc, #76]	@ (800b1b4 <vTaskStartScheduler+0xd0>)
 800b166:	2200      	movs	r2, #0
 800b168:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b16a:	f000 feb1 	bl	800bed0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b16e:	e00f      	b.n	800b190 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b170:	697b      	ldr	r3, [r7, #20]
 800b172:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b176:	d10b      	bne.n	800b190 <vTaskStartScheduler+0xac>
	__asm volatile
 800b178:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b17c:	f383 8811 	msr	BASEPRI, r3
 800b180:	f3bf 8f6f 	isb	sy
 800b184:	f3bf 8f4f 	dsb	sy
 800b188:	60fb      	str	r3, [r7, #12]
}
 800b18a:	bf00      	nop
 800b18c:	bf00      	nop
 800b18e:	e7fd      	b.n	800b18c <vTaskStartScheduler+0xa8>
}
 800b190:	bf00      	nop
 800b192:	3718      	adds	r7, #24
 800b194:	46bd      	mov	sp, r7
 800b196:	bd80      	pop	{r7, pc}
 800b198:	080187c8 	.word	0x080187c8
 800b19c:	0800b7b1 	.word	0x0800b7b1
 800b1a0:	200052f4 	.word	0x200052f4
 800b1a4:	200051d0 	.word	0x200051d0
 800b1a8:	20000118 	.word	0x20000118
 800b1ac:	200052f0 	.word	0x200052f0
 800b1b0:	200052dc 	.word	0x200052dc
 800b1b4:	200052d4 	.word	0x200052d4

0800b1b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b1b8:	b480      	push	{r7}
 800b1ba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b1bc:	4b04      	ldr	r3, [pc, #16]	@ (800b1d0 <vTaskSuspendAll+0x18>)
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	3301      	adds	r3, #1
 800b1c2:	4a03      	ldr	r2, [pc, #12]	@ (800b1d0 <vTaskSuspendAll+0x18>)
 800b1c4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b1c6:	bf00      	nop
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ce:	4770      	bx	lr
 800b1d0:	200052f8 	.word	0x200052f8

0800b1d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b084      	sub	sp, #16
 800b1d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b1da:	2300      	movs	r3, #0
 800b1dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b1de:	2300      	movs	r3, #0
 800b1e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b1e2:	4b42      	ldr	r3, [pc, #264]	@ (800b2ec <xTaskResumeAll+0x118>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d10b      	bne.n	800b202 <xTaskResumeAll+0x2e>
	__asm volatile
 800b1ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1ee:	f383 8811 	msr	BASEPRI, r3
 800b1f2:	f3bf 8f6f 	isb	sy
 800b1f6:	f3bf 8f4f 	dsb	sy
 800b1fa:	603b      	str	r3, [r7, #0]
}
 800b1fc:	bf00      	nop
 800b1fe:	bf00      	nop
 800b200:	e7fd      	b.n	800b1fe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b202:	f000 ff09 	bl	800c018 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b206:	4b39      	ldr	r3, [pc, #228]	@ (800b2ec <xTaskResumeAll+0x118>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	3b01      	subs	r3, #1
 800b20c:	4a37      	ldr	r2, [pc, #220]	@ (800b2ec <xTaskResumeAll+0x118>)
 800b20e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b210:	4b36      	ldr	r3, [pc, #216]	@ (800b2ec <xTaskResumeAll+0x118>)
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d161      	bne.n	800b2dc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b218:	4b35      	ldr	r3, [pc, #212]	@ (800b2f0 <xTaskResumeAll+0x11c>)
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d05d      	beq.n	800b2dc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b220:	e02e      	b.n	800b280 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b222:	4b34      	ldr	r3, [pc, #208]	@ (800b2f4 <xTaskResumeAll+0x120>)
 800b224:	68db      	ldr	r3, [r3, #12]
 800b226:	68db      	ldr	r3, [r3, #12]
 800b228:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	3318      	adds	r3, #24
 800b22e:	4618      	mov	r0, r3
 800b230:	f7fe fdee 	bl	8009e10 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	3304      	adds	r3, #4
 800b238:	4618      	mov	r0, r3
 800b23a:	f7fe fde9 	bl	8009e10 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b242:	2201      	movs	r2, #1
 800b244:	409a      	lsls	r2, r3
 800b246:	4b2c      	ldr	r3, [pc, #176]	@ (800b2f8 <xTaskResumeAll+0x124>)
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	4313      	orrs	r3, r2
 800b24c:	4a2a      	ldr	r2, [pc, #168]	@ (800b2f8 <xTaskResumeAll+0x124>)
 800b24e:	6013      	str	r3, [r2, #0]
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b254:	4613      	mov	r3, r2
 800b256:	009b      	lsls	r3, r3, #2
 800b258:	4413      	add	r3, r2
 800b25a:	009b      	lsls	r3, r3, #2
 800b25c:	4a27      	ldr	r2, [pc, #156]	@ (800b2fc <xTaskResumeAll+0x128>)
 800b25e:	441a      	add	r2, r3
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	3304      	adds	r3, #4
 800b264:	4619      	mov	r1, r3
 800b266:	4610      	mov	r0, r2
 800b268:	f7fe fd75 	bl	8009d56 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b270:	4b23      	ldr	r3, [pc, #140]	@ (800b300 <xTaskResumeAll+0x12c>)
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b276:	429a      	cmp	r2, r3
 800b278:	d302      	bcc.n	800b280 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b27a:	4b22      	ldr	r3, [pc, #136]	@ (800b304 <xTaskResumeAll+0x130>)
 800b27c:	2201      	movs	r2, #1
 800b27e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b280:	4b1c      	ldr	r3, [pc, #112]	@ (800b2f4 <xTaskResumeAll+0x120>)
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d1cc      	bne.n	800b222 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d001      	beq.n	800b292 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b28e:	f000 fb4b 	bl	800b928 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b292:	4b1d      	ldr	r3, [pc, #116]	@ (800b308 <xTaskResumeAll+0x134>)
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d010      	beq.n	800b2c0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b29e:	f000 f859 	bl	800b354 <xTaskIncrementTick>
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d002      	beq.n	800b2ae <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b2a8:	4b16      	ldr	r3, [pc, #88]	@ (800b304 <xTaskResumeAll+0x130>)
 800b2aa:	2201      	movs	r2, #1
 800b2ac:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	3b01      	subs	r3, #1
 800b2b2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d1f1      	bne.n	800b29e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b2ba:	4b13      	ldr	r3, [pc, #76]	@ (800b308 <xTaskResumeAll+0x134>)
 800b2bc:	2200      	movs	r2, #0
 800b2be:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b2c0:	4b10      	ldr	r3, [pc, #64]	@ (800b304 <xTaskResumeAll+0x130>)
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d009      	beq.n	800b2dc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b2c8:	2301      	movs	r3, #1
 800b2ca:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b2cc:	4b0f      	ldr	r3, [pc, #60]	@ (800b30c <xTaskResumeAll+0x138>)
 800b2ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b2d2:	601a      	str	r2, [r3, #0]
 800b2d4:	f3bf 8f4f 	dsb	sy
 800b2d8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b2dc:	f000 fece 	bl	800c07c <vPortExitCritical>

	return xAlreadyYielded;
 800b2e0:	68bb      	ldr	r3, [r7, #8]
}
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	3710      	adds	r7, #16
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bd80      	pop	{r7, pc}
 800b2ea:	bf00      	nop
 800b2ec:	200052f8 	.word	0x200052f8
 800b2f0:	200052d0 	.word	0x200052d0
 800b2f4:	20005290 	.word	0x20005290
 800b2f8:	200052d8 	.word	0x200052d8
 800b2fc:	200051d4 	.word	0x200051d4
 800b300:	200051d0 	.word	0x200051d0
 800b304:	200052e4 	.word	0x200052e4
 800b308:	200052e0 	.word	0x200052e0
 800b30c:	e000ed04 	.word	0xe000ed04

0800b310 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b310:	b480      	push	{r7}
 800b312:	b083      	sub	sp, #12
 800b314:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b316:	4b05      	ldr	r3, [pc, #20]	@ (800b32c <xTaskGetTickCount+0x1c>)
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b31c:	687b      	ldr	r3, [r7, #4]
}
 800b31e:	4618      	mov	r0, r3
 800b320:	370c      	adds	r7, #12
 800b322:	46bd      	mov	sp, r7
 800b324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b328:	4770      	bx	lr
 800b32a:	bf00      	nop
 800b32c:	200052d4 	.word	0x200052d4

0800b330 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b082      	sub	sp, #8
 800b334:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b336:	f000 ff4f 	bl	800c1d8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b33a:	2300      	movs	r3, #0
 800b33c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b33e:	4b04      	ldr	r3, [pc, #16]	@ (800b350 <xTaskGetTickCountFromISR+0x20>)
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b344:	683b      	ldr	r3, [r7, #0]
}
 800b346:	4618      	mov	r0, r3
 800b348:	3708      	adds	r7, #8
 800b34a:	46bd      	mov	sp, r7
 800b34c:	bd80      	pop	{r7, pc}
 800b34e:	bf00      	nop
 800b350:	200052d4 	.word	0x200052d4

0800b354 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b086      	sub	sp, #24
 800b358:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b35a:	2300      	movs	r3, #0
 800b35c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b35e:	4b4f      	ldr	r3, [pc, #316]	@ (800b49c <xTaskIncrementTick+0x148>)
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	2b00      	cmp	r3, #0
 800b364:	f040 808f 	bne.w	800b486 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b368:	4b4d      	ldr	r3, [pc, #308]	@ (800b4a0 <xTaskIncrementTick+0x14c>)
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	3301      	adds	r3, #1
 800b36e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b370:	4a4b      	ldr	r2, [pc, #300]	@ (800b4a0 <xTaskIncrementTick+0x14c>)
 800b372:	693b      	ldr	r3, [r7, #16]
 800b374:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b376:	693b      	ldr	r3, [r7, #16]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d121      	bne.n	800b3c0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b37c:	4b49      	ldr	r3, [pc, #292]	@ (800b4a4 <xTaskIncrementTick+0x150>)
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d00b      	beq.n	800b39e <xTaskIncrementTick+0x4a>
	__asm volatile
 800b386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b38a:	f383 8811 	msr	BASEPRI, r3
 800b38e:	f3bf 8f6f 	isb	sy
 800b392:	f3bf 8f4f 	dsb	sy
 800b396:	603b      	str	r3, [r7, #0]
}
 800b398:	bf00      	nop
 800b39a:	bf00      	nop
 800b39c:	e7fd      	b.n	800b39a <xTaskIncrementTick+0x46>
 800b39e:	4b41      	ldr	r3, [pc, #260]	@ (800b4a4 <xTaskIncrementTick+0x150>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	60fb      	str	r3, [r7, #12]
 800b3a4:	4b40      	ldr	r3, [pc, #256]	@ (800b4a8 <xTaskIncrementTick+0x154>)
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	4a3e      	ldr	r2, [pc, #248]	@ (800b4a4 <xTaskIncrementTick+0x150>)
 800b3aa:	6013      	str	r3, [r2, #0]
 800b3ac:	4a3e      	ldr	r2, [pc, #248]	@ (800b4a8 <xTaskIncrementTick+0x154>)
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	6013      	str	r3, [r2, #0]
 800b3b2:	4b3e      	ldr	r3, [pc, #248]	@ (800b4ac <xTaskIncrementTick+0x158>)
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	3301      	adds	r3, #1
 800b3b8:	4a3c      	ldr	r2, [pc, #240]	@ (800b4ac <xTaskIncrementTick+0x158>)
 800b3ba:	6013      	str	r3, [r2, #0]
 800b3bc:	f000 fab4 	bl	800b928 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b3c0:	4b3b      	ldr	r3, [pc, #236]	@ (800b4b0 <xTaskIncrementTick+0x15c>)
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	693a      	ldr	r2, [r7, #16]
 800b3c6:	429a      	cmp	r2, r3
 800b3c8:	d348      	bcc.n	800b45c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b3ca:	4b36      	ldr	r3, [pc, #216]	@ (800b4a4 <xTaskIncrementTick+0x150>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d104      	bne.n	800b3de <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b3d4:	4b36      	ldr	r3, [pc, #216]	@ (800b4b0 <xTaskIncrementTick+0x15c>)
 800b3d6:	f04f 32ff 	mov.w	r2, #4294967295
 800b3da:	601a      	str	r2, [r3, #0]
					break;
 800b3dc:	e03e      	b.n	800b45c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3de:	4b31      	ldr	r3, [pc, #196]	@ (800b4a4 <xTaskIncrementTick+0x150>)
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	68db      	ldr	r3, [r3, #12]
 800b3e4:	68db      	ldr	r3, [r3, #12]
 800b3e6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b3e8:	68bb      	ldr	r3, [r7, #8]
 800b3ea:	685b      	ldr	r3, [r3, #4]
 800b3ec:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b3ee:	693a      	ldr	r2, [r7, #16]
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	429a      	cmp	r2, r3
 800b3f4:	d203      	bcs.n	800b3fe <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b3f6:	4a2e      	ldr	r2, [pc, #184]	@ (800b4b0 <xTaskIncrementTick+0x15c>)
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b3fc:	e02e      	b.n	800b45c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b3fe:	68bb      	ldr	r3, [r7, #8]
 800b400:	3304      	adds	r3, #4
 800b402:	4618      	mov	r0, r3
 800b404:	f7fe fd04 	bl	8009e10 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b408:	68bb      	ldr	r3, [r7, #8]
 800b40a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d004      	beq.n	800b41a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b410:	68bb      	ldr	r3, [r7, #8]
 800b412:	3318      	adds	r3, #24
 800b414:	4618      	mov	r0, r3
 800b416:	f7fe fcfb 	bl	8009e10 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b41a:	68bb      	ldr	r3, [r7, #8]
 800b41c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b41e:	2201      	movs	r2, #1
 800b420:	409a      	lsls	r2, r3
 800b422:	4b24      	ldr	r3, [pc, #144]	@ (800b4b4 <xTaskIncrementTick+0x160>)
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	4313      	orrs	r3, r2
 800b428:	4a22      	ldr	r2, [pc, #136]	@ (800b4b4 <xTaskIncrementTick+0x160>)
 800b42a:	6013      	str	r3, [r2, #0]
 800b42c:	68bb      	ldr	r3, [r7, #8]
 800b42e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b430:	4613      	mov	r3, r2
 800b432:	009b      	lsls	r3, r3, #2
 800b434:	4413      	add	r3, r2
 800b436:	009b      	lsls	r3, r3, #2
 800b438:	4a1f      	ldr	r2, [pc, #124]	@ (800b4b8 <xTaskIncrementTick+0x164>)
 800b43a:	441a      	add	r2, r3
 800b43c:	68bb      	ldr	r3, [r7, #8]
 800b43e:	3304      	adds	r3, #4
 800b440:	4619      	mov	r1, r3
 800b442:	4610      	mov	r0, r2
 800b444:	f7fe fc87 	bl	8009d56 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b448:	68bb      	ldr	r3, [r7, #8]
 800b44a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b44c:	4b1b      	ldr	r3, [pc, #108]	@ (800b4bc <xTaskIncrementTick+0x168>)
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b452:	429a      	cmp	r2, r3
 800b454:	d3b9      	bcc.n	800b3ca <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b456:	2301      	movs	r3, #1
 800b458:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b45a:	e7b6      	b.n	800b3ca <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b45c:	4b17      	ldr	r3, [pc, #92]	@ (800b4bc <xTaskIncrementTick+0x168>)
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b462:	4915      	ldr	r1, [pc, #84]	@ (800b4b8 <xTaskIncrementTick+0x164>)
 800b464:	4613      	mov	r3, r2
 800b466:	009b      	lsls	r3, r3, #2
 800b468:	4413      	add	r3, r2
 800b46a:	009b      	lsls	r3, r3, #2
 800b46c:	440b      	add	r3, r1
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	2b01      	cmp	r3, #1
 800b472:	d901      	bls.n	800b478 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b474:	2301      	movs	r3, #1
 800b476:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b478:	4b11      	ldr	r3, [pc, #68]	@ (800b4c0 <xTaskIncrementTick+0x16c>)
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d007      	beq.n	800b490 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b480:	2301      	movs	r3, #1
 800b482:	617b      	str	r3, [r7, #20]
 800b484:	e004      	b.n	800b490 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b486:	4b0f      	ldr	r3, [pc, #60]	@ (800b4c4 <xTaskIncrementTick+0x170>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	3301      	adds	r3, #1
 800b48c:	4a0d      	ldr	r2, [pc, #52]	@ (800b4c4 <xTaskIncrementTick+0x170>)
 800b48e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b490:	697b      	ldr	r3, [r7, #20]
}
 800b492:	4618      	mov	r0, r3
 800b494:	3718      	adds	r7, #24
 800b496:	46bd      	mov	sp, r7
 800b498:	bd80      	pop	{r7, pc}
 800b49a:	bf00      	nop
 800b49c:	200052f8 	.word	0x200052f8
 800b4a0:	200052d4 	.word	0x200052d4
 800b4a4:	20005288 	.word	0x20005288
 800b4a8:	2000528c 	.word	0x2000528c
 800b4ac:	200052e8 	.word	0x200052e8
 800b4b0:	200052f0 	.word	0x200052f0
 800b4b4:	200052d8 	.word	0x200052d8
 800b4b8:	200051d4 	.word	0x200051d4
 800b4bc:	200051d0 	.word	0x200051d0
 800b4c0:	200052e4 	.word	0x200052e4
 800b4c4:	200052e0 	.word	0x200052e0

0800b4c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b4c8:	b480      	push	{r7}
 800b4ca:	b087      	sub	sp, #28
 800b4cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b4ce:	4b2a      	ldr	r3, [pc, #168]	@ (800b578 <vTaskSwitchContext+0xb0>)
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d003      	beq.n	800b4de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b4d6:	4b29      	ldr	r3, [pc, #164]	@ (800b57c <vTaskSwitchContext+0xb4>)
 800b4d8:	2201      	movs	r2, #1
 800b4da:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b4dc:	e045      	b.n	800b56a <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800b4de:	4b27      	ldr	r3, [pc, #156]	@ (800b57c <vTaskSwitchContext+0xb4>)
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b4e4:	4b26      	ldr	r3, [pc, #152]	@ (800b580 <vTaskSwitchContext+0xb8>)
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	fab3 f383 	clz	r3, r3
 800b4f0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b4f2:	7afb      	ldrb	r3, [r7, #11]
 800b4f4:	f1c3 031f 	rsb	r3, r3, #31
 800b4f8:	617b      	str	r3, [r7, #20]
 800b4fa:	4922      	ldr	r1, [pc, #136]	@ (800b584 <vTaskSwitchContext+0xbc>)
 800b4fc:	697a      	ldr	r2, [r7, #20]
 800b4fe:	4613      	mov	r3, r2
 800b500:	009b      	lsls	r3, r3, #2
 800b502:	4413      	add	r3, r2
 800b504:	009b      	lsls	r3, r3, #2
 800b506:	440b      	add	r3, r1
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d10b      	bne.n	800b526 <vTaskSwitchContext+0x5e>
	__asm volatile
 800b50e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b512:	f383 8811 	msr	BASEPRI, r3
 800b516:	f3bf 8f6f 	isb	sy
 800b51a:	f3bf 8f4f 	dsb	sy
 800b51e:	607b      	str	r3, [r7, #4]
}
 800b520:	bf00      	nop
 800b522:	bf00      	nop
 800b524:	e7fd      	b.n	800b522 <vTaskSwitchContext+0x5a>
 800b526:	697a      	ldr	r2, [r7, #20]
 800b528:	4613      	mov	r3, r2
 800b52a:	009b      	lsls	r3, r3, #2
 800b52c:	4413      	add	r3, r2
 800b52e:	009b      	lsls	r3, r3, #2
 800b530:	4a14      	ldr	r2, [pc, #80]	@ (800b584 <vTaskSwitchContext+0xbc>)
 800b532:	4413      	add	r3, r2
 800b534:	613b      	str	r3, [r7, #16]
 800b536:	693b      	ldr	r3, [r7, #16]
 800b538:	685b      	ldr	r3, [r3, #4]
 800b53a:	685a      	ldr	r2, [r3, #4]
 800b53c:	693b      	ldr	r3, [r7, #16]
 800b53e:	605a      	str	r2, [r3, #4]
 800b540:	693b      	ldr	r3, [r7, #16]
 800b542:	685a      	ldr	r2, [r3, #4]
 800b544:	693b      	ldr	r3, [r7, #16]
 800b546:	3308      	adds	r3, #8
 800b548:	429a      	cmp	r2, r3
 800b54a:	d104      	bne.n	800b556 <vTaskSwitchContext+0x8e>
 800b54c:	693b      	ldr	r3, [r7, #16]
 800b54e:	685b      	ldr	r3, [r3, #4]
 800b550:	685a      	ldr	r2, [r3, #4]
 800b552:	693b      	ldr	r3, [r7, #16]
 800b554:	605a      	str	r2, [r3, #4]
 800b556:	693b      	ldr	r3, [r7, #16]
 800b558:	685b      	ldr	r3, [r3, #4]
 800b55a:	68db      	ldr	r3, [r3, #12]
 800b55c:	4a0a      	ldr	r2, [pc, #40]	@ (800b588 <vTaskSwitchContext+0xc0>)
 800b55e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b560:	4b09      	ldr	r3, [pc, #36]	@ (800b588 <vTaskSwitchContext+0xc0>)
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	334c      	adds	r3, #76	@ 0x4c
 800b566:	4a09      	ldr	r2, [pc, #36]	@ (800b58c <vTaskSwitchContext+0xc4>)
 800b568:	6013      	str	r3, [r2, #0]
}
 800b56a:	bf00      	nop
 800b56c:	371c      	adds	r7, #28
 800b56e:	46bd      	mov	sp, r7
 800b570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b574:	4770      	bx	lr
 800b576:	bf00      	nop
 800b578:	200052f8 	.word	0x200052f8
 800b57c:	200052e4 	.word	0x200052e4
 800b580:	200052d8 	.word	0x200052d8
 800b584:	200051d4 	.word	0x200051d4
 800b588:	200051d0 	.word	0x200051d0
 800b58c:	20000118 	.word	0x20000118

0800b590 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b084      	sub	sp, #16
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
 800b598:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d10b      	bne.n	800b5b8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b5a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5a4:	f383 8811 	msr	BASEPRI, r3
 800b5a8:	f3bf 8f6f 	isb	sy
 800b5ac:	f3bf 8f4f 	dsb	sy
 800b5b0:	60fb      	str	r3, [r7, #12]
}
 800b5b2:	bf00      	nop
 800b5b4:	bf00      	nop
 800b5b6:	e7fd      	b.n	800b5b4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b5b8:	4b07      	ldr	r3, [pc, #28]	@ (800b5d8 <vTaskPlaceOnEventList+0x48>)
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	3318      	adds	r3, #24
 800b5be:	4619      	mov	r1, r3
 800b5c0:	6878      	ldr	r0, [r7, #4]
 800b5c2:	f7fe fbec 	bl	8009d9e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b5c6:	2101      	movs	r1, #1
 800b5c8:	6838      	ldr	r0, [r7, #0]
 800b5ca:	f000 fb8d 	bl	800bce8 <prvAddCurrentTaskToDelayedList>
}
 800b5ce:	bf00      	nop
 800b5d0:	3710      	adds	r7, #16
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	bd80      	pop	{r7, pc}
 800b5d6:	bf00      	nop
 800b5d8:	200051d0 	.word	0x200051d0

0800b5dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b086      	sub	sp, #24
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	68db      	ldr	r3, [r3, #12]
 800b5e8:	68db      	ldr	r3, [r3, #12]
 800b5ea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b5ec:	693b      	ldr	r3, [r7, #16]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d10b      	bne.n	800b60a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b5f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5f6:	f383 8811 	msr	BASEPRI, r3
 800b5fa:	f3bf 8f6f 	isb	sy
 800b5fe:	f3bf 8f4f 	dsb	sy
 800b602:	60fb      	str	r3, [r7, #12]
}
 800b604:	bf00      	nop
 800b606:	bf00      	nop
 800b608:	e7fd      	b.n	800b606 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b60a:	693b      	ldr	r3, [r7, #16]
 800b60c:	3318      	adds	r3, #24
 800b60e:	4618      	mov	r0, r3
 800b610:	f7fe fbfe 	bl	8009e10 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b614:	4b1d      	ldr	r3, [pc, #116]	@ (800b68c <xTaskRemoveFromEventList+0xb0>)
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d11c      	bne.n	800b656 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b61c:	693b      	ldr	r3, [r7, #16]
 800b61e:	3304      	adds	r3, #4
 800b620:	4618      	mov	r0, r3
 800b622:	f7fe fbf5 	bl	8009e10 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b626:	693b      	ldr	r3, [r7, #16]
 800b628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b62a:	2201      	movs	r2, #1
 800b62c:	409a      	lsls	r2, r3
 800b62e:	4b18      	ldr	r3, [pc, #96]	@ (800b690 <xTaskRemoveFromEventList+0xb4>)
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	4313      	orrs	r3, r2
 800b634:	4a16      	ldr	r2, [pc, #88]	@ (800b690 <xTaskRemoveFromEventList+0xb4>)
 800b636:	6013      	str	r3, [r2, #0]
 800b638:	693b      	ldr	r3, [r7, #16]
 800b63a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b63c:	4613      	mov	r3, r2
 800b63e:	009b      	lsls	r3, r3, #2
 800b640:	4413      	add	r3, r2
 800b642:	009b      	lsls	r3, r3, #2
 800b644:	4a13      	ldr	r2, [pc, #76]	@ (800b694 <xTaskRemoveFromEventList+0xb8>)
 800b646:	441a      	add	r2, r3
 800b648:	693b      	ldr	r3, [r7, #16]
 800b64a:	3304      	adds	r3, #4
 800b64c:	4619      	mov	r1, r3
 800b64e:	4610      	mov	r0, r2
 800b650:	f7fe fb81 	bl	8009d56 <vListInsertEnd>
 800b654:	e005      	b.n	800b662 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b656:	693b      	ldr	r3, [r7, #16]
 800b658:	3318      	adds	r3, #24
 800b65a:	4619      	mov	r1, r3
 800b65c:	480e      	ldr	r0, [pc, #56]	@ (800b698 <xTaskRemoveFromEventList+0xbc>)
 800b65e:	f7fe fb7a 	bl	8009d56 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b662:	693b      	ldr	r3, [r7, #16]
 800b664:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b666:	4b0d      	ldr	r3, [pc, #52]	@ (800b69c <xTaskRemoveFromEventList+0xc0>)
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b66c:	429a      	cmp	r2, r3
 800b66e:	d905      	bls.n	800b67c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b670:	2301      	movs	r3, #1
 800b672:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b674:	4b0a      	ldr	r3, [pc, #40]	@ (800b6a0 <xTaskRemoveFromEventList+0xc4>)
 800b676:	2201      	movs	r2, #1
 800b678:	601a      	str	r2, [r3, #0]
 800b67a:	e001      	b.n	800b680 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b67c:	2300      	movs	r3, #0
 800b67e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b680:	697b      	ldr	r3, [r7, #20]
}
 800b682:	4618      	mov	r0, r3
 800b684:	3718      	adds	r7, #24
 800b686:	46bd      	mov	sp, r7
 800b688:	bd80      	pop	{r7, pc}
 800b68a:	bf00      	nop
 800b68c:	200052f8 	.word	0x200052f8
 800b690:	200052d8 	.word	0x200052d8
 800b694:	200051d4 	.word	0x200051d4
 800b698:	20005290 	.word	0x20005290
 800b69c:	200051d0 	.word	0x200051d0
 800b6a0:	200052e4 	.word	0x200052e4

0800b6a4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b6a4:	b480      	push	{r7}
 800b6a6:	b083      	sub	sp, #12
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b6ac:	4b06      	ldr	r3, [pc, #24]	@ (800b6c8 <vTaskInternalSetTimeOutState+0x24>)
 800b6ae:	681a      	ldr	r2, [r3, #0]
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b6b4:	4b05      	ldr	r3, [pc, #20]	@ (800b6cc <vTaskInternalSetTimeOutState+0x28>)
 800b6b6:	681a      	ldr	r2, [r3, #0]
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	605a      	str	r2, [r3, #4]
}
 800b6bc:	bf00      	nop
 800b6be:	370c      	adds	r7, #12
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c6:	4770      	bx	lr
 800b6c8:	200052e8 	.word	0x200052e8
 800b6cc:	200052d4 	.word	0x200052d4

0800b6d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b088      	sub	sp, #32
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
 800b6d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d10b      	bne.n	800b6f8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b6e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6e4:	f383 8811 	msr	BASEPRI, r3
 800b6e8:	f3bf 8f6f 	isb	sy
 800b6ec:	f3bf 8f4f 	dsb	sy
 800b6f0:	613b      	str	r3, [r7, #16]
}
 800b6f2:	bf00      	nop
 800b6f4:	bf00      	nop
 800b6f6:	e7fd      	b.n	800b6f4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b6f8:	683b      	ldr	r3, [r7, #0]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d10b      	bne.n	800b716 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b6fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b702:	f383 8811 	msr	BASEPRI, r3
 800b706:	f3bf 8f6f 	isb	sy
 800b70a:	f3bf 8f4f 	dsb	sy
 800b70e:	60fb      	str	r3, [r7, #12]
}
 800b710:	bf00      	nop
 800b712:	bf00      	nop
 800b714:	e7fd      	b.n	800b712 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b716:	f000 fc7f 	bl	800c018 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b71a:	4b1d      	ldr	r3, [pc, #116]	@ (800b790 <xTaskCheckForTimeOut+0xc0>)
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	685b      	ldr	r3, [r3, #4]
 800b724:	69ba      	ldr	r2, [r7, #24]
 800b726:	1ad3      	subs	r3, r2, r3
 800b728:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b72a:	683b      	ldr	r3, [r7, #0]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b732:	d102      	bne.n	800b73a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b734:	2300      	movs	r3, #0
 800b736:	61fb      	str	r3, [r7, #28]
 800b738:	e023      	b.n	800b782 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681a      	ldr	r2, [r3, #0]
 800b73e:	4b15      	ldr	r3, [pc, #84]	@ (800b794 <xTaskCheckForTimeOut+0xc4>)
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	429a      	cmp	r2, r3
 800b744:	d007      	beq.n	800b756 <xTaskCheckForTimeOut+0x86>
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	685b      	ldr	r3, [r3, #4]
 800b74a:	69ba      	ldr	r2, [r7, #24]
 800b74c:	429a      	cmp	r2, r3
 800b74e:	d302      	bcc.n	800b756 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b750:	2301      	movs	r3, #1
 800b752:	61fb      	str	r3, [r7, #28]
 800b754:	e015      	b.n	800b782 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b756:	683b      	ldr	r3, [r7, #0]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	697a      	ldr	r2, [r7, #20]
 800b75c:	429a      	cmp	r2, r3
 800b75e:	d20b      	bcs.n	800b778 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b760:	683b      	ldr	r3, [r7, #0]
 800b762:	681a      	ldr	r2, [r3, #0]
 800b764:	697b      	ldr	r3, [r7, #20]
 800b766:	1ad2      	subs	r2, r2, r3
 800b768:	683b      	ldr	r3, [r7, #0]
 800b76a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b76c:	6878      	ldr	r0, [r7, #4]
 800b76e:	f7ff ff99 	bl	800b6a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b772:	2300      	movs	r3, #0
 800b774:	61fb      	str	r3, [r7, #28]
 800b776:	e004      	b.n	800b782 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	2200      	movs	r2, #0
 800b77c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b77e:	2301      	movs	r3, #1
 800b780:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b782:	f000 fc7b 	bl	800c07c <vPortExitCritical>

	return xReturn;
 800b786:	69fb      	ldr	r3, [r7, #28]
}
 800b788:	4618      	mov	r0, r3
 800b78a:	3720      	adds	r7, #32
 800b78c:	46bd      	mov	sp, r7
 800b78e:	bd80      	pop	{r7, pc}
 800b790:	200052d4 	.word	0x200052d4
 800b794:	200052e8 	.word	0x200052e8

0800b798 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b798:	b480      	push	{r7}
 800b79a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b79c:	4b03      	ldr	r3, [pc, #12]	@ (800b7ac <vTaskMissedYield+0x14>)
 800b79e:	2201      	movs	r2, #1
 800b7a0:	601a      	str	r2, [r3, #0]
}
 800b7a2:	bf00      	nop
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7aa:	4770      	bx	lr
 800b7ac:	200052e4 	.word	0x200052e4

0800b7b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b082      	sub	sp, #8
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b7b8:	f000 f852 	bl	800b860 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b7bc:	4b06      	ldr	r3, [pc, #24]	@ (800b7d8 <prvIdleTask+0x28>)
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	2b01      	cmp	r3, #1
 800b7c2:	d9f9      	bls.n	800b7b8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b7c4:	4b05      	ldr	r3, [pc, #20]	@ (800b7dc <prvIdleTask+0x2c>)
 800b7c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b7ca:	601a      	str	r2, [r3, #0]
 800b7cc:	f3bf 8f4f 	dsb	sy
 800b7d0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b7d4:	e7f0      	b.n	800b7b8 <prvIdleTask+0x8>
 800b7d6:	bf00      	nop
 800b7d8:	200051d4 	.word	0x200051d4
 800b7dc:	e000ed04 	.word	0xe000ed04

0800b7e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b082      	sub	sp, #8
 800b7e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	607b      	str	r3, [r7, #4]
 800b7ea:	e00c      	b.n	800b806 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b7ec:	687a      	ldr	r2, [r7, #4]
 800b7ee:	4613      	mov	r3, r2
 800b7f0:	009b      	lsls	r3, r3, #2
 800b7f2:	4413      	add	r3, r2
 800b7f4:	009b      	lsls	r3, r3, #2
 800b7f6:	4a12      	ldr	r2, [pc, #72]	@ (800b840 <prvInitialiseTaskLists+0x60>)
 800b7f8:	4413      	add	r3, r2
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	f7fe fa7e 	bl	8009cfc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	3301      	adds	r3, #1
 800b804:	607b      	str	r3, [r7, #4]
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	2b06      	cmp	r3, #6
 800b80a:	d9ef      	bls.n	800b7ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b80c:	480d      	ldr	r0, [pc, #52]	@ (800b844 <prvInitialiseTaskLists+0x64>)
 800b80e:	f7fe fa75 	bl	8009cfc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b812:	480d      	ldr	r0, [pc, #52]	@ (800b848 <prvInitialiseTaskLists+0x68>)
 800b814:	f7fe fa72 	bl	8009cfc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b818:	480c      	ldr	r0, [pc, #48]	@ (800b84c <prvInitialiseTaskLists+0x6c>)
 800b81a:	f7fe fa6f 	bl	8009cfc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b81e:	480c      	ldr	r0, [pc, #48]	@ (800b850 <prvInitialiseTaskLists+0x70>)
 800b820:	f7fe fa6c 	bl	8009cfc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b824:	480b      	ldr	r0, [pc, #44]	@ (800b854 <prvInitialiseTaskLists+0x74>)
 800b826:	f7fe fa69 	bl	8009cfc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b82a:	4b0b      	ldr	r3, [pc, #44]	@ (800b858 <prvInitialiseTaskLists+0x78>)
 800b82c:	4a05      	ldr	r2, [pc, #20]	@ (800b844 <prvInitialiseTaskLists+0x64>)
 800b82e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b830:	4b0a      	ldr	r3, [pc, #40]	@ (800b85c <prvInitialiseTaskLists+0x7c>)
 800b832:	4a05      	ldr	r2, [pc, #20]	@ (800b848 <prvInitialiseTaskLists+0x68>)
 800b834:	601a      	str	r2, [r3, #0]
}
 800b836:	bf00      	nop
 800b838:	3708      	adds	r7, #8
 800b83a:	46bd      	mov	sp, r7
 800b83c:	bd80      	pop	{r7, pc}
 800b83e:	bf00      	nop
 800b840:	200051d4 	.word	0x200051d4
 800b844:	20005260 	.word	0x20005260
 800b848:	20005274 	.word	0x20005274
 800b84c:	20005290 	.word	0x20005290
 800b850:	200052a4 	.word	0x200052a4
 800b854:	200052bc 	.word	0x200052bc
 800b858:	20005288 	.word	0x20005288
 800b85c:	2000528c 	.word	0x2000528c

0800b860 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b082      	sub	sp, #8
 800b864:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b866:	e019      	b.n	800b89c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b868:	f000 fbd6 	bl	800c018 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b86c:	4b10      	ldr	r3, [pc, #64]	@ (800b8b0 <prvCheckTasksWaitingTermination+0x50>)
 800b86e:	68db      	ldr	r3, [r3, #12]
 800b870:	68db      	ldr	r3, [r3, #12]
 800b872:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	3304      	adds	r3, #4
 800b878:	4618      	mov	r0, r3
 800b87a:	f7fe fac9 	bl	8009e10 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b87e:	4b0d      	ldr	r3, [pc, #52]	@ (800b8b4 <prvCheckTasksWaitingTermination+0x54>)
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	3b01      	subs	r3, #1
 800b884:	4a0b      	ldr	r2, [pc, #44]	@ (800b8b4 <prvCheckTasksWaitingTermination+0x54>)
 800b886:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b888:	4b0b      	ldr	r3, [pc, #44]	@ (800b8b8 <prvCheckTasksWaitingTermination+0x58>)
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	3b01      	subs	r3, #1
 800b88e:	4a0a      	ldr	r2, [pc, #40]	@ (800b8b8 <prvCheckTasksWaitingTermination+0x58>)
 800b890:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b892:	f000 fbf3 	bl	800c07c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b896:	6878      	ldr	r0, [r7, #4]
 800b898:	f000 f810 	bl	800b8bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b89c:	4b06      	ldr	r3, [pc, #24]	@ (800b8b8 <prvCheckTasksWaitingTermination+0x58>)
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d1e1      	bne.n	800b868 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b8a4:	bf00      	nop
 800b8a6:	bf00      	nop
 800b8a8:	3708      	adds	r7, #8
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}
 800b8ae:	bf00      	nop
 800b8b0:	200052a4 	.word	0x200052a4
 800b8b4:	200052d0 	.word	0x200052d0
 800b8b8:	200052b8 	.word	0x200052b8

0800b8bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b084      	sub	sp, #16
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	334c      	adds	r3, #76	@ 0x4c
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	f00b fdd1 	bl	8017470 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d108      	bne.n	800b8ea <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b8dc:	4618      	mov	r0, r3
 800b8de:	f000 fd8b 	bl	800c3f8 <vPortFree>
				vPortFree( pxTCB );
 800b8e2:	6878      	ldr	r0, [r7, #4]
 800b8e4:	f000 fd88 	bl	800c3f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b8e8:	e019      	b.n	800b91e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800b8f0:	2b01      	cmp	r3, #1
 800b8f2:	d103      	bne.n	800b8fc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b8f4:	6878      	ldr	r0, [r7, #4]
 800b8f6:	f000 fd7f 	bl	800c3f8 <vPortFree>
	}
 800b8fa:	e010      	b.n	800b91e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800b902:	2b02      	cmp	r3, #2
 800b904:	d00b      	beq.n	800b91e <prvDeleteTCB+0x62>
	__asm volatile
 800b906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b90a:	f383 8811 	msr	BASEPRI, r3
 800b90e:	f3bf 8f6f 	isb	sy
 800b912:	f3bf 8f4f 	dsb	sy
 800b916:	60fb      	str	r3, [r7, #12]
}
 800b918:	bf00      	nop
 800b91a:	bf00      	nop
 800b91c:	e7fd      	b.n	800b91a <prvDeleteTCB+0x5e>
	}
 800b91e:	bf00      	nop
 800b920:	3710      	adds	r7, #16
 800b922:	46bd      	mov	sp, r7
 800b924:	bd80      	pop	{r7, pc}
	...

0800b928 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b928:	b480      	push	{r7}
 800b92a:	b083      	sub	sp, #12
 800b92c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b92e:	4b0c      	ldr	r3, [pc, #48]	@ (800b960 <prvResetNextTaskUnblockTime+0x38>)
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d104      	bne.n	800b942 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b938:	4b0a      	ldr	r3, [pc, #40]	@ (800b964 <prvResetNextTaskUnblockTime+0x3c>)
 800b93a:	f04f 32ff 	mov.w	r2, #4294967295
 800b93e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b940:	e008      	b.n	800b954 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b942:	4b07      	ldr	r3, [pc, #28]	@ (800b960 <prvResetNextTaskUnblockTime+0x38>)
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	68db      	ldr	r3, [r3, #12]
 800b948:	68db      	ldr	r3, [r3, #12]
 800b94a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	685b      	ldr	r3, [r3, #4]
 800b950:	4a04      	ldr	r2, [pc, #16]	@ (800b964 <prvResetNextTaskUnblockTime+0x3c>)
 800b952:	6013      	str	r3, [r2, #0]
}
 800b954:	bf00      	nop
 800b956:	370c      	adds	r7, #12
 800b958:	46bd      	mov	sp, r7
 800b95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95e:	4770      	bx	lr
 800b960:	20005288 	.word	0x20005288
 800b964:	200052f0 	.word	0x200052f0

0800b968 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b968:	b480      	push	{r7}
 800b96a:	b083      	sub	sp, #12
 800b96c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b96e:	4b0b      	ldr	r3, [pc, #44]	@ (800b99c <xTaskGetSchedulerState+0x34>)
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d102      	bne.n	800b97c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b976:	2301      	movs	r3, #1
 800b978:	607b      	str	r3, [r7, #4]
 800b97a:	e008      	b.n	800b98e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b97c:	4b08      	ldr	r3, [pc, #32]	@ (800b9a0 <xTaskGetSchedulerState+0x38>)
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d102      	bne.n	800b98a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b984:	2302      	movs	r3, #2
 800b986:	607b      	str	r3, [r7, #4]
 800b988:	e001      	b.n	800b98e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b98a:	2300      	movs	r3, #0
 800b98c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b98e:	687b      	ldr	r3, [r7, #4]
	}
 800b990:	4618      	mov	r0, r3
 800b992:	370c      	adds	r7, #12
 800b994:	46bd      	mov	sp, r7
 800b996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99a:	4770      	bx	lr
 800b99c:	200052dc 	.word	0x200052dc
 800b9a0:	200052f8 	.word	0x200052f8

0800b9a4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b084      	sub	sp, #16
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d05e      	beq.n	800ba78 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b9ba:	68bb      	ldr	r3, [r7, #8]
 800b9bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9be:	4b31      	ldr	r3, [pc, #196]	@ (800ba84 <xTaskPriorityInherit+0xe0>)
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9c4:	429a      	cmp	r2, r3
 800b9c6:	d24e      	bcs.n	800ba66 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b9c8:	68bb      	ldr	r3, [r7, #8]
 800b9ca:	699b      	ldr	r3, [r3, #24]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	db06      	blt.n	800b9de <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b9d0:	4b2c      	ldr	r3, [pc, #176]	@ (800ba84 <xTaskPriorityInherit+0xe0>)
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9d6:	f1c3 0207 	rsb	r2, r3, #7
 800b9da:	68bb      	ldr	r3, [r7, #8]
 800b9dc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b9de:	68bb      	ldr	r3, [r7, #8]
 800b9e0:	6959      	ldr	r1, [r3, #20]
 800b9e2:	68bb      	ldr	r3, [r7, #8]
 800b9e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9e6:	4613      	mov	r3, r2
 800b9e8:	009b      	lsls	r3, r3, #2
 800b9ea:	4413      	add	r3, r2
 800b9ec:	009b      	lsls	r3, r3, #2
 800b9ee:	4a26      	ldr	r2, [pc, #152]	@ (800ba88 <xTaskPriorityInherit+0xe4>)
 800b9f0:	4413      	add	r3, r2
 800b9f2:	4299      	cmp	r1, r3
 800b9f4:	d12f      	bne.n	800ba56 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b9f6:	68bb      	ldr	r3, [r7, #8]
 800b9f8:	3304      	adds	r3, #4
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	f7fe fa08 	bl	8009e10 <uxListRemove>
 800ba00:	4603      	mov	r3, r0
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d10a      	bne.n	800ba1c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800ba06:	68bb      	ldr	r3, [r7, #8]
 800ba08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba0a:	2201      	movs	r2, #1
 800ba0c:	fa02 f303 	lsl.w	r3, r2, r3
 800ba10:	43da      	mvns	r2, r3
 800ba12:	4b1e      	ldr	r3, [pc, #120]	@ (800ba8c <xTaskPriorityInherit+0xe8>)
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	4013      	ands	r3, r2
 800ba18:	4a1c      	ldr	r2, [pc, #112]	@ (800ba8c <xTaskPriorityInherit+0xe8>)
 800ba1a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ba1c:	4b19      	ldr	r3, [pc, #100]	@ (800ba84 <xTaskPriorityInherit+0xe0>)
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba22:	68bb      	ldr	r3, [r7, #8]
 800ba24:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ba26:	68bb      	ldr	r3, [r7, #8]
 800ba28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba2a:	2201      	movs	r2, #1
 800ba2c:	409a      	lsls	r2, r3
 800ba2e:	4b17      	ldr	r3, [pc, #92]	@ (800ba8c <xTaskPriorityInherit+0xe8>)
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	4313      	orrs	r3, r2
 800ba34:	4a15      	ldr	r2, [pc, #84]	@ (800ba8c <xTaskPriorityInherit+0xe8>)
 800ba36:	6013      	str	r3, [r2, #0]
 800ba38:	68bb      	ldr	r3, [r7, #8]
 800ba3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba3c:	4613      	mov	r3, r2
 800ba3e:	009b      	lsls	r3, r3, #2
 800ba40:	4413      	add	r3, r2
 800ba42:	009b      	lsls	r3, r3, #2
 800ba44:	4a10      	ldr	r2, [pc, #64]	@ (800ba88 <xTaskPriorityInherit+0xe4>)
 800ba46:	441a      	add	r2, r3
 800ba48:	68bb      	ldr	r3, [r7, #8]
 800ba4a:	3304      	adds	r3, #4
 800ba4c:	4619      	mov	r1, r3
 800ba4e:	4610      	mov	r0, r2
 800ba50:	f7fe f981 	bl	8009d56 <vListInsertEnd>
 800ba54:	e004      	b.n	800ba60 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ba56:	4b0b      	ldr	r3, [pc, #44]	@ (800ba84 <xTaskPriorityInherit+0xe0>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba5c:	68bb      	ldr	r3, [r7, #8]
 800ba5e:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ba60:	2301      	movs	r3, #1
 800ba62:	60fb      	str	r3, [r7, #12]
 800ba64:	e008      	b.n	800ba78 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ba66:	68bb      	ldr	r3, [r7, #8]
 800ba68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ba6a:	4b06      	ldr	r3, [pc, #24]	@ (800ba84 <xTaskPriorityInherit+0xe0>)
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba70:	429a      	cmp	r2, r3
 800ba72:	d201      	bcs.n	800ba78 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ba74:	2301      	movs	r3, #1
 800ba76:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ba78:	68fb      	ldr	r3, [r7, #12]
	}
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	3710      	adds	r7, #16
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	bd80      	pop	{r7, pc}
 800ba82:	bf00      	nop
 800ba84:	200051d0 	.word	0x200051d0
 800ba88:	200051d4 	.word	0x200051d4
 800ba8c:	200052d8 	.word	0x200052d8

0800ba90 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b086      	sub	sp, #24
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d070      	beq.n	800bb88 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800baa6:	4b3b      	ldr	r3, [pc, #236]	@ (800bb94 <xTaskPriorityDisinherit+0x104>)
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	693a      	ldr	r2, [r7, #16]
 800baac:	429a      	cmp	r2, r3
 800baae:	d00b      	beq.n	800bac8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800bab0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bab4:	f383 8811 	msr	BASEPRI, r3
 800bab8:	f3bf 8f6f 	isb	sy
 800babc:	f3bf 8f4f 	dsb	sy
 800bac0:	60fb      	str	r3, [r7, #12]
}
 800bac2:	bf00      	nop
 800bac4:	bf00      	nop
 800bac6:	e7fd      	b.n	800bac4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bac8:	693b      	ldr	r3, [r7, #16]
 800baca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d10b      	bne.n	800bae8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800bad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bad4:	f383 8811 	msr	BASEPRI, r3
 800bad8:	f3bf 8f6f 	isb	sy
 800badc:	f3bf 8f4f 	dsb	sy
 800bae0:	60bb      	str	r3, [r7, #8]
}
 800bae2:	bf00      	nop
 800bae4:	bf00      	nop
 800bae6:	e7fd      	b.n	800bae4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800bae8:	693b      	ldr	r3, [r7, #16]
 800baea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800baec:	1e5a      	subs	r2, r3, #1
 800baee:	693b      	ldr	r3, [r7, #16]
 800baf0:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800baf2:	693b      	ldr	r3, [r7, #16]
 800baf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800baf6:	693b      	ldr	r3, [r7, #16]
 800baf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bafa:	429a      	cmp	r2, r3
 800bafc:	d044      	beq.n	800bb88 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bafe:	693b      	ldr	r3, [r7, #16]
 800bb00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d140      	bne.n	800bb88 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bb06:	693b      	ldr	r3, [r7, #16]
 800bb08:	3304      	adds	r3, #4
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	f7fe f980 	bl	8009e10 <uxListRemove>
 800bb10:	4603      	mov	r3, r0
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d115      	bne.n	800bb42 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800bb16:	693b      	ldr	r3, [r7, #16]
 800bb18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb1a:	491f      	ldr	r1, [pc, #124]	@ (800bb98 <xTaskPriorityDisinherit+0x108>)
 800bb1c:	4613      	mov	r3, r2
 800bb1e:	009b      	lsls	r3, r3, #2
 800bb20:	4413      	add	r3, r2
 800bb22:	009b      	lsls	r3, r3, #2
 800bb24:	440b      	add	r3, r1
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d10a      	bne.n	800bb42 <xTaskPriorityDisinherit+0xb2>
 800bb2c:	693b      	ldr	r3, [r7, #16]
 800bb2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb30:	2201      	movs	r2, #1
 800bb32:	fa02 f303 	lsl.w	r3, r2, r3
 800bb36:	43da      	mvns	r2, r3
 800bb38:	4b18      	ldr	r3, [pc, #96]	@ (800bb9c <xTaskPriorityDisinherit+0x10c>)
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	4013      	ands	r3, r2
 800bb3e:	4a17      	ldr	r2, [pc, #92]	@ (800bb9c <xTaskPriorityDisinherit+0x10c>)
 800bb40:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bb42:	693b      	ldr	r3, [r7, #16]
 800bb44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bb46:	693b      	ldr	r3, [r7, #16]
 800bb48:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb4a:	693b      	ldr	r3, [r7, #16]
 800bb4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb4e:	f1c3 0207 	rsb	r2, r3, #7
 800bb52:	693b      	ldr	r3, [r7, #16]
 800bb54:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bb56:	693b      	ldr	r3, [r7, #16]
 800bb58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb5a:	2201      	movs	r2, #1
 800bb5c:	409a      	lsls	r2, r3
 800bb5e:	4b0f      	ldr	r3, [pc, #60]	@ (800bb9c <xTaskPriorityDisinherit+0x10c>)
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	4313      	orrs	r3, r2
 800bb64:	4a0d      	ldr	r2, [pc, #52]	@ (800bb9c <xTaskPriorityDisinherit+0x10c>)
 800bb66:	6013      	str	r3, [r2, #0]
 800bb68:	693b      	ldr	r3, [r7, #16]
 800bb6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb6c:	4613      	mov	r3, r2
 800bb6e:	009b      	lsls	r3, r3, #2
 800bb70:	4413      	add	r3, r2
 800bb72:	009b      	lsls	r3, r3, #2
 800bb74:	4a08      	ldr	r2, [pc, #32]	@ (800bb98 <xTaskPriorityDisinherit+0x108>)
 800bb76:	441a      	add	r2, r3
 800bb78:	693b      	ldr	r3, [r7, #16]
 800bb7a:	3304      	adds	r3, #4
 800bb7c:	4619      	mov	r1, r3
 800bb7e:	4610      	mov	r0, r2
 800bb80:	f7fe f8e9 	bl	8009d56 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bb84:	2301      	movs	r3, #1
 800bb86:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bb88:	697b      	ldr	r3, [r7, #20]
	}
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	3718      	adds	r7, #24
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	bd80      	pop	{r7, pc}
 800bb92:	bf00      	nop
 800bb94:	200051d0 	.word	0x200051d0
 800bb98:	200051d4 	.word	0x200051d4
 800bb9c:	200052d8 	.word	0x200052d8

0800bba0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b088      	sub	sp, #32
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
 800bba8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800bbae:	2301      	movs	r3, #1
 800bbb0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d079      	beq.n	800bcac <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800bbb8:	69bb      	ldr	r3, [r7, #24]
 800bbba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d10b      	bne.n	800bbd8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800bbc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbc4:	f383 8811 	msr	BASEPRI, r3
 800bbc8:	f3bf 8f6f 	isb	sy
 800bbcc:	f3bf 8f4f 	dsb	sy
 800bbd0:	60fb      	str	r3, [r7, #12]
}
 800bbd2:	bf00      	nop
 800bbd4:	bf00      	nop
 800bbd6:	e7fd      	b.n	800bbd4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800bbd8:	69bb      	ldr	r3, [r7, #24]
 800bbda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bbdc:	683a      	ldr	r2, [r7, #0]
 800bbde:	429a      	cmp	r2, r3
 800bbe0:	d902      	bls.n	800bbe8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	61fb      	str	r3, [r7, #28]
 800bbe6:	e002      	b.n	800bbee <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800bbe8:	69bb      	ldr	r3, [r7, #24]
 800bbea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bbec:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800bbee:	69bb      	ldr	r3, [r7, #24]
 800bbf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbf2:	69fa      	ldr	r2, [r7, #28]
 800bbf4:	429a      	cmp	r2, r3
 800bbf6:	d059      	beq.n	800bcac <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bbf8:	69bb      	ldr	r3, [r7, #24]
 800bbfa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bbfc:	697a      	ldr	r2, [r7, #20]
 800bbfe:	429a      	cmp	r2, r3
 800bc00:	d154      	bne.n	800bcac <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800bc02:	4b2c      	ldr	r3, [pc, #176]	@ (800bcb4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	69ba      	ldr	r2, [r7, #24]
 800bc08:	429a      	cmp	r2, r3
 800bc0a:	d10b      	bne.n	800bc24 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800bc0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc10:	f383 8811 	msr	BASEPRI, r3
 800bc14:	f3bf 8f6f 	isb	sy
 800bc18:	f3bf 8f4f 	dsb	sy
 800bc1c:	60bb      	str	r3, [r7, #8]
}
 800bc1e:	bf00      	nop
 800bc20:	bf00      	nop
 800bc22:	e7fd      	b.n	800bc20 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800bc24:	69bb      	ldr	r3, [r7, #24]
 800bc26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc28:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800bc2a:	69bb      	ldr	r3, [r7, #24]
 800bc2c:	69fa      	ldr	r2, [r7, #28]
 800bc2e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bc30:	69bb      	ldr	r3, [r7, #24]
 800bc32:	699b      	ldr	r3, [r3, #24]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	db04      	blt.n	800bc42 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc38:	69fb      	ldr	r3, [r7, #28]
 800bc3a:	f1c3 0207 	rsb	r2, r3, #7
 800bc3e:	69bb      	ldr	r3, [r7, #24]
 800bc40:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bc42:	69bb      	ldr	r3, [r7, #24]
 800bc44:	6959      	ldr	r1, [r3, #20]
 800bc46:	693a      	ldr	r2, [r7, #16]
 800bc48:	4613      	mov	r3, r2
 800bc4a:	009b      	lsls	r3, r3, #2
 800bc4c:	4413      	add	r3, r2
 800bc4e:	009b      	lsls	r3, r3, #2
 800bc50:	4a19      	ldr	r2, [pc, #100]	@ (800bcb8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800bc52:	4413      	add	r3, r2
 800bc54:	4299      	cmp	r1, r3
 800bc56:	d129      	bne.n	800bcac <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bc58:	69bb      	ldr	r3, [r7, #24]
 800bc5a:	3304      	adds	r3, #4
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	f7fe f8d7 	bl	8009e10 <uxListRemove>
 800bc62:	4603      	mov	r3, r0
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d10a      	bne.n	800bc7e <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800bc68:	69bb      	ldr	r3, [r7, #24]
 800bc6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc6c:	2201      	movs	r2, #1
 800bc6e:	fa02 f303 	lsl.w	r3, r2, r3
 800bc72:	43da      	mvns	r2, r3
 800bc74:	4b11      	ldr	r3, [pc, #68]	@ (800bcbc <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	4013      	ands	r3, r2
 800bc7a:	4a10      	ldr	r2, [pc, #64]	@ (800bcbc <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800bc7c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800bc7e:	69bb      	ldr	r3, [r7, #24]
 800bc80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc82:	2201      	movs	r2, #1
 800bc84:	409a      	lsls	r2, r3
 800bc86:	4b0d      	ldr	r3, [pc, #52]	@ (800bcbc <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	4313      	orrs	r3, r2
 800bc8c:	4a0b      	ldr	r2, [pc, #44]	@ (800bcbc <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800bc8e:	6013      	str	r3, [r2, #0]
 800bc90:	69bb      	ldr	r3, [r7, #24]
 800bc92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc94:	4613      	mov	r3, r2
 800bc96:	009b      	lsls	r3, r3, #2
 800bc98:	4413      	add	r3, r2
 800bc9a:	009b      	lsls	r3, r3, #2
 800bc9c:	4a06      	ldr	r2, [pc, #24]	@ (800bcb8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800bc9e:	441a      	add	r2, r3
 800bca0:	69bb      	ldr	r3, [r7, #24]
 800bca2:	3304      	adds	r3, #4
 800bca4:	4619      	mov	r1, r3
 800bca6:	4610      	mov	r0, r2
 800bca8:	f7fe f855 	bl	8009d56 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bcac:	bf00      	nop
 800bcae:	3720      	adds	r7, #32
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	bd80      	pop	{r7, pc}
 800bcb4:	200051d0 	.word	0x200051d0
 800bcb8:	200051d4 	.word	0x200051d4
 800bcbc:	200052d8 	.word	0x200052d8

0800bcc0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800bcc0:	b480      	push	{r7}
 800bcc2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800bcc4:	4b07      	ldr	r3, [pc, #28]	@ (800bce4 <pvTaskIncrementMutexHeldCount+0x24>)
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d004      	beq.n	800bcd6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bccc:	4b05      	ldr	r3, [pc, #20]	@ (800bce4 <pvTaskIncrementMutexHeldCount+0x24>)
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bcd2:	3201      	adds	r2, #1
 800bcd4:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800bcd6:	4b03      	ldr	r3, [pc, #12]	@ (800bce4 <pvTaskIncrementMutexHeldCount+0x24>)
 800bcd8:	681b      	ldr	r3, [r3, #0]
	}
 800bcda:	4618      	mov	r0, r3
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce2:	4770      	bx	lr
 800bce4:	200051d0 	.word	0x200051d0

0800bce8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b084      	sub	sp, #16
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
 800bcf0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bcf2:	4b29      	ldr	r3, [pc, #164]	@ (800bd98 <prvAddCurrentTaskToDelayedList+0xb0>)
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bcf8:	4b28      	ldr	r3, [pc, #160]	@ (800bd9c <prvAddCurrentTaskToDelayedList+0xb4>)
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	3304      	adds	r3, #4
 800bcfe:	4618      	mov	r0, r3
 800bd00:	f7fe f886 	bl	8009e10 <uxListRemove>
 800bd04:	4603      	mov	r3, r0
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d10b      	bne.n	800bd22 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800bd0a:	4b24      	ldr	r3, [pc, #144]	@ (800bd9c <prvAddCurrentTaskToDelayedList+0xb4>)
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd10:	2201      	movs	r2, #1
 800bd12:	fa02 f303 	lsl.w	r3, r2, r3
 800bd16:	43da      	mvns	r2, r3
 800bd18:	4b21      	ldr	r3, [pc, #132]	@ (800bda0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	4013      	ands	r3, r2
 800bd1e:	4a20      	ldr	r2, [pc, #128]	@ (800bda0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800bd20:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd28:	d10a      	bne.n	800bd40 <prvAddCurrentTaskToDelayedList+0x58>
 800bd2a:	683b      	ldr	r3, [r7, #0]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d007      	beq.n	800bd40 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bd30:	4b1a      	ldr	r3, [pc, #104]	@ (800bd9c <prvAddCurrentTaskToDelayedList+0xb4>)
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	3304      	adds	r3, #4
 800bd36:	4619      	mov	r1, r3
 800bd38:	481a      	ldr	r0, [pc, #104]	@ (800bda4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800bd3a:	f7fe f80c 	bl	8009d56 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bd3e:	e026      	b.n	800bd8e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bd40:	68fa      	ldr	r2, [r7, #12]
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	4413      	add	r3, r2
 800bd46:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bd48:	4b14      	ldr	r3, [pc, #80]	@ (800bd9c <prvAddCurrentTaskToDelayedList+0xb4>)
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	68ba      	ldr	r2, [r7, #8]
 800bd4e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bd50:	68ba      	ldr	r2, [r7, #8]
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	429a      	cmp	r2, r3
 800bd56:	d209      	bcs.n	800bd6c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bd58:	4b13      	ldr	r3, [pc, #76]	@ (800bda8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800bd5a:	681a      	ldr	r2, [r3, #0]
 800bd5c:	4b0f      	ldr	r3, [pc, #60]	@ (800bd9c <prvAddCurrentTaskToDelayedList+0xb4>)
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	3304      	adds	r3, #4
 800bd62:	4619      	mov	r1, r3
 800bd64:	4610      	mov	r0, r2
 800bd66:	f7fe f81a 	bl	8009d9e <vListInsert>
}
 800bd6a:	e010      	b.n	800bd8e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bd6c:	4b0f      	ldr	r3, [pc, #60]	@ (800bdac <prvAddCurrentTaskToDelayedList+0xc4>)
 800bd6e:	681a      	ldr	r2, [r3, #0]
 800bd70:	4b0a      	ldr	r3, [pc, #40]	@ (800bd9c <prvAddCurrentTaskToDelayedList+0xb4>)
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	3304      	adds	r3, #4
 800bd76:	4619      	mov	r1, r3
 800bd78:	4610      	mov	r0, r2
 800bd7a:	f7fe f810 	bl	8009d9e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bd7e:	4b0c      	ldr	r3, [pc, #48]	@ (800bdb0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	68ba      	ldr	r2, [r7, #8]
 800bd84:	429a      	cmp	r2, r3
 800bd86:	d202      	bcs.n	800bd8e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800bd88:	4a09      	ldr	r2, [pc, #36]	@ (800bdb0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800bd8a:	68bb      	ldr	r3, [r7, #8]
 800bd8c:	6013      	str	r3, [r2, #0]
}
 800bd8e:	bf00      	nop
 800bd90:	3710      	adds	r7, #16
 800bd92:	46bd      	mov	sp, r7
 800bd94:	bd80      	pop	{r7, pc}
 800bd96:	bf00      	nop
 800bd98:	200052d4 	.word	0x200052d4
 800bd9c:	200051d0 	.word	0x200051d0
 800bda0:	200052d8 	.word	0x200052d8
 800bda4:	200052bc 	.word	0x200052bc
 800bda8:	2000528c 	.word	0x2000528c
 800bdac:	20005288 	.word	0x20005288
 800bdb0:	200052f0 	.word	0x200052f0

0800bdb4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bdb4:	b480      	push	{r7}
 800bdb6:	b085      	sub	sp, #20
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	60f8      	str	r0, [r7, #12]
 800bdbc:	60b9      	str	r1, [r7, #8]
 800bdbe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	3b04      	subs	r3, #4
 800bdc4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800bdcc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	3b04      	subs	r3, #4
 800bdd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bdd4:	68bb      	ldr	r3, [r7, #8]
 800bdd6:	f023 0201 	bic.w	r2, r3, #1
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	3b04      	subs	r3, #4
 800bde2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bde4:	4a0c      	ldr	r2, [pc, #48]	@ (800be18 <pxPortInitialiseStack+0x64>)
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	3b14      	subs	r3, #20
 800bdee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bdf0:	687a      	ldr	r2, [r7, #4]
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	3b04      	subs	r3, #4
 800bdfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	f06f 0202 	mvn.w	r2, #2
 800be02:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	3b20      	subs	r3, #32
 800be08:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800be0a:	68fb      	ldr	r3, [r7, #12]
}
 800be0c:	4618      	mov	r0, r3
 800be0e:	3714      	adds	r7, #20
 800be10:	46bd      	mov	sp, r7
 800be12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be16:	4770      	bx	lr
 800be18:	0800be1d 	.word	0x0800be1d

0800be1c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800be1c:	b480      	push	{r7}
 800be1e:	b085      	sub	sp, #20
 800be20:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800be22:	2300      	movs	r3, #0
 800be24:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800be26:	4b13      	ldr	r3, [pc, #76]	@ (800be74 <prvTaskExitError+0x58>)
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be2e:	d00b      	beq.n	800be48 <prvTaskExitError+0x2c>
	__asm volatile
 800be30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be34:	f383 8811 	msr	BASEPRI, r3
 800be38:	f3bf 8f6f 	isb	sy
 800be3c:	f3bf 8f4f 	dsb	sy
 800be40:	60fb      	str	r3, [r7, #12]
}
 800be42:	bf00      	nop
 800be44:	bf00      	nop
 800be46:	e7fd      	b.n	800be44 <prvTaskExitError+0x28>
	__asm volatile
 800be48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be4c:	f383 8811 	msr	BASEPRI, r3
 800be50:	f3bf 8f6f 	isb	sy
 800be54:	f3bf 8f4f 	dsb	sy
 800be58:	60bb      	str	r3, [r7, #8]
}
 800be5a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800be5c:	bf00      	nop
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d0fc      	beq.n	800be5e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800be64:	bf00      	nop
 800be66:	bf00      	nop
 800be68:	3714      	adds	r7, #20
 800be6a:	46bd      	mov	sp, r7
 800be6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be70:	4770      	bx	lr
 800be72:	bf00      	nop
 800be74:	20000098 	.word	0x20000098
	...

0800be80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800be80:	4b07      	ldr	r3, [pc, #28]	@ (800bea0 <pxCurrentTCBConst2>)
 800be82:	6819      	ldr	r1, [r3, #0]
 800be84:	6808      	ldr	r0, [r1, #0]
 800be86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be8a:	f380 8809 	msr	PSP, r0
 800be8e:	f3bf 8f6f 	isb	sy
 800be92:	f04f 0000 	mov.w	r0, #0
 800be96:	f380 8811 	msr	BASEPRI, r0
 800be9a:	4770      	bx	lr
 800be9c:	f3af 8000 	nop.w

0800bea0 <pxCurrentTCBConst2>:
 800bea0:	200051d0 	.word	0x200051d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bea4:	bf00      	nop
 800bea6:	bf00      	nop

0800bea8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bea8:	4808      	ldr	r0, [pc, #32]	@ (800becc <prvPortStartFirstTask+0x24>)
 800beaa:	6800      	ldr	r0, [r0, #0]
 800beac:	6800      	ldr	r0, [r0, #0]
 800beae:	f380 8808 	msr	MSP, r0
 800beb2:	f04f 0000 	mov.w	r0, #0
 800beb6:	f380 8814 	msr	CONTROL, r0
 800beba:	b662      	cpsie	i
 800bebc:	b661      	cpsie	f
 800bebe:	f3bf 8f4f 	dsb	sy
 800bec2:	f3bf 8f6f 	isb	sy
 800bec6:	df00      	svc	0
 800bec8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800beca:	bf00      	nop
 800becc:	e000ed08 	.word	0xe000ed08

0800bed0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b086      	sub	sp, #24
 800bed4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bed6:	4b47      	ldr	r3, [pc, #284]	@ (800bff4 <xPortStartScheduler+0x124>)
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	4a47      	ldr	r2, [pc, #284]	@ (800bff8 <xPortStartScheduler+0x128>)
 800bedc:	4293      	cmp	r3, r2
 800bede:	d10b      	bne.n	800bef8 <xPortStartScheduler+0x28>
	__asm volatile
 800bee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bee4:	f383 8811 	msr	BASEPRI, r3
 800bee8:	f3bf 8f6f 	isb	sy
 800beec:	f3bf 8f4f 	dsb	sy
 800bef0:	60fb      	str	r3, [r7, #12]
}
 800bef2:	bf00      	nop
 800bef4:	bf00      	nop
 800bef6:	e7fd      	b.n	800bef4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bef8:	4b3e      	ldr	r3, [pc, #248]	@ (800bff4 <xPortStartScheduler+0x124>)
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	4a3f      	ldr	r2, [pc, #252]	@ (800bffc <xPortStartScheduler+0x12c>)
 800befe:	4293      	cmp	r3, r2
 800bf00:	d10b      	bne.n	800bf1a <xPortStartScheduler+0x4a>
	__asm volatile
 800bf02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf06:	f383 8811 	msr	BASEPRI, r3
 800bf0a:	f3bf 8f6f 	isb	sy
 800bf0e:	f3bf 8f4f 	dsb	sy
 800bf12:	613b      	str	r3, [r7, #16]
}
 800bf14:	bf00      	nop
 800bf16:	bf00      	nop
 800bf18:	e7fd      	b.n	800bf16 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bf1a:	4b39      	ldr	r3, [pc, #228]	@ (800c000 <xPortStartScheduler+0x130>)
 800bf1c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bf1e:	697b      	ldr	r3, [r7, #20]
 800bf20:	781b      	ldrb	r3, [r3, #0]
 800bf22:	b2db      	uxtb	r3, r3
 800bf24:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bf26:	697b      	ldr	r3, [r7, #20]
 800bf28:	22ff      	movs	r2, #255	@ 0xff
 800bf2a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bf2c:	697b      	ldr	r3, [r7, #20]
 800bf2e:	781b      	ldrb	r3, [r3, #0]
 800bf30:	b2db      	uxtb	r3, r3
 800bf32:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bf34:	78fb      	ldrb	r3, [r7, #3]
 800bf36:	b2db      	uxtb	r3, r3
 800bf38:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800bf3c:	b2da      	uxtb	r2, r3
 800bf3e:	4b31      	ldr	r3, [pc, #196]	@ (800c004 <xPortStartScheduler+0x134>)
 800bf40:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bf42:	4b31      	ldr	r3, [pc, #196]	@ (800c008 <xPortStartScheduler+0x138>)
 800bf44:	2207      	movs	r2, #7
 800bf46:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bf48:	e009      	b.n	800bf5e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800bf4a:	4b2f      	ldr	r3, [pc, #188]	@ (800c008 <xPortStartScheduler+0x138>)
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	3b01      	subs	r3, #1
 800bf50:	4a2d      	ldr	r2, [pc, #180]	@ (800c008 <xPortStartScheduler+0x138>)
 800bf52:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bf54:	78fb      	ldrb	r3, [r7, #3]
 800bf56:	b2db      	uxtb	r3, r3
 800bf58:	005b      	lsls	r3, r3, #1
 800bf5a:	b2db      	uxtb	r3, r3
 800bf5c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bf5e:	78fb      	ldrb	r3, [r7, #3]
 800bf60:	b2db      	uxtb	r3, r3
 800bf62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bf66:	2b80      	cmp	r3, #128	@ 0x80
 800bf68:	d0ef      	beq.n	800bf4a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bf6a:	4b27      	ldr	r3, [pc, #156]	@ (800c008 <xPortStartScheduler+0x138>)
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	f1c3 0307 	rsb	r3, r3, #7
 800bf72:	2b04      	cmp	r3, #4
 800bf74:	d00b      	beq.n	800bf8e <xPortStartScheduler+0xbe>
	__asm volatile
 800bf76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf7a:	f383 8811 	msr	BASEPRI, r3
 800bf7e:	f3bf 8f6f 	isb	sy
 800bf82:	f3bf 8f4f 	dsb	sy
 800bf86:	60bb      	str	r3, [r7, #8]
}
 800bf88:	bf00      	nop
 800bf8a:	bf00      	nop
 800bf8c:	e7fd      	b.n	800bf8a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bf8e:	4b1e      	ldr	r3, [pc, #120]	@ (800c008 <xPortStartScheduler+0x138>)
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	021b      	lsls	r3, r3, #8
 800bf94:	4a1c      	ldr	r2, [pc, #112]	@ (800c008 <xPortStartScheduler+0x138>)
 800bf96:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bf98:	4b1b      	ldr	r3, [pc, #108]	@ (800c008 <xPortStartScheduler+0x138>)
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800bfa0:	4a19      	ldr	r2, [pc, #100]	@ (800c008 <xPortStartScheduler+0x138>)
 800bfa2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	b2da      	uxtb	r2, r3
 800bfa8:	697b      	ldr	r3, [r7, #20]
 800bfaa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bfac:	4b17      	ldr	r3, [pc, #92]	@ (800c00c <xPortStartScheduler+0x13c>)
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	4a16      	ldr	r2, [pc, #88]	@ (800c00c <xPortStartScheduler+0x13c>)
 800bfb2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800bfb6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bfb8:	4b14      	ldr	r3, [pc, #80]	@ (800c00c <xPortStartScheduler+0x13c>)
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	4a13      	ldr	r2, [pc, #76]	@ (800c00c <xPortStartScheduler+0x13c>)
 800bfbe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800bfc2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bfc4:	f000 f8da 	bl	800c17c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bfc8:	4b11      	ldr	r3, [pc, #68]	@ (800c010 <xPortStartScheduler+0x140>)
 800bfca:	2200      	movs	r2, #0
 800bfcc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bfce:	f000 f8f9 	bl	800c1c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bfd2:	4b10      	ldr	r3, [pc, #64]	@ (800c014 <xPortStartScheduler+0x144>)
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	4a0f      	ldr	r2, [pc, #60]	@ (800c014 <xPortStartScheduler+0x144>)
 800bfd8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800bfdc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bfde:	f7ff ff63 	bl	800bea8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bfe2:	f7ff fa71 	bl	800b4c8 <vTaskSwitchContext>
	prvTaskExitError();
 800bfe6:	f7ff ff19 	bl	800be1c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bfea:	2300      	movs	r3, #0
}
 800bfec:	4618      	mov	r0, r3
 800bfee:	3718      	adds	r7, #24
 800bff0:	46bd      	mov	sp, r7
 800bff2:	bd80      	pop	{r7, pc}
 800bff4:	e000ed00 	.word	0xe000ed00
 800bff8:	410fc271 	.word	0x410fc271
 800bffc:	410fc270 	.word	0x410fc270
 800c000:	e000e400 	.word	0xe000e400
 800c004:	200052fc 	.word	0x200052fc
 800c008:	20005300 	.word	0x20005300
 800c00c:	e000ed20 	.word	0xe000ed20
 800c010:	20000098 	.word	0x20000098
 800c014:	e000ef34 	.word	0xe000ef34

0800c018 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c018:	b480      	push	{r7}
 800c01a:	b083      	sub	sp, #12
 800c01c:	af00      	add	r7, sp, #0
	__asm volatile
 800c01e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c022:	f383 8811 	msr	BASEPRI, r3
 800c026:	f3bf 8f6f 	isb	sy
 800c02a:	f3bf 8f4f 	dsb	sy
 800c02e:	607b      	str	r3, [r7, #4]
}
 800c030:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c032:	4b10      	ldr	r3, [pc, #64]	@ (800c074 <vPortEnterCritical+0x5c>)
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	3301      	adds	r3, #1
 800c038:	4a0e      	ldr	r2, [pc, #56]	@ (800c074 <vPortEnterCritical+0x5c>)
 800c03a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c03c:	4b0d      	ldr	r3, [pc, #52]	@ (800c074 <vPortEnterCritical+0x5c>)
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	2b01      	cmp	r3, #1
 800c042:	d110      	bne.n	800c066 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c044:	4b0c      	ldr	r3, [pc, #48]	@ (800c078 <vPortEnterCritical+0x60>)
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	b2db      	uxtb	r3, r3
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d00b      	beq.n	800c066 <vPortEnterCritical+0x4e>
	__asm volatile
 800c04e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c052:	f383 8811 	msr	BASEPRI, r3
 800c056:	f3bf 8f6f 	isb	sy
 800c05a:	f3bf 8f4f 	dsb	sy
 800c05e:	603b      	str	r3, [r7, #0]
}
 800c060:	bf00      	nop
 800c062:	bf00      	nop
 800c064:	e7fd      	b.n	800c062 <vPortEnterCritical+0x4a>
	}
}
 800c066:	bf00      	nop
 800c068:	370c      	adds	r7, #12
 800c06a:	46bd      	mov	sp, r7
 800c06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c070:	4770      	bx	lr
 800c072:	bf00      	nop
 800c074:	20000098 	.word	0x20000098
 800c078:	e000ed04 	.word	0xe000ed04

0800c07c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c07c:	b480      	push	{r7}
 800c07e:	b083      	sub	sp, #12
 800c080:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c082:	4b12      	ldr	r3, [pc, #72]	@ (800c0cc <vPortExitCritical+0x50>)
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d10b      	bne.n	800c0a2 <vPortExitCritical+0x26>
	__asm volatile
 800c08a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c08e:	f383 8811 	msr	BASEPRI, r3
 800c092:	f3bf 8f6f 	isb	sy
 800c096:	f3bf 8f4f 	dsb	sy
 800c09a:	607b      	str	r3, [r7, #4]
}
 800c09c:	bf00      	nop
 800c09e:	bf00      	nop
 800c0a0:	e7fd      	b.n	800c09e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c0a2:	4b0a      	ldr	r3, [pc, #40]	@ (800c0cc <vPortExitCritical+0x50>)
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	3b01      	subs	r3, #1
 800c0a8:	4a08      	ldr	r2, [pc, #32]	@ (800c0cc <vPortExitCritical+0x50>)
 800c0aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c0ac:	4b07      	ldr	r3, [pc, #28]	@ (800c0cc <vPortExitCritical+0x50>)
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d105      	bne.n	800c0c0 <vPortExitCritical+0x44>
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c0b8:	683b      	ldr	r3, [r7, #0]
 800c0ba:	f383 8811 	msr	BASEPRI, r3
}
 800c0be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c0c0:	bf00      	nop
 800c0c2:	370c      	adds	r7, #12
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ca:	4770      	bx	lr
 800c0cc:	20000098 	.word	0x20000098

0800c0d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c0d0:	f3ef 8009 	mrs	r0, PSP
 800c0d4:	f3bf 8f6f 	isb	sy
 800c0d8:	4b15      	ldr	r3, [pc, #84]	@ (800c130 <pxCurrentTCBConst>)
 800c0da:	681a      	ldr	r2, [r3, #0]
 800c0dc:	f01e 0f10 	tst.w	lr, #16
 800c0e0:	bf08      	it	eq
 800c0e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c0e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0ea:	6010      	str	r0, [r2, #0]
 800c0ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c0f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c0f4:	f380 8811 	msr	BASEPRI, r0
 800c0f8:	f3bf 8f4f 	dsb	sy
 800c0fc:	f3bf 8f6f 	isb	sy
 800c100:	f7ff f9e2 	bl	800b4c8 <vTaskSwitchContext>
 800c104:	f04f 0000 	mov.w	r0, #0
 800c108:	f380 8811 	msr	BASEPRI, r0
 800c10c:	bc09      	pop	{r0, r3}
 800c10e:	6819      	ldr	r1, [r3, #0]
 800c110:	6808      	ldr	r0, [r1, #0]
 800c112:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c116:	f01e 0f10 	tst.w	lr, #16
 800c11a:	bf08      	it	eq
 800c11c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c120:	f380 8809 	msr	PSP, r0
 800c124:	f3bf 8f6f 	isb	sy
 800c128:	4770      	bx	lr
 800c12a:	bf00      	nop
 800c12c:	f3af 8000 	nop.w

0800c130 <pxCurrentTCBConst>:
 800c130:	200051d0 	.word	0x200051d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c134:	bf00      	nop
 800c136:	bf00      	nop

0800c138 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b082      	sub	sp, #8
 800c13c:	af00      	add	r7, sp, #0
	__asm volatile
 800c13e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c142:	f383 8811 	msr	BASEPRI, r3
 800c146:	f3bf 8f6f 	isb	sy
 800c14a:	f3bf 8f4f 	dsb	sy
 800c14e:	607b      	str	r3, [r7, #4]
}
 800c150:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c152:	f7ff f8ff 	bl	800b354 <xTaskIncrementTick>
 800c156:	4603      	mov	r3, r0
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d003      	beq.n	800c164 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c15c:	4b06      	ldr	r3, [pc, #24]	@ (800c178 <SysTick_Handler+0x40>)
 800c15e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c162:	601a      	str	r2, [r3, #0]
 800c164:	2300      	movs	r3, #0
 800c166:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c168:	683b      	ldr	r3, [r7, #0]
 800c16a:	f383 8811 	msr	BASEPRI, r3
}
 800c16e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c170:	bf00      	nop
 800c172:	3708      	adds	r7, #8
 800c174:	46bd      	mov	sp, r7
 800c176:	bd80      	pop	{r7, pc}
 800c178:	e000ed04 	.word	0xe000ed04

0800c17c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c17c:	b480      	push	{r7}
 800c17e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c180:	4b0b      	ldr	r3, [pc, #44]	@ (800c1b0 <vPortSetupTimerInterrupt+0x34>)
 800c182:	2200      	movs	r2, #0
 800c184:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c186:	4b0b      	ldr	r3, [pc, #44]	@ (800c1b4 <vPortSetupTimerInterrupt+0x38>)
 800c188:	2200      	movs	r2, #0
 800c18a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c18c:	4b0a      	ldr	r3, [pc, #40]	@ (800c1b8 <vPortSetupTimerInterrupt+0x3c>)
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	4a0a      	ldr	r2, [pc, #40]	@ (800c1bc <vPortSetupTimerInterrupt+0x40>)
 800c192:	fba2 2303 	umull	r2, r3, r2, r3
 800c196:	099b      	lsrs	r3, r3, #6
 800c198:	4a09      	ldr	r2, [pc, #36]	@ (800c1c0 <vPortSetupTimerInterrupt+0x44>)
 800c19a:	3b01      	subs	r3, #1
 800c19c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c19e:	4b04      	ldr	r3, [pc, #16]	@ (800c1b0 <vPortSetupTimerInterrupt+0x34>)
 800c1a0:	2207      	movs	r2, #7
 800c1a2:	601a      	str	r2, [r3, #0]
}
 800c1a4:	bf00      	nop
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ac:	4770      	bx	lr
 800c1ae:	bf00      	nop
 800c1b0:	e000e010 	.word	0xe000e010
 800c1b4:	e000e018 	.word	0xe000e018
 800c1b8:	20000000 	.word	0x20000000
 800c1bc:	10624dd3 	.word	0x10624dd3
 800c1c0:	e000e014 	.word	0xe000e014

0800c1c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c1c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c1d4 <vPortEnableVFP+0x10>
 800c1c8:	6801      	ldr	r1, [r0, #0]
 800c1ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c1ce:	6001      	str	r1, [r0, #0]
 800c1d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c1d2:	bf00      	nop
 800c1d4:	e000ed88 	.word	0xe000ed88

0800c1d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c1d8:	b480      	push	{r7}
 800c1da:	b085      	sub	sp, #20
 800c1dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c1de:	f3ef 8305 	mrs	r3, IPSR
 800c1e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	2b0f      	cmp	r3, #15
 800c1e8:	d915      	bls.n	800c216 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c1ea:	4a18      	ldr	r2, [pc, #96]	@ (800c24c <vPortValidateInterruptPriority+0x74>)
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	4413      	add	r3, r2
 800c1f0:	781b      	ldrb	r3, [r3, #0]
 800c1f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c1f4:	4b16      	ldr	r3, [pc, #88]	@ (800c250 <vPortValidateInterruptPriority+0x78>)
 800c1f6:	781b      	ldrb	r3, [r3, #0]
 800c1f8:	7afa      	ldrb	r2, [r7, #11]
 800c1fa:	429a      	cmp	r2, r3
 800c1fc:	d20b      	bcs.n	800c216 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c1fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c202:	f383 8811 	msr	BASEPRI, r3
 800c206:	f3bf 8f6f 	isb	sy
 800c20a:	f3bf 8f4f 	dsb	sy
 800c20e:	607b      	str	r3, [r7, #4]
}
 800c210:	bf00      	nop
 800c212:	bf00      	nop
 800c214:	e7fd      	b.n	800c212 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c216:	4b0f      	ldr	r3, [pc, #60]	@ (800c254 <vPortValidateInterruptPriority+0x7c>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c21e:	4b0e      	ldr	r3, [pc, #56]	@ (800c258 <vPortValidateInterruptPriority+0x80>)
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	429a      	cmp	r2, r3
 800c224:	d90b      	bls.n	800c23e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c22a:	f383 8811 	msr	BASEPRI, r3
 800c22e:	f3bf 8f6f 	isb	sy
 800c232:	f3bf 8f4f 	dsb	sy
 800c236:	603b      	str	r3, [r7, #0]
}
 800c238:	bf00      	nop
 800c23a:	bf00      	nop
 800c23c:	e7fd      	b.n	800c23a <vPortValidateInterruptPriority+0x62>
	}
 800c23e:	bf00      	nop
 800c240:	3714      	adds	r7, #20
 800c242:	46bd      	mov	sp, r7
 800c244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c248:	4770      	bx	lr
 800c24a:	bf00      	nop
 800c24c:	e000e3f0 	.word	0xe000e3f0
 800c250:	200052fc 	.word	0x200052fc
 800c254:	e000ed0c 	.word	0xe000ed0c
 800c258:	20005300 	.word	0x20005300

0800c25c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b08a      	sub	sp, #40	@ 0x28
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c264:	2300      	movs	r3, #0
 800c266:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c268:	f7fe ffa6 	bl	800b1b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c26c:	4b5c      	ldr	r3, [pc, #368]	@ (800c3e0 <pvPortMalloc+0x184>)
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d101      	bne.n	800c278 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c274:	f000 f924 	bl	800c4c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c278:	4b5a      	ldr	r3, [pc, #360]	@ (800c3e4 <pvPortMalloc+0x188>)
 800c27a:	681a      	ldr	r2, [r3, #0]
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	4013      	ands	r3, r2
 800c280:	2b00      	cmp	r3, #0
 800c282:	f040 8095 	bne.w	800c3b0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d01e      	beq.n	800c2ca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c28c:	2208      	movs	r2, #8
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	4413      	add	r3, r2
 800c292:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	f003 0307 	and.w	r3, r3, #7
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d015      	beq.n	800c2ca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	f023 0307 	bic.w	r3, r3, #7
 800c2a4:	3308      	adds	r3, #8
 800c2a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	f003 0307 	and.w	r3, r3, #7
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d00b      	beq.n	800c2ca <pvPortMalloc+0x6e>
	__asm volatile
 800c2b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2b6:	f383 8811 	msr	BASEPRI, r3
 800c2ba:	f3bf 8f6f 	isb	sy
 800c2be:	f3bf 8f4f 	dsb	sy
 800c2c2:	617b      	str	r3, [r7, #20]
}
 800c2c4:	bf00      	nop
 800c2c6:	bf00      	nop
 800c2c8:	e7fd      	b.n	800c2c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d06f      	beq.n	800c3b0 <pvPortMalloc+0x154>
 800c2d0:	4b45      	ldr	r3, [pc, #276]	@ (800c3e8 <pvPortMalloc+0x18c>)
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	687a      	ldr	r2, [r7, #4]
 800c2d6:	429a      	cmp	r2, r3
 800c2d8:	d86a      	bhi.n	800c3b0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c2da:	4b44      	ldr	r3, [pc, #272]	@ (800c3ec <pvPortMalloc+0x190>)
 800c2dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c2de:	4b43      	ldr	r3, [pc, #268]	@ (800c3ec <pvPortMalloc+0x190>)
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c2e4:	e004      	b.n	800c2f0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c2e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c2ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c2f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2f2:	685b      	ldr	r3, [r3, #4]
 800c2f4:	687a      	ldr	r2, [r7, #4]
 800c2f6:	429a      	cmp	r2, r3
 800c2f8:	d903      	bls.n	800c302 <pvPortMalloc+0xa6>
 800c2fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d1f1      	bne.n	800c2e6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c302:	4b37      	ldr	r3, [pc, #220]	@ (800c3e0 <pvPortMalloc+0x184>)
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c308:	429a      	cmp	r2, r3
 800c30a:	d051      	beq.n	800c3b0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c30c:	6a3b      	ldr	r3, [r7, #32]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	2208      	movs	r2, #8
 800c312:	4413      	add	r3, r2
 800c314:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c318:	681a      	ldr	r2, [r3, #0]
 800c31a:	6a3b      	ldr	r3, [r7, #32]
 800c31c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c31e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c320:	685a      	ldr	r2, [r3, #4]
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	1ad2      	subs	r2, r2, r3
 800c326:	2308      	movs	r3, #8
 800c328:	005b      	lsls	r3, r3, #1
 800c32a:	429a      	cmp	r2, r3
 800c32c:	d920      	bls.n	800c370 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c32e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	4413      	add	r3, r2
 800c334:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c336:	69bb      	ldr	r3, [r7, #24]
 800c338:	f003 0307 	and.w	r3, r3, #7
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d00b      	beq.n	800c358 <pvPortMalloc+0xfc>
	__asm volatile
 800c340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c344:	f383 8811 	msr	BASEPRI, r3
 800c348:	f3bf 8f6f 	isb	sy
 800c34c:	f3bf 8f4f 	dsb	sy
 800c350:	613b      	str	r3, [r7, #16]
}
 800c352:	bf00      	nop
 800c354:	bf00      	nop
 800c356:	e7fd      	b.n	800c354 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c35a:	685a      	ldr	r2, [r3, #4]
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	1ad2      	subs	r2, r2, r3
 800c360:	69bb      	ldr	r3, [r7, #24]
 800c362:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c366:	687a      	ldr	r2, [r7, #4]
 800c368:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c36a:	69b8      	ldr	r0, [r7, #24]
 800c36c:	f000 f90a 	bl	800c584 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c370:	4b1d      	ldr	r3, [pc, #116]	@ (800c3e8 <pvPortMalloc+0x18c>)
 800c372:	681a      	ldr	r2, [r3, #0]
 800c374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c376:	685b      	ldr	r3, [r3, #4]
 800c378:	1ad3      	subs	r3, r2, r3
 800c37a:	4a1b      	ldr	r2, [pc, #108]	@ (800c3e8 <pvPortMalloc+0x18c>)
 800c37c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c37e:	4b1a      	ldr	r3, [pc, #104]	@ (800c3e8 <pvPortMalloc+0x18c>)
 800c380:	681a      	ldr	r2, [r3, #0]
 800c382:	4b1b      	ldr	r3, [pc, #108]	@ (800c3f0 <pvPortMalloc+0x194>)
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	429a      	cmp	r2, r3
 800c388:	d203      	bcs.n	800c392 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c38a:	4b17      	ldr	r3, [pc, #92]	@ (800c3e8 <pvPortMalloc+0x18c>)
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	4a18      	ldr	r2, [pc, #96]	@ (800c3f0 <pvPortMalloc+0x194>)
 800c390:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c394:	685a      	ldr	r2, [r3, #4]
 800c396:	4b13      	ldr	r3, [pc, #76]	@ (800c3e4 <pvPortMalloc+0x188>)
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	431a      	orrs	r2, r3
 800c39c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c39e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c3a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c3a6:	4b13      	ldr	r3, [pc, #76]	@ (800c3f4 <pvPortMalloc+0x198>)
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	3301      	adds	r3, #1
 800c3ac:	4a11      	ldr	r2, [pc, #68]	@ (800c3f4 <pvPortMalloc+0x198>)
 800c3ae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c3b0:	f7fe ff10 	bl	800b1d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c3b4:	69fb      	ldr	r3, [r7, #28]
 800c3b6:	f003 0307 	and.w	r3, r3, #7
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d00b      	beq.n	800c3d6 <pvPortMalloc+0x17a>
	__asm volatile
 800c3be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3c2:	f383 8811 	msr	BASEPRI, r3
 800c3c6:	f3bf 8f6f 	isb	sy
 800c3ca:	f3bf 8f4f 	dsb	sy
 800c3ce:	60fb      	str	r3, [r7, #12]
}
 800c3d0:	bf00      	nop
 800c3d2:	bf00      	nop
 800c3d4:	e7fd      	b.n	800c3d2 <pvPortMalloc+0x176>
	return pvReturn;
 800c3d6:	69fb      	ldr	r3, [r7, #28]
}
 800c3d8:	4618      	mov	r0, r3
 800c3da:	3728      	adds	r7, #40	@ 0x28
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	bd80      	pop	{r7, pc}
 800c3e0:	20008f0c 	.word	0x20008f0c
 800c3e4:	20008f20 	.word	0x20008f20
 800c3e8:	20008f10 	.word	0x20008f10
 800c3ec:	20008f04 	.word	0x20008f04
 800c3f0:	20008f14 	.word	0x20008f14
 800c3f4:	20008f18 	.word	0x20008f18

0800c3f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b086      	sub	sp, #24
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d04f      	beq.n	800c4aa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c40a:	2308      	movs	r3, #8
 800c40c:	425b      	negs	r3, r3
 800c40e:	697a      	ldr	r2, [r7, #20]
 800c410:	4413      	add	r3, r2
 800c412:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c414:	697b      	ldr	r3, [r7, #20]
 800c416:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c418:	693b      	ldr	r3, [r7, #16]
 800c41a:	685a      	ldr	r2, [r3, #4]
 800c41c:	4b25      	ldr	r3, [pc, #148]	@ (800c4b4 <vPortFree+0xbc>)
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	4013      	ands	r3, r2
 800c422:	2b00      	cmp	r3, #0
 800c424:	d10b      	bne.n	800c43e <vPortFree+0x46>
	__asm volatile
 800c426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c42a:	f383 8811 	msr	BASEPRI, r3
 800c42e:	f3bf 8f6f 	isb	sy
 800c432:	f3bf 8f4f 	dsb	sy
 800c436:	60fb      	str	r3, [r7, #12]
}
 800c438:	bf00      	nop
 800c43a:	bf00      	nop
 800c43c:	e7fd      	b.n	800c43a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c43e:	693b      	ldr	r3, [r7, #16]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d00b      	beq.n	800c45e <vPortFree+0x66>
	__asm volatile
 800c446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c44a:	f383 8811 	msr	BASEPRI, r3
 800c44e:	f3bf 8f6f 	isb	sy
 800c452:	f3bf 8f4f 	dsb	sy
 800c456:	60bb      	str	r3, [r7, #8]
}
 800c458:	bf00      	nop
 800c45a:	bf00      	nop
 800c45c:	e7fd      	b.n	800c45a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c45e:	693b      	ldr	r3, [r7, #16]
 800c460:	685a      	ldr	r2, [r3, #4]
 800c462:	4b14      	ldr	r3, [pc, #80]	@ (800c4b4 <vPortFree+0xbc>)
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	4013      	ands	r3, r2
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d01e      	beq.n	800c4aa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c46c:	693b      	ldr	r3, [r7, #16]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d11a      	bne.n	800c4aa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c474:	693b      	ldr	r3, [r7, #16]
 800c476:	685a      	ldr	r2, [r3, #4]
 800c478:	4b0e      	ldr	r3, [pc, #56]	@ (800c4b4 <vPortFree+0xbc>)
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	43db      	mvns	r3, r3
 800c47e:	401a      	ands	r2, r3
 800c480:	693b      	ldr	r3, [r7, #16]
 800c482:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c484:	f7fe fe98 	bl	800b1b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c488:	693b      	ldr	r3, [r7, #16]
 800c48a:	685a      	ldr	r2, [r3, #4]
 800c48c:	4b0a      	ldr	r3, [pc, #40]	@ (800c4b8 <vPortFree+0xc0>)
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	4413      	add	r3, r2
 800c492:	4a09      	ldr	r2, [pc, #36]	@ (800c4b8 <vPortFree+0xc0>)
 800c494:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c496:	6938      	ldr	r0, [r7, #16]
 800c498:	f000 f874 	bl	800c584 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c49c:	4b07      	ldr	r3, [pc, #28]	@ (800c4bc <vPortFree+0xc4>)
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	3301      	adds	r3, #1
 800c4a2:	4a06      	ldr	r2, [pc, #24]	@ (800c4bc <vPortFree+0xc4>)
 800c4a4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c4a6:	f7fe fe95 	bl	800b1d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c4aa:	bf00      	nop
 800c4ac:	3718      	adds	r7, #24
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	bd80      	pop	{r7, pc}
 800c4b2:	bf00      	nop
 800c4b4:	20008f20 	.word	0x20008f20
 800c4b8:	20008f10 	.word	0x20008f10
 800c4bc:	20008f1c 	.word	0x20008f1c

0800c4c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c4c0:	b480      	push	{r7}
 800c4c2:	b085      	sub	sp, #20
 800c4c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c4c6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800c4ca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c4cc:	4b27      	ldr	r3, [pc, #156]	@ (800c56c <prvHeapInit+0xac>)
 800c4ce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	f003 0307 	and.w	r3, r3, #7
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d00c      	beq.n	800c4f4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	3307      	adds	r3, #7
 800c4de:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	f023 0307 	bic.w	r3, r3, #7
 800c4e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c4e8:	68ba      	ldr	r2, [r7, #8]
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	1ad3      	subs	r3, r2, r3
 800c4ee:	4a1f      	ldr	r2, [pc, #124]	@ (800c56c <prvHeapInit+0xac>)
 800c4f0:	4413      	add	r3, r2
 800c4f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c4f8:	4a1d      	ldr	r2, [pc, #116]	@ (800c570 <prvHeapInit+0xb0>)
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c4fe:	4b1c      	ldr	r3, [pc, #112]	@ (800c570 <prvHeapInit+0xb0>)
 800c500:	2200      	movs	r2, #0
 800c502:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	68ba      	ldr	r2, [r7, #8]
 800c508:	4413      	add	r3, r2
 800c50a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c50c:	2208      	movs	r2, #8
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	1a9b      	subs	r3, r3, r2
 800c512:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	f023 0307 	bic.w	r3, r3, #7
 800c51a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	4a15      	ldr	r2, [pc, #84]	@ (800c574 <prvHeapInit+0xb4>)
 800c520:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c522:	4b14      	ldr	r3, [pc, #80]	@ (800c574 <prvHeapInit+0xb4>)
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	2200      	movs	r2, #0
 800c528:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c52a:	4b12      	ldr	r3, [pc, #72]	@ (800c574 <prvHeapInit+0xb4>)
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	2200      	movs	r2, #0
 800c530:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c536:	683b      	ldr	r3, [r7, #0]
 800c538:	68fa      	ldr	r2, [r7, #12]
 800c53a:	1ad2      	subs	r2, r2, r3
 800c53c:	683b      	ldr	r3, [r7, #0]
 800c53e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c540:	4b0c      	ldr	r3, [pc, #48]	@ (800c574 <prvHeapInit+0xb4>)
 800c542:	681a      	ldr	r2, [r3, #0]
 800c544:	683b      	ldr	r3, [r7, #0]
 800c546:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c548:	683b      	ldr	r3, [r7, #0]
 800c54a:	685b      	ldr	r3, [r3, #4]
 800c54c:	4a0a      	ldr	r2, [pc, #40]	@ (800c578 <prvHeapInit+0xb8>)
 800c54e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c550:	683b      	ldr	r3, [r7, #0]
 800c552:	685b      	ldr	r3, [r3, #4]
 800c554:	4a09      	ldr	r2, [pc, #36]	@ (800c57c <prvHeapInit+0xbc>)
 800c556:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c558:	4b09      	ldr	r3, [pc, #36]	@ (800c580 <prvHeapInit+0xc0>)
 800c55a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c55e:	601a      	str	r2, [r3, #0]
}
 800c560:	bf00      	nop
 800c562:	3714      	adds	r7, #20
 800c564:	46bd      	mov	sp, r7
 800c566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56a:	4770      	bx	lr
 800c56c:	20005304 	.word	0x20005304
 800c570:	20008f04 	.word	0x20008f04
 800c574:	20008f0c 	.word	0x20008f0c
 800c578:	20008f14 	.word	0x20008f14
 800c57c:	20008f10 	.word	0x20008f10
 800c580:	20008f20 	.word	0x20008f20

0800c584 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c584:	b480      	push	{r7}
 800c586:	b085      	sub	sp, #20
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c58c:	4b28      	ldr	r3, [pc, #160]	@ (800c630 <prvInsertBlockIntoFreeList+0xac>)
 800c58e:	60fb      	str	r3, [r7, #12]
 800c590:	e002      	b.n	800c598 <prvInsertBlockIntoFreeList+0x14>
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	60fb      	str	r3, [r7, #12]
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	687a      	ldr	r2, [r7, #4]
 800c59e:	429a      	cmp	r2, r3
 800c5a0:	d8f7      	bhi.n	800c592 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	685b      	ldr	r3, [r3, #4]
 800c5aa:	68ba      	ldr	r2, [r7, #8]
 800c5ac:	4413      	add	r3, r2
 800c5ae:	687a      	ldr	r2, [r7, #4]
 800c5b0:	429a      	cmp	r2, r3
 800c5b2:	d108      	bne.n	800c5c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	685a      	ldr	r2, [r3, #4]
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	685b      	ldr	r3, [r3, #4]
 800c5bc:	441a      	add	r2, r3
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	685b      	ldr	r3, [r3, #4]
 800c5ce:	68ba      	ldr	r2, [r7, #8]
 800c5d0:	441a      	add	r2, r3
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	429a      	cmp	r2, r3
 800c5d8:	d118      	bne.n	800c60c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	681a      	ldr	r2, [r3, #0]
 800c5de:	4b15      	ldr	r3, [pc, #84]	@ (800c634 <prvInsertBlockIntoFreeList+0xb0>)
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	429a      	cmp	r2, r3
 800c5e4:	d00d      	beq.n	800c602 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	685a      	ldr	r2, [r3, #4]
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	685b      	ldr	r3, [r3, #4]
 800c5f0:	441a      	add	r2, r3
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	681a      	ldr	r2, [r3, #0]
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	601a      	str	r2, [r3, #0]
 800c600:	e008      	b.n	800c614 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c602:	4b0c      	ldr	r3, [pc, #48]	@ (800c634 <prvInsertBlockIntoFreeList+0xb0>)
 800c604:	681a      	ldr	r2, [r3, #0]
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	601a      	str	r2, [r3, #0]
 800c60a:	e003      	b.n	800c614 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	681a      	ldr	r2, [r3, #0]
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c614:	68fa      	ldr	r2, [r7, #12]
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	429a      	cmp	r2, r3
 800c61a:	d002      	beq.n	800c622 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	687a      	ldr	r2, [r7, #4]
 800c620:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c622:	bf00      	nop
 800c624:	3714      	adds	r7, #20
 800c626:	46bd      	mov	sp, r7
 800c628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62c:	4770      	bx	lr
 800c62e:	bf00      	nop
 800c630:	20008f04 	.word	0x20008f04
 800c634:	20008f0c 	.word	0x20008f0c

0800c638 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800c638:	b580      	push	{r7, lr}
 800c63a:	b084      	sub	sp, #16
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
 800c640:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800c642:	f007 fa8f 	bl	8013b64 <sys_timeouts_sleeptime>
 800c646:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c64e:	d10b      	bne.n	800c668 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800c650:	4813      	ldr	r0, [pc, #76]	@ (800c6a0 <tcpip_timeouts_mbox_fetch+0x68>)
 800c652:	f009 ffd4 	bl	80165fe <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800c656:	2200      	movs	r2, #0
 800c658:	6839      	ldr	r1, [r7, #0]
 800c65a:	6878      	ldr	r0, [r7, #4]
 800c65c:	f009 ff46 	bl	80164ec <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800c660:	480f      	ldr	r0, [pc, #60]	@ (800c6a0 <tcpip_timeouts_mbox_fetch+0x68>)
 800c662:	f009 ffbd 	bl	80165e0 <sys_mutex_lock>
    return;
 800c666:	e018      	b.n	800c69a <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d102      	bne.n	800c674 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800c66e:	f007 fa3f 	bl	8013af0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800c672:	e7e6      	b.n	800c642 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800c674:	480a      	ldr	r0, [pc, #40]	@ (800c6a0 <tcpip_timeouts_mbox_fetch+0x68>)
 800c676:	f009 ffc2 	bl	80165fe <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800c67a:	68fa      	ldr	r2, [r7, #12]
 800c67c:	6839      	ldr	r1, [r7, #0]
 800c67e:	6878      	ldr	r0, [r7, #4]
 800c680:	f009 ff34 	bl	80164ec <sys_arch_mbox_fetch>
 800c684:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800c686:	4806      	ldr	r0, [pc, #24]	@ (800c6a0 <tcpip_timeouts_mbox_fetch+0x68>)
 800c688:	f009 ffaa 	bl	80165e0 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800c68c:	68bb      	ldr	r3, [r7, #8]
 800c68e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c692:	d102      	bne.n	800c69a <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800c694:	f007 fa2c 	bl	8013af0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800c698:	e7d3      	b.n	800c642 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800c69a:	3710      	adds	r7, #16
 800c69c:	46bd      	mov	sp, r7
 800c69e:	bd80      	pop	{r7, pc}
 800c6a0:	20008f30 	.word	0x20008f30

0800c6a4 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800c6a4:	b580      	push	{r7, lr}
 800c6a6:	b084      	sub	sp, #16
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800c6ac:	4810      	ldr	r0, [pc, #64]	@ (800c6f0 <tcpip_thread+0x4c>)
 800c6ae:	f009 ff97 	bl	80165e0 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800c6b2:	4b10      	ldr	r3, [pc, #64]	@ (800c6f4 <tcpip_thread+0x50>)
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d005      	beq.n	800c6c6 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800c6ba:	4b0e      	ldr	r3, [pc, #56]	@ (800c6f4 <tcpip_thread+0x50>)
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	4a0e      	ldr	r2, [pc, #56]	@ (800c6f8 <tcpip_thread+0x54>)
 800c6c0:	6812      	ldr	r2, [r2, #0]
 800c6c2:	4610      	mov	r0, r2
 800c6c4:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800c6c6:	f107 030c 	add.w	r3, r7, #12
 800c6ca:	4619      	mov	r1, r3
 800c6cc:	480b      	ldr	r0, [pc, #44]	@ (800c6fc <tcpip_thread+0x58>)
 800c6ce:	f7ff ffb3 	bl	800c638 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d106      	bne.n	800c6e6 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800c6d8:	4b09      	ldr	r3, [pc, #36]	@ (800c700 <tcpip_thread+0x5c>)
 800c6da:	2291      	movs	r2, #145	@ 0x91
 800c6dc:	4909      	ldr	r1, [pc, #36]	@ (800c704 <tcpip_thread+0x60>)
 800c6de:	480a      	ldr	r0, [pc, #40]	@ (800c708 <tcpip_thread+0x64>)
 800c6e0:	f00a fdf8 	bl	80172d4 <iprintf>
      continue;
 800c6e4:	e003      	b.n	800c6ee <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	f000 f80f 	bl	800c70c <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800c6ee:	e7ea      	b.n	800c6c6 <tcpip_thread+0x22>
 800c6f0:	20008f30 	.word	0x20008f30
 800c6f4:	20008f24 	.word	0x20008f24
 800c6f8:	20008f28 	.word	0x20008f28
 800c6fc:	20008f2c 	.word	0x20008f2c
 800c700:	080187d0 	.word	0x080187d0
 800c704:	08018800 	.word	0x08018800
 800c708:	08018820 	.word	0x08018820

0800c70c <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800c70c:	b580      	push	{r7, lr}
 800c70e:	b082      	sub	sp, #8
 800c710:	af00      	add	r7, sp, #0
 800c712:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	781b      	ldrb	r3, [r3, #0]
 800c718:	2b02      	cmp	r3, #2
 800c71a:	d026      	beq.n	800c76a <tcpip_thread_handle_msg+0x5e>
 800c71c:	2b02      	cmp	r3, #2
 800c71e:	dc2b      	bgt.n	800c778 <tcpip_thread_handle_msg+0x6c>
 800c720:	2b00      	cmp	r3, #0
 800c722:	d002      	beq.n	800c72a <tcpip_thread_handle_msg+0x1e>
 800c724:	2b01      	cmp	r3, #1
 800c726:	d015      	beq.n	800c754 <tcpip_thread_handle_msg+0x48>
 800c728:	e026      	b.n	800c778 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	68db      	ldr	r3, [r3, #12]
 800c72e:	687a      	ldr	r2, [r7, #4]
 800c730:	6850      	ldr	r0, [r2, #4]
 800c732:	687a      	ldr	r2, [r7, #4]
 800c734:	6892      	ldr	r2, [r2, #8]
 800c736:	4611      	mov	r1, r2
 800c738:	4798      	blx	r3
 800c73a:	4603      	mov	r3, r0
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d004      	beq.n	800c74a <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	685b      	ldr	r3, [r3, #4]
 800c744:	4618      	mov	r0, r3
 800c746:	f001 fcd9 	bl	800e0fc <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800c74a:	6879      	ldr	r1, [r7, #4]
 800c74c:	2009      	movs	r0, #9
 800c74e:	f000 fe63 	bl	800d418 <memp_free>
      break;
 800c752:	e018      	b.n	800c786 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	685b      	ldr	r3, [r3, #4]
 800c758:	687a      	ldr	r2, [r7, #4]
 800c75a:	6892      	ldr	r2, [r2, #8]
 800c75c:	4610      	mov	r0, r2
 800c75e:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800c760:	6879      	ldr	r1, [r7, #4]
 800c762:	2008      	movs	r0, #8
 800c764:	f000 fe58 	bl	800d418 <memp_free>
      break;
 800c768:	e00d      	b.n	800c786 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	685b      	ldr	r3, [r3, #4]
 800c76e:	687a      	ldr	r2, [r7, #4]
 800c770:	6892      	ldr	r2, [r2, #8]
 800c772:	4610      	mov	r0, r2
 800c774:	4798      	blx	r3
      break;
 800c776:	e006      	b.n	800c786 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800c778:	4b05      	ldr	r3, [pc, #20]	@ (800c790 <tcpip_thread_handle_msg+0x84>)
 800c77a:	22cf      	movs	r2, #207	@ 0xcf
 800c77c:	4905      	ldr	r1, [pc, #20]	@ (800c794 <tcpip_thread_handle_msg+0x88>)
 800c77e:	4806      	ldr	r0, [pc, #24]	@ (800c798 <tcpip_thread_handle_msg+0x8c>)
 800c780:	f00a fda8 	bl	80172d4 <iprintf>
      break;
 800c784:	bf00      	nop
  }
}
 800c786:	bf00      	nop
 800c788:	3708      	adds	r7, #8
 800c78a:	46bd      	mov	sp, r7
 800c78c:	bd80      	pop	{r7, pc}
 800c78e:	bf00      	nop
 800c790:	080187d0 	.word	0x080187d0
 800c794:	08018800 	.word	0x08018800
 800c798:	08018820 	.word	0x08018820

0800c79c <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800c79c:	b580      	push	{r7, lr}
 800c79e:	b086      	sub	sp, #24
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	60f8      	str	r0, [r7, #12]
 800c7a4:	60b9      	str	r1, [r7, #8]
 800c7a6:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800c7a8:	481a      	ldr	r0, [pc, #104]	@ (800c814 <tcpip_inpkt+0x78>)
 800c7aa:	f009 fede 	bl	801656a <sys_mbox_valid>
 800c7ae:	4603      	mov	r3, r0
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d105      	bne.n	800c7c0 <tcpip_inpkt+0x24>
 800c7b4:	4b18      	ldr	r3, [pc, #96]	@ (800c818 <tcpip_inpkt+0x7c>)
 800c7b6:	22fc      	movs	r2, #252	@ 0xfc
 800c7b8:	4918      	ldr	r1, [pc, #96]	@ (800c81c <tcpip_inpkt+0x80>)
 800c7ba:	4819      	ldr	r0, [pc, #100]	@ (800c820 <tcpip_inpkt+0x84>)
 800c7bc:	f00a fd8a 	bl	80172d4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800c7c0:	2009      	movs	r0, #9
 800c7c2:	f000 fdb3 	bl	800d32c <memp_malloc>
 800c7c6:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800c7c8:	697b      	ldr	r3, [r7, #20]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d102      	bne.n	800c7d4 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800c7ce:	f04f 33ff 	mov.w	r3, #4294967295
 800c7d2:	e01a      	b.n	800c80a <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800c7d4:	697b      	ldr	r3, [r7, #20]
 800c7d6:	2200      	movs	r2, #0
 800c7d8:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800c7da:	697b      	ldr	r3, [r7, #20]
 800c7dc:	68fa      	ldr	r2, [r7, #12]
 800c7de:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800c7e0:	697b      	ldr	r3, [r7, #20]
 800c7e2:	68ba      	ldr	r2, [r7, #8]
 800c7e4:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800c7e6:	697b      	ldr	r3, [r7, #20]
 800c7e8:	687a      	ldr	r2, [r7, #4]
 800c7ea:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800c7ec:	6979      	ldr	r1, [r7, #20]
 800c7ee:	4809      	ldr	r0, [pc, #36]	@ (800c814 <tcpip_inpkt+0x78>)
 800c7f0:	f009 fe62 	bl	80164b8 <sys_mbox_trypost>
 800c7f4:	4603      	mov	r3, r0
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d006      	beq.n	800c808 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800c7fa:	6979      	ldr	r1, [r7, #20]
 800c7fc:	2009      	movs	r0, #9
 800c7fe:	f000 fe0b 	bl	800d418 <memp_free>
    return ERR_MEM;
 800c802:	f04f 33ff 	mov.w	r3, #4294967295
 800c806:	e000      	b.n	800c80a <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800c808:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800c80a:	4618      	mov	r0, r3
 800c80c:	3718      	adds	r7, #24
 800c80e:	46bd      	mov	sp, r7
 800c810:	bd80      	pop	{r7, pc}
 800c812:	bf00      	nop
 800c814:	20008f2c 	.word	0x20008f2c
 800c818:	080187d0 	.word	0x080187d0
 800c81c:	08018848 	.word	0x08018848
 800c820:	08018820 	.word	0x08018820

0800c824 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800c824:	b580      	push	{r7, lr}
 800c826:	b082      	sub	sp, #8
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
 800c82c:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800c82e:	683b      	ldr	r3, [r7, #0]
 800c830:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c834:	f003 0318 	and.w	r3, r3, #24
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d006      	beq.n	800c84a <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800c83c:	4a08      	ldr	r2, [pc, #32]	@ (800c860 <tcpip_input+0x3c>)
 800c83e:	6839      	ldr	r1, [r7, #0]
 800c840:	6878      	ldr	r0, [r7, #4]
 800c842:	f7ff ffab 	bl	800c79c <tcpip_inpkt>
 800c846:	4603      	mov	r3, r0
 800c848:	e005      	b.n	800c856 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800c84a:	4a06      	ldr	r2, [pc, #24]	@ (800c864 <tcpip_input+0x40>)
 800c84c:	6839      	ldr	r1, [r7, #0]
 800c84e:	6878      	ldr	r0, [r7, #4]
 800c850:	f7ff ffa4 	bl	800c79c <tcpip_inpkt>
 800c854:	4603      	mov	r3, r0
}
 800c856:	4618      	mov	r0, r3
 800c858:	3708      	adds	r7, #8
 800c85a:	46bd      	mov	sp, r7
 800c85c:	bd80      	pop	{r7, pc}
 800c85e:	bf00      	nop
 800c860:	080162c9 	.word	0x080162c9
 800c864:	080151d1 	.word	0x080151d1

0800c868 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b084      	sub	sp, #16
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	6078      	str	r0, [r7, #4]
 800c870:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800c872:	4819      	ldr	r0, [pc, #100]	@ (800c8d8 <tcpip_try_callback+0x70>)
 800c874:	f009 fe79 	bl	801656a <sys_mbox_valid>
 800c878:	4603      	mov	r3, r0
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d106      	bne.n	800c88c <tcpip_try_callback+0x24>
 800c87e:	4b17      	ldr	r3, [pc, #92]	@ (800c8dc <tcpip_try_callback+0x74>)
 800c880:	f240 125d 	movw	r2, #349	@ 0x15d
 800c884:	4916      	ldr	r1, [pc, #88]	@ (800c8e0 <tcpip_try_callback+0x78>)
 800c886:	4817      	ldr	r0, [pc, #92]	@ (800c8e4 <tcpip_try_callback+0x7c>)
 800c888:	f00a fd24 	bl	80172d4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800c88c:	2008      	movs	r0, #8
 800c88e:	f000 fd4d 	bl	800d32c <memp_malloc>
 800c892:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	2b00      	cmp	r3, #0
 800c898:	d102      	bne.n	800c8a0 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800c89a:	f04f 33ff 	mov.w	r3, #4294967295
 800c89e:	e017      	b.n	800c8d0 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	2201      	movs	r2, #1
 800c8a4:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	687a      	ldr	r2, [r7, #4]
 800c8aa:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	683a      	ldr	r2, [r7, #0]
 800c8b0:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800c8b2:	68f9      	ldr	r1, [r7, #12]
 800c8b4:	4808      	ldr	r0, [pc, #32]	@ (800c8d8 <tcpip_try_callback+0x70>)
 800c8b6:	f009 fdff 	bl	80164b8 <sys_mbox_trypost>
 800c8ba:	4603      	mov	r3, r0
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d006      	beq.n	800c8ce <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800c8c0:	68f9      	ldr	r1, [r7, #12]
 800c8c2:	2008      	movs	r0, #8
 800c8c4:	f000 fda8 	bl	800d418 <memp_free>
    return ERR_MEM;
 800c8c8:	f04f 33ff 	mov.w	r3, #4294967295
 800c8cc:	e000      	b.n	800c8d0 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800c8ce:	2300      	movs	r3, #0
}
 800c8d0:	4618      	mov	r0, r3
 800c8d2:	3710      	adds	r7, #16
 800c8d4:	46bd      	mov	sp, r7
 800c8d6:	bd80      	pop	{r7, pc}
 800c8d8:	20008f2c 	.word	0x20008f2c
 800c8dc:	080187d0 	.word	0x080187d0
 800c8e0:	08018848 	.word	0x08018848
 800c8e4:	08018820 	.word	0x08018820

0800c8e8 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	b084      	sub	sp, #16
 800c8ec:	af02      	add	r7, sp, #8
 800c8ee:	6078      	str	r0, [r7, #4]
 800c8f0:	6039      	str	r1, [r7, #0]
  lwip_init();
 800c8f2:	f000 f872 	bl	800c9da <lwip_init>

  tcpip_init_done = initfunc;
 800c8f6:	4a17      	ldr	r2, [pc, #92]	@ (800c954 <tcpip_init+0x6c>)
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800c8fc:	4a16      	ldr	r2, [pc, #88]	@ (800c958 <tcpip_init+0x70>)
 800c8fe:	683b      	ldr	r3, [r7, #0]
 800c900:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800c902:	2106      	movs	r1, #6
 800c904:	4815      	ldr	r0, [pc, #84]	@ (800c95c <tcpip_init+0x74>)
 800c906:	f009 fdb5 	bl	8016474 <sys_mbox_new>
 800c90a:	4603      	mov	r3, r0
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d006      	beq.n	800c91e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800c910:	4b13      	ldr	r3, [pc, #76]	@ (800c960 <tcpip_init+0x78>)
 800c912:	f240 2261 	movw	r2, #609	@ 0x261
 800c916:	4913      	ldr	r1, [pc, #76]	@ (800c964 <tcpip_init+0x7c>)
 800c918:	4813      	ldr	r0, [pc, #76]	@ (800c968 <tcpip_init+0x80>)
 800c91a:	f00a fcdb 	bl	80172d4 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800c91e:	4813      	ldr	r0, [pc, #76]	@ (800c96c <tcpip_init+0x84>)
 800c920:	f009 fe42 	bl	80165a8 <sys_mutex_new>
 800c924:	4603      	mov	r3, r0
 800c926:	2b00      	cmp	r3, #0
 800c928:	d006      	beq.n	800c938 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800c92a:	4b0d      	ldr	r3, [pc, #52]	@ (800c960 <tcpip_init+0x78>)
 800c92c:	f240 2265 	movw	r2, #613	@ 0x265
 800c930:	490f      	ldr	r1, [pc, #60]	@ (800c970 <tcpip_init+0x88>)
 800c932:	480d      	ldr	r0, [pc, #52]	@ (800c968 <tcpip_init+0x80>)
 800c934:	f00a fcce 	bl	80172d4 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800c938:	2300      	movs	r3, #0
 800c93a:	9300      	str	r3, [sp, #0]
 800c93c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c940:	2200      	movs	r2, #0
 800c942:	490c      	ldr	r1, [pc, #48]	@ (800c974 <tcpip_init+0x8c>)
 800c944:	480c      	ldr	r0, [pc, #48]	@ (800c978 <tcpip_init+0x90>)
 800c946:	f009 fe67 	bl	8016618 <sys_thread_new>
}
 800c94a:	bf00      	nop
 800c94c:	3708      	adds	r7, #8
 800c94e:	46bd      	mov	sp, r7
 800c950:	bd80      	pop	{r7, pc}
 800c952:	bf00      	nop
 800c954:	20008f24 	.word	0x20008f24
 800c958:	20008f28 	.word	0x20008f28
 800c95c:	20008f2c 	.word	0x20008f2c
 800c960:	080187d0 	.word	0x080187d0
 800c964:	08018858 	.word	0x08018858
 800c968:	08018820 	.word	0x08018820
 800c96c:	20008f30 	.word	0x20008f30
 800c970:	0801887c 	.word	0x0801887c
 800c974:	0800c6a5 	.word	0x0800c6a5
 800c978:	080188a0 	.word	0x080188a0

0800c97c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800c97c:	b480      	push	{r7}
 800c97e:	b083      	sub	sp, #12
 800c980:	af00      	add	r7, sp, #0
 800c982:	4603      	mov	r3, r0
 800c984:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800c986:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c98a:	021b      	lsls	r3, r3, #8
 800c98c:	b21a      	sxth	r2, r3
 800c98e:	88fb      	ldrh	r3, [r7, #6]
 800c990:	0a1b      	lsrs	r3, r3, #8
 800c992:	b29b      	uxth	r3, r3
 800c994:	b21b      	sxth	r3, r3
 800c996:	4313      	orrs	r3, r2
 800c998:	b21b      	sxth	r3, r3
 800c99a:	b29b      	uxth	r3, r3
}
 800c99c:	4618      	mov	r0, r3
 800c99e:	370c      	adds	r7, #12
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a6:	4770      	bx	lr

0800c9a8 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800c9a8:	b480      	push	{r7}
 800c9aa:	b083      	sub	sp, #12
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	061a      	lsls	r2, r3, #24
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	021b      	lsls	r3, r3, #8
 800c9b8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800c9bc:	431a      	orrs	r2, r3
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	0a1b      	lsrs	r3, r3, #8
 800c9c2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800c9c6:	431a      	orrs	r2, r3
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	0e1b      	lsrs	r3, r3, #24
 800c9cc:	4313      	orrs	r3, r2
}
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	370c      	adds	r7, #12
 800c9d2:	46bd      	mov	sp, r7
 800c9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d8:	4770      	bx	lr

0800c9da <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800c9da:	b580      	push	{r7, lr}
 800c9dc:	b082      	sub	sp, #8
 800c9de:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800c9e0:	2300      	movs	r3, #0
 800c9e2:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800c9e4:	f009 fdd2 	bl	801658c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800c9e8:	f000 f8d4 	bl	800cb94 <mem_init>
  memp_init();
 800c9ec:	f000 fc30 	bl	800d250 <memp_init>
  pbuf_init();
  netif_init();
 800c9f0:	f000 fd3c 	bl	800d46c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800c9f4:	f007 f8ee 	bl	8013bd4 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800c9f8:	f001 fe1a 	bl	800e630 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800c9fc:	f007 f830 	bl	8013a60 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800ca00:	bf00      	nop
 800ca02:	3708      	adds	r7, #8
 800ca04:	46bd      	mov	sp, r7
 800ca06:	bd80      	pop	{r7, pc}

0800ca08 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800ca08:	b480      	push	{r7}
 800ca0a:	b083      	sub	sp, #12
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	4603      	mov	r3, r0
 800ca10:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800ca12:	4b05      	ldr	r3, [pc, #20]	@ (800ca28 <ptr_to_mem+0x20>)
 800ca14:	681a      	ldr	r2, [r3, #0]
 800ca16:	88fb      	ldrh	r3, [r7, #6]
 800ca18:	4413      	add	r3, r2
}
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	370c      	adds	r7, #12
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca24:	4770      	bx	lr
 800ca26:	bf00      	nop
 800ca28:	200095a0 	.word	0x200095a0

0800ca2c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800ca2c:	b480      	push	{r7}
 800ca2e:	b083      	sub	sp, #12
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800ca34:	4b05      	ldr	r3, [pc, #20]	@ (800ca4c <mem_to_ptr+0x20>)
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	687a      	ldr	r2, [r7, #4]
 800ca3a:	1ad3      	subs	r3, r2, r3
 800ca3c:	b29b      	uxth	r3, r3
}
 800ca3e:	4618      	mov	r0, r3
 800ca40:	370c      	adds	r7, #12
 800ca42:	46bd      	mov	sp, r7
 800ca44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca48:	4770      	bx	lr
 800ca4a:	bf00      	nop
 800ca4c:	200095a0 	.word	0x200095a0

0800ca50 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800ca50:	b590      	push	{r4, r7, lr}
 800ca52:	b085      	sub	sp, #20
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800ca58:	4b45      	ldr	r3, [pc, #276]	@ (800cb70 <plug_holes+0x120>)
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	687a      	ldr	r2, [r7, #4]
 800ca5e:	429a      	cmp	r2, r3
 800ca60:	d206      	bcs.n	800ca70 <plug_holes+0x20>
 800ca62:	4b44      	ldr	r3, [pc, #272]	@ (800cb74 <plug_holes+0x124>)
 800ca64:	f240 12df 	movw	r2, #479	@ 0x1df
 800ca68:	4943      	ldr	r1, [pc, #268]	@ (800cb78 <plug_holes+0x128>)
 800ca6a:	4844      	ldr	r0, [pc, #272]	@ (800cb7c <plug_holes+0x12c>)
 800ca6c:	f00a fc32 	bl	80172d4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800ca70:	4b43      	ldr	r3, [pc, #268]	@ (800cb80 <plug_holes+0x130>)
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	687a      	ldr	r2, [r7, #4]
 800ca76:	429a      	cmp	r2, r3
 800ca78:	d306      	bcc.n	800ca88 <plug_holes+0x38>
 800ca7a:	4b3e      	ldr	r3, [pc, #248]	@ (800cb74 <plug_holes+0x124>)
 800ca7c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800ca80:	4940      	ldr	r1, [pc, #256]	@ (800cb84 <plug_holes+0x134>)
 800ca82:	483e      	ldr	r0, [pc, #248]	@ (800cb7c <plug_holes+0x12c>)
 800ca84:	f00a fc26 	bl	80172d4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	791b      	ldrb	r3, [r3, #4]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d006      	beq.n	800ca9e <plug_holes+0x4e>
 800ca90:	4b38      	ldr	r3, [pc, #224]	@ (800cb74 <plug_holes+0x124>)
 800ca92:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800ca96:	493c      	ldr	r1, [pc, #240]	@ (800cb88 <plug_holes+0x138>)
 800ca98:	4838      	ldr	r0, [pc, #224]	@ (800cb7c <plug_holes+0x12c>)
 800ca9a:	f00a fc1b 	bl	80172d4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	881b      	ldrh	r3, [r3, #0]
 800caa2:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800caa6:	d906      	bls.n	800cab6 <plug_holes+0x66>
 800caa8:	4b32      	ldr	r3, [pc, #200]	@ (800cb74 <plug_holes+0x124>)
 800caaa:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800caae:	4937      	ldr	r1, [pc, #220]	@ (800cb8c <plug_holes+0x13c>)
 800cab0:	4832      	ldr	r0, [pc, #200]	@ (800cb7c <plug_holes+0x12c>)
 800cab2:	f00a fc0f 	bl	80172d4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	881b      	ldrh	r3, [r3, #0]
 800caba:	4618      	mov	r0, r3
 800cabc:	f7ff ffa4 	bl	800ca08 <ptr_to_mem>
 800cac0:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800cac2:	687a      	ldr	r2, [r7, #4]
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	429a      	cmp	r2, r3
 800cac8:	d024      	beq.n	800cb14 <plug_holes+0xc4>
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	791b      	ldrb	r3, [r3, #4]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d120      	bne.n	800cb14 <plug_holes+0xc4>
 800cad2:	4b2b      	ldr	r3, [pc, #172]	@ (800cb80 <plug_holes+0x130>)
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	68fa      	ldr	r2, [r7, #12]
 800cad8:	429a      	cmp	r2, r3
 800cada:	d01b      	beq.n	800cb14 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800cadc:	4b2c      	ldr	r3, [pc, #176]	@ (800cb90 <plug_holes+0x140>)
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	68fa      	ldr	r2, [r7, #12]
 800cae2:	429a      	cmp	r2, r3
 800cae4:	d102      	bne.n	800caec <plug_holes+0x9c>
      lfree = mem;
 800cae6:	4a2a      	ldr	r2, [pc, #168]	@ (800cb90 <plug_holes+0x140>)
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	881a      	ldrh	r2, [r3, #0]
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	881b      	ldrh	r3, [r3, #0]
 800caf8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800cafc:	d00a      	beq.n	800cb14 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	881b      	ldrh	r3, [r3, #0]
 800cb02:	4618      	mov	r0, r3
 800cb04:	f7ff ff80 	bl	800ca08 <ptr_to_mem>
 800cb08:	4604      	mov	r4, r0
 800cb0a:	6878      	ldr	r0, [r7, #4]
 800cb0c:	f7ff ff8e 	bl	800ca2c <mem_to_ptr>
 800cb10:	4603      	mov	r3, r0
 800cb12:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	885b      	ldrh	r3, [r3, #2]
 800cb18:	4618      	mov	r0, r3
 800cb1a:	f7ff ff75 	bl	800ca08 <ptr_to_mem>
 800cb1e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800cb20:	68ba      	ldr	r2, [r7, #8]
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	429a      	cmp	r2, r3
 800cb26:	d01f      	beq.n	800cb68 <plug_holes+0x118>
 800cb28:	68bb      	ldr	r3, [r7, #8]
 800cb2a:	791b      	ldrb	r3, [r3, #4]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d11b      	bne.n	800cb68 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800cb30:	4b17      	ldr	r3, [pc, #92]	@ (800cb90 <plug_holes+0x140>)
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	687a      	ldr	r2, [r7, #4]
 800cb36:	429a      	cmp	r2, r3
 800cb38:	d102      	bne.n	800cb40 <plug_holes+0xf0>
      lfree = pmem;
 800cb3a:	4a15      	ldr	r2, [pc, #84]	@ (800cb90 <plug_holes+0x140>)
 800cb3c:	68bb      	ldr	r3, [r7, #8]
 800cb3e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	881a      	ldrh	r2, [r3, #0]
 800cb44:	68bb      	ldr	r3, [r7, #8]
 800cb46:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	881b      	ldrh	r3, [r3, #0]
 800cb4c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800cb50:	d00a      	beq.n	800cb68 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	881b      	ldrh	r3, [r3, #0]
 800cb56:	4618      	mov	r0, r3
 800cb58:	f7ff ff56 	bl	800ca08 <ptr_to_mem>
 800cb5c:	4604      	mov	r4, r0
 800cb5e:	68b8      	ldr	r0, [r7, #8]
 800cb60:	f7ff ff64 	bl	800ca2c <mem_to_ptr>
 800cb64:	4603      	mov	r3, r0
 800cb66:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800cb68:	bf00      	nop
 800cb6a:	3714      	adds	r7, #20
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	bd90      	pop	{r4, r7, pc}
 800cb70:	200095a0 	.word	0x200095a0
 800cb74:	080188b0 	.word	0x080188b0
 800cb78:	080188e0 	.word	0x080188e0
 800cb7c:	080188f8 	.word	0x080188f8
 800cb80:	200095a4 	.word	0x200095a4
 800cb84:	08018920 	.word	0x08018920
 800cb88:	0801893c 	.word	0x0801893c
 800cb8c:	08018958 	.word	0x08018958
 800cb90:	200095ac 	.word	0x200095ac

0800cb94 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800cb94:	b580      	push	{r7, lr}
 800cb96:	b082      	sub	sp, #8
 800cb98:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800cb9a:	4b1f      	ldr	r3, [pc, #124]	@ (800cc18 <mem_init+0x84>)
 800cb9c:	3303      	adds	r3, #3
 800cb9e:	f023 0303 	bic.w	r3, r3, #3
 800cba2:	461a      	mov	r2, r3
 800cba4:	4b1d      	ldr	r3, [pc, #116]	@ (800cc1c <mem_init+0x88>)
 800cba6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800cba8:	4b1c      	ldr	r3, [pc, #112]	@ (800cc1c <mem_init+0x88>)
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800cbb4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	2200      	movs	r2, #0
 800cbba:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	2200      	movs	r2, #0
 800cbc0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800cbc2:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 800cbc6:	f7ff ff1f 	bl	800ca08 <ptr_to_mem>
 800cbca:	4603      	mov	r3, r0
 800cbcc:	4a14      	ldr	r2, [pc, #80]	@ (800cc20 <mem_init+0x8c>)
 800cbce:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800cbd0:	4b13      	ldr	r3, [pc, #76]	@ (800cc20 <mem_init+0x8c>)
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	2201      	movs	r2, #1
 800cbd6:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800cbd8:	4b11      	ldr	r3, [pc, #68]	@ (800cc20 <mem_init+0x8c>)
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800cbe0:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800cbe2:	4b0f      	ldr	r3, [pc, #60]	@ (800cc20 <mem_init+0x8c>)
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800cbea:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800cbec:	4b0b      	ldr	r3, [pc, #44]	@ (800cc1c <mem_init+0x88>)
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	4a0c      	ldr	r2, [pc, #48]	@ (800cc24 <mem_init+0x90>)
 800cbf2:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800cbf4:	480c      	ldr	r0, [pc, #48]	@ (800cc28 <mem_init+0x94>)
 800cbf6:	f009 fcd7 	bl	80165a8 <sys_mutex_new>
 800cbfa:	4603      	mov	r3, r0
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d006      	beq.n	800cc0e <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800cc00:	4b0a      	ldr	r3, [pc, #40]	@ (800cc2c <mem_init+0x98>)
 800cc02:	f240 221f 	movw	r2, #543	@ 0x21f
 800cc06:	490a      	ldr	r1, [pc, #40]	@ (800cc30 <mem_init+0x9c>)
 800cc08:	480a      	ldr	r0, [pc, #40]	@ (800cc34 <mem_init+0xa0>)
 800cc0a:	f00a fb63 	bl	80172d4 <iprintf>
  }
}
 800cc0e:	bf00      	nop
 800cc10:	3708      	adds	r7, #8
 800cc12:	46bd      	mov	sp, r7
 800cc14:	bd80      	pop	{r7, pc}
 800cc16:	bf00      	nop
 800cc18:	20008f4c 	.word	0x20008f4c
 800cc1c:	200095a0 	.word	0x200095a0
 800cc20:	200095a4 	.word	0x200095a4
 800cc24:	200095ac 	.word	0x200095ac
 800cc28:	200095a8 	.word	0x200095a8
 800cc2c:	080188b0 	.word	0x080188b0
 800cc30:	08018984 	.word	0x08018984
 800cc34:	080188f8 	.word	0x080188f8

0800cc38 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b086      	sub	sp, #24
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800cc40:	6878      	ldr	r0, [r7, #4]
 800cc42:	f7ff fef3 	bl	800ca2c <mem_to_ptr>
 800cc46:	4603      	mov	r3, r0
 800cc48:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	881b      	ldrh	r3, [r3, #0]
 800cc4e:	4618      	mov	r0, r3
 800cc50:	f7ff feda 	bl	800ca08 <ptr_to_mem>
 800cc54:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	885b      	ldrh	r3, [r3, #2]
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	f7ff fed4 	bl	800ca08 <ptr_to_mem>
 800cc60:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	881b      	ldrh	r3, [r3, #0]
 800cc66:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800cc6a:	d818      	bhi.n	800cc9e <mem_link_valid+0x66>
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	885b      	ldrh	r3, [r3, #2]
 800cc70:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800cc74:	d813      	bhi.n	800cc9e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800cc7a:	8afa      	ldrh	r2, [r7, #22]
 800cc7c:	429a      	cmp	r2, r3
 800cc7e:	d004      	beq.n	800cc8a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	881b      	ldrh	r3, [r3, #0]
 800cc84:	8afa      	ldrh	r2, [r7, #22]
 800cc86:	429a      	cmp	r2, r3
 800cc88:	d109      	bne.n	800cc9e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800cc8a:	4b08      	ldr	r3, [pc, #32]	@ (800ccac <mem_link_valid+0x74>)
 800cc8c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800cc8e:	693a      	ldr	r2, [r7, #16]
 800cc90:	429a      	cmp	r2, r3
 800cc92:	d006      	beq.n	800cca2 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800cc94:	693b      	ldr	r3, [r7, #16]
 800cc96:	885b      	ldrh	r3, [r3, #2]
 800cc98:	8afa      	ldrh	r2, [r7, #22]
 800cc9a:	429a      	cmp	r2, r3
 800cc9c:	d001      	beq.n	800cca2 <mem_link_valid+0x6a>
    return 0;
 800cc9e:	2300      	movs	r3, #0
 800cca0:	e000      	b.n	800cca4 <mem_link_valid+0x6c>
  }
  return 1;
 800cca2:	2301      	movs	r3, #1
}
 800cca4:	4618      	mov	r0, r3
 800cca6:	3718      	adds	r7, #24
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	bd80      	pop	{r7, pc}
 800ccac:	200095a4 	.word	0x200095a4

0800ccb0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	b088      	sub	sp, #32
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d070      	beq.n	800cda0 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	f003 0303 	and.w	r3, r3, #3
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d00d      	beq.n	800cce4 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800ccc8:	4b37      	ldr	r3, [pc, #220]	@ (800cda8 <mem_free+0xf8>)
 800ccca:	f240 2273 	movw	r2, #627	@ 0x273
 800ccce:	4937      	ldr	r1, [pc, #220]	@ (800cdac <mem_free+0xfc>)
 800ccd0:	4837      	ldr	r0, [pc, #220]	@ (800cdb0 <mem_free+0x100>)
 800ccd2:	f00a faff 	bl	80172d4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ccd6:	f009 fcc5 	bl	8016664 <sys_arch_protect>
 800ccda:	60f8      	str	r0, [r7, #12]
 800ccdc:	68f8      	ldr	r0, [r7, #12]
 800ccde:	f009 fccf 	bl	8016680 <sys_arch_unprotect>
    return;
 800cce2:	e05e      	b.n	800cda2 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	3b08      	subs	r3, #8
 800cce8:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800ccea:	4b32      	ldr	r3, [pc, #200]	@ (800cdb4 <mem_free+0x104>)
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	69fa      	ldr	r2, [r7, #28]
 800ccf0:	429a      	cmp	r2, r3
 800ccf2:	d306      	bcc.n	800cd02 <mem_free+0x52>
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	f103 020c 	add.w	r2, r3, #12
 800ccfa:	4b2f      	ldr	r3, [pc, #188]	@ (800cdb8 <mem_free+0x108>)
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	429a      	cmp	r2, r3
 800cd00:	d90d      	bls.n	800cd1e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800cd02:	4b29      	ldr	r3, [pc, #164]	@ (800cda8 <mem_free+0xf8>)
 800cd04:	f240 227f 	movw	r2, #639	@ 0x27f
 800cd08:	492c      	ldr	r1, [pc, #176]	@ (800cdbc <mem_free+0x10c>)
 800cd0a:	4829      	ldr	r0, [pc, #164]	@ (800cdb0 <mem_free+0x100>)
 800cd0c:	f00a fae2 	bl	80172d4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800cd10:	f009 fca8 	bl	8016664 <sys_arch_protect>
 800cd14:	6138      	str	r0, [r7, #16]
 800cd16:	6938      	ldr	r0, [r7, #16]
 800cd18:	f009 fcb2 	bl	8016680 <sys_arch_unprotect>
    return;
 800cd1c:	e041      	b.n	800cda2 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800cd1e:	4828      	ldr	r0, [pc, #160]	@ (800cdc0 <mem_free+0x110>)
 800cd20:	f009 fc5e 	bl	80165e0 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800cd24:	69fb      	ldr	r3, [r7, #28]
 800cd26:	791b      	ldrb	r3, [r3, #4]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d110      	bne.n	800cd4e <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800cd2c:	4b1e      	ldr	r3, [pc, #120]	@ (800cda8 <mem_free+0xf8>)
 800cd2e:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800cd32:	4924      	ldr	r1, [pc, #144]	@ (800cdc4 <mem_free+0x114>)
 800cd34:	481e      	ldr	r0, [pc, #120]	@ (800cdb0 <mem_free+0x100>)
 800cd36:	f00a facd 	bl	80172d4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800cd3a:	4821      	ldr	r0, [pc, #132]	@ (800cdc0 <mem_free+0x110>)
 800cd3c:	f009 fc5f 	bl	80165fe <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800cd40:	f009 fc90 	bl	8016664 <sys_arch_protect>
 800cd44:	6178      	str	r0, [r7, #20]
 800cd46:	6978      	ldr	r0, [r7, #20]
 800cd48:	f009 fc9a 	bl	8016680 <sys_arch_unprotect>
    return;
 800cd4c:	e029      	b.n	800cda2 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800cd4e:	69f8      	ldr	r0, [r7, #28]
 800cd50:	f7ff ff72 	bl	800cc38 <mem_link_valid>
 800cd54:	4603      	mov	r3, r0
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d110      	bne.n	800cd7c <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800cd5a:	4b13      	ldr	r3, [pc, #76]	@ (800cda8 <mem_free+0xf8>)
 800cd5c:	f240 2295 	movw	r2, #661	@ 0x295
 800cd60:	4919      	ldr	r1, [pc, #100]	@ (800cdc8 <mem_free+0x118>)
 800cd62:	4813      	ldr	r0, [pc, #76]	@ (800cdb0 <mem_free+0x100>)
 800cd64:	f00a fab6 	bl	80172d4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800cd68:	4815      	ldr	r0, [pc, #84]	@ (800cdc0 <mem_free+0x110>)
 800cd6a:	f009 fc48 	bl	80165fe <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800cd6e:	f009 fc79 	bl	8016664 <sys_arch_protect>
 800cd72:	61b8      	str	r0, [r7, #24]
 800cd74:	69b8      	ldr	r0, [r7, #24]
 800cd76:	f009 fc83 	bl	8016680 <sys_arch_unprotect>
    return;
 800cd7a:	e012      	b.n	800cda2 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800cd7c:	69fb      	ldr	r3, [r7, #28]
 800cd7e:	2200      	movs	r2, #0
 800cd80:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800cd82:	4b12      	ldr	r3, [pc, #72]	@ (800cdcc <mem_free+0x11c>)
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	69fa      	ldr	r2, [r7, #28]
 800cd88:	429a      	cmp	r2, r3
 800cd8a:	d202      	bcs.n	800cd92 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800cd8c:	4a0f      	ldr	r2, [pc, #60]	@ (800cdcc <mem_free+0x11c>)
 800cd8e:	69fb      	ldr	r3, [r7, #28]
 800cd90:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800cd92:	69f8      	ldr	r0, [r7, #28]
 800cd94:	f7ff fe5c 	bl	800ca50 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800cd98:	4809      	ldr	r0, [pc, #36]	@ (800cdc0 <mem_free+0x110>)
 800cd9a:	f009 fc30 	bl	80165fe <sys_mutex_unlock>
 800cd9e:	e000      	b.n	800cda2 <mem_free+0xf2>
    return;
 800cda0:	bf00      	nop
}
 800cda2:	3720      	adds	r7, #32
 800cda4:	46bd      	mov	sp, r7
 800cda6:	bd80      	pop	{r7, pc}
 800cda8:	080188b0 	.word	0x080188b0
 800cdac:	080189a0 	.word	0x080189a0
 800cdb0:	080188f8 	.word	0x080188f8
 800cdb4:	200095a0 	.word	0x200095a0
 800cdb8:	200095a4 	.word	0x200095a4
 800cdbc:	080189c4 	.word	0x080189c4
 800cdc0:	200095a8 	.word	0x200095a8
 800cdc4:	080189e0 	.word	0x080189e0
 800cdc8:	08018a08 	.word	0x08018a08
 800cdcc:	200095ac 	.word	0x200095ac

0800cdd0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800cdd0:	b580      	push	{r7, lr}
 800cdd2:	b088      	sub	sp, #32
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	6078      	str	r0, [r7, #4]
 800cdd8:	460b      	mov	r3, r1
 800cdda:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800cddc:	887b      	ldrh	r3, [r7, #2]
 800cdde:	3303      	adds	r3, #3
 800cde0:	b29b      	uxth	r3, r3
 800cde2:	f023 0303 	bic.w	r3, r3, #3
 800cde6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800cde8:	8bfb      	ldrh	r3, [r7, #30]
 800cdea:	2b0b      	cmp	r3, #11
 800cdec:	d801      	bhi.n	800cdf2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800cdee:	230c      	movs	r3, #12
 800cdf0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800cdf2:	8bfb      	ldrh	r3, [r7, #30]
 800cdf4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800cdf8:	d803      	bhi.n	800ce02 <mem_trim+0x32>
 800cdfa:	8bfa      	ldrh	r2, [r7, #30]
 800cdfc:	887b      	ldrh	r3, [r7, #2]
 800cdfe:	429a      	cmp	r2, r3
 800ce00:	d201      	bcs.n	800ce06 <mem_trim+0x36>
    return NULL;
 800ce02:	2300      	movs	r3, #0
 800ce04:	e0d8      	b.n	800cfb8 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800ce06:	4b6e      	ldr	r3, [pc, #440]	@ (800cfc0 <mem_trim+0x1f0>)
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	687a      	ldr	r2, [r7, #4]
 800ce0c:	429a      	cmp	r2, r3
 800ce0e:	d304      	bcc.n	800ce1a <mem_trim+0x4a>
 800ce10:	4b6c      	ldr	r3, [pc, #432]	@ (800cfc4 <mem_trim+0x1f4>)
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	687a      	ldr	r2, [r7, #4]
 800ce16:	429a      	cmp	r2, r3
 800ce18:	d306      	bcc.n	800ce28 <mem_trim+0x58>
 800ce1a:	4b6b      	ldr	r3, [pc, #428]	@ (800cfc8 <mem_trim+0x1f8>)
 800ce1c:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800ce20:	496a      	ldr	r1, [pc, #424]	@ (800cfcc <mem_trim+0x1fc>)
 800ce22:	486b      	ldr	r0, [pc, #428]	@ (800cfd0 <mem_trim+0x200>)
 800ce24:	f00a fa56 	bl	80172d4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800ce28:	4b65      	ldr	r3, [pc, #404]	@ (800cfc0 <mem_trim+0x1f0>)
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	687a      	ldr	r2, [r7, #4]
 800ce2e:	429a      	cmp	r2, r3
 800ce30:	d304      	bcc.n	800ce3c <mem_trim+0x6c>
 800ce32:	4b64      	ldr	r3, [pc, #400]	@ (800cfc4 <mem_trim+0x1f4>)
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	687a      	ldr	r2, [r7, #4]
 800ce38:	429a      	cmp	r2, r3
 800ce3a:	d307      	bcc.n	800ce4c <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ce3c:	f009 fc12 	bl	8016664 <sys_arch_protect>
 800ce40:	60b8      	str	r0, [r7, #8]
 800ce42:	68b8      	ldr	r0, [r7, #8]
 800ce44:	f009 fc1c 	bl	8016680 <sys_arch_unprotect>
    return rmem;
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	e0b5      	b.n	800cfb8 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	3b08      	subs	r3, #8
 800ce50:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800ce52:	69b8      	ldr	r0, [r7, #24]
 800ce54:	f7ff fdea 	bl	800ca2c <mem_to_ptr>
 800ce58:	4603      	mov	r3, r0
 800ce5a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800ce5c:	69bb      	ldr	r3, [r7, #24]
 800ce5e:	881a      	ldrh	r2, [r3, #0]
 800ce60:	8afb      	ldrh	r3, [r7, #22]
 800ce62:	1ad3      	subs	r3, r2, r3
 800ce64:	b29b      	uxth	r3, r3
 800ce66:	3b08      	subs	r3, #8
 800ce68:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800ce6a:	8bfa      	ldrh	r2, [r7, #30]
 800ce6c:	8abb      	ldrh	r3, [r7, #20]
 800ce6e:	429a      	cmp	r2, r3
 800ce70:	d906      	bls.n	800ce80 <mem_trim+0xb0>
 800ce72:	4b55      	ldr	r3, [pc, #340]	@ (800cfc8 <mem_trim+0x1f8>)
 800ce74:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800ce78:	4956      	ldr	r1, [pc, #344]	@ (800cfd4 <mem_trim+0x204>)
 800ce7a:	4855      	ldr	r0, [pc, #340]	@ (800cfd0 <mem_trim+0x200>)
 800ce7c:	f00a fa2a 	bl	80172d4 <iprintf>
  if (newsize > size) {
 800ce80:	8bfa      	ldrh	r2, [r7, #30]
 800ce82:	8abb      	ldrh	r3, [r7, #20]
 800ce84:	429a      	cmp	r2, r3
 800ce86:	d901      	bls.n	800ce8c <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800ce88:	2300      	movs	r3, #0
 800ce8a:	e095      	b.n	800cfb8 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800ce8c:	8bfa      	ldrh	r2, [r7, #30]
 800ce8e:	8abb      	ldrh	r3, [r7, #20]
 800ce90:	429a      	cmp	r2, r3
 800ce92:	d101      	bne.n	800ce98 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	e08f      	b.n	800cfb8 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800ce98:	484f      	ldr	r0, [pc, #316]	@ (800cfd8 <mem_trim+0x208>)
 800ce9a:	f009 fba1 	bl	80165e0 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800ce9e:	69bb      	ldr	r3, [r7, #24]
 800cea0:	881b      	ldrh	r3, [r3, #0]
 800cea2:	4618      	mov	r0, r3
 800cea4:	f7ff fdb0 	bl	800ca08 <ptr_to_mem>
 800cea8:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800ceaa:	693b      	ldr	r3, [r7, #16]
 800ceac:	791b      	ldrb	r3, [r3, #4]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d13f      	bne.n	800cf32 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800ceb2:	69bb      	ldr	r3, [r7, #24]
 800ceb4:	881b      	ldrh	r3, [r3, #0]
 800ceb6:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800ceba:	d106      	bne.n	800ceca <mem_trim+0xfa>
 800cebc:	4b42      	ldr	r3, [pc, #264]	@ (800cfc8 <mem_trim+0x1f8>)
 800cebe:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800cec2:	4946      	ldr	r1, [pc, #280]	@ (800cfdc <mem_trim+0x20c>)
 800cec4:	4842      	ldr	r0, [pc, #264]	@ (800cfd0 <mem_trim+0x200>)
 800cec6:	f00a fa05 	bl	80172d4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800ceca:	693b      	ldr	r3, [r7, #16]
 800cecc:	881b      	ldrh	r3, [r3, #0]
 800cece:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800ced0:	8afa      	ldrh	r2, [r7, #22]
 800ced2:	8bfb      	ldrh	r3, [r7, #30]
 800ced4:	4413      	add	r3, r2
 800ced6:	b29b      	uxth	r3, r3
 800ced8:	3308      	adds	r3, #8
 800ceda:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800cedc:	4b40      	ldr	r3, [pc, #256]	@ (800cfe0 <mem_trim+0x210>)
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	693a      	ldr	r2, [r7, #16]
 800cee2:	429a      	cmp	r2, r3
 800cee4:	d106      	bne.n	800cef4 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800cee6:	89fb      	ldrh	r3, [r7, #14]
 800cee8:	4618      	mov	r0, r3
 800ceea:	f7ff fd8d 	bl	800ca08 <ptr_to_mem>
 800ceee:	4603      	mov	r3, r0
 800cef0:	4a3b      	ldr	r2, [pc, #236]	@ (800cfe0 <mem_trim+0x210>)
 800cef2:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800cef4:	89fb      	ldrh	r3, [r7, #14]
 800cef6:	4618      	mov	r0, r3
 800cef8:	f7ff fd86 	bl	800ca08 <ptr_to_mem>
 800cefc:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800cefe:	693b      	ldr	r3, [r7, #16]
 800cf00:	2200      	movs	r2, #0
 800cf02:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800cf04:	693b      	ldr	r3, [r7, #16]
 800cf06:	89ba      	ldrh	r2, [r7, #12]
 800cf08:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800cf0a:	693b      	ldr	r3, [r7, #16]
 800cf0c:	8afa      	ldrh	r2, [r7, #22]
 800cf0e:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800cf10:	69bb      	ldr	r3, [r7, #24]
 800cf12:	89fa      	ldrh	r2, [r7, #14]
 800cf14:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800cf16:	693b      	ldr	r3, [r7, #16]
 800cf18:	881b      	ldrh	r3, [r3, #0]
 800cf1a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800cf1e:	d047      	beq.n	800cfb0 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800cf20:	693b      	ldr	r3, [r7, #16]
 800cf22:	881b      	ldrh	r3, [r3, #0]
 800cf24:	4618      	mov	r0, r3
 800cf26:	f7ff fd6f 	bl	800ca08 <ptr_to_mem>
 800cf2a:	4602      	mov	r2, r0
 800cf2c:	89fb      	ldrh	r3, [r7, #14]
 800cf2e:	8053      	strh	r3, [r2, #2]
 800cf30:	e03e      	b.n	800cfb0 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800cf32:	8bfb      	ldrh	r3, [r7, #30]
 800cf34:	f103 0214 	add.w	r2, r3, #20
 800cf38:	8abb      	ldrh	r3, [r7, #20]
 800cf3a:	429a      	cmp	r2, r3
 800cf3c:	d838      	bhi.n	800cfb0 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800cf3e:	8afa      	ldrh	r2, [r7, #22]
 800cf40:	8bfb      	ldrh	r3, [r7, #30]
 800cf42:	4413      	add	r3, r2
 800cf44:	b29b      	uxth	r3, r3
 800cf46:	3308      	adds	r3, #8
 800cf48:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800cf4a:	69bb      	ldr	r3, [r7, #24]
 800cf4c:	881b      	ldrh	r3, [r3, #0]
 800cf4e:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800cf52:	d106      	bne.n	800cf62 <mem_trim+0x192>
 800cf54:	4b1c      	ldr	r3, [pc, #112]	@ (800cfc8 <mem_trim+0x1f8>)
 800cf56:	f240 3216 	movw	r2, #790	@ 0x316
 800cf5a:	4920      	ldr	r1, [pc, #128]	@ (800cfdc <mem_trim+0x20c>)
 800cf5c:	481c      	ldr	r0, [pc, #112]	@ (800cfd0 <mem_trim+0x200>)
 800cf5e:	f00a f9b9 	bl	80172d4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800cf62:	89fb      	ldrh	r3, [r7, #14]
 800cf64:	4618      	mov	r0, r3
 800cf66:	f7ff fd4f 	bl	800ca08 <ptr_to_mem>
 800cf6a:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800cf6c:	4b1c      	ldr	r3, [pc, #112]	@ (800cfe0 <mem_trim+0x210>)
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	693a      	ldr	r2, [r7, #16]
 800cf72:	429a      	cmp	r2, r3
 800cf74:	d202      	bcs.n	800cf7c <mem_trim+0x1ac>
      lfree = mem2;
 800cf76:	4a1a      	ldr	r2, [pc, #104]	@ (800cfe0 <mem_trim+0x210>)
 800cf78:	693b      	ldr	r3, [r7, #16]
 800cf7a:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800cf7c:	693b      	ldr	r3, [r7, #16]
 800cf7e:	2200      	movs	r2, #0
 800cf80:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800cf82:	69bb      	ldr	r3, [r7, #24]
 800cf84:	881a      	ldrh	r2, [r3, #0]
 800cf86:	693b      	ldr	r3, [r7, #16]
 800cf88:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800cf8a:	693b      	ldr	r3, [r7, #16]
 800cf8c:	8afa      	ldrh	r2, [r7, #22]
 800cf8e:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800cf90:	69bb      	ldr	r3, [r7, #24]
 800cf92:	89fa      	ldrh	r2, [r7, #14]
 800cf94:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800cf96:	693b      	ldr	r3, [r7, #16]
 800cf98:	881b      	ldrh	r3, [r3, #0]
 800cf9a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800cf9e:	d007      	beq.n	800cfb0 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800cfa0:	693b      	ldr	r3, [r7, #16]
 800cfa2:	881b      	ldrh	r3, [r3, #0]
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	f7ff fd2f 	bl	800ca08 <ptr_to_mem>
 800cfaa:	4602      	mov	r2, r0
 800cfac:	89fb      	ldrh	r3, [r7, #14]
 800cfae:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800cfb0:	4809      	ldr	r0, [pc, #36]	@ (800cfd8 <mem_trim+0x208>)
 800cfb2:	f009 fb24 	bl	80165fe <sys_mutex_unlock>
  return rmem;
 800cfb6:	687b      	ldr	r3, [r7, #4]
}
 800cfb8:	4618      	mov	r0, r3
 800cfba:	3720      	adds	r7, #32
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	bd80      	pop	{r7, pc}
 800cfc0:	200095a0 	.word	0x200095a0
 800cfc4:	200095a4 	.word	0x200095a4
 800cfc8:	080188b0 	.word	0x080188b0
 800cfcc:	08018a3c 	.word	0x08018a3c
 800cfd0:	080188f8 	.word	0x080188f8
 800cfd4:	08018a54 	.word	0x08018a54
 800cfd8:	200095a8 	.word	0x200095a8
 800cfdc:	08018a74 	.word	0x08018a74
 800cfe0:	200095ac 	.word	0x200095ac

0800cfe4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	b088      	sub	sp, #32
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	4603      	mov	r3, r0
 800cfec:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800cfee:	88fb      	ldrh	r3, [r7, #6]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d101      	bne.n	800cff8 <mem_malloc+0x14>
    return NULL;
 800cff4:	2300      	movs	r3, #0
 800cff6:	e0e2      	b.n	800d1be <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800cff8:	88fb      	ldrh	r3, [r7, #6]
 800cffa:	3303      	adds	r3, #3
 800cffc:	b29b      	uxth	r3, r3
 800cffe:	f023 0303 	bic.w	r3, r3, #3
 800d002:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800d004:	8bbb      	ldrh	r3, [r7, #28]
 800d006:	2b0b      	cmp	r3, #11
 800d008:	d801      	bhi.n	800d00e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800d00a:	230c      	movs	r3, #12
 800d00c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800d00e:	8bbb      	ldrh	r3, [r7, #28]
 800d010:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800d014:	d803      	bhi.n	800d01e <mem_malloc+0x3a>
 800d016:	8bba      	ldrh	r2, [r7, #28]
 800d018:	88fb      	ldrh	r3, [r7, #6]
 800d01a:	429a      	cmp	r2, r3
 800d01c:	d201      	bcs.n	800d022 <mem_malloc+0x3e>
    return NULL;
 800d01e:	2300      	movs	r3, #0
 800d020:	e0cd      	b.n	800d1be <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800d022:	4869      	ldr	r0, [pc, #420]	@ (800d1c8 <mem_malloc+0x1e4>)
 800d024:	f009 fadc 	bl	80165e0 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d028:	4b68      	ldr	r3, [pc, #416]	@ (800d1cc <mem_malloc+0x1e8>)
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	4618      	mov	r0, r3
 800d02e:	f7ff fcfd 	bl	800ca2c <mem_to_ptr>
 800d032:	4603      	mov	r3, r0
 800d034:	83fb      	strh	r3, [r7, #30]
 800d036:	e0b7      	b.n	800d1a8 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800d038:	8bfb      	ldrh	r3, [r7, #30]
 800d03a:	4618      	mov	r0, r3
 800d03c:	f7ff fce4 	bl	800ca08 <ptr_to_mem>
 800d040:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800d042:	697b      	ldr	r3, [r7, #20]
 800d044:	791b      	ldrb	r3, [r3, #4]
 800d046:	2b00      	cmp	r3, #0
 800d048:	f040 80a7 	bne.w	800d19a <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800d04c:	697b      	ldr	r3, [r7, #20]
 800d04e:	881b      	ldrh	r3, [r3, #0]
 800d050:	461a      	mov	r2, r3
 800d052:	8bfb      	ldrh	r3, [r7, #30]
 800d054:	1ad3      	subs	r3, r2, r3
 800d056:	f1a3 0208 	sub.w	r2, r3, #8
 800d05a:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800d05c:	429a      	cmp	r2, r3
 800d05e:	f0c0 809c 	bcc.w	800d19a <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800d062:	697b      	ldr	r3, [r7, #20]
 800d064:	881b      	ldrh	r3, [r3, #0]
 800d066:	461a      	mov	r2, r3
 800d068:	8bfb      	ldrh	r3, [r7, #30]
 800d06a:	1ad3      	subs	r3, r2, r3
 800d06c:	f1a3 0208 	sub.w	r2, r3, #8
 800d070:	8bbb      	ldrh	r3, [r7, #28]
 800d072:	3314      	adds	r3, #20
 800d074:	429a      	cmp	r2, r3
 800d076:	d333      	bcc.n	800d0e0 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800d078:	8bfa      	ldrh	r2, [r7, #30]
 800d07a:	8bbb      	ldrh	r3, [r7, #28]
 800d07c:	4413      	add	r3, r2
 800d07e:	b29b      	uxth	r3, r3
 800d080:	3308      	adds	r3, #8
 800d082:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800d084:	8a7b      	ldrh	r3, [r7, #18]
 800d086:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800d08a:	d106      	bne.n	800d09a <mem_malloc+0xb6>
 800d08c:	4b50      	ldr	r3, [pc, #320]	@ (800d1d0 <mem_malloc+0x1ec>)
 800d08e:	f240 3287 	movw	r2, #903	@ 0x387
 800d092:	4950      	ldr	r1, [pc, #320]	@ (800d1d4 <mem_malloc+0x1f0>)
 800d094:	4850      	ldr	r0, [pc, #320]	@ (800d1d8 <mem_malloc+0x1f4>)
 800d096:	f00a f91d 	bl	80172d4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800d09a:	8a7b      	ldrh	r3, [r7, #18]
 800d09c:	4618      	mov	r0, r3
 800d09e:	f7ff fcb3 	bl	800ca08 <ptr_to_mem>
 800d0a2:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	2200      	movs	r2, #0
 800d0a8:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800d0aa:	697b      	ldr	r3, [r7, #20]
 800d0ac:	881a      	ldrh	r2, [r3, #0]
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	8bfa      	ldrh	r2, [r7, #30]
 800d0b6:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800d0b8:	697b      	ldr	r3, [r7, #20]
 800d0ba:	8a7a      	ldrh	r2, [r7, #18]
 800d0bc:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800d0be:	697b      	ldr	r3, [r7, #20]
 800d0c0:	2201      	movs	r2, #1
 800d0c2:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	881b      	ldrh	r3, [r3, #0]
 800d0c8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800d0cc:	d00b      	beq.n	800d0e6 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	881b      	ldrh	r3, [r3, #0]
 800d0d2:	4618      	mov	r0, r3
 800d0d4:	f7ff fc98 	bl	800ca08 <ptr_to_mem>
 800d0d8:	4602      	mov	r2, r0
 800d0da:	8a7b      	ldrh	r3, [r7, #18]
 800d0dc:	8053      	strh	r3, [r2, #2]
 800d0de:	e002      	b.n	800d0e6 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800d0e0:	697b      	ldr	r3, [r7, #20]
 800d0e2:	2201      	movs	r2, #1
 800d0e4:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800d0e6:	4b39      	ldr	r3, [pc, #228]	@ (800d1cc <mem_malloc+0x1e8>)
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	697a      	ldr	r2, [r7, #20]
 800d0ec:	429a      	cmp	r2, r3
 800d0ee:	d127      	bne.n	800d140 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800d0f0:	4b36      	ldr	r3, [pc, #216]	@ (800d1cc <mem_malloc+0x1e8>)
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800d0f6:	e005      	b.n	800d104 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800d0f8:	69bb      	ldr	r3, [r7, #24]
 800d0fa:	881b      	ldrh	r3, [r3, #0]
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	f7ff fc83 	bl	800ca08 <ptr_to_mem>
 800d102:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800d104:	69bb      	ldr	r3, [r7, #24]
 800d106:	791b      	ldrb	r3, [r3, #4]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d004      	beq.n	800d116 <mem_malloc+0x132>
 800d10c:	4b33      	ldr	r3, [pc, #204]	@ (800d1dc <mem_malloc+0x1f8>)
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	69ba      	ldr	r2, [r7, #24]
 800d112:	429a      	cmp	r2, r3
 800d114:	d1f0      	bne.n	800d0f8 <mem_malloc+0x114>
          }
          lfree = cur;
 800d116:	4a2d      	ldr	r2, [pc, #180]	@ (800d1cc <mem_malloc+0x1e8>)
 800d118:	69bb      	ldr	r3, [r7, #24]
 800d11a:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800d11c:	4b2b      	ldr	r3, [pc, #172]	@ (800d1cc <mem_malloc+0x1e8>)
 800d11e:	681a      	ldr	r2, [r3, #0]
 800d120:	4b2e      	ldr	r3, [pc, #184]	@ (800d1dc <mem_malloc+0x1f8>)
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	429a      	cmp	r2, r3
 800d126:	d00b      	beq.n	800d140 <mem_malloc+0x15c>
 800d128:	4b28      	ldr	r3, [pc, #160]	@ (800d1cc <mem_malloc+0x1e8>)
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	791b      	ldrb	r3, [r3, #4]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d006      	beq.n	800d140 <mem_malloc+0x15c>
 800d132:	4b27      	ldr	r3, [pc, #156]	@ (800d1d0 <mem_malloc+0x1ec>)
 800d134:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800d138:	4929      	ldr	r1, [pc, #164]	@ (800d1e0 <mem_malloc+0x1fc>)
 800d13a:	4827      	ldr	r0, [pc, #156]	@ (800d1d8 <mem_malloc+0x1f4>)
 800d13c:	f00a f8ca 	bl	80172d4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800d140:	4821      	ldr	r0, [pc, #132]	@ (800d1c8 <mem_malloc+0x1e4>)
 800d142:	f009 fa5c 	bl	80165fe <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800d146:	8bba      	ldrh	r2, [r7, #28]
 800d148:	697b      	ldr	r3, [r7, #20]
 800d14a:	4413      	add	r3, r2
 800d14c:	3308      	adds	r3, #8
 800d14e:	4a23      	ldr	r2, [pc, #140]	@ (800d1dc <mem_malloc+0x1f8>)
 800d150:	6812      	ldr	r2, [r2, #0]
 800d152:	4293      	cmp	r3, r2
 800d154:	d906      	bls.n	800d164 <mem_malloc+0x180>
 800d156:	4b1e      	ldr	r3, [pc, #120]	@ (800d1d0 <mem_malloc+0x1ec>)
 800d158:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800d15c:	4921      	ldr	r1, [pc, #132]	@ (800d1e4 <mem_malloc+0x200>)
 800d15e:	481e      	ldr	r0, [pc, #120]	@ (800d1d8 <mem_malloc+0x1f4>)
 800d160:	f00a f8b8 	bl	80172d4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800d164:	697b      	ldr	r3, [r7, #20]
 800d166:	f003 0303 	and.w	r3, r3, #3
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d006      	beq.n	800d17c <mem_malloc+0x198>
 800d16e:	4b18      	ldr	r3, [pc, #96]	@ (800d1d0 <mem_malloc+0x1ec>)
 800d170:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800d174:	491c      	ldr	r1, [pc, #112]	@ (800d1e8 <mem_malloc+0x204>)
 800d176:	4818      	ldr	r0, [pc, #96]	@ (800d1d8 <mem_malloc+0x1f4>)
 800d178:	f00a f8ac 	bl	80172d4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800d17c:	697b      	ldr	r3, [r7, #20]
 800d17e:	f003 0303 	and.w	r3, r3, #3
 800d182:	2b00      	cmp	r3, #0
 800d184:	d006      	beq.n	800d194 <mem_malloc+0x1b0>
 800d186:	4b12      	ldr	r3, [pc, #72]	@ (800d1d0 <mem_malloc+0x1ec>)
 800d188:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800d18c:	4917      	ldr	r1, [pc, #92]	@ (800d1ec <mem_malloc+0x208>)
 800d18e:	4812      	ldr	r0, [pc, #72]	@ (800d1d8 <mem_malloc+0x1f4>)
 800d190:	f00a f8a0 	bl	80172d4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800d194:	697b      	ldr	r3, [r7, #20]
 800d196:	3308      	adds	r3, #8
 800d198:	e011      	b.n	800d1be <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800d19a:	8bfb      	ldrh	r3, [r7, #30]
 800d19c:	4618      	mov	r0, r3
 800d19e:	f7ff fc33 	bl	800ca08 <ptr_to_mem>
 800d1a2:	4603      	mov	r3, r0
 800d1a4:	881b      	ldrh	r3, [r3, #0]
 800d1a6:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d1a8:	8bfa      	ldrh	r2, [r7, #30]
 800d1aa:	8bbb      	ldrh	r3, [r7, #28]
 800d1ac:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 800d1b0:	429a      	cmp	r2, r3
 800d1b2:	f4ff af41 	bcc.w	800d038 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800d1b6:	4804      	ldr	r0, [pc, #16]	@ (800d1c8 <mem_malloc+0x1e4>)
 800d1b8:	f009 fa21 	bl	80165fe <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800d1bc:	2300      	movs	r3, #0
}
 800d1be:	4618      	mov	r0, r3
 800d1c0:	3720      	adds	r7, #32
 800d1c2:	46bd      	mov	sp, r7
 800d1c4:	bd80      	pop	{r7, pc}
 800d1c6:	bf00      	nop
 800d1c8:	200095a8 	.word	0x200095a8
 800d1cc:	200095ac 	.word	0x200095ac
 800d1d0:	080188b0 	.word	0x080188b0
 800d1d4:	08018a74 	.word	0x08018a74
 800d1d8:	080188f8 	.word	0x080188f8
 800d1dc:	200095a4 	.word	0x200095a4
 800d1e0:	08018a88 	.word	0x08018a88
 800d1e4:	08018aa4 	.word	0x08018aa4
 800d1e8:	08018ad4 	.word	0x08018ad4
 800d1ec:	08018b04 	.word	0x08018b04

0800d1f0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800d1f0:	b480      	push	{r7}
 800d1f2:	b085      	sub	sp, #20
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	689b      	ldr	r3, [r3, #8]
 800d1fc:	2200      	movs	r2, #0
 800d1fe:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	685b      	ldr	r3, [r3, #4]
 800d204:	3303      	adds	r3, #3
 800d206:	f023 0303 	bic.w	r3, r3, #3
 800d20a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800d20c:	2300      	movs	r3, #0
 800d20e:	60fb      	str	r3, [r7, #12]
 800d210:	e011      	b.n	800d236 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	689b      	ldr	r3, [r3, #8]
 800d216:	681a      	ldr	r2, [r3, #0]
 800d218:	68bb      	ldr	r3, [r7, #8]
 800d21a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	689b      	ldr	r3, [r3, #8]
 800d220:	68ba      	ldr	r2, [r7, #8]
 800d222:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	881b      	ldrh	r3, [r3, #0]
 800d228:	461a      	mov	r2, r3
 800d22a:	68bb      	ldr	r3, [r7, #8]
 800d22c:	4413      	add	r3, r2
 800d22e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	3301      	adds	r3, #1
 800d234:	60fb      	str	r3, [r7, #12]
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	885b      	ldrh	r3, [r3, #2]
 800d23a:	461a      	mov	r2, r3
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	4293      	cmp	r3, r2
 800d240:	dbe7      	blt.n	800d212 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800d242:	bf00      	nop
 800d244:	bf00      	nop
 800d246:	3714      	adds	r7, #20
 800d248:	46bd      	mov	sp, r7
 800d24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d24e:	4770      	bx	lr

0800d250 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800d250:	b580      	push	{r7, lr}
 800d252:	b082      	sub	sp, #8
 800d254:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d256:	2300      	movs	r3, #0
 800d258:	80fb      	strh	r3, [r7, #6]
 800d25a:	e009      	b.n	800d270 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800d25c:	88fb      	ldrh	r3, [r7, #6]
 800d25e:	4a08      	ldr	r2, [pc, #32]	@ (800d280 <memp_init+0x30>)
 800d260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d264:	4618      	mov	r0, r3
 800d266:	f7ff ffc3 	bl	800d1f0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d26a:	88fb      	ldrh	r3, [r7, #6]
 800d26c:	3301      	adds	r3, #1
 800d26e:	80fb      	strh	r3, [r7, #6]
 800d270:	88fb      	ldrh	r3, [r7, #6]
 800d272:	2b0c      	cmp	r3, #12
 800d274:	d9f2      	bls.n	800d25c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800d276:	bf00      	nop
 800d278:	bf00      	nop
 800d27a:	3708      	adds	r7, #8
 800d27c:	46bd      	mov	sp, r7
 800d27e:	bd80      	pop	{r7, pc}
 800d280:	0801b360 	.word	0x0801b360

0800d284 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800d284:	b580      	push	{r7, lr}
 800d286:	b084      	sub	sp, #16
 800d288:	af00      	add	r7, sp, #0
 800d28a:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800d28c:	f009 f9ea 	bl	8016664 <sys_arch_protect>
 800d290:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	689b      	ldr	r3, [r3, #8]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800d29a:	68bb      	ldr	r3, [r7, #8]
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d015      	beq.n	800d2cc <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	689b      	ldr	r3, [r3, #8]
 800d2a4:	68ba      	ldr	r2, [r7, #8]
 800d2a6:	6812      	ldr	r2, [r2, #0]
 800d2a8:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800d2aa:	68bb      	ldr	r3, [r7, #8]
 800d2ac:	f003 0303 	and.w	r3, r3, #3
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d006      	beq.n	800d2c2 <do_memp_malloc_pool+0x3e>
 800d2b4:	4b09      	ldr	r3, [pc, #36]	@ (800d2dc <do_memp_malloc_pool+0x58>)
 800d2b6:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800d2ba:	4909      	ldr	r1, [pc, #36]	@ (800d2e0 <do_memp_malloc_pool+0x5c>)
 800d2bc:	4809      	ldr	r0, [pc, #36]	@ (800d2e4 <do_memp_malloc_pool+0x60>)
 800d2be:	f00a f809 	bl	80172d4 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800d2c2:	68f8      	ldr	r0, [r7, #12]
 800d2c4:	f009 f9dc 	bl	8016680 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800d2c8:	68bb      	ldr	r3, [r7, #8]
 800d2ca:	e003      	b.n	800d2d4 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800d2cc:	68f8      	ldr	r0, [r7, #12]
 800d2ce:	f009 f9d7 	bl	8016680 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800d2d2:	2300      	movs	r3, #0
}
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	3710      	adds	r7, #16
 800d2d8:	46bd      	mov	sp, r7
 800d2da:	bd80      	pop	{r7, pc}
 800d2dc:	08018b28 	.word	0x08018b28
 800d2e0:	08018b58 	.word	0x08018b58
 800d2e4:	08018b7c 	.word	0x08018b7c

0800d2e8 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b082      	sub	sp, #8
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d106      	bne.n	800d304 <memp_malloc_pool+0x1c>
 800d2f6:	4b0a      	ldr	r3, [pc, #40]	@ (800d320 <memp_malloc_pool+0x38>)
 800d2f8:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800d2fc:	4909      	ldr	r1, [pc, #36]	@ (800d324 <memp_malloc_pool+0x3c>)
 800d2fe:	480a      	ldr	r0, [pc, #40]	@ (800d328 <memp_malloc_pool+0x40>)
 800d300:	f009 ffe8 	bl	80172d4 <iprintf>
  if (desc == NULL) {
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	2b00      	cmp	r3, #0
 800d308:	d101      	bne.n	800d30e <memp_malloc_pool+0x26>
    return NULL;
 800d30a:	2300      	movs	r3, #0
 800d30c:	e003      	b.n	800d316 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800d30e:	6878      	ldr	r0, [r7, #4]
 800d310:	f7ff ffb8 	bl	800d284 <do_memp_malloc_pool>
 800d314:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800d316:	4618      	mov	r0, r3
 800d318:	3708      	adds	r7, #8
 800d31a:	46bd      	mov	sp, r7
 800d31c:	bd80      	pop	{r7, pc}
 800d31e:	bf00      	nop
 800d320:	08018b28 	.word	0x08018b28
 800d324:	08018ba4 	.word	0x08018ba4
 800d328:	08018b7c 	.word	0x08018b7c

0800d32c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800d32c:	b580      	push	{r7, lr}
 800d32e:	b084      	sub	sp, #16
 800d330:	af00      	add	r7, sp, #0
 800d332:	4603      	mov	r3, r0
 800d334:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800d336:	79fb      	ldrb	r3, [r7, #7]
 800d338:	2b0c      	cmp	r3, #12
 800d33a:	d908      	bls.n	800d34e <memp_malloc+0x22>
 800d33c:	4b0a      	ldr	r3, [pc, #40]	@ (800d368 <memp_malloc+0x3c>)
 800d33e:	f240 1257 	movw	r2, #343	@ 0x157
 800d342:	490a      	ldr	r1, [pc, #40]	@ (800d36c <memp_malloc+0x40>)
 800d344:	480a      	ldr	r0, [pc, #40]	@ (800d370 <memp_malloc+0x44>)
 800d346:	f009 ffc5 	bl	80172d4 <iprintf>
 800d34a:	2300      	movs	r3, #0
 800d34c:	e008      	b.n	800d360 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800d34e:	79fb      	ldrb	r3, [r7, #7]
 800d350:	4a08      	ldr	r2, [pc, #32]	@ (800d374 <memp_malloc+0x48>)
 800d352:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d356:	4618      	mov	r0, r3
 800d358:	f7ff ff94 	bl	800d284 <do_memp_malloc_pool>
 800d35c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800d35e:	68fb      	ldr	r3, [r7, #12]
}
 800d360:	4618      	mov	r0, r3
 800d362:	3710      	adds	r7, #16
 800d364:	46bd      	mov	sp, r7
 800d366:	bd80      	pop	{r7, pc}
 800d368:	08018b28 	.word	0x08018b28
 800d36c:	08018bb8 	.word	0x08018bb8
 800d370:	08018b7c 	.word	0x08018b7c
 800d374:	0801b360 	.word	0x0801b360

0800d378 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800d378:	b580      	push	{r7, lr}
 800d37a:	b084      	sub	sp, #16
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	6078      	str	r0, [r7, #4]
 800d380:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800d382:	683b      	ldr	r3, [r7, #0]
 800d384:	f003 0303 	and.w	r3, r3, #3
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d006      	beq.n	800d39a <do_memp_free_pool+0x22>
 800d38c:	4b0d      	ldr	r3, [pc, #52]	@ (800d3c4 <do_memp_free_pool+0x4c>)
 800d38e:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800d392:	490d      	ldr	r1, [pc, #52]	@ (800d3c8 <do_memp_free_pool+0x50>)
 800d394:	480d      	ldr	r0, [pc, #52]	@ (800d3cc <do_memp_free_pool+0x54>)
 800d396:	f009 ff9d 	bl	80172d4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800d39a:	683b      	ldr	r3, [r7, #0]
 800d39c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800d39e:	f009 f961 	bl	8016664 <sys_arch_protect>
 800d3a2:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	689b      	ldr	r3, [r3, #8]
 800d3a8:	681a      	ldr	r2, [r3, #0]
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	689b      	ldr	r3, [r3, #8]
 800d3b2:	68fa      	ldr	r2, [r7, #12]
 800d3b4:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800d3b6:	68b8      	ldr	r0, [r7, #8]
 800d3b8:	f009 f962 	bl	8016680 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800d3bc:	bf00      	nop
 800d3be:	3710      	adds	r7, #16
 800d3c0:	46bd      	mov	sp, r7
 800d3c2:	bd80      	pop	{r7, pc}
 800d3c4:	08018b28 	.word	0x08018b28
 800d3c8:	08018bd8 	.word	0x08018bd8
 800d3cc:	08018b7c 	.word	0x08018b7c

0800d3d0 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800d3d0:	b580      	push	{r7, lr}
 800d3d2:	b082      	sub	sp, #8
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	6078      	str	r0, [r7, #4]
 800d3d8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d106      	bne.n	800d3ee <memp_free_pool+0x1e>
 800d3e0:	4b0a      	ldr	r3, [pc, #40]	@ (800d40c <memp_free_pool+0x3c>)
 800d3e2:	f240 1295 	movw	r2, #405	@ 0x195
 800d3e6:	490a      	ldr	r1, [pc, #40]	@ (800d410 <memp_free_pool+0x40>)
 800d3e8:	480a      	ldr	r0, [pc, #40]	@ (800d414 <memp_free_pool+0x44>)
 800d3ea:	f009 ff73 	bl	80172d4 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d007      	beq.n	800d404 <memp_free_pool+0x34>
 800d3f4:	683b      	ldr	r3, [r7, #0]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d004      	beq.n	800d404 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800d3fa:	6839      	ldr	r1, [r7, #0]
 800d3fc:	6878      	ldr	r0, [r7, #4]
 800d3fe:	f7ff ffbb 	bl	800d378 <do_memp_free_pool>
 800d402:	e000      	b.n	800d406 <memp_free_pool+0x36>
    return;
 800d404:	bf00      	nop
}
 800d406:	3708      	adds	r7, #8
 800d408:	46bd      	mov	sp, r7
 800d40a:	bd80      	pop	{r7, pc}
 800d40c:	08018b28 	.word	0x08018b28
 800d410:	08018ba4 	.word	0x08018ba4
 800d414:	08018b7c 	.word	0x08018b7c

0800d418 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800d418:	b580      	push	{r7, lr}
 800d41a:	b082      	sub	sp, #8
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	4603      	mov	r3, r0
 800d420:	6039      	str	r1, [r7, #0]
 800d422:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800d424:	79fb      	ldrb	r3, [r7, #7]
 800d426:	2b0c      	cmp	r3, #12
 800d428:	d907      	bls.n	800d43a <memp_free+0x22>
 800d42a:	4b0c      	ldr	r3, [pc, #48]	@ (800d45c <memp_free+0x44>)
 800d42c:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800d430:	490b      	ldr	r1, [pc, #44]	@ (800d460 <memp_free+0x48>)
 800d432:	480c      	ldr	r0, [pc, #48]	@ (800d464 <memp_free+0x4c>)
 800d434:	f009 ff4e 	bl	80172d4 <iprintf>
 800d438:	e00c      	b.n	800d454 <memp_free+0x3c>

  if (mem == NULL) {
 800d43a:	683b      	ldr	r3, [r7, #0]
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d008      	beq.n	800d452 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800d440:	79fb      	ldrb	r3, [r7, #7]
 800d442:	4a09      	ldr	r2, [pc, #36]	@ (800d468 <memp_free+0x50>)
 800d444:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d448:	6839      	ldr	r1, [r7, #0]
 800d44a:	4618      	mov	r0, r3
 800d44c:	f7ff ff94 	bl	800d378 <do_memp_free_pool>
 800d450:	e000      	b.n	800d454 <memp_free+0x3c>
    return;
 800d452:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800d454:	3708      	adds	r7, #8
 800d456:	46bd      	mov	sp, r7
 800d458:	bd80      	pop	{r7, pc}
 800d45a:	bf00      	nop
 800d45c:	08018b28 	.word	0x08018b28
 800d460:	08018bf8 	.word	0x08018bf8
 800d464:	08018b7c 	.word	0x08018b7c
 800d468:	0801b360 	.word	0x0801b360

0800d46c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800d46c:	b480      	push	{r7}
 800d46e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800d470:	bf00      	nop
 800d472:	46bd      	mov	sp, r7
 800d474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d478:	4770      	bx	lr
	...

0800d47c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800d47c:	b580      	push	{r7, lr}
 800d47e:	b086      	sub	sp, #24
 800d480:	af00      	add	r7, sp, #0
 800d482:	60f8      	str	r0, [r7, #12]
 800d484:	60b9      	str	r1, [r7, #8]
 800d486:	607a      	str	r2, [r7, #4]
 800d488:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d108      	bne.n	800d4a2 <netif_add+0x26>
 800d490:	4b57      	ldr	r3, [pc, #348]	@ (800d5f0 <netif_add+0x174>)
 800d492:	f240 1227 	movw	r2, #295	@ 0x127
 800d496:	4957      	ldr	r1, [pc, #348]	@ (800d5f4 <netif_add+0x178>)
 800d498:	4857      	ldr	r0, [pc, #348]	@ (800d5f8 <netif_add+0x17c>)
 800d49a:	f009 ff1b 	bl	80172d4 <iprintf>
 800d49e:	2300      	movs	r3, #0
 800d4a0:	e0a2      	b.n	800d5e8 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800d4a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d108      	bne.n	800d4ba <netif_add+0x3e>
 800d4a8:	4b51      	ldr	r3, [pc, #324]	@ (800d5f0 <netif_add+0x174>)
 800d4aa:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800d4ae:	4953      	ldr	r1, [pc, #332]	@ (800d5fc <netif_add+0x180>)
 800d4b0:	4851      	ldr	r0, [pc, #324]	@ (800d5f8 <netif_add+0x17c>)
 800d4b2:	f009 ff0f 	bl	80172d4 <iprintf>
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	e096      	b.n	800d5e8 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800d4ba:	68bb      	ldr	r3, [r7, #8]
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d101      	bne.n	800d4c4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800d4c0:	4b4f      	ldr	r3, [pc, #316]	@ (800d600 <netif_add+0x184>)
 800d4c2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d101      	bne.n	800d4ce <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800d4ca:	4b4d      	ldr	r3, [pc, #308]	@ (800d600 <netif_add+0x184>)
 800d4cc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d4ce:	683b      	ldr	r3, [r7, #0]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d101      	bne.n	800d4d8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800d4d4:	4b4a      	ldr	r3, [pc, #296]	@ (800d600 <netif_add+0x184>)
 800d4d6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	2200      	movs	r2, #0
 800d4dc:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	2200      	movs	r2, #0
 800d4e2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	2200      	movs	r2, #0
 800d4e8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	4a45      	ldr	r2, [pc, #276]	@ (800d604 <netif_add+0x188>)
 800d4ee:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	2200      	movs	r2, #0
 800d4fa:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	2200      	movs	r2, #0
 800d502:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	6a3a      	ldr	r2, [r7, #32]
 800d508:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800d50a:	4b3f      	ldr	r3, [pc, #252]	@ (800d608 <netif_add+0x18c>)
 800d50c:	781a      	ldrb	r2, [r3, #0]
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d518:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800d51a:	683b      	ldr	r3, [r7, #0]
 800d51c:	687a      	ldr	r2, [r7, #4]
 800d51e:	68b9      	ldr	r1, [r7, #8]
 800d520:	68f8      	ldr	r0, [r7, #12]
 800d522:	f000 f913 	bl	800d74c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800d526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d528:	68f8      	ldr	r0, [r7, #12]
 800d52a:	4798      	blx	r3
 800d52c:	4603      	mov	r3, r0
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d001      	beq.n	800d536 <netif_add+0xba>
    return NULL;
 800d532:	2300      	movs	r3, #0
 800d534:	e058      	b.n	800d5e8 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d53c:	2bff      	cmp	r3, #255	@ 0xff
 800d53e:	d103      	bne.n	800d548 <netif_add+0xcc>
        netif->num = 0;
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	2200      	movs	r2, #0
 800d544:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 800d548:	2300      	movs	r3, #0
 800d54a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d54c:	4b2f      	ldr	r3, [pc, #188]	@ (800d60c <netif_add+0x190>)
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	617b      	str	r3, [r7, #20]
 800d552:	e02b      	b.n	800d5ac <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800d554:	697a      	ldr	r2, [r7, #20]
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	429a      	cmp	r2, r3
 800d55a:	d106      	bne.n	800d56a <netif_add+0xee>
 800d55c:	4b24      	ldr	r3, [pc, #144]	@ (800d5f0 <netif_add+0x174>)
 800d55e:	f240 128b 	movw	r2, #395	@ 0x18b
 800d562:	492b      	ldr	r1, [pc, #172]	@ (800d610 <netif_add+0x194>)
 800d564:	4824      	ldr	r0, [pc, #144]	@ (800d5f8 <netif_add+0x17c>)
 800d566:	f009 feb5 	bl	80172d4 <iprintf>
        num_netifs++;
 800d56a:	693b      	ldr	r3, [r7, #16]
 800d56c:	3301      	adds	r3, #1
 800d56e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800d570:	693b      	ldr	r3, [r7, #16]
 800d572:	2bff      	cmp	r3, #255	@ 0xff
 800d574:	dd06      	ble.n	800d584 <netif_add+0x108>
 800d576:	4b1e      	ldr	r3, [pc, #120]	@ (800d5f0 <netif_add+0x174>)
 800d578:	f240 128d 	movw	r2, #397	@ 0x18d
 800d57c:	4925      	ldr	r1, [pc, #148]	@ (800d614 <netif_add+0x198>)
 800d57e:	481e      	ldr	r0, [pc, #120]	@ (800d5f8 <netif_add+0x17c>)
 800d580:	f009 fea8 	bl	80172d4 <iprintf>
        if (netif2->num == netif->num) {
 800d584:	697b      	ldr	r3, [r7, #20]
 800d586:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d590:	429a      	cmp	r2, r3
 800d592:	d108      	bne.n	800d5a6 <netif_add+0x12a>
          netif->num++;
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d59a:	3301      	adds	r3, #1
 800d59c:	b2da      	uxtb	r2, r3
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 800d5a4:	e005      	b.n	800d5b2 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d5a6:	697b      	ldr	r3, [r7, #20]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	617b      	str	r3, [r7, #20]
 800d5ac:	697b      	ldr	r3, [r7, #20]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d1d0      	bne.n	800d554 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800d5b2:	697b      	ldr	r3, [r7, #20]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d1be      	bne.n	800d536 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d5be:	2bfe      	cmp	r3, #254	@ 0xfe
 800d5c0:	d103      	bne.n	800d5ca <netif_add+0x14e>
    netif_num = 0;
 800d5c2:	4b11      	ldr	r3, [pc, #68]	@ (800d608 <netif_add+0x18c>)
 800d5c4:	2200      	movs	r2, #0
 800d5c6:	701a      	strb	r2, [r3, #0]
 800d5c8:	e006      	b.n	800d5d8 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d5d0:	3301      	adds	r3, #1
 800d5d2:	b2da      	uxtb	r2, r3
 800d5d4:	4b0c      	ldr	r3, [pc, #48]	@ (800d608 <netif_add+0x18c>)
 800d5d6:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800d5d8:	4b0c      	ldr	r3, [pc, #48]	@ (800d60c <netif_add+0x190>)
 800d5da:	681a      	ldr	r2, [r3, #0]
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800d5e0:	4a0a      	ldr	r2, [pc, #40]	@ (800d60c <netif_add+0x190>)
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800d5e6:	68fb      	ldr	r3, [r7, #12]
}
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	3718      	adds	r7, #24
 800d5ec:	46bd      	mov	sp, r7
 800d5ee:	bd80      	pop	{r7, pc}
 800d5f0:	08018c14 	.word	0x08018c14
 800d5f4:	08018ca8 	.word	0x08018ca8
 800d5f8:	08018c64 	.word	0x08018c64
 800d5fc:	08018cc4 	.word	0x08018cc4
 800d600:	0801b3d4 	.word	0x0801b3d4
 800d604:	0800d9c3 	.word	0x0800d9c3
 800d608:	2000c684 	.word	0x2000c684
 800d60c:	2000c67c 	.word	0x2000c67c
 800d610:	08018ce8 	.word	0x08018ce8
 800d614:	08018cfc 	.word	0x08018cfc

0800d618 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d618:	b580      	push	{r7, lr}
 800d61a:	b082      	sub	sp, #8
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	6078      	str	r0, [r7, #4]
 800d620:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800d622:	6839      	ldr	r1, [r7, #0]
 800d624:	6878      	ldr	r0, [r7, #4]
 800d626:	f002 fb4d 	bl	800fcc4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800d62a:	6839      	ldr	r1, [r7, #0]
 800d62c:	6878      	ldr	r0, [r7, #4]
 800d62e:	f006 fc5b 	bl	8013ee8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800d632:	bf00      	nop
 800d634:	3708      	adds	r7, #8
 800d636:	46bd      	mov	sp, r7
 800d638:	bd80      	pop	{r7, pc}
	...

0800d63c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800d63c:	b580      	push	{r7, lr}
 800d63e:	b086      	sub	sp, #24
 800d640:	af00      	add	r7, sp, #0
 800d642:	60f8      	str	r0, [r7, #12]
 800d644:	60b9      	str	r1, [r7, #8]
 800d646:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800d648:	68bb      	ldr	r3, [r7, #8]
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d106      	bne.n	800d65c <netif_do_set_ipaddr+0x20>
 800d64e:	4b1d      	ldr	r3, [pc, #116]	@ (800d6c4 <netif_do_set_ipaddr+0x88>)
 800d650:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800d654:	491c      	ldr	r1, [pc, #112]	@ (800d6c8 <netif_do_set_ipaddr+0x8c>)
 800d656:	481d      	ldr	r0, [pc, #116]	@ (800d6cc <netif_do_set_ipaddr+0x90>)
 800d658:	f009 fe3c 	bl	80172d4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d106      	bne.n	800d670 <netif_do_set_ipaddr+0x34>
 800d662:	4b18      	ldr	r3, [pc, #96]	@ (800d6c4 <netif_do_set_ipaddr+0x88>)
 800d664:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800d668:	4917      	ldr	r1, [pc, #92]	@ (800d6c8 <netif_do_set_ipaddr+0x8c>)
 800d66a:	4818      	ldr	r0, [pc, #96]	@ (800d6cc <netif_do_set_ipaddr+0x90>)
 800d66c:	f009 fe32 	bl	80172d4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800d670:	68bb      	ldr	r3, [r7, #8]
 800d672:	681a      	ldr	r2, [r3, #0]
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	3304      	adds	r3, #4
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	429a      	cmp	r2, r3
 800d67c:	d01c      	beq.n	800d6b8 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800d67e:	68bb      	ldr	r3, [r7, #8]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	3304      	adds	r3, #4
 800d688:	681a      	ldr	r2, [r3, #0]
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800d68e:	f107 0314 	add.w	r3, r7, #20
 800d692:	4619      	mov	r1, r3
 800d694:	6878      	ldr	r0, [r7, #4]
 800d696:	f7ff ffbf 	bl	800d618 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800d69a:	68bb      	ldr	r3, [r7, #8]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d002      	beq.n	800d6a6 <netif_do_set_ipaddr+0x6a>
 800d6a0:	68bb      	ldr	r3, [r7, #8]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	e000      	b.n	800d6a8 <netif_do_set_ipaddr+0x6c>
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	68fa      	ldr	r2, [r7, #12]
 800d6aa:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800d6ac:	2101      	movs	r1, #1
 800d6ae:	68f8      	ldr	r0, [r7, #12]
 800d6b0:	f000 f8d2 	bl	800d858 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800d6b4:	2301      	movs	r3, #1
 800d6b6:	e000      	b.n	800d6ba <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800d6b8:	2300      	movs	r3, #0
}
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	3718      	adds	r7, #24
 800d6be:	46bd      	mov	sp, r7
 800d6c0:	bd80      	pop	{r7, pc}
 800d6c2:	bf00      	nop
 800d6c4:	08018c14 	.word	0x08018c14
 800d6c8:	08018d2c 	.word	0x08018d2c
 800d6cc:	08018c64 	.word	0x08018c64

0800d6d0 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800d6d0:	b480      	push	{r7}
 800d6d2:	b085      	sub	sp, #20
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	60f8      	str	r0, [r7, #12]
 800d6d8:	60b9      	str	r1, [r7, #8]
 800d6da:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800d6dc:	68bb      	ldr	r3, [r7, #8]
 800d6de:	681a      	ldr	r2, [r3, #0]
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	3308      	adds	r3, #8
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	429a      	cmp	r2, r3
 800d6e8:	d00a      	beq.n	800d700 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800d6ea:	68bb      	ldr	r3, [r7, #8]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d002      	beq.n	800d6f6 <netif_do_set_netmask+0x26>
 800d6f0:	68bb      	ldr	r3, [r7, #8]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	e000      	b.n	800d6f8 <netif_do_set_netmask+0x28>
 800d6f6:	2300      	movs	r3, #0
 800d6f8:	68fa      	ldr	r2, [r7, #12]
 800d6fa:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800d6fc:	2301      	movs	r3, #1
 800d6fe:	e000      	b.n	800d702 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800d700:	2300      	movs	r3, #0
}
 800d702:	4618      	mov	r0, r3
 800d704:	3714      	adds	r7, #20
 800d706:	46bd      	mov	sp, r7
 800d708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d70c:	4770      	bx	lr

0800d70e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800d70e:	b480      	push	{r7}
 800d710:	b085      	sub	sp, #20
 800d712:	af00      	add	r7, sp, #0
 800d714:	60f8      	str	r0, [r7, #12]
 800d716:	60b9      	str	r1, [r7, #8]
 800d718:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800d71a:	68bb      	ldr	r3, [r7, #8]
 800d71c:	681a      	ldr	r2, [r3, #0]
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	330c      	adds	r3, #12
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	429a      	cmp	r2, r3
 800d726:	d00a      	beq.n	800d73e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800d728:	68bb      	ldr	r3, [r7, #8]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d002      	beq.n	800d734 <netif_do_set_gw+0x26>
 800d72e:	68bb      	ldr	r3, [r7, #8]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	e000      	b.n	800d736 <netif_do_set_gw+0x28>
 800d734:	2300      	movs	r3, #0
 800d736:	68fa      	ldr	r2, [r7, #12]
 800d738:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800d73a:	2301      	movs	r3, #1
 800d73c:	e000      	b.n	800d740 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800d73e:	2300      	movs	r3, #0
}
 800d740:	4618      	mov	r0, r3
 800d742:	3714      	adds	r7, #20
 800d744:	46bd      	mov	sp, r7
 800d746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d74a:	4770      	bx	lr

0800d74c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800d74c:	b580      	push	{r7, lr}
 800d74e:	b088      	sub	sp, #32
 800d750:	af00      	add	r7, sp, #0
 800d752:	60f8      	str	r0, [r7, #12]
 800d754:	60b9      	str	r1, [r7, #8]
 800d756:	607a      	str	r2, [r7, #4]
 800d758:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800d75a:	2300      	movs	r3, #0
 800d75c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800d75e:	2300      	movs	r3, #0
 800d760:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d762:	68bb      	ldr	r3, [r7, #8]
 800d764:	2b00      	cmp	r3, #0
 800d766:	d101      	bne.n	800d76c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800d768:	4b1c      	ldr	r3, [pc, #112]	@ (800d7dc <netif_set_addr+0x90>)
 800d76a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d101      	bne.n	800d776 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800d772:	4b1a      	ldr	r3, [pc, #104]	@ (800d7dc <netif_set_addr+0x90>)
 800d774:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d776:	683b      	ldr	r3, [r7, #0]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d101      	bne.n	800d780 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800d77c:	4b17      	ldr	r3, [pc, #92]	@ (800d7dc <netif_set_addr+0x90>)
 800d77e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800d780:	68bb      	ldr	r3, [r7, #8]
 800d782:	2b00      	cmp	r3, #0
 800d784:	d003      	beq.n	800d78e <netif_set_addr+0x42>
 800d786:	68bb      	ldr	r3, [r7, #8]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d101      	bne.n	800d792 <netif_set_addr+0x46>
 800d78e:	2301      	movs	r3, #1
 800d790:	e000      	b.n	800d794 <netif_set_addr+0x48>
 800d792:	2300      	movs	r3, #0
 800d794:	617b      	str	r3, [r7, #20]
  if (remove) {
 800d796:	697b      	ldr	r3, [r7, #20]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d006      	beq.n	800d7aa <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d79c:	f107 0310 	add.w	r3, r7, #16
 800d7a0:	461a      	mov	r2, r3
 800d7a2:	68b9      	ldr	r1, [r7, #8]
 800d7a4:	68f8      	ldr	r0, [r7, #12]
 800d7a6:	f7ff ff49 	bl	800d63c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800d7aa:	69fa      	ldr	r2, [r7, #28]
 800d7ac:	6879      	ldr	r1, [r7, #4]
 800d7ae:	68f8      	ldr	r0, [r7, #12]
 800d7b0:	f7ff ff8e 	bl	800d6d0 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800d7b4:	69ba      	ldr	r2, [r7, #24]
 800d7b6:	6839      	ldr	r1, [r7, #0]
 800d7b8:	68f8      	ldr	r0, [r7, #12]
 800d7ba:	f7ff ffa8 	bl	800d70e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800d7be:	697b      	ldr	r3, [r7, #20]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d106      	bne.n	800d7d2 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d7c4:	f107 0310 	add.w	r3, r7, #16
 800d7c8:	461a      	mov	r2, r3
 800d7ca:	68b9      	ldr	r1, [r7, #8]
 800d7cc:	68f8      	ldr	r0, [r7, #12]
 800d7ce:	f7ff ff35 	bl	800d63c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800d7d2:	bf00      	nop
 800d7d4:	3720      	adds	r7, #32
 800d7d6:	46bd      	mov	sp, r7
 800d7d8:	bd80      	pop	{r7, pc}
 800d7da:	bf00      	nop
 800d7dc:	0801b3d4 	.word	0x0801b3d4

0800d7e0 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800d7e0:	b480      	push	{r7}
 800d7e2:	b083      	sub	sp, #12
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800d7e8:	4a04      	ldr	r2, [pc, #16]	@ (800d7fc <netif_set_default+0x1c>)
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800d7ee:	bf00      	nop
 800d7f0:	370c      	adds	r7, #12
 800d7f2:	46bd      	mov	sp, r7
 800d7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f8:	4770      	bx	lr
 800d7fa:	bf00      	nop
 800d7fc:	2000c680 	.word	0x2000c680

0800d800 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800d800:	b580      	push	{r7, lr}
 800d802:	b082      	sub	sp, #8
 800d804:	af00      	add	r7, sp, #0
 800d806:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d107      	bne.n	800d81e <netif_set_up+0x1e>
 800d80e:	4b0f      	ldr	r3, [pc, #60]	@ (800d84c <netif_set_up+0x4c>)
 800d810:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800d814:	490e      	ldr	r1, [pc, #56]	@ (800d850 <netif_set_up+0x50>)
 800d816:	480f      	ldr	r0, [pc, #60]	@ (800d854 <netif_set_up+0x54>)
 800d818:	f009 fd5c 	bl	80172d4 <iprintf>
 800d81c:	e013      	b.n	800d846 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d824:	f003 0301 	and.w	r3, r3, #1
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d10c      	bne.n	800d846 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d832:	f043 0301 	orr.w	r3, r3, #1
 800d836:	b2da      	uxtb	r2, r3
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d83e:	2103      	movs	r1, #3
 800d840:	6878      	ldr	r0, [r7, #4]
 800d842:	f000 f809 	bl	800d858 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800d846:	3708      	adds	r7, #8
 800d848:	46bd      	mov	sp, r7
 800d84a:	bd80      	pop	{r7, pc}
 800d84c:	08018c14 	.word	0x08018c14
 800d850:	08018d9c 	.word	0x08018d9c
 800d854:	08018c64 	.word	0x08018c64

0800d858 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800d858:	b580      	push	{r7, lr}
 800d85a:	b082      	sub	sp, #8
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	6078      	str	r0, [r7, #4]
 800d860:	460b      	mov	r3, r1
 800d862:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	2b00      	cmp	r3, #0
 800d868:	d106      	bne.n	800d878 <netif_issue_reports+0x20>
 800d86a:	4b18      	ldr	r3, [pc, #96]	@ (800d8cc <netif_issue_reports+0x74>)
 800d86c:	f240 326d 	movw	r2, #877	@ 0x36d
 800d870:	4917      	ldr	r1, [pc, #92]	@ (800d8d0 <netif_issue_reports+0x78>)
 800d872:	4818      	ldr	r0, [pc, #96]	@ (800d8d4 <netif_issue_reports+0x7c>)
 800d874:	f009 fd2e 	bl	80172d4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d87e:	f003 0304 	and.w	r3, r3, #4
 800d882:	2b00      	cmp	r3, #0
 800d884:	d01e      	beq.n	800d8c4 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d88c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d890:	2b00      	cmp	r3, #0
 800d892:	d017      	beq.n	800d8c4 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d894:	78fb      	ldrb	r3, [r7, #3]
 800d896:	f003 0301 	and.w	r3, r3, #1
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d013      	beq.n	800d8c6 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	3304      	adds	r3, #4
 800d8a2:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d00e      	beq.n	800d8c6 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d8ae:	f003 0308 	and.w	r3, r3, #8
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d007      	beq.n	800d8c6 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	3304      	adds	r3, #4
 800d8ba:	4619      	mov	r1, r3
 800d8bc:	6878      	ldr	r0, [r7, #4]
 800d8be:	f007 fa4d 	bl	8014d5c <etharp_request>
 800d8c2:	e000      	b.n	800d8c6 <netif_issue_reports+0x6e>
    return;
 800d8c4:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800d8c6:	3708      	adds	r7, #8
 800d8c8:	46bd      	mov	sp, r7
 800d8ca:	bd80      	pop	{r7, pc}
 800d8cc:	08018c14 	.word	0x08018c14
 800d8d0:	08018db8 	.word	0x08018db8
 800d8d4:	08018c64 	.word	0x08018c64

0800d8d8 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800d8d8:	b580      	push	{r7, lr}
 800d8da:	b082      	sub	sp, #8
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d107      	bne.n	800d8f6 <netif_set_link_up+0x1e>
 800d8e6:	4b13      	ldr	r3, [pc, #76]	@ (800d934 <netif_set_link_up+0x5c>)
 800d8e8:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800d8ec:	4912      	ldr	r1, [pc, #72]	@ (800d938 <netif_set_link_up+0x60>)
 800d8ee:	4813      	ldr	r0, [pc, #76]	@ (800d93c <netif_set_link_up+0x64>)
 800d8f0:	f009 fcf0 	bl	80172d4 <iprintf>
 800d8f4:	e01b      	b.n	800d92e <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d8fc:	f003 0304 	and.w	r3, r3, #4
 800d900:	2b00      	cmp	r3, #0
 800d902:	d114      	bne.n	800d92e <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d90a:	f043 0304 	orr.w	r3, r3, #4
 800d90e:	b2da      	uxtb	r2, r3
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d916:	2103      	movs	r1, #3
 800d918:	6878      	ldr	r0, [r7, #4]
 800d91a:	f7ff ff9d 	bl	800d858 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	69db      	ldr	r3, [r3, #28]
 800d922:	2b00      	cmp	r3, #0
 800d924:	d003      	beq.n	800d92e <netif_set_link_up+0x56>
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	69db      	ldr	r3, [r3, #28]
 800d92a:	6878      	ldr	r0, [r7, #4]
 800d92c:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800d92e:	3708      	adds	r7, #8
 800d930:	46bd      	mov	sp, r7
 800d932:	bd80      	pop	{r7, pc}
 800d934:	08018c14 	.word	0x08018c14
 800d938:	08018dfc 	.word	0x08018dfc
 800d93c:	08018c64 	.word	0x08018c64

0800d940 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800d940:	b580      	push	{r7, lr}
 800d942:	b082      	sub	sp, #8
 800d944:	af00      	add	r7, sp, #0
 800d946:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d107      	bne.n	800d95e <netif_set_link_down+0x1e>
 800d94e:	4b11      	ldr	r3, [pc, #68]	@ (800d994 <netif_set_link_down+0x54>)
 800d950:	f240 4206 	movw	r2, #1030	@ 0x406
 800d954:	4910      	ldr	r1, [pc, #64]	@ (800d998 <netif_set_link_down+0x58>)
 800d956:	4811      	ldr	r0, [pc, #68]	@ (800d99c <netif_set_link_down+0x5c>)
 800d958:	f009 fcbc 	bl	80172d4 <iprintf>
 800d95c:	e017      	b.n	800d98e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d964:	f003 0304 	and.w	r3, r3, #4
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d010      	beq.n	800d98e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d972:	f023 0304 	bic.w	r3, r3, #4
 800d976:	b2da      	uxtb	r2, r3
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	69db      	ldr	r3, [r3, #28]
 800d982:	2b00      	cmp	r3, #0
 800d984:	d003      	beq.n	800d98e <netif_set_link_down+0x4e>
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	69db      	ldr	r3, [r3, #28]
 800d98a:	6878      	ldr	r0, [r7, #4]
 800d98c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800d98e:	3708      	adds	r7, #8
 800d990:	46bd      	mov	sp, r7
 800d992:	bd80      	pop	{r7, pc}
 800d994:	08018c14 	.word	0x08018c14
 800d998:	08018e20 	.word	0x08018e20
 800d99c:	08018c64 	.word	0x08018c64

0800d9a0 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800d9a0:	b480      	push	{r7}
 800d9a2:	b083      	sub	sp, #12
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	6078      	str	r0, [r7, #4]
 800d9a8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d002      	beq.n	800d9b6 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	683a      	ldr	r2, [r7, #0]
 800d9b4:	61da      	str	r2, [r3, #28]
  }
}
 800d9b6:	bf00      	nop
 800d9b8:	370c      	adds	r7, #12
 800d9ba:	46bd      	mov	sp, r7
 800d9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c0:	4770      	bx	lr

0800d9c2 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800d9c2:	b480      	push	{r7}
 800d9c4:	b085      	sub	sp, #20
 800d9c6:	af00      	add	r7, sp, #0
 800d9c8:	60f8      	str	r0, [r7, #12]
 800d9ca:	60b9      	str	r1, [r7, #8]
 800d9cc:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800d9ce:	f06f 030b 	mvn.w	r3, #11
}
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	3714      	adds	r7, #20
 800d9d6:	46bd      	mov	sp, r7
 800d9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9dc:	4770      	bx	lr
	...

0800d9e0 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800d9e0:	b480      	push	{r7}
 800d9e2:	b085      	sub	sp, #20
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	4603      	mov	r3, r0
 800d9e8:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800d9ea:	79fb      	ldrb	r3, [r7, #7]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d013      	beq.n	800da18 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800d9f0:	4b0d      	ldr	r3, [pc, #52]	@ (800da28 <netif_get_by_index+0x48>)
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	60fb      	str	r3, [r7, #12]
 800d9f6:	e00c      	b.n	800da12 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d9fe:	3301      	adds	r3, #1
 800da00:	b2db      	uxtb	r3, r3
 800da02:	79fa      	ldrb	r2, [r7, #7]
 800da04:	429a      	cmp	r2, r3
 800da06:	d101      	bne.n	800da0c <netif_get_by_index+0x2c>
        return netif; /* found! */
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	e006      	b.n	800da1a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	60fb      	str	r3, [r7, #12]
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	2b00      	cmp	r3, #0
 800da16:	d1ef      	bne.n	800d9f8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800da18:	2300      	movs	r3, #0
}
 800da1a:	4618      	mov	r0, r3
 800da1c:	3714      	adds	r7, #20
 800da1e:	46bd      	mov	sp, r7
 800da20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da24:	4770      	bx	lr
 800da26:	bf00      	nop
 800da28:	2000c67c 	.word	0x2000c67c

0800da2c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b082      	sub	sp, #8
 800da30:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800da32:	f008 fe17 	bl	8016664 <sys_arch_protect>
 800da36:	6038      	str	r0, [r7, #0]
 800da38:	4b0d      	ldr	r3, [pc, #52]	@ (800da70 <pbuf_free_ooseq+0x44>)
 800da3a:	2200      	movs	r2, #0
 800da3c:	701a      	strb	r2, [r3, #0]
 800da3e:	6838      	ldr	r0, [r7, #0]
 800da40:	f008 fe1e 	bl	8016680 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800da44:	4b0b      	ldr	r3, [pc, #44]	@ (800da74 <pbuf_free_ooseq+0x48>)
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	607b      	str	r3, [r7, #4]
 800da4a:	e00a      	b.n	800da62 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800da50:	2b00      	cmp	r3, #0
 800da52:	d003      	beq.n	800da5c <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800da54:	6878      	ldr	r0, [r7, #4]
 800da56:	f002 f973 	bl	800fd40 <tcp_free_ooseq>
      return;
 800da5a:	e005      	b.n	800da68 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	68db      	ldr	r3, [r3, #12]
 800da60:	607b      	str	r3, [r7, #4]
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	2b00      	cmp	r3, #0
 800da66:	d1f1      	bne.n	800da4c <pbuf_free_ooseq+0x20>
    }
  }
}
 800da68:	3708      	adds	r7, #8
 800da6a:	46bd      	mov	sp, r7
 800da6c:	bd80      	pop	{r7, pc}
 800da6e:	bf00      	nop
 800da70:	2000c685 	.word	0x2000c685
 800da74:	2000c694 	.word	0x2000c694

0800da78 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800da78:	b580      	push	{r7, lr}
 800da7a:	b082      	sub	sp, #8
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800da80:	f7ff ffd4 	bl	800da2c <pbuf_free_ooseq>
}
 800da84:	bf00      	nop
 800da86:	3708      	adds	r7, #8
 800da88:	46bd      	mov	sp, r7
 800da8a:	bd80      	pop	{r7, pc}

0800da8c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800da8c:	b580      	push	{r7, lr}
 800da8e:	b082      	sub	sp, #8
 800da90:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800da92:	f008 fde7 	bl	8016664 <sys_arch_protect>
 800da96:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800da98:	4b0f      	ldr	r3, [pc, #60]	@ (800dad8 <pbuf_pool_is_empty+0x4c>)
 800da9a:	781b      	ldrb	r3, [r3, #0]
 800da9c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800da9e:	4b0e      	ldr	r3, [pc, #56]	@ (800dad8 <pbuf_pool_is_empty+0x4c>)
 800daa0:	2201      	movs	r2, #1
 800daa2:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800daa4:	6878      	ldr	r0, [r7, #4]
 800daa6:	f008 fdeb 	bl	8016680 <sys_arch_unprotect>

  if (!queued) {
 800daaa:	78fb      	ldrb	r3, [r7, #3]
 800daac:	2b00      	cmp	r3, #0
 800daae:	d10f      	bne.n	800dad0 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800dab0:	2100      	movs	r1, #0
 800dab2:	480a      	ldr	r0, [pc, #40]	@ (800dadc <pbuf_pool_is_empty+0x50>)
 800dab4:	f7fe fed8 	bl	800c868 <tcpip_try_callback>
 800dab8:	4603      	mov	r3, r0
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d008      	beq.n	800dad0 <pbuf_pool_is_empty+0x44>
 800dabe:	f008 fdd1 	bl	8016664 <sys_arch_protect>
 800dac2:	6078      	str	r0, [r7, #4]
 800dac4:	4b04      	ldr	r3, [pc, #16]	@ (800dad8 <pbuf_pool_is_empty+0x4c>)
 800dac6:	2200      	movs	r2, #0
 800dac8:	701a      	strb	r2, [r3, #0]
 800daca:	6878      	ldr	r0, [r7, #4]
 800dacc:	f008 fdd8 	bl	8016680 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800dad0:	bf00      	nop
 800dad2:	3708      	adds	r7, #8
 800dad4:	46bd      	mov	sp, r7
 800dad6:	bd80      	pop	{r7, pc}
 800dad8:	2000c685 	.word	0x2000c685
 800dadc:	0800da79 	.word	0x0800da79

0800dae0 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800dae0:	b480      	push	{r7}
 800dae2:	b085      	sub	sp, #20
 800dae4:	af00      	add	r7, sp, #0
 800dae6:	60f8      	str	r0, [r7, #12]
 800dae8:	60b9      	str	r1, [r7, #8]
 800daea:	4611      	mov	r1, r2
 800daec:	461a      	mov	r2, r3
 800daee:	460b      	mov	r3, r1
 800daf0:	80fb      	strh	r3, [r7, #6]
 800daf2:	4613      	mov	r3, r2
 800daf4:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	2200      	movs	r2, #0
 800dafa:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	68ba      	ldr	r2, [r7, #8]
 800db00:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	88fa      	ldrh	r2, [r7, #6]
 800db06:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	88ba      	ldrh	r2, [r7, #4]
 800db0c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800db0e:	8b3b      	ldrh	r3, [r7, #24]
 800db10:	b2da      	uxtb	r2, r3
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	7f3a      	ldrb	r2, [r7, #28]
 800db1a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	2201      	movs	r2, #1
 800db20:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	2200      	movs	r2, #0
 800db26:	73da      	strb	r2, [r3, #15]
}
 800db28:	bf00      	nop
 800db2a:	3714      	adds	r7, #20
 800db2c:	46bd      	mov	sp, r7
 800db2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db32:	4770      	bx	lr

0800db34 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800db34:	b580      	push	{r7, lr}
 800db36:	b08c      	sub	sp, #48	@ 0x30
 800db38:	af02      	add	r7, sp, #8
 800db3a:	4603      	mov	r3, r0
 800db3c:	71fb      	strb	r3, [r7, #7]
 800db3e:	460b      	mov	r3, r1
 800db40:	80bb      	strh	r3, [r7, #4]
 800db42:	4613      	mov	r3, r2
 800db44:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800db46:	79fb      	ldrb	r3, [r7, #7]
 800db48:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800db4a:	887b      	ldrh	r3, [r7, #2]
 800db4c:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800db50:	d07f      	beq.n	800dc52 <pbuf_alloc+0x11e>
 800db52:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800db56:	f300 80c8 	bgt.w	800dcea <pbuf_alloc+0x1b6>
 800db5a:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800db5e:	d010      	beq.n	800db82 <pbuf_alloc+0x4e>
 800db60:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800db64:	f300 80c1 	bgt.w	800dcea <pbuf_alloc+0x1b6>
 800db68:	2b01      	cmp	r3, #1
 800db6a:	d002      	beq.n	800db72 <pbuf_alloc+0x3e>
 800db6c:	2b41      	cmp	r3, #65	@ 0x41
 800db6e:	f040 80bc 	bne.w	800dcea <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800db72:	887a      	ldrh	r2, [r7, #2]
 800db74:	88bb      	ldrh	r3, [r7, #4]
 800db76:	4619      	mov	r1, r3
 800db78:	2000      	movs	r0, #0
 800db7a:	f000 f8d1 	bl	800dd20 <pbuf_alloc_reference>
 800db7e:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800db80:	e0bd      	b.n	800dcfe <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800db82:	2300      	movs	r3, #0
 800db84:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800db86:	2300      	movs	r3, #0
 800db88:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800db8a:	88bb      	ldrh	r3, [r7, #4]
 800db8c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800db8e:	200c      	movs	r0, #12
 800db90:	f7ff fbcc 	bl	800d32c <memp_malloc>
 800db94:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800db96:	693b      	ldr	r3, [r7, #16]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d109      	bne.n	800dbb0 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800db9c:	f7ff ff76 	bl	800da8c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800dba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d002      	beq.n	800dbac <pbuf_alloc+0x78>
            pbuf_free(p);
 800dba6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800dba8:	f000 faa8 	bl	800e0fc <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800dbac:	2300      	movs	r3, #0
 800dbae:	e0a7      	b.n	800dd00 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800dbb0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800dbb2:	3303      	adds	r3, #3
 800dbb4:	b29b      	uxth	r3, r3
 800dbb6:	f023 0303 	bic.w	r3, r3, #3
 800dbba:	b29b      	uxth	r3, r3
 800dbbc:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 800dbc0:	b29b      	uxth	r3, r3
 800dbc2:	8b7a      	ldrh	r2, [r7, #26]
 800dbc4:	4293      	cmp	r3, r2
 800dbc6:	bf28      	it	cs
 800dbc8:	4613      	movcs	r3, r2
 800dbca:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800dbcc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800dbce:	3310      	adds	r3, #16
 800dbd0:	693a      	ldr	r2, [r7, #16]
 800dbd2:	4413      	add	r3, r2
 800dbd4:	3303      	adds	r3, #3
 800dbd6:	f023 0303 	bic.w	r3, r3, #3
 800dbda:	4618      	mov	r0, r3
 800dbdc:	89f9      	ldrh	r1, [r7, #14]
 800dbde:	8b7a      	ldrh	r2, [r7, #26]
 800dbe0:	2300      	movs	r3, #0
 800dbe2:	9301      	str	r3, [sp, #4]
 800dbe4:	887b      	ldrh	r3, [r7, #2]
 800dbe6:	9300      	str	r3, [sp, #0]
 800dbe8:	460b      	mov	r3, r1
 800dbea:	4601      	mov	r1, r0
 800dbec:	6938      	ldr	r0, [r7, #16]
 800dbee:	f7ff ff77 	bl	800dae0 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800dbf2:	693b      	ldr	r3, [r7, #16]
 800dbf4:	685b      	ldr	r3, [r3, #4]
 800dbf6:	f003 0303 	and.w	r3, r3, #3
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d006      	beq.n	800dc0c <pbuf_alloc+0xd8>
 800dbfe:	4b42      	ldr	r3, [pc, #264]	@ (800dd08 <pbuf_alloc+0x1d4>)
 800dc00:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800dc04:	4941      	ldr	r1, [pc, #260]	@ (800dd0c <pbuf_alloc+0x1d8>)
 800dc06:	4842      	ldr	r0, [pc, #264]	@ (800dd10 <pbuf_alloc+0x1dc>)
 800dc08:	f009 fb64 	bl	80172d4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800dc0c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800dc0e:	3303      	adds	r3, #3
 800dc10:	f023 0303 	bic.w	r3, r3, #3
 800dc14:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800dc18:	d106      	bne.n	800dc28 <pbuf_alloc+0xf4>
 800dc1a:	4b3b      	ldr	r3, [pc, #236]	@ (800dd08 <pbuf_alloc+0x1d4>)
 800dc1c:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800dc20:	493c      	ldr	r1, [pc, #240]	@ (800dd14 <pbuf_alloc+0x1e0>)
 800dc22:	483b      	ldr	r0, [pc, #236]	@ (800dd10 <pbuf_alloc+0x1dc>)
 800dc24:	f009 fb56 	bl	80172d4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800dc28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d102      	bne.n	800dc34 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800dc2e:	693b      	ldr	r3, [r7, #16]
 800dc30:	627b      	str	r3, [r7, #36]	@ 0x24
 800dc32:	e002      	b.n	800dc3a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800dc34:	69fb      	ldr	r3, [r7, #28]
 800dc36:	693a      	ldr	r2, [r7, #16]
 800dc38:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800dc3a:	693b      	ldr	r3, [r7, #16]
 800dc3c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800dc3e:	8b7a      	ldrh	r2, [r7, #26]
 800dc40:	89fb      	ldrh	r3, [r7, #14]
 800dc42:	1ad3      	subs	r3, r2, r3
 800dc44:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800dc46:	2300      	movs	r3, #0
 800dc48:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800dc4a:	8b7b      	ldrh	r3, [r7, #26]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d19e      	bne.n	800db8e <pbuf_alloc+0x5a>
      break;
 800dc50:	e055      	b.n	800dcfe <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800dc52:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800dc54:	3303      	adds	r3, #3
 800dc56:	b29b      	uxth	r3, r3
 800dc58:	f023 0303 	bic.w	r3, r3, #3
 800dc5c:	b29a      	uxth	r2, r3
 800dc5e:	88bb      	ldrh	r3, [r7, #4]
 800dc60:	3303      	adds	r3, #3
 800dc62:	b29b      	uxth	r3, r3
 800dc64:	f023 0303 	bic.w	r3, r3, #3
 800dc68:	b29b      	uxth	r3, r3
 800dc6a:	4413      	add	r3, r2
 800dc6c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800dc6e:	8b3b      	ldrh	r3, [r7, #24]
 800dc70:	3310      	adds	r3, #16
 800dc72:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800dc74:	8b3a      	ldrh	r2, [r7, #24]
 800dc76:	88bb      	ldrh	r3, [r7, #4]
 800dc78:	3303      	adds	r3, #3
 800dc7a:	f023 0303 	bic.w	r3, r3, #3
 800dc7e:	429a      	cmp	r2, r3
 800dc80:	d306      	bcc.n	800dc90 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800dc82:	8afa      	ldrh	r2, [r7, #22]
 800dc84:	88bb      	ldrh	r3, [r7, #4]
 800dc86:	3303      	adds	r3, #3
 800dc88:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800dc8c:	429a      	cmp	r2, r3
 800dc8e:	d201      	bcs.n	800dc94 <pbuf_alloc+0x160>
        return NULL;
 800dc90:	2300      	movs	r3, #0
 800dc92:	e035      	b.n	800dd00 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800dc94:	8afb      	ldrh	r3, [r7, #22]
 800dc96:	4618      	mov	r0, r3
 800dc98:	f7ff f9a4 	bl	800cfe4 <mem_malloc>
 800dc9c:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800dc9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d101      	bne.n	800dca8 <pbuf_alloc+0x174>
        return NULL;
 800dca4:	2300      	movs	r3, #0
 800dca6:	e02b      	b.n	800dd00 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800dca8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800dcaa:	3310      	adds	r3, #16
 800dcac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dcae:	4413      	add	r3, r2
 800dcb0:	3303      	adds	r3, #3
 800dcb2:	f023 0303 	bic.w	r3, r3, #3
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	88b9      	ldrh	r1, [r7, #4]
 800dcba:	88ba      	ldrh	r2, [r7, #4]
 800dcbc:	2300      	movs	r3, #0
 800dcbe:	9301      	str	r3, [sp, #4]
 800dcc0:	887b      	ldrh	r3, [r7, #2]
 800dcc2:	9300      	str	r3, [sp, #0]
 800dcc4:	460b      	mov	r3, r1
 800dcc6:	4601      	mov	r1, r0
 800dcc8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800dcca:	f7ff ff09 	bl	800dae0 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800dcce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcd0:	685b      	ldr	r3, [r3, #4]
 800dcd2:	f003 0303 	and.w	r3, r3, #3
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d010      	beq.n	800dcfc <pbuf_alloc+0x1c8>
 800dcda:	4b0b      	ldr	r3, [pc, #44]	@ (800dd08 <pbuf_alloc+0x1d4>)
 800dcdc:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800dce0:	490d      	ldr	r1, [pc, #52]	@ (800dd18 <pbuf_alloc+0x1e4>)
 800dce2:	480b      	ldr	r0, [pc, #44]	@ (800dd10 <pbuf_alloc+0x1dc>)
 800dce4:	f009 faf6 	bl	80172d4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800dce8:	e008      	b.n	800dcfc <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800dcea:	4b07      	ldr	r3, [pc, #28]	@ (800dd08 <pbuf_alloc+0x1d4>)
 800dcec:	f240 1227 	movw	r2, #295	@ 0x127
 800dcf0:	490a      	ldr	r1, [pc, #40]	@ (800dd1c <pbuf_alloc+0x1e8>)
 800dcf2:	4807      	ldr	r0, [pc, #28]	@ (800dd10 <pbuf_alloc+0x1dc>)
 800dcf4:	f009 faee 	bl	80172d4 <iprintf>
      return NULL;
 800dcf8:	2300      	movs	r3, #0
 800dcfa:	e001      	b.n	800dd00 <pbuf_alloc+0x1cc>
      break;
 800dcfc:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800dcfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800dd00:	4618      	mov	r0, r3
 800dd02:	3728      	adds	r7, #40	@ 0x28
 800dd04:	46bd      	mov	sp, r7
 800dd06:	bd80      	pop	{r7, pc}
 800dd08:	08018e44 	.word	0x08018e44
 800dd0c:	08018e74 	.word	0x08018e74
 800dd10:	08018ea4 	.word	0x08018ea4
 800dd14:	08018ecc 	.word	0x08018ecc
 800dd18:	08018f00 	.word	0x08018f00
 800dd1c:	08018f2c 	.word	0x08018f2c

0800dd20 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800dd20:	b580      	push	{r7, lr}
 800dd22:	b086      	sub	sp, #24
 800dd24:	af02      	add	r7, sp, #8
 800dd26:	6078      	str	r0, [r7, #4]
 800dd28:	460b      	mov	r3, r1
 800dd2a:	807b      	strh	r3, [r7, #2]
 800dd2c:	4613      	mov	r3, r2
 800dd2e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800dd30:	883b      	ldrh	r3, [r7, #0]
 800dd32:	2b41      	cmp	r3, #65	@ 0x41
 800dd34:	d009      	beq.n	800dd4a <pbuf_alloc_reference+0x2a>
 800dd36:	883b      	ldrh	r3, [r7, #0]
 800dd38:	2b01      	cmp	r3, #1
 800dd3a:	d006      	beq.n	800dd4a <pbuf_alloc_reference+0x2a>
 800dd3c:	4b0f      	ldr	r3, [pc, #60]	@ (800dd7c <pbuf_alloc_reference+0x5c>)
 800dd3e:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800dd42:	490f      	ldr	r1, [pc, #60]	@ (800dd80 <pbuf_alloc_reference+0x60>)
 800dd44:	480f      	ldr	r0, [pc, #60]	@ (800dd84 <pbuf_alloc_reference+0x64>)
 800dd46:	f009 fac5 	bl	80172d4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800dd4a:	200b      	movs	r0, #11
 800dd4c:	f7ff faee 	bl	800d32c <memp_malloc>
 800dd50:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d101      	bne.n	800dd5c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800dd58:	2300      	movs	r3, #0
 800dd5a:	e00b      	b.n	800dd74 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800dd5c:	8879      	ldrh	r1, [r7, #2]
 800dd5e:	887a      	ldrh	r2, [r7, #2]
 800dd60:	2300      	movs	r3, #0
 800dd62:	9301      	str	r3, [sp, #4]
 800dd64:	883b      	ldrh	r3, [r7, #0]
 800dd66:	9300      	str	r3, [sp, #0]
 800dd68:	460b      	mov	r3, r1
 800dd6a:	6879      	ldr	r1, [r7, #4]
 800dd6c:	68f8      	ldr	r0, [r7, #12]
 800dd6e:	f7ff feb7 	bl	800dae0 <pbuf_init_alloced_pbuf>
  return p;
 800dd72:	68fb      	ldr	r3, [r7, #12]
}
 800dd74:	4618      	mov	r0, r3
 800dd76:	3710      	adds	r7, #16
 800dd78:	46bd      	mov	sp, r7
 800dd7a:	bd80      	pop	{r7, pc}
 800dd7c:	08018e44 	.word	0x08018e44
 800dd80:	08018f48 	.word	0x08018f48
 800dd84:	08018ea4 	.word	0x08018ea4

0800dd88 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800dd88:	b580      	push	{r7, lr}
 800dd8a:	b088      	sub	sp, #32
 800dd8c:	af02      	add	r7, sp, #8
 800dd8e:	607b      	str	r3, [r7, #4]
 800dd90:	4603      	mov	r3, r0
 800dd92:	73fb      	strb	r3, [r7, #15]
 800dd94:	460b      	mov	r3, r1
 800dd96:	81bb      	strh	r3, [r7, #12]
 800dd98:	4613      	mov	r3, r2
 800dd9a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800dd9c:	7bfb      	ldrb	r3, [r7, #15]
 800dd9e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800dda0:	8a7b      	ldrh	r3, [r7, #18]
 800dda2:	3303      	adds	r3, #3
 800dda4:	f023 0203 	bic.w	r2, r3, #3
 800dda8:	89bb      	ldrh	r3, [r7, #12]
 800ddaa:	441a      	add	r2, r3
 800ddac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ddae:	429a      	cmp	r2, r3
 800ddb0:	d901      	bls.n	800ddb6 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800ddb2:	2300      	movs	r3, #0
 800ddb4:	e018      	b.n	800dde8 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800ddb6:	6a3b      	ldr	r3, [r7, #32]
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d007      	beq.n	800ddcc <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800ddbc:	8a7b      	ldrh	r3, [r7, #18]
 800ddbe:	3303      	adds	r3, #3
 800ddc0:	f023 0303 	bic.w	r3, r3, #3
 800ddc4:	6a3a      	ldr	r2, [r7, #32]
 800ddc6:	4413      	add	r3, r2
 800ddc8:	617b      	str	r3, [r7, #20]
 800ddca:	e001      	b.n	800ddd0 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800ddcc:	2300      	movs	r3, #0
 800ddce:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800ddd0:	6878      	ldr	r0, [r7, #4]
 800ddd2:	89b9      	ldrh	r1, [r7, #12]
 800ddd4:	89ba      	ldrh	r2, [r7, #12]
 800ddd6:	2302      	movs	r3, #2
 800ddd8:	9301      	str	r3, [sp, #4]
 800ddda:	897b      	ldrh	r3, [r7, #10]
 800dddc:	9300      	str	r3, [sp, #0]
 800ddde:	460b      	mov	r3, r1
 800dde0:	6979      	ldr	r1, [r7, #20]
 800dde2:	f7ff fe7d 	bl	800dae0 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800dde6:	687b      	ldr	r3, [r7, #4]
}
 800dde8:	4618      	mov	r0, r3
 800ddea:	3718      	adds	r7, #24
 800ddec:	46bd      	mov	sp, r7
 800ddee:	bd80      	pop	{r7, pc}

0800ddf0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800ddf0:	b580      	push	{r7, lr}
 800ddf2:	b084      	sub	sp, #16
 800ddf4:	af00      	add	r7, sp, #0
 800ddf6:	6078      	str	r0, [r7, #4]
 800ddf8:	460b      	mov	r3, r1
 800ddfa:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d106      	bne.n	800de10 <pbuf_realloc+0x20>
 800de02:	4b3a      	ldr	r3, [pc, #232]	@ (800deec <pbuf_realloc+0xfc>)
 800de04:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800de08:	4939      	ldr	r1, [pc, #228]	@ (800def0 <pbuf_realloc+0x100>)
 800de0a:	483a      	ldr	r0, [pc, #232]	@ (800def4 <pbuf_realloc+0x104>)
 800de0c:	f009 fa62 	bl	80172d4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	891b      	ldrh	r3, [r3, #8]
 800de14:	887a      	ldrh	r2, [r7, #2]
 800de16:	429a      	cmp	r2, r3
 800de18:	d263      	bcs.n	800dee2 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	891a      	ldrh	r2, [r3, #8]
 800de1e:	887b      	ldrh	r3, [r7, #2]
 800de20:	1ad3      	subs	r3, r2, r3
 800de22:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800de24:	887b      	ldrh	r3, [r7, #2]
 800de26:	817b      	strh	r3, [r7, #10]
  q = p;
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800de2c:	e018      	b.n	800de60 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	895b      	ldrh	r3, [r3, #10]
 800de32:	897a      	ldrh	r2, [r7, #10]
 800de34:	1ad3      	subs	r3, r2, r3
 800de36:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	891a      	ldrh	r2, [r3, #8]
 800de3c:	893b      	ldrh	r3, [r7, #8]
 800de3e:	1ad3      	subs	r3, r2, r3
 800de40:	b29a      	uxth	r2, r3
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d106      	bne.n	800de60 <pbuf_realloc+0x70>
 800de52:	4b26      	ldr	r3, [pc, #152]	@ (800deec <pbuf_realloc+0xfc>)
 800de54:	f240 12af 	movw	r2, #431	@ 0x1af
 800de58:	4927      	ldr	r1, [pc, #156]	@ (800def8 <pbuf_realloc+0x108>)
 800de5a:	4826      	ldr	r0, [pc, #152]	@ (800def4 <pbuf_realloc+0x104>)
 800de5c:	f009 fa3a 	bl	80172d4 <iprintf>
  while (rem_len > q->len) {
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	895b      	ldrh	r3, [r3, #10]
 800de64:	897a      	ldrh	r2, [r7, #10]
 800de66:	429a      	cmp	r2, r3
 800de68:	d8e1      	bhi.n	800de2e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	7b1b      	ldrb	r3, [r3, #12]
 800de6e:	f003 030f 	and.w	r3, r3, #15
 800de72:	2b00      	cmp	r3, #0
 800de74:	d121      	bne.n	800deba <pbuf_realloc+0xca>
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	895b      	ldrh	r3, [r3, #10]
 800de7a:	897a      	ldrh	r2, [r7, #10]
 800de7c:	429a      	cmp	r2, r3
 800de7e:	d01c      	beq.n	800deba <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	7b5b      	ldrb	r3, [r3, #13]
 800de84:	f003 0302 	and.w	r3, r3, #2
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d116      	bne.n	800deba <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	685a      	ldr	r2, [r3, #4]
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	1ad3      	subs	r3, r2, r3
 800de94:	b29a      	uxth	r2, r3
 800de96:	897b      	ldrh	r3, [r7, #10]
 800de98:	4413      	add	r3, r2
 800de9a:	b29b      	uxth	r3, r3
 800de9c:	4619      	mov	r1, r3
 800de9e:	68f8      	ldr	r0, [r7, #12]
 800dea0:	f7fe ff96 	bl	800cdd0 <mem_trim>
 800dea4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d106      	bne.n	800deba <pbuf_realloc+0xca>
 800deac:	4b0f      	ldr	r3, [pc, #60]	@ (800deec <pbuf_realloc+0xfc>)
 800deae:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800deb2:	4912      	ldr	r1, [pc, #72]	@ (800defc <pbuf_realloc+0x10c>)
 800deb4:	480f      	ldr	r0, [pc, #60]	@ (800def4 <pbuf_realloc+0x104>)
 800deb6:	f009 fa0d 	bl	80172d4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	897a      	ldrh	r2, [r7, #10]
 800debe:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	895a      	ldrh	r2, [r3, #10]
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d004      	beq.n	800deda <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	4618      	mov	r0, r3
 800ded6:	f000 f911 	bl	800e0fc <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	2200      	movs	r2, #0
 800dede:	601a      	str	r2, [r3, #0]
 800dee0:	e000      	b.n	800dee4 <pbuf_realloc+0xf4>
    return;
 800dee2:	bf00      	nop

}
 800dee4:	3710      	adds	r7, #16
 800dee6:	46bd      	mov	sp, r7
 800dee8:	bd80      	pop	{r7, pc}
 800deea:	bf00      	nop
 800deec:	08018e44 	.word	0x08018e44
 800def0:	08018f5c 	.word	0x08018f5c
 800def4:	08018ea4 	.word	0x08018ea4
 800def8:	08018f74 	.word	0x08018f74
 800defc:	08018f8c 	.word	0x08018f8c

0800df00 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800df00:	b580      	push	{r7, lr}
 800df02:	b086      	sub	sp, #24
 800df04:	af00      	add	r7, sp, #0
 800df06:	60f8      	str	r0, [r7, #12]
 800df08:	60b9      	str	r1, [r7, #8]
 800df0a:	4613      	mov	r3, r2
 800df0c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	2b00      	cmp	r3, #0
 800df12:	d106      	bne.n	800df22 <pbuf_add_header_impl+0x22>
 800df14:	4b2b      	ldr	r3, [pc, #172]	@ (800dfc4 <pbuf_add_header_impl+0xc4>)
 800df16:	f240 12df 	movw	r2, #479	@ 0x1df
 800df1a:	492b      	ldr	r1, [pc, #172]	@ (800dfc8 <pbuf_add_header_impl+0xc8>)
 800df1c:	482b      	ldr	r0, [pc, #172]	@ (800dfcc <pbuf_add_header_impl+0xcc>)
 800df1e:	f009 f9d9 	bl	80172d4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	2b00      	cmp	r3, #0
 800df26:	d003      	beq.n	800df30 <pbuf_add_header_impl+0x30>
 800df28:	68bb      	ldr	r3, [r7, #8]
 800df2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800df2e:	d301      	bcc.n	800df34 <pbuf_add_header_impl+0x34>
    return 1;
 800df30:	2301      	movs	r3, #1
 800df32:	e043      	b.n	800dfbc <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800df34:	68bb      	ldr	r3, [r7, #8]
 800df36:	2b00      	cmp	r3, #0
 800df38:	d101      	bne.n	800df3e <pbuf_add_header_impl+0x3e>
    return 0;
 800df3a:	2300      	movs	r3, #0
 800df3c:	e03e      	b.n	800dfbc <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800df3e:	68bb      	ldr	r3, [r7, #8]
 800df40:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	891a      	ldrh	r2, [r3, #8]
 800df46:	8a7b      	ldrh	r3, [r7, #18]
 800df48:	4413      	add	r3, r2
 800df4a:	b29b      	uxth	r3, r3
 800df4c:	8a7a      	ldrh	r2, [r7, #18]
 800df4e:	429a      	cmp	r2, r3
 800df50:	d901      	bls.n	800df56 <pbuf_add_header_impl+0x56>
    return 1;
 800df52:	2301      	movs	r3, #1
 800df54:	e032      	b.n	800dfbc <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	7b1b      	ldrb	r3, [r3, #12]
 800df5a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800df5c:	8a3b      	ldrh	r3, [r7, #16]
 800df5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800df62:	2b00      	cmp	r3, #0
 800df64:	d00c      	beq.n	800df80 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	685a      	ldr	r2, [r3, #4]
 800df6a:	68bb      	ldr	r3, [r7, #8]
 800df6c:	425b      	negs	r3, r3
 800df6e:	4413      	add	r3, r2
 800df70:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	3310      	adds	r3, #16
 800df76:	697a      	ldr	r2, [r7, #20]
 800df78:	429a      	cmp	r2, r3
 800df7a:	d20d      	bcs.n	800df98 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800df7c:	2301      	movs	r3, #1
 800df7e:	e01d      	b.n	800dfbc <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800df80:	79fb      	ldrb	r3, [r7, #7]
 800df82:	2b00      	cmp	r3, #0
 800df84:	d006      	beq.n	800df94 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	685a      	ldr	r2, [r3, #4]
 800df8a:	68bb      	ldr	r3, [r7, #8]
 800df8c:	425b      	negs	r3, r3
 800df8e:	4413      	add	r3, r2
 800df90:	617b      	str	r3, [r7, #20]
 800df92:	e001      	b.n	800df98 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800df94:	2301      	movs	r3, #1
 800df96:	e011      	b.n	800dfbc <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	697a      	ldr	r2, [r7, #20]
 800df9c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	895a      	ldrh	r2, [r3, #10]
 800dfa2:	8a7b      	ldrh	r3, [r7, #18]
 800dfa4:	4413      	add	r3, r2
 800dfa6:	b29a      	uxth	r2, r3
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	891a      	ldrh	r2, [r3, #8]
 800dfb0:	8a7b      	ldrh	r3, [r7, #18]
 800dfb2:	4413      	add	r3, r2
 800dfb4:	b29a      	uxth	r2, r3
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	811a      	strh	r2, [r3, #8]


  return 0;
 800dfba:	2300      	movs	r3, #0
}
 800dfbc:	4618      	mov	r0, r3
 800dfbe:	3718      	adds	r7, #24
 800dfc0:	46bd      	mov	sp, r7
 800dfc2:	bd80      	pop	{r7, pc}
 800dfc4:	08018e44 	.word	0x08018e44
 800dfc8:	08018fa8 	.word	0x08018fa8
 800dfcc:	08018ea4 	.word	0x08018ea4

0800dfd0 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800dfd0:	b580      	push	{r7, lr}
 800dfd2:	b082      	sub	sp, #8
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	6078      	str	r0, [r7, #4]
 800dfd8:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800dfda:	2200      	movs	r2, #0
 800dfdc:	6839      	ldr	r1, [r7, #0]
 800dfde:	6878      	ldr	r0, [r7, #4]
 800dfe0:	f7ff ff8e 	bl	800df00 <pbuf_add_header_impl>
 800dfe4:	4603      	mov	r3, r0
}
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	3708      	adds	r7, #8
 800dfea:	46bd      	mov	sp, r7
 800dfec:	bd80      	pop	{r7, pc}
	...

0800dff0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800dff0:	b580      	push	{r7, lr}
 800dff2:	b084      	sub	sp, #16
 800dff4:	af00      	add	r7, sp, #0
 800dff6:	6078      	str	r0, [r7, #4]
 800dff8:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d106      	bne.n	800e00e <pbuf_remove_header+0x1e>
 800e000:	4b20      	ldr	r3, [pc, #128]	@ (800e084 <pbuf_remove_header+0x94>)
 800e002:	f240 224b 	movw	r2, #587	@ 0x24b
 800e006:	4920      	ldr	r1, [pc, #128]	@ (800e088 <pbuf_remove_header+0x98>)
 800e008:	4820      	ldr	r0, [pc, #128]	@ (800e08c <pbuf_remove_header+0x9c>)
 800e00a:	f009 f963 	bl	80172d4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	2b00      	cmp	r3, #0
 800e012:	d003      	beq.n	800e01c <pbuf_remove_header+0x2c>
 800e014:	683b      	ldr	r3, [r7, #0]
 800e016:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e01a:	d301      	bcc.n	800e020 <pbuf_remove_header+0x30>
    return 1;
 800e01c:	2301      	movs	r3, #1
 800e01e:	e02c      	b.n	800e07a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800e020:	683b      	ldr	r3, [r7, #0]
 800e022:	2b00      	cmp	r3, #0
 800e024:	d101      	bne.n	800e02a <pbuf_remove_header+0x3a>
    return 0;
 800e026:	2300      	movs	r3, #0
 800e028:	e027      	b.n	800e07a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800e02a:	683b      	ldr	r3, [r7, #0]
 800e02c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	895b      	ldrh	r3, [r3, #10]
 800e032:	89fa      	ldrh	r2, [r7, #14]
 800e034:	429a      	cmp	r2, r3
 800e036:	d908      	bls.n	800e04a <pbuf_remove_header+0x5a>
 800e038:	4b12      	ldr	r3, [pc, #72]	@ (800e084 <pbuf_remove_header+0x94>)
 800e03a:	f240 2255 	movw	r2, #597	@ 0x255
 800e03e:	4914      	ldr	r1, [pc, #80]	@ (800e090 <pbuf_remove_header+0xa0>)
 800e040:	4812      	ldr	r0, [pc, #72]	@ (800e08c <pbuf_remove_header+0x9c>)
 800e042:	f009 f947 	bl	80172d4 <iprintf>
 800e046:	2301      	movs	r3, #1
 800e048:	e017      	b.n	800e07a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	685b      	ldr	r3, [r3, #4]
 800e04e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	685a      	ldr	r2, [r3, #4]
 800e054:	683b      	ldr	r3, [r7, #0]
 800e056:	441a      	add	r2, r3
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	895a      	ldrh	r2, [r3, #10]
 800e060:	89fb      	ldrh	r3, [r7, #14]
 800e062:	1ad3      	subs	r3, r2, r3
 800e064:	b29a      	uxth	r2, r3
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	891a      	ldrh	r2, [r3, #8]
 800e06e:	89fb      	ldrh	r3, [r7, #14]
 800e070:	1ad3      	subs	r3, r2, r3
 800e072:	b29a      	uxth	r2, r3
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800e078:	2300      	movs	r3, #0
}
 800e07a:	4618      	mov	r0, r3
 800e07c:	3710      	adds	r7, #16
 800e07e:	46bd      	mov	sp, r7
 800e080:	bd80      	pop	{r7, pc}
 800e082:	bf00      	nop
 800e084:	08018e44 	.word	0x08018e44
 800e088:	08018fa8 	.word	0x08018fa8
 800e08c:	08018ea4 	.word	0x08018ea4
 800e090:	08018fb4 	.word	0x08018fb4

0800e094 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800e094:	b580      	push	{r7, lr}
 800e096:	b082      	sub	sp, #8
 800e098:	af00      	add	r7, sp, #0
 800e09a:	6078      	str	r0, [r7, #4]
 800e09c:	460b      	mov	r3, r1
 800e09e:	807b      	strh	r3, [r7, #2]
 800e0a0:	4613      	mov	r3, r2
 800e0a2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800e0a4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	da08      	bge.n	800e0be <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800e0ac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e0b0:	425b      	negs	r3, r3
 800e0b2:	4619      	mov	r1, r3
 800e0b4:	6878      	ldr	r0, [r7, #4]
 800e0b6:	f7ff ff9b 	bl	800dff0 <pbuf_remove_header>
 800e0ba:	4603      	mov	r3, r0
 800e0bc:	e007      	b.n	800e0ce <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800e0be:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e0c2:	787a      	ldrb	r2, [r7, #1]
 800e0c4:	4619      	mov	r1, r3
 800e0c6:	6878      	ldr	r0, [r7, #4]
 800e0c8:	f7ff ff1a 	bl	800df00 <pbuf_add_header_impl>
 800e0cc:	4603      	mov	r3, r0
  }
}
 800e0ce:	4618      	mov	r0, r3
 800e0d0:	3708      	adds	r7, #8
 800e0d2:	46bd      	mov	sp, r7
 800e0d4:	bd80      	pop	{r7, pc}

0800e0d6 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800e0d6:	b580      	push	{r7, lr}
 800e0d8:	b082      	sub	sp, #8
 800e0da:	af00      	add	r7, sp, #0
 800e0dc:	6078      	str	r0, [r7, #4]
 800e0de:	460b      	mov	r3, r1
 800e0e0:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800e0e2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e0e6:	2201      	movs	r2, #1
 800e0e8:	4619      	mov	r1, r3
 800e0ea:	6878      	ldr	r0, [r7, #4]
 800e0ec:	f7ff ffd2 	bl	800e094 <pbuf_header_impl>
 800e0f0:	4603      	mov	r3, r0
}
 800e0f2:	4618      	mov	r0, r3
 800e0f4:	3708      	adds	r7, #8
 800e0f6:	46bd      	mov	sp, r7
 800e0f8:	bd80      	pop	{r7, pc}
	...

0800e0fc <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b088      	sub	sp, #32
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	2b00      	cmp	r3, #0
 800e108:	d10b      	bne.n	800e122 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d106      	bne.n	800e11e <pbuf_free+0x22>
 800e110:	4b3b      	ldr	r3, [pc, #236]	@ (800e200 <pbuf_free+0x104>)
 800e112:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800e116:	493b      	ldr	r1, [pc, #236]	@ (800e204 <pbuf_free+0x108>)
 800e118:	483b      	ldr	r0, [pc, #236]	@ (800e208 <pbuf_free+0x10c>)
 800e11a:	f009 f8db 	bl	80172d4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800e11e:	2300      	movs	r3, #0
 800e120:	e069      	b.n	800e1f6 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800e122:	2300      	movs	r3, #0
 800e124:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800e126:	e062      	b.n	800e1ee <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800e128:	f008 fa9c 	bl	8016664 <sys_arch_protect>
 800e12c:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	7b9b      	ldrb	r3, [r3, #14]
 800e132:	2b00      	cmp	r3, #0
 800e134:	d106      	bne.n	800e144 <pbuf_free+0x48>
 800e136:	4b32      	ldr	r3, [pc, #200]	@ (800e200 <pbuf_free+0x104>)
 800e138:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800e13c:	4933      	ldr	r1, [pc, #204]	@ (800e20c <pbuf_free+0x110>)
 800e13e:	4832      	ldr	r0, [pc, #200]	@ (800e208 <pbuf_free+0x10c>)
 800e140:	f009 f8c8 	bl	80172d4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	7b9b      	ldrb	r3, [r3, #14]
 800e148:	3b01      	subs	r3, #1
 800e14a:	b2da      	uxtb	r2, r3
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	739a      	strb	r2, [r3, #14]
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	7b9b      	ldrb	r3, [r3, #14]
 800e154:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800e156:	69b8      	ldr	r0, [r7, #24]
 800e158:	f008 fa92 	bl	8016680 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800e15c:	7dfb      	ldrb	r3, [r7, #23]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d143      	bne.n	800e1ea <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	7b1b      	ldrb	r3, [r3, #12]
 800e16c:	f003 030f 	and.w	r3, r3, #15
 800e170:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	7b5b      	ldrb	r3, [r3, #13]
 800e176:	f003 0302 	and.w	r3, r3, #2
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d011      	beq.n	800e1a2 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800e182:	68bb      	ldr	r3, [r7, #8]
 800e184:	691b      	ldr	r3, [r3, #16]
 800e186:	2b00      	cmp	r3, #0
 800e188:	d106      	bne.n	800e198 <pbuf_free+0x9c>
 800e18a:	4b1d      	ldr	r3, [pc, #116]	@ (800e200 <pbuf_free+0x104>)
 800e18c:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800e190:	491f      	ldr	r1, [pc, #124]	@ (800e210 <pbuf_free+0x114>)
 800e192:	481d      	ldr	r0, [pc, #116]	@ (800e208 <pbuf_free+0x10c>)
 800e194:	f009 f89e 	bl	80172d4 <iprintf>
        pc->custom_free_function(p);
 800e198:	68bb      	ldr	r3, [r7, #8]
 800e19a:	691b      	ldr	r3, [r3, #16]
 800e19c:	6878      	ldr	r0, [r7, #4]
 800e19e:	4798      	blx	r3
 800e1a0:	e01d      	b.n	800e1de <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800e1a2:	7bfb      	ldrb	r3, [r7, #15]
 800e1a4:	2b02      	cmp	r3, #2
 800e1a6:	d104      	bne.n	800e1b2 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800e1a8:	6879      	ldr	r1, [r7, #4]
 800e1aa:	200c      	movs	r0, #12
 800e1ac:	f7ff f934 	bl	800d418 <memp_free>
 800e1b0:	e015      	b.n	800e1de <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800e1b2:	7bfb      	ldrb	r3, [r7, #15]
 800e1b4:	2b01      	cmp	r3, #1
 800e1b6:	d104      	bne.n	800e1c2 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800e1b8:	6879      	ldr	r1, [r7, #4]
 800e1ba:	200b      	movs	r0, #11
 800e1bc:	f7ff f92c 	bl	800d418 <memp_free>
 800e1c0:	e00d      	b.n	800e1de <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800e1c2:	7bfb      	ldrb	r3, [r7, #15]
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d103      	bne.n	800e1d0 <pbuf_free+0xd4>
          mem_free(p);
 800e1c8:	6878      	ldr	r0, [r7, #4]
 800e1ca:	f7fe fd71 	bl	800ccb0 <mem_free>
 800e1ce:	e006      	b.n	800e1de <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800e1d0:	4b0b      	ldr	r3, [pc, #44]	@ (800e200 <pbuf_free+0x104>)
 800e1d2:	f240 320f 	movw	r2, #783	@ 0x30f
 800e1d6:	490f      	ldr	r1, [pc, #60]	@ (800e214 <pbuf_free+0x118>)
 800e1d8:	480b      	ldr	r0, [pc, #44]	@ (800e208 <pbuf_free+0x10c>)
 800e1da:	f009 f87b 	bl	80172d4 <iprintf>
        }
      }
      count++;
 800e1de:	7ffb      	ldrb	r3, [r7, #31]
 800e1e0:	3301      	adds	r3, #1
 800e1e2:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800e1e4:	693b      	ldr	r3, [r7, #16]
 800e1e6:	607b      	str	r3, [r7, #4]
 800e1e8:	e001      	b.n	800e1ee <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d199      	bne.n	800e128 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800e1f4:	7ffb      	ldrb	r3, [r7, #31]
}
 800e1f6:	4618      	mov	r0, r3
 800e1f8:	3720      	adds	r7, #32
 800e1fa:	46bd      	mov	sp, r7
 800e1fc:	bd80      	pop	{r7, pc}
 800e1fe:	bf00      	nop
 800e200:	08018e44 	.word	0x08018e44
 800e204:	08018fa8 	.word	0x08018fa8
 800e208:	08018ea4 	.word	0x08018ea4
 800e20c:	08018fd4 	.word	0x08018fd4
 800e210:	08018fec 	.word	0x08018fec
 800e214:	08019010 	.word	0x08019010

0800e218 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800e218:	b480      	push	{r7}
 800e21a:	b085      	sub	sp, #20
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800e220:	2300      	movs	r3, #0
 800e222:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800e224:	e005      	b.n	800e232 <pbuf_clen+0x1a>
    ++len;
 800e226:	89fb      	ldrh	r3, [r7, #14]
 800e228:	3301      	adds	r3, #1
 800e22a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	2b00      	cmp	r3, #0
 800e236:	d1f6      	bne.n	800e226 <pbuf_clen+0xe>
  }
  return len;
 800e238:	89fb      	ldrh	r3, [r7, #14]
}
 800e23a:	4618      	mov	r0, r3
 800e23c:	3714      	adds	r7, #20
 800e23e:	46bd      	mov	sp, r7
 800e240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e244:	4770      	bx	lr
	...

0800e248 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800e248:	b580      	push	{r7, lr}
 800e24a:	b084      	sub	sp, #16
 800e24c:	af00      	add	r7, sp, #0
 800e24e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	2b00      	cmp	r3, #0
 800e254:	d016      	beq.n	800e284 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800e256:	f008 fa05 	bl	8016664 <sys_arch_protect>
 800e25a:	60f8      	str	r0, [r7, #12]
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	7b9b      	ldrb	r3, [r3, #14]
 800e260:	3301      	adds	r3, #1
 800e262:	b2da      	uxtb	r2, r3
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	739a      	strb	r2, [r3, #14]
 800e268:	68f8      	ldr	r0, [r7, #12]
 800e26a:	f008 fa09 	bl	8016680 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	7b9b      	ldrb	r3, [r3, #14]
 800e272:	2b00      	cmp	r3, #0
 800e274:	d106      	bne.n	800e284 <pbuf_ref+0x3c>
 800e276:	4b05      	ldr	r3, [pc, #20]	@ (800e28c <pbuf_ref+0x44>)
 800e278:	f240 3242 	movw	r2, #834	@ 0x342
 800e27c:	4904      	ldr	r1, [pc, #16]	@ (800e290 <pbuf_ref+0x48>)
 800e27e:	4805      	ldr	r0, [pc, #20]	@ (800e294 <pbuf_ref+0x4c>)
 800e280:	f009 f828 	bl	80172d4 <iprintf>
  }
}
 800e284:	bf00      	nop
 800e286:	3710      	adds	r7, #16
 800e288:	46bd      	mov	sp, r7
 800e28a:	bd80      	pop	{r7, pc}
 800e28c:	08018e44 	.word	0x08018e44
 800e290:	08019024 	.word	0x08019024
 800e294:	08018ea4 	.word	0x08018ea4

0800e298 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800e298:	b580      	push	{r7, lr}
 800e29a:	b084      	sub	sp, #16
 800e29c:	af00      	add	r7, sp, #0
 800e29e:	6078      	str	r0, [r7, #4]
 800e2a0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d002      	beq.n	800e2ae <pbuf_cat+0x16>
 800e2a8:	683b      	ldr	r3, [r7, #0]
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d107      	bne.n	800e2be <pbuf_cat+0x26>
 800e2ae:	4b20      	ldr	r3, [pc, #128]	@ (800e330 <pbuf_cat+0x98>)
 800e2b0:	f240 3259 	movw	r2, #857	@ 0x359
 800e2b4:	491f      	ldr	r1, [pc, #124]	@ (800e334 <pbuf_cat+0x9c>)
 800e2b6:	4820      	ldr	r0, [pc, #128]	@ (800e338 <pbuf_cat+0xa0>)
 800e2b8:	f009 f80c 	bl	80172d4 <iprintf>
 800e2bc:	e034      	b.n	800e328 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	60fb      	str	r3, [r7, #12]
 800e2c2:	e00a      	b.n	800e2da <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	891a      	ldrh	r2, [r3, #8]
 800e2c8:	683b      	ldr	r3, [r7, #0]
 800e2ca:	891b      	ldrh	r3, [r3, #8]
 800e2cc:	4413      	add	r3, r2
 800e2ce:	b29a      	uxth	r2, r3
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	60fb      	str	r3, [r7, #12]
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d1f0      	bne.n	800e2c4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	891a      	ldrh	r2, [r3, #8]
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	895b      	ldrh	r3, [r3, #10]
 800e2ea:	429a      	cmp	r2, r3
 800e2ec:	d006      	beq.n	800e2fc <pbuf_cat+0x64>
 800e2ee:	4b10      	ldr	r3, [pc, #64]	@ (800e330 <pbuf_cat+0x98>)
 800e2f0:	f240 3262 	movw	r2, #866	@ 0x362
 800e2f4:	4911      	ldr	r1, [pc, #68]	@ (800e33c <pbuf_cat+0xa4>)
 800e2f6:	4810      	ldr	r0, [pc, #64]	@ (800e338 <pbuf_cat+0xa0>)
 800e2f8:	f008 ffec 	bl	80172d4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	2b00      	cmp	r3, #0
 800e302:	d006      	beq.n	800e312 <pbuf_cat+0x7a>
 800e304:	4b0a      	ldr	r3, [pc, #40]	@ (800e330 <pbuf_cat+0x98>)
 800e306:	f240 3263 	movw	r2, #867	@ 0x363
 800e30a:	490d      	ldr	r1, [pc, #52]	@ (800e340 <pbuf_cat+0xa8>)
 800e30c:	480a      	ldr	r0, [pc, #40]	@ (800e338 <pbuf_cat+0xa0>)
 800e30e:	f008 ffe1 	bl	80172d4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	891a      	ldrh	r2, [r3, #8]
 800e316:	683b      	ldr	r3, [r7, #0]
 800e318:	891b      	ldrh	r3, [r3, #8]
 800e31a:	4413      	add	r3, r2
 800e31c:	b29a      	uxth	r2, r3
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	683a      	ldr	r2, [r7, #0]
 800e326:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800e328:	3710      	adds	r7, #16
 800e32a:	46bd      	mov	sp, r7
 800e32c:	bd80      	pop	{r7, pc}
 800e32e:	bf00      	nop
 800e330:	08018e44 	.word	0x08018e44
 800e334:	08019038 	.word	0x08019038
 800e338:	08018ea4 	.word	0x08018ea4
 800e33c:	08019070 	.word	0x08019070
 800e340:	080190a0 	.word	0x080190a0

0800e344 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800e344:	b580      	push	{r7, lr}
 800e346:	b086      	sub	sp, #24
 800e348:	af00      	add	r7, sp, #0
 800e34a:	6078      	str	r0, [r7, #4]
 800e34c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800e34e:	2300      	movs	r3, #0
 800e350:	617b      	str	r3, [r7, #20]
 800e352:	2300      	movs	r3, #0
 800e354:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d008      	beq.n	800e36e <pbuf_copy+0x2a>
 800e35c:	683b      	ldr	r3, [r7, #0]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d005      	beq.n	800e36e <pbuf_copy+0x2a>
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	891a      	ldrh	r2, [r3, #8]
 800e366:	683b      	ldr	r3, [r7, #0]
 800e368:	891b      	ldrh	r3, [r3, #8]
 800e36a:	429a      	cmp	r2, r3
 800e36c:	d209      	bcs.n	800e382 <pbuf_copy+0x3e>
 800e36e:	4b57      	ldr	r3, [pc, #348]	@ (800e4cc <pbuf_copy+0x188>)
 800e370:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800e374:	4956      	ldr	r1, [pc, #344]	@ (800e4d0 <pbuf_copy+0x18c>)
 800e376:	4857      	ldr	r0, [pc, #348]	@ (800e4d4 <pbuf_copy+0x190>)
 800e378:	f008 ffac 	bl	80172d4 <iprintf>
 800e37c:	f06f 030f 	mvn.w	r3, #15
 800e380:	e09f      	b.n	800e4c2 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	895b      	ldrh	r3, [r3, #10]
 800e386:	461a      	mov	r2, r3
 800e388:	697b      	ldr	r3, [r7, #20]
 800e38a:	1ad2      	subs	r2, r2, r3
 800e38c:	683b      	ldr	r3, [r7, #0]
 800e38e:	895b      	ldrh	r3, [r3, #10]
 800e390:	4619      	mov	r1, r3
 800e392:	693b      	ldr	r3, [r7, #16]
 800e394:	1acb      	subs	r3, r1, r3
 800e396:	429a      	cmp	r2, r3
 800e398:	d306      	bcc.n	800e3a8 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800e39a:	683b      	ldr	r3, [r7, #0]
 800e39c:	895b      	ldrh	r3, [r3, #10]
 800e39e:	461a      	mov	r2, r3
 800e3a0:	693b      	ldr	r3, [r7, #16]
 800e3a2:	1ad3      	subs	r3, r2, r3
 800e3a4:	60fb      	str	r3, [r7, #12]
 800e3a6:	e005      	b.n	800e3b4 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	895b      	ldrh	r3, [r3, #10]
 800e3ac:	461a      	mov	r2, r3
 800e3ae:	697b      	ldr	r3, [r7, #20]
 800e3b0:	1ad3      	subs	r3, r2, r3
 800e3b2:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	685a      	ldr	r2, [r3, #4]
 800e3b8:	697b      	ldr	r3, [r7, #20]
 800e3ba:	18d0      	adds	r0, r2, r3
 800e3bc:	683b      	ldr	r3, [r7, #0]
 800e3be:	685a      	ldr	r2, [r3, #4]
 800e3c0:	693b      	ldr	r3, [r7, #16]
 800e3c2:	4413      	add	r3, r2
 800e3c4:	68fa      	ldr	r2, [r7, #12]
 800e3c6:	4619      	mov	r1, r3
 800e3c8:	f009 f90d 	bl	80175e6 <memcpy>
    offset_to += len;
 800e3cc:	697a      	ldr	r2, [r7, #20]
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	4413      	add	r3, r2
 800e3d2:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800e3d4:	693a      	ldr	r2, [r7, #16]
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	4413      	add	r3, r2
 800e3da:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	895b      	ldrh	r3, [r3, #10]
 800e3e0:	461a      	mov	r2, r3
 800e3e2:	697b      	ldr	r3, [r7, #20]
 800e3e4:	4293      	cmp	r3, r2
 800e3e6:	d906      	bls.n	800e3f6 <pbuf_copy+0xb2>
 800e3e8:	4b38      	ldr	r3, [pc, #224]	@ (800e4cc <pbuf_copy+0x188>)
 800e3ea:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800e3ee:	493a      	ldr	r1, [pc, #232]	@ (800e4d8 <pbuf_copy+0x194>)
 800e3f0:	4838      	ldr	r0, [pc, #224]	@ (800e4d4 <pbuf_copy+0x190>)
 800e3f2:	f008 ff6f 	bl	80172d4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800e3f6:	683b      	ldr	r3, [r7, #0]
 800e3f8:	895b      	ldrh	r3, [r3, #10]
 800e3fa:	461a      	mov	r2, r3
 800e3fc:	693b      	ldr	r3, [r7, #16]
 800e3fe:	4293      	cmp	r3, r2
 800e400:	d906      	bls.n	800e410 <pbuf_copy+0xcc>
 800e402:	4b32      	ldr	r3, [pc, #200]	@ (800e4cc <pbuf_copy+0x188>)
 800e404:	f240 32da 	movw	r2, #986	@ 0x3da
 800e408:	4934      	ldr	r1, [pc, #208]	@ (800e4dc <pbuf_copy+0x198>)
 800e40a:	4832      	ldr	r0, [pc, #200]	@ (800e4d4 <pbuf_copy+0x190>)
 800e40c:	f008 ff62 	bl	80172d4 <iprintf>
    if (offset_from >= p_from->len) {
 800e410:	683b      	ldr	r3, [r7, #0]
 800e412:	895b      	ldrh	r3, [r3, #10]
 800e414:	461a      	mov	r2, r3
 800e416:	693b      	ldr	r3, [r7, #16]
 800e418:	4293      	cmp	r3, r2
 800e41a:	d304      	bcc.n	800e426 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800e41c:	2300      	movs	r3, #0
 800e41e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800e420:	683b      	ldr	r3, [r7, #0]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	895b      	ldrh	r3, [r3, #10]
 800e42a:	461a      	mov	r2, r3
 800e42c:	697b      	ldr	r3, [r7, #20]
 800e42e:	4293      	cmp	r3, r2
 800e430:	d114      	bne.n	800e45c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800e432:	2300      	movs	r3, #0
 800e434:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d10c      	bne.n	800e45c <pbuf_copy+0x118>
 800e442:	683b      	ldr	r3, [r7, #0]
 800e444:	2b00      	cmp	r3, #0
 800e446:	d009      	beq.n	800e45c <pbuf_copy+0x118>
 800e448:	4b20      	ldr	r3, [pc, #128]	@ (800e4cc <pbuf_copy+0x188>)
 800e44a:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800e44e:	4924      	ldr	r1, [pc, #144]	@ (800e4e0 <pbuf_copy+0x19c>)
 800e450:	4820      	ldr	r0, [pc, #128]	@ (800e4d4 <pbuf_copy+0x190>)
 800e452:	f008 ff3f 	bl	80172d4 <iprintf>
 800e456:	f06f 030f 	mvn.w	r3, #15
 800e45a:	e032      	b.n	800e4c2 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800e45c:	683b      	ldr	r3, [r7, #0]
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d013      	beq.n	800e48a <pbuf_copy+0x146>
 800e462:	683b      	ldr	r3, [r7, #0]
 800e464:	895a      	ldrh	r2, [r3, #10]
 800e466:	683b      	ldr	r3, [r7, #0]
 800e468:	891b      	ldrh	r3, [r3, #8]
 800e46a:	429a      	cmp	r2, r3
 800e46c:	d10d      	bne.n	800e48a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e46e:	683b      	ldr	r3, [r7, #0]
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	2b00      	cmp	r3, #0
 800e474:	d009      	beq.n	800e48a <pbuf_copy+0x146>
 800e476:	4b15      	ldr	r3, [pc, #84]	@ (800e4cc <pbuf_copy+0x188>)
 800e478:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800e47c:	4919      	ldr	r1, [pc, #100]	@ (800e4e4 <pbuf_copy+0x1a0>)
 800e47e:	4815      	ldr	r0, [pc, #84]	@ (800e4d4 <pbuf_copy+0x190>)
 800e480:	f008 ff28 	bl	80172d4 <iprintf>
 800e484:	f06f 0305 	mvn.w	r3, #5
 800e488:	e01b      	b.n	800e4c2 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d013      	beq.n	800e4b8 <pbuf_copy+0x174>
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	895a      	ldrh	r2, [r3, #10]
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	891b      	ldrh	r3, [r3, #8]
 800e498:	429a      	cmp	r2, r3
 800e49a:	d10d      	bne.n	800e4b8 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d009      	beq.n	800e4b8 <pbuf_copy+0x174>
 800e4a4:	4b09      	ldr	r3, [pc, #36]	@ (800e4cc <pbuf_copy+0x188>)
 800e4a6:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800e4aa:	490e      	ldr	r1, [pc, #56]	@ (800e4e4 <pbuf_copy+0x1a0>)
 800e4ac:	4809      	ldr	r0, [pc, #36]	@ (800e4d4 <pbuf_copy+0x190>)
 800e4ae:	f008 ff11 	bl	80172d4 <iprintf>
 800e4b2:	f06f 0305 	mvn.w	r3, #5
 800e4b6:	e004      	b.n	800e4c2 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800e4b8:	683b      	ldr	r3, [r7, #0]
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	f47f af61 	bne.w	800e382 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800e4c0:	2300      	movs	r3, #0
}
 800e4c2:	4618      	mov	r0, r3
 800e4c4:	3718      	adds	r7, #24
 800e4c6:	46bd      	mov	sp, r7
 800e4c8:	bd80      	pop	{r7, pc}
 800e4ca:	bf00      	nop
 800e4cc:	08018e44 	.word	0x08018e44
 800e4d0:	080190ec 	.word	0x080190ec
 800e4d4:	08018ea4 	.word	0x08018ea4
 800e4d8:	0801911c 	.word	0x0801911c
 800e4dc:	08019134 	.word	0x08019134
 800e4e0:	08019150 	.word	0x08019150
 800e4e4:	08019160 	.word	0x08019160

0800e4e8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800e4e8:	b580      	push	{r7, lr}
 800e4ea:	b088      	sub	sp, #32
 800e4ec:	af00      	add	r7, sp, #0
 800e4ee:	60f8      	str	r0, [r7, #12]
 800e4f0:	60b9      	str	r1, [r7, #8]
 800e4f2:	4611      	mov	r1, r2
 800e4f4:	461a      	mov	r2, r3
 800e4f6:	460b      	mov	r3, r1
 800e4f8:	80fb      	strh	r3, [r7, #6]
 800e4fa:	4613      	mov	r3, r2
 800e4fc:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800e4fe:	2300      	movs	r3, #0
 800e500:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800e502:	2300      	movs	r3, #0
 800e504:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d108      	bne.n	800e51e <pbuf_copy_partial+0x36>
 800e50c:	4b2b      	ldr	r3, [pc, #172]	@ (800e5bc <pbuf_copy_partial+0xd4>)
 800e50e:	f240 420a 	movw	r2, #1034	@ 0x40a
 800e512:	492b      	ldr	r1, [pc, #172]	@ (800e5c0 <pbuf_copy_partial+0xd8>)
 800e514:	482b      	ldr	r0, [pc, #172]	@ (800e5c4 <pbuf_copy_partial+0xdc>)
 800e516:	f008 fedd 	bl	80172d4 <iprintf>
 800e51a:	2300      	movs	r3, #0
 800e51c:	e04a      	b.n	800e5b4 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800e51e:	68bb      	ldr	r3, [r7, #8]
 800e520:	2b00      	cmp	r3, #0
 800e522:	d108      	bne.n	800e536 <pbuf_copy_partial+0x4e>
 800e524:	4b25      	ldr	r3, [pc, #148]	@ (800e5bc <pbuf_copy_partial+0xd4>)
 800e526:	f240 420b 	movw	r2, #1035	@ 0x40b
 800e52a:	4927      	ldr	r1, [pc, #156]	@ (800e5c8 <pbuf_copy_partial+0xe0>)
 800e52c:	4825      	ldr	r0, [pc, #148]	@ (800e5c4 <pbuf_copy_partial+0xdc>)
 800e52e:	f008 fed1 	bl	80172d4 <iprintf>
 800e532:	2300      	movs	r3, #0
 800e534:	e03e      	b.n	800e5b4 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	61fb      	str	r3, [r7, #28]
 800e53a:	e034      	b.n	800e5a6 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800e53c:	88bb      	ldrh	r3, [r7, #4]
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d00a      	beq.n	800e558 <pbuf_copy_partial+0x70>
 800e542:	69fb      	ldr	r3, [r7, #28]
 800e544:	895b      	ldrh	r3, [r3, #10]
 800e546:	88ba      	ldrh	r2, [r7, #4]
 800e548:	429a      	cmp	r2, r3
 800e54a:	d305      	bcc.n	800e558 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800e54c:	69fb      	ldr	r3, [r7, #28]
 800e54e:	895b      	ldrh	r3, [r3, #10]
 800e550:	88ba      	ldrh	r2, [r7, #4]
 800e552:	1ad3      	subs	r3, r2, r3
 800e554:	80bb      	strh	r3, [r7, #4]
 800e556:	e023      	b.n	800e5a0 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800e558:	69fb      	ldr	r3, [r7, #28]
 800e55a:	895a      	ldrh	r2, [r3, #10]
 800e55c:	88bb      	ldrh	r3, [r7, #4]
 800e55e:	1ad3      	subs	r3, r2, r3
 800e560:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800e562:	8b3a      	ldrh	r2, [r7, #24]
 800e564:	88fb      	ldrh	r3, [r7, #6]
 800e566:	429a      	cmp	r2, r3
 800e568:	d901      	bls.n	800e56e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800e56a:	88fb      	ldrh	r3, [r7, #6]
 800e56c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800e56e:	8b7b      	ldrh	r3, [r7, #26]
 800e570:	68ba      	ldr	r2, [r7, #8]
 800e572:	18d0      	adds	r0, r2, r3
 800e574:	69fb      	ldr	r3, [r7, #28]
 800e576:	685a      	ldr	r2, [r3, #4]
 800e578:	88bb      	ldrh	r3, [r7, #4]
 800e57a:	4413      	add	r3, r2
 800e57c:	8b3a      	ldrh	r2, [r7, #24]
 800e57e:	4619      	mov	r1, r3
 800e580:	f009 f831 	bl	80175e6 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800e584:	8afa      	ldrh	r2, [r7, #22]
 800e586:	8b3b      	ldrh	r3, [r7, #24]
 800e588:	4413      	add	r3, r2
 800e58a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800e58c:	8b7a      	ldrh	r2, [r7, #26]
 800e58e:	8b3b      	ldrh	r3, [r7, #24]
 800e590:	4413      	add	r3, r2
 800e592:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800e594:	88fa      	ldrh	r2, [r7, #6]
 800e596:	8b3b      	ldrh	r3, [r7, #24]
 800e598:	1ad3      	subs	r3, r2, r3
 800e59a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800e59c:	2300      	movs	r3, #0
 800e59e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e5a0:	69fb      	ldr	r3, [r7, #28]
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	61fb      	str	r3, [r7, #28]
 800e5a6:	88fb      	ldrh	r3, [r7, #6]
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d002      	beq.n	800e5b2 <pbuf_copy_partial+0xca>
 800e5ac:	69fb      	ldr	r3, [r7, #28]
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d1c4      	bne.n	800e53c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800e5b2:	8afb      	ldrh	r3, [r7, #22]
}
 800e5b4:	4618      	mov	r0, r3
 800e5b6:	3720      	adds	r7, #32
 800e5b8:	46bd      	mov	sp, r7
 800e5ba:	bd80      	pop	{r7, pc}
 800e5bc:	08018e44 	.word	0x08018e44
 800e5c0:	0801918c 	.word	0x0801918c
 800e5c4:	08018ea4 	.word	0x08018ea4
 800e5c8:	080191ac 	.word	0x080191ac

0800e5cc <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800e5cc:	b580      	push	{r7, lr}
 800e5ce:	b084      	sub	sp, #16
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	4603      	mov	r3, r0
 800e5d4:	603a      	str	r2, [r7, #0]
 800e5d6:	71fb      	strb	r3, [r7, #7]
 800e5d8:	460b      	mov	r3, r1
 800e5da:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800e5dc:	683b      	ldr	r3, [r7, #0]
 800e5de:	8919      	ldrh	r1, [r3, #8]
 800e5e0:	88ba      	ldrh	r2, [r7, #4]
 800e5e2:	79fb      	ldrb	r3, [r7, #7]
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	f7ff faa5 	bl	800db34 <pbuf_alloc>
 800e5ea:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d101      	bne.n	800e5f6 <pbuf_clone+0x2a>
    return NULL;
 800e5f2:	2300      	movs	r3, #0
 800e5f4:	e011      	b.n	800e61a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800e5f6:	6839      	ldr	r1, [r7, #0]
 800e5f8:	68f8      	ldr	r0, [r7, #12]
 800e5fa:	f7ff fea3 	bl	800e344 <pbuf_copy>
 800e5fe:	4603      	mov	r3, r0
 800e600:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800e602:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800e606:	2b00      	cmp	r3, #0
 800e608:	d006      	beq.n	800e618 <pbuf_clone+0x4c>
 800e60a:	4b06      	ldr	r3, [pc, #24]	@ (800e624 <pbuf_clone+0x58>)
 800e60c:	f240 5224 	movw	r2, #1316	@ 0x524
 800e610:	4905      	ldr	r1, [pc, #20]	@ (800e628 <pbuf_clone+0x5c>)
 800e612:	4806      	ldr	r0, [pc, #24]	@ (800e62c <pbuf_clone+0x60>)
 800e614:	f008 fe5e 	bl	80172d4 <iprintf>
  return q;
 800e618:	68fb      	ldr	r3, [r7, #12]
}
 800e61a:	4618      	mov	r0, r3
 800e61c:	3710      	adds	r7, #16
 800e61e:	46bd      	mov	sp, r7
 800e620:	bd80      	pop	{r7, pc}
 800e622:	bf00      	nop
 800e624:	08018e44 	.word	0x08018e44
 800e628:	080192b8 	.word	0x080192b8
 800e62c:	08018ea4 	.word	0x08018ea4

0800e630 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800e630:	b580      	push	{r7, lr}
 800e632:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800e634:	f008 fd4e 	bl	80170d4 <rand>
 800e638:	4603      	mov	r3, r0
 800e63a:	b29b      	uxth	r3, r3
 800e63c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e640:	b29b      	uxth	r3, r3
 800e642:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800e646:	b29a      	uxth	r2, r3
 800e648:	4b01      	ldr	r3, [pc, #4]	@ (800e650 <tcp_init+0x20>)
 800e64a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800e64c:	bf00      	nop
 800e64e:	bd80      	pop	{r7, pc}
 800e650:	2000009c 	.word	0x2000009c

0800e654 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800e654:	b580      	push	{r7, lr}
 800e656:	b082      	sub	sp, #8
 800e658:	af00      	add	r7, sp, #0
 800e65a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	7d1b      	ldrb	r3, [r3, #20]
 800e660:	2b01      	cmp	r3, #1
 800e662:	d105      	bne.n	800e670 <tcp_free+0x1c>
 800e664:	4b06      	ldr	r3, [pc, #24]	@ (800e680 <tcp_free+0x2c>)
 800e666:	22d4      	movs	r2, #212	@ 0xd4
 800e668:	4906      	ldr	r1, [pc, #24]	@ (800e684 <tcp_free+0x30>)
 800e66a:	4807      	ldr	r0, [pc, #28]	@ (800e688 <tcp_free+0x34>)
 800e66c:	f008 fe32 	bl	80172d4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800e670:	6879      	ldr	r1, [r7, #4]
 800e672:	2001      	movs	r0, #1
 800e674:	f7fe fed0 	bl	800d418 <memp_free>
}
 800e678:	bf00      	nop
 800e67a:	3708      	adds	r7, #8
 800e67c:	46bd      	mov	sp, r7
 800e67e:	bd80      	pop	{r7, pc}
 800e680:	08019344 	.word	0x08019344
 800e684:	08019374 	.word	0x08019374
 800e688:	08019388 	.word	0x08019388

0800e68c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800e68c:	b580      	push	{r7, lr}
 800e68e:	b082      	sub	sp, #8
 800e690:	af00      	add	r7, sp, #0
 800e692:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	7d1b      	ldrb	r3, [r3, #20]
 800e698:	2b01      	cmp	r3, #1
 800e69a:	d105      	bne.n	800e6a8 <tcp_free_listen+0x1c>
 800e69c:	4b06      	ldr	r3, [pc, #24]	@ (800e6b8 <tcp_free_listen+0x2c>)
 800e69e:	22df      	movs	r2, #223	@ 0xdf
 800e6a0:	4906      	ldr	r1, [pc, #24]	@ (800e6bc <tcp_free_listen+0x30>)
 800e6a2:	4807      	ldr	r0, [pc, #28]	@ (800e6c0 <tcp_free_listen+0x34>)
 800e6a4:	f008 fe16 	bl	80172d4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800e6a8:	6879      	ldr	r1, [r7, #4]
 800e6aa:	2002      	movs	r0, #2
 800e6ac:	f7fe feb4 	bl	800d418 <memp_free>
}
 800e6b0:	bf00      	nop
 800e6b2:	3708      	adds	r7, #8
 800e6b4:	46bd      	mov	sp, r7
 800e6b6:	bd80      	pop	{r7, pc}
 800e6b8:	08019344 	.word	0x08019344
 800e6bc:	080193b0 	.word	0x080193b0
 800e6c0:	08019388 	.word	0x08019388

0800e6c4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800e6c4:	b580      	push	{r7, lr}
 800e6c6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800e6c8:	f000 fea4 	bl	800f414 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800e6cc:	4b07      	ldr	r3, [pc, #28]	@ (800e6ec <tcp_tmr+0x28>)
 800e6ce:	781b      	ldrb	r3, [r3, #0]
 800e6d0:	3301      	adds	r3, #1
 800e6d2:	b2da      	uxtb	r2, r3
 800e6d4:	4b05      	ldr	r3, [pc, #20]	@ (800e6ec <tcp_tmr+0x28>)
 800e6d6:	701a      	strb	r2, [r3, #0]
 800e6d8:	4b04      	ldr	r3, [pc, #16]	@ (800e6ec <tcp_tmr+0x28>)
 800e6da:	781b      	ldrb	r3, [r3, #0]
 800e6dc:	f003 0301 	and.w	r3, r3, #1
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d001      	beq.n	800e6e8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800e6e4:	f000 fb54 	bl	800ed90 <tcp_slowtmr>
  }
}
 800e6e8:	bf00      	nop
 800e6ea:	bd80      	pop	{r7, pc}
 800e6ec:	2000c69d 	.word	0x2000c69d

0800e6f0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800e6f0:	b580      	push	{r7, lr}
 800e6f2:	b084      	sub	sp, #16
 800e6f4:	af00      	add	r7, sp, #0
 800e6f6:	6078      	str	r0, [r7, #4]
 800e6f8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800e6fa:	683b      	ldr	r3, [r7, #0]
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d105      	bne.n	800e70c <tcp_remove_listener+0x1c>
 800e700:	4b0d      	ldr	r3, [pc, #52]	@ (800e738 <tcp_remove_listener+0x48>)
 800e702:	22ff      	movs	r2, #255	@ 0xff
 800e704:	490d      	ldr	r1, [pc, #52]	@ (800e73c <tcp_remove_listener+0x4c>)
 800e706:	480e      	ldr	r0, [pc, #56]	@ (800e740 <tcp_remove_listener+0x50>)
 800e708:	f008 fde4 	bl	80172d4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	60fb      	str	r3, [r7, #12]
 800e710:	e00a      	b.n	800e728 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e716:	683a      	ldr	r2, [r7, #0]
 800e718:	429a      	cmp	r2, r3
 800e71a:	d102      	bne.n	800e722 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	2200      	movs	r2, #0
 800e720:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	68db      	ldr	r3, [r3, #12]
 800e726:	60fb      	str	r3, [r7, #12]
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d1f1      	bne.n	800e712 <tcp_remove_listener+0x22>
    }
  }
}
 800e72e:	bf00      	nop
 800e730:	bf00      	nop
 800e732:	3710      	adds	r7, #16
 800e734:	46bd      	mov	sp, r7
 800e736:	bd80      	pop	{r7, pc}
 800e738:	08019344 	.word	0x08019344
 800e73c:	080193cc 	.word	0x080193cc
 800e740:	08019388 	.word	0x08019388

0800e744 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800e744:	b580      	push	{r7, lr}
 800e746:	b084      	sub	sp, #16
 800e748:	af00      	add	r7, sp, #0
 800e74a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d106      	bne.n	800e760 <tcp_listen_closed+0x1c>
 800e752:	4b14      	ldr	r3, [pc, #80]	@ (800e7a4 <tcp_listen_closed+0x60>)
 800e754:	f240 1211 	movw	r2, #273	@ 0x111
 800e758:	4913      	ldr	r1, [pc, #76]	@ (800e7a8 <tcp_listen_closed+0x64>)
 800e75a:	4814      	ldr	r0, [pc, #80]	@ (800e7ac <tcp_listen_closed+0x68>)
 800e75c:	f008 fdba 	bl	80172d4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	7d1b      	ldrb	r3, [r3, #20]
 800e764:	2b01      	cmp	r3, #1
 800e766:	d006      	beq.n	800e776 <tcp_listen_closed+0x32>
 800e768:	4b0e      	ldr	r3, [pc, #56]	@ (800e7a4 <tcp_listen_closed+0x60>)
 800e76a:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800e76e:	4910      	ldr	r1, [pc, #64]	@ (800e7b0 <tcp_listen_closed+0x6c>)
 800e770:	480e      	ldr	r0, [pc, #56]	@ (800e7ac <tcp_listen_closed+0x68>)
 800e772:	f008 fdaf 	bl	80172d4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e776:	2301      	movs	r3, #1
 800e778:	60fb      	str	r3, [r7, #12]
 800e77a:	e00b      	b.n	800e794 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800e77c:	4a0d      	ldr	r2, [pc, #52]	@ (800e7b4 <tcp_listen_closed+0x70>)
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	6879      	ldr	r1, [r7, #4]
 800e788:	4618      	mov	r0, r3
 800e78a:	f7ff ffb1 	bl	800e6f0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	3301      	adds	r3, #1
 800e792:	60fb      	str	r3, [r7, #12]
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	2b03      	cmp	r3, #3
 800e798:	d9f0      	bls.n	800e77c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800e79a:	bf00      	nop
 800e79c:	bf00      	nop
 800e79e:	3710      	adds	r7, #16
 800e7a0:	46bd      	mov	sp, r7
 800e7a2:	bd80      	pop	{r7, pc}
 800e7a4:	08019344 	.word	0x08019344
 800e7a8:	080193f4 	.word	0x080193f4
 800e7ac:	08019388 	.word	0x08019388
 800e7b0:	08019400 	.word	0x08019400
 800e7b4:	0801b3ac 	.word	0x0801b3ac

0800e7b8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800e7b8:	b5b0      	push	{r4, r5, r7, lr}
 800e7ba:	b088      	sub	sp, #32
 800e7bc:	af04      	add	r7, sp, #16
 800e7be:	6078      	str	r0, [r7, #4]
 800e7c0:	460b      	mov	r3, r1
 800e7c2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d106      	bne.n	800e7d8 <tcp_close_shutdown+0x20>
 800e7ca:	4b63      	ldr	r3, [pc, #396]	@ (800e958 <tcp_close_shutdown+0x1a0>)
 800e7cc:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800e7d0:	4962      	ldr	r1, [pc, #392]	@ (800e95c <tcp_close_shutdown+0x1a4>)
 800e7d2:	4863      	ldr	r0, [pc, #396]	@ (800e960 <tcp_close_shutdown+0x1a8>)
 800e7d4:	f008 fd7e 	bl	80172d4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800e7d8:	78fb      	ldrb	r3, [r7, #3]
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d066      	beq.n	800e8ac <tcp_close_shutdown+0xf4>
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	7d1b      	ldrb	r3, [r3, #20]
 800e7e2:	2b04      	cmp	r3, #4
 800e7e4:	d003      	beq.n	800e7ee <tcp_close_shutdown+0x36>
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	7d1b      	ldrb	r3, [r3, #20]
 800e7ea:	2b07      	cmp	r3, #7
 800e7ec:	d15e      	bne.n	800e8ac <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d104      	bne.n	800e800 <tcp_close_shutdown+0x48>
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e7fa:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800e7fe:	d055      	beq.n	800e8ac <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	8b5b      	ldrh	r3, [r3, #26]
 800e804:	f003 0310 	and.w	r3, r3, #16
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d106      	bne.n	800e81a <tcp_close_shutdown+0x62>
 800e80c:	4b52      	ldr	r3, [pc, #328]	@ (800e958 <tcp_close_shutdown+0x1a0>)
 800e80e:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800e812:	4954      	ldr	r1, [pc, #336]	@ (800e964 <tcp_close_shutdown+0x1ac>)
 800e814:	4852      	ldr	r0, [pc, #328]	@ (800e960 <tcp_close_shutdown+0x1a8>)
 800e816:	f008 fd5d 	bl	80172d4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800e822:	687d      	ldr	r5, [r7, #4]
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	3304      	adds	r3, #4
 800e828:	687a      	ldr	r2, [r7, #4]
 800e82a:	8ad2      	ldrh	r2, [r2, #22]
 800e82c:	6879      	ldr	r1, [r7, #4]
 800e82e:	8b09      	ldrh	r1, [r1, #24]
 800e830:	9102      	str	r1, [sp, #8]
 800e832:	9201      	str	r2, [sp, #4]
 800e834:	9300      	str	r3, [sp, #0]
 800e836:	462b      	mov	r3, r5
 800e838:	4622      	mov	r2, r4
 800e83a:	4601      	mov	r1, r0
 800e83c:	6878      	ldr	r0, [r7, #4]
 800e83e:	f004 fe8d 	bl	801355c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800e842:	6878      	ldr	r0, [r7, #4]
 800e844:	f001 f8c8 	bl	800f9d8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800e848:	4b47      	ldr	r3, [pc, #284]	@ (800e968 <tcp_close_shutdown+0x1b0>)
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	687a      	ldr	r2, [r7, #4]
 800e84e:	429a      	cmp	r2, r3
 800e850:	d105      	bne.n	800e85e <tcp_close_shutdown+0xa6>
 800e852:	4b45      	ldr	r3, [pc, #276]	@ (800e968 <tcp_close_shutdown+0x1b0>)
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	68db      	ldr	r3, [r3, #12]
 800e858:	4a43      	ldr	r2, [pc, #268]	@ (800e968 <tcp_close_shutdown+0x1b0>)
 800e85a:	6013      	str	r3, [r2, #0]
 800e85c:	e013      	b.n	800e886 <tcp_close_shutdown+0xce>
 800e85e:	4b42      	ldr	r3, [pc, #264]	@ (800e968 <tcp_close_shutdown+0x1b0>)
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	60fb      	str	r3, [r7, #12]
 800e864:	e00c      	b.n	800e880 <tcp_close_shutdown+0xc8>
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	68db      	ldr	r3, [r3, #12]
 800e86a:	687a      	ldr	r2, [r7, #4]
 800e86c:	429a      	cmp	r2, r3
 800e86e:	d104      	bne.n	800e87a <tcp_close_shutdown+0xc2>
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	68da      	ldr	r2, [r3, #12]
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	60da      	str	r2, [r3, #12]
 800e878:	e005      	b.n	800e886 <tcp_close_shutdown+0xce>
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	68db      	ldr	r3, [r3, #12]
 800e87e:	60fb      	str	r3, [r7, #12]
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	2b00      	cmp	r3, #0
 800e884:	d1ef      	bne.n	800e866 <tcp_close_shutdown+0xae>
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	2200      	movs	r2, #0
 800e88a:	60da      	str	r2, [r3, #12]
 800e88c:	4b37      	ldr	r3, [pc, #220]	@ (800e96c <tcp_close_shutdown+0x1b4>)
 800e88e:	2201      	movs	r2, #1
 800e890:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800e892:	4b37      	ldr	r3, [pc, #220]	@ (800e970 <tcp_close_shutdown+0x1b8>)
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	687a      	ldr	r2, [r7, #4]
 800e898:	429a      	cmp	r2, r3
 800e89a:	d102      	bne.n	800e8a2 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800e89c:	f003 fd5c 	bl	8012358 <tcp_trigger_input_pcb_close>
 800e8a0:	e002      	b.n	800e8a8 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800e8a2:	6878      	ldr	r0, [r7, #4]
 800e8a4:	f7ff fed6 	bl	800e654 <tcp_free>
      }
      return ERR_OK;
 800e8a8:	2300      	movs	r3, #0
 800e8aa:	e050      	b.n	800e94e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	7d1b      	ldrb	r3, [r3, #20]
 800e8b0:	2b02      	cmp	r3, #2
 800e8b2:	d03b      	beq.n	800e92c <tcp_close_shutdown+0x174>
 800e8b4:	2b02      	cmp	r3, #2
 800e8b6:	dc44      	bgt.n	800e942 <tcp_close_shutdown+0x18a>
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d002      	beq.n	800e8c2 <tcp_close_shutdown+0x10a>
 800e8bc:	2b01      	cmp	r3, #1
 800e8be:	d02a      	beq.n	800e916 <tcp_close_shutdown+0x15e>
 800e8c0:	e03f      	b.n	800e942 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	8adb      	ldrh	r3, [r3, #22]
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d021      	beq.n	800e90e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e8ca:	4b2a      	ldr	r3, [pc, #168]	@ (800e974 <tcp_close_shutdown+0x1bc>)
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	687a      	ldr	r2, [r7, #4]
 800e8d0:	429a      	cmp	r2, r3
 800e8d2:	d105      	bne.n	800e8e0 <tcp_close_shutdown+0x128>
 800e8d4:	4b27      	ldr	r3, [pc, #156]	@ (800e974 <tcp_close_shutdown+0x1bc>)
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	68db      	ldr	r3, [r3, #12]
 800e8da:	4a26      	ldr	r2, [pc, #152]	@ (800e974 <tcp_close_shutdown+0x1bc>)
 800e8dc:	6013      	str	r3, [r2, #0]
 800e8de:	e013      	b.n	800e908 <tcp_close_shutdown+0x150>
 800e8e0:	4b24      	ldr	r3, [pc, #144]	@ (800e974 <tcp_close_shutdown+0x1bc>)
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	60bb      	str	r3, [r7, #8]
 800e8e6:	e00c      	b.n	800e902 <tcp_close_shutdown+0x14a>
 800e8e8:	68bb      	ldr	r3, [r7, #8]
 800e8ea:	68db      	ldr	r3, [r3, #12]
 800e8ec:	687a      	ldr	r2, [r7, #4]
 800e8ee:	429a      	cmp	r2, r3
 800e8f0:	d104      	bne.n	800e8fc <tcp_close_shutdown+0x144>
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	68da      	ldr	r2, [r3, #12]
 800e8f6:	68bb      	ldr	r3, [r7, #8]
 800e8f8:	60da      	str	r2, [r3, #12]
 800e8fa:	e005      	b.n	800e908 <tcp_close_shutdown+0x150>
 800e8fc:	68bb      	ldr	r3, [r7, #8]
 800e8fe:	68db      	ldr	r3, [r3, #12]
 800e900:	60bb      	str	r3, [r7, #8]
 800e902:	68bb      	ldr	r3, [r7, #8]
 800e904:	2b00      	cmp	r3, #0
 800e906:	d1ef      	bne.n	800e8e8 <tcp_close_shutdown+0x130>
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	2200      	movs	r2, #0
 800e90c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800e90e:	6878      	ldr	r0, [r7, #4]
 800e910:	f7ff fea0 	bl	800e654 <tcp_free>
      break;
 800e914:	e01a      	b.n	800e94c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800e916:	6878      	ldr	r0, [r7, #4]
 800e918:	f7ff ff14 	bl	800e744 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800e91c:	6879      	ldr	r1, [r7, #4]
 800e91e:	4816      	ldr	r0, [pc, #88]	@ (800e978 <tcp_close_shutdown+0x1c0>)
 800e920:	f001 f8aa 	bl	800fa78 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800e924:	6878      	ldr	r0, [r7, #4]
 800e926:	f7ff feb1 	bl	800e68c <tcp_free_listen>
      break;
 800e92a:	e00f      	b.n	800e94c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e92c:	6879      	ldr	r1, [r7, #4]
 800e92e:	480e      	ldr	r0, [pc, #56]	@ (800e968 <tcp_close_shutdown+0x1b0>)
 800e930:	f001 f8a2 	bl	800fa78 <tcp_pcb_remove>
 800e934:	4b0d      	ldr	r3, [pc, #52]	@ (800e96c <tcp_close_shutdown+0x1b4>)
 800e936:	2201      	movs	r2, #1
 800e938:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800e93a:	6878      	ldr	r0, [r7, #4]
 800e93c:	f7ff fe8a 	bl	800e654 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800e940:	e004      	b.n	800e94c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800e942:	6878      	ldr	r0, [r7, #4]
 800e944:	f000 f81a 	bl	800e97c <tcp_close_shutdown_fin>
 800e948:	4603      	mov	r3, r0
 800e94a:	e000      	b.n	800e94e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800e94c:	2300      	movs	r3, #0
}
 800e94e:	4618      	mov	r0, r3
 800e950:	3710      	adds	r7, #16
 800e952:	46bd      	mov	sp, r7
 800e954:	bdb0      	pop	{r4, r5, r7, pc}
 800e956:	bf00      	nop
 800e958:	08019344 	.word	0x08019344
 800e95c:	08019418 	.word	0x08019418
 800e960:	08019388 	.word	0x08019388
 800e964:	08019438 	.word	0x08019438
 800e968:	2000c694 	.word	0x2000c694
 800e96c:	2000c69c 	.word	0x2000c69c
 800e970:	2000c6d4 	.word	0x2000c6d4
 800e974:	2000c68c 	.word	0x2000c68c
 800e978:	2000c690 	.word	0x2000c690

0800e97c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800e97c:	b580      	push	{r7, lr}
 800e97e:	b084      	sub	sp, #16
 800e980:	af00      	add	r7, sp, #0
 800e982:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	2b00      	cmp	r3, #0
 800e988:	d106      	bne.n	800e998 <tcp_close_shutdown_fin+0x1c>
 800e98a:	4b2e      	ldr	r3, [pc, #184]	@ (800ea44 <tcp_close_shutdown_fin+0xc8>)
 800e98c:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800e990:	492d      	ldr	r1, [pc, #180]	@ (800ea48 <tcp_close_shutdown_fin+0xcc>)
 800e992:	482e      	ldr	r0, [pc, #184]	@ (800ea4c <tcp_close_shutdown_fin+0xd0>)
 800e994:	f008 fc9e 	bl	80172d4 <iprintf>

  switch (pcb->state) {
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	7d1b      	ldrb	r3, [r3, #20]
 800e99c:	2b07      	cmp	r3, #7
 800e99e:	d020      	beq.n	800e9e2 <tcp_close_shutdown_fin+0x66>
 800e9a0:	2b07      	cmp	r3, #7
 800e9a2:	dc2b      	bgt.n	800e9fc <tcp_close_shutdown_fin+0x80>
 800e9a4:	2b03      	cmp	r3, #3
 800e9a6:	d002      	beq.n	800e9ae <tcp_close_shutdown_fin+0x32>
 800e9a8:	2b04      	cmp	r3, #4
 800e9aa:	d00d      	beq.n	800e9c8 <tcp_close_shutdown_fin+0x4c>
 800e9ac:	e026      	b.n	800e9fc <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800e9ae:	6878      	ldr	r0, [r7, #4]
 800e9b0:	f003 fee2 	bl	8012778 <tcp_send_fin>
 800e9b4:	4603      	mov	r3, r0
 800e9b6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e9b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d11f      	bne.n	800ea00 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	2205      	movs	r2, #5
 800e9c4:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e9c6:	e01b      	b.n	800ea00 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800e9c8:	6878      	ldr	r0, [r7, #4]
 800e9ca:	f003 fed5 	bl	8012778 <tcp_send_fin>
 800e9ce:	4603      	mov	r3, r0
 800e9d0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e9d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d114      	bne.n	800ea04 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	2205      	movs	r2, #5
 800e9de:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e9e0:	e010      	b.n	800ea04 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800e9e2:	6878      	ldr	r0, [r7, #4]
 800e9e4:	f003 fec8 	bl	8012778 <tcp_send_fin>
 800e9e8:	4603      	mov	r3, r0
 800e9ea:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e9ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d109      	bne.n	800ea08 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	2209      	movs	r2, #9
 800e9f8:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e9fa:	e005      	b.n	800ea08 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800e9fc:	2300      	movs	r3, #0
 800e9fe:	e01c      	b.n	800ea3a <tcp_close_shutdown_fin+0xbe>
      break;
 800ea00:	bf00      	nop
 800ea02:	e002      	b.n	800ea0a <tcp_close_shutdown_fin+0x8e>
      break;
 800ea04:	bf00      	nop
 800ea06:	e000      	b.n	800ea0a <tcp_close_shutdown_fin+0x8e>
      break;
 800ea08:	bf00      	nop
  }

  if (err == ERR_OK) {
 800ea0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d103      	bne.n	800ea1a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800ea12:	6878      	ldr	r0, [r7, #4]
 800ea14:	f003 ffee 	bl	80129f4 <tcp_output>
 800ea18:	e00d      	b.n	800ea36 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800ea1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ea1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea22:	d108      	bne.n	800ea36 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	8b5b      	ldrh	r3, [r3, #26]
 800ea28:	f043 0308 	orr.w	r3, r3, #8
 800ea2c:	b29a      	uxth	r2, r3
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800ea32:	2300      	movs	r3, #0
 800ea34:	e001      	b.n	800ea3a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800ea36:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ea3a:	4618      	mov	r0, r3
 800ea3c:	3710      	adds	r7, #16
 800ea3e:	46bd      	mov	sp, r7
 800ea40:	bd80      	pop	{r7, pc}
 800ea42:	bf00      	nop
 800ea44:	08019344 	.word	0x08019344
 800ea48:	080193f4 	.word	0x080193f4
 800ea4c:	08019388 	.word	0x08019388

0800ea50 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800ea50:	b580      	push	{r7, lr}
 800ea52:	b082      	sub	sp, #8
 800ea54:	af00      	add	r7, sp, #0
 800ea56:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d109      	bne.n	800ea72 <tcp_close+0x22>
 800ea5e:	4b0f      	ldr	r3, [pc, #60]	@ (800ea9c <tcp_close+0x4c>)
 800ea60:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800ea64:	490e      	ldr	r1, [pc, #56]	@ (800eaa0 <tcp_close+0x50>)
 800ea66:	480f      	ldr	r0, [pc, #60]	@ (800eaa4 <tcp_close+0x54>)
 800ea68:	f008 fc34 	bl	80172d4 <iprintf>
 800ea6c:	f06f 030f 	mvn.w	r3, #15
 800ea70:	e00f      	b.n	800ea92 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	7d1b      	ldrb	r3, [r3, #20]
 800ea76:	2b01      	cmp	r3, #1
 800ea78:	d006      	beq.n	800ea88 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	8b5b      	ldrh	r3, [r3, #26]
 800ea7e:	f043 0310 	orr.w	r3, r3, #16
 800ea82:	b29a      	uxth	r2, r3
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800ea88:	2101      	movs	r1, #1
 800ea8a:	6878      	ldr	r0, [r7, #4]
 800ea8c:	f7ff fe94 	bl	800e7b8 <tcp_close_shutdown>
 800ea90:	4603      	mov	r3, r0
}
 800ea92:	4618      	mov	r0, r3
 800ea94:	3708      	adds	r7, #8
 800ea96:	46bd      	mov	sp, r7
 800ea98:	bd80      	pop	{r7, pc}
 800ea9a:	bf00      	nop
 800ea9c:	08019344 	.word	0x08019344
 800eaa0:	08019454 	.word	0x08019454
 800eaa4:	08019388 	.word	0x08019388

0800eaa8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800eaa8:	b580      	push	{r7, lr}
 800eaaa:	b08e      	sub	sp, #56	@ 0x38
 800eaac:	af04      	add	r7, sp, #16
 800eaae:	6078      	str	r0, [r7, #4]
 800eab0:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d107      	bne.n	800eac8 <tcp_abandon+0x20>
 800eab8:	4b52      	ldr	r3, [pc, #328]	@ (800ec04 <tcp_abandon+0x15c>)
 800eaba:	f240 223d 	movw	r2, #573	@ 0x23d
 800eabe:	4952      	ldr	r1, [pc, #328]	@ (800ec08 <tcp_abandon+0x160>)
 800eac0:	4852      	ldr	r0, [pc, #328]	@ (800ec0c <tcp_abandon+0x164>)
 800eac2:	f008 fc07 	bl	80172d4 <iprintf>
 800eac6:	e099      	b.n	800ebfc <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	7d1b      	ldrb	r3, [r3, #20]
 800eacc:	2b01      	cmp	r3, #1
 800eace:	d106      	bne.n	800eade <tcp_abandon+0x36>
 800ead0:	4b4c      	ldr	r3, [pc, #304]	@ (800ec04 <tcp_abandon+0x15c>)
 800ead2:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800ead6:	494e      	ldr	r1, [pc, #312]	@ (800ec10 <tcp_abandon+0x168>)
 800ead8:	484c      	ldr	r0, [pc, #304]	@ (800ec0c <tcp_abandon+0x164>)
 800eada:	f008 fbfb 	bl	80172d4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	7d1b      	ldrb	r3, [r3, #20]
 800eae2:	2b0a      	cmp	r3, #10
 800eae4:	d107      	bne.n	800eaf6 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800eae6:	6879      	ldr	r1, [r7, #4]
 800eae8:	484a      	ldr	r0, [pc, #296]	@ (800ec14 <tcp_abandon+0x16c>)
 800eaea:	f000 ffc5 	bl	800fa78 <tcp_pcb_remove>
    tcp_free(pcb);
 800eaee:	6878      	ldr	r0, [r7, #4]
 800eaf0:	f7ff fdb0 	bl	800e654 <tcp_free>
 800eaf4:	e082      	b.n	800ebfc <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800eaf6:	2300      	movs	r3, #0
 800eaf8:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800eafa:	2300      	movs	r3, #0
 800eafc:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eb02:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb08:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eb10:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	691b      	ldr	r3, [r3, #16]
 800eb16:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	7d1b      	ldrb	r3, [r3, #20]
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d126      	bne.n	800eb6e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	8adb      	ldrh	r3, [r3, #22]
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d02e      	beq.n	800eb86 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800eb28:	4b3b      	ldr	r3, [pc, #236]	@ (800ec18 <tcp_abandon+0x170>)
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	687a      	ldr	r2, [r7, #4]
 800eb2e:	429a      	cmp	r2, r3
 800eb30:	d105      	bne.n	800eb3e <tcp_abandon+0x96>
 800eb32:	4b39      	ldr	r3, [pc, #228]	@ (800ec18 <tcp_abandon+0x170>)
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	68db      	ldr	r3, [r3, #12]
 800eb38:	4a37      	ldr	r2, [pc, #220]	@ (800ec18 <tcp_abandon+0x170>)
 800eb3a:	6013      	str	r3, [r2, #0]
 800eb3c:	e013      	b.n	800eb66 <tcp_abandon+0xbe>
 800eb3e:	4b36      	ldr	r3, [pc, #216]	@ (800ec18 <tcp_abandon+0x170>)
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	61fb      	str	r3, [r7, #28]
 800eb44:	e00c      	b.n	800eb60 <tcp_abandon+0xb8>
 800eb46:	69fb      	ldr	r3, [r7, #28]
 800eb48:	68db      	ldr	r3, [r3, #12]
 800eb4a:	687a      	ldr	r2, [r7, #4]
 800eb4c:	429a      	cmp	r2, r3
 800eb4e:	d104      	bne.n	800eb5a <tcp_abandon+0xb2>
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	68da      	ldr	r2, [r3, #12]
 800eb54:	69fb      	ldr	r3, [r7, #28]
 800eb56:	60da      	str	r2, [r3, #12]
 800eb58:	e005      	b.n	800eb66 <tcp_abandon+0xbe>
 800eb5a:	69fb      	ldr	r3, [r7, #28]
 800eb5c:	68db      	ldr	r3, [r3, #12]
 800eb5e:	61fb      	str	r3, [r7, #28]
 800eb60:	69fb      	ldr	r3, [r7, #28]
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d1ef      	bne.n	800eb46 <tcp_abandon+0x9e>
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	2200      	movs	r2, #0
 800eb6a:	60da      	str	r2, [r3, #12]
 800eb6c:	e00b      	b.n	800eb86 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800eb6e:	683b      	ldr	r3, [r7, #0]
 800eb70:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	8adb      	ldrh	r3, [r3, #22]
 800eb76:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800eb78:	6879      	ldr	r1, [r7, #4]
 800eb7a:	4828      	ldr	r0, [pc, #160]	@ (800ec1c <tcp_abandon+0x174>)
 800eb7c:	f000 ff7c 	bl	800fa78 <tcp_pcb_remove>
 800eb80:	4b27      	ldr	r3, [pc, #156]	@ (800ec20 <tcp_abandon+0x178>)
 800eb82:	2201      	movs	r2, #1
 800eb84:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d004      	beq.n	800eb98 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800eb92:	4618      	mov	r0, r3
 800eb94:	f000 fd1e 	bl	800f5d4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d004      	beq.n	800ebaa <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eba4:	4618      	mov	r0, r3
 800eba6:	f000 fd15 	bl	800f5d4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d004      	beq.n	800ebbc <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ebb6:	4618      	mov	r0, r3
 800ebb8:	f000 fd0c 	bl	800f5d4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800ebbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d00e      	beq.n	800ebe0 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800ebc2:	6879      	ldr	r1, [r7, #4]
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	3304      	adds	r3, #4
 800ebc8:	687a      	ldr	r2, [r7, #4]
 800ebca:	8b12      	ldrh	r2, [r2, #24]
 800ebcc:	9202      	str	r2, [sp, #8]
 800ebce:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800ebd0:	9201      	str	r2, [sp, #4]
 800ebd2:	9300      	str	r3, [sp, #0]
 800ebd4:	460b      	mov	r3, r1
 800ebd6:	697a      	ldr	r2, [r7, #20]
 800ebd8:	69b9      	ldr	r1, [r7, #24]
 800ebda:	6878      	ldr	r0, [r7, #4]
 800ebdc:	f004 fcbe 	bl	801355c <tcp_rst>
    }
    last_state = pcb->state;
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	7d1b      	ldrb	r3, [r3, #20]
 800ebe4:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800ebe6:	6878      	ldr	r0, [r7, #4]
 800ebe8:	f7ff fd34 	bl	800e654 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800ebec:	693b      	ldr	r3, [r7, #16]
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d004      	beq.n	800ebfc <tcp_abandon+0x154>
 800ebf2:	693b      	ldr	r3, [r7, #16]
 800ebf4:	f06f 010c 	mvn.w	r1, #12
 800ebf8:	68f8      	ldr	r0, [r7, #12]
 800ebfa:	4798      	blx	r3
  }
}
 800ebfc:	3728      	adds	r7, #40	@ 0x28
 800ebfe:	46bd      	mov	sp, r7
 800ec00:	bd80      	pop	{r7, pc}
 800ec02:	bf00      	nop
 800ec04:	08019344 	.word	0x08019344
 800ec08:	08019488 	.word	0x08019488
 800ec0c:	08019388 	.word	0x08019388
 800ec10:	080194a4 	.word	0x080194a4
 800ec14:	2000c698 	.word	0x2000c698
 800ec18:	2000c68c 	.word	0x2000c68c
 800ec1c:	2000c694 	.word	0x2000c694
 800ec20:	2000c69c 	.word	0x2000c69c

0800ec24 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800ec24:	b580      	push	{r7, lr}
 800ec26:	b082      	sub	sp, #8
 800ec28:	af00      	add	r7, sp, #0
 800ec2a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800ec2c:	2101      	movs	r1, #1
 800ec2e:	6878      	ldr	r0, [r7, #4]
 800ec30:	f7ff ff3a 	bl	800eaa8 <tcp_abandon>
}
 800ec34:	bf00      	nop
 800ec36:	3708      	adds	r7, #8
 800ec38:	46bd      	mov	sp, r7
 800ec3a:	bd80      	pop	{r7, pc}

0800ec3c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800ec3c:	b580      	push	{r7, lr}
 800ec3e:	b084      	sub	sp, #16
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d106      	bne.n	800ec58 <tcp_update_rcv_ann_wnd+0x1c>
 800ec4a:	4b25      	ldr	r3, [pc, #148]	@ (800ece0 <tcp_update_rcv_ann_wnd+0xa4>)
 800ec4c:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800ec50:	4924      	ldr	r1, [pc, #144]	@ (800ece4 <tcp_update_rcv_ann_wnd+0xa8>)
 800ec52:	4825      	ldr	r0, [pc, #148]	@ (800ece8 <tcp_update_rcv_ann_wnd+0xac>)
 800ec54:	f008 fb3e 	bl	80172d4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec5c:	687a      	ldr	r2, [r7, #4]
 800ec5e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800ec60:	4413      	add	r3, r2
 800ec62:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec68:	687a      	ldr	r2, [r7, #4]
 800ec6a:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800ec6c:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800ec70:	bf28      	it	cs
 800ec72:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800ec76:	b292      	uxth	r2, r2
 800ec78:	4413      	add	r3, r2
 800ec7a:	68fa      	ldr	r2, [r7, #12]
 800ec7c:	1ad3      	subs	r3, r2, r3
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	db08      	blt.n	800ec94 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec8e:	68fa      	ldr	r2, [r7, #12]
 800ec90:	1ad3      	subs	r3, r2, r3
 800ec92:	e020      	b.n	800ecd6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec9c:	1ad3      	subs	r3, r2, r3
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	dd03      	ble.n	800ecaa <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	2200      	movs	r2, #0
 800eca6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800eca8:	e014      	b.n	800ecd4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ecb2:	1ad3      	subs	r3, r2, r3
 800ecb4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800ecb6:	68bb      	ldr	r3, [r7, #8]
 800ecb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ecbc:	d306      	bcc.n	800eccc <tcp_update_rcv_ann_wnd+0x90>
 800ecbe:	4b08      	ldr	r3, [pc, #32]	@ (800ece0 <tcp_update_rcv_ann_wnd+0xa4>)
 800ecc0:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800ecc4:	4909      	ldr	r1, [pc, #36]	@ (800ecec <tcp_update_rcv_ann_wnd+0xb0>)
 800ecc6:	4808      	ldr	r0, [pc, #32]	@ (800ece8 <tcp_update_rcv_ann_wnd+0xac>)
 800ecc8:	f008 fb04 	bl	80172d4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800eccc:	68bb      	ldr	r3, [r7, #8]
 800ecce:	b29a      	uxth	r2, r3
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800ecd4:	2300      	movs	r3, #0
  }
}
 800ecd6:	4618      	mov	r0, r3
 800ecd8:	3710      	adds	r7, #16
 800ecda:	46bd      	mov	sp, r7
 800ecdc:	bd80      	pop	{r7, pc}
 800ecde:	bf00      	nop
 800ece0:	08019344 	.word	0x08019344
 800ece4:	080195a0 	.word	0x080195a0
 800ece8:	08019388 	.word	0x08019388
 800ecec:	080195c4 	.word	0x080195c4

0800ecf0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800ecf0:	b580      	push	{r7, lr}
 800ecf2:	b084      	sub	sp, #16
 800ecf4:	af00      	add	r7, sp, #0
 800ecf6:	6078      	str	r0, [r7, #4]
 800ecf8:	460b      	mov	r3, r1
 800ecfa:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d107      	bne.n	800ed12 <tcp_recved+0x22>
 800ed02:	4b1f      	ldr	r3, [pc, #124]	@ (800ed80 <tcp_recved+0x90>)
 800ed04:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800ed08:	491e      	ldr	r1, [pc, #120]	@ (800ed84 <tcp_recved+0x94>)
 800ed0a:	481f      	ldr	r0, [pc, #124]	@ (800ed88 <tcp_recved+0x98>)
 800ed0c:	f008 fae2 	bl	80172d4 <iprintf>
 800ed10:	e032      	b.n	800ed78 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	7d1b      	ldrb	r3, [r3, #20]
 800ed16:	2b01      	cmp	r3, #1
 800ed18:	d106      	bne.n	800ed28 <tcp_recved+0x38>
 800ed1a:	4b19      	ldr	r3, [pc, #100]	@ (800ed80 <tcp_recved+0x90>)
 800ed1c:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800ed20:	491a      	ldr	r1, [pc, #104]	@ (800ed8c <tcp_recved+0x9c>)
 800ed22:	4819      	ldr	r0, [pc, #100]	@ (800ed88 <tcp_recved+0x98>)
 800ed24:	f008 fad6 	bl	80172d4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800ed2c:	887b      	ldrh	r3, [r7, #2]
 800ed2e:	4413      	add	r3, r2
 800ed30:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800ed32:	89fb      	ldrh	r3, [r7, #14]
 800ed34:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800ed38:	d804      	bhi.n	800ed44 <tcp_recved+0x54>
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ed3e:	89fa      	ldrh	r2, [r7, #14]
 800ed40:	429a      	cmp	r2, r3
 800ed42:	d204      	bcs.n	800ed4e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800ed4a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800ed4c:	e002      	b.n	800ed54 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	89fa      	ldrh	r2, [r7, #14]
 800ed52:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800ed54:	6878      	ldr	r0, [r7, #4]
 800ed56:	f7ff ff71 	bl	800ec3c <tcp_update_rcv_ann_wnd>
 800ed5a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800ed5c:	68bb      	ldr	r3, [r7, #8]
 800ed5e:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800ed62:	d309      	bcc.n	800ed78 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	8b5b      	ldrh	r3, [r3, #26]
 800ed68:	f043 0302 	orr.w	r3, r3, #2
 800ed6c:	b29a      	uxth	r2, r3
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ed72:	6878      	ldr	r0, [r7, #4]
 800ed74:	f003 fe3e 	bl	80129f4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800ed78:	3710      	adds	r7, #16
 800ed7a:	46bd      	mov	sp, r7
 800ed7c:	bd80      	pop	{r7, pc}
 800ed7e:	bf00      	nop
 800ed80:	08019344 	.word	0x08019344
 800ed84:	080195e0 	.word	0x080195e0
 800ed88:	08019388 	.word	0x08019388
 800ed8c:	080195f8 	.word	0x080195f8

0800ed90 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800ed90:	b5b0      	push	{r4, r5, r7, lr}
 800ed92:	b090      	sub	sp, #64	@ 0x40
 800ed94:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800ed96:	2300      	movs	r3, #0
 800ed98:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800ed9c:	4b95      	ldr	r3, [pc, #596]	@ (800eff4 <tcp_slowtmr+0x264>)
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	3301      	adds	r3, #1
 800eda2:	4a94      	ldr	r2, [pc, #592]	@ (800eff4 <tcp_slowtmr+0x264>)
 800eda4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800eda6:	4b94      	ldr	r3, [pc, #592]	@ (800eff8 <tcp_slowtmr+0x268>)
 800eda8:	781b      	ldrb	r3, [r3, #0]
 800edaa:	3301      	adds	r3, #1
 800edac:	b2da      	uxtb	r2, r3
 800edae:	4b92      	ldr	r3, [pc, #584]	@ (800eff8 <tcp_slowtmr+0x268>)
 800edb0:	701a      	strb	r2, [r3, #0]
 800edb2:	e000      	b.n	800edb6 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800edb4:	bf00      	nop
  prev = NULL;
 800edb6:	2300      	movs	r3, #0
 800edb8:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800edba:	4b90      	ldr	r3, [pc, #576]	@ (800effc <tcp_slowtmr+0x26c>)
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800edc0:	e29f      	b.n	800f302 <tcp_slowtmr+0x572>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800edc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edc4:	7d1b      	ldrb	r3, [r3, #20]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d106      	bne.n	800edd8 <tcp_slowtmr+0x48>
 800edca:	4b8d      	ldr	r3, [pc, #564]	@ (800f000 <tcp_slowtmr+0x270>)
 800edcc:	f240 42be 	movw	r2, #1214	@ 0x4be
 800edd0:	498c      	ldr	r1, [pc, #560]	@ (800f004 <tcp_slowtmr+0x274>)
 800edd2:	488d      	ldr	r0, [pc, #564]	@ (800f008 <tcp_slowtmr+0x278>)
 800edd4:	f008 fa7e 	bl	80172d4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800edd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edda:	7d1b      	ldrb	r3, [r3, #20]
 800eddc:	2b01      	cmp	r3, #1
 800edde:	d106      	bne.n	800edee <tcp_slowtmr+0x5e>
 800ede0:	4b87      	ldr	r3, [pc, #540]	@ (800f000 <tcp_slowtmr+0x270>)
 800ede2:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800ede6:	4989      	ldr	r1, [pc, #548]	@ (800f00c <tcp_slowtmr+0x27c>)
 800ede8:	4887      	ldr	r0, [pc, #540]	@ (800f008 <tcp_slowtmr+0x278>)
 800edea:	f008 fa73 	bl	80172d4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800edee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edf0:	7d1b      	ldrb	r3, [r3, #20]
 800edf2:	2b0a      	cmp	r3, #10
 800edf4:	d106      	bne.n	800ee04 <tcp_slowtmr+0x74>
 800edf6:	4b82      	ldr	r3, [pc, #520]	@ (800f000 <tcp_slowtmr+0x270>)
 800edf8:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800edfc:	4984      	ldr	r1, [pc, #528]	@ (800f010 <tcp_slowtmr+0x280>)
 800edfe:	4882      	ldr	r0, [pc, #520]	@ (800f008 <tcp_slowtmr+0x278>)
 800ee00:	f008 fa68 	bl	80172d4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800ee04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee06:	7f9a      	ldrb	r2, [r3, #30]
 800ee08:	4b7b      	ldr	r3, [pc, #492]	@ (800eff8 <tcp_slowtmr+0x268>)
 800ee0a:	781b      	ldrb	r3, [r3, #0]
 800ee0c:	429a      	cmp	r2, r3
 800ee0e:	d105      	bne.n	800ee1c <tcp_slowtmr+0x8c>
      prev = pcb;
 800ee10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee12:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800ee14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee16:	68db      	ldr	r3, [r3, #12]
 800ee18:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800ee1a:	e272      	b.n	800f302 <tcp_slowtmr+0x572>
    pcb->last_timer = tcp_timer_ctr;
 800ee1c:	4b76      	ldr	r3, [pc, #472]	@ (800eff8 <tcp_slowtmr+0x268>)
 800ee1e:	781a      	ldrb	r2, [r3, #0]
 800ee20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee22:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800ee24:	2300      	movs	r3, #0
 800ee26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800ee2a:	2300      	movs	r3, #0
 800ee2c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800ee30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee32:	7d1b      	ldrb	r3, [r3, #20]
 800ee34:	2b02      	cmp	r3, #2
 800ee36:	d10a      	bne.n	800ee4e <tcp_slowtmr+0xbe>
 800ee38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee3a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ee3e:	2b05      	cmp	r3, #5
 800ee40:	d905      	bls.n	800ee4e <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800ee42:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ee46:	3301      	adds	r3, #1
 800ee48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ee4c:	e11e      	b.n	800f08c <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800ee4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee50:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ee54:	2b0b      	cmp	r3, #11
 800ee56:	d905      	bls.n	800ee64 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800ee58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ee5c:	3301      	adds	r3, #1
 800ee5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ee62:	e113      	b.n	800f08c <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800ee64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee66:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d075      	beq.n	800ef5a <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800ee6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d006      	beq.n	800ee84 <tcp_slowtmr+0xf4>
 800ee76:	4b62      	ldr	r3, [pc, #392]	@ (800f000 <tcp_slowtmr+0x270>)
 800ee78:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800ee7c:	4965      	ldr	r1, [pc, #404]	@ (800f014 <tcp_slowtmr+0x284>)
 800ee7e:	4862      	ldr	r0, [pc, #392]	@ (800f008 <tcp_slowtmr+0x278>)
 800ee80:	f008 fa28 	bl	80172d4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800ee84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d106      	bne.n	800ee9a <tcp_slowtmr+0x10a>
 800ee8c:	4b5c      	ldr	r3, [pc, #368]	@ (800f000 <tcp_slowtmr+0x270>)
 800ee8e:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800ee92:	4961      	ldr	r1, [pc, #388]	@ (800f018 <tcp_slowtmr+0x288>)
 800ee94:	485c      	ldr	r0, [pc, #368]	@ (800f008 <tcp_slowtmr+0x278>)
 800ee96:	f008 fa1d 	bl	80172d4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800ee9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee9c:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800eea0:	2b0b      	cmp	r3, #11
 800eea2:	d905      	bls.n	800eeb0 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800eea4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800eea8:	3301      	adds	r3, #1
 800eeaa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800eeae:	e0ed      	b.n	800f08c <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800eeb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eeb2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800eeb6:	3b01      	subs	r3, #1
 800eeb8:	4a58      	ldr	r2, [pc, #352]	@ (800f01c <tcp_slowtmr+0x28c>)
 800eeba:	5cd3      	ldrb	r3, [r2, r3]
 800eebc:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800eebe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eec0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800eec4:	7c7a      	ldrb	r2, [r7, #17]
 800eec6:	429a      	cmp	r2, r3
 800eec8:	d907      	bls.n	800eeda <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800eeca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eecc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800eed0:	3301      	adds	r3, #1
 800eed2:	b2da      	uxtb	r2, r3
 800eed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eed6:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800eeda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eedc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800eee0:	7c7a      	ldrb	r2, [r7, #17]
 800eee2:	429a      	cmp	r2, r3
 800eee4:	f200 80d2 	bhi.w	800f08c <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800eee8:	2301      	movs	r3, #1
 800eeea:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800eeec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eeee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d108      	bne.n	800ef08 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800eef6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800eef8:	f004 fc24 	bl	8013744 <tcp_zero_window_probe>
 800eefc:	4603      	mov	r3, r0
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d014      	beq.n	800ef2c <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800ef02:	2300      	movs	r3, #0
 800ef04:	623b      	str	r3, [r7, #32]
 800ef06:	e011      	b.n	800ef2c <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800ef08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef0a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ef0e:	4619      	mov	r1, r3
 800ef10:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ef12:	f003 fae9 	bl	80124e8 <tcp_split_unsent_seg>
 800ef16:	4603      	mov	r3, r0
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d107      	bne.n	800ef2c <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800ef1c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ef1e:	f003 fd69 	bl	80129f4 <tcp_output>
 800ef22:	4603      	mov	r3, r0
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d101      	bne.n	800ef2c <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800ef28:	2300      	movs	r3, #0
 800ef2a:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800ef2c:	6a3b      	ldr	r3, [r7, #32]
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	f000 80ac 	beq.w	800f08c <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800ef34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef36:	2200      	movs	r2, #0
 800ef38:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800ef3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef3e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800ef42:	2b06      	cmp	r3, #6
 800ef44:	f200 80a2 	bhi.w	800f08c <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800ef48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef4a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800ef4e:	3301      	adds	r3, #1
 800ef50:	b2da      	uxtb	r2, r3
 800ef52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef54:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800ef58:	e098      	b.n	800f08c <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800ef5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef5c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	db0f      	blt.n	800ef84 <tcp_slowtmr+0x1f4>
 800ef64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef66:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800ef6a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800ef6e:	4293      	cmp	r3, r2
 800ef70:	d008      	beq.n	800ef84 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800ef72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef74:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800ef78:	b29b      	uxth	r3, r3
 800ef7a:	3301      	adds	r3, #1
 800ef7c:	b29b      	uxth	r3, r3
 800ef7e:	b21a      	sxth	r2, r3
 800ef80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef82:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800ef84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef86:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800ef8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef8c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800ef90:	429a      	cmp	r2, r3
 800ef92:	db7b      	blt.n	800f08c <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800ef94:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ef96:	f004 f821 	bl	8012fdc <tcp_rexmit_rto_prepare>
 800ef9a:	4603      	mov	r3, r0
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d007      	beq.n	800efb0 <tcp_slowtmr+0x220>
 800efa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d171      	bne.n	800f08c <tcp_slowtmr+0x2fc>
 800efa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efaa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800efac:	2b00      	cmp	r3, #0
 800efae:	d06d      	beq.n	800f08c <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800efb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efb2:	7d1b      	ldrb	r3, [r3, #20]
 800efb4:	2b02      	cmp	r3, #2
 800efb6:	d03a      	beq.n	800f02e <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800efb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800efbe:	2b0c      	cmp	r3, #12
 800efc0:	bf28      	it	cs
 800efc2:	230c      	movcs	r3, #12
 800efc4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800efc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efc8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800efcc:	10db      	asrs	r3, r3, #3
 800efce:	b21b      	sxth	r3, r3
 800efd0:	461a      	mov	r2, r3
 800efd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efd4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800efd8:	4413      	add	r3, r2
 800efda:	7efa      	ldrb	r2, [r7, #27]
 800efdc:	4910      	ldr	r1, [pc, #64]	@ (800f020 <tcp_slowtmr+0x290>)
 800efde:	5c8a      	ldrb	r2, [r1, r2]
 800efe0:	4093      	lsls	r3, r2
 800efe2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800efe4:	697b      	ldr	r3, [r7, #20]
 800efe6:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800efea:	4293      	cmp	r3, r2
 800efec:	dc1a      	bgt.n	800f024 <tcp_slowtmr+0x294>
 800efee:	697b      	ldr	r3, [r7, #20]
 800eff0:	b21a      	sxth	r2, r3
 800eff2:	e019      	b.n	800f028 <tcp_slowtmr+0x298>
 800eff4:	2000c688 	.word	0x2000c688
 800eff8:	2000c69e 	.word	0x2000c69e
 800effc:	2000c694 	.word	0x2000c694
 800f000:	08019344 	.word	0x08019344
 800f004:	08019688 	.word	0x08019688
 800f008:	08019388 	.word	0x08019388
 800f00c:	080196b4 	.word	0x080196b4
 800f010:	080196e0 	.word	0x080196e0
 800f014:	08019710 	.word	0x08019710
 800f018:	08019744 	.word	0x08019744
 800f01c:	0801b3a4 	.word	0x0801b3a4
 800f020:	0801b394 	.word	0x0801b394
 800f024:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800f028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f02a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800f02e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f030:	2200      	movs	r2, #0
 800f032:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800f034:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f036:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800f03a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f03c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f040:	4293      	cmp	r3, r2
 800f042:	bf28      	it	cs
 800f044:	4613      	movcs	r3, r2
 800f046:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800f048:	8a7b      	ldrh	r3, [r7, #18]
 800f04a:	085b      	lsrs	r3, r3, #1
 800f04c:	b29a      	uxth	r2, r3
 800f04e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f050:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800f054:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f056:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800f05a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f05c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f05e:	005b      	lsls	r3, r3, #1
 800f060:	b29b      	uxth	r3, r3
 800f062:	429a      	cmp	r2, r3
 800f064:	d206      	bcs.n	800f074 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800f066:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f068:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f06a:	005b      	lsls	r3, r3, #1
 800f06c:	b29a      	uxth	r2, r3
 800f06e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f070:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800f074:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f076:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800f078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f07a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800f07e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f080:	2200      	movs	r2, #0
 800f082:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800f086:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f088:	f004 f818 	bl	80130bc <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800f08c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f08e:	7d1b      	ldrb	r3, [r3, #20]
 800f090:	2b06      	cmp	r3, #6
 800f092:	d111      	bne.n	800f0b8 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800f094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f096:	8b5b      	ldrh	r3, [r3, #26]
 800f098:	f003 0310 	and.w	r3, r3, #16
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d00b      	beq.n	800f0b8 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f0a0:	4b9d      	ldr	r3, [pc, #628]	@ (800f318 <tcp_slowtmr+0x588>)
 800f0a2:	681a      	ldr	r2, [r3, #0]
 800f0a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0a6:	6a1b      	ldr	r3, [r3, #32]
 800f0a8:	1ad3      	subs	r3, r2, r3
 800f0aa:	2b28      	cmp	r3, #40	@ 0x28
 800f0ac:	d904      	bls.n	800f0b8 <tcp_slowtmr+0x328>
          ++pcb_remove;
 800f0ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f0b2:	3301      	adds	r3, #1
 800f0b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f0b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0ba:	7a5b      	ldrb	r3, [r3, #9]
 800f0bc:	f003 0308 	and.w	r3, r3, #8
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d04c      	beq.n	800f15e <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 800f0c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0c6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f0c8:	2b04      	cmp	r3, #4
 800f0ca:	d003      	beq.n	800f0d4 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800f0cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0ce:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800f0d0:	2b07      	cmp	r3, #7
 800f0d2:	d144      	bne.n	800f15e <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f0d4:	4b90      	ldr	r3, [pc, #576]	@ (800f318 <tcp_slowtmr+0x588>)
 800f0d6:	681a      	ldr	r2, [r3, #0]
 800f0d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0da:	6a1b      	ldr	r3, [r3, #32]
 800f0dc:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800f0de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f0e4:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 800f0e8:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 800f0ec:	498b      	ldr	r1, [pc, #556]	@ (800f31c <tcp_slowtmr+0x58c>)
 800f0ee:	fba1 1303 	umull	r1, r3, r1, r3
 800f0f2:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f0f4:	429a      	cmp	r2, r3
 800f0f6:	d90a      	bls.n	800f10e <tcp_slowtmr+0x37e>
        ++pcb_remove;
 800f0f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f0fc:	3301      	adds	r3, #1
 800f0fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800f102:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f106:	3301      	adds	r3, #1
 800f108:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800f10c:	e027      	b.n	800f15e <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f10e:	4b82      	ldr	r3, [pc, #520]	@ (800f318 <tcp_slowtmr+0x588>)
 800f110:	681a      	ldr	r2, [r3, #0]
 800f112:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f114:	6a1b      	ldr	r3, [r3, #32]
 800f116:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800f118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f11a:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800f11e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f120:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800f124:	4618      	mov	r0, r3
 800f126:	4b7e      	ldr	r3, [pc, #504]	@ (800f320 <tcp_slowtmr+0x590>)
 800f128:	fb00 f303 	mul.w	r3, r0, r3
 800f12c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800f12e:	497b      	ldr	r1, [pc, #492]	@ (800f31c <tcp_slowtmr+0x58c>)
 800f130:	fba1 1303 	umull	r1, r3, r1, r3
 800f134:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f136:	429a      	cmp	r2, r3
 800f138:	d911      	bls.n	800f15e <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 800f13a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f13c:	f004 fac2 	bl	80136c4 <tcp_keepalive>
 800f140:	4603      	mov	r3, r0
 800f142:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800f146:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d107      	bne.n	800f15e <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 800f14e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f150:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800f154:	3301      	adds	r3, #1
 800f156:	b2da      	uxtb	r2, r3
 800f158:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f15a:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800f15e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f160:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f162:	2b00      	cmp	r3, #0
 800f164:	d011      	beq.n	800f18a <tcp_slowtmr+0x3fa>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800f166:	4b6c      	ldr	r3, [pc, #432]	@ (800f318 <tcp_slowtmr+0x588>)
 800f168:	681a      	ldr	r2, [r3, #0]
 800f16a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f16c:	6a1b      	ldr	r3, [r3, #32]
 800f16e:	1ad2      	subs	r2, r2, r3
 800f170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f172:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800f176:	4619      	mov	r1, r3
 800f178:	460b      	mov	r3, r1
 800f17a:	005b      	lsls	r3, r3, #1
 800f17c:	440b      	add	r3, r1
 800f17e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800f180:	429a      	cmp	r2, r3
 800f182:	d302      	bcc.n	800f18a <tcp_slowtmr+0x3fa>
      tcp_free_ooseq(pcb);
 800f184:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f186:	f000 fddb 	bl	800fd40 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800f18a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f18c:	7d1b      	ldrb	r3, [r3, #20]
 800f18e:	2b03      	cmp	r3, #3
 800f190:	d10b      	bne.n	800f1aa <tcp_slowtmr+0x41a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f192:	4b61      	ldr	r3, [pc, #388]	@ (800f318 <tcp_slowtmr+0x588>)
 800f194:	681a      	ldr	r2, [r3, #0]
 800f196:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f198:	6a1b      	ldr	r3, [r3, #32]
 800f19a:	1ad3      	subs	r3, r2, r3
 800f19c:	2b28      	cmp	r3, #40	@ 0x28
 800f19e:	d904      	bls.n	800f1aa <tcp_slowtmr+0x41a>
        ++pcb_remove;
 800f1a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f1a4:	3301      	adds	r3, #1
 800f1a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800f1aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1ac:	7d1b      	ldrb	r3, [r3, #20]
 800f1ae:	2b09      	cmp	r3, #9
 800f1b0:	d10b      	bne.n	800f1ca <tcp_slowtmr+0x43a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800f1b2:	4b59      	ldr	r3, [pc, #356]	@ (800f318 <tcp_slowtmr+0x588>)
 800f1b4:	681a      	ldr	r2, [r3, #0]
 800f1b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1b8:	6a1b      	ldr	r3, [r3, #32]
 800f1ba:	1ad3      	subs	r3, r2, r3
 800f1bc:	2bf0      	cmp	r3, #240	@ 0xf0
 800f1be:	d904      	bls.n	800f1ca <tcp_slowtmr+0x43a>
        ++pcb_remove;
 800f1c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f1c4:	3301      	adds	r3, #1
 800f1c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800f1ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d060      	beq.n	800f294 <tcp_slowtmr+0x504>
      tcp_err_fn err_fn = pcb->errf;
 800f1d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f1d8:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800f1da:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f1dc:	f000 fbfc 	bl	800f9d8 <tcp_pcb_purge>
      if (prev != NULL) {
 800f1e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d010      	beq.n	800f208 <tcp_slowtmr+0x478>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800f1e6:	4b4f      	ldr	r3, [pc, #316]	@ (800f324 <tcp_slowtmr+0x594>)
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f1ec:	429a      	cmp	r2, r3
 800f1ee:	d106      	bne.n	800f1fe <tcp_slowtmr+0x46e>
 800f1f0:	4b4d      	ldr	r3, [pc, #308]	@ (800f328 <tcp_slowtmr+0x598>)
 800f1f2:	f240 526d 	movw	r2, #1389	@ 0x56d
 800f1f6:	494d      	ldr	r1, [pc, #308]	@ (800f32c <tcp_slowtmr+0x59c>)
 800f1f8:	484d      	ldr	r0, [pc, #308]	@ (800f330 <tcp_slowtmr+0x5a0>)
 800f1fa:	f008 f86b 	bl	80172d4 <iprintf>
        prev->next = pcb->next;
 800f1fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f200:	68da      	ldr	r2, [r3, #12]
 800f202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f204:	60da      	str	r2, [r3, #12]
 800f206:	e00f      	b.n	800f228 <tcp_slowtmr+0x498>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800f208:	4b46      	ldr	r3, [pc, #280]	@ (800f324 <tcp_slowtmr+0x594>)
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f20e:	429a      	cmp	r2, r3
 800f210:	d006      	beq.n	800f220 <tcp_slowtmr+0x490>
 800f212:	4b45      	ldr	r3, [pc, #276]	@ (800f328 <tcp_slowtmr+0x598>)
 800f214:	f240 5271 	movw	r2, #1393	@ 0x571
 800f218:	4946      	ldr	r1, [pc, #280]	@ (800f334 <tcp_slowtmr+0x5a4>)
 800f21a:	4845      	ldr	r0, [pc, #276]	@ (800f330 <tcp_slowtmr+0x5a0>)
 800f21c:	f008 f85a 	bl	80172d4 <iprintf>
        tcp_active_pcbs = pcb->next;
 800f220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f222:	68db      	ldr	r3, [r3, #12]
 800f224:	4a3f      	ldr	r2, [pc, #252]	@ (800f324 <tcp_slowtmr+0x594>)
 800f226:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800f228:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d013      	beq.n	800f258 <tcp_slowtmr+0x4c8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800f230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f232:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800f234:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f236:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800f238:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800f23a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f23c:	3304      	adds	r3, #4
 800f23e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f240:	8ad2      	ldrh	r2, [r2, #22]
 800f242:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f244:	8b09      	ldrh	r1, [r1, #24]
 800f246:	9102      	str	r1, [sp, #8]
 800f248:	9201      	str	r2, [sp, #4]
 800f24a:	9300      	str	r3, [sp, #0]
 800f24c:	462b      	mov	r3, r5
 800f24e:	4622      	mov	r2, r4
 800f250:	4601      	mov	r1, r0
 800f252:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f254:	f004 f982 	bl	801355c <tcp_rst>
      err_arg = pcb->callback_arg;
 800f258:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f25a:	691b      	ldr	r3, [r3, #16]
 800f25c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800f25e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f260:	7d1b      	ldrb	r3, [r3, #20]
 800f262:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800f264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f266:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800f268:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f26a:	68db      	ldr	r3, [r3, #12]
 800f26c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800f26e:	6838      	ldr	r0, [r7, #0]
 800f270:	f7ff f9f0 	bl	800e654 <tcp_free>
      tcp_active_pcbs_changed = 0;
 800f274:	4b30      	ldr	r3, [pc, #192]	@ (800f338 <tcp_slowtmr+0x5a8>)
 800f276:	2200      	movs	r2, #0
 800f278:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d004      	beq.n	800f28a <tcp_slowtmr+0x4fa>
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	f06f 010c 	mvn.w	r1, #12
 800f286:	68b8      	ldr	r0, [r7, #8]
 800f288:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800f28a:	4b2b      	ldr	r3, [pc, #172]	@ (800f338 <tcp_slowtmr+0x5a8>)
 800f28c:	781b      	ldrb	r3, [r3, #0]
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d037      	beq.n	800f302 <tcp_slowtmr+0x572>
        goto tcp_slowtmr_start;
 800f292:	e590      	b.n	800edb6 <tcp_slowtmr+0x26>
      prev = pcb;
 800f294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f296:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800f298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f29a:	68db      	ldr	r3, [r3, #12]
 800f29c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800f29e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2a0:	7f1b      	ldrb	r3, [r3, #28]
 800f2a2:	3301      	adds	r3, #1
 800f2a4:	b2da      	uxtb	r2, r3
 800f2a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2a8:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800f2aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2ac:	7f1a      	ldrb	r2, [r3, #28]
 800f2ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2b0:	7f5b      	ldrb	r3, [r3, #29]
 800f2b2:	429a      	cmp	r2, r3
 800f2b4:	d325      	bcc.n	800f302 <tcp_slowtmr+0x572>
        prev->polltmr = 0;
 800f2b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2b8:	2200      	movs	r2, #0
 800f2ba:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800f2bc:	4b1e      	ldr	r3, [pc, #120]	@ (800f338 <tcp_slowtmr+0x5a8>)
 800f2be:	2200      	movs	r2, #0
 800f2c0:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800f2c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d00b      	beq.n	800f2e4 <tcp_slowtmr+0x554>
 800f2cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f2d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f2d4:	6912      	ldr	r2, [r2, #16]
 800f2d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f2d8:	4610      	mov	r0, r2
 800f2da:	4798      	blx	r3
 800f2dc:	4603      	mov	r3, r0
 800f2de:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800f2e2:	e002      	b.n	800f2ea <tcp_slowtmr+0x55a>
 800f2e4:	2300      	movs	r3, #0
 800f2e6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800f2ea:	4b13      	ldr	r3, [pc, #76]	@ (800f338 <tcp_slowtmr+0x5a8>)
 800f2ec:	781b      	ldrb	r3, [r3, #0]
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	f47f ad60 	bne.w	800edb4 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800f2f4:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d102      	bne.n	800f302 <tcp_slowtmr+0x572>
          tcp_output(prev);
 800f2fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f2fe:	f003 fb79 	bl	80129f4 <tcp_output>
  while (pcb != NULL) {
 800f302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f304:	2b00      	cmp	r3, #0
 800f306:	f47f ad5c 	bne.w	800edc2 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800f30a:	2300      	movs	r3, #0
 800f30c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800f30e:	4b0b      	ldr	r3, [pc, #44]	@ (800f33c <tcp_slowtmr+0x5ac>)
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800f314:	e067      	b.n	800f3e6 <tcp_slowtmr+0x656>
 800f316:	bf00      	nop
 800f318:	2000c688 	.word	0x2000c688
 800f31c:	10624dd3 	.word	0x10624dd3
 800f320:	000124f8 	.word	0x000124f8
 800f324:	2000c694 	.word	0x2000c694
 800f328:	08019344 	.word	0x08019344
 800f32c:	0801977c 	.word	0x0801977c
 800f330:	08019388 	.word	0x08019388
 800f334:	080197a8 	.word	0x080197a8
 800f338:	2000c69c 	.word	0x2000c69c
 800f33c:	2000c698 	.word	0x2000c698
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f342:	7d1b      	ldrb	r3, [r3, #20]
 800f344:	2b0a      	cmp	r3, #10
 800f346:	d006      	beq.n	800f356 <tcp_slowtmr+0x5c6>
 800f348:	4b2b      	ldr	r3, [pc, #172]	@ (800f3f8 <tcp_slowtmr+0x668>)
 800f34a:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800f34e:	492b      	ldr	r1, [pc, #172]	@ (800f3fc <tcp_slowtmr+0x66c>)
 800f350:	482b      	ldr	r0, [pc, #172]	@ (800f400 <tcp_slowtmr+0x670>)
 800f352:	f007 ffbf 	bl	80172d4 <iprintf>
    pcb_remove = 0;
 800f356:	2300      	movs	r3, #0
 800f358:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800f35c:	4b29      	ldr	r3, [pc, #164]	@ (800f404 <tcp_slowtmr+0x674>)
 800f35e:	681a      	ldr	r2, [r3, #0]
 800f360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f362:	6a1b      	ldr	r3, [r3, #32]
 800f364:	1ad3      	subs	r3, r2, r3
 800f366:	2bf0      	cmp	r3, #240	@ 0xf0
 800f368:	d904      	bls.n	800f374 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800f36a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f36e:	3301      	adds	r3, #1
 800f370:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800f374:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d02f      	beq.n	800f3dc <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800f37c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f37e:	f000 fb2b 	bl	800f9d8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800f382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f384:	2b00      	cmp	r3, #0
 800f386:	d010      	beq.n	800f3aa <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800f388:	4b1f      	ldr	r3, [pc, #124]	@ (800f408 <tcp_slowtmr+0x678>)
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f38e:	429a      	cmp	r2, r3
 800f390:	d106      	bne.n	800f3a0 <tcp_slowtmr+0x610>
 800f392:	4b19      	ldr	r3, [pc, #100]	@ (800f3f8 <tcp_slowtmr+0x668>)
 800f394:	f240 52af 	movw	r2, #1455	@ 0x5af
 800f398:	491c      	ldr	r1, [pc, #112]	@ (800f40c <tcp_slowtmr+0x67c>)
 800f39a:	4819      	ldr	r0, [pc, #100]	@ (800f400 <tcp_slowtmr+0x670>)
 800f39c:	f007 ff9a 	bl	80172d4 <iprintf>
        prev->next = pcb->next;
 800f3a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3a2:	68da      	ldr	r2, [r3, #12]
 800f3a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3a6:	60da      	str	r2, [r3, #12]
 800f3a8:	e00f      	b.n	800f3ca <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800f3aa:	4b17      	ldr	r3, [pc, #92]	@ (800f408 <tcp_slowtmr+0x678>)
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f3b0:	429a      	cmp	r2, r3
 800f3b2:	d006      	beq.n	800f3c2 <tcp_slowtmr+0x632>
 800f3b4:	4b10      	ldr	r3, [pc, #64]	@ (800f3f8 <tcp_slowtmr+0x668>)
 800f3b6:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800f3ba:	4915      	ldr	r1, [pc, #84]	@ (800f410 <tcp_slowtmr+0x680>)
 800f3bc:	4810      	ldr	r0, [pc, #64]	@ (800f400 <tcp_slowtmr+0x670>)
 800f3be:	f007 ff89 	bl	80172d4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800f3c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3c4:	68db      	ldr	r3, [r3, #12]
 800f3c6:	4a10      	ldr	r2, [pc, #64]	@ (800f408 <tcp_slowtmr+0x678>)
 800f3c8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800f3ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3cc:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800f3ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3d0:	68db      	ldr	r3, [r3, #12]
 800f3d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800f3d4:	69f8      	ldr	r0, [r7, #28]
 800f3d6:	f7ff f93d 	bl	800e654 <tcp_free>
 800f3da:	e004      	b.n	800f3e6 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 800f3dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3de:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800f3e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3e2:	68db      	ldr	r3, [r3, #12]
 800f3e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800f3e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d1a9      	bne.n	800f340 <tcp_slowtmr+0x5b0>
    }
  }
}
 800f3ec:	bf00      	nop
 800f3ee:	bf00      	nop
 800f3f0:	3730      	adds	r7, #48	@ 0x30
 800f3f2:	46bd      	mov	sp, r7
 800f3f4:	bdb0      	pop	{r4, r5, r7, pc}
 800f3f6:	bf00      	nop
 800f3f8:	08019344 	.word	0x08019344
 800f3fc:	080197d4 	.word	0x080197d4
 800f400:	08019388 	.word	0x08019388
 800f404:	2000c688 	.word	0x2000c688
 800f408:	2000c698 	.word	0x2000c698
 800f40c:	08019804 	.word	0x08019804
 800f410:	0801982c 	.word	0x0801982c

0800f414 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800f414:	b580      	push	{r7, lr}
 800f416:	b082      	sub	sp, #8
 800f418:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800f41a:	4b2d      	ldr	r3, [pc, #180]	@ (800f4d0 <tcp_fasttmr+0xbc>)
 800f41c:	781b      	ldrb	r3, [r3, #0]
 800f41e:	3301      	adds	r3, #1
 800f420:	b2da      	uxtb	r2, r3
 800f422:	4b2b      	ldr	r3, [pc, #172]	@ (800f4d0 <tcp_fasttmr+0xbc>)
 800f424:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800f426:	4b2b      	ldr	r3, [pc, #172]	@ (800f4d4 <tcp_fasttmr+0xc0>)
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f42c:	e048      	b.n	800f4c0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	7f9a      	ldrb	r2, [r3, #30]
 800f432:	4b27      	ldr	r3, [pc, #156]	@ (800f4d0 <tcp_fasttmr+0xbc>)
 800f434:	781b      	ldrb	r3, [r3, #0]
 800f436:	429a      	cmp	r2, r3
 800f438:	d03f      	beq.n	800f4ba <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800f43a:	4b25      	ldr	r3, [pc, #148]	@ (800f4d0 <tcp_fasttmr+0xbc>)
 800f43c:	781a      	ldrb	r2, [r3, #0]
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	8b5b      	ldrh	r3, [r3, #26]
 800f446:	f003 0301 	and.w	r3, r3, #1
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d010      	beq.n	800f470 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	8b5b      	ldrh	r3, [r3, #26]
 800f452:	f043 0302 	orr.w	r3, r3, #2
 800f456:	b29a      	uxth	r2, r3
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800f45c:	6878      	ldr	r0, [r7, #4]
 800f45e:	f003 fac9 	bl	80129f4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	8b5b      	ldrh	r3, [r3, #26]
 800f466:	f023 0303 	bic.w	r3, r3, #3
 800f46a:	b29a      	uxth	r2, r3
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	8b5b      	ldrh	r3, [r3, #26]
 800f474:	f003 0308 	and.w	r3, r3, #8
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d009      	beq.n	800f490 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	8b5b      	ldrh	r3, [r3, #26]
 800f480:	f023 0308 	bic.w	r3, r3, #8
 800f484:	b29a      	uxth	r2, r3
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800f48a:	6878      	ldr	r0, [r7, #4]
 800f48c:	f7ff fa76 	bl	800e97c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	68db      	ldr	r3, [r3, #12]
 800f494:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d00a      	beq.n	800f4b4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800f49e:	4b0e      	ldr	r3, [pc, #56]	@ (800f4d8 <tcp_fasttmr+0xc4>)
 800f4a0:	2200      	movs	r2, #0
 800f4a2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800f4a4:	6878      	ldr	r0, [r7, #4]
 800f4a6:	f000 f819 	bl	800f4dc <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800f4aa:	4b0b      	ldr	r3, [pc, #44]	@ (800f4d8 <tcp_fasttmr+0xc4>)
 800f4ac:	781b      	ldrb	r3, [r3, #0]
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d000      	beq.n	800f4b4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800f4b2:	e7b8      	b.n	800f426 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800f4b4:	683b      	ldr	r3, [r7, #0]
 800f4b6:	607b      	str	r3, [r7, #4]
 800f4b8:	e002      	b.n	800f4c0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	68db      	ldr	r3, [r3, #12]
 800f4be:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d1b3      	bne.n	800f42e <tcp_fasttmr+0x1a>
    }
  }
}
 800f4c6:	bf00      	nop
 800f4c8:	bf00      	nop
 800f4ca:	3708      	adds	r7, #8
 800f4cc:	46bd      	mov	sp, r7
 800f4ce:	bd80      	pop	{r7, pc}
 800f4d0:	2000c69e 	.word	0x2000c69e
 800f4d4:	2000c694 	.word	0x2000c694
 800f4d8:	2000c69c 	.word	0x2000c69c

0800f4dc <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800f4dc:	b590      	push	{r4, r7, lr}
 800f4de:	b085      	sub	sp, #20
 800f4e0:	af00      	add	r7, sp, #0
 800f4e2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d109      	bne.n	800f4fe <tcp_process_refused_data+0x22>
 800f4ea:	4b37      	ldr	r3, [pc, #220]	@ (800f5c8 <tcp_process_refused_data+0xec>)
 800f4ec:	f240 6209 	movw	r2, #1545	@ 0x609
 800f4f0:	4936      	ldr	r1, [pc, #216]	@ (800f5cc <tcp_process_refused_data+0xf0>)
 800f4f2:	4837      	ldr	r0, [pc, #220]	@ (800f5d0 <tcp_process_refused_data+0xf4>)
 800f4f4:	f007 feee 	bl	80172d4 <iprintf>
 800f4f8:	f06f 030f 	mvn.w	r3, #15
 800f4fc:	e060      	b.n	800f5c0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f502:	7b5b      	ldrb	r3, [r3, #13]
 800f504:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f50a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	2200      	movs	r2, #0
 800f510:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d00b      	beq.n	800f534 <tcp_process_refused_data+0x58>
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	6918      	ldr	r0, [r3, #16]
 800f526:	2300      	movs	r3, #0
 800f528:	68ba      	ldr	r2, [r7, #8]
 800f52a:	6879      	ldr	r1, [r7, #4]
 800f52c:	47a0      	blx	r4
 800f52e:	4603      	mov	r3, r0
 800f530:	73fb      	strb	r3, [r7, #15]
 800f532:	e007      	b.n	800f544 <tcp_process_refused_data+0x68>
 800f534:	2300      	movs	r3, #0
 800f536:	68ba      	ldr	r2, [r7, #8]
 800f538:	6879      	ldr	r1, [r7, #4]
 800f53a:	2000      	movs	r0, #0
 800f53c:	f000 f8a4 	bl	800f688 <tcp_recv_null>
 800f540:	4603      	mov	r3, r0
 800f542:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800f544:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d12a      	bne.n	800f5a2 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800f54c:	7bbb      	ldrb	r3, [r7, #14]
 800f54e:	f003 0320 	and.w	r3, r3, #32
 800f552:	2b00      	cmp	r3, #0
 800f554:	d033      	beq.n	800f5be <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f55a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800f55e:	d005      	beq.n	800f56c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f564:	3301      	adds	r3, #1
 800f566:	b29a      	uxth	r2, r3
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f572:	2b00      	cmp	r3, #0
 800f574:	d00b      	beq.n	800f58e <tcp_process_refused_data+0xb2>
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	6918      	ldr	r0, [r3, #16]
 800f580:	2300      	movs	r3, #0
 800f582:	2200      	movs	r2, #0
 800f584:	6879      	ldr	r1, [r7, #4]
 800f586:	47a0      	blx	r4
 800f588:	4603      	mov	r3, r0
 800f58a:	73fb      	strb	r3, [r7, #15]
 800f58c:	e001      	b.n	800f592 <tcp_process_refused_data+0xb6>
 800f58e:	2300      	movs	r3, #0
 800f590:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800f592:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f596:	f113 0f0d 	cmn.w	r3, #13
 800f59a:	d110      	bne.n	800f5be <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800f59c:	f06f 030c 	mvn.w	r3, #12
 800f5a0:	e00e      	b.n	800f5c0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800f5a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f5a6:	f113 0f0d 	cmn.w	r3, #13
 800f5aa:	d102      	bne.n	800f5b2 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800f5ac:	f06f 030c 	mvn.w	r3, #12
 800f5b0:	e006      	b.n	800f5c0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	68ba      	ldr	r2, [r7, #8]
 800f5b6:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800f5b8:	f06f 0304 	mvn.w	r3, #4
 800f5bc:	e000      	b.n	800f5c0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800f5be:	2300      	movs	r3, #0
}
 800f5c0:	4618      	mov	r0, r3
 800f5c2:	3714      	adds	r7, #20
 800f5c4:	46bd      	mov	sp, r7
 800f5c6:	bd90      	pop	{r4, r7, pc}
 800f5c8:	08019344 	.word	0x08019344
 800f5cc:	08019854 	.word	0x08019854
 800f5d0:	08019388 	.word	0x08019388

0800f5d4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800f5d4:	b580      	push	{r7, lr}
 800f5d6:	b084      	sub	sp, #16
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800f5dc:	e007      	b.n	800f5ee <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800f5e4:	6878      	ldr	r0, [r7, #4]
 800f5e6:	f000 f80a 	bl	800f5fe <tcp_seg_free>
    seg = next;
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d1f4      	bne.n	800f5de <tcp_segs_free+0xa>
  }
}
 800f5f4:	bf00      	nop
 800f5f6:	bf00      	nop
 800f5f8:	3710      	adds	r7, #16
 800f5fa:	46bd      	mov	sp, r7
 800f5fc:	bd80      	pop	{r7, pc}

0800f5fe <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800f5fe:	b580      	push	{r7, lr}
 800f600:	b082      	sub	sp, #8
 800f602:	af00      	add	r7, sp, #0
 800f604:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d00c      	beq.n	800f626 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	685b      	ldr	r3, [r3, #4]
 800f610:	2b00      	cmp	r3, #0
 800f612:	d004      	beq.n	800f61e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	685b      	ldr	r3, [r3, #4]
 800f618:	4618      	mov	r0, r3
 800f61a:	f7fe fd6f 	bl	800e0fc <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800f61e:	6879      	ldr	r1, [r7, #4]
 800f620:	2003      	movs	r0, #3
 800f622:	f7fd fef9 	bl	800d418 <memp_free>
  }
}
 800f626:	bf00      	nop
 800f628:	3708      	adds	r7, #8
 800f62a:	46bd      	mov	sp, r7
 800f62c:	bd80      	pop	{r7, pc}
	...

0800f630 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800f630:	b580      	push	{r7, lr}
 800f632:	b084      	sub	sp, #16
 800f634:	af00      	add	r7, sp, #0
 800f636:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d106      	bne.n	800f64c <tcp_seg_copy+0x1c>
 800f63e:	4b0f      	ldr	r3, [pc, #60]	@ (800f67c <tcp_seg_copy+0x4c>)
 800f640:	f240 6282 	movw	r2, #1666	@ 0x682
 800f644:	490e      	ldr	r1, [pc, #56]	@ (800f680 <tcp_seg_copy+0x50>)
 800f646:	480f      	ldr	r0, [pc, #60]	@ (800f684 <tcp_seg_copy+0x54>)
 800f648:	f007 fe44 	bl	80172d4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800f64c:	2003      	movs	r0, #3
 800f64e:	f7fd fe6d 	bl	800d32c <memp_malloc>
 800f652:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	2b00      	cmp	r3, #0
 800f658:	d101      	bne.n	800f65e <tcp_seg_copy+0x2e>
    return NULL;
 800f65a:	2300      	movs	r3, #0
 800f65c:	e00a      	b.n	800f674 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800f65e:	2210      	movs	r2, #16
 800f660:	6879      	ldr	r1, [r7, #4]
 800f662:	68f8      	ldr	r0, [r7, #12]
 800f664:	f007 ffbf 	bl	80175e6 <memcpy>
  pbuf_ref(cseg->p);
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	685b      	ldr	r3, [r3, #4]
 800f66c:	4618      	mov	r0, r3
 800f66e:	f7fe fdeb 	bl	800e248 <pbuf_ref>
  return cseg;
 800f672:	68fb      	ldr	r3, [r7, #12]
}
 800f674:	4618      	mov	r0, r3
 800f676:	3710      	adds	r7, #16
 800f678:	46bd      	mov	sp, r7
 800f67a:	bd80      	pop	{r7, pc}
 800f67c:	08019344 	.word	0x08019344
 800f680:	08019898 	.word	0x08019898
 800f684:	08019388 	.word	0x08019388

0800f688 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800f688:	b580      	push	{r7, lr}
 800f68a:	b084      	sub	sp, #16
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	60f8      	str	r0, [r7, #12]
 800f690:	60b9      	str	r1, [r7, #8]
 800f692:	607a      	str	r2, [r7, #4]
 800f694:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800f696:	68bb      	ldr	r3, [r7, #8]
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d109      	bne.n	800f6b0 <tcp_recv_null+0x28>
 800f69c:	4b12      	ldr	r3, [pc, #72]	@ (800f6e8 <tcp_recv_null+0x60>)
 800f69e:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800f6a2:	4912      	ldr	r1, [pc, #72]	@ (800f6ec <tcp_recv_null+0x64>)
 800f6a4:	4812      	ldr	r0, [pc, #72]	@ (800f6f0 <tcp_recv_null+0x68>)
 800f6a6:	f007 fe15 	bl	80172d4 <iprintf>
 800f6aa:	f06f 030f 	mvn.w	r3, #15
 800f6ae:	e016      	b.n	800f6de <tcp_recv_null+0x56>

  if (p != NULL) {
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d009      	beq.n	800f6ca <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	891b      	ldrh	r3, [r3, #8]
 800f6ba:	4619      	mov	r1, r3
 800f6bc:	68b8      	ldr	r0, [r7, #8]
 800f6be:	f7ff fb17 	bl	800ecf0 <tcp_recved>
    pbuf_free(p);
 800f6c2:	6878      	ldr	r0, [r7, #4]
 800f6c4:	f7fe fd1a 	bl	800e0fc <pbuf_free>
 800f6c8:	e008      	b.n	800f6dc <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800f6ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d104      	bne.n	800f6dc <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800f6d2:	68b8      	ldr	r0, [r7, #8]
 800f6d4:	f7ff f9bc 	bl	800ea50 <tcp_close>
 800f6d8:	4603      	mov	r3, r0
 800f6da:	e000      	b.n	800f6de <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800f6dc:	2300      	movs	r3, #0
}
 800f6de:	4618      	mov	r0, r3
 800f6e0:	3710      	adds	r7, #16
 800f6e2:	46bd      	mov	sp, r7
 800f6e4:	bd80      	pop	{r7, pc}
 800f6e6:	bf00      	nop
 800f6e8:	08019344 	.word	0x08019344
 800f6ec:	080198b4 	.word	0x080198b4
 800f6f0:	08019388 	.word	0x08019388

0800f6f4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800f6f4:	b580      	push	{r7, lr}
 800f6f6:	b086      	sub	sp, #24
 800f6f8:	af00      	add	r7, sp, #0
 800f6fa:	4603      	mov	r3, r0
 800f6fc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800f6fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f702:	2b00      	cmp	r3, #0
 800f704:	db01      	blt.n	800f70a <tcp_kill_prio+0x16>
 800f706:	79fb      	ldrb	r3, [r7, #7]
 800f708:	e000      	b.n	800f70c <tcp_kill_prio+0x18>
 800f70a:	237f      	movs	r3, #127	@ 0x7f
 800f70c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800f70e:	7afb      	ldrb	r3, [r7, #11]
 800f710:	2b00      	cmp	r3, #0
 800f712:	d034      	beq.n	800f77e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800f714:	7afb      	ldrb	r3, [r7, #11]
 800f716:	3b01      	subs	r3, #1
 800f718:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800f71a:	2300      	movs	r3, #0
 800f71c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f71e:	2300      	movs	r3, #0
 800f720:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f722:	4b19      	ldr	r3, [pc, #100]	@ (800f788 <tcp_kill_prio+0x94>)
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	617b      	str	r3, [r7, #20]
 800f728:	e01f      	b.n	800f76a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800f72a:	697b      	ldr	r3, [r7, #20]
 800f72c:	7d5b      	ldrb	r3, [r3, #21]
 800f72e:	7afa      	ldrb	r2, [r7, #11]
 800f730:	429a      	cmp	r2, r3
 800f732:	d80c      	bhi.n	800f74e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f734:	697b      	ldr	r3, [r7, #20]
 800f736:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800f738:	7afa      	ldrb	r2, [r7, #11]
 800f73a:	429a      	cmp	r2, r3
 800f73c:	d112      	bne.n	800f764 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f73e:	4b13      	ldr	r3, [pc, #76]	@ (800f78c <tcp_kill_prio+0x98>)
 800f740:	681a      	ldr	r2, [r3, #0]
 800f742:	697b      	ldr	r3, [r7, #20]
 800f744:	6a1b      	ldr	r3, [r3, #32]
 800f746:	1ad3      	subs	r3, r2, r3
 800f748:	68fa      	ldr	r2, [r7, #12]
 800f74a:	429a      	cmp	r2, r3
 800f74c:	d80a      	bhi.n	800f764 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800f74e:	4b0f      	ldr	r3, [pc, #60]	@ (800f78c <tcp_kill_prio+0x98>)
 800f750:	681a      	ldr	r2, [r3, #0]
 800f752:	697b      	ldr	r3, [r7, #20]
 800f754:	6a1b      	ldr	r3, [r3, #32]
 800f756:	1ad3      	subs	r3, r2, r3
 800f758:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800f75a:	697b      	ldr	r3, [r7, #20]
 800f75c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800f75e:	697b      	ldr	r3, [r7, #20]
 800f760:	7d5b      	ldrb	r3, [r3, #21]
 800f762:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f764:	697b      	ldr	r3, [r7, #20]
 800f766:	68db      	ldr	r3, [r3, #12]
 800f768:	617b      	str	r3, [r7, #20]
 800f76a:	697b      	ldr	r3, [r7, #20]
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d1dc      	bne.n	800f72a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800f770:	693b      	ldr	r3, [r7, #16]
 800f772:	2b00      	cmp	r3, #0
 800f774:	d004      	beq.n	800f780 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f776:	6938      	ldr	r0, [r7, #16]
 800f778:	f7ff fa54 	bl	800ec24 <tcp_abort>
 800f77c:	e000      	b.n	800f780 <tcp_kill_prio+0x8c>
    return;
 800f77e:	bf00      	nop
  }
}
 800f780:	3718      	adds	r7, #24
 800f782:	46bd      	mov	sp, r7
 800f784:	bd80      	pop	{r7, pc}
 800f786:	bf00      	nop
 800f788:	2000c694 	.word	0x2000c694
 800f78c:	2000c688 	.word	0x2000c688

0800f790 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800f790:	b580      	push	{r7, lr}
 800f792:	b086      	sub	sp, #24
 800f794:	af00      	add	r7, sp, #0
 800f796:	4603      	mov	r3, r0
 800f798:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800f79a:	79fb      	ldrb	r3, [r7, #7]
 800f79c:	2b08      	cmp	r3, #8
 800f79e:	d009      	beq.n	800f7b4 <tcp_kill_state+0x24>
 800f7a0:	79fb      	ldrb	r3, [r7, #7]
 800f7a2:	2b09      	cmp	r3, #9
 800f7a4:	d006      	beq.n	800f7b4 <tcp_kill_state+0x24>
 800f7a6:	4b1a      	ldr	r3, [pc, #104]	@ (800f810 <tcp_kill_state+0x80>)
 800f7a8:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800f7ac:	4919      	ldr	r1, [pc, #100]	@ (800f814 <tcp_kill_state+0x84>)
 800f7ae:	481a      	ldr	r0, [pc, #104]	@ (800f818 <tcp_kill_state+0x88>)
 800f7b0:	f007 fd90 	bl	80172d4 <iprintf>

  inactivity = 0;
 800f7b4:	2300      	movs	r3, #0
 800f7b6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f7b8:	2300      	movs	r3, #0
 800f7ba:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f7bc:	4b17      	ldr	r3, [pc, #92]	@ (800f81c <tcp_kill_state+0x8c>)
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	617b      	str	r3, [r7, #20]
 800f7c2:	e017      	b.n	800f7f4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800f7c4:	697b      	ldr	r3, [r7, #20]
 800f7c6:	7d1b      	ldrb	r3, [r3, #20]
 800f7c8:	79fa      	ldrb	r2, [r7, #7]
 800f7ca:	429a      	cmp	r2, r3
 800f7cc:	d10f      	bne.n	800f7ee <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f7ce:	4b14      	ldr	r3, [pc, #80]	@ (800f820 <tcp_kill_state+0x90>)
 800f7d0:	681a      	ldr	r2, [r3, #0]
 800f7d2:	697b      	ldr	r3, [r7, #20]
 800f7d4:	6a1b      	ldr	r3, [r3, #32]
 800f7d6:	1ad3      	subs	r3, r2, r3
 800f7d8:	68fa      	ldr	r2, [r7, #12]
 800f7da:	429a      	cmp	r2, r3
 800f7dc:	d807      	bhi.n	800f7ee <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800f7de:	4b10      	ldr	r3, [pc, #64]	@ (800f820 <tcp_kill_state+0x90>)
 800f7e0:	681a      	ldr	r2, [r3, #0]
 800f7e2:	697b      	ldr	r3, [r7, #20]
 800f7e4:	6a1b      	ldr	r3, [r3, #32]
 800f7e6:	1ad3      	subs	r3, r2, r3
 800f7e8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800f7ea:	697b      	ldr	r3, [r7, #20]
 800f7ec:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f7ee:	697b      	ldr	r3, [r7, #20]
 800f7f0:	68db      	ldr	r3, [r3, #12]
 800f7f2:	617b      	str	r3, [r7, #20]
 800f7f4:	697b      	ldr	r3, [r7, #20]
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d1e4      	bne.n	800f7c4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800f7fa:	693b      	ldr	r3, [r7, #16]
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d003      	beq.n	800f808 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800f800:	2100      	movs	r1, #0
 800f802:	6938      	ldr	r0, [r7, #16]
 800f804:	f7ff f950 	bl	800eaa8 <tcp_abandon>
  }
}
 800f808:	bf00      	nop
 800f80a:	3718      	adds	r7, #24
 800f80c:	46bd      	mov	sp, r7
 800f80e:	bd80      	pop	{r7, pc}
 800f810:	08019344 	.word	0x08019344
 800f814:	080198d0 	.word	0x080198d0
 800f818:	08019388 	.word	0x08019388
 800f81c:	2000c694 	.word	0x2000c694
 800f820:	2000c688 	.word	0x2000c688

0800f824 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800f824:	b580      	push	{r7, lr}
 800f826:	b084      	sub	sp, #16
 800f828:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800f82a:	2300      	movs	r3, #0
 800f82c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800f82e:	2300      	movs	r3, #0
 800f830:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f832:	4b12      	ldr	r3, [pc, #72]	@ (800f87c <tcp_kill_timewait+0x58>)
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	60fb      	str	r3, [r7, #12]
 800f838:	e012      	b.n	800f860 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f83a:	4b11      	ldr	r3, [pc, #68]	@ (800f880 <tcp_kill_timewait+0x5c>)
 800f83c:	681a      	ldr	r2, [r3, #0]
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	6a1b      	ldr	r3, [r3, #32]
 800f842:	1ad3      	subs	r3, r2, r3
 800f844:	687a      	ldr	r2, [r7, #4]
 800f846:	429a      	cmp	r2, r3
 800f848:	d807      	bhi.n	800f85a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800f84a:	4b0d      	ldr	r3, [pc, #52]	@ (800f880 <tcp_kill_timewait+0x5c>)
 800f84c:	681a      	ldr	r2, [r3, #0]
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	6a1b      	ldr	r3, [r3, #32]
 800f852:	1ad3      	subs	r3, r2, r3
 800f854:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800f856:	68fb      	ldr	r3, [r7, #12]
 800f858:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	68db      	ldr	r3, [r3, #12]
 800f85e:	60fb      	str	r3, [r7, #12]
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	2b00      	cmp	r3, #0
 800f864:	d1e9      	bne.n	800f83a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800f866:	68bb      	ldr	r3, [r7, #8]
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d002      	beq.n	800f872 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f86c:	68b8      	ldr	r0, [r7, #8]
 800f86e:	f7ff f9d9 	bl	800ec24 <tcp_abort>
  }
}
 800f872:	bf00      	nop
 800f874:	3710      	adds	r7, #16
 800f876:	46bd      	mov	sp, r7
 800f878:	bd80      	pop	{r7, pc}
 800f87a:	bf00      	nop
 800f87c:	2000c698 	.word	0x2000c698
 800f880:	2000c688 	.word	0x2000c688

0800f884 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800f884:	b580      	push	{r7, lr}
 800f886:	b082      	sub	sp, #8
 800f888:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800f88a:	4b10      	ldr	r3, [pc, #64]	@ (800f8cc <tcp_handle_closepend+0x48>)
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f890:	e014      	b.n	800f8bc <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	68db      	ldr	r3, [r3, #12]
 800f896:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	8b5b      	ldrh	r3, [r3, #26]
 800f89c:	f003 0308 	and.w	r3, r3, #8
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d009      	beq.n	800f8b8 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	8b5b      	ldrh	r3, [r3, #26]
 800f8a8:	f023 0308 	bic.w	r3, r3, #8
 800f8ac:	b29a      	uxth	r2, r3
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800f8b2:	6878      	ldr	r0, [r7, #4]
 800f8b4:	f7ff f862 	bl	800e97c <tcp_close_shutdown_fin>
    }
    pcb = next;
 800f8b8:	683b      	ldr	r3, [r7, #0]
 800f8ba:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d1e7      	bne.n	800f892 <tcp_handle_closepend+0xe>
  }
}
 800f8c2:	bf00      	nop
 800f8c4:	bf00      	nop
 800f8c6:	3708      	adds	r7, #8
 800f8c8:	46bd      	mov	sp, r7
 800f8ca:	bd80      	pop	{r7, pc}
 800f8cc:	2000c694 	.word	0x2000c694

0800f8d0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800f8d0:	b580      	push	{r7, lr}
 800f8d2:	b084      	sub	sp, #16
 800f8d4:	af00      	add	r7, sp, #0
 800f8d6:	4603      	mov	r3, r0
 800f8d8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f8da:	2001      	movs	r0, #1
 800f8dc:	f7fd fd26 	bl	800d32c <memp_malloc>
 800f8e0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d126      	bne.n	800f936 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800f8e8:	f7ff ffcc 	bl	800f884 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800f8ec:	f7ff ff9a 	bl	800f824 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f8f0:	2001      	movs	r0, #1
 800f8f2:	f7fd fd1b 	bl	800d32c <memp_malloc>
 800f8f6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d11b      	bne.n	800f936 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800f8fe:	2009      	movs	r0, #9
 800f900:	f7ff ff46 	bl	800f790 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f904:	2001      	movs	r0, #1
 800f906:	f7fd fd11 	bl	800d32c <memp_malloc>
 800f90a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d111      	bne.n	800f936 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800f912:	2008      	movs	r0, #8
 800f914:	f7ff ff3c 	bl	800f790 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f918:	2001      	movs	r0, #1
 800f91a:	f7fd fd07 	bl	800d32c <memp_malloc>
 800f91e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	2b00      	cmp	r3, #0
 800f924:	d107      	bne.n	800f936 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800f926:	79fb      	ldrb	r3, [r7, #7]
 800f928:	4618      	mov	r0, r3
 800f92a:	f7ff fee3 	bl	800f6f4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f92e:	2001      	movs	r0, #1
 800f930:	f7fd fcfc 	bl	800d32c <memp_malloc>
 800f934:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d03f      	beq.n	800f9bc <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800f93c:	229c      	movs	r2, #156	@ 0x9c
 800f93e:	2100      	movs	r1, #0
 800f940:	68f8      	ldr	r0, [r7, #12]
 800f942:	f007 fd7c 	bl	801743e <memset>
    pcb->prio = prio;
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	79fa      	ldrb	r2, [r7, #7]
 800f94a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800f952:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800f95c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	22ff      	movs	r2, #255	@ 0xff
 800f96a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800f972:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	2206      	movs	r2, #6
 800f978:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	2206      	movs	r2, #6
 800f980:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f988:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	2201      	movs	r2, #1
 800f98e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800f992:	4b0d      	ldr	r3, [pc, #52]	@ (800f9c8 <tcp_alloc+0xf8>)
 800f994:	681a      	ldr	r2, [r3, #0]
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800f99a:	4b0c      	ldr	r3, [pc, #48]	@ (800f9cc <tcp_alloc+0xfc>)
 800f99c:	781a      	ldrb	r2, [r3, #0]
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800f9a2:	68fb      	ldr	r3, [r7, #12]
 800f9a4:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800f9a8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	4a08      	ldr	r2, [pc, #32]	@ (800f9d0 <tcp_alloc+0x100>)
 800f9b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	4a07      	ldr	r2, [pc, #28]	@ (800f9d4 <tcp_alloc+0x104>)
 800f9b8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800f9bc:	68fb      	ldr	r3, [r7, #12]
}
 800f9be:	4618      	mov	r0, r3
 800f9c0:	3710      	adds	r7, #16
 800f9c2:	46bd      	mov	sp, r7
 800f9c4:	bd80      	pop	{r7, pc}
 800f9c6:	bf00      	nop
 800f9c8:	2000c688 	.word	0x2000c688
 800f9cc:	2000c69e 	.word	0x2000c69e
 800f9d0:	0800f689 	.word	0x0800f689
 800f9d4:	006ddd00 	.word	0x006ddd00

0800f9d8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800f9d8:	b580      	push	{r7, lr}
 800f9da:	b082      	sub	sp, #8
 800f9dc:	af00      	add	r7, sp, #0
 800f9de:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d107      	bne.n	800f9f6 <tcp_pcb_purge+0x1e>
 800f9e6:	4b21      	ldr	r3, [pc, #132]	@ (800fa6c <tcp_pcb_purge+0x94>)
 800f9e8:	f640 0251 	movw	r2, #2129	@ 0x851
 800f9ec:	4920      	ldr	r1, [pc, #128]	@ (800fa70 <tcp_pcb_purge+0x98>)
 800f9ee:	4821      	ldr	r0, [pc, #132]	@ (800fa74 <tcp_pcb_purge+0x9c>)
 800f9f0:	f007 fc70 	bl	80172d4 <iprintf>
 800f9f4:	e037      	b.n	800fa66 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	7d1b      	ldrb	r3, [r3, #20]
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d033      	beq.n	800fa66 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800fa02:	2b0a      	cmp	r3, #10
 800fa04:	d02f      	beq.n	800fa66 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800fa0a:	2b01      	cmp	r3, #1
 800fa0c:	d02b      	beq.n	800fa66 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d007      	beq.n	800fa26 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fa1a:	4618      	mov	r0, r3
 800fa1c:	f7fe fb6e 	bl	800e0fc <pbuf_free>
      pcb->refused_data = NULL;
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	2200      	movs	r2, #0
 800fa24:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d002      	beq.n	800fa34 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800fa2e:	6878      	ldr	r0, [r7, #4]
 800fa30:	f000 f986 	bl	800fd40 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fa3a:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fa40:	4618      	mov	r0, r3
 800fa42:	f7ff fdc7 	bl	800f5d4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fa4a:	4618      	mov	r0, r3
 800fa4c:	f7ff fdc2 	bl	800f5d4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	2200      	movs	r2, #0
 800fa54:	66da      	str	r2, [r3, #108]	@ 0x6c
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	2200      	movs	r2, #0
 800fa62:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800fa66:	3708      	adds	r7, #8
 800fa68:	46bd      	mov	sp, r7
 800fa6a:	bd80      	pop	{r7, pc}
 800fa6c:	08019344 	.word	0x08019344
 800fa70:	08019990 	.word	0x08019990
 800fa74:	08019388 	.word	0x08019388

0800fa78 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800fa78:	b580      	push	{r7, lr}
 800fa7a:	b084      	sub	sp, #16
 800fa7c:	af00      	add	r7, sp, #0
 800fa7e:	6078      	str	r0, [r7, #4]
 800fa80:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800fa82:	683b      	ldr	r3, [r7, #0]
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d106      	bne.n	800fa96 <tcp_pcb_remove+0x1e>
 800fa88:	4b3e      	ldr	r3, [pc, #248]	@ (800fb84 <tcp_pcb_remove+0x10c>)
 800fa8a:	f640 0283 	movw	r2, #2179	@ 0x883
 800fa8e:	493e      	ldr	r1, [pc, #248]	@ (800fb88 <tcp_pcb_remove+0x110>)
 800fa90:	483e      	ldr	r0, [pc, #248]	@ (800fb8c <tcp_pcb_remove+0x114>)
 800fa92:	f007 fc1f 	bl	80172d4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d106      	bne.n	800faaa <tcp_pcb_remove+0x32>
 800fa9c:	4b39      	ldr	r3, [pc, #228]	@ (800fb84 <tcp_pcb_remove+0x10c>)
 800fa9e:	f640 0284 	movw	r2, #2180	@ 0x884
 800faa2:	493b      	ldr	r1, [pc, #236]	@ (800fb90 <tcp_pcb_remove+0x118>)
 800faa4:	4839      	ldr	r0, [pc, #228]	@ (800fb8c <tcp_pcb_remove+0x114>)
 800faa6:	f007 fc15 	bl	80172d4 <iprintf>

  TCP_RMV(pcblist, pcb);
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	683a      	ldr	r2, [r7, #0]
 800fab0:	429a      	cmp	r2, r3
 800fab2:	d105      	bne.n	800fac0 <tcp_pcb_remove+0x48>
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	68da      	ldr	r2, [r3, #12]
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	601a      	str	r2, [r3, #0]
 800fabe:	e013      	b.n	800fae8 <tcp_pcb_remove+0x70>
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	60fb      	str	r3, [r7, #12]
 800fac6:	e00c      	b.n	800fae2 <tcp_pcb_remove+0x6a>
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	68db      	ldr	r3, [r3, #12]
 800facc:	683a      	ldr	r2, [r7, #0]
 800face:	429a      	cmp	r2, r3
 800fad0:	d104      	bne.n	800fadc <tcp_pcb_remove+0x64>
 800fad2:	683b      	ldr	r3, [r7, #0]
 800fad4:	68da      	ldr	r2, [r3, #12]
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	60da      	str	r2, [r3, #12]
 800fada:	e005      	b.n	800fae8 <tcp_pcb_remove+0x70>
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	68db      	ldr	r3, [r3, #12]
 800fae0:	60fb      	str	r3, [r7, #12]
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d1ef      	bne.n	800fac8 <tcp_pcb_remove+0x50>
 800fae8:	683b      	ldr	r3, [r7, #0]
 800faea:	2200      	movs	r2, #0
 800faec:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800faee:	6838      	ldr	r0, [r7, #0]
 800faf0:	f7ff ff72 	bl	800f9d8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800faf4:	683b      	ldr	r3, [r7, #0]
 800faf6:	7d1b      	ldrb	r3, [r3, #20]
 800faf8:	2b0a      	cmp	r3, #10
 800fafa:	d013      	beq.n	800fb24 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800fafc:	683b      	ldr	r3, [r7, #0]
 800fafe:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800fb00:	2b01      	cmp	r3, #1
 800fb02:	d00f      	beq.n	800fb24 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800fb04:	683b      	ldr	r3, [r7, #0]
 800fb06:	8b5b      	ldrh	r3, [r3, #26]
 800fb08:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d009      	beq.n	800fb24 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800fb10:	683b      	ldr	r3, [r7, #0]
 800fb12:	8b5b      	ldrh	r3, [r3, #26]
 800fb14:	f043 0302 	orr.w	r3, r3, #2
 800fb18:	b29a      	uxth	r2, r3
 800fb1a:	683b      	ldr	r3, [r7, #0]
 800fb1c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800fb1e:	6838      	ldr	r0, [r7, #0]
 800fb20:	f002 ff68 	bl	80129f4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800fb24:	683b      	ldr	r3, [r7, #0]
 800fb26:	7d1b      	ldrb	r3, [r3, #20]
 800fb28:	2b01      	cmp	r3, #1
 800fb2a:	d020      	beq.n	800fb6e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800fb2c:	683b      	ldr	r3, [r7, #0]
 800fb2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d006      	beq.n	800fb42 <tcp_pcb_remove+0xca>
 800fb34:	4b13      	ldr	r3, [pc, #76]	@ (800fb84 <tcp_pcb_remove+0x10c>)
 800fb36:	f640 0293 	movw	r2, #2195	@ 0x893
 800fb3a:	4916      	ldr	r1, [pc, #88]	@ (800fb94 <tcp_pcb_remove+0x11c>)
 800fb3c:	4813      	ldr	r0, [pc, #76]	@ (800fb8c <tcp_pcb_remove+0x114>)
 800fb3e:	f007 fbc9 	bl	80172d4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800fb42:	683b      	ldr	r3, [r7, #0]
 800fb44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d006      	beq.n	800fb58 <tcp_pcb_remove+0xe0>
 800fb4a:	4b0e      	ldr	r3, [pc, #56]	@ (800fb84 <tcp_pcb_remove+0x10c>)
 800fb4c:	f640 0294 	movw	r2, #2196	@ 0x894
 800fb50:	4911      	ldr	r1, [pc, #68]	@ (800fb98 <tcp_pcb_remove+0x120>)
 800fb52:	480e      	ldr	r0, [pc, #56]	@ (800fb8c <tcp_pcb_remove+0x114>)
 800fb54:	f007 fbbe 	bl	80172d4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800fb58:	683b      	ldr	r3, [r7, #0]
 800fb5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d006      	beq.n	800fb6e <tcp_pcb_remove+0xf6>
 800fb60:	4b08      	ldr	r3, [pc, #32]	@ (800fb84 <tcp_pcb_remove+0x10c>)
 800fb62:	f640 0296 	movw	r2, #2198	@ 0x896
 800fb66:	490d      	ldr	r1, [pc, #52]	@ (800fb9c <tcp_pcb_remove+0x124>)
 800fb68:	4808      	ldr	r0, [pc, #32]	@ (800fb8c <tcp_pcb_remove+0x114>)
 800fb6a:	f007 fbb3 	bl	80172d4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800fb6e:	683b      	ldr	r3, [r7, #0]
 800fb70:	2200      	movs	r2, #0
 800fb72:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800fb74:	683b      	ldr	r3, [r7, #0]
 800fb76:	2200      	movs	r2, #0
 800fb78:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800fb7a:	bf00      	nop
 800fb7c:	3710      	adds	r7, #16
 800fb7e:	46bd      	mov	sp, r7
 800fb80:	bd80      	pop	{r7, pc}
 800fb82:	bf00      	nop
 800fb84:	08019344 	.word	0x08019344
 800fb88:	080199ac 	.word	0x080199ac
 800fb8c:	08019388 	.word	0x08019388
 800fb90:	080199c8 	.word	0x080199c8
 800fb94:	080199e8 	.word	0x080199e8
 800fb98:	08019a00 	.word	0x08019a00
 800fb9c:	08019a1c 	.word	0x08019a1c

0800fba0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800fba0:	b580      	push	{r7, lr}
 800fba2:	b082      	sub	sp, #8
 800fba4:	af00      	add	r7, sp, #0
 800fba6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d106      	bne.n	800fbbc <tcp_next_iss+0x1c>
 800fbae:	4b0a      	ldr	r3, [pc, #40]	@ (800fbd8 <tcp_next_iss+0x38>)
 800fbb0:	f640 02af 	movw	r2, #2223	@ 0x8af
 800fbb4:	4909      	ldr	r1, [pc, #36]	@ (800fbdc <tcp_next_iss+0x3c>)
 800fbb6:	480a      	ldr	r0, [pc, #40]	@ (800fbe0 <tcp_next_iss+0x40>)
 800fbb8:	f007 fb8c 	bl	80172d4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800fbbc:	4b09      	ldr	r3, [pc, #36]	@ (800fbe4 <tcp_next_iss+0x44>)
 800fbbe:	681a      	ldr	r2, [r3, #0]
 800fbc0:	4b09      	ldr	r3, [pc, #36]	@ (800fbe8 <tcp_next_iss+0x48>)
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	4413      	add	r3, r2
 800fbc6:	4a07      	ldr	r2, [pc, #28]	@ (800fbe4 <tcp_next_iss+0x44>)
 800fbc8:	6013      	str	r3, [r2, #0]
  return iss;
 800fbca:	4b06      	ldr	r3, [pc, #24]	@ (800fbe4 <tcp_next_iss+0x44>)
 800fbcc:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800fbce:	4618      	mov	r0, r3
 800fbd0:	3708      	adds	r7, #8
 800fbd2:	46bd      	mov	sp, r7
 800fbd4:	bd80      	pop	{r7, pc}
 800fbd6:	bf00      	nop
 800fbd8:	08019344 	.word	0x08019344
 800fbdc:	08019a34 	.word	0x08019a34
 800fbe0:	08019388 	.word	0x08019388
 800fbe4:	200000a0 	.word	0x200000a0
 800fbe8:	2000c688 	.word	0x2000c688

0800fbec <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800fbec:	b580      	push	{r7, lr}
 800fbee:	b086      	sub	sp, #24
 800fbf0:	af00      	add	r7, sp, #0
 800fbf2:	4603      	mov	r3, r0
 800fbf4:	60b9      	str	r1, [r7, #8]
 800fbf6:	607a      	str	r2, [r7, #4]
 800fbf8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d106      	bne.n	800fc0e <tcp_eff_send_mss_netif+0x22>
 800fc00:	4b14      	ldr	r3, [pc, #80]	@ (800fc54 <tcp_eff_send_mss_netif+0x68>)
 800fc02:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800fc06:	4914      	ldr	r1, [pc, #80]	@ (800fc58 <tcp_eff_send_mss_netif+0x6c>)
 800fc08:	4814      	ldr	r0, [pc, #80]	@ (800fc5c <tcp_eff_send_mss_netif+0x70>)
 800fc0a:	f007 fb63 	bl	80172d4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800fc0e:	68bb      	ldr	r3, [r7, #8]
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d101      	bne.n	800fc18 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800fc14:	89fb      	ldrh	r3, [r7, #14]
 800fc16:	e019      	b.n	800fc4c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800fc18:	68bb      	ldr	r3, [r7, #8]
 800fc1a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800fc1c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800fc1e:	8afb      	ldrh	r3, [r7, #22]
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d012      	beq.n	800fc4a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800fc24:	2328      	movs	r3, #40	@ 0x28
 800fc26:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800fc28:	8afa      	ldrh	r2, [r7, #22]
 800fc2a:	8abb      	ldrh	r3, [r7, #20]
 800fc2c:	429a      	cmp	r2, r3
 800fc2e:	d904      	bls.n	800fc3a <tcp_eff_send_mss_netif+0x4e>
 800fc30:	8afa      	ldrh	r2, [r7, #22]
 800fc32:	8abb      	ldrh	r3, [r7, #20]
 800fc34:	1ad3      	subs	r3, r2, r3
 800fc36:	b29b      	uxth	r3, r3
 800fc38:	e000      	b.n	800fc3c <tcp_eff_send_mss_netif+0x50>
 800fc3a:	2300      	movs	r3, #0
 800fc3c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800fc3e:	8a7a      	ldrh	r2, [r7, #18]
 800fc40:	89fb      	ldrh	r3, [r7, #14]
 800fc42:	4293      	cmp	r3, r2
 800fc44:	bf28      	it	cs
 800fc46:	4613      	movcs	r3, r2
 800fc48:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800fc4a:	89fb      	ldrh	r3, [r7, #14]
}
 800fc4c:	4618      	mov	r0, r3
 800fc4e:	3718      	adds	r7, #24
 800fc50:	46bd      	mov	sp, r7
 800fc52:	bd80      	pop	{r7, pc}
 800fc54:	08019344 	.word	0x08019344
 800fc58:	08019a50 	.word	0x08019a50
 800fc5c:	08019388 	.word	0x08019388

0800fc60 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800fc60:	b580      	push	{r7, lr}
 800fc62:	b084      	sub	sp, #16
 800fc64:	af00      	add	r7, sp, #0
 800fc66:	6078      	str	r0, [r7, #4]
 800fc68:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800fc6a:	683b      	ldr	r3, [r7, #0]
 800fc6c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d119      	bne.n	800fca8 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800fc74:	4b10      	ldr	r3, [pc, #64]	@ (800fcb8 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800fc76:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800fc7a:	4910      	ldr	r1, [pc, #64]	@ (800fcbc <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800fc7c:	4810      	ldr	r0, [pc, #64]	@ (800fcc0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800fc7e:	f007 fb29 	bl	80172d4 <iprintf>

  while (pcb != NULL) {
 800fc82:	e011      	b.n	800fca8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	681a      	ldr	r2, [r3, #0]
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	429a      	cmp	r2, r3
 800fc8e:	d108      	bne.n	800fca2 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	68db      	ldr	r3, [r3, #12]
 800fc94:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800fc96:	68f8      	ldr	r0, [r7, #12]
 800fc98:	f7fe ffc4 	bl	800ec24 <tcp_abort>
      pcb = next;
 800fc9c:	68bb      	ldr	r3, [r7, #8]
 800fc9e:	60fb      	str	r3, [r7, #12]
 800fca0:	e002      	b.n	800fca8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	68db      	ldr	r3, [r3, #12]
 800fca6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d1ea      	bne.n	800fc84 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800fcae:	bf00      	nop
 800fcb0:	bf00      	nop
 800fcb2:	3710      	adds	r7, #16
 800fcb4:	46bd      	mov	sp, r7
 800fcb6:	bd80      	pop	{r7, pc}
 800fcb8:	08019344 	.word	0x08019344
 800fcbc:	08019a78 	.word	0x08019a78
 800fcc0:	08019388 	.word	0x08019388

0800fcc4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800fcc4:	b580      	push	{r7, lr}
 800fcc6:	b084      	sub	sp, #16
 800fcc8:	af00      	add	r7, sp, #0
 800fcca:	6078      	str	r0, [r7, #4]
 800fccc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d02a      	beq.n	800fd2a <tcp_netif_ip_addr_changed+0x66>
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d026      	beq.n	800fd2a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800fcdc:	4b15      	ldr	r3, [pc, #84]	@ (800fd34 <tcp_netif_ip_addr_changed+0x70>)
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	4619      	mov	r1, r3
 800fce2:	6878      	ldr	r0, [r7, #4]
 800fce4:	f7ff ffbc 	bl	800fc60 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800fce8:	4b13      	ldr	r3, [pc, #76]	@ (800fd38 <tcp_netif_ip_addr_changed+0x74>)
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	4619      	mov	r1, r3
 800fcee:	6878      	ldr	r0, [r7, #4]
 800fcf0:	f7ff ffb6 	bl	800fc60 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800fcf4:	683b      	ldr	r3, [r7, #0]
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d017      	beq.n	800fd2a <tcp_netif_ip_addr_changed+0x66>
 800fcfa:	683b      	ldr	r3, [r7, #0]
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d013      	beq.n	800fd2a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fd02:	4b0e      	ldr	r3, [pc, #56]	@ (800fd3c <tcp_netif_ip_addr_changed+0x78>)
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	60fb      	str	r3, [r7, #12]
 800fd08:	e00c      	b.n	800fd24 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	681a      	ldr	r2, [r3, #0]
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	429a      	cmp	r2, r3
 800fd14:	d103      	bne.n	800fd1e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800fd16:	683b      	ldr	r3, [r7, #0]
 800fd18:	681a      	ldr	r2, [r3, #0]
 800fd1a:	68fb      	ldr	r3, [r7, #12]
 800fd1c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fd1e:	68fb      	ldr	r3, [r7, #12]
 800fd20:	68db      	ldr	r3, [r3, #12]
 800fd22:	60fb      	str	r3, [r7, #12]
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d1ef      	bne.n	800fd0a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800fd2a:	bf00      	nop
 800fd2c:	3710      	adds	r7, #16
 800fd2e:	46bd      	mov	sp, r7
 800fd30:	bd80      	pop	{r7, pc}
 800fd32:	bf00      	nop
 800fd34:	2000c694 	.word	0x2000c694
 800fd38:	2000c68c 	.word	0x2000c68c
 800fd3c:	2000c690 	.word	0x2000c690

0800fd40 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800fd40:	b580      	push	{r7, lr}
 800fd42:	b082      	sub	sp, #8
 800fd44:	af00      	add	r7, sp, #0
 800fd46:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d007      	beq.n	800fd60 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fd54:	4618      	mov	r0, r3
 800fd56:	f7ff fc3d 	bl	800f5d4 <tcp_segs_free>
    pcb->ooseq = NULL;
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	2200      	movs	r2, #0
 800fd5e:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800fd60:	bf00      	nop
 800fd62:	3708      	adds	r7, #8
 800fd64:	46bd      	mov	sp, r7
 800fd66:	bd80      	pop	{r7, pc}

0800fd68 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800fd68:	b590      	push	{r4, r7, lr}
 800fd6a:	b08d      	sub	sp, #52	@ 0x34
 800fd6c:	af04      	add	r7, sp, #16
 800fd6e:	6078      	str	r0, [r7, #4]
 800fd70:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d105      	bne.n	800fd84 <tcp_input+0x1c>
 800fd78:	4b9b      	ldr	r3, [pc, #620]	@ (800ffe8 <tcp_input+0x280>)
 800fd7a:	2283      	movs	r2, #131	@ 0x83
 800fd7c:	499b      	ldr	r1, [pc, #620]	@ (800ffec <tcp_input+0x284>)
 800fd7e:	489c      	ldr	r0, [pc, #624]	@ (800fff0 <tcp_input+0x288>)
 800fd80:	f007 faa8 	bl	80172d4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	685b      	ldr	r3, [r3, #4]
 800fd88:	4a9a      	ldr	r2, [pc, #616]	@ (800fff4 <tcp_input+0x28c>)
 800fd8a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	895b      	ldrh	r3, [r3, #10]
 800fd90:	2b13      	cmp	r3, #19
 800fd92:	f240 83d1 	bls.w	8010538 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800fd96:	4b98      	ldr	r3, [pc, #608]	@ (800fff8 <tcp_input+0x290>)
 800fd98:	695b      	ldr	r3, [r3, #20]
 800fd9a:	4a97      	ldr	r2, [pc, #604]	@ (800fff8 <tcp_input+0x290>)
 800fd9c:	6812      	ldr	r2, [r2, #0]
 800fd9e:	4611      	mov	r1, r2
 800fda0:	4618      	mov	r0, r3
 800fda2:	f005 fc11 	bl	80155c8 <ip4_addr_isbroadcast_u32>
 800fda6:	4603      	mov	r3, r0
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	f040 83c7 	bne.w	801053c <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800fdae:	4b92      	ldr	r3, [pc, #584]	@ (800fff8 <tcp_input+0x290>)
 800fdb0:	695b      	ldr	r3, [r3, #20]
 800fdb2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800fdb6:	2be0      	cmp	r3, #224	@ 0xe0
 800fdb8:	f000 83c0 	beq.w	801053c <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800fdbc:	4b8d      	ldr	r3, [pc, #564]	@ (800fff4 <tcp_input+0x28c>)
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	899b      	ldrh	r3, [r3, #12]
 800fdc2:	b29b      	uxth	r3, r3
 800fdc4:	4618      	mov	r0, r3
 800fdc6:	f7fc fdd9 	bl	800c97c <lwip_htons>
 800fdca:	4603      	mov	r3, r0
 800fdcc:	0b1b      	lsrs	r3, r3, #12
 800fdce:	b29b      	uxth	r3, r3
 800fdd0:	b2db      	uxtb	r3, r3
 800fdd2:	009b      	lsls	r3, r3, #2
 800fdd4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800fdd6:	7cbb      	ldrb	r3, [r7, #18]
 800fdd8:	2b13      	cmp	r3, #19
 800fdda:	f240 83b1 	bls.w	8010540 <tcp_input+0x7d8>
 800fdde:	7cbb      	ldrb	r3, [r7, #18]
 800fde0:	b29a      	uxth	r2, r3
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	891b      	ldrh	r3, [r3, #8]
 800fde6:	429a      	cmp	r2, r3
 800fde8:	f200 83aa 	bhi.w	8010540 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800fdec:	7cbb      	ldrb	r3, [r7, #18]
 800fdee:	b29b      	uxth	r3, r3
 800fdf0:	3b14      	subs	r3, #20
 800fdf2:	b29a      	uxth	r2, r3
 800fdf4:	4b81      	ldr	r3, [pc, #516]	@ (800fffc <tcp_input+0x294>)
 800fdf6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800fdf8:	4b81      	ldr	r3, [pc, #516]	@ (8010000 <tcp_input+0x298>)
 800fdfa:	2200      	movs	r2, #0
 800fdfc:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	895a      	ldrh	r2, [r3, #10]
 800fe02:	7cbb      	ldrb	r3, [r7, #18]
 800fe04:	b29b      	uxth	r3, r3
 800fe06:	429a      	cmp	r2, r3
 800fe08:	d309      	bcc.n	800fe1e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800fe0a:	4b7c      	ldr	r3, [pc, #496]	@ (800fffc <tcp_input+0x294>)
 800fe0c:	881a      	ldrh	r2, [r3, #0]
 800fe0e:	4b7d      	ldr	r3, [pc, #500]	@ (8010004 <tcp_input+0x29c>)
 800fe10:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800fe12:	7cbb      	ldrb	r3, [r7, #18]
 800fe14:	4619      	mov	r1, r3
 800fe16:	6878      	ldr	r0, [r7, #4]
 800fe18:	f7fe f8ea 	bl	800dff0 <pbuf_remove_header>
 800fe1c:	e04e      	b.n	800febc <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d105      	bne.n	800fe32 <tcp_input+0xca>
 800fe26:	4b70      	ldr	r3, [pc, #448]	@ (800ffe8 <tcp_input+0x280>)
 800fe28:	22c2      	movs	r2, #194	@ 0xc2
 800fe2a:	4977      	ldr	r1, [pc, #476]	@ (8010008 <tcp_input+0x2a0>)
 800fe2c:	4870      	ldr	r0, [pc, #448]	@ (800fff0 <tcp_input+0x288>)
 800fe2e:	f007 fa51 	bl	80172d4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800fe32:	2114      	movs	r1, #20
 800fe34:	6878      	ldr	r0, [r7, #4]
 800fe36:	f7fe f8db 	bl	800dff0 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	895a      	ldrh	r2, [r3, #10]
 800fe3e:	4b71      	ldr	r3, [pc, #452]	@ (8010004 <tcp_input+0x29c>)
 800fe40:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800fe42:	4b6e      	ldr	r3, [pc, #440]	@ (800fffc <tcp_input+0x294>)
 800fe44:	881a      	ldrh	r2, [r3, #0]
 800fe46:	4b6f      	ldr	r3, [pc, #444]	@ (8010004 <tcp_input+0x29c>)
 800fe48:	881b      	ldrh	r3, [r3, #0]
 800fe4a:	1ad3      	subs	r3, r2, r3
 800fe4c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800fe4e:	4b6d      	ldr	r3, [pc, #436]	@ (8010004 <tcp_input+0x29c>)
 800fe50:	881b      	ldrh	r3, [r3, #0]
 800fe52:	4619      	mov	r1, r3
 800fe54:	6878      	ldr	r0, [r7, #4]
 800fe56:	f7fe f8cb 	bl	800dff0 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	895b      	ldrh	r3, [r3, #10]
 800fe60:	8a3a      	ldrh	r2, [r7, #16]
 800fe62:	429a      	cmp	r2, r3
 800fe64:	f200 836e 	bhi.w	8010544 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	681b      	ldr	r3, [r3, #0]
 800fe6c:	685b      	ldr	r3, [r3, #4]
 800fe6e:	4a64      	ldr	r2, [pc, #400]	@ (8010000 <tcp_input+0x298>)
 800fe70:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	8a3a      	ldrh	r2, [r7, #16]
 800fe78:	4611      	mov	r1, r2
 800fe7a:	4618      	mov	r0, r3
 800fe7c:	f7fe f8b8 	bl	800dff0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	891a      	ldrh	r2, [r3, #8]
 800fe84:	8a3b      	ldrh	r3, [r7, #16]
 800fe86:	1ad3      	subs	r3, r2, r3
 800fe88:	b29a      	uxth	r2, r3
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	895b      	ldrh	r3, [r3, #10]
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d005      	beq.n	800fea2 <tcp_input+0x13a>
 800fe96:	4b54      	ldr	r3, [pc, #336]	@ (800ffe8 <tcp_input+0x280>)
 800fe98:	22df      	movs	r2, #223	@ 0xdf
 800fe9a:	495c      	ldr	r1, [pc, #368]	@ (801000c <tcp_input+0x2a4>)
 800fe9c:	4854      	ldr	r0, [pc, #336]	@ (800fff0 <tcp_input+0x288>)
 800fe9e:	f007 fa19 	bl	80172d4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	891a      	ldrh	r2, [r3, #8]
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	891b      	ldrh	r3, [r3, #8]
 800feac:	429a      	cmp	r2, r3
 800feae:	d005      	beq.n	800febc <tcp_input+0x154>
 800feb0:	4b4d      	ldr	r3, [pc, #308]	@ (800ffe8 <tcp_input+0x280>)
 800feb2:	22e0      	movs	r2, #224	@ 0xe0
 800feb4:	4956      	ldr	r1, [pc, #344]	@ (8010010 <tcp_input+0x2a8>)
 800feb6:	484e      	ldr	r0, [pc, #312]	@ (800fff0 <tcp_input+0x288>)
 800feb8:	f007 fa0c 	bl	80172d4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800febc:	4b4d      	ldr	r3, [pc, #308]	@ (800fff4 <tcp_input+0x28c>)
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	881b      	ldrh	r3, [r3, #0]
 800fec2:	b29b      	uxth	r3, r3
 800fec4:	4a4b      	ldr	r2, [pc, #300]	@ (800fff4 <tcp_input+0x28c>)
 800fec6:	6814      	ldr	r4, [r2, #0]
 800fec8:	4618      	mov	r0, r3
 800feca:	f7fc fd57 	bl	800c97c <lwip_htons>
 800fece:	4603      	mov	r3, r0
 800fed0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800fed2:	4b48      	ldr	r3, [pc, #288]	@ (800fff4 <tcp_input+0x28c>)
 800fed4:	681b      	ldr	r3, [r3, #0]
 800fed6:	885b      	ldrh	r3, [r3, #2]
 800fed8:	b29b      	uxth	r3, r3
 800feda:	4a46      	ldr	r2, [pc, #280]	@ (800fff4 <tcp_input+0x28c>)
 800fedc:	6814      	ldr	r4, [r2, #0]
 800fede:	4618      	mov	r0, r3
 800fee0:	f7fc fd4c 	bl	800c97c <lwip_htons>
 800fee4:	4603      	mov	r3, r0
 800fee6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800fee8:	4b42      	ldr	r3, [pc, #264]	@ (800fff4 <tcp_input+0x28c>)
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	685b      	ldr	r3, [r3, #4]
 800feee:	4a41      	ldr	r2, [pc, #260]	@ (800fff4 <tcp_input+0x28c>)
 800fef0:	6814      	ldr	r4, [r2, #0]
 800fef2:	4618      	mov	r0, r3
 800fef4:	f7fc fd58 	bl	800c9a8 <lwip_htonl>
 800fef8:	4603      	mov	r3, r0
 800fefa:	6063      	str	r3, [r4, #4]
 800fefc:	6863      	ldr	r3, [r4, #4]
 800fefe:	4a45      	ldr	r2, [pc, #276]	@ (8010014 <tcp_input+0x2ac>)
 800ff00:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800ff02:	4b3c      	ldr	r3, [pc, #240]	@ (800fff4 <tcp_input+0x28c>)
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	689b      	ldr	r3, [r3, #8]
 800ff08:	4a3a      	ldr	r2, [pc, #232]	@ (800fff4 <tcp_input+0x28c>)
 800ff0a:	6814      	ldr	r4, [r2, #0]
 800ff0c:	4618      	mov	r0, r3
 800ff0e:	f7fc fd4b 	bl	800c9a8 <lwip_htonl>
 800ff12:	4603      	mov	r3, r0
 800ff14:	60a3      	str	r3, [r4, #8]
 800ff16:	68a3      	ldr	r3, [r4, #8]
 800ff18:	4a3f      	ldr	r2, [pc, #252]	@ (8010018 <tcp_input+0x2b0>)
 800ff1a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800ff1c:	4b35      	ldr	r3, [pc, #212]	@ (800fff4 <tcp_input+0x28c>)
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	89db      	ldrh	r3, [r3, #14]
 800ff22:	b29b      	uxth	r3, r3
 800ff24:	4a33      	ldr	r2, [pc, #204]	@ (800fff4 <tcp_input+0x28c>)
 800ff26:	6814      	ldr	r4, [r2, #0]
 800ff28:	4618      	mov	r0, r3
 800ff2a:	f7fc fd27 	bl	800c97c <lwip_htons>
 800ff2e:	4603      	mov	r3, r0
 800ff30:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800ff32:	4b30      	ldr	r3, [pc, #192]	@ (800fff4 <tcp_input+0x28c>)
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	899b      	ldrh	r3, [r3, #12]
 800ff38:	b29b      	uxth	r3, r3
 800ff3a:	4618      	mov	r0, r3
 800ff3c:	f7fc fd1e 	bl	800c97c <lwip_htons>
 800ff40:	4603      	mov	r3, r0
 800ff42:	b2db      	uxtb	r3, r3
 800ff44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ff48:	b2da      	uxtb	r2, r3
 800ff4a:	4b34      	ldr	r3, [pc, #208]	@ (801001c <tcp_input+0x2b4>)
 800ff4c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	891a      	ldrh	r2, [r3, #8]
 800ff52:	4b33      	ldr	r3, [pc, #204]	@ (8010020 <tcp_input+0x2b8>)
 800ff54:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800ff56:	4b31      	ldr	r3, [pc, #196]	@ (801001c <tcp_input+0x2b4>)
 800ff58:	781b      	ldrb	r3, [r3, #0]
 800ff5a:	f003 0303 	and.w	r3, r3, #3
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d00c      	beq.n	800ff7c <tcp_input+0x214>
    tcplen++;
 800ff62:	4b2f      	ldr	r3, [pc, #188]	@ (8010020 <tcp_input+0x2b8>)
 800ff64:	881b      	ldrh	r3, [r3, #0]
 800ff66:	3301      	adds	r3, #1
 800ff68:	b29a      	uxth	r2, r3
 800ff6a:	4b2d      	ldr	r3, [pc, #180]	@ (8010020 <tcp_input+0x2b8>)
 800ff6c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	891a      	ldrh	r2, [r3, #8]
 800ff72:	4b2b      	ldr	r3, [pc, #172]	@ (8010020 <tcp_input+0x2b8>)
 800ff74:	881b      	ldrh	r3, [r3, #0]
 800ff76:	429a      	cmp	r2, r3
 800ff78:	f200 82e6 	bhi.w	8010548 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800ff7c:	2300      	movs	r3, #0
 800ff7e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ff80:	4b28      	ldr	r3, [pc, #160]	@ (8010024 <tcp_input+0x2bc>)
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	61fb      	str	r3, [r7, #28]
 800ff86:	e09d      	b.n	80100c4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800ff88:	69fb      	ldr	r3, [r7, #28]
 800ff8a:	7d1b      	ldrb	r3, [r3, #20]
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d105      	bne.n	800ff9c <tcp_input+0x234>
 800ff90:	4b15      	ldr	r3, [pc, #84]	@ (800ffe8 <tcp_input+0x280>)
 800ff92:	22fb      	movs	r2, #251	@ 0xfb
 800ff94:	4924      	ldr	r1, [pc, #144]	@ (8010028 <tcp_input+0x2c0>)
 800ff96:	4816      	ldr	r0, [pc, #88]	@ (800fff0 <tcp_input+0x288>)
 800ff98:	f007 f99c 	bl	80172d4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800ff9c:	69fb      	ldr	r3, [r7, #28]
 800ff9e:	7d1b      	ldrb	r3, [r3, #20]
 800ffa0:	2b0a      	cmp	r3, #10
 800ffa2:	d105      	bne.n	800ffb0 <tcp_input+0x248>
 800ffa4:	4b10      	ldr	r3, [pc, #64]	@ (800ffe8 <tcp_input+0x280>)
 800ffa6:	22fc      	movs	r2, #252	@ 0xfc
 800ffa8:	4920      	ldr	r1, [pc, #128]	@ (801002c <tcp_input+0x2c4>)
 800ffaa:	4811      	ldr	r0, [pc, #68]	@ (800fff0 <tcp_input+0x288>)
 800ffac:	f007 f992 	bl	80172d4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800ffb0:	69fb      	ldr	r3, [r7, #28]
 800ffb2:	7d1b      	ldrb	r3, [r3, #20]
 800ffb4:	2b01      	cmp	r3, #1
 800ffb6:	d105      	bne.n	800ffc4 <tcp_input+0x25c>
 800ffb8:	4b0b      	ldr	r3, [pc, #44]	@ (800ffe8 <tcp_input+0x280>)
 800ffba:	22fd      	movs	r2, #253	@ 0xfd
 800ffbc:	491c      	ldr	r1, [pc, #112]	@ (8010030 <tcp_input+0x2c8>)
 800ffbe:	480c      	ldr	r0, [pc, #48]	@ (800fff0 <tcp_input+0x288>)
 800ffc0:	f007 f988 	bl	80172d4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ffc4:	69fb      	ldr	r3, [r7, #28]
 800ffc6:	7a1b      	ldrb	r3, [r3, #8]
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d033      	beq.n	8010034 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ffcc:	69fb      	ldr	r3, [r7, #28]
 800ffce:	7a1a      	ldrb	r2, [r3, #8]
 800ffd0:	4b09      	ldr	r3, [pc, #36]	@ (800fff8 <tcp_input+0x290>)
 800ffd2:	685b      	ldr	r3, [r3, #4]
 800ffd4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ffd8:	3301      	adds	r3, #1
 800ffda:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ffdc:	429a      	cmp	r2, r3
 800ffde:	d029      	beq.n	8010034 <tcp_input+0x2cc>
      prev = pcb;
 800ffe0:	69fb      	ldr	r3, [r7, #28]
 800ffe2:	61bb      	str	r3, [r7, #24]
      continue;
 800ffe4:	e06b      	b.n	80100be <tcp_input+0x356>
 800ffe6:	bf00      	nop
 800ffe8:	08019aac 	.word	0x08019aac
 800ffec:	08019ae0 	.word	0x08019ae0
 800fff0:	08019af8 	.word	0x08019af8
 800fff4:	2000c6b0 	.word	0x2000c6b0
 800fff8:	20008f34 	.word	0x20008f34
 800fffc:	2000c6b4 	.word	0x2000c6b4
 8010000:	2000c6b8 	.word	0x2000c6b8
 8010004:	2000c6b6 	.word	0x2000c6b6
 8010008:	08019b20 	.word	0x08019b20
 801000c:	08019b30 	.word	0x08019b30
 8010010:	08019b3c 	.word	0x08019b3c
 8010014:	2000c6c0 	.word	0x2000c6c0
 8010018:	2000c6c4 	.word	0x2000c6c4
 801001c:	2000c6cc 	.word	0x2000c6cc
 8010020:	2000c6ca 	.word	0x2000c6ca
 8010024:	2000c694 	.word	0x2000c694
 8010028:	08019b5c 	.word	0x08019b5c
 801002c:	08019b84 	.word	0x08019b84
 8010030:	08019bb0 	.word	0x08019bb0
    }

    if (pcb->remote_port == tcphdr->src &&
 8010034:	69fb      	ldr	r3, [r7, #28]
 8010036:	8b1a      	ldrh	r2, [r3, #24]
 8010038:	4b72      	ldr	r3, [pc, #456]	@ (8010204 <tcp_input+0x49c>)
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	881b      	ldrh	r3, [r3, #0]
 801003e:	b29b      	uxth	r3, r3
 8010040:	429a      	cmp	r2, r3
 8010042:	d13a      	bne.n	80100ba <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8010044:	69fb      	ldr	r3, [r7, #28]
 8010046:	8ada      	ldrh	r2, [r3, #22]
 8010048:	4b6e      	ldr	r3, [pc, #440]	@ (8010204 <tcp_input+0x49c>)
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	885b      	ldrh	r3, [r3, #2]
 801004e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8010050:	429a      	cmp	r2, r3
 8010052:	d132      	bne.n	80100ba <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010054:	69fb      	ldr	r3, [r7, #28]
 8010056:	685a      	ldr	r2, [r3, #4]
 8010058:	4b6b      	ldr	r3, [pc, #428]	@ (8010208 <tcp_input+0x4a0>)
 801005a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 801005c:	429a      	cmp	r2, r3
 801005e:	d12c      	bne.n	80100ba <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010060:	69fb      	ldr	r3, [r7, #28]
 8010062:	681a      	ldr	r2, [r3, #0]
 8010064:	4b68      	ldr	r3, [pc, #416]	@ (8010208 <tcp_input+0x4a0>)
 8010066:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010068:	429a      	cmp	r2, r3
 801006a:	d126      	bne.n	80100ba <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801006c:	69fb      	ldr	r3, [r7, #28]
 801006e:	68db      	ldr	r3, [r3, #12]
 8010070:	69fa      	ldr	r2, [r7, #28]
 8010072:	429a      	cmp	r2, r3
 8010074:	d106      	bne.n	8010084 <tcp_input+0x31c>
 8010076:	4b65      	ldr	r3, [pc, #404]	@ (801020c <tcp_input+0x4a4>)
 8010078:	f240 120d 	movw	r2, #269	@ 0x10d
 801007c:	4964      	ldr	r1, [pc, #400]	@ (8010210 <tcp_input+0x4a8>)
 801007e:	4865      	ldr	r0, [pc, #404]	@ (8010214 <tcp_input+0x4ac>)
 8010080:	f007 f928 	bl	80172d4 <iprintf>
      if (prev != NULL) {
 8010084:	69bb      	ldr	r3, [r7, #24]
 8010086:	2b00      	cmp	r3, #0
 8010088:	d00a      	beq.n	80100a0 <tcp_input+0x338>
        prev->next = pcb->next;
 801008a:	69fb      	ldr	r3, [r7, #28]
 801008c:	68da      	ldr	r2, [r3, #12]
 801008e:	69bb      	ldr	r3, [r7, #24]
 8010090:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8010092:	4b61      	ldr	r3, [pc, #388]	@ (8010218 <tcp_input+0x4b0>)
 8010094:	681a      	ldr	r2, [r3, #0]
 8010096:	69fb      	ldr	r3, [r7, #28]
 8010098:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801009a:	4a5f      	ldr	r2, [pc, #380]	@ (8010218 <tcp_input+0x4b0>)
 801009c:	69fb      	ldr	r3, [r7, #28]
 801009e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80100a0:	69fb      	ldr	r3, [r7, #28]
 80100a2:	68db      	ldr	r3, [r3, #12]
 80100a4:	69fa      	ldr	r2, [r7, #28]
 80100a6:	429a      	cmp	r2, r3
 80100a8:	d111      	bne.n	80100ce <tcp_input+0x366>
 80100aa:	4b58      	ldr	r3, [pc, #352]	@ (801020c <tcp_input+0x4a4>)
 80100ac:	f240 1215 	movw	r2, #277	@ 0x115
 80100b0:	495a      	ldr	r1, [pc, #360]	@ (801021c <tcp_input+0x4b4>)
 80100b2:	4858      	ldr	r0, [pc, #352]	@ (8010214 <tcp_input+0x4ac>)
 80100b4:	f007 f90e 	bl	80172d4 <iprintf>
      break;
 80100b8:	e009      	b.n	80100ce <tcp_input+0x366>
    }
    prev = pcb;
 80100ba:	69fb      	ldr	r3, [r7, #28]
 80100bc:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80100be:	69fb      	ldr	r3, [r7, #28]
 80100c0:	68db      	ldr	r3, [r3, #12]
 80100c2:	61fb      	str	r3, [r7, #28]
 80100c4:	69fb      	ldr	r3, [r7, #28]
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	f47f af5e 	bne.w	800ff88 <tcp_input+0x220>
 80100cc:	e000      	b.n	80100d0 <tcp_input+0x368>
      break;
 80100ce:	bf00      	nop
  }

  if (pcb == NULL) {
 80100d0:	69fb      	ldr	r3, [r7, #28]
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	f040 80aa 	bne.w	801022c <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80100d8:	4b51      	ldr	r3, [pc, #324]	@ (8010220 <tcp_input+0x4b8>)
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	61fb      	str	r3, [r7, #28]
 80100de:	e03f      	b.n	8010160 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80100e0:	69fb      	ldr	r3, [r7, #28]
 80100e2:	7d1b      	ldrb	r3, [r3, #20]
 80100e4:	2b0a      	cmp	r3, #10
 80100e6:	d006      	beq.n	80100f6 <tcp_input+0x38e>
 80100e8:	4b48      	ldr	r3, [pc, #288]	@ (801020c <tcp_input+0x4a4>)
 80100ea:	f240 121f 	movw	r2, #287	@ 0x11f
 80100ee:	494d      	ldr	r1, [pc, #308]	@ (8010224 <tcp_input+0x4bc>)
 80100f0:	4848      	ldr	r0, [pc, #288]	@ (8010214 <tcp_input+0x4ac>)
 80100f2:	f007 f8ef 	bl	80172d4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80100f6:	69fb      	ldr	r3, [r7, #28]
 80100f8:	7a1b      	ldrb	r3, [r3, #8]
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d009      	beq.n	8010112 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80100fe:	69fb      	ldr	r3, [r7, #28]
 8010100:	7a1a      	ldrb	r2, [r3, #8]
 8010102:	4b41      	ldr	r3, [pc, #260]	@ (8010208 <tcp_input+0x4a0>)
 8010104:	685b      	ldr	r3, [r3, #4]
 8010106:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801010a:	3301      	adds	r3, #1
 801010c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801010e:	429a      	cmp	r2, r3
 8010110:	d122      	bne.n	8010158 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8010112:	69fb      	ldr	r3, [r7, #28]
 8010114:	8b1a      	ldrh	r2, [r3, #24]
 8010116:	4b3b      	ldr	r3, [pc, #236]	@ (8010204 <tcp_input+0x49c>)
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	881b      	ldrh	r3, [r3, #0]
 801011c:	b29b      	uxth	r3, r3
 801011e:	429a      	cmp	r2, r3
 8010120:	d11b      	bne.n	801015a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8010122:	69fb      	ldr	r3, [r7, #28]
 8010124:	8ada      	ldrh	r2, [r3, #22]
 8010126:	4b37      	ldr	r3, [pc, #220]	@ (8010204 <tcp_input+0x49c>)
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	885b      	ldrh	r3, [r3, #2]
 801012c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801012e:	429a      	cmp	r2, r3
 8010130:	d113      	bne.n	801015a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010132:	69fb      	ldr	r3, [r7, #28]
 8010134:	685a      	ldr	r2, [r3, #4]
 8010136:	4b34      	ldr	r3, [pc, #208]	@ (8010208 <tcp_input+0x4a0>)
 8010138:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801013a:	429a      	cmp	r2, r3
 801013c:	d10d      	bne.n	801015a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801013e:	69fb      	ldr	r3, [r7, #28]
 8010140:	681a      	ldr	r2, [r3, #0]
 8010142:	4b31      	ldr	r3, [pc, #196]	@ (8010208 <tcp_input+0x4a0>)
 8010144:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010146:	429a      	cmp	r2, r3
 8010148:	d107      	bne.n	801015a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801014a:	69f8      	ldr	r0, [r7, #28]
 801014c:	f000 fb56 	bl	80107fc <tcp_timewait_input>
        }
        pbuf_free(p);
 8010150:	6878      	ldr	r0, [r7, #4]
 8010152:	f7fd ffd3 	bl	800e0fc <pbuf_free>
        return;
 8010156:	e1fd      	b.n	8010554 <tcp_input+0x7ec>
        continue;
 8010158:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801015a:	69fb      	ldr	r3, [r7, #28]
 801015c:	68db      	ldr	r3, [r3, #12]
 801015e:	61fb      	str	r3, [r7, #28]
 8010160:	69fb      	ldr	r3, [r7, #28]
 8010162:	2b00      	cmp	r3, #0
 8010164:	d1bc      	bne.n	80100e0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8010166:	2300      	movs	r3, #0
 8010168:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801016a:	4b2f      	ldr	r3, [pc, #188]	@ (8010228 <tcp_input+0x4c0>)
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	617b      	str	r3, [r7, #20]
 8010170:	e02a      	b.n	80101c8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010172:	697b      	ldr	r3, [r7, #20]
 8010174:	7a1b      	ldrb	r3, [r3, #8]
 8010176:	2b00      	cmp	r3, #0
 8010178:	d00c      	beq.n	8010194 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801017a:	697b      	ldr	r3, [r7, #20]
 801017c:	7a1a      	ldrb	r2, [r3, #8]
 801017e:	4b22      	ldr	r3, [pc, #136]	@ (8010208 <tcp_input+0x4a0>)
 8010180:	685b      	ldr	r3, [r3, #4]
 8010182:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010186:	3301      	adds	r3, #1
 8010188:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801018a:	429a      	cmp	r2, r3
 801018c:	d002      	beq.n	8010194 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801018e:	697b      	ldr	r3, [r7, #20]
 8010190:	61bb      	str	r3, [r7, #24]
        continue;
 8010192:	e016      	b.n	80101c2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8010194:	697b      	ldr	r3, [r7, #20]
 8010196:	8ada      	ldrh	r2, [r3, #22]
 8010198:	4b1a      	ldr	r3, [pc, #104]	@ (8010204 <tcp_input+0x49c>)
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	885b      	ldrh	r3, [r3, #2]
 801019e:	b29b      	uxth	r3, r3
 80101a0:	429a      	cmp	r2, r3
 80101a2:	d10c      	bne.n	80101be <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80101a4:	697b      	ldr	r3, [r7, #20]
 80101a6:	681a      	ldr	r2, [r3, #0]
 80101a8:	4b17      	ldr	r3, [pc, #92]	@ (8010208 <tcp_input+0x4a0>)
 80101aa:	695b      	ldr	r3, [r3, #20]
 80101ac:	429a      	cmp	r2, r3
 80101ae:	d00f      	beq.n	80101d0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80101b0:	697b      	ldr	r3, [r7, #20]
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d00d      	beq.n	80101d2 <tcp_input+0x46a>
 80101b6:	697b      	ldr	r3, [r7, #20]
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d009      	beq.n	80101d2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80101be:	697b      	ldr	r3, [r7, #20]
 80101c0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80101c2:	697b      	ldr	r3, [r7, #20]
 80101c4:	68db      	ldr	r3, [r3, #12]
 80101c6:	617b      	str	r3, [r7, #20]
 80101c8:	697b      	ldr	r3, [r7, #20]
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d1d1      	bne.n	8010172 <tcp_input+0x40a>
 80101ce:	e000      	b.n	80101d2 <tcp_input+0x46a>
            break;
 80101d0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80101d2:	697b      	ldr	r3, [r7, #20]
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d029      	beq.n	801022c <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80101d8:	69bb      	ldr	r3, [r7, #24]
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d00a      	beq.n	80101f4 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80101de:	697b      	ldr	r3, [r7, #20]
 80101e0:	68da      	ldr	r2, [r3, #12]
 80101e2:	69bb      	ldr	r3, [r7, #24]
 80101e4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80101e6:	4b10      	ldr	r3, [pc, #64]	@ (8010228 <tcp_input+0x4c0>)
 80101e8:	681a      	ldr	r2, [r3, #0]
 80101ea:	697b      	ldr	r3, [r7, #20]
 80101ec:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80101ee:	4a0e      	ldr	r2, [pc, #56]	@ (8010228 <tcp_input+0x4c0>)
 80101f0:	697b      	ldr	r3, [r7, #20]
 80101f2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80101f4:	6978      	ldr	r0, [r7, #20]
 80101f6:	f000 fa03 	bl	8010600 <tcp_listen_input>
      }
      pbuf_free(p);
 80101fa:	6878      	ldr	r0, [r7, #4]
 80101fc:	f7fd ff7e 	bl	800e0fc <pbuf_free>
      return;
 8010200:	e1a8      	b.n	8010554 <tcp_input+0x7ec>
 8010202:	bf00      	nop
 8010204:	2000c6b0 	.word	0x2000c6b0
 8010208:	20008f34 	.word	0x20008f34
 801020c:	08019aac 	.word	0x08019aac
 8010210:	08019bd8 	.word	0x08019bd8
 8010214:	08019af8 	.word	0x08019af8
 8010218:	2000c694 	.word	0x2000c694
 801021c:	08019c04 	.word	0x08019c04
 8010220:	2000c698 	.word	0x2000c698
 8010224:	08019c30 	.word	0x08019c30
 8010228:	2000c690 	.word	0x2000c690
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 801022c:	69fb      	ldr	r3, [r7, #28]
 801022e:	2b00      	cmp	r3, #0
 8010230:	f000 8158 	beq.w	80104e4 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8010234:	4b95      	ldr	r3, [pc, #596]	@ (801048c <tcp_input+0x724>)
 8010236:	2200      	movs	r2, #0
 8010238:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	891a      	ldrh	r2, [r3, #8]
 801023e:	4b93      	ldr	r3, [pc, #588]	@ (801048c <tcp_input+0x724>)
 8010240:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8010242:	4a92      	ldr	r2, [pc, #584]	@ (801048c <tcp_input+0x724>)
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8010248:	4b91      	ldr	r3, [pc, #580]	@ (8010490 <tcp_input+0x728>)
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	4a8f      	ldr	r2, [pc, #572]	@ (801048c <tcp_input+0x724>)
 801024e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8010250:	4b90      	ldr	r3, [pc, #576]	@ (8010494 <tcp_input+0x72c>)
 8010252:	2200      	movs	r2, #0
 8010254:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8010256:	4b90      	ldr	r3, [pc, #576]	@ (8010498 <tcp_input+0x730>)
 8010258:	2200      	movs	r2, #0
 801025a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801025c:	4b8f      	ldr	r3, [pc, #572]	@ (801049c <tcp_input+0x734>)
 801025e:	2200      	movs	r2, #0
 8010260:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8010262:	4b8f      	ldr	r3, [pc, #572]	@ (80104a0 <tcp_input+0x738>)
 8010264:	781b      	ldrb	r3, [r3, #0]
 8010266:	f003 0308 	and.w	r3, r3, #8
 801026a:	2b00      	cmp	r3, #0
 801026c:	d006      	beq.n	801027c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	7b5b      	ldrb	r3, [r3, #13]
 8010272:	f043 0301 	orr.w	r3, r3, #1
 8010276:	b2da      	uxtb	r2, r3
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801027c:	69fb      	ldr	r3, [r7, #28]
 801027e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010280:	2b00      	cmp	r3, #0
 8010282:	d017      	beq.n	80102b4 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010284:	69f8      	ldr	r0, [r7, #28]
 8010286:	f7ff f929 	bl	800f4dc <tcp_process_refused_data>
 801028a:	4603      	mov	r3, r0
 801028c:	f113 0f0d 	cmn.w	r3, #13
 8010290:	d007      	beq.n	80102a2 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8010292:	69fb      	ldr	r3, [r7, #28]
 8010294:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010296:	2b00      	cmp	r3, #0
 8010298:	d00c      	beq.n	80102b4 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801029a:	4b82      	ldr	r3, [pc, #520]	@ (80104a4 <tcp_input+0x73c>)
 801029c:	881b      	ldrh	r3, [r3, #0]
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d008      	beq.n	80102b4 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80102a2:	69fb      	ldr	r3, [r7, #28]
 80102a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	f040 80e3 	bne.w	8010472 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80102ac:	69f8      	ldr	r0, [r7, #28]
 80102ae:	f003 f9a7 	bl	8013600 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80102b2:	e0de      	b.n	8010472 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 80102b4:	4a7c      	ldr	r2, [pc, #496]	@ (80104a8 <tcp_input+0x740>)
 80102b6:	69fb      	ldr	r3, [r7, #28]
 80102b8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80102ba:	69f8      	ldr	r0, [r7, #28]
 80102bc:	f000 fb18 	bl	80108f0 <tcp_process>
 80102c0:	4603      	mov	r3, r0
 80102c2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80102c4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80102c8:	f113 0f0d 	cmn.w	r3, #13
 80102cc:	f000 80d3 	beq.w	8010476 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 80102d0:	4b71      	ldr	r3, [pc, #452]	@ (8010498 <tcp_input+0x730>)
 80102d2:	781b      	ldrb	r3, [r3, #0]
 80102d4:	f003 0308 	and.w	r3, r3, #8
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d015      	beq.n	8010308 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80102dc:	69fb      	ldr	r3, [r7, #28]
 80102de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d008      	beq.n	80102f8 <tcp_input+0x590>
 80102e6:	69fb      	ldr	r3, [r7, #28]
 80102e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80102ec:	69fa      	ldr	r2, [r7, #28]
 80102ee:	6912      	ldr	r2, [r2, #16]
 80102f0:	f06f 010d 	mvn.w	r1, #13
 80102f4:	4610      	mov	r0, r2
 80102f6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80102f8:	69f9      	ldr	r1, [r7, #28]
 80102fa:	486c      	ldr	r0, [pc, #432]	@ (80104ac <tcp_input+0x744>)
 80102fc:	f7ff fbbc 	bl	800fa78 <tcp_pcb_remove>
        tcp_free(pcb);
 8010300:	69f8      	ldr	r0, [r7, #28]
 8010302:	f7fe f9a7 	bl	800e654 <tcp_free>
 8010306:	e0da      	b.n	80104be <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8010308:	2300      	movs	r3, #0
 801030a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 801030c:	4b63      	ldr	r3, [pc, #396]	@ (801049c <tcp_input+0x734>)
 801030e:	881b      	ldrh	r3, [r3, #0]
 8010310:	2b00      	cmp	r3, #0
 8010312:	d01d      	beq.n	8010350 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8010314:	4b61      	ldr	r3, [pc, #388]	@ (801049c <tcp_input+0x734>)
 8010316:	881b      	ldrh	r3, [r3, #0]
 8010318:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801031a:	69fb      	ldr	r3, [r7, #28]
 801031c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010320:	2b00      	cmp	r3, #0
 8010322:	d00a      	beq.n	801033a <tcp_input+0x5d2>
 8010324:	69fb      	ldr	r3, [r7, #28]
 8010326:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801032a:	69fa      	ldr	r2, [r7, #28]
 801032c:	6910      	ldr	r0, [r2, #16]
 801032e:	89fa      	ldrh	r2, [r7, #14]
 8010330:	69f9      	ldr	r1, [r7, #28]
 8010332:	4798      	blx	r3
 8010334:	4603      	mov	r3, r0
 8010336:	74fb      	strb	r3, [r7, #19]
 8010338:	e001      	b.n	801033e <tcp_input+0x5d6>
 801033a:	2300      	movs	r3, #0
 801033c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801033e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010342:	f113 0f0d 	cmn.w	r3, #13
 8010346:	f000 8098 	beq.w	801047a <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 801034a:	4b54      	ldr	r3, [pc, #336]	@ (801049c <tcp_input+0x734>)
 801034c:	2200      	movs	r2, #0
 801034e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8010350:	69f8      	ldr	r0, [r7, #28]
 8010352:	f000 f915 	bl	8010580 <tcp_input_delayed_close>
 8010356:	4603      	mov	r3, r0
 8010358:	2b00      	cmp	r3, #0
 801035a:	f040 8090 	bne.w	801047e <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801035e:	4b4d      	ldr	r3, [pc, #308]	@ (8010494 <tcp_input+0x72c>)
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	2b00      	cmp	r3, #0
 8010364:	d041      	beq.n	80103ea <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8010366:	69fb      	ldr	r3, [r7, #28]
 8010368:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801036a:	2b00      	cmp	r3, #0
 801036c:	d006      	beq.n	801037c <tcp_input+0x614>
 801036e:	4b50      	ldr	r3, [pc, #320]	@ (80104b0 <tcp_input+0x748>)
 8010370:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8010374:	494f      	ldr	r1, [pc, #316]	@ (80104b4 <tcp_input+0x74c>)
 8010376:	4850      	ldr	r0, [pc, #320]	@ (80104b8 <tcp_input+0x750>)
 8010378:	f006 ffac 	bl	80172d4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801037c:	69fb      	ldr	r3, [r7, #28]
 801037e:	8b5b      	ldrh	r3, [r3, #26]
 8010380:	f003 0310 	and.w	r3, r3, #16
 8010384:	2b00      	cmp	r3, #0
 8010386:	d008      	beq.n	801039a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8010388:	4b42      	ldr	r3, [pc, #264]	@ (8010494 <tcp_input+0x72c>)
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	4618      	mov	r0, r3
 801038e:	f7fd feb5 	bl	800e0fc <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8010392:	69f8      	ldr	r0, [r7, #28]
 8010394:	f7fe fc46 	bl	800ec24 <tcp_abort>
            goto aborted;
 8010398:	e091      	b.n	80104be <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801039a:	69fb      	ldr	r3, [r7, #28]
 801039c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d00c      	beq.n	80103be <tcp_input+0x656>
 80103a4:	69fb      	ldr	r3, [r7, #28]
 80103a6:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80103aa:	69fb      	ldr	r3, [r7, #28]
 80103ac:	6918      	ldr	r0, [r3, #16]
 80103ae:	4b39      	ldr	r3, [pc, #228]	@ (8010494 <tcp_input+0x72c>)
 80103b0:	681a      	ldr	r2, [r3, #0]
 80103b2:	2300      	movs	r3, #0
 80103b4:	69f9      	ldr	r1, [r7, #28]
 80103b6:	47a0      	blx	r4
 80103b8:	4603      	mov	r3, r0
 80103ba:	74fb      	strb	r3, [r7, #19]
 80103bc:	e008      	b.n	80103d0 <tcp_input+0x668>
 80103be:	4b35      	ldr	r3, [pc, #212]	@ (8010494 <tcp_input+0x72c>)
 80103c0:	681a      	ldr	r2, [r3, #0]
 80103c2:	2300      	movs	r3, #0
 80103c4:	69f9      	ldr	r1, [r7, #28]
 80103c6:	2000      	movs	r0, #0
 80103c8:	f7ff f95e 	bl	800f688 <tcp_recv_null>
 80103cc:	4603      	mov	r3, r0
 80103ce:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80103d0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80103d4:	f113 0f0d 	cmn.w	r3, #13
 80103d8:	d053      	beq.n	8010482 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80103da:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d003      	beq.n	80103ea <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80103e2:	4b2c      	ldr	r3, [pc, #176]	@ (8010494 <tcp_input+0x72c>)
 80103e4:	681a      	ldr	r2, [r3, #0]
 80103e6:	69fb      	ldr	r3, [r7, #28]
 80103e8:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80103ea:	4b2b      	ldr	r3, [pc, #172]	@ (8010498 <tcp_input+0x730>)
 80103ec:	781b      	ldrb	r3, [r3, #0]
 80103ee:	f003 0320 	and.w	r3, r3, #32
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d030      	beq.n	8010458 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 80103f6:	69fb      	ldr	r3, [r7, #28]
 80103f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d009      	beq.n	8010412 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80103fe:	69fb      	ldr	r3, [r7, #28]
 8010400:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010402:	7b5a      	ldrb	r2, [r3, #13]
 8010404:	69fb      	ldr	r3, [r7, #28]
 8010406:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010408:	f042 0220 	orr.w	r2, r2, #32
 801040c:	b2d2      	uxtb	r2, r2
 801040e:	735a      	strb	r2, [r3, #13]
 8010410:	e022      	b.n	8010458 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8010412:	69fb      	ldr	r3, [r7, #28]
 8010414:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010416:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801041a:	d005      	beq.n	8010428 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 801041c:	69fb      	ldr	r3, [r7, #28]
 801041e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010420:	3301      	adds	r3, #1
 8010422:	b29a      	uxth	r2, r3
 8010424:	69fb      	ldr	r3, [r7, #28]
 8010426:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8010428:	69fb      	ldr	r3, [r7, #28]
 801042a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801042e:	2b00      	cmp	r3, #0
 8010430:	d00b      	beq.n	801044a <tcp_input+0x6e2>
 8010432:	69fb      	ldr	r3, [r7, #28]
 8010434:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8010438:	69fb      	ldr	r3, [r7, #28]
 801043a:	6918      	ldr	r0, [r3, #16]
 801043c:	2300      	movs	r3, #0
 801043e:	2200      	movs	r2, #0
 8010440:	69f9      	ldr	r1, [r7, #28]
 8010442:	47a0      	blx	r4
 8010444:	4603      	mov	r3, r0
 8010446:	74fb      	strb	r3, [r7, #19]
 8010448:	e001      	b.n	801044e <tcp_input+0x6e6>
 801044a:	2300      	movs	r3, #0
 801044c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801044e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010452:	f113 0f0d 	cmn.w	r3, #13
 8010456:	d016      	beq.n	8010486 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8010458:	4b13      	ldr	r3, [pc, #76]	@ (80104a8 <tcp_input+0x740>)
 801045a:	2200      	movs	r2, #0
 801045c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801045e:	69f8      	ldr	r0, [r7, #28]
 8010460:	f000 f88e 	bl	8010580 <tcp_input_delayed_close>
 8010464:	4603      	mov	r3, r0
 8010466:	2b00      	cmp	r3, #0
 8010468:	d128      	bne.n	80104bc <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801046a:	69f8      	ldr	r0, [r7, #28]
 801046c:	f002 fac2 	bl	80129f4 <tcp_output>
 8010470:	e025      	b.n	80104be <tcp_input+0x756>
        goto aborted;
 8010472:	bf00      	nop
 8010474:	e023      	b.n	80104be <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8010476:	bf00      	nop
 8010478:	e021      	b.n	80104be <tcp_input+0x756>
              goto aborted;
 801047a:	bf00      	nop
 801047c:	e01f      	b.n	80104be <tcp_input+0x756>
          goto aborted;
 801047e:	bf00      	nop
 8010480:	e01d      	b.n	80104be <tcp_input+0x756>
            goto aborted;
 8010482:	bf00      	nop
 8010484:	e01b      	b.n	80104be <tcp_input+0x756>
              goto aborted;
 8010486:	bf00      	nop
 8010488:	e019      	b.n	80104be <tcp_input+0x756>
 801048a:	bf00      	nop
 801048c:	2000c6a0 	.word	0x2000c6a0
 8010490:	2000c6b0 	.word	0x2000c6b0
 8010494:	2000c6d0 	.word	0x2000c6d0
 8010498:	2000c6cd 	.word	0x2000c6cd
 801049c:	2000c6c8 	.word	0x2000c6c8
 80104a0:	2000c6cc 	.word	0x2000c6cc
 80104a4:	2000c6ca 	.word	0x2000c6ca
 80104a8:	2000c6d4 	.word	0x2000c6d4
 80104ac:	2000c694 	.word	0x2000c694
 80104b0:	08019aac 	.word	0x08019aac
 80104b4:	08019c60 	.word	0x08019c60
 80104b8:	08019af8 	.word	0x08019af8
          goto aborted;
 80104bc:	bf00      	nop
    tcp_input_pcb = NULL;
 80104be:	4b27      	ldr	r3, [pc, #156]	@ (801055c <tcp_input+0x7f4>)
 80104c0:	2200      	movs	r2, #0
 80104c2:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80104c4:	4b26      	ldr	r3, [pc, #152]	@ (8010560 <tcp_input+0x7f8>)
 80104c6:	2200      	movs	r2, #0
 80104c8:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80104ca:	4b26      	ldr	r3, [pc, #152]	@ (8010564 <tcp_input+0x7fc>)
 80104cc:	685b      	ldr	r3, [r3, #4]
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d03f      	beq.n	8010552 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 80104d2:	4b24      	ldr	r3, [pc, #144]	@ (8010564 <tcp_input+0x7fc>)
 80104d4:	685b      	ldr	r3, [r3, #4]
 80104d6:	4618      	mov	r0, r3
 80104d8:	f7fd fe10 	bl	800e0fc <pbuf_free>
      inseg.p = NULL;
 80104dc:	4b21      	ldr	r3, [pc, #132]	@ (8010564 <tcp_input+0x7fc>)
 80104de:	2200      	movs	r2, #0
 80104e0:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80104e2:	e036      	b.n	8010552 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80104e4:	4b20      	ldr	r3, [pc, #128]	@ (8010568 <tcp_input+0x800>)
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	899b      	ldrh	r3, [r3, #12]
 80104ea:	b29b      	uxth	r3, r3
 80104ec:	4618      	mov	r0, r3
 80104ee:	f7fc fa45 	bl	800c97c <lwip_htons>
 80104f2:	4603      	mov	r3, r0
 80104f4:	b2db      	uxtb	r3, r3
 80104f6:	f003 0304 	and.w	r3, r3, #4
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d118      	bne.n	8010530 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80104fe:	4b1b      	ldr	r3, [pc, #108]	@ (801056c <tcp_input+0x804>)
 8010500:	6819      	ldr	r1, [r3, #0]
 8010502:	4b1b      	ldr	r3, [pc, #108]	@ (8010570 <tcp_input+0x808>)
 8010504:	881b      	ldrh	r3, [r3, #0]
 8010506:	461a      	mov	r2, r3
 8010508:	4b1a      	ldr	r3, [pc, #104]	@ (8010574 <tcp_input+0x80c>)
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801050e:	4b16      	ldr	r3, [pc, #88]	@ (8010568 <tcp_input+0x800>)
 8010510:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010512:	885b      	ldrh	r3, [r3, #2]
 8010514:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010516:	4a14      	ldr	r2, [pc, #80]	@ (8010568 <tcp_input+0x800>)
 8010518:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801051a:	8812      	ldrh	r2, [r2, #0]
 801051c:	b292      	uxth	r2, r2
 801051e:	9202      	str	r2, [sp, #8]
 8010520:	9301      	str	r3, [sp, #4]
 8010522:	4b15      	ldr	r3, [pc, #84]	@ (8010578 <tcp_input+0x810>)
 8010524:	9300      	str	r3, [sp, #0]
 8010526:	4b15      	ldr	r3, [pc, #84]	@ (801057c <tcp_input+0x814>)
 8010528:	4602      	mov	r2, r0
 801052a:	2000      	movs	r0, #0
 801052c:	f003 f816 	bl	801355c <tcp_rst>
    pbuf_free(p);
 8010530:	6878      	ldr	r0, [r7, #4]
 8010532:	f7fd fde3 	bl	800e0fc <pbuf_free>
  return;
 8010536:	e00c      	b.n	8010552 <tcp_input+0x7ea>
    goto dropped;
 8010538:	bf00      	nop
 801053a:	e006      	b.n	801054a <tcp_input+0x7e2>
    goto dropped;
 801053c:	bf00      	nop
 801053e:	e004      	b.n	801054a <tcp_input+0x7e2>
    goto dropped;
 8010540:	bf00      	nop
 8010542:	e002      	b.n	801054a <tcp_input+0x7e2>
      goto dropped;
 8010544:	bf00      	nop
 8010546:	e000      	b.n	801054a <tcp_input+0x7e2>
      goto dropped;
 8010548:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801054a:	6878      	ldr	r0, [r7, #4]
 801054c:	f7fd fdd6 	bl	800e0fc <pbuf_free>
 8010550:	e000      	b.n	8010554 <tcp_input+0x7ec>
  return;
 8010552:	bf00      	nop
}
 8010554:	3724      	adds	r7, #36	@ 0x24
 8010556:	46bd      	mov	sp, r7
 8010558:	bd90      	pop	{r4, r7, pc}
 801055a:	bf00      	nop
 801055c:	2000c6d4 	.word	0x2000c6d4
 8010560:	2000c6d0 	.word	0x2000c6d0
 8010564:	2000c6a0 	.word	0x2000c6a0
 8010568:	2000c6b0 	.word	0x2000c6b0
 801056c:	2000c6c4 	.word	0x2000c6c4
 8010570:	2000c6ca 	.word	0x2000c6ca
 8010574:	2000c6c0 	.word	0x2000c6c0
 8010578:	20008f44 	.word	0x20008f44
 801057c:	20008f48 	.word	0x20008f48

08010580 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8010580:	b580      	push	{r7, lr}
 8010582:	b082      	sub	sp, #8
 8010584:	af00      	add	r7, sp, #0
 8010586:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	2b00      	cmp	r3, #0
 801058c:	d106      	bne.n	801059c <tcp_input_delayed_close+0x1c>
 801058e:	4b17      	ldr	r3, [pc, #92]	@ (80105ec <tcp_input_delayed_close+0x6c>)
 8010590:	f240 225a 	movw	r2, #602	@ 0x25a
 8010594:	4916      	ldr	r1, [pc, #88]	@ (80105f0 <tcp_input_delayed_close+0x70>)
 8010596:	4817      	ldr	r0, [pc, #92]	@ (80105f4 <tcp_input_delayed_close+0x74>)
 8010598:	f006 fe9c 	bl	80172d4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 801059c:	4b16      	ldr	r3, [pc, #88]	@ (80105f8 <tcp_input_delayed_close+0x78>)
 801059e:	781b      	ldrb	r3, [r3, #0]
 80105a0:	f003 0310 	and.w	r3, r3, #16
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d01c      	beq.n	80105e2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	8b5b      	ldrh	r3, [r3, #26]
 80105ac:	f003 0310 	and.w	r3, r3, #16
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d10d      	bne.n	80105d0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d008      	beq.n	80105d0 <tcp_input_delayed_close+0x50>
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80105c4:	687a      	ldr	r2, [r7, #4]
 80105c6:	6912      	ldr	r2, [r2, #16]
 80105c8:	f06f 010e 	mvn.w	r1, #14
 80105cc:	4610      	mov	r0, r2
 80105ce:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80105d0:	6879      	ldr	r1, [r7, #4]
 80105d2:	480a      	ldr	r0, [pc, #40]	@ (80105fc <tcp_input_delayed_close+0x7c>)
 80105d4:	f7ff fa50 	bl	800fa78 <tcp_pcb_remove>
    tcp_free(pcb);
 80105d8:	6878      	ldr	r0, [r7, #4]
 80105da:	f7fe f83b 	bl	800e654 <tcp_free>
    return 1;
 80105de:	2301      	movs	r3, #1
 80105e0:	e000      	b.n	80105e4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80105e2:	2300      	movs	r3, #0
}
 80105e4:	4618      	mov	r0, r3
 80105e6:	3708      	adds	r7, #8
 80105e8:	46bd      	mov	sp, r7
 80105ea:	bd80      	pop	{r7, pc}
 80105ec:	08019aac 	.word	0x08019aac
 80105f0:	08019c7c 	.word	0x08019c7c
 80105f4:	08019af8 	.word	0x08019af8
 80105f8:	2000c6cd 	.word	0x2000c6cd
 80105fc:	2000c694 	.word	0x2000c694

08010600 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8010600:	b590      	push	{r4, r7, lr}
 8010602:	b08b      	sub	sp, #44	@ 0x2c
 8010604:	af04      	add	r7, sp, #16
 8010606:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8010608:	4b6f      	ldr	r3, [pc, #444]	@ (80107c8 <tcp_listen_input+0x1c8>)
 801060a:	781b      	ldrb	r3, [r3, #0]
 801060c:	f003 0304 	and.w	r3, r3, #4
 8010610:	2b00      	cmp	r3, #0
 8010612:	f040 80d2 	bne.w	80107ba <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	2b00      	cmp	r3, #0
 801061a:	d106      	bne.n	801062a <tcp_listen_input+0x2a>
 801061c:	4b6b      	ldr	r3, [pc, #428]	@ (80107cc <tcp_listen_input+0x1cc>)
 801061e:	f240 2281 	movw	r2, #641	@ 0x281
 8010622:	496b      	ldr	r1, [pc, #428]	@ (80107d0 <tcp_listen_input+0x1d0>)
 8010624:	486b      	ldr	r0, [pc, #428]	@ (80107d4 <tcp_listen_input+0x1d4>)
 8010626:	f006 fe55 	bl	80172d4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801062a:	4b67      	ldr	r3, [pc, #412]	@ (80107c8 <tcp_listen_input+0x1c8>)
 801062c:	781b      	ldrb	r3, [r3, #0]
 801062e:	f003 0310 	and.w	r3, r3, #16
 8010632:	2b00      	cmp	r3, #0
 8010634:	d019      	beq.n	801066a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010636:	4b68      	ldr	r3, [pc, #416]	@ (80107d8 <tcp_listen_input+0x1d8>)
 8010638:	6819      	ldr	r1, [r3, #0]
 801063a:	4b68      	ldr	r3, [pc, #416]	@ (80107dc <tcp_listen_input+0x1dc>)
 801063c:	881b      	ldrh	r3, [r3, #0]
 801063e:	461a      	mov	r2, r3
 8010640:	4b67      	ldr	r3, [pc, #412]	@ (80107e0 <tcp_listen_input+0x1e0>)
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010646:	4b67      	ldr	r3, [pc, #412]	@ (80107e4 <tcp_listen_input+0x1e4>)
 8010648:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801064a:	885b      	ldrh	r3, [r3, #2]
 801064c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801064e:	4a65      	ldr	r2, [pc, #404]	@ (80107e4 <tcp_listen_input+0x1e4>)
 8010650:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010652:	8812      	ldrh	r2, [r2, #0]
 8010654:	b292      	uxth	r2, r2
 8010656:	9202      	str	r2, [sp, #8]
 8010658:	9301      	str	r3, [sp, #4]
 801065a:	4b63      	ldr	r3, [pc, #396]	@ (80107e8 <tcp_listen_input+0x1e8>)
 801065c:	9300      	str	r3, [sp, #0]
 801065e:	4b63      	ldr	r3, [pc, #396]	@ (80107ec <tcp_listen_input+0x1ec>)
 8010660:	4602      	mov	r2, r0
 8010662:	6878      	ldr	r0, [r7, #4]
 8010664:	f002 ff7a 	bl	801355c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8010668:	e0a9      	b.n	80107be <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801066a:	4b57      	ldr	r3, [pc, #348]	@ (80107c8 <tcp_listen_input+0x1c8>)
 801066c:	781b      	ldrb	r3, [r3, #0]
 801066e:	f003 0302 	and.w	r3, r3, #2
 8010672:	2b00      	cmp	r3, #0
 8010674:	f000 80a3 	beq.w	80107be <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	7d5b      	ldrb	r3, [r3, #21]
 801067c:	4618      	mov	r0, r3
 801067e:	f7ff f927 	bl	800f8d0 <tcp_alloc>
 8010682:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8010684:	697b      	ldr	r3, [r7, #20]
 8010686:	2b00      	cmp	r3, #0
 8010688:	d111      	bne.n	80106ae <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	699b      	ldr	r3, [r3, #24]
 801068e:	2b00      	cmp	r3, #0
 8010690:	d00a      	beq.n	80106a8 <tcp_listen_input+0xa8>
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	699b      	ldr	r3, [r3, #24]
 8010696:	687a      	ldr	r2, [r7, #4]
 8010698:	6910      	ldr	r0, [r2, #16]
 801069a:	f04f 32ff 	mov.w	r2, #4294967295
 801069e:	2100      	movs	r1, #0
 80106a0:	4798      	blx	r3
 80106a2:	4603      	mov	r3, r0
 80106a4:	73bb      	strb	r3, [r7, #14]
      return;
 80106a6:	e08b      	b.n	80107c0 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80106a8:	23f0      	movs	r3, #240	@ 0xf0
 80106aa:	73bb      	strb	r3, [r7, #14]
      return;
 80106ac:	e088      	b.n	80107c0 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80106ae:	4b50      	ldr	r3, [pc, #320]	@ (80107f0 <tcp_listen_input+0x1f0>)
 80106b0:	695a      	ldr	r2, [r3, #20]
 80106b2:	697b      	ldr	r3, [r7, #20]
 80106b4:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80106b6:	4b4e      	ldr	r3, [pc, #312]	@ (80107f0 <tcp_listen_input+0x1f0>)
 80106b8:	691a      	ldr	r2, [r3, #16]
 80106ba:	697b      	ldr	r3, [r7, #20]
 80106bc:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	8ada      	ldrh	r2, [r3, #22]
 80106c2:	697b      	ldr	r3, [r7, #20]
 80106c4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80106c6:	4b47      	ldr	r3, [pc, #284]	@ (80107e4 <tcp_listen_input+0x1e4>)
 80106c8:	681b      	ldr	r3, [r3, #0]
 80106ca:	881b      	ldrh	r3, [r3, #0]
 80106cc:	b29a      	uxth	r2, r3
 80106ce:	697b      	ldr	r3, [r7, #20]
 80106d0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80106d2:	697b      	ldr	r3, [r7, #20]
 80106d4:	2203      	movs	r2, #3
 80106d6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80106d8:	4b41      	ldr	r3, [pc, #260]	@ (80107e0 <tcp_listen_input+0x1e0>)
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	1c5a      	adds	r2, r3, #1
 80106de:	697b      	ldr	r3, [r7, #20]
 80106e0:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80106e2:	697b      	ldr	r3, [r7, #20]
 80106e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80106e6:	697b      	ldr	r3, [r7, #20]
 80106e8:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 80106ea:	6978      	ldr	r0, [r7, #20]
 80106ec:	f7ff fa58 	bl	800fba0 <tcp_next_iss>
 80106f0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80106f2:	697b      	ldr	r3, [r7, #20]
 80106f4:	693a      	ldr	r2, [r7, #16]
 80106f6:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 80106f8:	697b      	ldr	r3, [r7, #20]
 80106fa:	693a      	ldr	r2, [r7, #16]
 80106fc:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 80106fe:	697b      	ldr	r3, [r7, #20]
 8010700:	693a      	ldr	r2, [r7, #16]
 8010702:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8010704:	697b      	ldr	r3, [r7, #20]
 8010706:	693a      	ldr	r2, [r7, #16]
 8010708:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801070a:	4b35      	ldr	r3, [pc, #212]	@ (80107e0 <tcp_listen_input+0x1e0>)
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	1e5a      	subs	r2, r3, #1
 8010710:	697b      	ldr	r3, [r7, #20]
 8010712:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	691a      	ldr	r2, [r3, #16]
 8010718:	697b      	ldr	r3, [r7, #20]
 801071a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801071c:	697b      	ldr	r3, [r7, #20]
 801071e:	687a      	ldr	r2, [r7, #4]
 8010720:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	7a5b      	ldrb	r3, [r3, #9]
 8010726:	f003 030c 	and.w	r3, r3, #12
 801072a:	b2da      	uxtb	r2, r3
 801072c:	697b      	ldr	r3, [r7, #20]
 801072e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	7a1a      	ldrb	r2, [r3, #8]
 8010734:	697b      	ldr	r3, [r7, #20]
 8010736:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8010738:	4b2e      	ldr	r3, [pc, #184]	@ (80107f4 <tcp_listen_input+0x1f4>)
 801073a:	681a      	ldr	r2, [r3, #0]
 801073c:	697b      	ldr	r3, [r7, #20]
 801073e:	60da      	str	r2, [r3, #12]
 8010740:	4a2c      	ldr	r2, [pc, #176]	@ (80107f4 <tcp_listen_input+0x1f4>)
 8010742:	697b      	ldr	r3, [r7, #20]
 8010744:	6013      	str	r3, [r2, #0]
 8010746:	f003 f8cb 	bl	80138e0 <tcp_timer_needed>
 801074a:	4b2b      	ldr	r3, [pc, #172]	@ (80107f8 <tcp_listen_input+0x1f8>)
 801074c:	2201      	movs	r2, #1
 801074e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8010750:	6978      	ldr	r0, [r7, #20]
 8010752:	f001 fd8b 	bl	801226c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8010756:	4b23      	ldr	r3, [pc, #140]	@ (80107e4 <tcp_listen_input+0x1e4>)
 8010758:	681b      	ldr	r3, [r3, #0]
 801075a:	89db      	ldrh	r3, [r3, #14]
 801075c:	b29a      	uxth	r2, r3
 801075e:	697b      	ldr	r3, [r7, #20]
 8010760:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8010764:	697b      	ldr	r3, [r7, #20]
 8010766:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801076a:	697b      	ldr	r3, [r7, #20]
 801076c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8010770:	697b      	ldr	r3, [r7, #20]
 8010772:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8010774:	697b      	ldr	r3, [r7, #20]
 8010776:	3304      	adds	r3, #4
 8010778:	4618      	mov	r0, r3
 801077a:	f004 fc8f 	bl	801509c <ip4_route>
 801077e:	4601      	mov	r1, r0
 8010780:	697b      	ldr	r3, [r7, #20]
 8010782:	3304      	adds	r3, #4
 8010784:	461a      	mov	r2, r3
 8010786:	4620      	mov	r0, r4
 8010788:	f7ff fa30 	bl	800fbec <tcp_eff_send_mss_netif>
 801078c:	4603      	mov	r3, r0
 801078e:	461a      	mov	r2, r3
 8010790:	697b      	ldr	r3, [r7, #20]
 8010792:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8010794:	2112      	movs	r1, #18
 8010796:	6978      	ldr	r0, [r7, #20]
 8010798:	f002 f83e 	bl	8012818 <tcp_enqueue_flags>
 801079c:	4603      	mov	r3, r0
 801079e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80107a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d004      	beq.n	80107b2 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80107a8:	2100      	movs	r1, #0
 80107aa:	6978      	ldr	r0, [r7, #20]
 80107ac:	f7fe f97c 	bl	800eaa8 <tcp_abandon>
      return;
 80107b0:	e006      	b.n	80107c0 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80107b2:	6978      	ldr	r0, [r7, #20]
 80107b4:	f002 f91e 	bl	80129f4 <tcp_output>
  return;
 80107b8:	e001      	b.n	80107be <tcp_listen_input+0x1be>
    return;
 80107ba:	bf00      	nop
 80107bc:	e000      	b.n	80107c0 <tcp_listen_input+0x1c0>
  return;
 80107be:	bf00      	nop
}
 80107c0:	371c      	adds	r7, #28
 80107c2:	46bd      	mov	sp, r7
 80107c4:	bd90      	pop	{r4, r7, pc}
 80107c6:	bf00      	nop
 80107c8:	2000c6cc 	.word	0x2000c6cc
 80107cc:	08019aac 	.word	0x08019aac
 80107d0:	08019ca4 	.word	0x08019ca4
 80107d4:	08019af8 	.word	0x08019af8
 80107d8:	2000c6c4 	.word	0x2000c6c4
 80107dc:	2000c6ca 	.word	0x2000c6ca
 80107e0:	2000c6c0 	.word	0x2000c6c0
 80107e4:	2000c6b0 	.word	0x2000c6b0
 80107e8:	20008f44 	.word	0x20008f44
 80107ec:	20008f48 	.word	0x20008f48
 80107f0:	20008f34 	.word	0x20008f34
 80107f4:	2000c694 	.word	0x2000c694
 80107f8:	2000c69c 	.word	0x2000c69c

080107fc <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80107fc:	b580      	push	{r7, lr}
 80107fe:	b086      	sub	sp, #24
 8010800:	af04      	add	r7, sp, #16
 8010802:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8010804:	4b2f      	ldr	r3, [pc, #188]	@ (80108c4 <tcp_timewait_input+0xc8>)
 8010806:	781b      	ldrb	r3, [r3, #0]
 8010808:	f003 0304 	and.w	r3, r3, #4
 801080c:	2b00      	cmp	r3, #0
 801080e:	d153      	bne.n	80108b8 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	2b00      	cmp	r3, #0
 8010814:	d106      	bne.n	8010824 <tcp_timewait_input+0x28>
 8010816:	4b2c      	ldr	r3, [pc, #176]	@ (80108c8 <tcp_timewait_input+0xcc>)
 8010818:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801081c:	492b      	ldr	r1, [pc, #172]	@ (80108cc <tcp_timewait_input+0xd0>)
 801081e:	482c      	ldr	r0, [pc, #176]	@ (80108d0 <tcp_timewait_input+0xd4>)
 8010820:	f006 fd58 	bl	80172d4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8010824:	4b27      	ldr	r3, [pc, #156]	@ (80108c4 <tcp_timewait_input+0xc8>)
 8010826:	781b      	ldrb	r3, [r3, #0]
 8010828:	f003 0302 	and.w	r3, r3, #2
 801082c:	2b00      	cmp	r3, #0
 801082e:	d02a      	beq.n	8010886 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8010830:	4b28      	ldr	r3, [pc, #160]	@ (80108d4 <tcp_timewait_input+0xd8>)
 8010832:	681a      	ldr	r2, [r3, #0]
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010838:	1ad3      	subs	r3, r2, r3
 801083a:	2b00      	cmp	r3, #0
 801083c:	db2d      	blt.n	801089a <tcp_timewait_input+0x9e>
 801083e:	4b25      	ldr	r3, [pc, #148]	@ (80108d4 <tcp_timewait_input+0xd8>)
 8010840:	681a      	ldr	r2, [r3, #0]
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010846:	6879      	ldr	r1, [r7, #4]
 8010848:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801084a:	440b      	add	r3, r1
 801084c:	1ad3      	subs	r3, r2, r3
 801084e:	2b00      	cmp	r3, #0
 8010850:	dc23      	bgt.n	801089a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010852:	4b21      	ldr	r3, [pc, #132]	@ (80108d8 <tcp_timewait_input+0xdc>)
 8010854:	6819      	ldr	r1, [r3, #0]
 8010856:	4b21      	ldr	r3, [pc, #132]	@ (80108dc <tcp_timewait_input+0xe0>)
 8010858:	881b      	ldrh	r3, [r3, #0]
 801085a:	461a      	mov	r2, r3
 801085c:	4b1d      	ldr	r3, [pc, #116]	@ (80108d4 <tcp_timewait_input+0xd8>)
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010862:	4b1f      	ldr	r3, [pc, #124]	@ (80108e0 <tcp_timewait_input+0xe4>)
 8010864:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010866:	885b      	ldrh	r3, [r3, #2]
 8010868:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801086a:	4a1d      	ldr	r2, [pc, #116]	@ (80108e0 <tcp_timewait_input+0xe4>)
 801086c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801086e:	8812      	ldrh	r2, [r2, #0]
 8010870:	b292      	uxth	r2, r2
 8010872:	9202      	str	r2, [sp, #8]
 8010874:	9301      	str	r3, [sp, #4]
 8010876:	4b1b      	ldr	r3, [pc, #108]	@ (80108e4 <tcp_timewait_input+0xe8>)
 8010878:	9300      	str	r3, [sp, #0]
 801087a:	4b1b      	ldr	r3, [pc, #108]	@ (80108e8 <tcp_timewait_input+0xec>)
 801087c:	4602      	mov	r2, r0
 801087e:	6878      	ldr	r0, [r7, #4]
 8010880:	f002 fe6c 	bl	801355c <tcp_rst>
      return;
 8010884:	e01b      	b.n	80108be <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8010886:	4b0f      	ldr	r3, [pc, #60]	@ (80108c4 <tcp_timewait_input+0xc8>)
 8010888:	781b      	ldrb	r3, [r3, #0]
 801088a:	f003 0301 	and.w	r3, r3, #1
 801088e:	2b00      	cmp	r3, #0
 8010890:	d003      	beq.n	801089a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8010892:	4b16      	ldr	r3, [pc, #88]	@ (80108ec <tcp_timewait_input+0xf0>)
 8010894:	681a      	ldr	r2, [r3, #0]
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801089a:	4b10      	ldr	r3, [pc, #64]	@ (80108dc <tcp_timewait_input+0xe0>)
 801089c:	881b      	ldrh	r3, [r3, #0]
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d00c      	beq.n	80108bc <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	8b5b      	ldrh	r3, [r3, #26]
 80108a6:	f043 0302 	orr.w	r3, r3, #2
 80108aa:	b29a      	uxth	r2, r3
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80108b0:	6878      	ldr	r0, [r7, #4]
 80108b2:	f002 f89f 	bl	80129f4 <tcp_output>
  }
  return;
 80108b6:	e001      	b.n	80108bc <tcp_timewait_input+0xc0>
    return;
 80108b8:	bf00      	nop
 80108ba:	e000      	b.n	80108be <tcp_timewait_input+0xc2>
  return;
 80108bc:	bf00      	nop
}
 80108be:	3708      	adds	r7, #8
 80108c0:	46bd      	mov	sp, r7
 80108c2:	bd80      	pop	{r7, pc}
 80108c4:	2000c6cc 	.word	0x2000c6cc
 80108c8:	08019aac 	.word	0x08019aac
 80108cc:	08019cc4 	.word	0x08019cc4
 80108d0:	08019af8 	.word	0x08019af8
 80108d4:	2000c6c0 	.word	0x2000c6c0
 80108d8:	2000c6c4 	.word	0x2000c6c4
 80108dc:	2000c6ca 	.word	0x2000c6ca
 80108e0:	2000c6b0 	.word	0x2000c6b0
 80108e4:	20008f44 	.word	0x20008f44
 80108e8:	20008f48 	.word	0x20008f48
 80108ec:	2000c688 	.word	0x2000c688

080108f0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80108f0:	b590      	push	{r4, r7, lr}
 80108f2:	b08d      	sub	sp, #52	@ 0x34
 80108f4:	af04      	add	r7, sp, #16
 80108f6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80108f8:	2300      	movs	r3, #0
 80108fa:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80108fc:	2300      	movs	r3, #0
 80108fe:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	2b00      	cmp	r3, #0
 8010904:	d106      	bne.n	8010914 <tcp_process+0x24>
 8010906:	4b9d      	ldr	r3, [pc, #628]	@ (8010b7c <tcp_process+0x28c>)
 8010908:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 801090c:	499c      	ldr	r1, [pc, #624]	@ (8010b80 <tcp_process+0x290>)
 801090e:	489d      	ldr	r0, [pc, #628]	@ (8010b84 <tcp_process+0x294>)
 8010910:	f006 fce0 	bl	80172d4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8010914:	4b9c      	ldr	r3, [pc, #624]	@ (8010b88 <tcp_process+0x298>)
 8010916:	781b      	ldrb	r3, [r3, #0]
 8010918:	f003 0304 	and.w	r3, r3, #4
 801091c:	2b00      	cmp	r3, #0
 801091e:	d04e      	beq.n	80109be <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	7d1b      	ldrb	r3, [r3, #20]
 8010924:	2b02      	cmp	r3, #2
 8010926:	d108      	bne.n	801093a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801092c:	4b97      	ldr	r3, [pc, #604]	@ (8010b8c <tcp_process+0x29c>)
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	429a      	cmp	r2, r3
 8010932:	d123      	bne.n	801097c <tcp_process+0x8c>
        acceptable = 1;
 8010934:	2301      	movs	r3, #1
 8010936:	76fb      	strb	r3, [r7, #27]
 8010938:	e020      	b.n	801097c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801093e:	4b94      	ldr	r3, [pc, #592]	@ (8010b90 <tcp_process+0x2a0>)
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	429a      	cmp	r2, r3
 8010944:	d102      	bne.n	801094c <tcp_process+0x5c>
        acceptable = 1;
 8010946:	2301      	movs	r3, #1
 8010948:	76fb      	strb	r3, [r7, #27]
 801094a:	e017      	b.n	801097c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801094c:	4b90      	ldr	r3, [pc, #576]	@ (8010b90 <tcp_process+0x2a0>)
 801094e:	681a      	ldr	r2, [r3, #0]
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010954:	1ad3      	subs	r3, r2, r3
 8010956:	2b00      	cmp	r3, #0
 8010958:	db10      	blt.n	801097c <tcp_process+0x8c>
 801095a:	4b8d      	ldr	r3, [pc, #564]	@ (8010b90 <tcp_process+0x2a0>)
 801095c:	681a      	ldr	r2, [r3, #0]
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010962:	6879      	ldr	r1, [r7, #4]
 8010964:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8010966:	440b      	add	r3, r1
 8010968:	1ad3      	subs	r3, r2, r3
 801096a:	2b00      	cmp	r3, #0
 801096c:	dc06      	bgt.n	801097c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	8b5b      	ldrh	r3, [r3, #26]
 8010972:	f043 0302 	orr.w	r3, r3, #2
 8010976:	b29a      	uxth	r2, r3
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801097c:	7efb      	ldrb	r3, [r7, #27]
 801097e:	2b00      	cmp	r3, #0
 8010980:	d01b      	beq.n	80109ba <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	7d1b      	ldrb	r3, [r3, #20]
 8010986:	2b00      	cmp	r3, #0
 8010988:	d106      	bne.n	8010998 <tcp_process+0xa8>
 801098a:	4b7c      	ldr	r3, [pc, #496]	@ (8010b7c <tcp_process+0x28c>)
 801098c:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8010990:	4980      	ldr	r1, [pc, #512]	@ (8010b94 <tcp_process+0x2a4>)
 8010992:	487c      	ldr	r0, [pc, #496]	@ (8010b84 <tcp_process+0x294>)
 8010994:	f006 fc9e 	bl	80172d4 <iprintf>
      recv_flags |= TF_RESET;
 8010998:	4b7f      	ldr	r3, [pc, #508]	@ (8010b98 <tcp_process+0x2a8>)
 801099a:	781b      	ldrb	r3, [r3, #0]
 801099c:	f043 0308 	orr.w	r3, r3, #8
 80109a0:	b2da      	uxtb	r2, r3
 80109a2:	4b7d      	ldr	r3, [pc, #500]	@ (8010b98 <tcp_process+0x2a8>)
 80109a4:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	8b5b      	ldrh	r3, [r3, #26]
 80109aa:	f023 0301 	bic.w	r3, r3, #1
 80109ae:	b29a      	uxth	r2, r3
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80109b4:	f06f 030d 	mvn.w	r3, #13
 80109b8:	e37a      	b.n	80110b0 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80109ba:	2300      	movs	r3, #0
 80109bc:	e378      	b.n	80110b0 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80109be:	4b72      	ldr	r3, [pc, #456]	@ (8010b88 <tcp_process+0x298>)
 80109c0:	781b      	ldrb	r3, [r3, #0]
 80109c2:	f003 0302 	and.w	r3, r3, #2
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d010      	beq.n	80109ec <tcp_process+0xfc>
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	7d1b      	ldrb	r3, [r3, #20]
 80109ce:	2b02      	cmp	r3, #2
 80109d0:	d00c      	beq.n	80109ec <tcp_process+0xfc>
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	7d1b      	ldrb	r3, [r3, #20]
 80109d6:	2b03      	cmp	r3, #3
 80109d8:	d008      	beq.n	80109ec <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	8b5b      	ldrh	r3, [r3, #26]
 80109de:	f043 0302 	orr.w	r3, r3, #2
 80109e2:	b29a      	uxth	r2, r3
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80109e8:	2300      	movs	r3, #0
 80109ea:	e361      	b.n	80110b0 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	8b5b      	ldrh	r3, [r3, #26]
 80109f0:	f003 0310 	and.w	r3, r3, #16
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d103      	bne.n	8010a00 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80109f8:	4b68      	ldr	r3, [pc, #416]	@ (8010b9c <tcp_process+0x2ac>)
 80109fa:	681a      	ldr	r2, [r3, #0]
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	2200      	movs	r2, #0
 8010a04:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	2200      	movs	r2, #0
 8010a0c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8010a10:	6878      	ldr	r0, [r7, #4]
 8010a12:	f001 fc2b 	bl	801226c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	7d1b      	ldrb	r3, [r3, #20]
 8010a1a:	3b02      	subs	r3, #2
 8010a1c:	2b07      	cmp	r3, #7
 8010a1e:	f200 8337 	bhi.w	8011090 <tcp_process+0x7a0>
 8010a22:	a201      	add	r2, pc, #4	@ (adr r2, 8010a28 <tcp_process+0x138>)
 8010a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a28:	08010a49 	.word	0x08010a49
 8010a2c:	08010c79 	.word	0x08010c79
 8010a30:	08010df1 	.word	0x08010df1
 8010a34:	08010e1b 	.word	0x08010e1b
 8010a38:	08010f3f 	.word	0x08010f3f
 8010a3c:	08010df1 	.word	0x08010df1
 8010a40:	08010fcb 	.word	0x08010fcb
 8010a44:	0801105b 	.word	0x0801105b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8010a48:	4b4f      	ldr	r3, [pc, #316]	@ (8010b88 <tcp_process+0x298>)
 8010a4a:	781b      	ldrb	r3, [r3, #0]
 8010a4c:	f003 0310 	and.w	r3, r3, #16
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	f000 80e4 	beq.w	8010c1e <tcp_process+0x32e>
 8010a56:	4b4c      	ldr	r3, [pc, #304]	@ (8010b88 <tcp_process+0x298>)
 8010a58:	781b      	ldrb	r3, [r3, #0]
 8010a5a:	f003 0302 	and.w	r3, r3, #2
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	f000 80dd 	beq.w	8010c1e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010a68:	1c5a      	adds	r2, r3, #1
 8010a6a:	4b48      	ldr	r3, [pc, #288]	@ (8010b8c <tcp_process+0x29c>)
 8010a6c:	681b      	ldr	r3, [r3, #0]
 8010a6e:	429a      	cmp	r2, r3
 8010a70:	f040 80d5 	bne.w	8010c1e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8010a74:	4b46      	ldr	r3, [pc, #280]	@ (8010b90 <tcp_process+0x2a0>)
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	1c5a      	adds	r2, r3, #1
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 8010a86:	4b41      	ldr	r3, [pc, #260]	@ (8010b8c <tcp_process+0x29c>)
 8010a88:	681a      	ldr	r2, [r3, #0]
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8010a8e:	4b44      	ldr	r3, [pc, #272]	@ (8010ba0 <tcp_process+0x2b0>)
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	89db      	ldrh	r3, [r3, #14]
 8010a94:	b29a      	uxth	r2, r3
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8010aa8:	4b39      	ldr	r3, [pc, #228]	@ (8010b90 <tcp_process+0x2a0>)
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	1e5a      	subs	r2, r3, #1
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	2204      	movs	r2, #4
 8010ab6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	3304      	adds	r3, #4
 8010ac0:	4618      	mov	r0, r3
 8010ac2:	f004 faeb 	bl	801509c <ip4_route>
 8010ac6:	4601      	mov	r1, r0
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	3304      	adds	r3, #4
 8010acc:	461a      	mov	r2, r3
 8010ace:	4620      	mov	r0, r4
 8010ad0:	f7ff f88c 	bl	800fbec <tcp_eff_send_mss_netif>
 8010ad4:	4603      	mov	r3, r0
 8010ad6:	461a      	mov	r2, r3
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010ae0:	009a      	lsls	r2, r3, #2
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010ae6:	005b      	lsls	r3, r3, #1
 8010ae8:	f241 111c 	movw	r1, #4380	@ 0x111c
 8010aec:	428b      	cmp	r3, r1
 8010aee:	bf38      	it	cc
 8010af0:	460b      	movcc	r3, r1
 8010af2:	429a      	cmp	r2, r3
 8010af4:	d204      	bcs.n	8010b00 <tcp_process+0x210>
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010afa:	009b      	lsls	r3, r3, #2
 8010afc:	b29b      	uxth	r3, r3
 8010afe:	e00d      	b.n	8010b1c <tcp_process+0x22c>
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010b04:	005b      	lsls	r3, r3, #1
 8010b06:	f241 121c 	movw	r2, #4380	@ 0x111c
 8010b0a:	4293      	cmp	r3, r2
 8010b0c:	d904      	bls.n	8010b18 <tcp_process+0x228>
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010b12:	005b      	lsls	r3, r3, #1
 8010b14:	b29b      	uxth	r3, r3
 8010b16:	e001      	b.n	8010b1c <tcp_process+0x22c>
 8010b18:	f241 131c 	movw	r3, #4380	@ 0x111c
 8010b1c:	687a      	ldr	r2, [r7, #4]
 8010b1e:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	d106      	bne.n	8010b3a <tcp_process+0x24a>
 8010b2c:	4b13      	ldr	r3, [pc, #76]	@ (8010b7c <tcp_process+0x28c>)
 8010b2e:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8010b32:	491c      	ldr	r1, [pc, #112]	@ (8010ba4 <tcp_process+0x2b4>)
 8010b34:	4813      	ldr	r0, [pc, #76]	@ (8010b84 <tcp_process+0x294>)
 8010b36:	f006 fbcd 	bl	80172d4 <iprintf>
        --pcb->snd_queuelen;
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010b40:	3b01      	subs	r3, #1
 8010b42:	b29a      	uxth	r2, r3
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010b4e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8010b50:	69fb      	ldr	r3, [r7, #28]
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d12a      	bne.n	8010bac <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010b5a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8010b5c:	69fb      	ldr	r3, [r7, #28]
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d106      	bne.n	8010b70 <tcp_process+0x280>
 8010b62:	4b06      	ldr	r3, [pc, #24]	@ (8010b7c <tcp_process+0x28c>)
 8010b64:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8010b68:	490f      	ldr	r1, [pc, #60]	@ (8010ba8 <tcp_process+0x2b8>)
 8010b6a:	4806      	ldr	r0, [pc, #24]	@ (8010b84 <tcp_process+0x294>)
 8010b6c:	f006 fbb2 	bl	80172d4 <iprintf>
          pcb->unsent = rseg->next;
 8010b70:	69fb      	ldr	r3, [r7, #28]
 8010b72:	681a      	ldr	r2, [r3, #0]
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	66da      	str	r2, [r3, #108]	@ 0x6c
 8010b78:	e01c      	b.n	8010bb4 <tcp_process+0x2c4>
 8010b7a:	bf00      	nop
 8010b7c:	08019aac 	.word	0x08019aac
 8010b80:	08019ce4 	.word	0x08019ce4
 8010b84:	08019af8 	.word	0x08019af8
 8010b88:	2000c6cc 	.word	0x2000c6cc
 8010b8c:	2000c6c4 	.word	0x2000c6c4
 8010b90:	2000c6c0 	.word	0x2000c6c0
 8010b94:	08019d00 	.word	0x08019d00
 8010b98:	2000c6cd 	.word	0x2000c6cd
 8010b9c:	2000c688 	.word	0x2000c688
 8010ba0:	2000c6b0 	.word	0x2000c6b0
 8010ba4:	08019d20 	.word	0x08019d20
 8010ba8:	08019d38 	.word	0x08019d38
        } else {
          pcb->unacked = rseg->next;
 8010bac:	69fb      	ldr	r3, [r7, #28]
 8010bae:	681a      	ldr	r2, [r3, #0]
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8010bb4:	69f8      	ldr	r0, [r7, #28]
 8010bb6:	f7fe fd22 	bl	800f5fe <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d104      	bne.n	8010bcc <tcp_process+0x2dc>
          pcb->rtime = -1;
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010bc8:	861a      	strh	r2, [r3, #48]	@ 0x30
 8010bca:	e006      	b.n	8010bda <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	2200      	movs	r2, #0
 8010bd0:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	2200      	movs	r2, #0
 8010bd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d00a      	beq.n	8010bfa <tcp_process+0x30a>
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010bea:	687a      	ldr	r2, [r7, #4]
 8010bec:	6910      	ldr	r0, [r2, #16]
 8010bee:	2200      	movs	r2, #0
 8010bf0:	6879      	ldr	r1, [r7, #4]
 8010bf2:	4798      	blx	r3
 8010bf4:	4603      	mov	r3, r0
 8010bf6:	76bb      	strb	r3, [r7, #26]
 8010bf8:	e001      	b.n	8010bfe <tcp_process+0x30e>
 8010bfa:	2300      	movs	r3, #0
 8010bfc:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8010bfe:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010c02:	f113 0f0d 	cmn.w	r3, #13
 8010c06:	d102      	bne.n	8010c0e <tcp_process+0x31e>
          return ERR_ABRT;
 8010c08:	f06f 030c 	mvn.w	r3, #12
 8010c0c:	e250      	b.n	80110b0 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	8b5b      	ldrh	r3, [r3, #26]
 8010c12:	f043 0302 	orr.w	r3, r3, #2
 8010c16:	b29a      	uxth	r2, r3
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8010c1c:	e23a      	b.n	8011094 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8010c1e:	4b98      	ldr	r3, [pc, #608]	@ (8010e80 <tcp_process+0x590>)
 8010c20:	781b      	ldrb	r3, [r3, #0]
 8010c22:	f003 0310 	and.w	r3, r3, #16
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	f000 8234 	beq.w	8011094 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010c2c:	4b95      	ldr	r3, [pc, #596]	@ (8010e84 <tcp_process+0x594>)
 8010c2e:	6819      	ldr	r1, [r3, #0]
 8010c30:	4b95      	ldr	r3, [pc, #596]	@ (8010e88 <tcp_process+0x598>)
 8010c32:	881b      	ldrh	r3, [r3, #0]
 8010c34:	461a      	mov	r2, r3
 8010c36:	4b95      	ldr	r3, [pc, #596]	@ (8010e8c <tcp_process+0x59c>)
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010c3c:	4b94      	ldr	r3, [pc, #592]	@ (8010e90 <tcp_process+0x5a0>)
 8010c3e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010c40:	885b      	ldrh	r3, [r3, #2]
 8010c42:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010c44:	4a92      	ldr	r2, [pc, #584]	@ (8010e90 <tcp_process+0x5a0>)
 8010c46:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010c48:	8812      	ldrh	r2, [r2, #0]
 8010c4a:	b292      	uxth	r2, r2
 8010c4c:	9202      	str	r2, [sp, #8]
 8010c4e:	9301      	str	r3, [sp, #4]
 8010c50:	4b90      	ldr	r3, [pc, #576]	@ (8010e94 <tcp_process+0x5a4>)
 8010c52:	9300      	str	r3, [sp, #0]
 8010c54:	4b90      	ldr	r3, [pc, #576]	@ (8010e98 <tcp_process+0x5a8>)
 8010c56:	4602      	mov	r2, r0
 8010c58:	6878      	ldr	r0, [r7, #4]
 8010c5a:	f002 fc7f 	bl	801355c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010c64:	2b05      	cmp	r3, #5
 8010c66:	f200 8215 	bhi.w	8011094 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	2200      	movs	r2, #0
 8010c6e:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8010c70:	6878      	ldr	r0, [r7, #4]
 8010c72:	f002 fa4b 	bl	801310c <tcp_rexmit_rto>
      break;
 8010c76:	e20d      	b.n	8011094 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8010c78:	4b81      	ldr	r3, [pc, #516]	@ (8010e80 <tcp_process+0x590>)
 8010c7a:	781b      	ldrb	r3, [r3, #0]
 8010c7c:	f003 0310 	and.w	r3, r3, #16
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	f000 80a1 	beq.w	8010dc8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010c86:	4b7f      	ldr	r3, [pc, #508]	@ (8010e84 <tcp_process+0x594>)
 8010c88:	681a      	ldr	r2, [r3, #0]
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010c8e:	1ad3      	subs	r3, r2, r3
 8010c90:	3b01      	subs	r3, #1
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	db7e      	blt.n	8010d94 <tcp_process+0x4a4>
 8010c96:	4b7b      	ldr	r3, [pc, #492]	@ (8010e84 <tcp_process+0x594>)
 8010c98:	681a      	ldr	r2, [r3, #0]
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010c9e:	1ad3      	subs	r3, r2, r3
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	dc77      	bgt.n	8010d94 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	2204      	movs	r2, #4
 8010ca8:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d102      	bne.n	8010cb8 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8010cb2:	23fa      	movs	r3, #250	@ 0xfa
 8010cb4:	76bb      	strb	r3, [r7, #26]
 8010cb6:	e01d      	b.n	8010cf4 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010cbc:	699b      	ldr	r3, [r3, #24]
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d106      	bne.n	8010cd0 <tcp_process+0x3e0>
 8010cc2:	4b76      	ldr	r3, [pc, #472]	@ (8010e9c <tcp_process+0x5ac>)
 8010cc4:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8010cc8:	4975      	ldr	r1, [pc, #468]	@ (8010ea0 <tcp_process+0x5b0>)
 8010cca:	4876      	ldr	r0, [pc, #472]	@ (8010ea4 <tcp_process+0x5b4>)
 8010ccc:	f006 fb02 	bl	80172d4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010cd4:	699b      	ldr	r3, [r3, #24]
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d00a      	beq.n	8010cf0 <tcp_process+0x400>
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010cde:	699b      	ldr	r3, [r3, #24]
 8010ce0:	687a      	ldr	r2, [r7, #4]
 8010ce2:	6910      	ldr	r0, [r2, #16]
 8010ce4:	2200      	movs	r2, #0
 8010ce6:	6879      	ldr	r1, [r7, #4]
 8010ce8:	4798      	blx	r3
 8010cea:	4603      	mov	r3, r0
 8010cec:	76bb      	strb	r3, [r7, #26]
 8010cee:	e001      	b.n	8010cf4 <tcp_process+0x404>
 8010cf0:	23f0      	movs	r3, #240	@ 0xf0
 8010cf2:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8010cf4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d00a      	beq.n	8010d12 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8010cfc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010d00:	f113 0f0d 	cmn.w	r3, #13
 8010d04:	d002      	beq.n	8010d0c <tcp_process+0x41c>
              tcp_abort(pcb);
 8010d06:	6878      	ldr	r0, [r7, #4]
 8010d08:	f7fd ff8c 	bl	800ec24 <tcp_abort>
            }
            return ERR_ABRT;
 8010d0c:	f06f 030c 	mvn.w	r3, #12
 8010d10:	e1ce      	b.n	80110b0 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8010d12:	6878      	ldr	r0, [r7, #4]
 8010d14:	f000 fae0 	bl	80112d8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8010d18:	4b63      	ldr	r3, [pc, #396]	@ (8010ea8 <tcp_process+0x5b8>)
 8010d1a:	881b      	ldrh	r3, [r3, #0]
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d005      	beq.n	8010d2c <tcp_process+0x43c>
            recv_acked--;
 8010d20:	4b61      	ldr	r3, [pc, #388]	@ (8010ea8 <tcp_process+0x5b8>)
 8010d22:	881b      	ldrh	r3, [r3, #0]
 8010d24:	3b01      	subs	r3, #1
 8010d26:	b29a      	uxth	r2, r3
 8010d28:	4b5f      	ldr	r3, [pc, #380]	@ (8010ea8 <tcp_process+0x5b8>)
 8010d2a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010d30:	009a      	lsls	r2, r3, #2
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010d36:	005b      	lsls	r3, r3, #1
 8010d38:	f241 111c 	movw	r1, #4380	@ 0x111c
 8010d3c:	428b      	cmp	r3, r1
 8010d3e:	bf38      	it	cc
 8010d40:	460b      	movcc	r3, r1
 8010d42:	429a      	cmp	r2, r3
 8010d44:	d204      	bcs.n	8010d50 <tcp_process+0x460>
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010d4a:	009b      	lsls	r3, r3, #2
 8010d4c:	b29b      	uxth	r3, r3
 8010d4e:	e00d      	b.n	8010d6c <tcp_process+0x47c>
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010d54:	005b      	lsls	r3, r3, #1
 8010d56:	f241 121c 	movw	r2, #4380	@ 0x111c
 8010d5a:	4293      	cmp	r3, r2
 8010d5c:	d904      	bls.n	8010d68 <tcp_process+0x478>
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010d62:	005b      	lsls	r3, r3, #1
 8010d64:	b29b      	uxth	r3, r3
 8010d66:	e001      	b.n	8010d6c <tcp_process+0x47c>
 8010d68:	f241 131c 	movw	r3, #4380	@ 0x111c
 8010d6c:	687a      	ldr	r2, [r7, #4]
 8010d6e:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8010d72:	4b4e      	ldr	r3, [pc, #312]	@ (8010eac <tcp_process+0x5bc>)
 8010d74:	781b      	ldrb	r3, [r3, #0]
 8010d76:	f003 0320 	and.w	r3, r3, #32
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	d037      	beq.n	8010dee <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	8b5b      	ldrh	r3, [r3, #26]
 8010d82:	f043 0302 	orr.w	r3, r3, #2
 8010d86:	b29a      	uxth	r2, r3
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	2207      	movs	r2, #7
 8010d90:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8010d92:	e02c      	b.n	8010dee <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010d94:	4b3b      	ldr	r3, [pc, #236]	@ (8010e84 <tcp_process+0x594>)
 8010d96:	6819      	ldr	r1, [r3, #0]
 8010d98:	4b3b      	ldr	r3, [pc, #236]	@ (8010e88 <tcp_process+0x598>)
 8010d9a:	881b      	ldrh	r3, [r3, #0]
 8010d9c:	461a      	mov	r2, r3
 8010d9e:	4b3b      	ldr	r3, [pc, #236]	@ (8010e8c <tcp_process+0x59c>)
 8010da0:	681b      	ldr	r3, [r3, #0]
 8010da2:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010da4:	4b3a      	ldr	r3, [pc, #232]	@ (8010e90 <tcp_process+0x5a0>)
 8010da6:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010da8:	885b      	ldrh	r3, [r3, #2]
 8010daa:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010dac:	4a38      	ldr	r2, [pc, #224]	@ (8010e90 <tcp_process+0x5a0>)
 8010dae:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010db0:	8812      	ldrh	r2, [r2, #0]
 8010db2:	b292      	uxth	r2, r2
 8010db4:	9202      	str	r2, [sp, #8]
 8010db6:	9301      	str	r3, [sp, #4]
 8010db8:	4b36      	ldr	r3, [pc, #216]	@ (8010e94 <tcp_process+0x5a4>)
 8010dba:	9300      	str	r3, [sp, #0]
 8010dbc:	4b36      	ldr	r3, [pc, #216]	@ (8010e98 <tcp_process+0x5a8>)
 8010dbe:	4602      	mov	r2, r0
 8010dc0:	6878      	ldr	r0, [r7, #4]
 8010dc2:	f002 fbcb 	bl	801355c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8010dc6:	e167      	b.n	8011098 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8010dc8:	4b2d      	ldr	r3, [pc, #180]	@ (8010e80 <tcp_process+0x590>)
 8010dca:	781b      	ldrb	r3, [r3, #0]
 8010dcc:	f003 0302 	and.w	r3, r3, #2
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	f000 8161 	beq.w	8011098 <tcp_process+0x7a8>
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010dda:	1e5a      	subs	r2, r3, #1
 8010ddc:	4b2b      	ldr	r3, [pc, #172]	@ (8010e8c <tcp_process+0x59c>)
 8010dde:	681b      	ldr	r3, [r3, #0]
 8010de0:	429a      	cmp	r2, r3
 8010de2:	f040 8159 	bne.w	8011098 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8010de6:	6878      	ldr	r0, [r7, #4]
 8010de8:	f002 f9b2 	bl	8013150 <tcp_rexmit>
      break;
 8010dec:	e154      	b.n	8011098 <tcp_process+0x7a8>
 8010dee:	e153      	b.n	8011098 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8010df0:	6878      	ldr	r0, [r7, #4]
 8010df2:	f000 fa71 	bl	80112d8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8010df6:	4b2d      	ldr	r3, [pc, #180]	@ (8010eac <tcp_process+0x5bc>)
 8010df8:	781b      	ldrb	r3, [r3, #0]
 8010dfa:	f003 0320 	and.w	r3, r3, #32
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	f000 814c 	beq.w	801109c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	8b5b      	ldrh	r3, [r3, #26]
 8010e08:	f043 0302 	orr.w	r3, r3, #2
 8010e0c:	b29a      	uxth	r2, r3
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	2207      	movs	r2, #7
 8010e16:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010e18:	e140      	b.n	801109c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8010e1a:	6878      	ldr	r0, [r7, #4]
 8010e1c:	f000 fa5c 	bl	80112d8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010e20:	4b22      	ldr	r3, [pc, #136]	@ (8010eac <tcp_process+0x5bc>)
 8010e22:	781b      	ldrb	r3, [r3, #0]
 8010e24:	f003 0320 	and.w	r3, r3, #32
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d071      	beq.n	8010f10 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010e2c:	4b14      	ldr	r3, [pc, #80]	@ (8010e80 <tcp_process+0x590>)
 8010e2e:	781b      	ldrb	r3, [r3, #0]
 8010e30:	f003 0310 	and.w	r3, r3, #16
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d060      	beq.n	8010efa <tcp_process+0x60a>
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010e3c:	4b11      	ldr	r3, [pc, #68]	@ (8010e84 <tcp_process+0x594>)
 8010e3e:	681b      	ldr	r3, [r3, #0]
 8010e40:	429a      	cmp	r2, r3
 8010e42:	d15a      	bne.n	8010efa <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d156      	bne.n	8010efa <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	8b5b      	ldrh	r3, [r3, #26]
 8010e50:	f043 0302 	orr.w	r3, r3, #2
 8010e54:	b29a      	uxth	r2, r3
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8010e5a:	6878      	ldr	r0, [r7, #4]
 8010e5c:	f7fe fdbc 	bl	800f9d8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8010e60:	4b13      	ldr	r3, [pc, #76]	@ (8010eb0 <tcp_process+0x5c0>)
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	687a      	ldr	r2, [r7, #4]
 8010e66:	429a      	cmp	r2, r3
 8010e68:	d105      	bne.n	8010e76 <tcp_process+0x586>
 8010e6a:	4b11      	ldr	r3, [pc, #68]	@ (8010eb0 <tcp_process+0x5c0>)
 8010e6c:	681b      	ldr	r3, [r3, #0]
 8010e6e:	68db      	ldr	r3, [r3, #12]
 8010e70:	4a0f      	ldr	r2, [pc, #60]	@ (8010eb0 <tcp_process+0x5c0>)
 8010e72:	6013      	str	r3, [r2, #0]
 8010e74:	e02e      	b.n	8010ed4 <tcp_process+0x5e4>
 8010e76:	4b0e      	ldr	r3, [pc, #56]	@ (8010eb0 <tcp_process+0x5c0>)
 8010e78:	681b      	ldr	r3, [r3, #0]
 8010e7a:	617b      	str	r3, [r7, #20]
 8010e7c:	e027      	b.n	8010ece <tcp_process+0x5de>
 8010e7e:	bf00      	nop
 8010e80:	2000c6cc 	.word	0x2000c6cc
 8010e84:	2000c6c4 	.word	0x2000c6c4
 8010e88:	2000c6ca 	.word	0x2000c6ca
 8010e8c:	2000c6c0 	.word	0x2000c6c0
 8010e90:	2000c6b0 	.word	0x2000c6b0
 8010e94:	20008f44 	.word	0x20008f44
 8010e98:	20008f48 	.word	0x20008f48
 8010e9c:	08019aac 	.word	0x08019aac
 8010ea0:	08019d4c 	.word	0x08019d4c
 8010ea4:	08019af8 	.word	0x08019af8
 8010ea8:	2000c6c8 	.word	0x2000c6c8
 8010eac:	2000c6cd 	.word	0x2000c6cd
 8010eb0:	2000c694 	.word	0x2000c694
 8010eb4:	697b      	ldr	r3, [r7, #20]
 8010eb6:	68db      	ldr	r3, [r3, #12]
 8010eb8:	687a      	ldr	r2, [r7, #4]
 8010eba:	429a      	cmp	r2, r3
 8010ebc:	d104      	bne.n	8010ec8 <tcp_process+0x5d8>
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	68da      	ldr	r2, [r3, #12]
 8010ec2:	697b      	ldr	r3, [r7, #20]
 8010ec4:	60da      	str	r2, [r3, #12]
 8010ec6:	e005      	b.n	8010ed4 <tcp_process+0x5e4>
 8010ec8:	697b      	ldr	r3, [r7, #20]
 8010eca:	68db      	ldr	r3, [r3, #12]
 8010ecc:	617b      	str	r3, [r7, #20]
 8010ece:	697b      	ldr	r3, [r7, #20]
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d1ef      	bne.n	8010eb4 <tcp_process+0x5c4>
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	2200      	movs	r2, #0
 8010ed8:	60da      	str	r2, [r3, #12]
 8010eda:	4b77      	ldr	r3, [pc, #476]	@ (80110b8 <tcp_process+0x7c8>)
 8010edc:	2201      	movs	r2, #1
 8010ede:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	220a      	movs	r2, #10
 8010ee4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8010ee6:	4b75      	ldr	r3, [pc, #468]	@ (80110bc <tcp_process+0x7cc>)
 8010ee8:	681a      	ldr	r2, [r3, #0]
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	60da      	str	r2, [r3, #12]
 8010eee:	4a73      	ldr	r2, [pc, #460]	@ (80110bc <tcp_process+0x7cc>)
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	6013      	str	r3, [r2, #0]
 8010ef4:	f002 fcf4 	bl	80138e0 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8010ef8:	e0d2      	b.n	80110a0 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	8b5b      	ldrh	r3, [r3, #26]
 8010efe:	f043 0302 	orr.w	r3, r3, #2
 8010f02:	b29a      	uxth	r2, r3
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	2208      	movs	r2, #8
 8010f0c:	751a      	strb	r2, [r3, #20]
      break;
 8010f0e:	e0c7      	b.n	80110a0 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010f10:	4b6b      	ldr	r3, [pc, #428]	@ (80110c0 <tcp_process+0x7d0>)
 8010f12:	781b      	ldrb	r3, [r3, #0]
 8010f14:	f003 0310 	and.w	r3, r3, #16
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	f000 80c1 	beq.w	80110a0 <tcp_process+0x7b0>
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010f22:	4b68      	ldr	r3, [pc, #416]	@ (80110c4 <tcp_process+0x7d4>)
 8010f24:	681b      	ldr	r3, [r3, #0]
 8010f26:	429a      	cmp	r2, r3
 8010f28:	f040 80ba 	bne.w	80110a0 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	f040 80b5 	bne.w	80110a0 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	2206      	movs	r2, #6
 8010f3a:	751a      	strb	r2, [r3, #20]
      break;
 8010f3c:	e0b0      	b.n	80110a0 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8010f3e:	6878      	ldr	r0, [r7, #4]
 8010f40:	f000 f9ca 	bl	80112d8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010f44:	4b60      	ldr	r3, [pc, #384]	@ (80110c8 <tcp_process+0x7d8>)
 8010f46:	781b      	ldrb	r3, [r3, #0]
 8010f48:	f003 0320 	and.w	r3, r3, #32
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	f000 80a9 	beq.w	80110a4 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	8b5b      	ldrh	r3, [r3, #26]
 8010f56:	f043 0302 	orr.w	r3, r3, #2
 8010f5a:	b29a      	uxth	r2, r3
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8010f60:	6878      	ldr	r0, [r7, #4]
 8010f62:	f7fe fd39 	bl	800f9d8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010f66:	4b59      	ldr	r3, [pc, #356]	@ (80110cc <tcp_process+0x7dc>)
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	687a      	ldr	r2, [r7, #4]
 8010f6c:	429a      	cmp	r2, r3
 8010f6e:	d105      	bne.n	8010f7c <tcp_process+0x68c>
 8010f70:	4b56      	ldr	r3, [pc, #344]	@ (80110cc <tcp_process+0x7dc>)
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	68db      	ldr	r3, [r3, #12]
 8010f76:	4a55      	ldr	r2, [pc, #340]	@ (80110cc <tcp_process+0x7dc>)
 8010f78:	6013      	str	r3, [r2, #0]
 8010f7a:	e013      	b.n	8010fa4 <tcp_process+0x6b4>
 8010f7c:	4b53      	ldr	r3, [pc, #332]	@ (80110cc <tcp_process+0x7dc>)
 8010f7e:	681b      	ldr	r3, [r3, #0]
 8010f80:	613b      	str	r3, [r7, #16]
 8010f82:	e00c      	b.n	8010f9e <tcp_process+0x6ae>
 8010f84:	693b      	ldr	r3, [r7, #16]
 8010f86:	68db      	ldr	r3, [r3, #12]
 8010f88:	687a      	ldr	r2, [r7, #4]
 8010f8a:	429a      	cmp	r2, r3
 8010f8c:	d104      	bne.n	8010f98 <tcp_process+0x6a8>
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	68da      	ldr	r2, [r3, #12]
 8010f92:	693b      	ldr	r3, [r7, #16]
 8010f94:	60da      	str	r2, [r3, #12]
 8010f96:	e005      	b.n	8010fa4 <tcp_process+0x6b4>
 8010f98:	693b      	ldr	r3, [r7, #16]
 8010f9a:	68db      	ldr	r3, [r3, #12]
 8010f9c:	613b      	str	r3, [r7, #16]
 8010f9e:	693b      	ldr	r3, [r7, #16]
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d1ef      	bne.n	8010f84 <tcp_process+0x694>
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	2200      	movs	r2, #0
 8010fa8:	60da      	str	r2, [r3, #12]
 8010faa:	4b43      	ldr	r3, [pc, #268]	@ (80110b8 <tcp_process+0x7c8>)
 8010fac:	2201      	movs	r2, #1
 8010fae:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	220a      	movs	r2, #10
 8010fb4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010fb6:	4b41      	ldr	r3, [pc, #260]	@ (80110bc <tcp_process+0x7cc>)
 8010fb8:	681a      	ldr	r2, [r3, #0]
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	60da      	str	r2, [r3, #12]
 8010fbe:	4a3f      	ldr	r2, [pc, #252]	@ (80110bc <tcp_process+0x7cc>)
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	6013      	str	r3, [r2, #0]
 8010fc4:	f002 fc8c 	bl	80138e0 <tcp_timer_needed>
      }
      break;
 8010fc8:	e06c      	b.n	80110a4 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8010fca:	6878      	ldr	r0, [r7, #4]
 8010fcc:	f000 f984 	bl	80112d8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010fd0:	4b3b      	ldr	r3, [pc, #236]	@ (80110c0 <tcp_process+0x7d0>)
 8010fd2:	781b      	ldrb	r3, [r3, #0]
 8010fd4:	f003 0310 	and.w	r3, r3, #16
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d065      	beq.n	80110a8 <tcp_process+0x7b8>
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010fe0:	4b38      	ldr	r3, [pc, #224]	@ (80110c4 <tcp_process+0x7d4>)
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	429a      	cmp	r2, r3
 8010fe6:	d15f      	bne.n	80110a8 <tcp_process+0x7b8>
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d15b      	bne.n	80110a8 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8010ff0:	6878      	ldr	r0, [r7, #4]
 8010ff2:	f7fe fcf1 	bl	800f9d8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010ff6:	4b35      	ldr	r3, [pc, #212]	@ (80110cc <tcp_process+0x7dc>)
 8010ff8:	681b      	ldr	r3, [r3, #0]
 8010ffa:	687a      	ldr	r2, [r7, #4]
 8010ffc:	429a      	cmp	r2, r3
 8010ffe:	d105      	bne.n	801100c <tcp_process+0x71c>
 8011000:	4b32      	ldr	r3, [pc, #200]	@ (80110cc <tcp_process+0x7dc>)
 8011002:	681b      	ldr	r3, [r3, #0]
 8011004:	68db      	ldr	r3, [r3, #12]
 8011006:	4a31      	ldr	r2, [pc, #196]	@ (80110cc <tcp_process+0x7dc>)
 8011008:	6013      	str	r3, [r2, #0]
 801100a:	e013      	b.n	8011034 <tcp_process+0x744>
 801100c:	4b2f      	ldr	r3, [pc, #188]	@ (80110cc <tcp_process+0x7dc>)
 801100e:	681b      	ldr	r3, [r3, #0]
 8011010:	60fb      	str	r3, [r7, #12]
 8011012:	e00c      	b.n	801102e <tcp_process+0x73e>
 8011014:	68fb      	ldr	r3, [r7, #12]
 8011016:	68db      	ldr	r3, [r3, #12]
 8011018:	687a      	ldr	r2, [r7, #4]
 801101a:	429a      	cmp	r2, r3
 801101c:	d104      	bne.n	8011028 <tcp_process+0x738>
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	68da      	ldr	r2, [r3, #12]
 8011022:	68fb      	ldr	r3, [r7, #12]
 8011024:	60da      	str	r2, [r3, #12]
 8011026:	e005      	b.n	8011034 <tcp_process+0x744>
 8011028:	68fb      	ldr	r3, [r7, #12]
 801102a:	68db      	ldr	r3, [r3, #12]
 801102c:	60fb      	str	r3, [r7, #12]
 801102e:	68fb      	ldr	r3, [r7, #12]
 8011030:	2b00      	cmp	r3, #0
 8011032:	d1ef      	bne.n	8011014 <tcp_process+0x724>
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	2200      	movs	r2, #0
 8011038:	60da      	str	r2, [r3, #12]
 801103a:	4b1f      	ldr	r3, [pc, #124]	@ (80110b8 <tcp_process+0x7c8>)
 801103c:	2201      	movs	r2, #1
 801103e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	220a      	movs	r2, #10
 8011044:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011046:	4b1d      	ldr	r3, [pc, #116]	@ (80110bc <tcp_process+0x7cc>)
 8011048:	681a      	ldr	r2, [r3, #0]
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	60da      	str	r2, [r3, #12]
 801104e:	4a1b      	ldr	r2, [pc, #108]	@ (80110bc <tcp_process+0x7cc>)
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	6013      	str	r3, [r2, #0]
 8011054:	f002 fc44 	bl	80138e0 <tcp_timer_needed>
      }
      break;
 8011058:	e026      	b.n	80110a8 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801105a:	6878      	ldr	r0, [r7, #4]
 801105c:	f000 f93c 	bl	80112d8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011060:	4b17      	ldr	r3, [pc, #92]	@ (80110c0 <tcp_process+0x7d0>)
 8011062:	781b      	ldrb	r3, [r3, #0]
 8011064:	f003 0310 	and.w	r3, r3, #16
 8011068:	2b00      	cmp	r3, #0
 801106a:	d01f      	beq.n	80110ac <tcp_process+0x7bc>
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011070:	4b14      	ldr	r3, [pc, #80]	@ (80110c4 <tcp_process+0x7d4>)
 8011072:	681b      	ldr	r3, [r3, #0]
 8011074:	429a      	cmp	r2, r3
 8011076:	d119      	bne.n	80110ac <tcp_process+0x7bc>
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801107c:	2b00      	cmp	r3, #0
 801107e:	d115      	bne.n	80110ac <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8011080:	4b11      	ldr	r3, [pc, #68]	@ (80110c8 <tcp_process+0x7d8>)
 8011082:	781b      	ldrb	r3, [r3, #0]
 8011084:	f043 0310 	orr.w	r3, r3, #16
 8011088:	b2da      	uxtb	r2, r3
 801108a:	4b0f      	ldr	r3, [pc, #60]	@ (80110c8 <tcp_process+0x7d8>)
 801108c:	701a      	strb	r2, [r3, #0]
      }
      break;
 801108e:	e00d      	b.n	80110ac <tcp_process+0x7bc>
    default:
      break;
 8011090:	bf00      	nop
 8011092:	e00c      	b.n	80110ae <tcp_process+0x7be>
      break;
 8011094:	bf00      	nop
 8011096:	e00a      	b.n	80110ae <tcp_process+0x7be>
      break;
 8011098:	bf00      	nop
 801109a:	e008      	b.n	80110ae <tcp_process+0x7be>
      break;
 801109c:	bf00      	nop
 801109e:	e006      	b.n	80110ae <tcp_process+0x7be>
      break;
 80110a0:	bf00      	nop
 80110a2:	e004      	b.n	80110ae <tcp_process+0x7be>
      break;
 80110a4:	bf00      	nop
 80110a6:	e002      	b.n	80110ae <tcp_process+0x7be>
      break;
 80110a8:	bf00      	nop
 80110aa:	e000      	b.n	80110ae <tcp_process+0x7be>
      break;
 80110ac:	bf00      	nop
  }
  return ERR_OK;
 80110ae:	2300      	movs	r3, #0
}
 80110b0:	4618      	mov	r0, r3
 80110b2:	3724      	adds	r7, #36	@ 0x24
 80110b4:	46bd      	mov	sp, r7
 80110b6:	bd90      	pop	{r4, r7, pc}
 80110b8:	2000c69c 	.word	0x2000c69c
 80110bc:	2000c698 	.word	0x2000c698
 80110c0:	2000c6cc 	.word	0x2000c6cc
 80110c4:	2000c6c4 	.word	0x2000c6c4
 80110c8:	2000c6cd 	.word	0x2000c6cd
 80110cc:	2000c694 	.word	0x2000c694

080110d0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80110d0:	b590      	push	{r4, r7, lr}
 80110d2:	b085      	sub	sp, #20
 80110d4:	af00      	add	r7, sp, #0
 80110d6:	6078      	str	r0, [r7, #4]
 80110d8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	2b00      	cmp	r3, #0
 80110de:	d106      	bne.n	80110ee <tcp_oos_insert_segment+0x1e>
 80110e0:	4b3b      	ldr	r3, [pc, #236]	@ (80111d0 <tcp_oos_insert_segment+0x100>)
 80110e2:	f240 421f 	movw	r2, #1055	@ 0x41f
 80110e6:	493b      	ldr	r1, [pc, #236]	@ (80111d4 <tcp_oos_insert_segment+0x104>)
 80110e8:	483b      	ldr	r0, [pc, #236]	@ (80111d8 <tcp_oos_insert_segment+0x108>)
 80110ea:	f006 f8f3 	bl	80172d4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	68db      	ldr	r3, [r3, #12]
 80110f2:	899b      	ldrh	r3, [r3, #12]
 80110f4:	b29b      	uxth	r3, r3
 80110f6:	4618      	mov	r0, r3
 80110f8:	f7fb fc40 	bl	800c97c <lwip_htons>
 80110fc:	4603      	mov	r3, r0
 80110fe:	b2db      	uxtb	r3, r3
 8011100:	f003 0301 	and.w	r3, r3, #1
 8011104:	2b00      	cmp	r3, #0
 8011106:	d028      	beq.n	801115a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8011108:	6838      	ldr	r0, [r7, #0]
 801110a:	f7fe fa63 	bl	800f5d4 <tcp_segs_free>
    next = NULL;
 801110e:	2300      	movs	r3, #0
 8011110:	603b      	str	r3, [r7, #0]
 8011112:	e056      	b.n	80111c2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011114:	683b      	ldr	r3, [r7, #0]
 8011116:	68db      	ldr	r3, [r3, #12]
 8011118:	899b      	ldrh	r3, [r3, #12]
 801111a:	b29b      	uxth	r3, r3
 801111c:	4618      	mov	r0, r3
 801111e:	f7fb fc2d 	bl	800c97c <lwip_htons>
 8011122:	4603      	mov	r3, r0
 8011124:	b2db      	uxtb	r3, r3
 8011126:	f003 0301 	and.w	r3, r3, #1
 801112a:	2b00      	cmp	r3, #0
 801112c:	d00d      	beq.n	801114a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	68db      	ldr	r3, [r3, #12]
 8011132:	899b      	ldrh	r3, [r3, #12]
 8011134:	b29c      	uxth	r4, r3
 8011136:	2001      	movs	r0, #1
 8011138:	f7fb fc20 	bl	800c97c <lwip_htons>
 801113c:	4603      	mov	r3, r0
 801113e:	461a      	mov	r2, r3
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	68db      	ldr	r3, [r3, #12]
 8011144:	4322      	orrs	r2, r4
 8011146:	b292      	uxth	r2, r2
 8011148:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801114a:	683b      	ldr	r3, [r7, #0]
 801114c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801114e:	683b      	ldr	r3, [r7, #0]
 8011150:	681b      	ldr	r3, [r3, #0]
 8011152:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8011154:	68f8      	ldr	r0, [r7, #12]
 8011156:	f7fe fa52 	bl	800f5fe <tcp_seg_free>
    while (next &&
 801115a:	683b      	ldr	r3, [r7, #0]
 801115c:	2b00      	cmp	r3, #0
 801115e:	d00e      	beq.n	801117e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	891b      	ldrh	r3, [r3, #8]
 8011164:	461a      	mov	r2, r3
 8011166:	4b1d      	ldr	r3, [pc, #116]	@ (80111dc <tcp_oos_insert_segment+0x10c>)
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	441a      	add	r2, r3
 801116c:	683b      	ldr	r3, [r7, #0]
 801116e:	68db      	ldr	r3, [r3, #12]
 8011170:	685b      	ldr	r3, [r3, #4]
 8011172:	6839      	ldr	r1, [r7, #0]
 8011174:	8909      	ldrh	r1, [r1, #8]
 8011176:	440b      	add	r3, r1
 8011178:	1ad3      	subs	r3, r2, r3
    while (next &&
 801117a:	2b00      	cmp	r3, #0
 801117c:	daca      	bge.n	8011114 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801117e:	683b      	ldr	r3, [r7, #0]
 8011180:	2b00      	cmp	r3, #0
 8011182:	d01e      	beq.n	80111c2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	891b      	ldrh	r3, [r3, #8]
 8011188:	461a      	mov	r2, r3
 801118a:	4b14      	ldr	r3, [pc, #80]	@ (80111dc <tcp_oos_insert_segment+0x10c>)
 801118c:	681b      	ldr	r3, [r3, #0]
 801118e:	441a      	add	r2, r3
 8011190:	683b      	ldr	r3, [r7, #0]
 8011192:	68db      	ldr	r3, [r3, #12]
 8011194:	685b      	ldr	r3, [r3, #4]
 8011196:	1ad3      	subs	r3, r2, r3
    if (next &&
 8011198:	2b00      	cmp	r3, #0
 801119a:	dd12      	ble.n	80111c2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801119c:	683b      	ldr	r3, [r7, #0]
 801119e:	68db      	ldr	r3, [r3, #12]
 80111a0:	685b      	ldr	r3, [r3, #4]
 80111a2:	b29a      	uxth	r2, r3
 80111a4:	4b0d      	ldr	r3, [pc, #52]	@ (80111dc <tcp_oos_insert_segment+0x10c>)
 80111a6:	681b      	ldr	r3, [r3, #0]
 80111a8:	b29b      	uxth	r3, r3
 80111aa:	1ad3      	subs	r3, r2, r3
 80111ac:	b29a      	uxth	r2, r3
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	685a      	ldr	r2, [r3, #4]
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	891b      	ldrh	r3, [r3, #8]
 80111ba:	4619      	mov	r1, r3
 80111bc:	4610      	mov	r0, r2
 80111be:	f7fc fe17 	bl	800ddf0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	683a      	ldr	r2, [r7, #0]
 80111c6:	601a      	str	r2, [r3, #0]
}
 80111c8:	bf00      	nop
 80111ca:	3714      	adds	r7, #20
 80111cc:	46bd      	mov	sp, r7
 80111ce:	bd90      	pop	{r4, r7, pc}
 80111d0:	08019aac 	.word	0x08019aac
 80111d4:	08019d6c 	.word	0x08019d6c
 80111d8:	08019af8 	.word	0x08019af8
 80111dc:	2000c6c0 	.word	0x2000c6c0

080111e0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80111e0:	b5b0      	push	{r4, r5, r7, lr}
 80111e2:	b086      	sub	sp, #24
 80111e4:	af00      	add	r7, sp, #0
 80111e6:	60f8      	str	r0, [r7, #12]
 80111e8:	60b9      	str	r1, [r7, #8]
 80111ea:	607a      	str	r2, [r7, #4]
 80111ec:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80111ee:	e03e      	b.n	801126e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80111f0:	68bb      	ldr	r3, [r7, #8]
 80111f2:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80111f4:	68bb      	ldr	r3, [r7, #8]
 80111f6:	681b      	ldr	r3, [r3, #0]
 80111f8:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80111fa:	697b      	ldr	r3, [r7, #20]
 80111fc:	685b      	ldr	r3, [r3, #4]
 80111fe:	4618      	mov	r0, r3
 8011200:	f7fd f80a 	bl	800e218 <pbuf_clen>
 8011204:	4603      	mov	r3, r0
 8011206:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8011208:	68fb      	ldr	r3, [r7, #12]
 801120a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801120e:	8a7a      	ldrh	r2, [r7, #18]
 8011210:	429a      	cmp	r2, r3
 8011212:	d906      	bls.n	8011222 <tcp_free_acked_segments+0x42>
 8011214:	4b2a      	ldr	r3, [pc, #168]	@ (80112c0 <tcp_free_acked_segments+0xe0>)
 8011216:	f240 4257 	movw	r2, #1111	@ 0x457
 801121a:	492a      	ldr	r1, [pc, #168]	@ (80112c4 <tcp_free_acked_segments+0xe4>)
 801121c:	482a      	ldr	r0, [pc, #168]	@ (80112c8 <tcp_free_acked_segments+0xe8>)
 801121e:	f006 f859 	bl	80172d4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8011222:	68fb      	ldr	r3, [r7, #12]
 8011224:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8011228:	8a7b      	ldrh	r3, [r7, #18]
 801122a:	1ad3      	subs	r3, r2, r3
 801122c:	b29a      	uxth	r2, r3
 801122e:	68fb      	ldr	r3, [r7, #12]
 8011230:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8011234:	697b      	ldr	r3, [r7, #20]
 8011236:	891a      	ldrh	r2, [r3, #8]
 8011238:	4b24      	ldr	r3, [pc, #144]	@ (80112cc <tcp_free_acked_segments+0xec>)
 801123a:	881b      	ldrh	r3, [r3, #0]
 801123c:	4413      	add	r3, r2
 801123e:	b29a      	uxth	r2, r3
 8011240:	4b22      	ldr	r3, [pc, #136]	@ (80112cc <tcp_free_acked_segments+0xec>)
 8011242:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8011244:	6978      	ldr	r0, [r7, #20]
 8011246:	f7fe f9da 	bl	800f5fe <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801124a:	68fb      	ldr	r3, [r7, #12]
 801124c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011250:	2b00      	cmp	r3, #0
 8011252:	d00c      	beq.n	801126e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8011254:	68bb      	ldr	r3, [r7, #8]
 8011256:	2b00      	cmp	r3, #0
 8011258:	d109      	bne.n	801126e <tcp_free_acked_segments+0x8e>
 801125a:	683b      	ldr	r3, [r7, #0]
 801125c:	2b00      	cmp	r3, #0
 801125e:	d106      	bne.n	801126e <tcp_free_acked_segments+0x8e>
 8011260:	4b17      	ldr	r3, [pc, #92]	@ (80112c0 <tcp_free_acked_segments+0xe0>)
 8011262:	f240 4261 	movw	r2, #1121	@ 0x461
 8011266:	491a      	ldr	r1, [pc, #104]	@ (80112d0 <tcp_free_acked_segments+0xf0>)
 8011268:	4817      	ldr	r0, [pc, #92]	@ (80112c8 <tcp_free_acked_segments+0xe8>)
 801126a:	f006 f833 	bl	80172d4 <iprintf>
  while (seg_list != NULL &&
 801126e:	68bb      	ldr	r3, [r7, #8]
 8011270:	2b00      	cmp	r3, #0
 8011272:	d020      	beq.n	80112b6 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8011274:	68bb      	ldr	r3, [r7, #8]
 8011276:	68db      	ldr	r3, [r3, #12]
 8011278:	685b      	ldr	r3, [r3, #4]
 801127a:	4618      	mov	r0, r3
 801127c:	f7fb fb94 	bl	800c9a8 <lwip_htonl>
 8011280:	4604      	mov	r4, r0
 8011282:	68bb      	ldr	r3, [r7, #8]
 8011284:	891b      	ldrh	r3, [r3, #8]
 8011286:	461d      	mov	r5, r3
 8011288:	68bb      	ldr	r3, [r7, #8]
 801128a:	68db      	ldr	r3, [r3, #12]
 801128c:	899b      	ldrh	r3, [r3, #12]
 801128e:	b29b      	uxth	r3, r3
 8011290:	4618      	mov	r0, r3
 8011292:	f7fb fb73 	bl	800c97c <lwip_htons>
 8011296:	4603      	mov	r3, r0
 8011298:	b2db      	uxtb	r3, r3
 801129a:	f003 0303 	and.w	r3, r3, #3
 801129e:	2b00      	cmp	r3, #0
 80112a0:	d001      	beq.n	80112a6 <tcp_free_acked_segments+0xc6>
 80112a2:	2301      	movs	r3, #1
 80112a4:	e000      	b.n	80112a8 <tcp_free_acked_segments+0xc8>
 80112a6:	2300      	movs	r3, #0
 80112a8:	442b      	add	r3, r5
 80112aa:	18e2      	adds	r2, r4, r3
 80112ac:	4b09      	ldr	r3, [pc, #36]	@ (80112d4 <tcp_free_acked_segments+0xf4>)
 80112ae:	681b      	ldr	r3, [r3, #0]
 80112b0:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	dd9c      	ble.n	80111f0 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80112b6:	68bb      	ldr	r3, [r7, #8]
}
 80112b8:	4618      	mov	r0, r3
 80112ba:	3718      	adds	r7, #24
 80112bc:	46bd      	mov	sp, r7
 80112be:	bdb0      	pop	{r4, r5, r7, pc}
 80112c0:	08019aac 	.word	0x08019aac
 80112c4:	08019d94 	.word	0x08019d94
 80112c8:	08019af8 	.word	0x08019af8
 80112cc:	2000c6c8 	.word	0x2000c6c8
 80112d0:	08019dbc 	.word	0x08019dbc
 80112d4:	2000c6c4 	.word	0x2000c6c4

080112d8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80112d8:	b5b0      	push	{r4, r5, r7, lr}
 80112da:	b094      	sub	sp, #80	@ 0x50
 80112dc:	af00      	add	r7, sp, #0
 80112de:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80112e0:	2300      	movs	r3, #0
 80112e2:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d106      	bne.n	80112f8 <tcp_receive+0x20>
 80112ea:	4b91      	ldr	r3, [pc, #580]	@ (8011530 <tcp_receive+0x258>)
 80112ec:	f240 427b 	movw	r2, #1147	@ 0x47b
 80112f0:	4990      	ldr	r1, [pc, #576]	@ (8011534 <tcp_receive+0x25c>)
 80112f2:	4891      	ldr	r0, [pc, #580]	@ (8011538 <tcp_receive+0x260>)
 80112f4:	f005 ffee 	bl	80172d4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	7d1b      	ldrb	r3, [r3, #20]
 80112fc:	2b03      	cmp	r3, #3
 80112fe:	d806      	bhi.n	801130e <tcp_receive+0x36>
 8011300:	4b8b      	ldr	r3, [pc, #556]	@ (8011530 <tcp_receive+0x258>)
 8011302:	f240 427c 	movw	r2, #1148	@ 0x47c
 8011306:	498d      	ldr	r1, [pc, #564]	@ (801153c <tcp_receive+0x264>)
 8011308:	488b      	ldr	r0, [pc, #556]	@ (8011538 <tcp_receive+0x260>)
 801130a:	f005 ffe3 	bl	80172d4 <iprintf>

  if (flags & TCP_ACK) {
 801130e:	4b8c      	ldr	r3, [pc, #560]	@ (8011540 <tcp_receive+0x268>)
 8011310:	781b      	ldrb	r3, [r3, #0]
 8011312:	f003 0310 	and.w	r3, r3, #16
 8011316:	2b00      	cmp	r3, #0
 8011318:	f000 8264 	beq.w	80117e4 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8011322:	461a      	mov	r2, r3
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011328:	4413      	add	r3, r2
 801132a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8011330:	4b84      	ldr	r3, [pc, #528]	@ (8011544 <tcp_receive+0x26c>)
 8011332:	681b      	ldr	r3, [r3, #0]
 8011334:	1ad3      	subs	r3, r2, r3
 8011336:	2b00      	cmp	r3, #0
 8011338:	db1b      	blt.n	8011372 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801133e:	4b81      	ldr	r3, [pc, #516]	@ (8011544 <tcp_receive+0x26c>)
 8011340:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8011342:	429a      	cmp	r2, r3
 8011344:	d106      	bne.n	8011354 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801134a:	4b7f      	ldr	r3, [pc, #508]	@ (8011548 <tcp_receive+0x270>)
 801134c:	681b      	ldr	r3, [r3, #0]
 801134e:	1ad3      	subs	r3, r2, r3
 8011350:	2b00      	cmp	r3, #0
 8011352:	db0e      	blt.n	8011372 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8011358:	4b7b      	ldr	r3, [pc, #492]	@ (8011548 <tcp_receive+0x270>)
 801135a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801135c:	429a      	cmp	r2, r3
 801135e:	d125      	bne.n	80113ac <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011360:	4b7a      	ldr	r3, [pc, #488]	@ (801154c <tcp_receive+0x274>)
 8011362:	681b      	ldr	r3, [r3, #0]
 8011364:	89db      	ldrh	r3, [r3, #14]
 8011366:	b29a      	uxth	r2, r3
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801136e:	429a      	cmp	r2, r3
 8011370:	d91c      	bls.n	80113ac <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8011372:	4b76      	ldr	r3, [pc, #472]	@ (801154c <tcp_receive+0x274>)
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	89db      	ldrh	r3, [r3, #14]
 8011378:	b29a      	uxth	r2, r3
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801138c:	429a      	cmp	r2, r3
 801138e:	d205      	bcs.n	801139c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 801139c:	4b69      	ldr	r3, [pc, #420]	@ (8011544 <tcp_receive+0x26c>)
 801139e:	681a      	ldr	r2, [r3, #0]
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 80113a4:	4b68      	ldr	r3, [pc, #416]	@ (8011548 <tcp_receive+0x270>)
 80113a6:	681a      	ldr	r2, [r3, #0]
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80113ac:	4b66      	ldr	r3, [pc, #408]	@ (8011548 <tcp_receive+0x270>)
 80113ae:	681a      	ldr	r2, [r3, #0]
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80113b4:	1ad3      	subs	r3, r2, r3
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	dc58      	bgt.n	801146c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80113ba:	4b65      	ldr	r3, [pc, #404]	@ (8011550 <tcp_receive+0x278>)
 80113bc:	881b      	ldrh	r3, [r3, #0]
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d14b      	bne.n	801145a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80113c6:	687a      	ldr	r2, [r7, #4]
 80113c8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 80113cc:	4413      	add	r3, r2
 80113ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80113d0:	429a      	cmp	r2, r3
 80113d2:	d142      	bne.n	801145a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80113da:	2b00      	cmp	r3, #0
 80113dc:	db3d      	blt.n	801145a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80113e2:	4b59      	ldr	r3, [pc, #356]	@ (8011548 <tcp_receive+0x270>)
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	429a      	cmp	r2, r3
 80113e8:	d137      	bne.n	801145a <tcp_receive+0x182>
              found_dupack = 1;
 80113ea:	2301      	movs	r3, #1
 80113ec:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80113f4:	2bff      	cmp	r3, #255	@ 0xff
 80113f6:	d007      	beq.n	8011408 <tcp_receive+0x130>
                ++pcb->dupacks;
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80113fe:	3301      	adds	r3, #1
 8011400:	b2da      	uxtb	r2, r3
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801140e:	2b03      	cmp	r3, #3
 8011410:	d91b      	bls.n	801144a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801141c:	4413      	add	r3, r2
 801141e:	b29a      	uxth	r2, r3
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8011426:	429a      	cmp	r2, r3
 8011428:	d30a      	bcc.n	8011440 <tcp_receive+0x168>
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011434:	4413      	add	r3, r2
 8011436:	b29a      	uxth	r2, r3
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801143e:	e004      	b.n	801144a <tcp_receive+0x172>
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011446:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8011450:	2b02      	cmp	r3, #2
 8011452:	d902      	bls.n	801145a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8011454:	6878      	ldr	r0, [r7, #4]
 8011456:	f001 fee7 	bl	8013228 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801145a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801145c:	2b00      	cmp	r3, #0
 801145e:	f040 8161 	bne.w	8011724 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	2200      	movs	r2, #0
 8011466:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801146a:	e15b      	b.n	8011724 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801146c:	4b36      	ldr	r3, [pc, #216]	@ (8011548 <tcp_receive+0x270>)
 801146e:	681a      	ldr	r2, [r3, #0]
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011474:	1ad3      	subs	r3, r2, r3
 8011476:	3b01      	subs	r3, #1
 8011478:	2b00      	cmp	r3, #0
 801147a:	f2c0 814e 	blt.w	801171a <tcp_receive+0x442>
 801147e:	4b32      	ldr	r3, [pc, #200]	@ (8011548 <tcp_receive+0x270>)
 8011480:	681a      	ldr	r2, [r3, #0]
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011486:	1ad3      	subs	r3, r2, r3
 8011488:	2b00      	cmp	r3, #0
 801148a:	f300 8146 	bgt.w	801171a <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	8b5b      	ldrh	r3, [r3, #26]
 8011492:	f003 0304 	and.w	r3, r3, #4
 8011496:	2b00      	cmp	r3, #0
 8011498:	d010      	beq.n	80114bc <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	8b5b      	ldrh	r3, [r3, #26]
 801149e:	f023 0304 	bic.w	r3, r3, #4
 80114a2:	b29a      	uxth	r2, r3
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	2200      	movs	r2, #0
 80114b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	2200      	movs	r2, #0
 80114c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80114ca:	10db      	asrs	r3, r3, #3
 80114cc:	b21b      	sxth	r3, r3
 80114ce:	b29a      	uxth	r2, r3
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80114d6:	b29b      	uxth	r3, r3
 80114d8:	4413      	add	r3, r2
 80114da:	b29b      	uxth	r3, r3
 80114dc:	b21a      	sxth	r2, r3
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80114e4:	4b18      	ldr	r3, [pc, #96]	@ (8011548 <tcp_receive+0x270>)
 80114e6:	681b      	ldr	r3, [r3, #0]
 80114e8:	b29a      	uxth	r2, r3
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80114ee:	b29b      	uxth	r3, r3
 80114f0:	1ad3      	subs	r3, r2, r3
 80114f2:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	2200      	movs	r2, #0
 80114f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 80114fc:	4b12      	ldr	r3, [pc, #72]	@ (8011548 <tcp_receive+0x270>)
 80114fe:	681a      	ldr	r2, [r3, #0]
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	7d1b      	ldrb	r3, [r3, #20]
 8011508:	2b03      	cmp	r3, #3
 801150a:	f240 8097 	bls.w	801163c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801151a:	429a      	cmp	r2, r3
 801151c:	d245      	bcs.n	80115aa <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	8b5b      	ldrh	r3, [r3, #26]
 8011522:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8011526:	2b00      	cmp	r3, #0
 8011528:	d014      	beq.n	8011554 <tcp_receive+0x27c>
 801152a:	2301      	movs	r3, #1
 801152c:	e013      	b.n	8011556 <tcp_receive+0x27e>
 801152e:	bf00      	nop
 8011530:	08019aac 	.word	0x08019aac
 8011534:	08019ddc 	.word	0x08019ddc
 8011538:	08019af8 	.word	0x08019af8
 801153c:	08019df8 	.word	0x08019df8
 8011540:	2000c6cc 	.word	0x2000c6cc
 8011544:	2000c6c0 	.word	0x2000c6c0
 8011548:	2000c6c4 	.word	0x2000c6c4
 801154c:	2000c6b0 	.word	0x2000c6b0
 8011550:	2000c6ca 	.word	0x2000c6ca
 8011554:	2302      	movs	r3, #2
 8011556:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801155a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 801155e:	b29a      	uxth	r2, r3
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011564:	fb12 f303 	smulbb	r3, r2, r3
 8011568:	b29b      	uxth	r3, r3
 801156a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801156c:	4293      	cmp	r3, r2
 801156e:	bf28      	it	cs
 8011570:	4613      	movcs	r3, r2
 8011572:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801157a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801157c:	4413      	add	r3, r2
 801157e:	b29a      	uxth	r2, r3
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8011586:	429a      	cmp	r2, r3
 8011588:	d309      	bcc.n	801159e <tcp_receive+0x2c6>
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8011590:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011592:	4413      	add	r3, r2
 8011594:	b29a      	uxth	r2, r3
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801159c:	e04e      	b.n	801163c <tcp_receive+0x364>
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80115a4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80115a8:	e048      	b.n	801163c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80115b0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80115b2:	4413      	add	r3, r2
 80115b4:	b29a      	uxth	r2, r3
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80115bc:	429a      	cmp	r2, r3
 80115be:	d309      	bcc.n	80115d4 <tcp_receive+0x2fc>
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80115c6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80115c8:	4413      	add	r3, r2
 80115ca:	b29a      	uxth	r2, r3
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80115d2:	e004      	b.n	80115de <tcp_receive+0x306>
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80115da:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80115ea:	429a      	cmp	r2, r3
 80115ec:	d326      	bcc.n	801163c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80115fa:	1ad3      	subs	r3, r2, r3
 80115fc:	b29a      	uxth	r2, r3
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801160e:	4413      	add	r3, r2
 8011610:	b29a      	uxth	r2, r3
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8011618:	429a      	cmp	r2, r3
 801161a:	d30a      	bcc.n	8011632 <tcp_receive+0x35a>
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011626:	4413      	add	r3, r2
 8011628:	b29a      	uxth	r2, r3
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8011630:	e004      	b.n	801163c <tcp_receive+0x364>
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011638:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011644:	4a98      	ldr	r2, [pc, #608]	@ (80118a8 <tcp_receive+0x5d0>)
 8011646:	6878      	ldr	r0, [r7, #4]
 8011648:	f7ff fdca 	bl	80111e0 <tcp_free_acked_segments>
 801164c:	4602      	mov	r2, r0
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801165a:	4a94      	ldr	r2, [pc, #592]	@ (80118ac <tcp_receive+0x5d4>)
 801165c:	6878      	ldr	r0, [r7, #4]
 801165e:	f7ff fdbf 	bl	80111e0 <tcp_free_acked_segments>
 8011662:	4602      	mov	r2, r0
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801166c:	2b00      	cmp	r3, #0
 801166e:	d104      	bne.n	801167a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011676:	861a      	strh	r2, [r3, #48]	@ 0x30
 8011678:	e002      	b.n	8011680 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	2200      	movs	r2, #0
 801167e:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	2200      	movs	r2, #0
 8011684:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801168a:	2b00      	cmp	r3, #0
 801168c:	d103      	bne.n	8011696 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	2200      	movs	r2, #0
 8011692:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 801169c:	4b84      	ldr	r3, [pc, #528]	@ (80118b0 <tcp_receive+0x5d8>)
 801169e:	881b      	ldrh	r3, [r3, #0]
 80116a0:	4413      	add	r3, r2
 80116a2:	b29a      	uxth	r2, r3
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	8b5b      	ldrh	r3, [r3, #26]
 80116ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d035      	beq.n	8011722 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d118      	bne.n	80116f0 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	d00c      	beq.n	80116e0 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80116ce:	68db      	ldr	r3, [r3, #12]
 80116d0:	685b      	ldr	r3, [r3, #4]
 80116d2:	4618      	mov	r0, r3
 80116d4:	f7fb f968 	bl	800c9a8 <lwip_htonl>
 80116d8:	4603      	mov	r3, r0
 80116da:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80116dc:	2b00      	cmp	r3, #0
 80116de:	dc20      	bgt.n	8011722 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	8b5b      	ldrh	r3, [r3, #26]
 80116e4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80116e8:	b29a      	uxth	r2, r3
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80116ee:	e018      	b.n	8011722 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80116f8:	68db      	ldr	r3, [r3, #12]
 80116fa:	685b      	ldr	r3, [r3, #4]
 80116fc:	4618      	mov	r0, r3
 80116fe:	f7fb f953 	bl	800c9a8 <lwip_htonl>
 8011702:	4603      	mov	r3, r0
 8011704:	1ae3      	subs	r3, r4, r3
 8011706:	2b00      	cmp	r3, #0
 8011708:	dc0b      	bgt.n	8011722 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	8b5b      	ldrh	r3, [r3, #26]
 801170e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8011712:	b29a      	uxth	r2, r3
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011718:	e003      	b.n	8011722 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801171a:	6878      	ldr	r0, [r7, #4]
 801171c:	f001 ff70 	bl	8013600 <tcp_send_empty_ack>
 8011720:	e000      	b.n	8011724 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011722:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011728:	2b00      	cmp	r3, #0
 801172a:	d05b      	beq.n	80117e4 <tcp_receive+0x50c>
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011730:	4b60      	ldr	r3, [pc, #384]	@ (80118b4 <tcp_receive+0x5dc>)
 8011732:	681b      	ldr	r3, [r3, #0]
 8011734:	1ad3      	subs	r3, r2, r3
 8011736:	2b00      	cmp	r3, #0
 8011738:	da54      	bge.n	80117e4 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801173a:	4b5f      	ldr	r3, [pc, #380]	@ (80118b8 <tcp_receive+0x5e0>)
 801173c:	681b      	ldr	r3, [r3, #0]
 801173e:	b29a      	uxth	r2, r3
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011744:	b29b      	uxth	r3, r3
 8011746:	1ad3      	subs	r3, r2, r3
 8011748:	b29b      	uxth	r3, r3
 801174a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801174e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8011758:	10db      	asrs	r3, r3, #3
 801175a:	b21b      	sxth	r3, r3
 801175c:	b29b      	uxth	r3, r3
 801175e:	1ad3      	subs	r3, r2, r3
 8011760:	b29b      	uxth	r3, r3
 8011762:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801176c:	b29a      	uxth	r2, r3
 801176e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8011772:	4413      	add	r3, r2
 8011774:	b29b      	uxth	r3, r3
 8011776:	b21a      	sxth	r2, r3
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 801177c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8011780:	2b00      	cmp	r3, #0
 8011782:	da05      	bge.n	8011790 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8011784:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8011788:	425b      	negs	r3, r3
 801178a:	b29b      	uxth	r3, r3
 801178c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8011790:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801179a:	109b      	asrs	r3, r3, #2
 801179c:	b21b      	sxth	r3, r3
 801179e:	b29b      	uxth	r3, r3
 80117a0:	1ad3      	subs	r3, r2, r3
 80117a2:	b29b      	uxth	r3, r3
 80117a4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80117ae:	b29a      	uxth	r2, r3
 80117b0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80117b4:	4413      	add	r3, r2
 80117b6:	b29b      	uxth	r3, r3
 80117b8:	b21a      	sxth	r2, r3
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80117c4:	10db      	asrs	r3, r3, #3
 80117c6:	b21b      	sxth	r3, r3
 80117c8:	b29a      	uxth	r2, r3
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80117d0:	b29b      	uxth	r3, r3
 80117d2:	4413      	add	r3, r2
 80117d4:	b29b      	uxth	r3, r3
 80117d6:	b21a      	sxth	r2, r3
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	2200      	movs	r2, #0
 80117e2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80117e4:	4b35      	ldr	r3, [pc, #212]	@ (80118bc <tcp_receive+0x5e4>)
 80117e6:	881b      	ldrh	r3, [r3, #0]
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	f000 84df 	beq.w	80121ac <tcp_receive+0xed4>
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	7d1b      	ldrb	r3, [r3, #20]
 80117f2:	2b06      	cmp	r3, #6
 80117f4:	f200 84da 	bhi.w	80121ac <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80117fc:	4b30      	ldr	r3, [pc, #192]	@ (80118c0 <tcp_receive+0x5e8>)
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	1ad3      	subs	r3, r2, r3
 8011802:	3b01      	subs	r3, #1
 8011804:	2b00      	cmp	r3, #0
 8011806:	f2c0 808f 	blt.w	8011928 <tcp_receive+0x650>
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801180e:	4b2b      	ldr	r3, [pc, #172]	@ (80118bc <tcp_receive+0x5e4>)
 8011810:	881b      	ldrh	r3, [r3, #0]
 8011812:	4619      	mov	r1, r3
 8011814:	4b2a      	ldr	r3, [pc, #168]	@ (80118c0 <tcp_receive+0x5e8>)
 8011816:	681b      	ldr	r3, [r3, #0]
 8011818:	440b      	add	r3, r1
 801181a:	1ad3      	subs	r3, r2, r3
 801181c:	3301      	adds	r3, #1
 801181e:	2b00      	cmp	r3, #0
 8011820:	f300 8082 	bgt.w	8011928 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8011824:	4b27      	ldr	r3, [pc, #156]	@ (80118c4 <tcp_receive+0x5ec>)
 8011826:	685b      	ldr	r3, [r3, #4]
 8011828:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801182e:	4b24      	ldr	r3, [pc, #144]	@ (80118c0 <tcp_receive+0x5e8>)
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	1ad3      	subs	r3, r2, r3
 8011834:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8011836:	4b23      	ldr	r3, [pc, #140]	@ (80118c4 <tcp_receive+0x5ec>)
 8011838:	685b      	ldr	r3, [r3, #4]
 801183a:	2b00      	cmp	r3, #0
 801183c:	d106      	bne.n	801184c <tcp_receive+0x574>
 801183e:	4b22      	ldr	r3, [pc, #136]	@ (80118c8 <tcp_receive+0x5f0>)
 8011840:	f240 5294 	movw	r2, #1428	@ 0x594
 8011844:	4921      	ldr	r1, [pc, #132]	@ (80118cc <tcp_receive+0x5f4>)
 8011846:	4822      	ldr	r0, [pc, #136]	@ (80118d0 <tcp_receive+0x5f8>)
 8011848:	f005 fd44 	bl	80172d4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801184c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801184e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8011852:	4293      	cmp	r3, r2
 8011854:	d906      	bls.n	8011864 <tcp_receive+0x58c>
 8011856:	4b1c      	ldr	r3, [pc, #112]	@ (80118c8 <tcp_receive+0x5f0>)
 8011858:	f240 5295 	movw	r2, #1429	@ 0x595
 801185c:	491d      	ldr	r1, [pc, #116]	@ (80118d4 <tcp_receive+0x5fc>)
 801185e:	481c      	ldr	r0, [pc, #112]	@ (80118d0 <tcp_receive+0x5f8>)
 8011860:	f005 fd38 	bl	80172d4 <iprintf>
      off = (u16_t)off32;
 8011864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011866:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801186a:	4b16      	ldr	r3, [pc, #88]	@ (80118c4 <tcp_receive+0x5ec>)
 801186c:	685b      	ldr	r3, [r3, #4]
 801186e:	891b      	ldrh	r3, [r3, #8]
 8011870:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011874:	429a      	cmp	r2, r3
 8011876:	d906      	bls.n	8011886 <tcp_receive+0x5ae>
 8011878:	4b13      	ldr	r3, [pc, #76]	@ (80118c8 <tcp_receive+0x5f0>)
 801187a:	f240 5297 	movw	r2, #1431	@ 0x597
 801187e:	4916      	ldr	r1, [pc, #88]	@ (80118d8 <tcp_receive+0x600>)
 8011880:	4813      	ldr	r0, [pc, #76]	@ (80118d0 <tcp_receive+0x5f8>)
 8011882:	f005 fd27 	bl	80172d4 <iprintf>
      inseg.len -= off;
 8011886:	4b0f      	ldr	r3, [pc, #60]	@ (80118c4 <tcp_receive+0x5ec>)
 8011888:	891a      	ldrh	r2, [r3, #8]
 801188a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801188e:	1ad3      	subs	r3, r2, r3
 8011890:	b29a      	uxth	r2, r3
 8011892:	4b0c      	ldr	r3, [pc, #48]	@ (80118c4 <tcp_receive+0x5ec>)
 8011894:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8011896:	4b0b      	ldr	r3, [pc, #44]	@ (80118c4 <tcp_receive+0x5ec>)
 8011898:	685b      	ldr	r3, [r3, #4]
 801189a:	891a      	ldrh	r2, [r3, #8]
 801189c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80118a0:	1ad3      	subs	r3, r2, r3
 80118a2:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 80118a4:	e02a      	b.n	80118fc <tcp_receive+0x624>
 80118a6:	bf00      	nop
 80118a8:	08019e14 	.word	0x08019e14
 80118ac:	08019e1c 	.word	0x08019e1c
 80118b0:	2000c6c8 	.word	0x2000c6c8
 80118b4:	2000c6c4 	.word	0x2000c6c4
 80118b8:	2000c688 	.word	0x2000c688
 80118bc:	2000c6ca 	.word	0x2000c6ca
 80118c0:	2000c6c0 	.word	0x2000c6c0
 80118c4:	2000c6a0 	.word	0x2000c6a0
 80118c8:	08019aac 	.word	0x08019aac
 80118cc:	08019e24 	.word	0x08019e24
 80118d0:	08019af8 	.word	0x08019af8
 80118d4:	08019e34 	.word	0x08019e34
 80118d8:	08019e44 	.word	0x08019e44
        off -= p->len;
 80118dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80118de:	895b      	ldrh	r3, [r3, #10]
 80118e0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80118e4:	1ad3      	subs	r3, r2, r3
 80118e6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80118ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80118ec:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80118ee:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80118f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80118f2:	2200      	movs	r2, #0
 80118f4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80118f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80118f8:	681b      	ldr	r3, [r3, #0]
 80118fa:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 80118fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80118fe:	895b      	ldrh	r3, [r3, #10]
 8011900:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011904:	429a      	cmp	r2, r3
 8011906:	d8e9      	bhi.n	80118dc <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8011908:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801190c:	4619      	mov	r1, r3
 801190e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8011910:	f7fc fb6e 	bl	800dff0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011918:	4a90      	ldr	r2, [pc, #576]	@ (8011b5c <tcp_receive+0x884>)
 801191a:	6013      	str	r3, [r2, #0]
 801191c:	4b90      	ldr	r3, [pc, #576]	@ (8011b60 <tcp_receive+0x888>)
 801191e:	68db      	ldr	r3, [r3, #12]
 8011920:	4a8e      	ldr	r2, [pc, #568]	@ (8011b5c <tcp_receive+0x884>)
 8011922:	6812      	ldr	r2, [r2, #0]
 8011924:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011926:	e00d      	b.n	8011944 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8011928:	4b8c      	ldr	r3, [pc, #560]	@ (8011b5c <tcp_receive+0x884>)
 801192a:	681a      	ldr	r2, [r3, #0]
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011930:	1ad3      	subs	r3, r2, r3
 8011932:	2b00      	cmp	r3, #0
 8011934:	da06      	bge.n	8011944 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	8b5b      	ldrh	r3, [r3, #26]
 801193a:	f043 0302 	orr.w	r3, r3, #2
 801193e:	b29a      	uxth	r2, r3
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011944:	4b85      	ldr	r3, [pc, #532]	@ (8011b5c <tcp_receive+0x884>)
 8011946:	681a      	ldr	r2, [r3, #0]
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801194c:	1ad3      	subs	r3, r2, r3
 801194e:	2b00      	cmp	r3, #0
 8011950:	f2c0 8427 	blt.w	80121a2 <tcp_receive+0xeca>
 8011954:	4b81      	ldr	r3, [pc, #516]	@ (8011b5c <tcp_receive+0x884>)
 8011956:	681a      	ldr	r2, [r3, #0]
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801195c:	6879      	ldr	r1, [r7, #4]
 801195e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8011960:	440b      	add	r3, r1
 8011962:	1ad3      	subs	r3, r2, r3
 8011964:	3301      	adds	r3, #1
 8011966:	2b00      	cmp	r3, #0
 8011968:	f300 841b 	bgt.w	80121a2 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011970:	4b7a      	ldr	r3, [pc, #488]	@ (8011b5c <tcp_receive+0x884>)
 8011972:	681b      	ldr	r3, [r3, #0]
 8011974:	429a      	cmp	r2, r3
 8011976:	f040 8298 	bne.w	8011eaa <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801197a:	4b79      	ldr	r3, [pc, #484]	@ (8011b60 <tcp_receive+0x888>)
 801197c:	891c      	ldrh	r4, [r3, #8]
 801197e:	4b78      	ldr	r3, [pc, #480]	@ (8011b60 <tcp_receive+0x888>)
 8011980:	68db      	ldr	r3, [r3, #12]
 8011982:	899b      	ldrh	r3, [r3, #12]
 8011984:	b29b      	uxth	r3, r3
 8011986:	4618      	mov	r0, r3
 8011988:	f7fa fff8 	bl	800c97c <lwip_htons>
 801198c:	4603      	mov	r3, r0
 801198e:	b2db      	uxtb	r3, r3
 8011990:	f003 0303 	and.w	r3, r3, #3
 8011994:	2b00      	cmp	r3, #0
 8011996:	d001      	beq.n	801199c <tcp_receive+0x6c4>
 8011998:	2301      	movs	r3, #1
 801199a:	e000      	b.n	801199e <tcp_receive+0x6c6>
 801199c:	2300      	movs	r3, #0
 801199e:	4423      	add	r3, r4
 80119a0:	b29a      	uxth	r2, r3
 80119a2:	4b70      	ldr	r3, [pc, #448]	@ (8011b64 <tcp_receive+0x88c>)
 80119a4:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80119aa:	4b6e      	ldr	r3, [pc, #440]	@ (8011b64 <tcp_receive+0x88c>)
 80119ac:	881b      	ldrh	r3, [r3, #0]
 80119ae:	429a      	cmp	r2, r3
 80119b0:	d274      	bcs.n	8011a9c <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80119b2:	4b6b      	ldr	r3, [pc, #428]	@ (8011b60 <tcp_receive+0x888>)
 80119b4:	68db      	ldr	r3, [r3, #12]
 80119b6:	899b      	ldrh	r3, [r3, #12]
 80119b8:	b29b      	uxth	r3, r3
 80119ba:	4618      	mov	r0, r3
 80119bc:	f7fa ffde 	bl	800c97c <lwip_htons>
 80119c0:	4603      	mov	r3, r0
 80119c2:	b2db      	uxtb	r3, r3
 80119c4:	f003 0301 	and.w	r3, r3, #1
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d01e      	beq.n	8011a0a <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80119cc:	4b64      	ldr	r3, [pc, #400]	@ (8011b60 <tcp_receive+0x888>)
 80119ce:	68db      	ldr	r3, [r3, #12]
 80119d0:	899b      	ldrh	r3, [r3, #12]
 80119d2:	b29b      	uxth	r3, r3
 80119d4:	b21b      	sxth	r3, r3
 80119d6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80119da:	b21c      	sxth	r4, r3
 80119dc:	4b60      	ldr	r3, [pc, #384]	@ (8011b60 <tcp_receive+0x888>)
 80119de:	68db      	ldr	r3, [r3, #12]
 80119e0:	899b      	ldrh	r3, [r3, #12]
 80119e2:	b29b      	uxth	r3, r3
 80119e4:	4618      	mov	r0, r3
 80119e6:	f7fa ffc9 	bl	800c97c <lwip_htons>
 80119ea:	4603      	mov	r3, r0
 80119ec:	b2db      	uxtb	r3, r3
 80119ee:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80119f2:	b29b      	uxth	r3, r3
 80119f4:	4618      	mov	r0, r3
 80119f6:	f7fa ffc1 	bl	800c97c <lwip_htons>
 80119fa:	4603      	mov	r3, r0
 80119fc:	b21b      	sxth	r3, r3
 80119fe:	4323      	orrs	r3, r4
 8011a00:	b21a      	sxth	r2, r3
 8011a02:	4b57      	ldr	r3, [pc, #348]	@ (8011b60 <tcp_receive+0x888>)
 8011a04:	68db      	ldr	r3, [r3, #12]
 8011a06:	b292      	uxth	r2, r2
 8011a08:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8011a0e:	4b54      	ldr	r3, [pc, #336]	@ (8011b60 <tcp_receive+0x888>)
 8011a10:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011a12:	4b53      	ldr	r3, [pc, #332]	@ (8011b60 <tcp_receive+0x888>)
 8011a14:	68db      	ldr	r3, [r3, #12]
 8011a16:	899b      	ldrh	r3, [r3, #12]
 8011a18:	b29b      	uxth	r3, r3
 8011a1a:	4618      	mov	r0, r3
 8011a1c:	f7fa ffae 	bl	800c97c <lwip_htons>
 8011a20:	4603      	mov	r3, r0
 8011a22:	b2db      	uxtb	r3, r3
 8011a24:	f003 0302 	and.w	r3, r3, #2
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d005      	beq.n	8011a38 <tcp_receive+0x760>
            inseg.len -= 1;
 8011a2c:	4b4c      	ldr	r3, [pc, #304]	@ (8011b60 <tcp_receive+0x888>)
 8011a2e:	891b      	ldrh	r3, [r3, #8]
 8011a30:	3b01      	subs	r3, #1
 8011a32:	b29a      	uxth	r2, r3
 8011a34:	4b4a      	ldr	r3, [pc, #296]	@ (8011b60 <tcp_receive+0x888>)
 8011a36:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8011a38:	4b49      	ldr	r3, [pc, #292]	@ (8011b60 <tcp_receive+0x888>)
 8011a3a:	685b      	ldr	r3, [r3, #4]
 8011a3c:	4a48      	ldr	r2, [pc, #288]	@ (8011b60 <tcp_receive+0x888>)
 8011a3e:	8912      	ldrh	r2, [r2, #8]
 8011a40:	4611      	mov	r1, r2
 8011a42:	4618      	mov	r0, r3
 8011a44:	f7fc f9d4 	bl	800ddf0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8011a48:	4b45      	ldr	r3, [pc, #276]	@ (8011b60 <tcp_receive+0x888>)
 8011a4a:	891c      	ldrh	r4, [r3, #8]
 8011a4c:	4b44      	ldr	r3, [pc, #272]	@ (8011b60 <tcp_receive+0x888>)
 8011a4e:	68db      	ldr	r3, [r3, #12]
 8011a50:	899b      	ldrh	r3, [r3, #12]
 8011a52:	b29b      	uxth	r3, r3
 8011a54:	4618      	mov	r0, r3
 8011a56:	f7fa ff91 	bl	800c97c <lwip_htons>
 8011a5a:	4603      	mov	r3, r0
 8011a5c:	b2db      	uxtb	r3, r3
 8011a5e:	f003 0303 	and.w	r3, r3, #3
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	d001      	beq.n	8011a6a <tcp_receive+0x792>
 8011a66:	2301      	movs	r3, #1
 8011a68:	e000      	b.n	8011a6c <tcp_receive+0x794>
 8011a6a:	2300      	movs	r3, #0
 8011a6c:	4423      	add	r3, r4
 8011a6e:	b29a      	uxth	r2, r3
 8011a70:	4b3c      	ldr	r3, [pc, #240]	@ (8011b64 <tcp_receive+0x88c>)
 8011a72:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011a74:	4b3b      	ldr	r3, [pc, #236]	@ (8011b64 <tcp_receive+0x88c>)
 8011a76:	881b      	ldrh	r3, [r3, #0]
 8011a78:	461a      	mov	r2, r3
 8011a7a:	4b38      	ldr	r3, [pc, #224]	@ (8011b5c <tcp_receive+0x884>)
 8011a7c:	681b      	ldr	r3, [r3, #0]
 8011a7e:	441a      	add	r2, r3
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011a84:	6879      	ldr	r1, [r7, #4]
 8011a86:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8011a88:	440b      	add	r3, r1
 8011a8a:	429a      	cmp	r2, r3
 8011a8c:	d006      	beq.n	8011a9c <tcp_receive+0x7c4>
 8011a8e:	4b36      	ldr	r3, [pc, #216]	@ (8011b68 <tcp_receive+0x890>)
 8011a90:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8011a94:	4935      	ldr	r1, [pc, #212]	@ (8011b6c <tcp_receive+0x894>)
 8011a96:	4836      	ldr	r0, [pc, #216]	@ (8011b70 <tcp_receive+0x898>)
 8011a98:	f005 fc1c 	bl	80172d4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	f000 80e6 	beq.w	8011c72 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011aa6:	4b2e      	ldr	r3, [pc, #184]	@ (8011b60 <tcp_receive+0x888>)
 8011aa8:	68db      	ldr	r3, [r3, #12]
 8011aaa:	899b      	ldrh	r3, [r3, #12]
 8011aac:	b29b      	uxth	r3, r3
 8011aae:	4618      	mov	r0, r3
 8011ab0:	f7fa ff64 	bl	800c97c <lwip_htons>
 8011ab4:	4603      	mov	r3, r0
 8011ab6:	b2db      	uxtb	r3, r3
 8011ab8:	f003 0301 	and.w	r3, r3, #1
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	d010      	beq.n	8011ae2 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8011ac0:	e00a      	b.n	8011ad8 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011ac6:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011acc:	681a      	ldr	r2, [r3, #0]
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8011ad2:	68f8      	ldr	r0, [r7, #12]
 8011ad4:	f7fd fd93 	bl	800f5fe <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d1f0      	bne.n	8011ac2 <tcp_receive+0x7ea>
 8011ae0:	e0c7      	b.n	8011c72 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8011ae8:	e051      	b.n	8011b8e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011aea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011aec:	68db      	ldr	r3, [r3, #12]
 8011aee:	899b      	ldrh	r3, [r3, #12]
 8011af0:	b29b      	uxth	r3, r3
 8011af2:	4618      	mov	r0, r3
 8011af4:	f7fa ff42 	bl	800c97c <lwip_htons>
 8011af8:	4603      	mov	r3, r0
 8011afa:	b2db      	uxtb	r3, r3
 8011afc:	f003 0301 	and.w	r3, r3, #1
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	d03c      	beq.n	8011b7e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8011b04:	4b16      	ldr	r3, [pc, #88]	@ (8011b60 <tcp_receive+0x888>)
 8011b06:	68db      	ldr	r3, [r3, #12]
 8011b08:	899b      	ldrh	r3, [r3, #12]
 8011b0a:	b29b      	uxth	r3, r3
 8011b0c:	4618      	mov	r0, r3
 8011b0e:	f7fa ff35 	bl	800c97c <lwip_htons>
 8011b12:	4603      	mov	r3, r0
 8011b14:	b2db      	uxtb	r3, r3
 8011b16:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d12f      	bne.n	8011b7e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8011b1e:	4b10      	ldr	r3, [pc, #64]	@ (8011b60 <tcp_receive+0x888>)
 8011b20:	68db      	ldr	r3, [r3, #12]
 8011b22:	899b      	ldrh	r3, [r3, #12]
 8011b24:	b29c      	uxth	r4, r3
 8011b26:	2001      	movs	r0, #1
 8011b28:	f7fa ff28 	bl	800c97c <lwip_htons>
 8011b2c:	4603      	mov	r3, r0
 8011b2e:	461a      	mov	r2, r3
 8011b30:	4b0b      	ldr	r3, [pc, #44]	@ (8011b60 <tcp_receive+0x888>)
 8011b32:	68db      	ldr	r3, [r3, #12]
 8011b34:	4322      	orrs	r2, r4
 8011b36:	b292      	uxth	r2, r2
 8011b38:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8011b3a:	4b09      	ldr	r3, [pc, #36]	@ (8011b60 <tcp_receive+0x888>)
 8011b3c:	891c      	ldrh	r4, [r3, #8]
 8011b3e:	4b08      	ldr	r3, [pc, #32]	@ (8011b60 <tcp_receive+0x888>)
 8011b40:	68db      	ldr	r3, [r3, #12]
 8011b42:	899b      	ldrh	r3, [r3, #12]
 8011b44:	b29b      	uxth	r3, r3
 8011b46:	4618      	mov	r0, r3
 8011b48:	f7fa ff18 	bl	800c97c <lwip_htons>
 8011b4c:	4603      	mov	r3, r0
 8011b4e:	b2db      	uxtb	r3, r3
 8011b50:	f003 0303 	and.w	r3, r3, #3
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d00d      	beq.n	8011b74 <tcp_receive+0x89c>
 8011b58:	2301      	movs	r3, #1
 8011b5a:	e00c      	b.n	8011b76 <tcp_receive+0x89e>
 8011b5c:	2000c6c0 	.word	0x2000c6c0
 8011b60:	2000c6a0 	.word	0x2000c6a0
 8011b64:	2000c6ca 	.word	0x2000c6ca
 8011b68:	08019aac 	.word	0x08019aac
 8011b6c:	08019e54 	.word	0x08019e54
 8011b70:	08019af8 	.word	0x08019af8
 8011b74:	2300      	movs	r3, #0
 8011b76:	4423      	add	r3, r4
 8011b78:	b29a      	uxth	r2, r3
 8011b7a:	4b98      	ldr	r3, [pc, #608]	@ (8011ddc <tcp_receive+0xb04>)
 8011b7c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8011b7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011b80:	613b      	str	r3, [r7, #16]
              next = next->next;
 8011b82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011b84:	681b      	ldr	r3, [r3, #0]
 8011b86:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8011b88:	6938      	ldr	r0, [r7, #16]
 8011b8a:	f7fd fd38 	bl	800f5fe <tcp_seg_free>
            while (next &&
 8011b8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	d00e      	beq.n	8011bb2 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8011b94:	4b91      	ldr	r3, [pc, #580]	@ (8011ddc <tcp_receive+0xb04>)
 8011b96:	881b      	ldrh	r3, [r3, #0]
 8011b98:	461a      	mov	r2, r3
 8011b9a:	4b91      	ldr	r3, [pc, #580]	@ (8011de0 <tcp_receive+0xb08>)
 8011b9c:	681b      	ldr	r3, [r3, #0]
 8011b9e:	441a      	add	r2, r3
 8011ba0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011ba2:	68db      	ldr	r3, [r3, #12]
 8011ba4:	685b      	ldr	r3, [r3, #4]
 8011ba6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011ba8:	8909      	ldrh	r1, [r1, #8]
 8011baa:	440b      	add	r3, r1
 8011bac:	1ad3      	subs	r3, r2, r3
            while (next &&
 8011bae:	2b00      	cmp	r3, #0
 8011bb0:	da9b      	bge.n	8011aea <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8011bb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d059      	beq.n	8011c6c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8011bb8:	4b88      	ldr	r3, [pc, #544]	@ (8011ddc <tcp_receive+0xb04>)
 8011bba:	881b      	ldrh	r3, [r3, #0]
 8011bbc:	461a      	mov	r2, r3
 8011bbe:	4b88      	ldr	r3, [pc, #544]	@ (8011de0 <tcp_receive+0xb08>)
 8011bc0:	681b      	ldr	r3, [r3, #0]
 8011bc2:	441a      	add	r2, r3
 8011bc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011bc6:	68db      	ldr	r3, [r3, #12]
 8011bc8:	685b      	ldr	r3, [r3, #4]
 8011bca:	1ad3      	subs	r3, r2, r3
            if (next &&
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	dd4d      	ble.n	8011c6c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8011bd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011bd2:	68db      	ldr	r3, [r3, #12]
 8011bd4:	685b      	ldr	r3, [r3, #4]
 8011bd6:	b29a      	uxth	r2, r3
 8011bd8:	4b81      	ldr	r3, [pc, #516]	@ (8011de0 <tcp_receive+0xb08>)
 8011bda:	681b      	ldr	r3, [r3, #0]
 8011bdc:	b29b      	uxth	r3, r3
 8011bde:	1ad3      	subs	r3, r2, r3
 8011be0:	b29a      	uxth	r2, r3
 8011be2:	4b80      	ldr	r3, [pc, #512]	@ (8011de4 <tcp_receive+0xb0c>)
 8011be4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011be6:	4b7f      	ldr	r3, [pc, #508]	@ (8011de4 <tcp_receive+0xb0c>)
 8011be8:	68db      	ldr	r3, [r3, #12]
 8011bea:	899b      	ldrh	r3, [r3, #12]
 8011bec:	b29b      	uxth	r3, r3
 8011bee:	4618      	mov	r0, r3
 8011bf0:	f7fa fec4 	bl	800c97c <lwip_htons>
 8011bf4:	4603      	mov	r3, r0
 8011bf6:	b2db      	uxtb	r3, r3
 8011bf8:	f003 0302 	and.w	r3, r3, #2
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	d005      	beq.n	8011c0c <tcp_receive+0x934>
                inseg.len -= 1;
 8011c00:	4b78      	ldr	r3, [pc, #480]	@ (8011de4 <tcp_receive+0xb0c>)
 8011c02:	891b      	ldrh	r3, [r3, #8]
 8011c04:	3b01      	subs	r3, #1
 8011c06:	b29a      	uxth	r2, r3
 8011c08:	4b76      	ldr	r3, [pc, #472]	@ (8011de4 <tcp_receive+0xb0c>)
 8011c0a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8011c0c:	4b75      	ldr	r3, [pc, #468]	@ (8011de4 <tcp_receive+0xb0c>)
 8011c0e:	685b      	ldr	r3, [r3, #4]
 8011c10:	4a74      	ldr	r2, [pc, #464]	@ (8011de4 <tcp_receive+0xb0c>)
 8011c12:	8912      	ldrh	r2, [r2, #8]
 8011c14:	4611      	mov	r1, r2
 8011c16:	4618      	mov	r0, r3
 8011c18:	f7fc f8ea 	bl	800ddf0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8011c1c:	4b71      	ldr	r3, [pc, #452]	@ (8011de4 <tcp_receive+0xb0c>)
 8011c1e:	891c      	ldrh	r4, [r3, #8]
 8011c20:	4b70      	ldr	r3, [pc, #448]	@ (8011de4 <tcp_receive+0xb0c>)
 8011c22:	68db      	ldr	r3, [r3, #12]
 8011c24:	899b      	ldrh	r3, [r3, #12]
 8011c26:	b29b      	uxth	r3, r3
 8011c28:	4618      	mov	r0, r3
 8011c2a:	f7fa fea7 	bl	800c97c <lwip_htons>
 8011c2e:	4603      	mov	r3, r0
 8011c30:	b2db      	uxtb	r3, r3
 8011c32:	f003 0303 	and.w	r3, r3, #3
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d001      	beq.n	8011c3e <tcp_receive+0x966>
 8011c3a:	2301      	movs	r3, #1
 8011c3c:	e000      	b.n	8011c40 <tcp_receive+0x968>
 8011c3e:	2300      	movs	r3, #0
 8011c40:	4423      	add	r3, r4
 8011c42:	b29a      	uxth	r2, r3
 8011c44:	4b65      	ldr	r3, [pc, #404]	@ (8011ddc <tcp_receive+0xb04>)
 8011c46:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8011c48:	4b64      	ldr	r3, [pc, #400]	@ (8011ddc <tcp_receive+0xb04>)
 8011c4a:	881b      	ldrh	r3, [r3, #0]
 8011c4c:	461a      	mov	r2, r3
 8011c4e:	4b64      	ldr	r3, [pc, #400]	@ (8011de0 <tcp_receive+0xb08>)
 8011c50:	681b      	ldr	r3, [r3, #0]
 8011c52:	441a      	add	r2, r3
 8011c54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011c56:	68db      	ldr	r3, [r3, #12]
 8011c58:	685b      	ldr	r3, [r3, #4]
 8011c5a:	429a      	cmp	r2, r3
 8011c5c:	d006      	beq.n	8011c6c <tcp_receive+0x994>
 8011c5e:	4b62      	ldr	r3, [pc, #392]	@ (8011de8 <tcp_receive+0xb10>)
 8011c60:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8011c64:	4961      	ldr	r1, [pc, #388]	@ (8011dec <tcp_receive+0xb14>)
 8011c66:	4862      	ldr	r0, [pc, #392]	@ (8011df0 <tcp_receive+0xb18>)
 8011c68:	f005 fb34 	bl	80172d4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8011c70:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8011c72:	4b5a      	ldr	r3, [pc, #360]	@ (8011ddc <tcp_receive+0xb04>)
 8011c74:	881b      	ldrh	r3, [r3, #0]
 8011c76:	461a      	mov	r2, r3
 8011c78:	4b59      	ldr	r3, [pc, #356]	@ (8011de0 <tcp_receive+0xb08>)
 8011c7a:	681b      	ldr	r3, [r3, #0]
 8011c7c:	441a      	add	r2, r3
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8011c86:	4b55      	ldr	r3, [pc, #340]	@ (8011ddc <tcp_receive+0xb04>)
 8011c88:	881b      	ldrh	r3, [r3, #0]
 8011c8a:	429a      	cmp	r2, r3
 8011c8c:	d206      	bcs.n	8011c9c <tcp_receive+0x9c4>
 8011c8e:	4b56      	ldr	r3, [pc, #344]	@ (8011de8 <tcp_receive+0xb10>)
 8011c90:	f240 6207 	movw	r2, #1543	@ 0x607
 8011c94:	4957      	ldr	r1, [pc, #348]	@ (8011df4 <tcp_receive+0xb1c>)
 8011c96:	4856      	ldr	r0, [pc, #344]	@ (8011df0 <tcp_receive+0xb18>)
 8011c98:	f005 fb1c 	bl	80172d4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8011ca0:	4b4e      	ldr	r3, [pc, #312]	@ (8011ddc <tcp_receive+0xb04>)
 8011ca2:	881b      	ldrh	r3, [r3, #0]
 8011ca4:	1ad3      	subs	r3, r2, r3
 8011ca6:	b29a      	uxth	r2, r3
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8011cac:	6878      	ldr	r0, [r7, #4]
 8011cae:	f7fc ffc5 	bl	800ec3c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8011cb2:	4b4c      	ldr	r3, [pc, #304]	@ (8011de4 <tcp_receive+0xb0c>)
 8011cb4:	685b      	ldr	r3, [r3, #4]
 8011cb6:	891b      	ldrh	r3, [r3, #8]
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	d006      	beq.n	8011cca <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8011cbc:	4b49      	ldr	r3, [pc, #292]	@ (8011de4 <tcp_receive+0xb0c>)
 8011cbe:	685b      	ldr	r3, [r3, #4]
 8011cc0:	4a4d      	ldr	r2, [pc, #308]	@ (8011df8 <tcp_receive+0xb20>)
 8011cc2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8011cc4:	4b47      	ldr	r3, [pc, #284]	@ (8011de4 <tcp_receive+0xb0c>)
 8011cc6:	2200      	movs	r2, #0
 8011cc8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011cca:	4b46      	ldr	r3, [pc, #280]	@ (8011de4 <tcp_receive+0xb0c>)
 8011ccc:	68db      	ldr	r3, [r3, #12]
 8011cce:	899b      	ldrh	r3, [r3, #12]
 8011cd0:	b29b      	uxth	r3, r3
 8011cd2:	4618      	mov	r0, r3
 8011cd4:	f7fa fe52 	bl	800c97c <lwip_htons>
 8011cd8:	4603      	mov	r3, r0
 8011cda:	b2db      	uxtb	r3, r3
 8011cdc:	f003 0301 	and.w	r3, r3, #1
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	f000 80b8 	beq.w	8011e56 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8011ce6:	4b45      	ldr	r3, [pc, #276]	@ (8011dfc <tcp_receive+0xb24>)
 8011ce8:	781b      	ldrb	r3, [r3, #0]
 8011cea:	f043 0320 	orr.w	r3, r3, #32
 8011cee:	b2da      	uxtb	r2, r3
 8011cf0:	4b42      	ldr	r3, [pc, #264]	@ (8011dfc <tcp_receive+0xb24>)
 8011cf2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8011cf4:	e0af      	b.n	8011e56 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011cfa:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011d00:	68db      	ldr	r3, [r3, #12]
 8011d02:	685b      	ldr	r3, [r3, #4]
 8011d04:	4a36      	ldr	r2, [pc, #216]	@ (8011de0 <tcp_receive+0xb08>)
 8011d06:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8011d08:	68bb      	ldr	r3, [r7, #8]
 8011d0a:	891b      	ldrh	r3, [r3, #8]
 8011d0c:	461c      	mov	r4, r3
 8011d0e:	68bb      	ldr	r3, [r7, #8]
 8011d10:	68db      	ldr	r3, [r3, #12]
 8011d12:	899b      	ldrh	r3, [r3, #12]
 8011d14:	b29b      	uxth	r3, r3
 8011d16:	4618      	mov	r0, r3
 8011d18:	f7fa fe30 	bl	800c97c <lwip_htons>
 8011d1c:	4603      	mov	r3, r0
 8011d1e:	b2db      	uxtb	r3, r3
 8011d20:	f003 0303 	and.w	r3, r3, #3
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d001      	beq.n	8011d2c <tcp_receive+0xa54>
 8011d28:	2301      	movs	r3, #1
 8011d2a:	e000      	b.n	8011d2e <tcp_receive+0xa56>
 8011d2c:	2300      	movs	r3, #0
 8011d2e:	191a      	adds	r2, r3, r4
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011d34:	441a      	add	r2, r3
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011d3e:	461c      	mov	r4, r3
 8011d40:	68bb      	ldr	r3, [r7, #8]
 8011d42:	891b      	ldrh	r3, [r3, #8]
 8011d44:	461d      	mov	r5, r3
 8011d46:	68bb      	ldr	r3, [r7, #8]
 8011d48:	68db      	ldr	r3, [r3, #12]
 8011d4a:	899b      	ldrh	r3, [r3, #12]
 8011d4c:	b29b      	uxth	r3, r3
 8011d4e:	4618      	mov	r0, r3
 8011d50:	f7fa fe14 	bl	800c97c <lwip_htons>
 8011d54:	4603      	mov	r3, r0
 8011d56:	b2db      	uxtb	r3, r3
 8011d58:	f003 0303 	and.w	r3, r3, #3
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d001      	beq.n	8011d64 <tcp_receive+0xa8c>
 8011d60:	2301      	movs	r3, #1
 8011d62:	e000      	b.n	8011d66 <tcp_receive+0xa8e>
 8011d64:	2300      	movs	r3, #0
 8011d66:	442b      	add	r3, r5
 8011d68:	429c      	cmp	r4, r3
 8011d6a:	d206      	bcs.n	8011d7a <tcp_receive+0xaa2>
 8011d6c:	4b1e      	ldr	r3, [pc, #120]	@ (8011de8 <tcp_receive+0xb10>)
 8011d6e:	f240 622b 	movw	r2, #1579	@ 0x62b
 8011d72:	4923      	ldr	r1, [pc, #140]	@ (8011e00 <tcp_receive+0xb28>)
 8011d74:	481e      	ldr	r0, [pc, #120]	@ (8011df0 <tcp_receive+0xb18>)
 8011d76:	f005 faad 	bl	80172d4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8011d7a:	68bb      	ldr	r3, [r7, #8]
 8011d7c:	891b      	ldrh	r3, [r3, #8]
 8011d7e:	461c      	mov	r4, r3
 8011d80:	68bb      	ldr	r3, [r7, #8]
 8011d82:	68db      	ldr	r3, [r3, #12]
 8011d84:	899b      	ldrh	r3, [r3, #12]
 8011d86:	b29b      	uxth	r3, r3
 8011d88:	4618      	mov	r0, r3
 8011d8a:	f7fa fdf7 	bl	800c97c <lwip_htons>
 8011d8e:	4603      	mov	r3, r0
 8011d90:	b2db      	uxtb	r3, r3
 8011d92:	f003 0303 	and.w	r3, r3, #3
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d001      	beq.n	8011d9e <tcp_receive+0xac6>
 8011d9a:	2301      	movs	r3, #1
 8011d9c:	e000      	b.n	8011da0 <tcp_receive+0xac8>
 8011d9e:	2300      	movs	r3, #0
 8011da0:	1919      	adds	r1, r3, r4
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8011da6:	b28b      	uxth	r3, r1
 8011da8:	1ad3      	subs	r3, r2, r3
 8011daa:	b29a      	uxth	r2, r3
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8011db0:	6878      	ldr	r0, [r7, #4]
 8011db2:	f7fc ff43 	bl	800ec3c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8011db6:	68bb      	ldr	r3, [r7, #8]
 8011db8:	685b      	ldr	r3, [r3, #4]
 8011dba:	891b      	ldrh	r3, [r3, #8]
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d028      	beq.n	8011e12 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8011dc0:	4b0d      	ldr	r3, [pc, #52]	@ (8011df8 <tcp_receive+0xb20>)
 8011dc2:	681b      	ldr	r3, [r3, #0]
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d01d      	beq.n	8011e04 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8011dc8:	4b0b      	ldr	r3, [pc, #44]	@ (8011df8 <tcp_receive+0xb20>)
 8011dca:	681a      	ldr	r2, [r3, #0]
 8011dcc:	68bb      	ldr	r3, [r7, #8]
 8011dce:	685b      	ldr	r3, [r3, #4]
 8011dd0:	4619      	mov	r1, r3
 8011dd2:	4610      	mov	r0, r2
 8011dd4:	f7fc fa60 	bl	800e298 <pbuf_cat>
 8011dd8:	e018      	b.n	8011e0c <tcp_receive+0xb34>
 8011dda:	bf00      	nop
 8011ddc:	2000c6ca 	.word	0x2000c6ca
 8011de0:	2000c6c0 	.word	0x2000c6c0
 8011de4:	2000c6a0 	.word	0x2000c6a0
 8011de8:	08019aac 	.word	0x08019aac
 8011dec:	08019e8c 	.word	0x08019e8c
 8011df0:	08019af8 	.word	0x08019af8
 8011df4:	08019ec8 	.word	0x08019ec8
 8011df8:	2000c6d0 	.word	0x2000c6d0
 8011dfc:	2000c6cd 	.word	0x2000c6cd
 8011e00:	08019ee8 	.word	0x08019ee8
            } else {
              recv_data = cseg->p;
 8011e04:	68bb      	ldr	r3, [r7, #8]
 8011e06:	685b      	ldr	r3, [r3, #4]
 8011e08:	4a70      	ldr	r2, [pc, #448]	@ (8011fcc <tcp_receive+0xcf4>)
 8011e0a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8011e0c:	68bb      	ldr	r3, [r7, #8]
 8011e0e:	2200      	movs	r2, #0
 8011e10:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8011e12:	68bb      	ldr	r3, [r7, #8]
 8011e14:	68db      	ldr	r3, [r3, #12]
 8011e16:	899b      	ldrh	r3, [r3, #12]
 8011e18:	b29b      	uxth	r3, r3
 8011e1a:	4618      	mov	r0, r3
 8011e1c:	f7fa fdae 	bl	800c97c <lwip_htons>
 8011e20:	4603      	mov	r3, r0
 8011e22:	b2db      	uxtb	r3, r3
 8011e24:	f003 0301 	and.w	r3, r3, #1
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d00d      	beq.n	8011e48 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8011e2c:	4b68      	ldr	r3, [pc, #416]	@ (8011fd0 <tcp_receive+0xcf8>)
 8011e2e:	781b      	ldrb	r3, [r3, #0]
 8011e30:	f043 0320 	orr.w	r3, r3, #32
 8011e34:	b2da      	uxtb	r2, r3
 8011e36:	4b66      	ldr	r3, [pc, #408]	@ (8011fd0 <tcp_receive+0xcf8>)
 8011e38:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	7d1b      	ldrb	r3, [r3, #20]
 8011e3e:	2b04      	cmp	r3, #4
 8011e40:	d102      	bne.n	8011e48 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	2207      	movs	r2, #7
 8011e46:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8011e48:	68bb      	ldr	r3, [r7, #8]
 8011e4a:	681a      	ldr	r2, [r3, #0]
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8011e50:	68b8      	ldr	r0, [r7, #8]
 8011e52:	f7fd fbd4 	bl	800f5fe <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	d008      	beq.n	8011e70 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011e62:	68db      	ldr	r3, [r3, #12]
 8011e64:	685a      	ldr	r2, [r3, #4]
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 8011e6a:	429a      	cmp	r2, r3
 8011e6c:	f43f af43 	beq.w	8011cf6 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	8b5b      	ldrh	r3, [r3, #26]
 8011e74:	f003 0301 	and.w	r3, r3, #1
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	d00e      	beq.n	8011e9a <tcp_receive+0xbc2>
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	8b5b      	ldrh	r3, [r3, #26]
 8011e80:	f023 0301 	bic.w	r3, r3, #1
 8011e84:	b29a      	uxth	r2, r3
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	835a      	strh	r2, [r3, #26]
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	8b5b      	ldrh	r3, [r3, #26]
 8011e8e:	f043 0302 	orr.w	r3, r3, #2
 8011e92:	b29a      	uxth	r2, r3
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011e98:	e187      	b.n	80121aa <tcp_receive+0xed2>
        tcp_ack(pcb);
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	8b5b      	ldrh	r3, [r3, #26]
 8011e9e:	f043 0301 	orr.w	r3, r3, #1
 8011ea2:	b29a      	uxth	r2, r3
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011ea8:	e17f      	b.n	80121aa <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	d106      	bne.n	8011ec0 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8011eb2:	4848      	ldr	r0, [pc, #288]	@ (8011fd4 <tcp_receive+0xcfc>)
 8011eb4:	f7fd fbbc 	bl	800f630 <tcp_seg_copy>
 8011eb8:	4602      	mov	r2, r0
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	675a      	str	r2, [r3, #116]	@ 0x74
 8011ebe:	e16c      	b.n	801219a <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8011ec0:	2300      	movs	r3, #0
 8011ec2:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011ec8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011eca:	e156      	b.n	801217a <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8011ecc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ece:	68db      	ldr	r3, [r3, #12]
 8011ed0:	685a      	ldr	r2, [r3, #4]
 8011ed2:	4b41      	ldr	r3, [pc, #260]	@ (8011fd8 <tcp_receive+0xd00>)
 8011ed4:	681b      	ldr	r3, [r3, #0]
 8011ed6:	429a      	cmp	r2, r3
 8011ed8:	d11d      	bne.n	8011f16 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8011eda:	4b3e      	ldr	r3, [pc, #248]	@ (8011fd4 <tcp_receive+0xcfc>)
 8011edc:	891a      	ldrh	r2, [r3, #8]
 8011ede:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ee0:	891b      	ldrh	r3, [r3, #8]
 8011ee2:	429a      	cmp	r2, r3
 8011ee4:	f240 814e 	bls.w	8012184 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011ee8:	483a      	ldr	r0, [pc, #232]	@ (8011fd4 <tcp_receive+0xcfc>)
 8011eea:	f7fd fba1 	bl	800f630 <tcp_seg_copy>
 8011eee:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8011ef0:	697b      	ldr	r3, [r7, #20]
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	f000 8148 	beq.w	8012188 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8011ef8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	d003      	beq.n	8011f06 <tcp_receive+0xc2e>
                    prev->next = cseg;
 8011efe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011f00:	697a      	ldr	r2, [r7, #20]
 8011f02:	601a      	str	r2, [r3, #0]
 8011f04:	e002      	b.n	8011f0c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	697a      	ldr	r2, [r7, #20]
 8011f0a:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8011f0c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011f0e:	6978      	ldr	r0, [r7, #20]
 8011f10:	f7ff f8de 	bl	80110d0 <tcp_oos_insert_segment>
                }
                break;
 8011f14:	e138      	b.n	8012188 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8011f16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	d117      	bne.n	8011f4c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8011f1c:	4b2e      	ldr	r3, [pc, #184]	@ (8011fd8 <tcp_receive+0xd00>)
 8011f1e:	681a      	ldr	r2, [r3, #0]
 8011f20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011f22:	68db      	ldr	r3, [r3, #12]
 8011f24:	685b      	ldr	r3, [r3, #4]
 8011f26:	1ad3      	subs	r3, r2, r3
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	da57      	bge.n	8011fdc <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011f2c:	4829      	ldr	r0, [pc, #164]	@ (8011fd4 <tcp_receive+0xcfc>)
 8011f2e:	f7fd fb7f 	bl	800f630 <tcp_seg_copy>
 8011f32:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8011f34:	69bb      	ldr	r3, [r7, #24]
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	f000 8128 	beq.w	801218c <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	69ba      	ldr	r2, [r7, #24]
 8011f40:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 8011f42:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011f44:	69b8      	ldr	r0, [r7, #24]
 8011f46:	f7ff f8c3 	bl	80110d0 <tcp_oos_insert_segment>
                  }
                  break;
 8011f4a:	e11f      	b.n	801218c <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8011f4c:	4b22      	ldr	r3, [pc, #136]	@ (8011fd8 <tcp_receive+0xd00>)
 8011f4e:	681a      	ldr	r2, [r3, #0]
 8011f50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011f52:	68db      	ldr	r3, [r3, #12]
 8011f54:	685b      	ldr	r3, [r3, #4]
 8011f56:	1ad3      	subs	r3, r2, r3
 8011f58:	3b01      	subs	r3, #1
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	db3e      	blt.n	8011fdc <tcp_receive+0xd04>
 8011f5e:	4b1e      	ldr	r3, [pc, #120]	@ (8011fd8 <tcp_receive+0xd00>)
 8011f60:	681a      	ldr	r2, [r3, #0]
 8011f62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011f64:	68db      	ldr	r3, [r3, #12]
 8011f66:	685b      	ldr	r3, [r3, #4]
 8011f68:	1ad3      	subs	r3, r2, r3
 8011f6a:	3301      	adds	r3, #1
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	dc35      	bgt.n	8011fdc <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011f70:	4818      	ldr	r0, [pc, #96]	@ (8011fd4 <tcp_receive+0xcfc>)
 8011f72:	f7fd fb5d 	bl	800f630 <tcp_seg_copy>
 8011f76:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8011f78:	69fb      	ldr	r3, [r7, #28]
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	f000 8108 	beq.w	8012190 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8011f80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011f82:	68db      	ldr	r3, [r3, #12]
 8011f84:	685b      	ldr	r3, [r3, #4]
 8011f86:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011f88:	8912      	ldrh	r2, [r2, #8]
 8011f8a:	441a      	add	r2, r3
 8011f8c:	4b12      	ldr	r3, [pc, #72]	@ (8011fd8 <tcp_receive+0xd00>)
 8011f8e:	681b      	ldr	r3, [r3, #0]
 8011f90:	1ad3      	subs	r3, r2, r3
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	dd12      	ble.n	8011fbc <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8011f96:	4b10      	ldr	r3, [pc, #64]	@ (8011fd8 <tcp_receive+0xd00>)
 8011f98:	681b      	ldr	r3, [r3, #0]
 8011f9a:	b29a      	uxth	r2, r3
 8011f9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011f9e:	68db      	ldr	r3, [r3, #12]
 8011fa0:	685b      	ldr	r3, [r3, #4]
 8011fa2:	b29b      	uxth	r3, r3
 8011fa4:	1ad3      	subs	r3, r2, r3
 8011fa6:	b29a      	uxth	r2, r3
 8011fa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011faa:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8011fac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011fae:	685a      	ldr	r2, [r3, #4]
 8011fb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011fb2:	891b      	ldrh	r3, [r3, #8]
 8011fb4:	4619      	mov	r1, r3
 8011fb6:	4610      	mov	r0, r2
 8011fb8:	f7fb ff1a 	bl	800ddf0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8011fbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011fbe:	69fa      	ldr	r2, [r7, #28]
 8011fc0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8011fc2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011fc4:	69f8      	ldr	r0, [r7, #28]
 8011fc6:	f7ff f883 	bl	80110d0 <tcp_oos_insert_segment>
                  }
                  break;
 8011fca:	e0e1      	b.n	8012190 <tcp_receive+0xeb8>
 8011fcc:	2000c6d0 	.word	0x2000c6d0
 8011fd0:	2000c6cd 	.word	0x2000c6cd
 8011fd4:	2000c6a0 	.word	0x2000c6a0
 8011fd8:	2000c6c0 	.word	0x2000c6c0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8011fdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011fde:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8011fe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011fe2:	681b      	ldr	r3, [r3, #0]
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	f040 80c5 	bne.w	8012174 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8011fea:	4b7f      	ldr	r3, [pc, #508]	@ (80121e8 <tcp_receive+0xf10>)
 8011fec:	681a      	ldr	r2, [r3, #0]
 8011fee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ff0:	68db      	ldr	r3, [r3, #12]
 8011ff2:	685b      	ldr	r3, [r3, #4]
 8011ff4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	f340 80bc 	ble.w	8012174 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011ffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ffe:	68db      	ldr	r3, [r3, #12]
 8012000:	899b      	ldrh	r3, [r3, #12]
 8012002:	b29b      	uxth	r3, r3
 8012004:	4618      	mov	r0, r3
 8012006:	f7fa fcb9 	bl	800c97c <lwip_htons>
 801200a:	4603      	mov	r3, r0
 801200c:	b2db      	uxtb	r3, r3
 801200e:	f003 0301 	and.w	r3, r3, #1
 8012012:	2b00      	cmp	r3, #0
 8012014:	f040 80be 	bne.w	8012194 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8012018:	4874      	ldr	r0, [pc, #464]	@ (80121ec <tcp_receive+0xf14>)
 801201a:	f7fd fb09 	bl	800f630 <tcp_seg_copy>
 801201e:	4602      	mov	r2, r0
 8012020:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012022:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8012024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012026:	681b      	ldr	r3, [r3, #0]
 8012028:	2b00      	cmp	r3, #0
 801202a:	f000 80b5 	beq.w	8012198 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801202e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012030:	68db      	ldr	r3, [r3, #12]
 8012032:	685b      	ldr	r3, [r3, #4]
 8012034:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012036:	8912      	ldrh	r2, [r2, #8]
 8012038:	441a      	add	r2, r3
 801203a:	4b6b      	ldr	r3, [pc, #428]	@ (80121e8 <tcp_receive+0xf10>)
 801203c:	681b      	ldr	r3, [r3, #0]
 801203e:	1ad3      	subs	r3, r2, r3
 8012040:	2b00      	cmp	r3, #0
 8012042:	dd12      	ble.n	801206a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8012044:	4b68      	ldr	r3, [pc, #416]	@ (80121e8 <tcp_receive+0xf10>)
 8012046:	681b      	ldr	r3, [r3, #0]
 8012048:	b29a      	uxth	r2, r3
 801204a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801204c:	68db      	ldr	r3, [r3, #12]
 801204e:	685b      	ldr	r3, [r3, #4]
 8012050:	b29b      	uxth	r3, r3
 8012052:	1ad3      	subs	r3, r2, r3
 8012054:	b29a      	uxth	r2, r3
 8012056:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012058:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801205a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801205c:	685a      	ldr	r2, [r3, #4]
 801205e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012060:	891b      	ldrh	r3, [r3, #8]
 8012062:	4619      	mov	r1, r3
 8012064:	4610      	mov	r0, r2
 8012066:	f7fb fec3 	bl	800ddf0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801206a:	4b61      	ldr	r3, [pc, #388]	@ (80121f0 <tcp_receive+0xf18>)
 801206c:	881b      	ldrh	r3, [r3, #0]
 801206e:	461a      	mov	r2, r3
 8012070:	4b5d      	ldr	r3, [pc, #372]	@ (80121e8 <tcp_receive+0xf10>)
 8012072:	681b      	ldr	r3, [r3, #0]
 8012074:	441a      	add	r2, r3
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801207a:	6879      	ldr	r1, [r7, #4]
 801207c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801207e:	440b      	add	r3, r1
 8012080:	1ad3      	subs	r3, r2, r3
 8012082:	2b00      	cmp	r3, #0
 8012084:	f340 8088 	ble.w	8012198 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8012088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801208a:	681b      	ldr	r3, [r3, #0]
 801208c:	68db      	ldr	r3, [r3, #12]
 801208e:	899b      	ldrh	r3, [r3, #12]
 8012090:	b29b      	uxth	r3, r3
 8012092:	4618      	mov	r0, r3
 8012094:	f7fa fc72 	bl	800c97c <lwip_htons>
 8012098:	4603      	mov	r3, r0
 801209a:	b2db      	uxtb	r3, r3
 801209c:	f003 0301 	and.w	r3, r3, #1
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	d021      	beq.n	80120e8 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80120a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80120a6:	681b      	ldr	r3, [r3, #0]
 80120a8:	68db      	ldr	r3, [r3, #12]
 80120aa:	899b      	ldrh	r3, [r3, #12]
 80120ac:	b29b      	uxth	r3, r3
 80120ae:	b21b      	sxth	r3, r3
 80120b0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80120b4:	b21c      	sxth	r4, r3
 80120b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80120b8:	681b      	ldr	r3, [r3, #0]
 80120ba:	68db      	ldr	r3, [r3, #12]
 80120bc:	899b      	ldrh	r3, [r3, #12]
 80120be:	b29b      	uxth	r3, r3
 80120c0:	4618      	mov	r0, r3
 80120c2:	f7fa fc5b 	bl	800c97c <lwip_htons>
 80120c6:	4603      	mov	r3, r0
 80120c8:	b2db      	uxtb	r3, r3
 80120ca:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80120ce:	b29b      	uxth	r3, r3
 80120d0:	4618      	mov	r0, r3
 80120d2:	f7fa fc53 	bl	800c97c <lwip_htons>
 80120d6:	4603      	mov	r3, r0
 80120d8:	b21b      	sxth	r3, r3
 80120da:	4323      	orrs	r3, r4
 80120dc:	b21a      	sxth	r2, r3
 80120de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80120e0:	681b      	ldr	r3, [r3, #0]
 80120e2:	68db      	ldr	r3, [r3, #12]
 80120e4:	b292      	uxth	r2, r2
 80120e6:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80120ec:	b29a      	uxth	r2, r3
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80120f2:	4413      	add	r3, r2
 80120f4:	b299      	uxth	r1, r3
 80120f6:	4b3c      	ldr	r3, [pc, #240]	@ (80121e8 <tcp_receive+0xf10>)
 80120f8:	681b      	ldr	r3, [r3, #0]
 80120fa:	b29a      	uxth	r2, r3
 80120fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80120fe:	681b      	ldr	r3, [r3, #0]
 8012100:	1a8a      	subs	r2, r1, r2
 8012102:	b292      	uxth	r2, r2
 8012104:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8012106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012108:	681b      	ldr	r3, [r3, #0]
 801210a:	685a      	ldr	r2, [r3, #4]
 801210c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801210e:	681b      	ldr	r3, [r3, #0]
 8012110:	891b      	ldrh	r3, [r3, #8]
 8012112:	4619      	mov	r1, r3
 8012114:	4610      	mov	r0, r2
 8012116:	f7fb fe6b 	bl	800ddf0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801211a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801211c:	681b      	ldr	r3, [r3, #0]
 801211e:	891c      	ldrh	r4, [r3, #8]
 8012120:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012122:	681b      	ldr	r3, [r3, #0]
 8012124:	68db      	ldr	r3, [r3, #12]
 8012126:	899b      	ldrh	r3, [r3, #12]
 8012128:	b29b      	uxth	r3, r3
 801212a:	4618      	mov	r0, r3
 801212c:	f7fa fc26 	bl	800c97c <lwip_htons>
 8012130:	4603      	mov	r3, r0
 8012132:	b2db      	uxtb	r3, r3
 8012134:	f003 0303 	and.w	r3, r3, #3
 8012138:	2b00      	cmp	r3, #0
 801213a:	d001      	beq.n	8012140 <tcp_receive+0xe68>
 801213c:	2301      	movs	r3, #1
 801213e:	e000      	b.n	8012142 <tcp_receive+0xe6a>
 8012140:	2300      	movs	r3, #0
 8012142:	4423      	add	r3, r4
 8012144:	b29a      	uxth	r2, r3
 8012146:	4b2a      	ldr	r3, [pc, #168]	@ (80121f0 <tcp_receive+0xf18>)
 8012148:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801214a:	4b29      	ldr	r3, [pc, #164]	@ (80121f0 <tcp_receive+0xf18>)
 801214c:	881b      	ldrh	r3, [r3, #0]
 801214e:	461a      	mov	r2, r3
 8012150:	4b25      	ldr	r3, [pc, #148]	@ (80121e8 <tcp_receive+0xf10>)
 8012152:	681b      	ldr	r3, [r3, #0]
 8012154:	441a      	add	r2, r3
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801215a:	6879      	ldr	r1, [r7, #4]
 801215c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801215e:	440b      	add	r3, r1
 8012160:	429a      	cmp	r2, r3
 8012162:	d019      	beq.n	8012198 <tcp_receive+0xec0>
 8012164:	4b23      	ldr	r3, [pc, #140]	@ (80121f4 <tcp_receive+0xf1c>)
 8012166:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 801216a:	4923      	ldr	r1, [pc, #140]	@ (80121f8 <tcp_receive+0xf20>)
 801216c:	4823      	ldr	r0, [pc, #140]	@ (80121fc <tcp_receive+0xf24>)
 801216e:	f005 f8b1 	bl	80172d4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8012172:	e011      	b.n	8012198 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012176:	681b      	ldr	r3, [r3, #0]
 8012178:	63bb      	str	r3, [r7, #56]	@ 0x38
 801217a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801217c:	2b00      	cmp	r3, #0
 801217e:	f47f aea5 	bne.w	8011ecc <tcp_receive+0xbf4>
 8012182:	e00a      	b.n	801219a <tcp_receive+0xec2>
                break;
 8012184:	bf00      	nop
 8012186:	e008      	b.n	801219a <tcp_receive+0xec2>
                break;
 8012188:	bf00      	nop
 801218a:	e006      	b.n	801219a <tcp_receive+0xec2>
                  break;
 801218c:	bf00      	nop
 801218e:	e004      	b.n	801219a <tcp_receive+0xec2>
                  break;
 8012190:	bf00      	nop
 8012192:	e002      	b.n	801219a <tcp_receive+0xec2>
                  break;
 8012194:	bf00      	nop
 8012196:	e000      	b.n	801219a <tcp_receive+0xec2>
                break;
 8012198:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801219a:	6878      	ldr	r0, [r7, #4]
 801219c:	f001 fa30 	bl	8013600 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80121a0:	e003      	b.n	80121aa <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80121a2:	6878      	ldr	r0, [r7, #4]
 80121a4:	f001 fa2c 	bl	8013600 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80121a8:	e01a      	b.n	80121e0 <tcp_receive+0xf08>
 80121aa:	e019      	b.n	80121e0 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80121ac:	4b0e      	ldr	r3, [pc, #56]	@ (80121e8 <tcp_receive+0xf10>)
 80121ae:	681a      	ldr	r2, [r3, #0]
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80121b4:	1ad3      	subs	r3, r2, r3
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	db0a      	blt.n	80121d0 <tcp_receive+0xef8>
 80121ba:	4b0b      	ldr	r3, [pc, #44]	@ (80121e8 <tcp_receive+0xf10>)
 80121bc:	681a      	ldr	r2, [r3, #0]
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80121c2:	6879      	ldr	r1, [r7, #4]
 80121c4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80121c6:	440b      	add	r3, r1
 80121c8:	1ad3      	subs	r3, r2, r3
 80121ca:	3301      	adds	r3, #1
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	dd07      	ble.n	80121e0 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	8b5b      	ldrh	r3, [r3, #26]
 80121d4:	f043 0302 	orr.w	r3, r3, #2
 80121d8:	b29a      	uxth	r2, r3
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80121de:	e7ff      	b.n	80121e0 <tcp_receive+0xf08>
 80121e0:	bf00      	nop
 80121e2:	3750      	adds	r7, #80	@ 0x50
 80121e4:	46bd      	mov	sp, r7
 80121e6:	bdb0      	pop	{r4, r5, r7, pc}
 80121e8:	2000c6c0 	.word	0x2000c6c0
 80121ec:	2000c6a0 	.word	0x2000c6a0
 80121f0:	2000c6ca 	.word	0x2000c6ca
 80121f4:	08019aac 	.word	0x08019aac
 80121f8:	08019e54 	.word	0x08019e54
 80121fc:	08019af8 	.word	0x08019af8

08012200 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8012200:	b480      	push	{r7}
 8012202:	b083      	sub	sp, #12
 8012204:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8012206:	4b15      	ldr	r3, [pc, #84]	@ (801225c <tcp_get_next_optbyte+0x5c>)
 8012208:	881b      	ldrh	r3, [r3, #0]
 801220a:	1c5a      	adds	r2, r3, #1
 801220c:	b291      	uxth	r1, r2
 801220e:	4a13      	ldr	r2, [pc, #76]	@ (801225c <tcp_get_next_optbyte+0x5c>)
 8012210:	8011      	strh	r1, [r2, #0]
 8012212:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8012214:	4b12      	ldr	r3, [pc, #72]	@ (8012260 <tcp_get_next_optbyte+0x60>)
 8012216:	681b      	ldr	r3, [r3, #0]
 8012218:	2b00      	cmp	r3, #0
 801221a:	d004      	beq.n	8012226 <tcp_get_next_optbyte+0x26>
 801221c:	4b11      	ldr	r3, [pc, #68]	@ (8012264 <tcp_get_next_optbyte+0x64>)
 801221e:	881b      	ldrh	r3, [r3, #0]
 8012220:	88fa      	ldrh	r2, [r7, #6]
 8012222:	429a      	cmp	r2, r3
 8012224:	d208      	bcs.n	8012238 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8012226:	4b10      	ldr	r3, [pc, #64]	@ (8012268 <tcp_get_next_optbyte+0x68>)
 8012228:	681b      	ldr	r3, [r3, #0]
 801222a:	3314      	adds	r3, #20
 801222c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801222e:	88fb      	ldrh	r3, [r7, #6]
 8012230:	683a      	ldr	r2, [r7, #0]
 8012232:	4413      	add	r3, r2
 8012234:	781b      	ldrb	r3, [r3, #0]
 8012236:	e00b      	b.n	8012250 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8012238:	88fb      	ldrh	r3, [r7, #6]
 801223a:	b2da      	uxtb	r2, r3
 801223c:	4b09      	ldr	r3, [pc, #36]	@ (8012264 <tcp_get_next_optbyte+0x64>)
 801223e:	881b      	ldrh	r3, [r3, #0]
 8012240:	b2db      	uxtb	r3, r3
 8012242:	1ad3      	subs	r3, r2, r3
 8012244:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8012246:	4b06      	ldr	r3, [pc, #24]	@ (8012260 <tcp_get_next_optbyte+0x60>)
 8012248:	681a      	ldr	r2, [r3, #0]
 801224a:	797b      	ldrb	r3, [r7, #5]
 801224c:	4413      	add	r3, r2
 801224e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012250:	4618      	mov	r0, r3
 8012252:	370c      	adds	r7, #12
 8012254:	46bd      	mov	sp, r7
 8012256:	f85d 7b04 	ldr.w	r7, [sp], #4
 801225a:	4770      	bx	lr
 801225c:	2000c6bc 	.word	0x2000c6bc
 8012260:	2000c6b8 	.word	0x2000c6b8
 8012264:	2000c6b6 	.word	0x2000c6b6
 8012268:	2000c6b0 	.word	0x2000c6b0

0801226c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801226c:	b580      	push	{r7, lr}
 801226e:	b084      	sub	sp, #16
 8012270:	af00      	add	r7, sp, #0
 8012272:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	2b00      	cmp	r3, #0
 8012278:	d106      	bne.n	8012288 <tcp_parseopt+0x1c>
 801227a:	4b32      	ldr	r3, [pc, #200]	@ (8012344 <tcp_parseopt+0xd8>)
 801227c:	f240 727d 	movw	r2, #1917	@ 0x77d
 8012280:	4931      	ldr	r1, [pc, #196]	@ (8012348 <tcp_parseopt+0xdc>)
 8012282:	4832      	ldr	r0, [pc, #200]	@ (801234c <tcp_parseopt+0xe0>)
 8012284:	f005 f826 	bl	80172d4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8012288:	4b31      	ldr	r3, [pc, #196]	@ (8012350 <tcp_parseopt+0xe4>)
 801228a:	881b      	ldrh	r3, [r3, #0]
 801228c:	2b00      	cmp	r3, #0
 801228e:	d056      	beq.n	801233e <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012290:	4b30      	ldr	r3, [pc, #192]	@ (8012354 <tcp_parseopt+0xe8>)
 8012292:	2200      	movs	r2, #0
 8012294:	801a      	strh	r2, [r3, #0]
 8012296:	e046      	b.n	8012326 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8012298:	f7ff ffb2 	bl	8012200 <tcp_get_next_optbyte>
 801229c:	4603      	mov	r3, r0
 801229e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80122a0:	7bfb      	ldrb	r3, [r7, #15]
 80122a2:	2b02      	cmp	r3, #2
 80122a4:	d006      	beq.n	80122b4 <tcp_parseopt+0x48>
 80122a6:	2b02      	cmp	r3, #2
 80122a8:	dc2a      	bgt.n	8012300 <tcp_parseopt+0x94>
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d042      	beq.n	8012334 <tcp_parseopt+0xc8>
 80122ae:	2b01      	cmp	r3, #1
 80122b0:	d038      	beq.n	8012324 <tcp_parseopt+0xb8>
 80122b2:	e025      	b.n	8012300 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80122b4:	f7ff ffa4 	bl	8012200 <tcp_get_next_optbyte>
 80122b8:	4603      	mov	r3, r0
 80122ba:	2b04      	cmp	r3, #4
 80122bc:	d13c      	bne.n	8012338 <tcp_parseopt+0xcc>
 80122be:	4b25      	ldr	r3, [pc, #148]	@ (8012354 <tcp_parseopt+0xe8>)
 80122c0:	881b      	ldrh	r3, [r3, #0]
 80122c2:	3301      	adds	r3, #1
 80122c4:	4a22      	ldr	r2, [pc, #136]	@ (8012350 <tcp_parseopt+0xe4>)
 80122c6:	8812      	ldrh	r2, [r2, #0]
 80122c8:	4293      	cmp	r3, r2
 80122ca:	da35      	bge.n	8012338 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80122cc:	f7ff ff98 	bl	8012200 <tcp_get_next_optbyte>
 80122d0:	4603      	mov	r3, r0
 80122d2:	021b      	lsls	r3, r3, #8
 80122d4:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80122d6:	f7ff ff93 	bl	8012200 <tcp_get_next_optbyte>
 80122da:	4603      	mov	r3, r0
 80122dc:	461a      	mov	r2, r3
 80122de:	89bb      	ldrh	r3, [r7, #12]
 80122e0:	4313      	orrs	r3, r2
 80122e2:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80122e4:	89bb      	ldrh	r3, [r7, #12]
 80122e6:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 80122ea:	d804      	bhi.n	80122f6 <tcp_parseopt+0x8a>
 80122ec:	89bb      	ldrh	r3, [r7, #12]
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	d001      	beq.n	80122f6 <tcp_parseopt+0x8a>
 80122f2:	89ba      	ldrh	r2, [r7, #12]
 80122f4:	e001      	b.n	80122fa <tcp_parseopt+0x8e>
 80122f6:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 80122fe:	e012      	b.n	8012326 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8012300:	f7ff ff7e 	bl	8012200 <tcp_get_next_optbyte>
 8012304:	4603      	mov	r3, r0
 8012306:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8012308:	7afb      	ldrb	r3, [r7, #11]
 801230a:	2b01      	cmp	r3, #1
 801230c:	d916      	bls.n	801233c <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801230e:	7afb      	ldrb	r3, [r7, #11]
 8012310:	b29a      	uxth	r2, r3
 8012312:	4b10      	ldr	r3, [pc, #64]	@ (8012354 <tcp_parseopt+0xe8>)
 8012314:	881b      	ldrh	r3, [r3, #0]
 8012316:	4413      	add	r3, r2
 8012318:	b29b      	uxth	r3, r3
 801231a:	3b02      	subs	r3, #2
 801231c:	b29a      	uxth	r2, r3
 801231e:	4b0d      	ldr	r3, [pc, #52]	@ (8012354 <tcp_parseopt+0xe8>)
 8012320:	801a      	strh	r2, [r3, #0]
 8012322:	e000      	b.n	8012326 <tcp_parseopt+0xba>
          break;
 8012324:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012326:	4b0b      	ldr	r3, [pc, #44]	@ (8012354 <tcp_parseopt+0xe8>)
 8012328:	881a      	ldrh	r2, [r3, #0]
 801232a:	4b09      	ldr	r3, [pc, #36]	@ (8012350 <tcp_parseopt+0xe4>)
 801232c:	881b      	ldrh	r3, [r3, #0]
 801232e:	429a      	cmp	r2, r3
 8012330:	d3b2      	bcc.n	8012298 <tcp_parseopt+0x2c>
 8012332:	e004      	b.n	801233e <tcp_parseopt+0xd2>
          return;
 8012334:	bf00      	nop
 8012336:	e002      	b.n	801233e <tcp_parseopt+0xd2>
            return;
 8012338:	bf00      	nop
 801233a:	e000      	b.n	801233e <tcp_parseopt+0xd2>
            return;
 801233c:	bf00      	nop
      }
    }
  }
}
 801233e:	3710      	adds	r7, #16
 8012340:	46bd      	mov	sp, r7
 8012342:	bd80      	pop	{r7, pc}
 8012344:	08019aac 	.word	0x08019aac
 8012348:	08019f10 	.word	0x08019f10
 801234c:	08019af8 	.word	0x08019af8
 8012350:	2000c6b4 	.word	0x2000c6b4
 8012354:	2000c6bc 	.word	0x2000c6bc

08012358 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8012358:	b480      	push	{r7}
 801235a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801235c:	4b05      	ldr	r3, [pc, #20]	@ (8012374 <tcp_trigger_input_pcb_close+0x1c>)
 801235e:	781b      	ldrb	r3, [r3, #0]
 8012360:	f043 0310 	orr.w	r3, r3, #16
 8012364:	b2da      	uxtb	r2, r3
 8012366:	4b03      	ldr	r3, [pc, #12]	@ (8012374 <tcp_trigger_input_pcb_close+0x1c>)
 8012368:	701a      	strb	r2, [r3, #0]
}
 801236a:	bf00      	nop
 801236c:	46bd      	mov	sp, r7
 801236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012372:	4770      	bx	lr
 8012374:	2000c6cd 	.word	0x2000c6cd

08012378 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8012378:	b580      	push	{r7, lr}
 801237a:	b084      	sub	sp, #16
 801237c:	af00      	add	r7, sp, #0
 801237e:	60f8      	str	r0, [r7, #12]
 8012380:	60b9      	str	r1, [r7, #8]
 8012382:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8012384:	68fb      	ldr	r3, [r7, #12]
 8012386:	2b00      	cmp	r3, #0
 8012388:	d00a      	beq.n	80123a0 <tcp_route+0x28>
 801238a:	68fb      	ldr	r3, [r7, #12]
 801238c:	7a1b      	ldrb	r3, [r3, #8]
 801238e:	2b00      	cmp	r3, #0
 8012390:	d006      	beq.n	80123a0 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8012392:	68fb      	ldr	r3, [r7, #12]
 8012394:	7a1b      	ldrb	r3, [r3, #8]
 8012396:	4618      	mov	r0, r3
 8012398:	f7fb fb22 	bl	800d9e0 <netif_get_by_index>
 801239c:	4603      	mov	r3, r0
 801239e:	e003      	b.n	80123a8 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80123a0:	6878      	ldr	r0, [r7, #4]
 80123a2:	f002 fe7b 	bl	801509c <ip4_route>
 80123a6:	4603      	mov	r3, r0
  }
}
 80123a8:	4618      	mov	r0, r3
 80123aa:	3710      	adds	r7, #16
 80123ac:	46bd      	mov	sp, r7
 80123ae:	bd80      	pop	{r7, pc}

080123b0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80123b0:	b590      	push	{r4, r7, lr}
 80123b2:	b087      	sub	sp, #28
 80123b4:	af00      	add	r7, sp, #0
 80123b6:	60f8      	str	r0, [r7, #12]
 80123b8:	60b9      	str	r1, [r7, #8]
 80123ba:	603b      	str	r3, [r7, #0]
 80123bc:	4613      	mov	r3, r2
 80123be:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80123c0:	68fb      	ldr	r3, [r7, #12]
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d105      	bne.n	80123d2 <tcp_create_segment+0x22>
 80123c6:	4b43      	ldr	r3, [pc, #268]	@ (80124d4 <tcp_create_segment+0x124>)
 80123c8:	22a3      	movs	r2, #163	@ 0xa3
 80123ca:	4943      	ldr	r1, [pc, #268]	@ (80124d8 <tcp_create_segment+0x128>)
 80123cc:	4843      	ldr	r0, [pc, #268]	@ (80124dc <tcp_create_segment+0x12c>)
 80123ce:	f004 ff81 	bl	80172d4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80123d2:	68bb      	ldr	r3, [r7, #8]
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d105      	bne.n	80123e4 <tcp_create_segment+0x34>
 80123d8:	4b3e      	ldr	r3, [pc, #248]	@ (80124d4 <tcp_create_segment+0x124>)
 80123da:	22a4      	movs	r2, #164	@ 0xa4
 80123dc:	4940      	ldr	r1, [pc, #256]	@ (80124e0 <tcp_create_segment+0x130>)
 80123de:	483f      	ldr	r0, [pc, #252]	@ (80124dc <tcp_create_segment+0x12c>)
 80123e0:	f004 ff78 	bl	80172d4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80123e4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80123e8:	009b      	lsls	r3, r3, #2
 80123ea:	b2db      	uxtb	r3, r3
 80123ec:	f003 0304 	and.w	r3, r3, #4
 80123f0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80123f2:	2003      	movs	r0, #3
 80123f4:	f7fa ff9a 	bl	800d32c <memp_malloc>
 80123f8:	6138      	str	r0, [r7, #16]
 80123fa:	693b      	ldr	r3, [r7, #16]
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	d104      	bne.n	801240a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8012400:	68b8      	ldr	r0, [r7, #8]
 8012402:	f7fb fe7b 	bl	800e0fc <pbuf_free>
    return NULL;
 8012406:	2300      	movs	r3, #0
 8012408:	e060      	b.n	80124cc <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 801240a:	693b      	ldr	r3, [r7, #16]
 801240c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8012410:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8012412:	693b      	ldr	r3, [r7, #16]
 8012414:	2200      	movs	r2, #0
 8012416:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8012418:	693b      	ldr	r3, [r7, #16]
 801241a:	68ba      	ldr	r2, [r7, #8]
 801241c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801241e:	68bb      	ldr	r3, [r7, #8]
 8012420:	891a      	ldrh	r2, [r3, #8]
 8012422:	7dfb      	ldrb	r3, [r7, #23]
 8012424:	b29b      	uxth	r3, r3
 8012426:	429a      	cmp	r2, r3
 8012428:	d205      	bcs.n	8012436 <tcp_create_segment+0x86>
 801242a:	4b2a      	ldr	r3, [pc, #168]	@ (80124d4 <tcp_create_segment+0x124>)
 801242c:	22b0      	movs	r2, #176	@ 0xb0
 801242e:	492d      	ldr	r1, [pc, #180]	@ (80124e4 <tcp_create_segment+0x134>)
 8012430:	482a      	ldr	r0, [pc, #168]	@ (80124dc <tcp_create_segment+0x12c>)
 8012432:	f004 ff4f 	bl	80172d4 <iprintf>
  seg->len = p->tot_len - optlen;
 8012436:	68bb      	ldr	r3, [r7, #8]
 8012438:	891a      	ldrh	r2, [r3, #8]
 801243a:	7dfb      	ldrb	r3, [r7, #23]
 801243c:	b29b      	uxth	r3, r3
 801243e:	1ad3      	subs	r3, r2, r3
 8012440:	b29a      	uxth	r2, r3
 8012442:	693b      	ldr	r3, [r7, #16]
 8012444:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8012446:	2114      	movs	r1, #20
 8012448:	68b8      	ldr	r0, [r7, #8]
 801244a:	f7fb fdc1 	bl	800dfd0 <pbuf_add_header>
 801244e:	4603      	mov	r3, r0
 8012450:	2b00      	cmp	r3, #0
 8012452:	d004      	beq.n	801245e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8012454:	6938      	ldr	r0, [r7, #16]
 8012456:	f7fd f8d2 	bl	800f5fe <tcp_seg_free>
    return NULL;
 801245a:	2300      	movs	r3, #0
 801245c:	e036      	b.n	80124cc <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801245e:	693b      	ldr	r3, [r7, #16]
 8012460:	685b      	ldr	r3, [r3, #4]
 8012462:	685a      	ldr	r2, [r3, #4]
 8012464:	693b      	ldr	r3, [r7, #16]
 8012466:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8012468:	68fb      	ldr	r3, [r7, #12]
 801246a:	8ada      	ldrh	r2, [r3, #22]
 801246c:	693b      	ldr	r3, [r7, #16]
 801246e:	68dc      	ldr	r4, [r3, #12]
 8012470:	4610      	mov	r0, r2
 8012472:	f7fa fa83 	bl	800c97c <lwip_htons>
 8012476:	4603      	mov	r3, r0
 8012478:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801247a:	68fb      	ldr	r3, [r7, #12]
 801247c:	8b1a      	ldrh	r2, [r3, #24]
 801247e:	693b      	ldr	r3, [r7, #16]
 8012480:	68dc      	ldr	r4, [r3, #12]
 8012482:	4610      	mov	r0, r2
 8012484:	f7fa fa7a 	bl	800c97c <lwip_htons>
 8012488:	4603      	mov	r3, r0
 801248a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801248c:	693b      	ldr	r3, [r7, #16]
 801248e:	68dc      	ldr	r4, [r3, #12]
 8012490:	6838      	ldr	r0, [r7, #0]
 8012492:	f7fa fa89 	bl	800c9a8 <lwip_htonl>
 8012496:	4603      	mov	r3, r0
 8012498:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801249a:	7dfb      	ldrb	r3, [r7, #23]
 801249c:	089b      	lsrs	r3, r3, #2
 801249e:	b2db      	uxtb	r3, r3
 80124a0:	3305      	adds	r3, #5
 80124a2:	b29b      	uxth	r3, r3
 80124a4:	031b      	lsls	r3, r3, #12
 80124a6:	b29a      	uxth	r2, r3
 80124a8:	79fb      	ldrb	r3, [r7, #7]
 80124aa:	b29b      	uxth	r3, r3
 80124ac:	4313      	orrs	r3, r2
 80124ae:	b29a      	uxth	r2, r3
 80124b0:	693b      	ldr	r3, [r7, #16]
 80124b2:	68dc      	ldr	r4, [r3, #12]
 80124b4:	4610      	mov	r0, r2
 80124b6:	f7fa fa61 	bl	800c97c <lwip_htons>
 80124ba:	4603      	mov	r3, r0
 80124bc:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80124be:	693b      	ldr	r3, [r7, #16]
 80124c0:	68db      	ldr	r3, [r3, #12]
 80124c2:	2200      	movs	r2, #0
 80124c4:	749a      	strb	r2, [r3, #18]
 80124c6:	2200      	movs	r2, #0
 80124c8:	74da      	strb	r2, [r3, #19]
  return seg;
 80124ca:	693b      	ldr	r3, [r7, #16]
}
 80124cc:	4618      	mov	r0, r3
 80124ce:	371c      	adds	r7, #28
 80124d0:	46bd      	mov	sp, r7
 80124d2:	bd90      	pop	{r4, r7, pc}
 80124d4:	08019f2c 	.word	0x08019f2c
 80124d8:	08019f60 	.word	0x08019f60
 80124dc:	08019f80 	.word	0x08019f80
 80124e0:	08019fa8 	.word	0x08019fa8
 80124e4:	08019fcc 	.word	0x08019fcc

080124e8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80124e8:	b590      	push	{r4, r7, lr}
 80124ea:	b08b      	sub	sp, #44	@ 0x2c
 80124ec:	af02      	add	r7, sp, #8
 80124ee:	6078      	str	r0, [r7, #4]
 80124f0:	460b      	mov	r3, r1
 80124f2:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80124f4:	2300      	movs	r3, #0
 80124f6:	61fb      	str	r3, [r7, #28]
 80124f8:	2300      	movs	r3, #0
 80124fa:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80124fc:	2300      	movs	r3, #0
 80124fe:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	2b00      	cmp	r3, #0
 8012504:	d106      	bne.n	8012514 <tcp_split_unsent_seg+0x2c>
 8012506:	4b95      	ldr	r3, [pc, #596]	@ (801275c <tcp_split_unsent_seg+0x274>)
 8012508:	f240 324b 	movw	r2, #843	@ 0x34b
 801250c:	4994      	ldr	r1, [pc, #592]	@ (8012760 <tcp_split_unsent_seg+0x278>)
 801250e:	4895      	ldr	r0, [pc, #596]	@ (8012764 <tcp_split_unsent_seg+0x27c>)
 8012510:	f004 fee0 	bl	80172d4 <iprintf>

  useg = pcb->unsent;
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012518:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801251a:	697b      	ldr	r3, [r7, #20]
 801251c:	2b00      	cmp	r3, #0
 801251e:	d102      	bne.n	8012526 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8012520:	f04f 33ff 	mov.w	r3, #4294967295
 8012524:	e116      	b.n	8012754 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8012526:	887b      	ldrh	r3, [r7, #2]
 8012528:	2b00      	cmp	r3, #0
 801252a:	d109      	bne.n	8012540 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801252c:	4b8b      	ldr	r3, [pc, #556]	@ (801275c <tcp_split_unsent_seg+0x274>)
 801252e:	f240 3253 	movw	r2, #851	@ 0x353
 8012532:	498d      	ldr	r1, [pc, #564]	@ (8012768 <tcp_split_unsent_seg+0x280>)
 8012534:	488b      	ldr	r0, [pc, #556]	@ (8012764 <tcp_split_unsent_seg+0x27c>)
 8012536:	f004 fecd 	bl	80172d4 <iprintf>
    return ERR_VAL;
 801253a:	f06f 0305 	mvn.w	r3, #5
 801253e:	e109      	b.n	8012754 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8012540:	697b      	ldr	r3, [r7, #20]
 8012542:	891b      	ldrh	r3, [r3, #8]
 8012544:	887a      	ldrh	r2, [r7, #2]
 8012546:	429a      	cmp	r2, r3
 8012548:	d301      	bcc.n	801254e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801254a:	2300      	movs	r3, #0
 801254c:	e102      	b.n	8012754 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012552:	887a      	ldrh	r2, [r7, #2]
 8012554:	429a      	cmp	r2, r3
 8012556:	d906      	bls.n	8012566 <tcp_split_unsent_seg+0x7e>
 8012558:	4b80      	ldr	r3, [pc, #512]	@ (801275c <tcp_split_unsent_seg+0x274>)
 801255a:	f240 325b 	movw	r2, #859	@ 0x35b
 801255e:	4983      	ldr	r1, [pc, #524]	@ (801276c <tcp_split_unsent_seg+0x284>)
 8012560:	4880      	ldr	r0, [pc, #512]	@ (8012764 <tcp_split_unsent_seg+0x27c>)
 8012562:	f004 feb7 	bl	80172d4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8012566:	697b      	ldr	r3, [r7, #20]
 8012568:	891b      	ldrh	r3, [r3, #8]
 801256a:	2b00      	cmp	r3, #0
 801256c:	d106      	bne.n	801257c <tcp_split_unsent_seg+0x94>
 801256e:	4b7b      	ldr	r3, [pc, #492]	@ (801275c <tcp_split_unsent_seg+0x274>)
 8012570:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8012574:	497e      	ldr	r1, [pc, #504]	@ (8012770 <tcp_split_unsent_seg+0x288>)
 8012576:	487b      	ldr	r0, [pc, #492]	@ (8012764 <tcp_split_unsent_seg+0x27c>)
 8012578:	f004 feac 	bl	80172d4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801257c:	697b      	ldr	r3, [r7, #20]
 801257e:	7a9b      	ldrb	r3, [r3, #10]
 8012580:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8012582:	7bfb      	ldrb	r3, [r7, #15]
 8012584:	009b      	lsls	r3, r3, #2
 8012586:	b2db      	uxtb	r3, r3
 8012588:	f003 0304 	and.w	r3, r3, #4
 801258c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801258e:	697b      	ldr	r3, [r7, #20]
 8012590:	891a      	ldrh	r2, [r3, #8]
 8012592:	887b      	ldrh	r3, [r7, #2]
 8012594:	1ad3      	subs	r3, r2, r3
 8012596:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8012598:	7bbb      	ldrb	r3, [r7, #14]
 801259a:	b29a      	uxth	r2, r3
 801259c:	89bb      	ldrh	r3, [r7, #12]
 801259e:	4413      	add	r3, r2
 80125a0:	b29b      	uxth	r3, r3
 80125a2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80125a6:	4619      	mov	r1, r3
 80125a8:	2036      	movs	r0, #54	@ 0x36
 80125aa:	f7fb fac3 	bl	800db34 <pbuf_alloc>
 80125ae:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80125b0:	693b      	ldr	r3, [r7, #16]
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	f000 80b7 	beq.w	8012726 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80125b8:	697b      	ldr	r3, [r7, #20]
 80125ba:	685b      	ldr	r3, [r3, #4]
 80125bc:	891a      	ldrh	r2, [r3, #8]
 80125be:	697b      	ldr	r3, [r7, #20]
 80125c0:	891b      	ldrh	r3, [r3, #8]
 80125c2:	1ad3      	subs	r3, r2, r3
 80125c4:	b29a      	uxth	r2, r3
 80125c6:	887b      	ldrh	r3, [r7, #2]
 80125c8:	4413      	add	r3, r2
 80125ca:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80125cc:	697b      	ldr	r3, [r7, #20]
 80125ce:	6858      	ldr	r0, [r3, #4]
 80125d0:	693b      	ldr	r3, [r7, #16]
 80125d2:	685a      	ldr	r2, [r3, #4]
 80125d4:	7bbb      	ldrb	r3, [r7, #14]
 80125d6:	18d1      	adds	r1, r2, r3
 80125d8:	897b      	ldrh	r3, [r7, #10]
 80125da:	89ba      	ldrh	r2, [r7, #12]
 80125dc:	f7fb ff84 	bl	800e4e8 <pbuf_copy_partial>
 80125e0:	4603      	mov	r3, r0
 80125e2:	461a      	mov	r2, r3
 80125e4:	89bb      	ldrh	r3, [r7, #12]
 80125e6:	4293      	cmp	r3, r2
 80125e8:	f040 809f 	bne.w	801272a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80125ec:	697b      	ldr	r3, [r7, #20]
 80125ee:	68db      	ldr	r3, [r3, #12]
 80125f0:	899b      	ldrh	r3, [r3, #12]
 80125f2:	b29b      	uxth	r3, r3
 80125f4:	4618      	mov	r0, r3
 80125f6:	f7fa f9c1 	bl	800c97c <lwip_htons>
 80125fa:	4603      	mov	r3, r0
 80125fc:	b2db      	uxtb	r3, r3
 80125fe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8012602:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8012604:	2300      	movs	r3, #0
 8012606:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8012608:	7efb      	ldrb	r3, [r7, #27]
 801260a:	f003 0308 	and.w	r3, r3, #8
 801260e:	2b00      	cmp	r3, #0
 8012610:	d007      	beq.n	8012622 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8012612:	7efb      	ldrb	r3, [r7, #27]
 8012614:	f023 0308 	bic.w	r3, r3, #8
 8012618:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801261a:	7ebb      	ldrb	r3, [r7, #26]
 801261c:	f043 0308 	orr.w	r3, r3, #8
 8012620:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8012622:	7efb      	ldrb	r3, [r7, #27]
 8012624:	f003 0301 	and.w	r3, r3, #1
 8012628:	2b00      	cmp	r3, #0
 801262a:	d007      	beq.n	801263c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801262c:	7efb      	ldrb	r3, [r7, #27]
 801262e:	f023 0301 	bic.w	r3, r3, #1
 8012632:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8012634:	7ebb      	ldrb	r3, [r7, #26]
 8012636:	f043 0301 	orr.w	r3, r3, #1
 801263a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801263c:	697b      	ldr	r3, [r7, #20]
 801263e:	68db      	ldr	r3, [r3, #12]
 8012640:	685b      	ldr	r3, [r3, #4]
 8012642:	4618      	mov	r0, r3
 8012644:	f7fa f9b0 	bl	800c9a8 <lwip_htonl>
 8012648:	4602      	mov	r2, r0
 801264a:	887b      	ldrh	r3, [r7, #2]
 801264c:	18d1      	adds	r1, r2, r3
 801264e:	7eba      	ldrb	r2, [r7, #26]
 8012650:	7bfb      	ldrb	r3, [r7, #15]
 8012652:	9300      	str	r3, [sp, #0]
 8012654:	460b      	mov	r3, r1
 8012656:	6939      	ldr	r1, [r7, #16]
 8012658:	6878      	ldr	r0, [r7, #4]
 801265a:	f7ff fea9 	bl	80123b0 <tcp_create_segment>
 801265e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8012660:	69fb      	ldr	r3, [r7, #28]
 8012662:	2b00      	cmp	r3, #0
 8012664:	d063      	beq.n	801272e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8012666:	697b      	ldr	r3, [r7, #20]
 8012668:	685b      	ldr	r3, [r3, #4]
 801266a:	4618      	mov	r0, r3
 801266c:	f7fb fdd4 	bl	800e218 <pbuf_clen>
 8012670:	4603      	mov	r3, r0
 8012672:	461a      	mov	r2, r3
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801267a:	1a9b      	subs	r3, r3, r2
 801267c:	b29a      	uxth	r2, r3
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8012684:	697b      	ldr	r3, [r7, #20]
 8012686:	6858      	ldr	r0, [r3, #4]
 8012688:	697b      	ldr	r3, [r7, #20]
 801268a:	685b      	ldr	r3, [r3, #4]
 801268c:	891a      	ldrh	r2, [r3, #8]
 801268e:	89bb      	ldrh	r3, [r7, #12]
 8012690:	1ad3      	subs	r3, r2, r3
 8012692:	b29b      	uxth	r3, r3
 8012694:	4619      	mov	r1, r3
 8012696:	f7fb fbab 	bl	800ddf0 <pbuf_realloc>
  useg->len -= remainder;
 801269a:	697b      	ldr	r3, [r7, #20]
 801269c:	891a      	ldrh	r2, [r3, #8]
 801269e:	89bb      	ldrh	r3, [r7, #12]
 80126a0:	1ad3      	subs	r3, r2, r3
 80126a2:	b29a      	uxth	r2, r3
 80126a4:	697b      	ldr	r3, [r7, #20]
 80126a6:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80126a8:	697b      	ldr	r3, [r7, #20]
 80126aa:	68db      	ldr	r3, [r3, #12]
 80126ac:	899b      	ldrh	r3, [r3, #12]
 80126ae:	b29c      	uxth	r4, r3
 80126b0:	7efb      	ldrb	r3, [r7, #27]
 80126b2:	b29b      	uxth	r3, r3
 80126b4:	4618      	mov	r0, r3
 80126b6:	f7fa f961 	bl	800c97c <lwip_htons>
 80126ba:	4603      	mov	r3, r0
 80126bc:	461a      	mov	r2, r3
 80126be:	697b      	ldr	r3, [r7, #20]
 80126c0:	68db      	ldr	r3, [r3, #12]
 80126c2:	4322      	orrs	r2, r4
 80126c4:	b292      	uxth	r2, r2
 80126c6:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80126c8:	697b      	ldr	r3, [r7, #20]
 80126ca:	685b      	ldr	r3, [r3, #4]
 80126cc:	4618      	mov	r0, r3
 80126ce:	f7fb fda3 	bl	800e218 <pbuf_clen>
 80126d2:	4603      	mov	r3, r0
 80126d4:	461a      	mov	r2, r3
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80126dc:	4413      	add	r3, r2
 80126de:	b29a      	uxth	r2, r3
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80126e6:	69fb      	ldr	r3, [r7, #28]
 80126e8:	685b      	ldr	r3, [r3, #4]
 80126ea:	4618      	mov	r0, r3
 80126ec:	f7fb fd94 	bl	800e218 <pbuf_clen>
 80126f0:	4603      	mov	r3, r0
 80126f2:	461a      	mov	r2, r3
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80126fa:	4413      	add	r3, r2
 80126fc:	b29a      	uxth	r2, r3
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8012704:	697b      	ldr	r3, [r7, #20]
 8012706:	681a      	ldr	r2, [r3, #0]
 8012708:	69fb      	ldr	r3, [r7, #28]
 801270a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801270c:	697b      	ldr	r3, [r7, #20]
 801270e:	69fa      	ldr	r2, [r7, #28]
 8012710:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8012712:	69fb      	ldr	r3, [r7, #28]
 8012714:	681b      	ldr	r3, [r3, #0]
 8012716:	2b00      	cmp	r3, #0
 8012718:	d103      	bne.n	8012722 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	2200      	movs	r2, #0
 801271e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8012722:	2300      	movs	r3, #0
 8012724:	e016      	b.n	8012754 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8012726:	bf00      	nop
 8012728:	e002      	b.n	8012730 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801272a:	bf00      	nop
 801272c:	e000      	b.n	8012730 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801272e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8012730:	69fb      	ldr	r3, [r7, #28]
 8012732:	2b00      	cmp	r3, #0
 8012734:	d006      	beq.n	8012744 <tcp_split_unsent_seg+0x25c>
 8012736:	4b09      	ldr	r3, [pc, #36]	@ (801275c <tcp_split_unsent_seg+0x274>)
 8012738:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 801273c:	490d      	ldr	r1, [pc, #52]	@ (8012774 <tcp_split_unsent_seg+0x28c>)
 801273e:	4809      	ldr	r0, [pc, #36]	@ (8012764 <tcp_split_unsent_seg+0x27c>)
 8012740:	f004 fdc8 	bl	80172d4 <iprintf>
  if (p != NULL) {
 8012744:	693b      	ldr	r3, [r7, #16]
 8012746:	2b00      	cmp	r3, #0
 8012748:	d002      	beq.n	8012750 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801274a:	6938      	ldr	r0, [r7, #16]
 801274c:	f7fb fcd6 	bl	800e0fc <pbuf_free>
  }

  return ERR_MEM;
 8012750:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012754:	4618      	mov	r0, r3
 8012756:	3724      	adds	r7, #36	@ 0x24
 8012758:	46bd      	mov	sp, r7
 801275a:	bd90      	pop	{r4, r7, pc}
 801275c:	08019f2c 	.word	0x08019f2c
 8012760:	0801a2c0 	.word	0x0801a2c0
 8012764:	08019f80 	.word	0x08019f80
 8012768:	0801a2e4 	.word	0x0801a2e4
 801276c:	0801a308 	.word	0x0801a308
 8012770:	0801a318 	.word	0x0801a318
 8012774:	0801a328 	.word	0x0801a328

08012778 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8012778:	b590      	push	{r4, r7, lr}
 801277a:	b085      	sub	sp, #20
 801277c:	af00      	add	r7, sp, #0
 801277e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	2b00      	cmp	r3, #0
 8012784:	d106      	bne.n	8012794 <tcp_send_fin+0x1c>
 8012786:	4b21      	ldr	r3, [pc, #132]	@ (801280c <tcp_send_fin+0x94>)
 8012788:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 801278c:	4920      	ldr	r1, [pc, #128]	@ (8012810 <tcp_send_fin+0x98>)
 801278e:	4821      	ldr	r0, [pc, #132]	@ (8012814 <tcp_send_fin+0x9c>)
 8012790:	f004 fda0 	bl	80172d4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012798:	2b00      	cmp	r3, #0
 801279a:	d02e      	beq.n	80127fa <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80127a0:	60fb      	str	r3, [r7, #12]
 80127a2:	e002      	b.n	80127aa <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80127a4:	68fb      	ldr	r3, [r7, #12]
 80127a6:	681b      	ldr	r3, [r3, #0]
 80127a8:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80127aa:	68fb      	ldr	r3, [r7, #12]
 80127ac:	681b      	ldr	r3, [r3, #0]
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	d1f8      	bne.n	80127a4 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80127b2:	68fb      	ldr	r3, [r7, #12]
 80127b4:	68db      	ldr	r3, [r3, #12]
 80127b6:	899b      	ldrh	r3, [r3, #12]
 80127b8:	b29b      	uxth	r3, r3
 80127ba:	4618      	mov	r0, r3
 80127bc:	f7fa f8de 	bl	800c97c <lwip_htons>
 80127c0:	4603      	mov	r3, r0
 80127c2:	b2db      	uxtb	r3, r3
 80127c4:	f003 0307 	and.w	r3, r3, #7
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d116      	bne.n	80127fa <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80127cc:	68fb      	ldr	r3, [r7, #12]
 80127ce:	68db      	ldr	r3, [r3, #12]
 80127d0:	899b      	ldrh	r3, [r3, #12]
 80127d2:	b29c      	uxth	r4, r3
 80127d4:	2001      	movs	r0, #1
 80127d6:	f7fa f8d1 	bl	800c97c <lwip_htons>
 80127da:	4603      	mov	r3, r0
 80127dc:	461a      	mov	r2, r3
 80127de:	68fb      	ldr	r3, [r7, #12]
 80127e0:	68db      	ldr	r3, [r3, #12]
 80127e2:	4322      	orrs	r2, r4
 80127e4:	b292      	uxth	r2, r2
 80127e6:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	8b5b      	ldrh	r3, [r3, #26]
 80127ec:	f043 0320 	orr.w	r3, r3, #32
 80127f0:	b29a      	uxth	r2, r3
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80127f6:	2300      	movs	r3, #0
 80127f8:	e004      	b.n	8012804 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80127fa:	2101      	movs	r1, #1
 80127fc:	6878      	ldr	r0, [r7, #4]
 80127fe:	f000 f80b 	bl	8012818 <tcp_enqueue_flags>
 8012802:	4603      	mov	r3, r0
}
 8012804:	4618      	mov	r0, r3
 8012806:	3714      	adds	r7, #20
 8012808:	46bd      	mov	sp, r7
 801280a:	bd90      	pop	{r4, r7, pc}
 801280c:	08019f2c 	.word	0x08019f2c
 8012810:	0801a334 	.word	0x0801a334
 8012814:	08019f80 	.word	0x08019f80

08012818 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8012818:	b580      	push	{r7, lr}
 801281a:	b08a      	sub	sp, #40	@ 0x28
 801281c:	af02      	add	r7, sp, #8
 801281e:	6078      	str	r0, [r7, #4]
 8012820:	460b      	mov	r3, r1
 8012822:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8012824:	2300      	movs	r3, #0
 8012826:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8012828:	2300      	movs	r3, #0
 801282a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801282c:	78fb      	ldrb	r3, [r7, #3]
 801282e:	f003 0303 	and.w	r3, r3, #3
 8012832:	2b00      	cmp	r3, #0
 8012834:	d106      	bne.n	8012844 <tcp_enqueue_flags+0x2c>
 8012836:	4b67      	ldr	r3, [pc, #412]	@ (80129d4 <tcp_enqueue_flags+0x1bc>)
 8012838:	f240 4211 	movw	r2, #1041	@ 0x411
 801283c:	4966      	ldr	r1, [pc, #408]	@ (80129d8 <tcp_enqueue_flags+0x1c0>)
 801283e:	4867      	ldr	r0, [pc, #412]	@ (80129dc <tcp_enqueue_flags+0x1c4>)
 8012840:	f004 fd48 	bl	80172d4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	2b00      	cmp	r3, #0
 8012848:	d106      	bne.n	8012858 <tcp_enqueue_flags+0x40>
 801284a:	4b62      	ldr	r3, [pc, #392]	@ (80129d4 <tcp_enqueue_flags+0x1bc>)
 801284c:	f240 4213 	movw	r2, #1043	@ 0x413
 8012850:	4963      	ldr	r1, [pc, #396]	@ (80129e0 <tcp_enqueue_flags+0x1c8>)
 8012852:	4862      	ldr	r0, [pc, #392]	@ (80129dc <tcp_enqueue_flags+0x1c4>)
 8012854:	f004 fd3e 	bl	80172d4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8012858:	78fb      	ldrb	r3, [r7, #3]
 801285a:	f003 0302 	and.w	r3, r3, #2
 801285e:	2b00      	cmp	r3, #0
 8012860:	d001      	beq.n	8012866 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8012862:	2301      	movs	r3, #1
 8012864:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012866:	7ffb      	ldrb	r3, [r7, #31]
 8012868:	009b      	lsls	r3, r3, #2
 801286a:	b2db      	uxtb	r3, r3
 801286c:	f003 0304 	and.w	r3, r3, #4
 8012870:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8012872:	7dfb      	ldrb	r3, [r7, #23]
 8012874:	b29b      	uxth	r3, r3
 8012876:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801287a:	4619      	mov	r1, r3
 801287c:	2036      	movs	r0, #54	@ 0x36
 801287e:	f7fb f959 	bl	800db34 <pbuf_alloc>
 8012882:	6138      	str	r0, [r7, #16]
 8012884:	693b      	ldr	r3, [r7, #16]
 8012886:	2b00      	cmp	r3, #0
 8012888:	d109      	bne.n	801289e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	8b5b      	ldrh	r3, [r3, #26]
 801288e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012892:	b29a      	uxth	r2, r3
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012898:	f04f 33ff 	mov.w	r3, #4294967295
 801289c:	e095      	b.n	80129ca <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801289e:	693b      	ldr	r3, [r7, #16]
 80128a0:	895a      	ldrh	r2, [r3, #10]
 80128a2:	7dfb      	ldrb	r3, [r7, #23]
 80128a4:	b29b      	uxth	r3, r3
 80128a6:	429a      	cmp	r2, r3
 80128a8:	d206      	bcs.n	80128b8 <tcp_enqueue_flags+0xa0>
 80128aa:	4b4a      	ldr	r3, [pc, #296]	@ (80129d4 <tcp_enqueue_flags+0x1bc>)
 80128ac:	f240 4239 	movw	r2, #1081	@ 0x439
 80128b0:	494c      	ldr	r1, [pc, #304]	@ (80129e4 <tcp_enqueue_flags+0x1cc>)
 80128b2:	484a      	ldr	r0, [pc, #296]	@ (80129dc <tcp_enqueue_flags+0x1c4>)
 80128b4:	f004 fd0e 	bl	80172d4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 80128bc:	78fa      	ldrb	r2, [r7, #3]
 80128be:	7ffb      	ldrb	r3, [r7, #31]
 80128c0:	9300      	str	r3, [sp, #0]
 80128c2:	460b      	mov	r3, r1
 80128c4:	6939      	ldr	r1, [r7, #16]
 80128c6:	6878      	ldr	r0, [r7, #4]
 80128c8:	f7ff fd72 	bl	80123b0 <tcp_create_segment>
 80128cc:	60f8      	str	r0, [r7, #12]
 80128ce:	68fb      	ldr	r3, [r7, #12]
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	d109      	bne.n	80128e8 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	8b5b      	ldrh	r3, [r3, #26]
 80128d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80128dc:	b29a      	uxth	r2, r3
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80128e2:	f04f 33ff 	mov.w	r3, #4294967295
 80128e6:	e070      	b.n	80129ca <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80128e8:	68fb      	ldr	r3, [r7, #12]
 80128ea:	68db      	ldr	r3, [r3, #12]
 80128ec:	f003 0303 	and.w	r3, r3, #3
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	d006      	beq.n	8012902 <tcp_enqueue_flags+0xea>
 80128f4:	4b37      	ldr	r3, [pc, #220]	@ (80129d4 <tcp_enqueue_flags+0x1bc>)
 80128f6:	f240 4242 	movw	r2, #1090	@ 0x442
 80128fa:	493b      	ldr	r1, [pc, #236]	@ (80129e8 <tcp_enqueue_flags+0x1d0>)
 80128fc:	4837      	ldr	r0, [pc, #220]	@ (80129dc <tcp_enqueue_flags+0x1c4>)
 80128fe:	f004 fce9 	bl	80172d4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8012902:	68fb      	ldr	r3, [r7, #12]
 8012904:	891b      	ldrh	r3, [r3, #8]
 8012906:	2b00      	cmp	r3, #0
 8012908:	d006      	beq.n	8012918 <tcp_enqueue_flags+0x100>
 801290a:	4b32      	ldr	r3, [pc, #200]	@ (80129d4 <tcp_enqueue_flags+0x1bc>)
 801290c:	f240 4243 	movw	r2, #1091	@ 0x443
 8012910:	4936      	ldr	r1, [pc, #216]	@ (80129ec <tcp_enqueue_flags+0x1d4>)
 8012912:	4832      	ldr	r0, [pc, #200]	@ (80129dc <tcp_enqueue_flags+0x1c4>)
 8012914:	f004 fcde 	bl	80172d4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801291c:	2b00      	cmp	r3, #0
 801291e:	d103      	bne.n	8012928 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	68fa      	ldr	r2, [r7, #12]
 8012924:	66da      	str	r2, [r3, #108]	@ 0x6c
 8012926:	e00d      	b.n	8012944 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801292c:	61bb      	str	r3, [r7, #24]
 801292e:	e002      	b.n	8012936 <tcp_enqueue_flags+0x11e>
 8012930:	69bb      	ldr	r3, [r7, #24]
 8012932:	681b      	ldr	r3, [r3, #0]
 8012934:	61bb      	str	r3, [r7, #24]
 8012936:	69bb      	ldr	r3, [r7, #24]
 8012938:	681b      	ldr	r3, [r3, #0]
 801293a:	2b00      	cmp	r3, #0
 801293c:	d1f8      	bne.n	8012930 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801293e:	69bb      	ldr	r3, [r7, #24]
 8012940:	68fa      	ldr	r2, [r7, #12]
 8012942:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	2200      	movs	r2, #0
 8012948:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801294c:	78fb      	ldrb	r3, [r7, #3]
 801294e:	f003 0302 	and.w	r3, r3, #2
 8012952:	2b00      	cmp	r3, #0
 8012954:	d104      	bne.n	8012960 <tcp_enqueue_flags+0x148>
 8012956:	78fb      	ldrb	r3, [r7, #3]
 8012958:	f003 0301 	and.w	r3, r3, #1
 801295c:	2b00      	cmp	r3, #0
 801295e:	d004      	beq.n	801296a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012964:	1c5a      	adds	r2, r3, #1
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801296a:	78fb      	ldrb	r3, [r7, #3]
 801296c:	f003 0301 	and.w	r3, r3, #1
 8012970:	2b00      	cmp	r3, #0
 8012972:	d006      	beq.n	8012982 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	8b5b      	ldrh	r3, [r3, #26]
 8012978:	f043 0320 	orr.w	r3, r3, #32
 801297c:	b29a      	uxth	r2, r3
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012982:	68fb      	ldr	r3, [r7, #12]
 8012984:	685b      	ldr	r3, [r3, #4]
 8012986:	4618      	mov	r0, r3
 8012988:	f7fb fc46 	bl	800e218 <pbuf_clen>
 801298c:	4603      	mov	r3, r0
 801298e:	461a      	mov	r2, r3
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012996:	4413      	add	r3, r2
 8012998:	b29a      	uxth	r2, r3
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d00e      	beq.n	80129c8 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	d10a      	bne.n	80129c8 <tcp_enqueue_flags+0x1b0>
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	d106      	bne.n	80129c8 <tcp_enqueue_flags+0x1b0>
 80129ba:	4b06      	ldr	r3, [pc, #24]	@ (80129d4 <tcp_enqueue_flags+0x1bc>)
 80129bc:	f240 4265 	movw	r2, #1125	@ 0x465
 80129c0:	490b      	ldr	r1, [pc, #44]	@ (80129f0 <tcp_enqueue_flags+0x1d8>)
 80129c2:	4806      	ldr	r0, [pc, #24]	@ (80129dc <tcp_enqueue_flags+0x1c4>)
 80129c4:	f004 fc86 	bl	80172d4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80129c8:	2300      	movs	r3, #0
}
 80129ca:	4618      	mov	r0, r3
 80129cc:	3720      	adds	r7, #32
 80129ce:	46bd      	mov	sp, r7
 80129d0:	bd80      	pop	{r7, pc}
 80129d2:	bf00      	nop
 80129d4:	08019f2c 	.word	0x08019f2c
 80129d8:	0801a350 	.word	0x0801a350
 80129dc:	08019f80 	.word	0x08019f80
 80129e0:	0801a3a8 	.word	0x0801a3a8
 80129e4:	0801a3c8 	.word	0x0801a3c8
 80129e8:	0801a404 	.word	0x0801a404
 80129ec:	0801a41c 	.word	0x0801a41c
 80129f0:	0801a448 	.word	0x0801a448

080129f4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80129f4:	b5b0      	push	{r4, r5, r7, lr}
 80129f6:	b08a      	sub	sp, #40	@ 0x28
 80129f8:	af00      	add	r7, sp, #0
 80129fa:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	d106      	bne.n	8012a10 <tcp_output+0x1c>
 8012a02:	4b8a      	ldr	r3, [pc, #552]	@ (8012c2c <tcp_output+0x238>)
 8012a04:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8012a08:	4989      	ldr	r1, [pc, #548]	@ (8012c30 <tcp_output+0x23c>)
 8012a0a:	488a      	ldr	r0, [pc, #552]	@ (8012c34 <tcp_output+0x240>)
 8012a0c:	f004 fc62 	bl	80172d4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	7d1b      	ldrb	r3, [r3, #20]
 8012a14:	2b01      	cmp	r3, #1
 8012a16:	d106      	bne.n	8012a26 <tcp_output+0x32>
 8012a18:	4b84      	ldr	r3, [pc, #528]	@ (8012c2c <tcp_output+0x238>)
 8012a1a:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8012a1e:	4986      	ldr	r1, [pc, #536]	@ (8012c38 <tcp_output+0x244>)
 8012a20:	4884      	ldr	r0, [pc, #528]	@ (8012c34 <tcp_output+0x240>)
 8012a22:	f004 fc57 	bl	80172d4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8012a26:	4b85      	ldr	r3, [pc, #532]	@ (8012c3c <tcp_output+0x248>)
 8012a28:	681b      	ldr	r3, [r3, #0]
 8012a2a:	687a      	ldr	r2, [r7, #4]
 8012a2c:	429a      	cmp	r2, r3
 8012a2e:	d101      	bne.n	8012a34 <tcp_output+0x40>
    return ERR_OK;
 8012a30:	2300      	movs	r3, #0
 8012a32:	e1ce      	b.n	8012dd2 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012a40:	4293      	cmp	r3, r2
 8012a42:	bf28      	it	cs
 8012a44:	4613      	movcs	r3, r2
 8012a46:	b29b      	uxth	r3, r3
 8012a48:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012a4e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8012a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d10b      	bne.n	8012a6e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	8b5b      	ldrh	r3, [r3, #26]
 8012a5a:	f003 0302 	and.w	r3, r3, #2
 8012a5e:	2b00      	cmp	r3, #0
 8012a60:	f000 81aa 	beq.w	8012db8 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8012a64:	6878      	ldr	r0, [r7, #4]
 8012a66:	f000 fdcb 	bl	8013600 <tcp_send_empty_ack>
 8012a6a:	4603      	mov	r3, r0
 8012a6c:	e1b1      	b.n	8012dd2 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8012a6e:	6879      	ldr	r1, [r7, #4]
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	3304      	adds	r3, #4
 8012a74:	461a      	mov	r2, r3
 8012a76:	6878      	ldr	r0, [r7, #4]
 8012a78:	f7ff fc7e 	bl	8012378 <tcp_route>
 8012a7c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8012a7e:	697b      	ldr	r3, [r7, #20]
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	d102      	bne.n	8012a8a <tcp_output+0x96>
    return ERR_RTE;
 8012a84:	f06f 0303 	mvn.w	r3, #3
 8012a88:	e1a3      	b.n	8012dd2 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d003      	beq.n	8012a98 <tcp_output+0xa4>
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	681b      	ldr	r3, [r3, #0]
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	d111      	bne.n	8012abc <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8012a98:	697b      	ldr	r3, [r7, #20]
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d002      	beq.n	8012aa4 <tcp_output+0xb0>
 8012a9e:	697b      	ldr	r3, [r7, #20]
 8012aa0:	3304      	adds	r3, #4
 8012aa2:	e000      	b.n	8012aa6 <tcp_output+0xb2>
 8012aa4:	2300      	movs	r3, #0
 8012aa6:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8012aa8:	693b      	ldr	r3, [r7, #16]
 8012aaa:	2b00      	cmp	r3, #0
 8012aac:	d102      	bne.n	8012ab4 <tcp_output+0xc0>
      return ERR_RTE;
 8012aae:	f06f 0303 	mvn.w	r3, #3
 8012ab2:	e18e      	b.n	8012dd2 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8012ab4:	693b      	ldr	r3, [r7, #16]
 8012ab6:	681a      	ldr	r2, [r3, #0]
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8012abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012abe:	68db      	ldr	r3, [r3, #12]
 8012ac0:	685b      	ldr	r3, [r3, #4]
 8012ac2:	4618      	mov	r0, r3
 8012ac4:	f7f9 ff70 	bl	800c9a8 <lwip_htonl>
 8012ac8:	4602      	mov	r2, r0
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012ace:	1ad3      	subs	r3, r2, r3
 8012ad0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012ad2:	8912      	ldrh	r2, [r2, #8]
 8012ad4:	4413      	add	r3, r2
 8012ad6:	69ba      	ldr	r2, [r7, #24]
 8012ad8:	429a      	cmp	r2, r3
 8012ada:	d227      	bcs.n	8012b2c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012ae2:	461a      	mov	r2, r3
 8012ae4:	69bb      	ldr	r3, [r7, #24]
 8012ae6:	4293      	cmp	r3, r2
 8012ae8:	d114      	bne.n	8012b14 <tcp_output+0x120>
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d110      	bne.n	8012b14 <tcp_output+0x120>
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d10b      	bne.n	8012b14 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	2200      	movs	r2, #0
 8012b00:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	2201      	movs	r2, #1
 8012b08:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	2200      	movs	r2, #0
 8012b10:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	8b5b      	ldrh	r3, [r3, #26]
 8012b18:	f003 0302 	and.w	r3, r3, #2
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	f000 814d 	beq.w	8012dbc <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8012b22:	6878      	ldr	r0, [r7, #4]
 8012b24:	f000 fd6c 	bl	8013600 <tcp_send_empty_ack>
 8012b28:	4603      	mov	r3, r0
 8012b2a:	e152      	b.n	8012dd2 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	2200      	movs	r2, #0
 8012b30:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012b38:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8012b3a:	6a3b      	ldr	r3, [r7, #32]
 8012b3c:	2b00      	cmp	r3, #0
 8012b3e:	f000 811c 	beq.w	8012d7a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8012b42:	e002      	b.n	8012b4a <tcp_output+0x156>
 8012b44:	6a3b      	ldr	r3, [r7, #32]
 8012b46:	681b      	ldr	r3, [r3, #0]
 8012b48:	623b      	str	r3, [r7, #32]
 8012b4a:	6a3b      	ldr	r3, [r7, #32]
 8012b4c:	681b      	ldr	r3, [r3, #0]
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	d1f8      	bne.n	8012b44 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8012b52:	e112      	b.n	8012d7a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8012b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b56:	68db      	ldr	r3, [r3, #12]
 8012b58:	899b      	ldrh	r3, [r3, #12]
 8012b5a:	b29b      	uxth	r3, r3
 8012b5c:	4618      	mov	r0, r3
 8012b5e:	f7f9 ff0d 	bl	800c97c <lwip_htons>
 8012b62:	4603      	mov	r3, r0
 8012b64:	b2db      	uxtb	r3, r3
 8012b66:	f003 0304 	and.w	r3, r3, #4
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	d006      	beq.n	8012b7c <tcp_output+0x188>
 8012b6e:	4b2f      	ldr	r3, [pc, #188]	@ (8012c2c <tcp_output+0x238>)
 8012b70:	f240 5236 	movw	r2, #1334	@ 0x536
 8012b74:	4932      	ldr	r1, [pc, #200]	@ (8012c40 <tcp_output+0x24c>)
 8012b76:	482f      	ldr	r0, [pc, #188]	@ (8012c34 <tcp_output+0x240>)
 8012b78:	f004 fbac 	bl	80172d4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	d01f      	beq.n	8012bc4 <tcp_output+0x1d0>
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	8b5b      	ldrh	r3, [r3, #26]
 8012b88:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d119      	bne.n	8012bc4 <tcp_output+0x1d0>
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	d00b      	beq.n	8012bb0 <tcp_output+0x1bc>
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012b9c:	681b      	ldr	r3, [r3, #0]
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	d110      	bne.n	8012bc4 <tcp_output+0x1d0>
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012ba6:	891a      	ldrh	r2, [r3, #8]
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012bac:	429a      	cmp	r2, r3
 8012bae:	d209      	bcs.n	8012bc4 <tcp_output+0x1d0>
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	d004      	beq.n	8012bc4 <tcp_output+0x1d0>
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012bc0:	2b08      	cmp	r3, #8
 8012bc2:	d901      	bls.n	8012bc8 <tcp_output+0x1d4>
 8012bc4:	2301      	movs	r3, #1
 8012bc6:	e000      	b.n	8012bca <tcp_output+0x1d6>
 8012bc8:	2300      	movs	r3, #0
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d106      	bne.n	8012bdc <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	8b5b      	ldrh	r3, [r3, #26]
 8012bd2:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	f000 80e4 	beq.w	8012da4 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	7d1b      	ldrb	r3, [r3, #20]
 8012be0:	2b02      	cmp	r3, #2
 8012be2:	d00d      	beq.n	8012c00 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8012be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012be6:	68db      	ldr	r3, [r3, #12]
 8012be8:	899b      	ldrh	r3, [r3, #12]
 8012bea:	b29c      	uxth	r4, r3
 8012bec:	2010      	movs	r0, #16
 8012bee:	f7f9 fec5 	bl	800c97c <lwip_htons>
 8012bf2:	4603      	mov	r3, r0
 8012bf4:	461a      	mov	r2, r3
 8012bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012bf8:	68db      	ldr	r3, [r3, #12]
 8012bfa:	4322      	orrs	r2, r4
 8012bfc:	b292      	uxth	r2, r2
 8012bfe:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8012c00:	697a      	ldr	r2, [r7, #20]
 8012c02:	6879      	ldr	r1, [r7, #4]
 8012c04:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012c06:	f000 f909 	bl	8012e1c <tcp_output_segment>
 8012c0a:	4603      	mov	r3, r0
 8012c0c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8012c0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	d016      	beq.n	8012c44 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	8b5b      	ldrh	r3, [r3, #26]
 8012c1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012c1e:	b29a      	uxth	r2, r3
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	835a      	strh	r2, [r3, #26]
      return err;
 8012c24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012c28:	e0d3      	b.n	8012dd2 <tcp_output+0x3de>
 8012c2a:	bf00      	nop
 8012c2c:	08019f2c 	.word	0x08019f2c
 8012c30:	0801a470 	.word	0x0801a470
 8012c34:	08019f80 	.word	0x08019f80
 8012c38:	0801a488 	.word	0x0801a488
 8012c3c:	2000c6d4 	.word	0x2000c6d4
 8012c40:	0801a4b0 	.word	0x0801a4b0
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8012c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c46:	681a      	ldr	r2, [r3, #0]
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	7d1b      	ldrb	r3, [r3, #20]
 8012c50:	2b02      	cmp	r3, #2
 8012c52:	d006      	beq.n	8012c62 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	8b5b      	ldrh	r3, [r3, #26]
 8012c58:	f023 0303 	bic.w	r3, r3, #3
 8012c5c:	b29a      	uxth	r2, r3
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c64:	68db      	ldr	r3, [r3, #12]
 8012c66:	685b      	ldr	r3, [r3, #4]
 8012c68:	4618      	mov	r0, r3
 8012c6a:	f7f9 fe9d 	bl	800c9a8 <lwip_htonl>
 8012c6e:	4604      	mov	r4, r0
 8012c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c72:	891b      	ldrh	r3, [r3, #8]
 8012c74:	461d      	mov	r5, r3
 8012c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c78:	68db      	ldr	r3, [r3, #12]
 8012c7a:	899b      	ldrh	r3, [r3, #12]
 8012c7c:	b29b      	uxth	r3, r3
 8012c7e:	4618      	mov	r0, r3
 8012c80:	f7f9 fe7c 	bl	800c97c <lwip_htons>
 8012c84:	4603      	mov	r3, r0
 8012c86:	b2db      	uxtb	r3, r3
 8012c88:	f003 0303 	and.w	r3, r3, #3
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d001      	beq.n	8012c94 <tcp_output+0x2a0>
 8012c90:	2301      	movs	r3, #1
 8012c92:	e000      	b.n	8012c96 <tcp_output+0x2a2>
 8012c94:	2300      	movs	r3, #0
 8012c96:	442b      	add	r3, r5
 8012c98:	4423      	add	r3, r4
 8012c9a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012ca0:	68bb      	ldr	r3, [r7, #8]
 8012ca2:	1ad3      	subs	r3, r2, r3
 8012ca4:	2b00      	cmp	r3, #0
 8012ca6:	da02      	bge.n	8012cae <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	68ba      	ldr	r2, [r7, #8]
 8012cac:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8012cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012cb0:	891b      	ldrh	r3, [r3, #8]
 8012cb2:	461c      	mov	r4, r3
 8012cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012cb6:	68db      	ldr	r3, [r3, #12]
 8012cb8:	899b      	ldrh	r3, [r3, #12]
 8012cba:	b29b      	uxth	r3, r3
 8012cbc:	4618      	mov	r0, r3
 8012cbe:	f7f9 fe5d 	bl	800c97c <lwip_htons>
 8012cc2:	4603      	mov	r3, r0
 8012cc4:	b2db      	uxtb	r3, r3
 8012cc6:	f003 0303 	and.w	r3, r3, #3
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	d001      	beq.n	8012cd2 <tcp_output+0x2de>
 8012cce:	2301      	movs	r3, #1
 8012cd0:	e000      	b.n	8012cd4 <tcp_output+0x2e0>
 8012cd2:	2300      	movs	r3, #0
 8012cd4:	4423      	add	r3, r4
 8012cd6:	2b00      	cmp	r3, #0
 8012cd8:	d049      	beq.n	8012d6e <tcp_output+0x37a>
      seg->next = NULL;
 8012cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012cdc:	2200      	movs	r2, #0
 8012cde:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	d105      	bne.n	8012cf4 <tcp_output+0x300>
        pcb->unacked = seg;
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012cec:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8012cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012cf0:	623b      	str	r3, [r7, #32]
 8012cf2:	e03f      	b.n	8012d74 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8012cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012cf6:	68db      	ldr	r3, [r3, #12]
 8012cf8:	685b      	ldr	r3, [r3, #4]
 8012cfa:	4618      	mov	r0, r3
 8012cfc:	f7f9 fe54 	bl	800c9a8 <lwip_htonl>
 8012d00:	4604      	mov	r4, r0
 8012d02:	6a3b      	ldr	r3, [r7, #32]
 8012d04:	68db      	ldr	r3, [r3, #12]
 8012d06:	685b      	ldr	r3, [r3, #4]
 8012d08:	4618      	mov	r0, r3
 8012d0a:	f7f9 fe4d 	bl	800c9a8 <lwip_htonl>
 8012d0e:	4603      	mov	r3, r0
 8012d10:	1ae3      	subs	r3, r4, r3
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	da24      	bge.n	8012d60 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	3370      	adds	r3, #112	@ 0x70
 8012d1a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012d1c:	e002      	b.n	8012d24 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8012d1e:	69fb      	ldr	r3, [r7, #28]
 8012d20:	681b      	ldr	r3, [r3, #0]
 8012d22:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012d24:	69fb      	ldr	r3, [r7, #28]
 8012d26:	681b      	ldr	r3, [r3, #0]
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	d011      	beq.n	8012d50 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012d2c:	69fb      	ldr	r3, [r7, #28]
 8012d2e:	681b      	ldr	r3, [r3, #0]
 8012d30:	68db      	ldr	r3, [r3, #12]
 8012d32:	685b      	ldr	r3, [r3, #4]
 8012d34:	4618      	mov	r0, r3
 8012d36:	f7f9 fe37 	bl	800c9a8 <lwip_htonl>
 8012d3a:	4604      	mov	r4, r0
 8012d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d3e:	68db      	ldr	r3, [r3, #12]
 8012d40:	685b      	ldr	r3, [r3, #4]
 8012d42:	4618      	mov	r0, r3
 8012d44:	f7f9 fe30 	bl	800c9a8 <lwip_htonl>
 8012d48:	4603      	mov	r3, r0
 8012d4a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	dbe6      	blt.n	8012d1e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8012d50:	69fb      	ldr	r3, [r7, #28]
 8012d52:	681a      	ldr	r2, [r3, #0]
 8012d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d56:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8012d58:	69fb      	ldr	r3, [r7, #28]
 8012d5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012d5c:	601a      	str	r2, [r3, #0]
 8012d5e:	e009      	b.n	8012d74 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8012d60:	6a3b      	ldr	r3, [r7, #32]
 8012d62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012d64:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8012d66:	6a3b      	ldr	r3, [r7, #32]
 8012d68:	681b      	ldr	r3, [r3, #0]
 8012d6a:	623b      	str	r3, [r7, #32]
 8012d6c:	e002      	b.n	8012d74 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8012d6e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012d70:	f7fc fc45 	bl	800f5fe <tcp_seg_free>
    }
    seg = pcb->unsent;
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012d78:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8012d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	d012      	beq.n	8012da6 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8012d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d82:	68db      	ldr	r3, [r3, #12]
 8012d84:	685b      	ldr	r3, [r3, #4]
 8012d86:	4618      	mov	r0, r3
 8012d88:	f7f9 fe0e 	bl	800c9a8 <lwip_htonl>
 8012d8c:	4602      	mov	r2, r0
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012d92:	1ad3      	subs	r3, r2, r3
 8012d94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012d96:	8912      	ldrh	r2, [r2, #8]
 8012d98:	4413      	add	r3, r2
  while (seg != NULL &&
 8012d9a:	69ba      	ldr	r2, [r7, #24]
 8012d9c:	429a      	cmp	r2, r3
 8012d9e:	f4bf aed9 	bcs.w	8012b54 <tcp_output+0x160>
 8012da2:	e000      	b.n	8012da6 <tcp_output+0x3b2>
      break;
 8012da4:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	d108      	bne.n	8012dc0 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	2200      	movs	r2, #0
 8012db2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8012db6:	e004      	b.n	8012dc2 <tcp_output+0x3ce>
    goto output_done;
 8012db8:	bf00      	nop
 8012dba:	e002      	b.n	8012dc2 <tcp_output+0x3ce>
    goto output_done;
 8012dbc:	bf00      	nop
 8012dbe:	e000      	b.n	8012dc2 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8012dc0:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	8b5b      	ldrh	r3, [r3, #26]
 8012dc6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8012dca:	b29a      	uxth	r2, r3
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8012dd0:	2300      	movs	r3, #0
}
 8012dd2:	4618      	mov	r0, r3
 8012dd4:	3728      	adds	r7, #40	@ 0x28
 8012dd6:	46bd      	mov	sp, r7
 8012dd8:	bdb0      	pop	{r4, r5, r7, pc}
 8012dda:	bf00      	nop

08012ddc <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8012ddc:	b580      	push	{r7, lr}
 8012dde:	b082      	sub	sp, #8
 8012de0:	af00      	add	r7, sp, #0
 8012de2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	d106      	bne.n	8012df8 <tcp_output_segment_busy+0x1c>
 8012dea:	4b09      	ldr	r3, [pc, #36]	@ (8012e10 <tcp_output_segment_busy+0x34>)
 8012dec:	f240 529a 	movw	r2, #1434	@ 0x59a
 8012df0:	4908      	ldr	r1, [pc, #32]	@ (8012e14 <tcp_output_segment_busy+0x38>)
 8012df2:	4809      	ldr	r0, [pc, #36]	@ (8012e18 <tcp_output_segment_busy+0x3c>)
 8012df4:	f004 fa6e 	bl	80172d4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	685b      	ldr	r3, [r3, #4]
 8012dfc:	7b9b      	ldrb	r3, [r3, #14]
 8012dfe:	2b01      	cmp	r3, #1
 8012e00:	d001      	beq.n	8012e06 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8012e02:	2301      	movs	r3, #1
 8012e04:	e000      	b.n	8012e08 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8012e06:	2300      	movs	r3, #0
}
 8012e08:	4618      	mov	r0, r3
 8012e0a:	3708      	adds	r7, #8
 8012e0c:	46bd      	mov	sp, r7
 8012e0e:	bd80      	pop	{r7, pc}
 8012e10:	08019f2c 	.word	0x08019f2c
 8012e14:	0801a4c8 	.word	0x0801a4c8
 8012e18:	08019f80 	.word	0x08019f80

08012e1c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8012e1c:	b5b0      	push	{r4, r5, r7, lr}
 8012e1e:	b08c      	sub	sp, #48	@ 0x30
 8012e20:	af04      	add	r7, sp, #16
 8012e22:	60f8      	str	r0, [r7, #12]
 8012e24:	60b9      	str	r1, [r7, #8]
 8012e26:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8012e28:	68fb      	ldr	r3, [r7, #12]
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	d106      	bne.n	8012e3c <tcp_output_segment+0x20>
 8012e2e:	4b64      	ldr	r3, [pc, #400]	@ (8012fc0 <tcp_output_segment+0x1a4>)
 8012e30:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8012e34:	4963      	ldr	r1, [pc, #396]	@ (8012fc4 <tcp_output_segment+0x1a8>)
 8012e36:	4864      	ldr	r0, [pc, #400]	@ (8012fc8 <tcp_output_segment+0x1ac>)
 8012e38:	f004 fa4c 	bl	80172d4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8012e3c:	68bb      	ldr	r3, [r7, #8]
 8012e3e:	2b00      	cmp	r3, #0
 8012e40:	d106      	bne.n	8012e50 <tcp_output_segment+0x34>
 8012e42:	4b5f      	ldr	r3, [pc, #380]	@ (8012fc0 <tcp_output_segment+0x1a4>)
 8012e44:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8012e48:	4960      	ldr	r1, [pc, #384]	@ (8012fcc <tcp_output_segment+0x1b0>)
 8012e4a:	485f      	ldr	r0, [pc, #380]	@ (8012fc8 <tcp_output_segment+0x1ac>)
 8012e4c:	f004 fa42 	bl	80172d4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	d106      	bne.n	8012e64 <tcp_output_segment+0x48>
 8012e56:	4b5a      	ldr	r3, [pc, #360]	@ (8012fc0 <tcp_output_segment+0x1a4>)
 8012e58:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8012e5c:	495c      	ldr	r1, [pc, #368]	@ (8012fd0 <tcp_output_segment+0x1b4>)
 8012e5e:	485a      	ldr	r0, [pc, #360]	@ (8012fc8 <tcp_output_segment+0x1ac>)
 8012e60:	f004 fa38 	bl	80172d4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8012e64:	68f8      	ldr	r0, [r7, #12]
 8012e66:	f7ff ffb9 	bl	8012ddc <tcp_output_segment_busy>
 8012e6a:	4603      	mov	r3, r0
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	d001      	beq.n	8012e74 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8012e70:	2300      	movs	r3, #0
 8012e72:	e0a1      	b.n	8012fb8 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8012e74:	68bb      	ldr	r3, [r7, #8]
 8012e76:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012e78:	68fb      	ldr	r3, [r7, #12]
 8012e7a:	68dc      	ldr	r4, [r3, #12]
 8012e7c:	4610      	mov	r0, r2
 8012e7e:	f7f9 fd93 	bl	800c9a8 <lwip_htonl>
 8012e82:	4603      	mov	r3, r0
 8012e84:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8012e86:	68bb      	ldr	r3, [r7, #8]
 8012e88:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8012e8a:	68fb      	ldr	r3, [r7, #12]
 8012e8c:	68dc      	ldr	r4, [r3, #12]
 8012e8e:	4610      	mov	r0, r2
 8012e90:	f7f9 fd74 	bl	800c97c <lwip_htons>
 8012e94:	4603      	mov	r3, r0
 8012e96:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012e98:	68bb      	ldr	r3, [r7, #8]
 8012e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012e9c:	68ba      	ldr	r2, [r7, #8]
 8012e9e:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8012ea0:	441a      	add	r2, r3
 8012ea2:	68bb      	ldr	r3, [r7, #8]
 8012ea4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8012ea6:	68fb      	ldr	r3, [r7, #12]
 8012ea8:	68db      	ldr	r3, [r3, #12]
 8012eaa:	3314      	adds	r3, #20
 8012eac:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8012eae:	68fb      	ldr	r3, [r7, #12]
 8012eb0:	7a9b      	ldrb	r3, [r3, #10]
 8012eb2:	f003 0301 	and.w	r3, r3, #1
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	d015      	beq.n	8012ee6 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8012eba:	68bb      	ldr	r3, [r7, #8]
 8012ebc:	3304      	adds	r3, #4
 8012ebe:	461a      	mov	r2, r3
 8012ec0:	6879      	ldr	r1, [r7, #4]
 8012ec2:	f44f 7006 	mov.w	r0, #536	@ 0x218
 8012ec6:	f7fc fe91 	bl	800fbec <tcp_eff_send_mss_netif>
 8012eca:	4603      	mov	r3, r0
 8012ecc:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8012ece:	8b7b      	ldrh	r3, [r7, #26]
 8012ed0:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8012ed4:	4618      	mov	r0, r3
 8012ed6:	f7f9 fd67 	bl	800c9a8 <lwip_htonl>
 8012eda:	4602      	mov	r2, r0
 8012edc:	69fb      	ldr	r3, [r7, #28]
 8012ede:	601a      	str	r2, [r3, #0]
    opts += 1;
 8012ee0:	69fb      	ldr	r3, [r7, #28]
 8012ee2:	3304      	adds	r3, #4
 8012ee4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8012ee6:	68bb      	ldr	r3, [r7, #8]
 8012ee8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	da02      	bge.n	8012ef6 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8012ef0:	68bb      	ldr	r3, [r7, #8]
 8012ef2:	2200      	movs	r2, #0
 8012ef4:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8012ef6:	68bb      	ldr	r3, [r7, #8]
 8012ef8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	d10c      	bne.n	8012f18 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8012efe:	4b35      	ldr	r3, [pc, #212]	@ (8012fd4 <tcp_output_segment+0x1b8>)
 8012f00:	681a      	ldr	r2, [r3, #0]
 8012f02:	68bb      	ldr	r3, [r7, #8]
 8012f04:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8012f06:	68fb      	ldr	r3, [r7, #12]
 8012f08:	68db      	ldr	r3, [r3, #12]
 8012f0a:	685b      	ldr	r3, [r3, #4]
 8012f0c:	4618      	mov	r0, r3
 8012f0e:	f7f9 fd4b 	bl	800c9a8 <lwip_htonl>
 8012f12:	4602      	mov	r2, r0
 8012f14:	68bb      	ldr	r3, [r7, #8]
 8012f16:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8012f18:	68fb      	ldr	r3, [r7, #12]
 8012f1a:	68da      	ldr	r2, [r3, #12]
 8012f1c:	68fb      	ldr	r3, [r7, #12]
 8012f1e:	685b      	ldr	r3, [r3, #4]
 8012f20:	685b      	ldr	r3, [r3, #4]
 8012f22:	1ad3      	subs	r3, r2, r3
 8012f24:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8012f26:	68fb      	ldr	r3, [r7, #12]
 8012f28:	685b      	ldr	r3, [r3, #4]
 8012f2a:	8959      	ldrh	r1, [r3, #10]
 8012f2c:	68fb      	ldr	r3, [r7, #12]
 8012f2e:	685b      	ldr	r3, [r3, #4]
 8012f30:	8b3a      	ldrh	r2, [r7, #24]
 8012f32:	1a8a      	subs	r2, r1, r2
 8012f34:	b292      	uxth	r2, r2
 8012f36:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8012f38:	68fb      	ldr	r3, [r7, #12]
 8012f3a:	685b      	ldr	r3, [r3, #4]
 8012f3c:	8919      	ldrh	r1, [r3, #8]
 8012f3e:	68fb      	ldr	r3, [r7, #12]
 8012f40:	685b      	ldr	r3, [r3, #4]
 8012f42:	8b3a      	ldrh	r2, [r7, #24]
 8012f44:	1a8a      	subs	r2, r1, r2
 8012f46:	b292      	uxth	r2, r2
 8012f48:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8012f4a:	68fb      	ldr	r3, [r7, #12]
 8012f4c:	685b      	ldr	r3, [r3, #4]
 8012f4e:	68fa      	ldr	r2, [r7, #12]
 8012f50:	68d2      	ldr	r2, [r2, #12]
 8012f52:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8012f54:	68fb      	ldr	r3, [r7, #12]
 8012f56:	68db      	ldr	r3, [r3, #12]
 8012f58:	2200      	movs	r2, #0
 8012f5a:	741a      	strb	r2, [r3, #16]
 8012f5c:	2200      	movs	r2, #0
 8012f5e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8012f60:	68fb      	ldr	r3, [r7, #12]
 8012f62:	68da      	ldr	r2, [r3, #12]
 8012f64:	68fb      	ldr	r3, [r7, #12]
 8012f66:	7a9b      	ldrb	r3, [r3, #10]
 8012f68:	f003 0301 	and.w	r3, r3, #1
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	d001      	beq.n	8012f74 <tcp_output_segment+0x158>
 8012f70:	2318      	movs	r3, #24
 8012f72:	e000      	b.n	8012f76 <tcp_output_segment+0x15a>
 8012f74:	2314      	movs	r3, #20
 8012f76:	4413      	add	r3, r2
 8012f78:	69fa      	ldr	r2, [r7, #28]
 8012f7a:	429a      	cmp	r2, r3
 8012f7c:	d006      	beq.n	8012f8c <tcp_output_segment+0x170>
 8012f7e:	4b10      	ldr	r3, [pc, #64]	@ (8012fc0 <tcp_output_segment+0x1a4>)
 8012f80:	f240 621c 	movw	r2, #1564	@ 0x61c
 8012f84:	4914      	ldr	r1, [pc, #80]	@ (8012fd8 <tcp_output_segment+0x1bc>)
 8012f86:	4810      	ldr	r0, [pc, #64]	@ (8012fc8 <tcp_output_segment+0x1ac>)
 8012f88:	f004 f9a4 	bl	80172d4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8012f8c:	68fb      	ldr	r3, [r7, #12]
 8012f8e:	6858      	ldr	r0, [r3, #4]
 8012f90:	68b9      	ldr	r1, [r7, #8]
 8012f92:	68bb      	ldr	r3, [r7, #8]
 8012f94:	1d1c      	adds	r4, r3, #4
 8012f96:	68bb      	ldr	r3, [r7, #8]
 8012f98:	7add      	ldrb	r5, [r3, #11]
 8012f9a:	68bb      	ldr	r3, [r7, #8]
 8012f9c:	7a9b      	ldrb	r3, [r3, #10]
 8012f9e:	687a      	ldr	r2, [r7, #4]
 8012fa0:	9202      	str	r2, [sp, #8]
 8012fa2:	2206      	movs	r2, #6
 8012fa4:	9201      	str	r2, [sp, #4]
 8012fa6:	9300      	str	r3, [sp, #0]
 8012fa8:	462b      	mov	r3, r5
 8012faa:	4622      	mov	r2, r4
 8012fac:	f002 fa34 	bl	8015418 <ip4_output_if>
 8012fb0:	4603      	mov	r3, r0
 8012fb2:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8012fb4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012fb8:	4618      	mov	r0, r3
 8012fba:	3720      	adds	r7, #32
 8012fbc:	46bd      	mov	sp, r7
 8012fbe:	bdb0      	pop	{r4, r5, r7, pc}
 8012fc0:	08019f2c 	.word	0x08019f2c
 8012fc4:	0801a4f0 	.word	0x0801a4f0
 8012fc8:	08019f80 	.word	0x08019f80
 8012fcc:	0801a510 	.word	0x0801a510
 8012fd0:	0801a530 	.word	0x0801a530
 8012fd4:	2000c688 	.word	0x2000c688
 8012fd8:	0801a554 	.word	0x0801a554

08012fdc <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8012fdc:	b5b0      	push	{r4, r5, r7, lr}
 8012fde:	b084      	sub	sp, #16
 8012fe0:	af00      	add	r7, sp, #0
 8012fe2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	2b00      	cmp	r3, #0
 8012fe8:	d106      	bne.n	8012ff8 <tcp_rexmit_rto_prepare+0x1c>
 8012fea:	4b31      	ldr	r3, [pc, #196]	@ (80130b0 <tcp_rexmit_rto_prepare+0xd4>)
 8012fec:	f240 6263 	movw	r2, #1635	@ 0x663
 8012ff0:	4930      	ldr	r1, [pc, #192]	@ (80130b4 <tcp_rexmit_rto_prepare+0xd8>)
 8012ff2:	4831      	ldr	r0, [pc, #196]	@ (80130b8 <tcp_rexmit_rto_prepare+0xdc>)
 8012ff4:	f004 f96e 	bl	80172d4 <iprintf>

  if (pcb->unacked == NULL) {
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	d102      	bne.n	8013006 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8013000:	f06f 0305 	mvn.w	r3, #5
 8013004:	e050      	b.n	80130a8 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801300a:	60fb      	str	r3, [r7, #12]
 801300c:	e00b      	b.n	8013026 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801300e:	68f8      	ldr	r0, [r7, #12]
 8013010:	f7ff fee4 	bl	8012ddc <tcp_output_segment_busy>
 8013014:	4603      	mov	r3, r0
 8013016:	2b00      	cmp	r3, #0
 8013018:	d002      	beq.n	8013020 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801301a:	f06f 0305 	mvn.w	r3, #5
 801301e:	e043      	b.n	80130a8 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013020:	68fb      	ldr	r3, [r7, #12]
 8013022:	681b      	ldr	r3, [r3, #0]
 8013024:	60fb      	str	r3, [r7, #12]
 8013026:	68fb      	ldr	r3, [r7, #12]
 8013028:	681b      	ldr	r3, [r3, #0]
 801302a:	2b00      	cmp	r3, #0
 801302c:	d1ef      	bne.n	801300e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801302e:	68f8      	ldr	r0, [r7, #12]
 8013030:	f7ff fed4 	bl	8012ddc <tcp_output_segment_busy>
 8013034:	4603      	mov	r3, r0
 8013036:	2b00      	cmp	r3, #0
 8013038:	d002      	beq.n	8013040 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801303a:	f06f 0305 	mvn.w	r3, #5
 801303e:	e033      	b.n	80130a8 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8013044:	68fb      	ldr	r3, [r7, #12]
 8013046:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801304c:	687b      	ldr	r3, [r7, #4]
 801304e:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	2200      	movs	r2, #0
 8013054:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	8b5b      	ldrh	r3, [r3, #26]
 801305a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 801305e:	b29a      	uxth	r2, r3
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013064:	68fb      	ldr	r3, [r7, #12]
 8013066:	68db      	ldr	r3, [r3, #12]
 8013068:	685b      	ldr	r3, [r3, #4]
 801306a:	4618      	mov	r0, r3
 801306c:	f7f9 fc9c 	bl	800c9a8 <lwip_htonl>
 8013070:	4604      	mov	r4, r0
 8013072:	68fb      	ldr	r3, [r7, #12]
 8013074:	891b      	ldrh	r3, [r3, #8]
 8013076:	461d      	mov	r5, r3
 8013078:	68fb      	ldr	r3, [r7, #12]
 801307a:	68db      	ldr	r3, [r3, #12]
 801307c:	899b      	ldrh	r3, [r3, #12]
 801307e:	b29b      	uxth	r3, r3
 8013080:	4618      	mov	r0, r3
 8013082:	f7f9 fc7b 	bl	800c97c <lwip_htons>
 8013086:	4603      	mov	r3, r0
 8013088:	b2db      	uxtb	r3, r3
 801308a:	f003 0303 	and.w	r3, r3, #3
 801308e:	2b00      	cmp	r3, #0
 8013090:	d001      	beq.n	8013096 <tcp_rexmit_rto_prepare+0xba>
 8013092:	2301      	movs	r3, #1
 8013094:	e000      	b.n	8013098 <tcp_rexmit_rto_prepare+0xbc>
 8013096:	2300      	movs	r3, #0
 8013098:	442b      	add	r3, r5
 801309a:	18e2      	adds	r2, r4, r3
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	2200      	movs	r2, #0
 80130a4:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 80130a6:	2300      	movs	r3, #0
}
 80130a8:	4618      	mov	r0, r3
 80130aa:	3710      	adds	r7, #16
 80130ac:	46bd      	mov	sp, r7
 80130ae:	bdb0      	pop	{r4, r5, r7, pc}
 80130b0:	08019f2c 	.word	0x08019f2c
 80130b4:	0801a568 	.word	0x0801a568
 80130b8:	08019f80 	.word	0x08019f80

080130bc <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80130bc:	b580      	push	{r7, lr}
 80130be:	b082      	sub	sp, #8
 80130c0:	af00      	add	r7, sp, #0
 80130c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	d106      	bne.n	80130d8 <tcp_rexmit_rto_commit+0x1c>
 80130ca:	4b0d      	ldr	r3, [pc, #52]	@ (8013100 <tcp_rexmit_rto_commit+0x44>)
 80130cc:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 80130d0:	490c      	ldr	r1, [pc, #48]	@ (8013104 <tcp_rexmit_rto_commit+0x48>)
 80130d2:	480d      	ldr	r0, [pc, #52]	@ (8013108 <tcp_rexmit_rto_commit+0x4c>)
 80130d4:	f004 f8fe 	bl	80172d4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80130de:	2bff      	cmp	r3, #255	@ 0xff
 80130e0:	d007      	beq.n	80130f2 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80130e8:	3301      	adds	r3, #1
 80130ea:	b2da      	uxtb	r2, r3
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80130f2:	6878      	ldr	r0, [r7, #4]
 80130f4:	f7ff fc7e 	bl	80129f4 <tcp_output>
}
 80130f8:	bf00      	nop
 80130fa:	3708      	adds	r7, #8
 80130fc:	46bd      	mov	sp, r7
 80130fe:	bd80      	pop	{r7, pc}
 8013100:	08019f2c 	.word	0x08019f2c
 8013104:	0801a58c 	.word	0x0801a58c
 8013108:	08019f80 	.word	0x08019f80

0801310c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801310c:	b580      	push	{r7, lr}
 801310e:	b082      	sub	sp, #8
 8013110:	af00      	add	r7, sp, #0
 8013112:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	2b00      	cmp	r3, #0
 8013118:	d106      	bne.n	8013128 <tcp_rexmit_rto+0x1c>
 801311a:	4b0a      	ldr	r3, [pc, #40]	@ (8013144 <tcp_rexmit_rto+0x38>)
 801311c:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8013120:	4909      	ldr	r1, [pc, #36]	@ (8013148 <tcp_rexmit_rto+0x3c>)
 8013122:	480a      	ldr	r0, [pc, #40]	@ (801314c <tcp_rexmit_rto+0x40>)
 8013124:	f004 f8d6 	bl	80172d4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8013128:	6878      	ldr	r0, [r7, #4]
 801312a:	f7ff ff57 	bl	8012fdc <tcp_rexmit_rto_prepare>
 801312e:	4603      	mov	r3, r0
 8013130:	2b00      	cmp	r3, #0
 8013132:	d102      	bne.n	801313a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8013134:	6878      	ldr	r0, [r7, #4]
 8013136:	f7ff ffc1 	bl	80130bc <tcp_rexmit_rto_commit>
  }
}
 801313a:	bf00      	nop
 801313c:	3708      	adds	r7, #8
 801313e:	46bd      	mov	sp, r7
 8013140:	bd80      	pop	{r7, pc}
 8013142:	bf00      	nop
 8013144:	08019f2c 	.word	0x08019f2c
 8013148:	0801a5b0 	.word	0x0801a5b0
 801314c:	08019f80 	.word	0x08019f80

08013150 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8013150:	b590      	push	{r4, r7, lr}
 8013152:	b085      	sub	sp, #20
 8013154:	af00      	add	r7, sp, #0
 8013156:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	2b00      	cmp	r3, #0
 801315c:	d106      	bne.n	801316c <tcp_rexmit+0x1c>
 801315e:	4b2f      	ldr	r3, [pc, #188]	@ (801321c <tcp_rexmit+0xcc>)
 8013160:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8013164:	492e      	ldr	r1, [pc, #184]	@ (8013220 <tcp_rexmit+0xd0>)
 8013166:	482f      	ldr	r0, [pc, #188]	@ (8013224 <tcp_rexmit+0xd4>)
 8013168:	f004 f8b4 	bl	80172d4 <iprintf>

  if (pcb->unacked == NULL) {
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013170:	2b00      	cmp	r3, #0
 8013172:	d102      	bne.n	801317a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8013174:	f06f 0305 	mvn.w	r3, #5
 8013178:	e04c      	b.n	8013214 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801317e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8013180:	68b8      	ldr	r0, [r7, #8]
 8013182:	f7ff fe2b 	bl	8012ddc <tcp_output_segment_busy>
 8013186:	4603      	mov	r3, r0
 8013188:	2b00      	cmp	r3, #0
 801318a:	d002      	beq.n	8013192 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801318c:	f06f 0305 	mvn.w	r3, #5
 8013190:	e040      	b.n	8013214 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8013192:	68bb      	ldr	r3, [r7, #8]
 8013194:	681a      	ldr	r2, [r3, #0]
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	336c      	adds	r3, #108	@ 0x6c
 801319e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80131a0:	e002      	b.n	80131a8 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80131a2:	68fb      	ldr	r3, [r7, #12]
 80131a4:	681b      	ldr	r3, [r3, #0]
 80131a6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80131a8:	68fb      	ldr	r3, [r7, #12]
 80131aa:	681b      	ldr	r3, [r3, #0]
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	d011      	beq.n	80131d4 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80131b0:	68fb      	ldr	r3, [r7, #12]
 80131b2:	681b      	ldr	r3, [r3, #0]
 80131b4:	68db      	ldr	r3, [r3, #12]
 80131b6:	685b      	ldr	r3, [r3, #4]
 80131b8:	4618      	mov	r0, r3
 80131ba:	f7f9 fbf5 	bl	800c9a8 <lwip_htonl>
 80131be:	4604      	mov	r4, r0
 80131c0:	68bb      	ldr	r3, [r7, #8]
 80131c2:	68db      	ldr	r3, [r3, #12]
 80131c4:	685b      	ldr	r3, [r3, #4]
 80131c6:	4618      	mov	r0, r3
 80131c8:	f7f9 fbee 	bl	800c9a8 <lwip_htonl>
 80131cc:	4603      	mov	r3, r0
 80131ce:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	dbe6      	blt.n	80131a2 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80131d4:	68fb      	ldr	r3, [r7, #12]
 80131d6:	681a      	ldr	r2, [r3, #0]
 80131d8:	68bb      	ldr	r3, [r7, #8]
 80131da:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80131dc:	68fb      	ldr	r3, [r7, #12]
 80131de:	68ba      	ldr	r2, [r7, #8]
 80131e0:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80131e2:	68bb      	ldr	r3, [r7, #8]
 80131e4:	681b      	ldr	r3, [r3, #0]
 80131e6:	2b00      	cmp	r3, #0
 80131e8:	d103      	bne.n	80131f2 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	2200      	movs	r2, #0
 80131ee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80131f8:	2bff      	cmp	r3, #255	@ 0xff
 80131fa:	d007      	beq.n	801320c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8013202:	3301      	adds	r3, #1
 8013204:	b2da      	uxtb	r2, r3
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	2200      	movs	r2, #0
 8013210:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8013212:	2300      	movs	r3, #0
}
 8013214:	4618      	mov	r0, r3
 8013216:	3714      	adds	r7, #20
 8013218:	46bd      	mov	sp, r7
 801321a:	bd90      	pop	{r4, r7, pc}
 801321c:	08019f2c 	.word	0x08019f2c
 8013220:	0801a5cc 	.word	0x0801a5cc
 8013224:	08019f80 	.word	0x08019f80

08013228 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8013228:	b580      	push	{r7, lr}
 801322a:	b082      	sub	sp, #8
 801322c:	af00      	add	r7, sp, #0
 801322e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	2b00      	cmp	r3, #0
 8013234:	d106      	bne.n	8013244 <tcp_rexmit_fast+0x1c>
 8013236:	4b2a      	ldr	r3, [pc, #168]	@ (80132e0 <tcp_rexmit_fast+0xb8>)
 8013238:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 801323c:	4929      	ldr	r1, [pc, #164]	@ (80132e4 <tcp_rexmit_fast+0xbc>)
 801323e:	482a      	ldr	r0, [pc, #168]	@ (80132e8 <tcp_rexmit_fast+0xc0>)
 8013240:	f004 f848 	bl	80172d4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013248:	2b00      	cmp	r3, #0
 801324a:	d044      	beq.n	80132d6 <tcp_rexmit_fast+0xae>
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	8b5b      	ldrh	r3, [r3, #26]
 8013250:	f003 0304 	and.w	r3, r3, #4
 8013254:	2b00      	cmp	r3, #0
 8013256:	d13e      	bne.n	80132d6 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8013258:	6878      	ldr	r0, [r7, #4]
 801325a:	f7ff ff79 	bl	8013150 <tcp_rexmit>
 801325e:	4603      	mov	r3, r0
 8013260:	2b00      	cmp	r3, #0
 8013262:	d138      	bne.n	80132d6 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8013270:	4293      	cmp	r3, r2
 8013272:	bf28      	it	cs
 8013274:	4613      	movcs	r3, r2
 8013276:	b29b      	uxth	r3, r3
 8013278:	0fda      	lsrs	r2, r3, #31
 801327a:	4413      	add	r3, r2
 801327c:	105b      	asrs	r3, r3, #1
 801327e:	b29a      	uxth	r2, r3
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801328c:	461a      	mov	r2, r3
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013292:	005b      	lsls	r3, r3, #1
 8013294:	429a      	cmp	r2, r3
 8013296:	d206      	bcs.n	80132a6 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801329c:	005b      	lsls	r3, r3, #1
 801329e:	b29a      	uxth	r2, r3
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80132b0:	4619      	mov	r1, r3
 80132b2:	0049      	lsls	r1, r1, #1
 80132b4:	440b      	add	r3, r1
 80132b6:	b29b      	uxth	r3, r3
 80132b8:	4413      	add	r3, r2
 80132ba:	b29a      	uxth	r2, r3
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	8b5b      	ldrh	r3, [r3, #26]
 80132c6:	f043 0304 	orr.w	r3, r3, #4
 80132ca:	b29a      	uxth	r2, r3
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	2200      	movs	r2, #0
 80132d4:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 80132d6:	bf00      	nop
 80132d8:	3708      	adds	r7, #8
 80132da:	46bd      	mov	sp, r7
 80132dc:	bd80      	pop	{r7, pc}
 80132de:	bf00      	nop
 80132e0:	08019f2c 	.word	0x08019f2c
 80132e4:	0801a5e4 	.word	0x0801a5e4
 80132e8:	08019f80 	.word	0x08019f80

080132ec <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80132ec:	b580      	push	{r7, lr}
 80132ee:	b086      	sub	sp, #24
 80132f0:	af00      	add	r7, sp, #0
 80132f2:	60f8      	str	r0, [r7, #12]
 80132f4:	607b      	str	r3, [r7, #4]
 80132f6:	460b      	mov	r3, r1
 80132f8:	817b      	strh	r3, [r7, #10]
 80132fa:	4613      	mov	r3, r2
 80132fc:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80132fe:	897a      	ldrh	r2, [r7, #10]
 8013300:	893b      	ldrh	r3, [r7, #8]
 8013302:	4413      	add	r3, r2
 8013304:	b29b      	uxth	r3, r3
 8013306:	3314      	adds	r3, #20
 8013308:	b29b      	uxth	r3, r3
 801330a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801330e:	4619      	mov	r1, r3
 8013310:	2022      	movs	r0, #34	@ 0x22
 8013312:	f7fa fc0f 	bl	800db34 <pbuf_alloc>
 8013316:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8013318:	697b      	ldr	r3, [r7, #20]
 801331a:	2b00      	cmp	r3, #0
 801331c:	d04d      	beq.n	80133ba <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801331e:	897b      	ldrh	r3, [r7, #10]
 8013320:	3313      	adds	r3, #19
 8013322:	697a      	ldr	r2, [r7, #20]
 8013324:	8952      	ldrh	r2, [r2, #10]
 8013326:	4293      	cmp	r3, r2
 8013328:	db06      	blt.n	8013338 <tcp_output_alloc_header_common+0x4c>
 801332a:	4b26      	ldr	r3, [pc, #152]	@ (80133c4 <tcp_output_alloc_header_common+0xd8>)
 801332c:	f240 7223 	movw	r2, #1827	@ 0x723
 8013330:	4925      	ldr	r1, [pc, #148]	@ (80133c8 <tcp_output_alloc_header_common+0xdc>)
 8013332:	4826      	ldr	r0, [pc, #152]	@ (80133cc <tcp_output_alloc_header_common+0xe0>)
 8013334:	f003 ffce 	bl	80172d4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8013338:	697b      	ldr	r3, [r7, #20]
 801333a:	685b      	ldr	r3, [r3, #4]
 801333c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801333e:	8c3b      	ldrh	r3, [r7, #32]
 8013340:	4618      	mov	r0, r3
 8013342:	f7f9 fb1b 	bl	800c97c <lwip_htons>
 8013346:	4603      	mov	r3, r0
 8013348:	461a      	mov	r2, r3
 801334a:	693b      	ldr	r3, [r7, #16]
 801334c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801334e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013350:	4618      	mov	r0, r3
 8013352:	f7f9 fb13 	bl	800c97c <lwip_htons>
 8013356:	4603      	mov	r3, r0
 8013358:	461a      	mov	r2, r3
 801335a:	693b      	ldr	r3, [r7, #16]
 801335c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801335e:	693b      	ldr	r3, [r7, #16]
 8013360:	687a      	ldr	r2, [r7, #4]
 8013362:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8013364:	68f8      	ldr	r0, [r7, #12]
 8013366:	f7f9 fb1f 	bl	800c9a8 <lwip_htonl>
 801336a:	4602      	mov	r2, r0
 801336c:	693b      	ldr	r3, [r7, #16]
 801336e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8013370:	897b      	ldrh	r3, [r7, #10]
 8013372:	089b      	lsrs	r3, r3, #2
 8013374:	b29b      	uxth	r3, r3
 8013376:	3305      	adds	r3, #5
 8013378:	b29b      	uxth	r3, r3
 801337a:	031b      	lsls	r3, r3, #12
 801337c:	b29a      	uxth	r2, r3
 801337e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8013382:	b29b      	uxth	r3, r3
 8013384:	4313      	orrs	r3, r2
 8013386:	b29b      	uxth	r3, r3
 8013388:	4618      	mov	r0, r3
 801338a:	f7f9 faf7 	bl	800c97c <lwip_htons>
 801338e:	4603      	mov	r3, r0
 8013390:	461a      	mov	r2, r3
 8013392:	693b      	ldr	r3, [r7, #16]
 8013394:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8013396:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8013398:	4618      	mov	r0, r3
 801339a:	f7f9 faef 	bl	800c97c <lwip_htons>
 801339e:	4603      	mov	r3, r0
 80133a0:	461a      	mov	r2, r3
 80133a2:	693b      	ldr	r3, [r7, #16]
 80133a4:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80133a6:	693b      	ldr	r3, [r7, #16]
 80133a8:	2200      	movs	r2, #0
 80133aa:	741a      	strb	r2, [r3, #16]
 80133ac:	2200      	movs	r2, #0
 80133ae:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80133b0:	693b      	ldr	r3, [r7, #16]
 80133b2:	2200      	movs	r2, #0
 80133b4:	749a      	strb	r2, [r3, #18]
 80133b6:	2200      	movs	r2, #0
 80133b8:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80133ba:	697b      	ldr	r3, [r7, #20]
}
 80133bc:	4618      	mov	r0, r3
 80133be:	3718      	adds	r7, #24
 80133c0:	46bd      	mov	sp, r7
 80133c2:	bd80      	pop	{r7, pc}
 80133c4:	08019f2c 	.word	0x08019f2c
 80133c8:	0801a604 	.word	0x0801a604
 80133cc:	08019f80 	.word	0x08019f80

080133d0 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80133d0:	b5b0      	push	{r4, r5, r7, lr}
 80133d2:	b08a      	sub	sp, #40	@ 0x28
 80133d4:	af04      	add	r7, sp, #16
 80133d6:	60f8      	str	r0, [r7, #12]
 80133d8:	607b      	str	r3, [r7, #4]
 80133da:	460b      	mov	r3, r1
 80133dc:	817b      	strh	r3, [r7, #10]
 80133de:	4613      	mov	r3, r2
 80133e0:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80133e2:	68fb      	ldr	r3, [r7, #12]
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	d106      	bne.n	80133f6 <tcp_output_alloc_header+0x26>
 80133e8:	4b15      	ldr	r3, [pc, #84]	@ (8013440 <tcp_output_alloc_header+0x70>)
 80133ea:	f240 7242 	movw	r2, #1858	@ 0x742
 80133ee:	4915      	ldr	r1, [pc, #84]	@ (8013444 <tcp_output_alloc_header+0x74>)
 80133f0:	4815      	ldr	r0, [pc, #84]	@ (8013448 <tcp_output_alloc_header+0x78>)
 80133f2:	f003 ff6f 	bl	80172d4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80133f6:	68fb      	ldr	r3, [r7, #12]
 80133f8:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80133fa:	68fb      	ldr	r3, [r7, #12]
 80133fc:	8adb      	ldrh	r3, [r3, #22]
 80133fe:	68fa      	ldr	r2, [r7, #12]
 8013400:	8b12      	ldrh	r2, [r2, #24]
 8013402:	68f9      	ldr	r1, [r7, #12]
 8013404:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8013406:	893d      	ldrh	r5, [r7, #8]
 8013408:	897c      	ldrh	r4, [r7, #10]
 801340a:	9103      	str	r1, [sp, #12]
 801340c:	2110      	movs	r1, #16
 801340e:	9102      	str	r1, [sp, #8]
 8013410:	9201      	str	r2, [sp, #4]
 8013412:	9300      	str	r3, [sp, #0]
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	462a      	mov	r2, r5
 8013418:	4621      	mov	r1, r4
 801341a:	f7ff ff67 	bl	80132ec <tcp_output_alloc_header_common>
 801341e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8013420:	697b      	ldr	r3, [r7, #20]
 8013422:	2b00      	cmp	r3, #0
 8013424:	d006      	beq.n	8013434 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8013426:	68fb      	ldr	r3, [r7, #12]
 8013428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801342a:	68fa      	ldr	r2, [r7, #12]
 801342c:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801342e:	441a      	add	r2, r3
 8013430:	68fb      	ldr	r3, [r7, #12]
 8013432:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8013434:	697b      	ldr	r3, [r7, #20]
}
 8013436:	4618      	mov	r0, r3
 8013438:	3718      	adds	r7, #24
 801343a:	46bd      	mov	sp, r7
 801343c:	bdb0      	pop	{r4, r5, r7, pc}
 801343e:	bf00      	nop
 8013440:	08019f2c 	.word	0x08019f2c
 8013444:	0801a634 	.word	0x0801a634
 8013448:	08019f80 	.word	0x08019f80

0801344c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801344c:	b580      	push	{r7, lr}
 801344e:	b088      	sub	sp, #32
 8013450:	af00      	add	r7, sp, #0
 8013452:	60f8      	str	r0, [r7, #12]
 8013454:	60b9      	str	r1, [r7, #8]
 8013456:	4611      	mov	r1, r2
 8013458:	461a      	mov	r2, r3
 801345a:	460b      	mov	r3, r1
 801345c:	71fb      	strb	r3, [r7, #7]
 801345e:	4613      	mov	r3, r2
 8013460:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8013462:	2300      	movs	r3, #0
 8013464:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8013466:	68bb      	ldr	r3, [r7, #8]
 8013468:	2b00      	cmp	r3, #0
 801346a:	d106      	bne.n	801347a <tcp_output_fill_options+0x2e>
 801346c:	4b12      	ldr	r3, [pc, #72]	@ (80134b8 <tcp_output_fill_options+0x6c>)
 801346e:	f240 7256 	movw	r2, #1878	@ 0x756
 8013472:	4912      	ldr	r1, [pc, #72]	@ (80134bc <tcp_output_fill_options+0x70>)
 8013474:	4812      	ldr	r0, [pc, #72]	@ (80134c0 <tcp_output_fill_options+0x74>)
 8013476:	f003 ff2d 	bl	80172d4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801347a:	68bb      	ldr	r3, [r7, #8]
 801347c:	685b      	ldr	r3, [r3, #4]
 801347e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8013480:	69bb      	ldr	r3, [r7, #24]
 8013482:	3314      	adds	r3, #20
 8013484:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8013486:	8bfb      	ldrh	r3, [r7, #30]
 8013488:	009b      	lsls	r3, r3, #2
 801348a:	461a      	mov	r2, r3
 801348c:	79fb      	ldrb	r3, [r7, #7]
 801348e:	009b      	lsls	r3, r3, #2
 8013490:	f003 0304 	and.w	r3, r3, #4
 8013494:	4413      	add	r3, r2
 8013496:	3314      	adds	r3, #20
 8013498:	69ba      	ldr	r2, [r7, #24]
 801349a:	4413      	add	r3, r2
 801349c:	697a      	ldr	r2, [r7, #20]
 801349e:	429a      	cmp	r2, r3
 80134a0:	d006      	beq.n	80134b0 <tcp_output_fill_options+0x64>
 80134a2:	4b05      	ldr	r3, [pc, #20]	@ (80134b8 <tcp_output_fill_options+0x6c>)
 80134a4:	f240 7275 	movw	r2, #1909	@ 0x775
 80134a8:	4906      	ldr	r1, [pc, #24]	@ (80134c4 <tcp_output_fill_options+0x78>)
 80134aa:	4805      	ldr	r0, [pc, #20]	@ (80134c0 <tcp_output_fill_options+0x74>)
 80134ac:	f003 ff12 	bl	80172d4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80134b0:	bf00      	nop
 80134b2:	3720      	adds	r7, #32
 80134b4:	46bd      	mov	sp, r7
 80134b6:	bd80      	pop	{r7, pc}
 80134b8:	08019f2c 	.word	0x08019f2c
 80134bc:	0801a65c 	.word	0x0801a65c
 80134c0:	08019f80 	.word	0x08019f80
 80134c4:	0801a554 	.word	0x0801a554

080134c8 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80134c8:	b580      	push	{r7, lr}
 80134ca:	b08a      	sub	sp, #40	@ 0x28
 80134cc:	af04      	add	r7, sp, #16
 80134ce:	60f8      	str	r0, [r7, #12]
 80134d0:	60b9      	str	r1, [r7, #8]
 80134d2:	607a      	str	r2, [r7, #4]
 80134d4:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80134d6:	68bb      	ldr	r3, [r7, #8]
 80134d8:	2b00      	cmp	r3, #0
 80134da:	d106      	bne.n	80134ea <tcp_output_control_segment+0x22>
 80134dc:	4b1c      	ldr	r3, [pc, #112]	@ (8013550 <tcp_output_control_segment+0x88>)
 80134de:	f240 7287 	movw	r2, #1927	@ 0x787
 80134e2:	491c      	ldr	r1, [pc, #112]	@ (8013554 <tcp_output_control_segment+0x8c>)
 80134e4:	481c      	ldr	r0, [pc, #112]	@ (8013558 <tcp_output_control_segment+0x90>)
 80134e6:	f003 fef5 	bl	80172d4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80134ea:	683a      	ldr	r2, [r7, #0]
 80134ec:	6879      	ldr	r1, [r7, #4]
 80134ee:	68f8      	ldr	r0, [r7, #12]
 80134f0:	f7fe ff42 	bl	8012378 <tcp_route>
 80134f4:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80134f6:	693b      	ldr	r3, [r7, #16]
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	d102      	bne.n	8013502 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80134fc:	23fc      	movs	r3, #252	@ 0xfc
 80134fe:	75fb      	strb	r3, [r7, #23]
 8013500:	e01c      	b.n	801353c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8013502:	68fb      	ldr	r3, [r7, #12]
 8013504:	2b00      	cmp	r3, #0
 8013506:	d006      	beq.n	8013516 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8013508:	68fb      	ldr	r3, [r7, #12]
 801350a:	7adb      	ldrb	r3, [r3, #11]
 801350c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801350e:	68fb      	ldr	r3, [r7, #12]
 8013510:	7a9b      	ldrb	r3, [r3, #10]
 8013512:	757b      	strb	r3, [r7, #21]
 8013514:	e003      	b.n	801351e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8013516:	23ff      	movs	r3, #255	@ 0xff
 8013518:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801351a:	2300      	movs	r3, #0
 801351c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801351e:	7dba      	ldrb	r2, [r7, #22]
 8013520:	693b      	ldr	r3, [r7, #16]
 8013522:	9302      	str	r3, [sp, #8]
 8013524:	2306      	movs	r3, #6
 8013526:	9301      	str	r3, [sp, #4]
 8013528:	7d7b      	ldrb	r3, [r7, #21]
 801352a:	9300      	str	r3, [sp, #0]
 801352c:	4613      	mov	r3, r2
 801352e:	683a      	ldr	r2, [r7, #0]
 8013530:	6879      	ldr	r1, [r7, #4]
 8013532:	68b8      	ldr	r0, [r7, #8]
 8013534:	f001 ff70 	bl	8015418 <ip4_output_if>
 8013538:	4603      	mov	r3, r0
 801353a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801353c:	68b8      	ldr	r0, [r7, #8]
 801353e:	f7fa fddd 	bl	800e0fc <pbuf_free>
  return err;
 8013542:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013546:	4618      	mov	r0, r3
 8013548:	3718      	adds	r7, #24
 801354a:	46bd      	mov	sp, r7
 801354c:	bd80      	pop	{r7, pc}
 801354e:	bf00      	nop
 8013550:	08019f2c 	.word	0x08019f2c
 8013554:	0801a684 	.word	0x0801a684
 8013558:	08019f80 	.word	0x08019f80

0801355c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801355c:	b590      	push	{r4, r7, lr}
 801355e:	b08b      	sub	sp, #44	@ 0x2c
 8013560:	af04      	add	r7, sp, #16
 8013562:	60f8      	str	r0, [r7, #12]
 8013564:	60b9      	str	r1, [r7, #8]
 8013566:	607a      	str	r2, [r7, #4]
 8013568:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801356a:	683b      	ldr	r3, [r7, #0]
 801356c:	2b00      	cmp	r3, #0
 801356e:	d106      	bne.n	801357e <tcp_rst+0x22>
 8013570:	4b1f      	ldr	r3, [pc, #124]	@ (80135f0 <tcp_rst+0x94>)
 8013572:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8013576:	491f      	ldr	r1, [pc, #124]	@ (80135f4 <tcp_rst+0x98>)
 8013578:	481f      	ldr	r0, [pc, #124]	@ (80135f8 <tcp_rst+0x9c>)
 801357a:	f003 feab 	bl	80172d4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801357e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013580:	2b00      	cmp	r3, #0
 8013582:	d106      	bne.n	8013592 <tcp_rst+0x36>
 8013584:	4b1a      	ldr	r3, [pc, #104]	@ (80135f0 <tcp_rst+0x94>)
 8013586:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 801358a:	491c      	ldr	r1, [pc, #112]	@ (80135fc <tcp_rst+0xa0>)
 801358c:	481a      	ldr	r0, [pc, #104]	@ (80135f8 <tcp_rst+0x9c>)
 801358e:	f003 fea1 	bl	80172d4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013592:	2300      	movs	r3, #0
 8013594:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8013596:	f246 0308 	movw	r3, #24584	@ 0x6008
 801359a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801359c:	7dfb      	ldrb	r3, [r7, #23]
 801359e:	b29c      	uxth	r4, r3
 80135a0:	68b8      	ldr	r0, [r7, #8]
 80135a2:	f7f9 fa01 	bl	800c9a8 <lwip_htonl>
 80135a6:	4602      	mov	r2, r0
 80135a8:	8abb      	ldrh	r3, [r7, #20]
 80135aa:	9303      	str	r3, [sp, #12]
 80135ac:	2314      	movs	r3, #20
 80135ae:	9302      	str	r3, [sp, #8]
 80135b0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80135b2:	9301      	str	r3, [sp, #4]
 80135b4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80135b6:	9300      	str	r3, [sp, #0]
 80135b8:	4613      	mov	r3, r2
 80135ba:	2200      	movs	r2, #0
 80135bc:	4621      	mov	r1, r4
 80135be:	6878      	ldr	r0, [r7, #4]
 80135c0:	f7ff fe94 	bl	80132ec <tcp_output_alloc_header_common>
 80135c4:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80135c6:	693b      	ldr	r3, [r7, #16]
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	d00c      	beq.n	80135e6 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80135cc:	7dfb      	ldrb	r3, [r7, #23]
 80135ce:	2200      	movs	r2, #0
 80135d0:	6939      	ldr	r1, [r7, #16]
 80135d2:	68f8      	ldr	r0, [r7, #12]
 80135d4:	f7ff ff3a 	bl	801344c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80135d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80135da:	683a      	ldr	r2, [r7, #0]
 80135dc:	6939      	ldr	r1, [r7, #16]
 80135de:	68f8      	ldr	r0, [r7, #12]
 80135e0:	f7ff ff72 	bl	80134c8 <tcp_output_control_segment>
 80135e4:	e000      	b.n	80135e8 <tcp_rst+0x8c>
    return;
 80135e6:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80135e8:	371c      	adds	r7, #28
 80135ea:	46bd      	mov	sp, r7
 80135ec:	bd90      	pop	{r4, r7, pc}
 80135ee:	bf00      	nop
 80135f0:	08019f2c 	.word	0x08019f2c
 80135f4:	0801a6b0 	.word	0x0801a6b0
 80135f8:	08019f80 	.word	0x08019f80
 80135fc:	0801a6cc 	.word	0x0801a6cc

08013600 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8013600:	b590      	push	{r4, r7, lr}
 8013602:	b087      	sub	sp, #28
 8013604:	af00      	add	r7, sp, #0
 8013606:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8013608:	2300      	movs	r3, #0
 801360a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801360c:	2300      	movs	r3, #0
 801360e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	2b00      	cmp	r3, #0
 8013614:	d106      	bne.n	8013624 <tcp_send_empty_ack+0x24>
 8013616:	4b28      	ldr	r3, [pc, #160]	@ (80136b8 <tcp_send_empty_ack+0xb8>)
 8013618:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 801361c:	4927      	ldr	r1, [pc, #156]	@ (80136bc <tcp_send_empty_ack+0xbc>)
 801361e:	4828      	ldr	r0, [pc, #160]	@ (80136c0 <tcp_send_empty_ack+0xc0>)
 8013620:	f003 fe58 	bl	80172d4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013624:	7dfb      	ldrb	r3, [r7, #23]
 8013626:	009b      	lsls	r3, r3, #2
 8013628:	b2db      	uxtb	r3, r3
 801362a:	f003 0304 	and.w	r3, r3, #4
 801362e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8013630:	7d7b      	ldrb	r3, [r7, #21]
 8013632:	b29c      	uxth	r4, r3
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013638:	4618      	mov	r0, r3
 801363a:	f7f9 f9b5 	bl	800c9a8 <lwip_htonl>
 801363e:	4603      	mov	r3, r0
 8013640:	2200      	movs	r2, #0
 8013642:	4621      	mov	r1, r4
 8013644:	6878      	ldr	r0, [r7, #4]
 8013646:	f7ff fec3 	bl	80133d0 <tcp_output_alloc_header>
 801364a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801364c:	693b      	ldr	r3, [r7, #16]
 801364e:	2b00      	cmp	r3, #0
 8013650:	d109      	bne.n	8013666 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	8b5b      	ldrh	r3, [r3, #26]
 8013656:	f043 0303 	orr.w	r3, r3, #3
 801365a:	b29a      	uxth	r2, r3
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8013660:	f06f 0301 	mvn.w	r3, #1
 8013664:	e023      	b.n	80136ae <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8013666:	7dbb      	ldrb	r3, [r7, #22]
 8013668:	7dfa      	ldrb	r2, [r7, #23]
 801366a:	6939      	ldr	r1, [r7, #16]
 801366c:	6878      	ldr	r0, [r7, #4]
 801366e:	f7ff feed 	bl	801344c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013672:	687a      	ldr	r2, [r7, #4]
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	3304      	adds	r3, #4
 8013678:	6939      	ldr	r1, [r7, #16]
 801367a:	6878      	ldr	r0, [r7, #4]
 801367c:	f7ff ff24 	bl	80134c8 <tcp_output_control_segment>
 8013680:	4603      	mov	r3, r0
 8013682:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8013684:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013688:	2b00      	cmp	r3, #0
 801368a:	d007      	beq.n	801369c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	8b5b      	ldrh	r3, [r3, #26]
 8013690:	f043 0303 	orr.w	r3, r3, #3
 8013694:	b29a      	uxth	r2, r3
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	835a      	strh	r2, [r3, #26]
 801369a:	e006      	b.n	80136aa <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	8b5b      	ldrh	r3, [r3, #26]
 80136a0:	f023 0303 	bic.w	r3, r3, #3
 80136a4:	b29a      	uxth	r2, r3
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80136aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80136ae:	4618      	mov	r0, r3
 80136b0:	371c      	adds	r7, #28
 80136b2:	46bd      	mov	sp, r7
 80136b4:	bd90      	pop	{r4, r7, pc}
 80136b6:	bf00      	nop
 80136b8:	08019f2c 	.word	0x08019f2c
 80136bc:	0801a6e8 	.word	0x0801a6e8
 80136c0:	08019f80 	.word	0x08019f80

080136c4 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80136c4:	b590      	push	{r4, r7, lr}
 80136c6:	b087      	sub	sp, #28
 80136c8:	af00      	add	r7, sp, #0
 80136ca:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80136cc:	2300      	movs	r3, #0
 80136ce:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	2b00      	cmp	r3, #0
 80136d4:	d106      	bne.n	80136e4 <tcp_keepalive+0x20>
 80136d6:	4b18      	ldr	r3, [pc, #96]	@ (8013738 <tcp_keepalive+0x74>)
 80136d8:	f640 0224 	movw	r2, #2084	@ 0x824
 80136dc:	4917      	ldr	r1, [pc, #92]	@ (801373c <tcp_keepalive+0x78>)
 80136de:	4818      	ldr	r0, [pc, #96]	@ (8013740 <tcp_keepalive+0x7c>)
 80136e0:	f003 fdf8 	bl	80172d4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80136e4:	7dfb      	ldrb	r3, [r7, #23]
 80136e6:	b29c      	uxth	r4, r3
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80136ec:	3b01      	subs	r3, #1
 80136ee:	4618      	mov	r0, r3
 80136f0:	f7f9 f95a 	bl	800c9a8 <lwip_htonl>
 80136f4:	4603      	mov	r3, r0
 80136f6:	2200      	movs	r2, #0
 80136f8:	4621      	mov	r1, r4
 80136fa:	6878      	ldr	r0, [r7, #4]
 80136fc:	f7ff fe68 	bl	80133d0 <tcp_output_alloc_header>
 8013700:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013702:	693b      	ldr	r3, [r7, #16]
 8013704:	2b00      	cmp	r3, #0
 8013706:	d102      	bne.n	801370e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8013708:	f04f 33ff 	mov.w	r3, #4294967295
 801370c:	e010      	b.n	8013730 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801370e:	7dfb      	ldrb	r3, [r7, #23]
 8013710:	2200      	movs	r2, #0
 8013712:	6939      	ldr	r1, [r7, #16]
 8013714:	6878      	ldr	r0, [r7, #4]
 8013716:	f7ff fe99 	bl	801344c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801371a:	687a      	ldr	r2, [r7, #4]
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	3304      	adds	r3, #4
 8013720:	6939      	ldr	r1, [r7, #16]
 8013722:	6878      	ldr	r0, [r7, #4]
 8013724:	f7ff fed0 	bl	80134c8 <tcp_output_control_segment>
 8013728:	4603      	mov	r3, r0
 801372a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801372c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013730:	4618      	mov	r0, r3
 8013732:	371c      	adds	r7, #28
 8013734:	46bd      	mov	sp, r7
 8013736:	bd90      	pop	{r4, r7, pc}
 8013738:	08019f2c 	.word	0x08019f2c
 801373c:	0801a708 	.word	0x0801a708
 8013740:	08019f80 	.word	0x08019f80

08013744 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8013744:	b590      	push	{r4, r7, lr}
 8013746:	b08b      	sub	sp, #44	@ 0x2c
 8013748:	af00      	add	r7, sp, #0
 801374a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801374c:	2300      	movs	r3, #0
 801374e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	2b00      	cmp	r3, #0
 8013756:	d106      	bne.n	8013766 <tcp_zero_window_probe+0x22>
 8013758:	4b4c      	ldr	r3, [pc, #304]	@ (801388c <tcp_zero_window_probe+0x148>)
 801375a:	f640 024f 	movw	r2, #2127	@ 0x84f
 801375e:	494c      	ldr	r1, [pc, #304]	@ (8013890 <tcp_zero_window_probe+0x14c>)
 8013760:	484c      	ldr	r0, [pc, #304]	@ (8013894 <tcp_zero_window_probe+0x150>)
 8013762:	f003 fdb7 	bl	80172d4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801376a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801376c:	6a3b      	ldr	r3, [r7, #32]
 801376e:	2b00      	cmp	r3, #0
 8013770:	d101      	bne.n	8013776 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8013772:	2300      	movs	r3, #0
 8013774:	e086      	b.n	8013884 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8013776:	687b      	ldr	r3, [r7, #4]
 8013778:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801377c:	2bff      	cmp	r3, #255	@ 0xff
 801377e:	d007      	beq.n	8013790 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8013786:	3301      	adds	r3, #1
 8013788:	b2da      	uxtb	r2, r3
 801378a:	687b      	ldr	r3, [r7, #4]
 801378c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8013790:	6a3b      	ldr	r3, [r7, #32]
 8013792:	68db      	ldr	r3, [r3, #12]
 8013794:	899b      	ldrh	r3, [r3, #12]
 8013796:	b29b      	uxth	r3, r3
 8013798:	4618      	mov	r0, r3
 801379a:	f7f9 f8ef 	bl	800c97c <lwip_htons>
 801379e:	4603      	mov	r3, r0
 80137a0:	b2db      	uxtb	r3, r3
 80137a2:	f003 0301 	and.w	r3, r3, #1
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	d005      	beq.n	80137b6 <tcp_zero_window_probe+0x72>
 80137aa:	6a3b      	ldr	r3, [r7, #32]
 80137ac:	891b      	ldrh	r3, [r3, #8]
 80137ae:	2b00      	cmp	r3, #0
 80137b0:	d101      	bne.n	80137b6 <tcp_zero_window_probe+0x72>
 80137b2:	2301      	movs	r3, #1
 80137b4:	e000      	b.n	80137b8 <tcp_zero_window_probe+0x74>
 80137b6:	2300      	movs	r3, #0
 80137b8:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80137ba:	7ffb      	ldrb	r3, [r7, #31]
 80137bc:	2b00      	cmp	r3, #0
 80137be:	bf0c      	ite	eq
 80137c0:	2301      	moveq	r3, #1
 80137c2:	2300      	movne	r3, #0
 80137c4:	b2db      	uxtb	r3, r3
 80137c6:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80137c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80137cc:	b299      	uxth	r1, r3
 80137ce:	6a3b      	ldr	r3, [r7, #32]
 80137d0:	68db      	ldr	r3, [r3, #12]
 80137d2:	685b      	ldr	r3, [r3, #4]
 80137d4:	8bba      	ldrh	r2, [r7, #28]
 80137d6:	6878      	ldr	r0, [r7, #4]
 80137d8:	f7ff fdfa 	bl	80133d0 <tcp_output_alloc_header>
 80137dc:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80137de:	69bb      	ldr	r3, [r7, #24]
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d102      	bne.n	80137ea <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80137e4:	f04f 33ff 	mov.w	r3, #4294967295
 80137e8:	e04c      	b.n	8013884 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80137ea:	69bb      	ldr	r3, [r7, #24]
 80137ec:	685b      	ldr	r3, [r3, #4]
 80137ee:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80137f0:	7ffb      	ldrb	r3, [r7, #31]
 80137f2:	2b00      	cmp	r3, #0
 80137f4:	d011      	beq.n	801381a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80137f6:	697b      	ldr	r3, [r7, #20]
 80137f8:	899b      	ldrh	r3, [r3, #12]
 80137fa:	b29b      	uxth	r3, r3
 80137fc:	b21b      	sxth	r3, r3
 80137fe:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8013802:	b21c      	sxth	r4, r3
 8013804:	2011      	movs	r0, #17
 8013806:	f7f9 f8b9 	bl	800c97c <lwip_htons>
 801380a:	4603      	mov	r3, r0
 801380c:	b21b      	sxth	r3, r3
 801380e:	4323      	orrs	r3, r4
 8013810:	b21b      	sxth	r3, r3
 8013812:	b29a      	uxth	r2, r3
 8013814:	697b      	ldr	r3, [r7, #20]
 8013816:	819a      	strh	r2, [r3, #12]
 8013818:	e010      	b.n	801383c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801381a:	69bb      	ldr	r3, [r7, #24]
 801381c:	685b      	ldr	r3, [r3, #4]
 801381e:	3314      	adds	r3, #20
 8013820:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8013822:	6a3b      	ldr	r3, [r7, #32]
 8013824:	6858      	ldr	r0, [r3, #4]
 8013826:	6a3b      	ldr	r3, [r7, #32]
 8013828:	685b      	ldr	r3, [r3, #4]
 801382a:	891a      	ldrh	r2, [r3, #8]
 801382c:	6a3b      	ldr	r3, [r7, #32]
 801382e:	891b      	ldrh	r3, [r3, #8]
 8013830:	1ad3      	subs	r3, r2, r3
 8013832:	b29b      	uxth	r3, r3
 8013834:	2201      	movs	r2, #1
 8013836:	6939      	ldr	r1, [r7, #16]
 8013838:	f7fa fe56 	bl	800e4e8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801383c:	6a3b      	ldr	r3, [r7, #32]
 801383e:	68db      	ldr	r3, [r3, #12]
 8013840:	685b      	ldr	r3, [r3, #4]
 8013842:	4618      	mov	r0, r3
 8013844:	f7f9 f8b0 	bl	800c9a8 <lwip_htonl>
 8013848:	4603      	mov	r3, r0
 801384a:	3301      	adds	r3, #1
 801384c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013852:	68fb      	ldr	r3, [r7, #12]
 8013854:	1ad3      	subs	r3, r2, r3
 8013856:	2b00      	cmp	r3, #0
 8013858:	da02      	bge.n	8013860 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	68fa      	ldr	r2, [r7, #12]
 801385e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013860:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013864:	2200      	movs	r2, #0
 8013866:	69b9      	ldr	r1, [r7, #24]
 8013868:	6878      	ldr	r0, [r7, #4]
 801386a:	f7ff fdef 	bl	801344c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801386e:	687a      	ldr	r2, [r7, #4]
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	3304      	adds	r3, #4
 8013874:	69b9      	ldr	r1, [r7, #24]
 8013876:	6878      	ldr	r0, [r7, #4]
 8013878:	f7ff fe26 	bl	80134c8 <tcp_output_control_segment>
 801387c:	4603      	mov	r3, r0
 801387e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013880:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8013884:	4618      	mov	r0, r3
 8013886:	372c      	adds	r7, #44	@ 0x2c
 8013888:	46bd      	mov	sp, r7
 801388a:	bd90      	pop	{r4, r7, pc}
 801388c:	08019f2c 	.word	0x08019f2c
 8013890:	0801a724 	.word	0x0801a724
 8013894:	08019f80 	.word	0x08019f80

08013898 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8013898:	b580      	push	{r7, lr}
 801389a:	b082      	sub	sp, #8
 801389c:	af00      	add	r7, sp, #0
 801389e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80138a0:	f7fa ff10 	bl	800e6c4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80138a4:	4b0a      	ldr	r3, [pc, #40]	@ (80138d0 <tcpip_tcp_timer+0x38>)
 80138a6:	681b      	ldr	r3, [r3, #0]
 80138a8:	2b00      	cmp	r3, #0
 80138aa:	d103      	bne.n	80138b4 <tcpip_tcp_timer+0x1c>
 80138ac:	4b09      	ldr	r3, [pc, #36]	@ (80138d4 <tcpip_tcp_timer+0x3c>)
 80138ae:	681b      	ldr	r3, [r3, #0]
 80138b0:	2b00      	cmp	r3, #0
 80138b2:	d005      	beq.n	80138c0 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80138b4:	2200      	movs	r2, #0
 80138b6:	4908      	ldr	r1, [pc, #32]	@ (80138d8 <tcpip_tcp_timer+0x40>)
 80138b8:	20fa      	movs	r0, #250	@ 0xfa
 80138ba:	f000 f8f3 	bl	8013aa4 <sys_timeout>
 80138be:	e003      	b.n	80138c8 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80138c0:	4b06      	ldr	r3, [pc, #24]	@ (80138dc <tcpip_tcp_timer+0x44>)
 80138c2:	2200      	movs	r2, #0
 80138c4:	601a      	str	r2, [r3, #0]
  }
}
 80138c6:	bf00      	nop
 80138c8:	bf00      	nop
 80138ca:	3708      	adds	r7, #8
 80138cc:	46bd      	mov	sp, r7
 80138ce:	bd80      	pop	{r7, pc}
 80138d0:	2000c694 	.word	0x2000c694
 80138d4:	2000c698 	.word	0x2000c698
 80138d8:	08013899 	.word	0x08013899
 80138dc:	2000c6e0 	.word	0x2000c6e0

080138e0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80138e0:	b580      	push	{r7, lr}
 80138e2:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80138e4:	4b0a      	ldr	r3, [pc, #40]	@ (8013910 <tcp_timer_needed+0x30>)
 80138e6:	681b      	ldr	r3, [r3, #0]
 80138e8:	2b00      	cmp	r3, #0
 80138ea:	d10f      	bne.n	801390c <tcp_timer_needed+0x2c>
 80138ec:	4b09      	ldr	r3, [pc, #36]	@ (8013914 <tcp_timer_needed+0x34>)
 80138ee:	681b      	ldr	r3, [r3, #0]
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	d103      	bne.n	80138fc <tcp_timer_needed+0x1c>
 80138f4:	4b08      	ldr	r3, [pc, #32]	@ (8013918 <tcp_timer_needed+0x38>)
 80138f6:	681b      	ldr	r3, [r3, #0]
 80138f8:	2b00      	cmp	r3, #0
 80138fa:	d007      	beq.n	801390c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80138fc:	4b04      	ldr	r3, [pc, #16]	@ (8013910 <tcp_timer_needed+0x30>)
 80138fe:	2201      	movs	r2, #1
 8013900:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013902:	2200      	movs	r2, #0
 8013904:	4905      	ldr	r1, [pc, #20]	@ (801391c <tcp_timer_needed+0x3c>)
 8013906:	20fa      	movs	r0, #250	@ 0xfa
 8013908:	f000 f8cc 	bl	8013aa4 <sys_timeout>
  }
}
 801390c:	bf00      	nop
 801390e:	bd80      	pop	{r7, pc}
 8013910:	2000c6e0 	.word	0x2000c6e0
 8013914:	2000c694 	.word	0x2000c694
 8013918:	2000c698 	.word	0x2000c698
 801391c:	08013899 	.word	0x08013899

08013920 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8013920:	b580      	push	{r7, lr}
 8013922:	b086      	sub	sp, #24
 8013924:	af00      	add	r7, sp, #0
 8013926:	60f8      	str	r0, [r7, #12]
 8013928:	60b9      	str	r1, [r7, #8]
 801392a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801392c:	200a      	movs	r0, #10
 801392e:	f7f9 fcfd 	bl	800d32c <memp_malloc>
 8013932:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8013934:	693b      	ldr	r3, [r7, #16]
 8013936:	2b00      	cmp	r3, #0
 8013938:	d109      	bne.n	801394e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801393a:	693b      	ldr	r3, [r7, #16]
 801393c:	2b00      	cmp	r3, #0
 801393e:	d151      	bne.n	80139e4 <sys_timeout_abs+0xc4>
 8013940:	4b2a      	ldr	r3, [pc, #168]	@ (80139ec <sys_timeout_abs+0xcc>)
 8013942:	22be      	movs	r2, #190	@ 0xbe
 8013944:	492a      	ldr	r1, [pc, #168]	@ (80139f0 <sys_timeout_abs+0xd0>)
 8013946:	482b      	ldr	r0, [pc, #172]	@ (80139f4 <sys_timeout_abs+0xd4>)
 8013948:	f003 fcc4 	bl	80172d4 <iprintf>
    return;
 801394c:	e04a      	b.n	80139e4 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801394e:	693b      	ldr	r3, [r7, #16]
 8013950:	2200      	movs	r2, #0
 8013952:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8013954:	693b      	ldr	r3, [r7, #16]
 8013956:	68ba      	ldr	r2, [r7, #8]
 8013958:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801395a:	693b      	ldr	r3, [r7, #16]
 801395c:	687a      	ldr	r2, [r7, #4]
 801395e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8013960:	693b      	ldr	r3, [r7, #16]
 8013962:	68fa      	ldr	r2, [r7, #12]
 8013964:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8013966:	4b24      	ldr	r3, [pc, #144]	@ (80139f8 <sys_timeout_abs+0xd8>)
 8013968:	681b      	ldr	r3, [r3, #0]
 801396a:	2b00      	cmp	r3, #0
 801396c:	d103      	bne.n	8013976 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801396e:	4a22      	ldr	r2, [pc, #136]	@ (80139f8 <sys_timeout_abs+0xd8>)
 8013970:	693b      	ldr	r3, [r7, #16]
 8013972:	6013      	str	r3, [r2, #0]
    return;
 8013974:	e037      	b.n	80139e6 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8013976:	693b      	ldr	r3, [r7, #16]
 8013978:	685a      	ldr	r2, [r3, #4]
 801397a:	4b1f      	ldr	r3, [pc, #124]	@ (80139f8 <sys_timeout_abs+0xd8>)
 801397c:	681b      	ldr	r3, [r3, #0]
 801397e:	685b      	ldr	r3, [r3, #4]
 8013980:	1ad3      	subs	r3, r2, r3
 8013982:	0fdb      	lsrs	r3, r3, #31
 8013984:	f003 0301 	and.w	r3, r3, #1
 8013988:	b2db      	uxtb	r3, r3
 801398a:	2b00      	cmp	r3, #0
 801398c:	d007      	beq.n	801399e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801398e:	4b1a      	ldr	r3, [pc, #104]	@ (80139f8 <sys_timeout_abs+0xd8>)
 8013990:	681a      	ldr	r2, [r3, #0]
 8013992:	693b      	ldr	r3, [r7, #16]
 8013994:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8013996:	4a18      	ldr	r2, [pc, #96]	@ (80139f8 <sys_timeout_abs+0xd8>)
 8013998:	693b      	ldr	r3, [r7, #16]
 801399a:	6013      	str	r3, [r2, #0]
 801399c:	e023      	b.n	80139e6 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801399e:	4b16      	ldr	r3, [pc, #88]	@ (80139f8 <sys_timeout_abs+0xd8>)
 80139a0:	681b      	ldr	r3, [r3, #0]
 80139a2:	617b      	str	r3, [r7, #20]
 80139a4:	e01a      	b.n	80139dc <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80139a6:	697b      	ldr	r3, [r7, #20]
 80139a8:	681b      	ldr	r3, [r3, #0]
 80139aa:	2b00      	cmp	r3, #0
 80139ac:	d00b      	beq.n	80139c6 <sys_timeout_abs+0xa6>
 80139ae:	693b      	ldr	r3, [r7, #16]
 80139b0:	685a      	ldr	r2, [r3, #4]
 80139b2:	697b      	ldr	r3, [r7, #20]
 80139b4:	681b      	ldr	r3, [r3, #0]
 80139b6:	685b      	ldr	r3, [r3, #4]
 80139b8:	1ad3      	subs	r3, r2, r3
 80139ba:	0fdb      	lsrs	r3, r3, #31
 80139bc:	f003 0301 	and.w	r3, r3, #1
 80139c0:	b2db      	uxtb	r3, r3
 80139c2:	2b00      	cmp	r3, #0
 80139c4:	d007      	beq.n	80139d6 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80139c6:	697b      	ldr	r3, [r7, #20]
 80139c8:	681a      	ldr	r2, [r3, #0]
 80139ca:	693b      	ldr	r3, [r7, #16]
 80139cc:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80139ce:	697b      	ldr	r3, [r7, #20]
 80139d0:	693a      	ldr	r2, [r7, #16]
 80139d2:	601a      	str	r2, [r3, #0]
        break;
 80139d4:	e007      	b.n	80139e6 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80139d6:	697b      	ldr	r3, [r7, #20]
 80139d8:	681b      	ldr	r3, [r3, #0]
 80139da:	617b      	str	r3, [r7, #20]
 80139dc:	697b      	ldr	r3, [r7, #20]
 80139de:	2b00      	cmp	r3, #0
 80139e0:	d1e1      	bne.n	80139a6 <sys_timeout_abs+0x86>
 80139e2:	e000      	b.n	80139e6 <sys_timeout_abs+0xc6>
    return;
 80139e4:	bf00      	nop
      }
    }
  }
}
 80139e6:	3718      	adds	r7, #24
 80139e8:	46bd      	mov	sp, r7
 80139ea:	bd80      	pop	{r7, pc}
 80139ec:	0801a748 	.word	0x0801a748
 80139f0:	0801a77c 	.word	0x0801a77c
 80139f4:	0801a7bc 	.word	0x0801a7bc
 80139f8:	2000c6d8 	.word	0x2000c6d8

080139fc <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80139fc:	b580      	push	{r7, lr}
 80139fe:	b086      	sub	sp, #24
 8013a00:	af00      	add	r7, sp, #0
 8013a02:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8013a08:	697b      	ldr	r3, [r7, #20]
 8013a0a:	685b      	ldr	r3, [r3, #4]
 8013a0c:	4798      	blx	r3

  now = sys_now();
 8013a0e:	f7f3 fdf7 	bl	8007600 <sys_now>
 8013a12:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8013a14:	697b      	ldr	r3, [r7, #20]
 8013a16:	681a      	ldr	r2, [r3, #0]
 8013a18:	4b0f      	ldr	r3, [pc, #60]	@ (8013a58 <lwip_cyclic_timer+0x5c>)
 8013a1a:	681b      	ldr	r3, [r3, #0]
 8013a1c:	4413      	add	r3, r2
 8013a1e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8013a20:	68fa      	ldr	r2, [r7, #12]
 8013a22:	693b      	ldr	r3, [r7, #16]
 8013a24:	1ad3      	subs	r3, r2, r3
 8013a26:	0fdb      	lsrs	r3, r3, #31
 8013a28:	f003 0301 	and.w	r3, r3, #1
 8013a2c:	b2db      	uxtb	r3, r3
 8013a2e:	2b00      	cmp	r3, #0
 8013a30:	d009      	beq.n	8013a46 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8013a32:	697b      	ldr	r3, [r7, #20]
 8013a34:	681a      	ldr	r2, [r3, #0]
 8013a36:	693b      	ldr	r3, [r7, #16]
 8013a38:	4413      	add	r3, r2
 8013a3a:	687a      	ldr	r2, [r7, #4]
 8013a3c:	4907      	ldr	r1, [pc, #28]	@ (8013a5c <lwip_cyclic_timer+0x60>)
 8013a3e:	4618      	mov	r0, r3
 8013a40:	f7ff ff6e 	bl	8013920 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8013a44:	e004      	b.n	8013a50 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8013a46:	687a      	ldr	r2, [r7, #4]
 8013a48:	4904      	ldr	r1, [pc, #16]	@ (8013a5c <lwip_cyclic_timer+0x60>)
 8013a4a:	68f8      	ldr	r0, [r7, #12]
 8013a4c:	f7ff ff68 	bl	8013920 <sys_timeout_abs>
}
 8013a50:	bf00      	nop
 8013a52:	3718      	adds	r7, #24
 8013a54:	46bd      	mov	sp, r7
 8013a56:	bd80      	pop	{r7, pc}
 8013a58:	2000c6dc 	.word	0x2000c6dc
 8013a5c:	080139fd 	.word	0x080139fd

08013a60 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8013a60:	b580      	push	{r7, lr}
 8013a62:	b082      	sub	sp, #8
 8013a64:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013a66:	2301      	movs	r3, #1
 8013a68:	607b      	str	r3, [r7, #4]
 8013a6a:	e00e      	b.n	8013a8a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8013a6c:	4a0b      	ldr	r2, [pc, #44]	@ (8013a9c <sys_timeouts_init+0x3c>)
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	00db      	lsls	r3, r3, #3
 8013a78:	4a08      	ldr	r2, [pc, #32]	@ (8013a9c <sys_timeouts_init+0x3c>)
 8013a7a:	4413      	add	r3, r2
 8013a7c:	461a      	mov	r2, r3
 8013a7e:	4908      	ldr	r1, [pc, #32]	@ (8013aa0 <sys_timeouts_init+0x40>)
 8013a80:	f000 f810 	bl	8013aa4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	3301      	adds	r3, #1
 8013a88:	607b      	str	r3, [r7, #4]
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	2b02      	cmp	r3, #2
 8013a8e:	d9ed      	bls.n	8013a6c <sys_timeouts_init+0xc>
  }
}
 8013a90:	bf00      	nop
 8013a92:	bf00      	nop
 8013a94:	3708      	adds	r7, #8
 8013a96:	46bd      	mov	sp, r7
 8013a98:	bd80      	pop	{r7, pc}
 8013a9a:	bf00      	nop
 8013a9c:	0801b3bc 	.word	0x0801b3bc
 8013aa0:	080139fd 	.word	0x080139fd

08013aa4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8013aa4:	b580      	push	{r7, lr}
 8013aa6:	b086      	sub	sp, #24
 8013aa8:	af00      	add	r7, sp, #0
 8013aaa:	60f8      	str	r0, [r7, #12]
 8013aac:	60b9      	str	r1, [r7, #8]
 8013aae:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8013ab0:	68fb      	ldr	r3, [r7, #12]
 8013ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013ab6:	d306      	bcc.n	8013ac6 <sys_timeout+0x22>
 8013ab8:	4b0a      	ldr	r3, [pc, #40]	@ (8013ae4 <sys_timeout+0x40>)
 8013aba:	f240 1229 	movw	r2, #297	@ 0x129
 8013abe:	490a      	ldr	r1, [pc, #40]	@ (8013ae8 <sys_timeout+0x44>)
 8013ac0:	480a      	ldr	r0, [pc, #40]	@ (8013aec <sys_timeout+0x48>)
 8013ac2:	f003 fc07 	bl	80172d4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8013ac6:	f7f3 fd9b 	bl	8007600 <sys_now>
 8013aca:	4602      	mov	r2, r0
 8013acc:	68fb      	ldr	r3, [r7, #12]
 8013ace:	4413      	add	r3, r2
 8013ad0:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8013ad2:	687a      	ldr	r2, [r7, #4]
 8013ad4:	68b9      	ldr	r1, [r7, #8]
 8013ad6:	6978      	ldr	r0, [r7, #20]
 8013ad8:	f7ff ff22 	bl	8013920 <sys_timeout_abs>
#endif
}
 8013adc:	bf00      	nop
 8013ade:	3718      	adds	r7, #24
 8013ae0:	46bd      	mov	sp, r7
 8013ae2:	bd80      	pop	{r7, pc}
 8013ae4:	0801a748 	.word	0x0801a748
 8013ae8:	0801a7e4 	.word	0x0801a7e4
 8013aec:	0801a7bc 	.word	0x0801a7bc

08013af0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8013af0:	b580      	push	{r7, lr}
 8013af2:	b084      	sub	sp, #16
 8013af4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8013af6:	f7f3 fd83 	bl	8007600 <sys_now>
 8013afa:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8013afc:	4b17      	ldr	r3, [pc, #92]	@ (8013b5c <sys_check_timeouts+0x6c>)
 8013afe:	681b      	ldr	r3, [r3, #0]
 8013b00:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8013b02:	68bb      	ldr	r3, [r7, #8]
 8013b04:	2b00      	cmp	r3, #0
 8013b06:	d022      	beq.n	8013b4e <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8013b08:	68bb      	ldr	r3, [r7, #8]
 8013b0a:	685b      	ldr	r3, [r3, #4]
 8013b0c:	68fa      	ldr	r2, [r7, #12]
 8013b0e:	1ad3      	subs	r3, r2, r3
 8013b10:	0fdb      	lsrs	r3, r3, #31
 8013b12:	f003 0301 	and.w	r3, r3, #1
 8013b16:	b2db      	uxtb	r3, r3
 8013b18:	2b00      	cmp	r3, #0
 8013b1a:	d11a      	bne.n	8013b52 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8013b1c:	68bb      	ldr	r3, [r7, #8]
 8013b1e:	681b      	ldr	r3, [r3, #0]
 8013b20:	4a0e      	ldr	r2, [pc, #56]	@ (8013b5c <sys_check_timeouts+0x6c>)
 8013b22:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8013b24:	68bb      	ldr	r3, [r7, #8]
 8013b26:	689b      	ldr	r3, [r3, #8]
 8013b28:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8013b2a:	68bb      	ldr	r3, [r7, #8]
 8013b2c:	68db      	ldr	r3, [r3, #12]
 8013b2e:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8013b30:	68bb      	ldr	r3, [r7, #8]
 8013b32:	685b      	ldr	r3, [r3, #4]
 8013b34:	4a0a      	ldr	r2, [pc, #40]	@ (8013b60 <sys_check_timeouts+0x70>)
 8013b36:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8013b38:	68b9      	ldr	r1, [r7, #8]
 8013b3a:	200a      	movs	r0, #10
 8013b3c:	f7f9 fc6c 	bl	800d418 <memp_free>
    if (handler != NULL) {
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	2b00      	cmp	r3, #0
 8013b44:	d0da      	beq.n	8013afc <sys_check_timeouts+0xc>
      handler(arg);
 8013b46:	687b      	ldr	r3, [r7, #4]
 8013b48:	6838      	ldr	r0, [r7, #0]
 8013b4a:	4798      	blx	r3
  do {
 8013b4c:	e7d6      	b.n	8013afc <sys_check_timeouts+0xc>
      return;
 8013b4e:	bf00      	nop
 8013b50:	e000      	b.n	8013b54 <sys_check_timeouts+0x64>
      return;
 8013b52:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8013b54:	3710      	adds	r7, #16
 8013b56:	46bd      	mov	sp, r7
 8013b58:	bd80      	pop	{r7, pc}
 8013b5a:	bf00      	nop
 8013b5c:	2000c6d8 	.word	0x2000c6d8
 8013b60:	2000c6dc 	.word	0x2000c6dc

08013b64 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8013b64:	b580      	push	{r7, lr}
 8013b66:	b082      	sub	sp, #8
 8013b68:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8013b6a:	4b16      	ldr	r3, [pc, #88]	@ (8013bc4 <sys_timeouts_sleeptime+0x60>)
 8013b6c:	681b      	ldr	r3, [r3, #0]
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	d102      	bne.n	8013b78 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8013b72:	f04f 33ff 	mov.w	r3, #4294967295
 8013b76:	e020      	b.n	8013bba <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8013b78:	f7f3 fd42 	bl	8007600 <sys_now>
 8013b7c:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8013b7e:	4b11      	ldr	r3, [pc, #68]	@ (8013bc4 <sys_timeouts_sleeptime+0x60>)
 8013b80:	681b      	ldr	r3, [r3, #0]
 8013b82:	685a      	ldr	r2, [r3, #4]
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	1ad3      	subs	r3, r2, r3
 8013b88:	0fdb      	lsrs	r3, r3, #31
 8013b8a:	f003 0301 	and.w	r3, r3, #1
 8013b8e:	b2db      	uxtb	r3, r3
 8013b90:	2b00      	cmp	r3, #0
 8013b92:	d001      	beq.n	8013b98 <sys_timeouts_sleeptime+0x34>
    return 0;
 8013b94:	2300      	movs	r3, #0
 8013b96:	e010      	b.n	8013bba <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8013b98:	4b0a      	ldr	r3, [pc, #40]	@ (8013bc4 <sys_timeouts_sleeptime+0x60>)
 8013b9a:	681b      	ldr	r3, [r3, #0]
 8013b9c:	685a      	ldr	r2, [r3, #4]
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	1ad3      	subs	r3, r2, r3
 8013ba2:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8013ba4:	683b      	ldr	r3, [r7, #0]
 8013ba6:	2b00      	cmp	r3, #0
 8013ba8:	da06      	bge.n	8013bb8 <sys_timeouts_sleeptime+0x54>
 8013baa:	4b07      	ldr	r3, [pc, #28]	@ (8013bc8 <sys_timeouts_sleeptime+0x64>)
 8013bac:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8013bb0:	4906      	ldr	r1, [pc, #24]	@ (8013bcc <sys_timeouts_sleeptime+0x68>)
 8013bb2:	4807      	ldr	r0, [pc, #28]	@ (8013bd0 <sys_timeouts_sleeptime+0x6c>)
 8013bb4:	f003 fb8e 	bl	80172d4 <iprintf>
    return ret;
 8013bb8:	683b      	ldr	r3, [r7, #0]
  }
}
 8013bba:	4618      	mov	r0, r3
 8013bbc:	3708      	adds	r7, #8
 8013bbe:	46bd      	mov	sp, r7
 8013bc0:	bd80      	pop	{r7, pc}
 8013bc2:	bf00      	nop
 8013bc4:	2000c6d8 	.word	0x2000c6d8
 8013bc8:	0801a748 	.word	0x0801a748
 8013bcc:	0801a81c 	.word	0x0801a81c
 8013bd0:	0801a7bc 	.word	0x0801a7bc

08013bd4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8013bd4:	b580      	push	{r7, lr}
 8013bd6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8013bd8:	f003 fa7c 	bl	80170d4 <rand>
 8013bdc:	4603      	mov	r3, r0
 8013bde:	b29b      	uxth	r3, r3
 8013be0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8013be4:	b29b      	uxth	r3, r3
 8013be6:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8013bea:	b29a      	uxth	r2, r3
 8013bec:	4b01      	ldr	r3, [pc, #4]	@ (8013bf4 <udp_init+0x20>)
 8013bee:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8013bf0:	bf00      	nop
 8013bf2:	bd80      	pop	{r7, pc}
 8013bf4:	200000a4 	.word	0x200000a4

08013bf8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8013bf8:	b580      	push	{r7, lr}
 8013bfa:	b084      	sub	sp, #16
 8013bfc:	af00      	add	r7, sp, #0
 8013bfe:	60f8      	str	r0, [r7, #12]
 8013c00:	60b9      	str	r1, [r7, #8]
 8013c02:	4613      	mov	r3, r2
 8013c04:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8013c06:	68fb      	ldr	r3, [r7, #12]
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	d105      	bne.n	8013c18 <udp_input_local_match+0x20>
 8013c0c:	4b27      	ldr	r3, [pc, #156]	@ (8013cac <udp_input_local_match+0xb4>)
 8013c0e:	2287      	movs	r2, #135	@ 0x87
 8013c10:	4927      	ldr	r1, [pc, #156]	@ (8013cb0 <udp_input_local_match+0xb8>)
 8013c12:	4828      	ldr	r0, [pc, #160]	@ (8013cb4 <udp_input_local_match+0xbc>)
 8013c14:	f003 fb5e 	bl	80172d4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8013c18:	68bb      	ldr	r3, [r7, #8]
 8013c1a:	2b00      	cmp	r3, #0
 8013c1c:	d105      	bne.n	8013c2a <udp_input_local_match+0x32>
 8013c1e:	4b23      	ldr	r3, [pc, #140]	@ (8013cac <udp_input_local_match+0xb4>)
 8013c20:	2288      	movs	r2, #136	@ 0x88
 8013c22:	4925      	ldr	r1, [pc, #148]	@ (8013cb8 <udp_input_local_match+0xc0>)
 8013c24:	4823      	ldr	r0, [pc, #140]	@ (8013cb4 <udp_input_local_match+0xbc>)
 8013c26:	f003 fb55 	bl	80172d4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013c2a:	68fb      	ldr	r3, [r7, #12]
 8013c2c:	7a1b      	ldrb	r3, [r3, #8]
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	d00b      	beq.n	8013c4a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013c32:	68fb      	ldr	r3, [r7, #12]
 8013c34:	7a1a      	ldrb	r2, [r3, #8]
 8013c36:	4b21      	ldr	r3, [pc, #132]	@ (8013cbc <udp_input_local_match+0xc4>)
 8013c38:	685b      	ldr	r3, [r3, #4]
 8013c3a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013c3e:	3301      	adds	r3, #1
 8013c40:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013c42:	429a      	cmp	r2, r3
 8013c44:	d001      	beq.n	8013c4a <udp_input_local_match+0x52>
    return 0;
 8013c46:	2300      	movs	r3, #0
 8013c48:	e02b      	b.n	8013ca2 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8013c4a:	79fb      	ldrb	r3, [r7, #7]
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d018      	beq.n	8013c82 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013c50:	68fb      	ldr	r3, [r7, #12]
 8013c52:	2b00      	cmp	r3, #0
 8013c54:	d013      	beq.n	8013c7e <udp_input_local_match+0x86>
 8013c56:	68fb      	ldr	r3, [r7, #12]
 8013c58:	681b      	ldr	r3, [r3, #0]
 8013c5a:	2b00      	cmp	r3, #0
 8013c5c:	d00f      	beq.n	8013c7e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013c5e:	4b17      	ldr	r3, [pc, #92]	@ (8013cbc <udp_input_local_match+0xc4>)
 8013c60:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c66:	d00a      	beq.n	8013c7e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8013c68:	68fb      	ldr	r3, [r7, #12]
 8013c6a:	681a      	ldr	r2, [r3, #0]
 8013c6c:	4b13      	ldr	r3, [pc, #76]	@ (8013cbc <udp_input_local_match+0xc4>)
 8013c6e:	695b      	ldr	r3, [r3, #20]
 8013c70:	405a      	eors	r2, r3
 8013c72:	68bb      	ldr	r3, [r7, #8]
 8013c74:	3308      	adds	r3, #8
 8013c76:	681b      	ldr	r3, [r3, #0]
 8013c78:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013c7a:	2b00      	cmp	r3, #0
 8013c7c:	d110      	bne.n	8013ca0 <udp_input_local_match+0xa8>
          return 1;
 8013c7e:	2301      	movs	r3, #1
 8013c80:	e00f      	b.n	8013ca2 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013c82:	68fb      	ldr	r3, [r7, #12]
 8013c84:	2b00      	cmp	r3, #0
 8013c86:	d009      	beq.n	8013c9c <udp_input_local_match+0xa4>
 8013c88:	68fb      	ldr	r3, [r7, #12]
 8013c8a:	681b      	ldr	r3, [r3, #0]
 8013c8c:	2b00      	cmp	r3, #0
 8013c8e:	d005      	beq.n	8013c9c <udp_input_local_match+0xa4>
 8013c90:	68fb      	ldr	r3, [r7, #12]
 8013c92:	681a      	ldr	r2, [r3, #0]
 8013c94:	4b09      	ldr	r3, [pc, #36]	@ (8013cbc <udp_input_local_match+0xc4>)
 8013c96:	695b      	ldr	r3, [r3, #20]
 8013c98:	429a      	cmp	r2, r3
 8013c9a:	d101      	bne.n	8013ca0 <udp_input_local_match+0xa8>
        return 1;
 8013c9c:	2301      	movs	r3, #1
 8013c9e:	e000      	b.n	8013ca2 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8013ca0:	2300      	movs	r3, #0
}
 8013ca2:	4618      	mov	r0, r3
 8013ca4:	3710      	adds	r7, #16
 8013ca6:	46bd      	mov	sp, r7
 8013ca8:	bd80      	pop	{r7, pc}
 8013caa:	bf00      	nop
 8013cac:	0801a830 	.word	0x0801a830
 8013cb0:	0801a860 	.word	0x0801a860
 8013cb4:	0801a884 	.word	0x0801a884
 8013cb8:	0801a8ac 	.word	0x0801a8ac
 8013cbc:	20008f34 	.word	0x20008f34

08013cc0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8013cc0:	b590      	push	{r4, r7, lr}
 8013cc2:	b08d      	sub	sp, #52	@ 0x34
 8013cc4:	af02      	add	r7, sp, #8
 8013cc6:	6078      	str	r0, [r7, #4]
 8013cc8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8013cca:	2300      	movs	r3, #0
 8013ccc:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	2b00      	cmp	r3, #0
 8013cd2:	d105      	bne.n	8013ce0 <udp_input+0x20>
 8013cd4:	4b7c      	ldr	r3, [pc, #496]	@ (8013ec8 <udp_input+0x208>)
 8013cd6:	22cf      	movs	r2, #207	@ 0xcf
 8013cd8:	497c      	ldr	r1, [pc, #496]	@ (8013ecc <udp_input+0x20c>)
 8013cda:	487d      	ldr	r0, [pc, #500]	@ (8013ed0 <udp_input+0x210>)
 8013cdc:	f003 fafa 	bl	80172d4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8013ce0:	683b      	ldr	r3, [r7, #0]
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	d105      	bne.n	8013cf2 <udp_input+0x32>
 8013ce6:	4b78      	ldr	r3, [pc, #480]	@ (8013ec8 <udp_input+0x208>)
 8013ce8:	22d0      	movs	r2, #208	@ 0xd0
 8013cea:	497a      	ldr	r1, [pc, #488]	@ (8013ed4 <udp_input+0x214>)
 8013cec:	4878      	ldr	r0, [pc, #480]	@ (8013ed0 <udp_input+0x210>)
 8013cee:	f003 faf1 	bl	80172d4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	895b      	ldrh	r3, [r3, #10]
 8013cf6:	2b07      	cmp	r3, #7
 8013cf8:	d803      	bhi.n	8013d02 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8013cfa:	6878      	ldr	r0, [r7, #4]
 8013cfc:	f7fa f9fe 	bl	800e0fc <pbuf_free>
    goto end;
 8013d00:	e0de      	b.n	8013ec0 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	685b      	ldr	r3, [r3, #4]
 8013d06:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8013d08:	4b73      	ldr	r3, [pc, #460]	@ (8013ed8 <udp_input+0x218>)
 8013d0a:	695b      	ldr	r3, [r3, #20]
 8013d0c:	4a72      	ldr	r2, [pc, #456]	@ (8013ed8 <udp_input+0x218>)
 8013d0e:	6812      	ldr	r2, [r2, #0]
 8013d10:	4611      	mov	r1, r2
 8013d12:	4618      	mov	r0, r3
 8013d14:	f001 fc58 	bl	80155c8 <ip4_addr_isbroadcast_u32>
 8013d18:	4603      	mov	r3, r0
 8013d1a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8013d1c:	697b      	ldr	r3, [r7, #20]
 8013d1e:	881b      	ldrh	r3, [r3, #0]
 8013d20:	b29b      	uxth	r3, r3
 8013d22:	4618      	mov	r0, r3
 8013d24:	f7f8 fe2a 	bl	800c97c <lwip_htons>
 8013d28:	4603      	mov	r3, r0
 8013d2a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8013d2c:	697b      	ldr	r3, [r7, #20]
 8013d2e:	885b      	ldrh	r3, [r3, #2]
 8013d30:	b29b      	uxth	r3, r3
 8013d32:	4618      	mov	r0, r3
 8013d34:	f7f8 fe22 	bl	800c97c <lwip_htons>
 8013d38:	4603      	mov	r3, r0
 8013d3a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8013d3c:	2300      	movs	r3, #0
 8013d3e:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8013d40:	2300      	movs	r3, #0
 8013d42:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8013d44:	2300      	movs	r3, #0
 8013d46:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013d48:	4b64      	ldr	r3, [pc, #400]	@ (8013edc <udp_input+0x21c>)
 8013d4a:	681b      	ldr	r3, [r3, #0]
 8013d4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8013d4e:	e054      	b.n	8013dfa <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8013d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d52:	8a5b      	ldrh	r3, [r3, #18]
 8013d54:	89fa      	ldrh	r2, [r7, #14]
 8013d56:	429a      	cmp	r2, r3
 8013d58:	d14a      	bne.n	8013df0 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8013d5a:	7cfb      	ldrb	r3, [r7, #19]
 8013d5c:	461a      	mov	r2, r3
 8013d5e:	6839      	ldr	r1, [r7, #0]
 8013d60:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013d62:	f7ff ff49 	bl	8013bf8 <udp_input_local_match>
 8013d66:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8013d68:	2b00      	cmp	r3, #0
 8013d6a:	d041      	beq.n	8013df0 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8013d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d6e:	7c1b      	ldrb	r3, [r3, #16]
 8013d70:	f003 0304 	and.w	r3, r3, #4
 8013d74:	2b00      	cmp	r3, #0
 8013d76:	d11d      	bne.n	8013db4 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8013d78:	69fb      	ldr	r3, [r7, #28]
 8013d7a:	2b00      	cmp	r3, #0
 8013d7c:	d102      	bne.n	8013d84 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8013d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d80:	61fb      	str	r3, [r7, #28]
 8013d82:	e017      	b.n	8013db4 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8013d84:	7cfb      	ldrb	r3, [r7, #19]
 8013d86:	2b00      	cmp	r3, #0
 8013d88:	d014      	beq.n	8013db4 <udp_input+0xf4>
 8013d8a:	4b53      	ldr	r3, [pc, #332]	@ (8013ed8 <udp_input+0x218>)
 8013d8c:	695b      	ldr	r3, [r3, #20]
 8013d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d92:	d10f      	bne.n	8013db4 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8013d94:	69fb      	ldr	r3, [r7, #28]
 8013d96:	681a      	ldr	r2, [r3, #0]
 8013d98:	683b      	ldr	r3, [r7, #0]
 8013d9a:	3304      	adds	r3, #4
 8013d9c:	681b      	ldr	r3, [r3, #0]
 8013d9e:	429a      	cmp	r2, r3
 8013da0:	d008      	beq.n	8013db4 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8013da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013da4:	681a      	ldr	r2, [r3, #0]
 8013da6:	683b      	ldr	r3, [r7, #0]
 8013da8:	3304      	adds	r3, #4
 8013daa:	681b      	ldr	r3, [r3, #0]
 8013dac:	429a      	cmp	r2, r3
 8013dae:	d101      	bne.n	8013db4 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8013db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013db2:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8013db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013db6:	8a9b      	ldrh	r3, [r3, #20]
 8013db8:	8a3a      	ldrh	r2, [r7, #16]
 8013dba:	429a      	cmp	r2, r3
 8013dbc:	d118      	bne.n	8013df0 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013dc0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8013dc2:	2b00      	cmp	r3, #0
 8013dc4:	d005      	beq.n	8013dd2 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8013dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013dc8:	685a      	ldr	r2, [r3, #4]
 8013dca:	4b43      	ldr	r3, [pc, #268]	@ (8013ed8 <udp_input+0x218>)
 8013dcc:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013dce:	429a      	cmp	r2, r3
 8013dd0:	d10e      	bne.n	8013df0 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8013dd2:	6a3b      	ldr	r3, [r7, #32]
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	d014      	beq.n	8013e02 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8013dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013dda:	68da      	ldr	r2, [r3, #12]
 8013ddc:	6a3b      	ldr	r3, [r7, #32]
 8013dde:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8013de0:	4b3e      	ldr	r3, [pc, #248]	@ (8013edc <udp_input+0x21c>)
 8013de2:	681a      	ldr	r2, [r3, #0]
 8013de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013de6:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8013de8:	4a3c      	ldr	r2, [pc, #240]	@ (8013edc <udp_input+0x21c>)
 8013dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013dec:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8013dee:	e008      	b.n	8013e02 <udp_input+0x142>
      }
    }

    prev = pcb;
 8013df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013df2:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013df6:	68db      	ldr	r3, [r3, #12]
 8013df8:	627b      	str	r3, [r7, #36]	@ 0x24
 8013dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013dfc:	2b00      	cmp	r3, #0
 8013dfe:	d1a7      	bne.n	8013d50 <udp_input+0x90>
 8013e00:	e000      	b.n	8013e04 <udp_input+0x144>
        break;
 8013e02:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8013e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	d101      	bne.n	8013e0e <udp_input+0x14e>
    pcb = uncon_pcb;
 8013e0a:	69fb      	ldr	r3, [r7, #28]
 8013e0c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8013e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e10:	2b00      	cmp	r3, #0
 8013e12:	d002      	beq.n	8013e1a <udp_input+0x15a>
    for_us = 1;
 8013e14:	2301      	movs	r3, #1
 8013e16:	76fb      	strb	r3, [r7, #27]
 8013e18:	e00a      	b.n	8013e30 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8013e1a:	683b      	ldr	r3, [r7, #0]
 8013e1c:	3304      	adds	r3, #4
 8013e1e:	681a      	ldr	r2, [r3, #0]
 8013e20:	4b2d      	ldr	r3, [pc, #180]	@ (8013ed8 <udp_input+0x218>)
 8013e22:	695b      	ldr	r3, [r3, #20]
 8013e24:	429a      	cmp	r2, r3
 8013e26:	bf0c      	ite	eq
 8013e28:	2301      	moveq	r3, #1
 8013e2a:	2300      	movne	r3, #0
 8013e2c:	b2db      	uxtb	r3, r3
 8013e2e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8013e30:	7efb      	ldrb	r3, [r7, #27]
 8013e32:	2b00      	cmp	r3, #0
 8013e34:	d041      	beq.n	8013eba <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8013e36:	2108      	movs	r1, #8
 8013e38:	6878      	ldr	r0, [r7, #4]
 8013e3a:	f7fa f8d9 	bl	800dff0 <pbuf_remove_header>
 8013e3e:	4603      	mov	r3, r0
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	d00a      	beq.n	8013e5a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8013e44:	4b20      	ldr	r3, [pc, #128]	@ (8013ec8 <udp_input+0x208>)
 8013e46:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8013e4a:	4925      	ldr	r1, [pc, #148]	@ (8013ee0 <udp_input+0x220>)
 8013e4c:	4820      	ldr	r0, [pc, #128]	@ (8013ed0 <udp_input+0x210>)
 8013e4e:	f003 fa41 	bl	80172d4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8013e52:	6878      	ldr	r0, [r7, #4]
 8013e54:	f7fa f952 	bl	800e0fc <pbuf_free>
      goto end;
 8013e58:	e032      	b.n	8013ec0 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8013e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e5c:	2b00      	cmp	r3, #0
 8013e5e:	d012      	beq.n	8013e86 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8013e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e62:	699b      	ldr	r3, [r3, #24]
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	d00a      	beq.n	8013e7e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8013e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e6a:	699c      	ldr	r4, [r3, #24]
 8013e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e6e:	69d8      	ldr	r0, [r3, #28]
 8013e70:	8a3b      	ldrh	r3, [r7, #16]
 8013e72:	9300      	str	r3, [sp, #0]
 8013e74:	4b1b      	ldr	r3, [pc, #108]	@ (8013ee4 <udp_input+0x224>)
 8013e76:	687a      	ldr	r2, [r7, #4]
 8013e78:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013e7a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8013e7c:	e021      	b.n	8013ec2 <udp_input+0x202>
        pbuf_free(p);
 8013e7e:	6878      	ldr	r0, [r7, #4]
 8013e80:	f7fa f93c 	bl	800e0fc <pbuf_free>
        goto end;
 8013e84:	e01c      	b.n	8013ec0 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8013e86:	7cfb      	ldrb	r3, [r7, #19]
 8013e88:	2b00      	cmp	r3, #0
 8013e8a:	d112      	bne.n	8013eb2 <udp_input+0x1f2>
 8013e8c:	4b12      	ldr	r3, [pc, #72]	@ (8013ed8 <udp_input+0x218>)
 8013e8e:	695b      	ldr	r3, [r3, #20]
 8013e90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8013e94:	2be0      	cmp	r3, #224	@ 0xe0
 8013e96:	d00c      	beq.n	8013eb2 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8013e98:	4b0f      	ldr	r3, [pc, #60]	@ (8013ed8 <udp_input+0x218>)
 8013e9a:	899b      	ldrh	r3, [r3, #12]
 8013e9c:	3308      	adds	r3, #8
 8013e9e:	b29b      	uxth	r3, r3
 8013ea0:	b21b      	sxth	r3, r3
 8013ea2:	4619      	mov	r1, r3
 8013ea4:	6878      	ldr	r0, [r7, #4]
 8013ea6:	f7fa f916 	bl	800e0d6 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8013eaa:	2103      	movs	r1, #3
 8013eac:	6878      	ldr	r0, [r7, #4]
 8013eae:	f001 f86b 	bl	8014f88 <icmp_dest_unreach>
      pbuf_free(p);
 8013eb2:	6878      	ldr	r0, [r7, #4]
 8013eb4:	f7fa f922 	bl	800e0fc <pbuf_free>
  return;
 8013eb8:	e003      	b.n	8013ec2 <udp_input+0x202>
    pbuf_free(p);
 8013eba:	6878      	ldr	r0, [r7, #4]
 8013ebc:	f7fa f91e 	bl	800e0fc <pbuf_free>
  return;
 8013ec0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8013ec2:	372c      	adds	r7, #44	@ 0x2c
 8013ec4:	46bd      	mov	sp, r7
 8013ec6:	bd90      	pop	{r4, r7, pc}
 8013ec8:	0801a830 	.word	0x0801a830
 8013ecc:	0801a8d4 	.word	0x0801a8d4
 8013ed0:	0801a884 	.word	0x0801a884
 8013ed4:	0801a8ec 	.word	0x0801a8ec
 8013ed8:	20008f34 	.word	0x20008f34
 8013edc:	2000c6e4 	.word	0x2000c6e4
 8013ee0:	0801a908 	.word	0x0801a908
 8013ee4:	20008f44 	.word	0x20008f44

08013ee8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013ee8:	b480      	push	{r7}
 8013eea:	b085      	sub	sp, #20
 8013eec:	af00      	add	r7, sp, #0
 8013eee:	6078      	str	r0, [r7, #4]
 8013ef0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	2b00      	cmp	r3, #0
 8013ef6:	d01e      	beq.n	8013f36 <udp_netif_ip_addr_changed+0x4e>
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	681b      	ldr	r3, [r3, #0]
 8013efc:	2b00      	cmp	r3, #0
 8013efe:	d01a      	beq.n	8013f36 <udp_netif_ip_addr_changed+0x4e>
 8013f00:	683b      	ldr	r3, [r7, #0]
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	d017      	beq.n	8013f36 <udp_netif_ip_addr_changed+0x4e>
 8013f06:	683b      	ldr	r3, [r7, #0]
 8013f08:	681b      	ldr	r3, [r3, #0]
 8013f0a:	2b00      	cmp	r3, #0
 8013f0c:	d013      	beq.n	8013f36 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013f0e:	4b0d      	ldr	r3, [pc, #52]	@ (8013f44 <udp_netif_ip_addr_changed+0x5c>)
 8013f10:	681b      	ldr	r3, [r3, #0]
 8013f12:	60fb      	str	r3, [r7, #12]
 8013f14:	e00c      	b.n	8013f30 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8013f16:	68fb      	ldr	r3, [r7, #12]
 8013f18:	681a      	ldr	r2, [r3, #0]
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	681b      	ldr	r3, [r3, #0]
 8013f1e:	429a      	cmp	r2, r3
 8013f20:	d103      	bne.n	8013f2a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8013f22:	683b      	ldr	r3, [r7, #0]
 8013f24:	681a      	ldr	r2, [r3, #0]
 8013f26:	68fb      	ldr	r3, [r7, #12]
 8013f28:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013f2a:	68fb      	ldr	r3, [r7, #12]
 8013f2c:	68db      	ldr	r3, [r3, #12]
 8013f2e:	60fb      	str	r3, [r7, #12]
 8013f30:	68fb      	ldr	r3, [r7, #12]
 8013f32:	2b00      	cmp	r3, #0
 8013f34:	d1ef      	bne.n	8013f16 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8013f36:	bf00      	nop
 8013f38:	3714      	adds	r7, #20
 8013f3a:	46bd      	mov	sp, r7
 8013f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f40:	4770      	bx	lr
 8013f42:	bf00      	nop
 8013f44:	2000c6e4 	.word	0x2000c6e4

08013f48 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8013f48:	b580      	push	{r7, lr}
 8013f4a:	b082      	sub	sp, #8
 8013f4c:	af00      	add	r7, sp, #0
 8013f4e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8013f50:	4915      	ldr	r1, [pc, #84]	@ (8013fa8 <etharp_free_entry+0x60>)
 8013f52:	687a      	ldr	r2, [r7, #4]
 8013f54:	4613      	mov	r3, r2
 8013f56:	005b      	lsls	r3, r3, #1
 8013f58:	4413      	add	r3, r2
 8013f5a:	00db      	lsls	r3, r3, #3
 8013f5c:	440b      	add	r3, r1
 8013f5e:	681b      	ldr	r3, [r3, #0]
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	d013      	beq.n	8013f8c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8013f64:	4910      	ldr	r1, [pc, #64]	@ (8013fa8 <etharp_free_entry+0x60>)
 8013f66:	687a      	ldr	r2, [r7, #4]
 8013f68:	4613      	mov	r3, r2
 8013f6a:	005b      	lsls	r3, r3, #1
 8013f6c:	4413      	add	r3, r2
 8013f6e:	00db      	lsls	r3, r3, #3
 8013f70:	440b      	add	r3, r1
 8013f72:	681b      	ldr	r3, [r3, #0]
 8013f74:	4618      	mov	r0, r3
 8013f76:	f7fa f8c1 	bl	800e0fc <pbuf_free>
    arp_table[i].q = NULL;
 8013f7a:	490b      	ldr	r1, [pc, #44]	@ (8013fa8 <etharp_free_entry+0x60>)
 8013f7c:	687a      	ldr	r2, [r7, #4]
 8013f7e:	4613      	mov	r3, r2
 8013f80:	005b      	lsls	r3, r3, #1
 8013f82:	4413      	add	r3, r2
 8013f84:	00db      	lsls	r3, r3, #3
 8013f86:	440b      	add	r3, r1
 8013f88:	2200      	movs	r2, #0
 8013f8a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8013f8c:	4906      	ldr	r1, [pc, #24]	@ (8013fa8 <etharp_free_entry+0x60>)
 8013f8e:	687a      	ldr	r2, [r7, #4]
 8013f90:	4613      	mov	r3, r2
 8013f92:	005b      	lsls	r3, r3, #1
 8013f94:	4413      	add	r3, r2
 8013f96:	00db      	lsls	r3, r3, #3
 8013f98:	440b      	add	r3, r1
 8013f9a:	3314      	adds	r3, #20
 8013f9c:	2200      	movs	r2, #0
 8013f9e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8013fa0:	bf00      	nop
 8013fa2:	3708      	adds	r7, #8
 8013fa4:	46bd      	mov	sp, r7
 8013fa6:	bd80      	pop	{r7, pc}
 8013fa8:	2000c6e8 	.word	0x2000c6e8

08013fac <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8013fac:	b580      	push	{r7, lr}
 8013fae:	b082      	sub	sp, #8
 8013fb0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013fb2:	2300      	movs	r3, #0
 8013fb4:	607b      	str	r3, [r7, #4]
 8013fb6:	e096      	b.n	80140e6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8013fb8:	494f      	ldr	r1, [pc, #316]	@ (80140f8 <etharp_tmr+0x14c>)
 8013fba:	687a      	ldr	r2, [r7, #4]
 8013fbc:	4613      	mov	r3, r2
 8013fbe:	005b      	lsls	r3, r3, #1
 8013fc0:	4413      	add	r3, r2
 8013fc2:	00db      	lsls	r3, r3, #3
 8013fc4:	440b      	add	r3, r1
 8013fc6:	3314      	adds	r3, #20
 8013fc8:	781b      	ldrb	r3, [r3, #0]
 8013fca:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8013fcc:	78fb      	ldrb	r3, [r7, #3]
 8013fce:	2b00      	cmp	r3, #0
 8013fd0:	f000 8086 	beq.w	80140e0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8013fd4:	4948      	ldr	r1, [pc, #288]	@ (80140f8 <etharp_tmr+0x14c>)
 8013fd6:	687a      	ldr	r2, [r7, #4]
 8013fd8:	4613      	mov	r3, r2
 8013fda:	005b      	lsls	r3, r3, #1
 8013fdc:	4413      	add	r3, r2
 8013fde:	00db      	lsls	r3, r3, #3
 8013fe0:	440b      	add	r3, r1
 8013fe2:	3312      	adds	r3, #18
 8013fe4:	881b      	ldrh	r3, [r3, #0]
 8013fe6:	3301      	adds	r3, #1
 8013fe8:	b298      	uxth	r0, r3
 8013fea:	4943      	ldr	r1, [pc, #268]	@ (80140f8 <etharp_tmr+0x14c>)
 8013fec:	687a      	ldr	r2, [r7, #4]
 8013fee:	4613      	mov	r3, r2
 8013ff0:	005b      	lsls	r3, r3, #1
 8013ff2:	4413      	add	r3, r2
 8013ff4:	00db      	lsls	r3, r3, #3
 8013ff6:	440b      	add	r3, r1
 8013ff8:	3312      	adds	r3, #18
 8013ffa:	4602      	mov	r2, r0
 8013ffc:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013ffe:	493e      	ldr	r1, [pc, #248]	@ (80140f8 <etharp_tmr+0x14c>)
 8014000:	687a      	ldr	r2, [r7, #4]
 8014002:	4613      	mov	r3, r2
 8014004:	005b      	lsls	r3, r3, #1
 8014006:	4413      	add	r3, r2
 8014008:	00db      	lsls	r3, r3, #3
 801400a:	440b      	add	r3, r1
 801400c:	3312      	adds	r3, #18
 801400e:	881b      	ldrh	r3, [r3, #0]
 8014010:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8014014:	d215      	bcs.n	8014042 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014016:	4938      	ldr	r1, [pc, #224]	@ (80140f8 <etharp_tmr+0x14c>)
 8014018:	687a      	ldr	r2, [r7, #4]
 801401a:	4613      	mov	r3, r2
 801401c:	005b      	lsls	r3, r3, #1
 801401e:	4413      	add	r3, r2
 8014020:	00db      	lsls	r3, r3, #3
 8014022:	440b      	add	r3, r1
 8014024:	3314      	adds	r3, #20
 8014026:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014028:	2b01      	cmp	r3, #1
 801402a:	d10e      	bne.n	801404a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801402c:	4932      	ldr	r1, [pc, #200]	@ (80140f8 <etharp_tmr+0x14c>)
 801402e:	687a      	ldr	r2, [r7, #4]
 8014030:	4613      	mov	r3, r2
 8014032:	005b      	lsls	r3, r3, #1
 8014034:	4413      	add	r3, r2
 8014036:	00db      	lsls	r3, r3, #3
 8014038:	440b      	add	r3, r1
 801403a:	3312      	adds	r3, #18
 801403c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801403e:	2b04      	cmp	r3, #4
 8014040:	d903      	bls.n	801404a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8014042:	6878      	ldr	r0, [r7, #4]
 8014044:	f7ff ff80 	bl	8013f48 <etharp_free_entry>
 8014048:	e04a      	b.n	80140e0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801404a:	492b      	ldr	r1, [pc, #172]	@ (80140f8 <etharp_tmr+0x14c>)
 801404c:	687a      	ldr	r2, [r7, #4]
 801404e:	4613      	mov	r3, r2
 8014050:	005b      	lsls	r3, r3, #1
 8014052:	4413      	add	r3, r2
 8014054:	00db      	lsls	r3, r3, #3
 8014056:	440b      	add	r3, r1
 8014058:	3314      	adds	r3, #20
 801405a:	781b      	ldrb	r3, [r3, #0]
 801405c:	2b03      	cmp	r3, #3
 801405e:	d10a      	bne.n	8014076 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8014060:	4925      	ldr	r1, [pc, #148]	@ (80140f8 <etharp_tmr+0x14c>)
 8014062:	687a      	ldr	r2, [r7, #4]
 8014064:	4613      	mov	r3, r2
 8014066:	005b      	lsls	r3, r3, #1
 8014068:	4413      	add	r3, r2
 801406a:	00db      	lsls	r3, r3, #3
 801406c:	440b      	add	r3, r1
 801406e:	3314      	adds	r3, #20
 8014070:	2204      	movs	r2, #4
 8014072:	701a      	strb	r2, [r3, #0]
 8014074:	e034      	b.n	80140e0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8014076:	4920      	ldr	r1, [pc, #128]	@ (80140f8 <etharp_tmr+0x14c>)
 8014078:	687a      	ldr	r2, [r7, #4]
 801407a:	4613      	mov	r3, r2
 801407c:	005b      	lsls	r3, r3, #1
 801407e:	4413      	add	r3, r2
 8014080:	00db      	lsls	r3, r3, #3
 8014082:	440b      	add	r3, r1
 8014084:	3314      	adds	r3, #20
 8014086:	781b      	ldrb	r3, [r3, #0]
 8014088:	2b04      	cmp	r3, #4
 801408a:	d10a      	bne.n	80140a2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801408c:	491a      	ldr	r1, [pc, #104]	@ (80140f8 <etharp_tmr+0x14c>)
 801408e:	687a      	ldr	r2, [r7, #4]
 8014090:	4613      	mov	r3, r2
 8014092:	005b      	lsls	r3, r3, #1
 8014094:	4413      	add	r3, r2
 8014096:	00db      	lsls	r3, r3, #3
 8014098:	440b      	add	r3, r1
 801409a:	3314      	adds	r3, #20
 801409c:	2202      	movs	r2, #2
 801409e:	701a      	strb	r2, [r3, #0]
 80140a0:	e01e      	b.n	80140e0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80140a2:	4915      	ldr	r1, [pc, #84]	@ (80140f8 <etharp_tmr+0x14c>)
 80140a4:	687a      	ldr	r2, [r7, #4]
 80140a6:	4613      	mov	r3, r2
 80140a8:	005b      	lsls	r3, r3, #1
 80140aa:	4413      	add	r3, r2
 80140ac:	00db      	lsls	r3, r3, #3
 80140ae:	440b      	add	r3, r1
 80140b0:	3314      	adds	r3, #20
 80140b2:	781b      	ldrb	r3, [r3, #0]
 80140b4:	2b01      	cmp	r3, #1
 80140b6:	d113      	bne.n	80140e0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80140b8:	490f      	ldr	r1, [pc, #60]	@ (80140f8 <etharp_tmr+0x14c>)
 80140ba:	687a      	ldr	r2, [r7, #4]
 80140bc:	4613      	mov	r3, r2
 80140be:	005b      	lsls	r3, r3, #1
 80140c0:	4413      	add	r3, r2
 80140c2:	00db      	lsls	r3, r3, #3
 80140c4:	440b      	add	r3, r1
 80140c6:	3308      	adds	r3, #8
 80140c8:	6818      	ldr	r0, [r3, #0]
 80140ca:	687a      	ldr	r2, [r7, #4]
 80140cc:	4613      	mov	r3, r2
 80140ce:	005b      	lsls	r3, r3, #1
 80140d0:	4413      	add	r3, r2
 80140d2:	00db      	lsls	r3, r3, #3
 80140d4:	4a08      	ldr	r2, [pc, #32]	@ (80140f8 <etharp_tmr+0x14c>)
 80140d6:	4413      	add	r3, r2
 80140d8:	3304      	adds	r3, #4
 80140da:	4619      	mov	r1, r3
 80140dc:	f000 fe3e 	bl	8014d5c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80140e0:	687b      	ldr	r3, [r7, #4]
 80140e2:	3301      	adds	r3, #1
 80140e4:	607b      	str	r3, [r7, #4]
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	2b09      	cmp	r3, #9
 80140ea:	f77f af65 	ble.w	8013fb8 <etharp_tmr+0xc>
      }
    }
  }
}
 80140ee:	bf00      	nop
 80140f0:	bf00      	nop
 80140f2:	3708      	adds	r7, #8
 80140f4:	46bd      	mov	sp, r7
 80140f6:	bd80      	pop	{r7, pc}
 80140f8:	2000c6e8 	.word	0x2000c6e8

080140fc <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80140fc:	b580      	push	{r7, lr}
 80140fe:	b08a      	sub	sp, #40	@ 0x28
 8014100:	af00      	add	r7, sp, #0
 8014102:	60f8      	str	r0, [r7, #12]
 8014104:	460b      	mov	r3, r1
 8014106:	607a      	str	r2, [r7, #4]
 8014108:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801410a:	230a      	movs	r3, #10
 801410c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801410e:	230a      	movs	r3, #10
 8014110:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8014112:	230a      	movs	r3, #10
 8014114:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 8014116:	2300      	movs	r3, #0
 8014118:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801411a:	230a      	movs	r3, #10
 801411c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801411e:	2300      	movs	r3, #0
 8014120:	83bb      	strh	r3, [r7, #28]
 8014122:	2300      	movs	r3, #0
 8014124:	837b      	strh	r3, [r7, #26]
 8014126:	2300      	movs	r3, #0
 8014128:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801412a:	2300      	movs	r3, #0
 801412c:	843b      	strh	r3, [r7, #32]
 801412e:	e0ae      	b.n	801428e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8014130:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014134:	49a6      	ldr	r1, [pc, #664]	@ (80143d0 <etharp_find_entry+0x2d4>)
 8014136:	4613      	mov	r3, r2
 8014138:	005b      	lsls	r3, r3, #1
 801413a:	4413      	add	r3, r2
 801413c:	00db      	lsls	r3, r3, #3
 801413e:	440b      	add	r3, r1
 8014140:	3314      	adds	r3, #20
 8014142:	781b      	ldrb	r3, [r3, #0]
 8014144:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8014146:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801414a:	2b0a      	cmp	r3, #10
 801414c:	d105      	bne.n	801415a <etharp_find_entry+0x5e>
 801414e:	7dfb      	ldrb	r3, [r7, #23]
 8014150:	2b00      	cmp	r3, #0
 8014152:	d102      	bne.n	801415a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8014154:	8c3b      	ldrh	r3, [r7, #32]
 8014156:	847b      	strh	r3, [r7, #34]	@ 0x22
 8014158:	e095      	b.n	8014286 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801415a:	7dfb      	ldrb	r3, [r7, #23]
 801415c:	2b00      	cmp	r3, #0
 801415e:	f000 8092 	beq.w	8014286 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8014162:	7dfb      	ldrb	r3, [r7, #23]
 8014164:	2b01      	cmp	r3, #1
 8014166:	d009      	beq.n	801417c <etharp_find_entry+0x80>
 8014168:	7dfb      	ldrb	r3, [r7, #23]
 801416a:	2b01      	cmp	r3, #1
 801416c:	d806      	bhi.n	801417c <etharp_find_entry+0x80>
 801416e:	4b99      	ldr	r3, [pc, #612]	@ (80143d4 <etharp_find_entry+0x2d8>)
 8014170:	f240 1223 	movw	r2, #291	@ 0x123
 8014174:	4998      	ldr	r1, [pc, #608]	@ (80143d8 <etharp_find_entry+0x2dc>)
 8014176:	4899      	ldr	r0, [pc, #612]	@ (80143dc <etharp_find_entry+0x2e0>)
 8014178:	f003 f8ac 	bl	80172d4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801417c:	68fb      	ldr	r3, [r7, #12]
 801417e:	2b00      	cmp	r3, #0
 8014180:	d020      	beq.n	80141c4 <etharp_find_entry+0xc8>
 8014182:	68fb      	ldr	r3, [r7, #12]
 8014184:	6819      	ldr	r1, [r3, #0]
 8014186:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801418a:	4891      	ldr	r0, [pc, #580]	@ (80143d0 <etharp_find_entry+0x2d4>)
 801418c:	4613      	mov	r3, r2
 801418e:	005b      	lsls	r3, r3, #1
 8014190:	4413      	add	r3, r2
 8014192:	00db      	lsls	r3, r3, #3
 8014194:	4403      	add	r3, r0
 8014196:	3304      	adds	r3, #4
 8014198:	681b      	ldr	r3, [r3, #0]
 801419a:	4299      	cmp	r1, r3
 801419c:	d112      	bne.n	80141c4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	2b00      	cmp	r3, #0
 80141a2:	d00c      	beq.n	80141be <etharp_find_entry+0xc2>
 80141a4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80141a8:	4989      	ldr	r1, [pc, #548]	@ (80143d0 <etharp_find_entry+0x2d4>)
 80141aa:	4613      	mov	r3, r2
 80141ac:	005b      	lsls	r3, r3, #1
 80141ae:	4413      	add	r3, r2
 80141b0:	00db      	lsls	r3, r3, #3
 80141b2:	440b      	add	r3, r1
 80141b4:	3308      	adds	r3, #8
 80141b6:	681b      	ldr	r3, [r3, #0]
 80141b8:	687a      	ldr	r2, [r7, #4]
 80141ba:	429a      	cmp	r2, r3
 80141bc:	d102      	bne.n	80141c4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80141be:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80141c2:	e100      	b.n	80143c6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80141c4:	7dfb      	ldrb	r3, [r7, #23]
 80141c6:	2b01      	cmp	r3, #1
 80141c8:	d140      	bne.n	801424c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80141ca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80141ce:	4980      	ldr	r1, [pc, #512]	@ (80143d0 <etharp_find_entry+0x2d4>)
 80141d0:	4613      	mov	r3, r2
 80141d2:	005b      	lsls	r3, r3, #1
 80141d4:	4413      	add	r3, r2
 80141d6:	00db      	lsls	r3, r3, #3
 80141d8:	440b      	add	r3, r1
 80141da:	681b      	ldr	r3, [r3, #0]
 80141dc:	2b00      	cmp	r3, #0
 80141de:	d01a      	beq.n	8014216 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80141e0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80141e4:	497a      	ldr	r1, [pc, #488]	@ (80143d0 <etharp_find_entry+0x2d4>)
 80141e6:	4613      	mov	r3, r2
 80141e8:	005b      	lsls	r3, r3, #1
 80141ea:	4413      	add	r3, r2
 80141ec:	00db      	lsls	r3, r3, #3
 80141ee:	440b      	add	r3, r1
 80141f0:	3312      	adds	r3, #18
 80141f2:	881b      	ldrh	r3, [r3, #0]
 80141f4:	8bba      	ldrh	r2, [r7, #28]
 80141f6:	429a      	cmp	r2, r3
 80141f8:	d845      	bhi.n	8014286 <etharp_find_entry+0x18a>
            old_queue = i;
 80141fa:	8c3b      	ldrh	r3, [r7, #32]
 80141fc:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80141fe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014202:	4973      	ldr	r1, [pc, #460]	@ (80143d0 <etharp_find_entry+0x2d4>)
 8014204:	4613      	mov	r3, r2
 8014206:	005b      	lsls	r3, r3, #1
 8014208:	4413      	add	r3, r2
 801420a:	00db      	lsls	r3, r3, #3
 801420c:	440b      	add	r3, r1
 801420e:	3312      	adds	r3, #18
 8014210:	881b      	ldrh	r3, [r3, #0]
 8014212:	83bb      	strh	r3, [r7, #28]
 8014214:	e037      	b.n	8014286 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8014216:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801421a:	496d      	ldr	r1, [pc, #436]	@ (80143d0 <etharp_find_entry+0x2d4>)
 801421c:	4613      	mov	r3, r2
 801421e:	005b      	lsls	r3, r3, #1
 8014220:	4413      	add	r3, r2
 8014222:	00db      	lsls	r3, r3, #3
 8014224:	440b      	add	r3, r1
 8014226:	3312      	adds	r3, #18
 8014228:	881b      	ldrh	r3, [r3, #0]
 801422a:	8b7a      	ldrh	r2, [r7, #26]
 801422c:	429a      	cmp	r2, r3
 801422e:	d82a      	bhi.n	8014286 <etharp_find_entry+0x18a>
            old_pending = i;
 8014230:	8c3b      	ldrh	r3, [r7, #32]
 8014232:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8014234:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014238:	4965      	ldr	r1, [pc, #404]	@ (80143d0 <etharp_find_entry+0x2d4>)
 801423a:	4613      	mov	r3, r2
 801423c:	005b      	lsls	r3, r3, #1
 801423e:	4413      	add	r3, r2
 8014240:	00db      	lsls	r3, r3, #3
 8014242:	440b      	add	r3, r1
 8014244:	3312      	adds	r3, #18
 8014246:	881b      	ldrh	r3, [r3, #0]
 8014248:	837b      	strh	r3, [r7, #26]
 801424a:	e01c      	b.n	8014286 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801424c:	7dfb      	ldrb	r3, [r7, #23]
 801424e:	2b01      	cmp	r3, #1
 8014250:	d919      	bls.n	8014286 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8014252:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014256:	495e      	ldr	r1, [pc, #376]	@ (80143d0 <etharp_find_entry+0x2d4>)
 8014258:	4613      	mov	r3, r2
 801425a:	005b      	lsls	r3, r3, #1
 801425c:	4413      	add	r3, r2
 801425e:	00db      	lsls	r3, r3, #3
 8014260:	440b      	add	r3, r1
 8014262:	3312      	adds	r3, #18
 8014264:	881b      	ldrh	r3, [r3, #0]
 8014266:	8b3a      	ldrh	r2, [r7, #24]
 8014268:	429a      	cmp	r2, r3
 801426a:	d80c      	bhi.n	8014286 <etharp_find_entry+0x18a>
            old_stable = i;
 801426c:	8c3b      	ldrh	r3, [r7, #32]
 801426e:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8014270:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014274:	4956      	ldr	r1, [pc, #344]	@ (80143d0 <etharp_find_entry+0x2d4>)
 8014276:	4613      	mov	r3, r2
 8014278:	005b      	lsls	r3, r3, #1
 801427a:	4413      	add	r3, r2
 801427c:	00db      	lsls	r3, r3, #3
 801427e:	440b      	add	r3, r1
 8014280:	3312      	adds	r3, #18
 8014282:	881b      	ldrh	r3, [r3, #0]
 8014284:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014286:	8c3b      	ldrh	r3, [r7, #32]
 8014288:	3301      	adds	r3, #1
 801428a:	b29b      	uxth	r3, r3
 801428c:	843b      	strh	r3, [r7, #32]
 801428e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014292:	2b09      	cmp	r3, #9
 8014294:	f77f af4c 	ble.w	8014130 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8014298:	7afb      	ldrb	r3, [r7, #11]
 801429a:	f003 0302 	and.w	r3, r3, #2
 801429e:	2b00      	cmp	r3, #0
 80142a0:	d108      	bne.n	80142b4 <etharp_find_entry+0x1b8>
 80142a2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80142a6:	2b0a      	cmp	r3, #10
 80142a8:	d107      	bne.n	80142ba <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80142aa:	7afb      	ldrb	r3, [r7, #11]
 80142ac:	f003 0301 	and.w	r3, r3, #1
 80142b0:	2b00      	cmp	r3, #0
 80142b2:	d102      	bne.n	80142ba <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80142b4:	f04f 33ff 	mov.w	r3, #4294967295
 80142b8:	e085      	b.n	80143c6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80142ba:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80142be:	2b09      	cmp	r3, #9
 80142c0:	dc02      	bgt.n	80142c8 <etharp_find_entry+0x1cc>
    i = empty;
 80142c2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80142c4:	843b      	strh	r3, [r7, #32]
 80142c6:	e039      	b.n	801433c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80142c8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80142cc:	2b09      	cmp	r3, #9
 80142ce:	dc14      	bgt.n	80142fa <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80142d0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80142d2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80142d4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80142d8:	493d      	ldr	r1, [pc, #244]	@ (80143d0 <etharp_find_entry+0x2d4>)
 80142da:	4613      	mov	r3, r2
 80142dc:	005b      	lsls	r3, r3, #1
 80142de:	4413      	add	r3, r2
 80142e0:	00db      	lsls	r3, r3, #3
 80142e2:	440b      	add	r3, r1
 80142e4:	681b      	ldr	r3, [r3, #0]
 80142e6:	2b00      	cmp	r3, #0
 80142e8:	d018      	beq.n	801431c <etharp_find_entry+0x220>
 80142ea:	4b3a      	ldr	r3, [pc, #232]	@ (80143d4 <etharp_find_entry+0x2d8>)
 80142ec:	f240 126d 	movw	r2, #365	@ 0x16d
 80142f0:	493b      	ldr	r1, [pc, #236]	@ (80143e0 <etharp_find_entry+0x2e4>)
 80142f2:	483a      	ldr	r0, [pc, #232]	@ (80143dc <etharp_find_entry+0x2e0>)
 80142f4:	f002 ffee 	bl	80172d4 <iprintf>
 80142f8:	e010      	b.n	801431c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80142fa:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80142fe:	2b09      	cmp	r3, #9
 8014300:	dc02      	bgt.n	8014308 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8014302:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8014304:	843b      	strh	r3, [r7, #32]
 8014306:	e009      	b.n	801431c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8014308:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801430c:	2b09      	cmp	r3, #9
 801430e:	dc02      	bgt.n	8014316 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8014310:	8bfb      	ldrh	r3, [r7, #30]
 8014312:	843b      	strh	r3, [r7, #32]
 8014314:	e002      	b.n	801431c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8014316:	f04f 33ff 	mov.w	r3, #4294967295
 801431a:	e054      	b.n	80143c6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801431c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014320:	2b09      	cmp	r3, #9
 8014322:	dd06      	ble.n	8014332 <etharp_find_entry+0x236>
 8014324:	4b2b      	ldr	r3, [pc, #172]	@ (80143d4 <etharp_find_entry+0x2d8>)
 8014326:	f240 127f 	movw	r2, #383	@ 0x17f
 801432a:	492e      	ldr	r1, [pc, #184]	@ (80143e4 <etharp_find_entry+0x2e8>)
 801432c:	482b      	ldr	r0, [pc, #172]	@ (80143dc <etharp_find_entry+0x2e0>)
 801432e:	f002 ffd1 	bl	80172d4 <iprintf>
    etharp_free_entry(i);
 8014332:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014336:	4618      	mov	r0, r3
 8014338:	f7ff fe06 	bl	8013f48 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801433c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014340:	2b09      	cmp	r3, #9
 8014342:	dd06      	ble.n	8014352 <etharp_find_entry+0x256>
 8014344:	4b23      	ldr	r3, [pc, #140]	@ (80143d4 <etharp_find_entry+0x2d8>)
 8014346:	f240 1283 	movw	r2, #387	@ 0x183
 801434a:	4926      	ldr	r1, [pc, #152]	@ (80143e4 <etharp_find_entry+0x2e8>)
 801434c:	4823      	ldr	r0, [pc, #140]	@ (80143dc <etharp_find_entry+0x2e0>)
 801434e:	f002 ffc1 	bl	80172d4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8014352:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014356:	491e      	ldr	r1, [pc, #120]	@ (80143d0 <etharp_find_entry+0x2d4>)
 8014358:	4613      	mov	r3, r2
 801435a:	005b      	lsls	r3, r3, #1
 801435c:	4413      	add	r3, r2
 801435e:	00db      	lsls	r3, r3, #3
 8014360:	440b      	add	r3, r1
 8014362:	3314      	adds	r3, #20
 8014364:	781b      	ldrb	r3, [r3, #0]
 8014366:	2b00      	cmp	r3, #0
 8014368:	d006      	beq.n	8014378 <etharp_find_entry+0x27c>
 801436a:	4b1a      	ldr	r3, [pc, #104]	@ (80143d4 <etharp_find_entry+0x2d8>)
 801436c:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8014370:	491d      	ldr	r1, [pc, #116]	@ (80143e8 <etharp_find_entry+0x2ec>)
 8014372:	481a      	ldr	r0, [pc, #104]	@ (80143dc <etharp_find_entry+0x2e0>)
 8014374:	f002 ffae 	bl	80172d4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8014378:	68fb      	ldr	r3, [r7, #12]
 801437a:	2b00      	cmp	r3, #0
 801437c:	d00b      	beq.n	8014396 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801437e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014382:	68fb      	ldr	r3, [r7, #12]
 8014384:	6819      	ldr	r1, [r3, #0]
 8014386:	4812      	ldr	r0, [pc, #72]	@ (80143d0 <etharp_find_entry+0x2d4>)
 8014388:	4613      	mov	r3, r2
 801438a:	005b      	lsls	r3, r3, #1
 801438c:	4413      	add	r3, r2
 801438e:	00db      	lsls	r3, r3, #3
 8014390:	4403      	add	r3, r0
 8014392:	3304      	adds	r3, #4
 8014394:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8014396:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801439a:	490d      	ldr	r1, [pc, #52]	@ (80143d0 <etharp_find_entry+0x2d4>)
 801439c:	4613      	mov	r3, r2
 801439e:	005b      	lsls	r3, r3, #1
 80143a0:	4413      	add	r3, r2
 80143a2:	00db      	lsls	r3, r3, #3
 80143a4:	440b      	add	r3, r1
 80143a6:	3312      	adds	r3, #18
 80143a8:	2200      	movs	r2, #0
 80143aa:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80143ac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80143b0:	4907      	ldr	r1, [pc, #28]	@ (80143d0 <etharp_find_entry+0x2d4>)
 80143b2:	4613      	mov	r3, r2
 80143b4:	005b      	lsls	r3, r3, #1
 80143b6:	4413      	add	r3, r2
 80143b8:	00db      	lsls	r3, r3, #3
 80143ba:	440b      	add	r3, r1
 80143bc:	3308      	adds	r3, #8
 80143be:	687a      	ldr	r2, [r7, #4]
 80143c0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80143c2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80143c6:	4618      	mov	r0, r3
 80143c8:	3728      	adds	r7, #40	@ 0x28
 80143ca:	46bd      	mov	sp, r7
 80143cc:	bd80      	pop	{r7, pc}
 80143ce:	bf00      	nop
 80143d0:	2000c6e8 	.word	0x2000c6e8
 80143d4:	0801ab94 	.word	0x0801ab94
 80143d8:	0801abcc 	.word	0x0801abcc
 80143dc:	0801ac0c 	.word	0x0801ac0c
 80143e0:	0801ac34 	.word	0x0801ac34
 80143e4:	0801ac4c 	.word	0x0801ac4c
 80143e8:	0801ac60 	.word	0x0801ac60

080143ec <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80143ec:	b580      	push	{r7, lr}
 80143ee:	b088      	sub	sp, #32
 80143f0:	af02      	add	r7, sp, #8
 80143f2:	60f8      	str	r0, [r7, #12]
 80143f4:	60b9      	str	r1, [r7, #8]
 80143f6:	607a      	str	r2, [r7, #4]
 80143f8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80143fa:	68fb      	ldr	r3, [r7, #12]
 80143fc:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8014400:	2b06      	cmp	r3, #6
 8014402:	d006      	beq.n	8014412 <etharp_update_arp_entry+0x26>
 8014404:	4b48      	ldr	r3, [pc, #288]	@ (8014528 <etharp_update_arp_entry+0x13c>)
 8014406:	f240 12a9 	movw	r2, #425	@ 0x1a9
 801440a:	4948      	ldr	r1, [pc, #288]	@ (801452c <etharp_update_arp_entry+0x140>)
 801440c:	4848      	ldr	r0, [pc, #288]	@ (8014530 <etharp_update_arp_entry+0x144>)
 801440e:	f002 ff61 	bl	80172d4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8014412:	68bb      	ldr	r3, [r7, #8]
 8014414:	2b00      	cmp	r3, #0
 8014416:	d012      	beq.n	801443e <etharp_update_arp_entry+0x52>
 8014418:	68bb      	ldr	r3, [r7, #8]
 801441a:	681b      	ldr	r3, [r3, #0]
 801441c:	2b00      	cmp	r3, #0
 801441e:	d00e      	beq.n	801443e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014420:	68bb      	ldr	r3, [r7, #8]
 8014422:	681b      	ldr	r3, [r3, #0]
 8014424:	68f9      	ldr	r1, [r7, #12]
 8014426:	4618      	mov	r0, r3
 8014428:	f001 f8ce 	bl	80155c8 <ip4_addr_isbroadcast_u32>
 801442c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801442e:	2b00      	cmp	r3, #0
 8014430:	d105      	bne.n	801443e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8014432:	68bb      	ldr	r3, [r7, #8]
 8014434:	681b      	ldr	r3, [r3, #0]
 8014436:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801443a:	2be0      	cmp	r3, #224	@ 0xe0
 801443c:	d102      	bne.n	8014444 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801443e:	f06f 030f 	mvn.w	r3, #15
 8014442:	e06c      	b.n	801451e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8014444:	78fb      	ldrb	r3, [r7, #3]
 8014446:	68fa      	ldr	r2, [r7, #12]
 8014448:	4619      	mov	r1, r3
 801444a:	68b8      	ldr	r0, [r7, #8]
 801444c:	f7ff fe56 	bl	80140fc <etharp_find_entry>
 8014450:	4603      	mov	r3, r0
 8014452:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8014454:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014458:	2b00      	cmp	r3, #0
 801445a:	da02      	bge.n	8014462 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801445c:	8afb      	ldrh	r3, [r7, #22]
 801445e:	b25b      	sxtb	r3, r3
 8014460:	e05d      	b.n	801451e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8014462:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014466:	4933      	ldr	r1, [pc, #204]	@ (8014534 <etharp_update_arp_entry+0x148>)
 8014468:	4613      	mov	r3, r2
 801446a:	005b      	lsls	r3, r3, #1
 801446c:	4413      	add	r3, r2
 801446e:	00db      	lsls	r3, r3, #3
 8014470:	440b      	add	r3, r1
 8014472:	3314      	adds	r3, #20
 8014474:	2202      	movs	r2, #2
 8014476:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8014478:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801447c:	492d      	ldr	r1, [pc, #180]	@ (8014534 <etharp_update_arp_entry+0x148>)
 801447e:	4613      	mov	r3, r2
 8014480:	005b      	lsls	r3, r3, #1
 8014482:	4413      	add	r3, r2
 8014484:	00db      	lsls	r3, r3, #3
 8014486:	440b      	add	r3, r1
 8014488:	3308      	adds	r3, #8
 801448a:	68fa      	ldr	r2, [r7, #12]
 801448c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801448e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014492:	4613      	mov	r3, r2
 8014494:	005b      	lsls	r3, r3, #1
 8014496:	4413      	add	r3, r2
 8014498:	00db      	lsls	r3, r3, #3
 801449a:	3308      	adds	r3, #8
 801449c:	4a25      	ldr	r2, [pc, #148]	@ (8014534 <etharp_update_arp_entry+0x148>)
 801449e:	4413      	add	r3, r2
 80144a0:	3304      	adds	r3, #4
 80144a2:	2206      	movs	r2, #6
 80144a4:	6879      	ldr	r1, [r7, #4]
 80144a6:	4618      	mov	r0, r3
 80144a8:	f003 f89d 	bl	80175e6 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80144ac:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80144b0:	4920      	ldr	r1, [pc, #128]	@ (8014534 <etharp_update_arp_entry+0x148>)
 80144b2:	4613      	mov	r3, r2
 80144b4:	005b      	lsls	r3, r3, #1
 80144b6:	4413      	add	r3, r2
 80144b8:	00db      	lsls	r3, r3, #3
 80144ba:	440b      	add	r3, r1
 80144bc:	3312      	adds	r3, #18
 80144be:	2200      	movs	r2, #0
 80144c0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80144c2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80144c6:	491b      	ldr	r1, [pc, #108]	@ (8014534 <etharp_update_arp_entry+0x148>)
 80144c8:	4613      	mov	r3, r2
 80144ca:	005b      	lsls	r3, r3, #1
 80144cc:	4413      	add	r3, r2
 80144ce:	00db      	lsls	r3, r3, #3
 80144d0:	440b      	add	r3, r1
 80144d2:	681b      	ldr	r3, [r3, #0]
 80144d4:	2b00      	cmp	r3, #0
 80144d6:	d021      	beq.n	801451c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80144d8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80144dc:	4915      	ldr	r1, [pc, #84]	@ (8014534 <etharp_update_arp_entry+0x148>)
 80144de:	4613      	mov	r3, r2
 80144e0:	005b      	lsls	r3, r3, #1
 80144e2:	4413      	add	r3, r2
 80144e4:	00db      	lsls	r3, r3, #3
 80144e6:	440b      	add	r3, r1
 80144e8:	681b      	ldr	r3, [r3, #0]
 80144ea:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80144ec:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80144f0:	4910      	ldr	r1, [pc, #64]	@ (8014534 <etharp_update_arp_entry+0x148>)
 80144f2:	4613      	mov	r3, r2
 80144f4:	005b      	lsls	r3, r3, #1
 80144f6:	4413      	add	r3, r2
 80144f8:	00db      	lsls	r3, r3, #3
 80144fa:	440b      	add	r3, r1
 80144fc:	2200      	movs	r2, #0
 80144fe:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8014500:	68fb      	ldr	r3, [r7, #12]
 8014502:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8014506:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801450a:	9300      	str	r3, [sp, #0]
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	6939      	ldr	r1, [r7, #16]
 8014510:	68f8      	ldr	r0, [r7, #12]
 8014512:	f001 ff67 	bl	80163e4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8014516:	6938      	ldr	r0, [r7, #16]
 8014518:	f7f9 fdf0 	bl	800e0fc <pbuf_free>
  }
  return ERR_OK;
 801451c:	2300      	movs	r3, #0
}
 801451e:	4618      	mov	r0, r3
 8014520:	3718      	adds	r7, #24
 8014522:	46bd      	mov	sp, r7
 8014524:	bd80      	pop	{r7, pc}
 8014526:	bf00      	nop
 8014528:	0801ab94 	.word	0x0801ab94
 801452c:	0801ac8c 	.word	0x0801ac8c
 8014530:	0801ac0c 	.word	0x0801ac0c
 8014534:	2000c6e8 	.word	0x2000c6e8

08014538 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8014538:	b5b0      	push	{r4, r5, r7, lr}
 801453a:	b08a      	sub	sp, #40	@ 0x28
 801453c:	af04      	add	r7, sp, #16
 801453e:	6078      	str	r0, [r7, #4]
 8014540:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8014542:	683b      	ldr	r3, [r7, #0]
 8014544:	2b00      	cmp	r3, #0
 8014546:	d107      	bne.n	8014558 <etharp_input+0x20>
 8014548:	4b3d      	ldr	r3, [pc, #244]	@ (8014640 <etharp_input+0x108>)
 801454a:	f240 228a 	movw	r2, #650	@ 0x28a
 801454e:	493d      	ldr	r1, [pc, #244]	@ (8014644 <etharp_input+0x10c>)
 8014550:	483d      	ldr	r0, [pc, #244]	@ (8014648 <etharp_input+0x110>)
 8014552:	f002 febf 	bl	80172d4 <iprintf>
 8014556:	e06f      	b.n	8014638 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	685b      	ldr	r3, [r3, #4]
 801455c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801455e:	693b      	ldr	r3, [r7, #16]
 8014560:	881b      	ldrh	r3, [r3, #0]
 8014562:	b29b      	uxth	r3, r3
 8014564:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014568:	d10c      	bne.n	8014584 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801456a:	693b      	ldr	r3, [r7, #16]
 801456c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801456e:	2b06      	cmp	r3, #6
 8014570:	d108      	bne.n	8014584 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014572:	693b      	ldr	r3, [r7, #16]
 8014574:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014576:	2b04      	cmp	r3, #4
 8014578:	d104      	bne.n	8014584 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801457a:	693b      	ldr	r3, [r7, #16]
 801457c:	885b      	ldrh	r3, [r3, #2]
 801457e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014580:	2b08      	cmp	r3, #8
 8014582:	d003      	beq.n	801458c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8014584:	6878      	ldr	r0, [r7, #4]
 8014586:	f7f9 fdb9 	bl	800e0fc <pbuf_free>
    return;
 801458a:	e055      	b.n	8014638 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801458c:	693b      	ldr	r3, [r7, #16]
 801458e:	330e      	adds	r3, #14
 8014590:	681b      	ldr	r3, [r3, #0]
 8014592:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8014594:	693b      	ldr	r3, [r7, #16]
 8014596:	3318      	adds	r3, #24
 8014598:	681b      	ldr	r3, [r3, #0]
 801459a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801459c:	683b      	ldr	r3, [r7, #0]
 801459e:	3304      	adds	r3, #4
 80145a0:	681b      	ldr	r3, [r3, #0]
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	d102      	bne.n	80145ac <etharp_input+0x74>
    for_us = 0;
 80145a6:	2300      	movs	r3, #0
 80145a8:	75fb      	strb	r3, [r7, #23]
 80145aa:	e009      	b.n	80145c0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80145ac:	68ba      	ldr	r2, [r7, #8]
 80145ae:	683b      	ldr	r3, [r7, #0]
 80145b0:	3304      	adds	r3, #4
 80145b2:	681b      	ldr	r3, [r3, #0]
 80145b4:	429a      	cmp	r2, r3
 80145b6:	bf0c      	ite	eq
 80145b8:	2301      	moveq	r3, #1
 80145ba:	2300      	movne	r3, #0
 80145bc:	b2db      	uxtb	r3, r3
 80145be:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80145c0:	693b      	ldr	r3, [r7, #16]
 80145c2:	f103 0208 	add.w	r2, r3, #8
 80145c6:	7dfb      	ldrb	r3, [r7, #23]
 80145c8:	2b00      	cmp	r3, #0
 80145ca:	d001      	beq.n	80145d0 <etharp_input+0x98>
 80145cc:	2301      	movs	r3, #1
 80145ce:	e000      	b.n	80145d2 <etharp_input+0x9a>
 80145d0:	2302      	movs	r3, #2
 80145d2:	f107 010c 	add.w	r1, r7, #12
 80145d6:	6838      	ldr	r0, [r7, #0]
 80145d8:	f7ff ff08 	bl	80143ec <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80145dc:	693b      	ldr	r3, [r7, #16]
 80145de:	88db      	ldrh	r3, [r3, #6]
 80145e0:	b29b      	uxth	r3, r3
 80145e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80145e6:	d003      	beq.n	80145f0 <etharp_input+0xb8>
 80145e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80145ec:	d01e      	beq.n	801462c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80145ee:	e020      	b.n	8014632 <etharp_input+0xfa>
      if (for_us) {
 80145f0:	7dfb      	ldrb	r3, [r7, #23]
 80145f2:	2b00      	cmp	r3, #0
 80145f4:	d01c      	beq.n	8014630 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80145f6:	683b      	ldr	r3, [r7, #0]
 80145f8:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 80145fc:	693b      	ldr	r3, [r7, #16]
 80145fe:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8014602:	683b      	ldr	r3, [r7, #0]
 8014604:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 8014608:	683b      	ldr	r3, [r7, #0]
 801460a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801460c:	693a      	ldr	r2, [r7, #16]
 801460e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8014610:	2102      	movs	r1, #2
 8014612:	9103      	str	r1, [sp, #12]
 8014614:	f107 010c 	add.w	r1, r7, #12
 8014618:	9102      	str	r1, [sp, #8]
 801461a:	9201      	str	r2, [sp, #4]
 801461c:	9300      	str	r3, [sp, #0]
 801461e:	462b      	mov	r3, r5
 8014620:	4622      	mov	r2, r4
 8014622:	4601      	mov	r1, r0
 8014624:	6838      	ldr	r0, [r7, #0]
 8014626:	f000 faeb 	bl	8014c00 <etharp_raw>
      break;
 801462a:	e001      	b.n	8014630 <etharp_input+0xf8>
      break;
 801462c:	bf00      	nop
 801462e:	e000      	b.n	8014632 <etharp_input+0xfa>
      break;
 8014630:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8014632:	6878      	ldr	r0, [r7, #4]
 8014634:	f7f9 fd62 	bl	800e0fc <pbuf_free>
}
 8014638:	3718      	adds	r7, #24
 801463a:	46bd      	mov	sp, r7
 801463c:	bdb0      	pop	{r4, r5, r7, pc}
 801463e:	bf00      	nop
 8014640:	0801ab94 	.word	0x0801ab94
 8014644:	0801ace4 	.word	0x0801ace4
 8014648:	0801ac0c 	.word	0x0801ac0c

0801464c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801464c:	b580      	push	{r7, lr}
 801464e:	b086      	sub	sp, #24
 8014650:	af02      	add	r7, sp, #8
 8014652:	60f8      	str	r0, [r7, #12]
 8014654:	60b9      	str	r1, [r7, #8]
 8014656:	4613      	mov	r3, r2
 8014658:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801465a:	79fa      	ldrb	r2, [r7, #7]
 801465c:	4944      	ldr	r1, [pc, #272]	@ (8014770 <etharp_output_to_arp_index+0x124>)
 801465e:	4613      	mov	r3, r2
 8014660:	005b      	lsls	r3, r3, #1
 8014662:	4413      	add	r3, r2
 8014664:	00db      	lsls	r3, r3, #3
 8014666:	440b      	add	r3, r1
 8014668:	3314      	adds	r3, #20
 801466a:	781b      	ldrb	r3, [r3, #0]
 801466c:	2b01      	cmp	r3, #1
 801466e:	d806      	bhi.n	801467e <etharp_output_to_arp_index+0x32>
 8014670:	4b40      	ldr	r3, [pc, #256]	@ (8014774 <etharp_output_to_arp_index+0x128>)
 8014672:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8014676:	4940      	ldr	r1, [pc, #256]	@ (8014778 <etharp_output_to_arp_index+0x12c>)
 8014678:	4840      	ldr	r0, [pc, #256]	@ (801477c <etharp_output_to_arp_index+0x130>)
 801467a:	f002 fe2b 	bl	80172d4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801467e:	79fa      	ldrb	r2, [r7, #7]
 8014680:	493b      	ldr	r1, [pc, #236]	@ (8014770 <etharp_output_to_arp_index+0x124>)
 8014682:	4613      	mov	r3, r2
 8014684:	005b      	lsls	r3, r3, #1
 8014686:	4413      	add	r3, r2
 8014688:	00db      	lsls	r3, r3, #3
 801468a:	440b      	add	r3, r1
 801468c:	3314      	adds	r3, #20
 801468e:	781b      	ldrb	r3, [r3, #0]
 8014690:	2b02      	cmp	r3, #2
 8014692:	d153      	bne.n	801473c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8014694:	79fa      	ldrb	r2, [r7, #7]
 8014696:	4936      	ldr	r1, [pc, #216]	@ (8014770 <etharp_output_to_arp_index+0x124>)
 8014698:	4613      	mov	r3, r2
 801469a:	005b      	lsls	r3, r3, #1
 801469c:	4413      	add	r3, r2
 801469e:	00db      	lsls	r3, r3, #3
 80146a0:	440b      	add	r3, r1
 80146a2:	3312      	adds	r3, #18
 80146a4:	881b      	ldrh	r3, [r3, #0]
 80146a6:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 80146aa:	d919      	bls.n	80146e0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80146ac:	79fa      	ldrb	r2, [r7, #7]
 80146ae:	4613      	mov	r3, r2
 80146b0:	005b      	lsls	r3, r3, #1
 80146b2:	4413      	add	r3, r2
 80146b4:	00db      	lsls	r3, r3, #3
 80146b6:	4a2e      	ldr	r2, [pc, #184]	@ (8014770 <etharp_output_to_arp_index+0x124>)
 80146b8:	4413      	add	r3, r2
 80146ba:	3304      	adds	r3, #4
 80146bc:	4619      	mov	r1, r3
 80146be:	68f8      	ldr	r0, [r7, #12]
 80146c0:	f000 fb4c 	bl	8014d5c <etharp_request>
 80146c4:	4603      	mov	r3, r0
 80146c6:	2b00      	cmp	r3, #0
 80146c8:	d138      	bne.n	801473c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80146ca:	79fa      	ldrb	r2, [r7, #7]
 80146cc:	4928      	ldr	r1, [pc, #160]	@ (8014770 <etharp_output_to_arp_index+0x124>)
 80146ce:	4613      	mov	r3, r2
 80146d0:	005b      	lsls	r3, r3, #1
 80146d2:	4413      	add	r3, r2
 80146d4:	00db      	lsls	r3, r3, #3
 80146d6:	440b      	add	r3, r1
 80146d8:	3314      	adds	r3, #20
 80146da:	2203      	movs	r2, #3
 80146dc:	701a      	strb	r2, [r3, #0]
 80146de:	e02d      	b.n	801473c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80146e0:	79fa      	ldrb	r2, [r7, #7]
 80146e2:	4923      	ldr	r1, [pc, #140]	@ (8014770 <etharp_output_to_arp_index+0x124>)
 80146e4:	4613      	mov	r3, r2
 80146e6:	005b      	lsls	r3, r3, #1
 80146e8:	4413      	add	r3, r2
 80146ea:	00db      	lsls	r3, r3, #3
 80146ec:	440b      	add	r3, r1
 80146ee:	3312      	adds	r3, #18
 80146f0:	881b      	ldrh	r3, [r3, #0]
 80146f2:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 80146f6:	d321      	bcc.n	801473c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80146f8:	79fa      	ldrb	r2, [r7, #7]
 80146fa:	4613      	mov	r3, r2
 80146fc:	005b      	lsls	r3, r3, #1
 80146fe:	4413      	add	r3, r2
 8014700:	00db      	lsls	r3, r3, #3
 8014702:	4a1b      	ldr	r2, [pc, #108]	@ (8014770 <etharp_output_to_arp_index+0x124>)
 8014704:	4413      	add	r3, r2
 8014706:	1d19      	adds	r1, r3, #4
 8014708:	79fa      	ldrb	r2, [r7, #7]
 801470a:	4613      	mov	r3, r2
 801470c:	005b      	lsls	r3, r3, #1
 801470e:	4413      	add	r3, r2
 8014710:	00db      	lsls	r3, r3, #3
 8014712:	3308      	adds	r3, #8
 8014714:	4a16      	ldr	r2, [pc, #88]	@ (8014770 <etharp_output_to_arp_index+0x124>)
 8014716:	4413      	add	r3, r2
 8014718:	3304      	adds	r3, #4
 801471a:	461a      	mov	r2, r3
 801471c:	68f8      	ldr	r0, [r7, #12]
 801471e:	f000 fafb 	bl	8014d18 <etharp_request_dst>
 8014722:	4603      	mov	r3, r0
 8014724:	2b00      	cmp	r3, #0
 8014726:	d109      	bne.n	801473c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014728:	79fa      	ldrb	r2, [r7, #7]
 801472a:	4911      	ldr	r1, [pc, #68]	@ (8014770 <etharp_output_to_arp_index+0x124>)
 801472c:	4613      	mov	r3, r2
 801472e:	005b      	lsls	r3, r3, #1
 8014730:	4413      	add	r3, r2
 8014732:	00db      	lsls	r3, r3, #3
 8014734:	440b      	add	r3, r1
 8014736:	3314      	adds	r3, #20
 8014738:	2203      	movs	r2, #3
 801473a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801473c:	68fb      	ldr	r3, [r7, #12]
 801473e:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 8014742:	79fa      	ldrb	r2, [r7, #7]
 8014744:	4613      	mov	r3, r2
 8014746:	005b      	lsls	r3, r3, #1
 8014748:	4413      	add	r3, r2
 801474a:	00db      	lsls	r3, r3, #3
 801474c:	3308      	adds	r3, #8
 801474e:	4a08      	ldr	r2, [pc, #32]	@ (8014770 <etharp_output_to_arp_index+0x124>)
 8014750:	4413      	add	r3, r2
 8014752:	3304      	adds	r3, #4
 8014754:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8014758:	9200      	str	r2, [sp, #0]
 801475a:	460a      	mov	r2, r1
 801475c:	68b9      	ldr	r1, [r7, #8]
 801475e:	68f8      	ldr	r0, [r7, #12]
 8014760:	f001 fe40 	bl	80163e4 <ethernet_output>
 8014764:	4603      	mov	r3, r0
}
 8014766:	4618      	mov	r0, r3
 8014768:	3710      	adds	r7, #16
 801476a:	46bd      	mov	sp, r7
 801476c:	bd80      	pop	{r7, pc}
 801476e:	bf00      	nop
 8014770:	2000c6e8 	.word	0x2000c6e8
 8014774:	0801ab94 	.word	0x0801ab94
 8014778:	0801ad04 	.word	0x0801ad04
 801477c:	0801ac0c 	.word	0x0801ac0c

08014780 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8014780:	b580      	push	{r7, lr}
 8014782:	b08a      	sub	sp, #40	@ 0x28
 8014784:	af02      	add	r7, sp, #8
 8014786:	60f8      	str	r0, [r7, #12]
 8014788:	60b9      	str	r1, [r7, #8]
 801478a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801478c:	687b      	ldr	r3, [r7, #4]
 801478e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014790:	68fb      	ldr	r3, [r7, #12]
 8014792:	2b00      	cmp	r3, #0
 8014794:	d106      	bne.n	80147a4 <etharp_output+0x24>
 8014796:	4b73      	ldr	r3, [pc, #460]	@ (8014964 <etharp_output+0x1e4>)
 8014798:	f240 321e 	movw	r2, #798	@ 0x31e
 801479c:	4972      	ldr	r1, [pc, #456]	@ (8014968 <etharp_output+0x1e8>)
 801479e:	4873      	ldr	r0, [pc, #460]	@ (801496c <etharp_output+0x1ec>)
 80147a0:	f002 fd98 	bl	80172d4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80147a4:	68bb      	ldr	r3, [r7, #8]
 80147a6:	2b00      	cmp	r3, #0
 80147a8:	d106      	bne.n	80147b8 <etharp_output+0x38>
 80147aa:	4b6e      	ldr	r3, [pc, #440]	@ (8014964 <etharp_output+0x1e4>)
 80147ac:	f240 321f 	movw	r2, #799	@ 0x31f
 80147b0:	496f      	ldr	r1, [pc, #444]	@ (8014970 <etharp_output+0x1f0>)
 80147b2:	486e      	ldr	r0, [pc, #440]	@ (801496c <etharp_output+0x1ec>)
 80147b4:	f002 fd8e 	bl	80172d4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	2b00      	cmp	r3, #0
 80147bc:	d106      	bne.n	80147cc <etharp_output+0x4c>
 80147be:	4b69      	ldr	r3, [pc, #420]	@ (8014964 <etharp_output+0x1e4>)
 80147c0:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80147c4:	496b      	ldr	r1, [pc, #428]	@ (8014974 <etharp_output+0x1f4>)
 80147c6:	4869      	ldr	r0, [pc, #420]	@ (801496c <etharp_output+0x1ec>)
 80147c8:	f002 fd84 	bl	80172d4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	681b      	ldr	r3, [r3, #0]
 80147d0:	68f9      	ldr	r1, [r7, #12]
 80147d2:	4618      	mov	r0, r3
 80147d4:	f000 fef8 	bl	80155c8 <ip4_addr_isbroadcast_u32>
 80147d8:	4603      	mov	r3, r0
 80147da:	2b00      	cmp	r3, #0
 80147dc:	d002      	beq.n	80147e4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80147de:	4b66      	ldr	r3, [pc, #408]	@ (8014978 <etharp_output+0x1f8>)
 80147e0:	61fb      	str	r3, [r7, #28]
 80147e2:	e0af      	b.n	8014944 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80147e4:	687b      	ldr	r3, [r7, #4]
 80147e6:	681b      	ldr	r3, [r3, #0]
 80147e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80147ec:	2be0      	cmp	r3, #224	@ 0xe0
 80147ee:	d118      	bne.n	8014822 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80147f0:	2301      	movs	r3, #1
 80147f2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80147f4:	2300      	movs	r3, #0
 80147f6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80147f8:	235e      	movs	r3, #94	@ 0x5e
 80147fa:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	3301      	adds	r3, #1
 8014800:	781b      	ldrb	r3, [r3, #0]
 8014802:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014806:	b2db      	uxtb	r3, r3
 8014808:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801480a:	687b      	ldr	r3, [r7, #4]
 801480c:	3302      	adds	r3, #2
 801480e:	781b      	ldrb	r3, [r3, #0]
 8014810:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	3303      	adds	r3, #3
 8014816:	781b      	ldrb	r3, [r3, #0]
 8014818:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801481a:	f107 0310 	add.w	r3, r7, #16
 801481e:	61fb      	str	r3, [r7, #28]
 8014820:	e090      	b.n	8014944 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014822:	687b      	ldr	r3, [r7, #4]
 8014824:	681a      	ldr	r2, [r3, #0]
 8014826:	68fb      	ldr	r3, [r7, #12]
 8014828:	3304      	adds	r3, #4
 801482a:	681b      	ldr	r3, [r3, #0]
 801482c:	405a      	eors	r2, r3
 801482e:	68fb      	ldr	r3, [r7, #12]
 8014830:	3308      	adds	r3, #8
 8014832:	681b      	ldr	r3, [r3, #0]
 8014834:	4013      	ands	r3, r2
 8014836:	2b00      	cmp	r3, #0
 8014838:	d012      	beq.n	8014860 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	681b      	ldr	r3, [r3, #0]
 801483e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014840:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8014844:	4293      	cmp	r3, r2
 8014846:	d00b      	beq.n	8014860 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8014848:	68fb      	ldr	r3, [r7, #12]
 801484a:	330c      	adds	r3, #12
 801484c:	681b      	ldr	r3, [r3, #0]
 801484e:	2b00      	cmp	r3, #0
 8014850:	d003      	beq.n	801485a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8014852:	68fb      	ldr	r3, [r7, #12]
 8014854:	330c      	adds	r3, #12
 8014856:	61bb      	str	r3, [r7, #24]
 8014858:	e002      	b.n	8014860 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801485a:	f06f 0303 	mvn.w	r3, #3
 801485e:	e07d      	b.n	801495c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014860:	4b46      	ldr	r3, [pc, #280]	@ (801497c <etharp_output+0x1fc>)
 8014862:	781b      	ldrb	r3, [r3, #0]
 8014864:	4619      	mov	r1, r3
 8014866:	4a46      	ldr	r2, [pc, #280]	@ (8014980 <etharp_output+0x200>)
 8014868:	460b      	mov	r3, r1
 801486a:	005b      	lsls	r3, r3, #1
 801486c:	440b      	add	r3, r1
 801486e:	00db      	lsls	r3, r3, #3
 8014870:	4413      	add	r3, r2
 8014872:	3314      	adds	r3, #20
 8014874:	781b      	ldrb	r3, [r3, #0]
 8014876:	2b01      	cmp	r3, #1
 8014878:	d925      	bls.n	80148c6 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801487a:	4b40      	ldr	r3, [pc, #256]	@ (801497c <etharp_output+0x1fc>)
 801487c:	781b      	ldrb	r3, [r3, #0]
 801487e:	4619      	mov	r1, r3
 8014880:	4a3f      	ldr	r2, [pc, #252]	@ (8014980 <etharp_output+0x200>)
 8014882:	460b      	mov	r3, r1
 8014884:	005b      	lsls	r3, r3, #1
 8014886:	440b      	add	r3, r1
 8014888:	00db      	lsls	r3, r3, #3
 801488a:	4413      	add	r3, r2
 801488c:	3308      	adds	r3, #8
 801488e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014890:	68fa      	ldr	r2, [r7, #12]
 8014892:	429a      	cmp	r2, r3
 8014894:	d117      	bne.n	80148c6 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8014896:	69bb      	ldr	r3, [r7, #24]
 8014898:	681a      	ldr	r2, [r3, #0]
 801489a:	4b38      	ldr	r3, [pc, #224]	@ (801497c <etharp_output+0x1fc>)
 801489c:	781b      	ldrb	r3, [r3, #0]
 801489e:	4618      	mov	r0, r3
 80148a0:	4937      	ldr	r1, [pc, #220]	@ (8014980 <etharp_output+0x200>)
 80148a2:	4603      	mov	r3, r0
 80148a4:	005b      	lsls	r3, r3, #1
 80148a6:	4403      	add	r3, r0
 80148a8:	00db      	lsls	r3, r3, #3
 80148aa:	440b      	add	r3, r1
 80148ac:	3304      	adds	r3, #4
 80148ae:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80148b0:	429a      	cmp	r2, r3
 80148b2:	d108      	bne.n	80148c6 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80148b4:	4b31      	ldr	r3, [pc, #196]	@ (801497c <etharp_output+0x1fc>)
 80148b6:	781b      	ldrb	r3, [r3, #0]
 80148b8:	461a      	mov	r2, r3
 80148ba:	68b9      	ldr	r1, [r7, #8]
 80148bc:	68f8      	ldr	r0, [r7, #12]
 80148be:	f7ff fec5 	bl	801464c <etharp_output_to_arp_index>
 80148c2:	4603      	mov	r3, r0
 80148c4:	e04a      	b.n	801495c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80148c6:	2300      	movs	r3, #0
 80148c8:	75fb      	strb	r3, [r7, #23]
 80148ca:	e031      	b.n	8014930 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80148cc:	7dfa      	ldrb	r2, [r7, #23]
 80148ce:	492c      	ldr	r1, [pc, #176]	@ (8014980 <etharp_output+0x200>)
 80148d0:	4613      	mov	r3, r2
 80148d2:	005b      	lsls	r3, r3, #1
 80148d4:	4413      	add	r3, r2
 80148d6:	00db      	lsls	r3, r3, #3
 80148d8:	440b      	add	r3, r1
 80148da:	3314      	adds	r3, #20
 80148dc:	781b      	ldrb	r3, [r3, #0]
 80148de:	2b01      	cmp	r3, #1
 80148e0:	d923      	bls.n	801492a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80148e2:	7dfa      	ldrb	r2, [r7, #23]
 80148e4:	4926      	ldr	r1, [pc, #152]	@ (8014980 <etharp_output+0x200>)
 80148e6:	4613      	mov	r3, r2
 80148e8:	005b      	lsls	r3, r3, #1
 80148ea:	4413      	add	r3, r2
 80148ec:	00db      	lsls	r3, r3, #3
 80148ee:	440b      	add	r3, r1
 80148f0:	3308      	adds	r3, #8
 80148f2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80148f4:	68fa      	ldr	r2, [r7, #12]
 80148f6:	429a      	cmp	r2, r3
 80148f8:	d117      	bne.n	801492a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80148fa:	69bb      	ldr	r3, [r7, #24]
 80148fc:	6819      	ldr	r1, [r3, #0]
 80148fe:	7dfa      	ldrb	r2, [r7, #23]
 8014900:	481f      	ldr	r0, [pc, #124]	@ (8014980 <etharp_output+0x200>)
 8014902:	4613      	mov	r3, r2
 8014904:	005b      	lsls	r3, r3, #1
 8014906:	4413      	add	r3, r2
 8014908:	00db      	lsls	r3, r3, #3
 801490a:	4403      	add	r3, r0
 801490c:	3304      	adds	r3, #4
 801490e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8014910:	4299      	cmp	r1, r3
 8014912:	d10a      	bne.n	801492a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8014914:	4a19      	ldr	r2, [pc, #100]	@ (801497c <etharp_output+0x1fc>)
 8014916:	7dfb      	ldrb	r3, [r7, #23]
 8014918:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801491a:	7dfb      	ldrb	r3, [r7, #23]
 801491c:	461a      	mov	r2, r3
 801491e:	68b9      	ldr	r1, [r7, #8]
 8014920:	68f8      	ldr	r0, [r7, #12]
 8014922:	f7ff fe93 	bl	801464c <etharp_output_to_arp_index>
 8014926:	4603      	mov	r3, r0
 8014928:	e018      	b.n	801495c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801492a:	7dfb      	ldrb	r3, [r7, #23]
 801492c:	3301      	adds	r3, #1
 801492e:	75fb      	strb	r3, [r7, #23]
 8014930:	7dfb      	ldrb	r3, [r7, #23]
 8014932:	2b09      	cmp	r3, #9
 8014934:	d9ca      	bls.n	80148cc <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8014936:	68ba      	ldr	r2, [r7, #8]
 8014938:	69b9      	ldr	r1, [r7, #24]
 801493a:	68f8      	ldr	r0, [r7, #12]
 801493c:	f000 f822 	bl	8014984 <etharp_query>
 8014940:	4603      	mov	r3, r0
 8014942:	e00b      	b.n	801495c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8014944:	68fb      	ldr	r3, [r7, #12]
 8014946:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801494a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801494e:	9300      	str	r3, [sp, #0]
 8014950:	69fb      	ldr	r3, [r7, #28]
 8014952:	68b9      	ldr	r1, [r7, #8]
 8014954:	68f8      	ldr	r0, [r7, #12]
 8014956:	f001 fd45 	bl	80163e4 <ethernet_output>
 801495a:	4603      	mov	r3, r0
}
 801495c:	4618      	mov	r0, r3
 801495e:	3720      	adds	r7, #32
 8014960:	46bd      	mov	sp, r7
 8014962:	bd80      	pop	{r7, pc}
 8014964:	0801ab94 	.word	0x0801ab94
 8014968:	0801ace4 	.word	0x0801ace4
 801496c:	0801ac0c 	.word	0x0801ac0c
 8014970:	0801ad34 	.word	0x0801ad34
 8014974:	0801acd4 	.word	0x0801acd4
 8014978:	0801b3d8 	.word	0x0801b3d8
 801497c:	2000c7d8 	.word	0x2000c7d8
 8014980:	2000c6e8 	.word	0x2000c6e8

08014984 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8014984:	b580      	push	{r7, lr}
 8014986:	b08c      	sub	sp, #48	@ 0x30
 8014988:	af02      	add	r7, sp, #8
 801498a:	60f8      	str	r0, [r7, #12]
 801498c:	60b9      	str	r1, [r7, #8]
 801498e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8014990:	68fb      	ldr	r3, [r7, #12]
 8014992:	3326      	adds	r3, #38	@ 0x26
 8014994:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8014996:	23ff      	movs	r3, #255	@ 0xff
 8014998:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 801499c:	2300      	movs	r3, #0
 801499e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80149a0:	68bb      	ldr	r3, [r7, #8]
 80149a2:	681b      	ldr	r3, [r3, #0]
 80149a4:	68f9      	ldr	r1, [r7, #12]
 80149a6:	4618      	mov	r0, r3
 80149a8:	f000 fe0e 	bl	80155c8 <ip4_addr_isbroadcast_u32>
 80149ac:	4603      	mov	r3, r0
 80149ae:	2b00      	cmp	r3, #0
 80149b0:	d10c      	bne.n	80149cc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80149b2:	68bb      	ldr	r3, [r7, #8]
 80149b4:	681b      	ldr	r3, [r3, #0]
 80149b6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80149ba:	2be0      	cmp	r3, #224	@ 0xe0
 80149bc:	d006      	beq.n	80149cc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80149be:	68bb      	ldr	r3, [r7, #8]
 80149c0:	2b00      	cmp	r3, #0
 80149c2:	d003      	beq.n	80149cc <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80149c4:	68bb      	ldr	r3, [r7, #8]
 80149c6:	681b      	ldr	r3, [r3, #0]
 80149c8:	2b00      	cmp	r3, #0
 80149ca:	d102      	bne.n	80149d2 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80149cc:	f06f 030f 	mvn.w	r3, #15
 80149d0:	e101      	b.n	8014bd6 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80149d2:	68fa      	ldr	r2, [r7, #12]
 80149d4:	2101      	movs	r1, #1
 80149d6:	68b8      	ldr	r0, [r7, #8]
 80149d8:	f7ff fb90 	bl	80140fc <etharp_find_entry>
 80149dc:	4603      	mov	r3, r0
 80149de:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80149e0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80149e4:	2b00      	cmp	r3, #0
 80149e6:	da02      	bge.n	80149ee <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80149e8:	8a7b      	ldrh	r3, [r7, #18]
 80149ea:	b25b      	sxtb	r3, r3
 80149ec:	e0f3      	b.n	8014bd6 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80149ee:	8a7b      	ldrh	r3, [r7, #18]
 80149f0:	2b7e      	cmp	r3, #126	@ 0x7e
 80149f2:	d906      	bls.n	8014a02 <etharp_query+0x7e>
 80149f4:	4b7a      	ldr	r3, [pc, #488]	@ (8014be0 <etharp_query+0x25c>)
 80149f6:	f240 32c1 	movw	r2, #961	@ 0x3c1
 80149fa:	497a      	ldr	r1, [pc, #488]	@ (8014be4 <etharp_query+0x260>)
 80149fc:	487a      	ldr	r0, [pc, #488]	@ (8014be8 <etharp_query+0x264>)
 80149fe:	f002 fc69 	bl	80172d4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8014a02:	8a7b      	ldrh	r3, [r7, #18]
 8014a04:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8014a06:	7c7a      	ldrb	r2, [r7, #17]
 8014a08:	4978      	ldr	r1, [pc, #480]	@ (8014bec <etharp_query+0x268>)
 8014a0a:	4613      	mov	r3, r2
 8014a0c:	005b      	lsls	r3, r3, #1
 8014a0e:	4413      	add	r3, r2
 8014a10:	00db      	lsls	r3, r3, #3
 8014a12:	440b      	add	r3, r1
 8014a14:	3314      	adds	r3, #20
 8014a16:	781b      	ldrb	r3, [r3, #0]
 8014a18:	2b00      	cmp	r3, #0
 8014a1a:	d115      	bne.n	8014a48 <etharp_query+0xc4>
    is_new_entry = 1;
 8014a1c:	2301      	movs	r3, #1
 8014a1e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8014a20:	7c7a      	ldrb	r2, [r7, #17]
 8014a22:	4972      	ldr	r1, [pc, #456]	@ (8014bec <etharp_query+0x268>)
 8014a24:	4613      	mov	r3, r2
 8014a26:	005b      	lsls	r3, r3, #1
 8014a28:	4413      	add	r3, r2
 8014a2a:	00db      	lsls	r3, r3, #3
 8014a2c:	440b      	add	r3, r1
 8014a2e:	3314      	adds	r3, #20
 8014a30:	2201      	movs	r2, #1
 8014a32:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8014a34:	7c7a      	ldrb	r2, [r7, #17]
 8014a36:	496d      	ldr	r1, [pc, #436]	@ (8014bec <etharp_query+0x268>)
 8014a38:	4613      	mov	r3, r2
 8014a3a:	005b      	lsls	r3, r3, #1
 8014a3c:	4413      	add	r3, r2
 8014a3e:	00db      	lsls	r3, r3, #3
 8014a40:	440b      	add	r3, r1
 8014a42:	3308      	adds	r3, #8
 8014a44:	68fa      	ldr	r2, [r7, #12]
 8014a46:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8014a48:	7c7a      	ldrb	r2, [r7, #17]
 8014a4a:	4968      	ldr	r1, [pc, #416]	@ (8014bec <etharp_query+0x268>)
 8014a4c:	4613      	mov	r3, r2
 8014a4e:	005b      	lsls	r3, r3, #1
 8014a50:	4413      	add	r3, r2
 8014a52:	00db      	lsls	r3, r3, #3
 8014a54:	440b      	add	r3, r1
 8014a56:	3314      	adds	r3, #20
 8014a58:	781b      	ldrb	r3, [r3, #0]
 8014a5a:	2b01      	cmp	r3, #1
 8014a5c:	d011      	beq.n	8014a82 <etharp_query+0xfe>
 8014a5e:	7c7a      	ldrb	r2, [r7, #17]
 8014a60:	4962      	ldr	r1, [pc, #392]	@ (8014bec <etharp_query+0x268>)
 8014a62:	4613      	mov	r3, r2
 8014a64:	005b      	lsls	r3, r3, #1
 8014a66:	4413      	add	r3, r2
 8014a68:	00db      	lsls	r3, r3, #3
 8014a6a:	440b      	add	r3, r1
 8014a6c:	3314      	adds	r3, #20
 8014a6e:	781b      	ldrb	r3, [r3, #0]
 8014a70:	2b01      	cmp	r3, #1
 8014a72:	d806      	bhi.n	8014a82 <etharp_query+0xfe>
 8014a74:	4b5a      	ldr	r3, [pc, #360]	@ (8014be0 <etharp_query+0x25c>)
 8014a76:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8014a7a:	495d      	ldr	r1, [pc, #372]	@ (8014bf0 <etharp_query+0x26c>)
 8014a7c:	485a      	ldr	r0, [pc, #360]	@ (8014be8 <etharp_query+0x264>)
 8014a7e:	f002 fc29 	bl	80172d4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8014a82:	6a3b      	ldr	r3, [r7, #32]
 8014a84:	2b00      	cmp	r3, #0
 8014a86:	d102      	bne.n	8014a8e <etharp_query+0x10a>
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	2b00      	cmp	r3, #0
 8014a8c:	d10c      	bne.n	8014aa8 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8014a8e:	68b9      	ldr	r1, [r7, #8]
 8014a90:	68f8      	ldr	r0, [r7, #12]
 8014a92:	f000 f963 	bl	8014d5c <etharp_request>
 8014a96:	4603      	mov	r3, r0
 8014a98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	2b00      	cmp	r3, #0
 8014aa0:	d102      	bne.n	8014aa8 <etharp_query+0x124>
      return result;
 8014aa2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8014aa6:	e096      	b.n	8014bd6 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8014aa8:	687b      	ldr	r3, [r7, #4]
 8014aaa:	2b00      	cmp	r3, #0
 8014aac:	d106      	bne.n	8014abc <etharp_query+0x138>
 8014aae:	4b4c      	ldr	r3, [pc, #304]	@ (8014be0 <etharp_query+0x25c>)
 8014ab0:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8014ab4:	494f      	ldr	r1, [pc, #316]	@ (8014bf4 <etharp_query+0x270>)
 8014ab6:	484c      	ldr	r0, [pc, #304]	@ (8014be8 <etharp_query+0x264>)
 8014ab8:	f002 fc0c 	bl	80172d4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8014abc:	7c7a      	ldrb	r2, [r7, #17]
 8014abe:	494b      	ldr	r1, [pc, #300]	@ (8014bec <etharp_query+0x268>)
 8014ac0:	4613      	mov	r3, r2
 8014ac2:	005b      	lsls	r3, r3, #1
 8014ac4:	4413      	add	r3, r2
 8014ac6:	00db      	lsls	r3, r3, #3
 8014ac8:	440b      	add	r3, r1
 8014aca:	3314      	adds	r3, #20
 8014acc:	781b      	ldrb	r3, [r3, #0]
 8014ace:	2b01      	cmp	r3, #1
 8014ad0:	d917      	bls.n	8014b02 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8014ad2:	4a49      	ldr	r2, [pc, #292]	@ (8014bf8 <etharp_query+0x274>)
 8014ad4:	7c7b      	ldrb	r3, [r7, #17]
 8014ad6:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8014ad8:	7c7a      	ldrb	r2, [r7, #17]
 8014ada:	4613      	mov	r3, r2
 8014adc:	005b      	lsls	r3, r3, #1
 8014ade:	4413      	add	r3, r2
 8014ae0:	00db      	lsls	r3, r3, #3
 8014ae2:	3308      	adds	r3, #8
 8014ae4:	4a41      	ldr	r2, [pc, #260]	@ (8014bec <etharp_query+0x268>)
 8014ae6:	4413      	add	r3, r2
 8014ae8:	3304      	adds	r3, #4
 8014aea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8014aee:	9200      	str	r2, [sp, #0]
 8014af0:	697a      	ldr	r2, [r7, #20]
 8014af2:	6879      	ldr	r1, [r7, #4]
 8014af4:	68f8      	ldr	r0, [r7, #12]
 8014af6:	f001 fc75 	bl	80163e4 <ethernet_output>
 8014afa:	4603      	mov	r3, r0
 8014afc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014b00:	e067      	b.n	8014bd2 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014b02:	7c7a      	ldrb	r2, [r7, #17]
 8014b04:	4939      	ldr	r1, [pc, #228]	@ (8014bec <etharp_query+0x268>)
 8014b06:	4613      	mov	r3, r2
 8014b08:	005b      	lsls	r3, r3, #1
 8014b0a:	4413      	add	r3, r2
 8014b0c:	00db      	lsls	r3, r3, #3
 8014b0e:	440b      	add	r3, r1
 8014b10:	3314      	adds	r3, #20
 8014b12:	781b      	ldrb	r3, [r3, #0]
 8014b14:	2b01      	cmp	r3, #1
 8014b16:	d15c      	bne.n	8014bd2 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8014b18:	2300      	movs	r3, #0
 8014b1a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8014b1c:	687b      	ldr	r3, [r7, #4]
 8014b1e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014b20:	e01c      	b.n	8014b5c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8014b22:	69fb      	ldr	r3, [r7, #28]
 8014b24:	895a      	ldrh	r2, [r3, #10]
 8014b26:	69fb      	ldr	r3, [r7, #28]
 8014b28:	891b      	ldrh	r3, [r3, #8]
 8014b2a:	429a      	cmp	r2, r3
 8014b2c:	d10a      	bne.n	8014b44 <etharp_query+0x1c0>
 8014b2e:	69fb      	ldr	r3, [r7, #28]
 8014b30:	681b      	ldr	r3, [r3, #0]
 8014b32:	2b00      	cmp	r3, #0
 8014b34:	d006      	beq.n	8014b44 <etharp_query+0x1c0>
 8014b36:	4b2a      	ldr	r3, [pc, #168]	@ (8014be0 <etharp_query+0x25c>)
 8014b38:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8014b3c:	492f      	ldr	r1, [pc, #188]	@ (8014bfc <etharp_query+0x278>)
 8014b3e:	482a      	ldr	r0, [pc, #168]	@ (8014be8 <etharp_query+0x264>)
 8014b40:	f002 fbc8 	bl	80172d4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8014b44:	69fb      	ldr	r3, [r7, #28]
 8014b46:	7b1b      	ldrb	r3, [r3, #12]
 8014b48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014b4c:	2b00      	cmp	r3, #0
 8014b4e:	d002      	beq.n	8014b56 <etharp_query+0x1d2>
        copy_needed = 1;
 8014b50:	2301      	movs	r3, #1
 8014b52:	61bb      	str	r3, [r7, #24]
        break;
 8014b54:	e005      	b.n	8014b62 <etharp_query+0x1de>
      }
      p = p->next;
 8014b56:	69fb      	ldr	r3, [r7, #28]
 8014b58:	681b      	ldr	r3, [r3, #0]
 8014b5a:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014b5c:	69fb      	ldr	r3, [r7, #28]
 8014b5e:	2b00      	cmp	r3, #0
 8014b60:	d1df      	bne.n	8014b22 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8014b62:	69bb      	ldr	r3, [r7, #24]
 8014b64:	2b00      	cmp	r3, #0
 8014b66:	d007      	beq.n	8014b78 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8014b68:	687a      	ldr	r2, [r7, #4]
 8014b6a:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8014b6e:	200e      	movs	r0, #14
 8014b70:	f7f9 fd2c 	bl	800e5cc <pbuf_clone>
 8014b74:	61f8      	str	r0, [r7, #28]
 8014b76:	e004      	b.n	8014b82 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8014b78:	687b      	ldr	r3, [r7, #4]
 8014b7a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8014b7c:	69f8      	ldr	r0, [r7, #28]
 8014b7e:	f7f9 fb63 	bl	800e248 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8014b82:	69fb      	ldr	r3, [r7, #28]
 8014b84:	2b00      	cmp	r3, #0
 8014b86:	d021      	beq.n	8014bcc <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8014b88:	7c7a      	ldrb	r2, [r7, #17]
 8014b8a:	4918      	ldr	r1, [pc, #96]	@ (8014bec <etharp_query+0x268>)
 8014b8c:	4613      	mov	r3, r2
 8014b8e:	005b      	lsls	r3, r3, #1
 8014b90:	4413      	add	r3, r2
 8014b92:	00db      	lsls	r3, r3, #3
 8014b94:	440b      	add	r3, r1
 8014b96:	681b      	ldr	r3, [r3, #0]
 8014b98:	2b00      	cmp	r3, #0
 8014b9a:	d00a      	beq.n	8014bb2 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8014b9c:	7c7a      	ldrb	r2, [r7, #17]
 8014b9e:	4913      	ldr	r1, [pc, #76]	@ (8014bec <etharp_query+0x268>)
 8014ba0:	4613      	mov	r3, r2
 8014ba2:	005b      	lsls	r3, r3, #1
 8014ba4:	4413      	add	r3, r2
 8014ba6:	00db      	lsls	r3, r3, #3
 8014ba8:	440b      	add	r3, r1
 8014baa:	681b      	ldr	r3, [r3, #0]
 8014bac:	4618      	mov	r0, r3
 8014bae:	f7f9 faa5 	bl	800e0fc <pbuf_free>
      }
      arp_table[i].q = p;
 8014bb2:	7c7a      	ldrb	r2, [r7, #17]
 8014bb4:	490d      	ldr	r1, [pc, #52]	@ (8014bec <etharp_query+0x268>)
 8014bb6:	4613      	mov	r3, r2
 8014bb8:	005b      	lsls	r3, r3, #1
 8014bba:	4413      	add	r3, r2
 8014bbc:	00db      	lsls	r3, r3, #3
 8014bbe:	440b      	add	r3, r1
 8014bc0:	69fa      	ldr	r2, [r7, #28]
 8014bc2:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8014bc4:	2300      	movs	r3, #0
 8014bc6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014bca:	e002      	b.n	8014bd2 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8014bcc:	23ff      	movs	r3, #255	@ 0xff
 8014bce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8014bd2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8014bd6:	4618      	mov	r0, r3
 8014bd8:	3728      	adds	r7, #40	@ 0x28
 8014bda:	46bd      	mov	sp, r7
 8014bdc:	bd80      	pop	{r7, pc}
 8014bde:	bf00      	nop
 8014be0:	0801ab94 	.word	0x0801ab94
 8014be4:	0801ad40 	.word	0x0801ad40
 8014be8:	0801ac0c 	.word	0x0801ac0c
 8014bec:	2000c6e8 	.word	0x2000c6e8
 8014bf0:	0801ad50 	.word	0x0801ad50
 8014bf4:	0801ad34 	.word	0x0801ad34
 8014bf8:	2000c7d8 	.word	0x2000c7d8
 8014bfc:	0801ad78 	.word	0x0801ad78

08014c00 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8014c00:	b580      	push	{r7, lr}
 8014c02:	b08a      	sub	sp, #40	@ 0x28
 8014c04:	af02      	add	r7, sp, #8
 8014c06:	60f8      	str	r0, [r7, #12]
 8014c08:	60b9      	str	r1, [r7, #8]
 8014c0a:	607a      	str	r2, [r7, #4]
 8014c0c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8014c0e:	2300      	movs	r3, #0
 8014c10:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014c12:	68fb      	ldr	r3, [r7, #12]
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	d106      	bne.n	8014c26 <etharp_raw+0x26>
 8014c18:	4b3a      	ldr	r3, [pc, #232]	@ (8014d04 <etharp_raw+0x104>)
 8014c1a:	f240 4257 	movw	r2, #1111	@ 0x457
 8014c1e:	493a      	ldr	r1, [pc, #232]	@ (8014d08 <etharp_raw+0x108>)
 8014c20:	483a      	ldr	r0, [pc, #232]	@ (8014d0c <etharp_raw+0x10c>)
 8014c22:	f002 fb57 	bl	80172d4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8014c26:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014c2a:	211c      	movs	r1, #28
 8014c2c:	200e      	movs	r0, #14
 8014c2e:	f7f8 ff81 	bl	800db34 <pbuf_alloc>
 8014c32:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8014c34:	69bb      	ldr	r3, [r7, #24]
 8014c36:	2b00      	cmp	r3, #0
 8014c38:	d102      	bne.n	8014c40 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8014c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8014c3e:	e05d      	b.n	8014cfc <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8014c40:	69bb      	ldr	r3, [r7, #24]
 8014c42:	895b      	ldrh	r3, [r3, #10]
 8014c44:	2b1b      	cmp	r3, #27
 8014c46:	d806      	bhi.n	8014c56 <etharp_raw+0x56>
 8014c48:	4b2e      	ldr	r3, [pc, #184]	@ (8014d04 <etharp_raw+0x104>)
 8014c4a:	f240 4262 	movw	r2, #1122	@ 0x462
 8014c4e:	4930      	ldr	r1, [pc, #192]	@ (8014d10 <etharp_raw+0x110>)
 8014c50:	482e      	ldr	r0, [pc, #184]	@ (8014d0c <etharp_raw+0x10c>)
 8014c52:	f002 fb3f 	bl	80172d4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8014c56:	69bb      	ldr	r3, [r7, #24]
 8014c58:	685b      	ldr	r3, [r3, #4]
 8014c5a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8014c5c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8014c5e:	4618      	mov	r0, r3
 8014c60:	f7f7 fe8c 	bl	800c97c <lwip_htons>
 8014c64:	4603      	mov	r3, r0
 8014c66:	461a      	mov	r2, r3
 8014c68:	697b      	ldr	r3, [r7, #20]
 8014c6a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8014c6c:	68fb      	ldr	r3, [r7, #12]
 8014c6e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8014c72:	2b06      	cmp	r3, #6
 8014c74:	d006      	beq.n	8014c84 <etharp_raw+0x84>
 8014c76:	4b23      	ldr	r3, [pc, #140]	@ (8014d04 <etharp_raw+0x104>)
 8014c78:	f240 4269 	movw	r2, #1129	@ 0x469
 8014c7c:	4925      	ldr	r1, [pc, #148]	@ (8014d14 <etharp_raw+0x114>)
 8014c7e:	4823      	ldr	r0, [pc, #140]	@ (8014d0c <etharp_raw+0x10c>)
 8014c80:	f002 fb28 	bl	80172d4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8014c84:	697b      	ldr	r3, [r7, #20]
 8014c86:	3308      	adds	r3, #8
 8014c88:	2206      	movs	r2, #6
 8014c8a:	6839      	ldr	r1, [r7, #0]
 8014c8c:	4618      	mov	r0, r3
 8014c8e:	f002 fcaa 	bl	80175e6 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8014c92:	697b      	ldr	r3, [r7, #20]
 8014c94:	3312      	adds	r3, #18
 8014c96:	2206      	movs	r2, #6
 8014c98:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014c9a:	4618      	mov	r0, r3
 8014c9c:	f002 fca3 	bl	80175e6 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8014ca0:	697b      	ldr	r3, [r7, #20]
 8014ca2:	330e      	adds	r3, #14
 8014ca4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014ca6:	6812      	ldr	r2, [r2, #0]
 8014ca8:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8014caa:	697b      	ldr	r3, [r7, #20]
 8014cac:	3318      	adds	r3, #24
 8014cae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014cb0:	6812      	ldr	r2, [r2, #0]
 8014cb2:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8014cb4:	697b      	ldr	r3, [r7, #20]
 8014cb6:	2200      	movs	r2, #0
 8014cb8:	701a      	strb	r2, [r3, #0]
 8014cba:	2200      	movs	r2, #0
 8014cbc:	f042 0201 	orr.w	r2, r2, #1
 8014cc0:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8014cc2:	697b      	ldr	r3, [r7, #20]
 8014cc4:	2200      	movs	r2, #0
 8014cc6:	f042 0208 	orr.w	r2, r2, #8
 8014cca:	709a      	strb	r2, [r3, #2]
 8014ccc:	2200      	movs	r2, #0
 8014cce:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8014cd0:	697b      	ldr	r3, [r7, #20]
 8014cd2:	2206      	movs	r2, #6
 8014cd4:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8014cd6:	697b      	ldr	r3, [r7, #20]
 8014cd8:	2204      	movs	r2, #4
 8014cda:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8014cdc:	f640 0306 	movw	r3, #2054	@ 0x806
 8014ce0:	9300      	str	r3, [sp, #0]
 8014ce2:	687b      	ldr	r3, [r7, #4]
 8014ce4:	68ba      	ldr	r2, [r7, #8]
 8014ce6:	69b9      	ldr	r1, [r7, #24]
 8014ce8:	68f8      	ldr	r0, [r7, #12]
 8014cea:	f001 fb7b 	bl	80163e4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8014cee:	69b8      	ldr	r0, [r7, #24]
 8014cf0:	f7f9 fa04 	bl	800e0fc <pbuf_free>
  p = NULL;
 8014cf4:	2300      	movs	r3, #0
 8014cf6:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8014cf8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014cfc:	4618      	mov	r0, r3
 8014cfe:	3720      	adds	r7, #32
 8014d00:	46bd      	mov	sp, r7
 8014d02:	bd80      	pop	{r7, pc}
 8014d04:	0801ab94 	.word	0x0801ab94
 8014d08:	0801ace4 	.word	0x0801ace4
 8014d0c:	0801ac0c 	.word	0x0801ac0c
 8014d10:	0801ad94 	.word	0x0801ad94
 8014d14:	0801adc8 	.word	0x0801adc8

08014d18 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8014d18:	b580      	push	{r7, lr}
 8014d1a:	b088      	sub	sp, #32
 8014d1c:	af04      	add	r7, sp, #16
 8014d1e:	60f8      	str	r0, [r7, #12]
 8014d20:	60b9      	str	r1, [r7, #8]
 8014d22:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014d24:	68fb      	ldr	r3, [r7, #12]
 8014d26:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8014d2a:	68fb      	ldr	r3, [r7, #12]
 8014d2c:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8014d30:	68fb      	ldr	r3, [r7, #12]
 8014d32:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014d34:	2201      	movs	r2, #1
 8014d36:	9203      	str	r2, [sp, #12]
 8014d38:	68ba      	ldr	r2, [r7, #8]
 8014d3a:	9202      	str	r2, [sp, #8]
 8014d3c:	4a06      	ldr	r2, [pc, #24]	@ (8014d58 <etharp_request_dst+0x40>)
 8014d3e:	9201      	str	r2, [sp, #4]
 8014d40:	9300      	str	r3, [sp, #0]
 8014d42:	4603      	mov	r3, r0
 8014d44:	687a      	ldr	r2, [r7, #4]
 8014d46:	68f8      	ldr	r0, [r7, #12]
 8014d48:	f7ff ff5a 	bl	8014c00 <etharp_raw>
 8014d4c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8014d4e:	4618      	mov	r0, r3
 8014d50:	3710      	adds	r7, #16
 8014d52:	46bd      	mov	sp, r7
 8014d54:	bd80      	pop	{r7, pc}
 8014d56:	bf00      	nop
 8014d58:	0801b3e0 	.word	0x0801b3e0

08014d5c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8014d5c:	b580      	push	{r7, lr}
 8014d5e:	b082      	sub	sp, #8
 8014d60:	af00      	add	r7, sp, #0
 8014d62:	6078      	str	r0, [r7, #4]
 8014d64:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8014d66:	4a05      	ldr	r2, [pc, #20]	@ (8014d7c <etharp_request+0x20>)
 8014d68:	6839      	ldr	r1, [r7, #0]
 8014d6a:	6878      	ldr	r0, [r7, #4]
 8014d6c:	f7ff ffd4 	bl	8014d18 <etharp_request_dst>
 8014d70:	4603      	mov	r3, r0
}
 8014d72:	4618      	mov	r0, r3
 8014d74:	3708      	adds	r7, #8
 8014d76:	46bd      	mov	sp, r7
 8014d78:	bd80      	pop	{r7, pc}
 8014d7a:	bf00      	nop
 8014d7c:	0801b3d8 	.word	0x0801b3d8

08014d80 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8014d80:	b580      	push	{r7, lr}
 8014d82:	b08e      	sub	sp, #56	@ 0x38
 8014d84:	af04      	add	r7, sp, #16
 8014d86:	6078      	str	r0, [r7, #4]
 8014d88:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8014d8a:	4b79      	ldr	r3, [pc, #484]	@ (8014f70 <icmp_input+0x1f0>)
 8014d8c:	689b      	ldr	r3, [r3, #8]
 8014d8e:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8014d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d92:	781b      	ldrb	r3, [r3, #0]
 8014d94:	f003 030f 	and.w	r3, r3, #15
 8014d98:	b2db      	uxtb	r3, r3
 8014d9a:	009b      	lsls	r3, r3, #2
 8014d9c:	b2db      	uxtb	r3, r3
 8014d9e:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8014da0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014da2:	2b13      	cmp	r3, #19
 8014da4:	f240 80cd 	bls.w	8014f42 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	895b      	ldrh	r3, [r3, #10]
 8014dac:	2b03      	cmp	r3, #3
 8014dae:	f240 80ca 	bls.w	8014f46 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8014db2:	687b      	ldr	r3, [r7, #4]
 8014db4:	685b      	ldr	r3, [r3, #4]
 8014db6:	781b      	ldrb	r3, [r3, #0]
 8014db8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8014dbc:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	f000 80b7 	beq.w	8014f34 <icmp_input+0x1b4>
 8014dc6:	2b08      	cmp	r3, #8
 8014dc8:	f040 80b7 	bne.w	8014f3a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8014dcc:	4b69      	ldr	r3, [pc, #420]	@ (8014f74 <icmp_input+0x1f4>)
 8014dce:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014dd0:	4b67      	ldr	r3, [pc, #412]	@ (8014f70 <icmp_input+0x1f0>)
 8014dd2:	695b      	ldr	r3, [r3, #20]
 8014dd4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8014dd8:	2be0      	cmp	r3, #224	@ 0xe0
 8014dda:	f000 80bb 	beq.w	8014f54 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8014dde:	4b64      	ldr	r3, [pc, #400]	@ (8014f70 <icmp_input+0x1f0>)
 8014de0:	695b      	ldr	r3, [r3, #20]
 8014de2:	4a63      	ldr	r2, [pc, #396]	@ (8014f70 <icmp_input+0x1f0>)
 8014de4:	6812      	ldr	r2, [r2, #0]
 8014de6:	4611      	mov	r1, r2
 8014de8:	4618      	mov	r0, r3
 8014dea:	f000 fbed 	bl	80155c8 <ip4_addr_isbroadcast_u32>
 8014dee:	4603      	mov	r3, r0
 8014df0:	2b00      	cmp	r3, #0
 8014df2:	f040 80b1 	bne.w	8014f58 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8014df6:	687b      	ldr	r3, [r7, #4]
 8014df8:	891b      	ldrh	r3, [r3, #8]
 8014dfa:	2b07      	cmp	r3, #7
 8014dfc:	f240 80a5 	bls.w	8014f4a <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014e00:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014e02:	330e      	adds	r3, #14
 8014e04:	4619      	mov	r1, r3
 8014e06:	6878      	ldr	r0, [r7, #4]
 8014e08:	f7f9 f8e2 	bl	800dfd0 <pbuf_add_header>
 8014e0c:	4603      	mov	r3, r0
 8014e0e:	2b00      	cmp	r3, #0
 8014e10:	d04b      	beq.n	8014eaa <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8014e12:	687b      	ldr	r3, [r7, #4]
 8014e14:	891a      	ldrh	r2, [r3, #8]
 8014e16:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014e18:	4413      	add	r3, r2
 8014e1a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8014e1c:	687b      	ldr	r3, [r7, #4]
 8014e1e:	891b      	ldrh	r3, [r3, #8]
 8014e20:	8b7a      	ldrh	r2, [r7, #26]
 8014e22:	429a      	cmp	r2, r3
 8014e24:	f0c0 809a 	bcc.w	8014f5c <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8014e28:	8b7b      	ldrh	r3, [r7, #26]
 8014e2a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014e2e:	4619      	mov	r1, r3
 8014e30:	200e      	movs	r0, #14
 8014e32:	f7f8 fe7f 	bl	800db34 <pbuf_alloc>
 8014e36:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8014e38:	697b      	ldr	r3, [r7, #20]
 8014e3a:	2b00      	cmp	r3, #0
 8014e3c:	f000 8090 	beq.w	8014f60 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8014e40:	697b      	ldr	r3, [r7, #20]
 8014e42:	895b      	ldrh	r3, [r3, #10]
 8014e44:	461a      	mov	r2, r3
 8014e46:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014e48:	3308      	adds	r3, #8
 8014e4a:	429a      	cmp	r2, r3
 8014e4c:	d203      	bcs.n	8014e56 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8014e4e:	6978      	ldr	r0, [r7, #20]
 8014e50:	f7f9 f954 	bl	800e0fc <pbuf_free>
          goto icmperr;
 8014e54:	e085      	b.n	8014f62 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8014e56:	697b      	ldr	r3, [r7, #20]
 8014e58:	685b      	ldr	r3, [r3, #4]
 8014e5a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8014e5c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014e5e:	4618      	mov	r0, r3
 8014e60:	f002 fbc1 	bl	80175e6 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8014e64:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014e66:	4619      	mov	r1, r3
 8014e68:	6978      	ldr	r0, [r7, #20]
 8014e6a:	f7f9 f8c1 	bl	800dff0 <pbuf_remove_header>
 8014e6e:	4603      	mov	r3, r0
 8014e70:	2b00      	cmp	r3, #0
 8014e72:	d009      	beq.n	8014e88 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8014e74:	4b40      	ldr	r3, [pc, #256]	@ (8014f78 <icmp_input+0x1f8>)
 8014e76:	22b6      	movs	r2, #182	@ 0xb6
 8014e78:	4940      	ldr	r1, [pc, #256]	@ (8014f7c <icmp_input+0x1fc>)
 8014e7a:	4841      	ldr	r0, [pc, #260]	@ (8014f80 <icmp_input+0x200>)
 8014e7c:	f002 fa2a 	bl	80172d4 <iprintf>
          pbuf_free(r);
 8014e80:	6978      	ldr	r0, [r7, #20]
 8014e82:	f7f9 f93b 	bl	800e0fc <pbuf_free>
          goto icmperr;
 8014e86:	e06c      	b.n	8014f62 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8014e88:	6879      	ldr	r1, [r7, #4]
 8014e8a:	6978      	ldr	r0, [r7, #20]
 8014e8c:	f7f9 fa5a 	bl	800e344 <pbuf_copy>
 8014e90:	4603      	mov	r3, r0
 8014e92:	2b00      	cmp	r3, #0
 8014e94:	d003      	beq.n	8014e9e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8014e96:	6978      	ldr	r0, [r7, #20]
 8014e98:	f7f9 f930 	bl	800e0fc <pbuf_free>
          goto icmperr;
 8014e9c:	e061      	b.n	8014f62 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8014e9e:	6878      	ldr	r0, [r7, #4]
 8014ea0:	f7f9 f92c 	bl	800e0fc <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8014ea4:	697b      	ldr	r3, [r7, #20]
 8014ea6:	607b      	str	r3, [r7, #4]
 8014ea8:	e00f      	b.n	8014eca <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014eaa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014eac:	330e      	adds	r3, #14
 8014eae:	4619      	mov	r1, r3
 8014eb0:	6878      	ldr	r0, [r7, #4]
 8014eb2:	f7f9 f89d 	bl	800dff0 <pbuf_remove_header>
 8014eb6:	4603      	mov	r3, r0
 8014eb8:	2b00      	cmp	r3, #0
 8014eba:	d006      	beq.n	8014eca <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8014ebc:	4b2e      	ldr	r3, [pc, #184]	@ (8014f78 <icmp_input+0x1f8>)
 8014ebe:	22c7      	movs	r2, #199	@ 0xc7
 8014ec0:	4930      	ldr	r1, [pc, #192]	@ (8014f84 <icmp_input+0x204>)
 8014ec2:	482f      	ldr	r0, [pc, #188]	@ (8014f80 <icmp_input+0x200>)
 8014ec4:	f002 fa06 	bl	80172d4 <iprintf>
          goto icmperr;
 8014ec8:	e04b      	b.n	8014f62 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8014eca:	687b      	ldr	r3, [r7, #4]
 8014ecc:	685b      	ldr	r3, [r3, #4]
 8014ece:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8014ed0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014ed2:	4619      	mov	r1, r3
 8014ed4:	6878      	ldr	r0, [r7, #4]
 8014ed6:	f7f9 f87b 	bl	800dfd0 <pbuf_add_header>
 8014eda:	4603      	mov	r3, r0
 8014edc:	2b00      	cmp	r3, #0
 8014ede:	d12b      	bne.n	8014f38 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8014ee0:	687b      	ldr	r3, [r7, #4]
 8014ee2:	685b      	ldr	r3, [r3, #4]
 8014ee4:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8014ee6:	69fb      	ldr	r3, [r7, #28]
 8014ee8:	681a      	ldr	r2, [r3, #0]
 8014eea:	68fb      	ldr	r3, [r7, #12]
 8014eec:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8014eee:	4b20      	ldr	r3, [pc, #128]	@ (8014f70 <icmp_input+0x1f0>)
 8014ef0:	691a      	ldr	r2, [r3, #16]
 8014ef2:	68fb      	ldr	r3, [r7, #12]
 8014ef4:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8014ef6:	693b      	ldr	r3, [r7, #16]
 8014ef8:	2200      	movs	r2, #0
 8014efa:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8014efc:	693b      	ldr	r3, [r7, #16]
 8014efe:	2200      	movs	r2, #0
 8014f00:	709a      	strb	r2, [r3, #2]
 8014f02:	2200      	movs	r2, #0
 8014f04:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8014f06:	68fb      	ldr	r3, [r7, #12]
 8014f08:	22ff      	movs	r2, #255	@ 0xff
 8014f0a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8014f0c:	68fb      	ldr	r3, [r7, #12]
 8014f0e:	2200      	movs	r2, #0
 8014f10:	729a      	strb	r2, [r3, #10]
 8014f12:	2200      	movs	r2, #0
 8014f14:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8014f16:	683b      	ldr	r3, [r7, #0]
 8014f18:	9302      	str	r3, [sp, #8]
 8014f1a:	2301      	movs	r3, #1
 8014f1c:	9301      	str	r3, [sp, #4]
 8014f1e:	2300      	movs	r3, #0
 8014f20:	9300      	str	r3, [sp, #0]
 8014f22:	23ff      	movs	r3, #255	@ 0xff
 8014f24:	2200      	movs	r2, #0
 8014f26:	69f9      	ldr	r1, [r7, #28]
 8014f28:	6878      	ldr	r0, [r7, #4]
 8014f2a:	f000 fa75 	bl	8015418 <ip4_output_if>
 8014f2e:	4603      	mov	r3, r0
 8014f30:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8014f32:	e001      	b.n	8014f38 <icmp_input+0x1b8>
      break;
 8014f34:	bf00      	nop
 8014f36:	e000      	b.n	8014f3a <icmp_input+0x1ba>
      break;
 8014f38:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8014f3a:	6878      	ldr	r0, [r7, #4]
 8014f3c:	f7f9 f8de 	bl	800e0fc <pbuf_free>
  return;
 8014f40:	e013      	b.n	8014f6a <icmp_input+0x1ea>
    goto lenerr;
 8014f42:	bf00      	nop
 8014f44:	e002      	b.n	8014f4c <icmp_input+0x1cc>
    goto lenerr;
 8014f46:	bf00      	nop
 8014f48:	e000      	b.n	8014f4c <icmp_input+0x1cc>
        goto lenerr;
 8014f4a:	bf00      	nop
lenerr:
  pbuf_free(p);
 8014f4c:	6878      	ldr	r0, [r7, #4]
 8014f4e:	f7f9 f8d5 	bl	800e0fc <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014f52:	e00a      	b.n	8014f6a <icmp_input+0x1ea>
        goto icmperr;
 8014f54:	bf00      	nop
 8014f56:	e004      	b.n	8014f62 <icmp_input+0x1e2>
        goto icmperr;
 8014f58:	bf00      	nop
 8014f5a:	e002      	b.n	8014f62 <icmp_input+0x1e2>
          goto icmperr;
 8014f5c:	bf00      	nop
 8014f5e:	e000      	b.n	8014f62 <icmp_input+0x1e2>
          goto icmperr;
 8014f60:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8014f62:	6878      	ldr	r0, [r7, #4]
 8014f64:	f7f9 f8ca 	bl	800e0fc <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014f68:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8014f6a:	3728      	adds	r7, #40	@ 0x28
 8014f6c:	46bd      	mov	sp, r7
 8014f6e:	bd80      	pop	{r7, pc}
 8014f70:	20008f34 	.word	0x20008f34
 8014f74:	20008f48 	.word	0x20008f48
 8014f78:	0801ae0c 	.word	0x0801ae0c
 8014f7c:	0801ae44 	.word	0x0801ae44
 8014f80:	0801ae7c 	.word	0x0801ae7c
 8014f84:	0801aea4 	.word	0x0801aea4

08014f88 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8014f88:	b580      	push	{r7, lr}
 8014f8a:	b082      	sub	sp, #8
 8014f8c:	af00      	add	r7, sp, #0
 8014f8e:	6078      	str	r0, [r7, #4]
 8014f90:	460b      	mov	r3, r1
 8014f92:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8014f94:	78fb      	ldrb	r3, [r7, #3]
 8014f96:	461a      	mov	r2, r3
 8014f98:	2103      	movs	r1, #3
 8014f9a:	6878      	ldr	r0, [r7, #4]
 8014f9c:	f000 f814 	bl	8014fc8 <icmp_send_response>
}
 8014fa0:	bf00      	nop
 8014fa2:	3708      	adds	r7, #8
 8014fa4:	46bd      	mov	sp, r7
 8014fa6:	bd80      	pop	{r7, pc}

08014fa8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8014fa8:	b580      	push	{r7, lr}
 8014faa:	b082      	sub	sp, #8
 8014fac:	af00      	add	r7, sp, #0
 8014fae:	6078      	str	r0, [r7, #4]
 8014fb0:	460b      	mov	r3, r1
 8014fb2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8014fb4:	78fb      	ldrb	r3, [r7, #3]
 8014fb6:	461a      	mov	r2, r3
 8014fb8:	210b      	movs	r1, #11
 8014fba:	6878      	ldr	r0, [r7, #4]
 8014fbc:	f000 f804 	bl	8014fc8 <icmp_send_response>
}
 8014fc0:	bf00      	nop
 8014fc2:	3708      	adds	r7, #8
 8014fc4:	46bd      	mov	sp, r7
 8014fc6:	bd80      	pop	{r7, pc}

08014fc8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8014fc8:	b580      	push	{r7, lr}
 8014fca:	b08c      	sub	sp, #48	@ 0x30
 8014fcc:	af04      	add	r7, sp, #16
 8014fce:	6078      	str	r0, [r7, #4]
 8014fd0:	460b      	mov	r3, r1
 8014fd2:	70fb      	strb	r3, [r7, #3]
 8014fd4:	4613      	mov	r3, r2
 8014fd6:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8014fd8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014fdc:	2124      	movs	r1, #36	@ 0x24
 8014fde:	2022      	movs	r0, #34	@ 0x22
 8014fe0:	f7f8 fda8 	bl	800db34 <pbuf_alloc>
 8014fe4:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8014fe6:	69fb      	ldr	r3, [r7, #28]
 8014fe8:	2b00      	cmp	r3, #0
 8014fea:	d04c      	beq.n	8015086 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8014fec:	69fb      	ldr	r3, [r7, #28]
 8014fee:	895b      	ldrh	r3, [r3, #10]
 8014ff0:	2b23      	cmp	r3, #35	@ 0x23
 8014ff2:	d806      	bhi.n	8015002 <icmp_send_response+0x3a>
 8014ff4:	4b26      	ldr	r3, [pc, #152]	@ (8015090 <icmp_send_response+0xc8>)
 8014ff6:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8014ffa:	4926      	ldr	r1, [pc, #152]	@ (8015094 <icmp_send_response+0xcc>)
 8014ffc:	4826      	ldr	r0, [pc, #152]	@ (8015098 <icmp_send_response+0xd0>)
 8014ffe:	f002 f969 	bl	80172d4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8015002:	687b      	ldr	r3, [r7, #4]
 8015004:	685b      	ldr	r3, [r3, #4]
 8015006:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8015008:	69fb      	ldr	r3, [r7, #28]
 801500a:	685b      	ldr	r3, [r3, #4]
 801500c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801500e:	697b      	ldr	r3, [r7, #20]
 8015010:	78fa      	ldrb	r2, [r7, #3]
 8015012:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8015014:	697b      	ldr	r3, [r7, #20]
 8015016:	78ba      	ldrb	r2, [r7, #2]
 8015018:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801501a:	697b      	ldr	r3, [r7, #20]
 801501c:	2200      	movs	r2, #0
 801501e:	711a      	strb	r2, [r3, #4]
 8015020:	2200      	movs	r2, #0
 8015022:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8015024:	697b      	ldr	r3, [r7, #20]
 8015026:	2200      	movs	r2, #0
 8015028:	719a      	strb	r2, [r3, #6]
 801502a:	2200      	movs	r2, #0
 801502c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801502e:	69fb      	ldr	r3, [r7, #28]
 8015030:	685b      	ldr	r3, [r3, #4]
 8015032:	f103 0008 	add.w	r0, r3, #8
 8015036:	687b      	ldr	r3, [r7, #4]
 8015038:	685b      	ldr	r3, [r3, #4]
 801503a:	221c      	movs	r2, #28
 801503c:	4619      	mov	r1, r3
 801503e:	f002 fad2 	bl	80175e6 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8015042:	69bb      	ldr	r3, [r7, #24]
 8015044:	68db      	ldr	r3, [r3, #12]
 8015046:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8015048:	f107 030c 	add.w	r3, r7, #12
 801504c:	4618      	mov	r0, r3
 801504e:	f000 f825 	bl	801509c <ip4_route>
 8015052:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8015054:	693b      	ldr	r3, [r7, #16]
 8015056:	2b00      	cmp	r3, #0
 8015058:	d011      	beq.n	801507e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801505a:	697b      	ldr	r3, [r7, #20]
 801505c:	2200      	movs	r2, #0
 801505e:	709a      	strb	r2, [r3, #2]
 8015060:	2200      	movs	r2, #0
 8015062:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8015064:	f107 020c 	add.w	r2, r7, #12
 8015068:	693b      	ldr	r3, [r7, #16]
 801506a:	9302      	str	r3, [sp, #8]
 801506c:	2301      	movs	r3, #1
 801506e:	9301      	str	r3, [sp, #4]
 8015070:	2300      	movs	r3, #0
 8015072:	9300      	str	r3, [sp, #0]
 8015074:	23ff      	movs	r3, #255	@ 0xff
 8015076:	2100      	movs	r1, #0
 8015078:	69f8      	ldr	r0, [r7, #28]
 801507a:	f000 f9cd 	bl	8015418 <ip4_output_if>
  }
  pbuf_free(q);
 801507e:	69f8      	ldr	r0, [r7, #28]
 8015080:	f7f9 f83c 	bl	800e0fc <pbuf_free>
 8015084:	e000      	b.n	8015088 <icmp_send_response+0xc0>
    return;
 8015086:	bf00      	nop
}
 8015088:	3720      	adds	r7, #32
 801508a:	46bd      	mov	sp, r7
 801508c:	bd80      	pop	{r7, pc}
 801508e:	bf00      	nop
 8015090:	0801ae0c 	.word	0x0801ae0c
 8015094:	0801aed8 	.word	0x0801aed8
 8015098:	0801ae7c 	.word	0x0801ae7c

0801509c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801509c:	b480      	push	{r7}
 801509e:	b085      	sub	sp, #20
 80150a0:	af00      	add	r7, sp, #0
 80150a2:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80150a4:	4b33      	ldr	r3, [pc, #204]	@ (8015174 <ip4_route+0xd8>)
 80150a6:	681b      	ldr	r3, [r3, #0]
 80150a8:	60fb      	str	r3, [r7, #12]
 80150aa:	e036      	b.n	801511a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80150ac:	68fb      	ldr	r3, [r7, #12]
 80150ae:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80150b2:	f003 0301 	and.w	r3, r3, #1
 80150b6:	b2db      	uxtb	r3, r3
 80150b8:	2b00      	cmp	r3, #0
 80150ba:	d02b      	beq.n	8015114 <ip4_route+0x78>
 80150bc:	68fb      	ldr	r3, [r7, #12]
 80150be:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80150c2:	089b      	lsrs	r3, r3, #2
 80150c4:	f003 0301 	and.w	r3, r3, #1
 80150c8:	b2db      	uxtb	r3, r3
 80150ca:	2b00      	cmp	r3, #0
 80150cc:	d022      	beq.n	8015114 <ip4_route+0x78>
 80150ce:	68fb      	ldr	r3, [r7, #12]
 80150d0:	3304      	adds	r3, #4
 80150d2:	681b      	ldr	r3, [r3, #0]
 80150d4:	2b00      	cmp	r3, #0
 80150d6:	d01d      	beq.n	8015114 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80150d8:	687b      	ldr	r3, [r7, #4]
 80150da:	681a      	ldr	r2, [r3, #0]
 80150dc:	68fb      	ldr	r3, [r7, #12]
 80150de:	3304      	adds	r3, #4
 80150e0:	681b      	ldr	r3, [r3, #0]
 80150e2:	405a      	eors	r2, r3
 80150e4:	68fb      	ldr	r3, [r7, #12]
 80150e6:	3308      	adds	r3, #8
 80150e8:	681b      	ldr	r3, [r3, #0]
 80150ea:	4013      	ands	r3, r2
 80150ec:	2b00      	cmp	r3, #0
 80150ee:	d101      	bne.n	80150f4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80150f0:	68fb      	ldr	r3, [r7, #12]
 80150f2:	e038      	b.n	8015166 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80150f4:	68fb      	ldr	r3, [r7, #12]
 80150f6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80150fa:	f003 0302 	and.w	r3, r3, #2
 80150fe:	2b00      	cmp	r3, #0
 8015100:	d108      	bne.n	8015114 <ip4_route+0x78>
 8015102:	687b      	ldr	r3, [r7, #4]
 8015104:	681a      	ldr	r2, [r3, #0]
 8015106:	68fb      	ldr	r3, [r7, #12]
 8015108:	330c      	adds	r3, #12
 801510a:	681b      	ldr	r3, [r3, #0]
 801510c:	429a      	cmp	r2, r3
 801510e:	d101      	bne.n	8015114 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8015110:	68fb      	ldr	r3, [r7, #12]
 8015112:	e028      	b.n	8015166 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8015114:	68fb      	ldr	r3, [r7, #12]
 8015116:	681b      	ldr	r3, [r3, #0]
 8015118:	60fb      	str	r3, [r7, #12]
 801511a:	68fb      	ldr	r3, [r7, #12]
 801511c:	2b00      	cmp	r3, #0
 801511e:	d1c5      	bne.n	80150ac <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015120:	4b15      	ldr	r3, [pc, #84]	@ (8015178 <ip4_route+0xdc>)
 8015122:	681b      	ldr	r3, [r3, #0]
 8015124:	2b00      	cmp	r3, #0
 8015126:	d01a      	beq.n	801515e <ip4_route+0xc2>
 8015128:	4b13      	ldr	r3, [pc, #76]	@ (8015178 <ip4_route+0xdc>)
 801512a:	681b      	ldr	r3, [r3, #0]
 801512c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8015130:	f003 0301 	and.w	r3, r3, #1
 8015134:	2b00      	cmp	r3, #0
 8015136:	d012      	beq.n	801515e <ip4_route+0xc2>
 8015138:	4b0f      	ldr	r3, [pc, #60]	@ (8015178 <ip4_route+0xdc>)
 801513a:	681b      	ldr	r3, [r3, #0]
 801513c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8015140:	f003 0304 	and.w	r3, r3, #4
 8015144:	2b00      	cmp	r3, #0
 8015146:	d00a      	beq.n	801515e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015148:	4b0b      	ldr	r3, [pc, #44]	@ (8015178 <ip4_route+0xdc>)
 801514a:	681b      	ldr	r3, [r3, #0]
 801514c:	3304      	adds	r3, #4
 801514e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015150:	2b00      	cmp	r3, #0
 8015152:	d004      	beq.n	801515e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015154:	687b      	ldr	r3, [r7, #4]
 8015156:	681b      	ldr	r3, [r3, #0]
 8015158:	b2db      	uxtb	r3, r3
 801515a:	2b7f      	cmp	r3, #127	@ 0x7f
 801515c:	d101      	bne.n	8015162 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801515e:	2300      	movs	r3, #0
 8015160:	e001      	b.n	8015166 <ip4_route+0xca>
  }

  return netif_default;
 8015162:	4b05      	ldr	r3, [pc, #20]	@ (8015178 <ip4_route+0xdc>)
 8015164:	681b      	ldr	r3, [r3, #0]
}
 8015166:	4618      	mov	r0, r3
 8015168:	3714      	adds	r7, #20
 801516a:	46bd      	mov	sp, r7
 801516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015170:	4770      	bx	lr
 8015172:	bf00      	nop
 8015174:	2000c67c 	.word	0x2000c67c
 8015178:	2000c680 	.word	0x2000c680

0801517c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801517c:	b580      	push	{r7, lr}
 801517e:	b082      	sub	sp, #8
 8015180:	af00      	add	r7, sp, #0
 8015182:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801518a:	f003 0301 	and.w	r3, r3, #1
 801518e:	b2db      	uxtb	r3, r3
 8015190:	2b00      	cmp	r3, #0
 8015192:	d016      	beq.n	80151c2 <ip4_input_accept+0x46>
 8015194:	687b      	ldr	r3, [r7, #4]
 8015196:	3304      	adds	r3, #4
 8015198:	681b      	ldr	r3, [r3, #0]
 801519a:	2b00      	cmp	r3, #0
 801519c:	d011      	beq.n	80151c2 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801519e:	4b0b      	ldr	r3, [pc, #44]	@ (80151cc <ip4_input_accept+0x50>)
 80151a0:	695a      	ldr	r2, [r3, #20]
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	3304      	adds	r3, #4
 80151a6:	681b      	ldr	r3, [r3, #0]
 80151a8:	429a      	cmp	r2, r3
 80151aa:	d008      	beq.n	80151be <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80151ac:	4b07      	ldr	r3, [pc, #28]	@ (80151cc <ip4_input_accept+0x50>)
 80151ae:	695b      	ldr	r3, [r3, #20]
 80151b0:	6879      	ldr	r1, [r7, #4]
 80151b2:	4618      	mov	r0, r3
 80151b4:	f000 fa08 	bl	80155c8 <ip4_addr_isbroadcast_u32>
 80151b8:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80151ba:	2b00      	cmp	r3, #0
 80151bc:	d001      	beq.n	80151c2 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80151be:	2301      	movs	r3, #1
 80151c0:	e000      	b.n	80151c4 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80151c2:	2300      	movs	r3, #0
}
 80151c4:	4618      	mov	r0, r3
 80151c6:	3708      	adds	r7, #8
 80151c8:	46bd      	mov	sp, r7
 80151ca:	bd80      	pop	{r7, pc}
 80151cc:	20008f34 	.word	0x20008f34

080151d0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80151d0:	b580      	push	{r7, lr}
 80151d2:	b086      	sub	sp, #24
 80151d4:	af00      	add	r7, sp, #0
 80151d6:	6078      	str	r0, [r7, #4]
 80151d8:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80151da:	687b      	ldr	r3, [r7, #4]
 80151dc:	685b      	ldr	r3, [r3, #4]
 80151de:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 80151e0:	697b      	ldr	r3, [r7, #20]
 80151e2:	781b      	ldrb	r3, [r3, #0]
 80151e4:	091b      	lsrs	r3, r3, #4
 80151e6:	b2db      	uxtb	r3, r3
 80151e8:	2b04      	cmp	r3, #4
 80151ea:	d004      	beq.n	80151f6 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80151ec:	6878      	ldr	r0, [r7, #4]
 80151ee:	f7f8 ff85 	bl	800e0fc <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80151f2:	2300      	movs	r3, #0
 80151f4:	e107      	b.n	8015406 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80151f6:	697b      	ldr	r3, [r7, #20]
 80151f8:	781b      	ldrb	r3, [r3, #0]
 80151fa:	f003 030f 	and.w	r3, r3, #15
 80151fe:	b2db      	uxtb	r3, r3
 8015200:	009b      	lsls	r3, r3, #2
 8015202:	b2db      	uxtb	r3, r3
 8015204:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8015206:	697b      	ldr	r3, [r7, #20]
 8015208:	885b      	ldrh	r3, [r3, #2]
 801520a:	b29b      	uxth	r3, r3
 801520c:	4618      	mov	r0, r3
 801520e:	f7f7 fbb5 	bl	800c97c <lwip_htons>
 8015212:	4603      	mov	r3, r0
 8015214:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8015216:	687b      	ldr	r3, [r7, #4]
 8015218:	891b      	ldrh	r3, [r3, #8]
 801521a:	89ba      	ldrh	r2, [r7, #12]
 801521c:	429a      	cmp	r2, r3
 801521e:	d204      	bcs.n	801522a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8015220:	89bb      	ldrh	r3, [r7, #12]
 8015222:	4619      	mov	r1, r3
 8015224:	6878      	ldr	r0, [r7, #4]
 8015226:	f7f8 fde3 	bl	800ddf0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801522a:	687b      	ldr	r3, [r7, #4]
 801522c:	895b      	ldrh	r3, [r3, #10]
 801522e:	89fa      	ldrh	r2, [r7, #14]
 8015230:	429a      	cmp	r2, r3
 8015232:	d807      	bhi.n	8015244 <ip4_input+0x74>
 8015234:	687b      	ldr	r3, [r7, #4]
 8015236:	891b      	ldrh	r3, [r3, #8]
 8015238:	89ba      	ldrh	r2, [r7, #12]
 801523a:	429a      	cmp	r2, r3
 801523c:	d802      	bhi.n	8015244 <ip4_input+0x74>
 801523e:	89fb      	ldrh	r3, [r7, #14]
 8015240:	2b13      	cmp	r3, #19
 8015242:	d804      	bhi.n	801524e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8015244:	6878      	ldr	r0, [r7, #4]
 8015246:	f7f8 ff59 	bl	800e0fc <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801524a:	2300      	movs	r3, #0
 801524c:	e0db      	b.n	8015406 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801524e:	697b      	ldr	r3, [r7, #20]
 8015250:	691b      	ldr	r3, [r3, #16]
 8015252:	4a6f      	ldr	r2, [pc, #444]	@ (8015410 <ip4_input+0x240>)
 8015254:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8015256:	697b      	ldr	r3, [r7, #20]
 8015258:	68db      	ldr	r3, [r3, #12]
 801525a:	4a6d      	ldr	r2, [pc, #436]	@ (8015410 <ip4_input+0x240>)
 801525c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801525e:	4b6c      	ldr	r3, [pc, #432]	@ (8015410 <ip4_input+0x240>)
 8015260:	695b      	ldr	r3, [r3, #20]
 8015262:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8015266:	2be0      	cmp	r3, #224	@ 0xe0
 8015268:	d112      	bne.n	8015290 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801526a:	683b      	ldr	r3, [r7, #0]
 801526c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8015270:	f003 0301 	and.w	r3, r3, #1
 8015274:	b2db      	uxtb	r3, r3
 8015276:	2b00      	cmp	r3, #0
 8015278:	d007      	beq.n	801528a <ip4_input+0xba>
 801527a:	683b      	ldr	r3, [r7, #0]
 801527c:	3304      	adds	r3, #4
 801527e:	681b      	ldr	r3, [r3, #0]
 8015280:	2b00      	cmp	r3, #0
 8015282:	d002      	beq.n	801528a <ip4_input+0xba>
      netif = inp;
 8015284:	683b      	ldr	r3, [r7, #0]
 8015286:	613b      	str	r3, [r7, #16]
 8015288:	e02a      	b.n	80152e0 <ip4_input+0x110>
    } else {
      netif = NULL;
 801528a:	2300      	movs	r3, #0
 801528c:	613b      	str	r3, [r7, #16]
 801528e:	e027      	b.n	80152e0 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8015290:	6838      	ldr	r0, [r7, #0]
 8015292:	f7ff ff73 	bl	801517c <ip4_input_accept>
 8015296:	4603      	mov	r3, r0
 8015298:	2b00      	cmp	r3, #0
 801529a:	d002      	beq.n	80152a2 <ip4_input+0xd2>
      netif = inp;
 801529c:	683b      	ldr	r3, [r7, #0]
 801529e:	613b      	str	r3, [r7, #16]
 80152a0:	e01e      	b.n	80152e0 <ip4_input+0x110>
    } else {
      netif = NULL;
 80152a2:	2300      	movs	r3, #0
 80152a4:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80152a6:	4b5a      	ldr	r3, [pc, #360]	@ (8015410 <ip4_input+0x240>)
 80152a8:	695b      	ldr	r3, [r3, #20]
 80152aa:	b2db      	uxtb	r3, r3
 80152ac:	2b7f      	cmp	r3, #127	@ 0x7f
 80152ae:	d017      	beq.n	80152e0 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80152b0:	4b58      	ldr	r3, [pc, #352]	@ (8015414 <ip4_input+0x244>)
 80152b2:	681b      	ldr	r3, [r3, #0]
 80152b4:	613b      	str	r3, [r7, #16]
 80152b6:	e00e      	b.n	80152d6 <ip4_input+0x106>
          if (netif == inp) {
 80152b8:	693a      	ldr	r2, [r7, #16]
 80152ba:	683b      	ldr	r3, [r7, #0]
 80152bc:	429a      	cmp	r2, r3
 80152be:	d006      	beq.n	80152ce <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80152c0:	6938      	ldr	r0, [r7, #16]
 80152c2:	f7ff ff5b 	bl	801517c <ip4_input_accept>
 80152c6:	4603      	mov	r3, r0
 80152c8:	2b00      	cmp	r3, #0
 80152ca:	d108      	bne.n	80152de <ip4_input+0x10e>
 80152cc:	e000      	b.n	80152d0 <ip4_input+0x100>
            continue;
 80152ce:	bf00      	nop
        NETIF_FOREACH(netif) {
 80152d0:	693b      	ldr	r3, [r7, #16]
 80152d2:	681b      	ldr	r3, [r3, #0]
 80152d4:	613b      	str	r3, [r7, #16]
 80152d6:	693b      	ldr	r3, [r7, #16]
 80152d8:	2b00      	cmp	r3, #0
 80152da:	d1ed      	bne.n	80152b8 <ip4_input+0xe8>
 80152dc:	e000      	b.n	80152e0 <ip4_input+0x110>
            break;
 80152de:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80152e0:	4b4b      	ldr	r3, [pc, #300]	@ (8015410 <ip4_input+0x240>)
 80152e2:	691b      	ldr	r3, [r3, #16]
 80152e4:	6839      	ldr	r1, [r7, #0]
 80152e6:	4618      	mov	r0, r3
 80152e8:	f000 f96e 	bl	80155c8 <ip4_addr_isbroadcast_u32>
 80152ec:	4603      	mov	r3, r0
 80152ee:	2b00      	cmp	r3, #0
 80152f0:	d105      	bne.n	80152fe <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80152f2:	4b47      	ldr	r3, [pc, #284]	@ (8015410 <ip4_input+0x240>)
 80152f4:	691b      	ldr	r3, [r3, #16]
 80152f6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80152fa:	2be0      	cmp	r3, #224	@ 0xe0
 80152fc:	d104      	bne.n	8015308 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80152fe:	6878      	ldr	r0, [r7, #4]
 8015300:	f7f8 fefc 	bl	800e0fc <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8015304:	2300      	movs	r3, #0
 8015306:	e07e      	b.n	8015406 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8015308:	693b      	ldr	r3, [r7, #16]
 801530a:	2b00      	cmp	r3, #0
 801530c:	d104      	bne.n	8015318 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801530e:	6878      	ldr	r0, [r7, #4]
 8015310:	f7f8 fef4 	bl	800e0fc <pbuf_free>
    return ERR_OK;
 8015314:	2300      	movs	r3, #0
 8015316:	e076      	b.n	8015406 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8015318:	697b      	ldr	r3, [r7, #20]
 801531a:	88db      	ldrh	r3, [r3, #6]
 801531c:	b29b      	uxth	r3, r3
 801531e:	461a      	mov	r2, r3
 8015320:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8015324:	4013      	ands	r3, r2
 8015326:	2b00      	cmp	r3, #0
 8015328:	d00b      	beq.n	8015342 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801532a:	6878      	ldr	r0, [r7, #4]
 801532c:	f000 fc92 	bl	8015c54 <ip4_reass>
 8015330:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8015332:	687b      	ldr	r3, [r7, #4]
 8015334:	2b00      	cmp	r3, #0
 8015336:	d101      	bne.n	801533c <ip4_input+0x16c>
      return ERR_OK;
 8015338:	2300      	movs	r3, #0
 801533a:	e064      	b.n	8015406 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801533c:	687b      	ldr	r3, [r7, #4]
 801533e:	685b      	ldr	r3, [r3, #4]
 8015340:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8015342:	4a33      	ldr	r2, [pc, #204]	@ (8015410 <ip4_input+0x240>)
 8015344:	693b      	ldr	r3, [r7, #16]
 8015346:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8015348:	4a31      	ldr	r2, [pc, #196]	@ (8015410 <ip4_input+0x240>)
 801534a:	683b      	ldr	r3, [r7, #0]
 801534c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801534e:	4a30      	ldr	r2, [pc, #192]	@ (8015410 <ip4_input+0x240>)
 8015350:	697b      	ldr	r3, [r7, #20]
 8015352:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8015354:	697b      	ldr	r3, [r7, #20]
 8015356:	781b      	ldrb	r3, [r3, #0]
 8015358:	f003 030f 	and.w	r3, r3, #15
 801535c:	b2db      	uxtb	r3, r3
 801535e:	009b      	lsls	r3, r3, #2
 8015360:	b2db      	uxtb	r3, r3
 8015362:	461a      	mov	r2, r3
 8015364:	4b2a      	ldr	r3, [pc, #168]	@ (8015410 <ip4_input+0x240>)
 8015366:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8015368:	89fb      	ldrh	r3, [r7, #14]
 801536a:	4619      	mov	r1, r3
 801536c:	6878      	ldr	r0, [r7, #4]
 801536e:	f7f8 fe3f 	bl	800dff0 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8015372:	697b      	ldr	r3, [r7, #20]
 8015374:	7a5b      	ldrb	r3, [r3, #9]
 8015376:	2b11      	cmp	r3, #17
 8015378:	d006      	beq.n	8015388 <ip4_input+0x1b8>
 801537a:	2b11      	cmp	r3, #17
 801537c:	dc13      	bgt.n	80153a6 <ip4_input+0x1d6>
 801537e:	2b01      	cmp	r3, #1
 8015380:	d00c      	beq.n	801539c <ip4_input+0x1cc>
 8015382:	2b06      	cmp	r3, #6
 8015384:	d005      	beq.n	8015392 <ip4_input+0x1c2>
 8015386:	e00e      	b.n	80153a6 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8015388:	6839      	ldr	r1, [r7, #0]
 801538a:	6878      	ldr	r0, [r7, #4]
 801538c:	f7fe fc98 	bl	8013cc0 <udp_input>
        break;
 8015390:	e026      	b.n	80153e0 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8015392:	6839      	ldr	r1, [r7, #0]
 8015394:	6878      	ldr	r0, [r7, #4]
 8015396:	f7fa fce7 	bl	800fd68 <tcp_input>
        break;
 801539a:	e021      	b.n	80153e0 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801539c:	6839      	ldr	r1, [r7, #0]
 801539e:	6878      	ldr	r0, [r7, #4]
 80153a0:	f7ff fcee 	bl	8014d80 <icmp_input>
        break;
 80153a4:	e01c      	b.n	80153e0 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80153a6:	4b1a      	ldr	r3, [pc, #104]	@ (8015410 <ip4_input+0x240>)
 80153a8:	695b      	ldr	r3, [r3, #20]
 80153aa:	6939      	ldr	r1, [r7, #16]
 80153ac:	4618      	mov	r0, r3
 80153ae:	f000 f90b 	bl	80155c8 <ip4_addr_isbroadcast_u32>
 80153b2:	4603      	mov	r3, r0
 80153b4:	2b00      	cmp	r3, #0
 80153b6:	d10f      	bne.n	80153d8 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80153b8:	4b15      	ldr	r3, [pc, #84]	@ (8015410 <ip4_input+0x240>)
 80153ba:	695b      	ldr	r3, [r3, #20]
 80153bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80153c0:	2be0      	cmp	r3, #224	@ 0xe0
 80153c2:	d009      	beq.n	80153d8 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80153c4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80153c8:	4619      	mov	r1, r3
 80153ca:	6878      	ldr	r0, [r7, #4]
 80153cc:	f7f8 fe83 	bl	800e0d6 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80153d0:	2102      	movs	r1, #2
 80153d2:	6878      	ldr	r0, [r7, #4]
 80153d4:	f7ff fdd8 	bl	8014f88 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80153d8:	6878      	ldr	r0, [r7, #4]
 80153da:	f7f8 fe8f 	bl	800e0fc <pbuf_free>
        break;
 80153de:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80153e0:	4b0b      	ldr	r3, [pc, #44]	@ (8015410 <ip4_input+0x240>)
 80153e2:	2200      	movs	r2, #0
 80153e4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80153e6:	4b0a      	ldr	r3, [pc, #40]	@ (8015410 <ip4_input+0x240>)
 80153e8:	2200      	movs	r2, #0
 80153ea:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80153ec:	4b08      	ldr	r3, [pc, #32]	@ (8015410 <ip4_input+0x240>)
 80153ee:	2200      	movs	r2, #0
 80153f0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80153f2:	4b07      	ldr	r3, [pc, #28]	@ (8015410 <ip4_input+0x240>)
 80153f4:	2200      	movs	r2, #0
 80153f6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80153f8:	4b05      	ldr	r3, [pc, #20]	@ (8015410 <ip4_input+0x240>)
 80153fa:	2200      	movs	r2, #0
 80153fc:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80153fe:	4b04      	ldr	r3, [pc, #16]	@ (8015410 <ip4_input+0x240>)
 8015400:	2200      	movs	r2, #0
 8015402:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8015404:	2300      	movs	r3, #0
}
 8015406:	4618      	mov	r0, r3
 8015408:	3718      	adds	r7, #24
 801540a:	46bd      	mov	sp, r7
 801540c:	bd80      	pop	{r7, pc}
 801540e:	bf00      	nop
 8015410:	20008f34 	.word	0x20008f34
 8015414:	2000c67c 	.word	0x2000c67c

08015418 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8015418:	b580      	push	{r7, lr}
 801541a:	b08a      	sub	sp, #40	@ 0x28
 801541c:	af04      	add	r7, sp, #16
 801541e:	60f8      	str	r0, [r7, #12]
 8015420:	60b9      	str	r1, [r7, #8]
 8015422:	607a      	str	r2, [r7, #4]
 8015424:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8015426:	68bb      	ldr	r3, [r7, #8]
 8015428:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801542a:	687b      	ldr	r3, [r7, #4]
 801542c:	2b00      	cmp	r3, #0
 801542e:	d009      	beq.n	8015444 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8015430:	68bb      	ldr	r3, [r7, #8]
 8015432:	2b00      	cmp	r3, #0
 8015434:	d003      	beq.n	801543e <ip4_output_if+0x26>
 8015436:	68bb      	ldr	r3, [r7, #8]
 8015438:	681b      	ldr	r3, [r3, #0]
 801543a:	2b00      	cmp	r3, #0
 801543c:	d102      	bne.n	8015444 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801543e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015440:	3304      	adds	r3, #4
 8015442:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8015444:	78fa      	ldrb	r2, [r7, #3]
 8015446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015448:	9302      	str	r3, [sp, #8]
 801544a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801544e:	9301      	str	r3, [sp, #4]
 8015450:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015454:	9300      	str	r3, [sp, #0]
 8015456:	4613      	mov	r3, r2
 8015458:	687a      	ldr	r2, [r7, #4]
 801545a:	6979      	ldr	r1, [r7, #20]
 801545c:	68f8      	ldr	r0, [r7, #12]
 801545e:	f000 f805 	bl	801546c <ip4_output_if_src>
 8015462:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8015464:	4618      	mov	r0, r3
 8015466:	3718      	adds	r7, #24
 8015468:	46bd      	mov	sp, r7
 801546a:	bd80      	pop	{r7, pc}

0801546c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801546c:	b580      	push	{r7, lr}
 801546e:	b088      	sub	sp, #32
 8015470:	af00      	add	r7, sp, #0
 8015472:	60f8      	str	r0, [r7, #12]
 8015474:	60b9      	str	r1, [r7, #8]
 8015476:	607a      	str	r2, [r7, #4]
 8015478:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801547a:	68fb      	ldr	r3, [r7, #12]
 801547c:	7b9b      	ldrb	r3, [r3, #14]
 801547e:	2b01      	cmp	r3, #1
 8015480:	d006      	beq.n	8015490 <ip4_output_if_src+0x24>
 8015482:	4b4b      	ldr	r3, [pc, #300]	@ (80155b0 <ip4_output_if_src+0x144>)
 8015484:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8015488:	494a      	ldr	r1, [pc, #296]	@ (80155b4 <ip4_output_if_src+0x148>)
 801548a:	484b      	ldr	r0, [pc, #300]	@ (80155b8 <ip4_output_if_src+0x14c>)
 801548c:	f001 ff22 	bl	80172d4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8015490:	687b      	ldr	r3, [r7, #4]
 8015492:	2b00      	cmp	r3, #0
 8015494:	d060      	beq.n	8015558 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8015496:	2314      	movs	r3, #20
 8015498:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801549a:	2114      	movs	r1, #20
 801549c:	68f8      	ldr	r0, [r7, #12]
 801549e:	f7f8 fd97 	bl	800dfd0 <pbuf_add_header>
 80154a2:	4603      	mov	r3, r0
 80154a4:	2b00      	cmp	r3, #0
 80154a6:	d002      	beq.n	80154ae <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80154a8:	f06f 0301 	mvn.w	r3, #1
 80154ac:	e07c      	b.n	80155a8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80154ae:	68fb      	ldr	r3, [r7, #12]
 80154b0:	685b      	ldr	r3, [r3, #4]
 80154b2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80154b4:	68fb      	ldr	r3, [r7, #12]
 80154b6:	895b      	ldrh	r3, [r3, #10]
 80154b8:	2b13      	cmp	r3, #19
 80154ba:	d806      	bhi.n	80154ca <ip4_output_if_src+0x5e>
 80154bc:	4b3c      	ldr	r3, [pc, #240]	@ (80155b0 <ip4_output_if_src+0x144>)
 80154be:	f44f 7262 	mov.w	r2, #904	@ 0x388
 80154c2:	493e      	ldr	r1, [pc, #248]	@ (80155bc <ip4_output_if_src+0x150>)
 80154c4:	483c      	ldr	r0, [pc, #240]	@ (80155b8 <ip4_output_if_src+0x14c>)
 80154c6:	f001 ff05 	bl	80172d4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80154ca:	69fb      	ldr	r3, [r7, #28]
 80154cc:	78fa      	ldrb	r2, [r7, #3]
 80154ce:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80154d0:	69fb      	ldr	r3, [r7, #28]
 80154d2:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80154d6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80154d8:	687b      	ldr	r3, [r7, #4]
 80154da:	681a      	ldr	r2, [r3, #0]
 80154dc:	69fb      	ldr	r3, [r7, #28]
 80154de:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80154e0:	8b7b      	ldrh	r3, [r7, #26]
 80154e2:	089b      	lsrs	r3, r3, #2
 80154e4:	b29b      	uxth	r3, r3
 80154e6:	b2db      	uxtb	r3, r3
 80154e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80154ec:	b2da      	uxtb	r2, r3
 80154ee:	69fb      	ldr	r3, [r7, #28]
 80154f0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80154f2:	69fb      	ldr	r3, [r7, #28]
 80154f4:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80154f8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80154fa:	68fb      	ldr	r3, [r7, #12]
 80154fc:	891b      	ldrh	r3, [r3, #8]
 80154fe:	4618      	mov	r0, r3
 8015500:	f7f7 fa3c 	bl	800c97c <lwip_htons>
 8015504:	4603      	mov	r3, r0
 8015506:	461a      	mov	r2, r3
 8015508:	69fb      	ldr	r3, [r7, #28]
 801550a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801550c:	69fb      	ldr	r3, [r7, #28]
 801550e:	2200      	movs	r2, #0
 8015510:	719a      	strb	r2, [r3, #6]
 8015512:	2200      	movs	r2, #0
 8015514:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8015516:	4b2a      	ldr	r3, [pc, #168]	@ (80155c0 <ip4_output_if_src+0x154>)
 8015518:	881b      	ldrh	r3, [r3, #0]
 801551a:	4618      	mov	r0, r3
 801551c:	f7f7 fa2e 	bl	800c97c <lwip_htons>
 8015520:	4603      	mov	r3, r0
 8015522:	461a      	mov	r2, r3
 8015524:	69fb      	ldr	r3, [r7, #28]
 8015526:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8015528:	4b25      	ldr	r3, [pc, #148]	@ (80155c0 <ip4_output_if_src+0x154>)
 801552a:	881b      	ldrh	r3, [r3, #0]
 801552c:	3301      	adds	r3, #1
 801552e:	b29a      	uxth	r2, r3
 8015530:	4b23      	ldr	r3, [pc, #140]	@ (80155c0 <ip4_output_if_src+0x154>)
 8015532:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8015534:	68bb      	ldr	r3, [r7, #8]
 8015536:	2b00      	cmp	r3, #0
 8015538:	d104      	bne.n	8015544 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801553a:	4b22      	ldr	r3, [pc, #136]	@ (80155c4 <ip4_output_if_src+0x158>)
 801553c:	681a      	ldr	r2, [r3, #0]
 801553e:	69fb      	ldr	r3, [r7, #28]
 8015540:	60da      	str	r2, [r3, #12]
 8015542:	e003      	b.n	801554c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8015544:	68bb      	ldr	r3, [r7, #8]
 8015546:	681a      	ldr	r2, [r3, #0]
 8015548:	69fb      	ldr	r3, [r7, #28]
 801554a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801554c:	69fb      	ldr	r3, [r7, #28]
 801554e:	2200      	movs	r2, #0
 8015550:	729a      	strb	r2, [r3, #10]
 8015552:	2200      	movs	r2, #0
 8015554:	72da      	strb	r2, [r3, #11]
 8015556:	e00f      	b.n	8015578 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8015558:	68fb      	ldr	r3, [r7, #12]
 801555a:	895b      	ldrh	r3, [r3, #10]
 801555c:	2b13      	cmp	r3, #19
 801555e:	d802      	bhi.n	8015566 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015560:	f06f 0301 	mvn.w	r3, #1
 8015564:	e020      	b.n	80155a8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8015566:	68fb      	ldr	r3, [r7, #12]
 8015568:	685b      	ldr	r3, [r3, #4]
 801556a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801556c:	69fb      	ldr	r3, [r7, #28]
 801556e:	691b      	ldr	r3, [r3, #16]
 8015570:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8015572:	f107 0314 	add.w	r3, r7, #20
 8015576:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8015578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801557a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801557c:	2b00      	cmp	r3, #0
 801557e:	d00c      	beq.n	801559a <ip4_output_if_src+0x12e>
 8015580:	68fb      	ldr	r3, [r7, #12]
 8015582:	891a      	ldrh	r2, [r3, #8]
 8015584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015586:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8015588:	429a      	cmp	r2, r3
 801558a:	d906      	bls.n	801559a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801558c:	687a      	ldr	r2, [r7, #4]
 801558e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8015590:	68f8      	ldr	r0, [r7, #12]
 8015592:	f000 fd53 	bl	801603c <ip4_frag>
 8015596:	4603      	mov	r3, r0
 8015598:	e006      	b.n	80155a8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801559a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801559c:	695b      	ldr	r3, [r3, #20]
 801559e:	687a      	ldr	r2, [r7, #4]
 80155a0:	68f9      	ldr	r1, [r7, #12]
 80155a2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80155a4:	4798      	blx	r3
 80155a6:	4603      	mov	r3, r0
}
 80155a8:	4618      	mov	r0, r3
 80155aa:	3720      	adds	r7, #32
 80155ac:	46bd      	mov	sp, r7
 80155ae:	bd80      	pop	{r7, pc}
 80155b0:	0801af04 	.word	0x0801af04
 80155b4:	0801af38 	.word	0x0801af38
 80155b8:	0801af44 	.word	0x0801af44
 80155bc:	0801af6c 	.word	0x0801af6c
 80155c0:	2000c7da 	.word	0x2000c7da
 80155c4:	0801b3d4 	.word	0x0801b3d4

080155c8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80155c8:	b480      	push	{r7}
 80155ca:	b085      	sub	sp, #20
 80155cc:	af00      	add	r7, sp, #0
 80155ce:	6078      	str	r0, [r7, #4]
 80155d0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80155d2:	687b      	ldr	r3, [r7, #4]
 80155d4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80155d6:	687b      	ldr	r3, [r7, #4]
 80155d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80155dc:	d002      	beq.n	80155e4 <ip4_addr_isbroadcast_u32+0x1c>
 80155de:	687b      	ldr	r3, [r7, #4]
 80155e0:	2b00      	cmp	r3, #0
 80155e2:	d101      	bne.n	80155e8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80155e4:	2301      	movs	r3, #1
 80155e6:	e02a      	b.n	801563e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80155e8:	683b      	ldr	r3, [r7, #0]
 80155ea:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80155ee:	f003 0302 	and.w	r3, r3, #2
 80155f2:	2b00      	cmp	r3, #0
 80155f4:	d101      	bne.n	80155fa <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80155f6:	2300      	movs	r3, #0
 80155f8:	e021      	b.n	801563e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80155fa:	683b      	ldr	r3, [r7, #0]
 80155fc:	3304      	adds	r3, #4
 80155fe:	681b      	ldr	r3, [r3, #0]
 8015600:	687a      	ldr	r2, [r7, #4]
 8015602:	429a      	cmp	r2, r3
 8015604:	d101      	bne.n	801560a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8015606:	2300      	movs	r3, #0
 8015608:	e019      	b.n	801563e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801560a:	68fa      	ldr	r2, [r7, #12]
 801560c:	683b      	ldr	r3, [r7, #0]
 801560e:	3304      	adds	r3, #4
 8015610:	681b      	ldr	r3, [r3, #0]
 8015612:	405a      	eors	r2, r3
 8015614:	683b      	ldr	r3, [r7, #0]
 8015616:	3308      	adds	r3, #8
 8015618:	681b      	ldr	r3, [r3, #0]
 801561a:	4013      	ands	r3, r2
 801561c:	2b00      	cmp	r3, #0
 801561e:	d10d      	bne.n	801563c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015620:	683b      	ldr	r3, [r7, #0]
 8015622:	3308      	adds	r3, #8
 8015624:	681b      	ldr	r3, [r3, #0]
 8015626:	43da      	mvns	r2, r3
 8015628:	687b      	ldr	r3, [r7, #4]
 801562a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801562c:	683b      	ldr	r3, [r7, #0]
 801562e:	3308      	adds	r3, #8
 8015630:	681b      	ldr	r3, [r3, #0]
 8015632:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015634:	429a      	cmp	r2, r3
 8015636:	d101      	bne.n	801563c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8015638:	2301      	movs	r3, #1
 801563a:	e000      	b.n	801563e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801563c:	2300      	movs	r3, #0
  }
}
 801563e:	4618      	mov	r0, r3
 8015640:	3714      	adds	r7, #20
 8015642:	46bd      	mov	sp, r7
 8015644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015648:	4770      	bx	lr
	...

0801564c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801564c:	b580      	push	{r7, lr}
 801564e:	b084      	sub	sp, #16
 8015650:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8015652:	2300      	movs	r3, #0
 8015654:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8015656:	4b12      	ldr	r3, [pc, #72]	@ (80156a0 <ip_reass_tmr+0x54>)
 8015658:	681b      	ldr	r3, [r3, #0]
 801565a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801565c:	e018      	b.n	8015690 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801565e:	68fb      	ldr	r3, [r7, #12]
 8015660:	7fdb      	ldrb	r3, [r3, #31]
 8015662:	2b00      	cmp	r3, #0
 8015664:	d00b      	beq.n	801567e <ip_reass_tmr+0x32>
      r->timer--;
 8015666:	68fb      	ldr	r3, [r7, #12]
 8015668:	7fdb      	ldrb	r3, [r3, #31]
 801566a:	3b01      	subs	r3, #1
 801566c:	b2da      	uxtb	r2, r3
 801566e:	68fb      	ldr	r3, [r7, #12]
 8015670:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8015672:	68fb      	ldr	r3, [r7, #12]
 8015674:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8015676:	68fb      	ldr	r3, [r7, #12]
 8015678:	681b      	ldr	r3, [r3, #0]
 801567a:	60fb      	str	r3, [r7, #12]
 801567c:	e008      	b.n	8015690 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801567e:	68fb      	ldr	r3, [r7, #12]
 8015680:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8015682:	68fb      	ldr	r3, [r7, #12]
 8015684:	681b      	ldr	r3, [r3, #0]
 8015686:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8015688:	68b9      	ldr	r1, [r7, #8]
 801568a:	6878      	ldr	r0, [r7, #4]
 801568c:	f000 f80a 	bl	80156a4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8015690:	68fb      	ldr	r3, [r7, #12]
 8015692:	2b00      	cmp	r3, #0
 8015694:	d1e3      	bne.n	801565e <ip_reass_tmr+0x12>
    }
  }
}
 8015696:	bf00      	nop
 8015698:	bf00      	nop
 801569a:	3710      	adds	r7, #16
 801569c:	46bd      	mov	sp, r7
 801569e:	bd80      	pop	{r7, pc}
 80156a0:	2000c7dc 	.word	0x2000c7dc

080156a4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80156a4:	b580      	push	{r7, lr}
 80156a6:	b088      	sub	sp, #32
 80156a8:	af00      	add	r7, sp, #0
 80156aa:	6078      	str	r0, [r7, #4]
 80156ac:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80156ae:	2300      	movs	r3, #0
 80156b0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80156b2:	683a      	ldr	r2, [r7, #0]
 80156b4:	687b      	ldr	r3, [r7, #4]
 80156b6:	429a      	cmp	r2, r3
 80156b8:	d105      	bne.n	80156c6 <ip_reass_free_complete_datagram+0x22>
 80156ba:	4b45      	ldr	r3, [pc, #276]	@ (80157d0 <ip_reass_free_complete_datagram+0x12c>)
 80156bc:	22ab      	movs	r2, #171	@ 0xab
 80156be:	4945      	ldr	r1, [pc, #276]	@ (80157d4 <ip_reass_free_complete_datagram+0x130>)
 80156c0:	4845      	ldr	r0, [pc, #276]	@ (80157d8 <ip_reass_free_complete_datagram+0x134>)
 80156c2:	f001 fe07 	bl	80172d4 <iprintf>
  if (prev != NULL) {
 80156c6:	683b      	ldr	r3, [r7, #0]
 80156c8:	2b00      	cmp	r3, #0
 80156ca:	d00a      	beq.n	80156e2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80156cc:	683b      	ldr	r3, [r7, #0]
 80156ce:	681b      	ldr	r3, [r3, #0]
 80156d0:	687a      	ldr	r2, [r7, #4]
 80156d2:	429a      	cmp	r2, r3
 80156d4:	d005      	beq.n	80156e2 <ip_reass_free_complete_datagram+0x3e>
 80156d6:	4b3e      	ldr	r3, [pc, #248]	@ (80157d0 <ip_reass_free_complete_datagram+0x12c>)
 80156d8:	22ad      	movs	r2, #173	@ 0xad
 80156da:	4940      	ldr	r1, [pc, #256]	@ (80157dc <ip_reass_free_complete_datagram+0x138>)
 80156dc:	483e      	ldr	r0, [pc, #248]	@ (80157d8 <ip_reass_free_complete_datagram+0x134>)
 80156de:	f001 fdf9 	bl	80172d4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80156e2:	687b      	ldr	r3, [r7, #4]
 80156e4:	685b      	ldr	r3, [r3, #4]
 80156e6:	685b      	ldr	r3, [r3, #4]
 80156e8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80156ea:	697b      	ldr	r3, [r7, #20]
 80156ec:	889b      	ldrh	r3, [r3, #4]
 80156ee:	b29b      	uxth	r3, r3
 80156f0:	2b00      	cmp	r3, #0
 80156f2:	d12a      	bne.n	801574a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80156f4:	687b      	ldr	r3, [r7, #4]
 80156f6:	685b      	ldr	r3, [r3, #4]
 80156f8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80156fa:	697b      	ldr	r3, [r7, #20]
 80156fc:	681a      	ldr	r2, [r3, #0]
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8015702:	69bb      	ldr	r3, [r7, #24]
 8015704:	6858      	ldr	r0, [r3, #4]
 8015706:	687b      	ldr	r3, [r7, #4]
 8015708:	3308      	adds	r3, #8
 801570a:	2214      	movs	r2, #20
 801570c:	4619      	mov	r1, r3
 801570e:	f001 ff6a 	bl	80175e6 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8015712:	2101      	movs	r1, #1
 8015714:	69b8      	ldr	r0, [r7, #24]
 8015716:	f7ff fc47 	bl	8014fa8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801571a:	69b8      	ldr	r0, [r7, #24]
 801571c:	f7f8 fd7c 	bl	800e218 <pbuf_clen>
 8015720:	4603      	mov	r3, r0
 8015722:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015724:	8bfa      	ldrh	r2, [r7, #30]
 8015726:	8a7b      	ldrh	r3, [r7, #18]
 8015728:	4413      	add	r3, r2
 801572a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801572e:	db05      	blt.n	801573c <ip_reass_free_complete_datagram+0x98>
 8015730:	4b27      	ldr	r3, [pc, #156]	@ (80157d0 <ip_reass_free_complete_datagram+0x12c>)
 8015732:	22bc      	movs	r2, #188	@ 0xbc
 8015734:	492a      	ldr	r1, [pc, #168]	@ (80157e0 <ip_reass_free_complete_datagram+0x13c>)
 8015736:	4828      	ldr	r0, [pc, #160]	@ (80157d8 <ip_reass_free_complete_datagram+0x134>)
 8015738:	f001 fdcc 	bl	80172d4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801573c:	8bfa      	ldrh	r2, [r7, #30]
 801573e:	8a7b      	ldrh	r3, [r7, #18]
 8015740:	4413      	add	r3, r2
 8015742:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8015744:	69b8      	ldr	r0, [r7, #24]
 8015746:	f7f8 fcd9 	bl	800e0fc <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	685b      	ldr	r3, [r3, #4]
 801574e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8015750:	e01f      	b.n	8015792 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8015752:	69bb      	ldr	r3, [r7, #24]
 8015754:	685b      	ldr	r3, [r3, #4]
 8015756:	617b      	str	r3, [r7, #20]
    pcur = p;
 8015758:	69bb      	ldr	r3, [r7, #24]
 801575a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801575c:	697b      	ldr	r3, [r7, #20]
 801575e:	681b      	ldr	r3, [r3, #0]
 8015760:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8015762:	68f8      	ldr	r0, [r7, #12]
 8015764:	f7f8 fd58 	bl	800e218 <pbuf_clen>
 8015768:	4603      	mov	r3, r0
 801576a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801576c:	8bfa      	ldrh	r2, [r7, #30]
 801576e:	8a7b      	ldrh	r3, [r7, #18]
 8015770:	4413      	add	r3, r2
 8015772:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015776:	db05      	blt.n	8015784 <ip_reass_free_complete_datagram+0xe0>
 8015778:	4b15      	ldr	r3, [pc, #84]	@ (80157d0 <ip_reass_free_complete_datagram+0x12c>)
 801577a:	22cc      	movs	r2, #204	@ 0xcc
 801577c:	4918      	ldr	r1, [pc, #96]	@ (80157e0 <ip_reass_free_complete_datagram+0x13c>)
 801577e:	4816      	ldr	r0, [pc, #88]	@ (80157d8 <ip_reass_free_complete_datagram+0x134>)
 8015780:	f001 fda8 	bl	80172d4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015784:	8bfa      	ldrh	r2, [r7, #30]
 8015786:	8a7b      	ldrh	r3, [r7, #18]
 8015788:	4413      	add	r3, r2
 801578a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801578c:	68f8      	ldr	r0, [r7, #12]
 801578e:	f7f8 fcb5 	bl	800e0fc <pbuf_free>
  while (p != NULL) {
 8015792:	69bb      	ldr	r3, [r7, #24]
 8015794:	2b00      	cmp	r3, #0
 8015796:	d1dc      	bne.n	8015752 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8015798:	6839      	ldr	r1, [r7, #0]
 801579a:	6878      	ldr	r0, [r7, #4]
 801579c:	f000 f8c2 	bl	8015924 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80157a0:	4b10      	ldr	r3, [pc, #64]	@ (80157e4 <ip_reass_free_complete_datagram+0x140>)
 80157a2:	881b      	ldrh	r3, [r3, #0]
 80157a4:	8bfa      	ldrh	r2, [r7, #30]
 80157a6:	429a      	cmp	r2, r3
 80157a8:	d905      	bls.n	80157b6 <ip_reass_free_complete_datagram+0x112>
 80157aa:	4b09      	ldr	r3, [pc, #36]	@ (80157d0 <ip_reass_free_complete_datagram+0x12c>)
 80157ac:	22d2      	movs	r2, #210	@ 0xd2
 80157ae:	490e      	ldr	r1, [pc, #56]	@ (80157e8 <ip_reass_free_complete_datagram+0x144>)
 80157b0:	4809      	ldr	r0, [pc, #36]	@ (80157d8 <ip_reass_free_complete_datagram+0x134>)
 80157b2:	f001 fd8f 	bl	80172d4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80157b6:	4b0b      	ldr	r3, [pc, #44]	@ (80157e4 <ip_reass_free_complete_datagram+0x140>)
 80157b8:	881a      	ldrh	r2, [r3, #0]
 80157ba:	8bfb      	ldrh	r3, [r7, #30]
 80157bc:	1ad3      	subs	r3, r2, r3
 80157be:	b29a      	uxth	r2, r3
 80157c0:	4b08      	ldr	r3, [pc, #32]	@ (80157e4 <ip_reass_free_complete_datagram+0x140>)
 80157c2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80157c4:	8bfb      	ldrh	r3, [r7, #30]
}
 80157c6:	4618      	mov	r0, r3
 80157c8:	3720      	adds	r7, #32
 80157ca:	46bd      	mov	sp, r7
 80157cc:	bd80      	pop	{r7, pc}
 80157ce:	bf00      	nop
 80157d0:	0801af9c 	.word	0x0801af9c
 80157d4:	0801afd8 	.word	0x0801afd8
 80157d8:	0801afe4 	.word	0x0801afe4
 80157dc:	0801b00c 	.word	0x0801b00c
 80157e0:	0801b020 	.word	0x0801b020
 80157e4:	2000c7e0 	.word	0x2000c7e0
 80157e8:	0801b040 	.word	0x0801b040

080157ec <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80157ec:	b580      	push	{r7, lr}
 80157ee:	b08a      	sub	sp, #40	@ 0x28
 80157f0:	af00      	add	r7, sp, #0
 80157f2:	6078      	str	r0, [r7, #4]
 80157f4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80157f6:	2300      	movs	r3, #0
 80157f8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80157fa:	2300      	movs	r3, #0
 80157fc:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80157fe:	2300      	movs	r3, #0
 8015800:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8015802:	2300      	movs	r3, #0
 8015804:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8015806:	2300      	movs	r3, #0
 8015808:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801580a:	4b28      	ldr	r3, [pc, #160]	@ (80158ac <ip_reass_remove_oldest_datagram+0xc0>)
 801580c:	681b      	ldr	r3, [r3, #0]
 801580e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8015810:	e030      	b.n	8015874 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8015812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015814:	695a      	ldr	r2, [r3, #20]
 8015816:	687b      	ldr	r3, [r7, #4]
 8015818:	68db      	ldr	r3, [r3, #12]
 801581a:	429a      	cmp	r2, r3
 801581c:	d10c      	bne.n	8015838 <ip_reass_remove_oldest_datagram+0x4c>
 801581e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015820:	699a      	ldr	r2, [r3, #24]
 8015822:	687b      	ldr	r3, [r7, #4]
 8015824:	691b      	ldr	r3, [r3, #16]
 8015826:	429a      	cmp	r2, r3
 8015828:	d106      	bne.n	8015838 <ip_reass_remove_oldest_datagram+0x4c>
 801582a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801582c:	899a      	ldrh	r2, [r3, #12]
 801582e:	687b      	ldr	r3, [r7, #4]
 8015830:	889b      	ldrh	r3, [r3, #4]
 8015832:	b29b      	uxth	r3, r3
 8015834:	429a      	cmp	r2, r3
 8015836:	d014      	beq.n	8015862 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8015838:	693b      	ldr	r3, [r7, #16]
 801583a:	3301      	adds	r3, #1
 801583c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801583e:	6a3b      	ldr	r3, [r7, #32]
 8015840:	2b00      	cmp	r3, #0
 8015842:	d104      	bne.n	801584e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8015844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015846:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015848:	69fb      	ldr	r3, [r7, #28]
 801584a:	61bb      	str	r3, [r7, #24]
 801584c:	e009      	b.n	8015862 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801584e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015850:	7fda      	ldrb	r2, [r3, #31]
 8015852:	6a3b      	ldr	r3, [r7, #32]
 8015854:	7fdb      	ldrb	r3, [r3, #31]
 8015856:	429a      	cmp	r2, r3
 8015858:	d803      	bhi.n	8015862 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801585a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801585c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801585e:	69fb      	ldr	r3, [r7, #28]
 8015860:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8015862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015864:	681b      	ldr	r3, [r3, #0]
 8015866:	2b00      	cmp	r3, #0
 8015868:	d001      	beq.n	801586e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801586a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801586c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801586e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015870:	681b      	ldr	r3, [r3, #0]
 8015872:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8015874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015876:	2b00      	cmp	r3, #0
 8015878:	d1cb      	bne.n	8015812 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801587a:	6a3b      	ldr	r3, [r7, #32]
 801587c:	2b00      	cmp	r3, #0
 801587e:	d008      	beq.n	8015892 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8015880:	69b9      	ldr	r1, [r7, #24]
 8015882:	6a38      	ldr	r0, [r7, #32]
 8015884:	f7ff ff0e 	bl	80156a4 <ip_reass_free_complete_datagram>
 8015888:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801588a:	697a      	ldr	r2, [r7, #20]
 801588c:	68fb      	ldr	r3, [r7, #12]
 801588e:	4413      	add	r3, r2
 8015890:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8015892:	697a      	ldr	r2, [r7, #20]
 8015894:	683b      	ldr	r3, [r7, #0]
 8015896:	429a      	cmp	r2, r3
 8015898:	da02      	bge.n	80158a0 <ip_reass_remove_oldest_datagram+0xb4>
 801589a:	693b      	ldr	r3, [r7, #16]
 801589c:	2b01      	cmp	r3, #1
 801589e:	dcac      	bgt.n	80157fa <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80158a0:	697b      	ldr	r3, [r7, #20]
}
 80158a2:	4618      	mov	r0, r3
 80158a4:	3728      	adds	r7, #40	@ 0x28
 80158a6:	46bd      	mov	sp, r7
 80158a8:	bd80      	pop	{r7, pc}
 80158aa:	bf00      	nop
 80158ac:	2000c7dc 	.word	0x2000c7dc

080158b0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80158b0:	b580      	push	{r7, lr}
 80158b2:	b084      	sub	sp, #16
 80158b4:	af00      	add	r7, sp, #0
 80158b6:	6078      	str	r0, [r7, #4]
 80158b8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80158ba:	2004      	movs	r0, #4
 80158bc:	f7f7 fd36 	bl	800d32c <memp_malloc>
 80158c0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80158c2:	68fb      	ldr	r3, [r7, #12]
 80158c4:	2b00      	cmp	r3, #0
 80158c6:	d110      	bne.n	80158ea <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80158c8:	6839      	ldr	r1, [r7, #0]
 80158ca:	6878      	ldr	r0, [r7, #4]
 80158cc:	f7ff ff8e 	bl	80157ec <ip_reass_remove_oldest_datagram>
 80158d0:	4602      	mov	r2, r0
 80158d2:	683b      	ldr	r3, [r7, #0]
 80158d4:	4293      	cmp	r3, r2
 80158d6:	dc03      	bgt.n	80158e0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80158d8:	2004      	movs	r0, #4
 80158da:	f7f7 fd27 	bl	800d32c <memp_malloc>
 80158de:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80158e0:	68fb      	ldr	r3, [r7, #12]
 80158e2:	2b00      	cmp	r3, #0
 80158e4:	d101      	bne.n	80158ea <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80158e6:	2300      	movs	r3, #0
 80158e8:	e016      	b.n	8015918 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80158ea:	2220      	movs	r2, #32
 80158ec:	2100      	movs	r1, #0
 80158ee:	68f8      	ldr	r0, [r7, #12]
 80158f0:	f001 fda5 	bl	801743e <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80158f4:	68fb      	ldr	r3, [r7, #12]
 80158f6:	220f      	movs	r2, #15
 80158f8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80158fa:	4b09      	ldr	r3, [pc, #36]	@ (8015920 <ip_reass_enqueue_new_datagram+0x70>)
 80158fc:	681a      	ldr	r2, [r3, #0]
 80158fe:	68fb      	ldr	r3, [r7, #12]
 8015900:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8015902:	4a07      	ldr	r2, [pc, #28]	@ (8015920 <ip_reass_enqueue_new_datagram+0x70>)
 8015904:	68fb      	ldr	r3, [r7, #12]
 8015906:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8015908:	68fb      	ldr	r3, [r7, #12]
 801590a:	3308      	adds	r3, #8
 801590c:	2214      	movs	r2, #20
 801590e:	6879      	ldr	r1, [r7, #4]
 8015910:	4618      	mov	r0, r3
 8015912:	f001 fe68 	bl	80175e6 <memcpy>
  return ipr;
 8015916:	68fb      	ldr	r3, [r7, #12]
}
 8015918:	4618      	mov	r0, r3
 801591a:	3710      	adds	r7, #16
 801591c:	46bd      	mov	sp, r7
 801591e:	bd80      	pop	{r7, pc}
 8015920:	2000c7dc 	.word	0x2000c7dc

08015924 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015924:	b580      	push	{r7, lr}
 8015926:	b082      	sub	sp, #8
 8015928:	af00      	add	r7, sp, #0
 801592a:	6078      	str	r0, [r7, #4]
 801592c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801592e:	4b10      	ldr	r3, [pc, #64]	@ (8015970 <ip_reass_dequeue_datagram+0x4c>)
 8015930:	681b      	ldr	r3, [r3, #0]
 8015932:	687a      	ldr	r2, [r7, #4]
 8015934:	429a      	cmp	r2, r3
 8015936:	d104      	bne.n	8015942 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8015938:	687b      	ldr	r3, [r7, #4]
 801593a:	681b      	ldr	r3, [r3, #0]
 801593c:	4a0c      	ldr	r2, [pc, #48]	@ (8015970 <ip_reass_dequeue_datagram+0x4c>)
 801593e:	6013      	str	r3, [r2, #0]
 8015940:	e00d      	b.n	801595e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8015942:	683b      	ldr	r3, [r7, #0]
 8015944:	2b00      	cmp	r3, #0
 8015946:	d106      	bne.n	8015956 <ip_reass_dequeue_datagram+0x32>
 8015948:	4b0a      	ldr	r3, [pc, #40]	@ (8015974 <ip_reass_dequeue_datagram+0x50>)
 801594a:	f240 1245 	movw	r2, #325	@ 0x145
 801594e:	490a      	ldr	r1, [pc, #40]	@ (8015978 <ip_reass_dequeue_datagram+0x54>)
 8015950:	480a      	ldr	r0, [pc, #40]	@ (801597c <ip_reass_dequeue_datagram+0x58>)
 8015952:	f001 fcbf 	bl	80172d4 <iprintf>
    prev->next = ipr->next;
 8015956:	687b      	ldr	r3, [r7, #4]
 8015958:	681a      	ldr	r2, [r3, #0]
 801595a:	683b      	ldr	r3, [r7, #0]
 801595c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801595e:	6879      	ldr	r1, [r7, #4]
 8015960:	2004      	movs	r0, #4
 8015962:	f7f7 fd59 	bl	800d418 <memp_free>
}
 8015966:	bf00      	nop
 8015968:	3708      	adds	r7, #8
 801596a:	46bd      	mov	sp, r7
 801596c:	bd80      	pop	{r7, pc}
 801596e:	bf00      	nop
 8015970:	2000c7dc 	.word	0x2000c7dc
 8015974:	0801af9c 	.word	0x0801af9c
 8015978:	0801b064 	.word	0x0801b064
 801597c:	0801afe4 	.word	0x0801afe4

08015980 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8015980:	b580      	push	{r7, lr}
 8015982:	b08c      	sub	sp, #48	@ 0x30
 8015984:	af00      	add	r7, sp, #0
 8015986:	60f8      	str	r0, [r7, #12]
 8015988:	60b9      	str	r1, [r7, #8]
 801598a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801598c:	2300      	movs	r3, #0
 801598e:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8015990:	2301      	movs	r3, #1
 8015992:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8015994:	68bb      	ldr	r3, [r7, #8]
 8015996:	685b      	ldr	r3, [r3, #4]
 8015998:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801599a:	69fb      	ldr	r3, [r7, #28]
 801599c:	885b      	ldrh	r3, [r3, #2]
 801599e:	b29b      	uxth	r3, r3
 80159a0:	4618      	mov	r0, r3
 80159a2:	f7f6 ffeb 	bl	800c97c <lwip_htons>
 80159a6:	4603      	mov	r3, r0
 80159a8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80159aa:	69fb      	ldr	r3, [r7, #28]
 80159ac:	781b      	ldrb	r3, [r3, #0]
 80159ae:	f003 030f 	and.w	r3, r3, #15
 80159b2:	b2db      	uxtb	r3, r3
 80159b4:	009b      	lsls	r3, r3, #2
 80159b6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80159b8:	7e7b      	ldrb	r3, [r7, #25]
 80159ba:	b29b      	uxth	r3, r3
 80159bc:	8b7a      	ldrh	r2, [r7, #26]
 80159be:	429a      	cmp	r2, r3
 80159c0:	d202      	bcs.n	80159c8 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80159c2:	f04f 33ff 	mov.w	r3, #4294967295
 80159c6:	e135      	b.n	8015c34 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80159c8:	7e7b      	ldrb	r3, [r7, #25]
 80159ca:	b29b      	uxth	r3, r3
 80159cc:	8b7a      	ldrh	r2, [r7, #26]
 80159ce:	1ad3      	subs	r3, r2, r3
 80159d0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80159d2:	69fb      	ldr	r3, [r7, #28]
 80159d4:	88db      	ldrh	r3, [r3, #6]
 80159d6:	b29b      	uxth	r3, r3
 80159d8:	4618      	mov	r0, r3
 80159da:	f7f6 ffcf 	bl	800c97c <lwip_htons>
 80159de:	4603      	mov	r3, r0
 80159e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80159e4:	b29b      	uxth	r3, r3
 80159e6:	00db      	lsls	r3, r3, #3
 80159e8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80159ea:	68bb      	ldr	r3, [r7, #8]
 80159ec:	685b      	ldr	r3, [r3, #4]
 80159ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 80159f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80159f2:	2200      	movs	r2, #0
 80159f4:	701a      	strb	r2, [r3, #0]
 80159f6:	2200      	movs	r2, #0
 80159f8:	705a      	strb	r2, [r3, #1]
 80159fa:	2200      	movs	r2, #0
 80159fc:	709a      	strb	r2, [r3, #2]
 80159fe:	2200      	movs	r2, #0
 8015a00:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8015a02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a04:	8afa      	ldrh	r2, [r7, #22]
 8015a06:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8015a08:	8afa      	ldrh	r2, [r7, #22]
 8015a0a:	8b7b      	ldrh	r3, [r7, #26]
 8015a0c:	4413      	add	r3, r2
 8015a0e:	b29a      	uxth	r2, r3
 8015a10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a12:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8015a14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a16:	88db      	ldrh	r3, [r3, #6]
 8015a18:	b29b      	uxth	r3, r3
 8015a1a:	8afa      	ldrh	r2, [r7, #22]
 8015a1c:	429a      	cmp	r2, r3
 8015a1e:	d902      	bls.n	8015a26 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015a20:	f04f 33ff 	mov.w	r3, #4294967295
 8015a24:	e106      	b.n	8015c34 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8015a26:	68fb      	ldr	r3, [r7, #12]
 8015a28:	685b      	ldr	r3, [r3, #4]
 8015a2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8015a2c:	e068      	b.n	8015b00 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8015a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a30:	685b      	ldr	r3, [r3, #4]
 8015a32:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8015a34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a36:	889b      	ldrh	r3, [r3, #4]
 8015a38:	b29a      	uxth	r2, r3
 8015a3a:	693b      	ldr	r3, [r7, #16]
 8015a3c:	889b      	ldrh	r3, [r3, #4]
 8015a3e:	b29b      	uxth	r3, r3
 8015a40:	429a      	cmp	r2, r3
 8015a42:	d235      	bcs.n	8015ab0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8015a44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015a48:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8015a4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a4c:	2b00      	cmp	r3, #0
 8015a4e:	d020      	beq.n	8015a92 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8015a50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a52:	889b      	ldrh	r3, [r3, #4]
 8015a54:	b29a      	uxth	r2, r3
 8015a56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a58:	88db      	ldrh	r3, [r3, #6]
 8015a5a:	b29b      	uxth	r3, r3
 8015a5c:	429a      	cmp	r2, r3
 8015a5e:	d307      	bcc.n	8015a70 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8015a60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a62:	88db      	ldrh	r3, [r3, #6]
 8015a64:	b29a      	uxth	r2, r3
 8015a66:	693b      	ldr	r3, [r7, #16]
 8015a68:	889b      	ldrh	r3, [r3, #4]
 8015a6a:	b29b      	uxth	r3, r3
 8015a6c:	429a      	cmp	r2, r3
 8015a6e:	d902      	bls.n	8015a76 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015a70:	f04f 33ff 	mov.w	r3, #4294967295
 8015a74:	e0de      	b.n	8015c34 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8015a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a78:	68ba      	ldr	r2, [r7, #8]
 8015a7a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8015a7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a7e:	88db      	ldrh	r3, [r3, #6]
 8015a80:	b29a      	uxth	r2, r3
 8015a82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a84:	889b      	ldrh	r3, [r3, #4]
 8015a86:	b29b      	uxth	r3, r3
 8015a88:	429a      	cmp	r2, r3
 8015a8a:	d03d      	beq.n	8015b08 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015a8c:	2300      	movs	r3, #0
 8015a8e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8015a90:	e03a      	b.n	8015b08 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8015a92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a94:	88db      	ldrh	r3, [r3, #6]
 8015a96:	b29a      	uxth	r2, r3
 8015a98:	693b      	ldr	r3, [r7, #16]
 8015a9a:	889b      	ldrh	r3, [r3, #4]
 8015a9c:	b29b      	uxth	r3, r3
 8015a9e:	429a      	cmp	r2, r3
 8015aa0:	d902      	bls.n	8015aa8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8015aa6:	e0c5      	b.n	8015c34 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8015aa8:	68fb      	ldr	r3, [r7, #12]
 8015aaa:	68ba      	ldr	r2, [r7, #8]
 8015aac:	605a      	str	r2, [r3, #4]
      break;
 8015aae:	e02b      	b.n	8015b08 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8015ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ab2:	889b      	ldrh	r3, [r3, #4]
 8015ab4:	b29a      	uxth	r2, r3
 8015ab6:	693b      	ldr	r3, [r7, #16]
 8015ab8:	889b      	ldrh	r3, [r3, #4]
 8015aba:	b29b      	uxth	r3, r3
 8015abc:	429a      	cmp	r2, r3
 8015abe:	d102      	bne.n	8015ac6 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015ac0:	f04f 33ff 	mov.w	r3, #4294967295
 8015ac4:	e0b6      	b.n	8015c34 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8015ac6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ac8:	889b      	ldrh	r3, [r3, #4]
 8015aca:	b29a      	uxth	r2, r3
 8015acc:	693b      	ldr	r3, [r7, #16]
 8015ace:	88db      	ldrh	r3, [r3, #6]
 8015ad0:	b29b      	uxth	r3, r3
 8015ad2:	429a      	cmp	r2, r3
 8015ad4:	d202      	bcs.n	8015adc <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8015ada:	e0ab      	b.n	8015c34 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8015adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ade:	2b00      	cmp	r3, #0
 8015ae0:	d009      	beq.n	8015af6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8015ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ae4:	88db      	ldrh	r3, [r3, #6]
 8015ae6:	b29a      	uxth	r2, r3
 8015ae8:	693b      	ldr	r3, [r7, #16]
 8015aea:	889b      	ldrh	r3, [r3, #4]
 8015aec:	b29b      	uxth	r3, r3
 8015aee:	429a      	cmp	r2, r3
 8015af0:	d001      	beq.n	8015af6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015af2:	2300      	movs	r3, #0
 8015af4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8015af6:	693b      	ldr	r3, [r7, #16]
 8015af8:	681b      	ldr	r3, [r3, #0]
 8015afa:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8015afc:	693b      	ldr	r3, [r7, #16]
 8015afe:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8015b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015b02:	2b00      	cmp	r3, #0
 8015b04:	d193      	bne.n	8015a2e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8015b06:	e000      	b.n	8015b0a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8015b08:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8015b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015b0c:	2b00      	cmp	r3, #0
 8015b0e:	d12d      	bne.n	8015b6c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8015b10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b12:	2b00      	cmp	r3, #0
 8015b14:	d01c      	beq.n	8015b50 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8015b16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b18:	88db      	ldrh	r3, [r3, #6]
 8015b1a:	b29a      	uxth	r2, r3
 8015b1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015b1e:	889b      	ldrh	r3, [r3, #4]
 8015b20:	b29b      	uxth	r3, r3
 8015b22:	429a      	cmp	r2, r3
 8015b24:	d906      	bls.n	8015b34 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8015b26:	4b45      	ldr	r3, [pc, #276]	@ (8015c3c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015b28:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8015b2c:	4944      	ldr	r1, [pc, #272]	@ (8015c40 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8015b2e:	4845      	ldr	r0, [pc, #276]	@ (8015c44 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015b30:	f001 fbd0 	bl	80172d4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8015b34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b36:	68ba      	ldr	r2, [r7, #8]
 8015b38:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8015b3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b3c:	88db      	ldrh	r3, [r3, #6]
 8015b3e:	b29a      	uxth	r2, r3
 8015b40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015b42:	889b      	ldrh	r3, [r3, #4]
 8015b44:	b29b      	uxth	r3, r3
 8015b46:	429a      	cmp	r2, r3
 8015b48:	d010      	beq.n	8015b6c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8015b4a:	2300      	movs	r3, #0
 8015b4c:	623b      	str	r3, [r7, #32]
 8015b4e:	e00d      	b.n	8015b6c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8015b50:	68fb      	ldr	r3, [r7, #12]
 8015b52:	685b      	ldr	r3, [r3, #4]
 8015b54:	2b00      	cmp	r3, #0
 8015b56:	d006      	beq.n	8015b66 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8015b58:	4b38      	ldr	r3, [pc, #224]	@ (8015c3c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015b5a:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 8015b5e:	493a      	ldr	r1, [pc, #232]	@ (8015c48 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8015b60:	4838      	ldr	r0, [pc, #224]	@ (8015c44 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015b62:	f001 fbb7 	bl	80172d4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8015b66:	68fb      	ldr	r3, [r7, #12]
 8015b68:	68ba      	ldr	r2, [r7, #8]
 8015b6a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8015b6c:	687b      	ldr	r3, [r7, #4]
 8015b6e:	2b00      	cmp	r3, #0
 8015b70:	d105      	bne.n	8015b7e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8015b72:	68fb      	ldr	r3, [r7, #12]
 8015b74:	7f9b      	ldrb	r3, [r3, #30]
 8015b76:	f003 0301 	and.w	r3, r3, #1
 8015b7a:	2b00      	cmp	r3, #0
 8015b7c:	d059      	beq.n	8015c32 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8015b7e:	6a3b      	ldr	r3, [r7, #32]
 8015b80:	2b00      	cmp	r3, #0
 8015b82:	d04f      	beq.n	8015c24 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8015b84:	68fb      	ldr	r3, [r7, #12]
 8015b86:	685b      	ldr	r3, [r3, #4]
 8015b88:	2b00      	cmp	r3, #0
 8015b8a:	d006      	beq.n	8015b9a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8015b8c:	68fb      	ldr	r3, [r7, #12]
 8015b8e:	685b      	ldr	r3, [r3, #4]
 8015b90:	685b      	ldr	r3, [r3, #4]
 8015b92:	889b      	ldrh	r3, [r3, #4]
 8015b94:	b29b      	uxth	r3, r3
 8015b96:	2b00      	cmp	r3, #0
 8015b98:	d002      	beq.n	8015ba0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8015b9a:	2300      	movs	r3, #0
 8015b9c:	623b      	str	r3, [r7, #32]
 8015b9e:	e041      	b.n	8015c24 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8015ba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ba2:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8015ba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ba6:	681b      	ldr	r3, [r3, #0]
 8015ba8:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8015baa:	e012      	b.n	8015bd2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8015bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015bae:	685b      	ldr	r3, [r3, #4]
 8015bb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8015bb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015bb4:	88db      	ldrh	r3, [r3, #6]
 8015bb6:	b29a      	uxth	r2, r3
 8015bb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015bba:	889b      	ldrh	r3, [r3, #4]
 8015bbc:	b29b      	uxth	r3, r3
 8015bbe:	429a      	cmp	r2, r3
 8015bc0:	d002      	beq.n	8015bc8 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8015bc2:	2300      	movs	r3, #0
 8015bc4:	623b      	str	r3, [r7, #32]
            break;
 8015bc6:	e007      	b.n	8015bd8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8015bc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015bca:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8015bcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015bce:	681b      	ldr	r3, [r3, #0]
 8015bd0:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8015bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015bd4:	2b00      	cmp	r3, #0
 8015bd6:	d1e9      	bne.n	8015bac <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8015bd8:	6a3b      	ldr	r3, [r7, #32]
 8015bda:	2b00      	cmp	r3, #0
 8015bdc:	d022      	beq.n	8015c24 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8015bde:	68fb      	ldr	r3, [r7, #12]
 8015be0:	685b      	ldr	r3, [r3, #4]
 8015be2:	2b00      	cmp	r3, #0
 8015be4:	d106      	bne.n	8015bf4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8015be6:	4b15      	ldr	r3, [pc, #84]	@ (8015c3c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015be8:	f240 12df 	movw	r2, #479	@ 0x1df
 8015bec:	4917      	ldr	r1, [pc, #92]	@ (8015c4c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015bee:	4815      	ldr	r0, [pc, #84]	@ (8015c44 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015bf0:	f001 fb70 	bl	80172d4 <iprintf>
          LWIP_ASSERT("sanity check",
 8015bf4:	68fb      	ldr	r3, [r7, #12]
 8015bf6:	685b      	ldr	r3, [r3, #4]
 8015bf8:	685b      	ldr	r3, [r3, #4]
 8015bfa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015bfc:	429a      	cmp	r2, r3
 8015bfe:	d106      	bne.n	8015c0e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8015c00:	4b0e      	ldr	r3, [pc, #56]	@ (8015c3c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015c02:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8015c06:	4911      	ldr	r1, [pc, #68]	@ (8015c4c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015c08:	480e      	ldr	r0, [pc, #56]	@ (8015c44 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015c0a:	f001 fb63 	bl	80172d4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8015c0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c10:	681b      	ldr	r3, [r3, #0]
 8015c12:	2b00      	cmp	r3, #0
 8015c14:	d006      	beq.n	8015c24 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8015c16:	4b09      	ldr	r3, [pc, #36]	@ (8015c3c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015c18:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8015c1c:	490c      	ldr	r1, [pc, #48]	@ (8015c50 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8015c1e:	4809      	ldr	r0, [pc, #36]	@ (8015c44 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015c20:	f001 fb58 	bl	80172d4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8015c24:	6a3b      	ldr	r3, [r7, #32]
 8015c26:	2b00      	cmp	r3, #0
 8015c28:	bf14      	ite	ne
 8015c2a:	2301      	movne	r3, #1
 8015c2c:	2300      	moveq	r3, #0
 8015c2e:	b2db      	uxtb	r3, r3
 8015c30:	e000      	b.n	8015c34 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8015c32:	2300      	movs	r3, #0
}
 8015c34:	4618      	mov	r0, r3
 8015c36:	3730      	adds	r7, #48	@ 0x30
 8015c38:	46bd      	mov	sp, r7
 8015c3a:	bd80      	pop	{r7, pc}
 8015c3c:	0801af9c 	.word	0x0801af9c
 8015c40:	0801b080 	.word	0x0801b080
 8015c44:	0801afe4 	.word	0x0801afe4
 8015c48:	0801b0a0 	.word	0x0801b0a0
 8015c4c:	0801b0d8 	.word	0x0801b0d8
 8015c50:	0801b0e8 	.word	0x0801b0e8

08015c54 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8015c54:	b580      	push	{r7, lr}
 8015c56:	b08e      	sub	sp, #56	@ 0x38
 8015c58:	af00      	add	r7, sp, #0
 8015c5a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8015c5c:	687b      	ldr	r3, [r7, #4]
 8015c5e:	685b      	ldr	r3, [r3, #4]
 8015c60:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8015c62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c64:	781b      	ldrb	r3, [r3, #0]
 8015c66:	f003 030f 	and.w	r3, r3, #15
 8015c6a:	b2db      	uxtb	r3, r3
 8015c6c:	009b      	lsls	r3, r3, #2
 8015c6e:	b2db      	uxtb	r3, r3
 8015c70:	2b14      	cmp	r3, #20
 8015c72:	f040 8171 	bne.w	8015f58 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8015c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c78:	88db      	ldrh	r3, [r3, #6]
 8015c7a:	b29b      	uxth	r3, r3
 8015c7c:	4618      	mov	r0, r3
 8015c7e:	f7f6 fe7d 	bl	800c97c <lwip_htons>
 8015c82:	4603      	mov	r3, r0
 8015c84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015c88:	b29b      	uxth	r3, r3
 8015c8a:	00db      	lsls	r3, r3, #3
 8015c8c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015c8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c90:	885b      	ldrh	r3, [r3, #2]
 8015c92:	b29b      	uxth	r3, r3
 8015c94:	4618      	mov	r0, r3
 8015c96:	f7f6 fe71 	bl	800c97c <lwip_htons>
 8015c9a:	4603      	mov	r3, r0
 8015c9c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8015c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ca0:	781b      	ldrb	r3, [r3, #0]
 8015ca2:	f003 030f 	and.w	r3, r3, #15
 8015ca6:	b2db      	uxtb	r3, r3
 8015ca8:	009b      	lsls	r3, r3, #2
 8015caa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8015cae:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8015cb2:	b29b      	uxth	r3, r3
 8015cb4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8015cb6:	429a      	cmp	r2, r3
 8015cb8:	f0c0 8150 	bcc.w	8015f5c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8015cbc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8015cc0:	b29b      	uxth	r3, r3
 8015cc2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8015cc4:	1ad3      	subs	r3, r2, r3
 8015cc6:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8015cc8:	6878      	ldr	r0, [r7, #4]
 8015cca:	f7f8 faa5 	bl	800e218 <pbuf_clen>
 8015cce:	4603      	mov	r3, r0
 8015cd0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8015cd2:	4b8c      	ldr	r3, [pc, #560]	@ (8015f04 <ip4_reass+0x2b0>)
 8015cd4:	881b      	ldrh	r3, [r3, #0]
 8015cd6:	461a      	mov	r2, r3
 8015cd8:	8c3b      	ldrh	r3, [r7, #32]
 8015cda:	4413      	add	r3, r2
 8015cdc:	2b0a      	cmp	r3, #10
 8015cde:	dd10      	ble.n	8015d02 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015ce0:	8c3b      	ldrh	r3, [r7, #32]
 8015ce2:	4619      	mov	r1, r3
 8015ce4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015ce6:	f7ff fd81 	bl	80157ec <ip_reass_remove_oldest_datagram>
 8015cea:	4603      	mov	r3, r0
 8015cec:	2b00      	cmp	r3, #0
 8015cee:	f000 8137 	beq.w	8015f60 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8015cf2:	4b84      	ldr	r3, [pc, #528]	@ (8015f04 <ip4_reass+0x2b0>)
 8015cf4:	881b      	ldrh	r3, [r3, #0]
 8015cf6:	461a      	mov	r2, r3
 8015cf8:	8c3b      	ldrh	r3, [r7, #32]
 8015cfa:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015cfc:	2b0a      	cmp	r3, #10
 8015cfe:	f300 812f 	bgt.w	8015f60 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015d02:	4b81      	ldr	r3, [pc, #516]	@ (8015f08 <ip4_reass+0x2b4>)
 8015d04:	681b      	ldr	r3, [r3, #0]
 8015d06:	633b      	str	r3, [r7, #48]	@ 0x30
 8015d08:	e015      	b.n	8015d36 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8015d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015d0c:	695a      	ldr	r2, [r3, #20]
 8015d0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d10:	68db      	ldr	r3, [r3, #12]
 8015d12:	429a      	cmp	r2, r3
 8015d14:	d10c      	bne.n	8015d30 <ip4_reass+0xdc>
 8015d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015d18:	699a      	ldr	r2, [r3, #24]
 8015d1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d1c:	691b      	ldr	r3, [r3, #16]
 8015d1e:	429a      	cmp	r2, r3
 8015d20:	d106      	bne.n	8015d30 <ip4_reass+0xdc>
 8015d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015d24:	899a      	ldrh	r2, [r3, #12]
 8015d26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d28:	889b      	ldrh	r3, [r3, #4]
 8015d2a:	b29b      	uxth	r3, r3
 8015d2c:	429a      	cmp	r2, r3
 8015d2e:	d006      	beq.n	8015d3e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015d32:	681b      	ldr	r3, [r3, #0]
 8015d34:	633b      	str	r3, [r7, #48]	@ 0x30
 8015d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015d38:	2b00      	cmp	r3, #0
 8015d3a:	d1e6      	bne.n	8015d0a <ip4_reass+0xb6>
 8015d3c:	e000      	b.n	8015d40 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8015d3e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8015d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015d42:	2b00      	cmp	r3, #0
 8015d44:	d109      	bne.n	8015d5a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8015d46:	8c3b      	ldrh	r3, [r7, #32]
 8015d48:	4619      	mov	r1, r3
 8015d4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015d4c:	f7ff fdb0 	bl	80158b0 <ip_reass_enqueue_new_datagram>
 8015d50:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8015d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015d54:	2b00      	cmp	r3, #0
 8015d56:	d11c      	bne.n	8015d92 <ip4_reass+0x13e>
      goto nullreturn;
 8015d58:	e105      	b.n	8015f66 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d5c:	88db      	ldrh	r3, [r3, #6]
 8015d5e:	b29b      	uxth	r3, r3
 8015d60:	4618      	mov	r0, r3
 8015d62:	f7f6 fe0b 	bl	800c97c <lwip_htons>
 8015d66:	4603      	mov	r3, r0
 8015d68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015d6c:	2b00      	cmp	r3, #0
 8015d6e:	d110      	bne.n	8015d92 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8015d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015d72:	89db      	ldrh	r3, [r3, #14]
 8015d74:	4618      	mov	r0, r3
 8015d76:	f7f6 fe01 	bl	800c97c <lwip_htons>
 8015d7a:	4603      	mov	r3, r0
 8015d7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015d80:	2b00      	cmp	r3, #0
 8015d82:	d006      	beq.n	8015d92 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8015d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015d86:	3308      	adds	r3, #8
 8015d88:	2214      	movs	r2, #20
 8015d8a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8015d8c:	4618      	mov	r0, r3
 8015d8e:	f001 fc2a 	bl	80175e6 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8015d92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d94:	88db      	ldrh	r3, [r3, #6]
 8015d96:	b29b      	uxth	r3, r3
 8015d98:	f003 0320 	and.w	r3, r3, #32
 8015d9c:	2b00      	cmp	r3, #0
 8015d9e:	bf0c      	ite	eq
 8015da0:	2301      	moveq	r3, #1
 8015da2:	2300      	movne	r3, #0
 8015da4:	b2db      	uxtb	r3, r3
 8015da6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8015da8:	69fb      	ldr	r3, [r7, #28]
 8015daa:	2b00      	cmp	r3, #0
 8015dac:	d00e      	beq.n	8015dcc <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8015dae:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8015db0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8015db2:	4413      	add	r3, r2
 8015db4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8015db6:	8b7a      	ldrh	r2, [r7, #26]
 8015db8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8015dba:	429a      	cmp	r2, r3
 8015dbc:	f0c0 80a0 	bcc.w	8015f00 <ip4_reass+0x2ac>
 8015dc0:	8b7b      	ldrh	r3, [r7, #26]
 8015dc2:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8015dc6:	4293      	cmp	r3, r2
 8015dc8:	f200 809a 	bhi.w	8015f00 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8015dcc:	69fa      	ldr	r2, [r7, #28]
 8015dce:	6879      	ldr	r1, [r7, #4]
 8015dd0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015dd2:	f7ff fdd5 	bl	8015980 <ip_reass_chain_frag_into_datagram_and_validate>
 8015dd6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8015dd8:	697b      	ldr	r3, [r7, #20]
 8015dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015dde:	f000 809b 	beq.w	8015f18 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8015de2:	4b48      	ldr	r3, [pc, #288]	@ (8015f04 <ip4_reass+0x2b0>)
 8015de4:	881a      	ldrh	r2, [r3, #0]
 8015de6:	8c3b      	ldrh	r3, [r7, #32]
 8015de8:	4413      	add	r3, r2
 8015dea:	b29a      	uxth	r2, r3
 8015dec:	4b45      	ldr	r3, [pc, #276]	@ (8015f04 <ip4_reass+0x2b0>)
 8015dee:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8015df0:	69fb      	ldr	r3, [r7, #28]
 8015df2:	2b00      	cmp	r3, #0
 8015df4:	d00d      	beq.n	8015e12 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8015df6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8015df8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8015dfa:	4413      	add	r3, r2
 8015dfc:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8015dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015e00:	8a7a      	ldrh	r2, [r7, #18]
 8015e02:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8015e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015e06:	7f9b      	ldrb	r3, [r3, #30]
 8015e08:	f043 0301 	orr.w	r3, r3, #1
 8015e0c:	b2da      	uxtb	r2, r3
 8015e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015e10:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8015e12:	697b      	ldr	r3, [r7, #20]
 8015e14:	2b01      	cmp	r3, #1
 8015e16:	d171      	bne.n	8015efc <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8015e18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015e1a:	8b9b      	ldrh	r3, [r3, #28]
 8015e1c:	3314      	adds	r3, #20
 8015e1e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8015e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015e22:	685b      	ldr	r3, [r3, #4]
 8015e24:	685b      	ldr	r3, [r3, #4]
 8015e26:	681b      	ldr	r3, [r3, #0]
 8015e28:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8015e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015e2c:	685b      	ldr	r3, [r3, #4]
 8015e2e:	685b      	ldr	r3, [r3, #4]
 8015e30:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8015e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015e34:	3308      	adds	r3, #8
 8015e36:	2214      	movs	r2, #20
 8015e38:	4619      	mov	r1, r3
 8015e3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015e3c:	f001 fbd3 	bl	80175e6 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8015e40:	8a3b      	ldrh	r3, [r7, #16]
 8015e42:	4618      	mov	r0, r3
 8015e44:	f7f6 fd9a 	bl	800c97c <lwip_htons>
 8015e48:	4603      	mov	r3, r0
 8015e4a:	461a      	mov	r2, r3
 8015e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015e4e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8015e50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015e52:	2200      	movs	r2, #0
 8015e54:	719a      	strb	r2, [r3, #6]
 8015e56:	2200      	movs	r2, #0
 8015e58:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8015e5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015e5c:	2200      	movs	r2, #0
 8015e5e:	729a      	strb	r2, [r3, #10]
 8015e60:	2200      	movs	r2, #0
 8015e62:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8015e64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015e66:	685b      	ldr	r3, [r3, #4]
 8015e68:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8015e6a:	e00d      	b.n	8015e88 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8015e6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015e6e:	685b      	ldr	r3, [r3, #4]
 8015e70:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8015e72:	2114      	movs	r1, #20
 8015e74:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8015e76:	f7f8 f8bb 	bl	800dff0 <pbuf_remove_header>
      pbuf_cat(p, r);
 8015e7a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8015e7c:	6878      	ldr	r0, [r7, #4]
 8015e7e:	f7f8 fa0b 	bl	800e298 <pbuf_cat>
      r = iprh->next_pbuf;
 8015e82:	68fb      	ldr	r3, [r7, #12]
 8015e84:	681b      	ldr	r3, [r3, #0]
 8015e86:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 8015e88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015e8a:	2b00      	cmp	r3, #0
 8015e8c:	d1ee      	bne.n	8015e6c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8015e8e:	4b1e      	ldr	r3, [pc, #120]	@ (8015f08 <ip4_reass+0x2b4>)
 8015e90:	681b      	ldr	r3, [r3, #0]
 8015e92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015e94:	429a      	cmp	r2, r3
 8015e96:	d102      	bne.n	8015e9e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8015e98:	2300      	movs	r3, #0
 8015e9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015e9c:	e010      	b.n	8015ec0 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015e9e:	4b1a      	ldr	r3, [pc, #104]	@ (8015f08 <ip4_reass+0x2b4>)
 8015ea0:	681b      	ldr	r3, [r3, #0]
 8015ea2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015ea4:	e007      	b.n	8015eb6 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8015ea6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ea8:	681b      	ldr	r3, [r3, #0]
 8015eaa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015eac:	429a      	cmp	r2, r3
 8015eae:	d006      	beq.n	8015ebe <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015eb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015eb2:	681b      	ldr	r3, [r3, #0]
 8015eb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015eb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015eb8:	2b00      	cmp	r3, #0
 8015eba:	d1f4      	bne.n	8015ea6 <ip4_reass+0x252>
 8015ebc:	e000      	b.n	8015ec0 <ip4_reass+0x26c>
          break;
 8015ebe:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8015ec0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8015ec2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015ec4:	f7ff fd2e 	bl	8015924 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8015ec8:	6878      	ldr	r0, [r7, #4]
 8015eca:	f7f8 f9a5 	bl	800e218 <pbuf_clen>
 8015ece:	4603      	mov	r3, r0
 8015ed0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8015ed2:	4b0c      	ldr	r3, [pc, #48]	@ (8015f04 <ip4_reass+0x2b0>)
 8015ed4:	881b      	ldrh	r3, [r3, #0]
 8015ed6:	8c3a      	ldrh	r2, [r7, #32]
 8015ed8:	429a      	cmp	r2, r3
 8015eda:	d906      	bls.n	8015eea <ip4_reass+0x296>
 8015edc:	4b0b      	ldr	r3, [pc, #44]	@ (8015f0c <ip4_reass+0x2b8>)
 8015ede:	f240 229b 	movw	r2, #667	@ 0x29b
 8015ee2:	490b      	ldr	r1, [pc, #44]	@ (8015f10 <ip4_reass+0x2bc>)
 8015ee4:	480b      	ldr	r0, [pc, #44]	@ (8015f14 <ip4_reass+0x2c0>)
 8015ee6:	f001 f9f5 	bl	80172d4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8015eea:	4b06      	ldr	r3, [pc, #24]	@ (8015f04 <ip4_reass+0x2b0>)
 8015eec:	881a      	ldrh	r2, [r3, #0]
 8015eee:	8c3b      	ldrh	r3, [r7, #32]
 8015ef0:	1ad3      	subs	r3, r2, r3
 8015ef2:	b29a      	uxth	r2, r3
 8015ef4:	4b03      	ldr	r3, [pc, #12]	@ (8015f04 <ip4_reass+0x2b0>)
 8015ef6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8015ef8:	687b      	ldr	r3, [r7, #4]
 8015efa:	e038      	b.n	8015f6e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8015efc:	2300      	movs	r3, #0
 8015efe:	e036      	b.n	8015f6e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8015f00:	bf00      	nop
 8015f02:	e00a      	b.n	8015f1a <ip4_reass+0x2c6>
 8015f04:	2000c7e0 	.word	0x2000c7e0
 8015f08:	2000c7dc 	.word	0x2000c7dc
 8015f0c:	0801af9c 	.word	0x0801af9c
 8015f10:	0801b10c 	.word	0x0801b10c
 8015f14:	0801afe4 	.word	0x0801afe4
    goto nullreturn_ipr;
 8015f18:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8015f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f1c:	2b00      	cmp	r3, #0
 8015f1e:	d106      	bne.n	8015f2e <ip4_reass+0x2da>
 8015f20:	4b15      	ldr	r3, [pc, #84]	@ (8015f78 <ip4_reass+0x324>)
 8015f22:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8015f26:	4915      	ldr	r1, [pc, #84]	@ (8015f7c <ip4_reass+0x328>)
 8015f28:	4815      	ldr	r0, [pc, #84]	@ (8015f80 <ip4_reass+0x32c>)
 8015f2a:	f001 f9d3 	bl	80172d4 <iprintf>
  if (ipr->p == NULL) {
 8015f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f30:	685b      	ldr	r3, [r3, #4]
 8015f32:	2b00      	cmp	r3, #0
 8015f34:	d116      	bne.n	8015f64 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8015f36:	4b13      	ldr	r3, [pc, #76]	@ (8015f84 <ip4_reass+0x330>)
 8015f38:	681b      	ldr	r3, [r3, #0]
 8015f3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015f3c:	429a      	cmp	r2, r3
 8015f3e:	d006      	beq.n	8015f4e <ip4_reass+0x2fa>
 8015f40:	4b0d      	ldr	r3, [pc, #52]	@ (8015f78 <ip4_reass+0x324>)
 8015f42:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8015f46:	4910      	ldr	r1, [pc, #64]	@ (8015f88 <ip4_reass+0x334>)
 8015f48:	480d      	ldr	r0, [pc, #52]	@ (8015f80 <ip4_reass+0x32c>)
 8015f4a:	f001 f9c3 	bl	80172d4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8015f4e:	2100      	movs	r1, #0
 8015f50:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015f52:	f7ff fce7 	bl	8015924 <ip_reass_dequeue_datagram>
 8015f56:	e006      	b.n	8015f66 <ip4_reass+0x312>
    goto nullreturn;
 8015f58:	bf00      	nop
 8015f5a:	e004      	b.n	8015f66 <ip4_reass+0x312>
    goto nullreturn;
 8015f5c:	bf00      	nop
 8015f5e:	e002      	b.n	8015f66 <ip4_reass+0x312>
      goto nullreturn;
 8015f60:	bf00      	nop
 8015f62:	e000      	b.n	8015f66 <ip4_reass+0x312>
  }

nullreturn:
 8015f64:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8015f66:	6878      	ldr	r0, [r7, #4]
 8015f68:	f7f8 f8c8 	bl	800e0fc <pbuf_free>
  return NULL;
 8015f6c:	2300      	movs	r3, #0
}
 8015f6e:	4618      	mov	r0, r3
 8015f70:	3738      	adds	r7, #56	@ 0x38
 8015f72:	46bd      	mov	sp, r7
 8015f74:	bd80      	pop	{r7, pc}
 8015f76:	bf00      	nop
 8015f78:	0801af9c 	.word	0x0801af9c
 8015f7c:	0801b128 	.word	0x0801b128
 8015f80:	0801afe4 	.word	0x0801afe4
 8015f84:	2000c7dc 	.word	0x2000c7dc
 8015f88:	0801b134 	.word	0x0801b134

08015f8c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8015f8c:	b580      	push	{r7, lr}
 8015f8e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8015f90:	2005      	movs	r0, #5
 8015f92:	f7f7 f9cb 	bl	800d32c <memp_malloc>
 8015f96:	4603      	mov	r3, r0
}
 8015f98:	4618      	mov	r0, r3
 8015f9a:	bd80      	pop	{r7, pc}

08015f9c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8015f9c:	b580      	push	{r7, lr}
 8015f9e:	b082      	sub	sp, #8
 8015fa0:	af00      	add	r7, sp, #0
 8015fa2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8015fa4:	687b      	ldr	r3, [r7, #4]
 8015fa6:	2b00      	cmp	r3, #0
 8015fa8:	d106      	bne.n	8015fb8 <ip_frag_free_pbuf_custom_ref+0x1c>
 8015faa:	4b07      	ldr	r3, [pc, #28]	@ (8015fc8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8015fac:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8015fb0:	4906      	ldr	r1, [pc, #24]	@ (8015fcc <ip_frag_free_pbuf_custom_ref+0x30>)
 8015fb2:	4807      	ldr	r0, [pc, #28]	@ (8015fd0 <ip_frag_free_pbuf_custom_ref+0x34>)
 8015fb4:	f001 f98e 	bl	80172d4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8015fb8:	6879      	ldr	r1, [r7, #4]
 8015fba:	2005      	movs	r0, #5
 8015fbc:	f7f7 fa2c 	bl	800d418 <memp_free>
}
 8015fc0:	bf00      	nop
 8015fc2:	3708      	adds	r7, #8
 8015fc4:	46bd      	mov	sp, r7
 8015fc6:	bd80      	pop	{r7, pc}
 8015fc8:	0801af9c 	.word	0x0801af9c
 8015fcc:	0801b154 	.word	0x0801b154
 8015fd0:	0801afe4 	.word	0x0801afe4

08015fd4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8015fd4:	b580      	push	{r7, lr}
 8015fd6:	b084      	sub	sp, #16
 8015fd8:	af00      	add	r7, sp, #0
 8015fda:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8015fdc:	687b      	ldr	r3, [r7, #4]
 8015fde:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8015fe0:	68fb      	ldr	r3, [r7, #12]
 8015fe2:	2b00      	cmp	r3, #0
 8015fe4:	d106      	bne.n	8015ff4 <ipfrag_free_pbuf_custom+0x20>
 8015fe6:	4b11      	ldr	r3, [pc, #68]	@ (801602c <ipfrag_free_pbuf_custom+0x58>)
 8015fe8:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8015fec:	4910      	ldr	r1, [pc, #64]	@ (8016030 <ipfrag_free_pbuf_custom+0x5c>)
 8015fee:	4811      	ldr	r0, [pc, #68]	@ (8016034 <ipfrag_free_pbuf_custom+0x60>)
 8015ff0:	f001 f970 	bl	80172d4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8015ff4:	68fa      	ldr	r2, [r7, #12]
 8015ff6:	687b      	ldr	r3, [r7, #4]
 8015ff8:	429a      	cmp	r2, r3
 8015ffa:	d006      	beq.n	801600a <ipfrag_free_pbuf_custom+0x36>
 8015ffc:	4b0b      	ldr	r3, [pc, #44]	@ (801602c <ipfrag_free_pbuf_custom+0x58>)
 8015ffe:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8016002:	490d      	ldr	r1, [pc, #52]	@ (8016038 <ipfrag_free_pbuf_custom+0x64>)
 8016004:	480b      	ldr	r0, [pc, #44]	@ (8016034 <ipfrag_free_pbuf_custom+0x60>)
 8016006:	f001 f965 	bl	80172d4 <iprintf>
  if (pcr->original != NULL) {
 801600a:	68fb      	ldr	r3, [r7, #12]
 801600c:	695b      	ldr	r3, [r3, #20]
 801600e:	2b00      	cmp	r3, #0
 8016010:	d004      	beq.n	801601c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8016012:	68fb      	ldr	r3, [r7, #12]
 8016014:	695b      	ldr	r3, [r3, #20]
 8016016:	4618      	mov	r0, r3
 8016018:	f7f8 f870 	bl	800e0fc <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801601c:	68f8      	ldr	r0, [r7, #12]
 801601e:	f7ff ffbd 	bl	8015f9c <ip_frag_free_pbuf_custom_ref>
}
 8016022:	bf00      	nop
 8016024:	3710      	adds	r7, #16
 8016026:	46bd      	mov	sp, r7
 8016028:	bd80      	pop	{r7, pc}
 801602a:	bf00      	nop
 801602c:	0801af9c 	.word	0x0801af9c
 8016030:	0801b160 	.word	0x0801b160
 8016034:	0801afe4 	.word	0x0801afe4
 8016038:	0801b16c 	.word	0x0801b16c

0801603c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801603c:	b580      	push	{r7, lr}
 801603e:	b094      	sub	sp, #80	@ 0x50
 8016040:	af02      	add	r7, sp, #8
 8016042:	60f8      	str	r0, [r7, #12]
 8016044:	60b9      	str	r1, [r7, #8]
 8016046:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8016048:	2300      	movs	r3, #0
 801604a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801604e:	68bb      	ldr	r3, [r7, #8]
 8016050:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8016052:	3b14      	subs	r3, #20
 8016054:	2b00      	cmp	r3, #0
 8016056:	da00      	bge.n	801605a <ip4_frag+0x1e>
 8016058:	3307      	adds	r3, #7
 801605a:	10db      	asrs	r3, r3, #3
 801605c:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801605e:	2314      	movs	r3, #20
 8016060:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8016062:	68fb      	ldr	r3, [r7, #12]
 8016064:	685b      	ldr	r3, [r3, #4]
 8016066:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8016068:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801606a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801606c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801606e:	781b      	ldrb	r3, [r3, #0]
 8016070:	f003 030f 	and.w	r3, r3, #15
 8016074:	b2db      	uxtb	r3, r3
 8016076:	009b      	lsls	r3, r3, #2
 8016078:	b2db      	uxtb	r3, r3
 801607a:	2b14      	cmp	r3, #20
 801607c:	d002      	beq.n	8016084 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801607e:	f06f 0305 	mvn.w	r3, #5
 8016082:	e110      	b.n	80162a6 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8016084:	68fb      	ldr	r3, [r7, #12]
 8016086:	895b      	ldrh	r3, [r3, #10]
 8016088:	2b13      	cmp	r3, #19
 801608a:	d809      	bhi.n	80160a0 <ip4_frag+0x64>
 801608c:	4b88      	ldr	r3, [pc, #544]	@ (80162b0 <ip4_frag+0x274>)
 801608e:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8016092:	4988      	ldr	r1, [pc, #544]	@ (80162b4 <ip4_frag+0x278>)
 8016094:	4888      	ldr	r0, [pc, #544]	@ (80162b8 <ip4_frag+0x27c>)
 8016096:	f001 f91d 	bl	80172d4 <iprintf>
 801609a:	f06f 0305 	mvn.w	r3, #5
 801609e:	e102      	b.n	80162a6 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80160a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80160a2:	88db      	ldrh	r3, [r3, #6]
 80160a4:	b29b      	uxth	r3, r3
 80160a6:	4618      	mov	r0, r3
 80160a8:	f7f6 fc68 	bl	800c97c <lwip_htons>
 80160ac:	4603      	mov	r3, r0
 80160ae:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 80160b0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80160b2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80160b6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80160ba:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80160bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80160c0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80160c2:	68fb      	ldr	r3, [r7, #12]
 80160c4:	891b      	ldrh	r3, [r3, #8]
 80160c6:	3b14      	subs	r3, #20
 80160c8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 80160cc:	e0e1      	b.n	8016292 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80160ce:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80160d0:	00db      	lsls	r3, r3, #3
 80160d2:	b29b      	uxth	r3, r3
 80160d4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80160d8:	4293      	cmp	r3, r2
 80160da:	bf28      	it	cs
 80160dc:	4613      	movcs	r3, r2
 80160de:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80160e0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80160e4:	2114      	movs	r1, #20
 80160e6:	200e      	movs	r0, #14
 80160e8:	f7f7 fd24 	bl	800db34 <pbuf_alloc>
 80160ec:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 80160ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80160f0:	2b00      	cmp	r3, #0
 80160f2:	f000 80d5 	beq.w	80162a0 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80160f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80160f8:	895b      	ldrh	r3, [r3, #10]
 80160fa:	2b13      	cmp	r3, #19
 80160fc:	d806      	bhi.n	801610c <ip4_frag+0xd0>
 80160fe:	4b6c      	ldr	r3, [pc, #432]	@ (80162b0 <ip4_frag+0x274>)
 8016100:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8016104:	496d      	ldr	r1, [pc, #436]	@ (80162bc <ip4_frag+0x280>)
 8016106:	486c      	ldr	r0, [pc, #432]	@ (80162b8 <ip4_frag+0x27c>)
 8016108:	f001 f8e4 	bl	80172d4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801610c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801610e:	685b      	ldr	r3, [r3, #4]
 8016110:	2214      	movs	r2, #20
 8016112:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8016114:	4618      	mov	r0, r3
 8016116:	f001 fa66 	bl	80175e6 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801611a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801611c:	685b      	ldr	r3, [r3, #4]
 801611e:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8016120:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8016122:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 8016126:	e064      	b.n	80161f2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8016128:	68fb      	ldr	r3, [r7, #12]
 801612a:	895a      	ldrh	r2, [r3, #10]
 801612c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801612e:	1ad3      	subs	r3, r2, r3
 8016130:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8016132:	68fb      	ldr	r3, [r7, #12]
 8016134:	895b      	ldrh	r3, [r3, #10]
 8016136:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8016138:	429a      	cmp	r2, r3
 801613a:	d906      	bls.n	801614a <ip4_frag+0x10e>
 801613c:	4b5c      	ldr	r3, [pc, #368]	@ (80162b0 <ip4_frag+0x274>)
 801613e:	f240 322d 	movw	r2, #813	@ 0x32d
 8016142:	495f      	ldr	r1, [pc, #380]	@ (80162c0 <ip4_frag+0x284>)
 8016144:	485c      	ldr	r0, [pc, #368]	@ (80162b8 <ip4_frag+0x27c>)
 8016146:	f001 f8c5 	bl	80172d4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801614a:	8bfa      	ldrh	r2, [r7, #30]
 801614c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8016150:	4293      	cmp	r3, r2
 8016152:	bf28      	it	cs
 8016154:	4613      	movcs	r3, r2
 8016156:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801615a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801615e:	2b00      	cmp	r3, #0
 8016160:	d105      	bne.n	801616e <ip4_frag+0x132>
        poff = 0;
 8016162:	2300      	movs	r3, #0
 8016164:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8016166:	68fb      	ldr	r3, [r7, #12]
 8016168:	681b      	ldr	r3, [r3, #0]
 801616a:	60fb      	str	r3, [r7, #12]
        continue;
 801616c:	e041      	b.n	80161f2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801616e:	f7ff ff0d 	bl	8015f8c <ip_frag_alloc_pbuf_custom_ref>
 8016172:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8016174:	69bb      	ldr	r3, [r7, #24]
 8016176:	2b00      	cmp	r3, #0
 8016178:	d103      	bne.n	8016182 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801617a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801617c:	f7f7 ffbe 	bl	800e0fc <pbuf_free>
        goto memerr;
 8016180:	e08f      	b.n	80162a2 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016182:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8016184:	68fb      	ldr	r3, [r7, #12]
 8016186:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016188:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801618a:	4413      	add	r3, r2
 801618c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8016190:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8016194:	9201      	str	r2, [sp, #4]
 8016196:	9300      	str	r3, [sp, #0]
 8016198:	4603      	mov	r3, r0
 801619a:	2241      	movs	r2, #65	@ 0x41
 801619c:	2000      	movs	r0, #0
 801619e:	f7f7 fdf3 	bl	800dd88 <pbuf_alloced_custom>
 80161a2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80161a4:	697b      	ldr	r3, [r7, #20]
 80161a6:	2b00      	cmp	r3, #0
 80161a8:	d106      	bne.n	80161b8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80161aa:	69b8      	ldr	r0, [r7, #24]
 80161ac:	f7ff fef6 	bl	8015f9c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80161b0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80161b2:	f7f7 ffa3 	bl	800e0fc <pbuf_free>
        goto memerr;
 80161b6:	e074      	b.n	80162a2 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80161b8:	68f8      	ldr	r0, [r7, #12]
 80161ba:	f7f8 f845 	bl	800e248 <pbuf_ref>
      pcr->original = p;
 80161be:	69bb      	ldr	r3, [r7, #24]
 80161c0:	68fa      	ldr	r2, [r7, #12]
 80161c2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80161c4:	69bb      	ldr	r3, [r7, #24]
 80161c6:	4a3f      	ldr	r2, [pc, #252]	@ (80162c4 <ip4_frag+0x288>)
 80161c8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80161ca:	6979      	ldr	r1, [r7, #20]
 80161cc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80161ce:	f7f8 f863 	bl	800e298 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80161d2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 80161d6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80161da:	1ad3      	subs	r3, r2, r3
 80161dc:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 80161e0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80161e4:	2b00      	cmp	r3, #0
 80161e6:	d004      	beq.n	80161f2 <ip4_frag+0x1b6>
        poff = 0;
 80161e8:	2300      	movs	r3, #0
 80161ea:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 80161ec:	68fb      	ldr	r3, [r7, #12]
 80161ee:	681b      	ldr	r3, [r3, #0]
 80161f0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80161f2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80161f6:	2b00      	cmp	r3, #0
 80161f8:	d196      	bne.n	8016128 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80161fa:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80161fc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8016200:	4413      	add	r3, r2
 8016202:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8016204:	68bb      	ldr	r3, [r7, #8]
 8016206:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8016208:	f1a3 0213 	sub.w	r2, r3, #19
 801620c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8016210:	429a      	cmp	r2, r3
 8016212:	bfcc      	ite	gt
 8016214:	2301      	movgt	r3, #1
 8016216:	2300      	movle	r3, #0
 8016218:	b2db      	uxtb	r3, r3
 801621a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801621c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8016220:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016224:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 8016226:	6a3b      	ldr	r3, [r7, #32]
 8016228:	2b00      	cmp	r3, #0
 801622a:	d002      	beq.n	8016232 <ip4_frag+0x1f6>
 801622c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801622e:	2b00      	cmp	r3, #0
 8016230:	d003      	beq.n	801623a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8016232:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8016234:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8016238:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801623a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801623c:	4618      	mov	r0, r3
 801623e:	f7f6 fb9d 	bl	800c97c <lwip_htons>
 8016242:	4603      	mov	r3, r0
 8016244:	461a      	mov	r2, r3
 8016246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016248:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801624a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801624c:	3314      	adds	r3, #20
 801624e:	b29b      	uxth	r3, r3
 8016250:	4618      	mov	r0, r3
 8016252:	f7f6 fb93 	bl	800c97c <lwip_htons>
 8016256:	4603      	mov	r3, r0
 8016258:	461a      	mov	r2, r3
 801625a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801625c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801625e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016260:	2200      	movs	r2, #0
 8016262:	729a      	strb	r2, [r3, #10]
 8016264:	2200      	movs	r2, #0
 8016266:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8016268:	68bb      	ldr	r3, [r7, #8]
 801626a:	695b      	ldr	r3, [r3, #20]
 801626c:	687a      	ldr	r2, [r7, #4]
 801626e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8016270:	68b8      	ldr	r0, [r7, #8]
 8016272:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8016274:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016276:	f7f7 ff41 	bl	800e0fc <pbuf_free>
    left = (u16_t)(left - fragsize);
 801627a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801627e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8016280:	1ad3      	subs	r3, r2, r3
 8016282:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 8016286:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801628a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801628c:	4413      	add	r3, r2
 801628e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8016292:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8016296:	2b00      	cmp	r3, #0
 8016298:	f47f af19 	bne.w	80160ce <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801629c:	2300      	movs	r3, #0
 801629e:	e002      	b.n	80162a6 <ip4_frag+0x26a>
      goto memerr;
 80162a0:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80162a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80162a6:	4618      	mov	r0, r3
 80162a8:	3748      	adds	r7, #72	@ 0x48
 80162aa:	46bd      	mov	sp, r7
 80162ac:	bd80      	pop	{r7, pc}
 80162ae:	bf00      	nop
 80162b0:	0801af9c 	.word	0x0801af9c
 80162b4:	0801b178 	.word	0x0801b178
 80162b8:	0801afe4 	.word	0x0801afe4
 80162bc:	0801b194 	.word	0x0801b194
 80162c0:	0801b1b4 	.word	0x0801b1b4
 80162c4:	08015fd5 	.word	0x08015fd5

080162c8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80162c8:	b580      	push	{r7, lr}
 80162ca:	b086      	sub	sp, #24
 80162cc:	af00      	add	r7, sp, #0
 80162ce:	6078      	str	r0, [r7, #4]
 80162d0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80162d2:	230e      	movs	r3, #14
 80162d4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80162d6:	687b      	ldr	r3, [r7, #4]
 80162d8:	895b      	ldrh	r3, [r3, #10]
 80162da:	2b0e      	cmp	r3, #14
 80162dc:	d96e      	bls.n	80163bc <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80162de:	687b      	ldr	r3, [r7, #4]
 80162e0:	7bdb      	ldrb	r3, [r3, #15]
 80162e2:	2b00      	cmp	r3, #0
 80162e4:	d106      	bne.n	80162f4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80162e6:	683b      	ldr	r3, [r7, #0]
 80162e8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80162ec:	3301      	adds	r3, #1
 80162ee:	b2da      	uxtb	r2, r3
 80162f0:	687b      	ldr	r3, [r7, #4]
 80162f2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80162f4:	687b      	ldr	r3, [r7, #4]
 80162f6:	685b      	ldr	r3, [r3, #4]
 80162f8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80162fa:	693b      	ldr	r3, [r7, #16]
 80162fc:	7b1a      	ldrb	r2, [r3, #12]
 80162fe:	7b5b      	ldrb	r3, [r3, #13]
 8016300:	021b      	lsls	r3, r3, #8
 8016302:	4313      	orrs	r3, r2
 8016304:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8016306:	693b      	ldr	r3, [r7, #16]
 8016308:	781b      	ldrb	r3, [r3, #0]
 801630a:	f003 0301 	and.w	r3, r3, #1
 801630e:	2b00      	cmp	r3, #0
 8016310:	d023      	beq.n	801635a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8016312:	693b      	ldr	r3, [r7, #16]
 8016314:	781b      	ldrb	r3, [r3, #0]
 8016316:	2b01      	cmp	r3, #1
 8016318:	d10f      	bne.n	801633a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801631a:	693b      	ldr	r3, [r7, #16]
 801631c:	785b      	ldrb	r3, [r3, #1]
 801631e:	2b00      	cmp	r3, #0
 8016320:	d11b      	bne.n	801635a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8016322:	693b      	ldr	r3, [r7, #16]
 8016324:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016326:	2b5e      	cmp	r3, #94	@ 0x5e
 8016328:	d117      	bne.n	801635a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801632a:	687b      	ldr	r3, [r7, #4]
 801632c:	7b5b      	ldrb	r3, [r3, #13]
 801632e:	f043 0310 	orr.w	r3, r3, #16
 8016332:	b2da      	uxtb	r2, r3
 8016334:	687b      	ldr	r3, [r7, #4]
 8016336:	735a      	strb	r2, [r3, #13]
 8016338:	e00f      	b.n	801635a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801633a:	693b      	ldr	r3, [r7, #16]
 801633c:	2206      	movs	r2, #6
 801633e:	4928      	ldr	r1, [pc, #160]	@ (80163e0 <ethernet_input+0x118>)
 8016340:	4618      	mov	r0, r3
 8016342:	f001 f852 	bl	80173ea <memcmp>
 8016346:	4603      	mov	r3, r0
 8016348:	2b00      	cmp	r3, #0
 801634a:	d106      	bne.n	801635a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801634c:	687b      	ldr	r3, [r7, #4]
 801634e:	7b5b      	ldrb	r3, [r3, #13]
 8016350:	f043 0308 	orr.w	r3, r3, #8
 8016354:	b2da      	uxtb	r2, r3
 8016356:	687b      	ldr	r3, [r7, #4]
 8016358:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801635a:	89fb      	ldrh	r3, [r7, #14]
 801635c:	2b08      	cmp	r3, #8
 801635e:	d003      	beq.n	8016368 <ethernet_input+0xa0>
 8016360:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8016364:	d014      	beq.n	8016390 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8016366:	e032      	b.n	80163ce <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016368:	683b      	ldr	r3, [r7, #0]
 801636a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801636e:	f003 0308 	and.w	r3, r3, #8
 8016372:	2b00      	cmp	r3, #0
 8016374:	d024      	beq.n	80163c0 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016376:	8afb      	ldrh	r3, [r7, #22]
 8016378:	4619      	mov	r1, r3
 801637a:	6878      	ldr	r0, [r7, #4]
 801637c:	f7f7 fe38 	bl	800dff0 <pbuf_remove_header>
 8016380:	4603      	mov	r3, r0
 8016382:	2b00      	cmp	r3, #0
 8016384:	d11e      	bne.n	80163c4 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8016386:	6839      	ldr	r1, [r7, #0]
 8016388:	6878      	ldr	r0, [r7, #4]
 801638a:	f7fe ff21 	bl	80151d0 <ip4_input>
      break;
 801638e:	e013      	b.n	80163b8 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016390:	683b      	ldr	r3, [r7, #0]
 8016392:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8016396:	f003 0308 	and.w	r3, r3, #8
 801639a:	2b00      	cmp	r3, #0
 801639c:	d014      	beq.n	80163c8 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801639e:	8afb      	ldrh	r3, [r7, #22]
 80163a0:	4619      	mov	r1, r3
 80163a2:	6878      	ldr	r0, [r7, #4]
 80163a4:	f7f7 fe24 	bl	800dff0 <pbuf_remove_header>
 80163a8:	4603      	mov	r3, r0
 80163aa:	2b00      	cmp	r3, #0
 80163ac:	d10e      	bne.n	80163cc <ethernet_input+0x104>
        etharp_input(p, netif);
 80163ae:	6839      	ldr	r1, [r7, #0]
 80163b0:	6878      	ldr	r0, [r7, #4]
 80163b2:	f7fe f8c1 	bl	8014538 <etharp_input>
      break;
 80163b6:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80163b8:	2300      	movs	r3, #0
 80163ba:	e00c      	b.n	80163d6 <ethernet_input+0x10e>
    goto free_and_return;
 80163bc:	bf00      	nop
 80163be:	e006      	b.n	80163ce <ethernet_input+0x106>
        goto free_and_return;
 80163c0:	bf00      	nop
 80163c2:	e004      	b.n	80163ce <ethernet_input+0x106>
        goto free_and_return;
 80163c4:	bf00      	nop
 80163c6:	e002      	b.n	80163ce <ethernet_input+0x106>
        goto free_and_return;
 80163c8:	bf00      	nop
 80163ca:	e000      	b.n	80163ce <ethernet_input+0x106>
        goto free_and_return;
 80163cc:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80163ce:	6878      	ldr	r0, [r7, #4]
 80163d0:	f7f7 fe94 	bl	800e0fc <pbuf_free>
  return ERR_OK;
 80163d4:	2300      	movs	r3, #0
}
 80163d6:	4618      	mov	r0, r3
 80163d8:	3718      	adds	r7, #24
 80163da:	46bd      	mov	sp, r7
 80163dc:	bd80      	pop	{r7, pc}
 80163de:	bf00      	nop
 80163e0:	0801b3d8 	.word	0x0801b3d8

080163e4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80163e4:	b580      	push	{r7, lr}
 80163e6:	b086      	sub	sp, #24
 80163e8:	af00      	add	r7, sp, #0
 80163ea:	60f8      	str	r0, [r7, #12]
 80163ec:	60b9      	str	r1, [r7, #8]
 80163ee:	607a      	str	r2, [r7, #4]
 80163f0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80163f2:	8c3b      	ldrh	r3, [r7, #32]
 80163f4:	4618      	mov	r0, r3
 80163f6:	f7f6 fac1 	bl	800c97c <lwip_htons>
 80163fa:	4603      	mov	r3, r0
 80163fc:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80163fe:	210e      	movs	r1, #14
 8016400:	68b8      	ldr	r0, [r7, #8]
 8016402:	f7f7 fde5 	bl	800dfd0 <pbuf_add_header>
 8016406:	4603      	mov	r3, r0
 8016408:	2b00      	cmp	r3, #0
 801640a:	d125      	bne.n	8016458 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801640c:	68bb      	ldr	r3, [r7, #8]
 801640e:	685b      	ldr	r3, [r3, #4]
 8016410:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8016412:	693b      	ldr	r3, [r7, #16]
 8016414:	8afa      	ldrh	r2, [r7, #22]
 8016416:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8016418:	693b      	ldr	r3, [r7, #16]
 801641a:	2206      	movs	r2, #6
 801641c:	6839      	ldr	r1, [r7, #0]
 801641e:	4618      	mov	r0, r3
 8016420:	f001 f8e1 	bl	80175e6 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8016424:	693b      	ldr	r3, [r7, #16]
 8016426:	3306      	adds	r3, #6
 8016428:	2206      	movs	r2, #6
 801642a:	6879      	ldr	r1, [r7, #4]
 801642c:	4618      	mov	r0, r3
 801642e:	f001 f8da 	bl	80175e6 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8016432:	68fb      	ldr	r3, [r7, #12]
 8016434:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8016438:	2b06      	cmp	r3, #6
 801643a:	d006      	beq.n	801644a <ethernet_output+0x66>
 801643c:	4b0a      	ldr	r3, [pc, #40]	@ (8016468 <ethernet_output+0x84>)
 801643e:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8016442:	490a      	ldr	r1, [pc, #40]	@ (801646c <ethernet_output+0x88>)
 8016444:	480a      	ldr	r0, [pc, #40]	@ (8016470 <ethernet_output+0x8c>)
 8016446:	f000 ff45 	bl	80172d4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801644a:	68fb      	ldr	r3, [r7, #12]
 801644c:	699b      	ldr	r3, [r3, #24]
 801644e:	68b9      	ldr	r1, [r7, #8]
 8016450:	68f8      	ldr	r0, [r7, #12]
 8016452:	4798      	blx	r3
 8016454:	4603      	mov	r3, r0
 8016456:	e002      	b.n	801645e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8016458:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801645a:	f06f 0301 	mvn.w	r3, #1
}
 801645e:	4618      	mov	r0, r3
 8016460:	3718      	adds	r7, #24
 8016462:	46bd      	mov	sp, r7
 8016464:	bd80      	pop	{r7, pc}
 8016466:	bf00      	nop
 8016468:	0801b1c4 	.word	0x0801b1c4
 801646c:	0801b1fc 	.word	0x0801b1fc
 8016470:	0801b230 	.word	0x0801b230

08016474 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8016474:	b580      	push	{r7, lr}
 8016476:	b086      	sub	sp, #24
 8016478:	af00      	add	r7, sp, #0
 801647a:	6078      	str	r0, [r7, #4]
 801647c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801647e:	683b      	ldr	r3, [r7, #0]
 8016480:	60bb      	str	r3, [r7, #8]
 8016482:	2304      	movs	r3, #4
 8016484:	60fb      	str	r3, [r7, #12]
 8016486:	2300      	movs	r3, #0
 8016488:	613b      	str	r3, [r7, #16]
 801648a:	2300      	movs	r3, #0
 801648c:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801648e:	f107 0308 	add.w	r3, r7, #8
 8016492:	2100      	movs	r1, #0
 8016494:	4618      	mov	r0, r3
 8016496:	f7f3 fb55 	bl	8009b44 <osMessageCreate>
 801649a:	4602      	mov	r2, r0
 801649c:	687b      	ldr	r3, [r7, #4]
 801649e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80164a0:	687b      	ldr	r3, [r7, #4]
 80164a2:	681b      	ldr	r3, [r3, #0]
 80164a4:	2b00      	cmp	r3, #0
 80164a6:	d102      	bne.n	80164ae <sys_mbox_new+0x3a>
    return ERR_MEM;
 80164a8:	f04f 33ff 	mov.w	r3, #4294967295
 80164ac:	e000      	b.n	80164b0 <sys_mbox_new+0x3c>

  return ERR_OK;
 80164ae:	2300      	movs	r3, #0
}
 80164b0:	4618      	mov	r0, r3
 80164b2:	3718      	adds	r7, #24
 80164b4:	46bd      	mov	sp, r7
 80164b6:	bd80      	pop	{r7, pc}

080164b8 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80164b8:	b580      	push	{r7, lr}
 80164ba:	b084      	sub	sp, #16
 80164bc:	af00      	add	r7, sp, #0
 80164be:	6078      	str	r0, [r7, #4]
 80164c0:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 80164c2:	687b      	ldr	r3, [r7, #4]
 80164c4:	681b      	ldr	r3, [r3, #0]
 80164c6:	6839      	ldr	r1, [r7, #0]
 80164c8:	2200      	movs	r2, #0
 80164ca:	4618      	mov	r0, r3
 80164cc:	f7f3 fb62 	bl	8009b94 <osMessagePut>
 80164d0:	4603      	mov	r3, r0
 80164d2:	2b00      	cmp	r3, #0
 80164d4:	d102      	bne.n	80164dc <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 80164d6:	2300      	movs	r3, #0
 80164d8:	73fb      	strb	r3, [r7, #15]
 80164da:	e001      	b.n	80164e0 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80164dc:	23ff      	movs	r3, #255	@ 0xff
 80164de:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80164e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80164e4:	4618      	mov	r0, r3
 80164e6:	3710      	adds	r7, #16
 80164e8:	46bd      	mov	sp, r7
 80164ea:	bd80      	pop	{r7, pc}

080164ec <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80164ec:	b580      	push	{r7, lr}
 80164ee:	b08c      	sub	sp, #48	@ 0x30
 80164f0:	af00      	add	r7, sp, #0
 80164f2:	61f8      	str	r0, [r7, #28]
 80164f4:	61b9      	str	r1, [r7, #24]
 80164f6:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 80164f8:	f7f3 f962 	bl	80097c0 <osKernelSysTick>
 80164fc:	62f8      	str	r0, [r7, #44]	@ 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80164fe:	697b      	ldr	r3, [r7, #20]
 8016500:	2b00      	cmp	r3, #0
 8016502:	d017      	beq.n	8016534 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8016504:	69fb      	ldr	r3, [r7, #28]
 8016506:	6819      	ldr	r1, [r3, #0]
 8016508:	f107 0320 	add.w	r3, r7, #32
 801650c:	697a      	ldr	r2, [r7, #20]
 801650e:	4618      	mov	r0, r3
 8016510:	f7f3 fb80 	bl	8009c14 <osMessageGet>

    if(event.status == osEventMessage)
 8016514:	6a3b      	ldr	r3, [r7, #32]
 8016516:	2b10      	cmp	r3, #16
 8016518:	d109      	bne.n	801652e <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801651a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801651c:	461a      	mov	r2, r3
 801651e:	69bb      	ldr	r3, [r7, #24]
 8016520:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8016522:	f7f3 f94d 	bl	80097c0 <osKernelSysTick>
 8016526:	4602      	mov	r2, r0
 8016528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801652a:	1ad3      	subs	r3, r2, r3
 801652c:	e019      	b.n	8016562 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801652e:	f04f 33ff 	mov.w	r3, #4294967295
 8016532:	e016      	b.n	8016562 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8016534:	69fb      	ldr	r3, [r7, #28]
 8016536:	6819      	ldr	r1, [r3, #0]
 8016538:	463b      	mov	r3, r7
 801653a:	f04f 32ff 	mov.w	r2, #4294967295
 801653e:	4618      	mov	r0, r3
 8016540:	f7f3 fb68 	bl	8009c14 <osMessageGet>
 8016544:	f107 0320 	add.w	r3, r7, #32
 8016548:	463a      	mov	r2, r7
 801654a:	ca07      	ldmia	r2, {r0, r1, r2}
 801654c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8016550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016552:	461a      	mov	r2, r3
 8016554:	69bb      	ldr	r3, [r7, #24]
 8016556:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8016558:	f7f3 f932 	bl	80097c0 <osKernelSysTick>
 801655c:	4602      	mov	r2, r0
 801655e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016560:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8016562:	4618      	mov	r0, r3
 8016564:	3730      	adds	r7, #48	@ 0x30
 8016566:	46bd      	mov	sp, r7
 8016568:	bd80      	pop	{r7, pc}

0801656a <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801656a:	b480      	push	{r7}
 801656c:	b083      	sub	sp, #12
 801656e:	af00      	add	r7, sp, #0
 8016570:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8016572:	687b      	ldr	r3, [r7, #4]
 8016574:	681b      	ldr	r3, [r3, #0]
 8016576:	2b00      	cmp	r3, #0
 8016578:	d101      	bne.n	801657e <sys_mbox_valid+0x14>
    return 0;
 801657a:	2300      	movs	r3, #0
 801657c:	e000      	b.n	8016580 <sys_mbox_valid+0x16>
  else
    return 1;
 801657e:	2301      	movs	r3, #1
}
 8016580:	4618      	mov	r0, r3
 8016582:	370c      	adds	r7, #12
 8016584:	46bd      	mov	sp, r7
 8016586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801658a:	4770      	bx	lr

0801658c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801658c:	b580      	push	{r7, lr}
 801658e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8016590:	4803      	ldr	r0, [pc, #12]	@ (80165a0 <sys_init+0x14>)
 8016592:	f7f3 f985 	bl	80098a0 <osMutexCreate>
 8016596:	4603      	mov	r3, r0
 8016598:	4a02      	ldr	r2, [pc, #8]	@ (80165a4 <sys_init+0x18>)
 801659a:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801659c:	bf00      	nop
 801659e:	bd80      	pop	{r7, pc}
 80165a0:	0801b3e8 	.word	0x0801b3e8
 80165a4:	2000c7e4 	.word	0x2000c7e4

080165a8 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80165a8:	b580      	push	{r7, lr}
 80165aa:	b084      	sub	sp, #16
 80165ac:	af00      	add	r7, sp, #0
 80165ae:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 80165b0:	2300      	movs	r3, #0
 80165b2:	60bb      	str	r3, [r7, #8]
 80165b4:	2300      	movs	r3, #0
 80165b6:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 80165b8:	f107 0308 	add.w	r3, r7, #8
 80165bc:	4618      	mov	r0, r3
 80165be:	f7f3 f96f 	bl	80098a0 <osMutexCreate>
 80165c2:	4602      	mov	r2, r0
 80165c4:	687b      	ldr	r3, [r7, #4]
 80165c6:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 80165c8:	687b      	ldr	r3, [r7, #4]
 80165ca:	681b      	ldr	r3, [r3, #0]
 80165cc:	2b00      	cmp	r3, #0
 80165ce:	d102      	bne.n	80165d6 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80165d0:	f04f 33ff 	mov.w	r3, #4294967295
 80165d4:	e000      	b.n	80165d8 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80165d6:	2300      	movs	r3, #0
}
 80165d8:	4618      	mov	r0, r3
 80165da:	3710      	adds	r7, #16
 80165dc:	46bd      	mov	sp, r7
 80165de:	bd80      	pop	{r7, pc}

080165e0 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80165e0:	b580      	push	{r7, lr}
 80165e2:	b082      	sub	sp, #8
 80165e4:	af00      	add	r7, sp, #0
 80165e6:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 80165e8:	687b      	ldr	r3, [r7, #4]
 80165ea:	681b      	ldr	r3, [r3, #0]
 80165ec:	f04f 31ff 	mov.w	r1, #4294967295
 80165f0:	4618      	mov	r0, r3
 80165f2:	f7f3 f96d 	bl	80098d0 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 80165f6:	bf00      	nop
 80165f8:	3708      	adds	r7, #8
 80165fa:	46bd      	mov	sp, r7
 80165fc:	bd80      	pop	{r7, pc}

080165fe <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80165fe:	b580      	push	{r7, lr}
 8016600:	b082      	sub	sp, #8
 8016602:	af00      	add	r7, sp, #0
 8016604:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8016606:	687b      	ldr	r3, [r7, #4]
 8016608:	681b      	ldr	r3, [r3, #0]
 801660a:	4618      	mov	r0, r3
 801660c:	f7f3 f9ae 	bl	800996c <osMutexRelease>
}
 8016610:	bf00      	nop
 8016612:	3708      	adds	r7, #8
 8016614:	46bd      	mov	sp, r7
 8016616:	bd80      	pop	{r7, pc}

08016618 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8016618:	b580      	push	{r7, lr}
 801661a:	b08c      	sub	sp, #48	@ 0x30
 801661c:	af00      	add	r7, sp, #0
 801661e:	60f8      	str	r0, [r7, #12]
 8016620:	60b9      	str	r1, [r7, #8]
 8016622:	607a      	str	r2, [r7, #4]
 8016624:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8016626:	f107 0314 	add.w	r3, r7, #20
 801662a:	2200      	movs	r2, #0
 801662c:	601a      	str	r2, [r3, #0]
 801662e:	605a      	str	r2, [r3, #4]
 8016630:	609a      	str	r2, [r3, #8]
 8016632:	60da      	str	r2, [r3, #12]
 8016634:	611a      	str	r2, [r3, #16]
 8016636:	615a      	str	r2, [r3, #20]
 8016638:	619a      	str	r2, [r3, #24]
 801663a:	68fb      	ldr	r3, [r7, #12]
 801663c:	617b      	str	r3, [r7, #20]
 801663e:	68bb      	ldr	r3, [r7, #8]
 8016640:	61bb      	str	r3, [r7, #24]
 8016642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016644:	b21b      	sxth	r3, r3
 8016646:	83bb      	strh	r3, [r7, #28]
 8016648:	683b      	ldr	r3, [r7, #0]
 801664a:	627b      	str	r3, [r7, #36]	@ 0x24
  return osThreadCreate(&os_thread_def, arg);
 801664c:	f107 0314 	add.w	r3, r7, #20
 8016650:	6879      	ldr	r1, [r7, #4]
 8016652:	4618      	mov	r0, r3
 8016654:	f7f3 f8c4 	bl	80097e0 <osThreadCreate>
 8016658:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801665a:	4618      	mov	r0, r3
 801665c:	3730      	adds	r7, #48	@ 0x30
 801665e:	46bd      	mov	sp, r7
 8016660:	bd80      	pop	{r7, pc}
	...

08016664 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8016664:	b580      	push	{r7, lr}
 8016666:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8016668:	4b04      	ldr	r3, [pc, #16]	@ (801667c <sys_arch_protect+0x18>)
 801666a:	681b      	ldr	r3, [r3, #0]
 801666c:	f04f 31ff 	mov.w	r1, #4294967295
 8016670:	4618      	mov	r0, r3
 8016672:	f7f3 f92d 	bl	80098d0 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8016676:	2301      	movs	r3, #1
}
 8016678:	4618      	mov	r0, r3
 801667a:	bd80      	pop	{r7, pc}
 801667c:	2000c7e4 	.word	0x2000c7e4

08016680 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8016680:	b580      	push	{r7, lr}
 8016682:	b082      	sub	sp, #8
 8016684:	af00      	add	r7, sp, #0
 8016686:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8016688:	4b04      	ldr	r3, [pc, #16]	@ (801669c <sys_arch_unprotect+0x1c>)
 801668a:	681b      	ldr	r3, [r3, #0]
 801668c:	4618      	mov	r0, r3
 801668e:	f7f3 f96d 	bl	800996c <osMutexRelease>
}
 8016692:	bf00      	nop
 8016694:	3708      	adds	r7, #8
 8016696:	46bd      	mov	sp, r7
 8016698:	bd80      	pop	{r7, pc}
 801669a:	bf00      	nop
 801669c:	2000c7e4 	.word	0x2000c7e4

080166a0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80166a0:	b580      	push	{r7, lr}
 80166a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80166a4:	2200      	movs	r2, #0
 80166a6:	4912      	ldr	r1, [pc, #72]	@ (80166f0 <MX_USB_DEVICE_Init+0x50>)
 80166a8:	4812      	ldr	r0, [pc, #72]	@ (80166f4 <MX_USB_DEVICE_Init+0x54>)
 80166aa:	f7f1 fd39 	bl	8008120 <USBD_Init>
 80166ae:	4603      	mov	r3, r0
 80166b0:	2b00      	cmp	r3, #0
 80166b2:	d001      	beq.n	80166b8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80166b4:	f7ea fa22 	bl	8000afc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80166b8:	490f      	ldr	r1, [pc, #60]	@ (80166f8 <MX_USB_DEVICE_Init+0x58>)
 80166ba:	480e      	ldr	r0, [pc, #56]	@ (80166f4 <MX_USB_DEVICE_Init+0x54>)
 80166bc:	f7f1 fd60 	bl	8008180 <USBD_RegisterClass>
 80166c0:	4603      	mov	r3, r0
 80166c2:	2b00      	cmp	r3, #0
 80166c4:	d001      	beq.n	80166ca <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80166c6:	f7ea fa19 	bl	8000afc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80166ca:	490c      	ldr	r1, [pc, #48]	@ (80166fc <MX_USB_DEVICE_Init+0x5c>)
 80166cc:	4809      	ldr	r0, [pc, #36]	@ (80166f4 <MX_USB_DEVICE_Init+0x54>)
 80166ce:	f7f1 fc57 	bl	8007f80 <USBD_CDC_RegisterInterface>
 80166d2:	4603      	mov	r3, r0
 80166d4:	2b00      	cmp	r3, #0
 80166d6:	d001      	beq.n	80166dc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80166d8:	f7ea fa10 	bl	8000afc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80166dc:	4805      	ldr	r0, [pc, #20]	@ (80166f4 <MX_USB_DEVICE_Init+0x54>)
 80166de:	f7f1 fd85 	bl	80081ec <USBD_Start>
 80166e2:	4603      	mov	r3, r0
 80166e4:	2b00      	cmp	r3, #0
 80166e6:	d001      	beq.n	80166ec <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80166e8:	f7ea fa08 	bl	8000afc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80166ec:	bf00      	nop
 80166ee:	bd80      	pop	{r7, pc}
 80166f0:	200000bc 	.word	0x200000bc
 80166f4:	2000c7e8 	.word	0x2000c7e8
 80166f8:	20000018 	.word	0x20000018
 80166fc:	200000a8 	.word	0x200000a8

08016700 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8016700:	b580      	push	{r7, lr}
 8016702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8016704:	2200      	movs	r2, #0
 8016706:	4905      	ldr	r1, [pc, #20]	@ (801671c <CDC_Init_FS+0x1c>)
 8016708:	4805      	ldr	r0, [pc, #20]	@ (8016720 <CDC_Init_FS+0x20>)
 801670a:	f7f1 fc53 	bl	8007fb4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801670e:	4905      	ldr	r1, [pc, #20]	@ (8016724 <CDC_Init_FS+0x24>)
 8016710:	4803      	ldr	r0, [pc, #12]	@ (8016720 <CDC_Init_FS+0x20>)
 8016712:	f7f1 fc71 	bl	8007ff8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8016716:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8016718:	4618      	mov	r0, r3
 801671a:	bd80      	pop	{r7, pc}
 801671c:	2000d2c4 	.word	0x2000d2c4
 8016720:	2000c7e8 	.word	0x2000c7e8
 8016724:	2000cac4 	.word	0x2000cac4

08016728 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8016728:	b480      	push	{r7}
 801672a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801672c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801672e:	4618      	mov	r0, r3
 8016730:	46bd      	mov	sp, r7
 8016732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016736:	4770      	bx	lr

08016738 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8016738:	b480      	push	{r7}
 801673a:	b083      	sub	sp, #12
 801673c:	af00      	add	r7, sp, #0
 801673e:	4603      	mov	r3, r0
 8016740:	6039      	str	r1, [r7, #0]
 8016742:	71fb      	strb	r3, [r7, #7]
 8016744:	4613      	mov	r3, r2
 8016746:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8016748:	79fb      	ldrb	r3, [r7, #7]
 801674a:	2b23      	cmp	r3, #35	@ 0x23
 801674c:	d84a      	bhi.n	80167e4 <CDC_Control_FS+0xac>
 801674e:	a201      	add	r2, pc, #4	@ (adr r2, 8016754 <CDC_Control_FS+0x1c>)
 8016750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016754:	080167e5 	.word	0x080167e5
 8016758:	080167e5 	.word	0x080167e5
 801675c:	080167e5 	.word	0x080167e5
 8016760:	080167e5 	.word	0x080167e5
 8016764:	080167e5 	.word	0x080167e5
 8016768:	080167e5 	.word	0x080167e5
 801676c:	080167e5 	.word	0x080167e5
 8016770:	080167e5 	.word	0x080167e5
 8016774:	080167e5 	.word	0x080167e5
 8016778:	080167e5 	.word	0x080167e5
 801677c:	080167e5 	.word	0x080167e5
 8016780:	080167e5 	.word	0x080167e5
 8016784:	080167e5 	.word	0x080167e5
 8016788:	080167e5 	.word	0x080167e5
 801678c:	080167e5 	.word	0x080167e5
 8016790:	080167e5 	.word	0x080167e5
 8016794:	080167e5 	.word	0x080167e5
 8016798:	080167e5 	.word	0x080167e5
 801679c:	080167e5 	.word	0x080167e5
 80167a0:	080167e5 	.word	0x080167e5
 80167a4:	080167e5 	.word	0x080167e5
 80167a8:	080167e5 	.word	0x080167e5
 80167ac:	080167e5 	.word	0x080167e5
 80167b0:	080167e5 	.word	0x080167e5
 80167b4:	080167e5 	.word	0x080167e5
 80167b8:	080167e5 	.word	0x080167e5
 80167bc:	080167e5 	.word	0x080167e5
 80167c0:	080167e5 	.word	0x080167e5
 80167c4:	080167e5 	.word	0x080167e5
 80167c8:	080167e5 	.word	0x080167e5
 80167cc:	080167e5 	.word	0x080167e5
 80167d0:	080167e5 	.word	0x080167e5
 80167d4:	080167e5 	.word	0x080167e5
 80167d8:	080167e5 	.word	0x080167e5
 80167dc:	080167e5 	.word	0x080167e5
 80167e0:	080167e5 	.word	0x080167e5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80167e4:	bf00      	nop
  }

  return (USBD_OK);
 80167e6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80167e8:	4618      	mov	r0, r3
 80167ea:	370c      	adds	r7, #12
 80167ec:	46bd      	mov	sp, r7
 80167ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167f2:	4770      	bx	lr

080167f4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80167f4:	b580      	push	{r7, lr}
 80167f6:	b082      	sub	sp, #8
 80167f8:	af00      	add	r7, sp, #0
 80167fa:	6078      	str	r0, [r7, #4]
 80167fc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80167fe:	6879      	ldr	r1, [r7, #4]
 8016800:	4805      	ldr	r0, [pc, #20]	@ (8016818 <CDC_Receive_FS+0x24>)
 8016802:	f7f1 fbf9 	bl	8007ff8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8016806:	4804      	ldr	r0, [pc, #16]	@ (8016818 <CDC_Receive_FS+0x24>)
 8016808:	f7f1 fc54 	bl	80080b4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801680c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801680e:	4618      	mov	r0, r3
 8016810:	3708      	adds	r7, #8
 8016812:	46bd      	mov	sp, r7
 8016814:	bd80      	pop	{r7, pc}
 8016816:	bf00      	nop
 8016818:	2000c7e8 	.word	0x2000c7e8

0801681c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801681c:	b580      	push	{r7, lr}
 801681e:	b084      	sub	sp, #16
 8016820:	af00      	add	r7, sp, #0
 8016822:	6078      	str	r0, [r7, #4]
 8016824:	460b      	mov	r3, r1
 8016826:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8016828:	2300      	movs	r3, #0
 801682a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801682c:	4b0d      	ldr	r3, [pc, #52]	@ (8016864 <CDC_Transmit_FS+0x48>)
 801682e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8016832:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8016834:	68bb      	ldr	r3, [r7, #8]
 8016836:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 801683a:	2b00      	cmp	r3, #0
 801683c:	d001      	beq.n	8016842 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801683e:	2301      	movs	r3, #1
 8016840:	e00b      	b.n	801685a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8016842:	887b      	ldrh	r3, [r7, #2]
 8016844:	461a      	mov	r2, r3
 8016846:	6879      	ldr	r1, [r7, #4]
 8016848:	4806      	ldr	r0, [pc, #24]	@ (8016864 <CDC_Transmit_FS+0x48>)
 801684a:	f7f1 fbb3 	bl	8007fb4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801684e:	4805      	ldr	r0, [pc, #20]	@ (8016864 <CDC_Transmit_FS+0x48>)
 8016850:	f7f1 fbf0 	bl	8008034 <USBD_CDC_TransmitPacket>
 8016854:	4603      	mov	r3, r0
 8016856:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8016858:	7bfb      	ldrb	r3, [r7, #15]
}
 801685a:	4618      	mov	r0, r3
 801685c:	3710      	adds	r7, #16
 801685e:	46bd      	mov	sp, r7
 8016860:	bd80      	pop	{r7, pc}
 8016862:	bf00      	nop
 8016864:	2000c7e8 	.word	0x2000c7e8

08016868 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8016868:	b480      	push	{r7}
 801686a:	b087      	sub	sp, #28
 801686c:	af00      	add	r7, sp, #0
 801686e:	60f8      	str	r0, [r7, #12]
 8016870:	60b9      	str	r1, [r7, #8]
 8016872:	4613      	mov	r3, r2
 8016874:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8016876:	2300      	movs	r3, #0
 8016878:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801687a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801687e:	4618      	mov	r0, r3
 8016880:	371c      	adds	r7, #28
 8016882:	46bd      	mov	sp, r7
 8016884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016888:	4770      	bx	lr
	...

0801688c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801688c:	b480      	push	{r7}
 801688e:	b083      	sub	sp, #12
 8016890:	af00      	add	r7, sp, #0
 8016892:	4603      	mov	r3, r0
 8016894:	6039      	str	r1, [r7, #0]
 8016896:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8016898:	683b      	ldr	r3, [r7, #0]
 801689a:	2212      	movs	r2, #18
 801689c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801689e:	4b03      	ldr	r3, [pc, #12]	@ (80168ac <USBD_FS_DeviceDescriptor+0x20>)
}
 80168a0:	4618      	mov	r0, r3
 80168a2:	370c      	adds	r7, #12
 80168a4:	46bd      	mov	sp, r7
 80168a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168aa:	4770      	bx	lr
 80168ac:	200000d8 	.word	0x200000d8

080168b0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80168b0:	b480      	push	{r7}
 80168b2:	b083      	sub	sp, #12
 80168b4:	af00      	add	r7, sp, #0
 80168b6:	4603      	mov	r3, r0
 80168b8:	6039      	str	r1, [r7, #0]
 80168ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80168bc:	683b      	ldr	r3, [r7, #0]
 80168be:	2204      	movs	r2, #4
 80168c0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80168c2:	4b03      	ldr	r3, [pc, #12]	@ (80168d0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80168c4:	4618      	mov	r0, r3
 80168c6:	370c      	adds	r7, #12
 80168c8:	46bd      	mov	sp, r7
 80168ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168ce:	4770      	bx	lr
 80168d0:	200000ec 	.word	0x200000ec

080168d4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80168d4:	b580      	push	{r7, lr}
 80168d6:	b082      	sub	sp, #8
 80168d8:	af00      	add	r7, sp, #0
 80168da:	4603      	mov	r3, r0
 80168dc:	6039      	str	r1, [r7, #0]
 80168de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80168e0:	79fb      	ldrb	r3, [r7, #7]
 80168e2:	2b00      	cmp	r3, #0
 80168e4:	d105      	bne.n	80168f2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80168e6:	683a      	ldr	r2, [r7, #0]
 80168e8:	4907      	ldr	r1, [pc, #28]	@ (8016908 <USBD_FS_ProductStrDescriptor+0x34>)
 80168ea:	4808      	ldr	r0, [pc, #32]	@ (801690c <USBD_FS_ProductStrDescriptor+0x38>)
 80168ec:	f7f2 fe44 	bl	8009578 <USBD_GetString>
 80168f0:	e004      	b.n	80168fc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80168f2:	683a      	ldr	r2, [r7, #0]
 80168f4:	4904      	ldr	r1, [pc, #16]	@ (8016908 <USBD_FS_ProductStrDescriptor+0x34>)
 80168f6:	4805      	ldr	r0, [pc, #20]	@ (801690c <USBD_FS_ProductStrDescriptor+0x38>)
 80168f8:	f7f2 fe3e 	bl	8009578 <USBD_GetString>
  }
  return USBD_StrDesc;
 80168fc:	4b02      	ldr	r3, [pc, #8]	@ (8016908 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80168fe:	4618      	mov	r0, r3
 8016900:	3708      	adds	r7, #8
 8016902:	46bd      	mov	sp, r7
 8016904:	bd80      	pop	{r7, pc}
 8016906:	bf00      	nop
 8016908:	2000dac4 	.word	0x2000dac4
 801690c:	0801b258 	.word	0x0801b258

08016910 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016910:	b580      	push	{r7, lr}
 8016912:	b082      	sub	sp, #8
 8016914:	af00      	add	r7, sp, #0
 8016916:	4603      	mov	r3, r0
 8016918:	6039      	str	r1, [r7, #0]
 801691a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801691c:	683a      	ldr	r2, [r7, #0]
 801691e:	4904      	ldr	r1, [pc, #16]	@ (8016930 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8016920:	4804      	ldr	r0, [pc, #16]	@ (8016934 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8016922:	f7f2 fe29 	bl	8009578 <USBD_GetString>
  return USBD_StrDesc;
 8016926:	4b02      	ldr	r3, [pc, #8]	@ (8016930 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8016928:	4618      	mov	r0, r3
 801692a:	3708      	adds	r7, #8
 801692c:	46bd      	mov	sp, r7
 801692e:	bd80      	pop	{r7, pc}
 8016930:	2000dac4 	.word	0x2000dac4
 8016934:	0801b270 	.word	0x0801b270

08016938 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016938:	b580      	push	{r7, lr}
 801693a:	b082      	sub	sp, #8
 801693c:	af00      	add	r7, sp, #0
 801693e:	4603      	mov	r3, r0
 8016940:	6039      	str	r1, [r7, #0]
 8016942:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8016944:	683b      	ldr	r3, [r7, #0]
 8016946:	221a      	movs	r2, #26
 8016948:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801694a:	f000 f843 	bl	80169d4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801694e:	4b02      	ldr	r3, [pc, #8]	@ (8016958 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8016950:	4618      	mov	r0, r3
 8016952:	3708      	adds	r7, #8
 8016954:	46bd      	mov	sp, r7
 8016956:	bd80      	pop	{r7, pc}
 8016958:	200000f0 	.word	0x200000f0

0801695c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801695c:	b580      	push	{r7, lr}
 801695e:	b082      	sub	sp, #8
 8016960:	af00      	add	r7, sp, #0
 8016962:	4603      	mov	r3, r0
 8016964:	6039      	str	r1, [r7, #0]
 8016966:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8016968:	79fb      	ldrb	r3, [r7, #7]
 801696a:	2b00      	cmp	r3, #0
 801696c:	d105      	bne.n	801697a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801696e:	683a      	ldr	r2, [r7, #0]
 8016970:	4907      	ldr	r1, [pc, #28]	@ (8016990 <USBD_FS_ConfigStrDescriptor+0x34>)
 8016972:	4808      	ldr	r0, [pc, #32]	@ (8016994 <USBD_FS_ConfigStrDescriptor+0x38>)
 8016974:	f7f2 fe00 	bl	8009578 <USBD_GetString>
 8016978:	e004      	b.n	8016984 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801697a:	683a      	ldr	r2, [r7, #0]
 801697c:	4904      	ldr	r1, [pc, #16]	@ (8016990 <USBD_FS_ConfigStrDescriptor+0x34>)
 801697e:	4805      	ldr	r0, [pc, #20]	@ (8016994 <USBD_FS_ConfigStrDescriptor+0x38>)
 8016980:	f7f2 fdfa 	bl	8009578 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016984:	4b02      	ldr	r3, [pc, #8]	@ (8016990 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8016986:	4618      	mov	r0, r3
 8016988:	3708      	adds	r7, #8
 801698a:	46bd      	mov	sp, r7
 801698c:	bd80      	pop	{r7, pc}
 801698e:	bf00      	nop
 8016990:	2000dac4 	.word	0x2000dac4
 8016994:	0801b284 	.word	0x0801b284

08016998 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016998:	b580      	push	{r7, lr}
 801699a:	b082      	sub	sp, #8
 801699c:	af00      	add	r7, sp, #0
 801699e:	4603      	mov	r3, r0
 80169a0:	6039      	str	r1, [r7, #0]
 80169a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80169a4:	79fb      	ldrb	r3, [r7, #7]
 80169a6:	2b00      	cmp	r3, #0
 80169a8:	d105      	bne.n	80169b6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80169aa:	683a      	ldr	r2, [r7, #0]
 80169ac:	4907      	ldr	r1, [pc, #28]	@ (80169cc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80169ae:	4808      	ldr	r0, [pc, #32]	@ (80169d0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80169b0:	f7f2 fde2 	bl	8009578 <USBD_GetString>
 80169b4:	e004      	b.n	80169c0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80169b6:	683a      	ldr	r2, [r7, #0]
 80169b8:	4904      	ldr	r1, [pc, #16]	@ (80169cc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80169ba:	4805      	ldr	r0, [pc, #20]	@ (80169d0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80169bc:	f7f2 fddc 	bl	8009578 <USBD_GetString>
  }
  return USBD_StrDesc;
 80169c0:	4b02      	ldr	r3, [pc, #8]	@ (80169cc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80169c2:	4618      	mov	r0, r3
 80169c4:	3708      	adds	r7, #8
 80169c6:	46bd      	mov	sp, r7
 80169c8:	bd80      	pop	{r7, pc}
 80169ca:	bf00      	nop
 80169cc:	2000dac4 	.word	0x2000dac4
 80169d0:	0801b290 	.word	0x0801b290

080169d4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80169d4:	b580      	push	{r7, lr}
 80169d6:	b084      	sub	sp, #16
 80169d8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80169da:	4b0f      	ldr	r3, [pc, #60]	@ (8016a18 <Get_SerialNum+0x44>)
 80169dc:	681b      	ldr	r3, [r3, #0]
 80169de:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80169e0:	4b0e      	ldr	r3, [pc, #56]	@ (8016a1c <Get_SerialNum+0x48>)
 80169e2:	681b      	ldr	r3, [r3, #0]
 80169e4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80169e6:	4b0e      	ldr	r3, [pc, #56]	@ (8016a20 <Get_SerialNum+0x4c>)
 80169e8:	681b      	ldr	r3, [r3, #0]
 80169ea:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80169ec:	68fa      	ldr	r2, [r7, #12]
 80169ee:	687b      	ldr	r3, [r7, #4]
 80169f0:	4413      	add	r3, r2
 80169f2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80169f4:	68fb      	ldr	r3, [r7, #12]
 80169f6:	2b00      	cmp	r3, #0
 80169f8:	d009      	beq.n	8016a0e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80169fa:	2208      	movs	r2, #8
 80169fc:	4909      	ldr	r1, [pc, #36]	@ (8016a24 <Get_SerialNum+0x50>)
 80169fe:	68f8      	ldr	r0, [r7, #12]
 8016a00:	f000 f814 	bl	8016a2c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8016a04:	2204      	movs	r2, #4
 8016a06:	4908      	ldr	r1, [pc, #32]	@ (8016a28 <Get_SerialNum+0x54>)
 8016a08:	68b8      	ldr	r0, [r7, #8]
 8016a0a:	f000 f80f 	bl	8016a2c <IntToUnicode>
  }
}
 8016a0e:	bf00      	nop
 8016a10:	3710      	adds	r7, #16
 8016a12:	46bd      	mov	sp, r7
 8016a14:	bd80      	pop	{r7, pc}
 8016a16:	bf00      	nop
 8016a18:	1fff7a10 	.word	0x1fff7a10
 8016a1c:	1fff7a14 	.word	0x1fff7a14
 8016a20:	1fff7a18 	.word	0x1fff7a18
 8016a24:	200000f2 	.word	0x200000f2
 8016a28:	20000102 	.word	0x20000102

08016a2c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8016a2c:	b480      	push	{r7}
 8016a2e:	b087      	sub	sp, #28
 8016a30:	af00      	add	r7, sp, #0
 8016a32:	60f8      	str	r0, [r7, #12]
 8016a34:	60b9      	str	r1, [r7, #8]
 8016a36:	4613      	mov	r3, r2
 8016a38:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8016a3a:	2300      	movs	r3, #0
 8016a3c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8016a3e:	2300      	movs	r3, #0
 8016a40:	75fb      	strb	r3, [r7, #23]
 8016a42:	e027      	b.n	8016a94 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8016a44:	68fb      	ldr	r3, [r7, #12]
 8016a46:	0f1b      	lsrs	r3, r3, #28
 8016a48:	2b09      	cmp	r3, #9
 8016a4a:	d80b      	bhi.n	8016a64 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8016a4c:	68fb      	ldr	r3, [r7, #12]
 8016a4e:	0f1b      	lsrs	r3, r3, #28
 8016a50:	b2da      	uxtb	r2, r3
 8016a52:	7dfb      	ldrb	r3, [r7, #23]
 8016a54:	005b      	lsls	r3, r3, #1
 8016a56:	4619      	mov	r1, r3
 8016a58:	68bb      	ldr	r3, [r7, #8]
 8016a5a:	440b      	add	r3, r1
 8016a5c:	3230      	adds	r2, #48	@ 0x30
 8016a5e:	b2d2      	uxtb	r2, r2
 8016a60:	701a      	strb	r2, [r3, #0]
 8016a62:	e00a      	b.n	8016a7a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8016a64:	68fb      	ldr	r3, [r7, #12]
 8016a66:	0f1b      	lsrs	r3, r3, #28
 8016a68:	b2da      	uxtb	r2, r3
 8016a6a:	7dfb      	ldrb	r3, [r7, #23]
 8016a6c:	005b      	lsls	r3, r3, #1
 8016a6e:	4619      	mov	r1, r3
 8016a70:	68bb      	ldr	r3, [r7, #8]
 8016a72:	440b      	add	r3, r1
 8016a74:	3237      	adds	r2, #55	@ 0x37
 8016a76:	b2d2      	uxtb	r2, r2
 8016a78:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8016a7a:	68fb      	ldr	r3, [r7, #12]
 8016a7c:	011b      	lsls	r3, r3, #4
 8016a7e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8016a80:	7dfb      	ldrb	r3, [r7, #23]
 8016a82:	005b      	lsls	r3, r3, #1
 8016a84:	3301      	adds	r3, #1
 8016a86:	68ba      	ldr	r2, [r7, #8]
 8016a88:	4413      	add	r3, r2
 8016a8a:	2200      	movs	r2, #0
 8016a8c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8016a8e:	7dfb      	ldrb	r3, [r7, #23]
 8016a90:	3301      	adds	r3, #1
 8016a92:	75fb      	strb	r3, [r7, #23]
 8016a94:	7dfa      	ldrb	r2, [r7, #23]
 8016a96:	79fb      	ldrb	r3, [r7, #7]
 8016a98:	429a      	cmp	r2, r3
 8016a9a:	d3d3      	bcc.n	8016a44 <IntToUnicode+0x18>
  }
}
 8016a9c:	bf00      	nop
 8016a9e:	bf00      	nop
 8016aa0:	371c      	adds	r7, #28
 8016aa2:	46bd      	mov	sp, r7
 8016aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016aa8:	4770      	bx	lr
	...

08016aac <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8016aac:	b580      	push	{r7, lr}
 8016aae:	b08a      	sub	sp, #40	@ 0x28
 8016ab0:	af00      	add	r7, sp, #0
 8016ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8016ab4:	f107 0314 	add.w	r3, r7, #20
 8016ab8:	2200      	movs	r2, #0
 8016aba:	601a      	str	r2, [r3, #0]
 8016abc:	605a      	str	r2, [r3, #4]
 8016abe:	609a      	str	r2, [r3, #8]
 8016ac0:	60da      	str	r2, [r3, #12]
 8016ac2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8016ac4:	687b      	ldr	r3, [r7, #4]
 8016ac6:	681b      	ldr	r3, [r3, #0]
 8016ac8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8016acc:	d13a      	bne.n	8016b44 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8016ace:	2300      	movs	r3, #0
 8016ad0:	613b      	str	r3, [r7, #16]
 8016ad2:	4b1e      	ldr	r3, [pc, #120]	@ (8016b4c <HAL_PCD_MspInit+0xa0>)
 8016ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016ad6:	4a1d      	ldr	r2, [pc, #116]	@ (8016b4c <HAL_PCD_MspInit+0xa0>)
 8016ad8:	f043 0301 	orr.w	r3, r3, #1
 8016adc:	6313      	str	r3, [r2, #48]	@ 0x30
 8016ade:	4b1b      	ldr	r3, [pc, #108]	@ (8016b4c <HAL_PCD_MspInit+0xa0>)
 8016ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016ae2:	f003 0301 	and.w	r3, r3, #1
 8016ae6:	613b      	str	r3, [r7, #16]
 8016ae8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8016aea:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8016aee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016af0:	2302      	movs	r3, #2
 8016af2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016af4:	2300      	movs	r3, #0
 8016af6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8016af8:	2303      	movs	r3, #3
 8016afa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8016afc:	230a      	movs	r3, #10
 8016afe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8016b00:	f107 0314 	add.w	r3, r7, #20
 8016b04:	4619      	mov	r1, r3
 8016b06:	4812      	ldr	r0, [pc, #72]	@ (8016b50 <HAL_PCD_MspInit+0xa4>)
 8016b08:	f7eb fe1a 	bl	8002740 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8016b0c:	4b0f      	ldr	r3, [pc, #60]	@ (8016b4c <HAL_PCD_MspInit+0xa0>)
 8016b0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016b10:	4a0e      	ldr	r2, [pc, #56]	@ (8016b4c <HAL_PCD_MspInit+0xa0>)
 8016b12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016b16:	6353      	str	r3, [r2, #52]	@ 0x34
 8016b18:	2300      	movs	r3, #0
 8016b1a:	60fb      	str	r3, [r7, #12]
 8016b1c:	4b0b      	ldr	r3, [pc, #44]	@ (8016b4c <HAL_PCD_MspInit+0xa0>)
 8016b1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016b20:	4a0a      	ldr	r2, [pc, #40]	@ (8016b4c <HAL_PCD_MspInit+0xa0>)
 8016b22:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8016b26:	6453      	str	r3, [r2, #68]	@ 0x44
 8016b28:	4b08      	ldr	r3, [pc, #32]	@ (8016b4c <HAL_PCD_MspInit+0xa0>)
 8016b2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016b2c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8016b30:	60fb      	str	r3, [r7, #12]
 8016b32:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8016b34:	2200      	movs	r2, #0
 8016b36:	2105      	movs	r1, #5
 8016b38:	2043      	movs	r0, #67	@ 0x43
 8016b3a:	f7ea fdbf 	bl	80016bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8016b3e:	2043      	movs	r0, #67	@ 0x43
 8016b40:	f7ea fdd8 	bl	80016f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8016b44:	bf00      	nop
 8016b46:	3728      	adds	r7, #40	@ 0x28
 8016b48:	46bd      	mov	sp, r7
 8016b4a:	bd80      	pop	{r7, pc}
 8016b4c:	40023800 	.word	0x40023800
 8016b50:	40020000 	.word	0x40020000

08016b54 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016b54:	b580      	push	{r7, lr}
 8016b56:	b082      	sub	sp, #8
 8016b58:	af00      	add	r7, sp, #0
 8016b5a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8016b5c:	687b      	ldr	r3, [r7, #4]
 8016b5e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8016b62:	687b      	ldr	r3, [r7, #4]
 8016b64:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8016b68:	4619      	mov	r1, r3
 8016b6a:	4610      	mov	r0, r2
 8016b6c:	f7f1 fb8b 	bl	8008286 <USBD_LL_SetupStage>
}
 8016b70:	bf00      	nop
 8016b72:	3708      	adds	r7, #8
 8016b74:	46bd      	mov	sp, r7
 8016b76:	bd80      	pop	{r7, pc}

08016b78 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016b78:	b580      	push	{r7, lr}
 8016b7a:	b082      	sub	sp, #8
 8016b7c:	af00      	add	r7, sp, #0
 8016b7e:	6078      	str	r0, [r7, #4]
 8016b80:	460b      	mov	r3, r1
 8016b82:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8016b84:	687b      	ldr	r3, [r7, #4]
 8016b86:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8016b8a:	78fa      	ldrb	r2, [r7, #3]
 8016b8c:	6879      	ldr	r1, [r7, #4]
 8016b8e:	4613      	mov	r3, r2
 8016b90:	00db      	lsls	r3, r3, #3
 8016b92:	4413      	add	r3, r2
 8016b94:	009b      	lsls	r3, r3, #2
 8016b96:	440b      	add	r3, r1
 8016b98:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8016b9c:	681a      	ldr	r2, [r3, #0]
 8016b9e:	78fb      	ldrb	r3, [r7, #3]
 8016ba0:	4619      	mov	r1, r3
 8016ba2:	f7f1 fbc5 	bl	8008330 <USBD_LL_DataOutStage>
}
 8016ba6:	bf00      	nop
 8016ba8:	3708      	adds	r7, #8
 8016baa:	46bd      	mov	sp, r7
 8016bac:	bd80      	pop	{r7, pc}

08016bae <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016bae:	b580      	push	{r7, lr}
 8016bb0:	b082      	sub	sp, #8
 8016bb2:	af00      	add	r7, sp, #0
 8016bb4:	6078      	str	r0, [r7, #4]
 8016bb6:	460b      	mov	r3, r1
 8016bb8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8016bba:	687b      	ldr	r3, [r7, #4]
 8016bbc:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8016bc0:	78fa      	ldrb	r2, [r7, #3]
 8016bc2:	6879      	ldr	r1, [r7, #4]
 8016bc4:	4613      	mov	r3, r2
 8016bc6:	00db      	lsls	r3, r3, #3
 8016bc8:	4413      	add	r3, r2
 8016bca:	009b      	lsls	r3, r3, #2
 8016bcc:	440b      	add	r3, r1
 8016bce:	3320      	adds	r3, #32
 8016bd0:	681a      	ldr	r2, [r3, #0]
 8016bd2:	78fb      	ldrb	r3, [r7, #3]
 8016bd4:	4619      	mov	r1, r3
 8016bd6:	f7f1 fc67 	bl	80084a8 <USBD_LL_DataInStage>
}
 8016bda:	bf00      	nop
 8016bdc:	3708      	adds	r7, #8
 8016bde:	46bd      	mov	sp, r7
 8016be0:	bd80      	pop	{r7, pc}

08016be2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016be2:	b580      	push	{r7, lr}
 8016be4:	b082      	sub	sp, #8
 8016be6:	af00      	add	r7, sp, #0
 8016be8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8016bea:	687b      	ldr	r3, [r7, #4]
 8016bec:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8016bf0:	4618      	mov	r0, r3
 8016bf2:	f7f1 fdab 	bl	800874c <USBD_LL_SOF>
}
 8016bf6:	bf00      	nop
 8016bf8:	3708      	adds	r7, #8
 8016bfa:	46bd      	mov	sp, r7
 8016bfc:	bd80      	pop	{r7, pc}

08016bfe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016bfe:	b580      	push	{r7, lr}
 8016c00:	b084      	sub	sp, #16
 8016c02:	af00      	add	r7, sp, #0
 8016c04:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8016c06:	2301      	movs	r3, #1
 8016c08:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8016c0a:	687b      	ldr	r3, [r7, #4]
 8016c0c:	79db      	ldrb	r3, [r3, #7]
 8016c0e:	2b00      	cmp	r3, #0
 8016c10:	d102      	bne.n	8016c18 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8016c12:	2300      	movs	r3, #0
 8016c14:	73fb      	strb	r3, [r7, #15]
 8016c16:	e008      	b.n	8016c2a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8016c18:	687b      	ldr	r3, [r7, #4]
 8016c1a:	79db      	ldrb	r3, [r3, #7]
 8016c1c:	2b02      	cmp	r3, #2
 8016c1e:	d102      	bne.n	8016c26 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8016c20:	2301      	movs	r3, #1
 8016c22:	73fb      	strb	r3, [r7, #15]
 8016c24:	e001      	b.n	8016c2a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8016c26:	f7e9 ff69 	bl	8000afc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8016c2a:	687b      	ldr	r3, [r7, #4]
 8016c2c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8016c30:	7bfa      	ldrb	r2, [r7, #15]
 8016c32:	4611      	mov	r1, r2
 8016c34:	4618      	mov	r0, r3
 8016c36:	f7f1 fd45 	bl	80086c4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8016c3a:	687b      	ldr	r3, [r7, #4]
 8016c3c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8016c40:	4618      	mov	r0, r3
 8016c42:	f7f1 fcec 	bl	800861e <USBD_LL_Reset>
}
 8016c46:	bf00      	nop
 8016c48:	3710      	adds	r7, #16
 8016c4a:	46bd      	mov	sp, r7
 8016c4c:	bd80      	pop	{r7, pc}
	...

08016c50 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016c50:	b580      	push	{r7, lr}
 8016c52:	b082      	sub	sp, #8
 8016c54:	af00      	add	r7, sp, #0
 8016c56:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8016c58:	687b      	ldr	r3, [r7, #4]
 8016c5a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8016c5e:	4618      	mov	r0, r3
 8016c60:	f7f1 fd40 	bl	80086e4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8016c64:	687b      	ldr	r3, [r7, #4]
 8016c66:	681b      	ldr	r3, [r3, #0]
 8016c68:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8016c6c:	681b      	ldr	r3, [r3, #0]
 8016c6e:	687a      	ldr	r2, [r7, #4]
 8016c70:	6812      	ldr	r2, [r2, #0]
 8016c72:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8016c76:	f043 0301 	orr.w	r3, r3, #1
 8016c7a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8016c7c:	687b      	ldr	r3, [r7, #4]
 8016c7e:	7adb      	ldrb	r3, [r3, #11]
 8016c80:	2b00      	cmp	r3, #0
 8016c82:	d005      	beq.n	8016c90 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016c84:	4b04      	ldr	r3, [pc, #16]	@ (8016c98 <HAL_PCD_SuspendCallback+0x48>)
 8016c86:	691b      	ldr	r3, [r3, #16]
 8016c88:	4a03      	ldr	r2, [pc, #12]	@ (8016c98 <HAL_PCD_SuspendCallback+0x48>)
 8016c8a:	f043 0306 	orr.w	r3, r3, #6
 8016c8e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8016c90:	bf00      	nop
 8016c92:	3708      	adds	r7, #8
 8016c94:	46bd      	mov	sp, r7
 8016c96:	bd80      	pop	{r7, pc}
 8016c98:	e000ed00 	.word	0xe000ed00

08016c9c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016c9c:	b580      	push	{r7, lr}
 8016c9e:	b082      	sub	sp, #8
 8016ca0:	af00      	add	r7, sp, #0
 8016ca2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8016ca4:	687b      	ldr	r3, [r7, #4]
 8016ca6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8016caa:	4618      	mov	r0, r3
 8016cac:	f7f1 fd36 	bl	800871c <USBD_LL_Resume>
}
 8016cb0:	bf00      	nop
 8016cb2:	3708      	adds	r7, #8
 8016cb4:	46bd      	mov	sp, r7
 8016cb6:	bd80      	pop	{r7, pc}

08016cb8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016cb8:	b580      	push	{r7, lr}
 8016cba:	b082      	sub	sp, #8
 8016cbc:	af00      	add	r7, sp, #0
 8016cbe:	6078      	str	r0, [r7, #4]
 8016cc0:	460b      	mov	r3, r1
 8016cc2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016cc4:	687b      	ldr	r3, [r7, #4]
 8016cc6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8016cca:	78fa      	ldrb	r2, [r7, #3]
 8016ccc:	4611      	mov	r1, r2
 8016cce:	4618      	mov	r0, r3
 8016cd0:	f7f1 fd8e 	bl	80087f0 <USBD_LL_IsoOUTIncomplete>
}
 8016cd4:	bf00      	nop
 8016cd6:	3708      	adds	r7, #8
 8016cd8:	46bd      	mov	sp, r7
 8016cda:	bd80      	pop	{r7, pc}

08016cdc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016cdc:	b580      	push	{r7, lr}
 8016cde:	b082      	sub	sp, #8
 8016ce0:	af00      	add	r7, sp, #0
 8016ce2:	6078      	str	r0, [r7, #4]
 8016ce4:	460b      	mov	r3, r1
 8016ce6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016ce8:	687b      	ldr	r3, [r7, #4]
 8016cea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8016cee:	78fa      	ldrb	r2, [r7, #3]
 8016cf0:	4611      	mov	r1, r2
 8016cf2:	4618      	mov	r0, r3
 8016cf4:	f7f1 fd4a 	bl	800878c <USBD_LL_IsoINIncomplete>
}
 8016cf8:	bf00      	nop
 8016cfa:	3708      	adds	r7, #8
 8016cfc:	46bd      	mov	sp, r7
 8016cfe:	bd80      	pop	{r7, pc}

08016d00 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016d00:	b580      	push	{r7, lr}
 8016d02:	b082      	sub	sp, #8
 8016d04:	af00      	add	r7, sp, #0
 8016d06:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8016d08:	687b      	ldr	r3, [r7, #4]
 8016d0a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8016d0e:	4618      	mov	r0, r3
 8016d10:	f7f1 fda0 	bl	8008854 <USBD_LL_DevConnected>
}
 8016d14:	bf00      	nop
 8016d16:	3708      	adds	r7, #8
 8016d18:	46bd      	mov	sp, r7
 8016d1a:	bd80      	pop	{r7, pc}

08016d1c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016d1c:	b580      	push	{r7, lr}
 8016d1e:	b082      	sub	sp, #8
 8016d20:	af00      	add	r7, sp, #0
 8016d22:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8016d24:	687b      	ldr	r3, [r7, #4]
 8016d26:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8016d2a:	4618      	mov	r0, r3
 8016d2c:	f7f1 fd9d 	bl	800886a <USBD_LL_DevDisconnected>
}
 8016d30:	bf00      	nop
 8016d32:	3708      	adds	r7, #8
 8016d34:	46bd      	mov	sp, r7
 8016d36:	bd80      	pop	{r7, pc}

08016d38 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8016d38:	b580      	push	{r7, lr}
 8016d3a:	b082      	sub	sp, #8
 8016d3c:	af00      	add	r7, sp, #0
 8016d3e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8016d40:	687b      	ldr	r3, [r7, #4]
 8016d42:	781b      	ldrb	r3, [r3, #0]
 8016d44:	2b00      	cmp	r3, #0
 8016d46:	d13c      	bne.n	8016dc2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8016d48:	4a20      	ldr	r2, [pc, #128]	@ (8016dcc <USBD_LL_Init+0x94>)
 8016d4a:	687b      	ldr	r3, [r7, #4]
 8016d4c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8016d50:	687b      	ldr	r3, [r7, #4]
 8016d52:	4a1e      	ldr	r2, [pc, #120]	@ (8016dcc <USBD_LL_Init+0x94>)
 8016d54:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8016d58:	4b1c      	ldr	r3, [pc, #112]	@ (8016dcc <USBD_LL_Init+0x94>)
 8016d5a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8016d5e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8016d60:	4b1a      	ldr	r3, [pc, #104]	@ (8016dcc <USBD_LL_Init+0x94>)
 8016d62:	2204      	movs	r2, #4
 8016d64:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8016d66:	4b19      	ldr	r3, [pc, #100]	@ (8016dcc <USBD_LL_Init+0x94>)
 8016d68:	2202      	movs	r2, #2
 8016d6a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8016d6c:	4b17      	ldr	r3, [pc, #92]	@ (8016dcc <USBD_LL_Init+0x94>)
 8016d6e:	2200      	movs	r2, #0
 8016d70:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8016d72:	4b16      	ldr	r3, [pc, #88]	@ (8016dcc <USBD_LL_Init+0x94>)
 8016d74:	2202      	movs	r2, #2
 8016d76:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8016d78:	4b14      	ldr	r3, [pc, #80]	@ (8016dcc <USBD_LL_Init+0x94>)
 8016d7a:	2200      	movs	r2, #0
 8016d7c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8016d7e:	4b13      	ldr	r3, [pc, #76]	@ (8016dcc <USBD_LL_Init+0x94>)
 8016d80:	2200      	movs	r2, #0
 8016d82:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8016d84:	4b11      	ldr	r3, [pc, #68]	@ (8016dcc <USBD_LL_Init+0x94>)
 8016d86:	2200      	movs	r2, #0
 8016d88:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8016d8a:	4b10      	ldr	r3, [pc, #64]	@ (8016dcc <USBD_LL_Init+0x94>)
 8016d8c:	2200      	movs	r2, #0
 8016d8e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8016d90:	4b0e      	ldr	r3, [pc, #56]	@ (8016dcc <USBD_LL_Init+0x94>)
 8016d92:	2200      	movs	r2, #0
 8016d94:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8016d96:	480d      	ldr	r0, [pc, #52]	@ (8016dcc <USBD_LL_Init+0x94>)
 8016d98:	f7eb fe87 	bl	8002aaa <HAL_PCD_Init>
 8016d9c:	4603      	mov	r3, r0
 8016d9e:	2b00      	cmp	r3, #0
 8016da0:	d001      	beq.n	8016da6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8016da2:	f7e9 feab 	bl	8000afc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8016da6:	2180      	movs	r1, #128	@ 0x80
 8016da8:	4808      	ldr	r0, [pc, #32]	@ (8016dcc <USBD_LL_Init+0x94>)
 8016daa:	f7ed f8b4 	bl	8003f16 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8016dae:	2240      	movs	r2, #64	@ 0x40
 8016db0:	2100      	movs	r1, #0
 8016db2:	4806      	ldr	r0, [pc, #24]	@ (8016dcc <USBD_LL_Init+0x94>)
 8016db4:	f7ed f868 	bl	8003e88 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8016db8:	2280      	movs	r2, #128	@ 0x80
 8016dba:	2101      	movs	r1, #1
 8016dbc:	4803      	ldr	r0, [pc, #12]	@ (8016dcc <USBD_LL_Init+0x94>)
 8016dbe:	f7ed f863 	bl	8003e88 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8016dc2:	2300      	movs	r3, #0
}
 8016dc4:	4618      	mov	r0, r3
 8016dc6:	3708      	adds	r7, #8
 8016dc8:	46bd      	mov	sp, r7
 8016dca:	bd80      	pop	{r7, pc}
 8016dcc:	2000dcc4 	.word	0x2000dcc4

08016dd0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8016dd0:	b580      	push	{r7, lr}
 8016dd2:	b084      	sub	sp, #16
 8016dd4:	af00      	add	r7, sp, #0
 8016dd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016dd8:	2300      	movs	r3, #0
 8016dda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016ddc:	2300      	movs	r3, #0
 8016dde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8016de0:	687b      	ldr	r3, [r7, #4]
 8016de2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8016de6:	4618      	mov	r0, r3
 8016de8:	f7eb ff6e 	bl	8002cc8 <HAL_PCD_Start>
 8016dec:	4603      	mov	r3, r0
 8016dee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016df0:	7bfb      	ldrb	r3, [r7, #15]
 8016df2:	4618      	mov	r0, r3
 8016df4:	f000 f942 	bl	801707c <USBD_Get_USB_Status>
 8016df8:	4603      	mov	r3, r0
 8016dfa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016dfc:	7bbb      	ldrb	r3, [r7, #14]
}
 8016dfe:	4618      	mov	r0, r3
 8016e00:	3710      	adds	r7, #16
 8016e02:	46bd      	mov	sp, r7
 8016e04:	bd80      	pop	{r7, pc}

08016e06 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8016e06:	b580      	push	{r7, lr}
 8016e08:	b084      	sub	sp, #16
 8016e0a:	af00      	add	r7, sp, #0
 8016e0c:	6078      	str	r0, [r7, #4]
 8016e0e:	4608      	mov	r0, r1
 8016e10:	4611      	mov	r1, r2
 8016e12:	461a      	mov	r2, r3
 8016e14:	4603      	mov	r3, r0
 8016e16:	70fb      	strb	r3, [r7, #3]
 8016e18:	460b      	mov	r3, r1
 8016e1a:	70bb      	strb	r3, [r7, #2]
 8016e1c:	4613      	mov	r3, r2
 8016e1e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016e20:	2300      	movs	r3, #0
 8016e22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016e24:	2300      	movs	r3, #0
 8016e26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8016e28:	687b      	ldr	r3, [r7, #4]
 8016e2a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8016e2e:	78bb      	ldrb	r3, [r7, #2]
 8016e30:	883a      	ldrh	r2, [r7, #0]
 8016e32:	78f9      	ldrb	r1, [r7, #3]
 8016e34:	f7ec fc42 	bl	80036bc <HAL_PCD_EP_Open>
 8016e38:	4603      	mov	r3, r0
 8016e3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016e3c:	7bfb      	ldrb	r3, [r7, #15]
 8016e3e:	4618      	mov	r0, r3
 8016e40:	f000 f91c 	bl	801707c <USBD_Get_USB_Status>
 8016e44:	4603      	mov	r3, r0
 8016e46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016e48:	7bbb      	ldrb	r3, [r7, #14]
}
 8016e4a:	4618      	mov	r0, r3
 8016e4c:	3710      	adds	r7, #16
 8016e4e:	46bd      	mov	sp, r7
 8016e50:	bd80      	pop	{r7, pc}

08016e52 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016e52:	b580      	push	{r7, lr}
 8016e54:	b084      	sub	sp, #16
 8016e56:	af00      	add	r7, sp, #0
 8016e58:	6078      	str	r0, [r7, #4]
 8016e5a:	460b      	mov	r3, r1
 8016e5c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016e5e:	2300      	movs	r3, #0
 8016e60:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016e62:	2300      	movs	r3, #0
 8016e64:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8016e66:	687b      	ldr	r3, [r7, #4]
 8016e68:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8016e6c:	78fa      	ldrb	r2, [r7, #3]
 8016e6e:	4611      	mov	r1, r2
 8016e70:	4618      	mov	r0, r3
 8016e72:	f7ec fc8d 	bl	8003790 <HAL_PCD_EP_Close>
 8016e76:	4603      	mov	r3, r0
 8016e78:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016e7a:	7bfb      	ldrb	r3, [r7, #15]
 8016e7c:	4618      	mov	r0, r3
 8016e7e:	f000 f8fd 	bl	801707c <USBD_Get_USB_Status>
 8016e82:	4603      	mov	r3, r0
 8016e84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016e86:	7bbb      	ldrb	r3, [r7, #14]
}
 8016e88:	4618      	mov	r0, r3
 8016e8a:	3710      	adds	r7, #16
 8016e8c:	46bd      	mov	sp, r7
 8016e8e:	bd80      	pop	{r7, pc}

08016e90 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016e90:	b580      	push	{r7, lr}
 8016e92:	b084      	sub	sp, #16
 8016e94:	af00      	add	r7, sp, #0
 8016e96:	6078      	str	r0, [r7, #4]
 8016e98:	460b      	mov	r3, r1
 8016e9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016e9c:	2300      	movs	r3, #0
 8016e9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016ea0:	2300      	movs	r3, #0
 8016ea2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8016ea4:	687b      	ldr	r3, [r7, #4]
 8016ea6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8016eaa:	78fa      	ldrb	r2, [r7, #3]
 8016eac:	4611      	mov	r1, r2
 8016eae:	4618      	mov	r0, r3
 8016eb0:	f7ec fd45 	bl	800393e <HAL_PCD_EP_SetStall>
 8016eb4:	4603      	mov	r3, r0
 8016eb6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016eb8:	7bfb      	ldrb	r3, [r7, #15]
 8016eba:	4618      	mov	r0, r3
 8016ebc:	f000 f8de 	bl	801707c <USBD_Get_USB_Status>
 8016ec0:	4603      	mov	r3, r0
 8016ec2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016ec4:	7bbb      	ldrb	r3, [r7, #14]
}
 8016ec6:	4618      	mov	r0, r3
 8016ec8:	3710      	adds	r7, #16
 8016eca:	46bd      	mov	sp, r7
 8016ecc:	bd80      	pop	{r7, pc}

08016ece <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016ece:	b580      	push	{r7, lr}
 8016ed0:	b084      	sub	sp, #16
 8016ed2:	af00      	add	r7, sp, #0
 8016ed4:	6078      	str	r0, [r7, #4]
 8016ed6:	460b      	mov	r3, r1
 8016ed8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016eda:	2300      	movs	r3, #0
 8016edc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016ede:	2300      	movs	r3, #0
 8016ee0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8016ee2:	687b      	ldr	r3, [r7, #4]
 8016ee4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8016ee8:	78fa      	ldrb	r2, [r7, #3]
 8016eea:	4611      	mov	r1, r2
 8016eec:	4618      	mov	r0, r3
 8016eee:	f7ec fd89 	bl	8003a04 <HAL_PCD_EP_ClrStall>
 8016ef2:	4603      	mov	r3, r0
 8016ef4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016ef6:	7bfb      	ldrb	r3, [r7, #15]
 8016ef8:	4618      	mov	r0, r3
 8016efa:	f000 f8bf 	bl	801707c <USBD_Get_USB_Status>
 8016efe:	4603      	mov	r3, r0
 8016f00:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016f02:	7bbb      	ldrb	r3, [r7, #14]
}
 8016f04:	4618      	mov	r0, r3
 8016f06:	3710      	adds	r7, #16
 8016f08:	46bd      	mov	sp, r7
 8016f0a:	bd80      	pop	{r7, pc}

08016f0c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016f0c:	b480      	push	{r7}
 8016f0e:	b085      	sub	sp, #20
 8016f10:	af00      	add	r7, sp, #0
 8016f12:	6078      	str	r0, [r7, #4]
 8016f14:	460b      	mov	r3, r1
 8016f16:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8016f18:	687b      	ldr	r3, [r7, #4]
 8016f1a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8016f1e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8016f20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016f24:	2b00      	cmp	r3, #0
 8016f26:	da0b      	bge.n	8016f40 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8016f28:	78fb      	ldrb	r3, [r7, #3]
 8016f2a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8016f2e:	68f9      	ldr	r1, [r7, #12]
 8016f30:	4613      	mov	r3, r2
 8016f32:	00db      	lsls	r3, r3, #3
 8016f34:	4413      	add	r3, r2
 8016f36:	009b      	lsls	r3, r3, #2
 8016f38:	440b      	add	r3, r1
 8016f3a:	3316      	adds	r3, #22
 8016f3c:	781b      	ldrb	r3, [r3, #0]
 8016f3e:	e00b      	b.n	8016f58 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8016f40:	78fb      	ldrb	r3, [r7, #3]
 8016f42:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8016f46:	68f9      	ldr	r1, [r7, #12]
 8016f48:	4613      	mov	r3, r2
 8016f4a:	00db      	lsls	r3, r3, #3
 8016f4c:	4413      	add	r3, r2
 8016f4e:	009b      	lsls	r3, r3, #2
 8016f50:	440b      	add	r3, r1
 8016f52:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8016f56:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016f58:	4618      	mov	r0, r3
 8016f5a:	3714      	adds	r7, #20
 8016f5c:	46bd      	mov	sp, r7
 8016f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f62:	4770      	bx	lr

08016f64 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8016f64:	b580      	push	{r7, lr}
 8016f66:	b084      	sub	sp, #16
 8016f68:	af00      	add	r7, sp, #0
 8016f6a:	6078      	str	r0, [r7, #4]
 8016f6c:	460b      	mov	r3, r1
 8016f6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016f70:	2300      	movs	r3, #0
 8016f72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016f74:	2300      	movs	r3, #0
 8016f76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8016f78:	687b      	ldr	r3, [r7, #4]
 8016f7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8016f7e:	78fa      	ldrb	r2, [r7, #3]
 8016f80:	4611      	mov	r1, r2
 8016f82:	4618      	mov	r0, r3
 8016f84:	f7ec fb76 	bl	8003674 <HAL_PCD_SetAddress>
 8016f88:	4603      	mov	r3, r0
 8016f8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016f8c:	7bfb      	ldrb	r3, [r7, #15]
 8016f8e:	4618      	mov	r0, r3
 8016f90:	f000 f874 	bl	801707c <USBD_Get_USB_Status>
 8016f94:	4603      	mov	r3, r0
 8016f96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016f98:	7bbb      	ldrb	r3, [r7, #14]
}
 8016f9a:	4618      	mov	r0, r3
 8016f9c:	3710      	adds	r7, #16
 8016f9e:	46bd      	mov	sp, r7
 8016fa0:	bd80      	pop	{r7, pc}

08016fa2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016fa2:	b580      	push	{r7, lr}
 8016fa4:	b086      	sub	sp, #24
 8016fa6:	af00      	add	r7, sp, #0
 8016fa8:	60f8      	str	r0, [r7, #12]
 8016faa:	607a      	str	r2, [r7, #4]
 8016fac:	603b      	str	r3, [r7, #0]
 8016fae:	460b      	mov	r3, r1
 8016fb0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016fb2:	2300      	movs	r3, #0
 8016fb4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016fb6:	2300      	movs	r3, #0
 8016fb8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8016fba:	68fb      	ldr	r3, [r7, #12]
 8016fbc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8016fc0:	7af9      	ldrb	r1, [r7, #11]
 8016fc2:	683b      	ldr	r3, [r7, #0]
 8016fc4:	687a      	ldr	r2, [r7, #4]
 8016fc6:	f7ec fc80 	bl	80038ca <HAL_PCD_EP_Transmit>
 8016fca:	4603      	mov	r3, r0
 8016fcc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016fce:	7dfb      	ldrb	r3, [r7, #23]
 8016fd0:	4618      	mov	r0, r3
 8016fd2:	f000 f853 	bl	801707c <USBD_Get_USB_Status>
 8016fd6:	4603      	mov	r3, r0
 8016fd8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016fda:	7dbb      	ldrb	r3, [r7, #22]
}
 8016fdc:	4618      	mov	r0, r3
 8016fde:	3718      	adds	r7, #24
 8016fe0:	46bd      	mov	sp, r7
 8016fe2:	bd80      	pop	{r7, pc}

08016fe4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016fe4:	b580      	push	{r7, lr}
 8016fe6:	b086      	sub	sp, #24
 8016fe8:	af00      	add	r7, sp, #0
 8016fea:	60f8      	str	r0, [r7, #12]
 8016fec:	607a      	str	r2, [r7, #4]
 8016fee:	603b      	str	r3, [r7, #0]
 8016ff0:	460b      	mov	r3, r1
 8016ff2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016ff4:	2300      	movs	r3, #0
 8016ff6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016ff8:	2300      	movs	r3, #0
 8016ffa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8016ffc:	68fb      	ldr	r3, [r7, #12]
 8016ffe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8017002:	7af9      	ldrb	r1, [r7, #11]
 8017004:	683b      	ldr	r3, [r7, #0]
 8017006:	687a      	ldr	r2, [r7, #4]
 8017008:	f7ec fc0c 	bl	8003824 <HAL_PCD_EP_Receive>
 801700c:	4603      	mov	r3, r0
 801700e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017010:	7dfb      	ldrb	r3, [r7, #23]
 8017012:	4618      	mov	r0, r3
 8017014:	f000 f832 	bl	801707c <USBD_Get_USB_Status>
 8017018:	4603      	mov	r3, r0
 801701a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801701c:	7dbb      	ldrb	r3, [r7, #22]
}
 801701e:	4618      	mov	r0, r3
 8017020:	3718      	adds	r7, #24
 8017022:	46bd      	mov	sp, r7
 8017024:	bd80      	pop	{r7, pc}

08017026 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017026:	b580      	push	{r7, lr}
 8017028:	b082      	sub	sp, #8
 801702a:	af00      	add	r7, sp, #0
 801702c:	6078      	str	r0, [r7, #4]
 801702e:	460b      	mov	r3, r1
 8017030:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8017032:	687b      	ldr	r3, [r7, #4]
 8017034:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017038:	78fa      	ldrb	r2, [r7, #3]
 801703a:	4611      	mov	r1, r2
 801703c:	4618      	mov	r0, r3
 801703e:	f7ec fc2c 	bl	800389a <HAL_PCD_EP_GetRxCount>
 8017042:	4603      	mov	r3, r0
}
 8017044:	4618      	mov	r0, r3
 8017046:	3708      	adds	r7, #8
 8017048:	46bd      	mov	sp, r7
 801704a:	bd80      	pop	{r7, pc}

0801704c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801704c:	b480      	push	{r7}
 801704e:	b083      	sub	sp, #12
 8017050:	af00      	add	r7, sp, #0
 8017052:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8017054:	4b03      	ldr	r3, [pc, #12]	@ (8017064 <USBD_static_malloc+0x18>)
}
 8017056:	4618      	mov	r0, r3
 8017058:	370c      	adds	r7, #12
 801705a:	46bd      	mov	sp, r7
 801705c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017060:	4770      	bx	lr
 8017062:	bf00      	nop
 8017064:	2000e1a8 	.word	0x2000e1a8

08017068 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8017068:	b480      	push	{r7}
 801706a:	b083      	sub	sp, #12
 801706c:	af00      	add	r7, sp, #0
 801706e:	6078      	str	r0, [r7, #4]

}
 8017070:	bf00      	nop
 8017072:	370c      	adds	r7, #12
 8017074:	46bd      	mov	sp, r7
 8017076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801707a:	4770      	bx	lr

0801707c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801707c:	b480      	push	{r7}
 801707e:	b085      	sub	sp, #20
 8017080:	af00      	add	r7, sp, #0
 8017082:	4603      	mov	r3, r0
 8017084:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017086:	2300      	movs	r3, #0
 8017088:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801708a:	79fb      	ldrb	r3, [r7, #7]
 801708c:	2b03      	cmp	r3, #3
 801708e:	d817      	bhi.n	80170c0 <USBD_Get_USB_Status+0x44>
 8017090:	a201      	add	r2, pc, #4	@ (adr r2, 8017098 <USBD_Get_USB_Status+0x1c>)
 8017092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017096:	bf00      	nop
 8017098:	080170a9 	.word	0x080170a9
 801709c:	080170af 	.word	0x080170af
 80170a0:	080170b5 	.word	0x080170b5
 80170a4:	080170bb 	.word	0x080170bb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80170a8:	2300      	movs	r3, #0
 80170aa:	73fb      	strb	r3, [r7, #15]
    break;
 80170ac:	e00b      	b.n	80170c6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80170ae:	2303      	movs	r3, #3
 80170b0:	73fb      	strb	r3, [r7, #15]
    break;
 80170b2:	e008      	b.n	80170c6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80170b4:	2301      	movs	r3, #1
 80170b6:	73fb      	strb	r3, [r7, #15]
    break;
 80170b8:	e005      	b.n	80170c6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80170ba:	2303      	movs	r3, #3
 80170bc:	73fb      	strb	r3, [r7, #15]
    break;
 80170be:	e002      	b.n	80170c6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80170c0:	2303      	movs	r3, #3
 80170c2:	73fb      	strb	r3, [r7, #15]
    break;
 80170c4:	bf00      	nop
  }
  return usb_status;
 80170c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80170c8:	4618      	mov	r0, r3
 80170ca:	3714      	adds	r7, #20
 80170cc:	46bd      	mov	sp, r7
 80170ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170d2:	4770      	bx	lr

080170d4 <rand>:
 80170d4:	4b16      	ldr	r3, [pc, #88]	@ (8017130 <rand+0x5c>)
 80170d6:	b510      	push	{r4, lr}
 80170d8:	681c      	ldr	r4, [r3, #0]
 80170da:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80170dc:	b9b3      	cbnz	r3, 801710c <rand+0x38>
 80170de:	2018      	movs	r0, #24
 80170e0:	f000 faf8 	bl	80176d4 <malloc>
 80170e4:	4602      	mov	r2, r0
 80170e6:	6320      	str	r0, [r4, #48]	@ 0x30
 80170e8:	b920      	cbnz	r0, 80170f4 <rand+0x20>
 80170ea:	4b12      	ldr	r3, [pc, #72]	@ (8017134 <rand+0x60>)
 80170ec:	4812      	ldr	r0, [pc, #72]	@ (8017138 <rand+0x64>)
 80170ee:	2152      	movs	r1, #82	@ 0x52
 80170f0:	f000 fa88 	bl	8017604 <__assert_func>
 80170f4:	4911      	ldr	r1, [pc, #68]	@ (801713c <rand+0x68>)
 80170f6:	4b12      	ldr	r3, [pc, #72]	@ (8017140 <rand+0x6c>)
 80170f8:	e9c0 1300 	strd	r1, r3, [r0]
 80170fc:	4b11      	ldr	r3, [pc, #68]	@ (8017144 <rand+0x70>)
 80170fe:	6083      	str	r3, [r0, #8]
 8017100:	230b      	movs	r3, #11
 8017102:	8183      	strh	r3, [r0, #12]
 8017104:	2100      	movs	r1, #0
 8017106:	2001      	movs	r0, #1
 8017108:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801710c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801710e:	480e      	ldr	r0, [pc, #56]	@ (8017148 <rand+0x74>)
 8017110:	690b      	ldr	r3, [r1, #16]
 8017112:	694c      	ldr	r4, [r1, #20]
 8017114:	4a0d      	ldr	r2, [pc, #52]	@ (801714c <rand+0x78>)
 8017116:	4358      	muls	r0, r3
 8017118:	fb02 0004 	mla	r0, r2, r4, r0
 801711c:	fba3 3202 	umull	r3, r2, r3, r2
 8017120:	3301      	adds	r3, #1
 8017122:	eb40 0002 	adc.w	r0, r0, r2
 8017126:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801712a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801712e:	bd10      	pop	{r4, pc}
 8017130:	20000118 	.word	0x20000118
 8017134:	0801b3f0 	.word	0x0801b3f0
 8017138:	0801b407 	.word	0x0801b407
 801713c:	abcd330e 	.word	0xabcd330e
 8017140:	e66d1234 	.word	0xe66d1234
 8017144:	0005deec 	.word	0x0005deec
 8017148:	5851f42d 	.word	0x5851f42d
 801714c:	4c957f2d 	.word	0x4c957f2d

08017150 <std>:
 8017150:	2300      	movs	r3, #0
 8017152:	b510      	push	{r4, lr}
 8017154:	4604      	mov	r4, r0
 8017156:	e9c0 3300 	strd	r3, r3, [r0]
 801715a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801715e:	6083      	str	r3, [r0, #8]
 8017160:	8181      	strh	r1, [r0, #12]
 8017162:	6643      	str	r3, [r0, #100]	@ 0x64
 8017164:	81c2      	strh	r2, [r0, #14]
 8017166:	6183      	str	r3, [r0, #24]
 8017168:	4619      	mov	r1, r3
 801716a:	2208      	movs	r2, #8
 801716c:	305c      	adds	r0, #92	@ 0x5c
 801716e:	f000 f966 	bl	801743e <memset>
 8017172:	4b0d      	ldr	r3, [pc, #52]	@ (80171a8 <std+0x58>)
 8017174:	6263      	str	r3, [r4, #36]	@ 0x24
 8017176:	4b0d      	ldr	r3, [pc, #52]	@ (80171ac <std+0x5c>)
 8017178:	62a3      	str	r3, [r4, #40]	@ 0x28
 801717a:	4b0d      	ldr	r3, [pc, #52]	@ (80171b0 <std+0x60>)
 801717c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801717e:	4b0d      	ldr	r3, [pc, #52]	@ (80171b4 <std+0x64>)
 8017180:	6323      	str	r3, [r4, #48]	@ 0x30
 8017182:	4b0d      	ldr	r3, [pc, #52]	@ (80171b8 <std+0x68>)
 8017184:	6224      	str	r4, [r4, #32]
 8017186:	429c      	cmp	r4, r3
 8017188:	d006      	beq.n	8017198 <std+0x48>
 801718a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801718e:	4294      	cmp	r4, r2
 8017190:	d002      	beq.n	8017198 <std+0x48>
 8017192:	33d0      	adds	r3, #208	@ 0xd0
 8017194:	429c      	cmp	r4, r3
 8017196:	d105      	bne.n	80171a4 <std+0x54>
 8017198:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801719c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80171a0:	f000 ba1e 	b.w	80175e0 <__retarget_lock_init_recursive>
 80171a4:	bd10      	pop	{r4, pc}
 80171a6:	bf00      	nop
 80171a8:	08017365 	.word	0x08017365
 80171ac:	08017387 	.word	0x08017387
 80171b0:	080173bf 	.word	0x080173bf
 80171b4:	080173e3 	.word	0x080173e3
 80171b8:	2000e3c8 	.word	0x2000e3c8

080171bc <stdio_exit_handler>:
 80171bc:	4a02      	ldr	r2, [pc, #8]	@ (80171c8 <stdio_exit_handler+0xc>)
 80171be:	4903      	ldr	r1, [pc, #12]	@ (80171cc <stdio_exit_handler+0x10>)
 80171c0:	4803      	ldr	r0, [pc, #12]	@ (80171d0 <stdio_exit_handler+0x14>)
 80171c2:	f000 b869 	b.w	8017298 <_fwalk_sglue>
 80171c6:	bf00      	nop
 80171c8:	2000010c 	.word	0x2000010c
 80171cc:	08018195 	.word	0x08018195
 80171d0:	2000011c 	.word	0x2000011c

080171d4 <cleanup_stdio>:
 80171d4:	6841      	ldr	r1, [r0, #4]
 80171d6:	4b0c      	ldr	r3, [pc, #48]	@ (8017208 <cleanup_stdio+0x34>)
 80171d8:	4299      	cmp	r1, r3
 80171da:	b510      	push	{r4, lr}
 80171dc:	4604      	mov	r4, r0
 80171de:	d001      	beq.n	80171e4 <cleanup_stdio+0x10>
 80171e0:	f000 ffd8 	bl	8018194 <_fflush_r>
 80171e4:	68a1      	ldr	r1, [r4, #8]
 80171e6:	4b09      	ldr	r3, [pc, #36]	@ (801720c <cleanup_stdio+0x38>)
 80171e8:	4299      	cmp	r1, r3
 80171ea:	d002      	beq.n	80171f2 <cleanup_stdio+0x1e>
 80171ec:	4620      	mov	r0, r4
 80171ee:	f000 ffd1 	bl	8018194 <_fflush_r>
 80171f2:	68e1      	ldr	r1, [r4, #12]
 80171f4:	4b06      	ldr	r3, [pc, #24]	@ (8017210 <cleanup_stdio+0x3c>)
 80171f6:	4299      	cmp	r1, r3
 80171f8:	d004      	beq.n	8017204 <cleanup_stdio+0x30>
 80171fa:	4620      	mov	r0, r4
 80171fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017200:	f000 bfc8 	b.w	8018194 <_fflush_r>
 8017204:	bd10      	pop	{r4, pc}
 8017206:	bf00      	nop
 8017208:	2000e3c8 	.word	0x2000e3c8
 801720c:	2000e430 	.word	0x2000e430
 8017210:	2000e498 	.word	0x2000e498

08017214 <global_stdio_init.part.0>:
 8017214:	b510      	push	{r4, lr}
 8017216:	4b0b      	ldr	r3, [pc, #44]	@ (8017244 <global_stdio_init.part.0+0x30>)
 8017218:	4c0b      	ldr	r4, [pc, #44]	@ (8017248 <global_stdio_init.part.0+0x34>)
 801721a:	4a0c      	ldr	r2, [pc, #48]	@ (801724c <global_stdio_init.part.0+0x38>)
 801721c:	601a      	str	r2, [r3, #0]
 801721e:	4620      	mov	r0, r4
 8017220:	2200      	movs	r2, #0
 8017222:	2104      	movs	r1, #4
 8017224:	f7ff ff94 	bl	8017150 <std>
 8017228:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801722c:	2201      	movs	r2, #1
 801722e:	2109      	movs	r1, #9
 8017230:	f7ff ff8e 	bl	8017150 <std>
 8017234:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8017238:	2202      	movs	r2, #2
 801723a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801723e:	2112      	movs	r1, #18
 8017240:	f7ff bf86 	b.w	8017150 <std>
 8017244:	2000e500 	.word	0x2000e500
 8017248:	2000e3c8 	.word	0x2000e3c8
 801724c:	080171bd 	.word	0x080171bd

08017250 <__sfp_lock_acquire>:
 8017250:	4801      	ldr	r0, [pc, #4]	@ (8017258 <__sfp_lock_acquire+0x8>)
 8017252:	f000 b9c6 	b.w	80175e2 <__retarget_lock_acquire_recursive>
 8017256:	bf00      	nop
 8017258:	2000e509 	.word	0x2000e509

0801725c <__sfp_lock_release>:
 801725c:	4801      	ldr	r0, [pc, #4]	@ (8017264 <__sfp_lock_release+0x8>)
 801725e:	f000 b9c1 	b.w	80175e4 <__retarget_lock_release_recursive>
 8017262:	bf00      	nop
 8017264:	2000e509 	.word	0x2000e509

08017268 <__sinit>:
 8017268:	b510      	push	{r4, lr}
 801726a:	4604      	mov	r4, r0
 801726c:	f7ff fff0 	bl	8017250 <__sfp_lock_acquire>
 8017270:	6a23      	ldr	r3, [r4, #32]
 8017272:	b11b      	cbz	r3, 801727c <__sinit+0x14>
 8017274:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017278:	f7ff bff0 	b.w	801725c <__sfp_lock_release>
 801727c:	4b04      	ldr	r3, [pc, #16]	@ (8017290 <__sinit+0x28>)
 801727e:	6223      	str	r3, [r4, #32]
 8017280:	4b04      	ldr	r3, [pc, #16]	@ (8017294 <__sinit+0x2c>)
 8017282:	681b      	ldr	r3, [r3, #0]
 8017284:	2b00      	cmp	r3, #0
 8017286:	d1f5      	bne.n	8017274 <__sinit+0xc>
 8017288:	f7ff ffc4 	bl	8017214 <global_stdio_init.part.0>
 801728c:	e7f2      	b.n	8017274 <__sinit+0xc>
 801728e:	bf00      	nop
 8017290:	080171d5 	.word	0x080171d5
 8017294:	2000e500 	.word	0x2000e500

08017298 <_fwalk_sglue>:
 8017298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801729c:	4607      	mov	r7, r0
 801729e:	4688      	mov	r8, r1
 80172a0:	4614      	mov	r4, r2
 80172a2:	2600      	movs	r6, #0
 80172a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80172a8:	f1b9 0901 	subs.w	r9, r9, #1
 80172ac:	d505      	bpl.n	80172ba <_fwalk_sglue+0x22>
 80172ae:	6824      	ldr	r4, [r4, #0]
 80172b0:	2c00      	cmp	r4, #0
 80172b2:	d1f7      	bne.n	80172a4 <_fwalk_sglue+0xc>
 80172b4:	4630      	mov	r0, r6
 80172b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80172ba:	89ab      	ldrh	r3, [r5, #12]
 80172bc:	2b01      	cmp	r3, #1
 80172be:	d907      	bls.n	80172d0 <_fwalk_sglue+0x38>
 80172c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80172c4:	3301      	adds	r3, #1
 80172c6:	d003      	beq.n	80172d0 <_fwalk_sglue+0x38>
 80172c8:	4629      	mov	r1, r5
 80172ca:	4638      	mov	r0, r7
 80172cc:	47c0      	blx	r8
 80172ce:	4306      	orrs	r6, r0
 80172d0:	3568      	adds	r5, #104	@ 0x68
 80172d2:	e7e9      	b.n	80172a8 <_fwalk_sglue+0x10>

080172d4 <iprintf>:
 80172d4:	b40f      	push	{r0, r1, r2, r3}
 80172d6:	b507      	push	{r0, r1, r2, lr}
 80172d8:	4906      	ldr	r1, [pc, #24]	@ (80172f4 <iprintf+0x20>)
 80172da:	ab04      	add	r3, sp, #16
 80172dc:	6808      	ldr	r0, [r1, #0]
 80172de:	f853 2b04 	ldr.w	r2, [r3], #4
 80172e2:	6881      	ldr	r1, [r0, #8]
 80172e4:	9301      	str	r3, [sp, #4]
 80172e6:	f000 fc2d 	bl	8017b44 <_vfiprintf_r>
 80172ea:	b003      	add	sp, #12
 80172ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80172f0:	b004      	add	sp, #16
 80172f2:	4770      	bx	lr
 80172f4:	20000118 	.word	0x20000118

080172f8 <sniprintf>:
 80172f8:	b40c      	push	{r2, r3}
 80172fa:	b530      	push	{r4, r5, lr}
 80172fc:	4b18      	ldr	r3, [pc, #96]	@ (8017360 <sniprintf+0x68>)
 80172fe:	1e0c      	subs	r4, r1, #0
 8017300:	681d      	ldr	r5, [r3, #0]
 8017302:	b09d      	sub	sp, #116	@ 0x74
 8017304:	da08      	bge.n	8017318 <sniprintf+0x20>
 8017306:	238b      	movs	r3, #139	@ 0x8b
 8017308:	602b      	str	r3, [r5, #0]
 801730a:	f04f 30ff 	mov.w	r0, #4294967295
 801730e:	b01d      	add	sp, #116	@ 0x74
 8017310:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017314:	b002      	add	sp, #8
 8017316:	4770      	bx	lr
 8017318:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801731c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017320:	f04f 0300 	mov.w	r3, #0
 8017324:	931b      	str	r3, [sp, #108]	@ 0x6c
 8017326:	bf14      	ite	ne
 8017328:	f104 33ff 	addne.w	r3, r4, #4294967295
 801732c:	4623      	moveq	r3, r4
 801732e:	9304      	str	r3, [sp, #16]
 8017330:	9307      	str	r3, [sp, #28]
 8017332:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017336:	9002      	str	r0, [sp, #8]
 8017338:	9006      	str	r0, [sp, #24]
 801733a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801733e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8017340:	ab21      	add	r3, sp, #132	@ 0x84
 8017342:	a902      	add	r1, sp, #8
 8017344:	4628      	mov	r0, r5
 8017346:	9301      	str	r3, [sp, #4]
 8017348:	f000 fad6 	bl	80178f8 <_svfiprintf_r>
 801734c:	1c43      	adds	r3, r0, #1
 801734e:	bfbc      	itt	lt
 8017350:	238b      	movlt	r3, #139	@ 0x8b
 8017352:	602b      	strlt	r3, [r5, #0]
 8017354:	2c00      	cmp	r4, #0
 8017356:	d0da      	beq.n	801730e <sniprintf+0x16>
 8017358:	9b02      	ldr	r3, [sp, #8]
 801735a:	2200      	movs	r2, #0
 801735c:	701a      	strb	r2, [r3, #0]
 801735e:	e7d6      	b.n	801730e <sniprintf+0x16>
 8017360:	20000118 	.word	0x20000118

08017364 <__sread>:
 8017364:	b510      	push	{r4, lr}
 8017366:	460c      	mov	r4, r1
 8017368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801736c:	f000 f8f0 	bl	8017550 <_read_r>
 8017370:	2800      	cmp	r0, #0
 8017372:	bfab      	itete	ge
 8017374:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8017376:	89a3      	ldrhlt	r3, [r4, #12]
 8017378:	181b      	addge	r3, r3, r0
 801737a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801737e:	bfac      	ite	ge
 8017380:	6563      	strge	r3, [r4, #84]	@ 0x54
 8017382:	81a3      	strhlt	r3, [r4, #12]
 8017384:	bd10      	pop	{r4, pc}

08017386 <__swrite>:
 8017386:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801738a:	461f      	mov	r7, r3
 801738c:	898b      	ldrh	r3, [r1, #12]
 801738e:	05db      	lsls	r3, r3, #23
 8017390:	4605      	mov	r5, r0
 8017392:	460c      	mov	r4, r1
 8017394:	4616      	mov	r6, r2
 8017396:	d505      	bpl.n	80173a4 <__swrite+0x1e>
 8017398:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801739c:	2302      	movs	r3, #2
 801739e:	2200      	movs	r2, #0
 80173a0:	f000 f8c4 	bl	801752c <_lseek_r>
 80173a4:	89a3      	ldrh	r3, [r4, #12]
 80173a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80173aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80173ae:	81a3      	strh	r3, [r4, #12]
 80173b0:	4632      	mov	r2, r6
 80173b2:	463b      	mov	r3, r7
 80173b4:	4628      	mov	r0, r5
 80173b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80173ba:	f000 b8db 	b.w	8017574 <_write_r>

080173be <__sseek>:
 80173be:	b510      	push	{r4, lr}
 80173c0:	460c      	mov	r4, r1
 80173c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80173c6:	f000 f8b1 	bl	801752c <_lseek_r>
 80173ca:	1c43      	adds	r3, r0, #1
 80173cc:	89a3      	ldrh	r3, [r4, #12]
 80173ce:	bf15      	itete	ne
 80173d0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80173d2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80173d6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80173da:	81a3      	strheq	r3, [r4, #12]
 80173dc:	bf18      	it	ne
 80173de:	81a3      	strhne	r3, [r4, #12]
 80173e0:	bd10      	pop	{r4, pc}

080173e2 <__sclose>:
 80173e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80173e6:	f000 b833 	b.w	8017450 <_close_r>

080173ea <memcmp>:
 80173ea:	b510      	push	{r4, lr}
 80173ec:	3901      	subs	r1, #1
 80173ee:	4402      	add	r2, r0
 80173f0:	4290      	cmp	r0, r2
 80173f2:	d101      	bne.n	80173f8 <memcmp+0xe>
 80173f4:	2000      	movs	r0, #0
 80173f6:	e005      	b.n	8017404 <memcmp+0x1a>
 80173f8:	7803      	ldrb	r3, [r0, #0]
 80173fa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80173fe:	42a3      	cmp	r3, r4
 8017400:	d001      	beq.n	8017406 <memcmp+0x1c>
 8017402:	1b18      	subs	r0, r3, r4
 8017404:	bd10      	pop	{r4, pc}
 8017406:	3001      	adds	r0, #1
 8017408:	e7f2      	b.n	80173f0 <memcmp+0x6>

0801740a <memmove>:
 801740a:	4288      	cmp	r0, r1
 801740c:	b510      	push	{r4, lr}
 801740e:	eb01 0402 	add.w	r4, r1, r2
 8017412:	d902      	bls.n	801741a <memmove+0x10>
 8017414:	4284      	cmp	r4, r0
 8017416:	4623      	mov	r3, r4
 8017418:	d807      	bhi.n	801742a <memmove+0x20>
 801741a:	1e43      	subs	r3, r0, #1
 801741c:	42a1      	cmp	r1, r4
 801741e:	d008      	beq.n	8017432 <memmove+0x28>
 8017420:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017424:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017428:	e7f8      	b.n	801741c <memmove+0x12>
 801742a:	4402      	add	r2, r0
 801742c:	4601      	mov	r1, r0
 801742e:	428a      	cmp	r2, r1
 8017430:	d100      	bne.n	8017434 <memmove+0x2a>
 8017432:	bd10      	pop	{r4, pc}
 8017434:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017438:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801743c:	e7f7      	b.n	801742e <memmove+0x24>

0801743e <memset>:
 801743e:	4402      	add	r2, r0
 8017440:	4603      	mov	r3, r0
 8017442:	4293      	cmp	r3, r2
 8017444:	d100      	bne.n	8017448 <memset+0xa>
 8017446:	4770      	bx	lr
 8017448:	f803 1b01 	strb.w	r1, [r3], #1
 801744c:	e7f9      	b.n	8017442 <memset+0x4>
	...

08017450 <_close_r>:
 8017450:	b538      	push	{r3, r4, r5, lr}
 8017452:	4d06      	ldr	r5, [pc, #24]	@ (801746c <_close_r+0x1c>)
 8017454:	2300      	movs	r3, #0
 8017456:	4604      	mov	r4, r0
 8017458:	4608      	mov	r0, r1
 801745a:	602b      	str	r3, [r5, #0]
 801745c:	f7e9 fdbe 	bl	8000fdc <_close>
 8017460:	1c43      	adds	r3, r0, #1
 8017462:	d102      	bne.n	801746a <_close_r+0x1a>
 8017464:	682b      	ldr	r3, [r5, #0]
 8017466:	b103      	cbz	r3, 801746a <_close_r+0x1a>
 8017468:	6023      	str	r3, [r4, #0]
 801746a:	bd38      	pop	{r3, r4, r5, pc}
 801746c:	2000e504 	.word	0x2000e504

08017470 <_reclaim_reent>:
 8017470:	4b2d      	ldr	r3, [pc, #180]	@ (8017528 <_reclaim_reent+0xb8>)
 8017472:	681b      	ldr	r3, [r3, #0]
 8017474:	4283      	cmp	r3, r0
 8017476:	b570      	push	{r4, r5, r6, lr}
 8017478:	4604      	mov	r4, r0
 801747a:	d053      	beq.n	8017524 <_reclaim_reent+0xb4>
 801747c:	69c3      	ldr	r3, [r0, #28]
 801747e:	b31b      	cbz	r3, 80174c8 <_reclaim_reent+0x58>
 8017480:	68db      	ldr	r3, [r3, #12]
 8017482:	b163      	cbz	r3, 801749e <_reclaim_reent+0x2e>
 8017484:	2500      	movs	r5, #0
 8017486:	69e3      	ldr	r3, [r4, #28]
 8017488:	68db      	ldr	r3, [r3, #12]
 801748a:	5959      	ldr	r1, [r3, r5]
 801748c:	b9b1      	cbnz	r1, 80174bc <_reclaim_reent+0x4c>
 801748e:	3504      	adds	r5, #4
 8017490:	2d80      	cmp	r5, #128	@ 0x80
 8017492:	d1f8      	bne.n	8017486 <_reclaim_reent+0x16>
 8017494:	69e3      	ldr	r3, [r4, #28]
 8017496:	4620      	mov	r0, r4
 8017498:	68d9      	ldr	r1, [r3, #12]
 801749a:	f000 f8d1 	bl	8017640 <_free_r>
 801749e:	69e3      	ldr	r3, [r4, #28]
 80174a0:	6819      	ldr	r1, [r3, #0]
 80174a2:	b111      	cbz	r1, 80174aa <_reclaim_reent+0x3a>
 80174a4:	4620      	mov	r0, r4
 80174a6:	f000 f8cb 	bl	8017640 <_free_r>
 80174aa:	69e3      	ldr	r3, [r4, #28]
 80174ac:	689d      	ldr	r5, [r3, #8]
 80174ae:	b15d      	cbz	r5, 80174c8 <_reclaim_reent+0x58>
 80174b0:	4629      	mov	r1, r5
 80174b2:	4620      	mov	r0, r4
 80174b4:	682d      	ldr	r5, [r5, #0]
 80174b6:	f000 f8c3 	bl	8017640 <_free_r>
 80174ba:	e7f8      	b.n	80174ae <_reclaim_reent+0x3e>
 80174bc:	680e      	ldr	r6, [r1, #0]
 80174be:	4620      	mov	r0, r4
 80174c0:	f000 f8be 	bl	8017640 <_free_r>
 80174c4:	4631      	mov	r1, r6
 80174c6:	e7e1      	b.n	801748c <_reclaim_reent+0x1c>
 80174c8:	6961      	ldr	r1, [r4, #20]
 80174ca:	b111      	cbz	r1, 80174d2 <_reclaim_reent+0x62>
 80174cc:	4620      	mov	r0, r4
 80174ce:	f000 f8b7 	bl	8017640 <_free_r>
 80174d2:	69e1      	ldr	r1, [r4, #28]
 80174d4:	b111      	cbz	r1, 80174dc <_reclaim_reent+0x6c>
 80174d6:	4620      	mov	r0, r4
 80174d8:	f000 f8b2 	bl	8017640 <_free_r>
 80174dc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80174de:	b111      	cbz	r1, 80174e6 <_reclaim_reent+0x76>
 80174e0:	4620      	mov	r0, r4
 80174e2:	f000 f8ad 	bl	8017640 <_free_r>
 80174e6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80174e8:	b111      	cbz	r1, 80174f0 <_reclaim_reent+0x80>
 80174ea:	4620      	mov	r0, r4
 80174ec:	f000 f8a8 	bl	8017640 <_free_r>
 80174f0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80174f2:	b111      	cbz	r1, 80174fa <_reclaim_reent+0x8a>
 80174f4:	4620      	mov	r0, r4
 80174f6:	f000 f8a3 	bl	8017640 <_free_r>
 80174fa:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80174fc:	b111      	cbz	r1, 8017504 <_reclaim_reent+0x94>
 80174fe:	4620      	mov	r0, r4
 8017500:	f000 f89e 	bl	8017640 <_free_r>
 8017504:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8017506:	b111      	cbz	r1, 801750e <_reclaim_reent+0x9e>
 8017508:	4620      	mov	r0, r4
 801750a:	f000 f899 	bl	8017640 <_free_r>
 801750e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8017510:	b111      	cbz	r1, 8017518 <_reclaim_reent+0xa8>
 8017512:	4620      	mov	r0, r4
 8017514:	f000 f894 	bl	8017640 <_free_r>
 8017518:	6a23      	ldr	r3, [r4, #32]
 801751a:	b11b      	cbz	r3, 8017524 <_reclaim_reent+0xb4>
 801751c:	4620      	mov	r0, r4
 801751e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017522:	4718      	bx	r3
 8017524:	bd70      	pop	{r4, r5, r6, pc}
 8017526:	bf00      	nop
 8017528:	20000118 	.word	0x20000118

0801752c <_lseek_r>:
 801752c:	b538      	push	{r3, r4, r5, lr}
 801752e:	4d07      	ldr	r5, [pc, #28]	@ (801754c <_lseek_r+0x20>)
 8017530:	4604      	mov	r4, r0
 8017532:	4608      	mov	r0, r1
 8017534:	4611      	mov	r1, r2
 8017536:	2200      	movs	r2, #0
 8017538:	602a      	str	r2, [r5, #0]
 801753a:	461a      	mov	r2, r3
 801753c:	f7e9 fd75 	bl	800102a <_lseek>
 8017540:	1c43      	adds	r3, r0, #1
 8017542:	d102      	bne.n	801754a <_lseek_r+0x1e>
 8017544:	682b      	ldr	r3, [r5, #0]
 8017546:	b103      	cbz	r3, 801754a <_lseek_r+0x1e>
 8017548:	6023      	str	r3, [r4, #0]
 801754a:	bd38      	pop	{r3, r4, r5, pc}
 801754c:	2000e504 	.word	0x2000e504

08017550 <_read_r>:
 8017550:	b538      	push	{r3, r4, r5, lr}
 8017552:	4d07      	ldr	r5, [pc, #28]	@ (8017570 <_read_r+0x20>)
 8017554:	4604      	mov	r4, r0
 8017556:	4608      	mov	r0, r1
 8017558:	4611      	mov	r1, r2
 801755a:	2200      	movs	r2, #0
 801755c:	602a      	str	r2, [r5, #0]
 801755e:	461a      	mov	r2, r3
 8017560:	f7e9 fd03 	bl	8000f6a <_read>
 8017564:	1c43      	adds	r3, r0, #1
 8017566:	d102      	bne.n	801756e <_read_r+0x1e>
 8017568:	682b      	ldr	r3, [r5, #0]
 801756a:	b103      	cbz	r3, 801756e <_read_r+0x1e>
 801756c:	6023      	str	r3, [r4, #0]
 801756e:	bd38      	pop	{r3, r4, r5, pc}
 8017570:	2000e504 	.word	0x2000e504

08017574 <_write_r>:
 8017574:	b538      	push	{r3, r4, r5, lr}
 8017576:	4d07      	ldr	r5, [pc, #28]	@ (8017594 <_write_r+0x20>)
 8017578:	4604      	mov	r4, r0
 801757a:	4608      	mov	r0, r1
 801757c:	4611      	mov	r1, r2
 801757e:	2200      	movs	r2, #0
 8017580:	602a      	str	r2, [r5, #0]
 8017582:	461a      	mov	r2, r3
 8017584:	f7e9 fd0e 	bl	8000fa4 <_write>
 8017588:	1c43      	adds	r3, r0, #1
 801758a:	d102      	bne.n	8017592 <_write_r+0x1e>
 801758c:	682b      	ldr	r3, [r5, #0]
 801758e:	b103      	cbz	r3, 8017592 <_write_r+0x1e>
 8017590:	6023      	str	r3, [r4, #0]
 8017592:	bd38      	pop	{r3, r4, r5, pc}
 8017594:	2000e504 	.word	0x2000e504

08017598 <__libc_init_array>:
 8017598:	b570      	push	{r4, r5, r6, lr}
 801759a:	4d0d      	ldr	r5, [pc, #52]	@ (80175d0 <__libc_init_array+0x38>)
 801759c:	4c0d      	ldr	r4, [pc, #52]	@ (80175d4 <__libc_init_array+0x3c>)
 801759e:	1b64      	subs	r4, r4, r5
 80175a0:	10a4      	asrs	r4, r4, #2
 80175a2:	2600      	movs	r6, #0
 80175a4:	42a6      	cmp	r6, r4
 80175a6:	d109      	bne.n	80175bc <__libc_init_array+0x24>
 80175a8:	4d0b      	ldr	r5, [pc, #44]	@ (80175d8 <__libc_init_array+0x40>)
 80175aa:	4c0c      	ldr	r4, [pc, #48]	@ (80175dc <__libc_init_array+0x44>)
 80175ac:	f000 ffd6 	bl	801855c <_init>
 80175b0:	1b64      	subs	r4, r4, r5
 80175b2:	10a4      	asrs	r4, r4, #2
 80175b4:	2600      	movs	r6, #0
 80175b6:	42a6      	cmp	r6, r4
 80175b8:	d105      	bne.n	80175c6 <__libc_init_array+0x2e>
 80175ba:	bd70      	pop	{r4, r5, r6, pc}
 80175bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80175c0:	4798      	blx	r3
 80175c2:	3601      	adds	r6, #1
 80175c4:	e7ee      	b.n	80175a4 <__libc_init_array+0xc>
 80175c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80175ca:	4798      	blx	r3
 80175cc:	3601      	adds	r6, #1
 80175ce:	e7f2      	b.n	80175b6 <__libc_init_array+0x1e>
 80175d0:	0801b4d8 	.word	0x0801b4d8
 80175d4:	0801b4d8 	.word	0x0801b4d8
 80175d8:	0801b4d8 	.word	0x0801b4d8
 80175dc:	0801b4dc 	.word	0x0801b4dc

080175e0 <__retarget_lock_init_recursive>:
 80175e0:	4770      	bx	lr

080175e2 <__retarget_lock_acquire_recursive>:
 80175e2:	4770      	bx	lr

080175e4 <__retarget_lock_release_recursive>:
 80175e4:	4770      	bx	lr

080175e6 <memcpy>:
 80175e6:	440a      	add	r2, r1
 80175e8:	4291      	cmp	r1, r2
 80175ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80175ee:	d100      	bne.n	80175f2 <memcpy+0xc>
 80175f0:	4770      	bx	lr
 80175f2:	b510      	push	{r4, lr}
 80175f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80175f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80175fc:	4291      	cmp	r1, r2
 80175fe:	d1f9      	bne.n	80175f4 <memcpy+0xe>
 8017600:	bd10      	pop	{r4, pc}
	...

08017604 <__assert_func>:
 8017604:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017606:	4614      	mov	r4, r2
 8017608:	461a      	mov	r2, r3
 801760a:	4b09      	ldr	r3, [pc, #36]	@ (8017630 <__assert_func+0x2c>)
 801760c:	681b      	ldr	r3, [r3, #0]
 801760e:	4605      	mov	r5, r0
 8017610:	68d8      	ldr	r0, [r3, #12]
 8017612:	b14c      	cbz	r4, 8017628 <__assert_func+0x24>
 8017614:	4b07      	ldr	r3, [pc, #28]	@ (8017634 <__assert_func+0x30>)
 8017616:	9100      	str	r1, [sp, #0]
 8017618:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801761c:	4906      	ldr	r1, [pc, #24]	@ (8017638 <__assert_func+0x34>)
 801761e:	462b      	mov	r3, r5
 8017620:	f000 fde0 	bl	80181e4 <fiprintf>
 8017624:	f000 fe94 	bl	8018350 <abort>
 8017628:	4b04      	ldr	r3, [pc, #16]	@ (801763c <__assert_func+0x38>)
 801762a:	461c      	mov	r4, r3
 801762c:	e7f3      	b.n	8017616 <__assert_func+0x12>
 801762e:	bf00      	nop
 8017630:	20000118 	.word	0x20000118
 8017634:	0801b45f 	.word	0x0801b45f
 8017638:	0801b46c 	.word	0x0801b46c
 801763c:	0801b49a 	.word	0x0801b49a

08017640 <_free_r>:
 8017640:	b538      	push	{r3, r4, r5, lr}
 8017642:	4605      	mov	r5, r0
 8017644:	2900      	cmp	r1, #0
 8017646:	d041      	beq.n	80176cc <_free_r+0x8c>
 8017648:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801764c:	1f0c      	subs	r4, r1, #4
 801764e:	2b00      	cmp	r3, #0
 8017650:	bfb8      	it	lt
 8017652:	18e4      	addlt	r4, r4, r3
 8017654:	f000 f8e8 	bl	8017828 <__malloc_lock>
 8017658:	4a1d      	ldr	r2, [pc, #116]	@ (80176d0 <_free_r+0x90>)
 801765a:	6813      	ldr	r3, [r2, #0]
 801765c:	b933      	cbnz	r3, 801766c <_free_r+0x2c>
 801765e:	6063      	str	r3, [r4, #4]
 8017660:	6014      	str	r4, [r2, #0]
 8017662:	4628      	mov	r0, r5
 8017664:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017668:	f000 b8e4 	b.w	8017834 <__malloc_unlock>
 801766c:	42a3      	cmp	r3, r4
 801766e:	d908      	bls.n	8017682 <_free_r+0x42>
 8017670:	6820      	ldr	r0, [r4, #0]
 8017672:	1821      	adds	r1, r4, r0
 8017674:	428b      	cmp	r3, r1
 8017676:	bf01      	itttt	eq
 8017678:	6819      	ldreq	r1, [r3, #0]
 801767a:	685b      	ldreq	r3, [r3, #4]
 801767c:	1809      	addeq	r1, r1, r0
 801767e:	6021      	streq	r1, [r4, #0]
 8017680:	e7ed      	b.n	801765e <_free_r+0x1e>
 8017682:	461a      	mov	r2, r3
 8017684:	685b      	ldr	r3, [r3, #4]
 8017686:	b10b      	cbz	r3, 801768c <_free_r+0x4c>
 8017688:	42a3      	cmp	r3, r4
 801768a:	d9fa      	bls.n	8017682 <_free_r+0x42>
 801768c:	6811      	ldr	r1, [r2, #0]
 801768e:	1850      	adds	r0, r2, r1
 8017690:	42a0      	cmp	r0, r4
 8017692:	d10b      	bne.n	80176ac <_free_r+0x6c>
 8017694:	6820      	ldr	r0, [r4, #0]
 8017696:	4401      	add	r1, r0
 8017698:	1850      	adds	r0, r2, r1
 801769a:	4283      	cmp	r3, r0
 801769c:	6011      	str	r1, [r2, #0]
 801769e:	d1e0      	bne.n	8017662 <_free_r+0x22>
 80176a0:	6818      	ldr	r0, [r3, #0]
 80176a2:	685b      	ldr	r3, [r3, #4]
 80176a4:	6053      	str	r3, [r2, #4]
 80176a6:	4408      	add	r0, r1
 80176a8:	6010      	str	r0, [r2, #0]
 80176aa:	e7da      	b.n	8017662 <_free_r+0x22>
 80176ac:	d902      	bls.n	80176b4 <_free_r+0x74>
 80176ae:	230c      	movs	r3, #12
 80176b0:	602b      	str	r3, [r5, #0]
 80176b2:	e7d6      	b.n	8017662 <_free_r+0x22>
 80176b4:	6820      	ldr	r0, [r4, #0]
 80176b6:	1821      	adds	r1, r4, r0
 80176b8:	428b      	cmp	r3, r1
 80176ba:	bf04      	itt	eq
 80176bc:	6819      	ldreq	r1, [r3, #0]
 80176be:	685b      	ldreq	r3, [r3, #4]
 80176c0:	6063      	str	r3, [r4, #4]
 80176c2:	bf04      	itt	eq
 80176c4:	1809      	addeq	r1, r1, r0
 80176c6:	6021      	streq	r1, [r4, #0]
 80176c8:	6054      	str	r4, [r2, #4]
 80176ca:	e7ca      	b.n	8017662 <_free_r+0x22>
 80176cc:	bd38      	pop	{r3, r4, r5, pc}
 80176ce:	bf00      	nop
 80176d0:	2000e510 	.word	0x2000e510

080176d4 <malloc>:
 80176d4:	4b02      	ldr	r3, [pc, #8]	@ (80176e0 <malloc+0xc>)
 80176d6:	4601      	mov	r1, r0
 80176d8:	6818      	ldr	r0, [r3, #0]
 80176da:	f000 b825 	b.w	8017728 <_malloc_r>
 80176de:	bf00      	nop
 80176e0:	20000118 	.word	0x20000118

080176e4 <sbrk_aligned>:
 80176e4:	b570      	push	{r4, r5, r6, lr}
 80176e6:	4e0f      	ldr	r6, [pc, #60]	@ (8017724 <sbrk_aligned+0x40>)
 80176e8:	460c      	mov	r4, r1
 80176ea:	6831      	ldr	r1, [r6, #0]
 80176ec:	4605      	mov	r5, r0
 80176ee:	b911      	cbnz	r1, 80176f6 <sbrk_aligned+0x12>
 80176f0:	f000 fe1e 	bl	8018330 <_sbrk_r>
 80176f4:	6030      	str	r0, [r6, #0]
 80176f6:	4621      	mov	r1, r4
 80176f8:	4628      	mov	r0, r5
 80176fa:	f000 fe19 	bl	8018330 <_sbrk_r>
 80176fe:	1c43      	adds	r3, r0, #1
 8017700:	d103      	bne.n	801770a <sbrk_aligned+0x26>
 8017702:	f04f 34ff 	mov.w	r4, #4294967295
 8017706:	4620      	mov	r0, r4
 8017708:	bd70      	pop	{r4, r5, r6, pc}
 801770a:	1cc4      	adds	r4, r0, #3
 801770c:	f024 0403 	bic.w	r4, r4, #3
 8017710:	42a0      	cmp	r0, r4
 8017712:	d0f8      	beq.n	8017706 <sbrk_aligned+0x22>
 8017714:	1a21      	subs	r1, r4, r0
 8017716:	4628      	mov	r0, r5
 8017718:	f000 fe0a 	bl	8018330 <_sbrk_r>
 801771c:	3001      	adds	r0, #1
 801771e:	d1f2      	bne.n	8017706 <sbrk_aligned+0x22>
 8017720:	e7ef      	b.n	8017702 <sbrk_aligned+0x1e>
 8017722:	bf00      	nop
 8017724:	2000e50c 	.word	0x2000e50c

08017728 <_malloc_r>:
 8017728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801772c:	1ccd      	adds	r5, r1, #3
 801772e:	f025 0503 	bic.w	r5, r5, #3
 8017732:	3508      	adds	r5, #8
 8017734:	2d0c      	cmp	r5, #12
 8017736:	bf38      	it	cc
 8017738:	250c      	movcc	r5, #12
 801773a:	2d00      	cmp	r5, #0
 801773c:	4606      	mov	r6, r0
 801773e:	db01      	blt.n	8017744 <_malloc_r+0x1c>
 8017740:	42a9      	cmp	r1, r5
 8017742:	d904      	bls.n	801774e <_malloc_r+0x26>
 8017744:	230c      	movs	r3, #12
 8017746:	6033      	str	r3, [r6, #0]
 8017748:	2000      	movs	r0, #0
 801774a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801774e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8017824 <_malloc_r+0xfc>
 8017752:	f000 f869 	bl	8017828 <__malloc_lock>
 8017756:	f8d8 3000 	ldr.w	r3, [r8]
 801775a:	461c      	mov	r4, r3
 801775c:	bb44      	cbnz	r4, 80177b0 <_malloc_r+0x88>
 801775e:	4629      	mov	r1, r5
 8017760:	4630      	mov	r0, r6
 8017762:	f7ff ffbf 	bl	80176e4 <sbrk_aligned>
 8017766:	1c43      	adds	r3, r0, #1
 8017768:	4604      	mov	r4, r0
 801776a:	d158      	bne.n	801781e <_malloc_r+0xf6>
 801776c:	f8d8 4000 	ldr.w	r4, [r8]
 8017770:	4627      	mov	r7, r4
 8017772:	2f00      	cmp	r7, #0
 8017774:	d143      	bne.n	80177fe <_malloc_r+0xd6>
 8017776:	2c00      	cmp	r4, #0
 8017778:	d04b      	beq.n	8017812 <_malloc_r+0xea>
 801777a:	6823      	ldr	r3, [r4, #0]
 801777c:	4639      	mov	r1, r7
 801777e:	4630      	mov	r0, r6
 8017780:	eb04 0903 	add.w	r9, r4, r3
 8017784:	f000 fdd4 	bl	8018330 <_sbrk_r>
 8017788:	4581      	cmp	r9, r0
 801778a:	d142      	bne.n	8017812 <_malloc_r+0xea>
 801778c:	6821      	ldr	r1, [r4, #0]
 801778e:	1a6d      	subs	r5, r5, r1
 8017790:	4629      	mov	r1, r5
 8017792:	4630      	mov	r0, r6
 8017794:	f7ff ffa6 	bl	80176e4 <sbrk_aligned>
 8017798:	3001      	adds	r0, #1
 801779a:	d03a      	beq.n	8017812 <_malloc_r+0xea>
 801779c:	6823      	ldr	r3, [r4, #0]
 801779e:	442b      	add	r3, r5
 80177a0:	6023      	str	r3, [r4, #0]
 80177a2:	f8d8 3000 	ldr.w	r3, [r8]
 80177a6:	685a      	ldr	r2, [r3, #4]
 80177a8:	bb62      	cbnz	r2, 8017804 <_malloc_r+0xdc>
 80177aa:	f8c8 7000 	str.w	r7, [r8]
 80177ae:	e00f      	b.n	80177d0 <_malloc_r+0xa8>
 80177b0:	6822      	ldr	r2, [r4, #0]
 80177b2:	1b52      	subs	r2, r2, r5
 80177b4:	d420      	bmi.n	80177f8 <_malloc_r+0xd0>
 80177b6:	2a0b      	cmp	r2, #11
 80177b8:	d917      	bls.n	80177ea <_malloc_r+0xc2>
 80177ba:	1961      	adds	r1, r4, r5
 80177bc:	42a3      	cmp	r3, r4
 80177be:	6025      	str	r5, [r4, #0]
 80177c0:	bf18      	it	ne
 80177c2:	6059      	strne	r1, [r3, #4]
 80177c4:	6863      	ldr	r3, [r4, #4]
 80177c6:	bf08      	it	eq
 80177c8:	f8c8 1000 	streq.w	r1, [r8]
 80177cc:	5162      	str	r2, [r4, r5]
 80177ce:	604b      	str	r3, [r1, #4]
 80177d0:	4630      	mov	r0, r6
 80177d2:	f000 f82f 	bl	8017834 <__malloc_unlock>
 80177d6:	f104 000b 	add.w	r0, r4, #11
 80177da:	1d23      	adds	r3, r4, #4
 80177dc:	f020 0007 	bic.w	r0, r0, #7
 80177e0:	1ac2      	subs	r2, r0, r3
 80177e2:	bf1c      	itt	ne
 80177e4:	1a1b      	subne	r3, r3, r0
 80177e6:	50a3      	strne	r3, [r4, r2]
 80177e8:	e7af      	b.n	801774a <_malloc_r+0x22>
 80177ea:	6862      	ldr	r2, [r4, #4]
 80177ec:	42a3      	cmp	r3, r4
 80177ee:	bf0c      	ite	eq
 80177f0:	f8c8 2000 	streq.w	r2, [r8]
 80177f4:	605a      	strne	r2, [r3, #4]
 80177f6:	e7eb      	b.n	80177d0 <_malloc_r+0xa8>
 80177f8:	4623      	mov	r3, r4
 80177fa:	6864      	ldr	r4, [r4, #4]
 80177fc:	e7ae      	b.n	801775c <_malloc_r+0x34>
 80177fe:	463c      	mov	r4, r7
 8017800:	687f      	ldr	r7, [r7, #4]
 8017802:	e7b6      	b.n	8017772 <_malloc_r+0x4a>
 8017804:	461a      	mov	r2, r3
 8017806:	685b      	ldr	r3, [r3, #4]
 8017808:	42a3      	cmp	r3, r4
 801780a:	d1fb      	bne.n	8017804 <_malloc_r+0xdc>
 801780c:	2300      	movs	r3, #0
 801780e:	6053      	str	r3, [r2, #4]
 8017810:	e7de      	b.n	80177d0 <_malloc_r+0xa8>
 8017812:	230c      	movs	r3, #12
 8017814:	6033      	str	r3, [r6, #0]
 8017816:	4630      	mov	r0, r6
 8017818:	f000 f80c 	bl	8017834 <__malloc_unlock>
 801781c:	e794      	b.n	8017748 <_malloc_r+0x20>
 801781e:	6005      	str	r5, [r0, #0]
 8017820:	e7d6      	b.n	80177d0 <_malloc_r+0xa8>
 8017822:	bf00      	nop
 8017824:	2000e510 	.word	0x2000e510

08017828 <__malloc_lock>:
 8017828:	4801      	ldr	r0, [pc, #4]	@ (8017830 <__malloc_lock+0x8>)
 801782a:	f7ff beda 	b.w	80175e2 <__retarget_lock_acquire_recursive>
 801782e:	bf00      	nop
 8017830:	2000e508 	.word	0x2000e508

08017834 <__malloc_unlock>:
 8017834:	4801      	ldr	r0, [pc, #4]	@ (801783c <__malloc_unlock+0x8>)
 8017836:	f7ff bed5 	b.w	80175e4 <__retarget_lock_release_recursive>
 801783a:	bf00      	nop
 801783c:	2000e508 	.word	0x2000e508

08017840 <__ssputs_r>:
 8017840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017844:	688e      	ldr	r6, [r1, #8]
 8017846:	461f      	mov	r7, r3
 8017848:	42be      	cmp	r6, r7
 801784a:	680b      	ldr	r3, [r1, #0]
 801784c:	4682      	mov	sl, r0
 801784e:	460c      	mov	r4, r1
 8017850:	4690      	mov	r8, r2
 8017852:	d82d      	bhi.n	80178b0 <__ssputs_r+0x70>
 8017854:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017858:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801785c:	d026      	beq.n	80178ac <__ssputs_r+0x6c>
 801785e:	6965      	ldr	r5, [r4, #20]
 8017860:	6909      	ldr	r1, [r1, #16]
 8017862:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017866:	eba3 0901 	sub.w	r9, r3, r1
 801786a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801786e:	1c7b      	adds	r3, r7, #1
 8017870:	444b      	add	r3, r9
 8017872:	106d      	asrs	r5, r5, #1
 8017874:	429d      	cmp	r5, r3
 8017876:	bf38      	it	cc
 8017878:	461d      	movcc	r5, r3
 801787a:	0553      	lsls	r3, r2, #21
 801787c:	d527      	bpl.n	80178ce <__ssputs_r+0x8e>
 801787e:	4629      	mov	r1, r5
 8017880:	f7ff ff52 	bl	8017728 <_malloc_r>
 8017884:	4606      	mov	r6, r0
 8017886:	b360      	cbz	r0, 80178e2 <__ssputs_r+0xa2>
 8017888:	6921      	ldr	r1, [r4, #16]
 801788a:	464a      	mov	r2, r9
 801788c:	f7ff feab 	bl	80175e6 <memcpy>
 8017890:	89a3      	ldrh	r3, [r4, #12]
 8017892:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8017896:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801789a:	81a3      	strh	r3, [r4, #12]
 801789c:	6126      	str	r6, [r4, #16]
 801789e:	6165      	str	r5, [r4, #20]
 80178a0:	444e      	add	r6, r9
 80178a2:	eba5 0509 	sub.w	r5, r5, r9
 80178a6:	6026      	str	r6, [r4, #0]
 80178a8:	60a5      	str	r5, [r4, #8]
 80178aa:	463e      	mov	r6, r7
 80178ac:	42be      	cmp	r6, r7
 80178ae:	d900      	bls.n	80178b2 <__ssputs_r+0x72>
 80178b0:	463e      	mov	r6, r7
 80178b2:	6820      	ldr	r0, [r4, #0]
 80178b4:	4632      	mov	r2, r6
 80178b6:	4641      	mov	r1, r8
 80178b8:	f7ff fda7 	bl	801740a <memmove>
 80178bc:	68a3      	ldr	r3, [r4, #8]
 80178be:	1b9b      	subs	r3, r3, r6
 80178c0:	60a3      	str	r3, [r4, #8]
 80178c2:	6823      	ldr	r3, [r4, #0]
 80178c4:	4433      	add	r3, r6
 80178c6:	6023      	str	r3, [r4, #0]
 80178c8:	2000      	movs	r0, #0
 80178ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80178ce:	462a      	mov	r2, r5
 80178d0:	f000 fd45 	bl	801835e <_realloc_r>
 80178d4:	4606      	mov	r6, r0
 80178d6:	2800      	cmp	r0, #0
 80178d8:	d1e0      	bne.n	801789c <__ssputs_r+0x5c>
 80178da:	6921      	ldr	r1, [r4, #16]
 80178dc:	4650      	mov	r0, sl
 80178de:	f7ff feaf 	bl	8017640 <_free_r>
 80178e2:	230c      	movs	r3, #12
 80178e4:	f8ca 3000 	str.w	r3, [sl]
 80178e8:	89a3      	ldrh	r3, [r4, #12]
 80178ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80178ee:	81a3      	strh	r3, [r4, #12]
 80178f0:	f04f 30ff 	mov.w	r0, #4294967295
 80178f4:	e7e9      	b.n	80178ca <__ssputs_r+0x8a>
	...

080178f8 <_svfiprintf_r>:
 80178f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80178fc:	4698      	mov	r8, r3
 80178fe:	898b      	ldrh	r3, [r1, #12]
 8017900:	061b      	lsls	r3, r3, #24
 8017902:	b09d      	sub	sp, #116	@ 0x74
 8017904:	4607      	mov	r7, r0
 8017906:	460d      	mov	r5, r1
 8017908:	4614      	mov	r4, r2
 801790a:	d510      	bpl.n	801792e <_svfiprintf_r+0x36>
 801790c:	690b      	ldr	r3, [r1, #16]
 801790e:	b973      	cbnz	r3, 801792e <_svfiprintf_r+0x36>
 8017910:	2140      	movs	r1, #64	@ 0x40
 8017912:	f7ff ff09 	bl	8017728 <_malloc_r>
 8017916:	6028      	str	r0, [r5, #0]
 8017918:	6128      	str	r0, [r5, #16]
 801791a:	b930      	cbnz	r0, 801792a <_svfiprintf_r+0x32>
 801791c:	230c      	movs	r3, #12
 801791e:	603b      	str	r3, [r7, #0]
 8017920:	f04f 30ff 	mov.w	r0, #4294967295
 8017924:	b01d      	add	sp, #116	@ 0x74
 8017926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801792a:	2340      	movs	r3, #64	@ 0x40
 801792c:	616b      	str	r3, [r5, #20]
 801792e:	2300      	movs	r3, #0
 8017930:	9309      	str	r3, [sp, #36]	@ 0x24
 8017932:	2320      	movs	r3, #32
 8017934:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017938:	f8cd 800c 	str.w	r8, [sp, #12]
 801793c:	2330      	movs	r3, #48	@ 0x30
 801793e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8017adc <_svfiprintf_r+0x1e4>
 8017942:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017946:	f04f 0901 	mov.w	r9, #1
 801794a:	4623      	mov	r3, r4
 801794c:	469a      	mov	sl, r3
 801794e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017952:	b10a      	cbz	r2, 8017958 <_svfiprintf_r+0x60>
 8017954:	2a25      	cmp	r2, #37	@ 0x25
 8017956:	d1f9      	bne.n	801794c <_svfiprintf_r+0x54>
 8017958:	ebba 0b04 	subs.w	fp, sl, r4
 801795c:	d00b      	beq.n	8017976 <_svfiprintf_r+0x7e>
 801795e:	465b      	mov	r3, fp
 8017960:	4622      	mov	r2, r4
 8017962:	4629      	mov	r1, r5
 8017964:	4638      	mov	r0, r7
 8017966:	f7ff ff6b 	bl	8017840 <__ssputs_r>
 801796a:	3001      	adds	r0, #1
 801796c:	f000 80a7 	beq.w	8017abe <_svfiprintf_r+0x1c6>
 8017970:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017972:	445a      	add	r2, fp
 8017974:	9209      	str	r2, [sp, #36]	@ 0x24
 8017976:	f89a 3000 	ldrb.w	r3, [sl]
 801797a:	2b00      	cmp	r3, #0
 801797c:	f000 809f 	beq.w	8017abe <_svfiprintf_r+0x1c6>
 8017980:	2300      	movs	r3, #0
 8017982:	f04f 32ff 	mov.w	r2, #4294967295
 8017986:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801798a:	f10a 0a01 	add.w	sl, sl, #1
 801798e:	9304      	str	r3, [sp, #16]
 8017990:	9307      	str	r3, [sp, #28]
 8017992:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017996:	931a      	str	r3, [sp, #104]	@ 0x68
 8017998:	4654      	mov	r4, sl
 801799a:	2205      	movs	r2, #5
 801799c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80179a0:	484e      	ldr	r0, [pc, #312]	@ (8017adc <_svfiprintf_r+0x1e4>)
 80179a2:	f7e8 fc1d 	bl	80001e0 <memchr>
 80179a6:	9a04      	ldr	r2, [sp, #16]
 80179a8:	b9d8      	cbnz	r0, 80179e2 <_svfiprintf_r+0xea>
 80179aa:	06d0      	lsls	r0, r2, #27
 80179ac:	bf44      	itt	mi
 80179ae:	2320      	movmi	r3, #32
 80179b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80179b4:	0711      	lsls	r1, r2, #28
 80179b6:	bf44      	itt	mi
 80179b8:	232b      	movmi	r3, #43	@ 0x2b
 80179ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80179be:	f89a 3000 	ldrb.w	r3, [sl]
 80179c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80179c4:	d015      	beq.n	80179f2 <_svfiprintf_r+0xfa>
 80179c6:	9a07      	ldr	r2, [sp, #28]
 80179c8:	4654      	mov	r4, sl
 80179ca:	2000      	movs	r0, #0
 80179cc:	f04f 0c0a 	mov.w	ip, #10
 80179d0:	4621      	mov	r1, r4
 80179d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80179d6:	3b30      	subs	r3, #48	@ 0x30
 80179d8:	2b09      	cmp	r3, #9
 80179da:	d94b      	bls.n	8017a74 <_svfiprintf_r+0x17c>
 80179dc:	b1b0      	cbz	r0, 8017a0c <_svfiprintf_r+0x114>
 80179de:	9207      	str	r2, [sp, #28]
 80179e0:	e014      	b.n	8017a0c <_svfiprintf_r+0x114>
 80179e2:	eba0 0308 	sub.w	r3, r0, r8
 80179e6:	fa09 f303 	lsl.w	r3, r9, r3
 80179ea:	4313      	orrs	r3, r2
 80179ec:	9304      	str	r3, [sp, #16]
 80179ee:	46a2      	mov	sl, r4
 80179f0:	e7d2      	b.n	8017998 <_svfiprintf_r+0xa0>
 80179f2:	9b03      	ldr	r3, [sp, #12]
 80179f4:	1d19      	adds	r1, r3, #4
 80179f6:	681b      	ldr	r3, [r3, #0]
 80179f8:	9103      	str	r1, [sp, #12]
 80179fa:	2b00      	cmp	r3, #0
 80179fc:	bfbb      	ittet	lt
 80179fe:	425b      	neglt	r3, r3
 8017a00:	f042 0202 	orrlt.w	r2, r2, #2
 8017a04:	9307      	strge	r3, [sp, #28]
 8017a06:	9307      	strlt	r3, [sp, #28]
 8017a08:	bfb8      	it	lt
 8017a0a:	9204      	strlt	r2, [sp, #16]
 8017a0c:	7823      	ldrb	r3, [r4, #0]
 8017a0e:	2b2e      	cmp	r3, #46	@ 0x2e
 8017a10:	d10a      	bne.n	8017a28 <_svfiprintf_r+0x130>
 8017a12:	7863      	ldrb	r3, [r4, #1]
 8017a14:	2b2a      	cmp	r3, #42	@ 0x2a
 8017a16:	d132      	bne.n	8017a7e <_svfiprintf_r+0x186>
 8017a18:	9b03      	ldr	r3, [sp, #12]
 8017a1a:	1d1a      	adds	r2, r3, #4
 8017a1c:	681b      	ldr	r3, [r3, #0]
 8017a1e:	9203      	str	r2, [sp, #12]
 8017a20:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017a24:	3402      	adds	r4, #2
 8017a26:	9305      	str	r3, [sp, #20]
 8017a28:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8017aec <_svfiprintf_r+0x1f4>
 8017a2c:	7821      	ldrb	r1, [r4, #0]
 8017a2e:	2203      	movs	r2, #3
 8017a30:	4650      	mov	r0, sl
 8017a32:	f7e8 fbd5 	bl	80001e0 <memchr>
 8017a36:	b138      	cbz	r0, 8017a48 <_svfiprintf_r+0x150>
 8017a38:	9b04      	ldr	r3, [sp, #16]
 8017a3a:	eba0 000a 	sub.w	r0, r0, sl
 8017a3e:	2240      	movs	r2, #64	@ 0x40
 8017a40:	4082      	lsls	r2, r0
 8017a42:	4313      	orrs	r3, r2
 8017a44:	3401      	adds	r4, #1
 8017a46:	9304      	str	r3, [sp, #16]
 8017a48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017a4c:	4824      	ldr	r0, [pc, #144]	@ (8017ae0 <_svfiprintf_r+0x1e8>)
 8017a4e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017a52:	2206      	movs	r2, #6
 8017a54:	f7e8 fbc4 	bl	80001e0 <memchr>
 8017a58:	2800      	cmp	r0, #0
 8017a5a:	d036      	beq.n	8017aca <_svfiprintf_r+0x1d2>
 8017a5c:	4b21      	ldr	r3, [pc, #132]	@ (8017ae4 <_svfiprintf_r+0x1ec>)
 8017a5e:	bb1b      	cbnz	r3, 8017aa8 <_svfiprintf_r+0x1b0>
 8017a60:	9b03      	ldr	r3, [sp, #12]
 8017a62:	3307      	adds	r3, #7
 8017a64:	f023 0307 	bic.w	r3, r3, #7
 8017a68:	3308      	adds	r3, #8
 8017a6a:	9303      	str	r3, [sp, #12]
 8017a6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017a6e:	4433      	add	r3, r6
 8017a70:	9309      	str	r3, [sp, #36]	@ 0x24
 8017a72:	e76a      	b.n	801794a <_svfiprintf_r+0x52>
 8017a74:	fb0c 3202 	mla	r2, ip, r2, r3
 8017a78:	460c      	mov	r4, r1
 8017a7a:	2001      	movs	r0, #1
 8017a7c:	e7a8      	b.n	80179d0 <_svfiprintf_r+0xd8>
 8017a7e:	2300      	movs	r3, #0
 8017a80:	3401      	adds	r4, #1
 8017a82:	9305      	str	r3, [sp, #20]
 8017a84:	4619      	mov	r1, r3
 8017a86:	f04f 0c0a 	mov.w	ip, #10
 8017a8a:	4620      	mov	r0, r4
 8017a8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017a90:	3a30      	subs	r2, #48	@ 0x30
 8017a92:	2a09      	cmp	r2, #9
 8017a94:	d903      	bls.n	8017a9e <_svfiprintf_r+0x1a6>
 8017a96:	2b00      	cmp	r3, #0
 8017a98:	d0c6      	beq.n	8017a28 <_svfiprintf_r+0x130>
 8017a9a:	9105      	str	r1, [sp, #20]
 8017a9c:	e7c4      	b.n	8017a28 <_svfiprintf_r+0x130>
 8017a9e:	fb0c 2101 	mla	r1, ip, r1, r2
 8017aa2:	4604      	mov	r4, r0
 8017aa4:	2301      	movs	r3, #1
 8017aa6:	e7f0      	b.n	8017a8a <_svfiprintf_r+0x192>
 8017aa8:	ab03      	add	r3, sp, #12
 8017aaa:	9300      	str	r3, [sp, #0]
 8017aac:	462a      	mov	r2, r5
 8017aae:	4b0e      	ldr	r3, [pc, #56]	@ (8017ae8 <_svfiprintf_r+0x1f0>)
 8017ab0:	a904      	add	r1, sp, #16
 8017ab2:	4638      	mov	r0, r7
 8017ab4:	f3af 8000 	nop.w
 8017ab8:	1c42      	adds	r2, r0, #1
 8017aba:	4606      	mov	r6, r0
 8017abc:	d1d6      	bne.n	8017a6c <_svfiprintf_r+0x174>
 8017abe:	89ab      	ldrh	r3, [r5, #12]
 8017ac0:	065b      	lsls	r3, r3, #25
 8017ac2:	f53f af2d 	bmi.w	8017920 <_svfiprintf_r+0x28>
 8017ac6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017ac8:	e72c      	b.n	8017924 <_svfiprintf_r+0x2c>
 8017aca:	ab03      	add	r3, sp, #12
 8017acc:	9300      	str	r3, [sp, #0]
 8017ace:	462a      	mov	r2, r5
 8017ad0:	4b05      	ldr	r3, [pc, #20]	@ (8017ae8 <_svfiprintf_r+0x1f0>)
 8017ad2:	a904      	add	r1, sp, #16
 8017ad4:	4638      	mov	r0, r7
 8017ad6:	f000 f9bb 	bl	8017e50 <_printf_i>
 8017ada:	e7ed      	b.n	8017ab8 <_svfiprintf_r+0x1c0>
 8017adc:	0801b49b 	.word	0x0801b49b
 8017ae0:	0801b4a5 	.word	0x0801b4a5
 8017ae4:	00000000 	.word	0x00000000
 8017ae8:	08017841 	.word	0x08017841
 8017aec:	0801b4a1 	.word	0x0801b4a1

08017af0 <__sfputc_r>:
 8017af0:	6893      	ldr	r3, [r2, #8]
 8017af2:	3b01      	subs	r3, #1
 8017af4:	2b00      	cmp	r3, #0
 8017af6:	b410      	push	{r4}
 8017af8:	6093      	str	r3, [r2, #8]
 8017afa:	da08      	bge.n	8017b0e <__sfputc_r+0x1e>
 8017afc:	6994      	ldr	r4, [r2, #24]
 8017afe:	42a3      	cmp	r3, r4
 8017b00:	db01      	blt.n	8017b06 <__sfputc_r+0x16>
 8017b02:	290a      	cmp	r1, #10
 8017b04:	d103      	bne.n	8017b0e <__sfputc_r+0x1e>
 8017b06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017b0a:	f000 bb7d 	b.w	8018208 <__swbuf_r>
 8017b0e:	6813      	ldr	r3, [r2, #0]
 8017b10:	1c58      	adds	r0, r3, #1
 8017b12:	6010      	str	r0, [r2, #0]
 8017b14:	7019      	strb	r1, [r3, #0]
 8017b16:	4608      	mov	r0, r1
 8017b18:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017b1c:	4770      	bx	lr

08017b1e <__sfputs_r>:
 8017b1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017b20:	4606      	mov	r6, r0
 8017b22:	460f      	mov	r7, r1
 8017b24:	4614      	mov	r4, r2
 8017b26:	18d5      	adds	r5, r2, r3
 8017b28:	42ac      	cmp	r4, r5
 8017b2a:	d101      	bne.n	8017b30 <__sfputs_r+0x12>
 8017b2c:	2000      	movs	r0, #0
 8017b2e:	e007      	b.n	8017b40 <__sfputs_r+0x22>
 8017b30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017b34:	463a      	mov	r2, r7
 8017b36:	4630      	mov	r0, r6
 8017b38:	f7ff ffda 	bl	8017af0 <__sfputc_r>
 8017b3c:	1c43      	adds	r3, r0, #1
 8017b3e:	d1f3      	bne.n	8017b28 <__sfputs_r+0xa>
 8017b40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017b44 <_vfiprintf_r>:
 8017b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b48:	460d      	mov	r5, r1
 8017b4a:	b09d      	sub	sp, #116	@ 0x74
 8017b4c:	4614      	mov	r4, r2
 8017b4e:	4698      	mov	r8, r3
 8017b50:	4606      	mov	r6, r0
 8017b52:	b118      	cbz	r0, 8017b5c <_vfiprintf_r+0x18>
 8017b54:	6a03      	ldr	r3, [r0, #32]
 8017b56:	b90b      	cbnz	r3, 8017b5c <_vfiprintf_r+0x18>
 8017b58:	f7ff fb86 	bl	8017268 <__sinit>
 8017b5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017b5e:	07d9      	lsls	r1, r3, #31
 8017b60:	d405      	bmi.n	8017b6e <_vfiprintf_r+0x2a>
 8017b62:	89ab      	ldrh	r3, [r5, #12]
 8017b64:	059a      	lsls	r2, r3, #22
 8017b66:	d402      	bmi.n	8017b6e <_vfiprintf_r+0x2a>
 8017b68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017b6a:	f7ff fd3a 	bl	80175e2 <__retarget_lock_acquire_recursive>
 8017b6e:	89ab      	ldrh	r3, [r5, #12]
 8017b70:	071b      	lsls	r3, r3, #28
 8017b72:	d501      	bpl.n	8017b78 <_vfiprintf_r+0x34>
 8017b74:	692b      	ldr	r3, [r5, #16]
 8017b76:	b99b      	cbnz	r3, 8017ba0 <_vfiprintf_r+0x5c>
 8017b78:	4629      	mov	r1, r5
 8017b7a:	4630      	mov	r0, r6
 8017b7c:	f000 fb82 	bl	8018284 <__swsetup_r>
 8017b80:	b170      	cbz	r0, 8017ba0 <_vfiprintf_r+0x5c>
 8017b82:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017b84:	07dc      	lsls	r4, r3, #31
 8017b86:	d504      	bpl.n	8017b92 <_vfiprintf_r+0x4e>
 8017b88:	f04f 30ff 	mov.w	r0, #4294967295
 8017b8c:	b01d      	add	sp, #116	@ 0x74
 8017b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b92:	89ab      	ldrh	r3, [r5, #12]
 8017b94:	0598      	lsls	r0, r3, #22
 8017b96:	d4f7      	bmi.n	8017b88 <_vfiprintf_r+0x44>
 8017b98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017b9a:	f7ff fd23 	bl	80175e4 <__retarget_lock_release_recursive>
 8017b9e:	e7f3      	b.n	8017b88 <_vfiprintf_r+0x44>
 8017ba0:	2300      	movs	r3, #0
 8017ba2:	9309      	str	r3, [sp, #36]	@ 0x24
 8017ba4:	2320      	movs	r3, #32
 8017ba6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017baa:	f8cd 800c 	str.w	r8, [sp, #12]
 8017bae:	2330      	movs	r3, #48	@ 0x30
 8017bb0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8017d60 <_vfiprintf_r+0x21c>
 8017bb4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017bb8:	f04f 0901 	mov.w	r9, #1
 8017bbc:	4623      	mov	r3, r4
 8017bbe:	469a      	mov	sl, r3
 8017bc0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017bc4:	b10a      	cbz	r2, 8017bca <_vfiprintf_r+0x86>
 8017bc6:	2a25      	cmp	r2, #37	@ 0x25
 8017bc8:	d1f9      	bne.n	8017bbe <_vfiprintf_r+0x7a>
 8017bca:	ebba 0b04 	subs.w	fp, sl, r4
 8017bce:	d00b      	beq.n	8017be8 <_vfiprintf_r+0xa4>
 8017bd0:	465b      	mov	r3, fp
 8017bd2:	4622      	mov	r2, r4
 8017bd4:	4629      	mov	r1, r5
 8017bd6:	4630      	mov	r0, r6
 8017bd8:	f7ff ffa1 	bl	8017b1e <__sfputs_r>
 8017bdc:	3001      	adds	r0, #1
 8017bde:	f000 80a7 	beq.w	8017d30 <_vfiprintf_r+0x1ec>
 8017be2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017be4:	445a      	add	r2, fp
 8017be6:	9209      	str	r2, [sp, #36]	@ 0x24
 8017be8:	f89a 3000 	ldrb.w	r3, [sl]
 8017bec:	2b00      	cmp	r3, #0
 8017bee:	f000 809f 	beq.w	8017d30 <_vfiprintf_r+0x1ec>
 8017bf2:	2300      	movs	r3, #0
 8017bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8017bf8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017bfc:	f10a 0a01 	add.w	sl, sl, #1
 8017c00:	9304      	str	r3, [sp, #16]
 8017c02:	9307      	str	r3, [sp, #28]
 8017c04:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017c08:	931a      	str	r3, [sp, #104]	@ 0x68
 8017c0a:	4654      	mov	r4, sl
 8017c0c:	2205      	movs	r2, #5
 8017c0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017c12:	4853      	ldr	r0, [pc, #332]	@ (8017d60 <_vfiprintf_r+0x21c>)
 8017c14:	f7e8 fae4 	bl	80001e0 <memchr>
 8017c18:	9a04      	ldr	r2, [sp, #16]
 8017c1a:	b9d8      	cbnz	r0, 8017c54 <_vfiprintf_r+0x110>
 8017c1c:	06d1      	lsls	r1, r2, #27
 8017c1e:	bf44      	itt	mi
 8017c20:	2320      	movmi	r3, #32
 8017c22:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017c26:	0713      	lsls	r3, r2, #28
 8017c28:	bf44      	itt	mi
 8017c2a:	232b      	movmi	r3, #43	@ 0x2b
 8017c2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017c30:	f89a 3000 	ldrb.w	r3, [sl]
 8017c34:	2b2a      	cmp	r3, #42	@ 0x2a
 8017c36:	d015      	beq.n	8017c64 <_vfiprintf_r+0x120>
 8017c38:	9a07      	ldr	r2, [sp, #28]
 8017c3a:	4654      	mov	r4, sl
 8017c3c:	2000      	movs	r0, #0
 8017c3e:	f04f 0c0a 	mov.w	ip, #10
 8017c42:	4621      	mov	r1, r4
 8017c44:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017c48:	3b30      	subs	r3, #48	@ 0x30
 8017c4a:	2b09      	cmp	r3, #9
 8017c4c:	d94b      	bls.n	8017ce6 <_vfiprintf_r+0x1a2>
 8017c4e:	b1b0      	cbz	r0, 8017c7e <_vfiprintf_r+0x13a>
 8017c50:	9207      	str	r2, [sp, #28]
 8017c52:	e014      	b.n	8017c7e <_vfiprintf_r+0x13a>
 8017c54:	eba0 0308 	sub.w	r3, r0, r8
 8017c58:	fa09 f303 	lsl.w	r3, r9, r3
 8017c5c:	4313      	orrs	r3, r2
 8017c5e:	9304      	str	r3, [sp, #16]
 8017c60:	46a2      	mov	sl, r4
 8017c62:	e7d2      	b.n	8017c0a <_vfiprintf_r+0xc6>
 8017c64:	9b03      	ldr	r3, [sp, #12]
 8017c66:	1d19      	adds	r1, r3, #4
 8017c68:	681b      	ldr	r3, [r3, #0]
 8017c6a:	9103      	str	r1, [sp, #12]
 8017c6c:	2b00      	cmp	r3, #0
 8017c6e:	bfbb      	ittet	lt
 8017c70:	425b      	neglt	r3, r3
 8017c72:	f042 0202 	orrlt.w	r2, r2, #2
 8017c76:	9307      	strge	r3, [sp, #28]
 8017c78:	9307      	strlt	r3, [sp, #28]
 8017c7a:	bfb8      	it	lt
 8017c7c:	9204      	strlt	r2, [sp, #16]
 8017c7e:	7823      	ldrb	r3, [r4, #0]
 8017c80:	2b2e      	cmp	r3, #46	@ 0x2e
 8017c82:	d10a      	bne.n	8017c9a <_vfiprintf_r+0x156>
 8017c84:	7863      	ldrb	r3, [r4, #1]
 8017c86:	2b2a      	cmp	r3, #42	@ 0x2a
 8017c88:	d132      	bne.n	8017cf0 <_vfiprintf_r+0x1ac>
 8017c8a:	9b03      	ldr	r3, [sp, #12]
 8017c8c:	1d1a      	adds	r2, r3, #4
 8017c8e:	681b      	ldr	r3, [r3, #0]
 8017c90:	9203      	str	r2, [sp, #12]
 8017c92:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017c96:	3402      	adds	r4, #2
 8017c98:	9305      	str	r3, [sp, #20]
 8017c9a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8017d70 <_vfiprintf_r+0x22c>
 8017c9e:	7821      	ldrb	r1, [r4, #0]
 8017ca0:	2203      	movs	r2, #3
 8017ca2:	4650      	mov	r0, sl
 8017ca4:	f7e8 fa9c 	bl	80001e0 <memchr>
 8017ca8:	b138      	cbz	r0, 8017cba <_vfiprintf_r+0x176>
 8017caa:	9b04      	ldr	r3, [sp, #16]
 8017cac:	eba0 000a 	sub.w	r0, r0, sl
 8017cb0:	2240      	movs	r2, #64	@ 0x40
 8017cb2:	4082      	lsls	r2, r0
 8017cb4:	4313      	orrs	r3, r2
 8017cb6:	3401      	adds	r4, #1
 8017cb8:	9304      	str	r3, [sp, #16]
 8017cba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017cbe:	4829      	ldr	r0, [pc, #164]	@ (8017d64 <_vfiprintf_r+0x220>)
 8017cc0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017cc4:	2206      	movs	r2, #6
 8017cc6:	f7e8 fa8b 	bl	80001e0 <memchr>
 8017cca:	2800      	cmp	r0, #0
 8017ccc:	d03f      	beq.n	8017d4e <_vfiprintf_r+0x20a>
 8017cce:	4b26      	ldr	r3, [pc, #152]	@ (8017d68 <_vfiprintf_r+0x224>)
 8017cd0:	bb1b      	cbnz	r3, 8017d1a <_vfiprintf_r+0x1d6>
 8017cd2:	9b03      	ldr	r3, [sp, #12]
 8017cd4:	3307      	adds	r3, #7
 8017cd6:	f023 0307 	bic.w	r3, r3, #7
 8017cda:	3308      	adds	r3, #8
 8017cdc:	9303      	str	r3, [sp, #12]
 8017cde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017ce0:	443b      	add	r3, r7
 8017ce2:	9309      	str	r3, [sp, #36]	@ 0x24
 8017ce4:	e76a      	b.n	8017bbc <_vfiprintf_r+0x78>
 8017ce6:	fb0c 3202 	mla	r2, ip, r2, r3
 8017cea:	460c      	mov	r4, r1
 8017cec:	2001      	movs	r0, #1
 8017cee:	e7a8      	b.n	8017c42 <_vfiprintf_r+0xfe>
 8017cf0:	2300      	movs	r3, #0
 8017cf2:	3401      	adds	r4, #1
 8017cf4:	9305      	str	r3, [sp, #20]
 8017cf6:	4619      	mov	r1, r3
 8017cf8:	f04f 0c0a 	mov.w	ip, #10
 8017cfc:	4620      	mov	r0, r4
 8017cfe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017d02:	3a30      	subs	r2, #48	@ 0x30
 8017d04:	2a09      	cmp	r2, #9
 8017d06:	d903      	bls.n	8017d10 <_vfiprintf_r+0x1cc>
 8017d08:	2b00      	cmp	r3, #0
 8017d0a:	d0c6      	beq.n	8017c9a <_vfiprintf_r+0x156>
 8017d0c:	9105      	str	r1, [sp, #20]
 8017d0e:	e7c4      	b.n	8017c9a <_vfiprintf_r+0x156>
 8017d10:	fb0c 2101 	mla	r1, ip, r1, r2
 8017d14:	4604      	mov	r4, r0
 8017d16:	2301      	movs	r3, #1
 8017d18:	e7f0      	b.n	8017cfc <_vfiprintf_r+0x1b8>
 8017d1a:	ab03      	add	r3, sp, #12
 8017d1c:	9300      	str	r3, [sp, #0]
 8017d1e:	462a      	mov	r2, r5
 8017d20:	4b12      	ldr	r3, [pc, #72]	@ (8017d6c <_vfiprintf_r+0x228>)
 8017d22:	a904      	add	r1, sp, #16
 8017d24:	4630      	mov	r0, r6
 8017d26:	f3af 8000 	nop.w
 8017d2a:	4607      	mov	r7, r0
 8017d2c:	1c78      	adds	r0, r7, #1
 8017d2e:	d1d6      	bne.n	8017cde <_vfiprintf_r+0x19a>
 8017d30:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017d32:	07d9      	lsls	r1, r3, #31
 8017d34:	d405      	bmi.n	8017d42 <_vfiprintf_r+0x1fe>
 8017d36:	89ab      	ldrh	r3, [r5, #12]
 8017d38:	059a      	lsls	r2, r3, #22
 8017d3a:	d402      	bmi.n	8017d42 <_vfiprintf_r+0x1fe>
 8017d3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017d3e:	f7ff fc51 	bl	80175e4 <__retarget_lock_release_recursive>
 8017d42:	89ab      	ldrh	r3, [r5, #12]
 8017d44:	065b      	lsls	r3, r3, #25
 8017d46:	f53f af1f 	bmi.w	8017b88 <_vfiprintf_r+0x44>
 8017d4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017d4c:	e71e      	b.n	8017b8c <_vfiprintf_r+0x48>
 8017d4e:	ab03      	add	r3, sp, #12
 8017d50:	9300      	str	r3, [sp, #0]
 8017d52:	462a      	mov	r2, r5
 8017d54:	4b05      	ldr	r3, [pc, #20]	@ (8017d6c <_vfiprintf_r+0x228>)
 8017d56:	a904      	add	r1, sp, #16
 8017d58:	4630      	mov	r0, r6
 8017d5a:	f000 f879 	bl	8017e50 <_printf_i>
 8017d5e:	e7e4      	b.n	8017d2a <_vfiprintf_r+0x1e6>
 8017d60:	0801b49b 	.word	0x0801b49b
 8017d64:	0801b4a5 	.word	0x0801b4a5
 8017d68:	00000000 	.word	0x00000000
 8017d6c:	08017b1f 	.word	0x08017b1f
 8017d70:	0801b4a1 	.word	0x0801b4a1

08017d74 <_printf_common>:
 8017d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017d78:	4616      	mov	r6, r2
 8017d7a:	4698      	mov	r8, r3
 8017d7c:	688a      	ldr	r2, [r1, #8]
 8017d7e:	690b      	ldr	r3, [r1, #16]
 8017d80:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8017d84:	4293      	cmp	r3, r2
 8017d86:	bfb8      	it	lt
 8017d88:	4613      	movlt	r3, r2
 8017d8a:	6033      	str	r3, [r6, #0]
 8017d8c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8017d90:	4607      	mov	r7, r0
 8017d92:	460c      	mov	r4, r1
 8017d94:	b10a      	cbz	r2, 8017d9a <_printf_common+0x26>
 8017d96:	3301      	adds	r3, #1
 8017d98:	6033      	str	r3, [r6, #0]
 8017d9a:	6823      	ldr	r3, [r4, #0]
 8017d9c:	0699      	lsls	r1, r3, #26
 8017d9e:	bf42      	ittt	mi
 8017da0:	6833      	ldrmi	r3, [r6, #0]
 8017da2:	3302      	addmi	r3, #2
 8017da4:	6033      	strmi	r3, [r6, #0]
 8017da6:	6825      	ldr	r5, [r4, #0]
 8017da8:	f015 0506 	ands.w	r5, r5, #6
 8017dac:	d106      	bne.n	8017dbc <_printf_common+0x48>
 8017dae:	f104 0a19 	add.w	sl, r4, #25
 8017db2:	68e3      	ldr	r3, [r4, #12]
 8017db4:	6832      	ldr	r2, [r6, #0]
 8017db6:	1a9b      	subs	r3, r3, r2
 8017db8:	42ab      	cmp	r3, r5
 8017dba:	dc26      	bgt.n	8017e0a <_printf_common+0x96>
 8017dbc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8017dc0:	6822      	ldr	r2, [r4, #0]
 8017dc2:	3b00      	subs	r3, #0
 8017dc4:	bf18      	it	ne
 8017dc6:	2301      	movne	r3, #1
 8017dc8:	0692      	lsls	r2, r2, #26
 8017dca:	d42b      	bmi.n	8017e24 <_printf_common+0xb0>
 8017dcc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8017dd0:	4641      	mov	r1, r8
 8017dd2:	4638      	mov	r0, r7
 8017dd4:	47c8      	blx	r9
 8017dd6:	3001      	adds	r0, #1
 8017dd8:	d01e      	beq.n	8017e18 <_printf_common+0xa4>
 8017dda:	6823      	ldr	r3, [r4, #0]
 8017ddc:	6922      	ldr	r2, [r4, #16]
 8017dde:	f003 0306 	and.w	r3, r3, #6
 8017de2:	2b04      	cmp	r3, #4
 8017de4:	bf02      	ittt	eq
 8017de6:	68e5      	ldreq	r5, [r4, #12]
 8017de8:	6833      	ldreq	r3, [r6, #0]
 8017dea:	1aed      	subeq	r5, r5, r3
 8017dec:	68a3      	ldr	r3, [r4, #8]
 8017dee:	bf0c      	ite	eq
 8017df0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017df4:	2500      	movne	r5, #0
 8017df6:	4293      	cmp	r3, r2
 8017df8:	bfc4      	itt	gt
 8017dfa:	1a9b      	subgt	r3, r3, r2
 8017dfc:	18ed      	addgt	r5, r5, r3
 8017dfe:	2600      	movs	r6, #0
 8017e00:	341a      	adds	r4, #26
 8017e02:	42b5      	cmp	r5, r6
 8017e04:	d11a      	bne.n	8017e3c <_printf_common+0xc8>
 8017e06:	2000      	movs	r0, #0
 8017e08:	e008      	b.n	8017e1c <_printf_common+0xa8>
 8017e0a:	2301      	movs	r3, #1
 8017e0c:	4652      	mov	r2, sl
 8017e0e:	4641      	mov	r1, r8
 8017e10:	4638      	mov	r0, r7
 8017e12:	47c8      	blx	r9
 8017e14:	3001      	adds	r0, #1
 8017e16:	d103      	bne.n	8017e20 <_printf_common+0xac>
 8017e18:	f04f 30ff 	mov.w	r0, #4294967295
 8017e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017e20:	3501      	adds	r5, #1
 8017e22:	e7c6      	b.n	8017db2 <_printf_common+0x3e>
 8017e24:	18e1      	adds	r1, r4, r3
 8017e26:	1c5a      	adds	r2, r3, #1
 8017e28:	2030      	movs	r0, #48	@ 0x30
 8017e2a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8017e2e:	4422      	add	r2, r4
 8017e30:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8017e34:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8017e38:	3302      	adds	r3, #2
 8017e3a:	e7c7      	b.n	8017dcc <_printf_common+0x58>
 8017e3c:	2301      	movs	r3, #1
 8017e3e:	4622      	mov	r2, r4
 8017e40:	4641      	mov	r1, r8
 8017e42:	4638      	mov	r0, r7
 8017e44:	47c8      	blx	r9
 8017e46:	3001      	adds	r0, #1
 8017e48:	d0e6      	beq.n	8017e18 <_printf_common+0xa4>
 8017e4a:	3601      	adds	r6, #1
 8017e4c:	e7d9      	b.n	8017e02 <_printf_common+0x8e>
	...

08017e50 <_printf_i>:
 8017e50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017e54:	7e0f      	ldrb	r7, [r1, #24]
 8017e56:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8017e58:	2f78      	cmp	r7, #120	@ 0x78
 8017e5a:	4691      	mov	r9, r2
 8017e5c:	4680      	mov	r8, r0
 8017e5e:	460c      	mov	r4, r1
 8017e60:	469a      	mov	sl, r3
 8017e62:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8017e66:	d807      	bhi.n	8017e78 <_printf_i+0x28>
 8017e68:	2f62      	cmp	r7, #98	@ 0x62
 8017e6a:	d80a      	bhi.n	8017e82 <_printf_i+0x32>
 8017e6c:	2f00      	cmp	r7, #0
 8017e6e:	f000 80d1 	beq.w	8018014 <_printf_i+0x1c4>
 8017e72:	2f58      	cmp	r7, #88	@ 0x58
 8017e74:	f000 80b8 	beq.w	8017fe8 <_printf_i+0x198>
 8017e78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017e7c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8017e80:	e03a      	b.n	8017ef8 <_printf_i+0xa8>
 8017e82:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8017e86:	2b15      	cmp	r3, #21
 8017e88:	d8f6      	bhi.n	8017e78 <_printf_i+0x28>
 8017e8a:	a101      	add	r1, pc, #4	@ (adr r1, 8017e90 <_printf_i+0x40>)
 8017e8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017e90:	08017ee9 	.word	0x08017ee9
 8017e94:	08017efd 	.word	0x08017efd
 8017e98:	08017e79 	.word	0x08017e79
 8017e9c:	08017e79 	.word	0x08017e79
 8017ea0:	08017e79 	.word	0x08017e79
 8017ea4:	08017e79 	.word	0x08017e79
 8017ea8:	08017efd 	.word	0x08017efd
 8017eac:	08017e79 	.word	0x08017e79
 8017eb0:	08017e79 	.word	0x08017e79
 8017eb4:	08017e79 	.word	0x08017e79
 8017eb8:	08017e79 	.word	0x08017e79
 8017ebc:	08017ffb 	.word	0x08017ffb
 8017ec0:	08017f27 	.word	0x08017f27
 8017ec4:	08017fb5 	.word	0x08017fb5
 8017ec8:	08017e79 	.word	0x08017e79
 8017ecc:	08017e79 	.word	0x08017e79
 8017ed0:	0801801d 	.word	0x0801801d
 8017ed4:	08017e79 	.word	0x08017e79
 8017ed8:	08017f27 	.word	0x08017f27
 8017edc:	08017e79 	.word	0x08017e79
 8017ee0:	08017e79 	.word	0x08017e79
 8017ee4:	08017fbd 	.word	0x08017fbd
 8017ee8:	6833      	ldr	r3, [r6, #0]
 8017eea:	1d1a      	adds	r2, r3, #4
 8017eec:	681b      	ldr	r3, [r3, #0]
 8017eee:	6032      	str	r2, [r6, #0]
 8017ef0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017ef4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8017ef8:	2301      	movs	r3, #1
 8017efa:	e09c      	b.n	8018036 <_printf_i+0x1e6>
 8017efc:	6833      	ldr	r3, [r6, #0]
 8017efe:	6820      	ldr	r0, [r4, #0]
 8017f00:	1d19      	adds	r1, r3, #4
 8017f02:	6031      	str	r1, [r6, #0]
 8017f04:	0606      	lsls	r6, r0, #24
 8017f06:	d501      	bpl.n	8017f0c <_printf_i+0xbc>
 8017f08:	681d      	ldr	r5, [r3, #0]
 8017f0a:	e003      	b.n	8017f14 <_printf_i+0xc4>
 8017f0c:	0645      	lsls	r5, r0, #25
 8017f0e:	d5fb      	bpl.n	8017f08 <_printf_i+0xb8>
 8017f10:	f9b3 5000 	ldrsh.w	r5, [r3]
 8017f14:	2d00      	cmp	r5, #0
 8017f16:	da03      	bge.n	8017f20 <_printf_i+0xd0>
 8017f18:	232d      	movs	r3, #45	@ 0x2d
 8017f1a:	426d      	negs	r5, r5
 8017f1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017f20:	4858      	ldr	r0, [pc, #352]	@ (8018084 <_printf_i+0x234>)
 8017f22:	230a      	movs	r3, #10
 8017f24:	e011      	b.n	8017f4a <_printf_i+0xfa>
 8017f26:	6821      	ldr	r1, [r4, #0]
 8017f28:	6833      	ldr	r3, [r6, #0]
 8017f2a:	0608      	lsls	r0, r1, #24
 8017f2c:	f853 5b04 	ldr.w	r5, [r3], #4
 8017f30:	d402      	bmi.n	8017f38 <_printf_i+0xe8>
 8017f32:	0649      	lsls	r1, r1, #25
 8017f34:	bf48      	it	mi
 8017f36:	b2ad      	uxthmi	r5, r5
 8017f38:	2f6f      	cmp	r7, #111	@ 0x6f
 8017f3a:	4852      	ldr	r0, [pc, #328]	@ (8018084 <_printf_i+0x234>)
 8017f3c:	6033      	str	r3, [r6, #0]
 8017f3e:	bf14      	ite	ne
 8017f40:	230a      	movne	r3, #10
 8017f42:	2308      	moveq	r3, #8
 8017f44:	2100      	movs	r1, #0
 8017f46:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8017f4a:	6866      	ldr	r6, [r4, #4]
 8017f4c:	60a6      	str	r6, [r4, #8]
 8017f4e:	2e00      	cmp	r6, #0
 8017f50:	db05      	blt.n	8017f5e <_printf_i+0x10e>
 8017f52:	6821      	ldr	r1, [r4, #0]
 8017f54:	432e      	orrs	r6, r5
 8017f56:	f021 0104 	bic.w	r1, r1, #4
 8017f5a:	6021      	str	r1, [r4, #0]
 8017f5c:	d04b      	beq.n	8017ff6 <_printf_i+0x1a6>
 8017f5e:	4616      	mov	r6, r2
 8017f60:	fbb5 f1f3 	udiv	r1, r5, r3
 8017f64:	fb03 5711 	mls	r7, r3, r1, r5
 8017f68:	5dc7      	ldrb	r7, [r0, r7]
 8017f6a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017f6e:	462f      	mov	r7, r5
 8017f70:	42bb      	cmp	r3, r7
 8017f72:	460d      	mov	r5, r1
 8017f74:	d9f4      	bls.n	8017f60 <_printf_i+0x110>
 8017f76:	2b08      	cmp	r3, #8
 8017f78:	d10b      	bne.n	8017f92 <_printf_i+0x142>
 8017f7a:	6823      	ldr	r3, [r4, #0]
 8017f7c:	07df      	lsls	r7, r3, #31
 8017f7e:	d508      	bpl.n	8017f92 <_printf_i+0x142>
 8017f80:	6923      	ldr	r3, [r4, #16]
 8017f82:	6861      	ldr	r1, [r4, #4]
 8017f84:	4299      	cmp	r1, r3
 8017f86:	bfde      	ittt	le
 8017f88:	2330      	movle	r3, #48	@ 0x30
 8017f8a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8017f8e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8017f92:	1b92      	subs	r2, r2, r6
 8017f94:	6122      	str	r2, [r4, #16]
 8017f96:	f8cd a000 	str.w	sl, [sp]
 8017f9a:	464b      	mov	r3, r9
 8017f9c:	aa03      	add	r2, sp, #12
 8017f9e:	4621      	mov	r1, r4
 8017fa0:	4640      	mov	r0, r8
 8017fa2:	f7ff fee7 	bl	8017d74 <_printf_common>
 8017fa6:	3001      	adds	r0, #1
 8017fa8:	d14a      	bne.n	8018040 <_printf_i+0x1f0>
 8017faa:	f04f 30ff 	mov.w	r0, #4294967295
 8017fae:	b004      	add	sp, #16
 8017fb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017fb4:	6823      	ldr	r3, [r4, #0]
 8017fb6:	f043 0320 	orr.w	r3, r3, #32
 8017fba:	6023      	str	r3, [r4, #0]
 8017fbc:	4832      	ldr	r0, [pc, #200]	@ (8018088 <_printf_i+0x238>)
 8017fbe:	2778      	movs	r7, #120	@ 0x78
 8017fc0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8017fc4:	6823      	ldr	r3, [r4, #0]
 8017fc6:	6831      	ldr	r1, [r6, #0]
 8017fc8:	061f      	lsls	r7, r3, #24
 8017fca:	f851 5b04 	ldr.w	r5, [r1], #4
 8017fce:	d402      	bmi.n	8017fd6 <_printf_i+0x186>
 8017fd0:	065f      	lsls	r7, r3, #25
 8017fd2:	bf48      	it	mi
 8017fd4:	b2ad      	uxthmi	r5, r5
 8017fd6:	6031      	str	r1, [r6, #0]
 8017fd8:	07d9      	lsls	r1, r3, #31
 8017fda:	bf44      	itt	mi
 8017fdc:	f043 0320 	orrmi.w	r3, r3, #32
 8017fe0:	6023      	strmi	r3, [r4, #0]
 8017fe2:	b11d      	cbz	r5, 8017fec <_printf_i+0x19c>
 8017fe4:	2310      	movs	r3, #16
 8017fe6:	e7ad      	b.n	8017f44 <_printf_i+0xf4>
 8017fe8:	4826      	ldr	r0, [pc, #152]	@ (8018084 <_printf_i+0x234>)
 8017fea:	e7e9      	b.n	8017fc0 <_printf_i+0x170>
 8017fec:	6823      	ldr	r3, [r4, #0]
 8017fee:	f023 0320 	bic.w	r3, r3, #32
 8017ff2:	6023      	str	r3, [r4, #0]
 8017ff4:	e7f6      	b.n	8017fe4 <_printf_i+0x194>
 8017ff6:	4616      	mov	r6, r2
 8017ff8:	e7bd      	b.n	8017f76 <_printf_i+0x126>
 8017ffa:	6833      	ldr	r3, [r6, #0]
 8017ffc:	6825      	ldr	r5, [r4, #0]
 8017ffe:	6961      	ldr	r1, [r4, #20]
 8018000:	1d18      	adds	r0, r3, #4
 8018002:	6030      	str	r0, [r6, #0]
 8018004:	062e      	lsls	r6, r5, #24
 8018006:	681b      	ldr	r3, [r3, #0]
 8018008:	d501      	bpl.n	801800e <_printf_i+0x1be>
 801800a:	6019      	str	r1, [r3, #0]
 801800c:	e002      	b.n	8018014 <_printf_i+0x1c4>
 801800e:	0668      	lsls	r0, r5, #25
 8018010:	d5fb      	bpl.n	801800a <_printf_i+0x1ba>
 8018012:	8019      	strh	r1, [r3, #0]
 8018014:	2300      	movs	r3, #0
 8018016:	6123      	str	r3, [r4, #16]
 8018018:	4616      	mov	r6, r2
 801801a:	e7bc      	b.n	8017f96 <_printf_i+0x146>
 801801c:	6833      	ldr	r3, [r6, #0]
 801801e:	1d1a      	adds	r2, r3, #4
 8018020:	6032      	str	r2, [r6, #0]
 8018022:	681e      	ldr	r6, [r3, #0]
 8018024:	6862      	ldr	r2, [r4, #4]
 8018026:	2100      	movs	r1, #0
 8018028:	4630      	mov	r0, r6
 801802a:	f7e8 f8d9 	bl	80001e0 <memchr>
 801802e:	b108      	cbz	r0, 8018034 <_printf_i+0x1e4>
 8018030:	1b80      	subs	r0, r0, r6
 8018032:	6060      	str	r0, [r4, #4]
 8018034:	6863      	ldr	r3, [r4, #4]
 8018036:	6123      	str	r3, [r4, #16]
 8018038:	2300      	movs	r3, #0
 801803a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801803e:	e7aa      	b.n	8017f96 <_printf_i+0x146>
 8018040:	6923      	ldr	r3, [r4, #16]
 8018042:	4632      	mov	r2, r6
 8018044:	4649      	mov	r1, r9
 8018046:	4640      	mov	r0, r8
 8018048:	47d0      	blx	sl
 801804a:	3001      	adds	r0, #1
 801804c:	d0ad      	beq.n	8017faa <_printf_i+0x15a>
 801804e:	6823      	ldr	r3, [r4, #0]
 8018050:	079b      	lsls	r3, r3, #30
 8018052:	d413      	bmi.n	801807c <_printf_i+0x22c>
 8018054:	68e0      	ldr	r0, [r4, #12]
 8018056:	9b03      	ldr	r3, [sp, #12]
 8018058:	4298      	cmp	r0, r3
 801805a:	bfb8      	it	lt
 801805c:	4618      	movlt	r0, r3
 801805e:	e7a6      	b.n	8017fae <_printf_i+0x15e>
 8018060:	2301      	movs	r3, #1
 8018062:	4632      	mov	r2, r6
 8018064:	4649      	mov	r1, r9
 8018066:	4640      	mov	r0, r8
 8018068:	47d0      	blx	sl
 801806a:	3001      	adds	r0, #1
 801806c:	d09d      	beq.n	8017faa <_printf_i+0x15a>
 801806e:	3501      	adds	r5, #1
 8018070:	68e3      	ldr	r3, [r4, #12]
 8018072:	9903      	ldr	r1, [sp, #12]
 8018074:	1a5b      	subs	r3, r3, r1
 8018076:	42ab      	cmp	r3, r5
 8018078:	dcf2      	bgt.n	8018060 <_printf_i+0x210>
 801807a:	e7eb      	b.n	8018054 <_printf_i+0x204>
 801807c:	2500      	movs	r5, #0
 801807e:	f104 0619 	add.w	r6, r4, #25
 8018082:	e7f5      	b.n	8018070 <_printf_i+0x220>
 8018084:	0801b4ac 	.word	0x0801b4ac
 8018088:	0801b4bd 	.word	0x0801b4bd

0801808c <__sflush_r>:
 801808c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8018090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018094:	0716      	lsls	r6, r2, #28
 8018096:	4605      	mov	r5, r0
 8018098:	460c      	mov	r4, r1
 801809a:	d454      	bmi.n	8018146 <__sflush_r+0xba>
 801809c:	684b      	ldr	r3, [r1, #4]
 801809e:	2b00      	cmp	r3, #0
 80180a0:	dc02      	bgt.n	80180a8 <__sflush_r+0x1c>
 80180a2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80180a4:	2b00      	cmp	r3, #0
 80180a6:	dd48      	ble.n	801813a <__sflush_r+0xae>
 80180a8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80180aa:	2e00      	cmp	r6, #0
 80180ac:	d045      	beq.n	801813a <__sflush_r+0xae>
 80180ae:	2300      	movs	r3, #0
 80180b0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80180b4:	682f      	ldr	r7, [r5, #0]
 80180b6:	6a21      	ldr	r1, [r4, #32]
 80180b8:	602b      	str	r3, [r5, #0]
 80180ba:	d030      	beq.n	801811e <__sflush_r+0x92>
 80180bc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80180be:	89a3      	ldrh	r3, [r4, #12]
 80180c0:	0759      	lsls	r1, r3, #29
 80180c2:	d505      	bpl.n	80180d0 <__sflush_r+0x44>
 80180c4:	6863      	ldr	r3, [r4, #4]
 80180c6:	1ad2      	subs	r2, r2, r3
 80180c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80180ca:	b10b      	cbz	r3, 80180d0 <__sflush_r+0x44>
 80180cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80180ce:	1ad2      	subs	r2, r2, r3
 80180d0:	2300      	movs	r3, #0
 80180d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80180d4:	6a21      	ldr	r1, [r4, #32]
 80180d6:	4628      	mov	r0, r5
 80180d8:	47b0      	blx	r6
 80180da:	1c43      	adds	r3, r0, #1
 80180dc:	89a3      	ldrh	r3, [r4, #12]
 80180de:	d106      	bne.n	80180ee <__sflush_r+0x62>
 80180e0:	6829      	ldr	r1, [r5, #0]
 80180e2:	291d      	cmp	r1, #29
 80180e4:	d82b      	bhi.n	801813e <__sflush_r+0xb2>
 80180e6:	4a2a      	ldr	r2, [pc, #168]	@ (8018190 <__sflush_r+0x104>)
 80180e8:	40ca      	lsrs	r2, r1
 80180ea:	07d6      	lsls	r6, r2, #31
 80180ec:	d527      	bpl.n	801813e <__sflush_r+0xb2>
 80180ee:	2200      	movs	r2, #0
 80180f0:	6062      	str	r2, [r4, #4]
 80180f2:	04d9      	lsls	r1, r3, #19
 80180f4:	6922      	ldr	r2, [r4, #16]
 80180f6:	6022      	str	r2, [r4, #0]
 80180f8:	d504      	bpl.n	8018104 <__sflush_r+0x78>
 80180fa:	1c42      	adds	r2, r0, #1
 80180fc:	d101      	bne.n	8018102 <__sflush_r+0x76>
 80180fe:	682b      	ldr	r3, [r5, #0]
 8018100:	b903      	cbnz	r3, 8018104 <__sflush_r+0x78>
 8018102:	6560      	str	r0, [r4, #84]	@ 0x54
 8018104:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018106:	602f      	str	r7, [r5, #0]
 8018108:	b1b9      	cbz	r1, 801813a <__sflush_r+0xae>
 801810a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801810e:	4299      	cmp	r1, r3
 8018110:	d002      	beq.n	8018118 <__sflush_r+0x8c>
 8018112:	4628      	mov	r0, r5
 8018114:	f7ff fa94 	bl	8017640 <_free_r>
 8018118:	2300      	movs	r3, #0
 801811a:	6363      	str	r3, [r4, #52]	@ 0x34
 801811c:	e00d      	b.n	801813a <__sflush_r+0xae>
 801811e:	2301      	movs	r3, #1
 8018120:	4628      	mov	r0, r5
 8018122:	47b0      	blx	r6
 8018124:	4602      	mov	r2, r0
 8018126:	1c50      	adds	r0, r2, #1
 8018128:	d1c9      	bne.n	80180be <__sflush_r+0x32>
 801812a:	682b      	ldr	r3, [r5, #0]
 801812c:	2b00      	cmp	r3, #0
 801812e:	d0c6      	beq.n	80180be <__sflush_r+0x32>
 8018130:	2b1d      	cmp	r3, #29
 8018132:	d001      	beq.n	8018138 <__sflush_r+0xac>
 8018134:	2b16      	cmp	r3, #22
 8018136:	d11e      	bne.n	8018176 <__sflush_r+0xea>
 8018138:	602f      	str	r7, [r5, #0]
 801813a:	2000      	movs	r0, #0
 801813c:	e022      	b.n	8018184 <__sflush_r+0xf8>
 801813e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018142:	b21b      	sxth	r3, r3
 8018144:	e01b      	b.n	801817e <__sflush_r+0xf2>
 8018146:	690f      	ldr	r7, [r1, #16]
 8018148:	2f00      	cmp	r7, #0
 801814a:	d0f6      	beq.n	801813a <__sflush_r+0xae>
 801814c:	0793      	lsls	r3, r2, #30
 801814e:	680e      	ldr	r6, [r1, #0]
 8018150:	bf08      	it	eq
 8018152:	694b      	ldreq	r3, [r1, #20]
 8018154:	600f      	str	r7, [r1, #0]
 8018156:	bf18      	it	ne
 8018158:	2300      	movne	r3, #0
 801815a:	eba6 0807 	sub.w	r8, r6, r7
 801815e:	608b      	str	r3, [r1, #8]
 8018160:	f1b8 0f00 	cmp.w	r8, #0
 8018164:	dde9      	ble.n	801813a <__sflush_r+0xae>
 8018166:	6a21      	ldr	r1, [r4, #32]
 8018168:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801816a:	4643      	mov	r3, r8
 801816c:	463a      	mov	r2, r7
 801816e:	4628      	mov	r0, r5
 8018170:	47b0      	blx	r6
 8018172:	2800      	cmp	r0, #0
 8018174:	dc08      	bgt.n	8018188 <__sflush_r+0xfc>
 8018176:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801817a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801817e:	81a3      	strh	r3, [r4, #12]
 8018180:	f04f 30ff 	mov.w	r0, #4294967295
 8018184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018188:	4407      	add	r7, r0
 801818a:	eba8 0800 	sub.w	r8, r8, r0
 801818e:	e7e7      	b.n	8018160 <__sflush_r+0xd4>
 8018190:	20400001 	.word	0x20400001

08018194 <_fflush_r>:
 8018194:	b538      	push	{r3, r4, r5, lr}
 8018196:	690b      	ldr	r3, [r1, #16]
 8018198:	4605      	mov	r5, r0
 801819a:	460c      	mov	r4, r1
 801819c:	b913      	cbnz	r3, 80181a4 <_fflush_r+0x10>
 801819e:	2500      	movs	r5, #0
 80181a0:	4628      	mov	r0, r5
 80181a2:	bd38      	pop	{r3, r4, r5, pc}
 80181a4:	b118      	cbz	r0, 80181ae <_fflush_r+0x1a>
 80181a6:	6a03      	ldr	r3, [r0, #32]
 80181a8:	b90b      	cbnz	r3, 80181ae <_fflush_r+0x1a>
 80181aa:	f7ff f85d 	bl	8017268 <__sinit>
 80181ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80181b2:	2b00      	cmp	r3, #0
 80181b4:	d0f3      	beq.n	801819e <_fflush_r+0xa>
 80181b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80181b8:	07d0      	lsls	r0, r2, #31
 80181ba:	d404      	bmi.n	80181c6 <_fflush_r+0x32>
 80181bc:	0599      	lsls	r1, r3, #22
 80181be:	d402      	bmi.n	80181c6 <_fflush_r+0x32>
 80181c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80181c2:	f7ff fa0e 	bl	80175e2 <__retarget_lock_acquire_recursive>
 80181c6:	4628      	mov	r0, r5
 80181c8:	4621      	mov	r1, r4
 80181ca:	f7ff ff5f 	bl	801808c <__sflush_r>
 80181ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80181d0:	07da      	lsls	r2, r3, #31
 80181d2:	4605      	mov	r5, r0
 80181d4:	d4e4      	bmi.n	80181a0 <_fflush_r+0xc>
 80181d6:	89a3      	ldrh	r3, [r4, #12]
 80181d8:	059b      	lsls	r3, r3, #22
 80181da:	d4e1      	bmi.n	80181a0 <_fflush_r+0xc>
 80181dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80181de:	f7ff fa01 	bl	80175e4 <__retarget_lock_release_recursive>
 80181e2:	e7dd      	b.n	80181a0 <_fflush_r+0xc>

080181e4 <fiprintf>:
 80181e4:	b40e      	push	{r1, r2, r3}
 80181e6:	b503      	push	{r0, r1, lr}
 80181e8:	4601      	mov	r1, r0
 80181ea:	ab03      	add	r3, sp, #12
 80181ec:	4805      	ldr	r0, [pc, #20]	@ (8018204 <fiprintf+0x20>)
 80181ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80181f2:	6800      	ldr	r0, [r0, #0]
 80181f4:	9301      	str	r3, [sp, #4]
 80181f6:	f7ff fca5 	bl	8017b44 <_vfiprintf_r>
 80181fa:	b002      	add	sp, #8
 80181fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8018200:	b003      	add	sp, #12
 8018202:	4770      	bx	lr
 8018204:	20000118 	.word	0x20000118

08018208 <__swbuf_r>:
 8018208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801820a:	460e      	mov	r6, r1
 801820c:	4614      	mov	r4, r2
 801820e:	4605      	mov	r5, r0
 8018210:	b118      	cbz	r0, 801821a <__swbuf_r+0x12>
 8018212:	6a03      	ldr	r3, [r0, #32]
 8018214:	b90b      	cbnz	r3, 801821a <__swbuf_r+0x12>
 8018216:	f7ff f827 	bl	8017268 <__sinit>
 801821a:	69a3      	ldr	r3, [r4, #24]
 801821c:	60a3      	str	r3, [r4, #8]
 801821e:	89a3      	ldrh	r3, [r4, #12]
 8018220:	071a      	lsls	r2, r3, #28
 8018222:	d501      	bpl.n	8018228 <__swbuf_r+0x20>
 8018224:	6923      	ldr	r3, [r4, #16]
 8018226:	b943      	cbnz	r3, 801823a <__swbuf_r+0x32>
 8018228:	4621      	mov	r1, r4
 801822a:	4628      	mov	r0, r5
 801822c:	f000 f82a 	bl	8018284 <__swsetup_r>
 8018230:	b118      	cbz	r0, 801823a <__swbuf_r+0x32>
 8018232:	f04f 37ff 	mov.w	r7, #4294967295
 8018236:	4638      	mov	r0, r7
 8018238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801823a:	6823      	ldr	r3, [r4, #0]
 801823c:	6922      	ldr	r2, [r4, #16]
 801823e:	1a98      	subs	r0, r3, r2
 8018240:	6963      	ldr	r3, [r4, #20]
 8018242:	b2f6      	uxtb	r6, r6
 8018244:	4283      	cmp	r3, r0
 8018246:	4637      	mov	r7, r6
 8018248:	dc05      	bgt.n	8018256 <__swbuf_r+0x4e>
 801824a:	4621      	mov	r1, r4
 801824c:	4628      	mov	r0, r5
 801824e:	f7ff ffa1 	bl	8018194 <_fflush_r>
 8018252:	2800      	cmp	r0, #0
 8018254:	d1ed      	bne.n	8018232 <__swbuf_r+0x2a>
 8018256:	68a3      	ldr	r3, [r4, #8]
 8018258:	3b01      	subs	r3, #1
 801825a:	60a3      	str	r3, [r4, #8]
 801825c:	6823      	ldr	r3, [r4, #0]
 801825e:	1c5a      	adds	r2, r3, #1
 8018260:	6022      	str	r2, [r4, #0]
 8018262:	701e      	strb	r6, [r3, #0]
 8018264:	6962      	ldr	r2, [r4, #20]
 8018266:	1c43      	adds	r3, r0, #1
 8018268:	429a      	cmp	r2, r3
 801826a:	d004      	beq.n	8018276 <__swbuf_r+0x6e>
 801826c:	89a3      	ldrh	r3, [r4, #12]
 801826e:	07db      	lsls	r3, r3, #31
 8018270:	d5e1      	bpl.n	8018236 <__swbuf_r+0x2e>
 8018272:	2e0a      	cmp	r6, #10
 8018274:	d1df      	bne.n	8018236 <__swbuf_r+0x2e>
 8018276:	4621      	mov	r1, r4
 8018278:	4628      	mov	r0, r5
 801827a:	f7ff ff8b 	bl	8018194 <_fflush_r>
 801827e:	2800      	cmp	r0, #0
 8018280:	d0d9      	beq.n	8018236 <__swbuf_r+0x2e>
 8018282:	e7d6      	b.n	8018232 <__swbuf_r+0x2a>

08018284 <__swsetup_r>:
 8018284:	b538      	push	{r3, r4, r5, lr}
 8018286:	4b29      	ldr	r3, [pc, #164]	@ (801832c <__swsetup_r+0xa8>)
 8018288:	4605      	mov	r5, r0
 801828a:	6818      	ldr	r0, [r3, #0]
 801828c:	460c      	mov	r4, r1
 801828e:	b118      	cbz	r0, 8018298 <__swsetup_r+0x14>
 8018290:	6a03      	ldr	r3, [r0, #32]
 8018292:	b90b      	cbnz	r3, 8018298 <__swsetup_r+0x14>
 8018294:	f7fe ffe8 	bl	8017268 <__sinit>
 8018298:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801829c:	0719      	lsls	r1, r3, #28
 801829e:	d422      	bmi.n	80182e6 <__swsetup_r+0x62>
 80182a0:	06da      	lsls	r2, r3, #27
 80182a2:	d407      	bmi.n	80182b4 <__swsetup_r+0x30>
 80182a4:	2209      	movs	r2, #9
 80182a6:	602a      	str	r2, [r5, #0]
 80182a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80182ac:	81a3      	strh	r3, [r4, #12]
 80182ae:	f04f 30ff 	mov.w	r0, #4294967295
 80182b2:	e033      	b.n	801831c <__swsetup_r+0x98>
 80182b4:	0758      	lsls	r0, r3, #29
 80182b6:	d512      	bpl.n	80182de <__swsetup_r+0x5a>
 80182b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80182ba:	b141      	cbz	r1, 80182ce <__swsetup_r+0x4a>
 80182bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80182c0:	4299      	cmp	r1, r3
 80182c2:	d002      	beq.n	80182ca <__swsetup_r+0x46>
 80182c4:	4628      	mov	r0, r5
 80182c6:	f7ff f9bb 	bl	8017640 <_free_r>
 80182ca:	2300      	movs	r3, #0
 80182cc:	6363      	str	r3, [r4, #52]	@ 0x34
 80182ce:	89a3      	ldrh	r3, [r4, #12]
 80182d0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80182d4:	81a3      	strh	r3, [r4, #12]
 80182d6:	2300      	movs	r3, #0
 80182d8:	6063      	str	r3, [r4, #4]
 80182da:	6923      	ldr	r3, [r4, #16]
 80182dc:	6023      	str	r3, [r4, #0]
 80182de:	89a3      	ldrh	r3, [r4, #12]
 80182e0:	f043 0308 	orr.w	r3, r3, #8
 80182e4:	81a3      	strh	r3, [r4, #12]
 80182e6:	6923      	ldr	r3, [r4, #16]
 80182e8:	b94b      	cbnz	r3, 80182fe <__swsetup_r+0x7a>
 80182ea:	89a3      	ldrh	r3, [r4, #12]
 80182ec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80182f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80182f4:	d003      	beq.n	80182fe <__swsetup_r+0x7a>
 80182f6:	4621      	mov	r1, r4
 80182f8:	4628      	mov	r0, r5
 80182fa:	f000 f884 	bl	8018406 <__smakebuf_r>
 80182fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018302:	f013 0201 	ands.w	r2, r3, #1
 8018306:	d00a      	beq.n	801831e <__swsetup_r+0x9a>
 8018308:	2200      	movs	r2, #0
 801830a:	60a2      	str	r2, [r4, #8]
 801830c:	6962      	ldr	r2, [r4, #20]
 801830e:	4252      	negs	r2, r2
 8018310:	61a2      	str	r2, [r4, #24]
 8018312:	6922      	ldr	r2, [r4, #16]
 8018314:	b942      	cbnz	r2, 8018328 <__swsetup_r+0xa4>
 8018316:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801831a:	d1c5      	bne.n	80182a8 <__swsetup_r+0x24>
 801831c:	bd38      	pop	{r3, r4, r5, pc}
 801831e:	0799      	lsls	r1, r3, #30
 8018320:	bf58      	it	pl
 8018322:	6962      	ldrpl	r2, [r4, #20]
 8018324:	60a2      	str	r2, [r4, #8]
 8018326:	e7f4      	b.n	8018312 <__swsetup_r+0x8e>
 8018328:	2000      	movs	r0, #0
 801832a:	e7f7      	b.n	801831c <__swsetup_r+0x98>
 801832c:	20000118 	.word	0x20000118

08018330 <_sbrk_r>:
 8018330:	b538      	push	{r3, r4, r5, lr}
 8018332:	4d06      	ldr	r5, [pc, #24]	@ (801834c <_sbrk_r+0x1c>)
 8018334:	2300      	movs	r3, #0
 8018336:	4604      	mov	r4, r0
 8018338:	4608      	mov	r0, r1
 801833a:	602b      	str	r3, [r5, #0]
 801833c:	f7e8 fe82 	bl	8001044 <_sbrk>
 8018340:	1c43      	adds	r3, r0, #1
 8018342:	d102      	bne.n	801834a <_sbrk_r+0x1a>
 8018344:	682b      	ldr	r3, [r5, #0]
 8018346:	b103      	cbz	r3, 801834a <_sbrk_r+0x1a>
 8018348:	6023      	str	r3, [r4, #0]
 801834a:	bd38      	pop	{r3, r4, r5, pc}
 801834c:	2000e504 	.word	0x2000e504

08018350 <abort>:
 8018350:	b508      	push	{r3, lr}
 8018352:	2006      	movs	r0, #6
 8018354:	f000 f8bc 	bl	80184d0 <raise>
 8018358:	2001      	movs	r0, #1
 801835a:	f7e8 fdfb 	bl	8000f54 <_exit>

0801835e <_realloc_r>:
 801835e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018362:	4607      	mov	r7, r0
 8018364:	4614      	mov	r4, r2
 8018366:	460d      	mov	r5, r1
 8018368:	b921      	cbnz	r1, 8018374 <_realloc_r+0x16>
 801836a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801836e:	4611      	mov	r1, r2
 8018370:	f7ff b9da 	b.w	8017728 <_malloc_r>
 8018374:	b92a      	cbnz	r2, 8018382 <_realloc_r+0x24>
 8018376:	f7ff f963 	bl	8017640 <_free_r>
 801837a:	4625      	mov	r5, r4
 801837c:	4628      	mov	r0, r5
 801837e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018382:	f000 f8e3 	bl	801854c <_malloc_usable_size_r>
 8018386:	4284      	cmp	r4, r0
 8018388:	4606      	mov	r6, r0
 801838a:	d802      	bhi.n	8018392 <_realloc_r+0x34>
 801838c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8018390:	d8f4      	bhi.n	801837c <_realloc_r+0x1e>
 8018392:	4621      	mov	r1, r4
 8018394:	4638      	mov	r0, r7
 8018396:	f7ff f9c7 	bl	8017728 <_malloc_r>
 801839a:	4680      	mov	r8, r0
 801839c:	b908      	cbnz	r0, 80183a2 <_realloc_r+0x44>
 801839e:	4645      	mov	r5, r8
 80183a0:	e7ec      	b.n	801837c <_realloc_r+0x1e>
 80183a2:	42b4      	cmp	r4, r6
 80183a4:	4622      	mov	r2, r4
 80183a6:	4629      	mov	r1, r5
 80183a8:	bf28      	it	cs
 80183aa:	4632      	movcs	r2, r6
 80183ac:	f7ff f91b 	bl	80175e6 <memcpy>
 80183b0:	4629      	mov	r1, r5
 80183b2:	4638      	mov	r0, r7
 80183b4:	f7ff f944 	bl	8017640 <_free_r>
 80183b8:	e7f1      	b.n	801839e <_realloc_r+0x40>

080183ba <__swhatbuf_r>:
 80183ba:	b570      	push	{r4, r5, r6, lr}
 80183bc:	460c      	mov	r4, r1
 80183be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80183c2:	2900      	cmp	r1, #0
 80183c4:	b096      	sub	sp, #88	@ 0x58
 80183c6:	4615      	mov	r5, r2
 80183c8:	461e      	mov	r6, r3
 80183ca:	da0d      	bge.n	80183e8 <__swhatbuf_r+0x2e>
 80183cc:	89a3      	ldrh	r3, [r4, #12]
 80183ce:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80183d2:	f04f 0100 	mov.w	r1, #0
 80183d6:	bf14      	ite	ne
 80183d8:	2340      	movne	r3, #64	@ 0x40
 80183da:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80183de:	2000      	movs	r0, #0
 80183e0:	6031      	str	r1, [r6, #0]
 80183e2:	602b      	str	r3, [r5, #0]
 80183e4:	b016      	add	sp, #88	@ 0x58
 80183e6:	bd70      	pop	{r4, r5, r6, pc}
 80183e8:	466a      	mov	r2, sp
 80183ea:	f000 f879 	bl	80184e0 <_fstat_r>
 80183ee:	2800      	cmp	r0, #0
 80183f0:	dbec      	blt.n	80183cc <__swhatbuf_r+0x12>
 80183f2:	9901      	ldr	r1, [sp, #4]
 80183f4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80183f8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80183fc:	4259      	negs	r1, r3
 80183fe:	4159      	adcs	r1, r3
 8018400:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8018404:	e7eb      	b.n	80183de <__swhatbuf_r+0x24>

08018406 <__smakebuf_r>:
 8018406:	898b      	ldrh	r3, [r1, #12]
 8018408:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801840a:	079d      	lsls	r5, r3, #30
 801840c:	4606      	mov	r6, r0
 801840e:	460c      	mov	r4, r1
 8018410:	d507      	bpl.n	8018422 <__smakebuf_r+0x1c>
 8018412:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8018416:	6023      	str	r3, [r4, #0]
 8018418:	6123      	str	r3, [r4, #16]
 801841a:	2301      	movs	r3, #1
 801841c:	6163      	str	r3, [r4, #20]
 801841e:	b003      	add	sp, #12
 8018420:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018422:	ab01      	add	r3, sp, #4
 8018424:	466a      	mov	r2, sp
 8018426:	f7ff ffc8 	bl	80183ba <__swhatbuf_r>
 801842a:	9f00      	ldr	r7, [sp, #0]
 801842c:	4605      	mov	r5, r0
 801842e:	4639      	mov	r1, r7
 8018430:	4630      	mov	r0, r6
 8018432:	f7ff f979 	bl	8017728 <_malloc_r>
 8018436:	b948      	cbnz	r0, 801844c <__smakebuf_r+0x46>
 8018438:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801843c:	059a      	lsls	r2, r3, #22
 801843e:	d4ee      	bmi.n	801841e <__smakebuf_r+0x18>
 8018440:	f023 0303 	bic.w	r3, r3, #3
 8018444:	f043 0302 	orr.w	r3, r3, #2
 8018448:	81a3      	strh	r3, [r4, #12]
 801844a:	e7e2      	b.n	8018412 <__smakebuf_r+0xc>
 801844c:	89a3      	ldrh	r3, [r4, #12]
 801844e:	6020      	str	r0, [r4, #0]
 8018450:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018454:	81a3      	strh	r3, [r4, #12]
 8018456:	9b01      	ldr	r3, [sp, #4]
 8018458:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801845c:	b15b      	cbz	r3, 8018476 <__smakebuf_r+0x70>
 801845e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018462:	4630      	mov	r0, r6
 8018464:	f000 f84e 	bl	8018504 <_isatty_r>
 8018468:	b128      	cbz	r0, 8018476 <__smakebuf_r+0x70>
 801846a:	89a3      	ldrh	r3, [r4, #12]
 801846c:	f023 0303 	bic.w	r3, r3, #3
 8018470:	f043 0301 	orr.w	r3, r3, #1
 8018474:	81a3      	strh	r3, [r4, #12]
 8018476:	89a3      	ldrh	r3, [r4, #12]
 8018478:	431d      	orrs	r5, r3
 801847a:	81a5      	strh	r5, [r4, #12]
 801847c:	e7cf      	b.n	801841e <__smakebuf_r+0x18>

0801847e <_raise_r>:
 801847e:	291f      	cmp	r1, #31
 8018480:	b538      	push	{r3, r4, r5, lr}
 8018482:	4605      	mov	r5, r0
 8018484:	460c      	mov	r4, r1
 8018486:	d904      	bls.n	8018492 <_raise_r+0x14>
 8018488:	2316      	movs	r3, #22
 801848a:	6003      	str	r3, [r0, #0]
 801848c:	f04f 30ff 	mov.w	r0, #4294967295
 8018490:	bd38      	pop	{r3, r4, r5, pc}
 8018492:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8018494:	b112      	cbz	r2, 801849c <_raise_r+0x1e>
 8018496:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801849a:	b94b      	cbnz	r3, 80184b0 <_raise_r+0x32>
 801849c:	4628      	mov	r0, r5
 801849e:	f000 f853 	bl	8018548 <_getpid_r>
 80184a2:	4622      	mov	r2, r4
 80184a4:	4601      	mov	r1, r0
 80184a6:	4628      	mov	r0, r5
 80184a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80184ac:	f000 b83a 	b.w	8018524 <_kill_r>
 80184b0:	2b01      	cmp	r3, #1
 80184b2:	d00a      	beq.n	80184ca <_raise_r+0x4c>
 80184b4:	1c59      	adds	r1, r3, #1
 80184b6:	d103      	bne.n	80184c0 <_raise_r+0x42>
 80184b8:	2316      	movs	r3, #22
 80184ba:	6003      	str	r3, [r0, #0]
 80184bc:	2001      	movs	r0, #1
 80184be:	e7e7      	b.n	8018490 <_raise_r+0x12>
 80184c0:	2100      	movs	r1, #0
 80184c2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80184c6:	4620      	mov	r0, r4
 80184c8:	4798      	blx	r3
 80184ca:	2000      	movs	r0, #0
 80184cc:	e7e0      	b.n	8018490 <_raise_r+0x12>
	...

080184d0 <raise>:
 80184d0:	4b02      	ldr	r3, [pc, #8]	@ (80184dc <raise+0xc>)
 80184d2:	4601      	mov	r1, r0
 80184d4:	6818      	ldr	r0, [r3, #0]
 80184d6:	f7ff bfd2 	b.w	801847e <_raise_r>
 80184da:	bf00      	nop
 80184dc:	20000118 	.word	0x20000118

080184e0 <_fstat_r>:
 80184e0:	b538      	push	{r3, r4, r5, lr}
 80184e2:	4d07      	ldr	r5, [pc, #28]	@ (8018500 <_fstat_r+0x20>)
 80184e4:	2300      	movs	r3, #0
 80184e6:	4604      	mov	r4, r0
 80184e8:	4608      	mov	r0, r1
 80184ea:	4611      	mov	r1, r2
 80184ec:	602b      	str	r3, [r5, #0]
 80184ee:	f7e8 fd81 	bl	8000ff4 <_fstat>
 80184f2:	1c43      	adds	r3, r0, #1
 80184f4:	d102      	bne.n	80184fc <_fstat_r+0x1c>
 80184f6:	682b      	ldr	r3, [r5, #0]
 80184f8:	b103      	cbz	r3, 80184fc <_fstat_r+0x1c>
 80184fa:	6023      	str	r3, [r4, #0]
 80184fc:	bd38      	pop	{r3, r4, r5, pc}
 80184fe:	bf00      	nop
 8018500:	2000e504 	.word	0x2000e504

08018504 <_isatty_r>:
 8018504:	b538      	push	{r3, r4, r5, lr}
 8018506:	4d06      	ldr	r5, [pc, #24]	@ (8018520 <_isatty_r+0x1c>)
 8018508:	2300      	movs	r3, #0
 801850a:	4604      	mov	r4, r0
 801850c:	4608      	mov	r0, r1
 801850e:	602b      	str	r3, [r5, #0]
 8018510:	f7e8 fd80 	bl	8001014 <_isatty>
 8018514:	1c43      	adds	r3, r0, #1
 8018516:	d102      	bne.n	801851e <_isatty_r+0x1a>
 8018518:	682b      	ldr	r3, [r5, #0]
 801851a:	b103      	cbz	r3, 801851e <_isatty_r+0x1a>
 801851c:	6023      	str	r3, [r4, #0]
 801851e:	bd38      	pop	{r3, r4, r5, pc}
 8018520:	2000e504 	.word	0x2000e504

08018524 <_kill_r>:
 8018524:	b538      	push	{r3, r4, r5, lr}
 8018526:	4d07      	ldr	r5, [pc, #28]	@ (8018544 <_kill_r+0x20>)
 8018528:	2300      	movs	r3, #0
 801852a:	4604      	mov	r4, r0
 801852c:	4608      	mov	r0, r1
 801852e:	4611      	mov	r1, r2
 8018530:	602b      	str	r3, [r5, #0]
 8018532:	f7e8 fcfd 	bl	8000f30 <_kill>
 8018536:	1c43      	adds	r3, r0, #1
 8018538:	d102      	bne.n	8018540 <_kill_r+0x1c>
 801853a:	682b      	ldr	r3, [r5, #0]
 801853c:	b103      	cbz	r3, 8018540 <_kill_r+0x1c>
 801853e:	6023      	str	r3, [r4, #0]
 8018540:	bd38      	pop	{r3, r4, r5, pc}
 8018542:	bf00      	nop
 8018544:	2000e504 	.word	0x2000e504

08018548 <_getpid_r>:
 8018548:	f7e8 bcea 	b.w	8000f20 <_getpid>

0801854c <_malloc_usable_size_r>:
 801854c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018550:	1f18      	subs	r0, r3, #4
 8018552:	2b00      	cmp	r3, #0
 8018554:	bfbc      	itt	lt
 8018556:	580b      	ldrlt	r3, [r1, r0]
 8018558:	18c0      	addlt	r0, r0, r3
 801855a:	4770      	bx	lr

0801855c <_init>:
 801855c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801855e:	bf00      	nop
 8018560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018562:	bc08      	pop	{r3}
 8018564:	469e      	mov	lr, r3
 8018566:	4770      	bx	lr

08018568 <_fini>:
 8018568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801856a:	bf00      	nop
 801856c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801856e:	bc08      	pop	{r3}
 8018570:	469e      	mov	lr, r3
 8018572:	4770      	bx	lr

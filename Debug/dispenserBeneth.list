
dispenserBeneth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001f3f0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004b6c  0801f580  0801f580  00020580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080240ec  080240ec  00026170  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080240ec  080240ec  000250ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080240f4  080240f4  00026170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080240f4  080240f4  000250f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080240f8  080240f8  000250f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000170  20000000  080240fc  00026000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00026170  2**0
                  CONTENTS
 10 .bss          0000e7ec  20000170  20000170  00026170  2**2
                  ALLOC
 11 .eth_desc     00000004  2000e95c  2000e95c  00026170  2**0
                  ALLOC
 12 .eth_buf      00000000  2000e960  2000e960  00026170  2**0
                  CONTENTS
 13 ._user_heap_stack 00000600  2000e960  2000e960  00026170  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  00026170  2**0
                  CONTENTS, READONLY
 15 .debug_info   0003d9e1  00000000  00000000  000261a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000a4cc  00000000  00000000  00063b81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002cc8  00000000  00000000  0006e050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00002328  00000000  00000000  00070d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00037e4b  00000000  00000000  00073040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00048448  00000000  00000000  000aae8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000f7833  00000000  00000000  000f32d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  001eab06  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000c310  00000000  00000000  001eab4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000006b  00000000  00000000  001f6e5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000170 	.word	0x20000170
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801f568 	.word	0x0801f568

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000174 	.word	0x20000174
 80001cc:	0801f568 	.word	0x0801f568

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <app_business_init>:

/**
  * @brief  初始化应用层业务逻辑
  * @retval None
  */
void app_business_init(void) {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
    // 初始化寄存器默认值
    
    // 初始化舵机相关寄存器
    holding_regs[REG_ROTATION_TRIGGER] = 3;               // 40023 转动触发：3=上电初始化值
 80005b2:	4b36      	ldr	r3, [pc, #216]	@ (800068c <app_business_init+0xe0>)
 80005b4:	2203      	movs	r2, #3
 80005b6:	85da      	strh	r2, [r3, #46]	@ 0x2e
    // 初始化当前角度寄存器为默认值500 (40017-40022)
    holding_regs[REG_CURRENT_ANGLE1] = 500;
 80005b8:	4b34      	ldr	r3, [pc, #208]	@ (800068c <app_business_init+0xe0>)
 80005ba:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80005be:	845a      	strh	r2, [r3, #34]	@ 0x22
    holding_regs[REG_CURRENT_ANGLE2] = 500;
 80005c0:	4b32      	ldr	r3, [pc, #200]	@ (800068c <app_business_init+0xe0>)
 80005c2:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80005c6:	849a      	strh	r2, [r3, #36]	@ 0x24
    holding_regs[REG_CURRENT_ANGLE3] = 500;
 80005c8:	4b30      	ldr	r3, [pc, #192]	@ (800068c <app_business_init+0xe0>)
 80005ca:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80005ce:	84da      	strh	r2, [r3, #38]	@ 0x26
    holding_regs[REG_CURRENT_ANGLE4] = 500;
 80005d0:	4b2e      	ldr	r3, [pc, #184]	@ (800068c <app_business_init+0xe0>)
 80005d2:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80005d6:	851a      	strh	r2, [r3, #40]	@ 0x28
    holding_regs[REG_CURRENT_ANGLE5] = 500;
 80005d8:	4b2c      	ldr	r3, [pc, #176]	@ (800068c <app_business_init+0xe0>)
 80005da:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80005de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    holding_regs[REG_CURRENT_ANGLE6] = 500;
 80005e0:	4b2a      	ldr	r3, [pc, #168]	@ (800068c <app_business_init+0xe0>)
 80005e2:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80005e6:	859a      	strh	r2, [r3, #44]	@ 0x2c
    
    // 初始化泵相关寄存器
    holding_regs[REG_PUMP1_STATUS] = 999;                 // 40029 泵1状态：999=未知状态，等待查询
 80005e8:	4b28      	ldr	r3, [pc, #160]	@ (800068c <app_business_init+0xe0>)
 80005ea:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80005ee:	875a      	strh	r2, [r3, #58]	@ 0x3a
    holding_regs[REG_PUMP1_CURRENT_POSITION] = 9999;      // 40030 泵1当前位置：9999=上电默认值
 80005f0:	4b26      	ldr	r3, [pc, #152]	@ (800068c <app_business_init+0xe0>)
 80005f2:	f242 720f 	movw	r2, #9999	@ 0x270f
 80005f6:	879a      	strh	r2, [r3, #60]	@ 0x3c
    holding_regs[REG_PUMP2_STATUS] = 999;                 // 40034 泵2状态：999=未知状态，等待查询
 80005f8:	4b24      	ldr	r3, [pc, #144]	@ (800068c <app_business_init+0xe0>)
 80005fa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80005fe:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    holding_regs[REG_PUMP2_CURRENT_POSITION] = 9999;      // 40035 泵2当前位置：9999=上电默认值
 8000602:	4b22      	ldr	r3, [pc, #136]	@ (800068c <app_business_init+0xe0>)
 8000604:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000608:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

    
    // 初始化业务状态变量
    last_rotation_trigger = 3;    // 对应寄存器的初始值
 800060c:	4b20      	ldr	r3, [pc, #128]	@ (8000690 <app_business_init+0xe4>)
 800060e:	2203      	movs	r2, #3
 8000610:	601a      	str	r2, [r3, #0]
    last_weight_control = 0;
 8000612:	4b20      	ldr	r3, [pc, #128]	@ (8000694 <app_business_init+0xe8>)
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
    last_pump1_init_trigger = 0;
 8000618:	4b1f      	ldr	r3, [pc, #124]	@ (8000698 <app_business_init+0xec>)
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
    last_pump1_control_trigger = 0;
 800061e:	4b1f      	ldr	r3, [pc, #124]	@ (800069c <app_business_init+0xf0>)
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
    last_pump2_init_trigger = 0;
 8000624:	4b1e      	ldr	r3, [pc, #120]	@ (80006a0 <app_business_init+0xf4>)
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
    last_pump2_control_trigger = 0;
 800062a:	4b1e      	ldr	r3, [pc, #120]	@ (80006a4 <app_business_init+0xf8>)
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
    
    // 初始化泵状态变量
    pump1_busy = 0;
 8000630:	4b1d      	ldr	r3, [pc, #116]	@ (80006a8 <app_business_init+0xfc>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
    pump2_busy = 0;
 8000636:	4b1d      	ldr	r3, [pc, #116]	@ (80006ac <app_business_init+0x100>)
 8000638:	2200      	movs	r2, #0
 800063a:	701a      	strb	r2, [r3, #0]
    pump1_current_pos = 0;
 800063c:	4b1c      	ldr	r3, [pc, #112]	@ (80006b0 <app_business_init+0x104>)
 800063e:	2200      	movs	r2, #0
 8000640:	801a      	strh	r2, [r3, #0]
    pump2_current_pos = 0;
 8000642:	4b1c      	ldr	r3, [pc, #112]	@ (80006b4 <app_business_init+0x108>)
 8000644:	2200      	movs	r2, #0
 8000646:	801a      	strh	r2, [r3, #0]
    pump1_move_start_time = 0;
 8000648:	4b1b      	ldr	r3, [pc, #108]	@ (80006b8 <app_business_init+0x10c>)
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]
    pump2_move_start_time = 0;
 800064e:	4b1b      	ldr	r3, [pc, #108]	@ (80006bc <app_business_init+0x110>)
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
    
    // 初始化舵机状态变量
    servo_moving = 0;
 8000654:	4b1a      	ldr	r3, [pc, #104]	@ (80006c0 <app_business_init+0x114>)
 8000656:	2200      	movs	r2, #0
 8000658:	701a      	strb	r2, [r3, #0]
    servo_move_start_time = 0;
 800065a:	4b1a      	ldr	r3, [pc, #104]	@ (80006c4 <app_business_init+0x118>)
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 6; i++) {
 8000660:	2300      	movs	r3, #0
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	e008      	b.n	8000678 <app_business_init+0xcc>
        servo_current_positions[i] = 9999;  // 默认位置9999，表示未读取
 8000666:	4a18      	ldr	r2, [pc, #96]	@ (80006c8 <app_business_init+0x11c>)
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	f242 710f 	movw	r1, #9999	@ 0x270f
 800066e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < 6; i++) {
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	3301      	adds	r3, #1
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	2b05      	cmp	r3, #5
 800067c:	ddf3      	ble.n	8000666 <app_business_init+0xba>
    }
    
    cdc_debug_print("Business logic initialized");
 800067e:	4813      	ldr	r0, [pc, #76]	@ (80006cc <app_business_init+0x120>)
 8000680:	f000 f832 	bl	80006e8 <cdc_debug_print>
}
 8000684:	bf00      	nop
 8000686:	3708      	adds	r7, #8
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	200006c0 	.word	0x200006c0
 8000690:	2000018c 	.word	0x2000018c
 8000694:	20000190 	.word	0x20000190
 8000698:	20000194 	.word	0x20000194
 800069c:	20000198 	.word	0x20000198
 80006a0:	2000019c 	.word	0x2000019c
 80006a4:	200001a0 	.word	0x200001a0
 80006a8:	20000224 	.word	0x20000224
 80006ac:	20000225 	.word	0x20000225
 80006b0:	20000226 	.word	0x20000226
 80006b4:	20000228 	.word	0x20000228
 80006b8:	2000022c 	.word	0x2000022c
 80006bc:	20000230 	.word	0x20000230
 80006c0:	20000234 	.word	0x20000234
 80006c4:	20000238 	.word	0x20000238
 80006c8:	2000023c 	.word	0x2000023c
 80006cc:	0801f580 	.word	0x0801f580

080006d0 <app_business_process>:

/**
  * @brief  主业务逻辑处理函数 - 每100ms调用一次
  * @retval None
  */
void app_business_process(void) {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
    // 1. 处理舵机相关命令
    process_servo_commands();
 80006d4:	f000 f828 	bl	8000728 <process_servo_commands>
    
    // 2. 处理称重相关命令
    process_weight_commands();
 80006d8:	f000 f906 	bl	80008e8 <process_weight_commands>
    
    // 3. 处理泵相关命令
    process_pump_commands();
 80006dc:	f000 f926 	bl	800092c <process_pump_commands>
    
    // 4. 更新传感器数据 (只读寄存器)
    update_sensor_data();
 80006e0:	f000 fa76 	bl	8000bd0 <update_sensor_data>
}
 80006e4:	bf00      	nop
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <cdc_debug_print>:
/**
  * @brief  调试信息输出函数
  * @param  message: 要输出的调试信息
  * @retval None
  */
void cdc_debug_print(const char* message) {
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
    int len = snprintf(debug_buf, sizeof(debug_buf), "[BUSINESS] %s\r\n", message);
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	4a0b      	ldr	r2, [pc, #44]	@ (8000720 <cdc_debug_print+0x38>)
 80006f4:	2180      	movs	r1, #128	@ 0x80
 80006f6:	480b      	ldr	r0, [pc, #44]	@ (8000724 <cdc_debug_print+0x3c>)
 80006f8:	f01d fdda 	bl	801e2b0 <sniprintf>
 80006fc:	60f8      	str	r0, [r7, #12]
    if (len > 0 && len < sizeof(debug_buf)) {
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	2b00      	cmp	r3, #0
 8000702:	dd08      	ble.n	8000716 <cdc_debug_print+0x2e>
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	2b7f      	cmp	r3, #127	@ 0x7f
 8000708:	d805      	bhi.n	8000716 <cdc_debug_print+0x2e>
        CDC_Transmit_FS((uint8_t*)debug_buf, len);  // 暂时启用调试输出
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	b29b      	uxth	r3, r3
 800070e:	4619      	mov	r1, r3
 8000710:	4804      	ldr	r0, [pc, #16]	@ (8000724 <cdc_debug_print+0x3c>)
 8000712:	f01c ffd7 	bl	801d6c4 <CDC_Transmit_FS>
    }
}
 8000716:	bf00      	nop
 8000718:	3710      	adds	r7, #16
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	0801f59c 	.word	0x0801f59c
 8000724:	200001a4 	.word	0x200001a4

08000728 <process_servo_commands>:

/**
  * @brief  处理舵机相关命令
  * @retval None
  */
static void process_servo_commands(void) {
 8000728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800072a:	b0ad      	sub	sp, #180	@ 0xb4
 800072c:	af06      	add	r7, sp, #24
    // 状态机逻辑：
    // 1 = 正在执行任务（忙）
    // 2 = 任务完成，可重新写入1开始新任务
    // 3 = 上电初始化值，可接受写入1
    // 当写入1时执行移动，执行期间保持状态1，完成后置为状态2
    if (holding_regs[REG_ROTATION_TRIGGER] == 1 && 
 800072e:	4b63      	ldr	r3, [pc, #396]	@ (80008bc <process_servo_commands+0x194>)
 8000730:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8000732:	2b01      	cmp	r3, #1
 8000734:	f040 80ac 	bne.w	8000890 <process_servo_commands+0x168>
        (last_rotation_trigger == 2 || last_rotation_trigger == 3)) {  // 只有从状态2或3才能接受状态1
 8000738:	4b61      	ldr	r3, [pc, #388]	@ (80008c0 <process_servo_commands+0x198>)
 800073a:	681b      	ldr	r3, [r3, #0]
    if (holding_regs[REG_ROTATION_TRIGGER] == 1 && 
 800073c:	2b02      	cmp	r3, #2
 800073e:	d004      	beq.n	800074a <process_servo_commands+0x22>
        (last_rotation_trigger == 2 || last_rotation_trigger == 3)) {  // 只有从状态2或3才能接受状态1
 8000740:	4b5f      	ldr	r3, [pc, #380]	@ (80008c0 <process_servo_commands+0x198>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	2b03      	cmp	r3, #3
 8000746:	f040 80a3 	bne.w	8000890 <process_servo_commands+0x168>
        if (!servo_moving) {  // 只有在舵机不在移动时才处理新命令
 800074a:	4b5e      	ldr	r3, [pc, #376]	@ (80008c4 <process_servo_commands+0x19c>)
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	2b00      	cmp	r3, #0
 8000750:	f040 809a 	bne.w	8000888 <process_servo_commands+0x160>
            cdc_debug_print("Servo rotation triggered, status 1 (busy)");
 8000754:	485c      	ldr	r0, [pc, #368]	@ (80008c8 <process_servo_commands+0x1a0>)
 8000756:	f7ff ffc7 	bl	80006e8 <cdc_debug_print>
            
            // 获取转动时间 (40010) - 现在只用一个寄存器
            uint16_t rotation_time = holding_regs[REG_ROTATION_TIME];
 800075a:	4b58      	ldr	r3, [pc, #352]	@ (80008bc <process_servo_commands+0x194>)
 800075c:	8a9b      	ldrh	r3, [r3, #20]
 800075e:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
            
            // 验证转动时间范围 (1-65535ms)
            if (rotation_time == 0) {
 8000762:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8000766:	2b00      	cmp	r3, #0
 8000768:	d106      	bne.n	8000778 <process_servo_commands+0x50>
                rotation_time = 1000;  // 默认1秒
 800076a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800076e:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
                cdc_debug_print("Using default rotation time: 1000ms");
 8000772:	4856      	ldr	r0, [pc, #344]	@ (80008cc <process_servo_commands+0x1a4>)
 8000774:	f7ff ffb8 	bl	80006e8 <cdc_debug_print>
            }
            
            // 获取目标角度 (40011-40016，每个角度占用1个寄存器)
            uint16_t target_angles[6];
            target_angles[0] = holding_regs[REG_TARGET_ANGLE1];
 8000778:	4b50      	ldr	r3, [pc, #320]	@ (80008bc <process_servo_commands+0x194>)
 800077a:	8adb      	ldrh	r3, [r3, #22]
 800077c:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
            target_angles[1] = holding_regs[REG_TARGET_ANGLE2];
 8000780:	4b4e      	ldr	r3, [pc, #312]	@ (80008bc <process_servo_commands+0x194>)
 8000782:	8b1b      	ldrh	r3, [r3, #24]
 8000784:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
            target_angles[2] = holding_regs[REG_TARGET_ANGLE3];
 8000788:	4b4c      	ldr	r3, [pc, #304]	@ (80008bc <process_servo_commands+0x194>)
 800078a:	8b5b      	ldrh	r3, [r3, #26]
 800078c:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
            target_angles[3] = holding_regs[REG_TARGET_ANGLE4];
 8000790:	4b4a      	ldr	r3, [pc, #296]	@ (80008bc <process_servo_commands+0x194>)
 8000792:	8b9b      	ldrh	r3, [r3, #28]
 8000794:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
            target_angles[4] = holding_regs[REG_TARGET_ANGLE5];
 8000798:	4b48      	ldr	r3, [pc, #288]	@ (80008bc <process_servo_commands+0x194>)
 800079a:	8bdb      	ldrh	r3, [r3, #30]
 800079c:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
            target_angles[5] = holding_regs[REG_TARGET_ANGLE6];
 80007a0:	4b46      	ldr	r3, [pc, #280]	@ (80008bc <process_servo_commands+0x194>)
 80007a2:	8c1b      	ldrh	r3, [r3, #32]
 80007a4:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
            
            // 验证角度范围 (0-1000)
            for (int i = 0; i < 6; i++) {
 80007a8:	2300      	movs	r3, #0
 80007aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80007ae:	e02c      	b.n	800080a <process_servo_commands+0xe2>
                if (target_angles[i] > 1000) {
 80007b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80007b4:	005b      	lsls	r3, r3, #1
 80007b6:	3398      	adds	r3, #152	@ 0x98
 80007b8:	443b      	add	r3, r7
 80007ba:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80007be:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80007c2:	d91d      	bls.n	8000800 <process_servo_commands+0xd8>
                    char warning_msg[60];
                    snprintf(warning_msg, sizeof(warning_msg), "Servo%d angle limited to 1000 (was %d)", i+1, target_angles[i]);
 80007c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80007c8:	1c5a      	adds	r2, r3, #1
 80007ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80007ce:	005b      	lsls	r3, r3, #1
 80007d0:	3398      	adds	r3, #152	@ 0x98
 80007d2:	443b      	add	r3, r7
 80007d4:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80007d8:	1d38      	adds	r0, r7, #4
 80007da:	9300      	str	r3, [sp, #0]
 80007dc:	4613      	mov	r3, r2
 80007de:	4a3c      	ldr	r2, [pc, #240]	@ (80008d0 <process_servo_commands+0x1a8>)
 80007e0:	213c      	movs	r1, #60	@ 0x3c
 80007e2:	f01d fd65 	bl	801e2b0 <sniprintf>
                    cdc_debug_print(warning_msg);
 80007e6:	1d3b      	adds	r3, r7, #4
 80007e8:	4618      	mov	r0, r3
 80007ea:	f7ff ff7d 	bl	80006e8 <cdc_debug_print>
                    target_angles[i] = 1000;
 80007ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80007f2:	005b      	lsls	r3, r3, #1
 80007f4:	3398      	adds	r3, #152	@ 0x98
 80007f6:	443b      	add	r3, r7
 80007f8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80007fc:	f823 2c14 	strh.w	r2, [r3, #-20]
            for (int i = 0; i < 6; i++) {
 8000800:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000804:	3301      	adds	r3, #1
 8000806:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800080a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800080e:	2b05      	cmp	r3, #5
 8000810:	ddce      	ble.n	80007b0 <process_servo_commands+0x88>
            }
            
            // 调试信息：显示所有目标角度
            char angles_msg[128];
            snprintf(angles_msg, sizeof(angles_msg), "Target angles: [%d,%d,%d,%d,%d,%d] Time:%dms", 
                    target_angles[0], target_angles[1], target_angles[2], 
 8000812:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
            snprintf(angles_msg, sizeof(angles_msg), "Target angles: [%d,%d,%d,%d,%d,%d] Time:%dms", 
 8000816:	469c      	mov	ip, r3
                    target_angles[0], target_angles[1], target_angles[2], 
 8000818:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
            snprintf(angles_msg, sizeof(angles_msg), "Target angles: [%d,%d,%d,%d,%d,%d] Time:%dms", 
 800081c:	461a      	mov	r2, r3
                    target_angles[0], target_angles[1], target_angles[2], 
 800081e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
            snprintf(angles_msg, sizeof(angles_msg), "Target angles: [%d,%d,%d,%d,%d,%d] Time:%dms", 
 8000822:	4619      	mov	r1, r3
                    target_angles[3], target_angles[4], target_angles[5], rotation_time);
 8000824:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
            snprintf(angles_msg, sizeof(angles_msg), "Target angles: [%d,%d,%d,%d,%d,%d] Time:%dms", 
 8000828:	461c      	mov	r4, r3
                    target_angles[3], target_angles[4], target_angles[5], rotation_time);
 800082a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
            snprintf(angles_msg, sizeof(angles_msg), "Target angles: [%d,%d,%d,%d,%d,%d] Time:%dms", 
 800082e:	461d      	mov	r5, r3
                    target_angles[3], target_angles[4], target_angles[5], rotation_time);
 8000830:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
            snprintf(angles_msg, sizeof(angles_msg), "Target angles: [%d,%d,%d,%d,%d,%d] Time:%dms", 
 8000834:	461e      	mov	r6, r3
 8000836:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800083a:	1d38      	adds	r0, r7, #4
 800083c:	9305      	str	r3, [sp, #20]
 800083e:	9604      	str	r6, [sp, #16]
 8000840:	9503      	str	r5, [sp, #12]
 8000842:	9402      	str	r4, [sp, #8]
 8000844:	9101      	str	r1, [sp, #4]
 8000846:	9200      	str	r2, [sp, #0]
 8000848:	4663      	mov	r3, ip
 800084a:	4a22      	ldr	r2, [pc, #136]	@ (80008d4 <process_servo_commands+0x1ac>)
 800084c:	2180      	movs	r1, #128	@ 0x80
 800084e:	f01d fd2f 	bl	801e2b0 <sniprintf>
            cdc_debug_print(angles_msg);
 8000852:	1d3b      	adds	r3, r7, #4
 8000854:	4618      	mov	r0, r3
 8000856:	f7ff ff47 	bl	80006e8 <cdc_debug_print>
            
            // 发送舵机控制命令到各个舵机 (ID 1-6)
            servo_move_all(target_angles, rotation_time);
 800085a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	@ 0x96
 800085e:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000862:	4611      	mov	r1, r2
 8000864:	4618      	mov	r0, r3
 8000866:	f000 fb69 	bl	8000f3c <servo_move_all>
            
            // 设置移动状态
            servo_moving = 1;
 800086a:	4b16      	ldr	r3, [pc, #88]	@ (80008c4 <process_servo_commands+0x19c>)
 800086c:	2201      	movs	r2, #1
 800086e:	701a      	strb	r2, [r3, #0]
            servo_move_start_time = HAL_GetTick();
 8000870:	f004 fa62 	bl	8004d38 <HAL_GetTick>
 8000874:	4603      	mov	r3, r0
 8000876:	4a18      	ldr	r2, [pc, #96]	@ (80008d8 <process_servo_commands+0x1b0>)
 8000878:	6013      	str	r3, [r2, #0]
            
            // 状态保持为1表示正在执行任务（忙）
            // holding_regs[REG_ROTATION_TRIGGER] = 1;  // 状态已经是1，不需要改变
            last_rotation_trigger = 1;
 800087a:	4b11      	ldr	r3, [pc, #68]	@ (80008c0 <process_servo_commands+0x198>)
 800087c:	2201      	movs	r2, #1
 800087e:	601a      	str	r2, [r3, #0]
            
            cdc_debug_print("Servo rotation commands sent, status remains 1 (busy)");
 8000880:	4816      	ldr	r0, [pc, #88]	@ (80008dc <process_servo_commands+0x1b4>)
 8000882:	f7ff ff31 	bl	80006e8 <cdc_debug_print>
        if (!servo_moving) {  // 只有在舵机不在移动时才处理新命令
 8000886:	e00e      	b.n	80008a6 <process_servo_commands+0x17e>
        } else {
            cdc_debug_print("Servos are busy, ignoring rotation command");
 8000888:	4815      	ldr	r0, [pc, #84]	@ (80008e0 <process_servo_commands+0x1b8>)
 800088a:	f7ff ff2d 	bl	80006e8 <cdc_debug_print>
        if (!servo_moving) {  // 只有在舵机不在移动时才处理新命令
 800088e:	e00a      	b.n	80008a6 <process_servo_commands+0x17e>
        }
    } else if (holding_regs[REG_ROTATION_TRIGGER] == 1 && last_rotation_trigger == 1) {
 8000890:	4b0a      	ldr	r3, [pc, #40]	@ (80008bc <process_servo_commands+0x194>)
 8000892:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8000894:	2b01      	cmp	r3, #1
 8000896:	d106      	bne.n	80008a6 <process_servo_commands+0x17e>
 8000898:	4b09      	ldr	r3, [pc, #36]	@ (80008c0 <process_servo_commands+0x198>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	2b01      	cmp	r3, #1
 800089e:	d102      	bne.n	80008a6 <process_servo_commands+0x17e>
        // 如果连续写入1，给出警告（系统正忙）
        cdc_debug_print("Warning: Servo rotation command ignored - system busy (status 1)");
 80008a0:	4810      	ldr	r0, [pc, #64]	@ (80008e4 <process_servo_commands+0x1bc>)
 80008a2:	f7ff ff21 	bl	80006e8 <cdc_debug_print>
    }
    
    // 更新舵机状态（检查是否完成移动）
    servo_update_status();
 80008a6:	f000 fc7d 	bl	80011a4 <servo_update_status>
    
    // 更新上次状态
    last_rotation_trigger = holding_regs[REG_ROTATION_TRIGGER];
 80008aa:	4b04      	ldr	r3, [pc, #16]	@ (80008bc <process_servo_commands+0x194>)
 80008ac:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80008ae:	461a      	mov	r2, r3
 80008b0:	4b03      	ldr	r3, [pc, #12]	@ (80008c0 <process_servo_commands+0x198>)
 80008b2:	601a      	str	r2, [r3, #0]
}
 80008b4:	bf00      	nop
 80008b6:	379c      	adds	r7, #156	@ 0x9c
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008bc:	200006c0 	.word	0x200006c0
 80008c0:	2000018c 	.word	0x2000018c
 80008c4:	20000234 	.word	0x20000234
 80008c8:	0801f5ac 	.word	0x0801f5ac
 80008cc:	0801f5d8 	.word	0x0801f5d8
 80008d0:	0801f5fc 	.word	0x0801f5fc
 80008d4:	0801f624 	.word	0x0801f624
 80008d8:	20000238 	.word	0x20000238
 80008dc:	0801f654 	.word	0x0801f654
 80008e0:	0801f68c 	.word	0x0801f68c
 80008e4:	0801f6b8 	.word	0x0801f6b8

080008e8 <process_weight_commands>:

/**
  * @brief  处理称重相关命令
  * @retval None
  */
static void process_weight_commands(void) {
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
    // 检查称重控制位 (40040)
    if (holding_regs[REG_WEIGHT_CONTROL] == 1 && last_weight_control != 1) {
 80008ec:	4b0b      	ldr	r3, [pc, #44]	@ (800091c <process_weight_commands+0x34>)
 80008ee:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	d10c      	bne.n	800090e <process_weight_commands+0x26>
 80008f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000920 <process_weight_commands+0x38>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	d008      	beq.n	800090e <process_weight_commands+0x26>
        cdc_debug_print("Weight measurement started");
 80008fc:	4809      	ldr	r0, [pc, #36]	@ (8000924 <process_weight_commands+0x3c>)
 80008fe:	f7ff fef3 	bl	80006e8 <cdc_debug_print>
        
        // 置为忙状态
        holding_regs[REG_WEIGHT_CONTROL] = 2;
 8000902:	4b06      	ldr	r3, [pc, #24]	@ (800091c <process_weight_commands+0x34>)
 8000904:	2202      	movs	r2, #2
 8000906:	865a      	strh	r2, [r3, #50]	@ 0x32
        
        // 4. 称重完成，置状态为3
        holding_regs[REG_WEIGHT_CONTROL] = 3;
        */
        
        cdc_debug_print("Weight measurement in progress");
 8000908:	4807      	ldr	r0, [pc, #28]	@ (8000928 <process_weight_commands+0x40>)
 800090a:	f7ff feed 	bl	80006e8 <cdc_debug_print>
    }
    
    // 更新上次状态
    last_weight_control = holding_regs[REG_WEIGHT_CONTROL];
 800090e:	4b03      	ldr	r3, [pc, #12]	@ (800091c <process_weight_commands+0x34>)
 8000910:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8000912:	461a      	mov	r2, r3
 8000914:	4b02      	ldr	r3, [pc, #8]	@ (8000920 <process_weight_commands+0x38>)
 8000916:	601a      	str	r2, [r3, #0]
}
 8000918:	bf00      	nop
 800091a:	bd80      	pop	{r7, pc}
 800091c:	200006c0 	.word	0x200006c0
 8000920:	20000190 	.word	0x20000190
 8000924:	0801f6fc 	.word	0x0801f6fc
 8000928:	0801f718 	.word	0x0801f718

0800092c <process_pump_commands>:

/**
  * @brief  处理泵相关命令
  * @retval None
  */
static void process_pump_commands(void) {
 800092c:	b580      	push	{r7, lr}
 800092e:	b098      	sub	sp, #96	@ 0x60
 8000930:	af02      	add	r7, sp, #8
    // 处理泵1命令
    // 检查泵1初始化触发 (40026) - 只有当错误码为0且不忙时才允许
    if (holding_regs[REG_PUMP1_INIT_TRIGGER] == 1 && 
 8000932:	4b98      	ldr	r3, [pc, #608]	@ (8000b94 <process_pump_commands+0x268>)
 8000934:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8000936:	2b01      	cmp	r3, #1
 8000938:	d118      	bne.n	800096c <process_pump_commands+0x40>
        holding_regs[REG_PUMP1_STATUS] == 0 && pump1_busy == 0) {  // 错误码为0且不忙
 800093a:	4b96      	ldr	r3, [pc, #600]	@ (8000b94 <process_pump_commands+0x268>)
 800093c:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
    if (holding_regs[REG_PUMP1_INIT_TRIGGER] == 1 && 
 800093e:	2b00      	cmp	r3, #0
 8000940:	d114      	bne.n	800096c <process_pump_commands+0x40>
        holding_regs[REG_PUMP1_STATUS] == 0 && pump1_busy == 0) {  // 错误码为0且不忙
 8000942:	4b95      	ldr	r3, [pc, #596]	@ (8000b98 <process_pump_commands+0x26c>)
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d110      	bne.n	800096c <process_pump_commands+0x40>
        // cdc_debug_print("Pump1 initialization triggered (idle & no error)");
        
        // 发送泵1初始化命令
        if (pump_init_device(1) == 0) {
 800094a:	2001      	movs	r0, #1
 800094c:	f000 f986 	bl	8000c5c <pump_init_device>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d106      	bne.n	8000964 <process_pump_commands+0x38>
            // cdc_debug_print("Pump1 init command sent successfully");
            // 发送后立即置状态为2
            holding_regs[REG_PUMP1_INIT_TRIGGER] = 2;
 8000956:	4b8f      	ldr	r3, [pc, #572]	@ (8000b94 <process_pump_commands+0x268>)
 8000958:	2202      	movs	r2, #2
 800095a:	869a      	strh	r2, [r3, #52]	@ 0x34
            last_pump1_init_trigger = 2;
 800095c:	4b8f      	ldr	r3, [pc, #572]	@ (8000b9c <process_pump_commands+0x270>)
 800095e:	2202      	movs	r2, #2
 8000960:	601a      	str	r2, [r3, #0]
        if (pump_init_device(1) == 0) {
 8000962:	e01e      	b.n	80009a2 <process_pump_commands+0x76>
        } else {
            // cdc_debug_print("Pump1 init command failed");
            // 发送失败也置状态为2
            holding_regs[REG_PUMP1_INIT_TRIGGER] = 2;
 8000964:	4b8b      	ldr	r3, [pc, #556]	@ (8000b94 <process_pump_commands+0x268>)
 8000966:	2202      	movs	r2, #2
 8000968:	869a      	strh	r2, [r3, #52]	@ 0x34
        if (pump_init_device(1) == 0) {
 800096a:	e01a      	b.n	80009a2 <process_pump_commands+0x76>
        }
    } else if (holding_regs[REG_PUMP1_INIT_TRIGGER] == 1 && 
 800096c:	4b89      	ldr	r3, [pc, #548]	@ (8000b94 <process_pump_commands+0x268>)
 800096e:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8000970:	2b01      	cmp	r3, #1
 8000972:	d116      	bne.n	80009a2 <process_pump_commands+0x76>
               (holding_regs[REG_PUMP1_STATUS] != 0 || pump1_busy == 1)) {
 8000974:	4b87      	ldr	r3, [pc, #540]	@ (8000b94 <process_pump_commands+0x268>)
 8000976:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
    } else if (holding_regs[REG_PUMP1_INIT_TRIGGER] == 1 && 
 8000978:	2b00      	cmp	r3, #0
 800097a:	d103      	bne.n	8000984 <process_pump_commands+0x58>
               (holding_regs[REG_PUMP1_STATUS] != 0 || pump1_busy == 1)) {
 800097c:	4b86      	ldr	r3, [pc, #536]	@ (8000b98 <process_pump_commands+0x26c>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	2b01      	cmp	r3, #1
 8000982:	d10e      	bne.n	80009a2 <process_pump_commands+0x76>
        char reject_msg[80];
        snprintf(reject_msg, sizeof(reject_msg), "Pump1 init rejected: error=%d, busy=%d", 
                holding_regs[REG_PUMP1_STATUS], pump1_busy);
 8000984:	4b83      	ldr	r3, [pc, #524]	@ (8000b94 <process_pump_commands+0x268>)
 8000986:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
        snprintf(reject_msg, sizeof(reject_msg), "Pump1 init rejected: error=%d, busy=%d", 
 8000988:	461a      	mov	r2, r3
 800098a:	4b83      	ldr	r3, [pc, #524]	@ (8000b98 <process_pump_commands+0x26c>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	1d38      	adds	r0, r7, #4
 8000990:	9300      	str	r3, [sp, #0]
 8000992:	4613      	mov	r3, r2
 8000994:	4a82      	ldr	r2, [pc, #520]	@ (8000ba0 <process_pump_commands+0x274>)
 8000996:	2150      	movs	r1, #80	@ 0x50
 8000998:	f01d fc8a 	bl	801e2b0 <sniprintf>
        // cdc_debug_print(reject_msg);
        // 立即置初始化位为2，表示无法执行
        holding_regs[REG_PUMP1_INIT_TRIGGER] = 2;
 800099c:	4b7d      	ldr	r3, [pc, #500]	@ (8000b94 <process_pump_commands+0x268>)
 800099e:	2202      	movs	r2, #2
 80009a0:	869a      	strh	r2, [r3, #52]	@ 0x34
    }
    
    // 检查泵1控制触发 (40028) - 只有当错误码为0且不忙时才允许
    if (holding_regs[REG_PUMP1_CONTROL_TRIGGER] == 1 && 
 80009a2:	4b7c      	ldr	r3, [pc, #496]	@ (8000b94 <process_pump_commands+0x268>)
 80009a4:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	d135      	bne.n	8000a16 <process_pump_commands+0xea>
        holding_regs[REG_PUMP1_STATUS] == 0 && pump1_busy == 0) {  // 错误码为0且不忙
 80009aa:	4b7a      	ldr	r3, [pc, #488]	@ (8000b94 <process_pump_commands+0x268>)
 80009ac:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
    if (holding_regs[REG_PUMP1_CONTROL_TRIGGER] == 1 && 
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d131      	bne.n	8000a16 <process_pump_commands+0xea>
        holding_regs[REG_PUMP1_STATUS] == 0 && pump1_busy == 0) {  // 错误码为0且不忙
 80009b2:	4b79      	ldr	r3, [pc, #484]	@ (8000b98 <process_pump_commands+0x26c>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d12d      	bne.n	8000a16 <process_pump_commands+0xea>
        // cdc_debug_print("Pump1 control triggered (idle & no error)");
        
        // 获取目标位置 (40027)
        uint16_t target_position = holding_regs[REG_PUMP1_ABS_POSITION];
 80009ba:	4b76      	ldr	r3, [pc, #472]	@ (8000b94 <process_pump_commands+0x268>)
 80009bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80009be:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
        
        // 验证目标位置范围 (0-6000)
        if (target_position <= 6000) {
 80009c2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80009c6:	f241 7270 	movw	r2, #6000	@ 0x1770
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d81f      	bhi.n	8000a0e <process_pump_commands+0xe2>
            // 发送泵1移动命令
            if (pump_move_absolute_device(1, target_position) == 0) {
 80009ce:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80009d2:	4619      	mov	r1, r3
 80009d4:	2001      	movs	r0, #1
 80009d6:	f000 f94f 	bl	8000c78 <pump_move_absolute_device>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d112      	bne.n	8000a06 <process_pump_commands+0xda>
                pump1_move_start_time = HAL_GetTick();  // 记录开始时间
 80009e0:	f004 f9aa 	bl	8004d38 <HAL_GetTick>
 80009e4:	4603      	mov	r3, r0
 80009e6:	4a6f      	ldr	r2, [pc, #444]	@ (8000ba4 <process_pump_commands+0x278>)
 80009e8:	6013      	str	r3, [r2, #0]
                // cdc_debug_print("Pump1 move command sent successfully");
                
                // 调试信息：显示目标位置
                char pos_msg[50];
                snprintf(pos_msg, sizeof(pos_msg), "Pump1 moving to position: %d", target_position);
 80009ea:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80009ee:	1d38      	adds	r0, r7, #4
 80009f0:	4a6d      	ldr	r2, [pc, #436]	@ (8000ba8 <process_pump_commands+0x27c>)
 80009f2:	2132      	movs	r1, #50	@ 0x32
 80009f4:	f01d fc5c 	bl	801e2b0 <sniprintf>
                // cdc_debug_print(pos_msg);
                
                // 发送后立即置状态为2
                holding_regs[REG_PUMP1_CONTROL_TRIGGER] = 2;
 80009f8:	4b66      	ldr	r3, [pc, #408]	@ (8000b94 <process_pump_commands+0x268>)
 80009fa:	2202      	movs	r2, #2
 80009fc:	871a      	strh	r2, [r3, #56]	@ 0x38
                last_pump1_control_trigger = 2;
 80009fe:	4b6b      	ldr	r3, [pc, #428]	@ (8000bac <process_pump_commands+0x280>)
 8000a00:	2202      	movs	r2, #2
 8000a02:	601a      	str	r2, [r3, #0]
        holding_regs[REG_PUMP1_STATUS] == 0 && pump1_busy == 0) {  // 错误码为0且不忙
 8000a04:	e022      	b.n	8000a4c <process_pump_commands+0x120>
            } else {
                // cdc_debug_print("Pump1 move command failed");
                // 发送失败也置状态为2
                holding_regs[REG_PUMP1_CONTROL_TRIGGER] = 2;
 8000a06:	4b63      	ldr	r3, [pc, #396]	@ (8000b94 <process_pump_commands+0x268>)
 8000a08:	2202      	movs	r2, #2
 8000a0a:	871a      	strh	r2, [r3, #56]	@ 0x38
        holding_regs[REG_PUMP1_STATUS] == 0 && pump1_busy == 0) {  // 错误码为0且不忙
 8000a0c:	e01e      	b.n	8000a4c <process_pump_commands+0x120>
            }
        } else {
            // cdc_debug_print("Pump1 target position out of range (0-6000)");
            // 参数错误也置状态为2
            holding_regs[REG_PUMP1_CONTROL_TRIGGER] = 2;
 8000a0e:	4b61      	ldr	r3, [pc, #388]	@ (8000b94 <process_pump_commands+0x268>)
 8000a10:	2202      	movs	r2, #2
 8000a12:	871a      	strh	r2, [r3, #56]	@ 0x38
        holding_regs[REG_PUMP1_STATUS] == 0 && pump1_busy == 0) {  // 错误码为0且不忙
 8000a14:	e01a      	b.n	8000a4c <process_pump_commands+0x120>
        }
    } else if (holding_regs[REG_PUMP1_CONTROL_TRIGGER] == 1 && 
 8000a16:	4b5f      	ldr	r3, [pc, #380]	@ (8000b94 <process_pump_commands+0x268>)
 8000a18:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8000a1a:	2b01      	cmp	r3, #1
 8000a1c:	d116      	bne.n	8000a4c <process_pump_commands+0x120>
               (holding_regs[REG_PUMP1_STATUS] != 0 || pump1_busy == 1)) {
 8000a1e:	4b5d      	ldr	r3, [pc, #372]	@ (8000b94 <process_pump_commands+0x268>)
 8000a20:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
    } else if (holding_regs[REG_PUMP1_CONTROL_TRIGGER] == 1 && 
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d103      	bne.n	8000a2e <process_pump_commands+0x102>
               (holding_regs[REG_PUMP1_STATUS] != 0 || pump1_busy == 1)) {
 8000a26:	4b5c      	ldr	r3, [pc, #368]	@ (8000b98 <process_pump_commands+0x26c>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	2b01      	cmp	r3, #1
 8000a2c:	d10e      	bne.n	8000a4c <process_pump_commands+0x120>
        char reject_msg[80];
        snprintf(reject_msg, sizeof(reject_msg), "Pump1 control rejected: error=%d, busy=%d", 
                holding_regs[REG_PUMP1_STATUS], pump1_busy);
 8000a2e:	4b59      	ldr	r3, [pc, #356]	@ (8000b94 <process_pump_commands+0x268>)
 8000a30:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
        snprintf(reject_msg, sizeof(reject_msg), "Pump1 control rejected: error=%d, busy=%d", 
 8000a32:	461a      	mov	r2, r3
 8000a34:	4b58      	ldr	r3, [pc, #352]	@ (8000b98 <process_pump_commands+0x26c>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	1d38      	adds	r0, r7, #4
 8000a3a:	9300      	str	r3, [sp, #0]
 8000a3c:	4613      	mov	r3, r2
 8000a3e:	4a5c      	ldr	r2, [pc, #368]	@ (8000bb0 <process_pump_commands+0x284>)
 8000a40:	2150      	movs	r1, #80	@ 0x50
 8000a42:	f01d fc35 	bl	801e2b0 <sniprintf>
        // cdc_debug_print(reject_msg);
        // 立即置控制位为2，表示无法执行
        holding_regs[REG_PUMP1_CONTROL_TRIGGER] = 2;
 8000a46:	4b53      	ldr	r3, [pc, #332]	@ (8000b94 <process_pump_commands+0x268>)
 8000a48:	2202      	movs	r2, #2
 8000a4a:	871a      	strh	r2, [r3, #56]	@ 0x38
    }
    
    // 处理泵2命令 (类似泵1)
    // 检查泵2初始化触发 (40031) - 只有当错误码为0且不忙时才允许
    if (holding_regs[REG_PUMP2_INIT_TRIGGER] == 1 && 
 8000a4c:	4b51      	ldr	r3, [pc, #324]	@ (8000b94 <process_pump_commands+0x268>)
 8000a4e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	d119      	bne.n	8000a88 <process_pump_commands+0x15c>
        holding_regs[REG_PUMP2_STATUS] == 0 && pump2_busy == 0) {  // 错误码为0且不忙
 8000a54:	4b4f      	ldr	r3, [pc, #316]	@ (8000b94 <process_pump_commands+0x268>)
 8000a56:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
    if (holding_regs[REG_PUMP2_INIT_TRIGGER] == 1 && 
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d114      	bne.n	8000a88 <process_pump_commands+0x15c>
        holding_regs[REG_PUMP2_STATUS] == 0 && pump2_busy == 0) {  // 错误码为0且不忙
 8000a5e:	4b55      	ldr	r3, [pc, #340]	@ (8000bb4 <process_pump_commands+0x288>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d110      	bne.n	8000a88 <process_pump_commands+0x15c>
        // cdc_debug_print("Pump2 initialization triggered (idle & no error)");
        
        // 发送泵2初始化命令
        if (pump_init_device(2) == 0) {
 8000a66:	2002      	movs	r0, #2
 8000a68:	f000 f8f8 	bl	8000c5c <pump_init_device>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d106      	bne.n	8000a80 <process_pump_commands+0x154>
            // cdc_debug_print("Pump2 init command sent successfully");
            // 发送后立即置状态为2
            holding_regs[REG_PUMP2_INIT_TRIGGER] = 2;
 8000a72:	4b48      	ldr	r3, [pc, #288]	@ (8000b94 <process_pump_commands+0x268>)
 8000a74:	2202      	movs	r2, #2
 8000a76:	87da      	strh	r2, [r3, #62]	@ 0x3e
            last_pump2_init_trigger = 2;
 8000a78:	4b4f      	ldr	r3, [pc, #316]	@ (8000bb8 <process_pump_commands+0x28c>)
 8000a7a:	2202      	movs	r2, #2
 8000a7c:	601a      	str	r2, [r3, #0]
        if (pump_init_device(2) == 0) {
 8000a7e:	e020      	b.n	8000ac2 <process_pump_commands+0x196>
        } else {
            // cdc_debug_print("Pump2 init command failed");
            // 发送失败也置状态为2
            holding_regs[REG_PUMP2_INIT_TRIGGER] = 2;
 8000a80:	4b44      	ldr	r3, [pc, #272]	@ (8000b94 <process_pump_commands+0x268>)
 8000a82:	2202      	movs	r2, #2
 8000a84:	87da      	strh	r2, [r3, #62]	@ 0x3e
        if (pump_init_device(2) == 0) {
 8000a86:	e01c      	b.n	8000ac2 <process_pump_commands+0x196>
        }
    } else if (holding_regs[REG_PUMP2_INIT_TRIGGER] == 1 && 
 8000a88:	4b42      	ldr	r3, [pc, #264]	@ (8000b94 <process_pump_commands+0x268>)
 8000a8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d118      	bne.n	8000ac2 <process_pump_commands+0x196>
               (holding_regs[REG_PUMP2_STATUS] != 0 || pump2_busy == 1)) {
 8000a90:	4b40      	ldr	r3, [pc, #256]	@ (8000b94 <process_pump_commands+0x268>)
 8000a92:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
    } else if (holding_regs[REG_PUMP2_INIT_TRIGGER] == 1 && 
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d103      	bne.n	8000aa2 <process_pump_commands+0x176>
               (holding_regs[REG_PUMP2_STATUS] != 0 || pump2_busy == 1)) {
 8000a9a:	4b46      	ldr	r3, [pc, #280]	@ (8000bb4 <process_pump_commands+0x288>)
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	2b01      	cmp	r3, #1
 8000aa0:	d10f      	bne.n	8000ac2 <process_pump_commands+0x196>
        char reject_msg[80];
        snprintf(reject_msg, sizeof(reject_msg), "Pump2 init rejected: error=%d, busy=%d", 
                holding_regs[REG_PUMP2_STATUS], pump2_busy);
 8000aa2:	4b3c      	ldr	r3, [pc, #240]	@ (8000b94 <process_pump_commands+0x268>)
 8000aa4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
        snprintf(reject_msg, sizeof(reject_msg), "Pump2 init rejected: error=%d, busy=%d", 
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	4b42      	ldr	r3, [pc, #264]	@ (8000bb4 <process_pump_commands+0x288>)
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	1d38      	adds	r0, r7, #4
 8000ab0:	9300      	str	r3, [sp, #0]
 8000ab2:	4613      	mov	r3, r2
 8000ab4:	4a41      	ldr	r2, [pc, #260]	@ (8000bbc <process_pump_commands+0x290>)
 8000ab6:	2150      	movs	r1, #80	@ 0x50
 8000ab8:	f01d fbfa 	bl	801e2b0 <sniprintf>
        // cdc_debug_print(reject_msg);
        // 立即置初始化位为2，表示无法执行
        holding_regs[REG_PUMP2_INIT_TRIGGER] = 2;
 8000abc:	4b35      	ldr	r3, [pc, #212]	@ (8000b94 <process_pump_commands+0x268>)
 8000abe:	2202      	movs	r2, #2
 8000ac0:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    
    // 检查泵2控制触发 (40033) - 只有当错误码为0且不忙时才允许
    if (holding_regs[REG_PUMP2_CONTROL_TRIGGER] == 1 && 
 8000ac2:	4b34      	ldr	r3, [pc, #208]	@ (8000b94 <process_pump_commands+0x268>)
 8000ac4:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	d13a      	bne.n	8000b42 <process_pump_commands+0x216>
        holding_regs[REG_PUMP2_STATUS] == 0 && pump2_busy == 0) {  // 错误码为0且不忙
 8000acc:	4b31      	ldr	r3, [pc, #196]	@ (8000b94 <process_pump_commands+0x268>)
 8000ace:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
    if (holding_regs[REG_PUMP2_CONTROL_TRIGGER] == 1 && 
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d135      	bne.n	8000b42 <process_pump_commands+0x216>
        holding_regs[REG_PUMP2_STATUS] == 0 && pump2_busy == 0) {  // 错误码为0且不忙
 8000ad6:	4b37      	ldr	r3, [pc, #220]	@ (8000bb4 <process_pump_commands+0x288>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d131      	bne.n	8000b42 <process_pump_commands+0x216>
            // cdc_debug_print("Pump2 control triggered (idle & no error)");
            
            // 获取目标位置 (40032)
            uint16_t target_position = holding_regs[REG_PUMP2_ABS_POSITION];
 8000ade:	4b2d      	ldr	r3, [pc, #180]	@ (8000b94 <process_pump_commands+0x268>)
 8000ae0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000ae4:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
            
            // 验证目标位置范围 (0-6000)
            if (target_position <= 6000) {
 8000ae8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8000aec:	f241 7270 	movw	r2, #6000	@ 0x1770
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d821      	bhi.n	8000b38 <process_pump_commands+0x20c>
                // 发送泵2移动命令
                if (pump_move_absolute_device(2, target_position) == 0) {
 8000af4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8000af8:	4619      	mov	r1, r3
 8000afa:	2002      	movs	r0, #2
 8000afc:	f000 f8bc 	bl	8000c78 <pump_move_absolute_device>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d113      	bne.n	8000b2e <process_pump_commands+0x202>
                    pump2_move_start_time = HAL_GetTick();  // 记录开始时间
 8000b06:	f004 f917 	bl	8004d38 <HAL_GetTick>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	4a2c      	ldr	r2, [pc, #176]	@ (8000bc0 <process_pump_commands+0x294>)
 8000b0e:	6013      	str	r3, [r2, #0]
                    // cdc_debug_print("Pump2 move command sent successfully");
                    
                    // 调试信息：显示目标位置
                    char pos_msg[50];
                    snprintf(pos_msg, sizeof(pos_msg), "Pump2 moving to position: %d", target_position);
 8000b10:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8000b14:	1d38      	adds	r0, r7, #4
 8000b16:	4a2b      	ldr	r2, [pc, #172]	@ (8000bc4 <process_pump_commands+0x298>)
 8000b18:	2132      	movs	r1, #50	@ 0x32
 8000b1a:	f01d fbc9 	bl	801e2b0 <sniprintf>
                    // cdc_debug_print(pos_msg);
                    
                    // 发送后立即置状态为2
                    holding_regs[REG_PUMP2_CONTROL_TRIGGER] = 2;
 8000b1e:	4b1d      	ldr	r3, [pc, #116]	@ (8000b94 <process_pump_commands+0x268>)
 8000b20:	2202      	movs	r2, #2
 8000b22:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
                    last_pump2_control_trigger = 2;
 8000b26:	4b28      	ldr	r3, [pc, #160]	@ (8000bc8 <process_pump_commands+0x29c>)
 8000b28:	2202      	movs	r2, #2
 8000b2a:	601a      	str	r2, [r3, #0]
        holding_regs[REG_PUMP2_STATUS] == 0 && pump2_busy == 0) {  // 错误码为0且不忙
 8000b2c:	e028      	b.n	8000b80 <process_pump_commands+0x254>
                } else {
                    // cdc_debug_print("Pump2 move command failed");
                    // 发送失败也置状态为2
                    holding_regs[REG_PUMP2_CONTROL_TRIGGER] = 2;
 8000b2e:	4b19      	ldr	r3, [pc, #100]	@ (8000b94 <process_pump_commands+0x268>)
 8000b30:	2202      	movs	r2, #2
 8000b32:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
        holding_regs[REG_PUMP2_STATUS] == 0 && pump2_busy == 0) {  // 错误码为0且不忙
 8000b36:	e023      	b.n	8000b80 <process_pump_commands+0x254>
                }
            } else {
                // cdc_debug_print("Pump2 target position out of range (0-6000)");
                // 参数错误也置状态为2
                holding_regs[REG_PUMP2_CONTROL_TRIGGER] = 2;
 8000b38:	4b16      	ldr	r3, [pc, #88]	@ (8000b94 <process_pump_commands+0x268>)
 8000b3a:	2202      	movs	r2, #2
 8000b3c:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
        holding_regs[REG_PUMP2_STATUS] == 0 && pump2_busy == 0) {  // 错误码为0且不忙
 8000b40:	e01e      	b.n	8000b80 <process_pump_commands+0x254>
            }
    } else if (holding_regs[REG_PUMP2_CONTROL_TRIGGER] == 1 && 
 8000b42:	4b14      	ldr	r3, [pc, #80]	@ (8000b94 <process_pump_commands+0x268>)
 8000b44:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d119      	bne.n	8000b80 <process_pump_commands+0x254>
               (holding_regs[REG_PUMP2_STATUS] != 0 || pump2_busy == 1)) {
 8000b4c:	4b11      	ldr	r3, [pc, #68]	@ (8000b94 <process_pump_commands+0x268>)
 8000b4e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
    } else if (holding_regs[REG_PUMP2_CONTROL_TRIGGER] == 1 && 
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d103      	bne.n	8000b5e <process_pump_commands+0x232>
               (holding_regs[REG_PUMP2_STATUS] != 0 || pump2_busy == 1)) {
 8000b56:	4b17      	ldr	r3, [pc, #92]	@ (8000bb4 <process_pump_commands+0x288>)
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	2b01      	cmp	r3, #1
 8000b5c:	d110      	bne.n	8000b80 <process_pump_commands+0x254>
        char reject_msg[80];
        snprintf(reject_msg, sizeof(reject_msg), "Pump2 control rejected: error=%d, busy=%d", 
                holding_regs[REG_PUMP2_STATUS], pump2_busy);
 8000b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8000b94 <process_pump_commands+0x268>)
 8000b60:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
        snprintf(reject_msg, sizeof(reject_msg), "Pump2 control rejected: error=%d, busy=%d", 
 8000b64:	461a      	mov	r2, r3
 8000b66:	4b13      	ldr	r3, [pc, #76]	@ (8000bb4 <process_pump_commands+0x288>)
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	1d38      	adds	r0, r7, #4
 8000b6c:	9300      	str	r3, [sp, #0]
 8000b6e:	4613      	mov	r3, r2
 8000b70:	4a16      	ldr	r2, [pc, #88]	@ (8000bcc <process_pump_commands+0x2a0>)
 8000b72:	2150      	movs	r1, #80	@ 0x50
 8000b74:	f01d fb9c 	bl	801e2b0 <sniprintf>
        // cdc_debug_print(reject_msg);
        // 立即置控制位为2，表示无法执行
        holding_regs[REG_PUMP2_CONTROL_TRIGGER] = 2;
 8000b78:	4b06      	ldr	r3, [pc, #24]	@ (8000b94 <process_pump_commands+0x268>)
 8000b7a:	2202      	movs	r2, #2
 8000b7c:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
    }
    
    // 更新泵状态（检查是否完成移动）
    pump_update_status(1);  // 更新泵1状态
 8000b80:	2001      	movs	r0, #1
 8000b82:	f000 f88d 	bl	8000ca0 <pump_update_status>
    pump_update_status(2);  // 更新泵2状态
 8000b86:	2002      	movs	r0, #2
 8000b88:	f000 f88a 	bl	8000ca0 <pump_update_status>
}
 8000b8c:	bf00      	nop
 8000b8e:	3758      	adds	r7, #88	@ 0x58
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	200006c0 	.word	0x200006c0
 8000b98:	20000224 	.word	0x20000224
 8000b9c:	20000194 	.word	0x20000194
 8000ba0:	0801f738 	.word	0x0801f738
 8000ba4:	2000022c 	.word	0x2000022c
 8000ba8:	0801f760 	.word	0x0801f760
 8000bac:	20000198 	.word	0x20000198
 8000bb0:	0801f780 	.word	0x0801f780
 8000bb4:	20000225 	.word	0x20000225
 8000bb8:	2000019c 	.word	0x2000019c
 8000bbc:	0801f7ac 	.word	0x0801f7ac
 8000bc0:	20000230 	.word	0x20000230
 8000bc4:	0801f7d4 	.word	0x0801f7d4
 8000bc8:	200001a0 	.word	0x200001a0
 8000bcc:	0801f7f4 	.word	0x0801f7f4

08000bd0 <update_sensor_data>:

/**
  * @brief  更新传感器数据 (只读寄存器)
  * @retval None
  */
static void update_sensor_data(void) {
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
    // TODO: 在这里添加传感器数据更新业务代码
    
    // 示例1：更新舵机当前角度 (40017-40022，每个角度占用1个寄存器)
    // 注意：舵机位置已在servo_update_status中更新，这里做周期性验证
    static uint32_t servo_read_counter = 0;
    if (servo_read_counter % 10 == 0 && !servo_moving) {  // 每1秒更新一次，且不在移动时
 8000bd4:	4b1b      	ldr	r3, [pc, #108]	@ (8000c44 <update_sensor_data+0x74>)
 8000bd6:	6819      	ldr	r1, [r3, #0]
 8000bd8:	4b1b      	ldr	r3, [pc, #108]	@ (8000c48 <update_sensor_data+0x78>)
 8000bda:	fba3 2301 	umull	r2, r3, r3, r1
 8000bde:	08da      	lsrs	r2, r3, #3
 8000be0:	4613      	mov	r3, r2
 8000be2:	009b      	lsls	r3, r3, #2
 8000be4:	4413      	add	r3, r2
 8000be6:	005b      	lsls	r3, r3, #1
 8000be8:	1aca      	subs	r2, r1, r3
 8000bea:	2a00      	cmp	r2, #0
 8000bec:	d11d      	bne.n	8000c2a <update_sensor_data+0x5a>
 8000bee:	4b17      	ldr	r3, [pc, #92]	@ (8000c4c <update_sensor_data+0x7c>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d119      	bne.n	8000c2a <update_sensor_data+0x5a>
        // 周期性读取舵机位置进行验证
        servo_read_all_positions();
 8000bf6:	f000 f9e9 	bl	8000fcc <servo_read_all_positions>
        // 更新当前角度寄存器 (40017-40022)
        holding_regs[REG_CURRENT_ANGLE1] = servo_current_positions[0];
 8000bfa:	4b15      	ldr	r3, [pc, #84]	@ (8000c50 <update_sensor_data+0x80>)
 8000bfc:	881a      	ldrh	r2, [r3, #0]
 8000bfe:	4b15      	ldr	r3, [pc, #84]	@ (8000c54 <update_sensor_data+0x84>)
 8000c00:	845a      	strh	r2, [r3, #34]	@ 0x22
        holding_regs[REG_CURRENT_ANGLE2] = servo_current_positions[1];
 8000c02:	4b13      	ldr	r3, [pc, #76]	@ (8000c50 <update_sensor_data+0x80>)
 8000c04:	885a      	ldrh	r2, [r3, #2]
 8000c06:	4b13      	ldr	r3, [pc, #76]	@ (8000c54 <update_sensor_data+0x84>)
 8000c08:	849a      	strh	r2, [r3, #36]	@ 0x24
        holding_regs[REG_CURRENT_ANGLE3] = servo_current_positions[2];
 8000c0a:	4b11      	ldr	r3, [pc, #68]	@ (8000c50 <update_sensor_data+0x80>)
 8000c0c:	889a      	ldrh	r2, [r3, #4]
 8000c0e:	4b11      	ldr	r3, [pc, #68]	@ (8000c54 <update_sensor_data+0x84>)
 8000c10:	84da      	strh	r2, [r3, #38]	@ 0x26
        holding_regs[REG_CURRENT_ANGLE4] = servo_current_positions[3];
 8000c12:	4b0f      	ldr	r3, [pc, #60]	@ (8000c50 <update_sensor_data+0x80>)
 8000c14:	88da      	ldrh	r2, [r3, #6]
 8000c16:	4b0f      	ldr	r3, [pc, #60]	@ (8000c54 <update_sensor_data+0x84>)
 8000c18:	851a      	strh	r2, [r3, #40]	@ 0x28
        holding_regs[REG_CURRENT_ANGLE5] = servo_current_positions[4];
 8000c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8000c50 <update_sensor_data+0x80>)
 8000c1c:	891a      	ldrh	r2, [r3, #8]
 8000c1e:	4b0d      	ldr	r3, [pc, #52]	@ (8000c54 <update_sensor_data+0x84>)
 8000c20:	855a      	strh	r2, [r3, #42]	@ 0x2a
        holding_regs[REG_CURRENT_ANGLE6] = servo_current_positions[5];
 8000c22:	4b0b      	ldr	r3, [pc, #44]	@ (8000c50 <update_sensor_data+0x80>)
 8000c24:	895a      	ldrh	r2, [r3, #10]
 8000c26:	4b0b      	ldr	r3, [pc, #44]	@ (8000c54 <update_sensor_data+0x84>)
 8000c28:	859a      	strh	r2, [r3, #44]	@ 0x2c
    }
    servo_read_counter++;
 8000c2a:	4b06      	ldr	r3, [pc, #24]	@ (8000c44 <update_sensor_data+0x74>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	3301      	adds	r3, #1
 8000c30:	4a04      	ldr	r2, [pc, #16]	@ (8000c44 <update_sensor_data+0x74>)
 8000c32:	6013      	str	r3, [r2, #0]
        /*
        pump_get_status_device(1);
        pump_get_status_device(2);
        */
    }
    pump_read_counter++;
 8000c34:	4b08      	ldr	r3, [pc, #32]	@ (8000c58 <update_sensor_data+0x88>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	3301      	adds	r3, #1
 8000c3a:	4a07      	ldr	r2, [pc, #28]	@ (8000c58 <update_sensor_data+0x88>)
 8000c3c:	6013      	str	r3, [r2, #0]
        uint8_t object_detected = gpio_read_object_sensor();
        holding_regs[REG_OBJECT_DETECTION] = object_detected ? 2 : 1;  // 1=无物体；2=有
    }
    detection_read_counter++;
    */
}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	20000248 	.word	0x20000248
 8000c48:	cccccccd 	.word	0xcccccccd
 8000c4c:	20000234 	.word	0x20000234
 8000c50:	2000023c 	.word	0x2000023c
 8000c54:	200006c0 	.word	0x200006c0
 8000c58:	2000024c 	.word	0x2000024c

08000c5c <pump_init_device>:
/**
  * @brief  初始化指定泵
  * @param  pump_id: 泵ID (1或2)
  * @retval 0: 成功, -1: 失败
  */
static int pump_init_device(uint8_t pump_id) {
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	71fb      	strb	r3, [r7, #7]
    return pump_init(pump_id);
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f003 f9ff 	bl	800406c <pump_init>
 8000c6e:	4603      	mov	r3, r0
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <pump_move_absolute_device>:
  * @brief  泵移动到绝对位置
  * @param  pump_id: 泵ID (1或2)
  * @param  position: 目标位置 (0-6000步)
  * @retval 0: 成功, -1: 失败
  */
static int pump_move_absolute_device(uint8_t pump_id, uint16_t position) {
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	460a      	mov	r2, r1
 8000c82:	71fb      	strb	r3, [r7, #7]
 8000c84:	4613      	mov	r3, r2
 8000c86:	80bb      	strh	r3, [r7, #4]
    return pump_move_absolute(pump_id, position);
 8000c88:	79fb      	ldrb	r3, [r7, #7]
 8000c8a:	88ba      	ldrh	r2, [r7, #4]
 8000c8c:	4611      	mov	r1, r2
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f003 f9fe 	bl	8004090 <pump_move_absolute>
 8000c94:	4603      	mov	r3, r0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
	...

08000ca0 <pump_update_status>:
/**
  * @brief  更新泵状态 - 使用实际的DT协议查询
  * @param  pump_id: 泵ID (1或2)
  * @retval None
  */
static void pump_update_status(uint8_t pump_id) {
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b0e4      	sub	sp, #400	@ 0x190
 8000ca4:	af02      	add	r7, sp, #8
 8000ca6:	4602      	mov	r2, r0
 8000ca8:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8000cac:	f2a3 1381 	subw	r3, r3, #385	@ 0x181
 8000cb0:	701a      	strb	r2, [r3, #0]
    static uint32_t last_update_time1 = 0;  // 泵1的时间控制
    static uint32_t last_update_time2 = 0;  // 泵2的时间控制
    uint32_t current_time = HAL_GetTick();
 8000cb2:	f004 f841 	bl	8004d38 <HAL_GetTick>
 8000cb6:	f8c7 0184 	str.w	r0, [r7, #388]	@ 0x184
    
    // 根据泵ID选择对应的时间控制变量
    uint32_t* last_time_ptr = (pump_id == 1) ? &last_update_time1 : &last_update_time2;
 8000cba:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8000cbe:	f2a3 1381 	subw	r3, r3, #385	@ 0x181
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d101      	bne.n	8000ccc <pump_update_status+0x2c>
 8000cc8:	4b8f      	ldr	r3, [pc, #572]	@ (8000f08 <pump_update_status+0x268>)
 8000cca:	e000      	b.n	8000cce <pump_update_status+0x2e>
 8000ccc:	4b8f      	ldr	r3, [pc, #572]	@ (8000f0c <pump_update_status+0x26c>)
 8000cce:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
    
    // 降低查询频率，每1秒查询一次
    if (current_time - *last_time_ptr < 1000) {
 8000cd2:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 8000cdc:	1ad3      	subs	r3, r2, r3
 8000cde:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000ce2:	f0c0 810b 	bcc.w	8000efc <pump_update_status+0x25c>
        return;
    }
    *last_time_ptr = current_time;
 8000ce6:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8000cea:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 8000cee:	601a      	str	r2, [r3, #0]
    
    char error_response[256];
    int current_position;
    
    if (pump_id == 1) {
 8000cf0:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8000cf4:	f2a3 1381 	subw	r3, r3, #385	@ 0x181
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d17a      	bne.n	8000df4 <pump_update_status+0x154>
        // 查询错误码 (/1QR)
        if (pump_query_error(1, error_response) == 0) {
 8000cfe:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000d02:	4619      	mov	r1, r3
 8000d04:	2001      	movs	r0, #1
 8000d06:	f003 f9dd 	bl	80040c4 <pump_query_error>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d144      	bne.n	8000d9a <pump_update_status+0xfa>
            // 从响应中解析状态字节
            // 响应格式：FF /0`3000 03 0D 0A
            // 第3个字节（'`'字符）是状态字节的HEX值
            char* status_byte_ptr = strchr(error_response, '`');
 8000d10:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000d14:	2160      	movs	r1, #96	@ 0x60
 8000d16:	4618      	mov	r0, r3
 8000d18:	f01d fb84 	bl	801e424 <strchr>
 8000d1c:	f8c7 0174 	str.w	r0, [r7, #372]	@ 0x174
            if (status_byte_ptr != NULL) {
 8000d20:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d03f      	beq.n	8000da8 <pump_update_status+0x108>
                // 提取状态字节
                uint8_t status_byte = (uint8_t)(*status_byte_ptr);
 8000d28:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	f887 3173 	strb.w	r3, [r7, #371]	@ 0x173
                
                // 使用枚举解析状态字节，转换为错误编号
                PumpErrorCode_t error_code = pump_parse_status_byte(status_byte);
 8000d32:	f897 3173 	ldrb.w	r3, [r7, #371]	@ 0x173
 8000d36:	4618      	mov	r0, r3
 8000d38:	f003 fa7a 	bl	8004230 <pump_parse_status_byte>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	f887 3172 	strb.w	r3, [r7, #370]	@ 0x172
                PumpBusyState_t busy_state = pump_parse_busy_state(status_byte);
 8000d42:	f897 3173 	ldrb.w	r3, [r7, #371]	@ 0x173
 8000d46:	4618      	mov	r0, r3
 8000d48:	f003 fac2 	bl	80042d0 <pump_parse_busy_state>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	f887 3171 	strb.w	r3, [r7, #369]	@ 0x171
                
                // 直接将错误码写入状态寄存器
                holding_regs[REG_PUMP1_STATUS] = (uint16_t)error_code;
 8000d52:	f897 3172 	ldrb.w	r3, [r7, #370]	@ 0x172
 8000d56:	b29a      	uxth	r2, r3
 8000d58:	4b6d      	ldr	r3, [pc, #436]	@ (8000f10 <pump_update_status+0x270>)
 8000d5a:	875a      	strh	r2, [r3, #58]	@ 0x3a
                
                // 更新内部忙状态逻辑
                pump1_busy = (busy_state == PUMP_STATE_BUSY) ? 1 : 0;
 8000d5c:	f897 3171 	ldrb.w	r3, [r7, #369]	@ 0x171
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	bf0c      	ite	eq
 8000d64:	2301      	moveq	r3, #1
 8000d66:	2300      	movne	r3, #0
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	4b69      	ldr	r3, [pc, #420]	@ (8000f14 <pump_update_status+0x274>)
 8000d6e:	701a      	strb	r2, [r3, #0]
                
                char debug_msg[100];
                snprintf(debug_msg, sizeof(debug_msg), "Pump1: byte=0x%02X, error=%d, busy=%s", 
 8000d70:	f897 1173 	ldrb.w	r1, [r7, #371]	@ 0x173
 8000d74:	f897 3172 	ldrb.w	r3, [r7, #370]	@ 0x172
 8000d78:	f897 2171 	ldrb.w	r2, [r7, #369]	@ 0x171
 8000d7c:	2a01      	cmp	r2, #1
 8000d7e:	d101      	bne.n	8000d84 <pump_update_status+0xe4>
 8000d80:	4a65      	ldr	r2, [pc, #404]	@ (8000f18 <pump_update_status+0x278>)
 8000d82:	e000      	b.n	8000d86 <pump_update_status+0xe6>
 8000d84:	4a65      	ldr	r2, [pc, #404]	@ (8000f1c <pump_update_status+0x27c>)
 8000d86:	f107 0008 	add.w	r0, r7, #8
 8000d8a:	9201      	str	r2, [sp, #4]
 8000d8c:	9300      	str	r3, [sp, #0]
 8000d8e:	460b      	mov	r3, r1
 8000d90:	4a63      	ldr	r2, [pc, #396]	@ (8000f20 <pump_update_status+0x280>)
 8000d92:	2164      	movs	r1, #100	@ 0x64
 8000d94:	f01d fa8c 	bl	801e2b0 <sniprintf>
 8000d98:	e006      	b.n	8000da8 <pump_update_status+0x108>
                // cdc_debug_print(debug_msg);
            }
        } else {
            // cdc_debug_print("Pump1 query error failed");
            // 通信失败，设置为通信错误状态
            holding_regs[REG_PUMP1_STATUS] = 999;  // 999 = 通信失败
 8000d9a:	4b5d      	ldr	r3, [pc, #372]	@ (8000f10 <pump_update_status+0x270>)
 8000d9c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000da0:	875a      	strh	r2, [r3, #58]	@ 0x3a
            pump1_busy = 1;  // 通信失败时认为忙碌（安全考虑）
 8000da2:	4b5c      	ldr	r3, [pc, #368]	@ (8000f14 <pump_update_status+0x274>)
 8000da4:	2201      	movs	r2, #1
 8000da6:	701a      	strb	r2, [r3, #0]
        }
        
        // 查询当前活塞位置 (/1?4R)
        if (pump_query_position(1, &current_position) == 0) {
 8000da8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000dac:	4619      	mov	r1, r3
 8000dae:	2001      	movs	r0, #1
 8000db0:	f003 f99c 	bl	80040ec <pump_query_position>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	f040 80a1 	bne.w	8000efe <pump_update_status+0x25e>
            pump1_current_pos = current_position;
 8000dbc:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8000dc0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	b29a      	uxth	r2, r3
 8000dc8:	4b56      	ldr	r3, [pc, #344]	@ (8000f24 <pump_update_status+0x284>)
 8000dca:	801a      	strh	r2, [r3, #0]
            holding_regs[REG_PUMP1_CURRENT_POSITION] = current_position;
 8000dcc:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8000dd0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	b29a      	uxth	r2, r3
 8000dd8:	4b4d      	ldr	r3, [pc, #308]	@ (8000f10 <pump_update_status+0x270>)
 8000dda:	879a      	strh	r2, [r3, #60]	@ 0x3c
            
            char pos_msg[50];
            snprintf(pos_msg, sizeof(pos_msg), "Pump1 position: %d", current_position);
 8000ddc:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8000de0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f107 0008 	add.w	r0, r7, #8
 8000dea:	4a4f      	ldr	r2, [pc, #316]	@ (8000f28 <pump_update_status+0x288>)
 8000dec:	2132      	movs	r1, #50	@ 0x32
 8000dee:	f01d fa5f 	bl	801e2b0 <sniprintf>
 8000df2:	e084      	b.n	8000efe <pump_update_status+0x25e>
            // cdc_debug_print(pos_msg);
        } else {
            // cdc_debug_print("Pump1 position query failed");
        }
        
    } else if (pump_id == 2) {
 8000df4:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8000df8:	f2a3 1381 	subw	r3, r3, #385	@ 0x181
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	2b02      	cmp	r3, #2
 8000e00:	d17d      	bne.n	8000efe <pump_update_status+0x25e>
        // 查询错误码 (/2QR)
        if (pump_query_error(2, error_response) == 0) {
 8000e02:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000e06:	4619      	mov	r1, r3
 8000e08:	2002      	movs	r0, #2
 8000e0a:	f003 f95b 	bl	80040c4 <pump_query_error>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d145      	bne.n	8000ea0 <pump_update_status+0x200>
            // 从响应中解析状态字节
            // 响应格式：FF /0`3000 03 0D 0A
            // 第3个字节（'`'字符）是状态字节的HEX值
            char* status_byte_ptr = strchr(error_response, '`');
 8000e14:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000e18:	2160      	movs	r1, #96	@ 0x60
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f01d fb02 	bl	801e424 <strchr>
 8000e20:	f8c7 017c 	str.w	r0, [r7, #380]	@ 0x17c
            if (status_byte_ptr != NULL) {
 8000e24:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d041      	beq.n	8000eb0 <pump_update_status+0x210>
                // 提取状态字节
                uint8_t status_byte = (uint8_t)(*status_byte_ptr);
 8000e2c:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	f887 317b 	strb.w	r3, [r7, #379]	@ 0x17b
                
                // 使用枚举解析状态字节，转换为错误编号
                PumpErrorCode_t error_code = pump_parse_status_byte(status_byte);
 8000e36:	f897 317b 	ldrb.w	r3, [r7, #379]	@ 0x17b
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f003 f9f8 	bl	8004230 <pump_parse_status_byte>
 8000e40:	4603      	mov	r3, r0
 8000e42:	f887 317a 	strb.w	r3, [r7, #378]	@ 0x17a
                PumpBusyState_t busy_state = pump_parse_busy_state(status_byte);
 8000e46:	f897 317b 	ldrb.w	r3, [r7, #379]	@ 0x17b
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f003 fa40 	bl	80042d0 <pump_parse_busy_state>
 8000e50:	4603      	mov	r3, r0
 8000e52:	f887 3179 	strb.w	r3, [r7, #377]	@ 0x179
                
                // 直接将错误码写入状态寄存器
                holding_regs[REG_PUMP2_STATUS] = (uint16_t)error_code;
 8000e56:	f897 317a 	ldrb.w	r3, [r7, #378]	@ 0x17a
 8000e5a:	b29a      	uxth	r2, r3
 8000e5c:	4b2c      	ldr	r3, [pc, #176]	@ (8000f10 <pump_update_status+0x270>)
 8000e5e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
                
                // 更新内部忙状态逻辑
                pump2_busy = (busy_state == PUMP_STATE_BUSY) ? 1 : 0;
 8000e62:	f897 3179 	ldrb.w	r3, [r7, #377]	@ 0x179
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	bf0c      	ite	eq
 8000e6a:	2301      	moveq	r3, #1
 8000e6c:	2300      	movne	r3, #0
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	461a      	mov	r2, r3
 8000e72:	4b2e      	ldr	r3, [pc, #184]	@ (8000f2c <pump_update_status+0x28c>)
 8000e74:	701a      	strb	r2, [r3, #0]
                
                char debug_msg[100];
                snprintf(debug_msg, sizeof(debug_msg), "Pump2: byte=0x%02X, error=%d, busy=%s", 
 8000e76:	f897 117b 	ldrb.w	r1, [r7, #379]	@ 0x17b
 8000e7a:	f897 317a 	ldrb.w	r3, [r7, #378]	@ 0x17a
 8000e7e:	f897 2179 	ldrb.w	r2, [r7, #377]	@ 0x179
 8000e82:	2a01      	cmp	r2, #1
 8000e84:	d101      	bne.n	8000e8a <pump_update_status+0x1ea>
 8000e86:	4a24      	ldr	r2, [pc, #144]	@ (8000f18 <pump_update_status+0x278>)
 8000e88:	e000      	b.n	8000e8c <pump_update_status+0x1ec>
 8000e8a:	4a24      	ldr	r2, [pc, #144]	@ (8000f1c <pump_update_status+0x27c>)
 8000e8c:	f107 0008 	add.w	r0, r7, #8
 8000e90:	9201      	str	r2, [sp, #4]
 8000e92:	9300      	str	r3, [sp, #0]
 8000e94:	460b      	mov	r3, r1
 8000e96:	4a26      	ldr	r2, [pc, #152]	@ (8000f30 <pump_update_status+0x290>)
 8000e98:	2164      	movs	r1, #100	@ 0x64
 8000e9a:	f01d fa09 	bl	801e2b0 <sniprintf>
 8000e9e:	e007      	b.n	8000eb0 <pump_update_status+0x210>
                // cdc_debug_print(debug_msg);
            }
        } else {
            // cdc_debug_print("Pump2 UART RX timeout");
            // 通信失败，设置为通信错误状态
            holding_regs[REG_PUMP2_STATUS] = 999;  // 999 = 通信失败
 8000ea0:	4b1b      	ldr	r3, [pc, #108]	@ (8000f10 <pump_update_status+0x270>)
 8000ea2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ea6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
            pump2_busy = 1;  // 通信失败时认为忙碌（安全考虑）
 8000eaa:	4b20      	ldr	r3, [pc, #128]	@ (8000f2c <pump_update_status+0x28c>)
 8000eac:	2201      	movs	r2, #1
 8000eae:	701a      	strb	r2, [r3, #0]
        }
        
        // 查询当前活塞位置 (/2?4R)
        if (pump_query_position(2, &current_position) == 0) {
 8000eb0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	2002      	movs	r0, #2
 8000eb8:	f003 f918 	bl	80040ec <pump_query_position>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d11d      	bne.n	8000efe <pump_update_status+0x25e>
            pump2_current_pos = current_position;
 8000ec2:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8000ec6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	b29a      	uxth	r2, r3
 8000ece:	4b19      	ldr	r3, [pc, #100]	@ (8000f34 <pump_update_status+0x294>)
 8000ed0:	801a      	strh	r2, [r3, #0]
            holding_regs[REG_PUMP2_CURRENT_POSITION] = current_position;
 8000ed2:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8000ed6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	b29a      	uxth	r2, r3
 8000ede:	4b0c      	ldr	r3, [pc, #48]	@ (8000f10 <pump_update_status+0x270>)
 8000ee0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
            
            char pos_msg[50];
            snprintf(pos_msg, sizeof(pos_msg), "Pump2 position: %d", current_position);
 8000ee4:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8000ee8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f107 0008 	add.w	r0, r7, #8
 8000ef2:	4a11      	ldr	r2, [pc, #68]	@ (8000f38 <pump_update_status+0x298>)
 8000ef4:	2132      	movs	r1, #50	@ 0x32
 8000ef6:	f01d f9db 	bl	801e2b0 <sniprintf>
 8000efa:	e000      	b.n	8000efe <pump_update_status+0x25e>
        return;
 8000efc:	bf00      	nop
            // cdc_debug_print(pos_msg);
        } else {
            // cdc_debug_print("Pump2 position query failed");
        }
    }
}
 8000efe:	f507 77c4 	add.w	r7, r7, #392	@ 0x188
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	20000250 	.word	0x20000250
 8000f0c:	20000254 	.word	0x20000254
 8000f10:	200006c0 	.word	0x200006c0
 8000f14:	20000224 	.word	0x20000224
 8000f18:	0801f820 	.word	0x0801f820
 8000f1c:	0801f824 	.word	0x0801f824
 8000f20:	0801f828 	.word	0x0801f828
 8000f24:	20000226 	.word	0x20000226
 8000f28:	0801f850 	.word	0x0801f850
 8000f2c:	20000225 	.word	0x20000225
 8000f30:	0801f864 	.word	0x0801f864
 8000f34:	20000228 	.word	0x20000228
 8000f38:	0801f88c 	.word	0x0801f88c

08000f3c <servo_move_all>:
  * @brief  控制所有舵机移动到目标位置
  * @param  target_angles: 6个舵机的目标角度数组
  * @param  move_time: 移动时间(ms)
  * @retval None
  */
static void servo_move_all(uint16_t* target_angles, uint32_t move_time) {
 8000f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f3e:	b0ab      	sub	sp, #172	@ 0xac
 8000f40:	af06      	add	r7, sp, #24
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	6039      	str	r1, [r7, #0]
    // 使用多舵机同时移动命令 - 更高效的方式
    uint8_t servo_ids[6] = {1, 2, 3, 4, 5, 6};
 8000f46:	4a1f      	ldr	r2, [pc, #124]	@ (8000fc4 <servo_move_all+0x88>)
 8000f48:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8000f4c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f50:	6018      	str	r0, [r3, #0]
 8000f52:	3304      	adds	r3, #4
 8000f54:	8019      	strh	r1, [r3, #0]
    BusServo_MultMove(servo_ids, target_angles, 6, (uint16_t)move_time);
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	b29b      	uxth	r3, r3
 8000f5a:	f107 0088 	add.w	r0, r7, #136	@ 0x88
 8000f5e:	2206      	movs	r2, #6
 8000f60:	6879      	ldr	r1, [r7, #4]
 8000f62:	f000 fa6f 	bl	8001444 <BusServo_MultMove>
    
    // 调试信息：显示发送的命令
    char move_msg[128];
    snprintf(move_msg, sizeof(move_msg), "MultMove sent: [%d,%d,%d,%d,%d,%d] time:%lums", 
            target_angles[0], target_angles[1], target_angles[2], 
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	881b      	ldrh	r3, [r3, #0]
    snprintf(move_msg, sizeof(move_msg), "MultMove sent: [%d,%d,%d,%d,%d,%d] time:%lums", 
 8000f6a:	469c      	mov	ip, r3
            target_angles[0], target_angles[1], target_angles[2], 
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	3302      	adds	r3, #2
 8000f70:	881b      	ldrh	r3, [r3, #0]
    snprintf(move_msg, sizeof(move_msg), "MultMove sent: [%d,%d,%d,%d,%d,%d] time:%lums", 
 8000f72:	461a      	mov	r2, r3
            target_angles[0], target_angles[1], target_angles[2], 
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	3304      	adds	r3, #4
 8000f78:	881b      	ldrh	r3, [r3, #0]
    snprintf(move_msg, sizeof(move_msg), "MultMove sent: [%d,%d,%d,%d,%d,%d] time:%lums", 
 8000f7a:	4619      	mov	r1, r3
            target_angles[3], target_angles[4], target_angles[5], move_time);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	3306      	adds	r3, #6
 8000f80:	881b      	ldrh	r3, [r3, #0]
    snprintf(move_msg, sizeof(move_msg), "MultMove sent: [%d,%d,%d,%d,%d,%d] time:%lums", 
 8000f82:	461c      	mov	r4, r3
            target_angles[3], target_angles[4], target_angles[5], move_time);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	3308      	adds	r3, #8
 8000f88:	881b      	ldrh	r3, [r3, #0]
    snprintf(move_msg, sizeof(move_msg), "MultMove sent: [%d,%d,%d,%d,%d,%d] time:%lums", 
 8000f8a:	461d      	mov	r5, r3
            target_angles[3], target_angles[4], target_angles[5], move_time);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	330a      	adds	r3, #10
 8000f90:	881b      	ldrh	r3, [r3, #0]
    snprintf(move_msg, sizeof(move_msg), "MultMove sent: [%d,%d,%d,%d,%d,%d] time:%lums", 
 8000f92:	461e      	mov	r6, r3
 8000f94:	f107 0008 	add.w	r0, r7, #8
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	9305      	str	r3, [sp, #20]
 8000f9c:	9604      	str	r6, [sp, #16]
 8000f9e:	9503      	str	r5, [sp, #12]
 8000fa0:	9402      	str	r4, [sp, #8]
 8000fa2:	9101      	str	r1, [sp, #4]
 8000fa4:	9200      	str	r2, [sp, #0]
 8000fa6:	4663      	mov	r3, ip
 8000fa8:	4a07      	ldr	r2, [pc, #28]	@ (8000fc8 <servo_move_all+0x8c>)
 8000faa:	2180      	movs	r1, #128	@ 0x80
 8000fac:	f01d f980 	bl	801e2b0 <sniprintf>
    cdc_debug_print(move_msg);
 8000fb0:	f107 0308 	add.w	r3, r7, #8
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff fb97 	bl	80006e8 <cdc_debug_print>
        snprintf(move_msg, sizeof(move_msg), "Servo%d -> %d (time:%lums) sent", 
                servo_id, target_angles[servo_id-1], move_time);
        cdc_debug_print(move_msg);
    }
    */
}
 8000fba:	bf00      	nop
 8000fbc:	3794      	adds	r7, #148	@ 0x94
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	0801f8d0 	.word	0x0801f8d0
 8000fc8:	0801f8a0 	.word	0x0801f8a0

08000fcc <servo_read_all_positions>:

/**
  * @brief  读取所有舵机的当前位置（统一发送统一接收）
  * @retval None
  */
static void servo_read_all_positions(void) {
 8000fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fce:	b0c7      	sub	sp, #284	@ 0x11c
 8000fd0:	af06      	add	r7, sp, #24
    static uint8_t servo_ids[6] = {1, 2, 3, 4, 5, 6};
    static uint16_t positions[6];
    static uint8_t read_state = 0;  // 0=空闲, 1=已启动读取, 2=等待结果
    
    if (read_state == 0) {
 8000fd2:	4b69      	ldr	r3, [pc, #420]	@ (8001178 <servo_read_all_positions+0x1ac>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d108      	bne.n	8000fec <servo_read_all_positions+0x20>
        // 启动非阻塞读取
        BusServo_MultPosRead(servo_ids, 6, positions);
 8000fda:	4a68      	ldr	r2, [pc, #416]	@ (800117c <servo_read_all_positions+0x1b0>)
 8000fdc:	2106      	movs	r1, #6
 8000fde:	4868      	ldr	r0, [pc, #416]	@ (8001180 <servo_read_all_positions+0x1b4>)
 8000fe0:	f000 fae2 	bl	80015a8 <BusServo_MultPosRead>
        read_state = 1;
 8000fe4:	4b64      	ldr	r3, [pc, #400]	@ (8001178 <servo_read_all_positions+0x1ac>)
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	701a      	strb	r2, [r3, #0]
            case 3:  // 正在接收中
                // 继续等待，不做任何操作
                break;
        }
    }
}
 8000fea:	e0bf      	b.n	800116c <servo_read_all_positions+0x1a0>
        uint8_t status = BusServo_CheckReadStatus();
 8000fec:	f000 fbb4 	bl	8001758 <BusServo_CheckReadStatus>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	f887 30fb 	strb.w	r3, [r7, #251]	@ 0xfb
        switch(status) {
 8000ff6:	f897 30fb 	ldrb.w	r3, [r7, #251]	@ 0xfb
 8000ffa:	2b03      	cmp	r3, #3
 8000ffc:	f200 80b6 	bhi.w	800116c <servo_read_all_positions+0x1a0>
 8001000:	a201      	add	r2, pc, #4	@ (adr r2, 8001008 <servo_read_all_positions+0x3c>)
 8001002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001006:	bf00      	nop
 8001008:	08001019 	.word	0x08001019
 800100c:	08001027 	.word	0x08001027
 8001010:	0800115d 	.word	0x0800115d
 8001014:	0800116b 	.word	0x0800116b
                cdc_debug_print("Servo: Unexpected idle state");
 8001018:	485a      	ldr	r0, [pc, #360]	@ (8001184 <servo_read_all_positions+0x1b8>)
 800101a:	f7ff fb65 	bl	80006e8 <cdc_debug_print>
                read_state = 0;
 800101e:	4b56      	ldr	r3, [pc, #344]	@ (8001178 <servo_read_all_positions+0x1ac>)
 8001020:	2200      	movs	r2, #0
 8001022:	701a      	strb	r2, [r3, #0]
                break;
 8001024:	e0a2      	b.n	800116c <servo_read_all_positions+0x1a0>
                cdc_debug_print("Servo positions read with DMA success");
 8001026:	4858      	ldr	r0, [pc, #352]	@ (8001188 <servo_read_all_positions+0x1bc>)
 8001028:	f7ff fb5e 	bl	80006e8 <cdc_debug_print>
                        positions[0], positions[1], positions[2], positions[3], positions[4], positions[5]);
 800102c:	4b53      	ldr	r3, [pc, #332]	@ (800117c <servo_read_all_positions+0x1b0>)
 800102e:	881b      	ldrh	r3, [r3, #0]
                snprintf(pos_debug, sizeof(pos_debug), "Raw read result: [%d,%d,%d,%d,%d,%d]", 
 8001030:	461e      	mov	r6, r3
                        positions[0], positions[1], positions[2], positions[3], positions[4], positions[5]);
 8001032:	4b52      	ldr	r3, [pc, #328]	@ (800117c <servo_read_all_positions+0x1b0>)
 8001034:	885b      	ldrh	r3, [r3, #2]
                snprintf(pos_debug, sizeof(pos_debug), "Raw read result: [%d,%d,%d,%d,%d,%d]", 
 8001036:	461a      	mov	r2, r3
                        positions[0], positions[1], positions[2], positions[3], positions[4], positions[5]);
 8001038:	4b50      	ldr	r3, [pc, #320]	@ (800117c <servo_read_all_positions+0x1b0>)
 800103a:	889b      	ldrh	r3, [r3, #4]
                snprintf(pos_debug, sizeof(pos_debug), "Raw read result: [%d,%d,%d,%d,%d,%d]", 
 800103c:	4619      	mov	r1, r3
                        positions[0], positions[1], positions[2], positions[3], positions[4], positions[5]);
 800103e:	4b4f      	ldr	r3, [pc, #316]	@ (800117c <servo_read_all_positions+0x1b0>)
 8001040:	88db      	ldrh	r3, [r3, #6]
                snprintf(pos_debug, sizeof(pos_debug), "Raw read result: [%d,%d,%d,%d,%d,%d]", 
 8001042:	461c      	mov	r4, r3
                        positions[0], positions[1], positions[2], positions[3], positions[4], positions[5]);
 8001044:	4b4d      	ldr	r3, [pc, #308]	@ (800117c <servo_read_all_positions+0x1b0>)
 8001046:	891b      	ldrh	r3, [r3, #8]
                snprintf(pos_debug, sizeof(pos_debug), "Raw read result: [%d,%d,%d,%d,%d,%d]", 
 8001048:	461d      	mov	r5, r3
                        positions[0], positions[1], positions[2], positions[3], positions[4], positions[5]);
 800104a:	4b4c      	ldr	r3, [pc, #304]	@ (800117c <servo_read_all_positions+0x1b0>)
 800104c:	895b      	ldrh	r3, [r3, #10]
                snprintf(pos_debug, sizeof(pos_debug), "Raw read result: [%d,%d,%d,%d,%d,%d]", 
 800104e:	f107 0078 	add.w	r0, r7, #120	@ 0x78
 8001052:	9304      	str	r3, [sp, #16]
 8001054:	9503      	str	r5, [sp, #12]
 8001056:	9402      	str	r4, [sp, #8]
 8001058:	9101      	str	r1, [sp, #4]
 800105a:	9200      	str	r2, [sp, #0]
 800105c:	4633      	mov	r3, r6
 800105e:	4a4b      	ldr	r2, [pc, #300]	@ (800118c <servo_read_all_positions+0x1c0>)
 8001060:	2180      	movs	r1, #128	@ 0x80
 8001062:	f01d f925 	bl	801e2b0 <sniprintf>
                cdc_debug_print(pos_debug);
 8001066:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff fb3c 	bl	80006e8 <cdc_debug_print>
                for (int i = 0; i < 6; i++) {
 8001070:	2300      	movs	r3, #0
 8001072:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001076:	e031      	b.n	80010dc <servo_read_all_positions+0x110>
                    if (positions[i] <= 1000) {
 8001078:	4a40      	ldr	r2, [pc, #256]	@ (800117c <servo_read_all_positions+0x1b0>)
 800107a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800107e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001082:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001086:	d80a      	bhi.n	800109e <servo_read_all_positions+0xd2>
                        servo_current_positions[i] = positions[i];
 8001088:	4a3c      	ldr	r2, [pc, #240]	@ (800117c <servo_read_all_positions+0x1b0>)
 800108a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800108e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001092:	4a3f      	ldr	r2, [pc, #252]	@ (8001190 <servo_read_all_positions+0x1c4>)
 8001094:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001098:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800109c:	e019      	b.n	80010d2 <servo_read_all_positions+0x106>
                        snprintf(warning, sizeof(warning), "Servo%d invalid position %d, keeping %d", 
 800109e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80010a2:	1c5a      	adds	r2, r3, #1
                                i+1, positions[i], servo_current_positions[i]);
 80010a4:	4935      	ldr	r1, [pc, #212]	@ (800117c <servo_read_all_positions+0x1b0>)
 80010a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80010aa:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
                        snprintf(warning, sizeof(warning), "Servo%d invalid position %d, keeping %d", 
 80010ae:	461c      	mov	r4, r3
                                i+1, positions[i], servo_current_positions[i]);
 80010b0:	4937      	ldr	r1, [pc, #220]	@ (8001190 <servo_read_all_positions+0x1c4>)
 80010b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80010b6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
                        snprintf(warning, sizeof(warning), "Servo%d invalid position %d, keeping %d", 
 80010ba:	4638      	mov	r0, r7
 80010bc:	9301      	str	r3, [sp, #4]
 80010be:	9400      	str	r4, [sp, #0]
 80010c0:	4613      	mov	r3, r2
 80010c2:	4a34      	ldr	r2, [pc, #208]	@ (8001194 <servo_read_all_positions+0x1c8>)
 80010c4:	213c      	movs	r1, #60	@ 0x3c
 80010c6:	f01d f8f3 	bl	801e2b0 <sniprintf>
                        cdc_debug_print(warning);
 80010ca:	463b      	mov	r3, r7
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff fb0b 	bl	80006e8 <cdc_debug_print>
                for (int i = 0; i < 6; i++) {
 80010d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80010d6:	3301      	adds	r3, #1
 80010d8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80010dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80010e0:	2b05      	cmp	r3, #5
 80010e2:	ddc9      	ble.n	8001078 <servo_read_all_positions+0xac>
                holding_regs[REG_CURRENT_ANGLE1] = servo_current_positions[0];
 80010e4:	4b2a      	ldr	r3, [pc, #168]	@ (8001190 <servo_read_all_positions+0x1c4>)
 80010e6:	881a      	ldrh	r2, [r3, #0]
 80010e8:	4b2b      	ldr	r3, [pc, #172]	@ (8001198 <servo_read_all_positions+0x1cc>)
 80010ea:	845a      	strh	r2, [r3, #34]	@ 0x22
                holding_regs[REG_CURRENT_ANGLE2] = servo_current_positions[1];
 80010ec:	4b28      	ldr	r3, [pc, #160]	@ (8001190 <servo_read_all_positions+0x1c4>)
 80010ee:	885a      	ldrh	r2, [r3, #2]
 80010f0:	4b29      	ldr	r3, [pc, #164]	@ (8001198 <servo_read_all_positions+0x1cc>)
 80010f2:	849a      	strh	r2, [r3, #36]	@ 0x24
                holding_regs[REG_CURRENT_ANGLE3] = servo_current_positions[2];
 80010f4:	4b26      	ldr	r3, [pc, #152]	@ (8001190 <servo_read_all_positions+0x1c4>)
 80010f6:	889a      	ldrh	r2, [r3, #4]
 80010f8:	4b27      	ldr	r3, [pc, #156]	@ (8001198 <servo_read_all_positions+0x1cc>)
 80010fa:	84da      	strh	r2, [r3, #38]	@ 0x26
                holding_regs[REG_CURRENT_ANGLE4] = servo_current_positions[3];
 80010fc:	4b24      	ldr	r3, [pc, #144]	@ (8001190 <servo_read_all_positions+0x1c4>)
 80010fe:	88da      	ldrh	r2, [r3, #6]
 8001100:	4b25      	ldr	r3, [pc, #148]	@ (8001198 <servo_read_all_positions+0x1cc>)
 8001102:	851a      	strh	r2, [r3, #40]	@ 0x28
                holding_regs[REG_CURRENT_ANGLE5] = servo_current_positions[4];
 8001104:	4b22      	ldr	r3, [pc, #136]	@ (8001190 <servo_read_all_positions+0x1c4>)
 8001106:	891a      	ldrh	r2, [r3, #8]
 8001108:	4b23      	ldr	r3, [pc, #140]	@ (8001198 <servo_read_all_positions+0x1cc>)
 800110a:	855a      	strh	r2, [r3, #42]	@ 0x2a
                holding_regs[REG_CURRENT_ANGLE6] = servo_current_positions[5];
 800110c:	4b20      	ldr	r3, [pc, #128]	@ (8001190 <servo_read_all_positions+0x1c4>)
 800110e:	895a      	ldrh	r2, [r3, #10]
 8001110:	4b21      	ldr	r3, [pc, #132]	@ (8001198 <servo_read_all_positions+0x1cc>)
 8001112:	859a      	strh	r2, [r3, #44]	@ 0x2c
                        holding_regs[REG_CURRENT_ANGLE1], holding_regs[REG_CURRENT_ANGLE2], holding_regs[REG_CURRENT_ANGLE3],
 8001114:	4b20      	ldr	r3, [pc, #128]	@ (8001198 <servo_read_all_positions+0x1cc>)
 8001116:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
                snprintf(reg_update_msg, sizeof(reg_update_msg), "Updated registers: [%d,%d,%d,%d,%d,%d]", 
 8001118:	461e      	mov	r6, r3
                        holding_regs[REG_CURRENT_ANGLE1], holding_regs[REG_CURRENT_ANGLE2], holding_regs[REG_CURRENT_ANGLE3],
 800111a:	4b1f      	ldr	r3, [pc, #124]	@ (8001198 <servo_read_all_positions+0x1cc>)
 800111c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
                snprintf(reg_update_msg, sizeof(reg_update_msg), "Updated registers: [%d,%d,%d,%d,%d,%d]", 
 800111e:	461a      	mov	r2, r3
                        holding_regs[REG_CURRENT_ANGLE1], holding_regs[REG_CURRENT_ANGLE2], holding_regs[REG_CURRENT_ANGLE3],
 8001120:	4b1d      	ldr	r3, [pc, #116]	@ (8001198 <servo_read_all_positions+0x1cc>)
 8001122:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
                snprintf(reg_update_msg, sizeof(reg_update_msg), "Updated registers: [%d,%d,%d,%d,%d,%d]", 
 8001124:	4619      	mov	r1, r3
                        holding_regs[REG_CURRENT_ANGLE4], holding_regs[REG_CURRENT_ANGLE5], holding_regs[REG_CURRENT_ANGLE6]);
 8001126:	4b1c      	ldr	r3, [pc, #112]	@ (8001198 <servo_read_all_positions+0x1cc>)
 8001128:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
                snprintf(reg_update_msg, sizeof(reg_update_msg), "Updated registers: [%d,%d,%d,%d,%d,%d]", 
 800112a:	461c      	mov	r4, r3
                        holding_regs[REG_CURRENT_ANGLE4], holding_regs[REG_CURRENT_ANGLE5], holding_regs[REG_CURRENT_ANGLE6]);
 800112c:	4b1a      	ldr	r3, [pc, #104]	@ (8001198 <servo_read_all_positions+0x1cc>)
 800112e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
                snprintf(reg_update_msg, sizeof(reg_update_msg), "Updated registers: [%d,%d,%d,%d,%d,%d]", 
 8001130:	461d      	mov	r5, r3
                        holding_regs[REG_CURRENT_ANGLE4], holding_regs[REG_CURRENT_ANGLE5], holding_regs[REG_CURRENT_ANGLE6]);
 8001132:	4b19      	ldr	r3, [pc, #100]	@ (8001198 <servo_read_all_positions+0x1cc>)
 8001134:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
                snprintf(reg_update_msg, sizeof(reg_update_msg), "Updated registers: [%d,%d,%d,%d,%d,%d]", 
 8001136:	4638      	mov	r0, r7
 8001138:	9304      	str	r3, [sp, #16]
 800113a:	9503      	str	r5, [sp, #12]
 800113c:	9402      	str	r4, [sp, #8]
 800113e:	9101      	str	r1, [sp, #4]
 8001140:	9200      	str	r2, [sp, #0]
 8001142:	4633      	mov	r3, r6
 8001144:	4a15      	ldr	r2, [pc, #84]	@ (800119c <servo_read_all_positions+0x1d0>)
 8001146:	2178      	movs	r1, #120	@ 0x78
 8001148:	f01d f8b2 	bl	801e2b0 <sniprintf>
                cdc_debug_print(reg_update_msg);
 800114c:	463b      	mov	r3, r7
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff faca 	bl	80006e8 <cdc_debug_print>
                read_state = 0;  // 重置状态，准备下次读取
 8001154:	4b08      	ldr	r3, [pc, #32]	@ (8001178 <servo_read_all_positions+0x1ac>)
 8001156:	2200      	movs	r2, #0
 8001158:	701a      	strb	r2, [r3, #0]
                break;
 800115a:	e007      	b.n	800116c <servo_read_all_positions+0x1a0>
                cdc_debug_print("Servo positions read with timeout protection");
 800115c:	4810      	ldr	r0, [pc, #64]	@ (80011a0 <servo_read_all_positions+0x1d4>)
 800115e:	f7ff fac3 	bl	80006e8 <cdc_debug_print>
                read_state = 0;  // 重置状态，准备下次读取
 8001162:	4b05      	ldr	r3, [pc, #20]	@ (8001178 <servo_read_all_positions+0x1ac>)
 8001164:	2200      	movs	r2, #0
 8001166:	701a      	strb	r2, [r3, #0]
                break;
 8001168:	e000      	b.n	800116c <servo_read_all_positions+0x1a0>
                break;
 800116a:	bf00      	nop
}
 800116c:	bf00      	nop
 800116e:	f507 7782 	add.w	r7, r7, #260	@ 0x104
 8001172:	46bd      	mov	sp, r7
 8001174:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001176:	bf00      	nop
 8001178:	20000258 	.word	0x20000258
 800117c:	2000025c 	.word	0x2000025c
 8001180:	20000000 	.word	0x20000000
 8001184:	0801f8d8 	.word	0x0801f8d8
 8001188:	0801f8f8 	.word	0x0801f8f8
 800118c:	0801f920 	.word	0x0801f920
 8001190:	2000023c 	.word	0x2000023c
 8001194:	0801f948 	.word	0x0801f948
 8001198:	200006c0 	.word	0x200006c0
 800119c:	0801f970 	.word	0x0801f970
 80011a0:	0801f998 	.word	0x0801f998

080011a4 <servo_update_status>:

/**
  * @brief  更新舵机状态
  * @retval None
  */
static void servo_update_status(void) {
 80011a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011a6:	b0ab      	sub	sp, #172	@ 0xac
 80011a8:	af06      	add	r7, sp, #24
    if (servo_moving) {
 80011aa:	4b38      	ldr	r3, [pc, #224]	@ (800128c <servo_update_status+0xe8>)
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d068      	beq.n	8001284 <servo_update_status+0xe0>
        uint32_t current_time = HAL_GetTick();
 80011b2:	f003 fdc1 	bl	8004d38 <HAL_GetTick>
 80011b6:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
        uint32_t elapsed_time = current_time - servo_move_start_time;
 80011ba:	4b35      	ldr	r3, [pc, #212]	@ (8001290 <servo_update_status+0xec>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        
        // 获取当前设置的移动时间
        uint32_t expected_move_time = holding_regs[REG_ROTATION_TIME];
 80011c8:	4b32      	ldr	r3, [pc, #200]	@ (8001294 <servo_update_status+0xf0>)
 80011ca:	8a9b      	ldrh	r3, [r3, #20]
 80011cc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
        
        if (expected_move_time == 0) {
 80011d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d103      	bne.n	80011e0 <servo_update_status+0x3c>
            expected_move_time = 1000;  // 默认1秒
 80011d8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011dc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
        }
        
        // 添加500ms缓冲时间，确保舵机完全到位
        uint32_t timeout_time = expected_move_time + 500;
 80011e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80011e4:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80011e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        
        if (elapsed_time >= timeout_time) {
 80011ec:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80011f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d345      	bcc.n	8001284 <servo_update_status+0xe0>
            servo_moving = 0;
 80011f8:	4b24      	ldr	r3, [pc, #144]	@ (800128c <servo_update_status+0xe8>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	701a      	strb	r2, [r3, #0]
            
            // 读取当前位置并更新寄存器
            servo_read_all_positions();
 80011fe:	f7ff fee5 	bl	8000fcc <servo_read_all_positions>
            // 更新当前角度寄存器 (40017-40022)
            holding_regs[REG_CURRENT_ANGLE1] = servo_current_positions[0];
 8001202:	4b25      	ldr	r3, [pc, #148]	@ (8001298 <servo_update_status+0xf4>)
 8001204:	881a      	ldrh	r2, [r3, #0]
 8001206:	4b23      	ldr	r3, [pc, #140]	@ (8001294 <servo_update_status+0xf0>)
 8001208:	845a      	strh	r2, [r3, #34]	@ 0x22
            holding_regs[REG_CURRENT_ANGLE2] = servo_current_positions[1];
 800120a:	4b23      	ldr	r3, [pc, #140]	@ (8001298 <servo_update_status+0xf4>)
 800120c:	885a      	ldrh	r2, [r3, #2]
 800120e:	4b21      	ldr	r3, [pc, #132]	@ (8001294 <servo_update_status+0xf0>)
 8001210:	849a      	strh	r2, [r3, #36]	@ 0x24
            holding_regs[REG_CURRENT_ANGLE3] = servo_current_positions[2];
 8001212:	4b21      	ldr	r3, [pc, #132]	@ (8001298 <servo_update_status+0xf4>)
 8001214:	889a      	ldrh	r2, [r3, #4]
 8001216:	4b1f      	ldr	r3, [pc, #124]	@ (8001294 <servo_update_status+0xf0>)
 8001218:	84da      	strh	r2, [r3, #38]	@ 0x26
            holding_regs[REG_CURRENT_ANGLE4] = servo_current_positions[3];
 800121a:	4b1f      	ldr	r3, [pc, #124]	@ (8001298 <servo_update_status+0xf4>)
 800121c:	88da      	ldrh	r2, [r3, #6]
 800121e:	4b1d      	ldr	r3, [pc, #116]	@ (8001294 <servo_update_status+0xf0>)
 8001220:	851a      	strh	r2, [r3, #40]	@ 0x28
            holding_regs[REG_CURRENT_ANGLE5] = servo_current_positions[4];
 8001222:	4b1d      	ldr	r3, [pc, #116]	@ (8001298 <servo_update_status+0xf4>)
 8001224:	891a      	ldrh	r2, [r3, #8]
 8001226:	4b1b      	ldr	r3, [pc, #108]	@ (8001294 <servo_update_status+0xf0>)
 8001228:	855a      	strh	r2, [r3, #42]	@ 0x2a
            holding_regs[REG_CURRENT_ANGLE6] = servo_current_positions[5];
 800122a:	4b1b      	ldr	r3, [pc, #108]	@ (8001298 <servo_update_status+0xf4>)
 800122c:	895a      	ldrh	r2, [r3, #10]
 800122e:	4b19      	ldr	r3, [pc, #100]	@ (8001294 <servo_update_status+0xf0>)
 8001230:	859a      	strh	r2, [r3, #44]	@ 0x2c
            
            // 转动时间到达后，置状态为2（完成状态，可以重新写1进行新转动）
            holding_regs[REG_ROTATION_TRIGGER] = 2;
 8001232:	4b18      	ldr	r3, [pc, #96]	@ (8001294 <servo_update_status+0xf0>)
 8001234:	2202      	movs	r2, #2
 8001236:	85da      	strh	r2, [r3, #46]	@ 0x2e
            last_rotation_trigger = 2;
 8001238:	4b18      	ldr	r3, [pc, #96]	@ (800129c <servo_update_status+0xf8>)
 800123a:	2202      	movs	r2, #2
 800123c:	601a      	str	r2, [r3, #0]
            
            cdc_debug_print("Servo movement completed, status set to 2 (ready for new command)");
 800123e:	4818      	ldr	r0, [pc, #96]	@ (80012a0 <servo_update_status+0xfc>)
 8001240:	f7ff fa52 	bl	80006e8 <cdc_debug_print>
            
            // 调试信息：显示最终位置
            char final_pos_msg[128];
            snprintf(final_pos_msg, sizeof(final_pos_msg), "Final positions: [%d,%d,%d,%d,%d,%d]", 
                    servo_current_positions[0], servo_current_positions[1], servo_current_positions[2],
 8001244:	4b14      	ldr	r3, [pc, #80]	@ (8001298 <servo_update_status+0xf4>)
 8001246:	881b      	ldrh	r3, [r3, #0]
            snprintf(final_pos_msg, sizeof(final_pos_msg), "Final positions: [%d,%d,%d,%d,%d,%d]", 
 8001248:	461e      	mov	r6, r3
                    servo_current_positions[0], servo_current_positions[1], servo_current_positions[2],
 800124a:	4b13      	ldr	r3, [pc, #76]	@ (8001298 <servo_update_status+0xf4>)
 800124c:	885b      	ldrh	r3, [r3, #2]
            snprintf(final_pos_msg, sizeof(final_pos_msg), "Final positions: [%d,%d,%d,%d,%d,%d]", 
 800124e:	461a      	mov	r2, r3
                    servo_current_positions[0], servo_current_positions[1], servo_current_positions[2],
 8001250:	4b11      	ldr	r3, [pc, #68]	@ (8001298 <servo_update_status+0xf4>)
 8001252:	889b      	ldrh	r3, [r3, #4]
            snprintf(final_pos_msg, sizeof(final_pos_msg), "Final positions: [%d,%d,%d,%d,%d,%d]", 
 8001254:	4619      	mov	r1, r3
                    servo_current_positions[3], servo_current_positions[4], servo_current_positions[5]);
 8001256:	4b10      	ldr	r3, [pc, #64]	@ (8001298 <servo_update_status+0xf4>)
 8001258:	88db      	ldrh	r3, [r3, #6]
            snprintf(final_pos_msg, sizeof(final_pos_msg), "Final positions: [%d,%d,%d,%d,%d,%d]", 
 800125a:	461c      	mov	r4, r3
                    servo_current_positions[3], servo_current_positions[4], servo_current_positions[5]);
 800125c:	4b0e      	ldr	r3, [pc, #56]	@ (8001298 <servo_update_status+0xf4>)
 800125e:	891b      	ldrh	r3, [r3, #8]
            snprintf(final_pos_msg, sizeof(final_pos_msg), "Final positions: [%d,%d,%d,%d,%d,%d]", 
 8001260:	461d      	mov	r5, r3
                    servo_current_positions[3], servo_current_positions[4], servo_current_positions[5]);
 8001262:	4b0d      	ldr	r3, [pc, #52]	@ (8001298 <servo_update_status+0xf4>)
 8001264:	895b      	ldrh	r3, [r3, #10]
            snprintf(final_pos_msg, sizeof(final_pos_msg), "Final positions: [%d,%d,%d,%d,%d,%d]", 
 8001266:	4638      	mov	r0, r7
 8001268:	9304      	str	r3, [sp, #16]
 800126a:	9503      	str	r5, [sp, #12]
 800126c:	9402      	str	r4, [sp, #8]
 800126e:	9101      	str	r1, [sp, #4]
 8001270:	9200      	str	r2, [sp, #0]
 8001272:	4633      	mov	r3, r6
 8001274:	4a0b      	ldr	r2, [pc, #44]	@ (80012a4 <servo_update_status+0x100>)
 8001276:	2180      	movs	r1, #128	@ 0x80
 8001278:	f01d f81a 	bl	801e2b0 <sniprintf>
            cdc_debug_print(final_pos_msg);
 800127c:	463b      	mov	r3, r7
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff fa32 	bl	80006e8 <cdc_debug_print>
        }
    }
}
 8001284:	bf00      	nop
 8001286:	3794      	adds	r7, #148	@ 0x94
 8001288:	46bd      	mov	sp, r7
 800128a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800128c:	20000234 	.word	0x20000234
 8001290:	20000238 	.word	0x20000238
 8001294:	200006c0 	.word	0x200006c0
 8001298:	2000023c 	.word	0x2000023c
 800129c:	2000018c 	.word	0x2000018c
 80012a0:	0801f9c8 	.word	0x0801f9c8
 80012a4:	0801fa0c 	.word	0x0801fa0c

080012a8 <BusServo_SendCmd>:
#include "app_business.h"
#include <string.h>
#include <stdio.h>

// 发送通用指令
void BusServo_SendCmd(uint8_t cmd, uint8_t *params, uint8_t param_cnt) {
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b0f8      	sub	sp, #480	@ 0x1e0
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 80012b2:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80012b6:	6019      	str	r1, [r3, #0]
 80012b8:	4611      	mov	r1, r2
 80012ba:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 80012be:	f2a3 13d9 	subw	r3, r3, #473	@ 0x1d9
 80012c2:	4602      	mov	r2, r0
 80012c4:	701a      	strb	r2, [r3, #0]
 80012c6:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 80012ca:	f5a3 73ed 	sub.w	r3, r3, #474	@ 0x1da
 80012ce:	460a      	mov	r2, r1
 80012d0:	701a      	strb	r2, [r3, #0]
    uint8_t buf[256];  // 缓冲区，足够大
    uint8_t idx = 0;
 80012d2:	2300      	movs	r3, #0
 80012d4:	f887 31df 	strb.w	r3, [r7, #479]	@ 0x1df
    buf[idx++] = 0x55;  // 帧头
 80012d8:	f897 31df 	ldrb.w	r3, [r7, #479]	@ 0x1df
 80012dc:	1c5a      	adds	r2, r3, #1
 80012de:	f887 21df 	strb.w	r2, [r7, #479]	@ 0x1df
 80012e2:	461a      	mov	r2, r3
 80012e4:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 80012e8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80012ec:	2155      	movs	r1, #85	@ 0x55
 80012ee:	5499      	strb	r1, [r3, r2]
    buf[idx++] = 0x55;
 80012f0:	f897 31df 	ldrb.w	r3, [r7, #479]	@ 0x1df
 80012f4:	1c5a      	adds	r2, r3, #1
 80012f6:	f887 21df 	strb.w	r2, [r7, #479]	@ 0x1df
 80012fa:	461a      	mov	r2, r3
 80012fc:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8001300:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001304:	2155      	movs	r1, #85	@ 0x55
 8001306:	5499      	strb	r1, [r3, r2]
    buf[idx++] = param_cnt + 2;  // Length = N + 2
 8001308:	f897 31df 	ldrb.w	r3, [r7, #479]	@ 0x1df
 800130c:	1c5a      	adds	r2, r3, #1
 800130e:	f887 21df 	strb.w	r2, [r7, #479]	@ 0x1df
 8001312:	461a      	mov	r2, r3
 8001314:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8001318:	f5a3 73ed 	sub.w	r3, r3, #474	@ 0x1da
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	3302      	adds	r3, #2
 8001320:	b2d9      	uxtb	r1, r3
 8001322:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8001326:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800132a:	5499      	strb	r1, [r3, r2]
    buf[idx++] = cmd;
 800132c:	f897 31df 	ldrb.w	r3, [r7, #479]	@ 0x1df
 8001330:	1c5a      	adds	r2, r3, #1
 8001332:	f887 21df 	strb.w	r2, [r7, #479]	@ 0x1df
 8001336:	4619      	mov	r1, r3
 8001338:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800133c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001340:	f507 72f0 	add.w	r2, r7, #480	@ 0x1e0
 8001344:	f2a2 12d9 	subw	r2, r2, #473	@ 0x1d9
 8001348:	7812      	ldrb	r2, [r2, #0]
 800134a:	545a      	strb	r2, [r3, r1]
    if (params && param_cnt > 0) {
 800134c:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8001350:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d021      	beq.n	800139e <BusServo_SendCmd+0xf6>
 800135a:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800135e:	f5a3 73ed 	sub.w	r3, r3, #474	@ 0x1da
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d01a      	beq.n	800139e <BusServo_SendCmd+0xf6>
        memcpy(&buf[idx], params, param_cnt);
 8001368:	f897 31df 	ldrb.w	r3, [r7, #479]	@ 0x1df
 800136c:	f107 02d4 	add.w	r2, r7, #212	@ 0xd4
 8001370:	18d0      	adds	r0, r2, r3
 8001372:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8001376:	f5a3 73ed 	sub.w	r3, r3, #474	@ 0x1da
 800137a:	781a      	ldrb	r2, [r3, #0]
 800137c:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8001380:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001384:	6819      	ldr	r1, [r3, #0]
 8001386:	f01d f934 	bl	801e5f2 <memcpy>
        idx += param_cnt;
 800138a:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800138e:	f5a3 73ed 	sub.w	r3, r3, #474	@ 0x1da
 8001392:	f897 21df 	ldrb.w	r2, [r7, #479]	@ 0x1df
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	4413      	add	r3, r2
 800139a:	f887 31df 	strb.w	r3, [r7, #479]	@ 0x1df
    }
    
    // 添加调试信息 - 显示发送的数据
    char debug_msg[200];
    int offset = snprintf(debug_msg, sizeof(debug_msg), "TX Servo: ");
 800139e:	f107 030c 	add.w	r3, r7, #12
 80013a2:	4a25      	ldr	r2, [pc, #148]	@ (8001438 <BusServo_SendCmd+0x190>)
 80013a4:	21c8      	movs	r1, #200	@ 0xc8
 80013a6:	4618      	mov	r0, r3
 80013a8:	f01c ff82 	bl	801e2b0 <sniprintf>
 80013ac:	f8c7 01d8 	str.w	r0, [r7, #472]	@ 0x1d8
    for (int i = 0; i < idx && i < 20; i++) {  // 最多显示20字节
 80013b0:	2300      	movs	r3, #0
 80013b2:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 80013b6:	e01e      	b.n	80013f6 <BusServo_SendCmd+0x14e>
        offset += snprintf(debug_msg + offset, sizeof(debug_msg) - offset, "%02X ", buf[i]);
 80013b8:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 80013bc:	f107 020c 	add.w	r2, r7, #12
 80013c0:	18d0      	adds	r0, r2, r3
 80013c2:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 80013c6:	f1c3 01c8 	rsb	r1, r3, #200	@ 0xc8
 80013ca:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 80013ce:	f5a3 7286 	sub.w	r2, r3, #268	@ 0x10c
 80013d2:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80013d6:	4413      	add	r3, r2
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	4a18      	ldr	r2, [pc, #96]	@ (800143c <BusServo_SendCmd+0x194>)
 80013dc:	f01c ff68 	bl	801e2b0 <sniprintf>
 80013e0:	4602      	mov	r2, r0
 80013e2:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 80013e6:	4413      	add	r3, r2
 80013e8:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
    for (int i = 0; i < idx && i < 20; i++) {  // 最多显示20字节
 80013ec:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80013f0:	3301      	adds	r3, #1
 80013f2:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 80013f6:	f897 31df 	ldrb.w	r3, [r7, #479]	@ 0x1df
 80013fa:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80013fe:	429a      	cmp	r2, r3
 8001400:	da03      	bge.n	800140a <BusServo_SendCmd+0x162>
 8001402:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8001406:	2b13      	cmp	r3, #19
 8001408:	ddd6      	ble.n	80013b8 <BusServo_SendCmd+0x110>
    }
    cdc_debug_print(debug_msg);
 800140a:	f107 030c 	add.w	r3, r7, #12
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff f96a 	bl	80006e8 <cdc_debug_print>
    
    HAL_UART_Transmit(&huart6, buf, idx, HAL_MAX_DELAY);  // 发送
 8001414:	f897 31df 	ldrb.w	r3, [r7, #479]	@ 0x1df
 8001418:	b29a      	uxth	r2, r3
 800141a:	f107 01d4 	add.w	r1, r7, #212	@ 0xd4
 800141e:	f04f 33ff 	mov.w	r3, #4294967295
 8001422:	4807      	ldr	r0, [pc, #28]	@ (8001440 <BusServo_SendCmd+0x198>)
 8001424:	f008 f808 	bl	8009438 <HAL_UART_Transmit>
    
    // 发送完成后短暂延时，让舵机处理命令
    HAL_Delay(10);
 8001428:	200a      	movs	r0, #10
 800142a:	f003 fc91 	bl	8004d50 <HAL_Delay>
}
 800142e:	bf00      	nop
 8001430:	f507 77f0 	add.w	r7, r7, #480	@ 0x1e0
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	0801fa34 	.word	0x0801fa34
 800143c:	0801fa40 	.word	0x0801fa40
 8001440:	200008b0 	.word	0x200008b0

08001444 <BusServo_MultMove>:
    params[5] = (position >> 8) & 0xFF;  // 高8位
    BusServo_SendCmd(CMD_SERVO_MOVE, params, 6);
}

// 控制多舵机同时转动
void BusServo_MultMove(uint8_t *ids, uint16_t *positions, uint8_t servo_count, uint16_t time) {
 8001444:	b590      	push	{r4, r7, lr}
 8001446:	b0c7      	sub	sp, #284	@ 0x11c
 8001448:	af00      	add	r7, sp, #0
 800144a:	f507 748c 	add.w	r4, r7, #280	@ 0x118
 800144e:	f5a4 7486 	sub.w	r4, r4, #268	@ 0x10c
 8001452:	6020      	str	r0, [r4, #0]
 8001454:	f507 708c 	add.w	r0, r7, #280	@ 0x118
 8001458:	f5a0 7088 	sub.w	r0, r0, #272	@ 0x110
 800145c:	6001      	str	r1, [r0, #0]
 800145e:	4619      	mov	r1, r3
 8001460:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001464:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8001468:	701a      	strb	r2, [r3, #0]
 800146a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800146e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001472:	460a      	mov	r2, r1
 8001474:	801a      	strh	r2, [r3, #0]
    uint8_t params[256];  // 足够大的缓冲区
    uint8_t idx = 0;
 8001476:	2300      	movs	r3, #0
 8001478:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    params[idx++] = servo_count;    // 舵机数量
 800147c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8001480:	1c5a      	adds	r2, r3, #1
 8001482:	f887 2117 	strb.w	r2, [r7, #279]	@ 0x117
 8001486:	4619      	mov	r1, r3
 8001488:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800148c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001490:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8001494:	f2a2 1211 	subw	r2, r2, #273	@ 0x111
 8001498:	7812      	ldrb	r2, [r2, #0]
 800149a:	545a      	strb	r2, [r3, r1]
    params[idx++] = time & 0xFF;    // 时间低8位  
 800149c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80014a0:	1c5a      	adds	r2, r3, #1
 80014a2:	f887 2117 	strb.w	r2, [r7, #279]	@ 0x117
 80014a6:	461a      	mov	r2, r3
 80014a8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80014ac:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80014b0:	881b      	ldrh	r3, [r3, #0]
 80014b2:	b2d9      	uxtb	r1, r3
 80014b4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80014b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80014bc:	5499      	strb	r1, [r3, r2]
    params[idx++] = (time >> 8) & 0xFF;  // 时间高8位
 80014be:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80014c2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80014c6:	881b      	ldrh	r3, [r3, #0]
 80014c8:	0a1b      	lsrs	r3, r3, #8
 80014ca:	b299      	uxth	r1, r3
 80014cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80014d0:	1c5a      	adds	r2, r3, #1
 80014d2:	f887 2117 	strb.w	r2, [r7, #279]	@ 0x117
 80014d6:	461a      	mov	r2, r3
 80014d8:	b2c9      	uxtb	r1, r1
 80014da:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80014de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80014e2:	5499      	strb	r1, [r3, r2]
    
    // 添加每个舵机的ID和位置
    for (uint8_t i = 0; i < servo_count; i++) {
 80014e4:	2300      	movs	r3, #0
 80014e6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80014ea:	e046      	b.n	800157a <BusServo_MultMove+0x136>
        params[idx++] = ids[i];     // 舵机ID
 80014ec:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80014f0:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80014f4:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80014f8:	6812      	ldr	r2, [r2, #0]
 80014fa:	441a      	add	r2, r3
 80014fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8001500:	1c59      	adds	r1, r3, #1
 8001502:	f887 1117 	strb.w	r1, [r7, #279]	@ 0x117
 8001506:	4619      	mov	r1, r3
 8001508:	7812      	ldrb	r2, [r2, #0]
 800150a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800150e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001512:	545a      	strb	r2, [r3, r1]
        params[idx++] = positions[i] & 0xFF;        // 位置低8位
 8001514:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 800151e:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001522:	6812      	ldr	r2, [r2, #0]
 8001524:	4413      	add	r3, r2
 8001526:	8819      	ldrh	r1, [r3, #0]
 8001528:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800152c:	1c5a      	adds	r2, r3, #1
 800152e:	f887 2117 	strb.w	r2, [r7, #279]	@ 0x117
 8001532:	461a      	mov	r2, r3
 8001534:	b2c9      	uxtb	r1, r1
 8001536:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800153a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800153e:	5499      	strb	r1, [r3, r2]
        params[idx++] = (positions[i] >> 8) & 0xFF; // 位置高8位
 8001540:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 800154a:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 800154e:	6812      	ldr	r2, [r2, #0]
 8001550:	4413      	add	r3, r2
 8001552:	881b      	ldrh	r3, [r3, #0]
 8001554:	0a1b      	lsrs	r3, r3, #8
 8001556:	b299      	uxth	r1, r3
 8001558:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800155c:	1c5a      	adds	r2, r3, #1
 800155e:	f887 2117 	strb.w	r2, [r7, #279]	@ 0x117
 8001562:	461a      	mov	r2, r3
 8001564:	b2c9      	uxtb	r1, r1
 8001566:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800156a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800156e:	5499      	strb	r1, [r3, r2]
    for (uint8_t i = 0; i < servo_count; i++) {
 8001570:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8001574:	3301      	adds	r3, #1
 8001576:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800157a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800157e:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8001582:	f897 2116 	ldrb.w	r2, [r7, #278]	@ 0x116
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	429a      	cmp	r2, r3
 800158a:	d3af      	bcc.n	80014ec <BusServo_MultMove+0xa8>
    }
    
    BusServo_SendCmd(CMD_SERVO_MOVE, params, idx);
 800158c:	f897 2117 	ldrb.w	r2, [r7, #279]	@ 0x117
 8001590:	f107 0314 	add.w	r3, r7, #20
 8001594:	4619      	mov	r1, r3
 8001596:	2003      	movs	r0, #3
 8001598:	f7ff fe86 	bl	80012a8 <BusServo_SendCmd>
}
 800159c:	bf00      	nop
 800159e:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd90      	pop	{r4, r7, pc}
	...

080015a8 <BusServo_MultPosRead>:
static uint32_t batch_start_time = 0;
static uint16_t batch_positions[6];  // 存储6个舵机的位置
static uint8_t batch_received_count = 0;  // 已接收到的舵机数量

// 读取多舵机位置（非阻塞版本）
void BusServo_MultPosRead(uint8_t *ids, uint8_t id_cnt, uint16_t *positions) {
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b0dc      	sub	sp, #368	@ 0x170
 80015ac:	af02      	add	r7, sp, #8
 80015ae:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80015b2:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80015b6:	6018      	str	r0, [r3, #0]
 80015b8:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80015bc:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80015c6:	f2a3 135d 	subw	r3, r3, #349	@ 0x15d
 80015ca:	460a      	mov	r2, r1
 80015cc:	701a      	strb	r2, [r3, #0]
    uint8_t params[256];
    params[0] = id_cnt;
 80015ce:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80015d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80015d6:	f507 72b4 	add.w	r2, r7, #360	@ 0x168
 80015da:	f2a2 125d 	subw	r2, r2, #349	@ 0x15d
 80015de:	7812      	ldrb	r2, [r2, #0]
 80015e0:	701a      	strb	r2, [r3, #0]
    memcpy(&params[1], ids, id_cnt);
 80015e2:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80015e6:	f2a3 135d 	subw	r3, r3, #349	@ 0x15d
 80015ea:	7819      	ldrb	r1, [r3, #0]
 80015ec:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80015f0:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80015f4:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 80015f8:	1c50      	adds	r0, r2, #1
 80015fa:	460a      	mov	r2, r1
 80015fc:	6819      	ldr	r1, [r3, #0]
 80015fe:	f01c fff8 	bl	801e5f2 <memcpy>
    
    // 保存参数供后续处理使用
    servo_ids_ptr = ids;
 8001602:	4a4a      	ldr	r2, [pc, #296]	@ (800172c <BusServo_MultPosRead+0x184>)
 8001604:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001608:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	6013      	str	r3, [r2, #0]
    servo_id_count = id_cnt;
 8001610:	4a47      	ldr	r2, [pc, #284]	@ (8001730 <BusServo_MultPosRead+0x188>)
 8001612:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001616:	f2a3 135d 	subw	r3, r3, #349	@ 0x15d
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	7013      	strb	r3, [r2, #0]
    servo_positions_ptr = positions;
 800161e:	4a45      	ldr	r2, [pc, #276]	@ (8001734 <BusServo_MultPosRead+0x18c>)
 8001620:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001624:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	6013      	str	r3, [r2, #0]
    
    // 初始化位置数组为默认值9999（表示读取失败）
    for (uint8_t i = 0; i < id_cnt; i++) {
 800162c:	2300      	movs	r3, #0
 800162e:	f887 3167 	strb.w	r3, [r7, #359]	@ 0x167
 8001632:	e010      	b.n	8001656 <BusServo_MultPosRead+0xae>
        positions[i] = 9999;  // 默认位置9999代表读取失败
 8001634:	f897 3167 	ldrb.w	r3, [r7, #359]	@ 0x167
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	f507 72b4 	add.w	r2, r7, #360	@ 0x168
 800163e:	f5a2 72b2 	sub.w	r2, r2, #356	@ 0x164
 8001642:	6812      	ldr	r2, [r2, #0]
 8001644:	4413      	add	r3, r2
 8001646:	f242 720f 	movw	r2, #9999	@ 0x270f
 800164a:	801a      	strh	r2, [r3, #0]
    for (uint8_t i = 0; i < id_cnt; i++) {
 800164c:	f897 3167 	ldrb.w	r3, [r7, #359]	@ 0x167
 8001650:	3301      	adds	r3, #1
 8001652:	f887 3167 	strb.w	r3, [r7, #359]	@ 0x167
 8001656:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800165a:	f2a3 135d 	subw	r3, r3, #349	@ 0x15d
 800165e:	f897 2167 	ldrb.w	r2, [r7, #359]	@ 0x167
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	429a      	cmp	r2, r3
 8001666:	d3e5      	bcc.n	8001634 <BusServo_MultPosRead+0x8c>
    }
    
    // 发送读取命令
    BusServo_SendCmd(CMD_MULT_SERVO_POS_READ, params, id_cnt + 1);
 8001668:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800166c:	f2a3 135d 	subw	r3, r3, #349	@ 0x15d
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	3301      	adds	r3, #1
 8001674:	b2da      	uxtb	r2, r3
 8001676:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800167a:	4619      	mov	r1, r3
 800167c:	2015      	movs	r0, #21
 800167e:	f7ff fe13 	bl	80012a8 <BusServo_SendCmd>
    
    // 简单策略：固定接收舵机数据
    servo_expected_len = id_cnt * 3 + 5;  // 按请求的舵机数量计算最大长度
 8001682:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001686:	f2a3 135d 	subw	r3, r3, #349	@ 0x15d
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	461a      	mov	r2, r3
 800168e:	0052      	lsls	r2, r2, #1
 8001690:	4413      	add	r3, r2
 8001692:	b2db      	uxtb	r3, r3
 8001694:	3305      	adds	r3, #5
 8001696:	b2da      	uxtb	r2, r3
 8001698:	4b27      	ldr	r3, [pc, #156]	@ (8001738 <BusServo_MultPosRead+0x190>)
 800169a:	701a      	strb	r2, [r3, #0]
    
    char len_msg[80];
    snprintf(len_msg, sizeof(len_msg), "Expecting %d bytes for %d servos", servo_expected_len, id_cnt);
 800169c:	4b26      	ldr	r3, [pc, #152]	@ (8001738 <BusServo_MultPosRead+0x190>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	461a      	mov	r2, r3
 80016a2:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80016a6:	f2a3 135d 	subw	r3, r3, #349	@ 0x15d
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	f107 0014 	add.w	r0, r7, #20
 80016b0:	9300      	str	r3, [sp, #0]
 80016b2:	4613      	mov	r3, r2
 80016b4:	4a21      	ldr	r2, [pc, #132]	@ (800173c <BusServo_MultPosRead+0x194>)
 80016b6:	2150      	movs	r1, #80	@ 0x50
 80016b8:	f01c fdfa 	bl	801e2b0 <sniprintf>
    cdc_debug_print(len_msg);
 80016bc:	f107 0314 	add.w	r3, r7, #20
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff f811 	bl	80006e8 <cdc_debug_print>
    
    // 清零接收缓冲区
    memset(servo_rx_buf, 0, sizeof(servo_rx_buf));
 80016c6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016ca:	2100      	movs	r1, #0
 80016cc:	481c      	ldr	r0, [pc, #112]	@ (8001740 <BusServo_MultPosRead+0x198>)
 80016ce:	f01c fe92 	bl	801e3f6 <memset>
    
    // 确保UART DMA处于空闲状态
    if (huart6.RxState != HAL_UART_STATE_READY) {
 80016d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001744 <BusServo_MultPosRead+0x19c>)
 80016d4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	2b20      	cmp	r3, #32
 80016dc:	d005      	beq.n	80016ea <BusServo_MultPosRead+0x142>
        HAL_UART_DMAStop(&huart6);
 80016de:	4819      	ldr	r0, [pc, #100]	@ (8001744 <BusServo_MultPosRead+0x19c>)
 80016e0:	f007 fff1 	bl	80096c6 <HAL_UART_DMAStop>
        HAL_Delay(5);
 80016e4:	2005      	movs	r0, #5
 80016e6:	f003 fb33 	bl	8004d50 <HAL_Delay>
    }
    
    // 启动DMA接收固定长度，允许较长的超时时间
    if (HAL_UART_Receive_DMA(&huart6, servo_rx_buf, servo_expected_len) == HAL_OK) {
 80016ea:	4b13      	ldr	r3, [pc, #76]	@ (8001738 <BusServo_MultPosRead+0x190>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	461a      	mov	r2, r3
 80016f0:	4913      	ldr	r1, [pc, #76]	@ (8001740 <BusServo_MultPosRead+0x198>)
 80016f2:	4814      	ldr	r0, [pc, #80]	@ (8001744 <BusServo_MultPosRead+0x19c>)
 80016f4:	f007 ffc2 	bl	800967c <HAL_UART_Receive_DMA>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d10b      	bne.n	8001716 <BusServo_MultPosRead+0x16e>
        servo_start_time = HAL_GetTick();
 80016fe:	f003 fb1b 	bl	8004d38 <HAL_GetTick>
 8001702:	4603      	mov	r3, r0
 8001704:	4a10      	ldr	r2, [pc, #64]	@ (8001748 <BusServo_MultPosRead+0x1a0>)
 8001706:	6013      	str	r3, [r2, #0]
        servo_reading_flag = 1;
 8001708:	4b10      	ldr	r3, [pc, #64]	@ (800174c <BusServo_MultPosRead+0x1a4>)
 800170a:	2201      	movs	r2, #1
 800170c:	701a      	strb	r2, [r3, #0]
        cdc_debug_print("Servo: Started DMA receive with long timeout");
 800170e:	4810      	ldr	r0, [pc, #64]	@ (8001750 <BusServo_MultPosRead+0x1a8>)
 8001710:	f7fe ffea 	bl	80006e8 <cdc_debug_print>
    } else {
        cdc_debug_print("Servo: Failed to start DMA receive");
        servo_reading_flag = 0;
    }
}
 8001714:	e005      	b.n	8001722 <BusServo_MultPosRead+0x17a>
        cdc_debug_print("Servo: Failed to start DMA receive");
 8001716:	480f      	ldr	r0, [pc, #60]	@ (8001754 <BusServo_MultPosRead+0x1ac>)
 8001718:	f7fe ffe6 	bl	80006e8 <cdc_debug_print>
        servo_reading_flag = 0;
 800171c:	4b0b      	ldr	r3, [pc, #44]	@ (800174c <BusServo_MultPosRead+0x1a4>)
 800171e:	2200      	movs	r2, #0
 8001720:	701a      	strb	r2, [r3, #0]
}
 8001722:	bf00      	nop
 8001724:	f507 77b4 	add.w	r7, r7, #360	@ 0x168
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	20000374 	.word	0x20000374
 8001730:	20000378 	.word	0x20000378
 8001734:	2000037c 	.word	0x2000037c
 8001738:	20000368 	.word	0x20000368
 800173c:	0801fa48 	.word	0x0801fa48
 8001740:	20000268 	.word	0x20000268
 8001744:	200008b0 	.word	0x200008b0
 8001748:	2000036c 	.word	0x2000036c
 800174c:	20000370 	.word	0x20000370
 8001750:	0801fa6c 	.word	0x0801fa6c
 8001754:	0801fa9c 	.word	0x0801fa9c

08001758 <BusServo_CheckReadStatus>:

// 检查舵机读取状态（需要在主循环中定期调用）
uint8_t BusServo_CheckReadStatus(void) {
 8001758:	b580      	push	{r7, lr}
 800175a:	b0ce      	sub	sp, #312	@ 0x138
 800175c:	af02      	add	r7, sp, #8
    if (!servo_reading_flag) {
 800175e:	4b78      	ldr	r3, [pc, #480]	@ (8001940 <BusServo_CheckReadStatus+0x1e8>)
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d101      	bne.n	800176a <BusServo_CheckReadStatus+0x12>
        return 0;  // 没有正在读取
 8001766:	2300      	movs	r3, #0
 8001768:	e0e4      	b.n	8001934 <BusServo_CheckReadStatus+0x1dc>
    }
    
    uint32_t elapsed = HAL_GetTick() - servo_start_time;
 800176a:	f003 fae5 	bl	8004d38 <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	4b74      	ldr	r3, [pc, #464]	@ (8001944 <BusServo_CheckReadStatus+0x1ec>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    uint32_t received = servo_expected_len - huart6.RxXferCount;
 800177a:	4b73      	ldr	r3, [pc, #460]	@ (8001948 <BusServo_CheckReadStatus+0x1f0>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	461a      	mov	r2, r3
 8001780:	4b72      	ldr	r3, [pc, #456]	@ (800194c <BusServo_CheckReadStatus+0x1f4>)
 8001782:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001784:	b29b      	uxth	r3, r3
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    
    // 检查DMA是否完成（接收到期望的全部数据）
    if (huart6.RxXferCount == 0) {
 800178c:	4b6f      	ldr	r3, [pc, #444]	@ (800194c <BusServo_CheckReadStatus+0x1f4>)
 800178e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001790:	b29b      	uxth	r3, r3
 8001792:	2b00      	cmp	r3, #0
 8001794:	d14d      	bne.n	8001832 <BusServo_CheckReadStatus+0xda>
        HAL_UART_DMAStop(&huart6);
 8001796:	486d      	ldr	r0, [pc, #436]	@ (800194c <BusServo_CheckReadStatus+0x1f4>)
 8001798:	f007 ff95 	bl	80096c6 <HAL_UART_DMAStop>
        char complete_msg[80];
        snprintf(complete_msg, sizeof(complete_msg), "Receive complete in %ldms", elapsed);
 800179c:	4638      	mov	r0, r7
 800179e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80017a2:	4a6b      	ldr	r2, [pc, #428]	@ (8001950 <BusServo_CheckReadStatus+0x1f8>)
 80017a4:	2150      	movs	r1, #80	@ 0x50
 80017a6:	f01c fd83 	bl	801e2b0 <sniprintf>
        cdc_debug_print(complete_msg);
 80017aa:	463b      	mov	r3, r7
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7fe ff9b 	bl	80006e8 <cdc_debug_print>
        
        // 打印接收数据
        char hex_msg[200];
        int offset = snprintf(hex_msg, sizeof(hex_msg), "RX data: ");
 80017b2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80017b6:	4a67      	ldr	r2, [pc, #412]	@ (8001954 <BusServo_CheckReadStatus+0x1fc>)
 80017b8:	21c8      	movs	r1, #200	@ 0xc8
 80017ba:	4618      	mov	r0, r3
 80017bc:	f01c fd78 	bl	801e2b0 <sniprintf>
 80017c0:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c
        for (int i = 0; i < servo_expected_len && i < 30; i++) {
 80017c4:	2300      	movs	r3, #0
 80017c6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80017ca:	e01b      	b.n	8001804 <BusServo_CheckReadStatus+0xac>
            offset += snprintf(hex_msg + offset, sizeof(hex_msg) - offset, "%02X ", servo_rx_buf[i]);
 80017cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80017d0:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 80017d4:	18d0      	adds	r0, r2, r3
 80017d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80017da:	f1c3 01c8 	rsb	r1, r3, #200	@ 0xc8
 80017de:	4a5e      	ldr	r2, [pc, #376]	@ (8001958 <BusServo_CheckReadStatus+0x200>)
 80017e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80017e4:	4413      	add	r3, r2
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	4a5c      	ldr	r2, [pc, #368]	@ (800195c <BusServo_CheckReadStatus+0x204>)
 80017ea:	f01c fd61 	bl	801e2b0 <sniprintf>
 80017ee:	4602      	mov	r2, r0
 80017f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80017f4:	4413      	add	r3, r2
 80017f6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
        for (int i = 0; i < servo_expected_len && i < 30; i++) {
 80017fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80017fe:	3301      	adds	r3, #1
 8001800:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8001804:	4b50      	ldr	r3, [pc, #320]	@ (8001948 <BusServo_CheckReadStatus+0x1f0>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	461a      	mov	r2, r3
 800180a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800180e:	4293      	cmp	r3, r2
 8001810:	da03      	bge.n	800181a <BusServo_CheckReadStatus+0xc2>
 8001812:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001816:	2b1d      	cmp	r3, #29
 8001818:	ddd8      	ble.n	80017cc <BusServo_CheckReadStatus+0x74>
        }
        cdc_debug_print(hex_msg);
 800181a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800181e:	4618      	mov	r0, r3
 8001820:	f7fe ff62 	bl	80006e8 <cdc_debug_print>
        
        BusServo_ParseResponse();
 8001824:	f000 f8a2 	bl	800196c <BusServo_ParseResponse>
        servo_reading_flag = 0;
 8001828:	4b45      	ldr	r3, [pc, #276]	@ (8001940 <BusServo_CheckReadStatus+0x1e8>)
 800182a:	2200      	movs	r2, #0
 800182c:	701a      	strb	r2, [r3, #0]
        return 1;  // 成功完成
 800182e:	2301      	movs	r3, #1
 8001830:	e080      	b.n	8001934 <BusServo_CheckReadStatus+0x1dc>
    }
    
    // 如果接收到部分数据且已等待5ms，处理已接收的数据
    if (received > 0 && elapsed >= 5) {
 8001832:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001836:	2b00      	cmp	r3, #0
 8001838:	d05c      	beq.n	80018f4 <BusServo_CheckReadStatus+0x19c>
 800183a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800183e:	2b04      	cmp	r3, #4
 8001840:	d958      	bls.n	80018f4 <BusServo_CheckReadStatus+0x19c>
        HAL_UART_DMAStop(&huart6);
 8001842:	4842      	ldr	r0, [pc, #264]	@ (800194c <BusServo_CheckReadStatus+0x1f4>)
 8001844:	f007 ff3f 	bl	80096c6 <HAL_UART_DMAStop>
        
        char partial_msg[80];
        snprintf(partial_msg, sizeof(partial_msg), "Partial receive: %ld/%d bytes in %ldms", 
 8001848:	4b3f      	ldr	r3, [pc, #252]	@ (8001948 <BusServo_CheckReadStatus+0x1f0>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	461a      	mov	r2, r3
 800184e:	4638      	mov	r0, r7
 8001850:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001854:	9301      	str	r3, [sp, #4]
 8001856:	9200      	str	r2, [sp, #0]
 8001858:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800185c:	4a40      	ldr	r2, [pc, #256]	@ (8001960 <BusServo_CheckReadStatus+0x208>)
 800185e:	2150      	movs	r1, #80	@ 0x50
 8001860:	f01c fd26 	bl	801e2b0 <sniprintf>
                received, servo_expected_len, elapsed);
        cdc_debug_print(partial_msg);
 8001864:	463b      	mov	r3, r7
 8001866:	4618      	mov	r0, r3
 8001868:	f7fe ff3e 	bl	80006e8 <cdc_debug_print>
        
        // 打印已接收的数据
        char hex_msg[200];
        int offset = snprintf(hex_msg, sizeof(hex_msg), "RX partial: ");
 800186c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001870:	4a3c      	ldr	r2, [pc, #240]	@ (8001964 <BusServo_CheckReadStatus+0x20c>)
 8001872:	21c8      	movs	r1, #200	@ 0xc8
 8001874:	4618      	mov	r0, r3
 8001876:	f01c fd1b 	bl	801e2b0 <sniprintf>
 800187a:	f8c7 0124 	str.w	r0, [r7, #292]	@ 0x124
        for (int i = 0; i < received && i < 30; i++) {
 800187e:	2300      	movs	r3, #0
 8001880:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001884:	e01b      	b.n	80018be <BusServo_CheckReadStatus+0x166>
            offset += snprintf(hex_msg + offset, sizeof(hex_msg) - offset, "%02X ", servo_rx_buf[i]);
 8001886:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800188a:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800188e:	18d0      	adds	r0, r2, r3
 8001890:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001894:	f1c3 01c8 	rsb	r1, r3, #200	@ 0xc8
 8001898:	4a2f      	ldr	r2, [pc, #188]	@ (8001958 <BusServo_CheckReadStatus+0x200>)
 800189a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800189e:	4413      	add	r3, r2
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	4a2e      	ldr	r2, [pc, #184]	@ (800195c <BusServo_CheckReadStatus+0x204>)
 80018a4:	f01c fd04 	bl	801e2b0 <sniprintf>
 80018a8:	4602      	mov	r2, r0
 80018aa:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80018ae:	4413      	add	r3, r2
 80018b0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        for (int i = 0; i < received && i < 30; i++) {
 80018b4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80018b8:	3301      	adds	r3, #1
 80018ba:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80018be:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80018c2:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d903      	bls.n	80018d2 <BusServo_CheckReadStatus+0x17a>
 80018ca:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80018ce:	2b1d      	cmp	r3, #29
 80018d0:	ddd9      	ble.n	8001886 <BusServo_CheckReadStatus+0x12e>
        }
        cdc_debug_print(hex_msg);
 80018d2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7fe ff06 	bl	80006e8 <cdc_debug_print>
        
        // 调整期望长度为实际接收长度，然后解析
        servo_expected_len = received;
 80018dc:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80018e0:	b2da      	uxtb	r2, r3
 80018e2:	4b19      	ldr	r3, [pc, #100]	@ (8001948 <BusServo_CheckReadStatus+0x1f0>)
 80018e4:	701a      	strb	r2, [r3, #0]
        BusServo_ParseResponse();
 80018e6:	f000 f841 	bl	800196c <BusServo_ParseResponse>
        servo_reading_flag = 0;
 80018ea:	4b15      	ldr	r3, [pc, #84]	@ (8001940 <BusServo_CheckReadStatus+0x1e8>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	701a      	strb	r2, [r3, #0]
        return 1;  // 部分完成
 80018f0:	2301      	movs	r3, #1
 80018f2:	e01f      	b.n	8001934 <BusServo_CheckReadStatus+0x1dc>
    }
    
    // 总体超时检查 - 50ms超时
    if (elapsed > 50) {
 80018f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80018f8:	2b32      	cmp	r3, #50	@ 0x32
 80018fa:	d91a      	bls.n	8001932 <BusServo_CheckReadStatus+0x1da>
        HAL_UART_DMAStop(&huart6);
 80018fc:	4813      	ldr	r0, [pc, #76]	@ (800194c <BusServo_CheckReadStatus+0x1f4>)
 80018fe:	f007 fee2 	bl	80096c6 <HAL_UART_DMAStop>
        
        char timeout_msg[80];
        snprintf(timeout_msg, sizeof(timeout_msg), "Timeout after %ldms, received %ld/%d bytes", 
 8001902:	4b11      	ldr	r3, [pc, #68]	@ (8001948 <BusServo_CheckReadStatus+0x1f0>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 800190a:	9301      	str	r3, [sp, #4]
 800190c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001910:	9300      	str	r3, [sp, #0]
 8001912:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001916:	4a14      	ldr	r2, [pc, #80]	@ (8001968 <BusServo_CheckReadStatus+0x210>)
 8001918:	2150      	movs	r1, #80	@ 0x50
 800191a:	f01c fcc9 	bl	801e2b0 <sniprintf>
                elapsed, received, servo_expected_len);
        cdc_debug_print(timeout_msg);
 800191e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001922:	4618      	mov	r0, r3
 8001924:	f7fe fee0 	bl	80006e8 <cdc_debug_print>
        
        servo_reading_flag = 0;
 8001928:	4b05      	ldr	r3, [pc, #20]	@ (8001940 <BusServo_CheckReadStatus+0x1e8>)
 800192a:	2200      	movs	r2, #0
 800192c:	701a      	strb	r2, [r3, #0]
        return 2;  // 超时
 800192e:	2302      	movs	r3, #2
 8001930:	e000      	b.n	8001934 <BusServo_CheckReadStatus+0x1dc>
    }
    
    return 3;  // 正在接收中
 8001932:	2303      	movs	r3, #3
}
 8001934:	4618      	mov	r0, r3
 8001936:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	20000370 	.word	0x20000370
 8001944:	2000036c 	.word	0x2000036c
 8001948:	20000368 	.word	0x20000368
 800194c:	200008b0 	.word	0x200008b0
 8001950:	0801fac0 	.word	0x0801fac0
 8001954:	0801fadc 	.word	0x0801fadc
 8001958:	20000268 	.word	0x20000268
 800195c:	0801fa40 	.word	0x0801fa40
 8001960:	0801fae8 	.word	0x0801fae8
 8001964:	0801fb10 	.word	0x0801fb10
 8001968:	0801fb20 	.word	0x0801fb20

0800196c <BusServo_ParseResponse>:

// 解析舵机响应数据
void BusServo_ParseResponse(void) {
 800196c:	b590      	push	{r4, r7, lr}
 800196e:	f5ad 7d03 	sub.w	sp, sp, #524	@ 0x20c
 8001972:	af04      	add	r7, sp, #16
    // 首先打印接收到的所有数据用于调试
    char all_data_msg[200];
    int offset = snprintf(all_data_msg, sizeof(all_data_msg), "Parse RX: ");
 8001974:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8001978:	4a8e      	ldr	r2, [pc, #568]	@ (8001bb4 <BusServo_ParseResponse+0x248>)
 800197a:	21c8      	movs	r1, #200	@ 0xc8
 800197c:	4618      	mov	r0, r3
 800197e:	f01c fc97 	bl	801e2b0 <sniprintf>
 8001982:	f8c7 01f4 	str.w	r0, [r7, #500]	@ 0x1f4
    for (int i = 0; i < 16 && i < sizeof(servo_rx_buf); i++) {  // 显示前16字节
 8001986:	2300      	movs	r3, #0
 8001988:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
 800198c:	e01b      	b.n	80019c6 <BusServo_ParseResponse+0x5a>
        offset += snprintf(all_data_msg + offset, sizeof(all_data_msg) - offset, "%02X ", servo_rx_buf[i]);
 800198e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001992:	f507 728e 	add.w	r2, r7, #284	@ 0x11c
 8001996:	18d0      	adds	r0, r2, r3
 8001998:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800199c:	f1c3 01c8 	rsb	r1, r3, #200	@ 0xc8
 80019a0:	4a85      	ldr	r2, [pc, #532]	@ (8001bb8 <BusServo_ParseResponse+0x24c>)
 80019a2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80019a6:	4413      	add	r3, r2
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	4a84      	ldr	r2, [pc, #528]	@ (8001bbc <BusServo_ParseResponse+0x250>)
 80019ac:	f01c fc80 	bl	801e2b0 <sniprintf>
 80019b0:	4602      	mov	r2, r0
 80019b2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80019b6:	4413      	add	r3, r2
 80019b8:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
    for (int i = 0; i < 16 && i < sizeof(servo_rx_buf); i++) {  // 显示前16字节
 80019bc:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80019c0:	3301      	adds	r3, #1
 80019c2:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
 80019c6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80019ca:	2b0f      	cmp	r3, #15
 80019cc:	dc03      	bgt.n	80019d6 <BusServo_ParseResponse+0x6a>
 80019ce:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80019d2:	2bff      	cmp	r3, #255	@ 0xff
 80019d4:	d9db      	bls.n	800198e <BusServo_ParseResponse+0x22>
    }
    cdc_debug_print(all_data_msg);
 80019d6:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 80019da:	4618      	mov	r0, r3
 80019dc:	f7fe fe84 	bl	80006e8 <cdc_debug_print>
    
    // 检查帧头和命令码
    if (servo_rx_buf[0] == 0x55 && servo_rx_buf[1] == 0x55 && 
 80019e0:	4b75      	ldr	r3, [pc, #468]	@ (8001bb8 <BusServo_ParseResponse+0x24c>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	2b55      	cmp	r3, #85	@ 0x55
 80019e6:	f040 80c4 	bne.w	8001b72 <BusServo_ParseResponse+0x206>
 80019ea:	4b73      	ldr	r3, [pc, #460]	@ (8001bb8 <BusServo_ParseResponse+0x24c>)
 80019ec:	785b      	ldrb	r3, [r3, #1]
 80019ee:	2b55      	cmp	r3, #85	@ 0x55
 80019f0:	f040 80bf 	bne.w	8001b72 <BusServo_ParseResponse+0x206>
        servo_rx_buf[3] == CMD_MULT_SERVO_POS_READ) {
 80019f4:	4b70      	ldr	r3, [pc, #448]	@ (8001bb8 <BusServo_ParseResponse+0x24c>)
 80019f6:	78db      	ldrb	r3, [r3, #3]
    if (servo_rx_buf[0] == 0x55 && servo_rx_buf[1] == 0x55 && 
 80019f8:	2b15      	cmp	r3, #21
 80019fa:	f040 80ba 	bne.w	8001b72 <BusServo_ParseResponse+0x206>
        
        uint8_t data_length = servo_rx_buf[2];  // 数据长度字段
 80019fe:	4b6e      	ldr	r3, [pc, #440]	@ (8001bb8 <BusServo_ParseResponse+0x24c>)
 8001a00:	789b      	ldrb	r3, [r3, #2]
 8001a02:	f887 31ed 	strb.w	r3, [r7, #493]	@ 0x1ed
        uint8_t returned_count = servo_rx_buf[4];  // 返回的舵机个数
 8001a06:	4b6c      	ldr	r3, [pc, #432]	@ (8001bb8 <BusServo_ParseResponse+0x24c>)
 8001a08:	791b      	ldrb	r3, [r3, #4]
 8001a0a:	f887 31ec 	strb.w	r3, [r7, #492]	@ 0x1ec
        
        char debug_msg[100];
        snprintf(debug_msg, sizeof(debug_msg), "Valid frame: data_len=%d, returned_count=%d, expected=%d", 
 8001a0e:	f897 21ed 	ldrb.w	r2, [r7, #493]	@ 0x1ed
 8001a12:	f897 31ec 	ldrb.w	r3, [r7, #492]	@ 0x1ec
 8001a16:	496a      	ldr	r1, [pc, #424]	@ (8001bc0 <BusServo_ParseResponse+0x254>)
 8001a18:	7809      	ldrb	r1, [r1, #0]
 8001a1a:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8001a1e:	9101      	str	r1, [sp, #4]
 8001a20:	9300      	str	r3, [sp, #0]
 8001a22:	4613      	mov	r3, r2
 8001a24:	4a67      	ldr	r2, [pc, #412]	@ (8001bc4 <BusServo_ParseResponse+0x258>)
 8001a26:	2164      	movs	r1, #100	@ 0x64
 8001a28:	f01c fc42 	bl	801e2b0 <sniprintf>
                 data_length, returned_count, servo_id_count);
        cdc_debug_print(debug_msg);
 8001a2c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7fe fe59 	bl	80006e8 <cdc_debug_print>
        
        // 解析实际返回的舵机数据
        for (uint8_t i = 0; i < returned_count; i++) {
 8001a36:	2300      	movs	r3, #0
 8001a38:	f887 31ef 	strb.w	r3, [r7, #495]	@ 0x1ef
 8001a3c:	e091      	b.n	8001b62 <BusServo_ParseResponse+0x1f6>
            uint8_t offset = 5 + i * 3;  // 数据从servo_rx_buf[5]开始，每个舵机3字节
 8001a3e:	f897 31ef 	ldrb.w	r3, [r7, #495]	@ 0x1ef
 8001a42:	461a      	mov	r2, r3
 8001a44:	0052      	lsls	r2, r2, #1
 8001a46:	4413      	add	r3, r2
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	3305      	adds	r3, #5
 8001a4c:	f887 31eb 	strb.w	r3, [r7, #491]	@ 0x1eb
            
            // 检查数据边界
            if (offset + 2 <= data_length + 2) {  // 确保不超出数据长度
 8001a50:	f897 21eb 	ldrb.w	r2, [r7, #491]	@ 0x1eb
 8001a54:	f897 31ed 	ldrb.w	r3, [r7, #493]	@ 0x1ed
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d86c      	bhi.n	8001b36 <BusServo_ParseResponse+0x1ca>
                uint8_t servo_id = servo_rx_buf[offset];      // 舵机ID
 8001a5c:	f897 31eb 	ldrb.w	r3, [r7, #491]	@ 0x1eb
 8001a60:	4a55      	ldr	r2, [pc, #340]	@ (8001bb8 <BusServo_ParseResponse+0x24c>)
 8001a62:	5cd3      	ldrb	r3, [r2, r3]
 8001a64:	f887 31ea 	strb.w	r3, [r7, #490]	@ 0x1ea
                uint8_t pos_low = servo_rx_buf[offset + 1];   // 位置低位
 8001a68:	f897 31eb 	ldrb.w	r3, [r7, #491]	@ 0x1eb
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	4a52      	ldr	r2, [pc, #328]	@ (8001bb8 <BusServo_ParseResponse+0x24c>)
 8001a70:	5cd3      	ldrb	r3, [r2, r3]
 8001a72:	f887 31e9 	strb.w	r3, [r7, #489]	@ 0x1e9
                uint8_t pos_high = servo_rx_buf[offset + 2];  // 位置高位
 8001a76:	f897 31eb 	ldrb.w	r3, [r7, #491]	@ 0x1eb
 8001a7a:	3302      	adds	r3, #2
 8001a7c:	4a4e      	ldr	r2, [pc, #312]	@ (8001bb8 <BusServo_ParseResponse+0x24c>)
 8001a7e:	5cd3      	ldrb	r3, [r2, r3]
 8001a80:	f887 31e8 	strb.w	r3, [r7, #488]	@ 0x1e8
                uint16_t position = (pos_high << 8) | pos_low;
 8001a84:	f897 31e8 	ldrb.w	r3, [r7, #488]	@ 0x1e8
 8001a88:	b21b      	sxth	r3, r3
 8001a8a:	021b      	lsls	r3, r3, #8
 8001a8c:	b21a      	sxth	r2, r3
 8001a8e:	f897 31e9 	ldrb.w	r3, [r7, #489]	@ 0x1e9
 8001a92:	b21b      	sxth	r3, r3
 8001a94:	4313      	orrs	r3, r2
 8001a96:	b21b      	sxth	r3, r3
 8001a98:	f8a7 31e6 	strh.w	r3, [r7, #486]	@ 0x1e6
                
                char parse_msg[100];
                snprintf(parse_msg, sizeof(parse_msg), "Parse: ID=%d, low=0x%02X, high=0x%02X, pos=%d", 
 8001a9c:	f897 41ea 	ldrb.w	r4, [r7, #490]	@ 0x1ea
 8001aa0:	f897 31e9 	ldrb.w	r3, [r7, #489]	@ 0x1e9
 8001aa4:	f897 21e8 	ldrb.w	r2, [r7, #488]	@ 0x1e8
 8001aa8:	f8b7 11e6 	ldrh.w	r1, [r7, #486]	@ 0x1e6
 8001aac:	f107 00b8 	add.w	r0, r7, #184	@ 0xb8
 8001ab0:	9102      	str	r1, [sp, #8]
 8001ab2:	9201      	str	r2, [sp, #4]
 8001ab4:	9300      	str	r3, [sp, #0]
 8001ab6:	4623      	mov	r3, r4
 8001ab8:	4a43      	ldr	r2, [pc, #268]	@ (8001bc8 <BusServo_ParseResponse+0x25c>)
 8001aba:	2164      	movs	r1, #100	@ 0x64
 8001abc:	f01c fbf8 	bl	801e2b0 <sniprintf>
                         servo_id, pos_low, pos_high, position);
                cdc_debug_print(parse_msg);
 8001ac0:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7fe fe0f 	bl	80006e8 <cdc_debug_print>
                
                // 找到对应的舵机ID在请求数组中的位置并更新
                for (uint8_t j = 0; j < servo_id_count; j++) {
 8001aca:	2300      	movs	r3, #0
 8001acc:	f887 31ee 	strb.w	r3, [r7, #494]	@ 0x1ee
 8001ad0:	e02a      	b.n	8001b28 <BusServo_ParseResponse+0x1bc>
                    if (servo_ids_ptr[j] == servo_id) {
 8001ad2:	4b3e      	ldr	r3, [pc, #248]	@ (8001bcc <BusServo_ParseResponse+0x260>)
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	f897 31ee 	ldrb.w	r3, [r7, #494]	@ 0x1ee
 8001ada:	4413      	add	r3, r2
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	f897 21ea 	ldrb.w	r2, [r7, #490]	@ 0x1ea
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d11b      	bne.n	8001b1e <BusServo_ParseResponse+0x1b2>
                        servo_positions_ptr[j] = position;
 8001ae6:	4b3a      	ldr	r3, [pc, #232]	@ (8001bd0 <BusServo_ParseResponse+0x264>)
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	f897 31ee 	ldrb.w	r3, [r7, #494]	@ 0x1ee
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	4413      	add	r3, r2
 8001af2:	f8b7 21e6 	ldrh.w	r2, [r7, #486]	@ 0x1e6
 8001af6:	801a      	strh	r2, [r3, #0]
                        char update_msg[80];
                        snprintf(update_msg, sizeof(update_msg), "Updated: positions[%d] = %d for servo ID %d", 
 8001af8:	f897 11ee 	ldrb.w	r1, [r7, #494]	@ 0x1ee
 8001afc:	f8b7 31e6 	ldrh.w	r3, [r7, #486]	@ 0x1e6
 8001b00:	f897 21ea 	ldrb.w	r2, [r7, #490]	@ 0x1ea
 8001b04:	1d38      	adds	r0, r7, #4
 8001b06:	9201      	str	r2, [sp, #4]
 8001b08:	9300      	str	r3, [sp, #0]
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	4a31      	ldr	r2, [pc, #196]	@ (8001bd4 <BusServo_ParseResponse+0x268>)
 8001b0e:	2150      	movs	r1, #80	@ 0x50
 8001b10:	f01c fbce 	bl	801e2b0 <sniprintf>
                                 j, position, servo_id);
                        cdc_debug_print(update_msg);
 8001b14:	1d3b      	adds	r3, r7, #4
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7fe fde6 	bl	80006e8 <cdc_debug_print>
                        break;
 8001b1c:	e01c      	b.n	8001b58 <BusServo_ParseResponse+0x1ec>
                for (uint8_t j = 0; j < servo_id_count; j++) {
 8001b1e:	f897 31ee 	ldrb.w	r3, [r7, #494]	@ 0x1ee
 8001b22:	3301      	adds	r3, #1
 8001b24:	f887 31ee 	strb.w	r3, [r7, #494]	@ 0x1ee
 8001b28:	4b25      	ldr	r3, [pc, #148]	@ (8001bc0 <BusServo_ParseResponse+0x254>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	f897 21ee 	ldrb.w	r2, [r7, #494]	@ 0x1ee
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d3ce      	bcc.n	8001ad2 <BusServo_ParseResponse+0x166>
 8001b34:	e010      	b.n	8001b58 <BusServo_ParseResponse+0x1ec>
                    }
                }
            } else {
                char boundary_msg[80];
                snprintf(boundary_msg, sizeof(boundary_msg), "Data boundary exceeded at servo %d, offset=%d", i, offset);
 8001b36:	f897 21ef 	ldrb.w	r2, [r7, #495]	@ 0x1ef
 8001b3a:	f897 31eb 	ldrb.w	r3, [r7, #491]	@ 0x1eb
 8001b3e:	f107 00b8 	add.w	r0, r7, #184	@ 0xb8
 8001b42:	9300      	str	r3, [sp, #0]
 8001b44:	4613      	mov	r3, r2
 8001b46:	4a24      	ldr	r2, [pc, #144]	@ (8001bd8 <BusServo_ParseResponse+0x26c>)
 8001b48:	2150      	movs	r1, #80	@ 0x50
 8001b4a:	f01c fbb1 	bl	801e2b0 <sniprintf>
                cdc_debug_print(boundary_msg);
 8001b4e:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7fe fdc8 	bl	80006e8 <cdc_debug_print>
        for (uint8_t i = 0; i < returned_count; i++) {
 8001b58:	f897 31ef 	ldrb.w	r3, [r7, #495]	@ 0x1ef
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	f887 31ef 	strb.w	r3, [r7, #495]	@ 0x1ef
 8001b62:	f897 21ef 	ldrb.w	r2, [r7, #495]	@ 0x1ef
 8001b66:	f897 31ec 	ldrb.w	r3, [r7, #492]	@ 0x1ec
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	f4ff af67 	bcc.w	8001a3e <BusServo_ParseResponse+0xd2>
        servo_rx_buf[3] == CMD_MULT_SERVO_POS_READ) {
 8001b70:	e01a      	b.n	8001ba8 <BusServo_ParseResponse+0x23c>
            }
        }
    } else {
        char debug_msg[100];
        snprintf(debug_msg, sizeof(debug_msg), "Invalid frame: h1=0x%02X h2=0x%02X len=0x%02X cmd=0x%02X", 
                 servo_rx_buf[0], servo_rx_buf[1], servo_rx_buf[2], servo_rx_buf[3]);
 8001b72:	4b11      	ldr	r3, [pc, #68]	@ (8001bb8 <BusServo_ParseResponse+0x24c>)
 8001b74:	781b      	ldrb	r3, [r3, #0]
        snprintf(debug_msg, sizeof(debug_msg), "Invalid frame: h1=0x%02X h2=0x%02X len=0x%02X cmd=0x%02X", 
 8001b76:	461c      	mov	r4, r3
                 servo_rx_buf[0], servo_rx_buf[1], servo_rx_buf[2], servo_rx_buf[3]);
 8001b78:	4b0f      	ldr	r3, [pc, #60]	@ (8001bb8 <BusServo_ParseResponse+0x24c>)
 8001b7a:	785b      	ldrb	r3, [r3, #1]
        snprintf(debug_msg, sizeof(debug_msg), "Invalid frame: h1=0x%02X h2=0x%02X len=0x%02X cmd=0x%02X", 
 8001b7c:	461a      	mov	r2, r3
                 servo_rx_buf[0], servo_rx_buf[1], servo_rx_buf[2], servo_rx_buf[3]);
 8001b7e:	4b0e      	ldr	r3, [pc, #56]	@ (8001bb8 <BusServo_ParseResponse+0x24c>)
 8001b80:	789b      	ldrb	r3, [r3, #2]
        snprintf(debug_msg, sizeof(debug_msg), "Invalid frame: h1=0x%02X h2=0x%02X len=0x%02X cmd=0x%02X", 
 8001b82:	4619      	mov	r1, r3
                 servo_rx_buf[0], servo_rx_buf[1], servo_rx_buf[2], servo_rx_buf[3]);
 8001b84:	4b0c      	ldr	r3, [pc, #48]	@ (8001bb8 <BusServo_ParseResponse+0x24c>)
 8001b86:	78db      	ldrb	r3, [r3, #3]
        snprintf(debug_msg, sizeof(debug_msg), "Invalid frame: h1=0x%02X h2=0x%02X len=0x%02X cmd=0x%02X", 
 8001b88:	f107 00b8 	add.w	r0, r7, #184	@ 0xb8
 8001b8c:	9302      	str	r3, [sp, #8]
 8001b8e:	9101      	str	r1, [sp, #4]
 8001b90:	9200      	str	r2, [sp, #0]
 8001b92:	4623      	mov	r3, r4
 8001b94:	4a11      	ldr	r2, [pc, #68]	@ (8001bdc <BusServo_ParseResponse+0x270>)
 8001b96:	2164      	movs	r1, #100	@ 0x64
 8001b98:	f01c fb8a 	bl	801e2b0 <sniprintf>
        cdc_debug_print(debug_msg);
 8001b9c:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7fe fda1 	bl	80006e8 <cdc_debug_print>
    }
}
 8001ba6:	bf00      	nop
 8001ba8:	bf00      	nop
 8001baa:	f507 77fe 	add.w	r7, r7, #508	@ 0x1fc
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd90      	pop	{r4, r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	0801fb4c 	.word	0x0801fb4c
 8001bb8:	20000268 	.word	0x20000268
 8001bbc:	0801fa40 	.word	0x0801fa40
 8001bc0:	20000378 	.word	0x20000378
 8001bc4:	0801fb58 	.word	0x0801fb58
 8001bc8:	0801fb94 	.word	0x0801fb94
 8001bcc:	20000374 	.word	0x20000374
 8001bd0:	2000037c 	.word	0x2000037c
 8001bd4:	0801fbc4 	.word	0x0801fbc4
 8001bd8:	0801fbf0 	.word	0x0801fbf0
 8001bdc:	0801fc20 	.word	0x0801fc20

08001be0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001be6:	2300      	movs	r3, #0
 8001be8:	607b      	str	r3, [r7, #4]
 8001bea:	4b17      	ldr	r3, [pc, #92]	@ (8001c48 <MX_DMA_Init+0x68>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bee:	4a16      	ldr	r2, [pc, #88]	@ (8001c48 <MX_DMA_Init+0x68>)
 8001bf0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001bf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bf6:	4b14      	ldr	r3, [pc, #80]	@ (8001c48 <MX_DMA_Init+0x68>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bfe:	607b      	str	r3, [r7, #4]
 8001c00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	603b      	str	r3, [r7, #0]
 8001c06:	4b10      	ldr	r3, [pc, #64]	@ (8001c48 <MX_DMA_Init+0x68>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c0a:	4a0f      	ldr	r2, [pc, #60]	@ (8001c48 <MX_DMA_Init+0x68>)
 8001c0c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001c10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c12:	4b0d      	ldr	r3, [pc, #52]	@ (8001c48 <MX_DMA_Init+0x68>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c1a:	603b      	str	r3, [r7, #0]
 8001c1c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001c1e:	2200      	movs	r2, #0
 8001c20:	2105      	movs	r1, #5
 8001c22:	200c      	movs	r0, #12
 8001c24:	f003 f970 	bl	8004f08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001c28:	200c      	movs	r0, #12
 8001c2a:	f003 f989 	bl	8004f40 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8001c2e:	2200      	movs	r2, #0
 8001c30:	2105      	movs	r1, #5
 8001c32:	2039      	movs	r0, #57	@ 0x39
 8001c34:	f003 f968 	bl	8004f08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001c38:	2039      	movs	r0, #57	@ 0x39
 8001c3a:	f003 f981 	bl	8004f40 <HAL_NVIC_EnableIRQ>

}
 8001c3e:	bf00      	nop
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	40023800 	.word	0x40023800

08001c4c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	60b9      	str	r1, [r7, #8]
 8001c56:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	4a07      	ldr	r2, [pc, #28]	@ (8001c78 <vApplicationGetIdleTaskMemory+0x2c>)
 8001c5c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	4a06      	ldr	r2, [pc, #24]	@ (8001c7c <vApplicationGetIdleTaskMemory+0x30>)
 8001c62:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2280      	movs	r2, #128	@ 0x80
 8001c68:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001c6a:	bf00      	nop
 8001c6c:	3714      	adds	r7, #20
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	200003cc 	.word	0x200003cc
 8001c7c:	2000046c 	.word	0x2000046c

08001c80 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001c80:	b5b0      	push	{r4, r5, r7, lr}
 8001c82:	b088      	sub	sp, #32
 8001c84:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 8001c86:	4b0a      	ldr	r3, [pc, #40]	@ (8001cb0 <MX_FREERTOS_Init+0x30>)
 8001c88:	1d3c      	adds	r4, r7, #4
 8001c8a:	461d      	mov	r5, r3
 8001c8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c90:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c94:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001c98:	1d3b      	adds	r3, r7, #4
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f00d fdb1 	bl	800f804 <osThreadCreate>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	4a03      	ldr	r2, [pc, #12]	@ (8001cb4 <MX_FREERTOS_Init+0x34>)
 8001ca6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001ca8:	bf00      	nop
 8001caa:	3720      	adds	r7, #32
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bdb0      	pop	{r4, r5, r7, pc}
 8001cb0:	0801fe9c 	.word	0x0801fe9c
 8001cb4:	200003c8 	.word	0x200003c8

08001cb8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001cc0:	f01b fc42 	bl	801d548 <MX_USB_DEVICE_Init>

  /* init code for LWIP */
  MX_LWIP_Init();
 8001cc4:	f00a fadc 	bl	800c280 <MX_LWIP_Init>
  /* USER CODE BEGIN StartDefaultTask */
  modbus_tcp_init();
 8001cc8:	f001 fa34 	bl	8003134 <modbus_tcp_init>
  app_business_init();
 8001ccc:	f7fe fc6e 	bl	80005ac <app_business_init>
  
  /* Infinite loop */
  for(;;)
  {
    // 每100ms执行一次业务逻辑处理
    if (business_cycle_counter % BUSINESS_PROCESS_CYCLE_MS == 0) {
 8001cd0:	4b1d      	ldr	r3, [pc, #116]	@ (8001d48 <StartDefaultTask+0x90>)
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	4b1d      	ldr	r3, [pc, #116]	@ (8001d4c <StartDefaultTask+0x94>)
 8001cd6:	fba3 1302 	umull	r1, r3, r3, r2
 8001cda:	095b      	lsrs	r3, r3, #5
 8001cdc:	2164      	movs	r1, #100	@ 0x64
 8001cde:	fb01 f303 	mul.w	r3, r1, r3
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d101      	bne.n	8001cec <StartDefaultTask+0x34>
      app_business_process();
 8001ce8:	f7fe fcf2 	bl	80006d0 <app_business_process>
    }
    
    // Keep alive 消息每1000ms（约1秒）发送一次 - 暂时注释掉避免调试信息过载
    
    if (keep_alive_counter % 1000 == 0) {
 8001cec:	4b18      	ldr	r3, [pc, #96]	@ (8001d50 <StartDefaultTask+0x98>)
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	4b18      	ldr	r3, [pc, #96]	@ (8001d54 <StartDefaultTask+0x9c>)
 8001cf2:	fba3 1302 	umull	r1, r3, r3, r2
 8001cf6:	099b      	lsrs	r3, r3, #6
 8001cf8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001cfc:	fb01 f303 	mul.w	r3, r1, r3
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d111      	bne.n	8001d2a <StartDefaultTask+0x72>
      int len = snprintf(debug_buf, sizeof(debug_buf), "Keep Alive: %lu\r\n", keep_alive_counter / 1000);
 8001d06:	4b12      	ldr	r3, [pc, #72]	@ (8001d50 <StartDefaultTask+0x98>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a12      	ldr	r2, [pc, #72]	@ (8001d54 <StartDefaultTask+0x9c>)
 8001d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d10:	099b      	lsrs	r3, r3, #6
 8001d12:	4a11      	ldr	r2, [pc, #68]	@ (8001d58 <StartDefaultTask+0xa0>)
 8001d14:	2140      	movs	r1, #64	@ 0x40
 8001d16:	4811      	ldr	r0, [pc, #68]	@ (8001d5c <StartDefaultTask+0xa4>)
 8001d18:	f01c faca 	bl	801e2b0 <sniprintf>
 8001d1c:	60f8      	str	r0, [r7, #12]
      CDC_Transmit_FS((uint8_t*)debug_buf, len);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	4619      	mov	r1, r3
 8001d24:	480d      	ldr	r0, [pc, #52]	@ (8001d5c <StartDefaultTask+0xa4>)
 8001d26:	f01b fccd 	bl	801d6c4 <CDC_Transmit_FS>
    }
    
    
    business_cycle_counter++;
 8001d2a:	4b07      	ldr	r3, [pc, #28]	@ (8001d48 <StartDefaultTask+0x90>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	3301      	adds	r3, #1
 8001d30:	4a05      	ldr	r2, [pc, #20]	@ (8001d48 <StartDefaultTask+0x90>)
 8001d32:	6013      	str	r3, [r2, #0]
    keep_alive_counter++;
 8001d34:	4b06      	ldr	r3, [pc, #24]	@ (8001d50 <StartDefaultTask+0x98>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	3301      	adds	r3, #1
 8001d3a:	4a05      	ldr	r2, [pc, #20]	@ (8001d50 <StartDefaultTask+0x98>)
 8001d3c:	6013      	str	r3, [r2, #0]
    osDelay(1);  // 1ms延时
 8001d3e:	2001      	movs	r0, #1
 8001d40:	f00d fdac 	bl	800f89c <osDelay>
    if (business_cycle_counter % BUSINESS_PROCESS_CYCLE_MS == 0) {
 8001d44:	e7c4      	b.n	8001cd0 <StartDefaultTask+0x18>
 8001d46:	bf00      	nop
 8001d48:	20000380 	.word	0x20000380
 8001d4c:	51eb851f 	.word	0x51eb851f
 8001d50:	200003c4 	.word	0x200003c4
 8001d54:	10624dd3 	.word	0x10624dd3
 8001d58:	0801feb8 	.word	0x0801feb8
 8001d5c:	20000384 	.word	0x20000384

08001d60 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram3;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b088      	sub	sp, #32
 8001d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001d66:	1d3b      	adds	r3, r7, #4
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	605a      	str	r2, [r3, #4]
 8001d6e:	609a      	str	r2, [r3, #8]
 8001d70:	60da      	str	r2, [r3, #12]
 8001d72:	611a      	str	r2, [r3, #16]
 8001d74:	615a      	str	r2, [r3, #20]
 8001d76:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM3 memory initialization sequence
  */
  hsram3.Instance = FSMC_NORSRAM_DEVICE;
 8001d78:	4b26      	ldr	r3, [pc, #152]	@ (8001e14 <MX_FSMC_Init+0xb4>)
 8001d7a:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 8001d7e:	601a      	str	r2, [r3, #0]
  hsram3.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001d80:	4b24      	ldr	r3, [pc, #144]	@ (8001e14 <MX_FSMC_Init+0xb4>)
 8001d82:	4a25      	ldr	r2, [pc, #148]	@ (8001e18 <MX_FSMC_Init+0xb8>)
 8001d84:	605a      	str	r2, [r3, #4]
  /* hsram3.Init */
  hsram3.Init.NSBank = FSMC_NORSRAM_BANK3;
 8001d86:	4b23      	ldr	r3, [pc, #140]	@ (8001e14 <MX_FSMC_Init+0xb4>)
 8001d88:	2204      	movs	r2, #4
 8001d8a:	609a      	str	r2, [r3, #8]
  hsram3.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001d8c:	4b21      	ldr	r3, [pc, #132]	@ (8001e14 <MX_FSMC_Init+0xb4>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	60da      	str	r2, [r3, #12]
  hsram3.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001d92:	4b20      	ldr	r3, [pc, #128]	@ (8001e14 <MX_FSMC_Init+0xb4>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	611a      	str	r2, [r3, #16]
  hsram3.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001d98:	4b1e      	ldr	r3, [pc, #120]	@ (8001e14 <MX_FSMC_Init+0xb4>)
 8001d9a:	2210      	movs	r2, #16
 8001d9c:	615a      	str	r2, [r3, #20]
  hsram3.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001d9e:	4b1d      	ldr	r3, [pc, #116]	@ (8001e14 <MX_FSMC_Init+0xb4>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	619a      	str	r2, [r3, #24]
  hsram3.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001da4:	4b1b      	ldr	r3, [pc, #108]	@ (8001e14 <MX_FSMC_Init+0xb4>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	61da      	str	r2, [r3, #28]
  hsram3.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001daa:	4b1a      	ldr	r3, [pc, #104]	@ (8001e14 <MX_FSMC_Init+0xb4>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	621a      	str	r2, [r3, #32]
  hsram3.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001db0:	4b18      	ldr	r3, [pc, #96]	@ (8001e14 <MX_FSMC_Init+0xb4>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram3.Init.WriteOperation = FSMC_WRITE_OPERATION_DISABLE;
 8001db6:	4b17      	ldr	r3, [pc, #92]	@ (8001e14 <MX_FSMC_Init+0xb4>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram3.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001dbc:	4b15      	ldr	r3, [pc, #84]	@ (8001e14 <MX_FSMC_Init+0xb4>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram3.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8001dc2:	4b14      	ldr	r3, [pc, #80]	@ (8001e14 <MX_FSMC_Init+0xb4>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram3.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001dc8:	4b12      	ldr	r3, [pc, #72]	@ (8001e14 <MX_FSMC_Init+0xb4>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram3.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001dce:	4b11      	ldr	r3, [pc, #68]	@ (8001e14 <MX_FSMC_Init+0xb4>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram3.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001dd4:	4b0f      	ldr	r3, [pc, #60]	@ (8001e14 <MX_FSMC_Init+0xb4>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8001dda:	230f      	movs	r3, #15
 8001ddc:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001dde:	230f      	movs	r3, #15
 8001de0:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8001de2:	23ff      	movs	r3, #255	@ 0xff
 8001de4:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8001de6:	230f      	movs	r3, #15
 8001de8:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001dea:	2310      	movs	r3, #16
 8001dec:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001dee:	2311      	movs	r3, #17
 8001df0:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001df2:	2300      	movs	r3, #0
 8001df4:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram3, &Timing, NULL) != HAL_OK)
 8001df6:	1d3b      	adds	r3, r7, #4
 8001df8:	2200      	movs	r2, #0
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4805      	ldr	r0, [pc, #20]	@ (8001e14 <MX_FSMC_Init+0xb4>)
 8001dfe:	f006 ff75 	bl	8008cec <HAL_SRAM_Init>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <MX_FSMC_Init+0xac>
  {
    Error_Handler( );
 8001e08:	f000 f996 	bl	8002138 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001e0c:	bf00      	nop
 8001e0e:	3720      	adds	r7, #32
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	2000066c 	.word	0x2000066c
 8001e18:	a0000104 	.word	0xa0000104

08001e1c <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e22:	1d3b      	adds	r3, r7, #4
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	605a      	str	r2, [r3, #4]
 8001e2a:	609a      	str	r2, [r3, #8]
 8001e2c:	60da      	str	r2, [r3, #12]
 8001e2e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001e30:	4b2c      	ldr	r3, [pc, #176]	@ (8001ee4 <HAL_FSMC_MspInit+0xc8>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d151      	bne.n	8001edc <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 8001e38:	4b2a      	ldr	r3, [pc, #168]	@ (8001ee4 <HAL_FSMC_MspInit+0xc8>)
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	603b      	str	r3, [r7, #0]
 8001e42:	4b29      	ldr	r3, [pc, #164]	@ (8001ee8 <HAL_FSMC_MspInit+0xcc>)
 8001e44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e46:	4a28      	ldr	r2, [pc, #160]	@ (8001ee8 <HAL_FSMC_MspInit+0xcc>)
 8001e48:	f043 0301 	orr.w	r3, r3, #1
 8001e4c:	6393      	str	r3, [r2, #56]	@ 0x38
 8001e4e:	4b26      	ldr	r3, [pc, #152]	@ (8001ee8 <HAL_FSMC_MspInit+0xcc>)
 8001e50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	603b      	str	r3, [r7, #0]
 8001e58:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PG10   ------> FSMC_NE3
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001e5a:	f24f 033f 	movw	r3, #61503	@ 0xf03f
 8001e5e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e60:	2302      	movs	r3, #2
 8001e62:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e64:	2300      	movs	r3, #0
 8001e66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001e6c:	230c      	movs	r3, #12
 8001e6e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e70:	1d3b      	adds	r3, r7, #4
 8001e72:	4619      	mov	r1, r3
 8001e74:	481d      	ldr	r0, [pc, #116]	@ (8001eec <HAL_FSMC_MspInit+0xd0>)
 8001e76:	f004 fea7 	bl	8006bc8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001e7a:	f240 433f 	movw	r3, #1087	@ 0x43f
 8001e7e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e80:	2302      	movs	r3, #2
 8001e82:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e84:	2300      	movs	r3, #0
 8001e86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001e8c:	230c      	movs	r3, #12
 8001e8e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e90:	1d3b      	adds	r3, r7, #4
 8001e92:	4619      	mov	r1, r3
 8001e94:	4816      	ldr	r0, [pc, #88]	@ (8001ef0 <HAL_FSMC_MspInit+0xd4>)
 8001e96:	f004 fe97 	bl	8006bc8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001e9a:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8001e9e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001eac:	230c      	movs	r3, #12
 8001eae:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001eb0:	1d3b      	adds	r3, r7, #4
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	480f      	ldr	r0, [pc, #60]	@ (8001ef4 <HAL_FSMC_MspInit+0xd8>)
 8001eb6:	f004 fe87 	bl	8006bc8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001eba:	f64f 7333 	movw	r3, #65331	@ 0xff33
 8001ebe:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001ecc:	230c      	movs	r3, #12
 8001ece:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ed0:	1d3b      	adds	r3, r7, #4
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	4808      	ldr	r0, [pc, #32]	@ (8001ef8 <HAL_FSMC_MspInit+0xdc>)
 8001ed6:	f004 fe77 	bl	8006bc8 <HAL_GPIO_Init>
 8001eda:	e000      	b.n	8001ede <HAL_FSMC_MspInit+0xc2>
    return;
 8001edc:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001ede:	3718      	adds	r7, #24
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	200006bc 	.word	0x200006bc
 8001ee8:	40023800 	.word	0x40023800
 8001eec:	40021400 	.word	0x40021400
 8001ef0:	40021800 	.word	0x40021800
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	40020c00 	.word	0x40020c00

08001efc <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001f04:	f7ff ff8a 	bl	8001e1c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001f08:	bf00      	nop
 8001f0a:	3708      	adds	r7, #8
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b089      	sub	sp, #36	@ 0x24
 8001f14:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f16:	2300      	movs	r3, #0
 8001f18:	61fb      	str	r3, [r7, #28]
 8001f1a:	4b3a      	ldr	r3, [pc, #232]	@ (8002004 <MX_GPIO_Init+0xf4>)
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f1e:	4a39      	ldr	r2, [pc, #228]	@ (8002004 <MX_GPIO_Init+0xf4>)
 8001f20:	f043 0304 	orr.w	r3, r3, #4
 8001f24:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f26:	4b37      	ldr	r3, [pc, #220]	@ (8002004 <MX_GPIO_Init+0xf4>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f2a:	f003 0304 	and.w	r3, r3, #4
 8001f2e:	61fb      	str	r3, [r7, #28]
 8001f30:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f32:	2300      	movs	r3, #0
 8001f34:	61bb      	str	r3, [r7, #24]
 8001f36:	4b33      	ldr	r3, [pc, #204]	@ (8002004 <MX_GPIO_Init+0xf4>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f3a:	4a32      	ldr	r2, [pc, #200]	@ (8002004 <MX_GPIO_Init+0xf4>)
 8001f3c:	f043 0320 	orr.w	r3, r3, #32
 8001f40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f42:	4b30      	ldr	r3, [pc, #192]	@ (8002004 <MX_GPIO_Init+0xf4>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f46:	f003 0320 	and.w	r3, r3, #32
 8001f4a:	61bb      	str	r3, [r7, #24]
 8001f4c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f4e:	2300      	movs	r3, #0
 8001f50:	617b      	str	r3, [r7, #20]
 8001f52:	4b2c      	ldr	r3, [pc, #176]	@ (8002004 <MX_GPIO_Init+0xf4>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f56:	4a2b      	ldr	r2, [pc, #172]	@ (8002004 <MX_GPIO_Init+0xf4>)
 8001f58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f5e:	4b29      	ldr	r3, [pc, #164]	@ (8002004 <MX_GPIO_Init+0xf4>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f66:	617b      	str	r3, [r7, #20]
 8001f68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	613b      	str	r3, [r7, #16]
 8001f6e:	4b25      	ldr	r3, [pc, #148]	@ (8002004 <MX_GPIO_Init+0xf4>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f72:	4a24      	ldr	r2, [pc, #144]	@ (8002004 <MX_GPIO_Init+0xf4>)
 8001f74:	f043 0301 	orr.w	r3, r3, #1
 8001f78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f7a:	4b22      	ldr	r3, [pc, #136]	@ (8002004 <MX_GPIO_Init+0xf4>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	613b      	str	r3, [r7, #16]
 8001f84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f86:	2300      	movs	r3, #0
 8001f88:	60fb      	str	r3, [r7, #12]
 8001f8a:	4b1e      	ldr	r3, [pc, #120]	@ (8002004 <MX_GPIO_Init+0xf4>)
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f8e:	4a1d      	ldr	r2, [pc, #116]	@ (8002004 <MX_GPIO_Init+0xf4>)
 8001f90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f96:	4b1b      	ldr	r3, [pc, #108]	@ (8002004 <MX_GPIO_Init+0xf4>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f9e:	60fb      	str	r3, [r7, #12]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	60bb      	str	r3, [r7, #8]
 8001fa6:	4b17      	ldr	r3, [pc, #92]	@ (8002004 <MX_GPIO_Init+0xf4>)
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001faa:	4a16      	ldr	r2, [pc, #88]	@ (8002004 <MX_GPIO_Init+0xf4>)
 8001fac:	f043 0310 	orr.w	r3, r3, #16
 8001fb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fb2:	4b14      	ldr	r3, [pc, #80]	@ (8002004 <MX_GPIO_Init+0xf4>)
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb6:	f003 0310 	and.w	r3, r3, #16
 8001fba:	60bb      	str	r3, [r7, #8]
 8001fbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	607b      	str	r3, [r7, #4]
 8001fc2:	4b10      	ldr	r3, [pc, #64]	@ (8002004 <MX_GPIO_Init+0xf4>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc6:	4a0f      	ldr	r2, [pc, #60]	@ (8002004 <MX_GPIO_Init+0xf4>)
 8001fc8:	f043 0302 	orr.w	r3, r3, #2
 8001fcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fce:	4b0d      	ldr	r3, [pc, #52]	@ (8002004 <MX_GPIO_Init+0xf4>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd2:	f003 0302 	and.w	r3, r3, #2
 8001fd6:	607b      	str	r3, [r7, #4]
 8001fd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fda:	2300      	movs	r3, #0
 8001fdc:	603b      	str	r3, [r7, #0]
 8001fde:	4b09      	ldr	r3, [pc, #36]	@ (8002004 <MX_GPIO_Init+0xf4>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe2:	4a08      	ldr	r2, [pc, #32]	@ (8002004 <MX_GPIO_Init+0xf4>)
 8001fe4:	f043 0308 	orr.w	r3, r3, #8
 8001fe8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fea:	4b06      	ldr	r3, [pc, #24]	@ (8002004 <MX_GPIO_Init+0xf4>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fee:	f003 0308 	and.w	r3, r3, #8
 8001ff2:	603b      	str	r3, [r7, #0]
 8001ff4:	683b      	ldr	r3, [r7, #0]

}
 8001ff6:	bf00      	nop
 8001ff8:	3724      	adds	r7, #36	@ 0x24
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	40023800 	.word	0x40023800

08002008 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800200c:	f002 fe5e 	bl	8004ccc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002010:	f000 f816 	bl	8002040 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002014:	f7ff ff7c 	bl	8001f10 <MX_GPIO_Init>
  MX_DMA_Init();
 8002018:	f7ff fde2 	bl	8001be0 <MX_DMA_Init>
  MX_FSMC_Init();
 800201c:	f7ff fea0 	bl	8001d60 <MX_FSMC_Init>
  MX_USART1_UART_Init();
 8002020:	f002 faaa 	bl	8004578 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8002024:	f002 fafc 	bl	8004620 <MX_USART6_UART_Init>
  MX_TIM7_Init();
 8002028:	f002 fa48 	bl	80044bc <MX_TIM7_Init>
  MX_USART3_UART_Init();
 800202c:	f002 face 	bl	80045cc <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8002030:	f7ff fe26 	bl	8001c80 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002034:	f00d fbcf 	bl	800f7d6 <osKernelStart>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_Delay(100);
 8002038:	2064      	movs	r0, #100	@ 0x64
 800203a:	f002 fe89 	bl	8004d50 <HAL_Delay>
 800203e:	e7fb      	b.n	8002038 <main+0x30>

08002040 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b094      	sub	sp, #80	@ 0x50
 8002044:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002046:	f107 0320 	add.w	r3, r7, #32
 800204a:	2230      	movs	r2, #48	@ 0x30
 800204c:	2100      	movs	r1, #0
 800204e:	4618      	mov	r0, r3
 8002050:	f01c f9d1 	bl	801e3f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002054:	f107 030c 	add.w	r3, r7, #12
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]
 800205c:	605a      	str	r2, [r3, #4]
 800205e:	609a      	str	r2, [r3, #8]
 8002060:	60da      	str	r2, [r3, #12]
 8002062:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002064:	2300      	movs	r3, #0
 8002066:	60bb      	str	r3, [r7, #8]
 8002068:	4b28      	ldr	r3, [pc, #160]	@ (800210c <SystemClock_Config+0xcc>)
 800206a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800206c:	4a27      	ldr	r2, [pc, #156]	@ (800210c <SystemClock_Config+0xcc>)
 800206e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002072:	6413      	str	r3, [r2, #64]	@ 0x40
 8002074:	4b25      	ldr	r3, [pc, #148]	@ (800210c <SystemClock_Config+0xcc>)
 8002076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002078:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800207c:	60bb      	str	r3, [r7, #8]
 800207e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002080:	2300      	movs	r3, #0
 8002082:	607b      	str	r3, [r7, #4]
 8002084:	4b22      	ldr	r3, [pc, #136]	@ (8002110 <SystemClock_Config+0xd0>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a21      	ldr	r2, [pc, #132]	@ (8002110 <SystemClock_Config+0xd0>)
 800208a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800208e:	6013      	str	r3, [r2, #0]
 8002090:	4b1f      	ldr	r3, [pc, #124]	@ (8002110 <SystemClock_Config+0xd0>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002098:	607b      	str	r3, [r7, #4]
 800209a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800209c:	2301      	movs	r3, #1
 800209e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80020a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80020a4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020a6:	2302      	movs	r3, #2
 80020a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80020aa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80020ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80020b0:	2319      	movs	r3, #25
 80020b2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80020b4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80020b8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80020ba:	2302      	movs	r3, #2
 80020bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80020be:	2307      	movs	r3, #7
 80020c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020c2:	f107 0320 	add.w	r3, r7, #32
 80020c6:	4618      	mov	r0, r3
 80020c8:	f006 f986 	bl	80083d8 <HAL_RCC_OscConfig>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80020d2:	f000 f831 	bl	8002138 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020d6:	230f      	movs	r3, #15
 80020d8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020da:	2302      	movs	r3, #2
 80020dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020de:	2300      	movs	r3, #0
 80020e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80020e2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80020e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80020e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020ec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80020ee:	f107 030c 	add.w	r3, r7, #12
 80020f2:	2105      	movs	r1, #5
 80020f4:	4618      	mov	r0, r3
 80020f6:	f006 fbe7 	bl	80088c8 <HAL_RCC_ClockConfig>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002100:	f000 f81a 	bl	8002138 <Error_Handler>
  }
}
 8002104:	bf00      	nop
 8002106:	3750      	adds	r7, #80	@ 0x50
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	40023800 	.word	0x40023800
 8002110:	40007000 	.word	0x40007000

08002114 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a04      	ldr	r2, [pc, #16]	@ (8002134 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d101      	bne.n	800212a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8002126:	f002 fdf3 	bl	8004d10 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800212a:	bf00      	nop
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	40002000 	.word	0x40002000

08002138 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800213c:	b672      	cpsid	i
}
 800213e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002140:	bf00      	nop
 8002142:	e7fd      	b.n	8002140 <Error_Handler+0x8>

08002144 <cdc_debug_log>:
#include <string.h>
#include "usbd_cdc_if.h"  // 包含CDC传输函数

// 简单的调试日志函数，输出到CDC
static void cdc_debug_log(const char* tag, const char* message)
{
 8002144:	b480      	push	{r7}
 8002146:	b0a5      	sub	sp, #148	@ 0x94
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
    char debug_buf[128];
    uint32_t len = 0;
 800214e:	2300      	movs	r3, #0
 8002150:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    
    // 手动拼接字符串，避免使用sprintf
    const char* ptr;
    
    // 复制tag
    ptr = tag;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    while (*ptr && len < 20) {
 800215a:	e00e      	b.n	800217a <cdc_debug_log+0x36>
        debug_buf[len++] = *ptr++;
 800215c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8002160:	1c53      	adds	r3, r2, #1
 8002162:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002166:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800216a:	1c59      	adds	r1, r3, #1
 800216c:	f8c7 108c 	str.w	r1, [r7, #140]	@ 0x8c
 8002170:	7812      	ldrb	r2, [r2, #0]
 8002172:	3390      	adds	r3, #144	@ 0x90
 8002174:	443b      	add	r3, r7
 8002176:	f803 2c88 	strb.w	r2, [r3, #-136]
    while (*ptr && len < 20) {
 800217a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d003      	beq.n	800218c <cdc_debug_log+0x48>
 8002184:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002188:	2b13      	cmp	r3, #19
 800218a:	d9e7      	bls.n	800215c <cdc_debug_log+0x18>
    }
    
    // 添加分隔符
    debug_buf[len++] = ':';
 800218c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002190:	1c5a      	adds	r2, r3, #1
 8002192:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002196:	3390      	adds	r3, #144	@ 0x90
 8002198:	443b      	add	r3, r7
 800219a:	223a      	movs	r2, #58	@ 0x3a
 800219c:	f803 2c88 	strb.w	r2, [r3, #-136]
    debug_buf[len++] = ' ';
 80021a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80021a4:	1c5a      	adds	r2, r3, #1
 80021a6:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80021aa:	3390      	adds	r3, #144	@ 0x90
 80021ac:	443b      	add	r3, r7
 80021ae:	2220      	movs	r2, #32
 80021b0:	f803 2c88 	strb.w	r2, [r3, #-136]
    
    // 复制message
    ptr = message;
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    while (*ptr && len < 120) {
 80021ba:	e00e      	b.n	80021da <cdc_debug_log+0x96>
        debug_buf[len++] = *ptr++;
 80021bc:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80021c0:	1c53      	adds	r3, r2, #1
 80021c2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80021c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80021ca:	1c59      	adds	r1, r3, #1
 80021cc:	f8c7 108c 	str.w	r1, [r7, #140]	@ 0x8c
 80021d0:	7812      	ldrb	r2, [r2, #0]
 80021d2:	3390      	adds	r3, #144	@ 0x90
 80021d4:	443b      	add	r3, r7
 80021d6:	f803 2c88 	strb.w	r2, [r3, #-136]
    while (*ptr && len < 120) {
 80021da:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d003      	beq.n	80021ec <cdc_debug_log+0xa8>
 80021e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80021e8:	2b77      	cmp	r3, #119	@ 0x77
 80021ea:	d9e7      	bls.n	80021bc <cdc_debug_log+0x78>
    }
    
    // 添加换行
    debug_buf[len++] = '\r';
 80021ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80021f0:	1c5a      	adds	r2, r3, #1
 80021f2:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80021f6:	3390      	adds	r3, #144	@ 0x90
 80021f8:	443b      	add	r3, r7
 80021fa:	220d      	movs	r2, #13
 80021fc:	f803 2c88 	strb.w	r2, [r3, #-136]
    debug_buf[len++] = '\n';
 8002200:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002204:	1c5a      	adds	r2, r3, #1
 8002206:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800220a:	3390      	adds	r3, #144	@ 0x90
 800220c:	443b      	add	r3, r7
 800220e:	220a      	movs	r2, #10
 8002210:	f803 2c88 	strb.w	r2, [r3, #-136]
    
    // 通过CDC发送
    /*if (len < sizeof(debug_buf)) {
        CDC_Transmit_FS((uint8_t*)debug_buf, len);
    }*/
}
 8002214:	bf00      	nop
 8002216:	3794      	adds	r7, #148	@ 0x94
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <int_to_str>:

// 简单的整数转字符串函数
static void int_to_str(int value, char* str, int max_len)
{
 8002220:	b480      	push	{r7}
 8002222:	b08b      	sub	sp, #44	@ 0x2c
 8002224:	af00      	add	r7, sp, #0
 8002226:	60f8      	str	r0, [r7, #12]
 8002228:	60b9      	str	r1, [r7, #8]
 800222a:	607a      	str	r2, [r7, #4]
    int i = 0;
 800222c:	2300      	movs	r3, #0
 800222e:	627b      	str	r3, [r7, #36]	@ 0x24
    int is_negative = 0;
 8002230:	2300      	movs	r3, #0
 8002232:	623b      	str	r3, [r7, #32]
    
    if (value < 0) {
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2b00      	cmp	r3, #0
 8002238:	da04      	bge.n	8002244 <int_to_str+0x24>
        is_negative = 1;
 800223a:	2301      	movs	r3, #1
 800223c:	623b      	str	r3, [r7, #32]
        value = -value;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	425b      	negs	r3, r3
 8002242:	60fb      	str	r3, [r7, #12]
    }
    
    // 处理特殊情况0
    if (value == 0) {
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d12b      	bne.n	80022a2 <int_to_str+0x82>
        str[i++] = '0';
 800224a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800224c:	1c5a      	adds	r2, r3, #1
 800224e:	627a      	str	r2, [r7, #36]	@ 0x24
 8002250:	461a      	mov	r2, r3
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	4413      	add	r3, r2
 8002256:	2230      	movs	r2, #48	@ 0x30
 8002258:	701a      	strb	r2, [r3, #0]
        str[i] = '\0';
 800225a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800225c:	68ba      	ldr	r2, [r7, #8]
 800225e:	4413      	add	r3, r2
 8002260:	2200      	movs	r2, #0
 8002262:	701a      	strb	r2, [r3, #0]
        return;
 8002264:	e05c      	b.n	8002320 <int_to_str+0x100>
    }
    
    // 转换数字
    while (value > 0 && i < max_len - 2) {
        str[i++] = '0' + (value % 10);
 8002266:	68fa      	ldr	r2, [r7, #12]
 8002268:	4b30      	ldr	r3, [pc, #192]	@ (800232c <int_to_str+0x10c>)
 800226a:	fb83 1302 	smull	r1, r3, r3, r2
 800226e:	1099      	asrs	r1, r3, #2
 8002270:	17d3      	asrs	r3, r2, #31
 8002272:	1ac9      	subs	r1, r1, r3
 8002274:	460b      	mov	r3, r1
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	440b      	add	r3, r1
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	1ad1      	subs	r1, r2, r3
 800227e:	b2ca      	uxtb	r2, r1
 8002280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002282:	1c59      	adds	r1, r3, #1
 8002284:	6279      	str	r1, [r7, #36]	@ 0x24
 8002286:	4619      	mov	r1, r3
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	440b      	add	r3, r1
 800228c:	3230      	adds	r2, #48	@ 0x30
 800228e:	b2d2      	uxtb	r2, r2
 8002290:	701a      	strb	r2, [r3, #0]
        value /= 10;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	4a25      	ldr	r2, [pc, #148]	@ (800232c <int_to_str+0x10c>)
 8002296:	fb82 1203 	smull	r1, r2, r2, r3
 800229a:	1092      	asrs	r2, r2, #2
 800229c:	17db      	asrs	r3, r3, #31
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	60fb      	str	r3, [r7, #12]
    while (value > 0 && i < max_len - 2) {
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	dd04      	ble.n	80022b2 <int_to_str+0x92>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	3b02      	subs	r3, #2
 80022ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022ae:	429a      	cmp	r2, r3
 80022b0:	dbd9      	blt.n	8002266 <int_to_str+0x46>
    }
    
    // 添加负号
    if (is_negative && i < max_len - 1) {
 80022b2:	6a3b      	ldr	r3, [r7, #32]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d00c      	beq.n	80022d2 <int_to_str+0xb2>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	3b01      	subs	r3, #1
 80022bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022be:	429a      	cmp	r2, r3
 80022c0:	da07      	bge.n	80022d2 <int_to_str+0xb2>
        str[i++] = '-';
 80022c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c4:	1c5a      	adds	r2, r3, #1
 80022c6:	627a      	str	r2, [r7, #36]	@ 0x24
 80022c8:	461a      	mov	r2, r3
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	4413      	add	r3, r2
 80022ce:	222d      	movs	r2, #45	@ 0x2d
 80022d0:	701a      	strb	r2, [r3, #0]
    }
    
    str[i] = '\0';
 80022d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d4:	68ba      	ldr	r2, [r7, #8]
 80022d6:	4413      	add	r3, r2
 80022d8:	2200      	movs	r2, #0
 80022da:	701a      	strb	r2, [r3, #0]
    
    // 反转字符串
    int start = 0;
 80022dc:	2300      	movs	r3, #0
 80022de:	61fb      	str	r3, [r7, #28]
    int end = i - 1;
 80022e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e2:	3b01      	subs	r3, #1
 80022e4:	61bb      	str	r3, [r7, #24]
    while (start < end) {
 80022e6:	e017      	b.n	8002318 <int_to_str+0xf8>
        char temp = str[start];
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	68ba      	ldr	r2, [r7, #8]
 80022ec:	4413      	add	r3, r2
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	75fb      	strb	r3, [r7, #23]
        str[start] = str[end];
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	68ba      	ldr	r2, [r7, #8]
 80022f6:	441a      	add	r2, r3
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	68b9      	ldr	r1, [r7, #8]
 80022fc:	440b      	add	r3, r1
 80022fe:	7812      	ldrb	r2, [r2, #0]
 8002300:	701a      	strb	r2, [r3, #0]
        str[end] = temp;
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	68ba      	ldr	r2, [r7, #8]
 8002306:	4413      	add	r3, r2
 8002308:	7dfa      	ldrb	r2, [r7, #23]
 800230a:	701a      	strb	r2, [r3, #0]
        start++;
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	3301      	adds	r3, #1
 8002310:	61fb      	str	r3, [r7, #28]
        end--;
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	3b01      	subs	r3, #1
 8002316:	61bb      	str	r3, [r7, #24]
    while (start < end) {
 8002318:	69fa      	ldr	r2, [r7, #28]
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	429a      	cmp	r2, r3
 800231e:	dbe3      	blt.n	80022e8 <int_to_str+0xc8>
    }
}
 8002320:	372c      	adds	r7, #44	@ 0x2c
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	66666667 	.word	0x66666667

08002330 <hex_to_str>:

// 十六进制转换函数
static void hex_to_str(uint8_t value, char* str)
{
 8002330:	b4b0      	push	{r4, r5, r7}
 8002332:	b089      	sub	sp, #36	@ 0x24
 8002334:	af00      	add	r7, sp, #0
 8002336:	4603      	mov	r3, r0
 8002338:	6039      	str	r1, [r7, #0]
 800233a:	71fb      	strb	r3, [r7, #7]
    const char hex_chars[] = "0123456789ABCDEF";
 800233c:	4b11      	ldr	r3, [pc, #68]	@ (8002384 <hex_to_str+0x54>)
 800233e:	f107 040c 	add.w	r4, r7, #12
 8002342:	461d      	mov	r5, r3
 8002344:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002346:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002348:	682b      	ldr	r3, [r5, #0]
 800234a:	7023      	strb	r3, [r4, #0]
    str[0] = hex_chars[value >> 4];
 800234c:	79fb      	ldrb	r3, [r7, #7]
 800234e:	091b      	lsrs	r3, r3, #4
 8002350:	b2db      	uxtb	r3, r3
 8002352:	3320      	adds	r3, #32
 8002354:	443b      	add	r3, r7
 8002356:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	701a      	strb	r2, [r3, #0]
    str[1] = hex_chars[value & 0x0F];
 800235e:	79fb      	ldrb	r3, [r7, #7]
 8002360:	f003 020f 	and.w	r2, r3, #15
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	3301      	adds	r3, #1
 8002368:	3220      	adds	r2, #32
 800236a:	443a      	add	r2, r7
 800236c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8002370:	701a      	strb	r2, [r3, #0]
    str[2] = '\0';
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	3302      	adds	r3, #2
 8002376:	2200      	movs	r2, #0
 8002378:	701a      	strb	r2, [r3, #0]
}
 800237a:	bf00      	nop
 800237c:	3724      	adds	r7, #36	@ 0x24
 800237e:	46bd      	mov	sp, r7
 8002380:	bcb0      	pop	{r4, r5, r7}
 8002382:	4770      	bx	lr
 8002384:	0801fecc 	.word	0x0801fecc

08002388 <dump_data>:

// 数据转储函数 - 显示接收到的原始数据
static void dump_data(const uint8_t* data, uint16_t len)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b0a8      	sub	sp, #160	@ 0xa0
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	460b      	mov	r3, r1
 8002392:	807b      	strh	r3, [r7, #2]
    char dump_buf[128];
    char hex_str[3];
    uint16_t dump_len = 0;
 8002394:	2300      	movs	r3, #0
 8002396:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    
    // 添加前缀
    const char* prefix = "Data: ";
 800239a:	4b3d      	ldr	r3, [pc, #244]	@ (8002490 <dump_data+0x108>)
 800239c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    strcpy(dump_buf, prefix);
 80023a0:	f107 0310 	add.w	r3, r7, #16
 80023a4:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 80023a8:	4618      	mov	r0, r3
 80023aa:	f01c f91a 	bl	801e5e2 <strcpy>
    dump_len = strlen(prefix);
 80023ae:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 80023b2:	f7fd ff0d 	bl	80001d0 <strlen>
 80023b6:	4603      	mov	r3, r0
 80023b8:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    
    // 最多显示前16字节的数据
    uint16_t max_bytes = (len > 16) ? 16 : len;
 80023bc:	887b      	ldrh	r3, [r7, #2]
 80023be:	2b10      	cmp	r3, #16
 80023c0:	bf28      	it	cs
 80023c2:	2310      	movcs	r3, #16
 80023c4:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
    
    for (uint16_t i = 0; i < max_bytes && dump_len < 120; i++) {
 80023c8:	2300      	movs	r3, #0
 80023ca:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
 80023ce:	e032      	b.n	8002436 <dump_data+0xae>
        hex_to_str(data[i], hex_str);
 80023d0:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	4413      	add	r3, r2
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	f107 020c 	add.w	r2, r7, #12
 80023de:	4611      	mov	r1, r2
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7ff ffa5 	bl	8002330 <hex_to_str>
        if (dump_len + 3 < sizeof(dump_buf)) {
 80023e6:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80023ea:	3303      	adds	r3, #3
 80023ec:	2b7f      	cmp	r3, #127	@ 0x7f
 80023ee:	d81d      	bhi.n	800242c <dump_data+0xa4>
            dump_buf[dump_len++] = hex_str[0];
 80023f0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80023f4:	1c5a      	adds	r2, r3, #1
 80023f6:	f8a7 209e 	strh.w	r2, [r7, #158]	@ 0x9e
 80023fa:	7b3a      	ldrb	r2, [r7, #12]
 80023fc:	33a0      	adds	r3, #160	@ 0xa0
 80023fe:	443b      	add	r3, r7
 8002400:	f803 2c90 	strb.w	r2, [r3, #-144]
            dump_buf[dump_len++] = hex_str[1];
 8002404:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8002408:	1c5a      	adds	r2, r3, #1
 800240a:	f8a7 209e 	strh.w	r2, [r7, #158]	@ 0x9e
 800240e:	7b7a      	ldrb	r2, [r7, #13]
 8002410:	33a0      	adds	r3, #160	@ 0xa0
 8002412:	443b      	add	r3, r7
 8002414:	f803 2c90 	strb.w	r2, [r3, #-144]
            dump_buf[dump_len++] = ' ';
 8002418:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800241c:	1c5a      	adds	r2, r3, #1
 800241e:	f8a7 209e 	strh.w	r2, [r7, #158]	@ 0x9e
 8002422:	33a0      	adds	r3, #160	@ 0xa0
 8002424:	443b      	add	r3, r7
 8002426:	2220      	movs	r2, #32
 8002428:	f803 2c90 	strb.w	r2, [r3, #-144]
    for (uint16_t i = 0; i < max_bytes && dump_len < 120; i++) {
 800242c:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8002430:	3301      	adds	r3, #1
 8002432:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
 8002436:	f8b7 209c 	ldrh.w	r2, [r7, #156]	@ 0x9c
 800243a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800243e:	429a      	cmp	r2, r3
 8002440:	d203      	bcs.n	800244a <dump_data+0xc2>
 8002442:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8002446:	2b77      	cmp	r3, #119	@ 0x77
 8002448:	d9c2      	bls.n	80023d0 <dump_data+0x48>
        }
    }
    
    if (len > 16) {
 800244a:	887b      	ldrh	r3, [r7, #2]
 800244c:	2b10      	cmp	r3, #16
 800244e:	d90e      	bls.n	800246e <dump_data+0xe6>
        const char* more = "...";
 8002450:	4b10      	ldr	r3, [pc, #64]	@ (8002494 <dump_data+0x10c>)
 8002452:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
        strcat(dump_buf, more);
 8002456:	f107 0310 	add.w	r3, r7, #16
 800245a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800245e:	4618      	mov	r0, r3
 8002460:	f01b ffd1 	bl	801e406 <strcat>
        dump_len += 3;
 8002464:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8002468:	3303      	adds	r3, #3
 800246a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    }
    
    dump_buf[dump_len] = '\0';
 800246e:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8002472:	33a0      	adds	r3, #160	@ 0xa0
 8002474:	443b      	add	r3, r7
 8002476:	2200      	movs	r2, #0
 8002478:	f803 2c90 	strb.w	r2, [r3, #-144]
    cdc_debug_log("MODBUS_TCP", dump_buf);
 800247c:	f107 0310 	add.w	r3, r7, #16
 8002480:	4619      	mov	r1, r3
 8002482:	4805      	ldr	r0, [pc, #20]	@ (8002498 <dump_data+0x110>)
 8002484:	f7ff fe5e 	bl	8002144 <cdc_debug_log>
}
 8002488:	bf00      	nop
 800248a:	37a0      	adds	r7, #160	@ 0xa0
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	0801fee0 	.word	0x0801fee0
 8002494:	0801fee8 	.word	0x0801fee8
 8002498:	0801feec 	.word	0x0801feec

0800249c <process_modbus_request>:
// Holding Registers数组（根据PDF初始化默认值）
uint16_t holding_regs[100]; // 100个寄存器足够使用

// 处理单个Modbus TCP请求
static err_t process_modbus_request(struct tcp_pcb *tpcb, uint8_t* buf, uint16_t offset)
{
 800249c:	b5b0      	push	{r4, r5, r7, lr}
 800249e:	f5ad 6d9e 	sub.w	sp, sp, #1264	@ 0x4f0
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80024a8:	f2a3 43e4 	subw	r3, r3, #1252	@ 0x4e4
 80024ac:	6018      	str	r0, [r3, #0]
 80024ae:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80024b2:	f5a3 639d 	sub.w	r3, r3, #1256	@ 0x4e8
 80024b6:	6019      	str	r1, [r3, #0]
 80024b8:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80024bc:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 80024c0:	801a      	strh	r2, [r3, #0]
    // 解析Modbus TCP帧头
    uint16_t trans_id = (buf[offset] << 8) | buf[offset+1];     // 事务ID
 80024c2:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80024c6:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 80024ca:	881b      	ldrh	r3, [r3, #0]
 80024cc:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 80024d0:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 80024d4:	6812      	ldr	r2, [r2, #0]
 80024d6:	4413      	add	r3, r2
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	b21b      	sxth	r3, r3
 80024dc:	021b      	lsls	r3, r3, #8
 80024de:	b21a      	sxth	r2, r3
 80024e0:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80024e4:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 80024e8:	881b      	ldrh	r3, [r3, #0]
 80024ea:	3301      	adds	r3, #1
 80024ec:	f507 619e 	add.w	r1, r7, #1264	@ 0x4f0
 80024f0:	f5a1 619d 	sub.w	r1, r1, #1256	@ 0x4e8
 80024f4:	6809      	ldr	r1, [r1, #0]
 80024f6:	440b      	add	r3, r1
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	b21b      	sxth	r3, r3
 80024fc:	4313      	orrs	r3, r2
 80024fe:	b21b      	sxth	r3, r3
 8002500:	f8a7 34e4 	strh.w	r3, [r7, #1252]	@ 0x4e4
    uint16_t protocol_id = (buf[offset+2] << 8) | buf[offset+3];  // 协议ID (应该是0)
 8002504:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002508:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 800250c:	881b      	ldrh	r3, [r3, #0]
 800250e:	3302      	adds	r3, #2
 8002510:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 8002514:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 8002518:	6812      	ldr	r2, [r2, #0]
 800251a:	4413      	add	r3, r2
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	b21b      	sxth	r3, r3
 8002520:	021b      	lsls	r3, r3, #8
 8002522:	b21a      	sxth	r2, r3
 8002524:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002528:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 800252c:	881b      	ldrh	r3, [r3, #0]
 800252e:	3303      	adds	r3, #3
 8002530:	f507 619e 	add.w	r1, r7, #1264	@ 0x4f0
 8002534:	f5a1 619d 	sub.w	r1, r1, #1256	@ 0x4e8
 8002538:	6809      	ldr	r1, [r1, #0]
 800253a:	440b      	add	r3, r1
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	b21b      	sxth	r3, r3
 8002540:	4313      	orrs	r3, r2
 8002542:	b21b      	sxth	r3, r3
 8002544:	f8a7 34e2 	strh.w	r3, [r7, #1250]	@ 0x4e2
    uint16_t length = (buf[offset+4] << 8) | buf[offset+5];       // 长度字段
 8002548:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 800254c:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8002550:	881b      	ldrh	r3, [r3, #0]
 8002552:	3304      	adds	r3, #4
 8002554:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 8002558:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 800255c:	6812      	ldr	r2, [r2, #0]
 800255e:	4413      	add	r3, r2
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	b21b      	sxth	r3, r3
 8002564:	021b      	lsls	r3, r3, #8
 8002566:	b21a      	sxth	r2, r3
 8002568:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 800256c:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8002570:	881b      	ldrh	r3, [r3, #0]
 8002572:	3305      	adds	r3, #5
 8002574:	f507 619e 	add.w	r1, r7, #1264	@ 0x4f0
 8002578:	f5a1 619d 	sub.w	r1, r1, #1256	@ 0x4e8
 800257c:	6809      	ldr	r1, [r1, #0]
 800257e:	440b      	add	r3, r1
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	b21b      	sxth	r3, r3
 8002584:	4313      	orrs	r3, r2
 8002586:	b21b      	sxth	r3, r3
 8002588:	f8a7 34e0 	strh.w	r3, [r7, #1248]	@ 0x4e0
    
    // 验证协议ID
    if (protocol_id != 0) {
 800258c:	f8b7 34e2 	ldrh.w	r3, [r7, #1250]	@ 0x4e2
 8002590:	2b00      	cmp	r3, #0
 8002592:	d007      	beq.n	80025a4 <process_modbus_request+0x108>
        cdc_debug_log("MODBUS_TCP", "Invalid protocol ID");
 8002594:	49d7      	ldr	r1, [pc, #860]	@ (80028f4 <process_modbus_request+0x458>)
 8002596:	48d8      	ldr	r0, [pc, #864]	@ (80028f8 <process_modbus_request+0x45c>)
 8002598:	f7ff fdd4 	bl	8002144 <cdc_debug_log>
        return ERR_VAL;
 800259c:	f06f 0305 	mvn.w	r3, #5
 80025a0:	f000 bdb5 	b.w	800310e <process_modbus_request+0xc72>
    }
    
    // 验证最小长度（至少要有单元ID和功能码）
    if (length < 2) {
 80025a4:	f8b7 34e0 	ldrh.w	r3, [r7, #1248]	@ 0x4e0
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d807      	bhi.n	80025bc <process_modbus_request+0x120>
        cdc_debug_log("MODBUS_TCP", "Invalid length field");
 80025ac:	49d3      	ldr	r1, [pc, #844]	@ (80028fc <process_modbus_request+0x460>)
 80025ae:	48d2      	ldr	r0, [pc, #840]	@ (80028f8 <process_modbus_request+0x45c>)
 80025b0:	f7ff fdc8 	bl	8002144 <cdc_debug_log>
        return ERR_VAL;
 80025b4:	f06f 0305 	mvn.w	r3, #5
 80025b8:	f000 bda9 	b.w	800310e <process_modbus_request+0xc72>
    }

    uint8_t unit_id = buf[offset+6];                       // 单元ID
 80025bc:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80025c0:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 80025c4:	881b      	ldrh	r3, [r3, #0]
 80025c6:	3306      	adds	r3, #6
 80025c8:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 80025cc:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 80025d0:	6812      	ldr	r2, [r2, #0]
 80025d2:	4413      	add	r3, r2
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	f887 34df 	strb.w	r3, [r7, #1247]	@ 0x4df
    uint8_t fc = buf[offset+7];                            // 函数码
 80025da:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80025de:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 80025e2:	881b      	ldrh	r3, [r3, #0]
 80025e4:	3307      	adds	r3, #7
 80025e6:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 80025ea:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 80025ee:	6812      	ldr	r2, [r2, #0]
 80025f0:	4413      	add	r3, r2
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	f887 34de 	strb.w	r3, [r7, #1246]	@ 0x4de

    // 添加调试信息
    char frame_info[80];
    strcpy(frame_info, "Frame: TID=");
 80025f8:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80025fc:	4ac0      	ldr	r2, [pc, #768]	@ (8002900 <process_modbus_request+0x464>)
 80025fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8002600:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    int_to_str(trans_id, frame_info + strlen(frame_info), 10);
 8002604:	f8b7 44e4 	ldrh.w	r4, [r7, #1252]	@ 0x4e4
 8002608:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800260c:	4618      	mov	r0, r3
 800260e:	f7fd fddf 	bl	80001d0 <strlen>
 8002612:	4602      	mov	r2, r0
 8002614:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8002618:	4413      	add	r3, r2
 800261a:	220a      	movs	r2, #10
 800261c:	4619      	mov	r1, r3
 800261e:	4620      	mov	r0, r4
 8002620:	f7ff fdfe 	bl	8002220 <int_to_str>
    const char* len_prefix = " Len=";
 8002624:	4bb7      	ldr	r3, [pc, #732]	@ (8002904 <process_modbus_request+0x468>)
 8002626:	f8c7 34d8 	str.w	r3, [r7, #1240]	@ 0x4d8
    strcat(frame_info, len_prefix);
 800262a:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800262e:	f8d7 14d8 	ldr.w	r1, [r7, #1240]	@ 0x4d8
 8002632:	4618      	mov	r0, r3
 8002634:	f01b fee7 	bl	801e406 <strcat>
    int_to_str(length, frame_info + strlen(frame_info), 10);
 8002638:	f8b7 44e0 	ldrh.w	r4, [r7, #1248]	@ 0x4e0
 800263c:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8002640:	4618      	mov	r0, r3
 8002642:	f7fd fdc5 	bl	80001d0 <strlen>
 8002646:	4602      	mov	r2, r0
 8002648:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800264c:	4413      	add	r3, r2
 800264e:	220a      	movs	r2, #10
 8002650:	4619      	mov	r1, r3
 8002652:	4620      	mov	r0, r4
 8002654:	f7ff fde4 	bl	8002220 <int_to_str>
    const char* fc_prefix = " FC=";
 8002658:	4bab      	ldr	r3, [pc, #684]	@ (8002908 <process_modbus_request+0x46c>)
 800265a:	f8c7 34d4 	str.w	r3, [r7, #1236]	@ 0x4d4
    strcat(frame_info, fc_prefix);
 800265e:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8002662:	f8d7 14d4 	ldr.w	r1, [r7, #1236]	@ 0x4d4
 8002666:	4618      	mov	r0, r3
 8002668:	f01b fecd 	bl	801e406 <strcat>
    int_to_str(fc, frame_info + strlen(frame_info), 10);
 800266c:	f897 44de 	ldrb.w	r4, [r7, #1246]	@ 0x4de
 8002670:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8002674:	4618      	mov	r0, r3
 8002676:	f7fd fdab 	bl	80001d0 <strlen>
 800267a:	4602      	mov	r2, r0
 800267c:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8002680:	4413      	add	r3, r2
 8002682:	220a      	movs	r2, #10
 8002684:	4619      	mov	r1, r3
 8002686:	4620      	mov	r0, r4
 8002688:	f7ff fdca 	bl	8002220 <int_to_str>
    cdc_debug_log("MODBUS_TCP", frame_info);
 800268c:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8002690:	4619      	mov	r1, r3
 8002692:	4899      	ldr	r0, [pc, #612]	@ (80028f8 <process_modbus_request+0x45c>)
 8002694:	f7ff fd56 	bl	8002144 <cdc_debug_log>

    uint8_t reply[1024];
    reply[0] = buf[offset]; reply[1] = buf[offset+1]; // 事务ID
 8002698:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 800269c:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 80026a0:	881b      	ldrh	r3, [r3, #0]
 80026a2:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 80026a6:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 80026aa:	6812      	ldr	r2, [r2, #0]
 80026ac:	4413      	add	r3, r2
 80026ae:	781a      	ldrb	r2, [r3, #0]
 80026b0:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80026b4:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 80026b8:	701a      	strb	r2, [r3, #0]
 80026ba:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80026be:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 80026c2:	881b      	ldrh	r3, [r3, #0]
 80026c4:	3301      	adds	r3, #1
 80026c6:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 80026ca:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 80026ce:	6812      	ldr	r2, [r2, #0]
 80026d0:	4413      	add	r3, r2
 80026d2:	781a      	ldrb	r2, [r3, #0]
 80026d4:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80026d8:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 80026dc:	705a      	strb	r2, [r3, #1]
    reply[2] = 0; reply[3] = 0;           // 协议ID (0)
 80026de:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80026e2:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 80026e6:	2200      	movs	r2, #0
 80026e8:	709a      	strb	r2, [r3, #2]
 80026ea:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80026ee:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 80026f2:	2200      	movs	r2, #0
 80026f4:	70da      	strb	r2, [r3, #3]
    reply[6] = unit_id;                   // 单元ID
 80026f6:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80026fa:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 80026fe:	f897 24df 	ldrb.w	r2, [r7, #1247]	@ 0x4df
 8002702:	719a      	strb	r2, [r3, #6]
    uint16_t reply_data_len = 0;          // 数据部分长度（不包含单元ID）
 8002704:	2300      	movs	r3, #0
 8002706:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee

    if (fc == FC_READ_HOLDING) {
 800270a:	f897 34de 	ldrb.w	r3, [r7, #1246]	@ 0x4de
 800270e:	2b03      	cmp	r3, #3
 8002710:	f040 8145 	bne.w	800299e <process_modbus_request+0x502>
        cdc_debug_log("MODBUS_TCP", "Processing read holding");
 8002714:	497d      	ldr	r1, [pc, #500]	@ (800290c <process_modbus_request+0x470>)
 8002716:	4878      	ldr	r0, [pc, #480]	@ (80028f8 <process_modbus_request+0x45c>)
 8002718:	f7ff fd14 	bl	8002144 <cdc_debug_log>
        
        // 检查数据长度是否足够
        if (length < 6) { // 单元ID + 功能码 + 起始地址 + 数量 = 1+1+2+2 = 6
 800271c:	f8b7 34e0 	ldrh.w	r3, [r7, #1248]	@ 0x4e0
 8002720:	2b05      	cmp	r3, #5
 8002722:	d817      	bhi.n	8002754 <process_modbus_request+0x2b8>
            cdc_debug_log("MODBUS_TCP", "Read request too short");
 8002724:	497a      	ldr	r1, [pc, #488]	@ (8002910 <process_modbus_request+0x474>)
 8002726:	4874      	ldr	r0, [pc, #464]	@ (80028f8 <process_modbus_request+0x45c>)
 8002728:	f7ff fd0c 	bl	8002144 <cdc_debug_log>
            reply[7] = fc + 0x80;  // 异常函数码
 800272c:	f897 34de 	ldrb.w	r3, [r7, #1246]	@ 0x4de
 8002730:	3b80      	subs	r3, #128	@ 0x80
 8002732:	b2da      	uxtb	r2, r3
 8002734:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002738:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 800273c:	71da      	strb	r2, [r3, #7]
            reply[8] = 0x03;       // 异常代码：非法数据值
 800273e:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002742:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002746:	2203      	movs	r2, #3
 8002748:	721a      	strb	r2, [r3, #8]
            reply_data_len = 2;
 800274a:	2302      	movs	r3, #2
 800274c:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee
 8002750:	f000 bc0e 	b.w	8002f70 <process_modbus_request+0xad4>
        } else {
            uint16_t addr = (buf[offset+8] << 8) | buf[offset+9]; // 起始地址
 8002754:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002758:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 800275c:	881b      	ldrh	r3, [r3, #0]
 800275e:	3308      	adds	r3, #8
 8002760:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 8002764:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 8002768:	6812      	ldr	r2, [r2, #0]
 800276a:	4413      	add	r3, r2
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	b21b      	sxth	r3, r3
 8002770:	021b      	lsls	r3, r3, #8
 8002772:	b21a      	sxth	r2, r3
 8002774:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002778:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 800277c:	881b      	ldrh	r3, [r3, #0]
 800277e:	3309      	adds	r3, #9
 8002780:	f507 619e 	add.w	r1, r7, #1264	@ 0x4f0
 8002784:	f5a1 619d 	sub.w	r1, r1, #1256	@ 0x4e8
 8002788:	6809      	ldr	r1, [r1, #0]
 800278a:	440b      	add	r3, r1
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	b21b      	sxth	r3, r3
 8002790:	4313      	orrs	r3, r2
 8002792:	b21b      	sxth	r3, r3
 8002794:	f8a7 34b6 	strh.w	r3, [r7, #1206]	@ 0x4b6
            uint16_t qty = (buf[offset+10] << 8) | buf[offset+11]; // 数量
 8002798:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 800279c:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 80027a0:	881b      	ldrh	r3, [r3, #0]
 80027a2:	330a      	adds	r3, #10
 80027a4:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 80027a8:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 80027ac:	6812      	ldr	r2, [r2, #0]
 80027ae:	4413      	add	r3, r2
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	b21b      	sxth	r3, r3
 80027b4:	021b      	lsls	r3, r3, #8
 80027b6:	b21a      	sxth	r2, r3
 80027b8:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80027bc:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 80027c0:	881b      	ldrh	r3, [r3, #0]
 80027c2:	330b      	adds	r3, #11
 80027c4:	f507 619e 	add.w	r1, r7, #1264	@ 0x4f0
 80027c8:	f5a1 619d 	sub.w	r1, r1, #1256	@ 0x4e8
 80027cc:	6809      	ldr	r1, [r1, #0]
 80027ce:	440b      	add	r3, r1
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	b21b      	sxth	r3, r3
 80027d4:	4313      	orrs	r3, r2
 80027d6:	b21b      	sxth	r3, r3
 80027d8:	f8a7 34b4 	strh.w	r3, [r7, #1204]	@ 0x4b4
            
            char addr_info[50];
            strcpy(addr_info, "Read addr=");
 80027dc:	f107 0314 	add.w	r3, r7, #20
 80027e0:	4a4c      	ldr	r2, [pc, #304]	@ (8002914 <process_modbus_request+0x478>)
 80027e2:	ca07      	ldmia	r2, {r0, r1, r2}
 80027e4:	c303      	stmia	r3!, {r0, r1}
 80027e6:	801a      	strh	r2, [r3, #0]
 80027e8:	3302      	adds	r3, #2
 80027ea:	0c12      	lsrs	r2, r2, #16
 80027ec:	701a      	strb	r2, [r3, #0]
            int_to_str(addr, addr_info + strlen(addr_info), 10);
 80027ee:	f8b7 44b6 	ldrh.w	r4, [r7, #1206]	@ 0x4b6
 80027f2:	f107 0314 	add.w	r3, r7, #20
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7fd fcea 	bl	80001d0 <strlen>
 80027fc:	4602      	mov	r2, r0
 80027fe:	f107 0314 	add.w	r3, r7, #20
 8002802:	4413      	add	r3, r2
 8002804:	220a      	movs	r2, #10
 8002806:	4619      	mov	r1, r3
 8002808:	4620      	mov	r0, r4
 800280a:	f7ff fd09 	bl	8002220 <int_to_str>
            const char* qty_prefix = " qty=";
 800280e:	4b42      	ldr	r3, [pc, #264]	@ (8002918 <process_modbus_request+0x47c>)
 8002810:	f8c7 34b0 	str.w	r3, [r7, #1200]	@ 0x4b0
            strcat(addr_info, qty_prefix);
 8002814:	f107 0314 	add.w	r3, r7, #20
 8002818:	f8d7 14b0 	ldr.w	r1, [r7, #1200]	@ 0x4b0
 800281c:	4618      	mov	r0, r3
 800281e:	f01b fdf2 	bl	801e406 <strcat>
            int_to_str(qty, addr_info + strlen(addr_info), 10);
 8002822:	f8b7 44b4 	ldrh.w	r4, [r7, #1204]	@ 0x4b4
 8002826:	f107 0314 	add.w	r3, r7, #20
 800282a:	4618      	mov	r0, r3
 800282c:	f7fd fcd0 	bl	80001d0 <strlen>
 8002830:	4602      	mov	r2, r0
 8002832:	f107 0314 	add.w	r3, r7, #20
 8002836:	4413      	add	r3, r2
 8002838:	220a      	movs	r2, #10
 800283a:	4619      	mov	r1, r3
 800283c:	4620      	mov	r0, r4
 800283e:	f7ff fcef 	bl	8002220 <int_to_str>
            cdc_debug_log("MODBUS_TCP", addr_info);
 8002842:	f107 0314 	add.w	r3, r7, #20
 8002846:	4619      	mov	r1, r3
 8002848:	482b      	ldr	r0, [pc, #172]	@ (80028f8 <process_modbus_request+0x45c>)
 800284a:	f7ff fc7b 	bl	8002144 <cdc_debug_log>
            
            // 验证数量范围
            if (qty == 0 || qty > 125) { // Modbus标准限制单次最多读125个寄存器
 800284e:	f8b7 34b4 	ldrh.w	r3, [r7, #1204]	@ 0x4b4
 8002852:	2b00      	cmp	r3, #0
 8002854:	d003      	beq.n	800285e <process_modbus_request+0x3c2>
 8002856:	f8b7 34b4 	ldrh.w	r3, [r7, #1204]	@ 0x4b4
 800285a:	2b7d      	cmp	r3, #125	@ 0x7d
 800285c:	d916      	bls.n	800288c <process_modbus_request+0x3f0>
                cdc_debug_log("MODBUS_TCP", "Invalid quantity");
 800285e:	492f      	ldr	r1, [pc, #188]	@ (800291c <process_modbus_request+0x480>)
 8002860:	4825      	ldr	r0, [pc, #148]	@ (80028f8 <process_modbus_request+0x45c>)
 8002862:	f7ff fc6f 	bl	8002144 <cdc_debug_log>
                reply[7] = fc + 0x80;  // 异常函数码
 8002866:	f897 34de 	ldrb.w	r3, [r7, #1246]	@ 0x4de
 800286a:	3b80      	subs	r3, #128	@ 0x80
 800286c:	b2da      	uxtb	r2, r3
 800286e:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002872:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002876:	71da      	strb	r2, [r3, #7]
                reply[8] = 0x03;       // 异常代码：非法数据值
 8002878:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 800287c:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002880:	2203      	movs	r2, #3
 8002882:	721a      	strb	r2, [r3, #8]
                reply_data_len = 2;
 8002884:	2302      	movs	r3, #2
 8002886:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee
 800288a:	e371      	b.n	8002f70 <process_modbus_request+0xad4>
            } else if (addr + qty > 100) { // 错误：越界，现在只有100个寄存器
 800288c:	f8b7 24b6 	ldrh.w	r2, [r7, #1206]	@ 0x4b6
 8002890:	f8b7 34b4 	ldrh.w	r3, [r7, #1204]	@ 0x4b4
 8002894:	4413      	add	r3, r2
 8002896:	2b64      	cmp	r3, #100	@ 0x64
 8002898:	dd16      	ble.n	80028c8 <process_modbus_request+0x42c>
                cdc_debug_log("MODBUS_TCP", "Address out of bounds");
 800289a:	4921      	ldr	r1, [pc, #132]	@ (8002920 <process_modbus_request+0x484>)
 800289c:	4816      	ldr	r0, [pc, #88]	@ (80028f8 <process_modbus_request+0x45c>)
 800289e:	f7ff fc51 	bl	8002144 <cdc_debug_log>
                reply[7] = fc + 0x80;  // 异常函数码
 80028a2:	f897 34de 	ldrb.w	r3, [r7, #1246]	@ 0x4de
 80028a6:	3b80      	subs	r3, #128	@ 0x80
 80028a8:	b2da      	uxtb	r2, r3
 80028aa:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80028ae:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 80028b2:	71da      	strb	r2, [r3, #7]
                reply[8] = 0x02;       // 异常代码：非法数据地址
 80028b4:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80028b8:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 80028bc:	2202      	movs	r2, #2
 80028be:	721a      	strb	r2, [r3, #8]
                reply_data_len = 2;
 80028c0:	2302      	movs	r3, #2
 80028c2:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee
 80028c6:	e353      	b.n	8002f70 <process_modbus_request+0xad4>
            } else {
                reply[7] = fc;              // 函数码
 80028c8:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80028cc:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 80028d0:	f897 24de 	ldrb.w	r2, [r7, #1246]	@ 0x4de
 80028d4:	71da      	strb	r2, [r3, #7]
                reply[8] = qty * 2;         // 字节数
 80028d6:	f8b7 34b4 	ldrh.w	r3, [r7, #1204]	@ 0x4b4
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	b2da      	uxtb	r2, r3
 80028e0:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80028e4:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 80028e8:	721a      	strb	r2, [r3, #8]
                for (uint16_t i = 0; i < qty; i++) {
 80028ea:	2300      	movs	r3, #0
 80028ec:	f8a7 34ec 	strh.w	r3, [r7, #1260]	@ 0x4ec
 80028f0:	e043      	b.n	800297a <process_modbus_request+0x4de>
 80028f2:	bf00      	nop
 80028f4:	0801fef8 	.word	0x0801fef8
 80028f8:	0801feec 	.word	0x0801feec
 80028fc:	0801ff0c 	.word	0x0801ff0c
 8002900:	0801ff24 	.word	0x0801ff24
 8002904:	0801ff30 	.word	0x0801ff30
 8002908:	0801ff38 	.word	0x0801ff38
 800290c:	0801ff40 	.word	0x0801ff40
 8002910:	0801ff58 	.word	0x0801ff58
 8002914:	0801ff70 	.word	0x0801ff70
 8002918:	0801ff7c 	.word	0x0801ff7c
 800291c:	0801ff84 	.word	0x0801ff84
 8002920:	0801ff98 	.word	0x0801ff98
                    reply[9 + i*2] = holding_regs[addr + i] >> 8;
 8002924:	f8b7 24b6 	ldrh.w	r2, [r7, #1206]	@ 0x4b6
 8002928:	f8b7 34ec 	ldrh.w	r3, [r7, #1260]	@ 0x4ec
 800292c:	4413      	add	r3, r2
 800292e:	4abe      	ldr	r2, [pc, #760]	@ (8002c28 <process_modbus_request+0x78c>)
 8002930:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002934:	0a1b      	lsrs	r3, r3, #8
 8002936:	b29a      	uxth	r2, r3
 8002938:	f8b7 34ec 	ldrh.w	r3, [r7, #1260]	@ 0x4ec
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	3309      	adds	r3, #9
 8002940:	b2d1      	uxtb	r1, r2
 8002942:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 8002946:	f5a2 6293 	sub.w	r2, r2, #1176	@ 0x498
 800294a:	54d1      	strb	r1, [r2, r3]
                    reply[10 + i*2] = holding_regs[addr + i] & 0xFF;
 800294c:	f8b7 24b6 	ldrh.w	r2, [r7, #1206]	@ 0x4b6
 8002950:	f8b7 34ec 	ldrh.w	r3, [r7, #1260]	@ 0x4ec
 8002954:	4413      	add	r3, r2
 8002956:	4ab4      	ldr	r2, [pc, #720]	@ (8002c28 <process_modbus_request+0x78c>)
 8002958:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800295c:	f8b7 34ec 	ldrh.w	r3, [r7, #1260]	@ 0x4ec
 8002960:	3305      	adds	r3, #5
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	b2d1      	uxtb	r1, r2
 8002966:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 800296a:	f5a2 6293 	sub.w	r2, r2, #1176	@ 0x498
 800296e:	54d1      	strb	r1, [r2, r3]
                for (uint16_t i = 0; i < qty; i++) {
 8002970:	f8b7 34ec 	ldrh.w	r3, [r7, #1260]	@ 0x4ec
 8002974:	3301      	adds	r3, #1
 8002976:	f8a7 34ec 	strh.w	r3, [r7, #1260]	@ 0x4ec
 800297a:	f8b7 24ec 	ldrh.w	r2, [r7, #1260]	@ 0x4ec
 800297e:	f8b7 34b4 	ldrh.w	r3, [r7, #1204]	@ 0x4b4
 8002982:	429a      	cmp	r2, r3
 8002984:	d3ce      	bcc.n	8002924 <process_modbus_request+0x488>
                }
                reply_data_len = 2 + qty * 2; // 单元ID + 函数码 + 字节数 + 数据
 8002986:	f8b7 34b4 	ldrh.w	r3, [r7, #1204]	@ 0x4b4
 800298a:	3301      	adds	r3, #1
 800298c:	b29b      	uxth	r3, r3
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee
                cdc_debug_log("MODBUS_TCP", "Read success");
 8002994:	49a5      	ldr	r1, [pc, #660]	@ (8002c2c <process_modbus_request+0x790>)
 8002996:	48a6      	ldr	r0, [pc, #664]	@ (8002c30 <process_modbus_request+0x794>)
 8002998:	f7ff fbd4 	bl	8002144 <cdc_debug_log>
 800299c:	e2e8      	b.n	8002f70 <process_modbus_request+0xad4>
            }
        }
    } else if (fc == FC_WRITE_SINGLE) {
 800299e:	f897 34de 	ldrb.w	r3, [r7, #1246]	@ 0x4de
 80029a2:	2b06      	cmp	r3, #6
 80029a4:	f040 811c 	bne.w	8002be0 <process_modbus_request+0x744>
        cdc_debug_log("MODBUS_TCP", "Processing write single");
 80029a8:	49a2      	ldr	r1, [pc, #648]	@ (8002c34 <process_modbus_request+0x798>)
 80029aa:	48a1      	ldr	r0, [pc, #644]	@ (8002c30 <process_modbus_request+0x794>)
 80029ac:	f7ff fbca 	bl	8002144 <cdc_debug_log>
        
        // 检查数据长度是否足够：单元ID + 功能码 + 地址 + 值 = 1+1+2+2 = 6
        if (length < 6) {
 80029b0:	f8b7 34e0 	ldrh.w	r3, [r7, #1248]	@ 0x4e0
 80029b4:	2b05      	cmp	r3, #5
 80029b6:	d816      	bhi.n	80029e6 <process_modbus_request+0x54a>
            cdc_debug_log("MODBUS_TCP", "Write single request too short");
 80029b8:	499f      	ldr	r1, [pc, #636]	@ (8002c38 <process_modbus_request+0x79c>)
 80029ba:	489d      	ldr	r0, [pc, #628]	@ (8002c30 <process_modbus_request+0x794>)
 80029bc:	f7ff fbc2 	bl	8002144 <cdc_debug_log>
            reply[7] = fc + 0x80;  // 异常函数码
 80029c0:	f897 34de 	ldrb.w	r3, [r7, #1246]	@ 0x4de
 80029c4:	3b80      	subs	r3, #128	@ 0x80
 80029c6:	b2da      	uxtb	r2, r3
 80029c8:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80029cc:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 80029d0:	71da      	strb	r2, [r3, #7]
            reply[8] = 0x03;       // 异常代码：非法数据值
 80029d2:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80029d6:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 80029da:	2203      	movs	r2, #3
 80029dc:	721a      	strb	r2, [r3, #8]
            reply_data_len = 2;
 80029de:	2302      	movs	r3, #2
 80029e0:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee
 80029e4:	e2c4      	b.n	8002f70 <process_modbus_request+0xad4>
        } else {
            uint16_t addr = (buf[offset+8] << 8) | buf[offset+9];   // 寄存器地址
 80029e6:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80029ea:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 80029ee:	881b      	ldrh	r3, [r3, #0]
 80029f0:	3308      	adds	r3, #8
 80029f2:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 80029f6:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 80029fa:	6812      	ldr	r2, [r2, #0]
 80029fc:	4413      	add	r3, r2
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	b21b      	sxth	r3, r3
 8002a02:	021b      	lsls	r3, r3, #8
 8002a04:	b21a      	sxth	r2, r3
 8002a06:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002a0a:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8002a0e:	881b      	ldrh	r3, [r3, #0]
 8002a10:	3309      	adds	r3, #9
 8002a12:	f507 619e 	add.w	r1, r7, #1264	@ 0x4f0
 8002a16:	f5a1 619d 	sub.w	r1, r1, #1256	@ 0x4e8
 8002a1a:	6809      	ldr	r1, [r1, #0]
 8002a1c:	440b      	add	r3, r1
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	b21b      	sxth	r3, r3
 8002a22:	4313      	orrs	r3, r2
 8002a24:	b21b      	sxth	r3, r3
 8002a26:	f8a7 34c4 	strh.w	r3, [r7, #1220]	@ 0x4c4
            uint16_t value = (buf[offset+10] << 8) | buf[offset+11]; // 要写入的值
 8002a2a:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002a2e:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8002a32:	881b      	ldrh	r3, [r3, #0]
 8002a34:	330a      	adds	r3, #10
 8002a36:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 8002a3a:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 8002a3e:	6812      	ldr	r2, [r2, #0]
 8002a40:	4413      	add	r3, r2
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	b21b      	sxth	r3, r3
 8002a46:	021b      	lsls	r3, r3, #8
 8002a48:	b21a      	sxth	r2, r3
 8002a4a:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002a4e:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8002a52:	881b      	ldrh	r3, [r3, #0]
 8002a54:	330b      	adds	r3, #11
 8002a56:	f507 619e 	add.w	r1, r7, #1264	@ 0x4f0
 8002a5a:	f5a1 619d 	sub.w	r1, r1, #1256	@ 0x4e8
 8002a5e:	6809      	ldr	r1, [r1, #0]
 8002a60:	440b      	add	r3, r1
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	b21b      	sxth	r3, r3
 8002a66:	4313      	orrs	r3, r2
 8002a68:	b21b      	sxth	r3, r3
 8002a6a:	f8a7 34c2 	strh.w	r3, [r7, #1218]	@ 0x4c2
            
            char write_info[60];
            strcpy(write_info, "Write addr=");
 8002a6e:	f107 0314 	add.w	r3, r7, #20
 8002a72:	4a72      	ldr	r2, [pc, #456]	@ (8002c3c <process_modbus_request+0x7a0>)
 8002a74:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a76:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            int_to_str(addr, write_info + strlen(write_info), 10);
 8002a7a:	f8b7 44c4 	ldrh.w	r4, [r7, #1220]	@ 0x4c4
 8002a7e:	f107 0314 	add.w	r3, r7, #20
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7fd fba4 	bl	80001d0 <strlen>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	f107 0314 	add.w	r3, r7, #20
 8002a8e:	4413      	add	r3, r2
 8002a90:	220a      	movs	r2, #10
 8002a92:	4619      	mov	r1, r3
 8002a94:	4620      	mov	r0, r4
 8002a96:	f7ff fbc3 	bl	8002220 <int_to_str>
            const char* val_prefix = " val=0x";
 8002a9a:	4b69      	ldr	r3, [pc, #420]	@ (8002c40 <process_modbus_request+0x7a4>)
 8002a9c:	f8c7 34bc 	str.w	r3, [r7, #1212]	@ 0x4bc
            strcat(write_info, val_prefix);
 8002aa0:	f107 0314 	add.w	r3, r7, #20
 8002aa4:	f8d7 14bc 	ldr.w	r1, [r7, #1212]	@ 0x4bc
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f01b fcac 	bl	801e406 <strcat>
            // 简单的十六进制转换
            char hex_str[5];
            hex_str[4] = '\0';
 8002aae:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002ab2:	f5a3 6394 	sub.w	r3, r3, #1184	@ 0x4a0
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	711a      	strb	r2, [r3, #4]
            for (int j = 3; j >= 0; j--) {
 8002aba:	2303      	movs	r3, #3
 8002abc:	f8c7 34e8 	str.w	r3, [r7, #1256]	@ 0x4e8
 8002ac0:	e027      	b.n	8002b12 <process_modbus_request+0x676>
                int nibble = (value >> (j * 4)) & 0xF;
 8002ac2:	f8b7 24c2 	ldrh.w	r2, [r7, #1218]	@ 0x4c2
 8002ac6:	f8d7 34e8 	ldr.w	r3, [r7, #1256]	@ 0x4e8
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	fa42 f303 	asr.w	r3, r2, r3
 8002ad0:	f003 030f 	and.w	r3, r3, #15
 8002ad4:	f8c7 34b8 	str.w	r3, [r7, #1208]	@ 0x4b8
                hex_str[3-j] = (nibble < 10) ? ('0' + nibble) : ('A' + nibble - 10);
 8002ad8:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 8002adc:	2b09      	cmp	r3, #9
 8002ade:	dc05      	bgt.n	8002aec <process_modbus_request+0x650>
 8002ae0:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	3330      	adds	r3, #48	@ 0x30
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	e004      	b.n	8002af6 <process_modbus_request+0x65a>
 8002aec:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	3337      	adds	r3, #55	@ 0x37
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	f8d7 24e8 	ldr.w	r2, [r7, #1256]	@ 0x4e8
 8002afa:	f1c2 0203 	rsb	r2, r2, #3
 8002afe:	f507 619e 	add.w	r1, r7, #1264	@ 0x4f0
 8002b02:	f5a1 6194 	sub.w	r1, r1, #1184	@ 0x4a0
 8002b06:	548b      	strb	r3, [r1, r2]
            for (int j = 3; j >= 0; j--) {
 8002b08:	f8d7 34e8 	ldr.w	r3, [r7, #1256]	@ 0x4e8
 8002b0c:	3b01      	subs	r3, #1
 8002b0e:	f8c7 34e8 	str.w	r3, [r7, #1256]	@ 0x4e8
 8002b12:	f8d7 34e8 	ldr.w	r3, [r7, #1256]	@ 0x4e8
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	dad3      	bge.n	8002ac2 <process_modbus_request+0x626>
            }
            strcat(write_info, hex_str);
 8002b1a:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8002b1e:	f107 0314 	add.w	r3, r7, #20
 8002b22:	4611      	mov	r1, r2
 8002b24:	4618      	mov	r0, r3
 8002b26:	f01b fc6e 	bl	801e406 <strcat>
            cdc_debug_log("MODBUS_TCP", write_info);
 8002b2a:	f107 0314 	add.w	r3, r7, #20
 8002b2e:	4619      	mov	r1, r3
 8002b30:	483f      	ldr	r0, [pc, #252]	@ (8002c30 <process_modbus_request+0x794>)
 8002b32:	f7ff fb07 	bl	8002144 <cdc_debug_log>
            
            // 验证地址范围
            if (addr >= 100) {
 8002b36:	f8b7 34c4 	ldrh.w	r3, [r7, #1220]	@ 0x4c4
 8002b3a:	2b63      	cmp	r3, #99	@ 0x63
 8002b3c:	d916      	bls.n	8002b6c <process_modbus_request+0x6d0>
                cdc_debug_log("MODBUS_TCP", "Write address out of bounds");
 8002b3e:	4941      	ldr	r1, [pc, #260]	@ (8002c44 <process_modbus_request+0x7a8>)
 8002b40:	483b      	ldr	r0, [pc, #236]	@ (8002c30 <process_modbus_request+0x794>)
 8002b42:	f7ff faff 	bl	8002144 <cdc_debug_log>
                reply[7] = fc + 0x80;  // 异常函数码
 8002b46:	f897 34de 	ldrb.w	r3, [r7, #1246]	@ 0x4de
 8002b4a:	3b80      	subs	r3, #128	@ 0x80
 8002b4c:	b2da      	uxtb	r2, r3
 8002b4e:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002b52:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002b56:	71da      	strb	r2, [r3, #7]
                reply[8] = 0x02;       // 异常代码：非法数据地址
 8002b58:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002b5c:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002b60:	2202      	movs	r2, #2
 8002b62:	721a      	strb	r2, [r3, #8]
                reply_data_len = 2;
 8002b64:	2302      	movs	r3, #2
 8002b66:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee
 8002b6a:	e201      	b.n	8002f70 <process_modbus_request+0xad4>
            } else {
                // 写入寄存器
                holding_regs[addr] = value;
 8002b6c:	f8b7 34c4 	ldrh.w	r3, [r7, #1220]	@ 0x4c4
 8002b70:	492d      	ldr	r1, [pc, #180]	@ (8002c28 <process_modbus_request+0x78c>)
 8002b72:	f8b7 24c2 	ldrh.w	r2, [r7, #1218]	@ 0x4c2
 8002b76:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
                
                // 回显请求（标准Modbus写单个寄存器响应）
                reply[7] = fc;                           // 函数码
 8002b7a:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002b7e:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002b82:	f897 24de 	ldrb.w	r2, [r7, #1246]	@ 0x4de
 8002b86:	71da      	strb	r2, [r3, #7]
                reply[8] = (addr >> 8) & 0xFF;          // 地址高字节
 8002b88:	f8b7 34c4 	ldrh.w	r3, [r7, #1220]	@ 0x4c4
 8002b8c:	0a1b      	lsrs	r3, r3, #8
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	b2da      	uxtb	r2, r3
 8002b92:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002b96:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002b9a:	721a      	strb	r2, [r3, #8]
                reply[9] = addr & 0xFF;                 // 地址低字节
 8002b9c:	f8b7 34c4 	ldrh.w	r3, [r7, #1220]	@ 0x4c4
 8002ba0:	b2da      	uxtb	r2, r3
 8002ba2:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002ba6:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002baa:	725a      	strb	r2, [r3, #9]
                reply[10] = (value >> 8) & 0xFF;        // 值高字节
 8002bac:	f8b7 34c2 	ldrh.w	r3, [r7, #1218]	@ 0x4c2
 8002bb0:	0a1b      	lsrs	r3, r3, #8
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	b2da      	uxtb	r2, r3
 8002bb6:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002bba:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002bbe:	729a      	strb	r2, [r3, #10]
                reply[11] = value & 0xFF;               // 值低字节
 8002bc0:	f8b7 34c2 	ldrh.w	r3, [r7, #1218]	@ 0x4c2
 8002bc4:	b2da      	uxtb	r2, r3
 8002bc6:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002bca:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002bce:	72da      	strb	r2, [r3, #11]
                reply_data_len = 5; // 功能码 + 地址 + 值 = 1+2+2 = 5
 8002bd0:	2305      	movs	r3, #5
 8002bd2:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee
                cdc_debug_log("MODBUS_TCP", "Write single success");
 8002bd6:	491c      	ldr	r1, [pc, #112]	@ (8002c48 <process_modbus_request+0x7ac>)
 8002bd8:	4815      	ldr	r0, [pc, #84]	@ (8002c30 <process_modbus_request+0x794>)
 8002bda:	f7ff fab3 	bl	8002144 <cdc_debug_log>
 8002bde:	e1c7      	b.n	8002f70 <process_modbus_request+0xad4>
            }
        }
    } else if (fc == FC_WRITE_MULTIPLE) {
 8002be0:	f897 34de 	ldrb.w	r3, [r7, #1246]	@ 0x4de
 8002be4:	2b10      	cmp	r3, #16
 8002be6:	f040 81ad 	bne.w	8002f44 <process_modbus_request+0xaa8>
        cdc_debug_log("MODBUS_TCP", "Processing write multiple");
 8002bea:	4918      	ldr	r1, [pc, #96]	@ (8002c4c <process_modbus_request+0x7b0>)
 8002bec:	4810      	ldr	r0, [pc, #64]	@ (8002c30 <process_modbus_request+0x794>)
 8002bee:	f7ff faa9 	bl	8002144 <cdc_debug_log>
        
        // 检查数据长度是否足够：单元ID + 功能码 + 起始地址 + 数量 + 字节数 = 1+1+2+2+1 = 7
        if (length < 7) {
 8002bf2:	f8b7 34e0 	ldrh.w	r3, [r7, #1248]	@ 0x4e0
 8002bf6:	2b06      	cmp	r3, #6
 8002bf8:	d82c      	bhi.n	8002c54 <process_modbus_request+0x7b8>
            cdc_debug_log("MODBUS_TCP", "Write multiple request too short");
 8002bfa:	4915      	ldr	r1, [pc, #84]	@ (8002c50 <process_modbus_request+0x7b4>)
 8002bfc:	480c      	ldr	r0, [pc, #48]	@ (8002c30 <process_modbus_request+0x794>)
 8002bfe:	f7ff faa1 	bl	8002144 <cdc_debug_log>
            reply[7] = fc + 0x80;  // 异常函数码
 8002c02:	f897 34de 	ldrb.w	r3, [r7, #1246]	@ 0x4de
 8002c06:	3b80      	subs	r3, #128	@ 0x80
 8002c08:	b2da      	uxtb	r2, r3
 8002c0a:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002c0e:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002c12:	71da      	strb	r2, [r3, #7]
            reply[8] = 0x03;       // 异常代码：非法数据值
 8002c14:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002c18:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002c1c:	2203      	movs	r2, #3
 8002c1e:	721a      	strb	r2, [r3, #8]
            reply_data_len = 2;
 8002c20:	2302      	movs	r3, #2
 8002c22:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee
 8002c26:	e1a3      	b.n	8002f70 <process_modbus_request+0xad4>
 8002c28:	200006c0 	.word	0x200006c0
 8002c2c:	0801ffb0 	.word	0x0801ffb0
 8002c30:	0801feec 	.word	0x0801feec
 8002c34:	0801ffc0 	.word	0x0801ffc0
 8002c38:	0801ffd8 	.word	0x0801ffd8
 8002c3c:	0801fff8 	.word	0x0801fff8
 8002c40:	08020004 	.word	0x08020004
 8002c44:	0802000c 	.word	0x0802000c
 8002c48:	08020028 	.word	0x08020028
 8002c4c:	08020040 	.word	0x08020040
 8002c50:	0802005c 	.word	0x0802005c
        } else {
            uint16_t addr = (buf[offset+8] << 8) | buf[offset+9];   // 起始地址
 8002c54:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002c58:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8002c5c:	881b      	ldrh	r3, [r3, #0]
 8002c5e:	3308      	adds	r3, #8
 8002c60:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 8002c64:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 8002c68:	6812      	ldr	r2, [r2, #0]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	b21b      	sxth	r3, r3
 8002c70:	021b      	lsls	r3, r3, #8
 8002c72:	b21a      	sxth	r2, r3
 8002c74:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002c78:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8002c7c:	881b      	ldrh	r3, [r3, #0]
 8002c7e:	3309      	adds	r3, #9
 8002c80:	f507 619e 	add.w	r1, r7, #1264	@ 0x4f0
 8002c84:	f5a1 619d 	sub.w	r1, r1, #1256	@ 0x4e8
 8002c88:	6809      	ldr	r1, [r1, #0]
 8002c8a:	440b      	add	r3, r1
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	b21b      	sxth	r3, r3
 8002c90:	4313      	orrs	r3, r2
 8002c92:	b21b      	sxth	r3, r3
 8002c94:	f8a7 34d2 	strh.w	r3, [r7, #1234]	@ 0x4d2
            uint16_t qty = (buf[offset+10] << 8) | buf[offset+11];  // 寄存器数量
 8002c98:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002c9c:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8002ca0:	881b      	ldrh	r3, [r3, #0]
 8002ca2:	330a      	adds	r3, #10
 8002ca4:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 8002ca8:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 8002cac:	6812      	ldr	r2, [r2, #0]
 8002cae:	4413      	add	r3, r2
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	b21b      	sxth	r3, r3
 8002cb4:	021b      	lsls	r3, r3, #8
 8002cb6:	b21a      	sxth	r2, r3
 8002cb8:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002cbc:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8002cc0:	881b      	ldrh	r3, [r3, #0]
 8002cc2:	330b      	adds	r3, #11
 8002cc4:	f507 619e 	add.w	r1, r7, #1264	@ 0x4f0
 8002cc8:	f5a1 619d 	sub.w	r1, r1, #1256	@ 0x4e8
 8002ccc:	6809      	ldr	r1, [r1, #0]
 8002cce:	440b      	add	r3, r1
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	b21b      	sxth	r3, r3
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	b21b      	sxth	r3, r3
 8002cd8:	f8a7 34d0 	strh.w	r3, [r7, #1232]	@ 0x4d0
            uint8_t byte_count = buf[offset+12];                    // 字节数
 8002cdc:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002ce0:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8002ce4:	881b      	ldrh	r3, [r3, #0]
 8002ce6:	330c      	adds	r3, #12
 8002ce8:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 8002cec:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 8002cf0:	6812      	ldr	r2, [r2, #0]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	f887 34cf 	strb.w	r3, [r7, #1231]	@ 0x4cf
            
            char write_info[60];
            strcpy(write_info, "Write mult addr=");
 8002cfa:	f107 0314 	add.w	r3, r7, #20
 8002cfe:	4a89      	ldr	r2, [pc, #548]	@ (8002f24 <process_modbus_request+0xa88>)
 8002d00:	461c      	mov	r4, r3
 8002d02:	4615      	mov	r5, r2
 8002d04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d08:	682b      	ldr	r3, [r5, #0]
 8002d0a:	7023      	strb	r3, [r4, #0]
            int_to_str(addr, write_info + strlen(write_info), 10);
 8002d0c:	f8b7 44d2 	ldrh.w	r4, [r7, #1234]	@ 0x4d2
 8002d10:	f107 0314 	add.w	r3, r7, #20
 8002d14:	4618      	mov	r0, r3
 8002d16:	f7fd fa5b 	bl	80001d0 <strlen>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	f107 0314 	add.w	r3, r7, #20
 8002d20:	4413      	add	r3, r2
 8002d22:	220a      	movs	r2, #10
 8002d24:	4619      	mov	r1, r3
 8002d26:	4620      	mov	r0, r4
 8002d28:	f7ff fa7a 	bl	8002220 <int_to_str>
            const char* qty_prefix = " qty=";
 8002d2c:	4b7e      	ldr	r3, [pc, #504]	@ (8002f28 <process_modbus_request+0xa8c>)
 8002d2e:	f8c7 34c8 	str.w	r3, [r7, #1224]	@ 0x4c8
            strcat(write_info, qty_prefix);
 8002d32:	f107 0314 	add.w	r3, r7, #20
 8002d36:	f8d7 14c8 	ldr.w	r1, [r7, #1224]	@ 0x4c8
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f01b fb63 	bl	801e406 <strcat>
            int_to_str(qty, write_info + strlen(write_info), 10);
 8002d40:	f8b7 44d0 	ldrh.w	r4, [r7, #1232]	@ 0x4d0
 8002d44:	f107 0314 	add.w	r3, r7, #20
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7fd fa41 	bl	80001d0 <strlen>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	f107 0314 	add.w	r3, r7, #20
 8002d54:	4413      	add	r3, r2
 8002d56:	220a      	movs	r2, #10
 8002d58:	4619      	mov	r1, r3
 8002d5a:	4620      	mov	r0, r4
 8002d5c:	f7ff fa60 	bl	8002220 <int_to_str>
            cdc_debug_log("MODBUS_TCP", write_info);
 8002d60:	f107 0314 	add.w	r3, r7, #20
 8002d64:	4619      	mov	r1, r3
 8002d66:	4871      	ldr	r0, [pc, #452]	@ (8002f2c <process_modbus_request+0xa90>)
 8002d68:	f7ff f9ec 	bl	8002144 <cdc_debug_log>
            
            // 验证参数
            if (qty == 0 || qty > 123 || byte_count != qty * 2) { // Modbus标准限制
 8002d6c:	f8b7 34d0 	ldrh.w	r3, [r7, #1232]	@ 0x4d0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d00a      	beq.n	8002d8a <process_modbus_request+0x8ee>
 8002d74:	f8b7 34d0 	ldrh.w	r3, [r7, #1232]	@ 0x4d0
 8002d78:	2b7b      	cmp	r3, #123	@ 0x7b
 8002d7a:	d806      	bhi.n	8002d8a <process_modbus_request+0x8ee>
 8002d7c:	f897 24cf 	ldrb.w	r2, [r7, #1231]	@ 0x4cf
 8002d80:	f8b7 34d0 	ldrh.w	r3, [r7, #1232]	@ 0x4d0
 8002d84:	005b      	lsls	r3, r3, #1
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d016      	beq.n	8002db8 <process_modbus_request+0x91c>
                cdc_debug_log("MODBUS_TCP", "Invalid write multiple parameters");
 8002d8a:	4969      	ldr	r1, [pc, #420]	@ (8002f30 <process_modbus_request+0xa94>)
 8002d8c:	4867      	ldr	r0, [pc, #412]	@ (8002f2c <process_modbus_request+0xa90>)
 8002d8e:	f7ff f9d9 	bl	8002144 <cdc_debug_log>
                reply[7] = fc + 0x80;  // 异常函数码
 8002d92:	f897 34de 	ldrb.w	r3, [r7, #1246]	@ 0x4de
 8002d96:	3b80      	subs	r3, #128	@ 0x80
 8002d98:	b2da      	uxtb	r2, r3
 8002d9a:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002d9e:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002da2:	71da      	strb	r2, [r3, #7]
                reply[8] = 0x03;       // 异常代码：非法数据值
 8002da4:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002da8:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002dac:	2203      	movs	r2, #3
 8002dae:	721a      	strb	r2, [r3, #8]
                reply_data_len = 2;
 8002db0:	2302      	movs	r3, #2
 8002db2:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee
 8002db6:	e0db      	b.n	8002f70 <process_modbus_request+0xad4>
            } else if (addr + qty > 100) { // 地址越界检查
 8002db8:	f8b7 24d2 	ldrh.w	r2, [r7, #1234]	@ 0x4d2
 8002dbc:	f8b7 34d0 	ldrh.w	r3, [r7, #1232]	@ 0x4d0
 8002dc0:	4413      	add	r3, r2
 8002dc2:	2b64      	cmp	r3, #100	@ 0x64
 8002dc4:	dd16      	ble.n	8002df4 <process_modbus_request+0x958>
                cdc_debug_log("MODBUS_TCP", "Write multiple address out of bounds");
 8002dc6:	495b      	ldr	r1, [pc, #364]	@ (8002f34 <process_modbus_request+0xa98>)
 8002dc8:	4858      	ldr	r0, [pc, #352]	@ (8002f2c <process_modbus_request+0xa90>)
 8002dca:	f7ff f9bb 	bl	8002144 <cdc_debug_log>
                reply[7] = fc + 0x80;  // 异常函数码
 8002dce:	f897 34de 	ldrb.w	r3, [r7, #1246]	@ 0x4de
 8002dd2:	3b80      	subs	r3, #128	@ 0x80
 8002dd4:	b2da      	uxtb	r2, r3
 8002dd6:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002dda:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002dde:	71da      	strb	r2, [r3, #7]
                reply[8] = 0x02;       // 异常代码：非法数据地址
 8002de0:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002de4:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002de8:	2202      	movs	r2, #2
 8002dea:	721a      	strb	r2, [r3, #8]
                reply_data_len = 2;
 8002dec:	2302      	movs	r3, #2
 8002dee:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee
 8002df2:	e0bd      	b.n	8002f70 <process_modbus_request+0xad4>
            } else if (length < 7 + byte_count) { // 检查是否有足够的数据
 8002df4:	f897 34cf 	ldrb.w	r3, [r7, #1231]	@ 0x4cf
 8002df8:	1d9a      	adds	r2, r3, #6
 8002dfa:	f8b7 34e0 	ldrh.w	r3, [r7, #1248]	@ 0x4e0
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	db16      	blt.n	8002e30 <process_modbus_request+0x994>
                cdc_debug_log("MODBUS_TCP", "Write multiple data incomplete");
 8002e02:	494d      	ldr	r1, [pc, #308]	@ (8002f38 <process_modbus_request+0xa9c>)
 8002e04:	4849      	ldr	r0, [pc, #292]	@ (8002f2c <process_modbus_request+0xa90>)
 8002e06:	f7ff f99d 	bl	8002144 <cdc_debug_log>
                reply[7] = fc + 0x80;  // 异常函数码
 8002e0a:	f897 34de 	ldrb.w	r3, [r7, #1246]	@ 0x4de
 8002e0e:	3b80      	subs	r3, #128	@ 0x80
 8002e10:	b2da      	uxtb	r2, r3
 8002e12:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002e16:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002e1a:	71da      	strb	r2, [r3, #7]
                reply[8] = 0x03;       // 异常代码：非法数据值
 8002e1c:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002e20:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002e24:	2203      	movs	r2, #3
 8002e26:	721a      	strb	r2, [r3, #8]
                reply_data_len = 2;
 8002e28:	2302      	movs	r3, #2
 8002e2a:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee
 8002e2e:	e09f      	b.n	8002f70 <process_modbus_request+0xad4>
            } else {
                // 写入多个寄存器
                for (uint16_t i = 0; i < qty; i++) {
 8002e30:	2300      	movs	r3, #0
 8002e32:	f8a7 34e6 	strh.w	r3, [r7, #1254]	@ 0x4e6
 8002e36:	e03c      	b.n	8002eb2 <process_modbus_request+0xa16>
                    uint16_t value = (buf[offset+13+i*2] << 8) | buf[offset+14+i*2];
 8002e38:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002e3c:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8002e40:	881b      	ldrh	r3, [r3, #0]
 8002e42:	f103 020d 	add.w	r2, r3, #13
 8002e46:	f8b7 34e6 	ldrh.w	r3, [r7, #1254]	@ 0x4e6
 8002e4a:	005b      	lsls	r3, r3, #1
 8002e4c:	4413      	add	r3, r2
 8002e4e:	461a      	mov	r2, r3
 8002e50:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002e54:	f5a3 639d 	sub.w	r3, r3, #1256	@ 0x4e8
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	b21b      	sxth	r3, r3
 8002e60:	021b      	lsls	r3, r3, #8
 8002e62:	b21a      	sxth	r2, r3
 8002e64:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002e68:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8002e6c:	881b      	ldrh	r3, [r3, #0]
 8002e6e:	f103 010e 	add.w	r1, r3, #14
 8002e72:	f8b7 34e6 	ldrh.w	r3, [r7, #1254]	@ 0x4e6
 8002e76:	005b      	lsls	r3, r3, #1
 8002e78:	440b      	add	r3, r1
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002e80:	f5a3 639d 	sub.w	r3, r3, #1256	@ 0x4e8
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	440b      	add	r3, r1
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	b21b      	sxth	r3, r3
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	b21b      	sxth	r3, r3
 8002e90:	f8a7 34c6 	strh.w	r3, [r7, #1222]	@ 0x4c6
                    holding_regs[addr + i] = value;
 8002e94:	f8b7 24d2 	ldrh.w	r2, [r7, #1234]	@ 0x4d2
 8002e98:	f8b7 34e6 	ldrh.w	r3, [r7, #1254]	@ 0x4e6
 8002e9c:	4413      	add	r3, r2
 8002e9e:	4927      	ldr	r1, [pc, #156]	@ (8002f3c <process_modbus_request+0xaa0>)
 8002ea0:	f8b7 24c6 	ldrh.w	r2, [r7, #1222]	@ 0x4c6
 8002ea4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
                for (uint16_t i = 0; i < qty; i++) {
 8002ea8:	f8b7 34e6 	ldrh.w	r3, [r7, #1254]	@ 0x4e6
 8002eac:	3301      	adds	r3, #1
 8002eae:	f8a7 34e6 	strh.w	r3, [r7, #1254]	@ 0x4e6
 8002eb2:	f8b7 24e6 	ldrh.w	r2, [r7, #1254]	@ 0x4e6
 8002eb6:	f8b7 34d0 	ldrh.w	r3, [r7, #1232]	@ 0x4d0
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d3bc      	bcc.n	8002e38 <process_modbus_request+0x99c>
                }
                
                // 响应：功能码 + 起始地址 + 寄存器数量
                reply[7] = fc;                          // 函数码
 8002ebe:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002ec2:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002ec6:	f897 24de 	ldrb.w	r2, [r7, #1246]	@ 0x4de
 8002eca:	71da      	strb	r2, [r3, #7]
                reply[8] = (addr >> 8) & 0xFF;         // 起始地址高字节
 8002ecc:	f8b7 34d2 	ldrh.w	r3, [r7, #1234]	@ 0x4d2
 8002ed0:	0a1b      	lsrs	r3, r3, #8
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	b2da      	uxtb	r2, r3
 8002ed6:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002eda:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002ede:	721a      	strb	r2, [r3, #8]
                reply[9] = addr & 0xFF;                // 起始地址低字节
 8002ee0:	f8b7 34d2 	ldrh.w	r3, [r7, #1234]	@ 0x4d2
 8002ee4:	b2da      	uxtb	r2, r3
 8002ee6:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002eea:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002eee:	725a      	strb	r2, [r3, #9]
                reply[10] = (qty >> 8) & 0xFF;         // 数量高字节
 8002ef0:	f8b7 34d0 	ldrh.w	r3, [r7, #1232]	@ 0x4d0
 8002ef4:	0a1b      	lsrs	r3, r3, #8
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	b2da      	uxtb	r2, r3
 8002efa:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002efe:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002f02:	729a      	strb	r2, [r3, #10]
                reply[11] = qty & 0xFF;                // 数量低字节
 8002f04:	f8b7 34d0 	ldrh.w	r3, [r7, #1232]	@ 0x4d0
 8002f08:	b2da      	uxtb	r2, r3
 8002f0a:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002f0e:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002f12:	72da      	strb	r2, [r3, #11]
                reply_data_len = 5; // 功能码 + 地址 + 数量 = 1+2+2 = 5
 8002f14:	2305      	movs	r3, #5
 8002f16:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee
                cdc_debug_log("MODBUS_TCP", "Write multiple success");
 8002f1a:	4909      	ldr	r1, [pc, #36]	@ (8002f40 <process_modbus_request+0xaa4>)
 8002f1c:	4803      	ldr	r0, [pc, #12]	@ (8002f2c <process_modbus_request+0xa90>)
 8002f1e:	f7ff f911 	bl	8002144 <cdc_debug_log>
 8002f22:	e025      	b.n	8002f70 <process_modbus_request+0xad4>
 8002f24:	08020080 	.word	0x08020080
 8002f28:	0801ff7c 	.word	0x0801ff7c
 8002f2c:	0801feec 	.word	0x0801feec
 8002f30:	08020094 	.word	0x08020094
 8002f34:	080200b8 	.word	0x080200b8
 8002f38:	080200e0 	.word	0x080200e0
 8002f3c:	200006c0 	.word	0x200006c0
 8002f40:	08020100 	.word	0x08020100
            }
        }
    } else {
        // 其他功能码暂时返回不支持
        cdc_debug_log("MODBUS_TCP", "Unsupported function code");
 8002f44:	4974      	ldr	r1, [pc, #464]	@ (8003118 <process_modbus_request+0xc7c>)
 8002f46:	4875      	ldr	r0, [pc, #468]	@ (800311c <process_modbus_request+0xc80>)
 8002f48:	f7ff f8fc 	bl	8002144 <cdc_debug_log>
        reply[7] = fc + 0x80;  // 异常函数码
 8002f4c:	f897 34de 	ldrb.w	r3, [r7, #1246]	@ 0x4de
 8002f50:	3b80      	subs	r3, #128	@ 0x80
 8002f52:	b2da      	uxtb	r2, r3
 8002f54:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002f58:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002f5c:	71da      	strb	r2, [r3, #7]
        reply[8] = 0x01;       // 异常代码：非法函数码
 8002f5e:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002f62:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002f66:	2201      	movs	r2, #1
 8002f68:	721a      	strb	r2, [r3, #8]
        reply_data_len = 2;
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee
    }

    // 设置长度字段 (包含单元ID + 数据部分)
    uint16_t total_length = reply_data_len + 1; // +1 for unit_id
 8002f70:	f8b7 34ee 	ldrh.w	r3, [r7, #1262]	@ 0x4ee
 8002f74:	3301      	adds	r3, #1
 8002f76:	f8a7 34ae 	strh.w	r3, [r7, #1198]	@ 0x4ae
    reply[4] = (total_length >> 8) & 0xFF; 
 8002f7a:	f8b7 34ae 	ldrh.w	r3, [r7, #1198]	@ 0x4ae
 8002f7e:	0a1b      	lsrs	r3, r3, #8
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	b2da      	uxtb	r2, r3
 8002f84:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002f88:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002f8c:	711a      	strb	r2, [r3, #4]
    reply[5] = total_length & 0xFF;
 8002f8e:	f8b7 34ae 	ldrh.w	r3, [r7, #1198]	@ 0x4ae
 8002f92:	b2da      	uxtb	r2, r3
 8002f94:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002f98:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002f9c:	715a      	strb	r2, [r3, #5]
    
    cdc_debug_log("MODBUS_TCP", "Sending reply");
 8002f9e:	4960      	ldr	r1, [pc, #384]	@ (8003120 <process_modbus_request+0xc84>)
 8002fa0:	485e      	ldr	r0, [pc, #376]	@ (800311c <process_modbus_request+0xc80>)
 8002fa2:	f7ff f8cf 	bl	8002144 <cdc_debug_log>
    
    // 发送完整的TCP帧 (6字节头 + 数据部分)
    uint16_t total_frame_len = 6 + total_length;
 8002fa6:	f8b7 34ae 	ldrh.w	r3, [r7, #1198]	@ 0x4ae
 8002faa:	3306      	adds	r3, #6
 8002fac:	f8a7 34ac 	strh.w	r3, [r7, #1196]	@ 0x4ac
    
    // 检查TCP发送缓冲区是否有足够空间
    u16_t available_space = tcp_sndbuf(tpcb);
 8002fb0:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002fb4:	f2a3 43e4 	subw	r3, r3, #1252	@ 0x4e4
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8002fbe:	f8a7 34aa 	strh.w	r3, [r7, #1194]	@ 0x4aa
    if (available_space < total_frame_len) {
 8002fc2:	f8b7 24aa 	ldrh.w	r2, [r7, #1194]	@ 0x4aa
 8002fc6:	f8b7 34ac 	ldrh.w	r3, [r7, #1196]	@ 0x4ac
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d223      	bcs.n	8003016 <process_modbus_request+0xb7a>
        char space_msg[50];
        strcpy(space_msg, "TCP buffer low: available=");
 8002fce:	f107 0314 	add.w	r3, r7, #20
 8002fd2:	4a54      	ldr	r2, [pc, #336]	@ (8003124 <process_modbus_request+0xc88>)
 8002fd4:	461c      	mov	r4, r3
 8002fd6:	4615      	mov	r5, r2
 8002fd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002fda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002fdc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002fe0:	c403      	stmia	r4!, {r0, r1}
 8002fe2:	8022      	strh	r2, [r4, #0]
 8002fe4:	3402      	adds	r4, #2
 8002fe6:	0c13      	lsrs	r3, r2, #16
 8002fe8:	7023      	strb	r3, [r4, #0]
        int_to_str(available_space, space_msg + strlen(space_msg), 10);
 8002fea:	f8b7 44aa 	ldrh.w	r4, [r7, #1194]	@ 0x4aa
 8002fee:	f107 0314 	add.w	r3, r7, #20
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7fd f8ec 	bl	80001d0 <strlen>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	f107 0314 	add.w	r3, r7, #20
 8002ffe:	4413      	add	r3, r2
 8003000:	220a      	movs	r2, #10
 8003002:	4619      	mov	r1, r3
 8003004:	4620      	mov	r0, r4
 8003006:	f7ff f90b 	bl	8002220 <int_to_str>
        cdc_debug_log("MODBUS_TCP", space_msg);
 800300a:	f107 0314 	add.w	r3, r7, #20
 800300e:	4619      	mov	r1, r3
 8003010:	4842      	ldr	r0, [pc, #264]	@ (800311c <process_modbus_request+0xc80>)
 8003012:	f7ff f897 	bl	8002144 <cdc_debug_log>
        // 仍然尝试发送，但记录警告
    }
    
    err_t write_err = tcp_write(tpcb, reply, total_frame_len, TCP_WRITE_FLAG_COPY);
 8003016:	f8b7 24ac 	ldrh.w	r2, [r7, #1196]	@ 0x4ac
 800301a:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800301e:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8003022:	f2a3 40e4 	subw	r0, r3, #1252	@ 0x4e4
 8003026:	2301      	movs	r3, #1
 8003028:	6800      	ldr	r0, [r0, #0]
 800302a:	f015 fdbf 	bl	8018bac <tcp_write>
 800302e:	4603      	mov	r3, r0
 8003030:	f887 34a9 	strb.w	r3, [r7, #1193]	@ 0x4a9
    if (write_err != ERR_OK) {
 8003034:	f997 34a9 	ldrsb.w	r3, [r7, #1193]	@ 0x4a9
 8003038:	2b00      	cmp	r3, #0
 800303a:	d02f      	beq.n	800309c <process_modbus_request+0xc00>
        char write_err_msg[40];
        strcpy(write_err_msg, "TCP write failed err=");
 800303c:	f107 0314 	add.w	r3, r7, #20
 8003040:	4a39      	ldr	r2, [pc, #228]	@ (8003128 <process_modbus_request+0xc8c>)
 8003042:	461c      	mov	r4, r3
 8003044:	4615      	mov	r5, r2
 8003046:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003048:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800304a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800304e:	6020      	str	r0, [r4, #0]
 8003050:	3404      	adds	r4, #4
 8003052:	8021      	strh	r1, [r4, #0]
        int_to_str(write_err, write_err_msg + strlen(write_err_msg), 10);
 8003054:	f997 44a9 	ldrsb.w	r4, [r7, #1193]	@ 0x4a9
 8003058:	f107 0314 	add.w	r3, r7, #20
 800305c:	4618      	mov	r0, r3
 800305e:	f7fd f8b7 	bl	80001d0 <strlen>
 8003062:	4602      	mov	r2, r0
 8003064:	f107 0314 	add.w	r3, r7, #20
 8003068:	4413      	add	r3, r2
 800306a:	220a      	movs	r2, #10
 800306c:	4619      	mov	r1, r3
 800306e:	4620      	mov	r0, r4
 8003070:	f7ff f8d6 	bl	8002220 <int_to_str>
        cdc_debug_log("MODBUS_TCP", write_err_msg);
 8003074:	f107 0314 	add.w	r3, r7, #20
 8003078:	4619      	mov	r1, r3
 800307a:	4828      	ldr	r0, [pc, #160]	@ (800311c <process_modbus_request+0xc80>)
 800307c:	f7ff f862 	bl	8002144 <cdc_debug_log>
        
        // 如果发送缓冲区满了，强制输出
        if (write_err == ERR_MEM) {
 8003080:	f997 34a9 	ldrsb.w	r3, [r7, #1193]	@ 0x4a9
 8003084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003088:	d106      	bne.n	8003098 <process_modbus_request+0xbfc>
            tcp_output(tpcb);
 800308a:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 800308e:	f2a3 43e4 	subw	r3, r3, #1252	@ 0x4e4
 8003092:	6818      	ldr	r0, [r3, #0]
 8003094:	f016 fb74 	bl	8019780 <tcp_output>
        }
        return ERR_OK; // 即使写入失败也返回OK，避免连接中断
 8003098:	2300      	movs	r3, #0
 800309a:	e038      	b.n	800310e <process_modbus_request+0xc72>
    }
    
    err_t output_err = tcp_output(tpcb);
 800309c:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80030a0:	f2a3 43e4 	subw	r3, r3, #1252	@ 0x4e4
 80030a4:	6818      	ldr	r0, [r3, #0]
 80030a6:	f016 fb6b 	bl	8019780 <tcp_output>
 80030aa:	4603      	mov	r3, r0
 80030ac:	f887 34a8 	strb.w	r3, [r7, #1192]	@ 0x4a8
    if (output_err != ERR_OK) {
 80030b0:	f997 34a8 	ldrsb.w	r3, [r7, #1192]	@ 0x4a8
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d025      	beq.n	8003104 <process_modbus_request+0xc68>
        char output_err_msg[40];
        strcpy(output_err_msg, "TCP output failed err=");
 80030b8:	f107 0314 	add.w	r3, r7, #20
 80030bc:	4a1b      	ldr	r2, [pc, #108]	@ (800312c <process_modbus_request+0xc90>)
 80030be:	461c      	mov	r4, r3
 80030c0:	4615      	mov	r5, r2
 80030c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80030c6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80030ca:	6020      	str	r0, [r4, #0]
 80030cc:	3404      	adds	r4, #4
 80030ce:	8021      	strh	r1, [r4, #0]
 80030d0:	3402      	adds	r4, #2
 80030d2:	0c0b      	lsrs	r3, r1, #16
 80030d4:	7023      	strb	r3, [r4, #0]
        int_to_str(output_err, output_err_msg + strlen(output_err_msg), 10);
 80030d6:	f997 44a8 	ldrsb.w	r4, [r7, #1192]	@ 0x4a8
 80030da:	f107 0314 	add.w	r3, r7, #20
 80030de:	4618      	mov	r0, r3
 80030e0:	f7fd f876 	bl	80001d0 <strlen>
 80030e4:	4602      	mov	r2, r0
 80030e6:	f107 0314 	add.w	r3, r7, #20
 80030ea:	4413      	add	r3, r2
 80030ec:	220a      	movs	r2, #10
 80030ee:	4619      	mov	r1, r3
 80030f0:	4620      	mov	r0, r4
 80030f2:	f7ff f895 	bl	8002220 <int_to_str>
        cdc_debug_log("MODBUS_TCP", output_err_msg);
 80030f6:	f107 0314 	add.w	r3, r7, #20
 80030fa:	4619      	mov	r1, r3
 80030fc:	4807      	ldr	r0, [pc, #28]	@ (800311c <process_modbus_request+0xc80>)
 80030fe:	f7ff f821 	bl	8002144 <cdc_debug_log>
 8003102:	e003      	b.n	800310c <process_modbus_request+0xc70>
    } else {
        cdc_debug_log("MODBUS_TCP", "Reply sent successfully");
 8003104:	490a      	ldr	r1, [pc, #40]	@ (8003130 <process_modbus_request+0xc94>)
 8003106:	4805      	ldr	r0, [pc, #20]	@ (800311c <process_modbus_request+0xc80>)
 8003108:	f7ff f81c 	bl	8002144 <cdc_debug_log>
    }
    
    return ERR_OK;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	f507 679e 	add.w	r7, r7, #1264	@ 0x4f0
 8003114:	46bd      	mov	sp, r7
 8003116:	bdb0      	pop	{r4, r5, r7, pc}
 8003118:	08020118 	.word	0x08020118
 800311c:	0801feec 	.word	0x0801feec
 8003120:	08020134 	.word	0x08020134
 8003124:	08020144 	.word	0x08020144
 8003128:	08020160 	.word	0x08020160
 800312c:	08020178 	.word	0x08020178
 8003130:	08020190 	.word	0x08020190

08003134 <modbus_tcp_init>:

// 初始化TCP Server
void modbus_tcp_init(void) {
 8003134:	b5b0      	push	{r4, r5, r7, lr}
 8003136:	b0ac      	sub	sp, #176	@ 0xb0
 8003138:	af00      	add	r7, sp, #0
    // 首先清零所有寄存器
    for (int i = 0; i < 100; i++) {
 800313a:	2300      	movs	r3, #0
 800313c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003140:	e00a      	b.n	8003158 <modbus_tcp_init+0x24>
        holding_regs[i] = 3;
 8003142:	4a8f      	ldr	r2, [pc, #572]	@ (8003380 <modbus_tcp_init+0x24c>)
 8003144:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003148:	2103      	movs	r1, #3
 800314a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < 100; i++) {
 800314e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003152:	3301      	adds	r3, #1
 8003154:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003158:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800315c:	2b63      	cmp	r3, #99	@ 0x63
 800315e:	ddf0      	ble.n	8003142 <modbus_tcp_init+0xe>
    }
    

    
    cdc_debug_log("MODBUS_TCP", "Clearing and initializing registers");
 8003160:	4988      	ldr	r1, [pc, #544]	@ (8003384 <modbus_tcp_init+0x250>)
 8003162:	4889      	ldr	r0, [pc, #548]	@ (8003388 <modbus_tcp_init+0x254>)
 8003164:	f7fe ffee 	bl	8002144 <cdc_debug_log>
    
    // 验证寄存器初始值并输出调试信息
    char reg_info[80];
    for (int i = 0; i < 4; i++) {
 8003168:	2300      	movs	r3, #0
 800316a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800316e:	e09f      	b.n	80032b0 <modbus_tcp_init+0x17c>
        strcpy(reg_info, "Reg[");
 8003170:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003174:	4a85      	ldr	r2, [pc, #532]	@ (800338c <modbus_tcp_init+0x258>)
 8003176:	e892 0003 	ldmia.w	r2, {r0, r1}
 800317a:	6018      	str	r0, [r3, #0]
 800317c:	3304      	adds	r3, #4
 800317e:	7019      	strb	r1, [r3, #0]
        int_to_str(i, reg_info + strlen(reg_info), 10);
 8003180:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003184:	4618      	mov	r0, r3
 8003186:	f7fd f823 	bl	80001d0 <strlen>
 800318a:	4602      	mov	r2, r0
 800318c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003190:	4413      	add	r3, r2
 8003192:	220a      	movs	r2, #10
 8003194:	4619      	mov	r1, r3
 8003196:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 800319a:	f7ff f841 	bl	8002220 <int_to_str>
        strcat(reg_info, "]=0x");
 800319e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7fd f814 	bl	80001d0 <strlen>
 80031a8:	4603      	mov	r3, r0
 80031aa:	461a      	mov	r2, r3
 80031ac:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80031b0:	4413      	add	r3, r2
 80031b2:	4a77      	ldr	r2, [pc, #476]	@ (8003390 <modbus_tcp_init+0x25c>)
 80031b4:	6810      	ldr	r0, [r2, #0]
 80031b6:	6018      	str	r0, [r3, #0]
 80031b8:	7912      	ldrb	r2, [r2, #4]
 80031ba:	711a      	strb	r2, [r3, #4]
        // 简单的十六进制转换
        uint16_t val = holding_regs[i];
 80031bc:	4a70      	ldr	r2, [pc, #448]	@ (8003380 <modbus_tcp_init+0x24c>)
 80031be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80031c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031c6:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
        char hex_str[5];
        hex_str[4] = '\0';
 80031ca:	2300      	movs	r3, #0
 80031cc:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
        for (int j = 3; j >= 0; j--) {
 80031d0:	2303      	movs	r3, #3
 80031d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80031d6:	e026      	b.n	8003226 <modbus_tcp_init+0xf2>
            int nibble = (val >> (j * 4)) & 0xF;
 80031d8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	@ 0x96
 80031dc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	fa42 f303 	asr.w	r3, r2, r3
 80031e6:	f003 030f 	and.w	r3, r3, #15
 80031ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
            hex_str[3-j] = (nibble < 10) ? ('0' + nibble) : ('A' + nibble - 10);
 80031ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80031f2:	2b09      	cmp	r3, #9
 80031f4:	dc05      	bgt.n	8003202 <modbus_tcp_init+0xce>
 80031f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	3330      	adds	r3, #48	@ 0x30
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	e004      	b.n	800320c <modbus_tcp_init+0xd8>
 8003202:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003206:	b2db      	uxtb	r3, r3
 8003208:	3337      	adds	r3, #55	@ 0x37
 800320a:	b2db      	uxtb	r3, r3
 800320c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8003210:	f1c2 0203 	rsb	r2, r2, #3
 8003214:	32b0      	adds	r2, #176	@ 0xb0
 8003216:	443a      	add	r2, r7
 8003218:	f802 3c78 	strb.w	r3, [r2, #-120]
        for (int j = 3; j >= 0; j--) {
 800321c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003220:	3b01      	subs	r3, #1
 8003222:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003226:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800322a:	2b00      	cmp	r3, #0
 800322c:	dad4      	bge.n	80031d8 <modbus_tcp_init+0xa4>
        }
        strcat(reg_info, hex_str);
 800322e:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8003232:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003236:	4611      	mov	r1, r2
 8003238:	4618      	mov	r0, r3
 800323a:	f01b f8e4 	bl	801e406 <strcat>
        strcat(reg_info, " (");
 800323e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003242:	4618      	mov	r0, r3
 8003244:	f7fc ffc4 	bl	80001d0 <strlen>
 8003248:	4603      	mov	r3, r0
 800324a:	461a      	mov	r2, r3
 800324c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003250:	4413      	add	r3, r2
 8003252:	4a50      	ldr	r2, [pc, #320]	@ (8003394 <modbus_tcp_init+0x260>)
 8003254:	8811      	ldrh	r1, [r2, #0]
 8003256:	7892      	ldrb	r2, [r2, #2]
 8003258:	8019      	strh	r1, [r3, #0]
 800325a:	709a      	strb	r2, [r3, #2]
        int_to_str(val, reg_info + strlen(reg_info), 10);
 800325c:	f8b7 4096 	ldrh.w	r4, [r7, #150]	@ 0x96
 8003260:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003264:	4618      	mov	r0, r3
 8003266:	f7fc ffb3 	bl	80001d0 <strlen>
 800326a:	4602      	mov	r2, r0
 800326c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003270:	4413      	add	r3, r2
 8003272:	220a      	movs	r2, #10
 8003274:	4619      	mov	r1, r3
 8003276:	4620      	mov	r0, r4
 8003278:	f7fe ffd2 	bl	8002220 <int_to_str>
        strcat(reg_info, ")");
 800327c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003280:	4618      	mov	r0, r3
 8003282:	f7fc ffa5 	bl	80001d0 <strlen>
 8003286:	4603      	mov	r3, r0
 8003288:	461a      	mov	r2, r3
 800328a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800328e:	4413      	add	r3, r2
 8003290:	4941      	ldr	r1, [pc, #260]	@ (8003398 <modbus_tcp_init+0x264>)
 8003292:	461a      	mov	r2, r3
 8003294:	460b      	mov	r3, r1
 8003296:	881b      	ldrh	r3, [r3, #0]
 8003298:	8013      	strh	r3, [r2, #0]
        cdc_debug_log("MODBUS_TCP", reg_info);
 800329a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800329e:	4619      	mov	r1, r3
 80032a0:	4839      	ldr	r0, [pc, #228]	@ (8003388 <modbus_tcp_init+0x254>)
 80032a2:	f7fe ff4f 	bl	8002144 <cdc_debug_log>
    for (int i = 0; i < 4; i++) {
 80032a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80032aa:	3301      	adds	r3, #1
 80032ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80032b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80032b4:	2b03      	cmp	r3, #3
 80032b6:	f77f af5b 	ble.w	8003170 <modbus_tcp_init+0x3c>
    }
    
    cdc_debug_log("MODBUS_TCP", "Register initialization verified");
 80032ba:	4938      	ldr	r1, [pc, #224]	@ (800339c <modbus_tcp_init+0x268>)
 80032bc:	4832      	ldr	r0, [pc, #200]	@ (8003388 <modbus_tcp_init+0x254>)
 80032be:	f7fe ff41 	bl	8002144 <cdc_debug_log>
    
    struct tcp_pcb *tpcb = tcp_new();
 80032c2:	f012 fd71 	bl	8015da8 <tcp_new>
 80032c6:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
    if (tpcb == NULL) {
 80032ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d104      	bne.n	80032dc <modbus_tcp_init+0x1a8>
        cdc_debug_log("MODBUS_TCP", "Failed to create TCP PCB");
 80032d2:	4933      	ldr	r1, [pc, #204]	@ (80033a0 <modbus_tcp_init+0x26c>)
 80032d4:	482c      	ldr	r0, [pc, #176]	@ (8003388 <modbus_tcp_init+0x254>)
 80032d6:	f7fe ff35 	bl	8002144 <cdc_debug_log>
        return;
 80032da:	e04e      	b.n	800337a <modbus_tcp_init+0x246>
    }
    
    err_t bind_err = tcp_bind(tpcb, IP_ADDR_ANY, 502); // Modbus TCP端口502
 80032dc:	f44f 72fb 	mov.w	r2, #502	@ 0x1f6
 80032e0:	4930      	ldr	r1, [pc, #192]	@ (80033a4 <modbus_tcp_init+0x270>)
 80032e2:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 80032e6:	f011 fcb9 	bl	8014c5c <tcp_bind>
 80032ea:	4603      	mov	r3, r0
 80032ec:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
    if (bind_err != ERR_OK) {
 80032f0:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d027      	beq.n	8003348 <modbus_tcp_init+0x214>
        char err_msg[50];
        const char* prefix = "TCP bind failed: ";
 80032f8:	4b2b      	ldr	r3, [pc, #172]	@ (80033a8 <modbus_tcp_init+0x274>)
 80032fa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        strcpy(err_msg, prefix);
 80032fe:	1d3b      	adds	r3, r7, #4
 8003300:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8003304:	4618      	mov	r0, r3
 8003306:	f01b f96c 	bl	801e5e2 <strcpy>
        int_to_str(bind_err, err_msg + strlen(prefix), sizeof(err_msg) - strlen(prefix));
 800330a:	f997 409f 	ldrsb.w	r4, [r7, #159]	@ 0x9f
 800330e:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8003312:	f7fc ff5d 	bl	80001d0 <strlen>
 8003316:	4602      	mov	r2, r0
 8003318:	1d3b      	adds	r3, r7, #4
 800331a:	189d      	adds	r5, r3, r2
 800331c:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8003320:	f7fc ff56 	bl	80001d0 <strlen>
 8003324:	4603      	mov	r3, r0
 8003326:	f1c3 0332 	rsb	r3, r3, #50	@ 0x32
 800332a:	461a      	mov	r2, r3
 800332c:	4629      	mov	r1, r5
 800332e:	4620      	mov	r0, r4
 8003330:	f7fe ff76 	bl	8002220 <int_to_str>
        cdc_debug_log("MODBUS_TCP", err_msg);
 8003334:	1d3b      	adds	r3, r7, #4
 8003336:	4619      	mov	r1, r3
 8003338:	4813      	ldr	r0, [pc, #76]	@ (8003388 <modbus_tcp_init+0x254>)
 800333a:	f7fe ff03 	bl	8002144 <cdc_debug_log>
        tcp_close(tpcb);
 800333e:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8003342:	f011 fb95 	bl	8014a70 <tcp_close>
 8003346:	e018      	b.n	800337a <modbus_tcp_init+0x246>
        return;
    }
    
    tpcb = tcp_listen(tpcb);
 8003348:	21ff      	movs	r1, #255	@ 0xff
 800334a:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 800334e:	f011 fd3d 	bl	8014dcc <tcp_listen_with_backlog>
 8003352:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
    if (tpcb == NULL) {
 8003356:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d104      	bne.n	8003368 <modbus_tcp_init+0x234>
        cdc_debug_log("MODBUS_TCP", "Failed to set TCP to listen mode");
 800335e:	4913      	ldr	r1, [pc, #76]	@ (80033ac <modbus_tcp_init+0x278>)
 8003360:	4809      	ldr	r0, [pc, #36]	@ (8003388 <modbus_tcp_init+0x254>)
 8003362:	f7fe feef 	bl	8002144 <cdc_debug_log>
        return;
 8003366:	e008      	b.n	800337a <modbus_tcp_init+0x246>
    }
    
    tcp_accept(tpcb, modbus_tcp_accept);
 8003368:	4911      	ldr	r1, [pc, #68]	@ (80033b0 <modbus_tcp_init+0x27c>)
 800336a:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 800336e:	f012 fd89 	bl	8015e84 <tcp_accept>
    cdc_debug_log("MODBUS_TCP", "TCP server started on port 502");
 8003372:	4910      	ldr	r1, [pc, #64]	@ (80033b4 <modbus_tcp_init+0x280>)
 8003374:	4804      	ldr	r0, [pc, #16]	@ (8003388 <modbus_tcp_init+0x254>)
 8003376:	f7fe fee5 	bl	8002144 <cdc_debug_log>
}
 800337a:	37b0      	adds	r7, #176	@ 0xb0
 800337c:	46bd      	mov	sp, r7
 800337e:	bdb0      	pop	{r4, r5, r7, pc}
 8003380:	200006c0 	.word	0x200006c0
 8003384:	080201a8 	.word	0x080201a8
 8003388:	0801feec 	.word	0x0801feec
 800338c:	080201cc 	.word	0x080201cc
 8003390:	080201d4 	.word	0x080201d4
 8003394:	080201dc 	.word	0x080201dc
 8003398:	080201e0 	.word	0x080201e0
 800339c:	080201e4 	.word	0x080201e4
 80033a0:	08020208 	.word	0x08020208
 80033a4:	08023ef0 	.word	0x08023ef0
 80033a8:	08020224 	.word	0x08020224
 80033ac:	08020238 	.word	0x08020238
 80033b0:	08003489 	.word	0x08003489
 80033b4:	0802025c 	.word	0x0802025c

080033b8 <modbus_tcp_sent>:

// 发送确认回调
err_t modbus_tcp_sent(void *arg, struct tcp_pcb *tpcb, u16_t len) {
 80033b8:	b590      	push	{r4, r7, lr}
 80033ba:	b08f      	sub	sp, #60	@ 0x3c
 80033bc:	af00      	add	r7, sp, #0
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	4613      	mov	r3, r2
 80033c4:	80fb      	strh	r3, [r7, #6]
    // 简单记录发送确认
    char sent_msg[40];
    strcpy(sent_msg, "TCP sent ");
 80033c6:	f107 0310 	add.w	r3, r7, #16
 80033ca:	4a17      	ldr	r2, [pc, #92]	@ (8003428 <modbus_tcp_sent+0x70>)
 80033cc:	ca07      	ldmia	r2, {r0, r1, r2}
 80033ce:	c303      	stmia	r3!, {r0, r1}
 80033d0:	801a      	strh	r2, [r3, #0]
    int_to_str(len, sent_msg + strlen(sent_msg), 10);
 80033d2:	88fc      	ldrh	r4, [r7, #6]
 80033d4:	f107 0310 	add.w	r3, r7, #16
 80033d8:	4618      	mov	r0, r3
 80033da:	f7fc fef9 	bl	80001d0 <strlen>
 80033de:	4602      	mov	r2, r0
 80033e0:	f107 0310 	add.w	r3, r7, #16
 80033e4:	4413      	add	r3, r2
 80033e6:	220a      	movs	r2, #10
 80033e8:	4619      	mov	r1, r3
 80033ea:	4620      	mov	r0, r4
 80033ec:	f7fe ff18 	bl	8002220 <int_to_str>
    strcat(sent_msg, " bytes");
 80033f0:	f107 0310 	add.w	r3, r7, #16
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7fc feeb 	bl	80001d0 <strlen>
 80033fa:	4603      	mov	r3, r0
 80033fc:	461a      	mov	r2, r3
 80033fe:	f107 0310 	add.w	r3, r7, #16
 8003402:	4413      	add	r3, r2
 8003404:	4a09      	ldr	r2, [pc, #36]	@ (800342c <modbus_tcp_sent+0x74>)
 8003406:	6810      	ldr	r0, [r2, #0]
 8003408:	6018      	str	r0, [r3, #0]
 800340a:	8891      	ldrh	r1, [r2, #4]
 800340c:	7992      	ldrb	r2, [r2, #6]
 800340e:	8099      	strh	r1, [r3, #4]
 8003410:	719a      	strb	r2, [r3, #6]
    cdc_debug_log("MODBUS_TCP", sent_msg);
 8003412:	f107 0310 	add.w	r3, r7, #16
 8003416:	4619      	mov	r1, r3
 8003418:	4805      	ldr	r0, [pc, #20]	@ (8003430 <modbus_tcp_sent+0x78>)
 800341a:	f7fe fe93 	bl	8002144 <cdc_debug_log>
    return ERR_OK;
 800341e:	2300      	movs	r3, #0
}
 8003420:	4618      	mov	r0, r3
 8003422:	373c      	adds	r7, #60	@ 0x3c
 8003424:	46bd      	mov	sp, r7
 8003426:	bd90      	pop	{r4, r7, pc}
 8003428:	0802027c 	.word	0x0802027c
 800342c:	08020288 	.word	0x08020288
 8003430:	0801feec 	.word	0x0801feec

08003434 <modbus_tcp_error>:

// 连接错误回调
void modbus_tcp_error(void *arg, err_t err) {
 8003434:	b590      	push	{r4, r7, lr}
 8003436:	b08d      	sub	sp, #52	@ 0x34
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	460b      	mov	r3, r1
 800343e:	70fb      	strb	r3, [r7, #3]
    char err_msg[40];
    strcpy(err_msg, "TCP error: ");
 8003440:	f107 0308 	add.w	r3, r7, #8
 8003444:	4a0e      	ldr	r2, [pc, #56]	@ (8003480 <modbus_tcp_error+0x4c>)
 8003446:	ca07      	ldmia	r2, {r0, r1, r2}
 8003448:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    int_to_str(err, err_msg + strlen(err_msg), 10);
 800344c:	f997 4003 	ldrsb.w	r4, [r7, #3]
 8003450:	f107 0308 	add.w	r3, r7, #8
 8003454:	4618      	mov	r0, r3
 8003456:	f7fc febb 	bl	80001d0 <strlen>
 800345a:	4602      	mov	r2, r0
 800345c:	f107 0308 	add.w	r3, r7, #8
 8003460:	4413      	add	r3, r2
 8003462:	220a      	movs	r2, #10
 8003464:	4619      	mov	r1, r3
 8003466:	4620      	mov	r0, r4
 8003468:	f7fe feda 	bl	8002220 <int_to_str>
    cdc_debug_log("MODBUS_TCP", err_msg);
 800346c:	f107 0308 	add.w	r3, r7, #8
 8003470:	4619      	mov	r1, r3
 8003472:	4804      	ldr	r0, [pc, #16]	@ (8003484 <modbus_tcp_error+0x50>)
 8003474:	f7fe fe66 	bl	8002144 <cdc_debug_log>
}
 8003478:	bf00      	nop
 800347a:	3734      	adds	r7, #52	@ 0x34
 800347c:	46bd      	mov	sp, r7
 800347e:	bd90      	pop	{r4, r7, pc}
 8003480:	08020290 	.word	0x08020290
 8003484:	0801feec 	.word	0x0801feec

08003488 <modbus_tcp_accept>:

// Accept回调
err_t modbus_tcp_accept(void *arg, struct tcp_pcb *newpcb, err_t err) {
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	4613      	mov	r3, r2
 8003494:	71fb      	strb	r3, [r7, #7]
    if (err != ERR_OK || newpcb == NULL) {
 8003496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d102      	bne.n	80034a4 <modbus_tcp_accept+0x1c>
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d106      	bne.n	80034b2 <modbus_tcp_accept+0x2a>
        cdc_debug_log("MODBUS_TCP", "Accept failed");
 80034a4:	4911      	ldr	r1, [pc, #68]	@ (80034ec <modbus_tcp_accept+0x64>)
 80034a6:	4812      	ldr	r0, [pc, #72]	@ (80034f0 <modbus_tcp_accept+0x68>)
 80034a8:	f7fe fe4c 	bl	8002144 <cdc_debug_log>
        return err;
 80034ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034b0:	e017      	b.n	80034e2 <modbus_tcp_accept+0x5a>
    }
    
    cdc_debug_log("MODBUS_TCP", "Client connected");
 80034b2:	4910      	ldr	r1, [pc, #64]	@ (80034f4 <modbus_tcp_accept+0x6c>)
 80034b4:	480e      	ldr	r0, [pc, #56]	@ (80034f0 <modbus_tcp_accept+0x68>)
 80034b6:	f7fe fe45 	bl	8002144 <cdc_debug_log>
    
    // 设置连接参数
    tcp_setprio(newpcb, TCP_PRIO_MIN);
 80034ba:	2101      	movs	r1, #1
 80034bc:	68b8      	ldr	r0, [r7, #8]
 80034be:	f012 fa81 	bl	80159c4 <tcp_setprio>
    tcp_recv(newpcb, modbus_tcp_recv);
 80034c2:	490d      	ldr	r1, [pc, #52]	@ (80034f8 <modbus_tcp_accept+0x70>)
 80034c4:	68b8      	ldr	r0, [r7, #8]
 80034c6:	f012 fc77 	bl	8015db8 <tcp_recv>
    tcp_sent(newpcb, modbus_tcp_sent);  // 添加发送确认回调
 80034ca:	490c      	ldr	r1, [pc, #48]	@ (80034fc <modbus_tcp_accept+0x74>)
 80034cc:	68b8      	ldr	r0, [r7, #8]
 80034ce:	f012 fc95 	bl	8015dfc <tcp_sent>
    tcp_err(newpcb, modbus_tcp_error);
 80034d2:	490b      	ldr	r1, [pc, #44]	@ (8003500 <modbus_tcp_accept+0x78>)
 80034d4:	68b8      	ldr	r0, [r7, #8]
 80034d6:	f012 fcb3 	bl	8015e40 <tcp_err>
    
    // 设置保活参数，防止连接超时
    tcp_keepalive(newpcb);
 80034da:	68b8      	ldr	r0, [r7, #8]
 80034dc:	f016 ffb8 	bl	801a450 <tcp_keepalive>
    
    return ERR_OK;
 80034e0:	2300      	movs	r3, #0
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3710      	adds	r7, #16
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	0802029c 	.word	0x0802029c
 80034f0:	0801feec 	.word	0x0801feec
 80034f4:	080202ac 	.word	0x080202ac
 80034f8:	08003505 	.word	0x08003505
 80034fc:	080033b9 	.word	0x080033b9
 8003500:	08003435 	.word	0x08003435

08003504 <modbus_tcp_recv>:

// Recv回调：处理Modbus请求
err_t modbus_tcp_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err) {
 8003504:	b5b0      	push	{r4, r5, r7, lr}
 8003506:	f5ad 6d9c 	sub.w	sp, sp, #1248	@ 0x4e0
 800350a:	af00      	add	r7, sp, #0
 800350c:	f507 649c 	add.w	r4, r7, #1248	@ 0x4e0
 8003510:	f2a4 44d4 	subw	r4, r4, #1236	@ 0x4d4
 8003514:	6020      	str	r0, [r4, #0]
 8003516:	f507 609c 	add.w	r0, r7, #1248	@ 0x4e0
 800351a:	f5a0 609b 	sub.w	r0, r0, #1240	@ 0x4d8
 800351e:	6001      	str	r1, [r0, #0]
 8003520:	f507 619c 	add.w	r1, r7, #1248	@ 0x4e0
 8003524:	f2a1 41dc 	subw	r1, r1, #1244	@ 0x4dc
 8003528:	600a      	str	r2, [r1, #0]
 800352a:	461a      	mov	r2, r3
 800352c:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8003530:	f2a3 43dd 	subw	r3, r3, #1245	@ 0x4dd
 8003534:	701a      	strb	r2, [r3, #0]
    if (err != ERR_OK) {
 8003536:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 800353a:	f2a3 43dd 	subw	r3, r3, #1245	@ 0x4dd
 800353e:	f993 3000 	ldrsb.w	r3, [r3]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d018      	beq.n	8003578 <modbus_tcp_recv+0x74>
        cdc_debug_log("MODBUS_TCP", "Receive error");
 8003546:	49bf      	ldr	r1, [pc, #764]	@ (8003844 <modbus_tcp_recv+0x340>)
 8003548:	48bf      	ldr	r0, [pc, #764]	@ (8003848 <modbus_tcp_recv+0x344>)
 800354a:	f7fe fdfb 	bl	8002144 <cdc_debug_log>
        if (p != NULL) {
 800354e:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8003552:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d006      	beq.n	800356a <modbus_tcp_recv+0x66>
            pbuf_free(p);
 800355c:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8003560:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8003564:	6818      	ldr	r0, [r3, #0]
 8003566:	f010 fdd9 	bl	801411c <pbuf_free>
        }
        return err;
 800356a:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 800356e:	f2a3 43dd 	subw	r3, r3, #1245	@ 0x4dd
 8003572:	f993 3000 	ldrsb.w	r3, [r3]
 8003576:	e15f      	b.n	8003838 <modbus_tcp_recv+0x334>
    }
    
    if (p == NULL) { // 连接关闭
 8003578:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 800357c:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d10c      	bne.n	80035a0 <modbus_tcp_recv+0x9c>
        cdc_debug_log("MODBUS_TCP", "Client disconnected");
 8003586:	49b1      	ldr	r1, [pc, #708]	@ (800384c <modbus_tcp_recv+0x348>)
 8003588:	48af      	ldr	r0, [pc, #700]	@ (8003848 <modbus_tcp_recv+0x344>)
 800358a:	f7fe fddb 	bl	8002144 <cdc_debug_log>
        tcp_close(tpcb);
 800358e:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8003592:	f5a3 639b 	sub.w	r3, r3, #1240	@ 0x4d8
 8003596:	6818      	ldr	r0, [r3, #0]
 8003598:	f011 fa6a 	bl	8014a70 <tcp_close>
        return ERR_OK;
 800359c:	2300      	movs	r3, #0
 800359e:	e14b      	b.n	8003838 <modbus_tcp_recv+0x334>
    }

    // 获取数据长度并通知TCP栈已接收
    uint16_t data_len = p->tot_len;
 80035a0:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 80035a4:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	891b      	ldrh	r3, [r3, #8]
 80035ac:	f8a7 34da 	strh.w	r3, [r7, #1242]	@ 0x4da
    tcp_recved(tpcb, data_len); // 重要：通知LwIP已处理数据
 80035b0:	f8b7 24da 	ldrh.w	r2, [r7, #1242]	@ 0x4da
 80035b4:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 80035b8:	f5a3 639b 	sub.w	r3, r3, #1240	@ 0x4d8
 80035bc:	4611      	mov	r1, r2
 80035be:	6818      	ldr	r0, [r3, #0]
 80035c0:	f011 fd1a 	bl	8014ff8 <tcp_recved>
    
    // 添加更详细的接收数据信息
    char recv_info[60];
    const char* prefix = "Received data len=";
 80035c4:	4ba2      	ldr	r3, [pc, #648]	@ (8003850 <modbus_tcp_recv+0x34c>)
 80035c6:	f8c7 34d4 	str.w	r3, [r7, #1236]	@ 0x4d4
    strcpy(recv_info, prefix);
 80035ca:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 80035ce:	f8d7 14d4 	ldr.w	r1, [r7, #1236]	@ 0x4d4
 80035d2:	4618      	mov	r0, r3
 80035d4:	f01b f805 	bl	801e5e2 <strcpy>
    int_to_str(data_len, recv_info + strlen(prefix), sizeof(recv_info) - strlen(prefix));
 80035d8:	f8b7 44da 	ldrh.w	r4, [r7, #1242]	@ 0x4da
 80035dc:	f8d7 04d4 	ldr.w	r0, [r7, #1236]	@ 0x4d4
 80035e0:	f7fc fdf6 	bl	80001d0 <strlen>
 80035e4:	4602      	mov	r2, r0
 80035e6:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 80035ea:	189d      	adds	r5, r3, r2
 80035ec:	f8d7 04d4 	ldr.w	r0, [r7, #1236]	@ 0x4d4
 80035f0:	f7fc fdee 	bl	80001d0 <strlen>
 80035f4:	4603      	mov	r3, r0
 80035f6:	f1c3 033c 	rsb	r3, r3, #60	@ 0x3c
 80035fa:	461a      	mov	r2, r3
 80035fc:	4629      	mov	r1, r5
 80035fe:	4620      	mov	r0, r4
 8003600:	f7fe fe0e 	bl	8002220 <int_to_str>
    cdc_debug_log("MODBUS_TCP", recv_info);
 8003604:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 8003608:	4619      	mov	r1, r3
 800360a:	488f      	ldr	r0, [pc, #572]	@ (8003848 <modbus_tcp_recv+0x344>)
 800360c:	f7fe fd9a 	bl	8002144 <cdc_debug_log>

    uint8_t buf[1024];
    uint16_t len = pbuf_copy_partial(p, buf, data_len, 0);
 8003610:	f8b7 24da 	ldrh.w	r2, [r7, #1242]	@ 0x4da
 8003614:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 8003618:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 800361c:	f2a3 40dc 	subw	r0, r3, #1244	@ 0x4dc
 8003620:	2300      	movs	r3, #0
 8003622:	6800      	ldr	r0, [r0, #0]
 8003624:	f010 ff70 	bl	8014508 <pbuf_copy_partial>
 8003628:	4603      	mov	r3, r0
 800362a:	f8a7 34d2 	strh.w	r3, [r7, #1234]	@ 0x4d2
    pbuf_free(p);
 800362e:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8003632:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8003636:	6818      	ldr	r0, [r3, #0]
 8003638:	f010 fd70 	bl	801411c <pbuf_free>

    // 转储接收到的原始数据用于调试
    dump_data(buf, len);
 800363c:	f8b7 24d2 	ldrh.w	r2, [r7, #1234]	@ 0x4d2
 8003640:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8003644:	4611      	mov	r1, r2
 8003646:	4618      	mov	r0, r3
 8003648:	f7fe fe9e 	bl	8002388 <dump_data>

    // 检查最小帧长度
    if (len < 8) { // Modbus TCP最小长度: 6字节头 + 2字节最小数据
 800364c:	f8b7 34d2 	ldrh.w	r3, [r7, #1234]	@ 0x4d2
 8003650:	2b07      	cmp	r3, #7
 8003652:	d806      	bhi.n	8003662 <modbus_tcp_recv+0x15e>
        cdc_debug_log("MODBUS_TCP", "Frame too short");
 8003654:	497f      	ldr	r1, [pc, #508]	@ (8003854 <modbus_tcp_recv+0x350>)
 8003656:	487c      	ldr	r0, [pc, #496]	@ (8003848 <modbus_tcp_recv+0x344>)
 8003658:	f7fe fd74 	bl	8002144 <cdc_debug_log>
        return ERR_VAL;
 800365c:	f06f 0305 	mvn.w	r3, #5
 8003660:	e0ea      	b.n	8003838 <modbus_tcp_recv+0x334>
    }

    // 处理可能包含多个Modbus请求的数据包
    uint16_t offset = 0;
 8003662:	2300      	movs	r3, #0
 8003664:	f8a7 34de 	strh.w	r3, [r7, #1246]	@ 0x4de
    uint16_t processed_frames = 0;
 8003668:	2300      	movs	r3, #0
 800366a:	f8a7 34dc 	strh.w	r3, [r7, #1244]	@ 0x4dc
    
    while (offset < len && processed_frames < 10) { // 最多处理10个帧，防止无限循环
 800366e:	e092      	b.n	8003796 <modbus_tcp_recv+0x292>
        // 检查是否还有足够的数据读取帧头
        if (offset + 6 > len) {
 8003670:	f8b7 34de 	ldrh.w	r3, [r7, #1246]	@ 0x4de
 8003674:	1d5a      	adds	r2, r3, #5
 8003676:	f8b7 34d2 	ldrh.w	r3, [r7, #1234]	@ 0x4d2
 800367a:	429a      	cmp	r2, r3
 800367c:	db04      	blt.n	8003688 <modbus_tcp_recv+0x184>
            cdc_debug_log("MODBUS_TCP", "No more complete frames");
 800367e:	4976      	ldr	r1, [pc, #472]	@ (8003858 <modbus_tcp_recv+0x354>)
 8003680:	4871      	ldr	r0, [pc, #452]	@ (8003848 <modbus_tcp_recv+0x344>)
 8003682:	f7fe fd5f 	bl	8002144 <cdc_debug_log>
            break;
 8003686:	e093      	b.n	80037b0 <modbus_tcp_recv+0x2ac>
        }
        
        // 获取长度字段
        uint16_t frame_length = (buf[offset+4] << 8) | buf[offset+5];
 8003688:	f8b7 34de 	ldrh.w	r3, [r7, #1246]	@ 0x4de
 800368c:	3304      	adds	r3, #4
 800368e:	f507 629c 	add.w	r2, r7, #1248	@ 0x4e0
 8003692:	f5a2 628b 	sub.w	r2, r2, #1112	@ 0x458
 8003696:	5cd3      	ldrb	r3, [r2, r3]
 8003698:	b21b      	sxth	r3, r3
 800369a:	021b      	lsls	r3, r3, #8
 800369c:	b21a      	sxth	r2, r3
 800369e:	f8b7 34de 	ldrh.w	r3, [r7, #1246]	@ 0x4de
 80036a2:	3305      	adds	r3, #5
 80036a4:	f507 619c 	add.w	r1, r7, #1248	@ 0x4e0
 80036a8:	f5a1 618b 	sub.w	r1, r1, #1112	@ 0x458
 80036ac:	5ccb      	ldrb	r3, [r1, r3]
 80036ae:	b21b      	sxth	r3, r3
 80036b0:	4313      	orrs	r3, r2
 80036b2:	b21b      	sxth	r3, r3
 80036b4:	f8a7 34d0 	strh.w	r3, [r7, #1232]	@ 0x4d0
        uint16_t total_frame_size = 6 + frame_length; // 6字节头 + 数据部分
 80036b8:	f8b7 34d0 	ldrh.w	r3, [r7, #1232]	@ 0x4d0
 80036bc:	3306      	adds	r3, #6
 80036be:	f8a7 34ce 	strh.w	r3, [r7, #1230]	@ 0x4ce
        
        // 检查是否有完整的帧
        if (offset + total_frame_size > len) {
 80036c2:	f8b7 24de 	ldrh.w	r2, [r7, #1246]	@ 0x4de
 80036c6:	f8b7 34ce 	ldrh.w	r3, [r7, #1230]	@ 0x4ce
 80036ca:	441a      	add	r2, r3
 80036cc:	f8b7 34d2 	ldrh.w	r3, [r7, #1234]	@ 0x4d2
 80036d0:	429a      	cmp	r2, r3
 80036d2:	dd21      	ble.n	8003718 <modbus_tcp_recv+0x214>
            char incomplete_msg[60];
            strcpy(incomplete_msg, "Incomplete frame at offset=");
 80036d4:	f107 0310 	add.w	r3, r7, #16
 80036d8:	4a60      	ldr	r2, [pc, #384]	@ (800385c <modbus_tcp_recv+0x358>)
 80036da:	461c      	mov	r4, r3
 80036dc:	4615      	mov	r5, r2
 80036de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80036e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80036e2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80036e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            int_to_str(offset, incomplete_msg + strlen(incomplete_msg), 10);
 80036ea:	f8b7 44de 	ldrh.w	r4, [r7, #1246]	@ 0x4de
 80036ee:	f107 0310 	add.w	r3, r7, #16
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7fc fd6c 	bl	80001d0 <strlen>
 80036f8:	4602      	mov	r2, r0
 80036fa:	f107 0310 	add.w	r3, r7, #16
 80036fe:	4413      	add	r3, r2
 8003700:	220a      	movs	r2, #10
 8003702:	4619      	mov	r1, r3
 8003704:	4620      	mov	r0, r4
 8003706:	f7fe fd8b 	bl	8002220 <int_to_str>
            cdc_debug_log("MODBUS_TCP", incomplete_msg);
 800370a:	f107 0310 	add.w	r3, r7, #16
 800370e:	4619      	mov	r1, r3
 8003710:	484d      	ldr	r0, [pc, #308]	@ (8003848 <modbus_tcp_recv+0x344>)
 8003712:	f7fe fd17 	bl	8002144 <cdc_debug_log>
            break;
 8003716:	e04b      	b.n	80037b0 <modbus_tcp_recv+0x2ac>
        }
        
        // 处理这个帧
        char frame_msg[50];
        strcpy(frame_msg, "Processing frame ");
 8003718:	f107 0310 	add.w	r3, r7, #16
 800371c:	4a50      	ldr	r2, [pc, #320]	@ (8003860 <modbus_tcp_recv+0x35c>)
 800371e:	461c      	mov	r4, r3
 8003720:	4615      	mov	r5, r2
 8003722:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003724:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003726:	682b      	ldr	r3, [r5, #0]
 8003728:	8023      	strh	r3, [r4, #0]
        int_to_str(processed_frames + 1, frame_msg + strlen(frame_msg), 10);
 800372a:	f8b7 34dc 	ldrh.w	r3, [r7, #1244]	@ 0x4dc
 800372e:	1c5c      	adds	r4, r3, #1
 8003730:	f107 0310 	add.w	r3, r7, #16
 8003734:	4618      	mov	r0, r3
 8003736:	f7fc fd4b 	bl	80001d0 <strlen>
 800373a:	4602      	mov	r2, r0
 800373c:	f107 0310 	add.w	r3, r7, #16
 8003740:	4413      	add	r3, r2
 8003742:	220a      	movs	r2, #10
 8003744:	4619      	mov	r1, r3
 8003746:	4620      	mov	r0, r4
 8003748:	f7fe fd6a 	bl	8002220 <int_to_str>
        cdc_debug_log("MODBUS_TCP", frame_msg);
 800374c:	f107 0310 	add.w	r3, r7, #16
 8003750:	4619      	mov	r1, r3
 8003752:	483d      	ldr	r0, [pc, #244]	@ (8003848 <modbus_tcp_recv+0x344>)
 8003754:	f7fe fcf6 	bl	8002144 <cdc_debug_log>
        
        process_modbus_request(tpcb, buf, offset);
 8003758:	f8b7 24de 	ldrh.w	r2, [r7, #1246]	@ 0x4de
 800375c:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 8003760:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8003764:	f5a3 639b 	sub.w	r3, r3, #1240	@ 0x4d8
 8003768:	6818      	ldr	r0, [r3, #0]
 800376a:	f7fe fe97 	bl	800249c <process_modbus_request>
        
        // 移动到下一个帧
        offset += total_frame_size;
 800376e:	f8b7 24de 	ldrh.w	r2, [r7, #1246]	@ 0x4de
 8003772:	f8b7 34ce 	ldrh.w	r3, [r7, #1230]	@ 0x4ce
 8003776:	4413      	add	r3, r2
 8003778:	f8a7 34de 	strh.w	r3, [r7, #1246]	@ 0x4de
        processed_frames++;
 800377c:	f8b7 34dc 	ldrh.w	r3, [r7, #1244]	@ 0x4dc
 8003780:	3301      	adds	r3, #1
 8003782:	f8a7 34dc 	strh.w	r3, [r7, #1244]	@ 0x4dc
        
        // 如果只有一个标准的12字节请求，直接退出
        if (len == 12 && processed_frames == 1) {
 8003786:	f8b7 34d2 	ldrh.w	r3, [r7, #1234]	@ 0x4d2
 800378a:	2b0c      	cmp	r3, #12
 800378c:	d103      	bne.n	8003796 <modbus_tcp_recv+0x292>
 800378e:	f8b7 34dc 	ldrh.w	r3, [r7, #1244]	@ 0x4dc
 8003792:	2b01      	cmp	r3, #1
 8003794:	d00b      	beq.n	80037ae <modbus_tcp_recv+0x2aa>
    while (offset < len && processed_frames < 10) { // 最多处理10个帧，防止无限循环
 8003796:	f8b7 24de 	ldrh.w	r2, [r7, #1246]	@ 0x4de
 800379a:	f8b7 34d2 	ldrh.w	r3, [r7, #1234]	@ 0x4d2
 800379e:	429a      	cmp	r2, r3
 80037a0:	d206      	bcs.n	80037b0 <modbus_tcp_recv+0x2ac>
 80037a2:	f8b7 34dc 	ldrh.w	r3, [r7, #1244]	@ 0x4dc
 80037a6:	2b09      	cmp	r3, #9
 80037a8:	f67f af62 	bls.w	8003670 <modbus_tcp_recv+0x16c>
 80037ac:	e000      	b.n	80037b0 <modbus_tcp_recv+0x2ac>
            break;
 80037ae:	bf00      	nop
        }
    }
    
    char summary_msg[60];
    strcpy(summary_msg, "Processed ");
 80037b0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80037b4:	4a2b      	ldr	r2, [pc, #172]	@ (8003864 <modbus_tcp_recv+0x360>)
 80037b6:	ca07      	ldmia	r2, {r0, r1, r2}
 80037b8:	c303      	stmia	r3!, {r0, r1}
 80037ba:	801a      	strh	r2, [r3, #0]
 80037bc:	3302      	adds	r3, #2
 80037be:	0c12      	lsrs	r2, r2, #16
 80037c0:	701a      	strb	r2, [r3, #0]
    int_to_str(processed_frames, summary_msg + strlen(summary_msg), 10);
 80037c2:	f8b7 44dc 	ldrh.w	r4, [r7, #1244]	@ 0x4dc
 80037c6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80037ca:	4618      	mov	r0, r3
 80037cc:	f7fc fd00 	bl	80001d0 <strlen>
 80037d0:	4602      	mov	r2, r0
 80037d2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80037d6:	4413      	add	r3, r2
 80037d8:	220a      	movs	r2, #10
 80037da:	4619      	mov	r1, r3
 80037dc:	4620      	mov	r0, r4
 80037de:	f7fe fd1f 	bl	8002220 <int_to_str>
    const char* frames_suffix = " frames from ";
 80037e2:	4b21      	ldr	r3, [pc, #132]	@ (8003868 <modbus_tcp_recv+0x364>)
 80037e4:	f8c7 34c8 	str.w	r3, [r7, #1224]	@ 0x4c8
    strcat(summary_msg, frames_suffix);
 80037e8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80037ec:	f8d7 14c8 	ldr.w	r1, [r7, #1224]	@ 0x4c8
 80037f0:	4618      	mov	r0, r3
 80037f2:	f01a fe08 	bl	801e406 <strcat>
    int_to_str(len, summary_msg + strlen(summary_msg), 10);
 80037f6:	f8b7 44d2 	ldrh.w	r4, [r7, #1234]	@ 0x4d2
 80037fa:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80037fe:	4618      	mov	r0, r3
 8003800:	f7fc fce6 	bl	80001d0 <strlen>
 8003804:	4602      	mov	r2, r0
 8003806:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800380a:	4413      	add	r3, r2
 800380c:	220a      	movs	r2, #10
 800380e:	4619      	mov	r1, r3
 8003810:	4620      	mov	r0, r4
 8003812:	f7fe fd05 	bl	8002220 <int_to_str>
    const char* bytes_suffix = " bytes";
 8003816:	4b15      	ldr	r3, [pc, #84]	@ (800386c <modbus_tcp_recv+0x368>)
 8003818:	f8c7 34c4 	str.w	r3, [r7, #1220]	@ 0x4c4
    strcat(summary_msg, bytes_suffix);
 800381c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003820:	f8d7 14c4 	ldr.w	r1, [r7, #1220]	@ 0x4c4
 8003824:	4618      	mov	r0, r3
 8003826:	f01a fdee 	bl	801e406 <strcat>
    cdc_debug_log("MODBUS_TCP", summary_msg);
 800382a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800382e:	4619      	mov	r1, r3
 8003830:	4805      	ldr	r0, [pc, #20]	@ (8003848 <modbus_tcp_recv+0x344>)
 8003832:	f7fe fc87 	bl	8002144 <cdc_debug_log>

    return ERR_OK;
 8003836:	2300      	movs	r3, #0
 8003838:	4618      	mov	r0, r3
 800383a:	f507 679c 	add.w	r7, r7, #1248	@ 0x4e0
 800383e:	46bd      	mov	sp, r7
 8003840:	bdb0      	pop	{r4, r5, r7, pc}
 8003842:	bf00      	nop
 8003844:	080202c0 	.word	0x080202c0
 8003848:	0801feec 	.word	0x0801feec
 800384c:	080202d0 	.word	0x080202d0
 8003850:	080202e4 	.word	0x080202e4
 8003854:	080202f8 	.word	0x080202f8
 8003858:	08020308 	.word	0x08020308
 800385c:	08020320 	.word	0x08020320
 8003860:	0802033c 	.word	0x0802033c
 8003864:	08020350 	.word	0x08020350
 8003868:	0802035c 	.word	0x0802035c
 800386c:	08020288 	.word	0x08020288

08003870 <HAL_ETH_MspInit>:
  *   - Peripheral's GPIO Configuration  
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b092      	sub	sp, #72	@ 0x48
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003878:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800387c:	2200      	movs	r2, #0
 800387e:	601a      	str	r2, [r3, #0]
 8003880:	605a      	str	r2, [r3, #4]
 8003882:	609a      	str	r2, [r3, #8]
 8003884:	60da      	str	r2, [r3, #12]
 8003886:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a84      	ldr	r2, [pc, #528]	@ (8003aa0 <HAL_ETH_MspInit+0x230>)
 800388e:	4293      	cmp	r3, r2
 8003890:	f040 8101 	bne.w	8003a96 <HAL_ETH_MspInit+0x226>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8003894:	2300      	movs	r3, #0
 8003896:	633b      	str	r3, [r7, #48]	@ 0x30
 8003898:	4b82      	ldr	r3, [pc, #520]	@ (8003aa4 <HAL_ETH_MspInit+0x234>)
 800389a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800389c:	4a81      	ldr	r2, [pc, #516]	@ (8003aa4 <HAL_ETH_MspInit+0x234>)
 800389e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80038a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80038a4:	4b7f      	ldr	r3, [pc, #508]	@ (8003aa4 <HAL_ETH_MspInit+0x234>)
 80038a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80038ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038b0:	2300      	movs	r3, #0
 80038b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038b4:	4b7b      	ldr	r3, [pc, #492]	@ (8003aa4 <HAL_ETH_MspInit+0x234>)
 80038b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038b8:	4a7a      	ldr	r2, [pc, #488]	@ (8003aa4 <HAL_ETH_MspInit+0x234>)
 80038ba:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80038be:	6313      	str	r3, [r2, #48]	@ 0x30
 80038c0:	4b78      	ldr	r3, [pc, #480]	@ (8003aa4 <HAL_ETH_MspInit+0x234>)
 80038c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038c4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80038c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038cc:	2300      	movs	r3, #0
 80038ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80038d0:	4b74      	ldr	r3, [pc, #464]	@ (8003aa4 <HAL_ETH_MspInit+0x234>)
 80038d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038d4:	4a73      	ldr	r2, [pc, #460]	@ (8003aa4 <HAL_ETH_MspInit+0x234>)
 80038d6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80038da:	6313      	str	r3, [r2, #48]	@ 0x30
 80038dc:	4b71      	ldr	r3, [pc, #452]	@ (8003aa4 <HAL_ETH_MspInit+0x234>)
 80038de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80038e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80038e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_ETHMAC_CLK_ENABLE();
 80038e8:	2300      	movs	r3, #0
 80038ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80038ec:	4b6d      	ldr	r3, [pc, #436]	@ (8003aa4 <HAL_ETH_MspInit+0x234>)
 80038ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038f0:	4a6c      	ldr	r2, [pc, #432]	@ (8003aa4 <HAL_ETH_MspInit+0x234>)
 80038f2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80038f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80038f8:	4b6a      	ldr	r3, [pc, #424]	@ (8003aa4 <HAL_ETH_MspInit+0x234>)
 80038fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003900:	627b      	str	r3, [r7, #36]	@ 0x24
 8003902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_ETHMACTX_CLK_ENABLE();
 8003904:	2300      	movs	r3, #0
 8003906:	623b      	str	r3, [r7, #32]
 8003908:	4b66      	ldr	r3, [pc, #408]	@ (8003aa4 <HAL_ETH_MspInit+0x234>)
 800390a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800390c:	4a65      	ldr	r2, [pc, #404]	@ (8003aa4 <HAL_ETH_MspInit+0x234>)
 800390e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003912:	6313      	str	r3, [r2, #48]	@ 0x30
 8003914:	4b63      	ldr	r3, [pc, #396]	@ (8003aa4 <HAL_ETH_MspInit+0x234>)
 8003916:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003918:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800391c:	623b      	str	r3, [r7, #32]
 800391e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETHMACRX_CLK_ENABLE();
 8003920:	2300      	movs	r3, #0
 8003922:	61fb      	str	r3, [r7, #28]
 8003924:	4b5f      	ldr	r3, [pc, #380]	@ (8003aa4 <HAL_ETH_MspInit+0x234>)
 8003926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003928:	4a5e      	ldr	r2, [pc, #376]	@ (8003aa4 <HAL_ETH_MspInit+0x234>)
 800392a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800392e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003930:	4b5c      	ldr	r3, [pc, #368]	@ (8003aa4 <HAL_ETH_MspInit+0x234>)
 8003932:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003934:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003938:	61fb      	str	r3, [r7, #28]
 800393a:	69fb      	ldr	r3, [r7, #28]
    
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800393c:	2300      	movs	r3, #0
 800393e:	61bb      	str	r3, [r7, #24]
 8003940:	4b58      	ldr	r3, [pc, #352]	@ (8003aa4 <HAL_ETH_MspInit+0x234>)
 8003942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003944:	4a57      	ldr	r2, [pc, #348]	@ (8003aa4 <HAL_ETH_MspInit+0x234>)
 8003946:	f043 0301 	orr.w	r3, r3, #1
 800394a:	6313      	str	r3, [r2, #48]	@ 0x30
 800394c:	4b55      	ldr	r3, [pc, #340]	@ (8003aa4 <HAL_ETH_MspInit+0x234>)
 800394e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003950:	f003 0301 	and.w	r3, r3, #1
 8003954:	61bb      	str	r3, [r7, #24]
 8003956:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003958:	2300      	movs	r3, #0
 800395a:	617b      	str	r3, [r7, #20]
 800395c:	4b51      	ldr	r3, [pc, #324]	@ (8003aa4 <HAL_ETH_MspInit+0x234>)
 800395e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003960:	4a50      	ldr	r2, [pc, #320]	@ (8003aa4 <HAL_ETH_MspInit+0x234>)
 8003962:	f043 0302 	orr.w	r3, r3, #2
 8003966:	6313      	str	r3, [r2, #48]	@ 0x30
 8003968:	4b4e      	ldr	r3, [pc, #312]	@ (8003aa4 <HAL_ETH_MspInit+0x234>)
 800396a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800396c:	f003 0302 	and.w	r3, r3, #2
 8003970:	617b      	str	r3, [r7, #20]
 8003972:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003974:	2300      	movs	r3, #0
 8003976:	613b      	str	r3, [r7, #16]
 8003978:	4b4a      	ldr	r3, [pc, #296]	@ (8003aa4 <HAL_ETH_MspInit+0x234>)
 800397a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800397c:	4a49      	ldr	r2, [pc, #292]	@ (8003aa4 <HAL_ETH_MspInit+0x234>)
 800397e:	f043 0304 	orr.w	r3, r3, #4
 8003982:	6313      	str	r3, [r2, #48]	@ 0x30
 8003984:	4b47      	ldr	r3, [pc, #284]	@ (8003aa4 <HAL_ETH_MspInit+0x234>)
 8003986:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003988:	f003 0304 	and.w	r3, r3, #4
 800398c:	613b      	str	r3, [r7, #16]
 800398e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003990:	2300      	movs	r3, #0
 8003992:	60fb      	str	r3, [r7, #12]
 8003994:	4b43      	ldr	r3, [pc, #268]	@ (8003aa4 <HAL_ETH_MspInit+0x234>)
 8003996:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003998:	4a42      	ldr	r2, [pc, #264]	@ (8003aa4 <HAL_ETH_MspInit+0x234>)
 800399a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800399e:	6313      	str	r3, [r2, #48]	@ 0x30
 80039a0:	4b40      	ldr	r3, [pc, #256]	@ (8003aa4 <HAL_ETH_MspInit+0x234>)
 80039a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039a8:	60fb      	str	r3, [r7, #12]
 80039aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80039ac:	2300      	movs	r3, #0
 80039ae:	60bb      	str	r3, [r7, #8]
 80039b0:	4b3c      	ldr	r3, [pc, #240]	@ (8003aa4 <HAL_ETH_MspInit+0x234>)
 80039b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039b4:	4a3b      	ldr	r2, [pc, #236]	@ (8003aa4 <HAL_ETH_MspInit+0x234>)
 80039b6:	f043 0308 	orr.w	r3, r3, #8
 80039ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80039bc:	4b39      	ldr	r3, [pc, #228]	@ (8003aa4 <HAL_ETH_MspInit+0x234>)
 80039be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039c0:	f003 0308 	and.w	r3, r3, #8
 80039c4:	60bb      	str	r3, [r7, #8]
 80039c6:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    PG14     ------> ETH_TXD1
    PD3      ------> ETH_RESET
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80039c8:	2302      	movs	r3, #2
 80039ca:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039cc:	2302      	movs	r3, #2
 80039ce:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039d0:	2300      	movs	r3, #0
 80039d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039d4:	2303      	movs	r3, #3
 80039d6:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80039d8:	230b      	movs	r3, #11
 80039da:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039dc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80039e0:	4619      	mov	r1, r3
 80039e2:	4831      	ldr	r0, [pc, #196]	@ (8003aa8 <HAL_ETH_MspInit+0x238>)
 80039e4:	f003 f8f0 	bl	8006bc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80039e8:	2386      	movs	r3, #134	@ 0x86
 80039ea:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039ec:	2302      	movs	r3, #2
 80039ee:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039f0:	2300      	movs	r3, #0
 80039f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039f4:	2303      	movs	r3, #3
 80039f6:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80039f8:	230b      	movs	r3, #11
 80039fa:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039fc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003a00:	4619      	mov	r1, r3
 8003a02:	482a      	ldr	r0, [pc, #168]	@ (8003aac <HAL_ETH_MspInit+0x23c>)
 8003a04:	f003 f8e0 	bl	8006bc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003a08:	2330      	movs	r3, #48	@ 0x30
 8003a0a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a0c:	2302      	movs	r3, #2
 8003a0e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a10:	2300      	movs	r3, #0
 8003a12:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a14:	2303      	movs	r3, #3
 8003a16:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003a18:	230b      	movs	r3, #11
 8003a1a:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a1c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003a20:	4619      	mov	r1, r3
 8003a22:	4821      	ldr	r0, [pc, #132]	@ (8003aa8 <HAL_ETH_MspInit+0x238>)
 8003a24:	f003 f8d0 	bl	8006bc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8003a28:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8003a2c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a2e:	2302      	movs	r3, #2
 8003a30:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a32:	2300      	movs	r3, #0
 8003a34:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a36:	2303      	movs	r3, #3
 8003a38:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003a3a:	230b      	movs	r3, #11
 8003a3c:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003a3e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003a42:	4619      	mov	r1, r3
 8003a44:	481a      	ldr	r0, [pc, #104]	@ (8003ab0 <HAL_ETH_MspInit+0x240>)
 8003a46:	f003 f8bf 	bl	8006bc8 <HAL_GPIO_Init>

    /* Configure ETH_RESET Pin (PD3) */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003a4a:	2308      	movs	r3, #8
 8003a4c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a52:	2301      	movs	r3, #1
 8003a54:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a56:	2300      	movs	r3, #0
 8003a58:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a5a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003a5e:	4619      	mov	r1, r3
 8003a60:	4814      	ldr	r0, [pc, #80]	@ (8003ab4 <HAL_ETH_MspInit+0x244>)
 8003a62:	f003 f8b1 	bl	8006bc8 <HAL_GPIO_Init>
    
    /* Reset PHY */

    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);
 8003a66:	2200      	movs	r2, #0
 8003a68:	2108      	movs	r1, #8
 8003a6a:	4812      	ldr	r0, [pc, #72]	@ (8003ab4 <HAL_ETH_MspInit+0x244>)
 8003a6c:	f003 fa48 	bl	8006f00 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8003a70:	200a      	movs	r0, #10
 8003a72:	f001 f96d 	bl	8004d50 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET);
 8003a76:	2201      	movs	r2, #1
 8003a78:	2108      	movs	r1, #8
 8003a7a:	480e      	ldr	r0, [pc, #56]	@ (8003ab4 <HAL_ETH_MspInit+0x244>)
 8003a7c:	f003 fa40 	bl	8006f00 <HAL_GPIO_WritePin>

    HAL_Delay(100);
 8003a80:	2064      	movs	r0, #100	@ 0x64
 8003a82:	f001 f965 	bl	8004d50 <HAL_Delay>

    /* USER CODE BEGIN ETH_MspInit 1 */
    /* Configure ETH interrupt */
    HAL_NVIC_SetPriority(ETH_IRQn, 6, 0);
 8003a86:	2200      	movs	r2, #0
 8003a88:	2106      	movs	r1, #6
 8003a8a:	203d      	movs	r0, #61	@ 0x3d
 8003a8c:	f001 fa3c 	bl	8004f08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8003a90:	203d      	movs	r0, #61	@ 0x3d
 8003a92:	f001 fa55 	bl	8004f40 <HAL_NVIC_EnableIRQ>
    /* USER CODE END ETH_MspInit 1 */
  }
}
 8003a96:	bf00      	nop
 8003a98:	3748      	adds	r7, #72	@ 0x48
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	40028000 	.word	0x40028000
 8003aa4:	40023800 	.word	0x40023800
 8003aa8:	40020800 	.word	0x40020800
 8003aac:	40020000 	.word	0x40020000
 8003ab0:	40021800 	.word	0x40021800
 8003ab4:	40020c00 	.word	0x40020c00

08003ab8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b082      	sub	sp, #8
 8003abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003abe:	2300      	movs	r3, #0
 8003ac0:	607b      	str	r3, [r7, #4]
 8003ac2:	4b12      	ldr	r3, [pc, #72]	@ (8003b0c <HAL_MspInit+0x54>)
 8003ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ac6:	4a11      	ldr	r2, [pc, #68]	@ (8003b0c <HAL_MspInit+0x54>)
 8003ac8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003acc:	6453      	str	r3, [r2, #68]	@ 0x44
 8003ace:	4b0f      	ldr	r3, [pc, #60]	@ (8003b0c <HAL_MspInit+0x54>)
 8003ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ad2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ad6:	607b      	str	r3, [r7, #4]
 8003ad8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ada:	2300      	movs	r3, #0
 8003adc:	603b      	str	r3, [r7, #0]
 8003ade:	4b0b      	ldr	r3, [pc, #44]	@ (8003b0c <HAL_MspInit+0x54>)
 8003ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae2:	4a0a      	ldr	r2, [pc, #40]	@ (8003b0c <HAL_MspInit+0x54>)
 8003ae4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ae8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003aea:	4b08      	ldr	r3, [pc, #32]	@ (8003b0c <HAL_MspInit+0x54>)
 8003aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003af2:	603b      	str	r3, [r7, #0]
 8003af4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003af6:	2200      	movs	r2, #0
 8003af8:	210f      	movs	r1, #15
 8003afa:	f06f 0001 	mvn.w	r0, #1
 8003afe:	f001 fa03 	bl	8004f08 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b02:	bf00      	nop
 8003b04:	3708      	adds	r7, #8
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	40023800 	.word	0x40023800

08003b10 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b08e      	sub	sp, #56	@ 0x38
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8003b20:	2300      	movs	r3, #0
 8003b22:	60fb      	str	r3, [r7, #12]
 8003b24:	4b33      	ldr	r3, [pc, #204]	@ (8003bf4 <HAL_InitTick+0xe4>)
 8003b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b28:	4a32      	ldr	r2, [pc, #200]	@ (8003bf4 <HAL_InitTick+0xe4>)
 8003b2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b2e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b30:	4b30      	ldr	r3, [pc, #192]	@ (8003bf4 <HAL_InitTick+0xe4>)
 8003b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b38:	60fb      	str	r3, [r7, #12]
 8003b3a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003b3c:	f107 0210 	add.w	r2, r7, #16
 8003b40:	f107 0314 	add.w	r3, r7, #20
 8003b44:	4611      	mov	r1, r2
 8003b46:	4618      	mov	r0, r3
 8003b48:	f005 f89e 	bl	8008c88 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003b4c:	6a3b      	ldr	r3, [r7, #32]
 8003b4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003b50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d103      	bne.n	8003b5e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003b56:	f005 f86f 	bl	8008c38 <HAL_RCC_GetPCLK1Freq>
 8003b5a:	6378      	str	r0, [r7, #52]	@ 0x34
 8003b5c:	e004      	b.n	8003b68 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003b5e:	f005 f86b 	bl	8008c38 <HAL_RCC_GetPCLK1Freq>
 8003b62:	4603      	mov	r3, r0
 8003b64:	005b      	lsls	r3, r3, #1
 8003b66:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003b68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b6a:	4a23      	ldr	r2, [pc, #140]	@ (8003bf8 <HAL_InitTick+0xe8>)
 8003b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b70:	0c9b      	lsrs	r3, r3, #18
 8003b72:	3b01      	subs	r3, #1
 8003b74:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8003b76:	4b21      	ldr	r3, [pc, #132]	@ (8003bfc <HAL_InitTick+0xec>)
 8003b78:	4a21      	ldr	r2, [pc, #132]	@ (8003c00 <HAL_InitTick+0xf0>)
 8003b7a:	601a      	str	r2, [r3, #0]
   * Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8003b7c:	4b1f      	ldr	r3, [pc, #124]	@ (8003bfc <HAL_InitTick+0xec>)
 8003b7e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003b82:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8003b84:	4a1d      	ldr	r2, [pc, #116]	@ (8003bfc <HAL_InitTick+0xec>)
 8003b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b88:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8003b8a:	4b1c      	ldr	r3, [pc, #112]	@ (8003bfc <HAL_InitTick+0xec>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b90:	4b1a      	ldr	r3, [pc, #104]	@ (8003bfc <HAL_InitTick+0xec>)
 8003b92:	2200      	movs	r2, #0
 8003b94:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b96:	4b19      	ldr	r3, [pc, #100]	@ (8003bfc <HAL_InitTick+0xec>)
 8003b98:	2200      	movs	r2, #0
 8003b9a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8003b9c:	4817      	ldr	r0, [pc, #92]	@ (8003bfc <HAL_InitTick+0xec>)
 8003b9e:	f005 f8ed 	bl	8008d7c <HAL_TIM_Base_Init>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8003ba8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d11b      	bne.n	8003be8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8003bb0:	4812      	ldr	r0, [pc, #72]	@ (8003bfc <HAL_InitTick+0xec>)
 8003bb2:	f005 f933 	bl	8008e1c <HAL_TIM_Base_Start_IT>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8003bbc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d111      	bne.n	8003be8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8003bc4:	202d      	movs	r0, #45	@ 0x2d
 8003bc6:	f001 f9bb 	bl	8004f40 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2b0f      	cmp	r3, #15
 8003bce:	d808      	bhi.n	8003be2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	6879      	ldr	r1, [r7, #4]
 8003bd4:	202d      	movs	r0, #45	@ 0x2d
 8003bd6:	f001 f997 	bl	8004f08 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003bda:	4a0a      	ldr	r2, [pc, #40]	@ (8003c04 <HAL_InitTick+0xf4>)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6013      	str	r3, [r2, #0]
 8003be0:	e002      	b.n	8003be8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003be8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3738      	adds	r7, #56	@ 0x38
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	40023800 	.word	0x40023800
 8003bf8:	431bde83 	.word	0x431bde83
 8003bfc:	20000788 	.word	0x20000788
 8003c00:	40002000 	.word	0x40002000
 8003c04:	2000000c 	.word	0x2000000c

08003c08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003c0c:	bf00      	nop
 8003c0e:	e7fd      	b.n	8003c0c <NMI_Handler+0x4>

08003c10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c10:	b480      	push	{r7}
 8003c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c14:	bf00      	nop
 8003c16:	e7fd      	b.n	8003c14 <HardFault_Handler+0x4>

08003c18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003c1c:	bf00      	nop
 8003c1e:	e7fd      	b.n	8003c1c <MemManage_Handler+0x4>

08003c20 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c20:	b480      	push	{r7}
 8003c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c24:	bf00      	nop
 8003c26:	e7fd      	b.n	8003c24 <BusFault_Handler+0x4>

08003c28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003c2c:	bf00      	nop
 8003c2e:	e7fd      	b.n	8003c2c <UsageFault_Handler+0x4>

08003c30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c30:	b480      	push	{r7}
 8003c32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c34:	bf00      	nop
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
	...

08003c40 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003c44:	4802      	ldr	r0, [pc, #8]	@ (8003c50 <DMA1_Stream1_IRQHandler+0x10>)
 8003c46:	f001 fb21 	bl	800528c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003c4a:	bf00      	nop
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	200008f8 	.word	0x200008f8

08003c54 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003c58:	4802      	ldr	r0, [pc, #8]	@ (8003c64 <USART3_IRQHandler+0x10>)
 8003c5a:	f005 fdb3 	bl	80097c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003c5e:	bf00      	nop
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	20000868 	.word	0x20000868

08003c68 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8003c6c:	4802      	ldr	r0, [pc, #8]	@ (8003c78 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8003c6e:	f005 f945 	bl	8008efc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8003c72:	bf00      	nop
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	20000788 	.word	0x20000788

08003c7c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003c80:	4802      	ldr	r0, [pc, #8]	@ (8003c8c <TIM7_IRQHandler+0x10>)
 8003c82:	f005 f93b 	bl	8008efc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003c86:	bf00      	nop
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	200007d8 	.word	0x200007d8

08003c90 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8003c94:	4802      	ldr	r0, [pc, #8]	@ (8003ca0 <DMA2_Stream1_IRQHandler+0x10>)
 8003c96:	f001 faf9 	bl	800528c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003c9a:	bf00      	nop
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	20000958 	.word	0x20000958

08003ca4 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	af00      	add	r7, sp, #0
           (dma_status & ETH_DMASR_TS) ? 1UL : 0UL);  // Transmit status
  
  CDC_Transmit_FS((uint8_t*)debug_msg, strlen(debug_msg));
  */
  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8003ca8:	4802      	ldr	r0, [pc, #8]	@ (8003cb4 <ETH_IRQHandler+0x10>)
 8003caa:	f002 f8e7 	bl	8005e7c <HAL_ETH_IRQHandler>
  /*
  char completion_msg[] = "[ETH_IRQ] IRQ Handler completed\r\n";
  CDC_Transmit_FS((uint8_t*)completion_msg, strlen(completion_msg));
  */
  /* USER CODE END ETH_IRQn 1 */
}
 8003cae:	bf00      	nop
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	2000551c 	.word	0x2000551c

08003cb8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003cbc:	4802      	ldr	r0, [pc, #8]	@ (8003cc8 <OTG_FS_IRQHandler+0x10>)
 8003cbe:	f003 fa7c 	bl	80071ba <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003cc2:	bf00      	nop
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	2000e10c 	.word	0x2000e10c

08003ccc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003cd0:	4802      	ldr	r0, [pc, #8]	@ (8003cdc <USART6_IRQHandler+0x10>)
 8003cd2:	f005 fd77 	bl	80097c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003cd6:	bf00      	nop
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	200008b0 	.word	0x200008b0

08003ce0 <pump_debug_print>:
/**
  * @brief  泵驱动调试输出函数
  * @param  message: 调试信息字符串
  * @retval None
  */
static void pump_debug_print(const char* message) {
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
    int len = snprintf(pump_debug_buf, sizeof(pump_debug_buf), "[PUMP] %s\r\n", message);
    if (len > 0 && len < sizeof(pump_debug_buf)) {
        CDC_Transmit_FS((uint8_t*)pump_debug_buf, len);  // 暂时启用调试输出
    }
    */
}
 8003ce8:	bf00      	nop
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <send_command>:

// 发送命令并读取响应 - STM32 USART3版本 - 简化的不定长接收
int send_command(int pump_id, const char* cmd, char* response, size_t resp_size) {
 8003cf4:	b590      	push	{r4, r7, lr}
 8003cf6:	f5ad 7d31 	sub.w	sp, sp, #708	@ 0x2c4
 8003cfa:	af02      	add	r7, sp, #8
 8003cfc:	f507 742e 	add.w	r4, r7, #696	@ 0x2b8
 8003d00:	f5a4 742b 	sub.w	r4, r4, #684	@ 0x2ac
 8003d04:	6020      	str	r0, [r4, #0]
 8003d06:	f507 702e 	add.w	r0, r7, #696	@ 0x2b8
 8003d0a:	f5a0 702c 	sub.w	r0, r0, #688	@ 0x2b0
 8003d0e:	6001      	str	r1, [r0, #0]
 8003d10:	f507 712e 	add.w	r1, r7, #696	@ 0x2b8
 8003d14:	f5a1 712d 	sub.w	r1, r1, #692	@ 0x2b4
 8003d18:	600a      	str	r2, [r1, #0]
 8003d1a:	f507 722e 	add.w	r2, r7, #696	@ 0x2b8
 8003d1e:	f5a2 722e 	sub.w	r2, r2, #696	@ 0x2b8
 8003d22:	6013      	str	r3, [r2, #0]
    char debug_msg[128];
    char pump_address;
    HAL_StatusTypeDef status;
    
    // 根据pump_id选择地址
    if (pump_id == 1) {
 8003d24:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003d28:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d103      	bne.n	8003d3a <send_command+0x46>
        pump_address = '1';  // 泵1地址为'1'
 8003d32:	2331      	movs	r3, #49	@ 0x31
 8003d34:	f887 32b7 	strb.w	r3, [r7, #695]	@ 0x2b7
 8003d38:	e01d      	b.n	8003d76 <send_command+0x82>
    } else if (pump_id == 2) {
 8003d3a:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003d3e:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	d103      	bne.n	8003d50 <send_command+0x5c>
        pump_address = '2';  // 泵2地址为'2'
 8003d48:	2332      	movs	r3, #50	@ 0x32
 8003d4a:	f887 32b7 	strb.w	r3, [r7, #695]	@ 0x2b7
 8003d4e:	e012      	b.n	8003d76 <send_command+0x82>
    } else {
        snprintf(debug_msg, sizeof(debug_msg), "Invalid pump_id: %d", pump_id);
 8003d50:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003d54:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003d58:	f507 708e 	add.w	r0, r7, #284	@ 0x11c
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4ab9      	ldr	r2, [pc, #740]	@ (8004044 <send_command+0x350>)
 8003d60:	2180      	movs	r1, #128	@ 0x80
 8003d62:	f01a faa5 	bl	801e2b0 <sniprintf>
        pump_debug_print(debug_msg);
 8003d66:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7ff ffb8 	bl	8003ce0 <pump_debug_print>
        return -1;
 8003d70:	f04f 33ff 	mov.w	r3, #4294967295
 8003d74:	e160      	b.n	8004038 <send_command+0x344>
    }
    
    // 格式化命令: /地址命令CR+LF (根据手册需要CRLF结尾)
    snprintf(buffer, sizeof(buffer), "/%c%s\r\n", pump_address, cmd);
 8003d76:	f897 22b7 	ldrb.w	r2, [r7, #695]	@ 0x2b7
 8003d7a:	f507 70ce 	add.w	r0, r7, #412	@ 0x19c
 8003d7e:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003d82:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	9300      	str	r3, [sp, #0]
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	4aae      	ldr	r2, [pc, #696]	@ (8004048 <send_command+0x354>)
 8003d8e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003d92:	f01a fa8d 	bl	801e2b0 <sniprintf>
    
    // 调试信息
    snprintf(debug_msg, sizeof(debug_msg), "Pump%d TX: %s", pump_id, buffer);
 8003d96:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003d9a:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003d9e:	f507 708e 	add.w	r0, r7, #284	@ 0x11c
 8003da2:	f507 72ce 	add.w	r2, r7, #412	@ 0x19c
 8003da6:	9200      	str	r2, [sp, #0]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4aa8      	ldr	r2, [pc, #672]	@ (800404c <send_command+0x358>)
 8003dac:	2180      	movs	r1, #128	@ 0x80
 8003dae:	f01a fa7f 	bl	801e2b0 <sniprintf>
    pump_debug_print(debug_msg);
 8003db2:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7ff ff92 	bl	8003ce0 <pump_debug_print>
    
    // 通过USART3发送命令
    status = HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), 1000);
 8003dbc:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f7fc fa05 	bl	80001d0 <strlen>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	b29a      	uxth	r2, r3
 8003dca:	f507 71ce 	add.w	r1, r7, #412	@ 0x19c
 8003dce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003dd2:	489f      	ldr	r0, [pc, #636]	@ (8004050 <send_command+0x35c>)
 8003dd4:	f005 fb30 	bl	8009438 <HAL_UART_Transmit>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
    if (status != HAL_OK) {
 8003dde:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d015      	beq.n	8003e12 <send_command+0x11e>
        snprintf(debug_msg, sizeof(debug_msg), "Pump%d UART TX failed: %d", pump_id, status);
 8003de6:	f897 22a7 	ldrb.w	r2, [r7, #679]	@ 0x2a7
 8003dea:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003dee:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003df2:	f507 708e 	add.w	r0, r7, #284	@ 0x11c
 8003df6:	9200      	str	r2, [sp, #0]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a96      	ldr	r2, [pc, #600]	@ (8004054 <send_command+0x360>)
 8003dfc:	2180      	movs	r1, #128	@ 0x80
 8003dfe:	f01a fa57 	bl	801e2b0 <sniprintf>
        pump_debug_print(debug_msg);
 8003e02:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8003e06:	4618      	mov	r0, r3
 8003e08:	f7ff ff6a 	bl	8003ce0 <pump_debug_print>
        return -1;
 8003e0c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e10:	e112      	b.n	8004038 <send_command+0x344>
    }
    
    // 读取响应（如果需要）- 使用逐字节接收
    if (response && resp_size > 0) {
 8003e12:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003e16:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	f000 810a 	beq.w	8004036 <send_command+0x342>
 8003e22:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003e26:	f5a3 732e 	sub.w	r3, r3, #696	@ 0x2b8
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	f000 8102 	beq.w	8004036 <send_command+0x342>
        memset(response, 0, resp_size);
 8003e32:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003e36:	f5a3 722e 	sub.w	r2, r3, #696	@ 0x2b8
 8003e3a:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003e3e:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8003e42:	6812      	ldr	r2, [r2, #0]
 8003e44:	2100      	movs	r1, #0
 8003e46:	6818      	ldr	r0, [r3, #0]
 8003e48:	f01a fad5 	bl	801e3f6 <memset>
        
        uint8_t rx_char;
        size_t received_count = 0;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
        uint32_t start_time = HAL_GetTick();
 8003e52:	f000 ff71 	bl	8004d38 <HAL_GetTick>
 8003e56:	f8c7 02ac 	str.w	r0, [r7, #684]	@ 0x2ac
        uint32_t timeout_ms = 200;  // 总超时200ms
 8003e5a:	23c8      	movs	r3, #200	@ 0xc8
 8003e5c:	f8c7 32a0 	str.w	r3, [r7, #672]	@ 0x2a0
        uint32_t char_timeout_ms = 50;  // 单字符超时50ms
 8003e60:	2332      	movs	r3, #50	@ 0x32
 8003e62:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
        
        // 逐字节接收，直到遇到结束符或超时
        while (received_count < (resp_size - 1)) {
 8003e66:	e05f      	b.n	8003f28 <send_command+0x234>
            status = HAL_UART_Receive(&huart3, &rx_char, 1, char_timeout_ms);
 8003e68:	f207 111b 	addw	r1, r7, #283	@ 0x11b
 8003e6c:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 8003e70:	2201      	movs	r2, #1
 8003e72:	4877      	ldr	r0, [pc, #476]	@ (8004050 <send_command+0x35c>)
 8003e74:	f005 fb6b 	bl	800954e <HAL_UART_Receive>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
            
            if (status == HAL_OK) {
 8003e7e:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d12e      	bne.n	8003ee4 <send_command+0x1f0>
                response[received_count] = rx_char;
 8003e86:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003e8a:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	f8d7 32b0 	ldr.w	r3, [r7, #688]	@ 0x2b0
 8003e94:	4413      	add	r3, r2
 8003e96:	f507 722e 	add.w	r2, r7, #696	@ 0x2b8
 8003e9a:	f2a2 129d 	subw	r2, r2, #413	@ 0x19d
 8003e9e:	7812      	ldrb	r2, [r2, #0]
 8003ea0:	701a      	strb	r2, [r3, #0]
                received_count++;
 8003ea2:	f8d7 32b0 	ldr.w	r3, [r7, #688]	@ 0x2b0
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
                
                // 检查是否收到完整的结束符序列 (CRLF)
                // 只有当收到LF并且前一个字符是CR时才结束
                if (received_count >= 2 && 
 8003eac:	f8d7 32b0 	ldr.w	r3, [r7, #688]	@ 0x2b0
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d912      	bls.n	8003eda <send_command+0x1e6>
                    rx_char == 0x0A && 
 8003eb4:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003eb8:	f2a3 139d 	subw	r3, r3, #413	@ 0x19d
 8003ebc:	781b      	ldrb	r3, [r3, #0]
                if (received_count >= 2 && 
 8003ebe:	2b0a      	cmp	r3, #10
 8003ec0:	d10b      	bne.n	8003eda <send_command+0x1e6>
                    response[received_count-2] == 0x0D) {
 8003ec2:	f8d7 32b0 	ldr.w	r3, [r7, #688]	@ 0x2b0
 8003ec6:	3b02      	subs	r3, #2
 8003ec8:	f507 722e 	add.w	r2, r7, #696	@ 0x2b8
 8003ecc:	f5a2 722d 	sub.w	r2, r2, #692	@ 0x2b4
 8003ed0:	6812      	ldr	r2, [r2, #0]
 8003ed2:	4413      	add	r3, r2
 8003ed4:	781b      	ldrb	r3, [r3, #0]
                    rx_char == 0x0A && 
 8003ed6:	2b0d      	cmp	r3, #13
 8003ed8:	d031      	beq.n	8003f3e <send_command+0x24a>
                    break;
                }
                
                // 重置总超时计时器（收到数据说明设备在响应）
                start_time = HAL_GetTick();
 8003eda:	f000 ff2d 	bl	8004d38 <HAL_GetTick>
 8003ede:	f8c7 02ac 	str.w	r0, [r7, #684]	@ 0x2ac
 8003ee2:	e021      	b.n	8003f28 <send_command+0x234>
            } else if (status == HAL_TIMEOUT) {
 8003ee4:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 8003ee8:	2b03      	cmp	r3, #3
 8003eea:	d12a      	bne.n	8003f42 <send_command+0x24e>
                // 单字符超时，检查是否已经接收到数据
                if (received_count > 0) {
 8003eec:	f8d7 32b0 	ldr.w	r3, [r7, #688]	@ 0x2b0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d00f      	beq.n	8003f14 <send_command+0x220>
                    // 已有数据，可能接收完成，等待一下看是否还有数据
                    HAL_Delay(5);  // 减少延时时间
 8003ef4:	2005      	movs	r0, #5
 8003ef6:	f000 ff2b 	bl	8004d50 <HAL_Delay>
                    // 给已收到数据情况下额外3次重试机会
                    static int retry_count = 0;
                    retry_count++;
 8003efa:	4b57      	ldr	r3, [pc, #348]	@ (8004058 <send_command+0x364>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	3301      	adds	r3, #1
 8003f00:	4a55      	ldr	r2, [pc, #340]	@ (8004058 <send_command+0x364>)
 8003f02:	6013      	str	r3, [r2, #0]
                    if (retry_count > 3) {
 8003f04:	4b54      	ldr	r3, [pc, #336]	@ (8004058 <send_command+0x364>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2b03      	cmp	r3, #3
 8003f0a:	dd03      	ble.n	8003f14 <send_command+0x220>
                        retry_count = 0;
 8003f0c:	4b52      	ldr	r3, [pc, #328]	@ (8004058 <send_command+0x364>)
 8003f0e:	2200      	movs	r2, #0
 8003f10:	601a      	str	r2, [r3, #0]
                        break;  // 重试次数用完，退出
 8003f12:	e019      	b.n	8003f48 <send_command+0x254>
                    }
                }
                
                // 检查总超时
                if (HAL_GetTick() - start_time > timeout_ms) {
 8003f14:	f000 ff10 	bl	8004d38 <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	f8d7 22a0 	ldr.w	r2, [r7, #672]	@ 0x2a0
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d30e      	bcc.n	8003f46 <send_command+0x252>
        while (received_count < (resp_size - 1)) {
 8003f28:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003f2c:	f5a3 732e 	sub.w	r3, r3, #696	@ 0x2b8
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	3b01      	subs	r3, #1
 8003f34:	f8d7 22b0 	ldr.w	r2, [r7, #688]	@ 0x2b0
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d395      	bcc.n	8003e68 <send_command+0x174>
 8003f3c:	e004      	b.n	8003f48 <send_command+0x254>
                    break;
 8003f3e:	bf00      	nop
 8003f40:	e002      	b.n	8003f48 <send_command+0x254>
                    break;  // 总超时，退出
                }
            } else {
                // 其他错误，退出
                break;
 8003f42:	bf00      	nop
 8003f44:	e000      	b.n	8003f48 <send_command+0x254>
                    break;  // 总超时，退出
 8003f46:	bf00      	nop
            }
        }
        
        // 确保字符串结束
        response[received_count] = '\0';
 8003f48:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003f4c:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	f8d7 32b0 	ldr.w	r3, [r7, #688]	@ 0x2b0
 8003f56:	4413      	add	r3, r2
 8003f58:	2200      	movs	r2, #0
 8003f5a:	701a      	strb	r2, [r3, #0]
        
        if (received_count > 0) {
 8003f5c:	f8d7 32b0 	ldr.w	r3, [r7, #688]	@ 0x2b0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d055      	beq.n	8004010 <send_command+0x31c>
            // 调试信息：显示响应 (修复格式化问题)
            snprintf(debug_msg, sizeof(debug_msg), "Pump%d RX (%u bytes): [%s]", pump_id, (unsigned int)received_count, response);
 8003f64:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003f68:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003f6c:	f507 708e 	add.w	r0, r7, #284	@ 0x11c
 8003f70:	f507 722e 	add.w	r2, r7, #696	@ 0x2b8
 8003f74:	f5a2 722d 	sub.w	r2, r2, #692	@ 0x2b4
 8003f78:	6812      	ldr	r2, [r2, #0]
 8003f7a:	9201      	str	r2, [sp, #4]
 8003f7c:	f8d7 22b0 	ldr.w	r2, [r7, #688]	@ 0x2b0
 8003f80:	9200      	str	r2, [sp, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a35      	ldr	r2, [pc, #212]	@ (800405c <send_command+0x368>)
 8003f86:	2180      	movs	r1, #128	@ 0x80
 8003f88:	f01a f992 	bl	801e2b0 <sniprintf>
            pump_debug_print(debug_msg);
 8003f8c:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8003f90:	4618      	mov	r0, r3
 8003f92:	f7ff fea5 	bl	8003ce0 <pump_debug_print>
            
            // 添加十六进制显示，帮助调试
            char hex_debug[256];
            snprintf(hex_debug, sizeof(hex_debug), "Pump%d RX_HEX: ", pump_id);
 8003f96:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003f9a:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003f9e:	f107 0014 	add.w	r0, r7, #20
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a2e      	ldr	r2, [pc, #184]	@ (8004060 <send_command+0x36c>)
 8003fa6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003faa:	f01a f981 	bl	801e2b0 <sniprintf>
            for (size_t i = 0; i < received_count && i < 20; i++) {  // 只显示前20个字节
 8003fae:	2300      	movs	r3, #0
 8003fb0:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8
 8003fb4:	e01b      	b.n	8003fee <send_command+0x2fa>
                char hex_byte[4];
                snprintf(hex_byte, sizeof(hex_byte), "%02X ", (unsigned char)response[i]);
 8003fb6:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003fba:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	f8d7 32a8 	ldr.w	r3, [r7, #680]	@ 0x2a8
 8003fc4:	4413      	add	r3, r2
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	f507 708a 	add.w	r0, r7, #276	@ 0x114
 8003fcc:	4a25      	ldr	r2, [pc, #148]	@ (8004064 <send_command+0x370>)
 8003fce:	2104      	movs	r1, #4
 8003fd0:	f01a f96e 	bl	801e2b0 <sniprintf>
                strcat(hex_debug, hex_byte);
 8003fd4:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 8003fd8:	f107 0314 	add.w	r3, r7, #20
 8003fdc:	4611      	mov	r1, r2
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f01a fa11 	bl	801e406 <strcat>
            for (size_t i = 0; i < received_count && i < 20; i++) {  // 只显示前20个字节
 8003fe4:	f8d7 32a8 	ldr.w	r3, [r7, #680]	@ 0x2a8
 8003fe8:	3301      	adds	r3, #1
 8003fea:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8
 8003fee:	f8d7 22a8 	ldr.w	r2, [r7, #680]	@ 0x2a8
 8003ff2:	f8d7 32b0 	ldr.w	r3, [r7, #688]	@ 0x2b0
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d203      	bcs.n	8004002 <send_command+0x30e>
 8003ffa:	f8d7 32a8 	ldr.w	r3, [r7, #680]	@ 0x2a8
 8003ffe:	2b13      	cmp	r3, #19
 8004000:	d9d9      	bls.n	8003fb6 <send_command+0x2c2>
            }
            pump_debug_print(hex_debug);
 8004002:	f107 0314 	add.w	r3, r7, #20
 8004006:	4618      	mov	r0, r3
 8004008:	f7ff fe6a 	bl	8003ce0 <pump_debug_print>
            
            return 0;  // 成功
 800400c:	2300      	movs	r3, #0
 800400e:	e013      	b.n	8004038 <send_command+0x344>
        } else {
            snprintf(debug_msg, sizeof(debug_msg), "Pump%d RX: No data received", pump_id);
 8004010:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8004014:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8004018:	f507 708e 	add.w	r0, r7, #284	@ 0x11c
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a12      	ldr	r2, [pc, #72]	@ (8004068 <send_command+0x374>)
 8004020:	2180      	movs	r1, #128	@ 0x80
 8004022:	f01a f945 	bl	801e2b0 <sniprintf>
            pump_debug_print(debug_msg);
 8004026:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 800402a:	4618      	mov	r0, r3
 800402c:	f7ff fe58 	bl	8003ce0 <pump_debug_print>
            return -1;  // 超时无数据
 8004030:	f04f 33ff 	mov.w	r3, #4294967295
 8004034:	e000      	b.n	8004038 <send_command+0x344>
        }
    }

    return 0;  // 只发送，不接收
 8004036:	2300      	movs	r3, #0
}
 8004038:	4618      	mov	r0, r3
 800403a:	f507 772f 	add.w	r7, r7, #700	@ 0x2bc
 800403e:	46bd      	mov	sp, r7
 8004040:	bd90      	pop	{r4, r7, pc}
 8004042:	bf00      	nop
 8004044:	0802036c 	.word	0x0802036c
 8004048:	08020380 	.word	0x08020380
 800404c:	08020388 	.word	0x08020388
 8004050:	20000868 	.word	0x20000868
 8004054:	08020398 	.word	0x08020398
 8004058:	200007d0 	.word	0x200007d0
 800405c:	080203b4 	.word	0x080203b4
 8004060:	080203d0 	.word	0x080203d0
 8004064:	080203e0 	.word	0x080203e0
 8004068:	080203e8 	.word	0x080203e8

0800406c <pump_init>:

// 初始化泵
int pump_init(int pump_id) {
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
    return send_command(pump_id, CMD_INIT, NULL, 0);
 8004074:	2300      	movs	r3, #0
 8004076:	2200      	movs	r2, #0
 8004078:	4904      	ldr	r1, [pc, #16]	@ (800408c <pump_init+0x20>)
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f7ff fe3a 	bl	8003cf4 <send_command>
 8004080:	4603      	mov	r3, r0
}
 8004082:	4618      	mov	r0, r3
 8004084:	3708      	adds	r7, #8
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	08020404 	.word	0x08020404

08004090 <pump_move_absolute>:

// 绝对位置移动
int pump_move_absolute(int pump_id, int position) {
 8004090:	b580      	push	{r7, lr}
 8004092:	b08a      	sub	sp, #40	@ 0x28
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	6039      	str	r1, [r7, #0]
    char cmd[32];
    snprintf(cmd, sizeof(cmd), CMD_ABS_MOVE, position);
 800409a:	f107 0008 	add.w	r0, r7, #8
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	4a07      	ldr	r2, [pc, #28]	@ (80040c0 <pump_move_absolute+0x30>)
 80040a2:	2120      	movs	r1, #32
 80040a4:	f01a f904 	bl	801e2b0 <sniprintf>
    return send_command(pump_id, cmd, NULL, 0);
 80040a8:	f107 0108 	add.w	r1, r7, #8
 80040ac:	2300      	movs	r3, #0
 80040ae:	2200      	movs	r2, #0
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f7ff fe1f 	bl	8003cf4 <send_command>
 80040b6:	4603      	mov	r3, r0
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3728      	adds	r7, #40	@ 0x28
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	08020408 	.word	0x08020408

080040c4 <pump_query_error>:
int pump_get_status(int pump_id, char* status) {
    return send_command(pump_id, CMD_STATUS, status, 256);
}

// 查询错误码
int pump_query_error(int pump_id, char* error_code) {
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
    return send_command(pump_id, CMD_ERROR_QUERY, error_code, 256);
 80040ce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80040d2:	683a      	ldr	r2, [r7, #0]
 80040d4:	4904      	ldr	r1, [pc, #16]	@ (80040e8 <pump_query_error+0x24>)
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f7ff fe0c 	bl	8003cf4 <send_command>
 80040dc:	4603      	mov	r3, r0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3708      	adds	r7, #8
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	08020430 	.word	0x08020430

080040ec <pump_query_position>:

// 查询当前活塞位置
int pump_query_position(int pump_id, int* position) {
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b0e6      	sub	sp, #408	@ 0x198
 80040f0:	af02      	add	r7, sp, #8
 80040f2:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80040f6:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80040fa:	6018      	str	r0, [r3, #0]
 80040fc:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8004100:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004104:	6019      	str	r1, [r3, #0]
    char response[256];
    char debug_msg[128];
    
    int result = send_command(pump_id, CMD_POSITION_QUERY, response, sizeof(response));
 8004106:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 800410a:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800410e:	f5a3 70c6 	sub.w	r0, r3, #396	@ 0x18c
 8004112:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004116:	4940      	ldr	r1, [pc, #256]	@ (8004218 <pump_query_position+0x12c>)
 8004118:	6800      	ldr	r0, [r0, #0]
 800411a:	f7ff fdeb 	bl	8003cf4 <send_command>
 800411e:	f8c7 018c 	str.w	r0, [r7, #396]	@ 0x18c
    
    // 添加详细的调试信息
    snprintf(debug_msg, sizeof(debug_msg), "Position query result: %d", result);
 8004122:	f107 0008 	add.w	r0, r7, #8
 8004126:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800412a:	4a3c      	ldr	r2, [pc, #240]	@ (800421c <pump_query_position+0x130>)
 800412c:	2180      	movs	r1, #128	@ 0x80
 800412e:	f01a f8bf 	bl	801e2b0 <sniprintf>
    pump_debug_print(debug_msg);
 8004132:	f107 0308 	add.w	r3, r7, #8
 8004136:	4618      	mov	r0, r3
 8004138:	f7ff fdd2 	bl	8003ce0 <pump_debug_print>
    
    if (result == 0 && position != NULL) {
 800413c:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8004140:	2b00      	cmp	r3, #0
 8004142:	d14f      	bne.n	80041e4 <pump_query_position+0xf8>
 8004144:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8004148:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d048      	beq.n	80041e4 <pump_query_position+0xf8>
        // 解析响应，从类似 "FF /0`3000 03 0D 0A" 格式中提取位置
        snprintf(debug_msg, sizeof(debug_msg), "Parsing response: [%s]", response);
 8004152:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8004156:	f107 0008 	add.w	r0, r7, #8
 800415a:	4a31      	ldr	r2, [pc, #196]	@ (8004220 <pump_query_position+0x134>)
 800415c:	2180      	movs	r1, #128	@ 0x80
 800415e:	f01a f8a7 	bl	801e2b0 <sniprintf>
        pump_debug_print(debug_msg);
 8004162:	f107 0308 	add.w	r3, r7, #8
 8004166:	4618      	mov	r0, r3
 8004168:	f7ff fdba 	bl	8003ce0 <pump_debug_print>
        
        // 寻找 '`' 字符后的数字
        char* pos_start = strchr(response, '`');
 800416c:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8004170:	2160      	movs	r1, #96	@ 0x60
 8004172:	4618      	mov	r0, r3
 8004174:	f01a f956 	bl	801e424 <strchr>
 8004178:	f8c7 0188 	str.w	r0, [r7, #392]	@ 0x188
        if (pos_start != NULL) {
 800417c:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8004180:	2b00      	cmp	r3, #0
 8004182:	d021      	beq.n	80041c8 <pump_query_position+0xdc>
            pos_start++; // 跳过 '`' 字符
 8004184:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8004188:	3301      	adds	r3, #1
 800418a:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
            *position = atoi(pos_start);
 800418e:	f8d7 0188 	ldr.w	r0, [r7, #392]	@ 0x188
 8004192:	f019 fef3 	bl	801df7c <atoi>
 8004196:	4602      	mov	r2, r0
 8004198:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800419c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	601a      	str	r2, [r3, #0]
            snprintf(debug_msg, sizeof(debug_msg), "Parsed position: %d", *position);
 80041a4:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80041a8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f107 0008 	add.w	r0, r7, #8
 80041b4:	4a1b      	ldr	r2, [pc, #108]	@ (8004224 <pump_query_position+0x138>)
 80041b6:	2180      	movs	r1, #128	@ 0x80
 80041b8:	f01a f87a 	bl	801e2b0 <sniprintf>
            pump_debug_print(debug_msg);
 80041bc:	f107 0308 	add.w	r3, r7, #8
 80041c0:	4618      	mov	r0, r3
 80041c2:	f7ff fd8d 	bl	8003ce0 <pump_debug_print>
    if (result == 0 && position != NULL) {
 80041c6:	e020      	b.n	800420a <pump_query_position+0x11e>
        } else {
            pump_debug_print("Error: No '`' character found in response");
 80041c8:	4817      	ldr	r0, [pc, #92]	@ (8004228 <pump_query_position+0x13c>)
 80041ca:	f7ff fd89 	bl	8003ce0 <pump_debug_print>
            *position = -1;  // 解析失败
 80041ce:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80041d2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f04f 32ff 	mov.w	r2, #4294967295
 80041dc:	601a      	str	r2, [r3, #0]
            return -1;
 80041de:	f04f 33ff 	mov.w	r3, #4294967295
 80041e2:	e014      	b.n	800420e <pump_query_position+0x122>
        }
    } else {
        snprintf(debug_msg, sizeof(debug_msg), "Position query failed: result=%d, position=%p", 
 80041e4:	f107 0008 	add.w	r0, r7, #8
 80041e8:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80041ec:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	9300      	str	r3, [sp, #0]
 80041f4:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80041f8:	4a0c      	ldr	r2, [pc, #48]	@ (800422c <pump_query_position+0x140>)
 80041fa:	2180      	movs	r1, #128	@ 0x80
 80041fc:	f01a f858 	bl	801e2b0 <sniprintf>
                result, (void*)position);
        pump_debug_print(debug_msg);
 8004200:	f107 0308 	add.w	r3, r7, #8
 8004204:	4618      	mov	r0, r3
 8004206:	f7ff fd6b 	bl	8003ce0 <pump_debug_print>
    }
    
    return result;
 800420a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
}
 800420e:	4618      	mov	r0, r3
 8004210:	f507 77c8 	add.w	r7, r7, #400	@ 0x190
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}
 8004218:	08020434 	.word	0x08020434
 800421c:	08020438 	.word	0x08020438
 8004220:	08020454 	.word	0x08020454
 8004224:	0802046c 	.word	0x0802046c
 8004228:	08020480 	.word	0x08020480
 800422c:	080204ac 	.word	0x080204ac

08004230 <pump_parse_status_byte>:
  * @brief  解析DT协议状态字节，转换为错误编号
  * @param  status_byte: 从泵响应中提取的状态字节（HEX值）
  * @retval 对应的错误编号
  * @note   根据DT协议状态字节表进行映射，忙碌和空闲状态的错误编号相同
  */
PumpErrorCode_t pump_parse_status_byte(uint8_t status_byte) {
 8004230:	b480      	push	{r7}
 8004232:	b085      	sub	sp, #20
 8004234:	af00      	add	r7, sp, #0
 8004236:	4603      	mov	r3, r0
 8004238:	71fb      	strb	r3, [r7, #7]
    // 提取低4位作为错误编号
    uint8_t error_bits = status_byte & 0x0F;
 800423a:	79fb      	ldrb	r3, [r7, #7]
 800423c:	f003 030f 	and.w	r3, r3, #15
 8004240:	73fb      	strb	r3, [r7, #15]
    
    switch (error_bits) {
 8004242:	7bfb      	ldrb	r3, [r7, #15]
 8004244:	2b0f      	cmp	r3, #15
 8004246:	d83b      	bhi.n	80042c0 <pump_parse_status_byte+0x90>
 8004248:	a201      	add	r2, pc, #4	@ (adr r2, 8004250 <pump_parse_status_byte+0x20>)
 800424a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800424e:	bf00      	nop
 8004250:	08004291 	.word	0x08004291
 8004254:	08004295 	.word	0x08004295
 8004258:	08004299 	.word	0x08004299
 800425c:	0800429d 	.word	0x0800429d
 8004260:	080042c1 	.word	0x080042c1
 8004264:	080042c1 	.word	0x080042c1
 8004268:	080042a1 	.word	0x080042a1
 800426c:	080042a5 	.word	0x080042a5
 8004270:	080042c1 	.word	0x080042c1
 8004274:	080042a9 	.word	0x080042a9
 8004278:	080042ad 	.word	0x080042ad
 800427c:	080042b1 	.word	0x080042b1
 8004280:	080042b5 	.word	0x080042b5
 8004284:	080042c1 	.word	0x080042c1
 8004288:	080042b9 	.word	0x080042b9
 800428c:	080042bd 	.word	0x080042bd
        case 0x00:  // 0000 - 无误
            return PUMP_ERROR_NO_ERROR;         // 0
 8004290:	2300      	movs	r3, #0
 8004292:	e016      	b.n	80042c2 <pump_parse_status_byte+0x92>
            
        case 0x01:  // 0001 - 初始化
            return PUMP_ERROR_INITIALIZED;      // 1
 8004294:	2301      	movs	r3, #1
 8004296:	e014      	b.n	80042c2 <pump_parse_status_byte+0x92>
            
        case 0x02:  // 0010 - 无效指令
            return PUMP_ERROR_NO_COMMAND;       // 2
 8004298:	2302      	movs	r3, #2
 800429a:	e012      	b.n	80042c2 <pump_parse_status_byte+0x92>
            
        case 0x03:  // 0011 - 无效参数
            return PUMP_ERROR_INVALID_PARAM;    // 3
 800429c:	2303      	movs	r3, #3
 800429e:	e010      	b.n	80042c2 <pump_parse_status_byte+0x92>
            
        case 0x06:  // 0110 - EEPROM故障
            return PUMP_ERROR_EEPROM_FAULT;     // 6
 80042a0:	2306      	movs	r3, #6
 80042a2:	e00e      	b.n	80042c2 <pump_parse_status_byte+0x92>
            
        case 0x07:  // 0111 - 设备未初始化
            return PUMP_ERROR_DEVICE_NOT_INIT;  // 7
 80042a4:	2307      	movs	r3, #7
 80042a6:	e00c      	b.n	80042c2 <pump_parse_status_byte+0x92>
            
        case 0x09:  // 1001 - 柱塞过载
            return PUMP_ERROR_OVERLOAD;         // 9
 80042a8:	2309      	movs	r3, #9
 80042aa:	e00a      	b.n	80042c2 <pump_parse_status_byte+0x92>
            
        case 0x0A:  // 1010 - 阀过载
            return PUMP_ERROR_VALVE_OVERLOAD;   // 10
 80042ac:	230a      	movs	r3, #10
 80042ae:	e008      	b.n	80042c2 <pump_parse_status_byte+0x92>
            
        case 0x0B:  // 1011 - 不支持柱移动
            return PUMP_ERROR_PLUNGER_MOVE_NOT_ALLOWED; // 11
 80042b0:	230b      	movs	r3, #11
 80042b2:	e006      	b.n	80042c2 <pump_parse_status_byte+0x92>
            
        case 0x0C:  // 1100 - 内部故障
            return PUMP_ERROR_INTERNAL_FAULT;   // 12
 80042b4:	230c      	movs	r3, #12
 80042b6:	e004      	b.n	80042c2 <pump_parse_status_byte+0x92>
            
        case 0x0E:  // 1110 - A/D转换器故障
            return PUMP_ERROR_AD_FAULT;         // 14
 80042b8:	230e      	movs	r3, #14
 80042ba:	e002      	b.n	80042c2 <pump_parse_status_byte+0x92>
            
        case 0x0F:  // 1111 - 指令溢出
            return PUMP_ERROR_CMD_OVERFLOW;     // 15
 80042bc:	230f      	movs	r3, #15
 80042be:	e000      	b.n	80042c2 <pump_parse_status_byte+0x92>
            
        default:
            // 未知错误码，默认返回内部故障
            return PUMP_ERROR_INTERNAL_FAULT;
 80042c0:	230c      	movs	r3, #12
    }
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3714      	adds	r7, #20
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop

080042d0 <pump_parse_busy_state>:
  * @brief  解析DT协议状态字节，提取忙碌状态
  * @param  status_byte: 从泵响应中提取的状态字节（HEX值）
  * @retval 忙碌状态 (PUMP_STATE_IDLE 或 PUMP_STATE_BUSY)
  * @note   高4位表示忙碌状态：0x4X=忙碌，0x6X=空闲
  */
PumpBusyState_t pump_parse_busy_state(uint8_t status_byte) {
 80042d0:	b480      	push	{r7}
 80042d2:	b085      	sub	sp, #20
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	4603      	mov	r3, r0
 80042d8:	71fb      	strb	r3, [r7, #7]
    // 检查高4位
    uint8_t busy_bits = status_byte & 0xF0;
 80042da:	79fb      	ldrb	r3, [r7, #7]
 80042dc:	f023 030f 	bic.w	r3, r3, #15
 80042e0:	73fb      	strb	r3, [r7, #15]
    
    if (busy_bits == 0x40) {
 80042e2:	7bfb      	ldrb	r3, [r7, #15]
 80042e4:	2b40      	cmp	r3, #64	@ 0x40
 80042e6:	d101      	bne.n	80042ec <pump_parse_busy_state+0x1c>
        return PUMP_STATE_BUSY;   // 0x4X = 忙碌
 80042e8:	2301      	movs	r3, #1
 80042ea:	e005      	b.n	80042f8 <pump_parse_busy_state+0x28>
    } else if (busy_bits == 0x60) {
 80042ec:	7bfb      	ldrb	r3, [r7, #15]
 80042ee:	2b60      	cmp	r3, #96	@ 0x60
 80042f0:	d101      	bne.n	80042f6 <pump_parse_busy_state+0x26>
        return PUMP_STATE_IDLE;   // 0x6X = 空闲
 80042f2:	2300      	movs	r3, #0
 80042f4:	e000      	b.n	80042f8 <pump_parse_busy_state+0x28>
    } else {
        // 未知状态，默认为忙碌（安全考虑）
        return PUMP_STATE_BUSY;
 80042f6:	2301      	movs	r3, #1
    }
 80042f8:	4618      	mov	r0, r3
 80042fa:	3714      	adds	r7, #20
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004304:	b480      	push	{r7}
 8004306:	af00      	add	r7, sp, #0
  return 1;
 8004308:	2301      	movs	r3, #1
}
 800430a:	4618      	mov	r0, r3
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <_kill>:

int _kill(int pid, int sig)
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800431e:	4b05      	ldr	r3, [pc, #20]	@ (8004334 <_kill+0x20>)
 8004320:	2216      	movs	r2, #22
 8004322:	601a      	str	r2, [r3, #0]
  return -1;
 8004324:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004328:	4618      	mov	r0, r3
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr
 8004334:	2000e94c 	.word	0x2000e94c

08004338 <_exit>:

void _exit (int status)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b082      	sub	sp, #8
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004340:	f04f 31ff 	mov.w	r1, #4294967295
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f7ff ffe5 	bl	8004314 <_kill>
  while (1) {}    /* Make sure we hang here */
 800434a:	bf00      	nop
 800434c:	e7fd      	b.n	800434a <_exit+0x12>

0800434e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800434e:	b580      	push	{r7, lr}
 8004350:	b086      	sub	sp, #24
 8004352:	af00      	add	r7, sp, #0
 8004354:	60f8      	str	r0, [r7, #12]
 8004356:	60b9      	str	r1, [r7, #8]
 8004358:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800435a:	2300      	movs	r3, #0
 800435c:	617b      	str	r3, [r7, #20]
 800435e:	e00a      	b.n	8004376 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004360:	f3af 8000 	nop.w
 8004364:	4601      	mov	r1, r0
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	1c5a      	adds	r2, r3, #1
 800436a:	60ba      	str	r2, [r7, #8]
 800436c:	b2ca      	uxtb	r2, r1
 800436e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	3301      	adds	r3, #1
 8004374:	617b      	str	r3, [r7, #20]
 8004376:	697a      	ldr	r2, [r7, #20]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	429a      	cmp	r2, r3
 800437c:	dbf0      	blt.n	8004360 <_read+0x12>
  }

  return len;
 800437e:	687b      	ldr	r3, [r7, #4]
}
 8004380:	4618      	mov	r0, r3
 8004382:	3718      	adds	r7, #24
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b086      	sub	sp, #24
 800438c:	af00      	add	r7, sp, #0
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004394:	2300      	movs	r3, #0
 8004396:	617b      	str	r3, [r7, #20]
 8004398:	e009      	b.n	80043ae <_write+0x26>
  {
    __io_putchar(*ptr++);
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	1c5a      	adds	r2, r3, #1
 800439e:	60ba      	str	r2, [r7, #8]
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	4618      	mov	r0, r3
 80043a4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	3301      	adds	r3, #1
 80043ac:	617b      	str	r3, [r7, #20]
 80043ae:	697a      	ldr	r2, [r7, #20]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	429a      	cmp	r2, r3
 80043b4:	dbf1      	blt.n	800439a <_write+0x12>
  }
  return len;
 80043b6:	687b      	ldr	r3, [r7, #4]
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3718      	adds	r7, #24
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}

080043c0 <_close>:

int _close(int file)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80043c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	370c      	adds	r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80043e8:	605a      	str	r2, [r3, #4]
  return 0;
 80043ea:	2300      	movs	r3, #0
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <_isatty>:

int _isatty(int file)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004400:	2301      	movs	r3, #1
}
 8004402:	4618      	mov	r0, r3
 8004404:	370c      	adds	r7, #12
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr

0800440e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800440e:	b480      	push	{r7}
 8004410:	b085      	sub	sp, #20
 8004412:	af00      	add	r7, sp, #0
 8004414:	60f8      	str	r0, [r7, #12]
 8004416:	60b9      	str	r1, [r7, #8]
 8004418:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800441a:	2300      	movs	r3, #0
}
 800441c:	4618      	mov	r0, r3
 800441e:	3714      	adds	r7, #20
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr

08004428 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004428:	b480      	push	{r7}
 800442a:	b087      	sub	sp, #28
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004430:	4a14      	ldr	r2, [pc, #80]	@ (8004484 <_sbrk+0x5c>)
 8004432:	4b15      	ldr	r3, [pc, #84]	@ (8004488 <_sbrk+0x60>)
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800443c:	4b13      	ldr	r3, [pc, #76]	@ (800448c <_sbrk+0x64>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d102      	bne.n	800444a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004444:	4b11      	ldr	r3, [pc, #68]	@ (800448c <_sbrk+0x64>)
 8004446:	4a12      	ldr	r2, [pc, #72]	@ (8004490 <_sbrk+0x68>)
 8004448:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800444a:	4b10      	ldr	r3, [pc, #64]	@ (800448c <_sbrk+0x64>)
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4413      	add	r3, r2
 8004452:	693a      	ldr	r2, [r7, #16]
 8004454:	429a      	cmp	r2, r3
 8004456:	d205      	bcs.n	8004464 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8004458:	4b0e      	ldr	r3, [pc, #56]	@ (8004494 <_sbrk+0x6c>)
 800445a:	220c      	movs	r2, #12
 800445c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800445e:	f04f 33ff 	mov.w	r3, #4294967295
 8004462:	e009      	b.n	8004478 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8004464:	4b09      	ldr	r3, [pc, #36]	@ (800448c <_sbrk+0x64>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800446a:	4b08      	ldr	r3, [pc, #32]	@ (800448c <_sbrk+0x64>)
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4413      	add	r3, r2
 8004472:	4a06      	ldr	r2, [pc, #24]	@ (800448c <_sbrk+0x64>)
 8004474:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004476:	68fb      	ldr	r3, [r7, #12]
}
 8004478:	4618      	mov	r0, r3
 800447a:	371c      	adds	r7, #28
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr
 8004484:	20020000 	.word	0x20020000
 8004488:	00000400 	.word	0x00000400
 800448c:	200007d4 	.word	0x200007d4
 8004490:	2000e960 	.word	0x2000e960
 8004494:	2000e94c 	.word	0x2000e94c

08004498 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004498:	b480      	push	{r7}
 800449a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800449c:	4b06      	ldr	r3, [pc, #24]	@ (80044b8 <SystemInit+0x20>)
 800449e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044a2:	4a05      	ldr	r2, [pc, #20]	@ (80044b8 <SystemInit+0x20>)
 80044a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80044a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80044ac:	bf00      	nop
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	e000ed00 	.word	0xe000ed00

080044bc <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b082      	sub	sp, #8
 80044c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80044c2:	463b      	mov	r3, r7
 80044c4:	2200      	movs	r2, #0
 80044c6:	601a      	str	r2, [r3, #0]
 80044c8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80044ca:	4b15      	ldr	r3, [pc, #84]	@ (8004520 <MX_TIM7_Init+0x64>)
 80044cc:	4a15      	ldr	r2, [pc, #84]	@ (8004524 <MX_TIM7_Init+0x68>)
 80044ce:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7999;
 80044d0:	4b13      	ldr	r3, [pc, #76]	@ (8004520 <MX_TIM7_Init+0x64>)
 80044d2:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80044d6:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044d8:	4b11      	ldr	r3, [pc, #68]	@ (8004520 <MX_TIM7_Init+0x64>)
 80044da:	2200      	movs	r2, #0
 80044dc:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80044de:	4b10      	ldr	r3, [pc, #64]	@ (8004520 <MX_TIM7_Init+0x64>)
 80044e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80044e4:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80044e6:	4b0e      	ldr	r3, [pc, #56]	@ (8004520 <MX_TIM7_Init+0x64>)
 80044e8:	2200      	movs	r2, #0
 80044ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80044ec:	480c      	ldr	r0, [pc, #48]	@ (8004520 <MX_TIM7_Init+0x64>)
 80044ee:	f004 fc45 	bl	8008d7c <HAL_TIM_Base_Init>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d001      	beq.n	80044fc <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80044f8:	f7fd fe1e 	bl	8002138 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80044fc:	2300      	movs	r3, #0
 80044fe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004500:	2300      	movs	r3, #0
 8004502:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004504:	463b      	mov	r3, r7
 8004506:	4619      	mov	r1, r3
 8004508:	4805      	ldr	r0, [pc, #20]	@ (8004520 <MX_TIM7_Init+0x64>)
 800450a:	f004 feb5 	bl	8009278 <HAL_TIMEx_MasterConfigSynchronization>
 800450e:	4603      	mov	r3, r0
 8004510:	2b00      	cmp	r3, #0
 8004512:	d001      	beq.n	8004518 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8004514:	f7fd fe10 	bl	8002138 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004518:	bf00      	nop
 800451a:	3708      	adds	r7, #8
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}
 8004520:	200007d8 	.word	0x200007d8
 8004524:	40001400 	.word	0x40001400

08004528 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a0e      	ldr	r2, [pc, #56]	@ (8004570 <HAL_TIM_Base_MspInit+0x48>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d115      	bne.n	8004566 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800453a:	2300      	movs	r3, #0
 800453c:	60fb      	str	r3, [r7, #12]
 800453e:	4b0d      	ldr	r3, [pc, #52]	@ (8004574 <HAL_TIM_Base_MspInit+0x4c>)
 8004540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004542:	4a0c      	ldr	r2, [pc, #48]	@ (8004574 <HAL_TIM_Base_MspInit+0x4c>)
 8004544:	f043 0320 	orr.w	r3, r3, #32
 8004548:	6413      	str	r3, [r2, #64]	@ 0x40
 800454a:	4b0a      	ldr	r3, [pc, #40]	@ (8004574 <HAL_TIM_Base_MspInit+0x4c>)
 800454c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800454e:	f003 0320 	and.w	r3, r3, #32
 8004552:	60fb      	str	r3, [r7, #12]
 8004554:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8004556:	2200      	movs	r2, #0
 8004558:	2105      	movs	r1, #5
 800455a:	2037      	movs	r0, #55	@ 0x37
 800455c:	f000 fcd4 	bl	8004f08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004560:	2037      	movs	r0, #55	@ 0x37
 8004562:	f000 fced 	bl	8004f40 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8004566:	bf00      	nop
 8004568:	3710      	adds	r7, #16
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	40001400 	.word	0x40001400
 8004574:	40023800 	.word	0x40023800

08004578 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart6_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800457c:	4b11      	ldr	r3, [pc, #68]	@ (80045c4 <MX_USART1_UART_Init+0x4c>)
 800457e:	4a12      	ldr	r2, [pc, #72]	@ (80045c8 <MX_USART1_UART_Init+0x50>)
 8004580:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004582:	4b10      	ldr	r3, [pc, #64]	@ (80045c4 <MX_USART1_UART_Init+0x4c>)
 8004584:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004588:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800458a:	4b0e      	ldr	r3, [pc, #56]	@ (80045c4 <MX_USART1_UART_Init+0x4c>)
 800458c:	2200      	movs	r2, #0
 800458e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004590:	4b0c      	ldr	r3, [pc, #48]	@ (80045c4 <MX_USART1_UART_Init+0x4c>)
 8004592:	2200      	movs	r2, #0
 8004594:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004596:	4b0b      	ldr	r3, [pc, #44]	@ (80045c4 <MX_USART1_UART_Init+0x4c>)
 8004598:	2200      	movs	r2, #0
 800459a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800459c:	4b09      	ldr	r3, [pc, #36]	@ (80045c4 <MX_USART1_UART_Init+0x4c>)
 800459e:	220c      	movs	r2, #12
 80045a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80045a2:	4b08      	ldr	r3, [pc, #32]	@ (80045c4 <MX_USART1_UART_Init+0x4c>)
 80045a4:	2200      	movs	r2, #0
 80045a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80045a8:	4b06      	ldr	r3, [pc, #24]	@ (80045c4 <MX_USART1_UART_Init+0x4c>)
 80045aa:	2200      	movs	r2, #0
 80045ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80045ae:	4805      	ldr	r0, [pc, #20]	@ (80045c4 <MX_USART1_UART_Init+0x4c>)
 80045b0:	f004 fef2 	bl	8009398 <HAL_UART_Init>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d001      	beq.n	80045be <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80045ba:	f7fd fdbd 	bl	8002138 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80045be:	bf00      	nop
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	20000820 	.word	0x20000820
 80045c8:	40011000 	.word	0x40011000

080045cc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80045d0:	4b11      	ldr	r3, [pc, #68]	@ (8004618 <MX_USART3_UART_Init+0x4c>)
 80045d2:	4a12      	ldr	r2, [pc, #72]	@ (800461c <MX_USART3_UART_Init+0x50>)
 80045d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80045d6:	4b10      	ldr	r3, [pc, #64]	@ (8004618 <MX_USART3_UART_Init+0x4c>)
 80045d8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80045dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80045de:	4b0e      	ldr	r3, [pc, #56]	@ (8004618 <MX_USART3_UART_Init+0x4c>)
 80045e0:	2200      	movs	r2, #0
 80045e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80045e4:	4b0c      	ldr	r3, [pc, #48]	@ (8004618 <MX_USART3_UART_Init+0x4c>)
 80045e6:	2200      	movs	r2, #0
 80045e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80045ea:	4b0b      	ldr	r3, [pc, #44]	@ (8004618 <MX_USART3_UART_Init+0x4c>)
 80045ec:	2200      	movs	r2, #0
 80045ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80045f0:	4b09      	ldr	r3, [pc, #36]	@ (8004618 <MX_USART3_UART_Init+0x4c>)
 80045f2:	220c      	movs	r2, #12
 80045f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80045f6:	4b08      	ldr	r3, [pc, #32]	@ (8004618 <MX_USART3_UART_Init+0x4c>)
 80045f8:	2200      	movs	r2, #0
 80045fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80045fc:	4b06      	ldr	r3, [pc, #24]	@ (8004618 <MX_USART3_UART_Init+0x4c>)
 80045fe:	2200      	movs	r2, #0
 8004600:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004602:	4805      	ldr	r0, [pc, #20]	@ (8004618 <MX_USART3_UART_Init+0x4c>)
 8004604:	f004 fec8 	bl	8009398 <HAL_UART_Init>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d001      	beq.n	8004612 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800460e:	f7fd fd93 	bl	8002138 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004612:	bf00      	nop
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	20000868 	.word	0x20000868
 800461c:	40004800 	.word	0x40004800

08004620 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8004624:	4b11      	ldr	r3, [pc, #68]	@ (800466c <MX_USART6_UART_Init+0x4c>)
 8004626:	4a12      	ldr	r2, [pc, #72]	@ (8004670 <MX_USART6_UART_Init+0x50>)
 8004628:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800462a:	4b10      	ldr	r3, [pc, #64]	@ (800466c <MX_USART6_UART_Init+0x4c>)
 800462c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8004630:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8004632:	4b0e      	ldr	r3, [pc, #56]	@ (800466c <MX_USART6_UART_Init+0x4c>)
 8004634:	2200      	movs	r2, #0
 8004636:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004638:	4b0c      	ldr	r3, [pc, #48]	@ (800466c <MX_USART6_UART_Init+0x4c>)
 800463a:	2200      	movs	r2, #0
 800463c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800463e:	4b0b      	ldr	r3, [pc, #44]	@ (800466c <MX_USART6_UART_Init+0x4c>)
 8004640:	2200      	movs	r2, #0
 8004642:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004644:	4b09      	ldr	r3, [pc, #36]	@ (800466c <MX_USART6_UART_Init+0x4c>)
 8004646:	220c      	movs	r2, #12
 8004648:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800464a:	4b08      	ldr	r3, [pc, #32]	@ (800466c <MX_USART6_UART_Init+0x4c>)
 800464c:	2200      	movs	r2, #0
 800464e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004650:	4b06      	ldr	r3, [pc, #24]	@ (800466c <MX_USART6_UART_Init+0x4c>)
 8004652:	2200      	movs	r2, #0
 8004654:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8004656:	4805      	ldr	r0, [pc, #20]	@ (800466c <MX_USART6_UART_Init+0x4c>)
 8004658:	f004 fe9e 	bl	8009398 <HAL_UART_Init>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d001      	beq.n	8004666 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8004662:	f7fd fd69 	bl	8002138 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8004666:	bf00      	nop
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	200008b0 	.word	0x200008b0
 8004670:	40011400 	.word	0x40011400

08004674 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b08e      	sub	sp, #56	@ 0x38
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800467c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004680:	2200      	movs	r2, #0
 8004682:	601a      	str	r2, [r3, #0]
 8004684:	605a      	str	r2, [r3, #4]
 8004686:	609a      	str	r2, [r3, #8]
 8004688:	60da      	str	r2, [r3, #12]
 800468a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a82      	ldr	r2, [pc, #520]	@ (800489c <HAL_UART_MspInit+0x228>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d12d      	bne.n	80046f2 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004696:	2300      	movs	r3, #0
 8004698:	623b      	str	r3, [r7, #32]
 800469a:	4b81      	ldr	r3, [pc, #516]	@ (80048a0 <HAL_UART_MspInit+0x22c>)
 800469c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800469e:	4a80      	ldr	r2, [pc, #512]	@ (80048a0 <HAL_UART_MspInit+0x22c>)
 80046a0:	f043 0310 	orr.w	r3, r3, #16
 80046a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80046a6:	4b7e      	ldr	r3, [pc, #504]	@ (80048a0 <HAL_UART_MspInit+0x22c>)
 80046a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046aa:	f003 0310 	and.w	r3, r3, #16
 80046ae:	623b      	str	r3, [r7, #32]
 80046b0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046b2:	2300      	movs	r3, #0
 80046b4:	61fb      	str	r3, [r7, #28]
 80046b6:	4b7a      	ldr	r3, [pc, #488]	@ (80048a0 <HAL_UART_MspInit+0x22c>)
 80046b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ba:	4a79      	ldr	r2, [pc, #484]	@ (80048a0 <HAL_UART_MspInit+0x22c>)
 80046bc:	f043 0301 	orr.w	r3, r3, #1
 80046c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80046c2:	4b77      	ldr	r3, [pc, #476]	@ (80048a0 <HAL_UART_MspInit+0x22c>)
 80046c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046c6:	f003 0301 	and.w	r3, r3, #1
 80046ca:	61fb      	str	r3, [r7, #28]
 80046cc:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80046ce:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80046d2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046d4:	2302      	movs	r3, #2
 80046d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046d8:	2300      	movs	r3, #0
 80046da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046dc:	2303      	movs	r3, #3
 80046de:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80046e0:	2307      	movs	r3, #7
 80046e2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80046e8:	4619      	mov	r1, r3
 80046ea:	486e      	ldr	r0, [pc, #440]	@ (80048a4 <HAL_UART_MspInit+0x230>)
 80046ec:	f002 fa6c 	bl	8006bc8 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80046f0:	e0cf      	b.n	8004892 <HAL_UART_MspInit+0x21e>
  else if(uartHandle->Instance==USART3)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a6c      	ldr	r2, [pc, #432]	@ (80048a8 <HAL_UART_MspInit+0x234>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d163      	bne.n	80047c4 <HAL_UART_MspInit+0x150>
    __HAL_RCC_USART3_CLK_ENABLE();
 80046fc:	2300      	movs	r3, #0
 80046fe:	61bb      	str	r3, [r7, #24]
 8004700:	4b67      	ldr	r3, [pc, #412]	@ (80048a0 <HAL_UART_MspInit+0x22c>)
 8004702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004704:	4a66      	ldr	r2, [pc, #408]	@ (80048a0 <HAL_UART_MspInit+0x22c>)
 8004706:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800470a:	6413      	str	r3, [r2, #64]	@ 0x40
 800470c:	4b64      	ldr	r3, [pc, #400]	@ (80048a0 <HAL_UART_MspInit+0x22c>)
 800470e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004710:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004714:	61bb      	str	r3, [r7, #24]
 8004716:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004718:	2300      	movs	r3, #0
 800471a:	617b      	str	r3, [r7, #20]
 800471c:	4b60      	ldr	r3, [pc, #384]	@ (80048a0 <HAL_UART_MspInit+0x22c>)
 800471e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004720:	4a5f      	ldr	r2, [pc, #380]	@ (80048a0 <HAL_UART_MspInit+0x22c>)
 8004722:	f043 0302 	orr.w	r3, r3, #2
 8004726:	6313      	str	r3, [r2, #48]	@ 0x30
 8004728:	4b5d      	ldr	r3, [pc, #372]	@ (80048a0 <HAL_UART_MspInit+0x22c>)
 800472a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800472c:	f003 0302 	and.w	r3, r3, #2
 8004730:	617b      	str	r3, [r7, #20]
 8004732:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004734:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004738:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800473a:	2302      	movs	r3, #2
 800473c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800473e:	2300      	movs	r3, #0
 8004740:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004742:	2303      	movs	r3, #3
 8004744:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004746:	2307      	movs	r3, #7
 8004748:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800474a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800474e:	4619      	mov	r1, r3
 8004750:	4856      	ldr	r0, [pc, #344]	@ (80048ac <HAL_UART_MspInit+0x238>)
 8004752:	f002 fa39 	bl	8006bc8 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8004756:	4b56      	ldr	r3, [pc, #344]	@ (80048b0 <HAL_UART_MspInit+0x23c>)
 8004758:	4a56      	ldr	r2, [pc, #344]	@ (80048b4 <HAL_UART_MspInit+0x240>)
 800475a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800475c:	4b54      	ldr	r3, [pc, #336]	@ (80048b0 <HAL_UART_MspInit+0x23c>)
 800475e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004762:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004764:	4b52      	ldr	r3, [pc, #328]	@ (80048b0 <HAL_UART_MspInit+0x23c>)
 8004766:	2200      	movs	r2, #0
 8004768:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800476a:	4b51      	ldr	r3, [pc, #324]	@ (80048b0 <HAL_UART_MspInit+0x23c>)
 800476c:	2200      	movs	r2, #0
 800476e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004770:	4b4f      	ldr	r3, [pc, #316]	@ (80048b0 <HAL_UART_MspInit+0x23c>)
 8004772:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004776:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004778:	4b4d      	ldr	r3, [pc, #308]	@ (80048b0 <HAL_UART_MspInit+0x23c>)
 800477a:	2200      	movs	r2, #0
 800477c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800477e:	4b4c      	ldr	r3, [pc, #304]	@ (80048b0 <HAL_UART_MspInit+0x23c>)
 8004780:	2200      	movs	r2, #0
 8004782:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8004784:	4b4a      	ldr	r3, [pc, #296]	@ (80048b0 <HAL_UART_MspInit+0x23c>)
 8004786:	2200      	movs	r2, #0
 8004788:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800478a:	4b49      	ldr	r3, [pc, #292]	@ (80048b0 <HAL_UART_MspInit+0x23c>)
 800478c:	2200      	movs	r2, #0
 800478e:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004790:	4b47      	ldr	r3, [pc, #284]	@ (80048b0 <HAL_UART_MspInit+0x23c>)
 8004792:	2200      	movs	r2, #0
 8004794:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004796:	4846      	ldr	r0, [pc, #280]	@ (80048b0 <HAL_UART_MspInit+0x23c>)
 8004798:	f000 fbe0 	bl	8004f5c <HAL_DMA_Init>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d001      	beq.n	80047a6 <HAL_UART_MspInit+0x132>
      Error_Handler();
 80047a2:	f7fd fcc9 	bl	8002138 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a41      	ldr	r2, [pc, #260]	@ (80048b0 <HAL_UART_MspInit+0x23c>)
 80047aa:	63da      	str	r2, [r3, #60]	@ 0x3c
 80047ac:	4a40      	ldr	r2, [pc, #256]	@ (80048b0 <HAL_UART_MspInit+0x23c>)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80047b2:	2200      	movs	r2, #0
 80047b4:	2105      	movs	r1, #5
 80047b6:	2027      	movs	r0, #39	@ 0x27
 80047b8:	f000 fba6 	bl	8004f08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80047bc:	2027      	movs	r0, #39	@ 0x27
 80047be:	f000 fbbf 	bl	8004f40 <HAL_NVIC_EnableIRQ>
}
 80047c2:	e066      	b.n	8004892 <HAL_UART_MspInit+0x21e>
  else if(uartHandle->Instance==USART6)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a3b      	ldr	r2, [pc, #236]	@ (80048b8 <HAL_UART_MspInit+0x244>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d161      	bne.n	8004892 <HAL_UART_MspInit+0x21e>
    __HAL_RCC_USART6_CLK_ENABLE();
 80047ce:	2300      	movs	r3, #0
 80047d0:	613b      	str	r3, [r7, #16]
 80047d2:	4b33      	ldr	r3, [pc, #204]	@ (80048a0 <HAL_UART_MspInit+0x22c>)
 80047d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047d6:	4a32      	ldr	r2, [pc, #200]	@ (80048a0 <HAL_UART_MspInit+0x22c>)
 80047d8:	f043 0320 	orr.w	r3, r3, #32
 80047dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80047de:	4b30      	ldr	r3, [pc, #192]	@ (80048a0 <HAL_UART_MspInit+0x22c>)
 80047e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047e2:	f003 0320 	and.w	r3, r3, #32
 80047e6:	613b      	str	r3, [r7, #16]
 80047e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80047ea:	2300      	movs	r3, #0
 80047ec:	60fb      	str	r3, [r7, #12]
 80047ee:	4b2c      	ldr	r3, [pc, #176]	@ (80048a0 <HAL_UART_MspInit+0x22c>)
 80047f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047f2:	4a2b      	ldr	r2, [pc, #172]	@ (80048a0 <HAL_UART_MspInit+0x22c>)
 80047f4:	f043 0304 	orr.w	r3, r3, #4
 80047f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80047fa:	4b29      	ldr	r3, [pc, #164]	@ (80048a0 <HAL_UART_MspInit+0x22c>)
 80047fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047fe:	f003 0304 	and.w	r3, r3, #4
 8004802:	60fb      	str	r3, [r7, #12]
 8004804:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004806:	23c0      	movs	r3, #192	@ 0xc0
 8004808:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800480a:	2302      	movs	r3, #2
 800480c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800480e:	2300      	movs	r3, #0
 8004810:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004812:	2303      	movs	r3, #3
 8004814:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004816:	2308      	movs	r3, #8
 8004818:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800481a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800481e:	4619      	mov	r1, r3
 8004820:	4826      	ldr	r0, [pc, #152]	@ (80048bc <HAL_UART_MspInit+0x248>)
 8004822:	f002 f9d1 	bl	8006bc8 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8004826:	4b26      	ldr	r3, [pc, #152]	@ (80048c0 <HAL_UART_MspInit+0x24c>)
 8004828:	4a26      	ldr	r2, [pc, #152]	@ (80048c4 <HAL_UART_MspInit+0x250>)
 800482a:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 800482c:	4b24      	ldr	r3, [pc, #144]	@ (80048c0 <HAL_UART_MspInit+0x24c>)
 800482e:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8004832:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004834:	4b22      	ldr	r3, [pc, #136]	@ (80048c0 <HAL_UART_MspInit+0x24c>)
 8004836:	2200      	movs	r2, #0
 8004838:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800483a:	4b21      	ldr	r3, [pc, #132]	@ (80048c0 <HAL_UART_MspInit+0x24c>)
 800483c:	2200      	movs	r2, #0
 800483e:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004840:	4b1f      	ldr	r3, [pc, #124]	@ (80048c0 <HAL_UART_MspInit+0x24c>)
 8004842:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004846:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004848:	4b1d      	ldr	r3, [pc, #116]	@ (80048c0 <HAL_UART_MspInit+0x24c>)
 800484a:	2200      	movs	r2, #0
 800484c:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800484e:	4b1c      	ldr	r3, [pc, #112]	@ (80048c0 <HAL_UART_MspInit+0x24c>)
 8004850:	2200      	movs	r2, #0
 8004852:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8004854:	4b1a      	ldr	r3, [pc, #104]	@ (80048c0 <HAL_UART_MspInit+0x24c>)
 8004856:	2200      	movs	r2, #0
 8004858:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 800485a:	4b19      	ldr	r3, [pc, #100]	@ (80048c0 <HAL_UART_MspInit+0x24c>)
 800485c:	2200      	movs	r2, #0
 800485e:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004860:	4b17      	ldr	r3, [pc, #92]	@ (80048c0 <HAL_UART_MspInit+0x24c>)
 8004862:	2200      	movs	r2, #0
 8004864:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8004866:	4816      	ldr	r0, [pc, #88]	@ (80048c0 <HAL_UART_MspInit+0x24c>)
 8004868:	f000 fb78 	bl	8004f5c <HAL_DMA_Init>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d001      	beq.n	8004876 <HAL_UART_MspInit+0x202>
      Error_Handler();
 8004872:	f7fd fc61 	bl	8002138 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a11      	ldr	r2, [pc, #68]	@ (80048c0 <HAL_UART_MspInit+0x24c>)
 800487a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800487c:	4a10      	ldr	r2, [pc, #64]	@ (80048c0 <HAL_UART_MspInit+0x24c>)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8004882:	2200      	movs	r2, #0
 8004884:	2105      	movs	r1, #5
 8004886:	2047      	movs	r0, #71	@ 0x47
 8004888:	f000 fb3e 	bl	8004f08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800488c:	2047      	movs	r0, #71	@ 0x47
 800488e:	f000 fb57 	bl	8004f40 <HAL_NVIC_EnableIRQ>
}
 8004892:	bf00      	nop
 8004894:	3738      	adds	r7, #56	@ 0x38
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	40011000 	.word	0x40011000
 80048a0:	40023800 	.word	0x40023800
 80048a4:	40020000 	.word	0x40020000
 80048a8:	40004800 	.word	0x40004800
 80048ac:	40020400 	.word	0x40020400
 80048b0:	200008f8 	.word	0x200008f8
 80048b4:	40026028 	.word	0x40026028
 80048b8:	40011400 	.word	0x40011400
 80048bc:	40020800 	.word	0x40020800
 80048c0:	20000958 	.word	0x20000958
 80048c4:	40026428 	.word	0x40026428

080048c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80048c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004900 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80048cc:	f7ff fde4 	bl	8004498 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80048d0:	480c      	ldr	r0, [pc, #48]	@ (8004904 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80048d2:	490d      	ldr	r1, [pc, #52]	@ (8004908 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80048d4:	4a0d      	ldr	r2, [pc, #52]	@ (800490c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80048d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80048d8:	e002      	b.n	80048e0 <LoopCopyDataInit>

080048da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80048da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80048dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80048de:	3304      	adds	r3, #4

080048e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80048e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80048e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80048e4:	d3f9      	bcc.n	80048da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80048e6:	4a0a      	ldr	r2, [pc, #40]	@ (8004910 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80048e8:	4c0a      	ldr	r4, [pc, #40]	@ (8004914 <LoopFillZerobss+0x22>)
  movs r3, #0
 80048ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80048ec:	e001      	b.n	80048f2 <LoopFillZerobss>

080048ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80048ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80048f0:	3204      	adds	r2, #4

080048f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80048f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80048f4:	d3fb      	bcc.n	80048ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80048f6:	f019 fe4d 	bl	801e594 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80048fa:	f7fd fb85 	bl	8002008 <main>
  bx  lr    
 80048fe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004900:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004904:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004908:	20000170 	.word	0x20000170
  ldr r2, =_sidata
 800490c:	080240fc 	.word	0x080240fc
  ldr r2, =_sbss
 8004910:	20000170 	.word	0x20000170
  ldr r4, =_ebss
 8004914:	2000e95c 	.word	0x2000e95c

08004918 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004918:	e7fe      	b.n	8004918 <ADC_IRQHandler>

0800491a <eth_chip_regster_bus_io>:
  * @param       ioctx�������豸IO����
  * @retval      ETH_CHIP_STATUS_OK��OK
  *              ETH_CHIP_STATUS_ERROR��ȱ�ٹ���
  */
int32_t  eth_chip_regster_bus_io(eth_chip_object_t *pobj, eth_chip_ioc_tx_t *ioctx)
{
 800491a:	b480      	push	{r7}
 800491c:	b083      	sub	sp, #12
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
 8004922:	6039      	str	r1, [r7, #0]
    if (!pobj || !ioctx->readreg || !ioctx->writereg || !ioctx->gettick)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d00b      	beq.n	8004942 <eth_chip_regster_bus_io+0x28>
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d007      	beq.n	8004942 <eth_chip_regster_bus_io+0x28>
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d003      	beq.n	8004942 <eth_chip_regster_bus_io+0x28>
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d102      	bne.n	8004948 <eth_chip_regster_bus_io+0x2e>
    {
        return ETH_CHIP_STATUS_ERROR;
 8004942:	f04f 33ff 	mov.w	r3, #4294967295
 8004946:	e014      	b.n	8004972 <eth_chip_regster_bus_io+0x58>
    }

    pobj->io.init = ioctx->init;
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	609a      	str	r2, [r3, #8]
    pobj->io.deinit = ioctx->deinit;
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	685a      	ldr	r2, [r3, #4]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	60da      	str	r2, [r3, #12]
    pobj->io.readreg = ioctx->readreg;
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	68da      	ldr	r2, [r3, #12]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	615a      	str	r2, [r3, #20]
    pobj->io.writereg = ioctx->writereg;
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	689a      	ldr	r2, [r3, #8]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	611a      	str	r2, [r3, #16]
    pobj->io.gettick = ioctx->gettick;
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	691a      	ldr	r2, [r3, #16]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	619a      	str	r2, [r3, #24]

    return ETH_CHIP_STATUS_OK;
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	370c      	adds	r7, #12
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
	...

08004980 <eth_chip_init>:
                 ETH_CHIP_STATUS_READ_ERROR�����ܶ�ȡ�Ĵ���
                 ETH_CHIP_STATUS_WRITE_ERROR������д��Ĵ���
                 ETH_CHIP_STATUS_RESET_TIMEOUT���޷�ִ��������λ
  */
int32_t eth_chip_init(eth_chip_object_t *pobj)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b086      	sub	sp, #24
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8004988:	2300      	movs	r3, #0
 800498a:	60fb      	str	r3, [r7, #12]
 800498c:	2300      	movs	r3, #0
 800498e:	60bb      	str	r3, [r7, #8]
 8004990:	2300      	movs	r3, #0
 8004992:	617b      	str	r3, [r7, #20]
    int32_t status = ETH_CHIP_STATUS_OK;
 8004994:	2300      	movs	r3, #0
 8004996:	613b      	str	r3, [r7, #16]
        LAN8720A    Register 2    0x0007
                    Register 3    0xC0F0

        RTL8201BL   Register 2    0x0000
                    Register 3    0x8201 */
    pobj->io.readreg(addr, PHY_REGISTER2, &regvalue);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	695b      	ldr	r3, [r3, #20]
 800499c:	f107 0208 	add.w	r2, r7, #8
 80049a0:	2102      	movs	r1, #2
 80049a2:	6978      	ldr	r0, [r7, #20]
 80049a4:	4798      	blx	r3

    switch (regvalue)
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	2b1c      	cmp	r3, #28
 80049aa:	d02d      	beq.n	8004a08 <eth_chip_init+0x88>
 80049ac:	2b1c      	cmp	r3, #28
 80049ae:	d847      	bhi.n	8004a40 <eth_chip_init+0xc0>
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d002      	beq.n	80049ba <eth_chip_init+0x3a>
 80049b4:	2b07      	cmp	r3, #7
 80049b6:	d036      	beq.n	8004a26 <eth_chip_init+0xa6>
 80049b8:	e042      	b.n	8004a40 <eth_chip_init+0xc0>
    {
        case YT8512C_AND_RTL8201BL_PHYREGISTER2:
            pobj->io.readreg(addr, PHY_REGISTER3, &regvalue);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	695b      	ldr	r3, [r3, #20]
 80049be:	f107 0208 	add.w	r2, r7, #8
 80049c2:	2103      	movs	r1, #3
 80049c4:	6978      	ldr	r0, [r7, #20]
 80049c6:	4798      	blx	r3

            if (regvalue == 0x128)
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	f5b3 7f94 	cmp.w	r3, #296	@ 0x128
 80049ce:	d10e      	bne.n	80049ee <eth_chip_init+0x6e>
            {
                ETH_CHIP_PHYSCSR  = ((uint16_t)0x11);
 80049d0:	4b6a      	ldr	r3, [pc, #424]	@ (8004b7c <eth_chip_init+0x1fc>)
 80049d2:	2211      	movs	r2, #17
 80049d4:	801a      	strh	r2, [r3, #0]
                ETH_CHIP_SPEED_STATUS = ((uint16_t)0x4010);
 80049d6:	4b6a      	ldr	r3, [pc, #424]	@ (8004b80 <eth_chip_init+0x200>)
 80049d8:	f244 0210 	movw	r2, #16400	@ 0x4010
 80049dc:	801a      	strh	r2, [r3, #0]
                ETH_CHIP_DUPLEX_STATUS = ((uint16_t)0x2000);
 80049de:	4b69      	ldr	r3, [pc, #420]	@ (8004b84 <eth_chip_init+0x204>)
 80049e0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80049e4:	801a      	strh	r2, [r3, #0]
                PHY_TYPE = YT8512C;
 80049e6:	4b68      	ldr	r3, [pc, #416]	@ (8004b88 <eth_chip_init+0x208>)
 80049e8:	2202      	movs	r2, #2
 80049ea:	601a      	str	r2, [r3, #0]
                ETH_CHIP_PHYSCSR  = ((uint16_t)0x10);
                ETH_CHIP_SPEED_STATUS = ((uint16_t)0x0022);
                ETH_CHIP_DUPLEX_STATUS = ((uint16_t)0x0004);
                PHY_TYPE = RTL8201;
            }
            break;
 80049ec:	e028      	b.n	8004a40 <eth_chip_init+0xc0>
                ETH_CHIP_PHYSCSR  = ((uint16_t)0x10);
 80049ee:	4b63      	ldr	r3, [pc, #396]	@ (8004b7c <eth_chip_init+0x1fc>)
 80049f0:	2210      	movs	r2, #16
 80049f2:	801a      	strh	r2, [r3, #0]
                ETH_CHIP_SPEED_STATUS = ((uint16_t)0x0022);
 80049f4:	4b62      	ldr	r3, [pc, #392]	@ (8004b80 <eth_chip_init+0x200>)
 80049f6:	2222      	movs	r2, #34	@ 0x22
 80049f8:	801a      	strh	r2, [r3, #0]
                ETH_CHIP_DUPLEX_STATUS = ((uint16_t)0x0004);
 80049fa:	4b62      	ldr	r3, [pc, #392]	@ (8004b84 <eth_chip_init+0x204>)
 80049fc:	2204      	movs	r2, #4
 80049fe:	801a      	strh	r2, [r3, #0]
                PHY_TYPE = RTL8201;
 8004a00:	4b61      	ldr	r3, [pc, #388]	@ (8004b88 <eth_chip_init+0x208>)
 8004a02:	2203      	movs	r2, #3
 8004a04:	601a      	str	r2, [r3, #0]
            break;
 8004a06:	e01b      	b.n	8004a40 <eth_chip_init+0xc0>
        case SR8201F_PHYREGISTER2:
            ETH_CHIP_PHYSCSR  = ((uint16_t)0x00);
 8004a08:	4b5c      	ldr	r3, [pc, #368]	@ (8004b7c <eth_chip_init+0x1fc>)
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	801a      	strh	r2, [r3, #0]
            ETH_CHIP_SPEED_STATUS = ((uint16_t)0x2020);
 8004a0e:	4b5c      	ldr	r3, [pc, #368]	@ (8004b80 <eth_chip_init+0x200>)
 8004a10:	f242 0220 	movw	r2, #8224	@ 0x2020
 8004a14:	801a      	strh	r2, [r3, #0]
            ETH_CHIP_DUPLEX_STATUS = ((uint16_t)0x0100);
 8004a16:	4b5b      	ldr	r3, [pc, #364]	@ (8004b84 <eth_chip_init+0x204>)
 8004a18:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004a1c:	801a      	strh	r2, [r3, #0]
            PHY_TYPE = SR8201F;
 8004a1e:	4b5a      	ldr	r3, [pc, #360]	@ (8004b88 <eth_chip_init+0x208>)
 8004a20:	2201      	movs	r2, #1
 8004a22:	601a      	str	r2, [r3, #0]
            break;
 8004a24:	e00c      	b.n	8004a40 <eth_chip_init+0xc0>
        case LAN8720A_PHYREGISTER2:
            ETH_CHIP_PHYSCSR  = ((uint16_t)0x1F);
 8004a26:	4b55      	ldr	r3, [pc, #340]	@ (8004b7c <eth_chip_init+0x1fc>)
 8004a28:	221f      	movs	r2, #31
 8004a2a:	801a      	strh	r2, [r3, #0]
            ETH_CHIP_SPEED_STATUS = ((uint16_t)0x0004);
 8004a2c:	4b54      	ldr	r3, [pc, #336]	@ (8004b80 <eth_chip_init+0x200>)
 8004a2e:	2204      	movs	r2, #4
 8004a30:	801a      	strh	r2, [r3, #0]
            ETH_CHIP_DUPLEX_STATUS = ((uint16_t)0x0010);
 8004a32:	4b54      	ldr	r3, [pc, #336]	@ (8004b84 <eth_chip_init+0x204>)
 8004a34:	2210      	movs	r2, #16
 8004a36:	801a      	strh	r2, [r3, #0]
            PHY_TYPE = LAN8720;
 8004a38:	4b53      	ldr	r3, [pc, #332]	@ (8004b88 <eth_chip_init+0x208>)
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	601a      	str	r2, [r3, #0]
            break;
 8004a3e:	bf00      	nop
    }
#endif

    if (pobj->is_initialized == 0)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d17e      	bne.n	8004b46 <eth_chip_init+0x1c6>
    {
        if (pobj->io.init != 0)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d002      	beq.n	8004a56 <eth_chip_init+0xd6>
        {
            /* MDCʱ�� */
            pobj->io.init();
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	4798      	blx	r3
        }

        /* ����PHY��ַΪ32 */
        pobj->devaddr = ETH_CHIP_MAX_DEV_ADDR + 1;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2220      	movs	r2, #32
 8004a5a:	601a      	str	r2, [r3, #0]

        /* ��ҪΪ�˲���PHY��ַ */
        for (addr = 0; addr <= ETH_CHIP_MAX_DEV_ADDR; addr ++)
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	617b      	str	r3, [r7, #20]
 8004a60:	e01e      	b.n	8004aa0 <eth_chip_init+0x120>
        {
            if (pobj->io.readreg(addr, ETH_CHIP_PHYSCSR, &regvalue) < 0)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	695b      	ldr	r3, [r3, #20]
 8004a66:	4a45      	ldr	r2, [pc, #276]	@ (8004b7c <eth_chip_init+0x1fc>)
 8004a68:	8812      	ldrh	r2, [r2, #0]
 8004a6a:	4611      	mov	r1, r2
 8004a6c:	f107 0208 	add.w	r2, r7, #8
 8004a70:	6978      	ldr	r0, [r7, #20]
 8004a72:	4798      	blx	r3
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	da03      	bge.n	8004a82 <eth_chip_init+0x102>
            {
                status = ETH_CHIP_STATUS_READ_ERROR;
 8004a7a:	f06f 0304 	mvn.w	r3, #4
 8004a7e:	613b      	str	r3, [r7, #16]
                /* �޷���ȡ����豸��ַ������һ����ַ */
                continue;
 8004a80:	e00b      	b.n	8004a9a <eth_chip_init+0x11a>
            }
            /* �Ѿ��ҵ�PHY��ַ�� */
            if ((regvalue & ETH_CHIP_PHY_COUNT) == addr)
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	f003 031f 	and.w	r3, r3, #31
 8004a88:	697a      	ldr	r2, [r7, #20]
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d105      	bne.n	8004a9a <eth_chip_init+0x11a>
            {
                pobj->devaddr = addr;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	697a      	ldr	r2, [r7, #20]
 8004a92:	601a      	str	r2, [r3, #0]
                status = ETH_CHIP_STATUS_OK;
 8004a94:	2300      	movs	r3, #0
 8004a96:	613b      	str	r3, [r7, #16]
                break;
 8004a98:	e005      	b.n	8004aa6 <eth_chip_init+0x126>
        for (addr = 0; addr <= ETH_CHIP_MAX_DEV_ADDR; addr ++)
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	617b      	str	r3, [r7, #20]
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	2b1f      	cmp	r3, #31
 8004aa4:	d9dd      	bls.n	8004a62 <eth_chip_init+0xe2>
            }
        }

        /* �ж����PHY��ַ�Ƿ����32��2^5��*/
        if (pobj->devaddr > ETH_CHIP_MAX_DEV_ADDR)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2b1f      	cmp	r3, #31
 8004aac:	d902      	bls.n	8004ab4 <eth_chip_init+0x134>
        {
            status = ETH_CHIP_STATUS_ADDRESS_ERROR;
 8004aae:	f06f 0302 	mvn.w	r3, #2
 8004ab2:	613b      	str	r3, [r7, #16]
        }

        /* ���PHY��ַ��Ч */
        if (status == ETH_CHIP_STATUS_OK)
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d145      	bne.n	8004b46 <eth_chip_init+0x1c6>
        {
            /* ����������λ  */
            if (pobj->io.writereg(pobj->devaddr, ETH_CHIP_BCR, ETH_CHIP_BCR_SOFT_RESET) >= 0)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	691b      	ldr	r3, [r3, #16]
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	6810      	ldr	r0, [r2, #0]
 8004ac2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8004ac6:	2100      	movs	r1, #0
 8004ac8:	4798      	blx	r3
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	db37      	blt.n	8004b40 <eth_chip_init+0x1c0>
            {
                /* ��ȡ��������״̬ */
                if (pobj->io.readreg(pobj->devaddr, ETH_CHIP_BCR, &regvalue) >= 0)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	695b      	ldr	r3, [r3, #20]
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	6810      	ldr	r0, [r2, #0]
 8004ad8:	f107 0208 	add.w	r2, r7, #8
 8004adc:	2100      	movs	r1, #0
 8004ade:	4798      	blx	r3
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	db28      	blt.n	8004b38 <eth_chip_init+0x1b8>
                {
                    tickstart = pobj->io.gettick();
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	699b      	ldr	r3, [r3, #24]
 8004aea:	4798      	blx	r3
 8004aec:	4603      	mov	r3, r0
 8004aee:	60fb      	str	r3, [r7, #12]

                    /* �ȴ�������λ��ɻ�ʱ  */
                    while (regvalue & ETH_CHIP_BCR_SOFT_RESET)
 8004af0:	e01c      	b.n	8004b2c <eth_chip_init+0x1ac>
                    {
                        if ((pobj->io.gettick() - tickstart) <= ETH_CHIP_SW_RESET_TO)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	699b      	ldr	r3, [r3, #24]
 8004af6:	4798      	blx	r3
 8004af8:	4603      	mov	r3, r0
 8004afa:	461a      	mov	r2, r3
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	1ad3      	subs	r3, r2, r3
 8004b00:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8004b04:	d80e      	bhi.n	8004b24 <eth_chip_init+0x1a4>
                        {
                            if (pobj->io.readreg(pobj->devaddr, ETH_CHIP_BCR, &regvalue) < 0)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	695b      	ldr	r3, [r3, #20]
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	6810      	ldr	r0, [r2, #0]
 8004b0e:	f107 0208 	add.w	r2, r7, #8
 8004b12:	2100      	movs	r1, #0
 8004b14:	4798      	blx	r3
 8004b16:	4603      	mov	r3, r0
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	da07      	bge.n	8004b2c <eth_chip_init+0x1ac>
                            {
                                status = ETH_CHIP_STATUS_READ_ERROR;
 8004b1c:	f06f 0304 	mvn.w	r3, #4
 8004b20:	613b      	str	r3, [r7, #16]
                                break;
 8004b22:	e010      	b.n	8004b46 <eth_chip_init+0x1c6>
                            }
                        }
                        else
                        {
                            status = ETH_CHIP_STATUS_RESET_TIMEOUT;
 8004b24:	f06f 0301 	mvn.w	r3, #1
 8004b28:	613b      	str	r3, [r7, #16]
                            break;
 8004b2a:	e00c      	b.n	8004b46 <eth_chip_init+0x1c6>
                    while (regvalue & ETH_CHIP_BCR_SOFT_RESET)
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d1dd      	bne.n	8004af2 <eth_chip_init+0x172>
 8004b36:	e006      	b.n	8004b46 <eth_chip_init+0x1c6>
                        }
                    }
                }
                else
                {
                    status = ETH_CHIP_STATUS_READ_ERROR;
 8004b38:	f06f 0304 	mvn.w	r3, #4
 8004b3c:	613b      	str	r3, [r7, #16]
 8004b3e:	e002      	b.n	8004b46 <eth_chip_init+0x1c6>
                }
            }
            else
            {
                status = ETH_CHIP_STATUS_WRITE_ERROR;
 8004b40:	f06f 0303 	mvn.w	r3, #3
 8004b44:	613b      	str	r3, [r7, #16]
            }
        }
    }

    /* ���������ʼ����ɣ����� */
    if (status == ETH_CHIP_STATUS_OK)
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d112      	bne.n	8004b72 <eth_chip_init+0x1f2>
    {
        tickstart =  pobj->io.gettick();
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	699b      	ldr	r3, [r3, #24]
 8004b50:	4798      	blx	r3
 8004b52:	4603      	mov	r3, r0
 8004b54:	60fb      	str	r3, [r7, #12]

        /* �ȴ�2s���г�ʼ�� */
        while ((pobj->io.gettick() - tickstart) <= ETH_CHIP_INIT_TO)
 8004b56:	bf00      	nop
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	699b      	ldr	r3, [r3, #24]
 8004b5c:	4798      	blx	r3
 8004b5e:	4603      	mov	r3, r0
 8004b60:	461a      	mov	r2, r3
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8004b6a:	d9f5      	bls.n	8004b58 <eth_chip_init+0x1d8>
        {
        }
        pobj->is_initialized = 1;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	605a      	str	r2, [r3, #4]
    }

    return status;
 8004b72:	693b      	ldr	r3, [r7, #16]
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3718      	adds	r7, #24
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	200009bc 	.word	0x200009bc
 8004b80:	200009be 	.word	0x200009be
 8004b84:	200009c0 	.word	0x200009c0
 8004b88:	200009b8 	.word	0x200009b8

08004b8c <eth_chip_disable_power_down_mode>:
  * @retval      ETH_CHIP_STATUS_OK���رճɹ�
                 ETH_CHIP_STATUS_READ_ERROR�����ܶ�ȡ�Ĵ���
                 ETH_CHIP_STATUS_WRITE_ERROR������д�Ĵ���
  */
int32_t eth_chip_disable_power_down_mode(eth_chip_object_t *pobj)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
    uint32_t readval = 0;
 8004b94:	2300      	movs	r3, #0
 8004b96:	60bb      	str	r3, [r7, #8]
    int32_t status = ETH_CHIP_STATUS_OK;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	60fb      	str	r3, [r7, #12]

    if (pobj->io.readreg(pobj->devaddr, ETH_CHIP_BCR, &readval) >= 0)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	695b      	ldr	r3, [r3, #20]
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	6810      	ldr	r0, [r2, #0]
 8004ba4:	f107 0208 	add.w	r2, r7, #8
 8004ba8:	2100      	movs	r1, #0
 8004baa:	4798      	blx	r3
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	db11      	blt.n	8004bd6 <eth_chip_disable_power_down_mode+0x4a>
    {
        readval &= ~ETH_CHIP_BCR_POWER_DOWN;
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004bb8:	60bb      	str	r3, [r7, #8]

        /* ����µ�ģʽ */
        if (pobj->io.writereg(pobj->devaddr, ETH_CHIP_BCR, readval) < 0)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	691b      	ldr	r3, [r3, #16]
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	6810      	ldr	r0, [r2, #0]
 8004bc2:	68ba      	ldr	r2, [r7, #8]
 8004bc4:	2100      	movs	r1, #0
 8004bc6:	4798      	blx	r3
 8004bc8:	4603      	mov	r3, r0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	da06      	bge.n	8004bdc <eth_chip_disable_power_down_mode+0x50>
        {
            status =  ETH_CHIP_STATUS_WRITE_ERROR;
 8004bce:	f06f 0303 	mvn.w	r3, #3
 8004bd2:	60fb      	str	r3, [r7, #12]
 8004bd4:	e002      	b.n	8004bdc <eth_chip_disable_power_down_mode+0x50>
        }
    }
    else
    {
        status = ETH_CHIP_STATUS_READ_ERROR;
 8004bd6:	f06f 0304 	mvn.w	r3, #4
 8004bda:	60fb      	str	r3, [r7, #12]
    }

    return status;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3710      	adds	r7, #16
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}

08004be6 <eth_chip_start_auto_nego>:
  * @retval      ETH_CHIP_STATUS_OK���رճɹ�
                 ETH_CHIP_STATUS_READ_ERROR�����ܶ�ȡ�Ĵ���
                 ETH_CHIP_STATUS_WRITE_ERROR������д�Ĵ���
  */
int32_t eth_chip_start_auto_nego(eth_chip_object_t *pobj)
{
 8004be6:	b580      	push	{r7, lr}
 8004be8:	b084      	sub	sp, #16
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
    uint32_t readval = 0;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	60bb      	str	r3, [r7, #8]
    int32_t status = ETH_CHIP_STATUS_OK;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	60fb      	str	r3, [r7, #12]

    if (pobj->io.readreg(pobj->devaddr, ETH_CHIP_BCR, &readval) >= 0)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	695b      	ldr	r3, [r3, #20]
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	6810      	ldr	r0, [r2, #0]
 8004bfe:	f107 0208 	add.w	r2, r7, #8
 8004c02:	2100      	movs	r1, #0
 8004c04:	4798      	blx	r3
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	db11      	blt.n	8004c30 <eth_chip_start_auto_nego+0x4a>
    {
        readval |= ETH_CHIP_BCR_AUTONEGO_EN;
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004c12:	60bb      	str	r3, [r7, #8]

        /* �����Զ�Э�� */
        if (pobj->io.writereg(pobj->devaddr, ETH_CHIP_BCR, readval) < 0)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	691b      	ldr	r3, [r3, #16]
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	6810      	ldr	r0, [r2, #0]
 8004c1c:	68ba      	ldr	r2, [r7, #8]
 8004c1e:	2100      	movs	r1, #0
 8004c20:	4798      	blx	r3
 8004c22:	4603      	mov	r3, r0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	da06      	bge.n	8004c36 <eth_chip_start_auto_nego+0x50>
        {
            status =  ETH_CHIP_STATUS_WRITE_ERROR;
 8004c28:	f06f 0303 	mvn.w	r3, #3
 8004c2c:	60fb      	str	r3, [r7, #12]
 8004c2e:	e002      	b.n	8004c36 <eth_chip_start_auto_nego+0x50>
        }
    }
    else
    {
        status = ETH_CHIP_STATUS_READ_ERROR;
 8004c30:	f06f 0304 	mvn.w	r3, #4
 8004c34:	60fb      	str	r3, [r7, #12]
    }

    return status;
 8004c36:	68fb      	ldr	r3, [r7, #12]
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3710      	adds	r7, #16
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <eth_chip_get_link_state>:
                 ETH_CHIP_STATUS_10MBITS_FULLDUPLEX��10M��ȫ˫��
                 ETH_CHIP_STATUS_10MBITS_HALFDUPLEX ��10M����˫��
                 ETH_CHIP_STATUS_READ_ERROR�����ܶ�ȡ�Ĵ���
  */
int32_t eth_chip_get_link_state(eth_chip_object_t *pobj)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b084      	sub	sp, #16
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
    uint32_t readval = 0;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	60fb      	str	r3, [r7, #12]

    /* ������⹦�ܼĴ�������ֵ */
    if (pobj->io.readreg(pobj->devaddr, ETH_CHIP_PHYSCSR, &readval) < 0)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	695b      	ldr	r3, [r3, #20]
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	6810      	ldr	r0, [r2, #0]
 8004c54:	4a1a      	ldr	r2, [pc, #104]	@ (8004cc0 <eth_chip_get_link_state+0x80>)
 8004c56:	8812      	ldrh	r2, [r2, #0]
 8004c58:	4611      	mov	r1, r2
 8004c5a:	f107 020c 	add.w	r2, r7, #12
 8004c5e:	4798      	blx	r3
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	da02      	bge.n	8004c6c <eth_chip_get_link_state+0x2c>
    {
        return ETH_CHIP_STATUS_READ_ERROR;
 8004c66:	f06f 0304 	mvn.w	r3, #4
 8004c6a:	e024      	b.n	8004cb6 <eth_chip_get_link_state+0x76>
    }

    if (((readval & ETH_CHIP_SPEED_STATUS) != ETH_CHIP_SPEED_STATUS) && ((readval & ETH_CHIP_DUPLEX_STATUS) != 0))
 8004c6c:	4b15      	ldr	r3, [pc, #84]	@ (8004cc4 <eth_chip_get_link_state+0x84>)
 8004c6e:	881b      	ldrh	r3, [r3, #0]
 8004c70:	461a      	mov	r2, r3
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	4013      	ands	r3, r2
 8004c76:	4a13      	ldr	r2, [pc, #76]	@ (8004cc4 <eth_chip_get_link_state+0x84>)
 8004c78:	8812      	ldrh	r2, [r2, #0]
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d008      	beq.n	8004c90 <eth_chip_get_link_state+0x50>
 8004c7e:	4b12      	ldr	r3, [pc, #72]	@ (8004cc8 <eth_chip_get_link_state+0x88>)
 8004c80:	881b      	ldrh	r3, [r3, #0]
 8004c82:	461a      	mov	r2, r3
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	4013      	ands	r3, r2
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d001      	beq.n	8004c90 <eth_chip_get_link_state+0x50>
    {
        return ETH_CHIP_STATUS_100MBITS_FULLDUPLEX;
 8004c8c:	2302      	movs	r3, #2
 8004c8e:	e012      	b.n	8004cb6 <eth_chip_get_link_state+0x76>
    }
    else if (((readval & ETH_CHIP_SPEED_STATUS) != ETH_CHIP_SPEED_STATUS))
 8004c90:	4b0c      	ldr	r3, [pc, #48]	@ (8004cc4 <eth_chip_get_link_state+0x84>)
 8004c92:	881b      	ldrh	r3, [r3, #0]
 8004c94:	461a      	mov	r2, r3
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	4013      	ands	r3, r2
 8004c9a:	4a0a      	ldr	r2, [pc, #40]	@ (8004cc4 <eth_chip_get_link_state+0x84>)
 8004c9c:	8812      	ldrh	r2, [r2, #0]
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d001      	beq.n	8004ca6 <eth_chip_get_link_state+0x66>
    {
        return ETH_CHIP_STATUS_100MBITS_HALFDUPLEX;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	e007      	b.n	8004cb6 <eth_chip_get_link_state+0x76>
    }
    else if (((readval & ETH_CHIP_BCR_DUPLEX_MODE) != ETH_CHIP_BCR_DUPLEX_MODE))
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d101      	bne.n	8004cb4 <eth_chip_get_link_state+0x74>
    {
        return ETH_CHIP_STATUS_10MBITS_FULLDUPLEX;
 8004cb0:	2304      	movs	r3, #4
 8004cb2:	e000      	b.n	8004cb6 <eth_chip_get_link_state+0x76>
    }
    else
    {
        return ETH_CHIP_STATUS_10MBITS_HALFDUPLEX;
 8004cb4:	2305      	movs	r3, #5
    }
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3710      	adds	r7, #16
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	bf00      	nop
 8004cc0:	200009bc 	.word	0x200009bc
 8004cc4:	200009be 	.word	0x200009be
 8004cc8:	200009c0 	.word	0x200009c0

08004ccc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004cd0:	4b0e      	ldr	r3, [pc, #56]	@ (8004d0c <HAL_Init+0x40>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a0d      	ldr	r2, [pc, #52]	@ (8004d0c <HAL_Init+0x40>)
 8004cd6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004cda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004cdc:	4b0b      	ldr	r3, [pc, #44]	@ (8004d0c <HAL_Init+0x40>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a0a      	ldr	r2, [pc, #40]	@ (8004d0c <HAL_Init+0x40>)
 8004ce2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004ce6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004ce8:	4b08      	ldr	r3, [pc, #32]	@ (8004d0c <HAL_Init+0x40>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a07      	ldr	r2, [pc, #28]	@ (8004d0c <HAL_Init+0x40>)
 8004cee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cf2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004cf4:	2003      	movs	r0, #3
 8004cf6:	f000 f8fc 	bl	8004ef2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004cfa:	200f      	movs	r0, #15
 8004cfc:	f7fe ff08 	bl	8003b10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004d00:	f7fe feda 	bl	8003ab8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004d04:	2300      	movs	r3, #0
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	40023c00 	.word	0x40023c00

08004d10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004d10:	b480      	push	{r7}
 8004d12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004d14:	4b06      	ldr	r3, [pc, #24]	@ (8004d30 <HAL_IncTick+0x20>)
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	461a      	mov	r2, r3
 8004d1a:	4b06      	ldr	r3, [pc, #24]	@ (8004d34 <HAL_IncTick+0x24>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4413      	add	r3, r2
 8004d20:	4a04      	ldr	r2, [pc, #16]	@ (8004d34 <HAL_IncTick+0x24>)
 8004d22:	6013      	str	r3, [r2, #0]
}
 8004d24:	bf00      	nop
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	20000010 	.word	0x20000010
 8004d34:	200009c4 	.word	0x200009c4

08004d38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	af00      	add	r7, sp, #0
  return uwTick;
 8004d3c:	4b03      	ldr	r3, [pc, #12]	@ (8004d4c <HAL_GetTick+0x14>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr
 8004d4a:	bf00      	nop
 8004d4c:	200009c4 	.word	0x200009c4

08004d50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b084      	sub	sp, #16
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004d58:	f7ff ffee 	bl	8004d38 <HAL_GetTick>
 8004d5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d68:	d005      	beq.n	8004d76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004d6a:	4b0a      	ldr	r3, [pc, #40]	@ (8004d94 <HAL_Delay+0x44>)
 8004d6c:	781b      	ldrb	r3, [r3, #0]
 8004d6e:	461a      	mov	r2, r3
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	4413      	add	r3, r2
 8004d74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004d76:	bf00      	nop
 8004d78:	f7ff ffde 	bl	8004d38 <HAL_GetTick>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	68fa      	ldr	r2, [r7, #12]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d8f7      	bhi.n	8004d78 <HAL_Delay+0x28>
  {
  }
}
 8004d88:	bf00      	nop
 8004d8a:	bf00      	nop
 8004d8c:	3710      	adds	r7, #16
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	20000010 	.word	0x20000010

08004d98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b085      	sub	sp, #20
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f003 0307 	and.w	r3, r3, #7
 8004da6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004da8:	4b0c      	ldr	r3, [pc, #48]	@ (8004ddc <__NVIC_SetPriorityGrouping+0x44>)
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004dae:	68ba      	ldr	r2, [r7, #8]
 8004db0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004db4:	4013      	ands	r3, r2
 8004db6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004dc0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004dc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004dc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004dca:	4a04      	ldr	r2, [pc, #16]	@ (8004ddc <__NVIC_SetPriorityGrouping+0x44>)
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	60d3      	str	r3, [r2, #12]
}
 8004dd0:	bf00      	nop
 8004dd2:	3714      	adds	r7, #20
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr
 8004ddc:	e000ed00 	.word	0xe000ed00

08004de0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004de0:	b480      	push	{r7}
 8004de2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004de4:	4b04      	ldr	r3, [pc, #16]	@ (8004df8 <__NVIC_GetPriorityGrouping+0x18>)
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	0a1b      	lsrs	r3, r3, #8
 8004dea:	f003 0307 	and.w	r3, r3, #7
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr
 8004df8:	e000ed00 	.word	0xe000ed00

08004dfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b083      	sub	sp, #12
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	4603      	mov	r3, r0
 8004e04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	db0b      	blt.n	8004e26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e0e:	79fb      	ldrb	r3, [r7, #7]
 8004e10:	f003 021f 	and.w	r2, r3, #31
 8004e14:	4907      	ldr	r1, [pc, #28]	@ (8004e34 <__NVIC_EnableIRQ+0x38>)
 8004e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e1a:	095b      	lsrs	r3, r3, #5
 8004e1c:	2001      	movs	r0, #1
 8004e1e:	fa00 f202 	lsl.w	r2, r0, r2
 8004e22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004e26:	bf00      	nop
 8004e28:	370c      	adds	r7, #12
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr
 8004e32:	bf00      	nop
 8004e34:	e000e100 	.word	0xe000e100

08004e38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b083      	sub	sp, #12
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	4603      	mov	r3, r0
 8004e40:	6039      	str	r1, [r7, #0]
 8004e42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	db0a      	blt.n	8004e62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	b2da      	uxtb	r2, r3
 8004e50:	490c      	ldr	r1, [pc, #48]	@ (8004e84 <__NVIC_SetPriority+0x4c>)
 8004e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e56:	0112      	lsls	r2, r2, #4
 8004e58:	b2d2      	uxtb	r2, r2
 8004e5a:	440b      	add	r3, r1
 8004e5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004e60:	e00a      	b.n	8004e78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	b2da      	uxtb	r2, r3
 8004e66:	4908      	ldr	r1, [pc, #32]	@ (8004e88 <__NVIC_SetPriority+0x50>)
 8004e68:	79fb      	ldrb	r3, [r7, #7]
 8004e6a:	f003 030f 	and.w	r3, r3, #15
 8004e6e:	3b04      	subs	r3, #4
 8004e70:	0112      	lsls	r2, r2, #4
 8004e72:	b2d2      	uxtb	r2, r2
 8004e74:	440b      	add	r3, r1
 8004e76:	761a      	strb	r2, [r3, #24]
}
 8004e78:	bf00      	nop
 8004e7a:	370c      	adds	r7, #12
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr
 8004e84:	e000e100 	.word	0xe000e100
 8004e88:	e000ed00 	.word	0xe000ed00

08004e8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b089      	sub	sp, #36	@ 0x24
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	60b9      	str	r1, [r7, #8]
 8004e96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f003 0307 	and.w	r3, r3, #7
 8004e9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	f1c3 0307 	rsb	r3, r3, #7
 8004ea6:	2b04      	cmp	r3, #4
 8004ea8:	bf28      	it	cs
 8004eaa:	2304      	movcs	r3, #4
 8004eac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	3304      	adds	r3, #4
 8004eb2:	2b06      	cmp	r3, #6
 8004eb4:	d902      	bls.n	8004ebc <NVIC_EncodePriority+0x30>
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	3b03      	subs	r3, #3
 8004eba:	e000      	b.n	8004ebe <NVIC_EncodePriority+0x32>
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eca:	43da      	mvns	r2, r3
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	401a      	ands	r2, r3
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ed4:	f04f 31ff 	mov.w	r1, #4294967295
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	fa01 f303 	lsl.w	r3, r1, r3
 8004ede:	43d9      	mvns	r1, r3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ee4:	4313      	orrs	r3, r2
         );
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3724      	adds	r7, #36	@ 0x24
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr

08004ef2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ef2:	b580      	push	{r7, lr}
 8004ef4:	b082      	sub	sp, #8
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f7ff ff4c 	bl	8004d98 <__NVIC_SetPriorityGrouping>
}
 8004f00:	bf00      	nop
 8004f02:	3708      	adds	r7, #8
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b086      	sub	sp, #24
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	4603      	mov	r3, r0
 8004f10:	60b9      	str	r1, [r7, #8]
 8004f12:	607a      	str	r2, [r7, #4]
 8004f14:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004f16:	2300      	movs	r3, #0
 8004f18:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004f1a:	f7ff ff61 	bl	8004de0 <__NVIC_GetPriorityGrouping>
 8004f1e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	68b9      	ldr	r1, [r7, #8]
 8004f24:	6978      	ldr	r0, [r7, #20]
 8004f26:	f7ff ffb1 	bl	8004e8c <NVIC_EncodePriority>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f30:	4611      	mov	r1, r2
 8004f32:	4618      	mov	r0, r3
 8004f34:	f7ff ff80 	bl	8004e38 <__NVIC_SetPriority>
}
 8004f38:	bf00      	nop
 8004f3a:	3718      	adds	r7, #24
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b082      	sub	sp, #8
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	4603      	mov	r3, r0
 8004f48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f7ff ff54 	bl	8004dfc <__NVIC_EnableIRQ>
}
 8004f54:	bf00      	nop
 8004f56:	3708      	adds	r7, #8
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}

08004f5c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b086      	sub	sp, #24
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004f64:	2300      	movs	r3, #0
 8004f66:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004f68:	f7ff fee6 	bl	8004d38 <HAL_GetTick>
 8004f6c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d101      	bne.n	8004f78 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e099      	b.n	80050ac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2202      	movs	r2, #2
 8004f7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f022 0201 	bic.w	r2, r2, #1
 8004f96:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f98:	e00f      	b.n	8004fba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004f9a:	f7ff fecd 	bl	8004d38 <HAL_GetTick>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	1ad3      	subs	r3, r2, r3
 8004fa4:	2b05      	cmp	r3, #5
 8004fa6:	d908      	bls.n	8004fba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2220      	movs	r2, #32
 8004fac:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2203      	movs	r2, #3
 8004fb2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	e078      	b.n	80050ac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 0301 	and.w	r3, r3, #1
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d1e8      	bne.n	8004f9a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004fd0:	697a      	ldr	r2, [r7, #20]
 8004fd2:	4b38      	ldr	r3, [pc, #224]	@ (80050b4 <HAL_DMA_Init+0x158>)
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	685a      	ldr	r2, [r3, #4]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004fe6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	691b      	ldr	r3, [r3, #16]
 8004fec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ff2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	699b      	ldr	r3, [r3, #24]
 8004ff8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ffe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6a1b      	ldr	r3, [r3, #32]
 8005004:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005006:	697a      	ldr	r2, [r7, #20]
 8005008:	4313      	orrs	r3, r2
 800500a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005010:	2b04      	cmp	r3, #4
 8005012:	d107      	bne.n	8005024 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800501c:	4313      	orrs	r3, r2
 800501e:	697a      	ldr	r2, [r7, #20]
 8005020:	4313      	orrs	r3, r2
 8005022:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	697a      	ldr	r2, [r7, #20]
 800502a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	695b      	ldr	r3, [r3, #20]
 8005032:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	f023 0307 	bic.w	r3, r3, #7
 800503a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005040:	697a      	ldr	r2, [r7, #20]
 8005042:	4313      	orrs	r3, r2
 8005044:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800504a:	2b04      	cmp	r3, #4
 800504c:	d117      	bne.n	800507e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005052:	697a      	ldr	r2, [r7, #20]
 8005054:	4313      	orrs	r3, r2
 8005056:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800505c:	2b00      	cmp	r3, #0
 800505e:	d00e      	beq.n	800507e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f000 fb01 	bl	8005668 <DMA_CheckFifoParam>
 8005066:	4603      	mov	r3, r0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d008      	beq.n	800507e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2240      	movs	r2, #64	@ 0x40
 8005070:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2201      	movs	r2, #1
 8005076:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800507a:	2301      	movs	r3, #1
 800507c:	e016      	b.n	80050ac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	697a      	ldr	r2, [r7, #20]
 8005084:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f000 fab8 	bl	80055fc <DMA_CalcBaseAndBitshift>
 800508c:	4603      	mov	r3, r0
 800508e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005094:	223f      	movs	r2, #63	@ 0x3f
 8005096:	409a      	lsls	r2, r3
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2201      	movs	r2, #1
 80050a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80050aa:	2300      	movs	r3, #0
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3718      	adds	r7, #24
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	f010803f 	.word	0xf010803f

080050b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b086      	sub	sp, #24
 80050bc:	af00      	add	r7, sp, #0
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	60b9      	str	r1, [r7, #8]
 80050c2:	607a      	str	r2, [r7, #4]
 80050c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050c6:	2300      	movs	r3, #0
 80050c8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050ce:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d101      	bne.n	80050de <HAL_DMA_Start_IT+0x26>
 80050da:	2302      	movs	r3, #2
 80050dc:	e040      	b.n	8005160 <HAL_DMA_Start_IT+0xa8>
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2201      	movs	r2, #1
 80050e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d12f      	bne.n	8005152 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2202      	movs	r2, #2
 80050f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2200      	movs	r2, #0
 80050fe:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	68b9      	ldr	r1, [r7, #8]
 8005106:	68f8      	ldr	r0, [r7, #12]
 8005108:	f000 fa4a 	bl	80055a0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005110:	223f      	movs	r2, #63	@ 0x3f
 8005112:	409a      	lsls	r2, r3
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f042 0216 	orr.w	r2, r2, #22
 8005126:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800512c:	2b00      	cmp	r3, #0
 800512e:	d007      	beq.n	8005140 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f042 0208 	orr.w	r2, r2, #8
 800513e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f042 0201 	orr.w	r2, r2, #1
 800514e:	601a      	str	r2, [r3, #0]
 8005150:	e005      	b.n	800515e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2200      	movs	r2, #0
 8005156:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800515a:	2302      	movs	r3, #2
 800515c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800515e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005160:	4618      	mov	r0, r3
 8005162:	3718      	adds	r7, #24
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}

08005168 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005174:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005176:	f7ff fddf 	bl	8004d38 <HAL_GetTick>
 800517a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005182:	b2db      	uxtb	r3, r3
 8005184:	2b02      	cmp	r3, #2
 8005186:	d008      	beq.n	800519a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2280      	movs	r2, #128	@ 0x80
 800518c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	e052      	b.n	8005240 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f022 0216 	bic.w	r2, r2, #22
 80051a8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	695a      	ldr	r2, [r3, #20]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80051b8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d103      	bne.n	80051ca <HAL_DMA_Abort+0x62>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d007      	beq.n	80051da <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f022 0208 	bic.w	r2, r2, #8
 80051d8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f022 0201 	bic.w	r2, r2, #1
 80051e8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80051ea:	e013      	b.n	8005214 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80051ec:	f7ff fda4 	bl	8004d38 <HAL_GetTick>
 80051f0:	4602      	mov	r2, r0
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	2b05      	cmp	r3, #5
 80051f8:	d90c      	bls.n	8005214 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2220      	movs	r2, #32
 80051fe:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2203      	movs	r2, #3
 8005204:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8005210:	2303      	movs	r3, #3
 8005212:	e015      	b.n	8005240 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 0301 	and.w	r3, r3, #1
 800521e:	2b00      	cmp	r3, #0
 8005220:	d1e4      	bne.n	80051ec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005226:	223f      	movs	r2, #63	@ 0x3f
 8005228:	409a      	lsls	r2, r3
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2201      	movs	r2, #1
 8005232:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800523e:	2300      	movs	r3, #0
}
 8005240:	4618      	mov	r0, r3
 8005242:	3710      	adds	r7, #16
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}

08005248 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005248:	b480      	push	{r7}
 800524a:	b083      	sub	sp, #12
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005256:	b2db      	uxtb	r3, r3
 8005258:	2b02      	cmp	r3, #2
 800525a:	d004      	beq.n	8005266 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2280      	movs	r2, #128	@ 0x80
 8005260:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e00c      	b.n	8005280 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2205      	movs	r2, #5
 800526a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f022 0201 	bic.w	r2, r2, #1
 800527c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800527e:	2300      	movs	r3, #0
}
 8005280:	4618      	mov	r0, r3
 8005282:	370c      	adds	r7, #12
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr

0800528c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b086      	sub	sp, #24
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005294:	2300      	movs	r3, #0
 8005296:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005298:	4b8e      	ldr	r3, [pc, #568]	@ (80054d4 <HAL_DMA_IRQHandler+0x248>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a8e      	ldr	r2, [pc, #568]	@ (80054d8 <HAL_DMA_IRQHandler+0x24c>)
 800529e:	fba2 2303 	umull	r2, r3, r2, r3
 80052a2:	0a9b      	lsrs	r3, r3, #10
 80052a4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052aa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052b6:	2208      	movs	r2, #8
 80052b8:	409a      	lsls	r2, r3
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	4013      	ands	r3, r2
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d01a      	beq.n	80052f8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0304 	and.w	r3, r3, #4
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d013      	beq.n	80052f8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f022 0204 	bic.w	r2, r2, #4
 80052de:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052e4:	2208      	movs	r2, #8
 80052e6:	409a      	lsls	r2, r3
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052f0:	f043 0201 	orr.w	r2, r3, #1
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052fc:	2201      	movs	r2, #1
 80052fe:	409a      	lsls	r2, r3
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	4013      	ands	r3, r2
 8005304:	2b00      	cmp	r3, #0
 8005306:	d012      	beq.n	800532e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	695b      	ldr	r3, [r3, #20]
 800530e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005312:	2b00      	cmp	r3, #0
 8005314:	d00b      	beq.n	800532e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800531a:	2201      	movs	r2, #1
 800531c:	409a      	lsls	r2, r3
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005326:	f043 0202 	orr.w	r2, r3, #2
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005332:	2204      	movs	r2, #4
 8005334:	409a      	lsls	r2, r3
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	4013      	ands	r3, r2
 800533a:	2b00      	cmp	r3, #0
 800533c:	d012      	beq.n	8005364 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 0302 	and.w	r3, r3, #2
 8005348:	2b00      	cmp	r3, #0
 800534a:	d00b      	beq.n	8005364 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005350:	2204      	movs	r2, #4
 8005352:	409a      	lsls	r2, r3
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800535c:	f043 0204 	orr.w	r2, r3, #4
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005368:	2210      	movs	r2, #16
 800536a:	409a      	lsls	r2, r3
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	4013      	ands	r3, r2
 8005370:	2b00      	cmp	r3, #0
 8005372:	d043      	beq.n	80053fc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 0308 	and.w	r3, r3, #8
 800537e:	2b00      	cmp	r3, #0
 8005380:	d03c      	beq.n	80053fc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005386:	2210      	movs	r2, #16
 8005388:	409a      	lsls	r2, r3
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005398:	2b00      	cmp	r3, #0
 800539a:	d018      	beq.n	80053ce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d108      	bne.n	80053bc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d024      	beq.n	80053fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	4798      	blx	r3
 80053ba:	e01f      	b.n	80053fc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d01b      	beq.n	80053fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	4798      	blx	r3
 80053cc:	e016      	b.n	80053fc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d107      	bne.n	80053ec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f022 0208 	bic.w	r2, r2, #8
 80053ea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d003      	beq.n	80053fc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005400:	2220      	movs	r2, #32
 8005402:	409a      	lsls	r2, r3
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	4013      	ands	r3, r2
 8005408:	2b00      	cmp	r3, #0
 800540a:	f000 808f 	beq.w	800552c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 0310 	and.w	r3, r3, #16
 8005418:	2b00      	cmp	r3, #0
 800541a:	f000 8087 	beq.w	800552c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005422:	2220      	movs	r2, #32
 8005424:	409a      	lsls	r2, r3
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005430:	b2db      	uxtb	r3, r3
 8005432:	2b05      	cmp	r3, #5
 8005434:	d136      	bne.n	80054a4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f022 0216 	bic.w	r2, r2, #22
 8005444:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	695a      	ldr	r2, [r3, #20]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005454:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800545a:	2b00      	cmp	r3, #0
 800545c:	d103      	bne.n	8005466 <HAL_DMA_IRQHandler+0x1da>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005462:	2b00      	cmp	r3, #0
 8005464:	d007      	beq.n	8005476 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f022 0208 	bic.w	r2, r2, #8
 8005474:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800547a:	223f      	movs	r2, #63	@ 0x3f
 800547c:	409a      	lsls	r2, r3
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2201      	movs	r2, #1
 8005486:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005496:	2b00      	cmp	r3, #0
 8005498:	d07e      	beq.n	8005598 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	4798      	blx	r3
        }
        return;
 80054a2:	e079      	b.n	8005598 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d01d      	beq.n	80054ee <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d10d      	bne.n	80054dc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d031      	beq.n	800552c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	4798      	blx	r3
 80054d0:	e02c      	b.n	800552c <HAL_DMA_IRQHandler+0x2a0>
 80054d2:	bf00      	nop
 80054d4:	20000008 	.word	0x20000008
 80054d8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d023      	beq.n	800552c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	4798      	blx	r3
 80054ec:	e01e      	b.n	800552c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d10f      	bne.n	800551c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f022 0210 	bic.w	r2, r2, #16
 800550a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005520:	2b00      	cmp	r3, #0
 8005522:	d003      	beq.n	800552c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005530:	2b00      	cmp	r3, #0
 8005532:	d032      	beq.n	800559a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005538:	f003 0301 	and.w	r3, r3, #1
 800553c:	2b00      	cmp	r3, #0
 800553e:	d022      	beq.n	8005586 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2205      	movs	r2, #5
 8005544:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f022 0201 	bic.w	r2, r2, #1
 8005556:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	3301      	adds	r3, #1
 800555c:	60bb      	str	r3, [r7, #8]
 800555e:	697a      	ldr	r2, [r7, #20]
 8005560:	429a      	cmp	r2, r3
 8005562:	d307      	bcc.n	8005574 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 0301 	and.w	r3, r3, #1
 800556e:	2b00      	cmp	r3, #0
 8005570:	d1f2      	bne.n	8005558 <HAL_DMA_IRQHandler+0x2cc>
 8005572:	e000      	b.n	8005576 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005574:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2201      	movs	r2, #1
 800557a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800558a:	2b00      	cmp	r3, #0
 800558c:	d005      	beq.n	800559a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	4798      	blx	r3
 8005596:	e000      	b.n	800559a <HAL_DMA_IRQHandler+0x30e>
        return;
 8005598:	bf00      	nop
    }
  }
}
 800559a:	3718      	adds	r7, #24
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}

080055a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b085      	sub	sp, #20
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	607a      	str	r2, [r7, #4]
 80055ac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80055bc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	683a      	ldr	r2, [r7, #0]
 80055c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	2b40      	cmp	r3, #64	@ 0x40
 80055cc:	d108      	bne.n	80055e0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	68ba      	ldr	r2, [r7, #8]
 80055dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80055de:	e007      	b.n	80055f0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	68ba      	ldr	r2, [r7, #8]
 80055e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	687a      	ldr	r2, [r7, #4]
 80055ee:	60da      	str	r2, [r3, #12]
}
 80055f0:	bf00      	nop
 80055f2:	3714      	adds	r7, #20
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr

080055fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b085      	sub	sp, #20
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	b2db      	uxtb	r3, r3
 800560a:	3b10      	subs	r3, #16
 800560c:	4a14      	ldr	r2, [pc, #80]	@ (8005660 <DMA_CalcBaseAndBitshift+0x64>)
 800560e:	fba2 2303 	umull	r2, r3, r2, r3
 8005612:	091b      	lsrs	r3, r3, #4
 8005614:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005616:	4a13      	ldr	r2, [pc, #76]	@ (8005664 <DMA_CalcBaseAndBitshift+0x68>)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	4413      	add	r3, r2
 800561c:	781b      	ldrb	r3, [r3, #0]
 800561e:	461a      	mov	r2, r3
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2b03      	cmp	r3, #3
 8005628:	d909      	bls.n	800563e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005632:	f023 0303 	bic.w	r3, r3, #3
 8005636:	1d1a      	adds	r2, r3, #4
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	659a      	str	r2, [r3, #88]	@ 0x58
 800563c:	e007      	b.n	800564e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005646:	f023 0303 	bic.w	r3, r3, #3
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005652:	4618      	mov	r0, r3
 8005654:	3714      	adds	r7, #20
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr
 800565e:	bf00      	nop
 8005660:	aaaaaaab 	.word	0xaaaaaaab
 8005664:	08023dcc 	.word	0x08023dcc

08005668 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005668:	b480      	push	{r7}
 800566a:	b085      	sub	sp, #20
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005670:	2300      	movs	r3, #0
 8005672:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005678:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	699b      	ldr	r3, [r3, #24]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d11f      	bne.n	80056c2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	2b03      	cmp	r3, #3
 8005686:	d856      	bhi.n	8005736 <DMA_CheckFifoParam+0xce>
 8005688:	a201      	add	r2, pc, #4	@ (adr r2, 8005690 <DMA_CheckFifoParam+0x28>)
 800568a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800568e:	bf00      	nop
 8005690:	080056a1 	.word	0x080056a1
 8005694:	080056b3 	.word	0x080056b3
 8005698:	080056a1 	.word	0x080056a1
 800569c:	08005737 	.word	0x08005737
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d046      	beq.n	800573a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056b0:	e043      	b.n	800573a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056b6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80056ba:	d140      	bne.n	800573e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056c0:	e03d      	b.n	800573e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	699b      	ldr	r3, [r3, #24]
 80056c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056ca:	d121      	bne.n	8005710 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	2b03      	cmp	r3, #3
 80056d0:	d837      	bhi.n	8005742 <DMA_CheckFifoParam+0xda>
 80056d2:	a201      	add	r2, pc, #4	@ (adr r2, 80056d8 <DMA_CheckFifoParam+0x70>)
 80056d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056d8:	080056e9 	.word	0x080056e9
 80056dc:	080056ef 	.word	0x080056ef
 80056e0:	080056e9 	.word	0x080056e9
 80056e4:	08005701 	.word	0x08005701
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	73fb      	strb	r3, [r7, #15]
      break;
 80056ec:	e030      	b.n	8005750 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056f2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d025      	beq.n	8005746 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056fe:	e022      	b.n	8005746 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005704:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005708:	d11f      	bne.n	800574a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800570e:	e01c      	b.n	800574a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	2b02      	cmp	r3, #2
 8005714:	d903      	bls.n	800571e <DMA_CheckFifoParam+0xb6>
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	2b03      	cmp	r3, #3
 800571a:	d003      	beq.n	8005724 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800571c:	e018      	b.n	8005750 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	73fb      	strb	r3, [r7, #15]
      break;
 8005722:	e015      	b.n	8005750 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005728:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800572c:	2b00      	cmp	r3, #0
 800572e:	d00e      	beq.n	800574e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	73fb      	strb	r3, [r7, #15]
      break;
 8005734:	e00b      	b.n	800574e <DMA_CheckFifoParam+0xe6>
      break;
 8005736:	bf00      	nop
 8005738:	e00a      	b.n	8005750 <DMA_CheckFifoParam+0xe8>
      break;
 800573a:	bf00      	nop
 800573c:	e008      	b.n	8005750 <DMA_CheckFifoParam+0xe8>
      break;
 800573e:	bf00      	nop
 8005740:	e006      	b.n	8005750 <DMA_CheckFifoParam+0xe8>
      break;
 8005742:	bf00      	nop
 8005744:	e004      	b.n	8005750 <DMA_CheckFifoParam+0xe8>
      break;
 8005746:	bf00      	nop
 8005748:	e002      	b.n	8005750 <DMA_CheckFifoParam+0xe8>
      break;   
 800574a:	bf00      	nop
 800574c:	e000      	b.n	8005750 <DMA_CheckFifoParam+0xe8>
      break;
 800574e:	bf00      	nop
    }
  } 
  
  return status; 
 8005750:	7bfb      	ldrb	r3, [r7, #15]
}
 8005752:	4618      	mov	r0, r3
 8005754:	3714      	adds	r7, #20
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr
 800575e:	bf00      	nop

08005760 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b084      	sub	sp, #16
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d101      	bne.n	8005772 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	e08a      	b.n	8005888 <HAL_ETH_Init+0x128>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005778:	2b00      	cmp	r3, #0
 800577a:	d106      	bne.n	800578a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2220      	movs	r2, #32
 8005780:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f7fe f873 	bl	8003870 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800578a:	2300      	movs	r3, #0
 800578c:	60bb      	str	r3, [r7, #8]
 800578e:	4b40      	ldr	r3, [pc, #256]	@ (8005890 <HAL_ETH_Init+0x130>)
 8005790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005792:	4a3f      	ldr	r2, [pc, #252]	@ (8005890 <HAL_ETH_Init+0x130>)
 8005794:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005798:	6453      	str	r3, [r2, #68]	@ 0x44
 800579a:	4b3d      	ldr	r3, [pc, #244]	@ (8005890 <HAL_ETH_Init+0x130>)
 800579c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800579e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80057a2:	60bb      	str	r3, [r7, #8]
 80057a4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80057a6:	4b3b      	ldr	r3, [pc, #236]	@ (8005894 <HAL_ETH_Init+0x134>)
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	4a3a      	ldr	r2, [pc, #232]	@ (8005894 <HAL_ETH_Init+0x134>)
 80057ac:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80057b0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80057b2:	4b38      	ldr	r3, [pc, #224]	@ (8005894 <HAL_ETH_Init+0x134>)
 80057b4:	685a      	ldr	r2, [r3, #4]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	4936      	ldr	r1, [pc, #216]	@ (8005894 <HAL_ETH_Init+0x134>)
 80057bc:	4313      	orrs	r3, r2
 80057be:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80057c0:	4b34      	ldr	r3, [pc, #208]	@ (8005894 <HAL_ETH_Init+0x134>)
 80057c2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	6812      	ldr	r2, [r2, #0]
 80057d2:	f043 0301 	orr.w	r3, r3, #1
 80057d6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80057da:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80057dc:	f7ff faac 	bl	8004d38 <HAL_GetTick>
 80057e0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80057e2:	e011      	b.n	8005808 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80057e4:	f7ff faa8 	bl	8004d38 <HAL_GetTick>
 80057e8:	4602      	mov	r2, r0
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	1ad3      	subs	r3, r2, r3
 80057ee:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80057f2:	d909      	bls.n	8005808 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2204      	movs	r2, #4
 80057f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	22e0      	movs	r2, #224	@ 0xe0
 8005800:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	e03f      	b.n	8005888 <HAL_ETH_Init+0x128>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f003 0301 	and.w	r3, r3, #1
 8005816:	2b00      	cmp	r3, #0
 8005818:	d1e4      	bne.n	80057e4 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f000 ff16 	bl	800664c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f000 ffc1 	bl	80067a8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f001 f817 	bl	800685a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	461a      	mov	r2, r3
 8005832:	2100      	movs	r1, #0
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f000 ff7f 	bl	8006738 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8005848:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	6812      	ldr	r2, [r2, #0]
 8005856:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800585a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800585e:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8005872:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2210      	movs	r2, #16
 8005882:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005886:	2300      	movs	r3, #0
}
 8005888:	4618      	mov	r0, r3
 800588a:	3710      	adds	r7, #16
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}
 8005890:	40023800 	.word	0x40023800
 8005894:	40013800 	.word	0x40013800

08005898 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b084      	sub	sp, #16
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80058a6:	2b10      	cmp	r3, #16
 80058a8:	d161      	bne.n	800596e <HAL_ETH_Start_IT+0xd6>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2220      	movs	r2, #32
 80058ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2201      	movs	r2, #1
 80058b6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2204      	movs	r2, #4
 80058bc:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f000 f9f4 	bl	8005cac <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80058cc:	2001      	movs	r0, #1
 80058ce:	f7ff fa3f 	bl	8004d50 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	68fa      	ldr	r2, [r7, #12]
 80058d8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80058e2:	699b      	ldr	r3, [r3, #24]
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	6812      	ldr	r2, [r2, #0]
 80058e8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80058ec:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80058f0:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80058fa:	699b      	ldr	r3, [r3, #24]
 80058fc:	687a      	ldr	r2, [r7, #4]
 80058fe:	6812      	ldr	r2, [r2, #0]
 8005900:	f043 0302 	orr.w	r3, r3, #2
 8005904:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005908:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f000 fd3b 	bl	8006386 <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f042 0208 	orr.w	r2, r2, #8
 800591e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8005928:	2001      	movs	r0, #1
 800592a:	f7ff fa11 	bl	8004d50 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	68fa      	ldr	r2, [r7, #12]
 8005934:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f042 0204 	orr.w	r2, r2, #4
 8005944:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800594e:	69db      	ldr	r3, [r3, #28]
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	6812      	ldr	r2, [r2, #0]
 8005954:	f443 33d0 	orr.w	r3, r3, #106496	@ 0x1a000
 8005958:	f043 03c1 	orr.w	r3, r3, #193	@ 0xc1
 800595c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005960:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2240      	movs	r2, #64	@ 0x40
 8005966:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 800596a:	2300      	movs	r3, #0
 800596c:	e000      	b.n	8005970 <HAL_ETH_Start_IT+0xd8>
  }
  else
  {
    return HAL_ERROR;
 800596e:	2301      	movs	r3, #1
  }
}
 8005970:	4618      	mov	r0, r3
 8005972:	3710      	adds	r7, #16
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}

08005978 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b086      	sub	sp, #24
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005986:	2b40      	cmp	r3, #64	@ 0x40
 8005988:	d170      	bne.n	8005a6c <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2220      	movs	r2, #32
 800598e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800599a:	69db      	ldr	r3, [r3, #28]
 800599c:	687a      	ldr	r2, [r7, #4]
 800599e:	6812      	ldr	r2, [r2, #0]
 80059a0:	f423 33d0 	bic.w	r3, r3, #106496	@ 0x1a000
 80059a4:	f023 03c1 	bic.w	r3, r3, #193	@ 0xc1
 80059a8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80059ac:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80059b6:	699b      	ldr	r3, [r3, #24]
 80059b8:	687a      	ldr	r2, [r7, #4]
 80059ba:	6812      	ldr	r2, [r2, #0]
 80059bc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80059c0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80059c4:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80059ce:	699b      	ldr	r3, [r3, #24]
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	6812      	ldr	r2, [r2, #0]
 80059d4:	f023 0302 	bic.w	r3, r3, #2
 80059d8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80059dc:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f022 0204 	bic.w	r2, r2, #4
 80059ec:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80059f6:	2001      	movs	r0, #1
 80059f8:	f7ff f9aa 	bl	8004d50 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	693a      	ldr	r2, [r7, #16]
 8005a02:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f000 fcbe 	bl	8006386 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f022 0208 	bic.w	r2, r2, #8
 8005a18:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8005a22:	2001      	movs	r0, #1
 8005a24:	f7ff f994 	bl	8004d50 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	693a      	ldr	r2, [r7, #16]
 8005a2e:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8005a30:	2300      	movs	r3, #0
 8005a32:	617b      	str	r3, [r7, #20]
 8005a34:	e00e      	b.n	8005a54 <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	697a      	ldr	r2, [r7, #20]
 8005a3a:	3212      	adds	r2, #18
 8005a3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a40:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	3301      	adds	r3, #1
 8005a52:	617b      	str	r3, [r7, #20]
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	2b03      	cmp	r3, #3
 8005a58:	d9ed      	bls.n	8005a36 <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2210      	movs	r2, #16
 8005a64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	e000      	b.n	8005a6e <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
  }
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3718      	adds	r7, #24
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}

08005a76 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8005a76:	b580      	push	{r7, lr}
 8005a78:	b082      	sub	sp, #8
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	6078      	str	r0, [r7, #4]
 8005a7e:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d109      	bne.n	8005a9a <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a8c:	f043 0201 	orr.w	r2, r3, #1
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	e045      	b.n	8005b26 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005aa0:	2b40      	cmp	r3, #64	@ 0x40
 8005aa2:	d13f      	bne.n	8005b24 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8005aac:	2201      	movs	r2, #1
 8005aae:	6839      	ldr	r1, [r7, #0]
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f000 ff41 	bl	8006938 <ETH_Prepare_Tx_Descriptors>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d009      	beq.n	8005ad0 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ac2:	f043 0202 	orr.w	r2, r3, #2
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	e02a      	b.n	8005b26 <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 8005ad0:	f3bf 8f4f 	dsb	sy
}
 8005ad4:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ada:	1c5a      	adds	r2, r3, #1
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	629a      	str	r2, [r3, #40]	@ 0x28
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ae4:	2b03      	cmp	r3, #3
 8005ae6:	d904      	bls.n	8005af2 <HAL_ETH_Transmit_IT+0x7c>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aec:	1f1a      	subs	r2, r3, #4
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005afa:	695b      	ldr	r3, [r3, #20]
 8005afc:	f003 0304 	and.w	r3, r3, #4
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d00d      	beq.n	8005b20 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	2304      	movs	r3, #4
 8005b10:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8005b20:	2300      	movs	r3, #0
 8005b22:	e000      	b.n	8005b26 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
  }
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3708      	adds	r7, #8
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}

08005b2e <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8005b2e:	b580      	push	{r7, lr}
 8005b30:	b088      	sub	sp, #32
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
 8005b36:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d109      	bne.n	8005b5a <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b4c:	f043 0201 	orr.w	r2, r3, #1
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e0a4      	b.n	8005ca4 <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b60:	2b40      	cmp	r3, #64	@ 0x40
 8005b62:	d001      	beq.n	8005b68 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	e09d      	b.n	8005ca4 <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b6c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	69fa      	ldr	r2, [r7, #28]
 8005b72:	3212      	adds	r2, #18
 8005b74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b78:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b7e:	f1c3 0304 	rsb	r3, r3, #4
 8005b82:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8005b84:	e066      	b.n	8005c54 <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8005b86:	69bb      	ldr	r3, [r7, #24]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d007      	beq.n	8005ba2 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	69da      	ldr	r2, [r3, #28]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	699a      	ldr	r2, [r3, #24]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8005ba2:	69bb      	ldr	r3, [r7, #24]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d103      	bne.n	8005bb6 <HAL_ETH_ReadData+0x88>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d03c      	beq.n	8005c30 <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8005bb6:	69bb      	ldr	r3, [r7, #24]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d005      	beq.n	8005bce <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8005bce:	69bb      	ldr	r3, [r7, #24]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	0c1b      	lsrs	r3, r3, #16
 8005bd4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8005bd8:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8005bda:	69bb      	ldr	r3, [r7, #24]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d005      	beq.n	8005bf2 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8005be6:	69bb      	ldr	r3, [r7, #24]
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8005bf2:	69bb      	ldr	r3, [r7, #24]
 8005bf4:	689a      	ldr	r2, [r3, #8]
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8005c06:	69bb      	ldr	r3, [r7, #24]
 8005c08:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	f007 fd7c 	bl	800d70c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c18:	1c5a      	adds	r2, r3, #1
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	441a      	add	r2, r3
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8005c2a:	69bb      	ldr	r3, [r7, #24]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8005c30:	69fb      	ldr	r3, [r7, #28]
 8005c32:	3301      	adds	r3, #1
 8005c34:	61fb      	str	r3, [r7, #28]
 8005c36:	69fb      	ldr	r3, [r7, #28]
 8005c38:	2b03      	cmp	r3, #3
 8005c3a:	d902      	bls.n	8005c42 <HAL_ETH_ReadData+0x114>
 8005c3c:	69fb      	ldr	r3, [r7, #28]
 8005c3e:	3b04      	subs	r3, #4
 8005c40:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	69fa      	ldr	r2, [r7, #28]
 8005c46:	3212      	adds	r2, #18
 8005c48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c4c:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	3301      	adds	r3, #1
 8005c52:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8005c54:	69bb      	ldr	r3, [r7, #24]
 8005c56:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	db06      	blt.n	8005c6a <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8005c5c:	697a      	ldr	r2, [r7, #20]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d202      	bcs.n	8005c6a <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 8005c64:	7cfb      	ldrb	r3, [r7, #19]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d08d      	beq.n	8005b86 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	441a      	add	r2, r3
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d002      	beq.n	8005c84 <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f000 f814 	bl	8005cac <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	69fa      	ldr	r2, [r7, #28]
 8005c88:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8005c8a:	7cfb      	ldrb	r3, [r7, #19]
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d108      	bne.n	8005ca2 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	e000      	b.n	8005ca4 <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3720      	adds	r7, #32
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}

08005cac <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b088      	sub	sp, #32
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005cc0:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	69fa      	ldr	r2, [r7, #28]
 8005cc6:	3212      	adds	r2, #18
 8005cc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ccc:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005cd2:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8005cd4:	e044      	b.n	8005d60 <ETH_UpdateDescriptor+0xb4>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	6a1b      	ldr	r3, [r3, #32]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d112      	bne.n	8005d04 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8005cde:	f107 0308 	add.w	r3, r7, #8
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f007 fce2 	bl	800d6ac <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d102      	bne.n	8005cf4 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	74fb      	strb	r3, [r7, #19]
 8005cf2:	e007      	b.n	8005d04 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	461a      	mov	r2, r3
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8005d04:	7cfb      	ldrb	r3, [r7, #19]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d02a      	beq.n	8005d60 <ETH_UpdateDescriptor+0xb4>
    {
      if (heth->RxDescList.ItMode == 0U)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d108      	bne.n	8005d24 <ETH_UpdateDescriptor+0x78>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	695b      	ldr	r3, [r3, #20]
 8005d16:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005d1a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005d1e:	697a      	ldr	r2, [r7, #20]
 8005d20:	6053      	str	r3, [r2, #4]
 8005d22:	e005      	b.n	8005d30 <ETH_UpdateDescriptor+0x84>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	695b      	ldr	r3, [r3, #20]
 8005d28:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8005d3c:	69fb      	ldr	r3, [r7, #28]
 8005d3e:	3301      	adds	r3, #1
 8005d40:	61fb      	str	r3, [r7, #28]
 8005d42:	69fb      	ldr	r3, [r7, #28]
 8005d44:	2b03      	cmp	r3, #3
 8005d46:	d902      	bls.n	8005d4e <ETH_UpdateDescriptor+0xa2>
 8005d48:	69fb      	ldr	r3, [r7, #28]
 8005d4a:	3b04      	subs	r3, #4
 8005d4c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	69fa      	ldr	r2, [r7, #28]
 8005d52:	3212      	adds	r2, #18
 8005d54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d58:	617b      	str	r3, [r7, #20]
      desccount--;
 8005d5a:	69bb      	ldr	r3, [r7, #24]
 8005d5c:	3b01      	subs	r3, #1
 8005d5e:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8005d60:	69bb      	ldr	r3, [r7, #24]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d002      	beq.n	8005d6c <ETH_UpdateDescriptor+0xc0>
 8005d66:	7cfb      	ldrb	r3, [r7, #19]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d1b4      	bne.n	8005cd6 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d70:	69ba      	ldr	r2, [r7, #24]
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d01a      	beq.n	8005dac <ETH_UpdateDescriptor+0x100>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	3303      	adds	r3, #3
 8005d7a:	f003 0303 	and.w	r3, r3, #3
 8005d7e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8005d80:	f3bf 8f5f 	dmb	sy
}
 8005d84:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6919      	ldr	r1, [r3, #16]
 8005d8a:	68fa      	ldr	r2, [r7, #12]
 8005d8c:	4613      	mov	r3, r2
 8005d8e:	009b      	lsls	r3, r3, #2
 8005d90:	4413      	add	r3, r2
 8005d92:	00db      	lsls	r3, r3, #3
 8005d94:	18ca      	adds	r2, r1, r3
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d9e:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	69fa      	ldr	r2, [r7, #28]
 8005da4:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	69ba      	ldr	r2, [r7, #24]
 8005daa:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8005dac:	bf00      	nop
 8005dae:	3720      	adds	r7, #32
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}

08005db4 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b086      	sub	sp, #24
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	3318      	adds	r3, #24
 8005dc0:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dc6:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dcc:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8005dd2:	e047      	b.n	8005e64 <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	3b01      	subs	r3, #1
 8005ddc:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8005dde:	68ba      	ldr	r2, [r7, #8]
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	3304      	adds	r3, #4
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	4413      	add	r3, r2
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d10a      	bne.n	8005e04 <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	3301      	adds	r3, #1
 8005df2:	613b      	str	r3, [r7, #16]
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	2b03      	cmp	r3, #3
 8005df8:	d902      	bls.n	8005e00 <HAL_ETH_ReleaseTxPacket+0x4c>
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	3b04      	subs	r3, #4
 8005dfe:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8005e00:	2300      	movs	r3, #0
 8005e02:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8005e04:	7bbb      	ldrb	r3, [r7, #14]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d02c      	beq.n	8005e64 <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	68d9      	ldr	r1, [r3, #12]
 8005e0e:	693a      	ldr	r2, [r7, #16]
 8005e10:	4613      	mov	r3, r2
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	4413      	add	r3, r2
 8005e16:	00db      	lsls	r3, r3, #3
 8005e18:	440b      	add	r3, r1
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	db1f      	blt.n	8005e60 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8005e20:	68ba      	ldr	r2, [r7, #8]
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	3304      	adds	r3, #4
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	4413      	add	r3, r2
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f007 fcad 	bl	800d78c <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8005e32:	68ba      	ldr	r2, [r7, #8]
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	3304      	adds	r3, #4
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	4413      	add	r3, r2
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	3301      	adds	r3, #1
 8005e44:	613b      	str	r3, [r7, #16]
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	2b03      	cmp	r3, #3
 8005e4a:	d902      	bls.n	8005e52 <HAL_ETH_ReleaseTxPacket+0x9e>
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	3b04      	subs	r3, #4
 8005e50:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	697a      	ldr	r2, [r7, #20]
 8005e56:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	693a      	ldr	r2, [r7, #16]
 8005e5c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005e5e:	e001      	b.n	8005e64 <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8005e60:	2300      	movs	r3, #0
 8005e62:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d002      	beq.n	8005e70 <HAL_ETH_ReleaseTxPacket+0xbc>
 8005e6a:	7bfb      	ldrb	r3, [r7, #15]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d1b1      	bne.n	8005dd4 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8005e70:	2300      	movs	r3, #0
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3718      	adds	r7, #24
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}
	...

08005e7c <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b086      	sub	sp, #24
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e8a:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e94:	695b      	ldr	r3, [r3, #20]
 8005e96:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ea0:	69db      	ldr	r3, [r3, #28]
 8005ea2:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8005ea4:	4b4b      	ldr	r3, [pc, #300]	@ (8005fd4 <HAL_ETH_IRQHandler+0x158>)
 8005ea6:	695b      	ldr	r3, [r3, #20]
 8005ea8:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d00e      	beq.n	8005ed2 <HAL_ETH_IRQHandler+0x56>
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d009      	beq.n	8005ed2 <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	4b43      	ldr	r3, [pc, #268]	@ (8005fd8 <HAL_ETH_IRQHandler+0x15c>)
 8005eca:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f006 fd53 	bl	800c978 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	f003 0301 	and.w	r3, r3, #1
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d00f      	beq.n	8005efc <HAL_ETH_IRQHandler+0x80>
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f003 0301 	and.w	r3, r3, #1
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d00a      	beq.n	8005efc <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005eee:	461a      	mov	r2, r3
 8005ef0:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8005ef4:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f006 fd4e 	bl	800c998 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d042      	beq.n	8005f8c <HAL_ETH_IRQHandler+0x110>
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d03d      	beq.n	8005f8c <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f16:	f043 0208 	orr.w	r2, r3, #8
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d01a      	beq.n	8005f60 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f32:	695a      	ldr	r2, [r3, #20]
 8005f34:	4b29      	ldr	r3, [pc, #164]	@ (8005fdc <HAL_ETH_IRQHandler+0x160>)
 8005f36:	4013      	ands	r3, r2
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f46:	69db      	ldr	r3, [r3, #28]
 8005f48:	687a      	ldr	r2, [r7, #4]
 8005f4a:	6812      	ldr	r2, [r2, #0]
 8005f4c:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8005f50:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005f54:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	22e0      	movs	r2, #224	@ 0xe0
 8005f5a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8005f5e:	e012      	b.n	8005f86 <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f68:	695a      	ldr	r2, [r3, #20]
 8005f6a:	f248 6380 	movw	r3, #34432	@ 0x8680
 8005f6e:	4013      	ands	r3, r2
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f7e:	461a      	mov	r2, r3
 8005f80:	f248 6380 	movw	r3, #34432	@ 0x8680
 8005f84:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f006 fd16 	bl	800c9b8 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	f003 0308 	and.w	r3, r3, #8
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d00e      	beq.n	8005fb4 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f9c:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f000 f81a 	bl	8005fe0 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d006      	beq.n	8005fcc <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8005fbe:	4b05      	ldr	r3, [pc, #20]	@ (8005fd4 <HAL_ETH_IRQHandler+0x158>)
 8005fc0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8005fc4:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f000 f814 	bl	8005ff4 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8005fcc:	bf00      	nop
 8005fce:	3718      	adds	r7, #24
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}
 8005fd4:	40013c00 	.word	0x40013c00
 8005fd8:	00010040 	.word	0x00010040
 8005fdc:	007e2000 	.word	0x007e2000

08005fe0 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b083      	sub	sp, #12
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8005fe8:	bf00      	nop
 8005fea:	370c      	adds	r7, #12
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr

08005ff4 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b083      	sub	sp, #12
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8005ffc:	bf00      	nop
 8005ffe:	370c      	adds	r7, #12
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr

08006008 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b086      	sub	sp, #24
 800600c:	af00      	add	r7, sp, #0
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	60b9      	str	r1, [r7, #8]
 8006012:	607a      	str	r2, [r7, #4]
 8006014:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	691b      	ldr	r3, [r3, #16]
 800601c:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	f003 031c 	and.w	r3, r3, #28
 8006024:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	02db      	lsls	r3, r3, #11
 800602a:	b29b      	uxth	r3, r3
 800602c:	697a      	ldr	r2, [r7, #20]
 800602e:	4313      	orrs	r3, r2
 8006030:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	019b      	lsls	r3, r3, #6
 8006036:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 800603a:	697a      	ldr	r2, [r7, #20]
 800603c:	4313      	orrs	r3, r2
 800603e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	f023 0302 	bic.w	r3, r3, #2
 8006046:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	f043 0301 	orr.w	r3, r3, #1
 800604e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	697a      	ldr	r2, [r7, #20]
 8006056:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8006058:	f7fe fe6e 	bl	8004d38 <HAL_GetTick>
 800605c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800605e:	e00d      	b.n	800607c <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8006060:	f7fe fe6a 	bl	8004d38 <HAL_GetTick>
 8006064:	4602      	mov	r2, r0
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	1ad3      	subs	r3, r2, r3
 800606a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800606e:	d301      	bcc.n	8006074 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	e010      	b.n	8006096 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	691b      	ldr	r3, [r3, #16]
 800607a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	f003 0301 	and.w	r3, r3, #1
 8006082:	2b00      	cmp	r3, #0
 8006084:	d1ec      	bne.n	8006060 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	695b      	ldr	r3, [r3, #20]
 800608c:	b29b      	uxth	r3, r3
 800608e:	461a      	mov	r2, r3
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8006094:	2300      	movs	r3, #0
}
 8006096:	4618      	mov	r0, r3
 8006098:	3718      	adds	r7, #24
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}

0800609e <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 800609e:	b580      	push	{r7, lr}
 80060a0:	b086      	sub	sp, #24
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	60f8      	str	r0, [r7, #12]
 80060a6:	60b9      	str	r1, [r7, #8]
 80060a8:	607a      	str	r2, [r7, #4]
 80060aa:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	691b      	ldr	r3, [r3, #16]
 80060b2:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	f003 031c 	and.w	r3, r3, #28
 80060ba:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	02db      	lsls	r3, r3, #11
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	697a      	ldr	r2, [r7, #20]
 80060c4:	4313      	orrs	r3, r2
 80060c6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	019b      	lsls	r3, r3, #6
 80060cc:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 80060d0:	697a      	ldr	r2, [r7, #20]
 80060d2:	4313      	orrs	r3, r2
 80060d4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	f043 0302 	orr.w	r3, r3, #2
 80060dc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	f043 0301 	orr.w	r3, r3, #1
 80060e4:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	b29a      	uxth	r2, r3
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	697a      	ldr	r2, [r7, #20]
 80060f6:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80060f8:	f7fe fe1e 	bl	8004d38 <HAL_GetTick>
 80060fc:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80060fe:	e00d      	b.n	800611c <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8006100:	f7fe fe1a 	bl	8004d38 <HAL_GetTick>
 8006104:	4602      	mov	r2, r0
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	1ad3      	subs	r3, r2, r3
 800610a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800610e:	d301      	bcc.n	8006114 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	e009      	b.n	8006128 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	691b      	ldr	r3, [r3, #16]
 800611a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	f003 0301 	and.w	r3, r3, #1
 8006122:	2b00      	cmp	r3, #0
 8006124:	d1ec      	bne.n	8006100 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8006126:	2300      	movs	r3, #0
}
 8006128:	4618      	mov	r0, r3
 800612a:	3718      	adds	r7, #24
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}

08006130 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8006130:	b480      	push	{r7}
 8006132:	b083      	sub	sp, #12
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d101      	bne.n	8006144 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	e0e6      	b.n	8006312 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f003 0310 	and.w	r3, r3, #16
 800614e:	2b00      	cmp	r3, #0
 8006150:	bf14      	ite	ne
 8006152:	2301      	movne	r3, #1
 8006154:	2300      	moveq	r3, #0
 8006156:	b2db      	uxtb	r3, r3
 8006158:	461a      	mov	r2, r3
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006178:	2b00      	cmp	r3, #0
 800617a:	bf0c      	ite	eq
 800617c:	2301      	moveq	r3, #1
 800617e:	2300      	movne	r3, #0
 8006180:	b2db      	uxtb	r3, r3
 8006182:	461a      	mov	r2, r3
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8006194:	2b00      	cmp	r3, #0
 8006196:	bf14      	ite	ne
 8006198:	2301      	movne	r3, #1
 800619a:	2300      	moveq	r3, #0
 800619c:	b2db      	uxtb	r3, r3
 800619e:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	bf0c      	ite	eq
 80061b2:	2301      	moveq	r3, #1
 80061b4:	2300      	movne	r3, #0
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	461a      	mov	r2, r3
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	bf14      	ite	ne
 80061cc:	2301      	movne	r3, #1
 80061ce:	2300      	moveq	r3, #0
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	461a      	mov	r2, r3
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80061fe:	2b00      	cmp	r3, #0
 8006200:	bf0c      	ite	eq
 8006202:	2301      	moveq	r3, #1
 8006204:	2300      	movne	r3, #0
 8006206:	b2db      	uxtb	r3, r3
 8006208:	461a      	mov	r2, r3
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006218:	2b00      	cmp	r3, #0
 800621a:	bf0c      	ite	eq
 800621c:	2301      	moveq	r3, #1
 800621e:	2300      	movne	r3, #0
 8006220:	b2db      	uxtb	r3, r3
 8006222:	461a      	mov	r2, r3
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006232:	2b00      	cmp	r3, #0
 8006234:	bf14      	ite	ne
 8006236:	2301      	movne	r3, #1
 8006238:	2300      	moveq	r3, #0
 800623a:	b2db      	uxtb	r3, r3
 800623c:	461a      	mov	r2, r3
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800625a:	2b00      	cmp	r3, #0
 800625c:	bf14      	ite	ne
 800625e:	2301      	movne	r3, #1
 8006260:	2300      	moveq	r3, #0
 8006262:	b2db      	uxtb	r3, r3
 8006264:	461a      	mov	r2, r3
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006274:	2b00      	cmp	r3, #0
 8006276:	bf14      	ite	ne
 8006278:	2301      	movne	r3, #1
 800627a:	2300      	moveq	r3, #0
 800627c:	b2db      	uxtb	r3, r3
 800627e:	461a      	mov	r2, r3
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	699b      	ldr	r3, [r3, #24]
 800628a:	f003 0302 	and.w	r3, r3, #2
 800628e:	2b00      	cmp	r3, #0
 8006290:	bf14      	ite	ne
 8006292:	2301      	movne	r3, #1
 8006294:	2300      	moveq	r3, #0
 8006296:	b2db      	uxtb	r3, r3
 8006298:	461a      	mov	r2, r3
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	699b      	ldr	r3, [r3, #24]
 80062a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	bf0c      	ite	eq
 80062ae:	2301      	moveq	r3, #1
 80062b0:	2300      	movne	r3, #0
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	461a      	mov	r2, r3
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	699b      	ldr	r3, [r3, #24]
 80062c2:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	699b      	ldr	r3, [r3, #24]
 80062d0:	0c1b      	lsrs	r3, r3, #16
 80062d2:	b29a      	uxth	r2, r3
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	699b      	ldr	r3, [r3, #24]
 80062de:	f003 0304 	and.w	r3, r3, #4
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	bf14      	ite	ne
 80062e6:	2301      	movne	r3, #1
 80062e8:	2300      	moveq	r3, #0
 80062ea:	b2db      	uxtb	r3, r3
 80062ec:	461a      	mov	r2, r3
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	699b      	ldr	r3, [r3, #24]
 80062fa:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 80062fe:	2b00      	cmp	r3, #0
 8006300:	bf14      	ite	ne
 8006302:	2301      	movne	r3, #1
 8006304:	2300      	moveq	r3, #0
 8006306:	b2db      	uxtb	r3, r3
 8006308:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8006310:	2300      	movs	r3, #0
}
 8006312:	4618      	mov	r0, r3
 8006314:	370c      	adds	r7, #12
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr

0800631e <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800631e:	b580      	push	{r7, lr}
 8006320:	b082      	sub	sp, #8
 8006322:	af00      	add	r7, sp, #0
 8006324:	6078      	str	r0, [r7, #4]
 8006326:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d101      	bne.n	8006332 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 800632e:	2301      	movs	r3, #1
 8006330:	e00b      	b.n	800634a <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006338:	2b10      	cmp	r3, #16
 800633a:	d105      	bne.n	8006348 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800633c:	6839      	ldr	r1, [r7, #0]
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 f846 	bl	80063d0 <ETH_SetMACConfig>

    return HAL_OK;
 8006344:	2300      	movs	r3, #0
 8006346:	e000      	b.n	800634a <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8006348:	2301      	movs	r3, #1
  }
}
 800634a:	4618      	mov	r0, r3
 800634c:	3708      	adds	r7, #8
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}

08006352 <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 8006352:	b480      	push	{r7}
 8006354:	b083      	sub	sp, #12
 8006356:	af00      	add	r7, sp, #0
 8006358:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 8006360:	4618      	mov	r0, r3
 8006362:	370c      	adds	r7, #12
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr

0800636c <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 800636c:	b480      	push	{r7}
 800636e:	b083      	sub	sp, #12
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 800637a:	4618      	mov	r0, r3
 800637c:	370c      	adds	r7, #12
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr

08006386 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8006386:	b580      	push	{r7, lr}
 8006388:	b084      	sub	sp, #16
 800638a:	af00      	add	r7, sp, #0
 800638c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800638e:	2300      	movs	r3, #0
 8006390:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800639a:	699b      	ldr	r3, [r3, #24]
 800639c:	687a      	ldr	r2, [r7, #4]
 800639e:	6812      	ldr	r2, [r2, #0]
 80063a0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80063a4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80063a8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80063b2:	699b      	ldr	r3, [r3, #24]
 80063b4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80063b6:	2001      	movs	r0, #1
 80063b8:	f7fe fcca 	bl	8004d50 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80063c6:	6193      	str	r3, [r2, #24]
}
 80063c8:	bf00      	nop
 80063ca:	3710      	adds	r7, #16
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b084      	sub	sp, #16
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80063e2:	68fa      	ldr	r2, [r7, #12]
 80063e4:	4b53      	ldr	r3, [pc, #332]	@ (8006534 <ETH_SetMACConfig+0x164>)
 80063e6:	4013      	ands	r3, r2
 80063e8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	7b9b      	ldrb	r3, [r3, #14]
 80063ee:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80063f0:	683a      	ldr	r2, [r7, #0]
 80063f2:	7c12      	ldrb	r2, [r2, #16]
 80063f4:	2a00      	cmp	r2, #0
 80063f6:	d102      	bne.n	80063fe <ETH_SetMACConfig+0x2e>
 80063f8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80063fc:	e000      	b.n	8006400 <ETH_SetMACConfig+0x30>
 80063fe:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8006400:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8006402:	683a      	ldr	r2, [r7, #0]
 8006404:	7c52      	ldrb	r2, [r2, #17]
 8006406:	2a00      	cmp	r2, #0
 8006408:	d102      	bne.n	8006410 <ETH_SetMACConfig+0x40>
 800640a:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800640e:	e000      	b.n	8006412 <ETH_SetMACConfig+0x42>
 8006410:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8006412:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8006418:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	7fdb      	ldrb	r3, [r3, #31]
 800641e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8006420:	431a      	orrs	r2, r3
                        macconf->Speed |
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8006426:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8006428:	683a      	ldr	r2, [r7, #0]
 800642a:	7f92      	ldrb	r2, [r2, #30]
 800642c:	2a00      	cmp	r2, #0
 800642e:	d102      	bne.n	8006436 <ETH_SetMACConfig+0x66>
 8006430:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006434:	e000      	b.n	8006438 <ETH_SetMACConfig+0x68>
 8006436:	2200      	movs	r2, #0
                        macconf->Speed |
 8006438:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	7f1b      	ldrb	r3, [r3, #28]
 800643e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8006440:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8006446:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	791b      	ldrb	r3, [r3, #4]
 800644c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800644e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8006450:	683a      	ldr	r2, [r7, #0]
 8006452:	f892 2020 	ldrb.w	r2, [r2, #32]
 8006456:	2a00      	cmp	r2, #0
 8006458:	d102      	bne.n	8006460 <ETH_SetMACConfig+0x90>
 800645a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800645e:	e000      	b.n	8006462 <ETH_SetMACConfig+0x92>
 8006460:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8006462:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	7bdb      	ldrb	r3, [r3, #15]
 8006468:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800646a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8006470:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006478:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800647a:	4313      	orrs	r3, r2
 800647c:	68fa      	ldr	r2, [r7, #12]
 800647e:	4313      	orrs	r3, r2
 8006480:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	68fa      	ldr	r2, [r7, #12]
 8006488:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8006492:	2001      	movs	r0, #1
 8006494:	f7fe fc5c 	bl	8004d50 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	68fa      	ldr	r2, [r7, #12]
 800649e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	699b      	ldr	r3, [r3, #24]
 80064a6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80064a8:	68fa      	ldr	r2, [r7, #12]
 80064aa:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80064ae:	4013      	ands	r3, r2
 80064b0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064b6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80064b8:	683a      	ldr	r2, [r7, #0]
 80064ba:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80064be:	2a00      	cmp	r2, #0
 80064c0:	d101      	bne.n	80064c6 <ETH_SetMACConfig+0xf6>
 80064c2:	2280      	movs	r2, #128	@ 0x80
 80064c4:	e000      	b.n	80064c8 <ETH_SetMACConfig+0xf8>
 80064c6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80064c8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80064ce:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80064d0:	683a      	ldr	r2, [r7, #0]
 80064d2:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80064d6:	2a01      	cmp	r2, #1
 80064d8:	d101      	bne.n	80064de <ETH_SetMACConfig+0x10e>
 80064da:	2208      	movs	r2, #8
 80064dc:	e000      	b.n	80064e0 <ETH_SetMACConfig+0x110>
 80064de:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80064e0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80064e2:	683a      	ldr	r2, [r7, #0]
 80064e4:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80064e8:	2a01      	cmp	r2, #1
 80064ea:	d101      	bne.n	80064f0 <ETH_SetMACConfig+0x120>
 80064ec:	2204      	movs	r2, #4
 80064ee:	e000      	b.n	80064f2 <ETH_SetMACConfig+0x122>
 80064f0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80064f2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80064f4:	683a      	ldr	r2, [r7, #0]
 80064f6:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80064fa:	2a01      	cmp	r2, #1
 80064fc:	d101      	bne.n	8006502 <ETH_SetMACConfig+0x132>
 80064fe:	2202      	movs	r2, #2
 8006500:	e000      	b.n	8006504 <ETH_SetMACConfig+0x134>
 8006502:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8006504:	4313      	orrs	r3, r2
 8006506:	68fa      	ldr	r2, [r7, #12]
 8006508:	4313      	orrs	r3, r2
 800650a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	68fa      	ldr	r2, [r7, #12]
 8006512:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	699b      	ldr	r3, [r3, #24]
 800651a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800651c:	2001      	movs	r0, #1
 800651e:	f7fe fc17 	bl	8004d50 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	68fa      	ldr	r2, [r7, #12]
 8006528:	619a      	str	r2, [r3, #24]
}
 800652a:	bf00      	nop
 800652c:	3710      	adds	r7, #16
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop
 8006534:	fd20810f 	.word	0xfd20810f

08006538 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b084      	sub	sp, #16
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800654a:	699b      	ldr	r3, [r3, #24]
 800654c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800654e:	68fa      	ldr	r2, [r7, #12]
 8006550:	4b3d      	ldr	r3, [pc, #244]	@ (8006648 <ETH_SetDMAConfig+0x110>)
 8006552:	4013      	ands	r3, r2
 8006554:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	7b1b      	ldrb	r3, [r3, #12]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d102      	bne.n	8006564 <ETH_SetDMAConfig+0x2c>
 800655e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8006562:	e000      	b.n	8006566 <ETH_SetDMAConfig+0x2e>
 8006564:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	7b5b      	ldrb	r3, [r3, #13]
 800656a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800656c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800656e:	683a      	ldr	r2, [r7, #0]
 8006570:	7f52      	ldrb	r2, [r2, #29]
 8006572:	2a00      	cmp	r2, #0
 8006574:	d102      	bne.n	800657c <ETH_SetDMAConfig+0x44>
 8006576:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800657a:	e000      	b.n	800657e <ETH_SetDMAConfig+0x46>
 800657c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800657e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	7b9b      	ldrb	r3, [r3, #14]
 8006584:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8006586:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800658c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	7f1b      	ldrb	r3, [r3, #28]
 8006592:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8006594:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	7f9b      	ldrb	r3, [r3, #30]
 800659a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800659c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80065a2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80065aa:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80065ac:	4313      	orrs	r3, r2
 80065ae:	68fa      	ldr	r2, [r7, #12]
 80065b0:	4313      	orrs	r3, r2
 80065b2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80065bc:	461a      	mov	r2, r3
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80065ca:	699b      	ldr	r3, [r3, #24]
 80065cc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80065ce:	2001      	movs	r0, #1
 80065d0:	f7fe fbbe 	bl	8004d50 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80065dc:	461a      	mov	r2, r3
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	791b      	ldrb	r3, [r3, #4]
 80065e6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80065ec:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80065f2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80065f8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006600:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8006602:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006608:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800660a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8006610:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	6812      	ldr	r2, [r2, #0]
 8006616:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800661a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800661e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800662c:	2001      	movs	r0, #1
 800662e:	f7fe fb8f 	bl	8004d50 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800663a:	461a      	mov	r2, r3
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	6013      	str	r3, [r2, #0]
}
 8006640:	bf00      	nop
 8006642:	3710      	adds	r7, #16
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}
 8006648:	f8de3f23 	.word	0xf8de3f23

0800664c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b0a6      	sub	sp, #152	@ 0x98
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8006654:	2301      	movs	r3, #1
 8006656:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800665a:	2301      	movs	r3, #1
 800665c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8006660:	2300      	movs	r3, #0
 8006662:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8006664:	2300      	movs	r3, #0
 8006666:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800666a:	2301      	movs	r3, #1
 800666c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8006670:	2300      	movs	r3, #0
 8006672:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8006676:	2301      	movs	r3, #1
 8006678:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 800667c:	2301      	movs	r3, #1
 800667e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8006682:	2300      	movs	r3, #0
 8006684:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8006688:	2300      	movs	r3, #0
 800668a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800668e:	2300      	movs	r3, #0
 8006690:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8006692:	2300      	movs	r3, #0
 8006694:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8006698:	2300      	movs	r3, #0
 800669a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800669c:	2300      	movs	r3, #0
 800669e:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80066a2:	2300      	movs	r3, #0
 80066a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80066a8:	2300      	movs	r3, #0
 80066aa:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80066ae:	2300      	movs	r3, #0
 80066b0:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80066b4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80066b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80066ba:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80066be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80066c0:	2300      	movs	r3, #0
 80066c2:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80066c6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80066ca:	4619      	mov	r1, r3
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f7ff fe7f 	bl	80063d0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80066d2:	2301      	movs	r3, #1
 80066d4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80066d6:	2301      	movs	r3, #1
 80066d8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80066da:	2301      	movs	r3, #1
 80066dc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80066e0:	2301      	movs	r3, #1
 80066e2:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80066e4:	2300      	movs	r3, #0
 80066e6:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80066e8:	2300      	movs	r3, #0
 80066ea:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80066ee:	2300      	movs	r3, #0
 80066f0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80066f4:	2300      	movs	r3, #0
 80066f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80066f8:	2301      	movs	r3, #1
 80066fa:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80066fe:	2301      	movs	r3, #1
 8006700:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8006702:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006706:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8006708:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800670c:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800670e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006712:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8006714:	2301      	movs	r3, #1
 8006716:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800671a:	2300      	movs	r3, #0
 800671c:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800671e:	2300      	movs	r3, #0
 8006720:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8006722:	f107 0308 	add.w	r3, r7, #8
 8006726:	4619      	mov	r1, r3
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f7ff ff05 	bl	8006538 <ETH_SetDMAConfig>
}
 800672e:	bf00      	nop
 8006730:	3798      	adds	r7, #152	@ 0x98
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
	...

08006738 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8006738:	b480      	push	{r7}
 800673a:	b087      	sub	sp, #28
 800673c:	af00      	add	r7, sp, #0
 800673e:	60f8      	str	r0, [r7, #12]
 8006740:	60b9      	str	r1, [r7, #8]
 8006742:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	3305      	adds	r3, #5
 8006748:	781b      	ldrb	r3, [r3, #0]
 800674a:	021b      	lsls	r3, r3, #8
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	3204      	adds	r2, #4
 8006750:	7812      	ldrb	r2, [r2, #0]
 8006752:	4313      	orrs	r3, r2
 8006754:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8006756:	68ba      	ldr	r2, [r7, #8]
 8006758:	4b11      	ldr	r3, [pc, #68]	@ (80067a0 <ETH_MACAddressConfig+0x68>)
 800675a:	4413      	add	r3, r2
 800675c:	461a      	mov	r2, r3
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	3303      	adds	r3, #3
 8006766:	781b      	ldrb	r3, [r3, #0]
 8006768:	061a      	lsls	r2, r3, #24
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	3302      	adds	r3, #2
 800676e:	781b      	ldrb	r3, [r3, #0]
 8006770:	041b      	lsls	r3, r3, #16
 8006772:	431a      	orrs	r2, r3
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	3301      	adds	r3, #1
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	021b      	lsls	r3, r3, #8
 800677c:	4313      	orrs	r3, r2
 800677e:	687a      	ldr	r2, [r7, #4]
 8006780:	7812      	ldrb	r2, [r2, #0]
 8006782:	4313      	orrs	r3, r2
 8006784:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8006786:	68ba      	ldr	r2, [r7, #8]
 8006788:	4b06      	ldr	r3, [pc, #24]	@ (80067a4 <ETH_MACAddressConfig+0x6c>)
 800678a:	4413      	add	r3, r2
 800678c:	461a      	mov	r2, r3
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	6013      	str	r3, [r2, #0]
}
 8006792:	bf00      	nop
 8006794:	371c      	adds	r7, #28
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr
 800679e:	bf00      	nop
 80067a0:	40028040 	.word	0x40028040
 80067a4:	40028044 	.word	0x40028044

080067a8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b085      	sub	sp, #20
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80067b0:	2300      	movs	r3, #0
 80067b2:	60fb      	str	r3, [r7, #12]
 80067b4:	e03e      	b.n	8006834 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	68d9      	ldr	r1, [r3, #12]
 80067ba:	68fa      	ldr	r2, [r7, #12]
 80067bc:	4613      	mov	r3, r2
 80067be:	009b      	lsls	r3, r3, #2
 80067c0:	4413      	add	r3, r2
 80067c2:	00db      	lsls	r3, r3, #3
 80067c4:	440b      	add	r3, r1
 80067c6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	2200      	movs	r2, #0
 80067cc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	2200      	movs	r2, #0
 80067d2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	2200      	movs	r2, #0
 80067d8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	2200      	movs	r2, #0
 80067de:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80067e0:	68b9      	ldr	r1, [r7, #8]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	68fa      	ldr	r2, [r7, #12]
 80067e6:	3206      	adds	r2, #6
 80067e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2b02      	cmp	r3, #2
 80067fc:	d80c      	bhi.n	8006818 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	68d9      	ldr	r1, [r3, #12]
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	1c5a      	adds	r2, r3, #1
 8006806:	4613      	mov	r3, r2
 8006808:	009b      	lsls	r3, r3, #2
 800680a:	4413      	add	r3, r2
 800680c:	00db      	lsls	r3, r3, #3
 800680e:	440b      	add	r3, r1
 8006810:	461a      	mov	r2, r3
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	60da      	str	r2, [r3, #12]
 8006816:	e004      	b.n	8006822 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	68db      	ldr	r3, [r3, #12]
 800681c:	461a      	mov	r2, r3
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	3301      	adds	r3, #1
 8006832:	60fb      	str	r3, [r7, #12]
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2b03      	cmp	r3, #3
 8006838:	d9bd      	bls.n	80067b6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2200      	movs	r2, #0
 800683e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	68da      	ldr	r2, [r3, #12]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800684c:	611a      	str	r2, [r3, #16]
}
 800684e:	bf00      	nop
 8006850:	3714      	adds	r7, #20
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr

0800685a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800685a:	b480      	push	{r7}
 800685c:	b085      	sub	sp, #20
 800685e:	af00      	add	r7, sp, #0
 8006860:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006862:	2300      	movs	r3, #0
 8006864:	60fb      	str	r3, [r7, #12]
 8006866:	e048      	b.n	80068fa <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6919      	ldr	r1, [r3, #16]
 800686c:	68fa      	ldr	r2, [r7, #12]
 800686e:	4613      	mov	r3, r2
 8006870:	009b      	lsls	r3, r3, #2
 8006872:	4413      	add	r3, r2
 8006874:	00db      	lsls	r3, r3, #3
 8006876:	440b      	add	r3, r1
 8006878:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	2200      	movs	r2, #0
 800687e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	2200      	movs	r2, #0
 8006884:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	2200      	movs	r2, #0
 800688a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	2200      	movs	r2, #0
 8006890:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	2200      	movs	r2, #0
 8006896:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	2200      	movs	r2, #0
 800689c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80068a4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	695b      	ldr	r3, [r3, #20]
 80068aa:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80068be:	68b9      	ldr	r1, [r7, #8]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	68fa      	ldr	r2, [r7, #12]
 80068c4:	3212      	adds	r2, #18
 80068c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2b02      	cmp	r3, #2
 80068ce:	d80c      	bhi.n	80068ea <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6919      	ldr	r1, [r3, #16]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	1c5a      	adds	r2, r3, #1
 80068d8:	4613      	mov	r3, r2
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	4413      	add	r3, r2
 80068de:	00db      	lsls	r3, r3, #3
 80068e0:	440b      	add	r3, r1
 80068e2:	461a      	mov	r2, r3
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	60da      	str	r2, [r3, #12]
 80068e8:	e004      	b.n	80068f4 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	691b      	ldr	r3, [r3, #16]
 80068ee:	461a      	mov	r2, r3
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	3301      	adds	r3, #1
 80068f8:	60fb      	str	r3, [r7, #12]
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2b03      	cmp	r3, #3
 80068fe:	d9b3      	bls.n	8006868 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2200      	movs	r2, #0
 8006904:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2200      	movs	r2, #0
 8006910:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2200      	movs	r2, #0
 8006916:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	691a      	ldr	r2, [r3, #16]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800692a:	60da      	str	r2, [r3, #12]
}
 800692c:	bf00      	nop
 800692e:	3714      	adds	r7, #20
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr

08006938 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8006938:	b480      	push	{r7}
 800693a:	b091      	sub	sp, #68	@ 0x44
 800693c:	af00      	add	r7, sp, #0
 800693e:	60f8      	str	r0, [r7, #12]
 8006940:	60b9      	str	r1, [r7, #8]
 8006942:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	3318      	adds	r3, #24
 8006948:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800694a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800694c:	691b      	ldr	r3, [r3, #16]
 800694e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8006950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006952:	691b      	ldr	r3, [r3, #16]
 8006954:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8006956:	2300      	movs	r3, #0
 8006958:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800695a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800695c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800695e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006962:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 800696a:	2300      	movs	r3, #0
 800696c:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800696e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006976:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800697a:	d007      	beq.n	800698c <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800697c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800697e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006980:	3304      	adds	r3, #4
 8006982:	009b      	lsls	r3, r3, #2
 8006984:	4413      	add	r3, r2
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d001      	beq.n	8006990 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 800698c:	2302      	movs	r3, #2
 800698e:	e115      	b.n	8006bbc <ETH_Prepare_Tx_Descriptors+0x284>
  }


  descnbr += 1U;
 8006990:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006992:	3301      	adds	r3, #1
 8006994:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8006996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	461a      	mov	r2, r3
 800699c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800699e:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80069a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 80069a8:	f023 031f 	bic.w	r3, r3, #31
 80069ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80069ae:	6852      	ldr	r2, [r2, #4]
 80069b0:	431a      	orrs	r2, r3
 80069b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069b4:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f003 0301 	and.w	r3, r3, #1
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d008      	beq.n	80069d4 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 80069c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	695b      	ldr	r3, [r3, #20]
 80069ce:	431a      	orrs	r2, r3
 80069d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069d2:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f003 0320 	and.w	r3, r3, #32
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d008      	beq.n	80069f2 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80069e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	691b      	ldr	r3, [r3, #16]
 80069ec:	431a      	orrs	r2, r3
 80069ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069f0:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f003 0304 	and.w	r3, r3, #4
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d005      	beq.n	8006a0a <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80069fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a08:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8006a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8006a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a14:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8006a16:	e084      	b.n	8006b22 <ETH_Prepare_Tx_Descriptors+0x1ea>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8006a18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a22:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d006      	beq.n	8006a38 <ETH_Prepare_Tx_Descriptors+0x100>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8006a2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a34:	601a      	str	r2, [r3, #0]
 8006a36:	e005      	b.n	8006a44 <ETH_Prepare_Tx_Descriptors+0x10c>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8006a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8006a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a42:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8006a44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a46:	3301      	adds	r3, #1
 8006a48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a4c:	2b03      	cmp	r3, #3
 8006a4e:	d902      	bls.n	8006a56 <ETH_Prepare_Tx_Descriptors+0x11e>
 8006a50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a52:	3b04      	subs	r3, #4
 8006a54:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8006a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a58:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006a5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a5e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8006a60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006a68:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006a6c:	d007      	beq.n	8006a7e <ETH_Prepare_Tx_Descriptors+0x146>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8006a6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a72:	3304      	adds	r3, #4
 8006a74:	009b      	lsls	r3, r3, #2
 8006a76:	4413      	add	r3, r2
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d029      	beq.n	8006ad2 <ETH_Prepare_Tx_Descriptors+0x19a>
    {
      descidx = firstdescidx;
 8006a7e:	6a3b      	ldr	r3, [r7, #32]
 8006a80:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8006a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a84:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006a86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a8a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006a90:	e019      	b.n	8006ac6 <ETH_Prepare_Tx_Descriptors+0x18e>
  __ASM volatile ("dmb 0xF":::"memory");
 8006a92:	f3bf 8f5f 	dmb	sy
}
 8006a96:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8006a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aa2:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8006aa4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006aaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006aac:	2b03      	cmp	r3, #3
 8006aae:	d902      	bls.n	8006ab6 <ETH_Prepare_Tx_Descriptors+0x17e>
 8006ab0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ab2:	3b04      	subs	r3, #4
 8006ab4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8006ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ab8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006aba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006abe:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8006ac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ac2:	3301      	adds	r3, #1
 8006ac4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006ac6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006ac8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d3e1      	bcc.n	8006a92 <ETH_Prepare_Tx_Descriptors+0x15a>
      }

      return HAL_ETH_ERROR_BUSY;
 8006ace:	2302      	movs	r3, #2
 8006ad0:	e074      	b.n	8006bbc <ETH_Prepare_Tx_Descriptors+0x284>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8006ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006adc:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8006ade:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ae0:	3301      	adds	r3, #1
 8006ae2:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8006ae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ae6:	689b      	ldr	r3, [r3, #8]
 8006ae8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8006aea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	461a      	mov	r2, r3
 8006af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006af2:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8006af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8006afc:	f023 031f 	bic.w	r3, r3, #31
 8006b00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006b02:	6852      	ldr	r2, [r2, #4]
 8006b04:	431a      	orrs	r2, r3
 8006b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b08:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8006b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b0c:	3301      	adds	r3, #1
 8006b0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8006b10:	f3bf 8f5f 	dmb	sy
}
 8006b14:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8006b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b20:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8006b22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	f47f af76 	bne.w	8006a18 <ETH_Prepare_Tx_Descriptors+0xe0>
  }

  if (ItMode != ((uint32_t)RESET))
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d006      	beq.n	8006b40 <ETH_Prepare_Tx_Descriptors+0x208>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8006b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b3c:	601a      	str	r2, [r3, #0]
 8006b3e:	e005      	b.n	8006b4c <ETH_Prepare_Tx_Descriptors+0x214>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8006b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8006b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b4a:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8006b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006b54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b56:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8006b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b5a:	6a3a      	ldr	r2, [r7, #32]
 8006b5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b60:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8006b62:	f3bf 8f5f 	dmb	sy
}
 8006b66:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8006b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b72:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8006b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b76:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006b78:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006b7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b7c:	3304      	adds	r3, #4
 8006b7e:	009b      	lsls	r3, r3, #2
 8006b80:	440b      	add	r3, r1
 8006b82:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8006b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b86:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006b88:	611a      	str	r2, [r3, #16]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006b8a:	f3ef 8310 	mrs	r3, PRIMASK
 8006b8e:	613b      	str	r3, [r7, #16]
  return(result);
 8006b90:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8006b92:	61fb      	str	r3, [r7, #28]
 8006b94:	2301      	movs	r3, #1
 8006b96:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	f383 8810 	msr	PRIMASK, r3
}
 8006b9e:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8006ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ba2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006ba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ba6:	4413      	add	r3, r2
 8006ba8:	1c5a      	adds	r2, r3, #1
 8006baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bac:	629a      	str	r2, [r3, #40]	@ 0x28
 8006bae:	69fb      	ldr	r3, [r7, #28]
 8006bb0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bb2:	69bb      	ldr	r3, [r7, #24]
 8006bb4:	f383 8810 	msr	PRIMASK, r3
}
 8006bb8:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8006bba:	2300      	movs	r3, #0
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3744      	adds	r7, #68	@ 0x44
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr

08006bc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b089      	sub	sp, #36	@ 0x24
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006bde:	2300      	movs	r3, #0
 8006be0:	61fb      	str	r3, [r7, #28]
 8006be2:	e16b      	b.n	8006ebc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006be4:	2201      	movs	r2, #1
 8006be6:	69fb      	ldr	r3, [r7, #28]
 8006be8:	fa02 f303 	lsl.w	r3, r2, r3
 8006bec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	697a      	ldr	r2, [r7, #20]
 8006bf4:	4013      	ands	r3, r2
 8006bf6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006bf8:	693a      	ldr	r2, [r7, #16]
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	f040 815a 	bne.w	8006eb6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	f003 0303 	and.w	r3, r3, #3
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	d005      	beq.n	8006c1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006c16:	2b02      	cmp	r3, #2
 8006c18:	d130      	bne.n	8006c7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	689b      	ldr	r3, [r3, #8]
 8006c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006c20:	69fb      	ldr	r3, [r7, #28]
 8006c22:	005b      	lsls	r3, r3, #1
 8006c24:	2203      	movs	r2, #3
 8006c26:	fa02 f303 	lsl.w	r3, r2, r3
 8006c2a:	43db      	mvns	r3, r3
 8006c2c:	69ba      	ldr	r2, [r7, #24]
 8006c2e:	4013      	ands	r3, r2
 8006c30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	68da      	ldr	r2, [r3, #12]
 8006c36:	69fb      	ldr	r3, [r7, #28]
 8006c38:	005b      	lsls	r3, r3, #1
 8006c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c3e:	69ba      	ldr	r2, [r7, #24]
 8006c40:	4313      	orrs	r3, r2
 8006c42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	69ba      	ldr	r2, [r7, #24]
 8006c48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006c50:	2201      	movs	r2, #1
 8006c52:	69fb      	ldr	r3, [r7, #28]
 8006c54:	fa02 f303 	lsl.w	r3, r2, r3
 8006c58:	43db      	mvns	r3, r3
 8006c5a:	69ba      	ldr	r2, [r7, #24]
 8006c5c:	4013      	ands	r3, r2
 8006c5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	091b      	lsrs	r3, r3, #4
 8006c66:	f003 0201 	and.w	r2, r3, #1
 8006c6a:	69fb      	ldr	r3, [r7, #28]
 8006c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c70:	69ba      	ldr	r2, [r7, #24]
 8006c72:	4313      	orrs	r3, r2
 8006c74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	69ba      	ldr	r2, [r7, #24]
 8006c7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	f003 0303 	and.w	r3, r3, #3
 8006c84:	2b03      	cmp	r3, #3
 8006c86:	d017      	beq.n	8006cb8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	68db      	ldr	r3, [r3, #12]
 8006c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006c8e:	69fb      	ldr	r3, [r7, #28]
 8006c90:	005b      	lsls	r3, r3, #1
 8006c92:	2203      	movs	r2, #3
 8006c94:	fa02 f303 	lsl.w	r3, r2, r3
 8006c98:	43db      	mvns	r3, r3
 8006c9a:	69ba      	ldr	r2, [r7, #24]
 8006c9c:	4013      	ands	r3, r2
 8006c9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	689a      	ldr	r2, [r3, #8]
 8006ca4:	69fb      	ldr	r3, [r7, #28]
 8006ca6:	005b      	lsls	r3, r3, #1
 8006ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8006cac:	69ba      	ldr	r2, [r7, #24]
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	69ba      	ldr	r2, [r7, #24]
 8006cb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	f003 0303 	and.w	r3, r3, #3
 8006cc0:	2b02      	cmp	r3, #2
 8006cc2:	d123      	bne.n	8006d0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006cc4:	69fb      	ldr	r3, [r7, #28]
 8006cc6:	08da      	lsrs	r2, r3, #3
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	3208      	adds	r2, #8
 8006ccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006cd2:	69fb      	ldr	r3, [r7, #28]
 8006cd4:	f003 0307 	and.w	r3, r3, #7
 8006cd8:	009b      	lsls	r3, r3, #2
 8006cda:	220f      	movs	r2, #15
 8006cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8006ce0:	43db      	mvns	r3, r3
 8006ce2:	69ba      	ldr	r2, [r7, #24]
 8006ce4:	4013      	ands	r3, r2
 8006ce6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	691a      	ldr	r2, [r3, #16]
 8006cec:	69fb      	ldr	r3, [r7, #28]
 8006cee:	f003 0307 	and.w	r3, r3, #7
 8006cf2:	009b      	lsls	r3, r3, #2
 8006cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8006cf8:	69ba      	ldr	r2, [r7, #24]
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006cfe:	69fb      	ldr	r3, [r7, #28]
 8006d00:	08da      	lsrs	r2, r3, #3
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	3208      	adds	r2, #8
 8006d06:	69b9      	ldr	r1, [r7, #24]
 8006d08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006d12:	69fb      	ldr	r3, [r7, #28]
 8006d14:	005b      	lsls	r3, r3, #1
 8006d16:	2203      	movs	r2, #3
 8006d18:	fa02 f303 	lsl.w	r3, r2, r3
 8006d1c:	43db      	mvns	r3, r3
 8006d1e:	69ba      	ldr	r2, [r7, #24]
 8006d20:	4013      	ands	r3, r2
 8006d22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	f003 0203 	and.w	r2, r3, #3
 8006d2c:	69fb      	ldr	r3, [r7, #28]
 8006d2e:	005b      	lsls	r3, r3, #1
 8006d30:	fa02 f303 	lsl.w	r3, r2, r3
 8006d34:	69ba      	ldr	r2, [r7, #24]
 8006d36:	4313      	orrs	r3, r2
 8006d38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	69ba      	ldr	r2, [r7, #24]
 8006d3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	f000 80b4 	beq.w	8006eb6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006d4e:	2300      	movs	r3, #0
 8006d50:	60fb      	str	r3, [r7, #12]
 8006d52:	4b60      	ldr	r3, [pc, #384]	@ (8006ed4 <HAL_GPIO_Init+0x30c>)
 8006d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d56:	4a5f      	ldr	r2, [pc, #380]	@ (8006ed4 <HAL_GPIO_Init+0x30c>)
 8006d58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006d5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8006d5e:	4b5d      	ldr	r3, [pc, #372]	@ (8006ed4 <HAL_GPIO_Init+0x30c>)
 8006d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006d66:	60fb      	str	r3, [r7, #12]
 8006d68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006d6a:	4a5b      	ldr	r2, [pc, #364]	@ (8006ed8 <HAL_GPIO_Init+0x310>)
 8006d6c:	69fb      	ldr	r3, [r7, #28]
 8006d6e:	089b      	lsrs	r3, r3, #2
 8006d70:	3302      	adds	r3, #2
 8006d72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006d78:	69fb      	ldr	r3, [r7, #28]
 8006d7a:	f003 0303 	and.w	r3, r3, #3
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	220f      	movs	r2, #15
 8006d82:	fa02 f303 	lsl.w	r3, r2, r3
 8006d86:	43db      	mvns	r3, r3
 8006d88:	69ba      	ldr	r2, [r7, #24]
 8006d8a:	4013      	ands	r3, r2
 8006d8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	4a52      	ldr	r2, [pc, #328]	@ (8006edc <HAL_GPIO_Init+0x314>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d02b      	beq.n	8006dee <HAL_GPIO_Init+0x226>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	4a51      	ldr	r2, [pc, #324]	@ (8006ee0 <HAL_GPIO_Init+0x318>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d025      	beq.n	8006dea <HAL_GPIO_Init+0x222>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	4a50      	ldr	r2, [pc, #320]	@ (8006ee4 <HAL_GPIO_Init+0x31c>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d01f      	beq.n	8006de6 <HAL_GPIO_Init+0x21e>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	4a4f      	ldr	r2, [pc, #316]	@ (8006ee8 <HAL_GPIO_Init+0x320>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d019      	beq.n	8006de2 <HAL_GPIO_Init+0x21a>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	4a4e      	ldr	r2, [pc, #312]	@ (8006eec <HAL_GPIO_Init+0x324>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d013      	beq.n	8006dde <HAL_GPIO_Init+0x216>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	4a4d      	ldr	r2, [pc, #308]	@ (8006ef0 <HAL_GPIO_Init+0x328>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d00d      	beq.n	8006dda <HAL_GPIO_Init+0x212>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	4a4c      	ldr	r2, [pc, #304]	@ (8006ef4 <HAL_GPIO_Init+0x32c>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d007      	beq.n	8006dd6 <HAL_GPIO_Init+0x20e>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	4a4b      	ldr	r2, [pc, #300]	@ (8006ef8 <HAL_GPIO_Init+0x330>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d101      	bne.n	8006dd2 <HAL_GPIO_Init+0x20a>
 8006dce:	2307      	movs	r3, #7
 8006dd0:	e00e      	b.n	8006df0 <HAL_GPIO_Init+0x228>
 8006dd2:	2308      	movs	r3, #8
 8006dd4:	e00c      	b.n	8006df0 <HAL_GPIO_Init+0x228>
 8006dd6:	2306      	movs	r3, #6
 8006dd8:	e00a      	b.n	8006df0 <HAL_GPIO_Init+0x228>
 8006dda:	2305      	movs	r3, #5
 8006ddc:	e008      	b.n	8006df0 <HAL_GPIO_Init+0x228>
 8006dde:	2304      	movs	r3, #4
 8006de0:	e006      	b.n	8006df0 <HAL_GPIO_Init+0x228>
 8006de2:	2303      	movs	r3, #3
 8006de4:	e004      	b.n	8006df0 <HAL_GPIO_Init+0x228>
 8006de6:	2302      	movs	r3, #2
 8006de8:	e002      	b.n	8006df0 <HAL_GPIO_Init+0x228>
 8006dea:	2301      	movs	r3, #1
 8006dec:	e000      	b.n	8006df0 <HAL_GPIO_Init+0x228>
 8006dee:	2300      	movs	r3, #0
 8006df0:	69fa      	ldr	r2, [r7, #28]
 8006df2:	f002 0203 	and.w	r2, r2, #3
 8006df6:	0092      	lsls	r2, r2, #2
 8006df8:	4093      	lsls	r3, r2
 8006dfa:	69ba      	ldr	r2, [r7, #24]
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006e00:	4935      	ldr	r1, [pc, #212]	@ (8006ed8 <HAL_GPIO_Init+0x310>)
 8006e02:	69fb      	ldr	r3, [r7, #28]
 8006e04:	089b      	lsrs	r3, r3, #2
 8006e06:	3302      	adds	r3, #2
 8006e08:	69ba      	ldr	r2, [r7, #24]
 8006e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006e0e:	4b3b      	ldr	r3, [pc, #236]	@ (8006efc <HAL_GPIO_Init+0x334>)
 8006e10:	689b      	ldr	r3, [r3, #8]
 8006e12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	43db      	mvns	r3, r3
 8006e18:	69ba      	ldr	r2, [r7, #24]
 8006e1a:	4013      	ands	r3, r2
 8006e1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d003      	beq.n	8006e32 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006e2a:	69ba      	ldr	r2, [r7, #24]
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006e32:	4a32      	ldr	r2, [pc, #200]	@ (8006efc <HAL_GPIO_Init+0x334>)
 8006e34:	69bb      	ldr	r3, [r7, #24]
 8006e36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006e38:	4b30      	ldr	r3, [pc, #192]	@ (8006efc <HAL_GPIO_Init+0x334>)
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	43db      	mvns	r3, r3
 8006e42:	69ba      	ldr	r2, [r7, #24]
 8006e44:	4013      	ands	r3, r2
 8006e46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d003      	beq.n	8006e5c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006e54:	69ba      	ldr	r2, [r7, #24]
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006e5c:	4a27      	ldr	r2, [pc, #156]	@ (8006efc <HAL_GPIO_Init+0x334>)
 8006e5e:	69bb      	ldr	r3, [r7, #24]
 8006e60:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006e62:	4b26      	ldr	r3, [pc, #152]	@ (8006efc <HAL_GPIO_Init+0x334>)
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	43db      	mvns	r3, r3
 8006e6c:	69ba      	ldr	r2, [r7, #24]
 8006e6e:	4013      	ands	r3, r2
 8006e70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d003      	beq.n	8006e86 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006e7e:	69ba      	ldr	r2, [r7, #24]
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	4313      	orrs	r3, r2
 8006e84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006e86:	4a1d      	ldr	r2, [pc, #116]	@ (8006efc <HAL_GPIO_Init+0x334>)
 8006e88:	69bb      	ldr	r3, [r7, #24]
 8006e8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006e8c:	4b1b      	ldr	r3, [pc, #108]	@ (8006efc <HAL_GPIO_Init+0x334>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	43db      	mvns	r3, r3
 8006e96:	69ba      	ldr	r2, [r7, #24]
 8006e98:	4013      	ands	r3, r2
 8006e9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d003      	beq.n	8006eb0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006ea8:	69ba      	ldr	r2, [r7, #24]
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	4313      	orrs	r3, r2
 8006eae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006eb0:	4a12      	ldr	r2, [pc, #72]	@ (8006efc <HAL_GPIO_Init+0x334>)
 8006eb2:	69bb      	ldr	r3, [r7, #24]
 8006eb4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006eb6:	69fb      	ldr	r3, [r7, #28]
 8006eb8:	3301      	adds	r3, #1
 8006eba:	61fb      	str	r3, [r7, #28]
 8006ebc:	69fb      	ldr	r3, [r7, #28]
 8006ebe:	2b0f      	cmp	r3, #15
 8006ec0:	f67f ae90 	bls.w	8006be4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006ec4:	bf00      	nop
 8006ec6:	bf00      	nop
 8006ec8:	3724      	adds	r7, #36	@ 0x24
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed0:	4770      	bx	lr
 8006ed2:	bf00      	nop
 8006ed4:	40023800 	.word	0x40023800
 8006ed8:	40013800 	.word	0x40013800
 8006edc:	40020000 	.word	0x40020000
 8006ee0:	40020400 	.word	0x40020400
 8006ee4:	40020800 	.word	0x40020800
 8006ee8:	40020c00 	.word	0x40020c00
 8006eec:	40021000 	.word	0x40021000
 8006ef0:	40021400 	.word	0x40021400
 8006ef4:	40021800 	.word	0x40021800
 8006ef8:	40021c00 	.word	0x40021c00
 8006efc:	40013c00 	.word	0x40013c00

08006f00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b083      	sub	sp, #12
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	460b      	mov	r3, r1
 8006f0a:	807b      	strh	r3, [r7, #2]
 8006f0c:	4613      	mov	r3, r2
 8006f0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006f10:	787b      	ldrb	r3, [r7, #1]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d003      	beq.n	8006f1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006f16:	887a      	ldrh	r2, [r7, #2]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006f1c:	e003      	b.n	8006f26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006f1e:	887b      	ldrh	r3, [r7, #2]
 8006f20:	041a      	lsls	r2, r3, #16
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	619a      	str	r2, [r3, #24]
}
 8006f26:	bf00      	nop
 8006f28:	370c      	adds	r7, #12
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr

08006f32 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006f32:	b580      	push	{r7, lr}
 8006f34:	b086      	sub	sp, #24
 8006f36:	af02      	add	r7, sp, #8
 8006f38:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d101      	bne.n	8006f44 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006f40:	2301      	movs	r3, #1
 8006f42:	e101      	b.n	8007148 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8006f50:	b2db      	uxtb	r3, r3
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d106      	bne.n	8006f64 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f016 fcf8 	bl	801d954 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2203      	movs	r2, #3
 8006f68:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006f72:	d102      	bne.n	8006f7a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2200      	movs	r2, #0
 8006f78:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f003 ff19 	bl	800adb6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6818      	ldr	r0, [r3, #0]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	7c1a      	ldrb	r2, [r3, #16]
 8006f8c:	f88d 2000 	strb.w	r2, [sp]
 8006f90:	3304      	adds	r3, #4
 8006f92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006f94:	f003 fdf8 	bl	800ab88 <USB_CoreInit>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d005      	beq.n	8006faa <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2202      	movs	r2, #2
 8006fa2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	e0ce      	b.n	8007148 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	2100      	movs	r1, #0
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f003 ff11 	bl	800add8 <USB_SetCurrentMode>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d005      	beq.n	8006fc8 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2202      	movs	r2, #2
 8006fc0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	e0bf      	b.n	8007148 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006fc8:	2300      	movs	r3, #0
 8006fca:	73fb      	strb	r3, [r7, #15]
 8006fcc:	e04a      	b.n	8007064 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006fce:	7bfa      	ldrb	r2, [r7, #15]
 8006fd0:	6879      	ldr	r1, [r7, #4]
 8006fd2:	4613      	mov	r3, r2
 8006fd4:	00db      	lsls	r3, r3, #3
 8006fd6:	4413      	add	r3, r2
 8006fd8:	009b      	lsls	r3, r3, #2
 8006fda:	440b      	add	r3, r1
 8006fdc:	3315      	adds	r3, #21
 8006fde:	2201      	movs	r2, #1
 8006fe0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006fe2:	7bfa      	ldrb	r2, [r7, #15]
 8006fe4:	6879      	ldr	r1, [r7, #4]
 8006fe6:	4613      	mov	r3, r2
 8006fe8:	00db      	lsls	r3, r3, #3
 8006fea:	4413      	add	r3, r2
 8006fec:	009b      	lsls	r3, r3, #2
 8006fee:	440b      	add	r3, r1
 8006ff0:	3314      	adds	r3, #20
 8006ff2:	7bfa      	ldrb	r2, [r7, #15]
 8006ff4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006ff6:	7bfa      	ldrb	r2, [r7, #15]
 8006ff8:	7bfb      	ldrb	r3, [r7, #15]
 8006ffa:	b298      	uxth	r0, r3
 8006ffc:	6879      	ldr	r1, [r7, #4]
 8006ffe:	4613      	mov	r3, r2
 8007000:	00db      	lsls	r3, r3, #3
 8007002:	4413      	add	r3, r2
 8007004:	009b      	lsls	r3, r3, #2
 8007006:	440b      	add	r3, r1
 8007008:	332e      	adds	r3, #46	@ 0x2e
 800700a:	4602      	mov	r2, r0
 800700c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800700e:	7bfa      	ldrb	r2, [r7, #15]
 8007010:	6879      	ldr	r1, [r7, #4]
 8007012:	4613      	mov	r3, r2
 8007014:	00db      	lsls	r3, r3, #3
 8007016:	4413      	add	r3, r2
 8007018:	009b      	lsls	r3, r3, #2
 800701a:	440b      	add	r3, r1
 800701c:	3318      	adds	r3, #24
 800701e:	2200      	movs	r2, #0
 8007020:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007022:	7bfa      	ldrb	r2, [r7, #15]
 8007024:	6879      	ldr	r1, [r7, #4]
 8007026:	4613      	mov	r3, r2
 8007028:	00db      	lsls	r3, r3, #3
 800702a:	4413      	add	r3, r2
 800702c:	009b      	lsls	r3, r3, #2
 800702e:	440b      	add	r3, r1
 8007030:	331c      	adds	r3, #28
 8007032:	2200      	movs	r2, #0
 8007034:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007036:	7bfa      	ldrb	r2, [r7, #15]
 8007038:	6879      	ldr	r1, [r7, #4]
 800703a:	4613      	mov	r3, r2
 800703c:	00db      	lsls	r3, r3, #3
 800703e:	4413      	add	r3, r2
 8007040:	009b      	lsls	r3, r3, #2
 8007042:	440b      	add	r3, r1
 8007044:	3320      	adds	r3, #32
 8007046:	2200      	movs	r2, #0
 8007048:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800704a:	7bfa      	ldrb	r2, [r7, #15]
 800704c:	6879      	ldr	r1, [r7, #4]
 800704e:	4613      	mov	r3, r2
 8007050:	00db      	lsls	r3, r3, #3
 8007052:	4413      	add	r3, r2
 8007054:	009b      	lsls	r3, r3, #2
 8007056:	440b      	add	r3, r1
 8007058:	3324      	adds	r3, #36	@ 0x24
 800705a:	2200      	movs	r2, #0
 800705c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800705e:	7bfb      	ldrb	r3, [r7, #15]
 8007060:	3301      	adds	r3, #1
 8007062:	73fb      	strb	r3, [r7, #15]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	791b      	ldrb	r3, [r3, #4]
 8007068:	7bfa      	ldrb	r2, [r7, #15]
 800706a:	429a      	cmp	r2, r3
 800706c:	d3af      	bcc.n	8006fce <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800706e:	2300      	movs	r3, #0
 8007070:	73fb      	strb	r3, [r7, #15]
 8007072:	e044      	b.n	80070fe <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007074:	7bfa      	ldrb	r2, [r7, #15]
 8007076:	6879      	ldr	r1, [r7, #4]
 8007078:	4613      	mov	r3, r2
 800707a:	00db      	lsls	r3, r3, #3
 800707c:	4413      	add	r3, r2
 800707e:	009b      	lsls	r3, r3, #2
 8007080:	440b      	add	r3, r1
 8007082:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8007086:	2200      	movs	r2, #0
 8007088:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800708a:	7bfa      	ldrb	r2, [r7, #15]
 800708c:	6879      	ldr	r1, [r7, #4]
 800708e:	4613      	mov	r3, r2
 8007090:	00db      	lsls	r3, r3, #3
 8007092:	4413      	add	r3, r2
 8007094:	009b      	lsls	r3, r3, #2
 8007096:	440b      	add	r3, r1
 8007098:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800709c:	7bfa      	ldrb	r2, [r7, #15]
 800709e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80070a0:	7bfa      	ldrb	r2, [r7, #15]
 80070a2:	6879      	ldr	r1, [r7, #4]
 80070a4:	4613      	mov	r3, r2
 80070a6:	00db      	lsls	r3, r3, #3
 80070a8:	4413      	add	r3, r2
 80070aa:	009b      	lsls	r3, r3, #2
 80070ac:	440b      	add	r3, r1
 80070ae:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80070b2:	2200      	movs	r2, #0
 80070b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80070b6:	7bfa      	ldrb	r2, [r7, #15]
 80070b8:	6879      	ldr	r1, [r7, #4]
 80070ba:	4613      	mov	r3, r2
 80070bc:	00db      	lsls	r3, r3, #3
 80070be:	4413      	add	r3, r2
 80070c0:	009b      	lsls	r3, r3, #2
 80070c2:	440b      	add	r3, r1
 80070c4:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80070c8:	2200      	movs	r2, #0
 80070ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80070cc:	7bfa      	ldrb	r2, [r7, #15]
 80070ce:	6879      	ldr	r1, [r7, #4]
 80070d0:	4613      	mov	r3, r2
 80070d2:	00db      	lsls	r3, r3, #3
 80070d4:	4413      	add	r3, r2
 80070d6:	009b      	lsls	r3, r3, #2
 80070d8:	440b      	add	r3, r1
 80070da:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80070de:	2200      	movs	r2, #0
 80070e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80070e2:	7bfa      	ldrb	r2, [r7, #15]
 80070e4:	6879      	ldr	r1, [r7, #4]
 80070e6:	4613      	mov	r3, r2
 80070e8:	00db      	lsls	r3, r3, #3
 80070ea:	4413      	add	r3, r2
 80070ec:	009b      	lsls	r3, r3, #2
 80070ee:	440b      	add	r3, r1
 80070f0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80070f4:	2200      	movs	r2, #0
 80070f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80070f8:	7bfb      	ldrb	r3, [r7, #15]
 80070fa:	3301      	adds	r3, #1
 80070fc:	73fb      	strb	r3, [r7, #15]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	791b      	ldrb	r3, [r3, #4]
 8007102:	7bfa      	ldrb	r2, [r7, #15]
 8007104:	429a      	cmp	r2, r3
 8007106:	d3b5      	bcc.n	8007074 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6818      	ldr	r0, [r3, #0]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	7c1a      	ldrb	r2, [r3, #16]
 8007110:	f88d 2000 	strb.w	r2, [sp]
 8007114:	3304      	adds	r3, #4
 8007116:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007118:	f003 feaa 	bl	800ae70 <USB_DevInit>
 800711c:	4603      	mov	r3, r0
 800711e:	2b00      	cmp	r3, #0
 8007120:	d005      	beq.n	800712e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2202      	movs	r2, #2
 8007126:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800712a:	2301      	movs	r3, #1
 800712c:	e00c      	b.n	8007148 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2200      	movs	r2, #0
 8007132:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2201      	movs	r2, #1
 8007138:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4618      	mov	r0, r3
 8007142:	f004 fef4 	bl	800bf2e <USB_DevDisconnect>

  return HAL_OK;
 8007146:	2300      	movs	r3, #0
}
 8007148:	4618      	mov	r0, r3
 800714a:	3710      	adds	r7, #16
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}

08007150 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b084      	sub	sp, #16
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007164:	2b01      	cmp	r3, #1
 8007166:	d101      	bne.n	800716c <HAL_PCD_Start+0x1c>
 8007168:	2302      	movs	r3, #2
 800716a:	e022      	b.n	80071b2 <HAL_PCD_Start+0x62>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2201      	movs	r2, #1
 8007170:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	68db      	ldr	r3, [r3, #12]
 8007178:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800717c:	2b00      	cmp	r3, #0
 800717e:	d009      	beq.n	8007194 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8007184:	2b01      	cmp	r3, #1
 8007186:	d105      	bne.n	8007194 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800718c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4618      	mov	r0, r3
 800719a:	f003 fdfb 	bl	800ad94 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4618      	mov	r0, r3
 80071a4:	f004 fea2 	bl	800beec <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80071b0:	2300      	movs	r3, #0
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3710      	adds	r7, #16
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}

080071ba <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80071ba:	b590      	push	{r4, r7, lr}
 80071bc:	b08d      	sub	sp, #52	@ 0x34
 80071be:	af00      	add	r7, sp, #0
 80071c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071c8:	6a3b      	ldr	r3, [r7, #32]
 80071ca:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4618      	mov	r0, r3
 80071d2:	f004 ff60 	bl	800c096 <USB_GetMode>
 80071d6:	4603      	mov	r3, r0
 80071d8:	2b00      	cmp	r3, #0
 80071da:	f040 848c 	bne.w	8007af6 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4618      	mov	r0, r3
 80071e4:	f004 fec4 	bl	800bf70 <USB_ReadInterrupts>
 80071e8:	4603      	mov	r3, r0
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	f000 8482 	beq.w	8007af4 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80071f0:	69fb      	ldr	r3, [r7, #28]
 80071f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071f6:	689b      	ldr	r3, [r3, #8]
 80071f8:	0a1b      	lsrs	r3, r3, #8
 80071fa:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4618      	mov	r0, r3
 800720a:	f004 feb1 	bl	800bf70 <USB_ReadInterrupts>
 800720e:	4603      	mov	r3, r0
 8007210:	f003 0302 	and.w	r3, r3, #2
 8007214:	2b02      	cmp	r3, #2
 8007216:	d107      	bne.n	8007228 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	695a      	ldr	r2, [r3, #20]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f002 0202 	and.w	r2, r2, #2
 8007226:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4618      	mov	r0, r3
 800722e:	f004 fe9f 	bl	800bf70 <USB_ReadInterrupts>
 8007232:	4603      	mov	r3, r0
 8007234:	f003 0310 	and.w	r3, r3, #16
 8007238:	2b10      	cmp	r3, #16
 800723a:	d161      	bne.n	8007300 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	699a      	ldr	r2, [r3, #24]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f022 0210 	bic.w	r2, r2, #16
 800724a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800724c:	6a3b      	ldr	r3, [r7, #32]
 800724e:	6a1b      	ldr	r3, [r3, #32]
 8007250:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8007252:	69bb      	ldr	r3, [r7, #24]
 8007254:	f003 020f 	and.w	r2, r3, #15
 8007258:	4613      	mov	r3, r2
 800725a:	00db      	lsls	r3, r3, #3
 800725c:	4413      	add	r3, r2
 800725e:	009b      	lsls	r3, r3, #2
 8007260:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007264:	687a      	ldr	r2, [r7, #4]
 8007266:	4413      	add	r3, r2
 8007268:	3304      	adds	r3, #4
 800726a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800726c:	69bb      	ldr	r3, [r7, #24]
 800726e:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8007272:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007276:	d124      	bne.n	80072c2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007278:	69ba      	ldr	r2, [r7, #24]
 800727a:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800727e:	4013      	ands	r3, r2
 8007280:	2b00      	cmp	r3, #0
 8007282:	d035      	beq.n	80072f0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8007288:	69bb      	ldr	r3, [r7, #24]
 800728a:	091b      	lsrs	r3, r3, #4
 800728c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800728e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007292:	b29b      	uxth	r3, r3
 8007294:	461a      	mov	r2, r3
 8007296:	6a38      	ldr	r0, [r7, #32]
 8007298:	f004 fcd6 	bl	800bc48 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	68da      	ldr	r2, [r3, #12]
 80072a0:	69bb      	ldr	r3, [r7, #24]
 80072a2:	091b      	lsrs	r3, r3, #4
 80072a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80072a8:	441a      	add	r2, r3
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	695a      	ldr	r2, [r3, #20]
 80072b2:	69bb      	ldr	r3, [r7, #24]
 80072b4:	091b      	lsrs	r3, r3, #4
 80072b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80072ba:	441a      	add	r2, r3
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	615a      	str	r2, [r3, #20]
 80072c0:	e016      	b.n	80072f0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80072c2:	69bb      	ldr	r3, [r7, #24]
 80072c4:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80072c8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80072cc:	d110      	bne.n	80072f0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80072d4:	2208      	movs	r2, #8
 80072d6:	4619      	mov	r1, r3
 80072d8:	6a38      	ldr	r0, [r7, #32]
 80072da:	f004 fcb5 	bl	800bc48 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	695a      	ldr	r2, [r3, #20]
 80072e2:	69bb      	ldr	r3, [r7, #24]
 80072e4:	091b      	lsrs	r3, r3, #4
 80072e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80072ea:	441a      	add	r2, r3
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	699a      	ldr	r2, [r3, #24]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f042 0210 	orr.w	r2, r2, #16
 80072fe:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4618      	mov	r0, r3
 8007306:	f004 fe33 	bl	800bf70 <USB_ReadInterrupts>
 800730a:	4603      	mov	r3, r0
 800730c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007310:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007314:	f040 80a7 	bne.w	8007466 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8007318:	2300      	movs	r3, #0
 800731a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4618      	mov	r0, r3
 8007322:	f004 fe38 	bl	800bf96 <USB_ReadDevAllOutEpInterrupt>
 8007326:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8007328:	e099      	b.n	800745e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800732a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800732c:	f003 0301 	and.w	r3, r3, #1
 8007330:	2b00      	cmp	r3, #0
 8007332:	f000 808e 	beq.w	8007452 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800733c:	b2d2      	uxtb	r2, r2
 800733e:	4611      	mov	r1, r2
 8007340:	4618      	mov	r0, r3
 8007342:	f004 fe5c 	bl	800bffe <USB_ReadDevOutEPInterrupt>
 8007346:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	f003 0301 	and.w	r3, r3, #1
 800734e:	2b00      	cmp	r3, #0
 8007350:	d00c      	beq.n	800736c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007354:	015a      	lsls	r2, r3, #5
 8007356:	69fb      	ldr	r3, [r7, #28]
 8007358:	4413      	add	r3, r2
 800735a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800735e:	461a      	mov	r2, r3
 8007360:	2301      	movs	r3, #1
 8007362:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007364:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 fea4 	bl	80080b4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	f003 0308 	and.w	r3, r3, #8
 8007372:	2b00      	cmp	r3, #0
 8007374:	d00c      	beq.n	8007390 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007378:	015a      	lsls	r2, r3, #5
 800737a:	69fb      	ldr	r3, [r7, #28]
 800737c:	4413      	add	r3, r2
 800737e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007382:	461a      	mov	r2, r3
 8007384:	2308      	movs	r3, #8
 8007386:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8007388:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f000 ff7a 	bl	8008284 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	f003 0310 	and.w	r3, r3, #16
 8007396:	2b00      	cmp	r3, #0
 8007398:	d008      	beq.n	80073ac <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800739a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800739c:	015a      	lsls	r2, r3, #5
 800739e:	69fb      	ldr	r3, [r7, #28]
 80073a0:	4413      	add	r3, r2
 80073a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073a6:	461a      	mov	r2, r3
 80073a8:	2310      	movs	r3, #16
 80073aa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	f003 0302 	and.w	r3, r3, #2
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d030      	beq.n	8007418 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80073b6:	6a3b      	ldr	r3, [r7, #32]
 80073b8:	695b      	ldr	r3, [r3, #20]
 80073ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073be:	2b80      	cmp	r3, #128	@ 0x80
 80073c0:	d109      	bne.n	80073d6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80073c2:	69fb      	ldr	r3, [r7, #28]
 80073c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	69fa      	ldr	r2, [r7, #28]
 80073cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80073d0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80073d4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80073d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073d8:	4613      	mov	r3, r2
 80073da:	00db      	lsls	r3, r3, #3
 80073dc:	4413      	add	r3, r2
 80073de:	009b      	lsls	r3, r3, #2
 80073e0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80073e4:	687a      	ldr	r2, [r7, #4]
 80073e6:	4413      	add	r3, r2
 80073e8:	3304      	adds	r3, #4
 80073ea:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	78db      	ldrb	r3, [r3, #3]
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	d108      	bne.n	8007406 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	2200      	movs	r2, #0
 80073f8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80073fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073fc:	b2db      	uxtb	r3, r3
 80073fe:	4619      	mov	r1, r3
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f016 fbad 	bl	801db60 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8007406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007408:	015a      	lsls	r2, r3, #5
 800740a:	69fb      	ldr	r3, [r7, #28]
 800740c:	4413      	add	r3, r2
 800740e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007412:	461a      	mov	r2, r3
 8007414:	2302      	movs	r3, #2
 8007416:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	f003 0320 	and.w	r3, r3, #32
 800741e:	2b00      	cmp	r3, #0
 8007420:	d008      	beq.n	8007434 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007424:	015a      	lsls	r2, r3, #5
 8007426:	69fb      	ldr	r3, [r7, #28]
 8007428:	4413      	add	r3, r2
 800742a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800742e:	461a      	mov	r2, r3
 8007430:	2320      	movs	r3, #32
 8007432:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800743a:	2b00      	cmp	r3, #0
 800743c:	d009      	beq.n	8007452 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800743e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007440:	015a      	lsls	r2, r3, #5
 8007442:	69fb      	ldr	r3, [r7, #28]
 8007444:	4413      	add	r3, r2
 8007446:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800744a:	461a      	mov	r2, r3
 800744c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007450:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8007452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007454:	3301      	adds	r3, #1
 8007456:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8007458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800745a:	085b      	lsrs	r3, r3, #1
 800745c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800745e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007460:	2b00      	cmp	r3, #0
 8007462:	f47f af62 	bne.w	800732a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4618      	mov	r0, r3
 800746c:	f004 fd80 	bl	800bf70 <USB_ReadInterrupts>
 8007470:	4603      	mov	r3, r0
 8007472:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007476:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800747a:	f040 80db 	bne.w	8007634 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4618      	mov	r0, r3
 8007484:	f004 fda1 	bl	800bfca <USB_ReadDevAllInEpInterrupt>
 8007488:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800748a:	2300      	movs	r3, #0
 800748c:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800748e:	e0cd      	b.n	800762c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007492:	f003 0301 	and.w	r3, r3, #1
 8007496:	2b00      	cmp	r3, #0
 8007498:	f000 80c2 	beq.w	8007620 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074a2:	b2d2      	uxtb	r2, r2
 80074a4:	4611      	mov	r1, r2
 80074a6:	4618      	mov	r0, r3
 80074a8:	f004 fdc7 	bl	800c03a <USB_ReadDevInEPInterrupt>
 80074ac:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	f003 0301 	and.w	r3, r3, #1
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d057      	beq.n	8007568 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80074b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ba:	f003 030f 	and.w	r3, r3, #15
 80074be:	2201      	movs	r2, #1
 80074c0:	fa02 f303 	lsl.w	r3, r2, r3
 80074c4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80074c6:	69fb      	ldr	r3, [r7, #28]
 80074c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	43db      	mvns	r3, r3
 80074d2:	69f9      	ldr	r1, [r7, #28]
 80074d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80074d8:	4013      	ands	r3, r2
 80074da:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80074dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074de:	015a      	lsls	r2, r3, #5
 80074e0:	69fb      	ldr	r3, [r7, #28]
 80074e2:	4413      	add	r3, r2
 80074e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074e8:	461a      	mov	r2, r3
 80074ea:	2301      	movs	r3, #1
 80074ec:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	799b      	ldrb	r3, [r3, #6]
 80074f2:	2b01      	cmp	r3, #1
 80074f4:	d132      	bne.n	800755c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80074f6:	6879      	ldr	r1, [r7, #4]
 80074f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074fa:	4613      	mov	r3, r2
 80074fc:	00db      	lsls	r3, r3, #3
 80074fe:	4413      	add	r3, r2
 8007500:	009b      	lsls	r3, r3, #2
 8007502:	440b      	add	r3, r1
 8007504:	3320      	adds	r3, #32
 8007506:	6819      	ldr	r1, [r3, #0]
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800750c:	4613      	mov	r3, r2
 800750e:	00db      	lsls	r3, r3, #3
 8007510:	4413      	add	r3, r2
 8007512:	009b      	lsls	r3, r3, #2
 8007514:	4403      	add	r3, r0
 8007516:	331c      	adds	r3, #28
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4419      	add	r1, r3
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007520:	4613      	mov	r3, r2
 8007522:	00db      	lsls	r3, r3, #3
 8007524:	4413      	add	r3, r2
 8007526:	009b      	lsls	r3, r3, #2
 8007528:	4403      	add	r3, r0
 800752a:	3320      	adds	r3, #32
 800752c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800752e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007530:	2b00      	cmp	r3, #0
 8007532:	d113      	bne.n	800755c <HAL_PCD_IRQHandler+0x3a2>
 8007534:	6879      	ldr	r1, [r7, #4]
 8007536:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007538:	4613      	mov	r3, r2
 800753a:	00db      	lsls	r3, r3, #3
 800753c:	4413      	add	r3, r2
 800753e:	009b      	lsls	r3, r3, #2
 8007540:	440b      	add	r3, r1
 8007542:	3324      	adds	r3, #36	@ 0x24
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d108      	bne.n	800755c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6818      	ldr	r0, [r3, #0]
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007554:	461a      	mov	r2, r3
 8007556:	2101      	movs	r1, #1
 8007558:	f004 fdce 	bl	800c0f8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800755c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800755e:	b2db      	uxtb	r3, r3
 8007560:	4619      	mov	r1, r3
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f016 fa77 	bl	801da56 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	f003 0308 	and.w	r3, r3, #8
 800756e:	2b00      	cmp	r3, #0
 8007570:	d008      	beq.n	8007584 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007574:	015a      	lsls	r2, r3, #5
 8007576:	69fb      	ldr	r3, [r7, #28]
 8007578:	4413      	add	r3, r2
 800757a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800757e:	461a      	mov	r2, r3
 8007580:	2308      	movs	r3, #8
 8007582:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	f003 0310 	and.w	r3, r3, #16
 800758a:	2b00      	cmp	r3, #0
 800758c:	d008      	beq.n	80075a0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800758e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007590:	015a      	lsls	r2, r3, #5
 8007592:	69fb      	ldr	r3, [r7, #28]
 8007594:	4413      	add	r3, r2
 8007596:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800759a:	461a      	mov	r2, r3
 800759c:	2310      	movs	r3, #16
 800759e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d008      	beq.n	80075bc <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80075aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ac:	015a      	lsls	r2, r3, #5
 80075ae:	69fb      	ldr	r3, [r7, #28]
 80075b0:	4413      	add	r3, r2
 80075b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075b6:	461a      	mov	r2, r3
 80075b8:	2340      	movs	r3, #64	@ 0x40
 80075ba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	f003 0302 	and.w	r3, r3, #2
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d023      	beq.n	800760e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80075c6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80075c8:	6a38      	ldr	r0, [r7, #32]
 80075ca:	f003 fdb5 	bl	800b138 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80075ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075d0:	4613      	mov	r3, r2
 80075d2:	00db      	lsls	r3, r3, #3
 80075d4:	4413      	add	r3, r2
 80075d6:	009b      	lsls	r3, r3, #2
 80075d8:	3310      	adds	r3, #16
 80075da:	687a      	ldr	r2, [r7, #4]
 80075dc:	4413      	add	r3, r2
 80075de:	3304      	adds	r3, #4
 80075e0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	78db      	ldrb	r3, [r3, #3]
 80075e6:	2b01      	cmp	r3, #1
 80075e8:	d108      	bne.n	80075fc <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	2200      	movs	r2, #0
 80075ee:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80075f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075f2:	b2db      	uxtb	r3, r3
 80075f4:	4619      	mov	r1, r3
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f016 fac4 	bl	801db84 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80075fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075fe:	015a      	lsls	r2, r3, #5
 8007600:	69fb      	ldr	r3, [r7, #28]
 8007602:	4413      	add	r3, r2
 8007604:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007608:	461a      	mov	r2, r3
 800760a:	2302      	movs	r3, #2
 800760c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007614:	2b00      	cmp	r3, #0
 8007616:	d003      	beq.n	8007620 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007618:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f000 fcbd 	bl	8007f9a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8007620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007622:	3301      	adds	r3, #1
 8007624:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8007626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007628:	085b      	lsrs	r3, r3, #1
 800762a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800762c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800762e:	2b00      	cmp	r3, #0
 8007630:	f47f af2e 	bne.w	8007490 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4618      	mov	r0, r3
 800763a:	f004 fc99 	bl	800bf70 <USB_ReadInterrupts>
 800763e:	4603      	mov	r3, r0
 8007640:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007644:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007648:	d122      	bne.n	8007690 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800764a:	69fb      	ldr	r3, [r7, #28]
 800764c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007650:	685b      	ldr	r3, [r3, #4]
 8007652:	69fa      	ldr	r2, [r7, #28]
 8007654:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007658:	f023 0301 	bic.w	r3, r3, #1
 800765c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8007664:	2b01      	cmp	r3, #1
 8007666:	d108      	bne.n	800767a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2200      	movs	r2, #0
 800766c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007670:	2100      	movs	r1, #0
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f000 fea4 	bl	80083c0 <HAL_PCDEx_LPM_Callback>
 8007678:	e002      	b.n	8007680 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f016 fa62 	bl	801db44 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	695a      	ldr	r2, [r3, #20]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800768e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4618      	mov	r0, r3
 8007696:	f004 fc6b 	bl	800bf70 <USB_ReadInterrupts>
 800769a:	4603      	mov	r3, r0
 800769c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80076a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80076a4:	d112      	bne.n	80076cc <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80076a6:	69fb      	ldr	r3, [r7, #28]
 80076a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	f003 0301 	and.w	r3, r3, #1
 80076b2:	2b01      	cmp	r3, #1
 80076b4:	d102      	bne.n	80076bc <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f016 fa1e 	bl	801daf8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	695a      	ldr	r2, [r3, #20]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80076ca:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4618      	mov	r0, r3
 80076d2:	f004 fc4d 	bl	800bf70 <USB_ReadInterrupts>
 80076d6:	4603      	mov	r3, r0
 80076d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80076dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076e0:	f040 80b7 	bne.w	8007852 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80076e4:	69fb      	ldr	r3, [r7, #28]
 80076e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	69fa      	ldr	r2, [r7, #28]
 80076ee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80076f2:	f023 0301 	bic.w	r3, r3, #1
 80076f6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	2110      	movs	r1, #16
 80076fe:	4618      	mov	r0, r3
 8007700:	f003 fd1a 	bl	800b138 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007704:	2300      	movs	r3, #0
 8007706:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007708:	e046      	b.n	8007798 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800770a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800770c:	015a      	lsls	r2, r3, #5
 800770e:	69fb      	ldr	r3, [r7, #28]
 8007710:	4413      	add	r3, r2
 8007712:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007716:	461a      	mov	r2, r3
 8007718:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800771c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800771e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007720:	015a      	lsls	r2, r3, #5
 8007722:	69fb      	ldr	r3, [r7, #28]
 8007724:	4413      	add	r3, r2
 8007726:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800772e:	0151      	lsls	r1, r2, #5
 8007730:	69fa      	ldr	r2, [r7, #28]
 8007732:	440a      	add	r2, r1
 8007734:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007738:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800773c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800773e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007740:	015a      	lsls	r2, r3, #5
 8007742:	69fb      	ldr	r3, [r7, #28]
 8007744:	4413      	add	r3, r2
 8007746:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800774a:	461a      	mov	r2, r3
 800774c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007750:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007754:	015a      	lsls	r2, r3, #5
 8007756:	69fb      	ldr	r3, [r7, #28]
 8007758:	4413      	add	r3, r2
 800775a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007762:	0151      	lsls	r1, r2, #5
 8007764:	69fa      	ldr	r2, [r7, #28]
 8007766:	440a      	add	r2, r1
 8007768:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800776c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007770:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007772:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007774:	015a      	lsls	r2, r3, #5
 8007776:	69fb      	ldr	r3, [r7, #28]
 8007778:	4413      	add	r3, r2
 800777a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007782:	0151      	lsls	r1, r2, #5
 8007784:	69fa      	ldr	r2, [r7, #28]
 8007786:	440a      	add	r2, r1
 8007788:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800778c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007790:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007794:	3301      	adds	r3, #1
 8007796:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	791b      	ldrb	r3, [r3, #4]
 800779c:	461a      	mov	r2, r3
 800779e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d3b2      	bcc.n	800770a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80077a4:	69fb      	ldr	r3, [r7, #28]
 80077a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077aa:	69db      	ldr	r3, [r3, #28]
 80077ac:	69fa      	ldr	r2, [r7, #28]
 80077ae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80077b2:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80077b6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	7bdb      	ldrb	r3, [r3, #15]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d016      	beq.n	80077ee <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80077c0:	69fb      	ldr	r3, [r7, #28]
 80077c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80077ca:	69fa      	ldr	r2, [r7, #28]
 80077cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80077d0:	f043 030b 	orr.w	r3, r3, #11
 80077d4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80077d8:	69fb      	ldr	r3, [r7, #28]
 80077da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077e0:	69fa      	ldr	r2, [r7, #28]
 80077e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80077e6:	f043 030b 	orr.w	r3, r3, #11
 80077ea:	6453      	str	r3, [r2, #68]	@ 0x44
 80077ec:	e015      	b.n	800781a <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80077ee:	69fb      	ldr	r3, [r7, #28]
 80077f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077f4:	695b      	ldr	r3, [r3, #20]
 80077f6:	69fa      	ldr	r2, [r7, #28]
 80077f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80077fc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8007800:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8007804:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007806:	69fb      	ldr	r3, [r7, #28]
 8007808:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800780c:	691b      	ldr	r3, [r3, #16]
 800780e:	69fa      	ldr	r2, [r7, #28]
 8007810:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007814:	f043 030b 	orr.w	r3, r3, #11
 8007818:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800781a:	69fb      	ldr	r3, [r7, #28]
 800781c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	69fa      	ldr	r2, [r7, #28]
 8007824:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007828:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800782c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6818      	ldr	r0, [r3, #0]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800783c:	461a      	mov	r2, r3
 800783e:	f004 fc5b 	bl	800c0f8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	695a      	ldr	r2, [r3, #20]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8007850:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4618      	mov	r0, r3
 8007858:	f004 fb8a 	bl	800bf70 <USB_ReadInterrupts>
 800785c:	4603      	mov	r3, r0
 800785e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007862:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007866:	d123      	bne.n	80078b0 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4618      	mov	r0, r3
 800786e:	f004 fc20 	bl	800c0b2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4618      	mov	r0, r3
 8007878:	f003 fcd7 	bl	800b22a <USB_GetDevSpeed>
 800787c:	4603      	mov	r3, r0
 800787e:	461a      	mov	r2, r3
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681c      	ldr	r4, [r3, #0]
 8007888:	f001 f9ca 	bl	8008c20 <HAL_RCC_GetHCLKFreq>
 800788c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007892:	461a      	mov	r2, r3
 8007894:	4620      	mov	r0, r4
 8007896:	f003 f9db 	bl	800ac50 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f016 f903 	bl	801daa6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	695a      	ldr	r2, [r3, #20]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80078ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4618      	mov	r0, r3
 80078b6:	f004 fb5b 	bl	800bf70 <USB_ReadInterrupts>
 80078ba:	4603      	mov	r3, r0
 80078bc:	f003 0308 	and.w	r3, r3, #8
 80078c0:	2b08      	cmp	r3, #8
 80078c2:	d10a      	bne.n	80078da <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f016 f8e0 	bl	801da8a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	695a      	ldr	r2, [r3, #20]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f002 0208 	and.w	r2, r2, #8
 80078d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4618      	mov	r0, r3
 80078e0:	f004 fb46 	bl	800bf70 <USB_ReadInterrupts>
 80078e4:	4603      	mov	r3, r0
 80078e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078ea:	2b80      	cmp	r3, #128	@ 0x80
 80078ec:	d123      	bne.n	8007936 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80078ee:	6a3b      	ldr	r3, [r7, #32]
 80078f0:	699b      	ldr	r3, [r3, #24]
 80078f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80078f6:	6a3b      	ldr	r3, [r7, #32]
 80078f8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80078fa:	2301      	movs	r3, #1
 80078fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80078fe:	e014      	b.n	800792a <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8007900:	6879      	ldr	r1, [r7, #4]
 8007902:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007904:	4613      	mov	r3, r2
 8007906:	00db      	lsls	r3, r3, #3
 8007908:	4413      	add	r3, r2
 800790a:	009b      	lsls	r3, r3, #2
 800790c:	440b      	add	r3, r1
 800790e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8007912:	781b      	ldrb	r3, [r3, #0]
 8007914:	2b01      	cmp	r3, #1
 8007916:	d105      	bne.n	8007924 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8007918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800791a:	b2db      	uxtb	r3, r3
 800791c:	4619      	mov	r1, r3
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f000 fb0a 	bl	8007f38 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007926:	3301      	adds	r3, #1
 8007928:	627b      	str	r3, [r7, #36]	@ 0x24
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	791b      	ldrb	r3, [r3, #4]
 800792e:	461a      	mov	r2, r3
 8007930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007932:	4293      	cmp	r3, r2
 8007934:	d3e4      	bcc.n	8007900 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4618      	mov	r0, r3
 800793c:	f004 fb18 	bl	800bf70 <USB_ReadInterrupts>
 8007940:	4603      	mov	r3, r0
 8007942:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007946:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800794a:	d13c      	bne.n	80079c6 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800794c:	2301      	movs	r3, #1
 800794e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007950:	e02b      	b.n	80079aa <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8007952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007954:	015a      	lsls	r2, r3, #5
 8007956:	69fb      	ldr	r3, [r7, #28]
 8007958:	4413      	add	r3, r2
 800795a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007962:	6879      	ldr	r1, [r7, #4]
 8007964:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007966:	4613      	mov	r3, r2
 8007968:	00db      	lsls	r3, r3, #3
 800796a:	4413      	add	r3, r2
 800796c:	009b      	lsls	r3, r3, #2
 800796e:	440b      	add	r3, r1
 8007970:	3318      	adds	r3, #24
 8007972:	781b      	ldrb	r3, [r3, #0]
 8007974:	2b01      	cmp	r3, #1
 8007976:	d115      	bne.n	80079a4 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8007978:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800797a:	2b00      	cmp	r3, #0
 800797c:	da12      	bge.n	80079a4 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800797e:	6879      	ldr	r1, [r7, #4]
 8007980:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007982:	4613      	mov	r3, r2
 8007984:	00db      	lsls	r3, r3, #3
 8007986:	4413      	add	r3, r2
 8007988:	009b      	lsls	r3, r3, #2
 800798a:	440b      	add	r3, r1
 800798c:	3317      	adds	r3, #23
 800798e:	2201      	movs	r2, #1
 8007990:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8007992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007994:	b2db      	uxtb	r3, r3
 8007996:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800799a:	b2db      	uxtb	r3, r3
 800799c:	4619      	mov	r1, r3
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f000 faca 	bl	8007f38 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80079a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079a6:	3301      	adds	r3, #1
 80079a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	791b      	ldrb	r3, [r3, #4]
 80079ae:	461a      	mov	r2, r3
 80079b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d3cd      	bcc.n	8007952 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	695a      	ldr	r2, [r3, #20]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80079c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4618      	mov	r0, r3
 80079cc:	f004 fad0 	bl	800bf70 <USB_ReadInterrupts>
 80079d0:	4603      	mov	r3, r0
 80079d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80079d6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80079da:	d156      	bne.n	8007a8a <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80079dc:	2301      	movs	r3, #1
 80079de:	627b      	str	r3, [r7, #36]	@ 0x24
 80079e0:	e045      	b.n	8007a6e <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80079e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079e4:	015a      	lsls	r2, r3, #5
 80079e6:	69fb      	ldr	r3, [r7, #28]
 80079e8:	4413      	add	r3, r2
 80079ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80079f2:	6879      	ldr	r1, [r7, #4]
 80079f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80079f6:	4613      	mov	r3, r2
 80079f8:	00db      	lsls	r3, r3, #3
 80079fa:	4413      	add	r3, r2
 80079fc:	009b      	lsls	r3, r3, #2
 80079fe:	440b      	add	r3, r1
 8007a00:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8007a04:	781b      	ldrb	r3, [r3, #0]
 8007a06:	2b01      	cmp	r3, #1
 8007a08:	d12e      	bne.n	8007a68 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007a0a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	da2b      	bge.n	8007a68 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8007a10:	69bb      	ldr	r3, [r7, #24]
 8007a12:	0c1a      	lsrs	r2, r3, #16
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8007a1a:	4053      	eors	r3, r2
 8007a1c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d121      	bne.n	8007a68 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8007a24:	6879      	ldr	r1, [r7, #4]
 8007a26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a28:	4613      	mov	r3, r2
 8007a2a:	00db      	lsls	r3, r3, #3
 8007a2c:	4413      	add	r3, r2
 8007a2e:	009b      	lsls	r3, r3, #2
 8007a30:	440b      	add	r3, r1
 8007a32:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8007a36:	2201      	movs	r2, #1
 8007a38:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8007a3a:	6a3b      	ldr	r3, [r7, #32]
 8007a3c:	699b      	ldr	r3, [r3, #24]
 8007a3e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007a42:	6a3b      	ldr	r3, [r7, #32]
 8007a44:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8007a46:	6a3b      	ldr	r3, [r7, #32]
 8007a48:	695b      	ldr	r3, [r3, #20]
 8007a4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d10a      	bne.n	8007a68 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8007a52:	69fb      	ldr	r3, [r7, #28]
 8007a54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	69fa      	ldr	r2, [r7, #28]
 8007a5c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007a60:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007a64:	6053      	str	r3, [r2, #4]
            break;
 8007a66:	e008      	b.n	8007a7a <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a6a:	3301      	adds	r3, #1
 8007a6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	791b      	ldrb	r3, [r3, #4]
 8007a72:	461a      	mov	r2, r3
 8007a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d3b3      	bcc.n	80079e2 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	695a      	ldr	r2, [r3, #20]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8007a88:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f004 fa6e 	bl	800bf70 <USB_ReadInterrupts>
 8007a94:	4603      	mov	r3, r0
 8007a96:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a9e:	d10a      	bne.n	8007ab6 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f016 f881 	bl	801dba8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	695a      	ldr	r2, [r3, #20]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8007ab4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4618      	mov	r0, r3
 8007abc:	f004 fa58 	bl	800bf70 <USB_ReadInterrupts>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	f003 0304 	and.w	r3, r3, #4
 8007ac6:	2b04      	cmp	r3, #4
 8007ac8:	d115      	bne.n	8007af6 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007ad2:	69bb      	ldr	r3, [r7, #24]
 8007ad4:	f003 0304 	and.w	r3, r3, #4
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d002      	beq.n	8007ae2 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f016 f871 	bl	801dbc4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	6859      	ldr	r1, [r3, #4]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	69ba      	ldr	r2, [r7, #24]
 8007aee:	430a      	orrs	r2, r1
 8007af0:	605a      	str	r2, [r3, #4]
 8007af2:	e000      	b.n	8007af6 <HAL_PCD_IRQHandler+0x93c>
      return;
 8007af4:	bf00      	nop
    }
  }
}
 8007af6:	3734      	adds	r7, #52	@ 0x34
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd90      	pop	{r4, r7, pc}

08007afc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b082      	sub	sp, #8
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	460b      	mov	r3, r1
 8007b06:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007b0e:	2b01      	cmp	r3, #1
 8007b10:	d101      	bne.n	8007b16 <HAL_PCD_SetAddress+0x1a>
 8007b12:	2302      	movs	r3, #2
 8007b14:	e012      	b.n	8007b3c <HAL_PCD_SetAddress+0x40>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2201      	movs	r2, #1
 8007b1a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	78fa      	ldrb	r2, [r7, #3]
 8007b22:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	78fa      	ldrb	r2, [r7, #3]
 8007b2a:	4611      	mov	r1, r2
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f004 f9b7 	bl	800bea0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2200      	movs	r2, #0
 8007b36:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007b3a:	2300      	movs	r3, #0
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3708      	adds	r7, #8
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}

08007b44 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b084      	sub	sp, #16
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	4608      	mov	r0, r1
 8007b4e:	4611      	mov	r1, r2
 8007b50:	461a      	mov	r2, r3
 8007b52:	4603      	mov	r3, r0
 8007b54:	70fb      	strb	r3, [r7, #3]
 8007b56:	460b      	mov	r3, r1
 8007b58:	803b      	strh	r3, [r7, #0]
 8007b5a:	4613      	mov	r3, r2
 8007b5c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007b62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	da0f      	bge.n	8007b8a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007b6a:	78fb      	ldrb	r3, [r7, #3]
 8007b6c:	f003 020f 	and.w	r2, r3, #15
 8007b70:	4613      	mov	r3, r2
 8007b72:	00db      	lsls	r3, r3, #3
 8007b74:	4413      	add	r3, r2
 8007b76:	009b      	lsls	r3, r3, #2
 8007b78:	3310      	adds	r3, #16
 8007b7a:	687a      	ldr	r2, [r7, #4]
 8007b7c:	4413      	add	r3, r2
 8007b7e:	3304      	adds	r3, #4
 8007b80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2201      	movs	r2, #1
 8007b86:	705a      	strb	r2, [r3, #1]
 8007b88:	e00f      	b.n	8007baa <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007b8a:	78fb      	ldrb	r3, [r7, #3]
 8007b8c:	f003 020f 	and.w	r2, r3, #15
 8007b90:	4613      	mov	r3, r2
 8007b92:	00db      	lsls	r3, r3, #3
 8007b94:	4413      	add	r3, r2
 8007b96:	009b      	lsls	r3, r3, #2
 8007b98:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007b9c:	687a      	ldr	r2, [r7, #4]
 8007b9e:	4413      	add	r3, r2
 8007ba0:	3304      	adds	r3, #4
 8007ba2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007baa:	78fb      	ldrb	r3, [r7, #3]
 8007bac:	f003 030f 	and.w	r3, r3, #15
 8007bb0:	b2da      	uxtb	r2, r3
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8007bb6:	883b      	ldrh	r3, [r7, #0]
 8007bb8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	78ba      	ldrb	r2, [r7, #2]
 8007bc4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	785b      	ldrb	r3, [r3, #1]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d004      	beq.n	8007bd8 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	781b      	ldrb	r3, [r3, #0]
 8007bd2:	461a      	mov	r2, r3
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007bd8:	78bb      	ldrb	r3, [r7, #2]
 8007bda:	2b02      	cmp	r3, #2
 8007bdc:	d102      	bne.n	8007be4 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2200      	movs	r2, #0
 8007be2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	d101      	bne.n	8007bf2 <HAL_PCD_EP_Open+0xae>
 8007bee:	2302      	movs	r3, #2
 8007bf0:	e00e      	b.n	8007c10 <HAL_PCD_EP_Open+0xcc>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2201      	movs	r2, #1
 8007bf6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	68f9      	ldr	r1, [r7, #12]
 8007c00:	4618      	mov	r0, r3
 8007c02:	f003 fb37 	bl	800b274 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8007c0e:	7afb      	ldrb	r3, [r7, #11]
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3710      	adds	r7, #16
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}

08007c18 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b084      	sub	sp, #16
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
 8007c20:	460b      	mov	r3, r1
 8007c22:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007c24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	da0f      	bge.n	8007c4c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007c2c:	78fb      	ldrb	r3, [r7, #3]
 8007c2e:	f003 020f 	and.w	r2, r3, #15
 8007c32:	4613      	mov	r3, r2
 8007c34:	00db      	lsls	r3, r3, #3
 8007c36:	4413      	add	r3, r2
 8007c38:	009b      	lsls	r3, r3, #2
 8007c3a:	3310      	adds	r3, #16
 8007c3c:	687a      	ldr	r2, [r7, #4]
 8007c3e:	4413      	add	r3, r2
 8007c40:	3304      	adds	r3, #4
 8007c42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2201      	movs	r2, #1
 8007c48:	705a      	strb	r2, [r3, #1]
 8007c4a:	e00f      	b.n	8007c6c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007c4c:	78fb      	ldrb	r3, [r7, #3]
 8007c4e:	f003 020f 	and.w	r2, r3, #15
 8007c52:	4613      	mov	r3, r2
 8007c54:	00db      	lsls	r3, r3, #3
 8007c56:	4413      	add	r3, r2
 8007c58:	009b      	lsls	r3, r3, #2
 8007c5a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007c5e:	687a      	ldr	r2, [r7, #4]
 8007c60:	4413      	add	r3, r2
 8007c62:	3304      	adds	r3, #4
 8007c64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8007c6c:	78fb      	ldrb	r3, [r7, #3]
 8007c6e:	f003 030f 	and.w	r3, r3, #15
 8007c72:	b2da      	uxtb	r2, r3
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	d101      	bne.n	8007c86 <HAL_PCD_EP_Close+0x6e>
 8007c82:	2302      	movs	r3, #2
 8007c84:	e00e      	b.n	8007ca4 <HAL_PCD_EP_Close+0x8c>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2201      	movs	r2, #1
 8007c8a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	68f9      	ldr	r1, [r7, #12]
 8007c94:	4618      	mov	r0, r3
 8007c96:	f003 fb75 	bl	800b384 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8007ca2:	2300      	movs	r3, #0
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	3710      	adds	r7, #16
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}

08007cac <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b086      	sub	sp, #24
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	60f8      	str	r0, [r7, #12]
 8007cb4:	607a      	str	r2, [r7, #4]
 8007cb6:	603b      	str	r3, [r7, #0]
 8007cb8:	460b      	mov	r3, r1
 8007cba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007cbc:	7afb      	ldrb	r3, [r7, #11]
 8007cbe:	f003 020f 	and.w	r2, r3, #15
 8007cc2:	4613      	mov	r3, r2
 8007cc4:	00db      	lsls	r3, r3, #3
 8007cc6:	4413      	add	r3, r2
 8007cc8:	009b      	lsls	r3, r3, #2
 8007cca:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007cce:	68fa      	ldr	r2, [r7, #12]
 8007cd0:	4413      	add	r3, r2
 8007cd2:	3304      	adds	r3, #4
 8007cd4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	687a      	ldr	r2, [r7, #4]
 8007cda:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	683a      	ldr	r2, [r7, #0]
 8007ce0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	2200      	movs	r2, #0
 8007cec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007cee:	7afb      	ldrb	r3, [r7, #11]
 8007cf0:	f003 030f 	and.w	r3, r3, #15
 8007cf4:	b2da      	uxtb	r2, r3
 8007cf6:	697b      	ldr	r3, [r7, #20]
 8007cf8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	799b      	ldrb	r3, [r3, #6]
 8007cfe:	2b01      	cmp	r3, #1
 8007d00:	d102      	bne.n	8007d08 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007d02:	687a      	ldr	r2, [r7, #4]
 8007d04:	697b      	ldr	r3, [r7, #20]
 8007d06:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	6818      	ldr	r0, [r3, #0]
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	799b      	ldrb	r3, [r3, #6]
 8007d10:	461a      	mov	r2, r3
 8007d12:	6979      	ldr	r1, [r7, #20]
 8007d14:	f003 fc12 	bl	800b53c <USB_EPStartXfer>

  return HAL_OK;
 8007d18:	2300      	movs	r3, #0
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3718      	adds	r7, #24
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}

08007d22 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8007d22:	b480      	push	{r7}
 8007d24:	b083      	sub	sp, #12
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	6078      	str	r0, [r7, #4]
 8007d2a:	460b      	mov	r3, r1
 8007d2c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007d2e:	78fb      	ldrb	r3, [r7, #3]
 8007d30:	f003 020f 	and.w	r2, r3, #15
 8007d34:	6879      	ldr	r1, [r7, #4]
 8007d36:	4613      	mov	r3, r2
 8007d38:	00db      	lsls	r3, r3, #3
 8007d3a:	4413      	add	r3, r2
 8007d3c:	009b      	lsls	r3, r3, #2
 8007d3e:	440b      	add	r3, r1
 8007d40:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8007d44:	681b      	ldr	r3, [r3, #0]
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	370c      	adds	r7, #12
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d50:	4770      	bx	lr

08007d52 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007d52:	b580      	push	{r7, lr}
 8007d54:	b086      	sub	sp, #24
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	60f8      	str	r0, [r7, #12]
 8007d5a:	607a      	str	r2, [r7, #4]
 8007d5c:	603b      	str	r3, [r7, #0]
 8007d5e:	460b      	mov	r3, r1
 8007d60:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007d62:	7afb      	ldrb	r3, [r7, #11]
 8007d64:	f003 020f 	and.w	r2, r3, #15
 8007d68:	4613      	mov	r3, r2
 8007d6a:	00db      	lsls	r3, r3, #3
 8007d6c:	4413      	add	r3, r2
 8007d6e:	009b      	lsls	r3, r3, #2
 8007d70:	3310      	adds	r3, #16
 8007d72:	68fa      	ldr	r2, [r7, #12]
 8007d74:	4413      	add	r3, r2
 8007d76:	3304      	adds	r3, #4
 8007d78:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	687a      	ldr	r2, [r7, #4]
 8007d7e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007d80:	697b      	ldr	r3, [r7, #20]
 8007d82:	683a      	ldr	r2, [r7, #0]
 8007d84:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	2201      	movs	r2, #1
 8007d90:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007d92:	7afb      	ldrb	r3, [r7, #11]
 8007d94:	f003 030f 	and.w	r3, r3, #15
 8007d98:	b2da      	uxtb	r2, r3
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	799b      	ldrb	r3, [r3, #6]
 8007da2:	2b01      	cmp	r3, #1
 8007da4:	d102      	bne.n	8007dac <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007da6:	687a      	ldr	r2, [r7, #4]
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	6818      	ldr	r0, [r3, #0]
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	799b      	ldrb	r3, [r3, #6]
 8007db4:	461a      	mov	r2, r3
 8007db6:	6979      	ldr	r1, [r7, #20]
 8007db8:	f003 fbc0 	bl	800b53c <USB_EPStartXfer>

  return HAL_OK;
 8007dbc:	2300      	movs	r3, #0
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3718      	adds	r7, #24
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}

08007dc6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007dc6:	b580      	push	{r7, lr}
 8007dc8:	b084      	sub	sp, #16
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	6078      	str	r0, [r7, #4]
 8007dce:	460b      	mov	r3, r1
 8007dd0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007dd2:	78fb      	ldrb	r3, [r7, #3]
 8007dd4:	f003 030f 	and.w	r3, r3, #15
 8007dd8:	687a      	ldr	r2, [r7, #4]
 8007dda:	7912      	ldrb	r2, [r2, #4]
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d901      	bls.n	8007de4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007de0:	2301      	movs	r3, #1
 8007de2:	e04f      	b.n	8007e84 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007de4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	da0f      	bge.n	8007e0c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007dec:	78fb      	ldrb	r3, [r7, #3]
 8007dee:	f003 020f 	and.w	r2, r3, #15
 8007df2:	4613      	mov	r3, r2
 8007df4:	00db      	lsls	r3, r3, #3
 8007df6:	4413      	add	r3, r2
 8007df8:	009b      	lsls	r3, r3, #2
 8007dfa:	3310      	adds	r3, #16
 8007dfc:	687a      	ldr	r2, [r7, #4]
 8007dfe:	4413      	add	r3, r2
 8007e00:	3304      	adds	r3, #4
 8007e02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2201      	movs	r2, #1
 8007e08:	705a      	strb	r2, [r3, #1]
 8007e0a:	e00d      	b.n	8007e28 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007e0c:	78fa      	ldrb	r2, [r7, #3]
 8007e0e:	4613      	mov	r3, r2
 8007e10:	00db      	lsls	r3, r3, #3
 8007e12:	4413      	add	r3, r2
 8007e14:	009b      	lsls	r3, r3, #2
 8007e16:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007e1a:	687a      	ldr	r2, [r7, #4]
 8007e1c:	4413      	add	r3, r2
 8007e1e:	3304      	adds	r3, #4
 8007e20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2200      	movs	r2, #0
 8007e26:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007e2e:	78fb      	ldrb	r3, [r7, #3]
 8007e30:	f003 030f 	and.w	r3, r3, #15
 8007e34:	b2da      	uxtb	r2, r3
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007e40:	2b01      	cmp	r3, #1
 8007e42:	d101      	bne.n	8007e48 <HAL_PCD_EP_SetStall+0x82>
 8007e44:	2302      	movs	r3, #2
 8007e46:	e01d      	b.n	8007e84 <HAL_PCD_EP_SetStall+0xbe>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	68f9      	ldr	r1, [r7, #12]
 8007e56:	4618      	mov	r0, r3
 8007e58:	f003 ff4e 	bl	800bcf8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007e5c:	78fb      	ldrb	r3, [r7, #3]
 8007e5e:	f003 030f 	and.w	r3, r3, #15
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d109      	bne.n	8007e7a <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6818      	ldr	r0, [r3, #0]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	7999      	ldrb	r1, [r3, #6]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007e74:	461a      	mov	r2, r3
 8007e76:	f004 f93f 	bl	800c0f8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007e82:	2300      	movs	r3, #0
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	3710      	adds	r7, #16
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}

08007e8c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b084      	sub	sp, #16
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	460b      	mov	r3, r1
 8007e96:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007e98:	78fb      	ldrb	r3, [r7, #3]
 8007e9a:	f003 030f 	and.w	r3, r3, #15
 8007e9e:	687a      	ldr	r2, [r7, #4]
 8007ea0:	7912      	ldrb	r2, [r2, #4]
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d901      	bls.n	8007eaa <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	e042      	b.n	8007f30 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007eaa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	da0f      	bge.n	8007ed2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007eb2:	78fb      	ldrb	r3, [r7, #3]
 8007eb4:	f003 020f 	and.w	r2, r3, #15
 8007eb8:	4613      	mov	r3, r2
 8007eba:	00db      	lsls	r3, r3, #3
 8007ebc:	4413      	add	r3, r2
 8007ebe:	009b      	lsls	r3, r3, #2
 8007ec0:	3310      	adds	r3, #16
 8007ec2:	687a      	ldr	r2, [r7, #4]
 8007ec4:	4413      	add	r3, r2
 8007ec6:	3304      	adds	r3, #4
 8007ec8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2201      	movs	r2, #1
 8007ece:	705a      	strb	r2, [r3, #1]
 8007ed0:	e00f      	b.n	8007ef2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007ed2:	78fb      	ldrb	r3, [r7, #3]
 8007ed4:	f003 020f 	and.w	r2, r3, #15
 8007ed8:	4613      	mov	r3, r2
 8007eda:	00db      	lsls	r3, r3, #3
 8007edc:	4413      	add	r3, r2
 8007ede:	009b      	lsls	r3, r3, #2
 8007ee0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007ee4:	687a      	ldr	r2, [r7, #4]
 8007ee6:	4413      	add	r3, r2
 8007ee8:	3304      	adds	r3, #4
 8007eea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007ef8:	78fb      	ldrb	r3, [r7, #3]
 8007efa:	f003 030f 	and.w	r3, r3, #15
 8007efe:	b2da      	uxtb	r2, r3
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007f0a:	2b01      	cmp	r3, #1
 8007f0c:	d101      	bne.n	8007f12 <HAL_PCD_EP_ClrStall+0x86>
 8007f0e:	2302      	movs	r3, #2
 8007f10:	e00e      	b.n	8007f30 <HAL_PCD_EP_ClrStall+0xa4>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2201      	movs	r2, #1
 8007f16:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	68f9      	ldr	r1, [r7, #12]
 8007f20:	4618      	mov	r0, r3
 8007f22:	f003 ff57 	bl	800bdd4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007f2e:	2300      	movs	r3, #0
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	3710      	adds	r7, #16
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}

08007f38 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b084      	sub	sp, #16
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	460b      	mov	r3, r1
 8007f42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8007f44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	da0c      	bge.n	8007f66 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007f4c:	78fb      	ldrb	r3, [r7, #3]
 8007f4e:	f003 020f 	and.w	r2, r3, #15
 8007f52:	4613      	mov	r3, r2
 8007f54:	00db      	lsls	r3, r3, #3
 8007f56:	4413      	add	r3, r2
 8007f58:	009b      	lsls	r3, r3, #2
 8007f5a:	3310      	adds	r3, #16
 8007f5c:	687a      	ldr	r2, [r7, #4]
 8007f5e:	4413      	add	r3, r2
 8007f60:	3304      	adds	r3, #4
 8007f62:	60fb      	str	r3, [r7, #12]
 8007f64:	e00c      	b.n	8007f80 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007f66:	78fb      	ldrb	r3, [r7, #3]
 8007f68:	f003 020f 	and.w	r2, r3, #15
 8007f6c:	4613      	mov	r3, r2
 8007f6e:	00db      	lsls	r3, r3, #3
 8007f70:	4413      	add	r3, r2
 8007f72:	009b      	lsls	r3, r3, #2
 8007f74:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007f78:	687a      	ldr	r2, [r7, #4]
 8007f7a:	4413      	add	r3, r2
 8007f7c:	3304      	adds	r3, #4
 8007f7e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	68f9      	ldr	r1, [r7, #12]
 8007f86:	4618      	mov	r0, r3
 8007f88:	f003 fd76 	bl	800ba78 <USB_EPStopXfer>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8007f90:	7afb      	ldrb	r3, [r7, #11]
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3710      	adds	r7, #16
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}

08007f9a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007f9a:	b580      	push	{r7, lr}
 8007f9c:	b08a      	sub	sp, #40	@ 0x28
 8007f9e:	af02      	add	r7, sp, #8
 8007fa0:	6078      	str	r0, [r7, #4]
 8007fa2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007fae:	683a      	ldr	r2, [r7, #0]
 8007fb0:	4613      	mov	r3, r2
 8007fb2:	00db      	lsls	r3, r3, #3
 8007fb4:	4413      	add	r3, r2
 8007fb6:	009b      	lsls	r3, r3, #2
 8007fb8:	3310      	adds	r3, #16
 8007fba:	687a      	ldr	r2, [r7, #4]
 8007fbc:	4413      	add	r3, r2
 8007fbe:	3304      	adds	r3, #4
 8007fc0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	695a      	ldr	r2, [r3, #20]
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	691b      	ldr	r3, [r3, #16]
 8007fca:	429a      	cmp	r2, r3
 8007fcc:	d901      	bls.n	8007fd2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007fce:	2301      	movs	r3, #1
 8007fd0:	e06b      	b.n	80080aa <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	691a      	ldr	r2, [r3, #16]
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	695b      	ldr	r3, [r3, #20]
 8007fda:	1ad3      	subs	r3, r2, r3
 8007fdc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	689b      	ldr	r3, [r3, #8]
 8007fe2:	69fa      	ldr	r2, [r7, #28]
 8007fe4:	429a      	cmp	r2, r3
 8007fe6:	d902      	bls.n	8007fee <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	689b      	ldr	r3, [r3, #8]
 8007fec:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007fee:	69fb      	ldr	r3, [r7, #28]
 8007ff0:	3303      	adds	r3, #3
 8007ff2:	089b      	lsrs	r3, r3, #2
 8007ff4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007ff6:	e02a      	b.n	800804e <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	691a      	ldr	r2, [r3, #16]
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	695b      	ldr	r3, [r3, #20]
 8008000:	1ad3      	subs	r3, r2, r3
 8008002:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	689b      	ldr	r3, [r3, #8]
 8008008:	69fa      	ldr	r2, [r7, #28]
 800800a:	429a      	cmp	r2, r3
 800800c:	d902      	bls.n	8008014 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	689b      	ldr	r3, [r3, #8]
 8008012:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8008014:	69fb      	ldr	r3, [r7, #28]
 8008016:	3303      	adds	r3, #3
 8008018:	089b      	lsrs	r3, r3, #2
 800801a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	68d9      	ldr	r1, [r3, #12]
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	b2da      	uxtb	r2, r3
 8008024:	69fb      	ldr	r3, [r7, #28]
 8008026:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800802c:	9300      	str	r3, [sp, #0]
 800802e:	4603      	mov	r3, r0
 8008030:	6978      	ldr	r0, [r7, #20]
 8008032:	f003 fdcb 	bl	800bbcc <USB_WritePacket>

    ep->xfer_buff  += len;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	68da      	ldr	r2, [r3, #12]
 800803a:	69fb      	ldr	r3, [r7, #28]
 800803c:	441a      	add	r2, r3
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	695a      	ldr	r2, [r3, #20]
 8008046:	69fb      	ldr	r3, [r7, #28]
 8008048:	441a      	add	r2, r3
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	015a      	lsls	r2, r3, #5
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	4413      	add	r3, r2
 8008056:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800805a:	699b      	ldr	r3, [r3, #24]
 800805c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800805e:	69ba      	ldr	r2, [r7, #24]
 8008060:	429a      	cmp	r2, r3
 8008062:	d809      	bhi.n	8008078 <PCD_WriteEmptyTxFifo+0xde>
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	695a      	ldr	r2, [r3, #20]
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800806c:	429a      	cmp	r2, r3
 800806e:	d203      	bcs.n	8008078 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	691b      	ldr	r3, [r3, #16]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d1bf      	bne.n	8007ff8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	691a      	ldr	r2, [r3, #16]
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	695b      	ldr	r3, [r3, #20]
 8008080:	429a      	cmp	r2, r3
 8008082:	d811      	bhi.n	80080a8 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	f003 030f 	and.w	r3, r3, #15
 800808a:	2201      	movs	r2, #1
 800808c:	fa02 f303 	lsl.w	r3, r2, r3
 8008090:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008098:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	43db      	mvns	r3, r3
 800809e:	6939      	ldr	r1, [r7, #16]
 80080a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80080a4:	4013      	ands	r3, r2
 80080a6:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80080a8:	2300      	movs	r3, #0
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3720      	adds	r7, #32
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}
	...

080080b4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b088      	sub	sp, #32
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
 80080bc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080c4:	69fb      	ldr	r3, [r7, #28]
 80080c6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80080c8:	69fb      	ldr	r3, [r7, #28]
 80080ca:	333c      	adds	r3, #60	@ 0x3c
 80080cc:	3304      	adds	r3, #4
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	015a      	lsls	r2, r3, #5
 80080d6:	69bb      	ldr	r3, [r7, #24]
 80080d8:	4413      	add	r3, r2
 80080da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080de:	689b      	ldr	r3, [r3, #8]
 80080e0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	799b      	ldrb	r3, [r3, #6]
 80080e6:	2b01      	cmp	r3, #1
 80080e8:	d17b      	bne.n	80081e2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	f003 0308 	and.w	r3, r3, #8
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d015      	beq.n	8008120 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	4a61      	ldr	r2, [pc, #388]	@ (800827c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	f240 80b9 	bls.w	8008270 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008104:	2b00      	cmp	r3, #0
 8008106:	f000 80b3 	beq.w	8008270 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	015a      	lsls	r2, r3, #5
 800810e:	69bb      	ldr	r3, [r7, #24]
 8008110:	4413      	add	r3, r2
 8008112:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008116:	461a      	mov	r2, r3
 8008118:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800811c:	6093      	str	r3, [r2, #8]
 800811e:	e0a7      	b.n	8008270 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	f003 0320 	and.w	r3, r3, #32
 8008126:	2b00      	cmp	r3, #0
 8008128:	d009      	beq.n	800813e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	015a      	lsls	r2, r3, #5
 800812e:	69bb      	ldr	r3, [r7, #24]
 8008130:	4413      	add	r3, r2
 8008132:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008136:	461a      	mov	r2, r3
 8008138:	2320      	movs	r3, #32
 800813a:	6093      	str	r3, [r2, #8]
 800813c:	e098      	b.n	8008270 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008144:	2b00      	cmp	r3, #0
 8008146:	f040 8093 	bne.w	8008270 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	4a4b      	ldr	r2, [pc, #300]	@ (800827c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d90f      	bls.n	8008172 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008158:	2b00      	cmp	r3, #0
 800815a:	d00a      	beq.n	8008172 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	015a      	lsls	r2, r3, #5
 8008160:	69bb      	ldr	r3, [r7, #24]
 8008162:	4413      	add	r3, r2
 8008164:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008168:	461a      	mov	r2, r3
 800816a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800816e:	6093      	str	r3, [r2, #8]
 8008170:	e07e      	b.n	8008270 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8008172:	683a      	ldr	r2, [r7, #0]
 8008174:	4613      	mov	r3, r2
 8008176:	00db      	lsls	r3, r3, #3
 8008178:	4413      	add	r3, r2
 800817a:	009b      	lsls	r3, r3, #2
 800817c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008180:	687a      	ldr	r2, [r7, #4]
 8008182:	4413      	add	r3, r2
 8008184:	3304      	adds	r3, #4
 8008186:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	6a1a      	ldr	r2, [r3, #32]
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	0159      	lsls	r1, r3, #5
 8008190:	69bb      	ldr	r3, [r7, #24]
 8008192:	440b      	add	r3, r1
 8008194:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008198:	691b      	ldr	r3, [r3, #16]
 800819a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800819e:	1ad2      	subs	r2, r2, r3
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d114      	bne.n	80081d4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	691b      	ldr	r3, [r3, #16]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d109      	bne.n	80081c6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6818      	ldr	r0, [r3, #0]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80081bc:	461a      	mov	r2, r3
 80081be:	2101      	movs	r1, #1
 80081c0:	f003 ff9a 	bl	800c0f8 <USB_EP0_OutStart>
 80081c4:	e006      	b.n	80081d4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	68da      	ldr	r2, [r3, #12]
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	695b      	ldr	r3, [r3, #20]
 80081ce:	441a      	add	r2, r3
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	b2db      	uxtb	r3, r3
 80081d8:	4619      	mov	r1, r3
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f015 fc20 	bl	801da20 <HAL_PCD_DataOutStageCallback>
 80081e0:	e046      	b.n	8008270 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	4a26      	ldr	r2, [pc, #152]	@ (8008280 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d124      	bne.n	8008234 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d00a      	beq.n	800820a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	015a      	lsls	r2, r3, #5
 80081f8:	69bb      	ldr	r3, [r7, #24]
 80081fa:	4413      	add	r3, r2
 80081fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008200:	461a      	mov	r2, r3
 8008202:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008206:	6093      	str	r3, [r2, #8]
 8008208:	e032      	b.n	8008270 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	f003 0320 	and.w	r3, r3, #32
 8008210:	2b00      	cmp	r3, #0
 8008212:	d008      	beq.n	8008226 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	015a      	lsls	r2, r3, #5
 8008218:	69bb      	ldr	r3, [r7, #24]
 800821a:	4413      	add	r3, r2
 800821c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008220:	461a      	mov	r2, r3
 8008222:	2320      	movs	r3, #32
 8008224:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	b2db      	uxtb	r3, r3
 800822a:	4619      	mov	r1, r3
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f015 fbf7 	bl	801da20 <HAL_PCD_DataOutStageCallback>
 8008232:	e01d      	b.n	8008270 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d114      	bne.n	8008264 <PCD_EP_OutXfrComplete_int+0x1b0>
 800823a:	6879      	ldr	r1, [r7, #4]
 800823c:	683a      	ldr	r2, [r7, #0]
 800823e:	4613      	mov	r3, r2
 8008240:	00db      	lsls	r3, r3, #3
 8008242:	4413      	add	r3, r2
 8008244:	009b      	lsls	r3, r3, #2
 8008246:	440b      	add	r3, r1
 8008248:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d108      	bne.n	8008264 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6818      	ldr	r0, [r3, #0]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800825c:	461a      	mov	r2, r3
 800825e:	2100      	movs	r1, #0
 8008260:	f003 ff4a 	bl	800c0f8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	b2db      	uxtb	r3, r3
 8008268:	4619      	mov	r1, r3
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f015 fbd8 	bl	801da20 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8008270:	2300      	movs	r3, #0
}
 8008272:	4618      	mov	r0, r3
 8008274:	3720      	adds	r7, #32
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}
 800827a:	bf00      	nop
 800827c:	4f54300a 	.word	0x4f54300a
 8008280:	4f54310a 	.word	0x4f54310a

08008284 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b086      	sub	sp, #24
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
 800828c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	333c      	adds	r3, #60	@ 0x3c
 800829c:	3304      	adds	r3, #4
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	015a      	lsls	r2, r3, #5
 80082a6:	693b      	ldr	r3, [r7, #16]
 80082a8:	4413      	add	r3, r2
 80082aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082ae:	689b      	ldr	r3, [r3, #8]
 80082b0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	4a15      	ldr	r2, [pc, #84]	@ (800830c <PCD_EP_OutSetupPacket_int+0x88>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d90e      	bls.n	80082d8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d009      	beq.n	80082d8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	015a      	lsls	r2, r3, #5
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	4413      	add	r3, r2
 80082cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082d0:	461a      	mov	r2, r3
 80082d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80082d6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f015 fb8f 	bl	801d9fc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	4a0a      	ldr	r2, [pc, #40]	@ (800830c <PCD_EP_OutSetupPacket_int+0x88>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d90c      	bls.n	8008300 <PCD_EP_OutSetupPacket_int+0x7c>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	799b      	ldrb	r3, [r3, #6]
 80082ea:	2b01      	cmp	r3, #1
 80082ec:	d108      	bne.n	8008300 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6818      	ldr	r0, [r3, #0]
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80082f8:	461a      	mov	r2, r3
 80082fa:	2101      	movs	r1, #1
 80082fc:	f003 fefc 	bl	800c0f8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8008300:	2300      	movs	r3, #0
}
 8008302:	4618      	mov	r0, r3
 8008304:	3718      	adds	r7, #24
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}
 800830a:	bf00      	nop
 800830c:	4f54300a 	.word	0x4f54300a

08008310 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8008310:	b480      	push	{r7}
 8008312:	b085      	sub	sp, #20
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	460b      	mov	r3, r1
 800831a:	70fb      	strb	r3, [r7, #3]
 800831c:	4613      	mov	r3, r2
 800831e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008326:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8008328:	78fb      	ldrb	r3, [r7, #3]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d107      	bne.n	800833e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800832e:	883b      	ldrh	r3, [r7, #0]
 8008330:	0419      	lsls	r1, r3, #16
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	68ba      	ldr	r2, [r7, #8]
 8008338:	430a      	orrs	r2, r1
 800833a:	629a      	str	r2, [r3, #40]	@ 0x28
 800833c:	e028      	b.n	8008390 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008344:	0c1b      	lsrs	r3, r3, #16
 8008346:	68ba      	ldr	r2, [r7, #8]
 8008348:	4413      	add	r3, r2
 800834a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800834c:	2300      	movs	r3, #0
 800834e:	73fb      	strb	r3, [r7, #15]
 8008350:	e00d      	b.n	800836e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681a      	ldr	r2, [r3, #0]
 8008356:	7bfb      	ldrb	r3, [r7, #15]
 8008358:	3340      	adds	r3, #64	@ 0x40
 800835a:	009b      	lsls	r3, r3, #2
 800835c:	4413      	add	r3, r2
 800835e:	685b      	ldr	r3, [r3, #4]
 8008360:	0c1b      	lsrs	r3, r3, #16
 8008362:	68ba      	ldr	r2, [r7, #8]
 8008364:	4413      	add	r3, r2
 8008366:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008368:	7bfb      	ldrb	r3, [r7, #15]
 800836a:	3301      	adds	r3, #1
 800836c:	73fb      	strb	r3, [r7, #15]
 800836e:	7bfa      	ldrb	r2, [r7, #15]
 8008370:	78fb      	ldrb	r3, [r7, #3]
 8008372:	3b01      	subs	r3, #1
 8008374:	429a      	cmp	r2, r3
 8008376:	d3ec      	bcc.n	8008352 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008378:	883b      	ldrh	r3, [r7, #0]
 800837a:	0418      	lsls	r0, r3, #16
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6819      	ldr	r1, [r3, #0]
 8008380:	78fb      	ldrb	r3, [r7, #3]
 8008382:	3b01      	subs	r3, #1
 8008384:	68ba      	ldr	r2, [r7, #8]
 8008386:	4302      	orrs	r2, r0
 8008388:	3340      	adds	r3, #64	@ 0x40
 800838a:	009b      	lsls	r3, r3, #2
 800838c:	440b      	add	r3, r1
 800838e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008390:	2300      	movs	r3, #0
}
 8008392:	4618      	mov	r0, r3
 8008394:	3714      	adds	r7, #20
 8008396:	46bd      	mov	sp, r7
 8008398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839c:	4770      	bx	lr

0800839e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800839e:	b480      	push	{r7}
 80083a0:	b083      	sub	sp, #12
 80083a2:	af00      	add	r7, sp, #0
 80083a4:	6078      	str	r0, [r7, #4]
 80083a6:	460b      	mov	r3, r1
 80083a8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	887a      	ldrh	r2, [r7, #2]
 80083b0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80083b2:	2300      	movs	r3, #0
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	370c      	adds	r7, #12
 80083b8:	46bd      	mov	sp, r7
 80083ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083be:	4770      	bx	lr

080083c0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b083      	sub	sp, #12
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	460b      	mov	r3, r1
 80083ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80083cc:	bf00      	nop
 80083ce:	370c      	adds	r7, #12
 80083d0:	46bd      	mov	sp, r7
 80083d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d6:	4770      	bx	lr

080083d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b086      	sub	sp, #24
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d101      	bne.n	80083ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80083e6:	2301      	movs	r3, #1
 80083e8:	e267      	b.n	80088ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f003 0301 	and.w	r3, r3, #1
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d075      	beq.n	80084e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80083f6:	4b88      	ldr	r3, [pc, #544]	@ (8008618 <HAL_RCC_OscConfig+0x240>)
 80083f8:	689b      	ldr	r3, [r3, #8]
 80083fa:	f003 030c 	and.w	r3, r3, #12
 80083fe:	2b04      	cmp	r3, #4
 8008400:	d00c      	beq.n	800841c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008402:	4b85      	ldr	r3, [pc, #532]	@ (8008618 <HAL_RCC_OscConfig+0x240>)
 8008404:	689b      	ldr	r3, [r3, #8]
 8008406:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800840a:	2b08      	cmp	r3, #8
 800840c:	d112      	bne.n	8008434 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800840e:	4b82      	ldr	r3, [pc, #520]	@ (8008618 <HAL_RCC_OscConfig+0x240>)
 8008410:	685b      	ldr	r3, [r3, #4]
 8008412:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008416:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800841a:	d10b      	bne.n	8008434 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800841c:	4b7e      	ldr	r3, [pc, #504]	@ (8008618 <HAL_RCC_OscConfig+0x240>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008424:	2b00      	cmp	r3, #0
 8008426:	d05b      	beq.n	80084e0 <HAL_RCC_OscConfig+0x108>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	685b      	ldr	r3, [r3, #4]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d157      	bne.n	80084e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008430:	2301      	movs	r3, #1
 8008432:	e242      	b.n	80088ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	685b      	ldr	r3, [r3, #4]
 8008438:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800843c:	d106      	bne.n	800844c <HAL_RCC_OscConfig+0x74>
 800843e:	4b76      	ldr	r3, [pc, #472]	@ (8008618 <HAL_RCC_OscConfig+0x240>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	4a75      	ldr	r2, [pc, #468]	@ (8008618 <HAL_RCC_OscConfig+0x240>)
 8008444:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008448:	6013      	str	r3, [r2, #0]
 800844a:	e01d      	b.n	8008488 <HAL_RCC_OscConfig+0xb0>
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008454:	d10c      	bne.n	8008470 <HAL_RCC_OscConfig+0x98>
 8008456:	4b70      	ldr	r3, [pc, #448]	@ (8008618 <HAL_RCC_OscConfig+0x240>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4a6f      	ldr	r2, [pc, #444]	@ (8008618 <HAL_RCC_OscConfig+0x240>)
 800845c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008460:	6013      	str	r3, [r2, #0]
 8008462:	4b6d      	ldr	r3, [pc, #436]	@ (8008618 <HAL_RCC_OscConfig+0x240>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4a6c      	ldr	r2, [pc, #432]	@ (8008618 <HAL_RCC_OscConfig+0x240>)
 8008468:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800846c:	6013      	str	r3, [r2, #0]
 800846e:	e00b      	b.n	8008488 <HAL_RCC_OscConfig+0xb0>
 8008470:	4b69      	ldr	r3, [pc, #420]	@ (8008618 <HAL_RCC_OscConfig+0x240>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4a68      	ldr	r2, [pc, #416]	@ (8008618 <HAL_RCC_OscConfig+0x240>)
 8008476:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800847a:	6013      	str	r3, [r2, #0]
 800847c:	4b66      	ldr	r3, [pc, #408]	@ (8008618 <HAL_RCC_OscConfig+0x240>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a65      	ldr	r2, [pc, #404]	@ (8008618 <HAL_RCC_OscConfig+0x240>)
 8008482:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008486:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	685b      	ldr	r3, [r3, #4]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d013      	beq.n	80084b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008490:	f7fc fc52 	bl	8004d38 <HAL_GetTick>
 8008494:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008496:	e008      	b.n	80084aa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008498:	f7fc fc4e 	bl	8004d38 <HAL_GetTick>
 800849c:	4602      	mov	r2, r0
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	1ad3      	subs	r3, r2, r3
 80084a2:	2b64      	cmp	r3, #100	@ 0x64
 80084a4:	d901      	bls.n	80084aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80084a6:	2303      	movs	r3, #3
 80084a8:	e207      	b.n	80088ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80084aa:	4b5b      	ldr	r3, [pc, #364]	@ (8008618 <HAL_RCC_OscConfig+0x240>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d0f0      	beq.n	8008498 <HAL_RCC_OscConfig+0xc0>
 80084b6:	e014      	b.n	80084e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084b8:	f7fc fc3e 	bl	8004d38 <HAL_GetTick>
 80084bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80084be:	e008      	b.n	80084d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80084c0:	f7fc fc3a 	bl	8004d38 <HAL_GetTick>
 80084c4:	4602      	mov	r2, r0
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	1ad3      	subs	r3, r2, r3
 80084ca:	2b64      	cmp	r3, #100	@ 0x64
 80084cc:	d901      	bls.n	80084d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80084ce:	2303      	movs	r3, #3
 80084d0:	e1f3      	b.n	80088ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80084d2:	4b51      	ldr	r3, [pc, #324]	@ (8008618 <HAL_RCC_OscConfig+0x240>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d1f0      	bne.n	80084c0 <HAL_RCC_OscConfig+0xe8>
 80084de:	e000      	b.n	80084e2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80084e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f003 0302 	and.w	r3, r3, #2
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d063      	beq.n	80085b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80084ee:	4b4a      	ldr	r3, [pc, #296]	@ (8008618 <HAL_RCC_OscConfig+0x240>)
 80084f0:	689b      	ldr	r3, [r3, #8]
 80084f2:	f003 030c 	and.w	r3, r3, #12
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d00b      	beq.n	8008512 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80084fa:	4b47      	ldr	r3, [pc, #284]	@ (8008618 <HAL_RCC_OscConfig+0x240>)
 80084fc:	689b      	ldr	r3, [r3, #8]
 80084fe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8008502:	2b08      	cmp	r3, #8
 8008504:	d11c      	bne.n	8008540 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008506:	4b44      	ldr	r3, [pc, #272]	@ (8008618 <HAL_RCC_OscConfig+0x240>)
 8008508:	685b      	ldr	r3, [r3, #4]
 800850a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800850e:	2b00      	cmp	r3, #0
 8008510:	d116      	bne.n	8008540 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008512:	4b41      	ldr	r3, [pc, #260]	@ (8008618 <HAL_RCC_OscConfig+0x240>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f003 0302 	and.w	r3, r3, #2
 800851a:	2b00      	cmp	r3, #0
 800851c:	d005      	beq.n	800852a <HAL_RCC_OscConfig+0x152>
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	68db      	ldr	r3, [r3, #12]
 8008522:	2b01      	cmp	r3, #1
 8008524:	d001      	beq.n	800852a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008526:	2301      	movs	r3, #1
 8008528:	e1c7      	b.n	80088ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800852a:	4b3b      	ldr	r3, [pc, #236]	@ (8008618 <HAL_RCC_OscConfig+0x240>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	691b      	ldr	r3, [r3, #16]
 8008536:	00db      	lsls	r3, r3, #3
 8008538:	4937      	ldr	r1, [pc, #220]	@ (8008618 <HAL_RCC_OscConfig+0x240>)
 800853a:	4313      	orrs	r3, r2
 800853c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800853e:	e03a      	b.n	80085b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	68db      	ldr	r3, [r3, #12]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d020      	beq.n	800858a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008548:	4b34      	ldr	r3, [pc, #208]	@ (800861c <HAL_RCC_OscConfig+0x244>)
 800854a:	2201      	movs	r2, #1
 800854c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800854e:	f7fc fbf3 	bl	8004d38 <HAL_GetTick>
 8008552:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008554:	e008      	b.n	8008568 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008556:	f7fc fbef 	bl	8004d38 <HAL_GetTick>
 800855a:	4602      	mov	r2, r0
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	1ad3      	subs	r3, r2, r3
 8008560:	2b02      	cmp	r3, #2
 8008562:	d901      	bls.n	8008568 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008564:	2303      	movs	r3, #3
 8008566:	e1a8      	b.n	80088ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008568:	4b2b      	ldr	r3, [pc, #172]	@ (8008618 <HAL_RCC_OscConfig+0x240>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f003 0302 	and.w	r3, r3, #2
 8008570:	2b00      	cmp	r3, #0
 8008572:	d0f0      	beq.n	8008556 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008574:	4b28      	ldr	r3, [pc, #160]	@ (8008618 <HAL_RCC_OscConfig+0x240>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	691b      	ldr	r3, [r3, #16]
 8008580:	00db      	lsls	r3, r3, #3
 8008582:	4925      	ldr	r1, [pc, #148]	@ (8008618 <HAL_RCC_OscConfig+0x240>)
 8008584:	4313      	orrs	r3, r2
 8008586:	600b      	str	r3, [r1, #0]
 8008588:	e015      	b.n	80085b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800858a:	4b24      	ldr	r3, [pc, #144]	@ (800861c <HAL_RCC_OscConfig+0x244>)
 800858c:	2200      	movs	r2, #0
 800858e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008590:	f7fc fbd2 	bl	8004d38 <HAL_GetTick>
 8008594:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008596:	e008      	b.n	80085aa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008598:	f7fc fbce 	bl	8004d38 <HAL_GetTick>
 800859c:	4602      	mov	r2, r0
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	1ad3      	subs	r3, r2, r3
 80085a2:	2b02      	cmp	r3, #2
 80085a4:	d901      	bls.n	80085aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80085a6:	2303      	movs	r3, #3
 80085a8:	e187      	b.n	80088ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80085aa:	4b1b      	ldr	r3, [pc, #108]	@ (8008618 <HAL_RCC_OscConfig+0x240>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f003 0302 	and.w	r3, r3, #2
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d1f0      	bne.n	8008598 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f003 0308 	and.w	r3, r3, #8
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d036      	beq.n	8008630 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	695b      	ldr	r3, [r3, #20]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d016      	beq.n	80085f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80085ca:	4b15      	ldr	r3, [pc, #84]	@ (8008620 <HAL_RCC_OscConfig+0x248>)
 80085cc:	2201      	movs	r2, #1
 80085ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085d0:	f7fc fbb2 	bl	8004d38 <HAL_GetTick>
 80085d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80085d6:	e008      	b.n	80085ea <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80085d8:	f7fc fbae 	bl	8004d38 <HAL_GetTick>
 80085dc:	4602      	mov	r2, r0
 80085de:	693b      	ldr	r3, [r7, #16]
 80085e0:	1ad3      	subs	r3, r2, r3
 80085e2:	2b02      	cmp	r3, #2
 80085e4:	d901      	bls.n	80085ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80085e6:	2303      	movs	r3, #3
 80085e8:	e167      	b.n	80088ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80085ea:	4b0b      	ldr	r3, [pc, #44]	@ (8008618 <HAL_RCC_OscConfig+0x240>)
 80085ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80085ee:	f003 0302 	and.w	r3, r3, #2
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d0f0      	beq.n	80085d8 <HAL_RCC_OscConfig+0x200>
 80085f6:	e01b      	b.n	8008630 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80085f8:	4b09      	ldr	r3, [pc, #36]	@ (8008620 <HAL_RCC_OscConfig+0x248>)
 80085fa:	2200      	movs	r2, #0
 80085fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80085fe:	f7fc fb9b 	bl	8004d38 <HAL_GetTick>
 8008602:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008604:	e00e      	b.n	8008624 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008606:	f7fc fb97 	bl	8004d38 <HAL_GetTick>
 800860a:	4602      	mov	r2, r0
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	1ad3      	subs	r3, r2, r3
 8008610:	2b02      	cmp	r3, #2
 8008612:	d907      	bls.n	8008624 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008614:	2303      	movs	r3, #3
 8008616:	e150      	b.n	80088ba <HAL_RCC_OscConfig+0x4e2>
 8008618:	40023800 	.word	0x40023800
 800861c:	42470000 	.word	0x42470000
 8008620:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008624:	4b88      	ldr	r3, [pc, #544]	@ (8008848 <HAL_RCC_OscConfig+0x470>)
 8008626:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008628:	f003 0302 	and.w	r3, r3, #2
 800862c:	2b00      	cmp	r3, #0
 800862e:	d1ea      	bne.n	8008606 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f003 0304 	and.w	r3, r3, #4
 8008638:	2b00      	cmp	r3, #0
 800863a:	f000 8097 	beq.w	800876c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800863e:	2300      	movs	r3, #0
 8008640:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008642:	4b81      	ldr	r3, [pc, #516]	@ (8008848 <HAL_RCC_OscConfig+0x470>)
 8008644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008646:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800864a:	2b00      	cmp	r3, #0
 800864c:	d10f      	bne.n	800866e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800864e:	2300      	movs	r3, #0
 8008650:	60bb      	str	r3, [r7, #8]
 8008652:	4b7d      	ldr	r3, [pc, #500]	@ (8008848 <HAL_RCC_OscConfig+0x470>)
 8008654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008656:	4a7c      	ldr	r2, [pc, #496]	@ (8008848 <HAL_RCC_OscConfig+0x470>)
 8008658:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800865c:	6413      	str	r3, [r2, #64]	@ 0x40
 800865e:	4b7a      	ldr	r3, [pc, #488]	@ (8008848 <HAL_RCC_OscConfig+0x470>)
 8008660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008662:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008666:	60bb      	str	r3, [r7, #8]
 8008668:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800866a:	2301      	movs	r3, #1
 800866c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800866e:	4b77      	ldr	r3, [pc, #476]	@ (800884c <HAL_RCC_OscConfig+0x474>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008676:	2b00      	cmp	r3, #0
 8008678:	d118      	bne.n	80086ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800867a:	4b74      	ldr	r3, [pc, #464]	@ (800884c <HAL_RCC_OscConfig+0x474>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	4a73      	ldr	r2, [pc, #460]	@ (800884c <HAL_RCC_OscConfig+0x474>)
 8008680:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008684:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008686:	f7fc fb57 	bl	8004d38 <HAL_GetTick>
 800868a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800868c:	e008      	b.n	80086a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800868e:	f7fc fb53 	bl	8004d38 <HAL_GetTick>
 8008692:	4602      	mov	r2, r0
 8008694:	693b      	ldr	r3, [r7, #16]
 8008696:	1ad3      	subs	r3, r2, r3
 8008698:	2b02      	cmp	r3, #2
 800869a:	d901      	bls.n	80086a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800869c:	2303      	movs	r3, #3
 800869e:	e10c      	b.n	80088ba <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80086a0:	4b6a      	ldr	r3, [pc, #424]	@ (800884c <HAL_RCC_OscConfig+0x474>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d0f0      	beq.n	800868e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	689b      	ldr	r3, [r3, #8]
 80086b0:	2b01      	cmp	r3, #1
 80086b2:	d106      	bne.n	80086c2 <HAL_RCC_OscConfig+0x2ea>
 80086b4:	4b64      	ldr	r3, [pc, #400]	@ (8008848 <HAL_RCC_OscConfig+0x470>)
 80086b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086b8:	4a63      	ldr	r2, [pc, #396]	@ (8008848 <HAL_RCC_OscConfig+0x470>)
 80086ba:	f043 0301 	orr.w	r3, r3, #1
 80086be:	6713      	str	r3, [r2, #112]	@ 0x70
 80086c0:	e01c      	b.n	80086fc <HAL_RCC_OscConfig+0x324>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	689b      	ldr	r3, [r3, #8]
 80086c6:	2b05      	cmp	r3, #5
 80086c8:	d10c      	bne.n	80086e4 <HAL_RCC_OscConfig+0x30c>
 80086ca:	4b5f      	ldr	r3, [pc, #380]	@ (8008848 <HAL_RCC_OscConfig+0x470>)
 80086cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086ce:	4a5e      	ldr	r2, [pc, #376]	@ (8008848 <HAL_RCC_OscConfig+0x470>)
 80086d0:	f043 0304 	orr.w	r3, r3, #4
 80086d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80086d6:	4b5c      	ldr	r3, [pc, #368]	@ (8008848 <HAL_RCC_OscConfig+0x470>)
 80086d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086da:	4a5b      	ldr	r2, [pc, #364]	@ (8008848 <HAL_RCC_OscConfig+0x470>)
 80086dc:	f043 0301 	orr.w	r3, r3, #1
 80086e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80086e2:	e00b      	b.n	80086fc <HAL_RCC_OscConfig+0x324>
 80086e4:	4b58      	ldr	r3, [pc, #352]	@ (8008848 <HAL_RCC_OscConfig+0x470>)
 80086e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086e8:	4a57      	ldr	r2, [pc, #348]	@ (8008848 <HAL_RCC_OscConfig+0x470>)
 80086ea:	f023 0301 	bic.w	r3, r3, #1
 80086ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80086f0:	4b55      	ldr	r3, [pc, #340]	@ (8008848 <HAL_RCC_OscConfig+0x470>)
 80086f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086f4:	4a54      	ldr	r2, [pc, #336]	@ (8008848 <HAL_RCC_OscConfig+0x470>)
 80086f6:	f023 0304 	bic.w	r3, r3, #4
 80086fa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	689b      	ldr	r3, [r3, #8]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d015      	beq.n	8008730 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008704:	f7fc fb18 	bl	8004d38 <HAL_GetTick>
 8008708:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800870a:	e00a      	b.n	8008722 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800870c:	f7fc fb14 	bl	8004d38 <HAL_GetTick>
 8008710:	4602      	mov	r2, r0
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	1ad3      	subs	r3, r2, r3
 8008716:	f241 3288 	movw	r2, #5000	@ 0x1388
 800871a:	4293      	cmp	r3, r2
 800871c:	d901      	bls.n	8008722 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800871e:	2303      	movs	r3, #3
 8008720:	e0cb      	b.n	80088ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008722:	4b49      	ldr	r3, [pc, #292]	@ (8008848 <HAL_RCC_OscConfig+0x470>)
 8008724:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008726:	f003 0302 	and.w	r3, r3, #2
 800872a:	2b00      	cmp	r3, #0
 800872c:	d0ee      	beq.n	800870c <HAL_RCC_OscConfig+0x334>
 800872e:	e014      	b.n	800875a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008730:	f7fc fb02 	bl	8004d38 <HAL_GetTick>
 8008734:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008736:	e00a      	b.n	800874e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008738:	f7fc fafe 	bl	8004d38 <HAL_GetTick>
 800873c:	4602      	mov	r2, r0
 800873e:	693b      	ldr	r3, [r7, #16]
 8008740:	1ad3      	subs	r3, r2, r3
 8008742:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008746:	4293      	cmp	r3, r2
 8008748:	d901      	bls.n	800874e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800874a:	2303      	movs	r3, #3
 800874c:	e0b5      	b.n	80088ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800874e:	4b3e      	ldr	r3, [pc, #248]	@ (8008848 <HAL_RCC_OscConfig+0x470>)
 8008750:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008752:	f003 0302 	and.w	r3, r3, #2
 8008756:	2b00      	cmp	r3, #0
 8008758:	d1ee      	bne.n	8008738 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800875a:	7dfb      	ldrb	r3, [r7, #23]
 800875c:	2b01      	cmp	r3, #1
 800875e:	d105      	bne.n	800876c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008760:	4b39      	ldr	r3, [pc, #228]	@ (8008848 <HAL_RCC_OscConfig+0x470>)
 8008762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008764:	4a38      	ldr	r2, [pc, #224]	@ (8008848 <HAL_RCC_OscConfig+0x470>)
 8008766:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800876a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	699b      	ldr	r3, [r3, #24]
 8008770:	2b00      	cmp	r3, #0
 8008772:	f000 80a1 	beq.w	80088b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008776:	4b34      	ldr	r3, [pc, #208]	@ (8008848 <HAL_RCC_OscConfig+0x470>)
 8008778:	689b      	ldr	r3, [r3, #8]
 800877a:	f003 030c 	and.w	r3, r3, #12
 800877e:	2b08      	cmp	r3, #8
 8008780:	d05c      	beq.n	800883c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	699b      	ldr	r3, [r3, #24]
 8008786:	2b02      	cmp	r3, #2
 8008788:	d141      	bne.n	800880e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800878a:	4b31      	ldr	r3, [pc, #196]	@ (8008850 <HAL_RCC_OscConfig+0x478>)
 800878c:	2200      	movs	r2, #0
 800878e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008790:	f7fc fad2 	bl	8004d38 <HAL_GetTick>
 8008794:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008796:	e008      	b.n	80087aa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008798:	f7fc face 	bl	8004d38 <HAL_GetTick>
 800879c:	4602      	mov	r2, r0
 800879e:	693b      	ldr	r3, [r7, #16]
 80087a0:	1ad3      	subs	r3, r2, r3
 80087a2:	2b02      	cmp	r3, #2
 80087a4:	d901      	bls.n	80087aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80087a6:	2303      	movs	r3, #3
 80087a8:	e087      	b.n	80088ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80087aa:	4b27      	ldr	r3, [pc, #156]	@ (8008848 <HAL_RCC_OscConfig+0x470>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d1f0      	bne.n	8008798 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	69da      	ldr	r2, [r3, #28]
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6a1b      	ldr	r3, [r3, #32]
 80087be:	431a      	orrs	r2, r3
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087c4:	019b      	lsls	r3, r3, #6
 80087c6:	431a      	orrs	r2, r3
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087cc:	085b      	lsrs	r3, r3, #1
 80087ce:	3b01      	subs	r3, #1
 80087d0:	041b      	lsls	r3, r3, #16
 80087d2:	431a      	orrs	r2, r3
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087d8:	061b      	lsls	r3, r3, #24
 80087da:	491b      	ldr	r1, [pc, #108]	@ (8008848 <HAL_RCC_OscConfig+0x470>)
 80087dc:	4313      	orrs	r3, r2
 80087de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80087e0:	4b1b      	ldr	r3, [pc, #108]	@ (8008850 <HAL_RCC_OscConfig+0x478>)
 80087e2:	2201      	movs	r2, #1
 80087e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80087e6:	f7fc faa7 	bl	8004d38 <HAL_GetTick>
 80087ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80087ec:	e008      	b.n	8008800 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80087ee:	f7fc faa3 	bl	8004d38 <HAL_GetTick>
 80087f2:	4602      	mov	r2, r0
 80087f4:	693b      	ldr	r3, [r7, #16]
 80087f6:	1ad3      	subs	r3, r2, r3
 80087f8:	2b02      	cmp	r3, #2
 80087fa:	d901      	bls.n	8008800 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80087fc:	2303      	movs	r3, #3
 80087fe:	e05c      	b.n	80088ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008800:	4b11      	ldr	r3, [pc, #68]	@ (8008848 <HAL_RCC_OscConfig+0x470>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008808:	2b00      	cmp	r3, #0
 800880a:	d0f0      	beq.n	80087ee <HAL_RCC_OscConfig+0x416>
 800880c:	e054      	b.n	80088b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800880e:	4b10      	ldr	r3, [pc, #64]	@ (8008850 <HAL_RCC_OscConfig+0x478>)
 8008810:	2200      	movs	r2, #0
 8008812:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008814:	f7fc fa90 	bl	8004d38 <HAL_GetTick>
 8008818:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800881a:	e008      	b.n	800882e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800881c:	f7fc fa8c 	bl	8004d38 <HAL_GetTick>
 8008820:	4602      	mov	r2, r0
 8008822:	693b      	ldr	r3, [r7, #16]
 8008824:	1ad3      	subs	r3, r2, r3
 8008826:	2b02      	cmp	r3, #2
 8008828:	d901      	bls.n	800882e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800882a:	2303      	movs	r3, #3
 800882c:	e045      	b.n	80088ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800882e:	4b06      	ldr	r3, [pc, #24]	@ (8008848 <HAL_RCC_OscConfig+0x470>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008836:	2b00      	cmp	r3, #0
 8008838:	d1f0      	bne.n	800881c <HAL_RCC_OscConfig+0x444>
 800883a:	e03d      	b.n	80088b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	699b      	ldr	r3, [r3, #24]
 8008840:	2b01      	cmp	r3, #1
 8008842:	d107      	bne.n	8008854 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008844:	2301      	movs	r3, #1
 8008846:	e038      	b.n	80088ba <HAL_RCC_OscConfig+0x4e2>
 8008848:	40023800 	.word	0x40023800
 800884c:	40007000 	.word	0x40007000
 8008850:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008854:	4b1b      	ldr	r3, [pc, #108]	@ (80088c4 <HAL_RCC_OscConfig+0x4ec>)
 8008856:	685b      	ldr	r3, [r3, #4]
 8008858:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	699b      	ldr	r3, [r3, #24]
 800885e:	2b01      	cmp	r3, #1
 8008860:	d028      	beq.n	80088b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800886c:	429a      	cmp	r2, r3
 800886e:	d121      	bne.n	80088b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800887a:	429a      	cmp	r2, r3
 800887c:	d11a      	bne.n	80088b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800887e:	68fa      	ldr	r2, [r7, #12]
 8008880:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008884:	4013      	ands	r3, r2
 8008886:	687a      	ldr	r2, [r7, #4]
 8008888:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800888a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800888c:	4293      	cmp	r3, r2
 800888e:	d111      	bne.n	80088b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800889a:	085b      	lsrs	r3, r3, #1
 800889c:	3b01      	subs	r3, #1
 800889e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80088a0:	429a      	cmp	r2, r3
 80088a2:	d107      	bne.n	80088b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80088b0:	429a      	cmp	r2, r3
 80088b2:	d001      	beq.n	80088b8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80088b4:	2301      	movs	r3, #1
 80088b6:	e000      	b.n	80088ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80088b8:	2300      	movs	r3, #0
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3718      	adds	r7, #24
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}
 80088c2:	bf00      	nop
 80088c4:	40023800 	.word	0x40023800

080088c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b084      	sub	sp, #16
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
 80088d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d101      	bne.n	80088dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80088d8:	2301      	movs	r3, #1
 80088da:	e0cc      	b.n	8008a76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80088dc:	4b68      	ldr	r3, [pc, #416]	@ (8008a80 <HAL_RCC_ClockConfig+0x1b8>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f003 0307 	and.w	r3, r3, #7
 80088e4:	683a      	ldr	r2, [r7, #0]
 80088e6:	429a      	cmp	r2, r3
 80088e8:	d90c      	bls.n	8008904 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80088ea:	4b65      	ldr	r3, [pc, #404]	@ (8008a80 <HAL_RCC_ClockConfig+0x1b8>)
 80088ec:	683a      	ldr	r2, [r7, #0]
 80088ee:	b2d2      	uxtb	r2, r2
 80088f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80088f2:	4b63      	ldr	r3, [pc, #396]	@ (8008a80 <HAL_RCC_ClockConfig+0x1b8>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f003 0307 	and.w	r3, r3, #7
 80088fa:	683a      	ldr	r2, [r7, #0]
 80088fc:	429a      	cmp	r2, r3
 80088fe:	d001      	beq.n	8008904 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008900:	2301      	movs	r3, #1
 8008902:	e0b8      	b.n	8008a76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f003 0302 	and.w	r3, r3, #2
 800890c:	2b00      	cmp	r3, #0
 800890e:	d020      	beq.n	8008952 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f003 0304 	and.w	r3, r3, #4
 8008918:	2b00      	cmp	r3, #0
 800891a:	d005      	beq.n	8008928 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800891c:	4b59      	ldr	r3, [pc, #356]	@ (8008a84 <HAL_RCC_ClockConfig+0x1bc>)
 800891e:	689b      	ldr	r3, [r3, #8]
 8008920:	4a58      	ldr	r2, [pc, #352]	@ (8008a84 <HAL_RCC_ClockConfig+0x1bc>)
 8008922:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008926:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f003 0308 	and.w	r3, r3, #8
 8008930:	2b00      	cmp	r3, #0
 8008932:	d005      	beq.n	8008940 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008934:	4b53      	ldr	r3, [pc, #332]	@ (8008a84 <HAL_RCC_ClockConfig+0x1bc>)
 8008936:	689b      	ldr	r3, [r3, #8]
 8008938:	4a52      	ldr	r2, [pc, #328]	@ (8008a84 <HAL_RCC_ClockConfig+0x1bc>)
 800893a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800893e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008940:	4b50      	ldr	r3, [pc, #320]	@ (8008a84 <HAL_RCC_ClockConfig+0x1bc>)
 8008942:	689b      	ldr	r3, [r3, #8]
 8008944:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	689b      	ldr	r3, [r3, #8]
 800894c:	494d      	ldr	r1, [pc, #308]	@ (8008a84 <HAL_RCC_ClockConfig+0x1bc>)
 800894e:	4313      	orrs	r3, r2
 8008950:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f003 0301 	and.w	r3, r3, #1
 800895a:	2b00      	cmp	r3, #0
 800895c:	d044      	beq.n	80089e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	685b      	ldr	r3, [r3, #4]
 8008962:	2b01      	cmp	r3, #1
 8008964:	d107      	bne.n	8008976 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008966:	4b47      	ldr	r3, [pc, #284]	@ (8008a84 <HAL_RCC_ClockConfig+0x1bc>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800896e:	2b00      	cmp	r3, #0
 8008970:	d119      	bne.n	80089a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008972:	2301      	movs	r3, #1
 8008974:	e07f      	b.n	8008a76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	685b      	ldr	r3, [r3, #4]
 800897a:	2b02      	cmp	r3, #2
 800897c:	d003      	beq.n	8008986 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008982:	2b03      	cmp	r3, #3
 8008984:	d107      	bne.n	8008996 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008986:	4b3f      	ldr	r3, [pc, #252]	@ (8008a84 <HAL_RCC_ClockConfig+0x1bc>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800898e:	2b00      	cmp	r3, #0
 8008990:	d109      	bne.n	80089a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008992:	2301      	movs	r3, #1
 8008994:	e06f      	b.n	8008a76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008996:	4b3b      	ldr	r3, [pc, #236]	@ (8008a84 <HAL_RCC_ClockConfig+0x1bc>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f003 0302 	and.w	r3, r3, #2
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d101      	bne.n	80089a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80089a2:	2301      	movs	r3, #1
 80089a4:	e067      	b.n	8008a76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80089a6:	4b37      	ldr	r3, [pc, #220]	@ (8008a84 <HAL_RCC_ClockConfig+0x1bc>)
 80089a8:	689b      	ldr	r3, [r3, #8]
 80089aa:	f023 0203 	bic.w	r2, r3, #3
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	685b      	ldr	r3, [r3, #4]
 80089b2:	4934      	ldr	r1, [pc, #208]	@ (8008a84 <HAL_RCC_ClockConfig+0x1bc>)
 80089b4:	4313      	orrs	r3, r2
 80089b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80089b8:	f7fc f9be 	bl	8004d38 <HAL_GetTick>
 80089bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80089be:	e00a      	b.n	80089d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80089c0:	f7fc f9ba 	bl	8004d38 <HAL_GetTick>
 80089c4:	4602      	mov	r2, r0
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	1ad3      	subs	r3, r2, r3
 80089ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d901      	bls.n	80089d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80089d2:	2303      	movs	r3, #3
 80089d4:	e04f      	b.n	8008a76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80089d6:	4b2b      	ldr	r3, [pc, #172]	@ (8008a84 <HAL_RCC_ClockConfig+0x1bc>)
 80089d8:	689b      	ldr	r3, [r3, #8]
 80089da:	f003 020c 	and.w	r2, r3, #12
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	685b      	ldr	r3, [r3, #4]
 80089e2:	009b      	lsls	r3, r3, #2
 80089e4:	429a      	cmp	r2, r3
 80089e6:	d1eb      	bne.n	80089c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80089e8:	4b25      	ldr	r3, [pc, #148]	@ (8008a80 <HAL_RCC_ClockConfig+0x1b8>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f003 0307 	and.w	r3, r3, #7
 80089f0:	683a      	ldr	r2, [r7, #0]
 80089f2:	429a      	cmp	r2, r3
 80089f4:	d20c      	bcs.n	8008a10 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80089f6:	4b22      	ldr	r3, [pc, #136]	@ (8008a80 <HAL_RCC_ClockConfig+0x1b8>)
 80089f8:	683a      	ldr	r2, [r7, #0]
 80089fa:	b2d2      	uxtb	r2, r2
 80089fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80089fe:	4b20      	ldr	r3, [pc, #128]	@ (8008a80 <HAL_RCC_ClockConfig+0x1b8>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f003 0307 	and.w	r3, r3, #7
 8008a06:	683a      	ldr	r2, [r7, #0]
 8008a08:	429a      	cmp	r2, r3
 8008a0a:	d001      	beq.n	8008a10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	e032      	b.n	8008a76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f003 0304 	and.w	r3, r3, #4
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d008      	beq.n	8008a2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008a1c:	4b19      	ldr	r3, [pc, #100]	@ (8008a84 <HAL_RCC_ClockConfig+0x1bc>)
 8008a1e:	689b      	ldr	r3, [r3, #8]
 8008a20:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	68db      	ldr	r3, [r3, #12]
 8008a28:	4916      	ldr	r1, [pc, #88]	@ (8008a84 <HAL_RCC_ClockConfig+0x1bc>)
 8008a2a:	4313      	orrs	r3, r2
 8008a2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f003 0308 	and.w	r3, r3, #8
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d009      	beq.n	8008a4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008a3a:	4b12      	ldr	r3, [pc, #72]	@ (8008a84 <HAL_RCC_ClockConfig+0x1bc>)
 8008a3c:	689b      	ldr	r3, [r3, #8]
 8008a3e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	691b      	ldr	r3, [r3, #16]
 8008a46:	00db      	lsls	r3, r3, #3
 8008a48:	490e      	ldr	r1, [pc, #56]	@ (8008a84 <HAL_RCC_ClockConfig+0x1bc>)
 8008a4a:	4313      	orrs	r3, r2
 8008a4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008a4e:	f000 f821 	bl	8008a94 <HAL_RCC_GetSysClockFreq>
 8008a52:	4602      	mov	r2, r0
 8008a54:	4b0b      	ldr	r3, [pc, #44]	@ (8008a84 <HAL_RCC_ClockConfig+0x1bc>)
 8008a56:	689b      	ldr	r3, [r3, #8]
 8008a58:	091b      	lsrs	r3, r3, #4
 8008a5a:	f003 030f 	and.w	r3, r3, #15
 8008a5e:	490a      	ldr	r1, [pc, #40]	@ (8008a88 <HAL_RCC_ClockConfig+0x1c0>)
 8008a60:	5ccb      	ldrb	r3, [r1, r3]
 8008a62:	fa22 f303 	lsr.w	r3, r2, r3
 8008a66:	4a09      	ldr	r2, [pc, #36]	@ (8008a8c <HAL_RCC_ClockConfig+0x1c4>)
 8008a68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8008a6a:	4b09      	ldr	r3, [pc, #36]	@ (8008a90 <HAL_RCC_ClockConfig+0x1c8>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f7fb f84e 	bl	8003b10 <HAL_InitTick>

  return HAL_OK;
 8008a74:	2300      	movs	r3, #0
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3710      	adds	r7, #16
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}
 8008a7e:	bf00      	nop
 8008a80:	40023c00 	.word	0x40023c00
 8008a84:	40023800 	.word	0x40023800
 8008a88:	08023db4 	.word	0x08023db4
 8008a8c:	20000008 	.word	0x20000008
 8008a90:	2000000c 	.word	0x2000000c

08008a94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008a94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a98:	b090      	sub	sp, #64	@ 0x40
 8008a9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008aac:	4b59      	ldr	r3, [pc, #356]	@ (8008c14 <HAL_RCC_GetSysClockFreq+0x180>)
 8008aae:	689b      	ldr	r3, [r3, #8]
 8008ab0:	f003 030c 	and.w	r3, r3, #12
 8008ab4:	2b08      	cmp	r3, #8
 8008ab6:	d00d      	beq.n	8008ad4 <HAL_RCC_GetSysClockFreq+0x40>
 8008ab8:	2b08      	cmp	r3, #8
 8008aba:	f200 80a1 	bhi.w	8008c00 <HAL_RCC_GetSysClockFreq+0x16c>
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d002      	beq.n	8008ac8 <HAL_RCC_GetSysClockFreq+0x34>
 8008ac2:	2b04      	cmp	r3, #4
 8008ac4:	d003      	beq.n	8008ace <HAL_RCC_GetSysClockFreq+0x3a>
 8008ac6:	e09b      	b.n	8008c00 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008ac8:	4b53      	ldr	r3, [pc, #332]	@ (8008c18 <HAL_RCC_GetSysClockFreq+0x184>)
 8008aca:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008acc:	e09b      	b.n	8008c06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008ace:	4b53      	ldr	r3, [pc, #332]	@ (8008c1c <HAL_RCC_GetSysClockFreq+0x188>)
 8008ad0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008ad2:	e098      	b.n	8008c06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008ad4:	4b4f      	ldr	r3, [pc, #316]	@ (8008c14 <HAL_RCC_GetSysClockFreq+0x180>)
 8008ad6:	685b      	ldr	r3, [r3, #4]
 8008ad8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008adc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008ade:	4b4d      	ldr	r3, [pc, #308]	@ (8008c14 <HAL_RCC_GetSysClockFreq+0x180>)
 8008ae0:	685b      	ldr	r3, [r3, #4]
 8008ae2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d028      	beq.n	8008b3c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008aea:	4b4a      	ldr	r3, [pc, #296]	@ (8008c14 <HAL_RCC_GetSysClockFreq+0x180>)
 8008aec:	685b      	ldr	r3, [r3, #4]
 8008aee:	099b      	lsrs	r3, r3, #6
 8008af0:	2200      	movs	r2, #0
 8008af2:	623b      	str	r3, [r7, #32]
 8008af4:	627a      	str	r2, [r7, #36]	@ 0x24
 8008af6:	6a3b      	ldr	r3, [r7, #32]
 8008af8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008afc:	2100      	movs	r1, #0
 8008afe:	4b47      	ldr	r3, [pc, #284]	@ (8008c1c <HAL_RCC_GetSysClockFreq+0x188>)
 8008b00:	fb03 f201 	mul.w	r2, r3, r1
 8008b04:	2300      	movs	r3, #0
 8008b06:	fb00 f303 	mul.w	r3, r0, r3
 8008b0a:	4413      	add	r3, r2
 8008b0c:	4a43      	ldr	r2, [pc, #268]	@ (8008c1c <HAL_RCC_GetSysClockFreq+0x188>)
 8008b0e:	fba0 1202 	umull	r1, r2, r0, r2
 8008b12:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008b14:	460a      	mov	r2, r1
 8008b16:	62ba      	str	r2, [r7, #40]	@ 0x28
 8008b18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b1a:	4413      	add	r3, r2
 8008b1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008b1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b20:	2200      	movs	r2, #0
 8008b22:	61bb      	str	r3, [r7, #24]
 8008b24:	61fa      	str	r2, [r7, #28]
 8008b26:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008b2a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8008b2e:	f7f7 fba7 	bl	8000280 <__aeabi_uldivmod>
 8008b32:	4602      	mov	r2, r0
 8008b34:	460b      	mov	r3, r1
 8008b36:	4613      	mov	r3, r2
 8008b38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b3a:	e053      	b.n	8008be4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008b3c:	4b35      	ldr	r3, [pc, #212]	@ (8008c14 <HAL_RCC_GetSysClockFreq+0x180>)
 8008b3e:	685b      	ldr	r3, [r3, #4]
 8008b40:	099b      	lsrs	r3, r3, #6
 8008b42:	2200      	movs	r2, #0
 8008b44:	613b      	str	r3, [r7, #16]
 8008b46:	617a      	str	r2, [r7, #20]
 8008b48:	693b      	ldr	r3, [r7, #16]
 8008b4a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008b4e:	f04f 0b00 	mov.w	fp, #0
 8008b52:	4652      	mov	r2, sl
 8008b54:	465b      	mov	r3, fp
 8008b56:	f04f 0000 	mov.w	r0, #0
 8008b5a:	f04f 0100 	mov.w	r1, #0
 8008b5e:	0159      	lsls	r1, r3, #5
 8008b60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008b64:	0150      	lsls	r0, r2, #5
 8008b66:	4602      	mov	r2, r0
 8008b68:	460b      	mov	r3, r1
 8008b6a:	ebb2 080a 	subs.w	r8, r2, sl
 8008b6e:	eb63 090b 	sbc.w	r9, r3, fp
 8008b72:	f04f 0200 	mov.w	r2, #0
 8008b76:	f04f 0300 	mov.w	r3, #0
 8008b7a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008b7e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008b82:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008b86:	ebb2 0408 	subs.w	r4, r2, r8
 8008b8a:	eb63 0509 	sbc.w	r5, r3, r9
 8008b8e:	f04f 0200 	mov.w	r2, #0
 8008b92:	f04f 0300 	mov.w	r3, #0
 8008b96:	00eb      	lsls	r3, r5, #3
 8008b98:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008b9c:	00e2      	lsls	r2, r4, #3
 8008b9e:	4614      	mov	r4, r2
 8008ba0:	461d      	mov	r5, r3
 8008ba2:	eb14 030a 	adds.w	r3, r4, sl
 8008ba6:	603b      	str	r3, [r7, #0]
 8008ba8:	eb45 030b 	adc.w	r3, r5, fp
 8008bac:	607b      	str	r3, [r7, #4]
 8008bae:	f04f 0200 	mov.w	r2, #0
 8008bb2:	f04f 0300 	mov.w	r3, #0
 8008bb6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008bba:	4629      	mov	r1, r5
 8008bbc:	028b      	lsls	r3, r1, #10
 8008bbe:	4621      	mov	r1, r4
 8008bc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008bc4:	4621      	mov	r1, r4
 8008bc6:	028a      	lsls	r2, r1, #10
 8008bc8:	4610      	mov	r0, r2
 8008bca:	4619      	mov	r1, r3
 8008bcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bce:	2200      	movs	r2, #0
 8008bd0:	60bb      	str	r3, [r7, #8]
 8008bd2:	60fa      	str	r2, [r7, #12]
 8008bd4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008bd8:	f7f7 fb52 	bl	8000280 <__aeabi_uldivmod>
 8008bdc:	4602      	mov	r2, r0
 8008bde:	460b      	mov	r3, r1
 8008be0:	4613      	mov	r3, r2
 8008be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8008be4:	4b0b      	ldr	r3, [pc, #44]	@ (8008c14 <HAL_RCC_GetSysClockFreq+0x180>)
 8008be6:	685b      	ldr	r3, [r3, #4]
 8008be8:	0c1b      	lsrs	r3, r3, #16
 8008bea:	f003 0303 	and.w	r3, r3, #3
 8008bee:	3301      	adds	r3, #1
 8008bf0:	005b      	lsls	r3, r3, #1
 8008bf2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8008bf4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bfc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008bfe:	e002      	b.n	8008c06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008c00:	4b05      	ldr	r3, [pc, #20]	@ (8008c18 <HAL_RCC_GetSysClockFreq+0x184>)
 8008c02:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008c04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008c06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	3740      	adds	r7, #64	@ 0x40
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008c12:	bf00      	nop
 8008c14:	40023800 	.word	0x40023800
 8008c18:	00f42400 	.word	0x00f42400
 8008c1c:	017d7840 	.word	0x017d7840

08008c20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008c20:	b480      	push	{r7}
 8008c22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008c24:	4b03      	ldr	r3, [pc, #12]	@ (8008c34 <HAL_RCC_GetHCLKFreq+0x14>)
 8008c26:	681b      	ldr	r3, [r3, #0]
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c30:	4770      	bx	lr
 8008c32:	bf00      	nop
 8008c34:	20000008 	.word	0x20000008

08008c38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008c3c:	f7ff fff0 	bl	8008c20 <HAL_RCC_GetHCLKFreq>
 8008c40:	4602      	mov	r2, r0
 8008c42:	4b05      	ldr	r3, [pc, #20]	@ (8008c58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008c44:	689b      	ldr	r3, [r3, #8]
 8008c46:	0a9b      	lsrs	r3, r3, #10
 8008c48:	f003 0307 	and.w	r3, r3, #7
 8008c4c:	4903      	ldr	r1, [pc, #12]	@ (8008c5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008c4e:	5ccb      	ldrb	r3, [r1, r3]
 8008c50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	bd80      	pop	{r7, pc}
 8008c58:	40023800 	.word	0x40023800
 8008c5c:	08023dc4 	.word	0x08023dc4

08008c60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008c64:	f7ff ffdc 	bl	8008c20 <HAL_RCC_GetHCLKFreq>
 8008c68:	4602      	mov	r2, r0
 8008c6a:	4b05      	ldr	r3, [pc, #20]	@ (8008c80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008c6c:	689b      	ldr	r3, [r3, #8]
 8008c6e:	0b5b      	lsrs	r3, r3, #13
 8008c70:	f003 0307 	and.w	r3, r3, #7
 8008c74:	4903      	ldr	r1, [pc, #12]	@ (8008c84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008c76:	5ccb      	ldrb	r3, [r1, r3]
 8008c78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	bd80      	pop	{r7, pc}
 8008c80:	40023800 	.word	0x40023800
 8008c84:	08023dc4 	.word	0x08023dc4

08008c88 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b083      	sub	sp, #12
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
 8008c90:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	220f      	movs	r2, #15
 8008c96:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008c98:	4b12      	ldr	r3, [pc, #72]	@ (8008ce4 <HAL_RCC_GetClockConfig+0x5c>)
 8008c9a:	689b      	ldr	r3, [r3, #8]
 8008c9c:	f003 0203 	and.w	r2, r3, #3
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008ca4:	4b0f      	ldr	r3, [pc, #60]	@ (8008ce4 <HAL_RCC_GetClockConfig+0x5c>)
 8008ca6:	689b      	ldr	r3, [r3, #8]
 8008ca8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008cb0:	4b0c      	ldr	r3, [pc, #48]	@ (8008ce4 <HAL_RCC_GetClockConfig+0x5c>)
 8008cb2:	689b      	ldr	r3, [r3, #8]
 8008cb4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008cbc:	4b09      	ldr	r3, [pc, #36]	@ (8008ce4 <HAL_RCC_GetClockConfig+0x5c>)
 8008cbe:	689b      	ldr	r3, [r3, #8]
 8008cc0:	08db      	lsrs	r3, r3, #3
 8008cc2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008cca:	4b07      	ldr	r3, [pc, #28]	@ (8008ce8 <HAL_RCC_GetClockConfig+0x60>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f003 0207 	and.w	r2, r3, #7
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	601a      	str	r2, [r3, #0]
}
 8008cd6:	bf00      	nop
 8008cd8:	370c      	adds	r7, #12
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce0:	4770      	bx	lr
 8008ce2:	bf00      	nop
 8008ce4:	40023800 	.word	0x40023800
 8008ce8:	40023c00 	.word	0x40023c00

08008cec <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b084      	sub	sp, #16
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	60f8      	str	r0, [r7, #12]
 8008cf4:	60b9      	str	r1, [r7, #8]
 8008cf6:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d101      	bne.n	8008d02 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8008cfe:	2301      	movs	r3, #1
 8008d00:	e038      	b.n	8008d74 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8008d08:	b2db      	uxtb	r3, r3
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d106      	bne.n	8008d1c <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	2200      	movs	r2, #0
 8008d12:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8008d16:	68f8      	ldr	r0, [r7, #12]
 8008d18:	f7f9 f8f0 	bl	8001efc <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	681a      	ldr	r2, [r3, #0]
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	3308      	adds	r3, #8
 8008d24:	4619      	mov	r1, r3
 8008d26:	4610      	mov	r0, r2
 8008d28:	f001 fe5e 	bl	800a9e8 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	6818      	ldr	r0, [r3, #0]
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	689b      	ldr	r3, [r3, #8]
 8008d34:	461a      	mov	r2, r3
 8008d36:	68b9      	ldr	r1, [r7, #8]
 8008d38:	f001 fec0 	bl	800aabc <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	6858      	ldr	r0, [r3, #4]
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	689a      	ldr	r2, [r3, #8]
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d48:	6879      	ldr	r1, [r7, #4]
 8008d4a:	f001 fee5 	bl	800ab18 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	68fa      	ldr	r2, [r7, #12]
 8008d54:	6892      	ldr	r2, [r2, #8]
 8008d56:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	68fa      	ldr	r2, [r7, #12]
 8008d60:	6892      	ldr	r2, [r2, #8]
 8008d62:	f041 0101 	orr.w	r1, r1, #1
 8008d66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	2201      	movs	r2, #1
 8008d6e:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 8008d72:	2300      	movs	r3, #0
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	3710      	adds	r7, #16
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}

08008d7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b082      	sub	sp, #8
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d101      	bne.n	8008d8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	e041      	b.n	8008e12 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008d94:	b2db      	uxtb	r3, r3
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d106      	bne.n	8008da8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f7fb fbc0 	bl	8004528 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2202      	movs	r2, #2
 8008dac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681a      	ldr	r2, [r3, #0]
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	3304      	adds	r3, #4
 8008db8:	4619      	mov	r1, r3
 8008dba:	4610      	mov	r0, r2
 8008dbc:	f000 f9b6 	bl	800912c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2201      	movs	r2, #1
 8008dcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2201      	movs	r2, #1
 8008dd4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2201      	movs	r2, #1
 8008ddc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2201      	movs	r2, #1
 8008de4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2201      	movs	r2, #1
 8008dec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2201      	movs	r2, #1
 8008df4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2201      	movs	r2, #1
 8008dfc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2201      	movs	r2, #1
 8008e04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2201      	movs	r2, #1
 8008e0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008e10:	2300      	movs	r3, #0
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	3708      	adds	r7, #8
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}
	...

08008e1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b085      	sub	sp, #20
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008e2a:	b2db      	uxtb	r3, r3
 8008e2c:	2b01      	cmp	r3, #1
 8008e2e:	d001      	beq.n	8008e34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008e30:	2301      	movs	r3, #1
 8008e32:	e04e      	b.n	8008ed2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2202      	movs	r2, #2
 8008e38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	68da      	ldr	r2, [r3, #12]
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f042 0201 	orr.w	r2, r2, #1
 8008e4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	4a23      	ldr	r2, [pc, #140]	@ (8008ee0 <HAL_TIM_Base_Start_IT+0xc4>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d022      	beq.n	8008e9c <HAL_TIM_Base_Start_IT+0x80>
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e5e:	d01d      	beq.n	8008e9c <HAL_TIM_Base_Start_IT+0x80>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	4a1f      	ldr	r2, [pc, #124]	@ (8008ee4 <HAL_TIM_Base_Start_IT+0xc8>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d018      	beq.n	8008e9c <HAL_TIM_Base_Start_IT+0x80>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	4a1e      	ldr	r2, [pc, #120]	@ (8008ee8 <HAL_TIM_Base_Start_IT+0xcc>)
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d013      	beq.n	8008e9c <HAL_TIM_Base_Start_IT+0x80>
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	4a1c      	ldr	r2, [pc, #112]	@ (8008eec <HAL_TIM_Base_Start_IT+0xd0>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d00e      	beq.n	8008e9c <HAL_TIM_Base_Start_IT+0x80>
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	4a1b      	ldr	r2, [pc, #108]	@ (8008ef0 <HAL_TIM_Base_Start_IT+0xd4>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d009      	beq.n	8008e9c <HAL_TIM_Base_Start_IT+0x80>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	4a19      	ldr	r2, [pc, #100]	@ (8008ef4 <HAL_TIM_Base_Start_IT+0xd8>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d004      	beq.n	8008e9c <HAL_TIM_Base_Start_IT+0x80>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	4a18      	ldr	r2, [pc, #96]	@ (8008ef8 <HAL_TIM_Base_Start_IT+0xdc>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d111      	bne.n	8008ec0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	689b      	ldr	r3, [r3, #8]
 8008ea2:	f003 0307 	and.w	r3, r3, #7
 8008ea6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	2b06      	cmp	r3, #6
 8008eac:	d010      	beq.n	8008ed0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	681a      	ldr	r2, [r3, #0]
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f042 0201 	orr.w	r2, r2, #1
 8008ebc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ebe:	e007      	b.n	8008ed0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	681a      	ldr	r2, [r3, #0]
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f042 0201 	orr.w	r2, r2, #1
 8008ece:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008ed0:	2300      	movs	r3, #0
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3714      	adds	r7, #20
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008edc:	4770      	bx	lr
 8008ede:	bf00      	nop
 8008ee0:	40010000 	.word	0x40010000
 8008ee4:	40000400 	.word	0x40000400
 8008ee8:	40000800 	.word	0x40000800
 8008eec:	40000c00 	.word	0x40000c00
 8008ef0:	40010400 	.word	0x40010400
 8008ef4:	40014000 	.word	0x40014000
 8008ef8:	40001800 	.word	0x40001800

08008efc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b084      	sub	sp, #16
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	68db      	ldr	r3, [r3, #12]
 8008f0a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	691b      	ldr	r3, [r3, #16]
 8008f12:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	f003 0302 	and.w	r3, r3, #2
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d020      	beq.n	8008f60 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	f003 0302 	and.w	r3, r3, #2
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d01b      	beq.n	8008f60 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f06f 0202 	mvn.w	r2, #2
 8008f30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2201      	movs	r2, #1
 8008f36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	699b      	ldr	r3, [r3, #24]
 8008f3e:	f003 0303 	and.w	r3, r3, #3
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d003      	beq.n	8008f4e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f000 f8d2 	bl	80090f0 <HAL_TIM_IC_CaptureCallback>
 8008f4c:	e005      	b.n	8008f5a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f000 f8c4 	bl	80090dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f000 f8d5 	bl	8009104 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	f003 0304 	and.w	r3, r3, #4
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d020      	beq.n	8008fac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	f003 0304 	and.w	r3, r3, #4
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d01b      	beq.n	8008fac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f06f 0204 	mvn.w	r2, #4
 8008f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2202      	movs	r2, #2
 8008f82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	699b      	ldr	r3, [r3, #24]
 8008f8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d003      	beq.n	8008f9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	f000 f8ac 	bl	80090f0 <HAL_TIM_IC_CaptureCallback>
 8008f98:	e005      	b.n	8008fa6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f000 f89e 	bl	80090dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f000 f8af 	bl	8009104 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	f003 0308 	and.w	r3, r3, #8
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d020      	beq.n	8008ff8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	f003 0308 	and.w	r3, r3, #8
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d01b      	beq.n	8008ff8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f06f 0208 	mvn.w	r2, #8
 8008fc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2204      	movs	r2, #4
 8008fce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	69db      	ldr	r3, [r3, #28]
 8008fd6:	f003 0303 	and.w	r3, r3, #3
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d003      	beq.n	8008fe6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f000 f886 	bl	80090f0 <HAL_TIM_IC_CaptureCallback>
 8008fe4:	e005      	b.n	8008ff2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f000 f878 	bl	80090dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f000 f889 	bl	8009104 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	f003 0310 	and.w	r3, r3, #16
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d020      	beq.n	8009044 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	f003 0310 	and.w	r3, r3, #16
 8009008:	2b00      	cmp	r3, #0
 800900a:	d01b      	beq.n	8009044 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f06f 0210 	mvn.w	r2, #16
 8009014:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2208      	movs	r2, #8
 800901a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	69db      	ldr	r3, [r3, #28]
 8009022:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009026:	2b00      	cmp	r3, #0
 8009028:	d003      	beq.n	8009032 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f000 f860 	bl	80090f0 <HAL_TIM_IC_CaptureCallback>
 8009030:	e005      	b.n	800903e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f000 f852 	bl	80090dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	f000 f863 	bl	8009104 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2200      	movs	r2, #0
 8009042:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	f003 0301 	and.w	r3, r3, #1
 800904a:	2b00      	cmp	r3, #0
 800904c:	d00c      	beq.n	8009068 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	f003 0301 	and.w	r3, r3, #1
 8009054:	2b00      	cmp	r3, #0
 8009056:	d007      	beq.n	8009068 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f06f 0201 	mvn.w	r2, #1
 8009060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f7f9 f856 	bl	8002114 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800906e:	2b00      	cmp	r3, #0
 8009070:	d00c      	beq.n	800908c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009078:	2b00      	cmp	r3, #0
 800907a:	d007      	beq.n	800908c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8009084:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f000 f97c 	bl	8009384 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009092:	2b00      	cmp	r3, #0
 8009094:	d00c      	beq.n	80090b0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800909c:	2b00      	cmp	r3, #0
 800909e:	d007      	beq.n	80090b0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80090a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f000 f834 	bl	8009118 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	f003 0320 	and.w	r3, r3, #32
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d00c      	beq.n	80090d4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	f003 0320 	and.w	r3, r3, #32
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d007      	beq.n	80090d4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f06f 0220 	mvn.w	r2, #32
 80090cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f000 f94e 	bl	8009370 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80090d4:	bf00      	nop
 80090d6:	3710      	adds	r7, #16
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd80      	pop	{r7, pc}

080090dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80090dc:	b480      	push	{r7}
 80090de:	b083      	sub	sp, #12
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80090e4:	bf00      	nop
 80090e6:	370c      	adds	r7, #12
 80090e8:	46bd      	mov	sp, r7
 80090ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ee:	4770      	bx	lr

080090f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80090f0:	b480      	push	{r7}
 80090f2:	b083      	sub	sp, #12
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80090f8:	bf00      	nop
 80090fa:	370c      	adds	r7, #12
 80090fc:	46bd      	mov	sp, r7
 80090fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009102:	4770      	bx	lr

08009104 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009104:	b480      	push	{r7}
 8009106:	b083      	sub	sp, #12
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800910c:	bf00      	nop
 800910e:	370c      	adds	r7, #12
 8009110:	46bd      	mov	sp, r7
 8009112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009116:	4770      	bx	lr

08009118 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009118:	b480      	push	{r7}
 800911a:	b083      	sub	sp, #12
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009120:	bf00      	nop
 8009122:	370c      	adds	r7, #12
 8009124:	46bd      	mov	sp, r7
 8009126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912a:	4770      	bx	lr

0800912c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800912c:	b480      	push	{r7}
 800912e:	b085      	sub	sp, #20
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
 8009134:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	4a43      	ldr	r2, [pc, #268]	@ (800924c <TIM_Base_SetConfig+0x120>)
 8009140:	4293      	cmp	r3, r2
 8009142:	d013      	beq.n	800916c <TIM_Base_SetConfig+0x40>
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800914a:	d00f      	beq.n	800916c <TIM_Base_SetConfig+0x40>
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	4a40      	ldr	r2, [pc, #256]	@ (8009250 <TIM_Base_SetConfig+0x124>)
 8009150:	4293      	cmp	r3, r2
 8009152:	d00b      	beq.n	800916c <TIM_Base_SetConfig+0x40>
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	4a3f      	ldr	r2, [pc, #252]	@ (8009254 <TIM_Base_SetConfig+0x128>)
 8009158:	4293      	cmp	r3, r2
 800915a:	d007      	beq.n	800916c <TIM_Base_SetConfig+0x40>
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	4a3e      	ldr	r2, [pc, #248]	@ (8009258 <TIM_Base_SetConfig+0x12c>)
 8009160:	4293      	cmp	r3, r2
 8009162:	d003      	beq.n	800916c <TIM_Base_SetConfig+0x40>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	4a3d      	ldr	r2, [pc, #244]	@ (800925c <TIM_Base_SetConfig+0x130>)
 8009168:	4293      	cmp	r3, r2
 800916a:	d108      	bne.n	800917e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009172:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	685b      	ldr	r3, [r3, #4]
 8009178:	68fa      	ldr	r2, [r7, #12]
 800917a:	4313      	orrs	r3, r2
 800917c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	4a32      	ldr	r2, [pc, #200]	@ (800924c <TIM_Base_SetConfig+0x120>)
 8009182:	4293      	cmp	r3, r2
 8009184:	d02b      	beq.n	80091de <TIM_Base_SetConfig+0xb2>
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800918c:	d027      	beq.n	80091de <TIM_Base_SetConfig+0xb2>
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	4a2f      	ldr	r2, [pc, #188]	@ (8009250 <TIM_Base_SetConfig+0x124>)
 8009192:	4293      	cmp	r3, r2
 8009194:	d023      	beq.n	80091de <TIM_Base_SetConfig+0xb2>
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	4a2e      	ldr	r2, [pc, #184]	@ (8009254 <TIM_Base_SetConfig+0x128>)
 800919a:	4293      	cmp	r3, r2
 800919c:	d01f      	beq.n	80091de <TIM_Base_SetConfig+0xb2>
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	4a2d      	ldr	r2, [pc, #180]	@ (8009258 <TIM_Base_SetConfig+0x12c>)
 80091a2:	4293      	cmp	r3, r2
 80091a4:	d01b      	beq.n	80091de <TIM_Base_SetConfig+0xb2>
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	4a2c      	ldr	r2, [pc, #176]	@ (800925c <TIM_Base_SetConfig+0x130>)
 80091aa:	4293      	cmp	r3, r2
 80091ac:	d017      	beq.n	80091de <TIM_Base_SetConfig+0xb2>
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	4a2b      	ldr	r2, [pc, #172]	@ (8009260 <TIM_Base_SetConfig+0x134>)
 80091b2:	4293      	cmp	r3, r2
 80091b4:	d013      	beq.n	80091de <TIM_Base_SetConfig+0xb2>
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	4a2a      	ldr	r2, [pc, #168]	@ (8009264 <TIM_Base_SetConfig+0x138>)
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d00f      	beq.n	80091de <TIM_Base_SetConfig+0xb2>
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	4a29      	ldr	r2, [pc, #164]	@ (8009268 <TIM_Base_SetConfig+0x13c>)
 80091c2:	4293      	cmp	r3, r2
 80091c4:	d00b      	beq.n	80091de <TIM_Base_SetConfig+0xb2>
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	4a28      	ldr	r2, [pc, #160]	@ (800926c <TIM_Base_SetConfig+0x140>)
 80091ca:	4293      	cmp	r3, r2
 80091cc:	d007      	beq.n	80091de <TIM_Base_SetConfig+0xb2>
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	4a27      	ldr	r2, [pc, #156]	@ (8009270 <TIM_Base_SetConfig+0x144>)
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d003      	beq.n	80091de <TIM_Base_SetConfig+0xb2>
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	4a26      	ldr	r2, [pc, #152]	@ (8009274 <TIM_Base_SetConfig+0x148>)
 80091da:	4293      	cmp	r3, r2
 80091dc:	d108      	bne.n	80091f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80091e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	68db      	ldr	r3, [r3, #12]
 80091ea:	68fa      	ldr	r2, [r7, #12]
 80091ec:	4313      	orrs	r3, r2
 80091ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	695b      	ldr	r3, [r3, #20]
 80091fa:	4313      	orrs	r3, r2
 80091fc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	689a      	ldr	r2, [r3, #8]
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	681a      	ldr	r2, [r3, #0]
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	4a0e      	ldr	r2, [pc, #56]	@ (800924c <TIM_Base_SetConfig+0x120>)
 8009212:	4293      	cmp	r3, r2
 8009214:	d003      	beq.n	800921e <TIM_Base_SetConfig+0xf2>
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	4a10      	ldr	r2, [pc, #64]	@ (800925c <TIM_Base_SetConfig+0x130>)
 800921a:	4293      	cmp	r3, r2
 800921c:	d103      	bne.n	8009226 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	691a      	ldr	r2, [r3, #16]
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f043 0204 	orr.w	r2, r3, #4
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2201      	movs	r2, #1
 8009236:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	68fa      	ldr	r2, [r7, #12]
 800923c:	601a      	str	r2, [r3, #0]
}
 800923e:	bf00      	nop
 8009240:	3714      	adds	r7, #20
 8009242:	46bd      	mov	sp, r7
 8009244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009248:	4770      	bx	lr
 800924a:	bf00      	nop
 800924c:	40010000 	.word	0x40010000
 8009250:	40000400 	.word	0x40000400
 8009254:	40000800 	.word	0x40000800
 8009258:	40000c00 	.word	0x40000c00
 800925c:	40010400 	.word	0x40010400
 8009260:	40014000 	.word	0x40014000
 8009264:	40014400 	.word	0x40014400
 8009268:	40014800 	.word	0x40014800
 800926c:	40001800 	.word	0x40001800
 8009270:	40001c00 	.word	0x40001c00
 8009274:	40002000 	.word	0x40002000

08009278 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009278:	b480      	push	{r7}
 800927a:	b085      	sub	sp, #20
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
 8009280:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009288:	2b01      	cmp	r3, #1
 800928a:	d101      	bne.n	8009290 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800928c:	2302      	movs	r3, #2
 800928e:	e05a      	b.n	8009346 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2201      	movs	r2, #1
 8009294:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2202      	movs	r2, #2
 800929c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	685b      	ldr	r3, [r3, #4]
 80092a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	689b      	ldr	r3, [r3, #8]
 80092ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	68fa      	ldr	r2, [r7, #12]
 80092be:	4313      	orrs	r3, r2
 80092c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	68fa      	ldr	r2, [r7, #12]
 80092c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	4a21      	ldr	r2, [pc, #132]	@ (8009354 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d022      	beq.n	800931a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80092dc:	d01d      	beq.n	800931a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	4a1d      	ldr	r2, [pc, #116]	@ (8009358 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80092e4:	4293      	cmp	r3, r2
 80092e6:	d018      	beq.n	800931a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	4a1b      	ldr	r2, [pc, #108]	@ (800935c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80092ee:	4293      	cmp	r3, r2
 80092f0:	d013      	beq.n	800931a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	4a1a      	ldr	r2, [pc, #104]	@ (8009360 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80092f8:	4293      	cmp	r3, r2
 80092fa:	d00e      	beq.n	800931a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	4a18      	ldr	r2, [pc, #96]	@ (8009364 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009302:	4293      	cmp	r3, r2
 8009304:	d009      	beq.n	800931a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	4a17      	ldr	r2, [pc, #92]	@ (8009368 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800930c:	4293      	cmp	r3, r2
 800930e:	d004      	beq.n	800931a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	4a15      	ldr	r2, [pc, #84]	@ (800936c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009316:	4293      	cmp	r3, r2
 8009318:	d10c      	bne.n	8009334 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009320:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	685b      	ldr	r3, [r3, #4]
 8009326:	68ba      	ldr	r2, [r7, #8]
 8009328:	4313      	orrs	r3, r2
 800932a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	68ba      	ldr	r2, [r7, #8]
 8009332:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2201      	movs	r2, #1
 8009338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2200      	movs	r2, #0
 8009340:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009344:	2300      	movs	r3, #0
}
 8009346:	4618      	mov	r0, r3
 8009348:	3714      	adds	r7, #20
 800934a:	46bd      	mov	sp, r7
 800934c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009350:	4770      	bx	lr
 8009352:	bf00      	nop
 8009354:	40010000 	.word	0x40010000
 8009358:	40000400 	.word	0x40000400
 800935c:	40000800 	.word	0x40000800
 8009360:	40000c00 	.word	0x40000c00
 8009364:	40010400 	.word	0x40010400
 8009368:	40014000 	.word	0x40014000
 800936c:	40001800 	.word	0x40001800

08009370 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009370:	b480      	push	{r7}
 8009372:	b083      	sub	sp, #12
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009378:	bf00      	nop
 800937a:	370c      	adds	r7, #12
 800937c:	46bd      	mov	sp, r7
 800937e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009382:	4770      	bx	lr

08009384 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009384:	b480      	push	{r7}
 8009386:	b083      	sub	sp, #12
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800938c:	bf00      	nop
 800938e:	370c      	adds	r7, #12
 8009390:	46bd      	mov	sp, r7
 8009392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009396:	4770      	bx	lr

08009398 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b082      	sub	sp, #8
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d101      	bne.n	80093aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80093a6:	2301      	movs	r3, #1
 80093a8:	e042      	b.n	8009430 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80093b0:	b2db      	uxtb	r3, r3
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d106      	bne.n	80093c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2200      	movs	r2, #0
 80093ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f7fb f958 	bl	8004674 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2224      	movs	r2, #36	@ 0x24
 80093c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	68da      	ldr	r2, [r3, #12]
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80093da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f001 f88f 	bl	800a500 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	691a      	ldr	r2, [r3, #16]
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80093f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	695a      	ldr	r2, [r3, #20]
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009400:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	68da      	ldr	r2, [r3, #12]
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009410:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2200      	movs	r2, #0
 8009416:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2220      	movs	r2, #32
 800941c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2220      	movs	r2, #32
 8009424:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2200      	movs	r2, #0
 800942c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800942e:	2300      	movs	r3, #0
}
 8009430:	4618      	mov	r0, r3
 8009432:	3708      	adds	r7, #8
 8009434:	46bd      	mov	sp, r7
 8009436:	bd80      	pop	{r7, pc}

08009438 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b08a      	sub	sp, #40	@ 0x28
 800943c:	af02      	add	r7, sp, #8
 800943e:	60f8      	str	r0, [r7, #12]
 8009440:	60b9      	str	r1, [r7, #8]
 8009442:	603b      	str	r3, [r7, #0]
 8009444:	4613      	mov	r3, r2
 8009446:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009448:	2300      	movs	r3, #0
 800944a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009452:	b2db      	uxtb	r3, r3
 8009454:	2b20      	cmp	r3, #32
 8009456:	d175      	bne.n	8009544 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d002      	beq.n	8009464 <HAL_UART_Transmit+0x2c>
 800945e:	88fb      	ldrh	r3, [r7, #6]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d101      	bne.n	8009468 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009464:	2301      	movs	r3, #1
 8009466:	e06e      	b.n	8009546 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	2200      	movs	r2, #0
 800946c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	2221      	movs	r2, #33	@ 0x21
 8009472:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009476:	f7fb fc5f 	bl	8004d38 <HAL_GetTick>
 800947a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	88fa      	ldrh	r2, [r7, #6]
 8009480:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	88fa      	ldrh	r2, [r7, #6]
 8009486:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	689b      	ldr	r3, [r3, #8]
 800948c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009490:	d108      	bne.n	80094a4 <HAL_UART_Transmit+0x6c>
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	691b      	ldr	r3, [r3, #16]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d104      	bne.n	80094a4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800949a:	2300      	movs	r3, #0
 800949c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	61bb      	str	r3, [r7, #24]
 80094a2:	e003      	b.n	80094ac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80094a8:	2300      	movs	r3, #0
 80094aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80094ac:	e02e      	b.n	800950c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	9300      	str	r3, [sp, #0]
 80094b2:	697b      	ldr	r3, [r7, #20]
 80094b4:	2200      	movs	r2, #0
 80094b6:	2180      	movs	r1, #128	@ 0x80
 80094b8:	68f8      	ldr	r0, [r7, #12]
 80094ba:	f000 fd5f 	bl	8009f7c <UART_WaitOnFlagUntilTimeout>
 80094be:	4603      	mov	r3, r0
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d005      	beq.n	80094d0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	2220      	movs	r2, #32
 80094c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80094cc:	2303      	movs	r3, #3
 80094ce:	e03a      	b.n	8009546 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80094d0:	69fb      	ldr	r3, [r7, #28]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d10b      	bne.n	80094ee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80094d6:	69bb      	ldr	r3, [r7, #24]
 80094d8:	881b      	ldrh	r3, [r3, #0]
 80094da:	461a      	mov	r2, r3
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80094e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80094e6:	69bb      	ldr	r3, [r7, #24]
 80094e8:	3302      	adds	r3, #2
 80094ea:	61bb      	str	r3, [r7, #24]
 80094ec:	e007      	b.n	80094fe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80094ee:	69fb      	ldr	r3, [r7, #28]
 80094f0:	781a      	ldrb	r2, [r3, #0]
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80094f8:	69fb      	ldr	r3, [r7, #28]
 80094fa:	3301      	adds	r3, #1
 80094fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009502:	b29b      	uxth	r3, r3
 8009504:	3b01      	subs	r3, #1
 8009506:	b29a      	uxth	r2, r3
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009510:	b29b      	uxth	r3, r3
 8009512:	2b00      	cmp	r3, #0
 8009514:	d1cb      	bne.n	80094ae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	9300      	str	r3, [sp, #0]
 800951a:	697b      	ldr	r3, [r7, #20]
 800951c:	2200      	movs	r2, #0
 800951e:	2140      	movs	r1, #64	@ 0x40
 8009520:	68f8      	ldr	r0, [r7, #12]
 8009522:	f000 fd2b 	bl	8009f7c <UART_WaitOnFlagUntilTimeout>
 8009526:	4603      	mov	r3, r0
 8009528:	2b00      	cmp	r3, #0
 800952a:	d005      	beq.n	8009538 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	2220      	movs	r2, #32
 8009530:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8009534:	2303      	movs	r3, #3
 8009536:	e006      	b.n	8009546 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	2220      	movs	r2, #32
 800953c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8009540:	2300      	movs	r3, #0
 8009542:	e000      	b.n	8009546 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8009544:	2302      	movs	r3, #2
  }
}
 8009546:	4618      	mov	r0, r3
 8009548:	3720      	adds	r7, #32
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}

0800954e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800954e:	b580      	push	{r7, lr}
 8009550:	b08a      	sub	sp, #40	@ 0x28
 8009552:	af02      	add	r7, sp, #8
 8009554:	60f8      	str	r0, [r7, #12]
 8009556:	60b9      	str	r1, [r7, #8]
 8009558:	603b      	str	r3, [r7, #0]
 800955a:	4613      	mov	r3, r2
 800955c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800955e:	2300      	movs	r3, #0
 8009560:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009568:	b2db      	uxtb	r3, r3
 800956a:	2b20      	cmp	r3, #32
 800956c:	f040 8081 	bne.w	8009672 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d002      	beq.n	800957c <HAL_UART_Receive+0x2e>
 8009576:	88fb      	ldrh	r3, [r7, #6]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d101      	bne.n	8009580 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800957c:	2301      	movs	r3, #1
 800957e:	e079      	b.n	8009674 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	2200      	movs	r2, #0
 8009584:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	2222      	movs	r2, #34	@ 0x22
 800958a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	2200      	movs	r2, #0
 8009592:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009594:	f7fb fbd0 	bl	8004d38 <HAL_GetTick>
 8009598:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	88fa      	ldrh	r2, [r7, #6]
 800959e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	88fa      	ldrh	r2, [r7, #6]
 80095a4:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	689b      	ldr	r3, [r3, #8]
 80095aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80095ae:	d108      	bne.n	80095c2 <HAL_UART_Receive+0x74>
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	691b      	ldr	r3, [r3, #16]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d104      	bne.n	80095c2 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80095b8:	2300      	movs	r3, #0
 80095ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	61bb      	str	r3, [r7, #24]
 80095c0:	e003      	b.n	80095ca <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80095c2:	68bb      	ldr	r3, [r7, #8]
 80095c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80095c6:	2300      	movs	r3, #0
 80095c8:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80095ca:	e047      	b.n	800965c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	9300      	str	r3, [sp, #0]
 80095d0:	697b      	ldr	r3, [r7, #20]
 80095d2:	2200      	movs	r2, #0
 80095d4:	2120      	movs	r1, #32
 80095d6:	68f8      	ldr	r0, [r7, #12]
 80095d8:	f000 fcd0 	bl	8009f7c <UART_WaitOnFlagUntilTimeout>
 80095dc:	4603      	mov	r3, r0
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d005      	beq.n	80095ee <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	2220      	movs	r2, #32
 80095e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80095ea:	2303      	movs	r3, #3
 80095ec:	e042      	b.n	8009674 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80095ee:	69fb      	ldr	r3, [r7, #28]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d10c      	bne.n	800960e <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	685b      	ldr	r3, [r3, #4]
 80095fa:	b29b      	uxth	r3, r3
 80095fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009600:	b29a      	uxth	r2, r3
 8009602:	69bb      	ldr	r3, [r7, #24]
 8009604:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8009606:	69bb      	ldr	r3, [r7, #24]
 8009608:	3302      	adds	r3, #2
 800960a:	61bb      	str	r3, [r7, #24]
 800960c:	e01f      	b.n	800964e <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	689b      	ldr	r3, [r3, #8]
 8009612:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009616:	d007      	beq.n	8009628 <HAL_UART_Receive+0xda>
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	689b      	ldr	r3, [r3, #8]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d10a      	bne.n	8009636 <HAL_UART_Receive+0xe8>
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	691b      	ldr	r3, [r3, #16]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d106      	bne.n	8009636 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	685b      	ldr	r3, [r3, #4]
 800962e:	b2da      	uxtb	r2, r3
 8009630:	69fb      	ldr	r3, [r7, #28]
 8009632:	701a      	strb	r2, [r3, #0]
 8009634:	e008      	b.n	8009648 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	685b      	ldr	r3, [r3, #4]
 800963c:	b2db      	uxtb	r3, r3
 800963e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009642:	b2da      	uxtb	r2, r3
 8009644:	69fb      	ldr	r3, [r7, #28]
 8009646:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8009648:	69fb      	ldr	r3, [r7, #28]
 800964a:	3301      	adds	r3, #1
 800964c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009652:	b29b      	uxth	r3, r3
 8009654:	3b01      	subs	r3, #1
 8009656:	b29a      	uxth	r2, r3
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009660:	b29b      	uxth	r3, r3
 8009662:	2b00      	cmp	r3, #0
 8009664:	d1b2      	bne.n	80095cc <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	2220      	movs	r2, #32
 800966a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800966e:	2300      	movs	r3, #0
 8009670:	e000      	b.n	8009674 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8009672:	2302      	movs	r3, #2
  }
}
 8009674:	4618      	mov	r0, r3
 8009676:	3720      	adds	r7, #32
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}

0800967c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b084      	sub	sp, #16
 8009680:	af00      	add	r7, sp, #0
 8009682:	60f8      	str	r0, [r7, #12]
 8009684:	60b9      	str	r1, [r7, #8]
 8009686:	4613      	mov	r3, r2
 8009688:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009690:	b2db      	uxtb	r3, r3
 8009692:	2b20      	cmp	r3, #32
 8009694:	d112      	bne.n	80096bc <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d002      	beq.n	80096a2 <HAL_UART_Receive_DMA+0x26>
 800969c:	88fb      	ldrh	r3, [r7, #6]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d101      	bne.n	80096a6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80096a2:	2301      	movs	r3, #1
 80096a4:	e00b      	b.n	80096be <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	2200      	movs	r2, #0
 80096aa:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80096ac:	88fb      	ldrh	r3, [r7, #6]
 80096ae:	461a      	mov	r2, r3
 80096b0:	68b9      	ldr	r1, [r7, #8]
 80096b2:	68f8      	ldr	r0, [r7, #12]
 80096b4:	f000 fcbc 	bl	800a030 <UART_Start_Receive_DMA>
 80096b8:	4603      	mov	r3, r0
 80096ba:	e000      	b.n	80096be <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80096bc:	2302      	movs	r3, #2
  }
}
 80096be:	4618      	mov	r0, r3
 80096c0:	3710      	adds	r7, #16
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd80      	pop	{r7, pc}

080096c6 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80096c6:	b580      	push	{r7, lr}
 80096c8:	b090      	sub	sp, #64	@ 0x40
 80096ca:	af00      	add	r7, sp, #0
 80096cc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80096ce:	2300      	movs	r3, #0
 80096d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	695b      	ldr	r3, [r3, #20]
 80096d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80096dc:	2b80      	cmp	r3, #128	@ 0x80
 80096de:	bf0c      	ite	eq
 80096e0:	2301      	moveq	r3, #1
 80096e2:	2300      	movne	r3, #0
 80096e4:	b2db      	uxtb	r3, r3
 80096e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80096ee:	b2db      	uxtb	r3, r3
 80096f0:	2b21      	cmp	r3, #33	@ 0x21
 80096f2:	d128      	bne.n	8009746 <HAL_UART_DMAStop+0x80>
 80096f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d025      	beq.n	8009746 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	3314      	adds	r3, #20
 8009700:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009704:	e853 3f00 	ldrex	r3, [r3]
 8009708:	623b      	str	r3, [r7, #32]
   return(result);
 800970a:	6a3b      	ldr	r3, [r7, #32]
 800970c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009710:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	3314      	adds	r3, #20
 8009718:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800971a:	633a      	str	r2, [r7, #48]	@ 0x30
 800971c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800971e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009720:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009722:	e841 2300 	strex	r3, r2, [r1]
 8009726:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009728:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800972a:	2b00      	cmp	r3, #0
 800972c:	d1e5      	bne.n	80096fa <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009732:	2b00      	cmp	r3, #0
 8009734:	d004      	beq.n	8009740 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800973a:	4618      	mov	r0, r3
 800973c:	f7fb fd14 	bl	8005168 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8009740:	6878      	ldr	r0, [r7, #4]
 8009742:	f000 fd1b 	bl	800a17c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	695b      	ldr	r3, [r3, #20]
 800974c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009750:	2b40      	cmp	r3, #64	@ 0x40
 8009752:	bf0c      	ite	eq
 8009754:	2301      	moveq	r3, #1
 8009756:	2300      	movne	r3, #0
 8009758:	b2db      	uxtb	r3, r3
 800975a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009762:	b2db      	uxtb	r3, r3
 8009764:	2b22      	cmp	r3, #34	@ 0x22
 8009766:	d128      	bne.n	80097ba <HAL_UART_DMAStop+0xf4>
 8009768:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800976a:	2b00      	cmp	r3, #0
 800976c:	d025      	beq.n	80097ba <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	3314      	adds	r3, #20
 8009774:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009776:	693b      	ldr	r3, [r7, #16]
 8009778:	e853 3f00 	ldrex	r3, [r3]
 800977c:	60fb      	str	r3, [r7, #12]
   return(result);
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009784:	637b      	str	r3, [r7, #52]	@ 0x34
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	3314      	adds	r3, #20
 800978c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800978e:	61fa      	str	r2, [r7, #28]
 8009790:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009792:	69b9      	ldr	r1, [r7, #24]
 8009794:	69fa      	ldr	r2, [r7, #28]
 8009796:	e841 2300 	strex	r3, r2, [r1]
 800979a:	617b      	str	r3, [r7, #20]
   return(result);
 800979c:	697b      	ldr	r3, [r7, #20]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d1e5      	bne.n	800976e <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d004      	beq.n	80097b4 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097ae:	4618      	mov	r0, r3
 80097b0:	f7fb fcda 	bl	8005168 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f000 fd09 	bl	800a1cc <UART_EndRxTransfer>
  }

  return HAL_OK;
 80097ba:	2300      	movs	r3, #0
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3740      	adds	r7, #64	@ 0x40
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}

080097c4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b0ba      	sub	sp, #232	@ 0xe8
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	68db      	ldr	r3, [r3, #12]
 80097dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	695b      	ldr	r3, [r3, #20]
 80097e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80097ea:	2300      	movs	r3, #0
 80097ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80097f0:	2300      	movs	r3, #0
 80097f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80097f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097fa:	f003 030f 	and.w	r3, r3, #15
 80097fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8009802:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009806:	2b00      	cmp	r3, #0
 8009808:	d10f      	bne.n	800982a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800980a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800980e:	f003 0320 	and.w	r3, r3, #32
 8009812:	2b00      	cmp	r3, #0
 8009814:	d009      	beq.n	800982a <HAL_UART_IRQHandler+0x66>
 8009816:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800981a:	f003 0320 	and.w	r3, r3, #32
 800981e:	2b00      	cmp	r3, #0
 8009820:	d003      	beq.n	800982a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	f000 fdae 	bl	800a384 <UART_Receive_IT>
      return;
 8009828:	e273      	b.n	8009d12 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800982a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800982e:	2b00      	cmp	r3, #0
 8009830:	f000 80de 	beq.w	80099f0 <HAL_UART_IRQHandler+0x22c>
 8009834:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009838:	f003 0301 	and.w	r3, r3, #1
 800983c:	2b00      	cmp	r3, #0
 800983e:	d106      	bne.n	800984e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009840:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009844:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8009848:	2b00      	cmp	r3, #0
 800984a:	f000 80d1 	beq.w	80099f0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800984e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009852:	f003 0301 	and.w	r3, r3, #1
 8009856:	2b00      	cmp	r3, #0
 8009858:	d00b      	beq.n	8009872 <HAL_UART_IRQHandler+0xae>
 800985a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800985e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009862:	2b00      	cmp	r3, #0
 8009864:	d005      	beq.n	8009872 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800986a:	f043 0201 	orr.w	r2, r3, #1
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009872:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009876:	f003 0304 	and.w	r3, r3, #4
 800987a:	2b00      	cmp	r3, #0
 800987c:	d00b      	beq.n	8009896 <HAL_UART_IRQHandler+0xd2>
 800987e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009882:	f003 0301 	and.w	r3, r3, #1
 8009886:	2b00      	cmp	r3, #0
 8009888:	d005      	beq.n	8009896 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800988e:	f043 0202 	orr.w	r2, r3, #2
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009896:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800989a:	f003 0302 	and.w	r3, r3, #2
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d00b      	beq.n	80098ba <HAL_UART_IRQHandler+0xf6>
 80098a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80098a6:	f003 0301 	and.w	r3, r3, #1
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d005      	beq.n	80098ba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098b2:	f043 0204 	orr.w	r2, r3, #4
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80098ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098be:	f003 0308 	and.w	r3, r3, #8
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d011      	beq.n	80098ea <HAL_UART_IRQHandler+0x126>
 80098c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80098ca:	f003 0320 	and.w	r3, r3, #32
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d105      	bne.n	80098de <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80098d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80098d6:	f003 0301 	and.w	r3, r3, #1
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d005      	beq.n	80098ea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098e2:	f043 0208 	orr.w	r2, r3, #8
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	f000 820a 	beq.w	8009d08 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80098f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098f8:	f003 0320 	and.w	r3, r3, #32
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d008      	beq.n	8009912 <HAL_UART_IRQHandler+0x14e>
 8009900:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009904:	f003 0320 	and.w	r3, r3, #32
 8009908:	2b00      	cmp	r3, #0
 800990a:	d002      	beq.n	8009912 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	f000 fd39 	bl	800a384 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	695b      	ldr	r3, [r3, #20]
 8009918:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800991c:	2b40      	cmp	r3, #64	@ 0x40
 800991e:	bf0c      	ite	eq
 8009920:	2301      	moveq	r3, #1
 8009922:	2300      	movne	r3, #0
 8009924:	b2db      	uxtb	r3, r3
 8009926:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800992e:	f003 0308 	and.w	r3, r3, #8
 8009932:	2b00      	cmp	r3, #0
 8009934:	d103      	bne.n	800993e <HAL_UART_IRQHandler+0x17a>
 8009936:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800993a:	2b00      	cmp	r3, #0
 800993c:	d04f      	beq.n	80099de <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f000 fc44 	bl	800a1cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	695b      	ldr	r3, [r3, #20]
 800994a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800994e:	2b40      	cmp	r3, #64	@ 0x40
 8009950:	d141      	bne.n	80099d6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	3314      	adds	r3, #20
 8009958:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800995c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009960:	e853 3f00 	ldrex	r3, [r3]
 8009964:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009968:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800996c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009970:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	3314      	adds	r3, #20
 800997a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800997e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009982:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009986:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800998a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800998e:	e841 2300 	strex	r3, r2, [r1]
 8009992:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009996:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800999a:	2b00      	cmp	r3, #0
 800999c:	d1d9      	bne.n	8009952 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d013      	beq.n	80099ce <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099aa:	4a8a      	ldr	r2, [pc, #552]	@ (8009bd4 <HAL_UART_IRQHandler+0x410>)
 80099ac:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099b2:	4618      	mov	r0, r3
 80099b4:	f7fb fc48 	bl	8005248 <HAL_DMA_Abort_IT>
 80099b8:	4603      	mov	r3, r0
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d016      	beq.n	80099ec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80099c4:	687a      	ldr	r2, [r7, #4]
 80099c6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80099c8:	4610      	mov	r0, r2
 80099ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099cc:	e00e      	b.n	80099ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f000 f9c0 	bl	8009d54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099d4:	e00a      	b.n	80099ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	f000 f9bc 	bl	8009d54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099dc:	e006      	b.n	80099ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f000 f9b8 	bl	8009d54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2200      	movs	r2, #0
 80099e8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80099ea:	e18d      	b.n	8009d08 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099ec:	bf00      	nop
    return;
 80099ee:	e18b      	b.n	8009d08 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099f4:	2b01      	cmp	r3, #1
 80099f6:	f040 8167 	bne.w	8009cc8 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80099fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80099fe:	f003 0310 	and.w	r3, r3, #16
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	f000 8160 	beq.w	8009cc8 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8009a08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a0c:	f003 0310 	and.w	r3, r3, #16
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	f000 8159 	beq.w	8009cc8 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009a16:	2300      	movs	r3, #0
 8009a18:	60bb      	str	r3, [r7, #8]
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	60bb      	str	r3, [r7, #8]
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	685b      	ldr	r3, [r3, #4]
 8009a28:	60bb      	str	r3, [r7, #8]
 8009a2a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	695b      	ldr	r3, [r3, #20]
 8009a32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a36:	2b40      	cmp	r3, #64	@ 0x40
 8009a38:	f040 80ce 	bne.w	8009bd8 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	685b      	ldr	r3, [r3, #4]
 8009a44:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009a48:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	f000 80a9 	beq.w	8009ba4 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009a56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009a5a:	429a      	cmp	r2, r3
 8009a5c:	f080 80a2 	bcs.w	8009ba4 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009a66:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a6c:	69db      	ldr	r3, [r3, #28]
 8009a6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009a72:	f000 8088 	beq.w	8009b86 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	330c      	adds	r3, #12
 8009a7c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a80:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009a84:	e853 3f00 	ldrex	r3, [r3]
 8009a88:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009a8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009a90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009a94:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	330c      	adds	r3, #12
 8009a9e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8009aa2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009aa6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aaa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009aae:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009ab2:	e841 2300 	strex	r3, r2, [r1]
 8009ab6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009aba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d1d9      	bne.n	8009a76 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	3314      	adds	r3, #20
 8009ac8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009acc:	e853 3f00 	ldrex	r3, [r3]
 8009ad0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009ad2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009ad4:	f023 0301 	bic.w	r3, r3, #1
 8009ad8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	3314      	adds	r3, #20
 8009ae2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009ae6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009aea:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aec:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009aee:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009af2:	e841 2300 	strex	r3, r2, [r1]
 8009af6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009af8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d1e1      	bne.n	8009ac2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	3314      	adds	r3, #20
 8009b04:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b06:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009b08:	e853 3f00 	ldrex	r3, [r3]
 8009b0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009b0e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009b10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009b14:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	3314      	adds	r3, #20
 8009b1e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009b22:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009b24:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b26:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009b28:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009b2a:	e841 2300 	strex	r3, r2, [r1]
 8009b2e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009b30:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d1e3      	bne.n	8009afe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2220      	movs	r2, #32
 8009b3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2200      	movs	r2, #0
 8009b42:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	330c      	adds	r3, #12
 8009b4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b4e:	e853 3f00 	ldrex	r3, [r3]
 8009b52:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009b54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009b56:	f023 0310 	bic.w	r3, r3, #16
 8009b5a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	330c      	adds	r3, #12
 8009b64:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009b68:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009b6a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b6c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009b6e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009b70:	e841 2300 	strex	r3, r2, [r1]
 8009b74:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009b76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d1e3      	bne.n	8009b44 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b80:	4618      	mov	r0, r3
 8009b82:	f7fb faf1 	bl	8005168 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2202      	movs	r2, #2
 8009b8a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009b94:	b29b      	uxth	r3, r3
 8009b96:	1ad3      	subs	r3, r2, r3
 8009b98:	b29b      	uxth	r3, r3
 8009b9a:	4619      	mov	r1, r3
 8009b9c:	6878      	ldr	r0, [r7, #4]
 8009b9e:	f000 f8e3 	bl	8009d68 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009ba2:	e0b3      	b.n	8009d0c <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009ba8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009bac:	429a      	cmp	r2, r3
 8009bae:	f040 80ad 	bne.w	8009d0c <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009bb6:	69db      	ldr	r3, [r3, #28]
 8009bb8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009bbc:	f040 80a6 	bne.w	8009d0c <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2202      	movs	r2, #2
 8009bc4:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009bca:	4619      	mov	r1, r3
 8009bcc:	6878      	ldr	r0, [r7, #4]
 8009bce:	f000 f8cb 	bl	8009d68 <HAL_UARTEx_RxEventCallback>
      return;
 8009bd2:	e09b      	b.n	8009d0c <HAL_UART_IRQHandler+0x548>
 8009bd4:	0800a293 	.word	0x0800a293
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009be0:	b29b      	uxth	r3, r3
 8009be2:	1ad3      	subs	r3, r2, r3
 8009be4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009bec:	b29b      	uxth	r3, r3
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	f000 808e 	beq.w	8009d10 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8009bf4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	f000 8089 	beq.w	8009d10 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	330c      	adds	r3, #12
 8009c04:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c08:	e853 3f00 	ldrex	r3, [r3]
 8009c0c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009c0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c10:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009c14:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	330c      	adds	r3, #12
 8009c1e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8009c22:	647a      	str	r2, [r7, #68]	@ 0x44
 8009c24:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c26:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009c28:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009c2a:	e841 2300 	strex	r3, r2, [r1]
 8009c2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009c30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d1e3      	bne.n	8009bfe <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	3314      	adds	r3, #20
 8009c3c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c40:	e853 3f00 	ldrex	r3, [r3]
 8009c44:	623b      	str	r3, [r7, #32]
   return(result);
 8009c46:	6a3b      	ldr	r3, [r7, #32]
 8009c48:	f023 0301 	bic.w	r3, r3, #1
 8009c4c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	3314      	adds	r3, #20
 8009c56:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009c5a:	633a      	str	r2, [r7, #48]	@ 0x30
 8009c5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009c60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c62:	e841 2300 	strex	r3, r2, [r1]
 8009c66:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009c68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d1e3      	bne.n	8009c36 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2220      	movs	r2, #32
 8009c72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2200      	movs	r2, #0
 8009c7a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	330c      	adds	r3, #12
 8009c82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c84:	693b      	ldr	r3, [r7, #16]
 8009c86:	e853 3f00 	ldrex	r3, [r3]
 8009c8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	f023 0310 	bic.w	r3, r3, #16
 8009c92:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	330c      	adds	r3, #12
 8009c9c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8009ca0:	61fa      	str	r2, [r7, #28]
 8009ca2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ca4:	69b9      	ldr	r1, [r7, #24]
 8009ca6:	69fa      	ldr	r2, [r7, #28]
 8009ca8:	e841 2300 	strex	r3, r2, [r1]
 8009cac:	617b      	str	r3, [r7, #20]
   return(result);
 8009cae:	697b      	ldr	r3, [r7, #20]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d1e3      	bne.n	8009c7c <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2202      	movs	r2, #2
 8009cb8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009cba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009cbe:	4619      	mov	r1, r3
 8009cc0:	6878      	ldr	r0, [r7, #4]
 8009cc2:	f000 f851 	bl	8009d68 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009cc6:	e023      	b.n	8009d10 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009cc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ccc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d009      	beq.n	8009ce8 <HAL_UART_IRQHandler+0x524>
 8009cd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009cd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d003      	beq.n	8009ce8 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f000 fae7 	bl	800a2b4 <UART_Transmit_IT>
    return;
 8009ce6:	e014      	b.n	8009d12 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009ce8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009cec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d00e      	beq.n	8009d12 <HAL_UART_IRQHandler+0x54e>
 8009cf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009cf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d008      	beq.n	8009d12 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f000 fb27 	bl	800a354 <UART_EndTransmit_IT>
    return;
 8009d06:	e004      	b.n	8009d12 <HAL_UART_IRQHandler+0x54e>
    return;
 8009d08:	bf00      	nop
 8009d0a:	e002      	b.n	8009d12 <HAL_UART_IRQHandler+0x54e>
      return;
 8009d0c:	bf00      	nop
 8009d0e:	e000      	b.n	8009d12 <HAL_UART_IRQHandler+0x54e>
      return;
 8009d10:	bf00      	nop
  }
}
 8009d12:	37e8      	adds	r7, #232	@ 0xe8
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}

08009d18 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009d18:	b480      	push	{r7}
 8009d1a:	b083      	sub	sp, #12
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009d20:	bf00      	nop
 8009d22:	370c      	adds	r7, #12
 8009d24:	46bd      	mov	sp, r7
 8009d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2a:	4770      	bx	lr

08009d2c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009d2c:	b480      	push	{r7}
 8009d2e:	b083      	sub	sp, #12
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009d34:	bf00      	nop
 8009d36:	370c      	adds	r7, #12
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3e:	4770      	bx	lr

08009d40 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009d40:	b480      	push	{r7}
 8009d42:	b083      	sub	sp, #12
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009d48:	bf00      	nop
 8009d4a:	370c      	adds	r7, #12
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d52:	4770      	bx	lr

08009d54 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009d54:	b480      	push	{r7}
 8009d56:	b083      	sub	sp, #12
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009d5c:	bf00      	nop
 8009d5e:	370c      	adds	r7, #12
 8009d60:	46bd      	mov	sp, r7
 8009d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d66:	4770      	bx	lr

08009d68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009d68:	b480      	push	{r7}
 8009d6a:	b083      	sub	sp, #12
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
 8009d70:	460b      	mov	r3, r1
 8009d72:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009d74:	bf00      	nop
 8009d76:	370c      	adds	r7, #12
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7e:	4770      	bx	lr

08009d80 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b09c      	sub	sp, #112	@ 0x70
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d8c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d172      	bne.n	8009e82 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8009d9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d9e:	2200      	movs	r2, #0
 8009da0:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009da2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	330c      	adds	r3, #12
 8009da8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009daa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009dac:	e853 3f00 	ldrex	r3, [r3]
 8009db0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009db2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009db4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009db8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009dba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	330c      	adds	r3, #12
 8009dc0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009dc2:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009dc4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dc6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009dc8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009dca:	e841 2300 	strex	r3, r2, [r1]
 8009dce:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009dd0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d1e5      	bne.n	8009da2 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009dd6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	3314      	adds	r3, #20
 8009ddc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009de0:	e853 3f00 	ldrex	r3, [r3]
 8009de4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009de6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009de8:	f023 0301 	bic.w	r3, r3, #1
 8009dec:	667b      	str	r3, [r7, #100]	@ 0x64
 8009dee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	3314      	adds	r3, #20
 8009df4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009df6:	647a      	str	r2, [r7, #68]	@ 0x44
 8009df8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dfa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009dfc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009dfe:	e841 2300 	strex	r3, r2, [r1]
 8009e02:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009e04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d1e5      	bne.n	8009dd6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	3314      	adds	r3, #20
 8009e10:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e14:	e853 3f00 	ldrex	r3, [r3]
 8009e18:	623b      	str	r3, [r7, #32]
   return(result);
 8009e1a:	6a3b      	ldr	r3, [r7, #32]
 8009e1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009e20:	663b      	str	r3, [r7, #96]	@ 0x60
 8009e22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	3314      	adds	r3, #20
 8009e28:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009e2a:	633a      	str	r2, [r7, #48]	@ 0x30
 8009e2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e2e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009e30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e32:	e841 2300 	strex	r3, r2, [r1]
 8009e36:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009e38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d1e5      	bne.n	8009e0a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009e3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e40:	2220      	movs	r2, #32
 8009e42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e4a:	2b01      	cmp	r3, #1
 8009e4c:	d119      	bne.n	8009e82 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	330c      	adds	r3, #12
 8009e54:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e56:	693b      	ldr	r3, [r7, #16]
 8009e58:	e853 3f00 	ldrex	r3, [r3]
 8009e5c:	60fb      	str	r3, [r7, #12]
   return(result);
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	f023 0310 	bic.w	r3, r3, #16
 8009e64:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009e66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	330c      	adds	r3, #12
 8009e6c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009e6e:	61fa      	str	r2, [r7, #28]
 8009e70:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e72:	69b9      	ldr	r1, [r7, #24]
 8009e74:	69fa      	ldr	r2, [r7, #28]
 8009e76:	e841 2300 	strex	r3, r2, [r1]
 8009e7a:	617b      	str	r3, [r7, #20]
   return(result);
 8009e7c:	697b      	ldr	r3, [r7, #20]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d1e5      	bne.n	8009e4e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009e82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e84:	2200      	movs	r2, #0
 8009e86:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e8c:	2b01      	cmp	r3, #1
 8009e8e:	d106      	bne.n	8009e9e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009e90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e92:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009e94:	4619      	mov	r1, r3
 8009e96:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009e98:	f7ff ff66 	bl	8009d68 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009e9c:	e002      	b.n	8009ea4 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8009e9e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009ea0:	f7ff ff44 	bl	8009d2c <HAL_UART_RxCpltCallback>
}
 8009ea4:	bf00      	nop
 8009ea6:	3770      	adds	r7, #112	@ 0x70
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd80      	pop	{r7, pc}

08009eac <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b084      	sub	sp, #16
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009eb8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	2201      	movs	r2, #1
 8009ebe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ec4:	2b01      	cmp	r3, #1
 8009ec6:	d108      	bne.n	8009eda <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009ecc:	085b      	lsrs	r3, r3, #1
 8009ece:	b29b      	uxth	r3, r3
 8009ed0:	4619      	mov	r1, r3
 8009ed2:	68f8      	ldr	r0, [r7, #12]
 8009ed4:	f7ff ff48 	bl	8009d68 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009ed8:	e002      	b.n	8009ee0 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8009eda:	68f8      	ldr	r0, [r7, #12]
 8009edc:	f7ff ff30 	bl	8009d40 <HAL_UART_RxHalfCpltCallback>
}
 8009ee0:	bf00      	nop
 8009ee2:	3710      	adds	r7, #16
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}

08009ee8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b084      	sub	sp, #16
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ef8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009efa:	68bb      	ldr	r3, [r7, #8]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	695b      	ldr	r3, [r3, #20]
 8009f00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f04:	2b80      	cmp	r3, #128	@ 0x80
 8009f06:	bf0c      	ite	eq
 8009f08:	2301      	moveq	r3, #1
 8009f0a:	2300      	movne	r3, #0
 8009f0c:	b2db      	uxtb	r3, r3
 8009f0e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009f10:	68bb      	ldr	r3, [r7, #8]
 8009f12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009f16:	b2db      	uxtb	r3, r3
 8009f18:	2b21      	cmp	r3, #33	@ 0x21
 8009f1a:	d108      	bne.n	8009f2e <UART_DMAError+0x46>
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d005      	beq.n	8009f2e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009f22:	68bb      	ldr	r3, [r7, #8]
 8009f24:	2200      	movs	r2, #0
 8009f26:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8009f28:	68b8      	ldr	r0, [r7, #8]
 8009f2a:	f000 f927 	bl	800a17c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009f2e:	68bb      	ldr	r3, [r7, #8]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	695b      	ldr	r3, [r3, #20]
 8009f34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f38:	2b40      	cmp	r3, #64	@ 0x40
 8009f3a:	bf0c      	ite	eq
 8009f3c:	2301      	moveq	r3, #1
 8009f3e:	2300      	movne	r3, #0
 8009f40:	b2db      	uxtb	r3, r3
 8009f42:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009f44:	68bb      	ldr	r3, [r7, #8]
 8009f46:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009f4a:	b2db      	uxtb	r3, r3
 8009f4c:	2b22      	cmp	r3, #34	@ 0x22
 8009f4e:	d108      	bne.n	8009f62 <UART_DMAError+0x7a>
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d005      	beq.n	8009f62 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	2200      	movs	r2, #0
 8009f5a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8009f5c:	68b8      	ldr	r0, [r7, #8]
 8009f5e:	f000 f935 	bl	800a1cc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f66:	f043 0210 	orr.w	r2, r3, #16
 8009f6a:	68bb      	ldr	r3, [r7, #8]
 8009f6c:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009f6e:	68b8      	ldr	r0, [r7, #8]
 8009f70:	f7ff fef0 	bl	8009d54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009f74:	bf00      	nop
 8009f76:	3710      	adds	r7, #16
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	bd80      	pop	{r7, pc}

08009f7c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b086      	sub	sp, #24
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	60f8      	str	r0, [r7, #12]
 8009f84:	60b9      	str	r1, [r7, #8]
 8009f86:	603b      	str	r3, [r7, #0]
 8009f88:	4613      	mov	r3, r2
 8009f8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f8c:	e03b      	b.n	800a006 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f8e:	6a3b      	ldr	r3, [r7, #32]
 8009f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f94:	d037      	beq.n	800a006 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f96:	f7fa fecf 	bl	8004d38 <HAL_GetTick>
 8009f9a:	4602      	mov	r2, r0
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	1ad3      	subs	r3, r2, r3
 8009fa0:	6a3a      	ldr	r2, [r7, #32]
 8009fa2:	429a      	cmp	r2, r3
 8009fa4:	d302      	bcc.n	8009fac <UART_WaitOnFlagUntilTimeout+0x30>
 8009fa6:	6a3b      	ldr	r3, [r7, #32]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d101      	bne.n	8009fb0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009fac:	2303      	movs	r3, #3
 8009fae:	e03a      	b.n	800a026 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	68db      	ldr	r3, [r3, #12]
 8009fb6:	f003 0304 	and.w	r3, r3, #4
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d023      	beq.n	800a006 <UART_WaitOnFlagUntilTimeout+0x8a>
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	2b80      	cmp	r3, #128	@ 0x80
 8009fc2:	d020      	beq.n	800a006 <UART_WaitOnFlagUntilTimeout+0x8a>
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	2b40      	cmp	r3, #64	@ 0x40
 8009fc8:	d01d      	beq.n	800a006 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	f003 0308 	and.w	r3, r3, #8
 8009fd4:	2b08      	cmp	r3, #8
 8009fd6:	d116      	bne.n	800a006 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8009fd8:	2300      	movs	r3, #0
 8009fda:	617b      	str	r3, [r7, #20]
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	617b      	str	r3, [r7, #20]
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	685b      	ldr	r3, [r3, #4]
 8009fea:	617b      	str	r3, [r7, #20]
 8009fec:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009fee:	68f8      	ldr	r0, [r7, #12]
 8009ff0:	f000 f8ec 	bl	800a1cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	2208      	movs	r2, #8
 8009ff8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800a002:	2301      	movs	r3, #1
 800a004:	e00f      	b.n	800a026 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	681a      	ldr	r2, [r3, #0]
 800a00c:	68bb      	ldr	r3, [r7, #8]
 800a00e:	4013      	ands	r3, r2
 800a010:	68ba      	ldr	r2, [r7, #8]
 800a012:	429a      	cmp	r2, r3
 800a014:	bf0c      	ite	eq
 800a016:	2301      	moveq	r3, #1
 800a018:	2300      	movne	r3, #0
 800a01a:	b2db      	uxtb	r3, r3
 800a01c:	461a      	mov	r2, r3
 800a01e:	79fb      	ldrb	r3, [r7, #7]
 800a020:	429a      	cmp	r2, r3
 800a022:	d0b4      	beq.n	8009f8e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a024:	2300      	movs	r3, #0
}
 800a026:	4618      	mov	r0, r3
 800a028:	3718      	adds	r7, #24
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}
	...

0800a030 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b098      	sub	sp, #96	@ 0x60
 800a034:	af00      	add	r7, sp, #0
 800a036:	60f8      	str	r0, [r7, #12]
 800a038:	60b9      	str	r1, [r7, #8]
 800a03a:	4613      	mov	r3, r2
 800a03c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800a03e:	68ba      	ldr	r2, [r7, #8]
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	88fa      	ldrh	r2, [r7, #6]
 800a048:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	2200      	movs	r2, #0
 800a04e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	2222      	movs	r2, #34	@ 0x22
 800a054:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a05c:	4a44      	ldr	r2, [pc, #272]	@ (800a170 <UART_Start_Receive_DMA+0x140>)
 800a05e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a064:	4a43      	ldr	r2, [pc, #268]	@ (800a174 <UART_Start_Receive_DMA+0x144>)
 800a066:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a06c:	4a42      	ldr	r2, [pc, #264]	@ (800a178 <UART_Start_Receive_DMA+0x148>)
 800a06e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a074:	2200      	movs	r2, #0
 800a076:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800a078:	f107 0308 	add.w	r3, r7, #8
 800a07c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	3304      	adds	r3, #4
 800a088:	4619      	mov	r1, r3
 800a08a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a08c:	681a      	ldr	r2, [r3, #0]
 800a08e:	88fb      	ldrh	r3, [r7, #6]
 800a090:	f7fb f812 	bl	80050b8 <HAL_DMA_Start_IT>
 800a094:	4603      	mov	r3, r0
 800a096:	2b00      	cmp	r3, #0
 800a098:	d008      	beq.n	800a0ac <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	2210      	movs	r2, #16
 800a09e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	2220      	movs	r2, #32
 800a0a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 800a0a8:	2301      	movs	r3, #1
 800a0aa:	e05d      	b.n	800a168 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	613b      	str	r3, [r7, #16]
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	613b      	str	r3, [r7, #16]
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	685b      	ldr	r3, [r3, #4]
 800a0be:	613b      	str	r3, [r7, #16]
 800a0c0:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	691b      	ldr	r3, [r3, #16]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d019      	beq.n	800a0fe <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	330c      	adds	r3, #12
 800a0d0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a0d4:	e853 3f00 	ldrex	r3, [r3]
 800a0d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a0da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a0e0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	330c      	adds	r3, #12
 800a0e8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a0ea:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800a0ec:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0ee:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800a0f0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a0f2:	e841 2300 	strex	r3, r2, [r1]
 800a0f6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a0f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d1e5      	bne.n	800a0ca <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	3314      	adds	r3, #20
 800a104:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a106:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a108:	e853 3f00 	ldrex	r3, [r3]
 800a10c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a10e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a110:	f043 0301 	orr.w	r3, r3, #1
 800a114:	657b      	str	r3, [r7, #84]	@ 0x54
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	3314      	adds	r3, #20
 800a11c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a11e:	63ba      	str	r2, [r7, #56]	@ 0x38
 800a120:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a122:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800a124:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a126:	e841 2300 	strex	r3, r2, [r1]
 800a12a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a12c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d1e5      	bne.n	800a0fe <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	3314      	adds	r3, #20
 800a138:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a13a:	69bb      	ldr	r3, [r7, #24]
 800a13c:	e853 3f00 	ldrex	r3, [r3]
 800a140:	617b      	str	r3, [r7, #20]
   return(result);
 800a142:	697b      	ldr	r3, [r7, #20]
 800a144:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a148:	653b      	str	r3, [r7, #80]	@ 0x50
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	3314      	adds	r3, #20
 800a150:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a152:	627a      	str	r2, [r7, #36]	@ 0x24
 800a154:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a156:	6a39      	ldr	r1, [r7, #32]
 800a158:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a15a:	e841 2300 	strex	r3, r2, [r1]
 800a15e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a160:	69fb      	ldr	r3, [r7, #28]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d1e5      	bne.n	800a132 <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 800a166:	2300      	movs	r3, #0
}
 800a168:	4618      	mov	r0, r3
 800a16a:	3760      	adds	r7, #96	@ 0x60
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}
 800a170:	08009d81 	.word	0x08009d81
 800a174:	08009ead 	.word	0x08009ead
 800a178:	08009ee9 	.word	0x08009ee9

0800a17c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a17c:	b480      	push	{r7}
 800a17e:	b089      	sub	sp, #36	@ 0x24
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	330c      	adds	r3, #12
 800a18a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	e853 3f00 	ldrex	r3, [r3]
 800a192:	60bb      	str	r3, [r7, #8]
   return(result);
 800a194:	68bb      	ldr	r3, [r7, #8]
 800a196:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a19a:	61fb      	str	r3, [r7, #28]
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	330c      	adds	r3, #12
 800a1a2:	69fa      	ldr	r2, [r7, #28]
 800a1a4:	61ba      	str	r2, [r7, #24]
 800a1a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1a8:	6979      	ldr	r1, [r7, #20]
 800a1aa:	69ba      	ldr	r2, [r7, #24]
 800a1ac:	e841 2300 	strex	r3, r2, [r1]
 800a1b0:	613b      	str	r3, [r7, #16]
   return(result);
 800a1b2:	693b      	ldr	r3, [r7, #16]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d1e5      	bne.n	800a184 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2220      	movs	r2, #32
 800a1bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800a1c0:	bf00      	nop
 800a1c2:	3724      	adds	r7, #36	@ 0x24
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ca:	4770      	bx	lr

0800a1cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a1cc:	b480      	push	{r7}
 800a1ce:	b095      	sub	sp, #84	@ 0x54
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	330c      	adds	r3, #12
 800a1da:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1de:	e853 3f00 	ldrex	r3, [r3]
 800a1e2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a1e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a1ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	330c      	adds	r3, #12
 800a1f2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a1f4:	643a      	str	r2, [r7, #64]	@ 0x40
 800a1f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1f8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a1fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a1fc:	e841 2300 	strex	r3, r2, [r1]
 800a200:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a204:	2b00      	cmp	r3, #0
 800a206:	d1e5      	bne.n	800a1d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	3314      	adds	r3, #20
 800a20e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a210:	6a3b      	ldr	r3, [r7, #32]
 800a212:	e853 3f00 	ldrex	r3, [r3]
 800a216:	61fb      	str	r3, [r7, #28]
   return(result);
 800a218:	69fb      	ldr	r3, [r7, #28]
 800a21a:	f023 0301 	bic.w	r3, r3, #1
 800a21e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	3314      	adds	r3, #20
 800a226:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a228:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a22a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a22c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a22e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a230:	e841 2300 	strex	r3, r2, [r1]
 800a234:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d1e5      	bne.n	800a208 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a240:	2b01      	cmp	r3, #1
 800a242:	d119      	bne.n	800a278 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	330c      	adds	r3, #12
 800a24a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	e853 3f00 	ldrex	r3, [r3]
 800a252:	60bb      	str	r3, [r7, #8]
   return(result);
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	f023 0310 	bic.w	r3, r3, #16
 800a25a:	647b      	str	r3, [r7, #68]	@ 0x44
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	330c      	adds	r3, #12
 800a262:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a264:	61ba      	str	r2, [r7, #24]
 800a266:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a268:	6979      	ldr	r1, [r7, #20]
 800a26a:	69ba      	ldr	r2, [r7, #24]
 800a26c:	e841 2300 	strex	r3, r2, [r1]
 800a270:	613b      	str	r3, [r7, #16]
   return(result);
 800a272:	693b      	ldr	r3, [r7, #16]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d1e5      	bne.n	800a244 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2220      	movs	r2, #32
 800a27c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2200      	movs	r2, #0
 800a284:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800a286:	bf00      	nop
 800a288:	3754      	adds	r7, #84	@ 0x54
 800a28a:	46bd      	mov	sp, r7
 800a28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a290:	4770      	bx	lr

0800a292 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a292:	b580      	push	{r7, lr}
 800a294:	b084      	sub	sp, #16
 800a296:	af00      	add	r7, sp, #0
 800a298:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a29e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a2a6:	68f8      	ldr	r0, [r7, #12]
 800a2a8:	f7ff fd54 	bl	8009d54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a2ac:	bf00      	nop
 800a2ae:	3710      	adds	r7, #16
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bd80      	pop	{r7, pc}

0800a2b4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a2b4:	b480      	push	{r7}
 800a2b6:	b085      	sub	sp, #20
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a2c2:	b2db      	uxtb	r3, r3
 800a2c4:	2b21      	cmp	r3, #33	@ 0x21
 800a2c6:	d13e      	bne.n	800a346 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	689b      	ldr	r3, [r3, #8]
 800a2cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a2d0:	d114      	bne.n	800a2fc <UART_Transmit_IT+0x48>
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	691b      	ldr	r3, [r3, #16]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d110      	bne.n	800a2fc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	6a1b      	ldr	r3, [r3, #32]
 800a2de:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	881b      	ldrh	r3, [r3, #0]
 800a2e4:	461a      	mov	r2, r3
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a2ee:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	6a1b      	ldr	r3, [r3, #32]
 800a2f4:	1c9a      	adds	r2, r3, #2
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	621a      	str	r2, [r3, #32]
 800a2fa:	e008      	b.n	800a30e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	6a1b      	ldr	r3, [r3, #32]
 800a300:	1c59      	adds	r1, r3, #1
 800a302:	687a      	ldr	r2, [r7, #4]
 800a304:	6211      	str	r1, [r2, #32]
 800a306:	781a      	ldrb	r2, [r3, #0]
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a312:	b29b      	uxth	r3, r3
 800a314:	3b01      	subs	r3, #1
 800a316:	b29b      	uxth	r3, r3
 800a318:	687a      	ldr	r2, [r7, #4]
 800a31a:	4619      	mov	r1, r3
 800a31c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d10f      	bne.n	800a342 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	68da      	ldr	r2, [r3, #12]
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a330:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	68da      	ldr	r2, [r3, #12]
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a340:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a342:	2300      	movs	r3, #0
 800a344:	e000      	b.n	800a348 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a346:	2302      	movs	r3, #2
  }
}
 800a348:	4618      	mov	r0, r3
 800a34a:	3714      	adds	r7, #20
 800a34c:	46bd      	mov	sp, r7
 800a34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a352:	4770      	bx	lr

0800a354 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b082      	sub	sp, #8
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	68da      	ldr	r2, [r3, #12]
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a36a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2220      	movs	r2, #32
 800a370:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a374:	6878      	ldr	r0, [r7, #4]
 800a376:	f7ff fccf 	bl	8009d18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a37a:	2300      	movs	r3, #0
}
 800a37c:	4618      	mov	r0, r3
 800a37e:	3708      	adds	r7, #8
 800a380:	46bd      	mov	sp, r7
 800a382:	bd80      	pop	{r7, pc}

0800a384 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b08c      	sub	sp, #48	@ 0x30
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800a38c:	2300      	movs	r3, #0
 800a38e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800a390:	2300      	movs	r3, #0
 800a392:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a39a:	b2db      	uxtb	r3, r3
 800a39c:	2b22      	cmp	r3, #34	@ 0x22
 800a39e:	f040 80aa 	bne.w	800a4f6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	689b      	ldr	r3, [r3, #8]
 800a3a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a3aa:	d115      	bne.n	800a3d8 <UART_Receive_IT+0x54>
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	691b      	ldr	r3, [r3, #16]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d111      	bne.n	800a3d8 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3b8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	685b      	ldr	r3, [r3, #4]
 800a3c0:	b29b      	uxth	r3, r3
 800a3c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3c6:	b29a      	uxth	r2, r3
 800a3c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3ca:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3d0:	1c9a      	adds	r2, r3, #2
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	629a      	str	r2, [r3, #40]	@ 0x28
 800a3d6:	e024      	b.n	800a422 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	689b      	ldr	r3, [r3, #8]
 800a3e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a3e6:	d007      	beq.n	800a3f8 <UART_Receive_IT+0x74>
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	689b      	ldr	r3, [r3, #8]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d10a      	bne.n	800a406 <UART_Receive_IT+0x82>
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	691b      	ldr	r3, [r3, #16]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d106      	bne.n	800a406 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	685b      	ldr	r3, [r3, #4]
 800a3fe:	b2da      	uxtb	r2, r3
 800a400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a402:	701a      	strb	r2, [r3, #0]
 800a404:	e008      	b.n	800a418 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	685b      	ldr	r3, [r3, #4]
 800a40c:	b2db      	uxtb	r3, r3
 800a40e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a412:	b2da      	uxtb	r2, r3
 800a414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a416:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a41c:	1c5a      	adds	r2, r3, #1
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a426:	b29b      	uxth	r3, r3
 800a428:	3b01      	subs	r3, #1
 800a42a:	b29b      	uxth	r3, r3
 800a42c:	687a      	ldr	r2, [r7, #4]
 800a42e:	4619      	mov	r1, r3
 800a430:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800a432:	2b00      	cmp	r3, #0
 800a434:	d15d      	bne.n	800a4f2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	68da      	ldr	r2, [r3, #12]
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	f022 0220 	bic.w	r2, r2, #32
 800a444:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	68da      	ldr	r2, [r3, #12]
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a454:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	695a      	ldr	r2, [r3, #20]
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	f022 0201 	bic.w	r2, r2, #1
 800a464:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2220      	movs	r2, #32
 800a46a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2200      	movs	r2, #0
 800a472:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a478:	2b01      	cmp	r3, #1
 800a47a:	d135      	bne.n	800a4e8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2200      	movs	r2, #0
 800a480:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	330c      	adds	r3, #12
 800a488:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a48a:	697b      	ldr	r3, [r7, #20]
 800a48c:	e853 3f00 	ldrex	r3, [r3]
 800a490:	613b      	str	r3, [r7, #16]
   return(result);
 800a492:	693b      	ldr	r3, [r7, #16]
 800a494:	f023 0310 	bic.w	r3, r3, #16
 800a498:	627b      	str	r3, [r7, #36]	@ 0x24
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	330c      	adds	r3, #12
 800a4a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a4a2:	623a      	str	r2, [r7, #32]
 800a4a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4a6:	69f9      	ldr	r1, [r7, #28]
 800a4a8:	6a3a      	ldr	r2, [r7, #32]
 800a4aa:	e841 2300 	strex	r3, r2, [r1]
 800a4ae:	61bb      	str	r3, [r7, #24]
   return(result);
 800a4b0:	69bb      	ldr	r3, [r7, #24]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d1e5      	bne.n	800a482 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	f003 0310 	and.w	r3, r3, #16
 800a4c0:	2b10      	cmp	r3, #16
 800a4c2:	d10a      	bne.n	800a4da <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	60fb      	str	r3, [r7, #12]
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	60fb      	str	r3, [r7, #12]
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	685b      	ldr	r3, [r3, #4]
 800a4d6:	60fb      	str	r3, [r7, #12]
 800a4d8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a4de:	4619      	mov	r1, r3
 800a4e0:	6878      	ldr	r0, [r7, #4]
 800a4e2:	f7ff fc41 	bl	8009d68 <HAL_UARTEx_RxEventCallback>
 800a4e6:	e002      	b.n	800a4ee <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a4e8:	6878      	ldr	r0, [r7, #4]
 800a4ea:	f7ff fc1f 	bl	8009d2c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	e002      	b.n	800a4f8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	e000      	b.n	800a4f8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800a4f6:	2302      	movs	r3, #2
  }
}
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	3730      	adds	r7, #48	@ 0x30
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd80      	pop	{r7, pc}

0800a500 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a500:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a504:	b0c0      	sub	sp, #256	@ 0x100
 800a506:	af00      	add	r7, sp, #0
 800a508:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a50c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	691b      	ldr	r3, [r3, #16]
 800a514:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800a518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a51c:	68d9      	ldr	r1, [r3, #12]
 800a51e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a522:	681a      	ldr	r2, [r3, #0]
 800a524:	ea40 0301 	orr.w	r3, r0, r1
 800a528:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a52a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a52e:	689a      	ldr	r2, [r3, #8]
 800a530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a534:	691b      	ldr	r3, [r3, #16]
 800a536:	431a      	orrs	r2, r3
 800a538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a53c:	695b      	ldr	r3, [r3, #20]
 800a53e:	431a      	orrs	r2, r3
 800a540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a544:	69db      	ldr	r3, [r3, #28]
 800a546:	4313      	orrs	r3, r2
 800a548:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a54c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	68db      	ldr	r3, [r3, #12]
 800a554:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800a558:	f021 010c 	bic.w	r1, r1, #12
 800a55c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a560:	681a      	ldr	r2, [r3, #0]
 800a562:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a566:	430b      	orrs	r3, r1
 800a568:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a56a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	695b      	ldr	r3, [r3, #20]
 800a572:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800a576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a57a:	6999      	ldr	r1, [r3, #24]
 800a57c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a580:	681a      	ldr	r2, [r3, #0]
 800a582:	ea40 0301 	orr.w	r3, r0, r1
 800a586:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a58c:	681a      	ldr	r2, [r3, #0]
 800a58e:	4b8f      	ldr	r3, [pc, #572]	@ (800a7cc <UART_SetConfig+0x2cc>)
 800a590:	429a      	cmp	r2, r3
 800a592:	d005      	beq.n	800a5a0 <UART_SetConfig+0xa0>
 800a594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a598:	681a      	ldr	r2, [r3, #0]
 800a59a:	4b8d      	ldr	r3, [pc, #564]	@ (800a7d0 <UART_SetConfig+0x2d0>)
 800a59c:	429a      	cmp	r2, r3
 800a59e:	d104      	bne.n	800a5aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a5a0:	f7fe fb5e 	bl	8008c60 <HAL_RCC_GetPCLK2Freq>
 800a5a4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800a5a8:	e003      	b.n	800a5b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a5aa:	f7fe fb45 	bl	8008c38 <HAL_RCC_GetPCLK1Freq>
 800a5ae:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a5b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a5b6:	69db      	ldr	r3, [r3, #28]
 800a5b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a5bc:	f040 810c 	bne.w	800a7d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a5c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a5ca:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800a5ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800a5d2:	4622      	mov	r2, r4
 800a5d4:	462b      	mov	r3, r5
 800a5d6:	1891      	adds	r1, r2, r2
 800a5d8:	65b9      	str	r1, [r7, #88]	@ 0x58
 800a5da:	415b      	adcs	r3, r3
 800a5dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a5de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800a5e2:	4621      	mov	r1, r4
 800a5e4:	eb12 0801 	adds.w	r8, r2, r1
 800a5e8:	4629      	mov	r1, r5
 800a5ea:	eb43 0901 	adc.w	r9, r3, r1
 800a5ee:	f04f 0200 	mov.w	r2, #0
 800a5f2:	f04f 0300 	mov.w	r3, #0
 800a5f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a5fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a5fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a602:	4690      	mov	r8, r2
 800a604:	4699      	mov	r9, r3
 800a606:	4623      	mov	r3, r4
 800a608:	eb18 0303 	adds.w	r3, r8, r3
 800a60c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a610:	462b      	mov	r3, r5
 800a612:	eb49 0303 	adc.w	r3, r9, r3
 800a616:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a61a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a61e:	685b      	ldr	r3, [r3, #4]
 800a620:	2200      	movs	r2, #0
 800a622:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a626:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800a62a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a62e:	460b      	mov	r3, r1
 800a630:	18db      	adds	r3, r3, r3
 800a632:	653b      	str	r3, [r7, #80]	@ 0x50
 800a634:	4613      	mov	r3, r2
 800a636:	eb42 0303 	adc.w	r3, r2, r3
 800a63a:	657b      	str	r3, [r7, #84]	@ 0x54
 800a63c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800a640:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800a644:	f7f5 fe1c 	bl	8000280 <__aeabi_uldivmod>
 800a648:	4602      	mov	r2, r0
 800a64a:	460b      	mov	r3, r1
 800a64c:	4b61      	ldr	r3, [pc, #388]	@ (800a7d4 <UART_SetConfig+0x2d4>)
 800a64e:	fba3 2302 	umull	r2, r3, r3, r2
 800a652:	095b      	lsrs	r3, r3, #5
 800a654:	011c      	lsls	r4, r3, #4
 800a656:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a65a:	2200      	movs	r2, #0
 800a65c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a660:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800a664:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800a668:	4642      	mov	r2, r8
 800a66a:	464b      	mov	r3, r9
 800a66c:	1891      	adds	r1, r2, r2
 800a66e:	64b9      	str	r1, [r7, #72]	@ 0x48
 800a670:	415b      	adcs	r3, r3
 800a672:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a674:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800a678:	4641      	mov	r1, r8
 800a67a:	eb12 0a01 	adds.w	sl, r2, r1
 800a67e:	4649      	mov	r1, r9
 800a680:	eb43 0b01 	adc.w	fp, r3, r1
 800a684:	f04f 0200 	mov.w	r2, #0
 800a688:	f04f 0300 	mov.w	r3, #0
 800a68c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a690:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a694:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a698:	4692      	mov	sl, r2
 800a69a:	469b      	mov	fp, r3
 800a69c:	4643      	mov	r3, r8
 800a69e:	eb1a 0303 	adds.w	r3, sl, r3
 800a6a2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a6a6:	464b      	mov	r3, r9
 800a6a8:	eb4b 0303 	adc.w	r3, fp, r3
 800a6ac:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a6b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a6b4:	685b      	ldr	r3, [r3, #4]
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a6bc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800a6c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a6c4:	460b      	mov	r3, r1
 800a6c6:	18db      	adds	r3, r3, r3
 800a6c8:	643b      	str	r3, [r7, #64]	@ 0x40
 800a6ca:	4613      	mov	r3, r2
 800a6cc:	eb42 0303 	adc.w	r3, r2, r3
 800a6d0:	647b      	str	r3, [r7, #68]	@ 0x44
 800a6d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800a6d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800a6da:	f7f5 fdd1 	bl	8000280 <__aeabi_uldivmod>
 800a6de:	4602      	mov	r2, r0
 800a6e0:	460b      	mov	r3, r1
 800a6e2:	4611      	mov	r1, r2
 800a6e4:	4b3b      	ldr	r3, [pc, #236]	@ (800a7d4 <UART_SetConfig+0x2d4>)
 800a6e6:	fba3 2301 	umull	r2, r3, r3, r1
 800a6ea:	095b      	lsrs	r3, r3, #5
 800a6ec:	2264      	movs	r2, #100	@ 0x64
 800a6ee:	fb02 f303 	mul.w	r3, r2, r3
 800a6f2:	1acb      	subs	r3, r1, r3
 800a6f4:	00db      	lsls	r3, r3, #3
 800a6f6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800a6fa:	4b36      	ldr	r3, [pc, #216]	@ (800a7d4 <UART_SetConfig+0x2d4>)
 800a6fc:	fba3 2302 	umull	r2, r3, r3, r2
 800a700:	095b      	lsrs	r3, r3, #5
 800a702:	005b      	lsls	r3, r3, #1
 800a704:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800a708:	441c      	add	r4, r3
 800a70a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a70e:	2200      	movs	r2, #0
 800a710:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a714:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800a718:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800a71c:	4642      	mov	r2, r8
 800a71e:	464b      	mov	r3, r9
 800a720:	1891      	adds	r1, r2, r2
 800a722:	63b9      	str	r1, [r7, #56]	@ 0x38
 800a724:	415b      	adcs	r3, r3
 800a726:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a728:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800a72c:	4641      	mov	r1, r8
 800a72e:	1851      	adds	r1, r2, r1
 800a730:	6339      	str	r1, [r7, #48]	@ 0x30
 800a732:	4649      	mov	r1, r9
 800a734:	414b      	adcs	r3, r1
 800a736:	637b      	str	r3, [r7, #52]	@ 0x34
 800a738:	f04f 0200 	mov.w	r2, #0
 800a73c:	f04f 0300 	mov.w	r3, #0
 800a740:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800a744:	4659      	mov	r1, fp
 800a746:	00cb      	lsls	r3, r1, #3
 800a748:	4651      	mov	r1, sl
 800a74a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a74e:	4651      	mov	r1, sl
 800a750:	00ca      	lsls	r2, r1, #3
 800a752:	4610      	mov	r0, r2
 800a754:	4619      	mov	r1, r3
 800a756:	4603      	mov	r3, r0
 800a758:	4642      	mov	r2, r8
 800a75a:	189b      	adds	r3, r3, r2
 800a75c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a760:	464b      	mov	r3, r9
 800a762:	460a      	mov	r2, r1
 800a764:	eb42 0303 	adc.w	r3, r2, r3
 800a768:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a76c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a770:	685b      	ldr	r3, [r3, #4]
 800a772:	2200      	movs	r2, #0
 800a774:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a778:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800a77c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a780:	460b      	mov	r3, r1
 800a782:	18db      	adds	r3, r3, r3
 800a784:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a786:	4613      	mov	r3, r2
 800a788:	eb42 0303 	adc.w	r3, r2, r3
 800a78c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a78e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a792:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800a796:	f7f5 fd73 	bl	8000280 <__aeabi_uldivmod>
 800a79a:	4602      	mov	r2, r0
 800a79c:	460b      	mov	r3, r1
 800a79e:	4b0d      	ldr	r3, [pc, #52]	@ (800a7d4 <UART_SetConfig+0x2d4>)
 800a7a0:	fba3 1302 	umull	r1, r3, r3, r2
 800a7a4:	095b      	lsrs	r3, r3, #5
 800a7a6:	2164      	movs	r1, #100	@ 0x64
 800a7a8:	fb01 f303 	mul.w	r3, r1, r3
 800a7ac:	1ad3      	subs	r3, r2, r3
 800a7ae:	00db      	lsls	r3, r3, #3
 800a7b0:	3332      	adds	r3, #50	@ 0x32
 800a7b2:	4a08      	ldr	r2, [pc, #32]	@ (800a7d4 <UART_SetConfig+0x2d4>)
 800a7b4:	fba2 2303 	umull	r2, r3, r2, r3
 800a7b8:	095b      	lsrs	r3, r3, #5
 800a7ba:	f003 0207 	and.w	r2, r3, #7
 800a7be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	4422      	add	r2, r4
 800a7c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a7c8:	e106      	b.n	800a9d8 <UART_SetConfig+0x4d8>
 800a7ca:	bf00      	nop
 800a7cc:	40011000 	.word	0x40011000
 800a7d0:	40011400 	.word	0x40011400
 800a7d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a7d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a7dc:	2200      	movs	r2, #0
 800a7de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a7e2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800a7e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800a7ea:	4642      	mov	r2, r8
 800a7ec:	464b      	mov	r3, r9
 800a7ee:	1891      	adds	r1, r2, r2
 800a7f0:	6239      	str	r1, [r7, #32]
 800a7f2:	415b      	adcs	r3, r3
 800a7f4:	627b      	str	r3, [r7, #36]	@ 0x24
 800a7f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a7fa:	4641      	mov	r1, r8
 800a7fc:	1854      	adds	r4, r2, r1
 800a7fe:	4649      	mov	r1, r9
 800a800:	eb43 0501 	adc.w	r5, r3, r1
 800a804:	f04f 0200 	mov.w	r2, #0
 800a808:	f04f 0300 	mov.w	r3, #0
 800a80c:	00eb      	lsls	r3, r5, #3
 800a80e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a812:	00e2      	lsls	r2, r4, #3
 800a814:	4614      	mov	r4, r2
 800a816:	461d      	mov	r5, r3
 800a818:	4643      	mov	r3, r8
 800a81a:	18e3      	adds	r3, r4, r3
 800a81c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a820:	464b      	mov	r3, r9
 800a822:	eb45 0303 	adc.w	r3, r5, r3
 800a826:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a82a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a82e:	685b      	ldr	r3, [r3, #4]
 800a830:	2200      	movs	r2, #0
 800a832:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a836:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a83a:	f04f 0200 	mov.w	r2, #0
 800a83e:	f04f 0300 	mov.w	r3, #0
 800a842:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800a846:	4629      	mov	r1, r5
 800a848:	008b      	lsls	r3, r1, #2
 800a84a:	4621      	mov	r1, r4
 800a84c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a850:	4621      	mov	r1, r4
 800a852:	008a      	lsls	r2, r1, #2
 800a854:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800a858:	f7f5 fd12 	bl	8000280 <__aeabi_uldivmod>
 800a85c:	4602      	mov	r2, r0
 800a85e:	460b      	mov	r3, r1
 800a860:	4b60      	ldr	r3, [pc, #384]	@ (800a9e4 <UART_SetConfig+0x4e4>)
 800a862:	fba3 2302 	umull	r2, r3, r3, r2
 800a866:	095b      	lsrs	r3, r3, #5
 800a868:	011c      	lsls	r4, r3, #4
 800a86a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a86e:	2200      	movs	r2, #0
 800a870:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a874:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a878:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800a87c:	4642      	mov	r2, r8
 800a87e:	464b      	mov	r3, r9
 800a880:	1891      	adds	r1, r2, r2
 800a882:	61b9      	str	r1, [r7, #24]
 800a884:	415b      	adcs	r3, r3
 800a886:	61fb      	str	r3, [r7, #28]
 800a888:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a88c:	4641      	mov	r1, r8
 800a88e:	1851      	adds	r1, r2, r1
 800a890:	6139      	str	r1, [r7, #16]
 800a892:	4649      	mov	r1, r9
 800a894:	414b      	adcs	r3, r1
 800a896:	617b      	str	r3, [r7, #20]
 800a898:	f04f 0200 	mov.w	r2, #0
 800a89c:	f04f 0300 	mov.w	r3, #0
 800a8a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a8a4:	4659      	mov	r1, fp
 800a8a6:	00cb      	lsls	r3, r1, #3
 800a8a8:	4651      	mov	r1, sl
 800a8aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a8ae:	4651      	mov	r1, sl
 800a8b0:	00ca      	lsls	r2, r1, #3
 800a8b2:	4610      	mov	r0, r2
 800a8b4:	4619      	mov	r1, r3
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	4642      	mov	r2, r8
 800a8ba:	189b      	adds	r3, r3, r2
 800a8bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a8c0:	464b      	mov	r3, r9
 800a8c2:	460a      	mov	r2, r1
 800a8c4:	eb42 0303 	adc.w	r3, r2, r3
 800a8c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a8cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a8d0:	685b      	ldr	r3, [r3, #4]
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a8d6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a8d8:	f04f 0200 	mov.w	r2, #0
 800a8dc:	f04f 0300 	mov.w	r3, #0
 800a8e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800a8e4:	4649      	mov	r1, r9
 800a8e6:	008b      	lsls	r3, r1, #2
 800a8e8:	4641      	mov	r1, r8
 800a8ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a8ee:	4641      	mov	r1, r8
 800a8f0:	008a      	lsls	r2, r1, #2
 800a8f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800a8f6:	f7f5 fcc3 	bl	8000280 <__aeabi_uldivmod>
 800a8fa:	4602      	mov	r2, r0
 800a8fc:	460b      	mov	r3, r1
 800a8fe:	4611      	mov	r1, r2
 800a900:	4b38      	ldr	r3, [pc, #224]	@ (800a9e4 <UART_SetConfig+0x4e4>)
 800a902:	fba3 2301 	umull	r2, r3, r3, r1
 800a906:	095b      	lsrs	r3, r3, #5
 800a908:	2264      	movs	r2, #100	@ 0x64
 800a90a:	fb02 f303 	mul.w	r3, r2, r3
 800a90e:	1acb      	subs	r3, r1, r3
 800a910:	011b      	lsls	r3, r3, #4
 800a912:	3332      	adds	r3, #50	@ 0x32
 800a914:	4a33      	ldr	r2, [pc, #204]	@ (800a9e4 <UART_SetConfig+0x4e4>)
 800a916:	fba2 2303 	umull	r2, r3, r2, r3
 800a91a:	095b      	lsrs	r3, r3, #5
 800a91c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a920:	441c      	add	r4, r3
 800a922:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a926:	2200      	movs	r2, #0
 800a928:	673b      	str	r3, [r7, #112]	@ 0x70
 800a92a:	677a      	str	r2, [r7, #116]	@ 0x74
 800a92c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800a930:	4642      	mov	r2, r8
 800a932:	464b      	mov	r3, r9
 800a934:	1891      	adds	r1, r2, r2
 800a936:	60b9      	str	r1, [r7, #8]
 800a938:	415b      	adcs	r3, r3
 800a93a:	60fb      	str	r3, [r7, #12]
 800a93c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a940:	4641      	mov	r1, r8
 800a942:	1851      	adds	r1, r2, r1
 800a944:	6039      	str	r1, [r7, #0]
 800a946:	4649      	mov	r1, r9
 800a948:	414b      	adcs	r3, r1
 800a94a:	607b      	str	r3, [r7, #4]
 800a94c:	f04f 0200 	mov.w	r2, #0
 800a950:	f04f 0300 	mov.w	r3, #0
 800a954:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a958:	4659      	mov	r1, fp
 800a95a:	00cb      	lsls	r3, r1, #3
 800a95c:	4651      	mov	r1, sl
 800a95e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a962:	4651      	mov	r1, sl
 800a964:	00ca      	lsls	r2, r1, #3
 800a966:	4610      	mov	r0, r2
 800a968:	4619      	mov	r1, r3
 800a96a:	4603      	mov	r3, r0
 800a96c:	4642      	mov	r2, r8
 800a96e:	189b      	adds	r3, r3, r2
 800a970:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a972:	464b      	mov	r3, r9
 800a974:	460a      	mov	r2, r1
 800a976:	eb42 0303 	adc.w	r3, r2, r3
 800a97a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a97c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a980:	685b      	ldr	r3, [r3, #4]
 800a982:	2200      	movs	r2, #0
 800a984:	663b      	str	r3, [r7, #96]	@ 0x60
 800a986:	667a      	str	r2, [r7, #100]	@ 0x64
 800a988:	f04f 0200 	mov.w	r2, #0
 800a98c:	f04f 0300 	mov.w	r3, #0
 800a990:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800a994:	4649      	mov	r1, r9
 800a996:	008b      	lsls	r3, r1, #2
 800a998:	4641      	mov	r1, r8
 800a99a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a99e:	4641      	mov	r1, r8
 800a9a0:	008a      	lsls	r2, r1, #2
 800a9a2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800a9a6:	f7f5 fc6b 	bl	8000280 <__aeabi_uldivmod>
 800a9aa:	4602      	mov	r2, r0
 800a9ac:	460b      	mov	r3, r1
 800a9ae:	4b0d      	ldr	r3, [pc, #52]	@ (800a9e4 <UART_SetConfig+0x4e4>)
 800a9b0:	fba3 1302 	umull	r1, r3, r3, r2
 800a9b4:	095b      	lsrs	r3, r3, #5
 800a9b6:	2164      	movs	r1, #100	@ 0x64
 800a9b8:	fb01 f303 	mul.w	r3, r1, r3
 800a9bc:	1ad3      	subs	r3, r2, r3
 800a9be:	011b      	lsls	r3, r3, #4
 800a9c0:	3332      	adds	r3, #50	@ 0x32
 800a9c2:	4a08      	ldr	r2, [pc, #32]	@ (800a9e4 <UART_SetConfig+0x4e4>)
 800a9c4:	fba2 2303 	umull	r2, r3, r2, r3
 800a9c8:	095b      	lsrs	r3, r3, #5
 800a9ca:	f003 020f 	and.w	r2, r3, #15
 800a9ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	4422      	add	r2, r4
 800a9d6:	609a      	str	r2, [r3, #8]
}
 800a9d8:	bf00      	nop
 800a9da:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a9e4:	51eb851f 	.word	0x51eb851f

0800a9e8 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                     const FSMC_NORSRAM_InitTypeDef *Init)
{
 800a9e8:	b480      	push	{r7}
 800a9ea:	b087      	sub	sp, #28
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
 800a9f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	681a      	ldr	r2, [r3, #0]
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9fc:	683a      	ldr	r2, [r7, #0]
 800a9fe:	6812      	ldr	r2, [r2, #0]
 800aa00:	f023 0101 	bic.w	r1, r3, #1
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	689b      	ldr	r3, [r3, #8]
 800aa0e:	2b08      	cmp	r3, #8
 800aa10:	d102      	bne.n	800aa18 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800aa12:	2340      	movs	r3, #64	@ 0x40
 800aa14:	617b      	str	r3, [r7, #20]
 800aa16:	e001      	b.n	800aa1c <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800aa18:	2300      	movs	r3, #0
 800aa1a:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800aa20:	697b      	ldr	r3, [r7, #20]
 800aa22:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800aa28:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800aa2e:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800aa30:	683b      	ldr	r3, [r7, #0]
 800aa32:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800aa34:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800aa3a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 800aa40:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 800aa46:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 800aa4c:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 800aa52:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 800aa58:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800aa5a:	683b      	ldr	r3, [r7, #0]
 800aa5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 800aa5e:	4313      	orrs	r3, r2
 800aa60:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	699b      	ldr	r3, [r3, #24]
 800aa66:	693a      	ldr	r2, [r7, #16]
 800aa68:	4313      	orrs	r3, r2
 800aa6a:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa70:	693a      	ldr	r2, [r7, #16]
 800aa72:	4313      	orrs	r3, r2
 800aa74:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 800aa76:	4b10      	ldr	r3, [pc, #64]	@ (800aab8 <FSMC_NORSRAM_Init+0xd0>)
 800aa78:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800aa80:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 800aa88:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	681a      	ldr	r2, [r3, #0]
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	43db      	mvns	r3, r3
 800aa98:	ea02 0103 	and.w	r1, r2, r3
 800aa9c:	683b      	ldr	r3, [r7, #0]
 800aa9e:	681a      	ldr	r2, [r3, #0]
 800aaa0:	693b      	ldr	r3, [r7, #16]
 800aaa2:	4319      	orrs	r1, r3
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 800aaaa:	2300      	movs	r3, #0
}
 800aaac:	4618      	mov	r0, r3
 800aaae:	371c      	adds	r7, #28
 800aab0:	46bd      	mov	sp, r7
 800aab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab6:	4770      	bx	lr
 800aab8:	0008fb7f 	.word	0x0008fb7f

0800aabc <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                           const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800aabc:	b480      	push	{r7}
 800aabe:	b085      	sub	sp, #20
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	60f8      	str	r0, [r7, #12]
 800aac4:	60b9      	str	r1, [r7, #8]
 800aac6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  Device->BTCR[Bank + 1U] =
    (Timing->AddressSetupTime << FSMC_BTR1_ADDSET_Pos) |
 800aac8:	68bb      	ldr	r3, [r7, #8]
 800aaca:	681a      	ldr	r2, [r3, #0]
    (Timing->AddressHoldTime << FSMC_BTR1_ADDHLD_Pos) |
 800aacc:	68bb      	ldr	r3, [r7, #8]
 800aace:	685b      	ldr	r3, [r3, #4]
 800aad0:	011b      	lsls	r3, r3, #4
    (Timing->AddressSetupTime << FSMC_BTR1_ADDSET_Pos) |
 800aad2:	431a      	orrs	r2, r3
    (Timing->DataSetupTime << FSMC_BTR1_DATAST_Pos) |
 800aad4:	68bb      	ldr	r3, [r7, #8]
 800aad6:	689b      	ldr	r3, [r3, #8]
 800aad8:	021b      	lsls	r3, r3, #8
    (Timing->AddressHoldTime << FSMC_BTR1_ADDHLD_Pos) |
 800aada:	431a      	orrs	r2, r3
    (Timing->BusTurnAroundDuration << FSMC_BTR1_BUSTURN_Pos) |
 800aadc:	68bb      	ldr	r3, [r7, #8]
 800aade:	68db      	ldr	r3, [r3, #12]
 800aae0:	041b      	lsls	r3, r3, #16
    (Timing->DataSetupTime << FSMC_BTR1_DATAST_Pos) |
 800aae2:	431a      	orrs	r2, r3
    ((Timing->CLKDivision - 1U) << FSMC_BTR1_CLKDIV_Pos) |
 800aae4:	68bb      	ldr	r3, [r7, #8]
 800aae6:	691b      	ldr	r3, [r3, #16]
 800aae8:	3b01      	subs	r3, #1
 800aaea:	051b      	lsls	r3, r3, #20
    (Timing->BusTurnAroundDuration << FSMC_BTR1_BUSTURN_Pos) |
 800aaec:	431a      	orrs	r2, r3
    ((Timing->DataLatency - 2U) << FSMC_BTR1_DATLAT_Pos) |
 800aaee:	68bb      	ldr	r3, [r7, #8]
 800aaf0:	695b      	ldr	r3, [r3, #20]
 800aaf2:	3b02      	subs	r3, #2
 800aaf4:	061b      	lsls	r3, r3, #24
    ((Timing->CLKDivision - 1U) << FSMC_BTR1_CLKDIV_Pos) |
 800aaf6:	ea42 0103 	orr.w	r1, r2, r3
    Timing->AccessMode;
 800aafa:	68bb      	ldr	r3, [r7, #8]
 800aafc:	699b      	ldr	r3, [r3, #24]
  Device->BTCR[Bank + 1U] =
 800aafe:	687a      	ldr	r2, [r7, #4]
 800ab00:	3201      	adds	r2, #1
    ((Timing->DataLatency - 2U) << FSMC_BTR1_DATLAT_Pos) |
 800ab02:	4319      	orrs	r1, r3
  Device->BTCR[Bank + 1U] =
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif /* FSMC_BCR1_CCLKEN */
  return HAL_OK;
 800ab0a:	2300      	movs	r3, #0
}
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	3714      	adds	r7, #20
 800ab10:	46bd      	mov	sp, r7
 800ab12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab16:	4770      	bx	lr

0800ab18 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                    const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                    uint32_t ExtendedMode)
{
 800ab18:	b480      	push	{r7}
 800ab1a:	b085      	sub	sp, #20
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	60f8      	str	r0, [r7, #12]
 800ab20:	60b9      	str	r1, [r7, #8]
 800ab22:	607a      	str	r2, [r7, #4]
 800ab24:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ab2c:	d11d      	bne.n	800ab6a <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	687a      	ldr	r2, [r7, #4]
 800ab32:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ab36:	4b13      	ldr	r3, [pc, #76]	@ (800ab84 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800ab38:	4013      	ands	r3, r2
 800ab3a:	68ba      	ldr	r2, [r7, #8]
 800ab3c:	6811      	ldr	r1, [r2, #0]
 800ab3e:	68ba      	ldr	r2, [r7, #8]
 800ab40:	6852      	ldr	r2, [r2, #4]
 800ab42:	0112      	lsls	r2, r2, #4
 800ab44:	4311      	orrs	r1, r2
 800ab46:	68ba      	ldr	r2, [r7, #8]
 800ab48:	6892      	ldr	r2, [r2, #8]
 800ab4a:	0212      	lsls	r2, r2, #8
 800ab4c:	4311      	orrs	r1, r2
 800ab4e:	68ba      	ldr	r2, [r7, #8]
 800ab50:	6992      	ldr	r2, [r2, #24]
 800ab52:	4311      	orrs	r1, r2
 800ab54:	68ba      	ldr	r2, [r7, #8]
 800ab56:	68d2      	ldr	r2, [r2, #12]
 800ab58:	0412      	lsls	r2, r2, #16
 800ab5a:	430a      	orrs	r2, r1
 800ab5c:	ea43 0102 	orr.w	r1, r3, r2
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	687a      	ldr	r2, [r7, #4]
 800ab64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800ab68:	e005      	b.n	800ab76 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	687a      	ldr	r2, [r7, #4]
 800ab6e:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800ab72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800ab76:	2300      	movs	r3, #0
}
 800ab78:	4618      	mov	r0, r3
 800ab7a:	3714      	adds	r7, #20
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab82:	4770      	bx	lr
 800ab84:	cff00000 	.word	0xcff00000

0800ab88 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ab88:	b084      	sub	sp, #16
 800ab8a:	b580      	push	{r7, lr}
 800ab8c:	b084      	sub	sp, #16
 800ab8e:	af00      	add	r7, sp, #0
 800ab90:	6078      	str	r0, [r7, #4]
 800ab92:	f107 001c 	add.w	r0, r7, #28
 800ab96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ab9a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800ab9e:	2b01      	cmp	r3, #1
 800aba0:	d123      	bne.n	800abea <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aba6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	68db      	ldr	r3, [r3, #12]
 800abb2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800abb6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800abba:	687a      	ldr	r2, [r7, #4]
 800abbc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	68db      	ldr	r3, [r3, #12]
 800abc2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800abca:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800abce:	2b01      	cmp	r3, #1
 800abd0:	d105      	bne.n	800abde <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	68db      	ldr	r3, [r3, #12]
 800abd6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800abde:	6878      	ldr	r0, [r7, #4]
 800abe0:	f001 fae8 	bl	800c1b4 <USB_CoreReset>
 800abe4:	4603      	mov	r3, r0
 800abe6:	73fb      	strb	r3, [r7, #15]
 800abe8:	e01b      	b.n	800ac22 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	68db      	ldr	r3, [r3, #12]
 800abee:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800abf6:	6878      	ldr	r0, [r7, #4]
 800abf8:	f001 fadc 	bl	800c1b4 <USB_CoreReset>
 800abfc:	4603      	mov	r3, r0
 800abfe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ac00:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d106      	bne.n	800ac16 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac0c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	639a      	str	r2, [r3, #56]	@ 0x38
 800ac14:	e005      	b.n	800ac22 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac1a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ac22:	7fbb      	ldrb	r3, [r7, #30]
 800ac24:	2b01      	cmp	r3, #1
 800ac26:	d10b      	bne.n	800ac40 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	689b      	ldr	r3, [r3, #8]
 800ac2c:	f043 0206 	orr.w	r2, r3, #6
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	689b      	ldr	r3, [r3, #8]
 800ac38:	f043 0220 	orr.w	r2, r3, #32
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ac40:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac42:	4618      	mov	r0, r3
 800ac44:	3710      	adds	r7, #16
 800ac46:	46bd      	mov	sp, r7
 800ac48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ac4c:	b004      	add	sp, #16
 800ac4e:	4770      	bx	lr

0800ac50 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800ac50:	b480      	push	{r7}
 800ac52:	b087      	sub	sp, #28
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	60f8      	str	r0, [r7, #12]
 800ac58:	60b9      	str	r1, [r7, #8]
 800ac5a:	4613      	mov	r3, r2
 800ac5c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800ac5e:	79fb      	ldrb	r3, [r7, #7]
 800ac60:	2b02      	cmp	r3, #2
 800ac62:	d165      	bne.n	800ad30 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800ac64:	68bb      	ldr	r3, [r7, #8]
 800ac66:	4a41      	ldr	r2, [pc, #260]	@ (800ad6c <USB_SetTurnaroundTime+0x11c>)
 800ac68:	4293      	cmp	r3, r2
 800ac6a:	d906      	bls.n	800ac7a <USB_SetTurnaroundTime+0x2a>
 800ac6c:	68bb      	ldr	r3, [r7, #8]
 800ac6e:	4a40      	ldr	r2, [pc, #256]	@ (800ad70 <USB_SetTurnaroundTime+0x120>)
 800ac70:	4293      	cmp	r3, r2
 800ac72:	d202      	bcs.n	800ac7a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800ac74:	230f      	movs	r3, #15
 800ac76:	617b      	str	r3, [r7, #20]
 800ac78:	e062      	b.n	800ad40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800ac7a:	68bb      	ldr	r3, [r7, #8]
 800ac7c:	4a3c      	ldr	r2, [pc, #240]	@ (800ad70 <USB_SetTurnaroundTime+0x120>)
 800ac7e:	4293      	cmp	r3, r2
 800ac80:	d306      	bcc.n	800ac90 <USB_SetTurnaroundTime+0x40>
 800ac82:	68bb      	ldr	r3, [r7, #8]
 800ac84:	4a3b      	ldr	r2, [pc, #236]	@ (800ad74 <USB_SetTurnaroundTime+0x124>)
 800ac86:	4293      	cmp	r3, r2
 800ac88:	d202      	bcs.n	800ac90 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800ac8a:	230e      	movs	r3, #14
 800ac8c:	617b      	str	r3, [r7, #20]
 800ac8e:	e057      	b.n	800ad40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800ac90:	68bb      	ldr	r3, [r7, #8]
 800ac92:	4a38      	ldr	r2, [pc, #224]	@ (800ad74 <USB_SetTurnaroundTime+0x124>)
 800ac94:	4293      	cmp	r3, r2
 800ac96:	d306      	bcc.n	800aca6 <USB_SetTurnaroundTime+0x56>
 800ac98:	68bb      	ldr	r3, [r7, #8]
 800ac9a:	4a37      	ldr	r2, [pc, #220]	@ (800ad78 <USB_SetTurnaroundTime+0x128>)
 800ac9c:	4293      	cmp	r3, r2
 800ac9e:	d202      	bcs.n	800aca6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800aca0:	230d      	movs	r3, #13
 800aca2:	617b      	str	r3, [r7, #20]
 800aca4:	e04c      	b.n	800ad40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800aca6:	68bb      	ldr	r3, [r7, #8]
 800aca8:	4a33      	ldr	r2, [pc, #204]	@ (800ad78 <USB_SetTurnaroundTime+0x128>)
 800acaa:	4293      	cmp	r3, r2
 800acac:	d306      	bcc.n	800acbc <USB_SetTurnaroundTime+0x6c>
 800acae:	68bb      	ldr	r3, [r7, #8]
 800acb0:	4a32      	ldr	r2, [pc, #200]	@ (800ad7c <USB_SetTurnaroundTime+0x12c>)
 800acb2:	4293      	cmp	r3, r2
 800acb4:	d802      	bhi.n	800acbc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800acb6:	230c      	movs	r3, #12
 800acb8:	617b      	str	r3, [r7, #20]
 800acba:	e041      	b.n	800ad40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800acbc:	68bb      	ldr	r3, [r7, #8]
 800acbe:	4a2f      	ldr	r2, [pc, #188]	@ (800ad7c <USB_SetTurnaroundTime+0x12c>)
 800acc0:	4293      	cmp	r3, r2
 800acc2:	d906      	bls.n	800acd2 <USB_SetTurnaroundTime+0x82>
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	4a2e      	ldr	r2, [pc, #184]	@ (800ad80 <USB_SetTurnaroundTime+0x130>)
 800acc8:	4293      	cmp	r3, r2
 800acca:	d802      	bhi.n	800acd2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800accc:	230b      	movs	r3, #11
 800acce:	617b      	str	r3, [r7, #20]
 800acd0:	e036      	b.n	800ad40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800acd2:	68bb      	ldr	r3, [r7, #8]
 800acd4:	4a2a      	ldr	r2, [pc, #168]	@ (800ad80 <USB_SetTurnaroundTime+0x130>)
 800acd6:	4293      	cmp	r3, r2
 800acd8:	d906      	bls.n	800ace8 <USB_SetTurnaroundTime+0x98>
 800acda:	68bb      	ldr	r3, [r7, #8]
 800acdc:	4a29      	ldr	r2, [pc, #164]	@ (800ad84 <USB_SetTurnaroundTime+0x134>)
 800acde:	4293      	cmp	r3, r2
 800ace0:	d802      	bhi.n	800ace8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800ace2:	230a      	movs	r3, #10
 800ace4:	617b      	str	r3, [r7, #20]
 800ace6:	e02b      	b.n	800ad40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800ace8:	68bb      	ldr	r3, [r7, #8]
 800acea:	4a26      	ldr	r2, [pc, #152]	@ (800ad84 <USB_SetTurnaroundTime+0x134>)
 800acec:	4293      	cmp	r3, r2
 800acee:	d906      	bls.n	800acfe <USB_SetTurnaroundTime+0xae>
 800acf0:	68bb      	ldr	r3, [r7, #8]
 800acf2:	4a25      	ldr	r2, [pc, #148]	@ (800ad88 <USB_SetTurnaroundTime+0x138>)
 800acf4:	4293      	cmp	r3, r2
 800acf6:	d202      	bcs.n	800acfe <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800acf8:	2309      	movs	r3, #9
 800acfa:	617b      	str	r3, [r7, #20]
 800acfc:	e020      	b.n	800ad40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800acfe:	68bb      	ldr	r3, [r7, #8]
 800ad00:	4a21      	ldr	r2, [pc, #132]	@ (800ad88 <USB_SetTurnaroundTime+0x138>)
 800ad02:	4293      	cmp	r3, r2
 800ad04:	d306      	bcc.n	800ad14 <USB_SetTurnaroundTime+0xc4>
 800ad06:	68bb      	ldr	r3, [r7, #8]
 800ad08:	4a20      	ldr	r2, [pc, #128]	@ (800ad8c <USB_SetTurnaroundTime+0x13c>)
 800ad0a:	4293      	cmp	r3, r2
 800ad0c:	d802      	bhi.n	800ad14 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800ad0e:	2308      	movs	r3, #8
 800ad10:	617b      	str	r3, [r7, #20]
 800ad12:	e015      	b.n	800ad40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800ad14:	68bb      	ldr	r3, [r7, #8]
 800ad16:	4a1d      	ldr	r2, [pc, #116]	@ (800ad8c <USB_SetTurnaroundTime+0x13c>)
 800ad18:	4293      	cmp	r3, r2
 800ad1a:	d906      	bls.n	800ad2a <USB_SetTurnaroundTime+0xda>
 800ad1c:	68bb      	ldr	r3, [r7, #8]
 800ad1e:	4a1c      	ldr	r2, [pc, #112]	@ (800ad90 <USB_SetTurnaroundTime+0x140>)
 800ad20:	4293      	cmp	r3, r2
 800ad22:	d202      	bcs.n	800ad2a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800ad24:	2307      	movs	r3, #7
 800ad26:	617b      	str	r3, [r7, #20]
 800ad28:	e00a      	b.n	800ad40 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800ad2a:	2306      	movs	r3, #6
 800ad2c:	617b      	str	r3, [r7, #20]
 800ad2e:	e007      	b.n	800ad40 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800ad30:	79fb      	ldrb	r3, [r7, #7]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d102      	bne.n	800ad3c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800ad36:	2309      	movs	r3, #9
 800ad38:	617b      	str	r3, [r7, #20]
 800ad3a:	e001      	b.n	800ad40 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800ad3c:	2309      	movs	r3, #9
 800ad3e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	68db      	ldr	r3, [r3, #12]
 800ad44:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	68da      	ldr	r2, [r3, #12]
 800ad50:	697b      	ldr	r3, [r7, #20]
 800ad52:	029b      	lsls	r3, r3, #10
 800ad54:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800ad58:	431a      	orrs	r2, r3
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ad5e:	2300      	movs	r3, #0
}
 800ad60:	4618      	mov	r0, r3
 800ad62:	371c      	adds	r7, #28
 800ad64:	46bd      	mov	sp, r7
 800ad66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6a:	4770      	bx	lr
 800ad6c:	00d8acbf 	.word	0x00d8acbf
 800ad70:	00e4e1c0 	.word	0x00e4e1c0
 800ad74:	00f42400 	.word	0x00f42400
 800ad78:	01067380 	.word	0x01067380
 800ad7c:	011a499f 	.word	0x011a499f
 800ad80:	01312cff 	.word	0x01312cff
 800ad84:	014ca43f 	.word	0x014ca43f
 800ad88:	016e3600 	.word	0x016e3600
 800ad8c:	01a6ab1f 	.word	0x01a6ab1f
 800ad90:	01e84800 	.word	0x01e84800

0800ad94 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ad94:	b480      	push	{r7}
 800ad96:	b083      	sub	sp, #12
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	689b      	ldr	r3, [r3, #8]
 800ada0:	f043 0201 	orr.w	r2, r3, #1
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ada8:	2300      	movs	r3, #0
}
 800adaa:	4618      	mov	r0, r3
 800adac:	370c      	adds	r7, #12
 800adae:	46bd      	mov	sp, r7
 800adb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb4:	4770      	bx	lr

0800adb6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800adb6:	b480      	push	{r7}
 800adb8:	b083      	sub	sp, #12
 800adba:	af00      	add	r7, sp, #0
 800adbc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	689b      	ldr	r3, [r3, #8]
 800adc2:	f023 0201 	bic.w	r2, r3, #1
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800adca:	2300      	movs	r3, #0
}
 800adcc:	4618      	mov	r0, r3
 800adce:	370c      	adds	r7, #12
 800add0:	46bd      	mov	sp, r7
 800add2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add6:	4770      	bx	lr

0800add8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b084      	sub	sp, #16
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
 800ade0:	460b      	mov	r3, r1
 800ade2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800ade4:	2300      	movs	r3, #0
 800ade6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	68db      	ldr	r3, [r3, #12]
 800adec:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800adf4:	78fb      	ldrb	r3, [r7, #3]
 800adf6:	2b01      	cmp	r3, #1
 800adf8:	d115      	bne.n	800ae26 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	68db      	ldr	r3, [r3, #12]
 800adfe:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800ae06:	200a      	movs	r0, #10
 800ae08:	f7f9 ffa2 	bl	8004d50 <HAL_Delay>
      ms += 10U;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	330a      	adds	r3, #10
 800ae10:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800ae12:	6878      	ldr	r0, [r7, #4]
 800ae14:	f001 f93f 	bl	800c096 <USB_GetMode>
 800ae18:	4603      	mov	r3, r0
 800ae1a:	2b01      	cmp	r3, #1
 800ae1c:	d01e      	beq.n	800ae5c <USB_SetCurrentMode+0x84>
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	2bc7      	cmp	r3, #199	@ 0xc7
 800ae22:	d9f0      	bls.n	800ae06 <USB_SetCurrentMode+0x2e>
 800ae24:	e01a      	b.n	800ae5c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800ae26:	78fb      	ldrb	r3, [r7, #3]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d115      	bne.n	800ae58 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	68db      	ldr	r3, [r3, #12]
 800ae30:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800ae38:	200a      	movs	r0, #10
 800ae3a:	f7f9 ff89 	bl	8004d50 <HAL_Delay>
      ms += 10U;
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	330a      	adds	r3, #10
 800ae42:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800ae44:	6878      	ldr	r0, [r7, #4]
 800ae46:	f001 f926 	bl	800c096 <USB_GetMode>
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d005      	beq.n	800ae5c <USB_SetCurrentMode+0x84>
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	2bc7      	cmp	r3, #199	@ 0xc7
 800ae54:	d9f0      	bls.n	800ae38 <USB_SetCurrentMode+0x60>
 800ae56:	e001      	b.n	800ae5c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ae58:	2301      	movs	r3, #1
 800ae5a:	e005      	b.n	800ae68 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	2bc8      	cmp	r3, #200	@ 0xc8
 800ae60:	d101      	bne.n	800ae66 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ae62:	2301      	movs	r3, #1
 800ae64:	e000      	b.n	800ae68 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800ae66:	2300      	movs	r3, #0
}
 800ae68:	4618      	mov	r0, r3
 800ae6a:	3710      	adds	r7, #16
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	bd80      	pop	{r7, pc}

0800ae70 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ae70:	b084      	sub	sp, #16
 800ae72:	b580      	push	{r7, lr}
 800ae74:	b086      	sub	sp, #24
 800ae76:	af00      	add	r7, sp, #0
 800ae78:	6078      	str	r0, [r7, #4]
 800ae7a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800ae7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ae82:	2300      	movs	r3, #0
 800ae84:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	613b      	str	r3, [r7, #16]
 800ae8e:	e009      	b.n	800aea4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ae90:	687a      	ldr	r2, [r7, #4]
 800ae92:	693b      	ldr	r3, [r7, #16]
 800ae94:	3340      	adds	r3, #64	@ 0x40
 800ae96:	009b      	lsls	r3, r3, #2
 800ae98:	4413      	add	r3, r2
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ae9e:	693b      	ldr	r3, [r7, #16]
 800aea0:	3301      	adds	r3, #1
 800aea2:	613b      	str	r3, [r7, #16]
 800aea4:	693b      	ldr	r3, [r7, #16]
 800aea6:	2b0e      	cmp	r3, #14
 800aea8:	d9f2      	bls.n	800ae90 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800aeaa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d11c      	bne.n	800aeec <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aeb8:	685b      	ldr	r3, [r3, #4]
 800aeba:	68fa      	ldr	r2, [r7, #12]
 800aebc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800aec0:	f043 0302 	orr.w	r3, r3, #2
 800aec4:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aeca:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aed6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aee2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	639a      	str	r2, [r3, #56]	@ 0x38
 800aeea:	e00b      	b.n	800af04 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aef0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aefc:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800af0a:	461a      	mov	r2, r3
 800af0c:	2300      	movs	r3, #0
 800af0e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800af10:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800af14:	2b01      	cmp	r3, #1
 800af16:	d10d      	bne.n	800af34 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800af18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d104      	bne.n	800af2a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800af20:	2100      	movs	r1, #0
 800af22:	6878      	ldr	r0, [r7, #4]
 800af24:	f000 f968 	bl	800b1f8 <USB_SetDevSpeed>
 800af28:	e008      	b.n	800af3c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800af2a:	2101      	movs	r1, #1
 800af2c:	6878      	ldr	r0, [r7, #4]
 800af2e:	f000 f963 	bl	800b1f8 <USB_SetDevSpeed>
 800af32:	e003      	b.n	800af3c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800af34:	2103      	movs	r1, #3
 800af36:	6878      	ldr	r0, [r7, #4]
 800af38:	f000 f95e 	bl	800b1f8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800af3c:	2110      	movs	r1, #16
 800af3e:	6878      	ldr	r0, [r7, #4]
 800af40:	f000 f8fa 	bl	800b138 <USB_FlushTxFifo>
 800af44:	4603      	mov	r3, r0
 800af46:	2b00      	cmp	r3, #0
 800af48:	d001      	beq.n	800af4e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800af4a:	2301      	movs	r3, #1
 800af4c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800af4e:	6878      	ldr	r0, [r7, #4]
 800af50:	f000 f924 	bl	800b19c <USB_FlushRxFifo>
 800af54:	4603      	mov	r3, r0
 800af56:	2b00      	cmp	r3, #0
 800af58:	d001      	beq.n	800af5e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800af5a:	2301      	movs	r3, #1
 800af5c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800af64:	461a      	mov	r2, r3
 800af66:	2300      	movs	r3, #0
 800af68:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800af70:	461a      	mov	r2, r3
 800af72:	2300      	movs	r3, #0
 800af74:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800af7c:	461a      	mov	r2, r3
 800af7e:	2300      	movs	r3, #0
 800af80:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800af82:	2300      	movs	r3, #0
 800af84:	613b      	str	r3, [r7, #16]
 800af86:	e043      	b.n	800b010 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800af88:	693b      	ldr	r3, [r7, #16]
 800af8a:	015a      	lsls	r2, r3, #5
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	4413      	add	r3, r2
 800af90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800af9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800af9e:	d118      	bne.n	800afd2 <USB_DevInit+0x162>
    {
      if (i == 0U)
 800afa0:	693b      	ldr	r3, [r7, #16]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d10a      	bne.n	800afbc <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800afa6:	693b      	ldr	r3, [r7, #16]
 800afa8:	015a      	lsls	r2, r3, #5
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	4413      	add	r3, r2
 800afae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800afb2:	461a      	mov	r2, r3
 800afb4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800afb8:	6013      	str	r3, [r2, #0]
 800afba:	e013      	b.n	800afe4 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800afbc:	693b      	ldr	r3, [r7, #16]
 800afbe:	015a      	lsls	r2, r3, #5
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	4413      	add	r3, r2
 800afc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800afc8:	461a      	mov	r2, r3
 800afca:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800afce:	6013      	str	r3, [r2, #0]
 800afd0:	e008      	b.n	800afe4 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800afd2:	693b      	ldr	r3, [r7, #16]
 800afd4:	015a      	lsls	r2, r3, #5
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	4413      	add	r3, r2
 800afda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800afde:	461a      	mov	r2, r3
 800afe0:	2300      	movs	r3, #0
 800afe2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800afe4:	693b      	ldr	r3, [r7, #16]
 800afe6:	015a      	lsls	r2, r3, #5
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	4413      	add	r3, r2
 800afec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aff0:	461a      	mov	r2, r3
 800aff2:	2300      	movs	r3, #0
 800aff4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800aff6:	693b      	ldr	r3, [r7, #16]
 800aff8:	015a      	lsls	r2, r3, #5
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	4413      	add	r3, r2
 800affe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b002:	461a      	mov	r2, r3
 800b004:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b008:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b00a:	693b      	ldr	r3, [r7, #16]
 800b00c:	3301      	adds	r3, #1
 800b00e:	613b      	str	r3, [r7, #16]
 800b010:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b014:	461a      	mov	r2, r3
 800b016:	693b      	ldr	r3, [r7, #16]
 800b018:	4293      	cmp	r3, r2
 800b01a:	d3b5      	bcc.n	800af88 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b01c:	2300      	movs	r3, #0
 800b01e:	613b      	str	r3, [r7, #16]
 800b020:	e043      	b.n	800b0aa <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b022:	693b      	ldr	r3, [r7, #16]
 800b024:	015a      	lsls	r2, r3, #5
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	4413      	add	r3, r2
 800b02a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b034:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b038:	d118      	bne.n	800b06c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800b03a:	693b      	ldr	r3, [r7, #16]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d10a      	bne.n	800b056 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b040:	693b      	ldr	r3, [r7, #16]
 800b042:	015a      	lsls	r2, r3, #5
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	4413      	add	r3, r2
 800b048:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b04c:	461a      	mov	r2, r3
 800b04e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b052:	6013      	str	r3, [r2, #0]
 800b054:	e013      	b.n	800b07e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b056:	693b      	ldr	r3, [r7, #16]
 800b058:	015a      	lsls	r2, r3, #5
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	4413      	add	r3, r2
 800b05e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b062:	461a      	mov	r2, r3
 800b064:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800b068:	6013      	str	r3, [r2, #0]
 800b06a:	e008      	b.n	800b07e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b06c:	693b      	ldr	r3, [r7, #16]
 800b06e:	015a      	lsls	r2, r3, #5
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	4413      	add	r3, r2
 800b074:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b078:	461a      	mov	r2, r3
 800b07a:	2300      	movs	r3, #0
 800b07c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b07e:	693b      	ldr	r3, [r7, #16]
 800b080:	015a      	lsls	r2, r3, #5
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	4413      	add	r3, r2
 800b086:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b08a:	461a      	mov	r2, r3
 800b08c:	2300      	movs	r3, #0
 800b08e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b090:	693b      	ldr	r3, [r7, #16]
 800b092:	015a      	lsls	r2, r3, #5
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	4413      	add	r3, r2
 800b098:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b09c:	461a      	mov	r2, r3
 800b09e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b0a2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b0a4:	693b      	ldr	r3, [r7, #16]
 800b0a6:	3301      	adds	r3, #1
 800b0a8:	613b      	str	r3, [r7, #16]
 800b0aa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b0ae:	461a      	mov	r2, r3
 800b0b0:	693b      	ldr	r3, [r7, #16]
 800b0b2:	4293      	cmp	r3, r2
 800b0b4:	d3b5      	bcc.n	800b022 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b0bc:	691b      	ldr	r3, [r3, #16]
 800b0be:	68fa      	ldr	r2, [r7, #12]
 800b0c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b0c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b0c8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800b0d6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b0d8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d105      	bne.n	800b0ec <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	699b      	ldr	r3, [r3, #24]
 800b0e4:	f043 0210 	orr.w	r2, r3, #16
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	699a      	ldr	r2, [r3, #24]
 800b0f0:	4b10      	ldr	r3, [pc, #64]	@ (800b134 <USB_DevInit+0x2c4>)
 800b0f2:	4313      	orrs	r3, r2
 800b0f4:	687a      	ldr	r2, [r7, #4]
 800b0f6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b0f8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d005      	beq.n	800b10c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	699b      	ldr	r3, [r3, #24]
 800b104:	f043 0208 	orr.w	r2, r3, #8
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b10c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b110:	2b01      	cmp	r3, #1
 800b112:	d107      	bne.n	800b124 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	699b      	ldr	r3, [r3, #24]
 800b118:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b11c:	f043 0304 	orr.w	r3, r3, #4
 800b120:	687a      	ldr	r2, [r7, #4]
 800b122:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b124:	7dfb      	ldrb	r3, [r7, #23]
}
 800b126:	4618      	mov	r0, r3
 800b128:	3718      	adds	r7, #24
 800b12a:	46bd      	mov	sp, r7
 800b12c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b130:	b004      	add	sp, #16
 800b132:	4770      	bx	lr
 800b134:	803c3800 	.word	0x803c3800

0800b138 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b138:	b480      	push	{r7}
 800b13a:	b085      	sub	sp, #20
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
 800b140:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b142:	2300      	movs	r3, #0
 800b144:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	3301      	adds	r3, #1
 800b14a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b152:	d901      	bls.n	800b158 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b154:	2303      	movs	r3, #3
 800b156:	e01b      	b.n	800b190 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	691b      	ldr	r3, [r3, #16]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	daf2      	bge.n	800b146 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b160:	2300      	movs	r3, #0
 800b162:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b164:	683b      	ldr	r3, [r7, #0]
 800b166:	019b      	lsls	r3, r3, #6
 800b168:	f043 0220 	orr.w	r2, r3, #32
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	3301      	adds	r3, #1
 800b174:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b17c:	d901      	bls.n	800b182 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b17e:	2303      	movs	r3, #3
 800b180:	e006      	b.n	800b190 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	691b      	ldr	r3, [r3, #16]
 800b186:	f003 0320 	and.w	r3, r3, #32
 800b18a:	2b20      	cmp	r3, #32
 800b18c:	d0f0      	beq.n	800b170 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b18e:	2300      	movs	r3, #0
}
 800b190:	4618      	mov	r0, r3
 800b192:	3714      	adds	r7, #20
 800b194:	46bd      	mov	sp, r7
 800b196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19a:	4770      	bx	lr

0800b19c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b19c:	b480      	push	{r7}
 800b19e:	b085      	sub	sp, #20
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	3301      	adds	r3, #1
 800b1ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b1b4:	d901      	bls.n	800b1ba <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b1b6:	2303      	movs	r3, #3
 800b1b8:	e018      	b.n	800b1ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	691b      	ldr	r3, [r3, #16]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	daf2      	bge.n	800b1a8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	2210      	movs	r2, #16
 800b1ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	3301      	adds	r3, #1
 800b1d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b1d8:	d901      	bls.n	800b1de <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b1da:	2303      	movs	r3, #3
 800b1dc:	e006      	b.n	800b1ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	691b      	ldr	r3, [r3, #16]
 800b1e2:	f003 0310 	and.w	r3, r3, #16
 800b1e6:	2b10      	cmp	r3, #16
 800b1e8:	d0f0      	beq.n	800b1cc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b1ea:	2300      	movs	r3, #0
}
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	3714      	adds	r7, #20
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f6:	4770      	bx	lr

0800b1f8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b1f8:	b480      	push	{r7}
 800b1fa:	b085      	sub	sp, #20
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
 800b200:	460b      	mov	r3, r1
 800b202:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b20e:	681a      	ldr	r2, [r3, #0]
 800b210:	78fb      	ldrb	r3, [r7, #3]
 800b212:	68f9      	ldr	r1, [r7, #12]
 800b214:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b218:	4313      	orrs	r3, r2
 800b21a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b21c:	2300      	movs	r3, #0
}
 800b21e:	4618      	mov	r0, r3
 800b220:	3714      	adds	r7, #20
 800b222:	46bd      	mov	sp, r7
 800b224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b228:	4770      	bx	lr

0800b22a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800b22a:	b480      	push	{r7}
 800b22c:	b087      	sub	sp, #28
 800b22e:	af00      	add	r7, sp, #0
 800b230:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800b236:	693b      	ldr	r3, [r7, #16]
 800b238:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b23c:	689b      	ldr	r3, [r3, #8]
 800b23e:	f003 0306 	and.w	r3, r3, #6
 800b242:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d102      	bne.n	800b250 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800b24a:	2300      	movs	r3, #0
 800b24c:	75fb      	strb	r3, [r7, #23]
 800b24e:	e00a      	b.n	800b266 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	2b02      	cmp	r3, #2
 800b254:	d002      	beq.n	800b25c <USB_GetDevSpeed+0x32>
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	2b06      	cmp	r3, #6
 800b25a:	d102      	bne.n	800b262 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800b25c:	2302      	movs	r3, #2
 800b25e:	75fb      	strb	r3, [r7, #23]
 800b260:	e001      	b.n	800b266 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800b262:	230f      	movs	r3, #15
 800b264:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800b266:	7dfb      	ldrb	r3, [r7, #23]
}
 800b268:	4618      	mov	r0, r3
 800b26a:	371c      	adds	r7, #28
 800b26c:	46bd      	mov	sp, r7
 800b26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b272:	4770      	bx	lr

0800b274 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b274:	b480      	push	{r7}
 800b276:	b085      	sub	sp, #20
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
 800b27c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b282:	683b      	ldr	r3, [r7, #0]
 800b284:	781b      	ldrb	r3, [r3, #0]
 800b286:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b288:	683b      	ldr	r3, [r7, #0]
 800b28a:	785b      	ldrb	r3, [r3, #1]
 800b28c:	2b01      	cmp	r3, #1
 800b28e:	d13a      	bne.n	800b306 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b296:	69da      	ldr	r2, [r3, #28]
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	781b      	ldrb	r3, [r3, #0]
 800b29c:	f003 030f 	and.w	r3, r3, #15
 800b2a0:	2101      	movs	r1, #1
 800b2a2:	fa01 f303 	lsl.w	r3, r1, r3
 800b2a6:	b29b      	uxth	r3, r3
 800b2a8:	68f9      	ldr	r1, [r7, #12]
 800b2aa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b2ae:	4313      	orrs	r3, r2
 800b2b0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800b2b2:	68bb      	ldr	r3, [r7, #8]
 800b2b4:	015a      	lsls	r2, r3, #5
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	4413      	add	r3, r2
 800b2ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d155      	bne.n	800b374 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b2c8:	68bb      	ldr	r3, [r7, #8]
 800b2ca:	015a      	lsls	r2, r3, #5
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	4413      	add	r3, r2
 800b2d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b2d4:	681a      	ldr	r2, [r3, #0]
 800b2d6:	683b      	ldr	r3, [r7, #0]
 800b2d8:	689b      	ldr	r3, [r3, #8]
 800b2da:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	791b      	ldrb	r3, [r3, #4]
 800b2e2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b2e4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b2e6:	68bb      	ldr	r3, [r7, #8]
 800b2e8:	059b      	lsls	r3, r3, #22
 800b2ea:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b2ec:	4313      	orrs	r3, r2
 800b2ee:	68ba      	ldr	r2, [r7, #8]
 800b2f0:	0151      	lsls	r1, r2, #5
 800b2f2:	68fa      	ldr	r2, [r7, #12]
 800b2f4:	440a      	add	r2, r1
 800b2f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b2fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b2fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b302:	6013      	str	r3, [r2, #0]
 800b304:	e036      	b.n	800b374 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b30c:	69da      	ldr	r2, [r3, #28]
 800b30e:	683b      	ldr	r3, [r7, #0]
 800b310:	781b      	ldrb	r3, [r3, #0]
 800b312:	f003 030f 	and.w	r3, r3, #15
 800b316:	2101      	movs	r1, #1
 800b318:	fa01 f303 	lsl.w	r3, r1, r3
 800b31c:	041b      	lsls	r3, r3, #16
 800b31e:	68f9      	ldr	r1, [r7, #12]
 800b320:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b324:	4313      	orrs	r3, r2
 800b326:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800b328:	68bb      	ldr	r3, [r7, #8]
 800b32a:	015a      	lsls	r2, r3, #5
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	4413      	add	r3, r2
 800b330:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d11a      	bne.n	800b374 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b33e:	68bb      	ldr	r3, [r7, #8]
 800b340:	015a      	lsls	r2, r3, #5
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	4413      	add	r3, r2
 800b346:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b34a:	681a      	ldr	r2, [r3, #0]
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	689b      	ldr	r3, [r3, #8]
 800b350:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800b354:	683b      	ldr	r3, [r7, #0]
 800b356:	791b      	ldrb	r3, [r3, #4]
 800b358:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b35a:	430b      	orrs	r3, r1
 800b35c:	4313      	orrs	r3, r2
 800b35e:	68ba      	ldr	r2, [r7, #8]
 800b360:	0151      	lsls	r1, r2, #5
 800b362:	68fa      	ldr	r2, [r7, #12]
 800b364:	440a      	add	r2, r1
 800b366:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b36a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b36e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b372:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800b374:	2300      	movs	r3, #0
}
 800b376:	4618      	mov	r0, r3
 800b378:	3714      	adds	r7, #20
 800b37a:	46bd      	mov	sp, r7
 800b37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b380:	4770      	bx	lr
	...

0800b384 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b384:	b480      	push	{r7}
 800b386:	b085      	sub	sp, #20
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
 800b38c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b392:	683b      	ldr	r3, [r7, #0]
 800b394:	781b      	ldrb	r3, [r3, #0]
 800b396:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800b398:	683b      	ldr	r3, [r7, #0]
 800b39a:	785b      	ldrb	r3, [r3, #1]
 800b39c:	2b01      	cmp	r3, #1
 800b39e:	d161      	bne.n	800b464 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b3a0:	68bb      	ldr	r3, [r7, #8]
 800b3a2:	015a      	lsls	r2, r3, #5
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	4413      	add	r3, r2
 800b3a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b3b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b3b6:	d11f      	bne.n	800b3f8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800b3b8:	68bb      	ldr	r3, [r7, #8]
 800b3ba:	015a      	lsls	r2, r3, #5
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	4413      	add	r3, r2
 800b3c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	68ba      	ldr	r2, [r7, #8]
 800b3c8:	0151      	lsls	r1, r2, #5
 800b3ca:	68fa      	ldr	r2, [r7, #12]
 800b3cc:	440a      	add	r2, r1
 800b3ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b3d2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b3d6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800b3d8:	68bb      	ldr	r3, [r7, #8]
 800b3da:	015a      	lsls	r2, r3, #5
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	4413      	add	r3, r2
 800b3e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	68ba      	ldr	r2, [r7, #8]
 800b3e8:	0151      	lsls	r1, r2, #5
 800b3ea:	68fa      	ldr	r2, [r7, #12]
 800b3ec:	440a      	add	r2, r1
 800b3ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b3f2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b3f6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b3fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	781b      	ldrb	r3, [r3, #0]
 800b404:	f003 030f 	and.w	r3, r3, #15
 800b408:	2101      	movs	r1, #1
 800b40a:	fa01 f303 	lsl.w	r3, r1, r3
 800b40e:	b29b      	uxth	r3, r3
 800b410:	43db      	mvns	r3, r3
 800b412:	68f9      	ldr	r1, [r7, #12]
 800b414:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b418:	4013      	ands	r3, r2
 800b41a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b422:	69da      	ldr	r2, [r3, #28]
 800b424:	683b      	ldr	r3, [r7, #0]
 800b426:	781b      	ldrb	r3, [r3, #0]
 800b428:	f003 030f 	and.w	r3, r3, #15
 800b42c:	2101      	movs	r1, #1
 800b42e:	fa01 f303 	lsl.w	r3, r1, r3
 800b432:	b29b      	uxth	r3, r3
 800b434:	43db      	mvns	r3, r3
 800b436:	68f9      	ldr	r1, [r7, #12]
 800b438:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b43c:	4013      	ands	r3, r2
 800b43e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800b440:	68bb      	ldr	r3, [r7, #8]
 800b442:	015a      	lsls	r2, r3, #5
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	4413      	add	r3, r2
 800b448:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b44c:	681a      	ldr	r2, [r3, #0]
 800b44e:	68bb      	ldr	r3, [r7, #8]
 800b450:	0159      	lsls	r1, r3, #5
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	440b      	add	r3, r1
 800b456:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b45a:	4619      	mov	r1, r3
 800b45c:	4b35      	ldr	r3, [pc, #212]	@ (800b534 <USB_DeactivateEndpoint+0x1b0>)
 800b45e:	4013      	ands	r3, r2
 800b460:	600b      	str	r3, [r1, #0]
 800b462:	e060      	b.n	800b526 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b464:	68bb      	ldr	r3, [r7, #8]
 800b466:	015a      	lsls	r2, r3, #5
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	4413      	add	r3, r2
 800b46c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b476:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b47a:	d11f      	bne.n	800b4bc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b47c:	68bb      	ldr	r3, [r7, #8]
 800b47e:	015a      	lsls	r2, r3, #5
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	4413      	add	r3, r2
 800b484:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	68ba      	ldr	r2, [r7, #8]
 800b48c:	0151      	lsls	r1, r2, #5
 800b48e:	68fa      	ldr	r2, [r7, #12]
 800b490:	440a      	add	r2, r1
 800b492:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b496:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b49a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800b49c:	68bb      	ldr	r3, [r7, #8]
 800b49e:	015a      	lsls	r2, r3, #5
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	4413      	add	r3, r2
 800b4a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	68ba      	ldr	r2, [r7, #8]
 800b4ac:	0151      	lsls	r1, r2, #5
 800b4ae:	68fa      	ldr	r2, [r7, #12]
 800b4b0:	440a      	add	r2, r1
 800b4b2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b4b6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b4ba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b4c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b4c4:	683b      	ldr	r3, [r7, #0]
 800b4c6:	781b      	ldrb	r3, [r3, #0]
 800b4c8:	f003 030f 	and.w	r3, r3, #15
 800b4cc:	2101      	movs	r1, #1
 800b4ce:	fa01 f303 	lsl.w	r3, r1, r3
 800b4d2:	041b      	lsls	r3, r3, #16
 800b4d4:	43db      	mvns	r3, r3
 800b4d6:	68f9      	ldr	r1, [r7, #12]
 800b4d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b4dc:	4013      	ands	r3, r2
 800b4de:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b4e6:	69da      	ldr	r2, [r3, #28]
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	781b      	ldrb	r3, [r3, #0]
 800b4ec:	f003 030f 	and.w	r3, r3, #15
 800b4f0:	2101      	movs	r1, #1
 800b4f2:	fa01 f303 	lsl.w	r3, r1, r3
 800b4f6:	041b      	lsls	r3, r3, #16
 800b4f8:	43db      	mvns	r3, r3
 800b4fa:	68f9      	ldr	r1, [r7, #12]
 800b4fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b500:	4013      	ands	r3, r2
 800b502:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800b504:	68bb      	ldr	r3, [r7, #8]
 800b506:	015a      	lsls	r2, r3, #5
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	4413      	add	r3, r2
 800b50c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b510:	681a      	ldr	r2, [r3, #0]
 800b512:	68bb      	ldr	r3, [r7, #8]
 800b514:	0159      	lsls	r1, r3, #5
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	440b      	add	r3, r1
 800b51a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b51e:	4619      	mov	r1, r3
 800b520:	4b05      	ldr	r3, [pc, #20]	@ (800b538 <USB_DeactivateEndpoint+0x1b4>)
 800b522:	4013      	ands	r3, r2
 800b524:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800b526:	2300      	movs	r3, #0
}
 800b528:	4618      	mov	r0, r3
 800b52a:	3714      	adds	r7, #20
 800b52c:	46bd      	mov	sp, r7
 800b52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b532:	4770      	bx	lr
 800b534:	ec337800 	.word	0xec337800
 800b538:	eff37800 	.word	0xeff37800

0800b53c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b08a      	sub	sp, #40	@ 0x28
 800b540:	af02      	add	r7, sp, #8
 800b542:	60f8      	str	r0, [r7, #12]
 800b544:	60b9      	str	r1, [r7, #8]
 800b546:	4613      	mov	r3, r2
 800b548:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800b54e:	68bb      	ldr	r3, [r7, #8]
 800b550:	781b      	ldrb	r3, [r3, #0]
 800b552:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b554:	68bb      	ldr	r3, [r7, #8]
 800b556:	785b      	ldrb	r3, [r3, #1]
 800b558:	2b01      	cmp	r3, #1
 800b55a:	f040 817f 	bne.w	800b85c <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b55e:	68bb      	ldr	r3, [r7, #8]
 800b560:	691b      	ldr	r3, [r3, #16]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d132      	bne.n	800b5cc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b566:	69bb      	ldr	r3, [r7, #24]
 800b568:	015a      	lsls	r2, r3, #5
 800b56a:	69fb      	ldr	r3, [r7, #28]
 800b56c:	4413      	add	r3, r2
 800b56e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b572:	691b      	ldr	r3, [r3, #16]
 800b574:	69ba      	ldr	r2, [r7, #24]
 800b576:	0151      	lsls	r1, r2, #5
 800b578:	69fa      	ldr	r2, [r7, #28]
 800b57a:	440a      	add	r2, r1
 800b57c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b580:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800b584:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800b588:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b58a:	69bb      	ldr	r3, [r7, #24]
 800b58c:	015a      	lsls	r2, r3, #5
 800b58e:	69fb      	ldr	r3, [r7, #28]
 800b590:	4413      	add	r3, r2
 800b592:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b596:	691b      	ldr	r3, [r3, #16]
 800b598:	69ba      	ldr	r2, [r7, #24]
 800b59a:	0151      	lsls	r1, r2, #5
 800b59c:	69fa      	ldr	r2, [r7, #28]
 800b59e:	440a      	add	r2, r1
 800b5a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b5a4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b5a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b5aa:	69bb      	ldr	r3, [r7, #24]
 800b5ac:	015a      	lsls	r2, r3, #5
 800b5ae:	69fb      	ldr	r3, [r7, #28]
 800b5b0:	4413      	add	r3, r2
 800b5b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b5b6:	691b      	ldr	r3, [r3, #16]
 800b5b8:	69ba      	ldr	r2, [r7, #24]
 800b5ba:	0151      	lsls	r1, r2, #5
 800b5bc:	69fa      	ldr	r2, [r7, #28]
 800b5be:	440a      	add	r2, r1
 800b5c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b5c4:	0cdb      	lsrs	r3, r3, #19
 800b5c6:	04db      	lsls	r3, r3, #19
 800b5c8:	6113      	str	r3, [r2, #16]
 800b5ca:	e097      	b.n	800b6fc <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b5cc:	69bb      	ldr	r3, [r7, #24]
 800b5ce:	015a      	lsls	r2, r3, #5
 800b5d0:	69fb      	ldr	r3, [r7, #28]
 800b5d2:	4413      	add	r3, r2
 800b5d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b5d8:	691b      	ldr	r3, [r3, #16]
 800b5da:	69ba      	ldr	r2, [r7, #24]
 800b5dc:	0151      	lsls	r1, r2, #5
 800b5de:	69fa      	ldr	r2, [r7, #28]
 800b5e0:	440a      	add	r2, r1
 800b5e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b5e6:	0cdb      	lsrs	r3, r3, #19
 800b5e8:	04db      	lsls	r3, r3, #19
 800b5ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b5ec:	69bb      	ldr	r3, [r7, #24]
 800b5ee:	015a      	lsls	r2, r3, #5
 800b5f0:	69fb      	ldr	r3, [r7, #28]
 800b5f2:	4413      	add	r3, r2
 800b5f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b5f8:	691b      	ldr	r3, [r3, #16]
 800b5fa:	69ba      	ldr	r2, [r7, #24]
 800b5fc:	0151      	lsls	r1, r2, #5
 800b5fe:	69fa      	ldr	r2, [r7, #28]
 800b600:	440a      	add	r2, r1
 800b602:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b606:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800b60a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800b60e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800b610:	69bb      	ldr	r3, [r7, #24]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d11a      	bne.n	800b64c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800b616:	68bb      	ldr	r3, [r7, #8]
 800b618:	691a      	ldr	r2, [r3, #16]
 800b61a:	68bb      	ldr	r3, [r7, #8]
 800b61c:	689b      	ldr	r3, [r3, #8]
 800b61e:	429a      	cmp	r2, r3
 800b620:	d903      	bls.n	800b62a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800b622:	68bb      	ldr	r3, [r7, #8]
 800b624:	689a      	ldr	r2, [r3, #8]
 800b626:	68bb      	ldr	r3, [r7, #8]
 800b628:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b62a:	69bb      	ldr	r3, [r7, #24]
 800b62c:	015a      	lsls	r2, r3, #5
 800b62e:	69fb      	ldr	r3, [r7, #28]
 800b630:	4413      	add	r3, r2
 800b632:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b636:	691b      	ldr	r3, [r3, #16]
 800b638:	69ba      	ldr	r2, [r7, #24]
 800b63a:	0151      	lsls	r1, r2, #5
 800b63c:	69fa      	ldr	r2, [r7, #28]
 800b63e:	440a      	add	r2, r1
 800b640:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b644:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b648:	6113      	str	r3, [r2, #16]
 800b64a:	e044      	b.n	800b6d6 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b64c:	68bb      	ldr	r3, [r7, #8]
 800b64e:	691a      	ldr	r2, [r3, #16]
 800b650:	68bb      	ldr	r3, [r7, #8]
 800b652:	689b      	ldr	r3, [r3, #8]
 800b654:	4413      	add	r3, r2
 800b656:	1e5a      	subs	r2, r3, #1
 800b658:	68bb      	ldr	r3, [r7, #8]
 800b65a:	689b      	ldr	r3, [r3, #8]
 800b65c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b660:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800b662:	69bb      	ldr	r3, [r7, #24]
 800b664:	015a      	lsls	r2, r3, #5
 800b666:	69fb      	ldr	r3, [r7, #28]
 800b668:	4413      	add	r3, r2
 800b66a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b66e:	691a      	ldr	r2, [r3, #16]
 800b670:	8afb      	ldrh	r3, [r7, #22]
 800b672:	04d9      	lsls	r1, r3, #19
 800b674:	4ba4      	ldr	r3, [pc, #656]	@ (800b908 <USB_EPStartXfer+0x3cc>)
 800b676:	400b      	ands	r3, r1
 800b678:	69b9      	ldr	r1, [r7, #24]
 800b67a:	0148      	lsls	r0, r1, #5
 800b67c:	69f9      	ldr	r1, [r7, #28]
 800b67e:	4401      	add	r1, r0
 800b680:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800b684:	4313      	orrs	r3, r2
 800b686:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800b688:	68bb      	ldr	r3, [r7, #8]
 800b68a:	791b      	ldrb	r3, [r3, #4]
 800b68c:	2b01      	cmp	r3, #1
 800b68e:	d122      	bne.n	800b6d6 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b690:	69bb      	ldr	r3, [r7, #24]
 800b692:	015a      	lsls	r2, r3, #5
 800b694:	69fb      	ldr	r3, [r7, #28]
 800b696:	4413      	add	r3, r2
 800b698:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b69c:	691b      	ldr	r3, [r3, #16]
 800b69e:	69ba      	ldr	r2, [r7, #24]
 800b6a0:	0151      	lsls	r1, r2, #5
 800b6a2:	69fa      	ldr	r2, [r7, #28]
 800b6a4:	440a      	add	r2, r1
 800b6a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b6aa:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800b6ae:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800b6b0:	69bb      	ldr	r3, [r7, #24]
 800b6b2:	015a      	lsls	r2, r3, #5
 800b6b4:	69fb      	ldr	r3, [r7, #28]
 800b6b6:	4413      	add	r3, r2
 800b6b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b6bc:	691a      	ldr	r2, [r3, #16]
 800b6be:	8afb      	ldrh	r3, [r7, #22]
 800b6c0:	075b      	lsls	r3, r3, #29
 800b6c2:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800b6c6:	69b9      	ldr	r1, [r7, #24]
 800b6c8:	0148      	lsls	r0, r1, #5
 800b6ca:	69f9      	ldr	r1, [r7, #28]
 800b6cc:	4401      	add	r1, r0
 800b6ce:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800b6d2:	4313      	orrs	r3, r2
 800b6d4:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b6d6:	69bb      	ldr	r3, [r7, #24]
 800b6d8:	015a      	lsls	r2, r3, #5
 800b6da:	69fb      	ldr	r3, [r7, #28]
 800b6dc:	4413      	add	r3, r2
 800b6de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b6e2:	691a      	ldr	r2, [r3, #16]
 800b6e4:	68bb      	ldr	r3, [r7, #8]
 800b6e6:	691b      	ldr	r3, [r3, #16]
 800b6e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b6ec:	69b9      	ldr	r1, [r7, #24]
 800b6ee:	0148      	lsls	r0, r1, #5
 800b6f0:	69f9      	ldr	r1, [r7, #28]
 800b6f2:	4401      	add	r1, r0
 800b6f4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800b6f8:	4313      	orrs	r3, r2
 800b6fa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b6fc:	79fb      	ldrb	r3, [r7, #7]
 800b6fe:	2b01      	cmp	r3, #1
 800b700:	d14b      	bne.n	800b79a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b702:	68bb      	ldr	r3, [r7, #8]
 800b704:	69db      	ldr	r3, [r3, #28]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d009      	beq.n	800b71e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b70a:	69bb      	ldr	r3, [r7, #24]
 800b70c:	015a      	lsls	r2, r3, #5
 800b70e:	69fb      	ldr	r3, [r7, #28]
 800b710:	4413      	add	r3, r2
 800b712:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b716:	461a      	mov	r2, r3
 800b718:	68bb      	ldr	r3, [r7, #8]
 800b71a:	69db      	ldr	r3, [r3, #28]
 800b71c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b71e:	68bb      	ldr	r3, [r7, #8]
 800b720:	791b      	ldrb	r3, [r3, #4]
 800b722:	2b01      	cmp	r3, #1
 800b724:	d128      	bne.n	800b778 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b726:	69fb      	ldr	r3, [r7, #28]
 800b728:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b72c:	689b      	ldr	r3, [r3, #8]
 800b72e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b732:	2b00      	cmp	r3, #0
 800b734:	d110      	bne.n	800b758 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b736:	69bb      	ldr	r3, [r7, #24]
 800b738:	015a      	lsls	r2, r3, #5
 800b73a:	69fb      	ldr	r3, [r7, #28]
 800b73c:	4413      	add	r3, r2
 800b73e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	69ba      	ldr	r2, [r7, #24]
 800b746:	0151      	lsls	r1, r2, #5
 800b748:	69fa      	ldr	r2, [r7, #28]
 800b74a:	440a      	add	r2, r1
 800b74c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b750:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b754:	6013      	str	r3, [r2, #0]
 800b756:	e00f      	b.n	800b778 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b758:	69bb      	ldr	r3, [r7, #24]
 800b75a:	015a      	lsls	r2, r3, #5
 800b75c:	69fb      	ldr	r3, [r7, #28]
 800b75e:	4413      	add	r3, r2
 800b760:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	69ba      	ldr	r2, [r7, #24]
 800b768:	0151      	lsls	r1, r2, #5
 800b76a:	69fa      	ldr	r2, [r7, #28]
 800b76c:	440a      	add	r2, r1
 800b76e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b772:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b776:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b778:	69bb      	ldr	r3, [r7, #24]
 800b77a:	015a      	lsls	r2, r3, #5
 800b77c:	69fb      	ldr	r3, [r7, #28]
 800b77e:	4413      	add	r3, r2
 800b780:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	69ba      	ldr	r2, [r7, #24]
 800b788:	0151      	lsls	r1, r2, #5
 800b78a:	69fa      	ldr	r2, [r7, #28]
 800b78c:	440a      	add	r2, r1
 800b78e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b792:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b796:	6013      	str	r3, [r2, #0]
 800b798:	e166      	b.n	800ba68 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b79a:	69bb      	ldr	r3, [r7, #24]
 800b79c:	015a      	lsls	r2, r3, #5
 800b79e:	69fb      	ldr	r3, [r7, #28]
 800b7a0:	4413      	add	r3, r2
 800b7a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	69ba      	ldr	r2, [r7, #24]
 800b7aa:	0151      	lsls	r1, r2, #5
 800b7ac:	69fa      	ldr	r2, [r7, #28]
 800b7ae:	440a      	add	r2, r1
 800b7b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b7b4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b7b8:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b7ba:	68bb      	ldr	r3, [r7, #8]
 800b7bc:	791b      	ldrb	r3, [r3, #4]
 800b7be:	2b01      	cmp	r3, #1
 800b7c0:	d015      	beq.n	800b7ee <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b7c2:	68bb      	ldr	r3, [r7, #8]
 800b7c4:	691b      	ldr	r3, [r3, #16]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	f000 814e 	beq.w	800ba68 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b7cc:	69fb      	ldr	r3, [r7, #28]
 800b7ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b7d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b7d4:	68bb      	ldr	r3, [r7, #8]
 800b7d6:	781b      	ldrb	r3, [r3, #0]
 800b7d8:	f003 030f 	and.w	r3, r3, #15
 800b7dc:	2101      	movs	r1, #1
 800b7de:	fa01 f303 	lsl.w	r3, r1, r3
 800b7e2:	69f9      	ldr	r1, [r7, #28]
 800b7e4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b7e8:	4313      	orrs	r3, r2
 800b7ea:	634b      	str	r3, [r1, #52]	@ 0x34
 800b7ec:	e13c      	b.n	800ba68 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b7ee:	69fb      	ldr	r3, [r7, #28]
 800b7f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b7f4:	689b      	ldr	r3, [r3, #8]
 800b7f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d110      	bne.n	800b820 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b7fe:	69bb      	ldr	r3, [r7, #24]
 800b800:	015a      	lsls	r2, r3, #5
 800b802:	69fb      	ldr	r3, [r7, #28]
 800b804:	4413      	add	r3, r2
 800b806:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	69ba      	ldr	r2, [r7, #24]
 800b80e:	0151      	lsls	r1, r2, #5
 800b810:	69fa      	ldr	r2, [r7, #28]
 800b812:	440a      	add	r2, r1
 800b814:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b818:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b81c:	6013      	str	r3, [r2, #0]
 800b81e:	e00f      	b.n	800b840 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b820:	69bb      	ldr	r3, [r7, #24]
 800b822:	015a      	lsls	r2, r3, #5
 800b824:	69fb      	ldr	r3, [r7, #28]
 800b826:	4413      	add	r3, r2
 800b828:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	69ba      	ldr	r2, [r7, #24]
 800b830:	0151      	lsls	r1, r2, #5
 800b832:	69fa      	ldr	r2, [r7, #28]
 800b834:	440a      	add	r2, r1
 800b836:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b83a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b83e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b840:	68bb      	ldr	r3, [r7, #8]
 800b842:	68d9      	ldr	r1, [r3, #12]
 800b844:	68bb      	ldr	r3, [r7, #8]
 800b846:	781a      	ldrb	r2, [r3, #0]
 800b848:	68bb      	ldr	r3, [r7, #8]
 800b84a:	691b      	ldr	r3, [r3, #16]
 800b84c:	b298      	uxth	r0, r3
 800b84e:	79fb      	ldrb	r3, [r7, #7]
 800b850:	9300      	str	r3, [sp, #0]
 800b852:	4603      	mov	r3, r0
 800b854:	68f8      	ldr	r0, [r7, #12]
 800b856:	f000 f9b9 	bl	800bbcc <USB_WritePacket>
 800b85a:	e105      	b.n	800ba68 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b85c:	69bb      	ldr	r3, [r7, #24]
 800b85e:	015a      	lsls	r2, r3, #5
 800b860:	69fb      	ldr	r3, [r7, #28]
 800b862:	4413      	add	r3, r2
 800b864:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b868:	691b      	ldr	r3, [r3, #16]
 800b86a:	69ba      	ldr	r2, [r7, #24]
 800b86c:	0151      	lsls	r1, r2, #5
 800b86e:	69fa      	ldr	r2, [r7, #28]
 800b870:	440a      	add	r2, r1
 800b872:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b876:	0cdb      	lsrs	r3, r3, #19
 800b878:	04db      	lsls	r3, r3, #19
 800b87a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b87c:	69bb      	ldr	r3, [r7, #24]
 800b87e:	015a      	lsls	r2, r3, #5
 800b880:	69fb      	ldr	r3, [r7, #28]
 800b882:	4413      	add	r3, r2
 800b884:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b888:	691b      	ldr	r3, [r3, #16]
 800b88a:	69ba      	ldr	r2, [r7, #24]
 800b88c:	0151      	lsls	r1, r2, #5
 800b88e:	69fa      	ldr	r2, [r7, #28]
 800b890:	440a      	add	r2, r1
 800b892:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b896:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800b89a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800b89e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800b8a0:	69bb      	ldr	r3, [r7, #24]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d132      	bne.n	800b90c <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800b8a6:	68bb      	ldr	r3, [r7, #8]
 800b8a8:	691b      	ldr	r3, [r3, #16]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d003      	beq.n	800b8b6 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800b8ae:	68bb      	ldr	r3, [r7, #8]
 800b8b0:	689a      	ldr	r2, [r3, #8]
 800b8b2:	68bb      	ldr	r3, [r7, #8]
 800b8b4:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800b8b6:	68bb      	ldr	r3, [r7, #8]
 800b8b8:	689a      	ldr	r2, [r3, #8]
 800b8ba:	68bb      	ldr	r3, [r7, #8]
 800b8bc:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800b8be:	69bb      	ldr	r3, [r7, #24]
 800b8c0:	015a      	lsls	r2, r3, #5
 800b8c2:	69fb      	ldr	r3, [r7, #28]
 800b8c4:	4413      	add	r3, r2
 800b8c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b8ca:	691a      	ldr	r2, [r3, #16]
 800b8cc:	68bb      	ldr	r3, [r7, #8]
 800b8ce:	6a1b      	ldr	r3, [r3, #32]
 800b8d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b8d4:	69b9      	ldr	r1, [r7, #24]
 800b8d6:	0148      	lsls	r0, r1, #5
 800b8d8:	69f9      	ldr	r1, [r7, #28]
 800b8da:	4401      	add	r1, r0
 800b8dc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b8e0:	4313      	orrs	r3, r2
 800b8e2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b8e4:	69bb      	ldr	r3, [r7, #24]
 800b8e6:	015a      	lsls	r2, r3, #5
 800b8e8:	69fb      	ldr	r3, [r7, #28]
 800b8ea:	4413      	add	r3, r2
 800b8ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b8f0:	691b      	ldr	r3, [r3, #16]
 800b8f2:	69ba      	ldr	r2, [r7, #24]
 800b8f4:	0151      	lsls	r1, r2, #5
 800b8f6:	69fa      	ldr	r2, [r7, #28]
 800b8f8:	440a      	add	r2, r1
 800b8fa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b8fe:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b902:	6113      	str	r3, [r2, #16]
 800b904:	e062      	b.n	800b9cc <USB_EPStartXfer+0x490>
 800b906:	bf00      	nop
 800b908:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800b90c:	68bb      	ldr	r3, [r7, #8]
 800b90e:	691b      	ldr	r3, [r3, #16]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d123      	bne.n	800b95c <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b914:	69bb      	ldr	r3, [r7, #24]
 800b916:	015a      	lsls	r2, r3, #5
 800b918:	69fb      	ldr	r3, [r7, #28]
 800b91a:	4413      	add	r3, r2
 800b91c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b920:	691a      	ldr	r2, [r3, #16]
 800b922:	68bb      	ldr	r3, [r7, #8]
 800b924:	689b      	ldr	r3, [r3, #8]
 800b926:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b92a:	69b9      	ldr	r1, [r7, #24]
 800b92c:	0148      	lsls	r0, r1, #5
 800b92e:	69f9      	ldr	r1, [r7, #28]
 800b930:	4401      	add	r1, r0
 800b932:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b936:	4313      	orrs	r3, r2
 800b938:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b93a:	69bb      	ldr	r3, [r7, #24]
 800b93c:	015a      	lsls	r2, r3, #5
 800b93e:	69fb      	ldr	r3, [r7, #28]
 800b940:	4413      	add	r3, r2
 800b942:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b946:	691b      	ldr	r3, [r3, #16]
 800b948:	69ba      	ldr	r2, [r7, #24]
 800b94a:	0151      	lsls	r1, r2, #5
 800b94c:	69fa      	ldr	r2, [r7, #28]
 800b94e:	440a      	add	r2, r1
 800b950:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b954:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b958:	6113      	str	r3, [r2, #16]
 800b95a:	e037      	b.n	800b9cc <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b95c:	68bb      	ldr	r3, [r7, #8]
 800b95e:	691a      	ldr	r2, [r3, #16]
 800b960:	68bb      	ldr	r3, [r7, #8]
 800b962:	689b      	ldr	r3, [r3, #8]
 800b964:	4413      	add	r3, r2
 800b966:	1e5a      	subs	r2, r3, #1
 800b968:	68bb      	ldr	r3, [r7, #8]
 800b96a:	689b      	ldr	r3, [r3, #8]
 800b96c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b970:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800b972:	68bb      	ldr	r3, [r7, #8]
 800b974:	689b      	ldr	r3, [r3, #8]
 800b976:	8afa      	ldrh	r2, [r7, #22]
 800b978:	fb03 f202 	mul.w	r2, r3, r2
 800b97c:	68bb      	ldr	r3, [r7, #8]
 800b97e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b980:	69bb      	ldr	r3, [r7, #24]
 800b982:	015a      	lsls	r2, r3, #5
 800b984:	69fb      	ldr	r3, [r7, #28]
 800b986:	4413      	add	r3, r2
 800b988:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b98c:	691a      	ldr	r2, [r3, #16]
 800b98e:	8afb      	ldrh	r3, [r7, #22]
 800b990:	04d9      	lsls	r1, r3, #19
 800b992:	4b38      	ldr	r3, [pc, #224]	@ (800ba74 <USB_EPStartXfer+0x538>)
 800b994:	400b      	ands	r3, r1
 800b996:	69b9      	ldr	r1, [r7, #24]
 800b998:	0148      	lsls	r0, r1, #5
 800b99a:	69f9      	ldr	r1, [r7, #28]
 800b99c:	4401      	add	r1, r0
 800b99e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b9a2:	4313      	orrs	r3, r2
 800b9a4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800b9a6:	69bb      	ldr	r3, [r7, #24]
 800b9a8:	015a      	lsls	r2, r3, #5
 800b9aa:	69fb      	ldr	r3, [r7, #28]
 800b9ac:	4413      	add	r3, r2
 800b9ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b9b2:	691a      	ldr	r2, [r3, #16]
 800b9b4:	68bb      	ldr	r3, [r7, #8]
 800b9b6:	6a1b      	ldr	r3, [r3, #32]
 800b9b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b9bc:	69b9      	ldr	r1, [r7, #24]
 800b9be:	0148      	lsls	r0, r1, #5
 800b9c0:	69f9      	ldr	r1, [r7, #28]
 800b9c2:	4401      	add	r1, r0
 800b9c4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b9c8:	4313      	orrs	r3, r2
 800b9ca:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800b9cc:	79fb      	ldrb	r3, [r7, #7]
 800b9ce:	2b01      	cmp	r3, #1
 800b9d0:	d10d      	bne.n	800b9ee <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b9d2:	68bb      	ldr	r3, [r7, #8]
 800b9d4:	68db      	ldr	r3, [r3, #12]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d009      	beq.n	800b9ee <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b9da:	68bb      	ldr	r3, [r7, #8]
 800b9dc:	68d9      	ldr	r1, [r3, #12]
 800b9de:	69bb      	ldr	r3, [r7, #24]
 800b9e0:	015a      	lsls	r2, r3, #5
 800b9e2:	69fb      	ldr	r3, [r7, #28]
 800b9e4:	4413      	add	r3, r2
 800b9e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b9ea:	460a      	mov	r2, r1
 800b9ec:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b9ee:	68bb      	ldr	r3, [r7, #8]
 800b9f0:	791b      	ldrb	r3, [r3, #4]
 800b9f2:	2b01      	cmp	r3, #1
 800b9f4:	d128      	bne.n	800ba48 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b9f6:	69fb      	ldr	r3, [r7, #28]
 800b9f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b9fc:	689b      	ldr	r3, [r3, #8]
 800b9fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d110      	bne.n	800ba28 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800ba06:	69bb      	ldr	r3, [r7, #24]
 800ba08:	015a      	lsls	r2, r3, #5
 800ba0a:	69fb      	ldr	r3, [r7, #28]
 800ba0c:	4413      	add	r3, r2
 800ba0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	69ba      	ldr	r2, [r7, #24]
 800ba16:	0151      	lsls	r1, r2, #5
 800ba18:	69fa      	ldr	r2, [r7, #28]
 800ba1a:	440a      	add	r2, r1
 800ba1c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ba20:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ba24:	6013      	str	r3, [r2, #0]
 800ba26:	e00f      	b.n	800ba48 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800ba28:	69bb      	ldr	r3, [r7, #24]
 800ba2a:	015a      	lsls	r2, r3, #5
 800ba2c:	69fb      	ldr	r3, [r7, #28]
 800ba2e:	4413      	add	r3, r2
 800ba30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	69ba      	ldr	r2, [r7, #24]
 800ba38:	0151      	lsls	r1, r2, #5
 800ba3a:	69fa      	ldr	r2, [r7, #28]
 800ba3c:	440a      	add	r2, r1
 800ba3e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ba42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ba46:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ba48:	69bb      	ldr	r3, [r7, #24]
 800ba4a:	015a      	lsls	r2, r3, #5
 800ba4c:	69fb      	ldr	r3, [r7, #28]
 800ba4e:	4413      	add	r3, r2
 800ba50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	69ba      	ldr	r2, [r7, #24]
 800ba58:	0151      	lsls	r1, r2, #5
 800ba5a:	69fa      	ldr	r2, [r7, #28]
 800ba5c:	440a      	add	r2, r1
 800ba5e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ba62:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ba66:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ba68:	2300      	movs	r3, #0
}
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	3720      	adds	r7, #32
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	bd80      	pop	{r7, pc}
 800ba72:	bf00      	nop
 800ba74:	1ff80000 	.word	0x1ff80000

0800ba78 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ba78:	b480      	push	{r7}
 800ba7a:	b087      	sub	sp, #28
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
 800ba80:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ba82:	2300      	movs	r3, #0
 800ba84:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800ba86:	2300      	movs	r3, #0
 800ba88:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ba8e:	683b      	ldr	r3, [r7, #0]
 800ba90:	785b      	ldrb	r3, [r3, #1]
 800ba92:	2b01      	cmp	r3, #1
 800ba94:	d14a      	bne.n	800bb2c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ba96:	683b      	ldr	r3, [r7, #0]
 800ba98:	781b      	ldrb	r3, [r3, #0]
 800ba9a:	015a      	lsls	r2, r3, #5
 800ba9c:	693b      	ldr	r3, [r7, #16]
 800ba9e:	4413      	add	r3, r2
 800baa0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800baaa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800baae:	f040 8086 	bne.w	800bbbe <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800bab2:	683b      	ldr	r3, [r7, #0]
 800bab4:	781b      	ldrb	r3, [r3, #0]
 800bab6:	015a      	lsls	r2, r3, #5
 800bab8:	693b      	ldr	r3, [r7, #16]
 800baba:	4413      	add	r3, r2
 800babc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	683a      	ldr	r2, [r7, #0]
 800bac4:	7812      	ldrb	r2, [r2, #0]
 800bac6:	0151      	lsls	r1, r2, #5
 800bac8:	693a      	ldr	r2, [r7, #16]
 800baca:	440a      	add	r2, r1
 800bacc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bad0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800bad4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800bad6:	683b      	ldr	r3, [r7, #0]
 800bad8:	781b      	ldrb	r3, [r3, #0]
 800bada:	015a      	lsls	r2, r3, #5
 800badc:	693b      	ldr	r3, [r7, #16]
 800bade:	4413      	add	r3, r2
 800bae0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	683a      	ldr	r2, [r7, #0]
 800bae8:	7812      	ldrb	r2, [r2, #0]
 800baea:	0151      	lsls	r1, r2, #5
 800baec:	693a      	ldr	r2, [r7, #16]
 800baee:	440a      	add	r2, r1
 800baf0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800baf4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800baf8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	3301      	adds	r3, #1
 800bafe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	f242 7210 	movw	r2, #10000	@ 0x2710
 800bb06:	4293      	cmp	r3, r2
 800bb08:	d902      	bls.n	800bb10 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800bb0a:	2301      	movs	r3, #1
 800bb0c:	75fb      	strb	r3, [r7, #23]
          break;
 800bb0e:	e056      	b.n	800bbbe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800bb10:	683b      	ldr	r3, [r7, #0]
 800bb12:	781b      	ldrb	r3, [r3, #0]
 800bb14:	015a      	lsls	r2, r3, #5
 800bb16:	693b      	ldr	r3, [r7, #16]
 800bb18:	4413      	add	r3, r2
 800bb1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bb24:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bb28:	d0e7      	beq.n	800bafa <USB_EPStopXfer+0x82>
 800bb2a:	e048      	b.n	800bbbe <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bb2c:	683b      	ldr	r3, [r7, #0]
 800bb2e:	781b      	ldrb	r3, [r3, #0]
 800bb30:	015a      	lsls	r2, r3, #5
 800bb32:	693b      	ldr	r3, [r7, #16]
 800bb34:	4413      	add	r3, r2
 800bb36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bb40:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bb44:	d13b      	bne.n	800bbbe <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	781b      	ldrb	r3, [r3, #0]
 800bb4a:	015a      	lsls	r2, r3, #5
 800bb4c:	693b      	ldr	r3, [r7, #16]
 800bb4e:	4413      	add	r3, r2
 800bb50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	683a      	ldr	r2, [r7, #0]
 800bb58:	7812      	ldrb	r2, [r2, #0]
 800bb5a:	0151      	lsls	r1, r2, #5
 800bb5c:	693a      	ldr	r2, [r7, #16]
 800bb5e:	440a      	add	r2, r1
 800bb60:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bb64:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800bb68:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800bb6a:	683b      	ldr	r3, [r7, #0]
 800bb6c:	781b      	ldrb	r3, [r3, #0]
 800bb6e:	015a      	lsls	r2, r3, #5
 800bb70:	693b      	ldr	r3, [r7, #16]
 800bb72:	4413      	add	r3, r2
 800bb74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	683a      	ldr	r2, [r7, #0]
 800bb7c:	7812      	ldrb	r2, [r2, #0]
 800bb7e:	0151      	lsls	r1, r2, #5
 800bb80:	693a      	ldr	r2, [r7, #16]
 800bb82:	440a      	add	r2, r1
 800bb84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bb88:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800bb8c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	3301      	adds	r3, #1
 800bb92:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	f242 7210 	movw	r2, #10000	@ 0x2710
 800bb9a:	4293      	cmp	r3, r2
 800bb9c:	d902      	bls.n	800bba4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800bb9e:	2301      	movs	r3, #1
 800bba0:	75fb      	strb	r3, [r7, #23]
          break;
 800bba2:	e00c      	b.n	800bbbe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800bba4:	683b      	ldr	r3, [r7, #0]
 800bba6:	781b      	ldrb	r3, [r3, #0]
 800bba8:	015a      	lsls	r2, r3, #5
 800bbaa:	693b      	ldr	r3, [r7, #16]
 800bbac:	4413      	add	r3, r2
 800bbae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bbb8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bbbc:	d0e7      	beq.n	800bb8e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800bbbe:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	371c      	adds	r7, #28
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbca:	4770      	bx	lr

0800bbcc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800bbcc:	b480      	push	{r7}
 800bbce:	b089      	sub	sp, #36	@ 0x24
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	60f8      	str	r0, [r7, #12]
 800bbd4:	60b9      	str	r1, [r7, #8]
 800bbd6:	4611      	mov	r1, r2
 800bbd8:	461a      	mov	r2, r3
 800bbda:	460b      	mov	r3, r1
 800bbdc:	71fb      	strb	r3, [r7, #7]
 800bbde:	4613      	mov	r3, r2
 800bbe0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800bbe6:	68bb      	ldr	r3, [r7, #8]
 800bbe8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800bbea:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d123      	bne.n	800bc3a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800bbf2:	88bb      	ldrh	r3, [r7, #4]
 800bbf4:	3303      	adds	r3, #3
 800bbf6:	089b      	lsrs	r3, r3, #2
 800bbf8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	61bb      	str	r3, [r7, #24]
 800bbfe:	e018      	b.n	800bc32 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800bc00:	79fb      	ldrb	r3, [r7, #7]
 800bc02:	031a      	lsls	r2, r3, #12
 800bc04:	697b      	ldr	r3, [r7, #20]
 800bc06:	4413      	add	r3, r2
 800bc08:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bc0c:	461a      	mov	r2, r3
 800bc0e:	69fb      	ldr	r3, [r7, #28]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	6013      	str	r3, [r2, #0]
      pSrc++;
 800bc14:	69fb      	ldr	r3, [r7, #28]
 800bc16:	3301      	adds	r3, #1
 800bc18:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bc1a:	69fb      	ldr	r3, [r7, #28]
 800bc1c:	3301      	adds	r3, #1
 800bc1e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bc20:	69fb      	ldr	r3, [r7, #28]
 800bc22:	3301      	adds	r3, #1
 800bc24:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bc26:	69fb      	ldr	r3, [r7, #28]
 800bc28:	3301      	adds	r3, #1
 800bc2a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800bc2c:	69bb      	ldr	r3, [r7, #24]
 800bc2e:	3301      	adds	r3, #1
 800bc30:	61bb      	str	r3, [r7, #24]
 800bc32:	69ba      	ldr	r2, [r7, #24]
 800bc34:	693b      	ldr	r3, [r7, #16]
 800bc36:	429a      	cmp	r2, r3
 800bc38:	d3e2      	bcc.n	800bc00 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800bc3a:	2300      	movs	r3, #0
}
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	3724      	adds	r7, #36	@ 0x24
 800bc40:	46bd      	mov	sp, r7
 800bc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc46:	4770      	bx	lr

0800bc48 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800bc48:	b480      	push	{r7}
 800bc4a:	b08b      	sub	sp, #44	@ 0x2c
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	60f8      	str	r0, [r7, #12]
 800bc50:	60b9      	str	r1, [r7, #8]
 800bc52:	4613      	mov	r3, r2
 800bc54:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800bc5a:	68bb      	ldr	r3, [r7, #8]
 800bc5c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800bc5e:	88fb      	ldrh	r3, [r7, #6]
 800bc60:	089b      	lsrs	r3, r3, #2
 800bc62:	b29b      	uxth	r3, r3
 800bc64:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800bc66:	88fb      	ldrh	r3, [r7, #6]
 800bc68:	f003 0303 	and.w	r3, r3, #3
 800bc6c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800bc6e:	2300      	movs	r3, #0
 800bc70:	623b      	str	r3, [r7, #32]
 800bc72:	e014      	b.n	800bc9e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800bc74:	69bb      	ldr	r3, [r7, #24]
 800bc76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bc7a:	681a      	ldr	r2, [r3, #0]
 800bc7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc7e:	601a      	str	r2, [r3, #0]
    pDest++;
 800bc80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc82:	3301      	adds	r3, #1
 800bc84:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800bc86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc88:	3301      	adds	r3, #1
 800bc8a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800bc8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc8e:	3301      	adds	r3, #1
 800bc90:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800bc92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc94:	3301      	adds	r3, #1
 800bc96:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800bc98:	6a3b      	ldr	r3, [r7, #32]
 800bc9a:	3301      	adds	r3, #1
 800bc9c:	623b      	str	r3, [r7, #32]
 800bc9e:	6a3a      	ldr	r2, [r7, #32]
 800bca0:	697b      	ldr	r3, [r7, #20]
 800bca2:	429a      	cmp	r2, r3
 800bca4:	d3e6      	bcc.n	800bc74 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800bca6:	8bfb      	ldrh	r3, [r7, #30]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d01e      	beq.n	800bcea <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800bcac:	2300      	movs	r3, #0
 800bcae:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800bcb0:	69bb      	ldr	r3, [r7, #24]
 800bcb2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bcb6:	461a      	mov	r2, r3
 800bcb8:	f107 0310 	add.w	r3, r7, #16
 800bcbc:	6812      	ldr	r2, [r2, #0]
 800bcbe:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800bcc0:	693a      	ldr	r2, [r7, #16]
 800bcc2:	6a3b      	ldr	r3, [r7, #32]
 800bcc4:	b2db      	uxtb	r3, r3
 800bcc6:	00db      	lsls	r3, r3, #3
 800bcc8:	fa22 f303 	lsr.w	r3, r2, r3
 800bccc:	b2da      	uxtb	r2, r3
 800bcce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcd0:	701a      	strb	r2, [r3, #0]
      i++;
 800bcd2:	6a3b      	ldr	r3, [r7, #32]
 800bcd4:	3301      	adds	r3, #1
 800bcd6:	623b      	str	r3, [r7, #32]
      pDest++;
 800bcd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcda:	3301      	adds	r3, #1
 800bcdc:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800bcde:	8bfb      	ldrh	r3, [r7, #30]
 800bce0:	3b01      	subs	r3, #1
 800bce2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800bce4:	8bfb      	ldrh	r3, [r7, #30]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d1ea      	bne.n	800bcc0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800bcea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bcec:	4618      	mov	r0, r3
 800bcee:	372c      	adds	r7, #44	@ 0x2c
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf6:	4770      	bx	lr

0800bcf8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800bcf8:	b480      	push	{r7}
 800bcfa:	b085      	sub	sp, #20
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
 800bd00:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bd06:	683b      	ldr	r3, [r7, #0]
 800bd08:	781b      	ldrb	r3, [r3, #0]
 800bd0a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bd0c:	683b      	ldr	r3, [r7, #0]
 800bd0e:	785b      	ldrb	r3, [r3, #1]
 800bd10:	2b01      	cmp	r3, #1
 800bd12:	d12c      	bne.n	800bd6e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800bd14:	68bb      	ldr	r3, [r7, #8]
 800bd16:	015a      	lsls	r2, r3, #5
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	4413      	add	r3, r2
 800bd1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	db12      	blt.n	800bd4c <USB_EPSetStall+0x54>
 800bd26:	68bb      	ldr	r3, [r7, #8]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d00f      	beq.n	800bd4c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800bd2c:	68bb      	ldr	r3, [r7, #8]
 800bd2e:	015a      	lsls	r2, r3, #5
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	4413      	add	r3, r2
 800bd34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	68ba      	ldr	r2, [r7, #8]
 800bd3c:	0151      	lsls	r1, r2, #5
 800bd3e:	68fa      	ldr	r2, [r7, #12]
 800bd40:	440a      	add	r2, r1
 800bd42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bd46:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800bd4a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800bd4c:	68bb      	ldr	r3, [r7, #8]
 800bd4e:	015a      	lsls	r2, r3, #5
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	4413      	add	r3, r2
 800bd54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	68ba      	ldr	r2, [r7, #8]
 800bd5c:	0151      	lsls	r1, r2, #5
 800bd5e:	68fa      	ldr	r2, [r7, #12]
 800bd60:	440a      	add	r2, r1
 800bd62:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bd66:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800bd6a:	6013      	str	r3, [r2, #0]
 800bd6c:	e02b      	b.n	800bdc6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800bd6e:	68bb      	ldr	r3, [r7, #8]
 800bd70:	015a      	lsls	r2, r3, #5
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	4413      	add	r3, r2
 800bd76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	db12      	blt.n	800bda6 <USB_EPSetStall+0xae>
 800bd80:	68bb      	ldr	r3, [r7, #8]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d00f      	beq.n	800bda6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800bd86:	68bb      	ldr	r3, [r7, #8]
 800bd88:	015a      	lsls	r2, r3, #5
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	4413      	add	r3, r2
 800bd8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	68ba      	ldr	r2, [r7, #8]
 800bd96:	0151      	lsls	r1, r2, #5
 800bd98:	68fa      	ldr	r2, [r7, #12]
 800bd9a:	440a      	add	r2, r1
 800bd9c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bda0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800bda4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800bda6:	68bb      	ldr	r3, [r7, #8]
 800bda8:	015a      	lsls	r2, r3, #5
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	4413      	add	r3, r2
 800bdae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	68ba      	ldr	r2, [r7, #8]
 800bdb6:	0151      	lsls	r1, r2, #5
 800bdb8:	68fa      	ldr	r2, [r7, #12]
 800bdba:	440a      	add	r2, r1
 800bdbc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bdc0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800bdc4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bdc6:	2300      	movs	r3, #0
}
 800bdc8:	4618      	mov	r0, r3
 800bdca:	3714      	adds	r7, #20
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd2:	4770      	bx	lr

0800bdd4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800bdd4:	b480      	push	{r7}
 800bdd6:	b085      	sub	sp, #20
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
 800bddc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bde2:	683b      	ldr	r3, [r7, #0]
 800bde4:	781b      	ldrb	r3, [r3, #0]
 800bde6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bde8:	683b      	ldr	r3, [r7, #0]
 800bdea:	785b      	ldrb	r3, [r3, #1]
 800bdec:	2b01      	cmp	r3, #1
 800bdee:	d128      	bne.n	800be42 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800bdf0:	68bb      	ldr	r3, [r7, #8]
 800bdf2:	015a      	lsls	r2, r3, #5
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	4413      	add	r3, r2
 800bdf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	68ba      	ldr	r2, [r7, #8]
 800be00:	0151      	lsls	r1, r2, #5
 800be02:	68fa      	ldr	r2, [r7, #12]
 800be04:	440a      	add	r2, r1
 800be06:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800be0a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800be0e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800be10:	683b      	ldr	r3, [r7, #0]
 800be12:	791b      	ldrb	r3, [r3, #4]
 800be14:	2b03      	cmp	r3, #3
 800be16:	d003      	beq.n	800be20 <USB_EPClearStall+0x4c>
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	791b      	ldrb	r3, [r3, #4]
 800be1c:	2b02      	cmp	r3, #2
 800be1e:	d138      	bne.n	800be92 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800be20:	68bb      	ldr	r3, [r7, #8]
 800be22:	015a      	lsls	r2, r3, #5
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	4413      	add	r3, r2
 800be28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	68ba      	ldr	r2, [r7, #8]
 800be30:	0151      	lsls	r1, r2, #5
 800be32:	68fa      	ldr	r2, [r7, #12]
 800be34:	440a      	add	r2, r1
 800be36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800be3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800be3e:	6013      	str	r3, [r2, #0]
 800be40:	e027      	b.n	800be92 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800be42:	68bb      	ldr	r3, [r7, #8]
 800be44:	015a      	lsls	r2, r3, #5
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	4413      	add	r3, r2
 800be4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	68ba      	ldr	r2, [r7, #8]
 800be52:	0151      	lsls	r1, r2, #5
 800be54:	68fa      	ldr	r2, [r7, #12]
 800be56:	440a      	add	r2, r1
 800be58:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800be5c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800be60:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	791b      	ldrb	r3, [r3, #4]
 800be66:	2b03      	cmp	r3, #3
 800be68:	d003      	beq.n	800be72 <USB_EPClearStall+0x9e>
 800be6a:	683b      	ldr	r3, [r7, #0]
 800be6c:	791b      	ldrb	r3, [r3, #4]
 800be6e:	2b02      	cmp	r3, #2
 800be70:	d10f      	bne.n	800be92 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800be72:	68bb      	ldr	r3, [r7, #8]
 800be74:	015a      	lsls	r2, r3, #5
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	4413      	add	r3, r2
 800be7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	68ba      	ldr	r2, [r7, #8]
 800be82:	0151      	lsls	r1, r2, #5
 800be84:	68fa      	ldr	r2, [r7, #12]
 800be86:	440a      	add	r2, r1
 800be88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800be8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800be90:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800be92:	2300      	movs	r3, #0
}
 800be94:	4618      	mov	r0, r3
 800be96:	3714      	adds	r7, #20
 800be98:	46bd      	mov	sp, r7
 800be9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9e:	4770      	bx	lr

0800bea0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800bea0:	b480      	push	{r7}
 800bea2:	b085      	sub	sp, #20
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
 800bea8:	460b      	mov	r3, r1
 800beaa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	68fa      	ldr	r2, [r7, #12]
 800beba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bebe:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800bec2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800beca:	681a      	ldr	r2, [r3, #0]
 800becc:	78fb      	ldrb	r3, [r7, #3]
 800bece:	011b      	lsls	r3, r3, #4
 800bed0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800bed4:	68f9      	ldr	r1, [r7, #12]
 800bed6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800beda:	4313      	orrs	r3, r2
 800bedc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800bede:	2300      	movs	r3, #0
}
 800bee0:	4618      	mov	r0, r3
 800bee2:	3714      	adds	r7, #20
 800bee4:	46bd      	mov	sp, r7
 800bee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beea:	4770      	bx	lr

0800beec <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800beec:	b480      	push	{r7}
 800beee:	b085      	sub	sp, #20
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	68fa      	ldr	r2, [r7, #12]
 800bf02:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800bf06:	f023 0303 	bic.w	r3, r3, #3
 800bf0a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bf12:	685b      	ldr	r3, [r3, #4]
 800bf14:	68fa      	ldr	r2, [r7, #12]
 800bf16:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bf1a:	f023 0302 	bic.w	r3, r3, #2
 800bf1e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bf20:	2300      	movs	r3, #0
}
 800bf22:	4618      	mov	r0, r3
 800bf24:	3714      	adds	r7, #20
 800bf26:	46bd      	mov	sp, r7
 800bf28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2c:	4770      	bx	lr

0800bf2e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800bf2e:	b480      	push	{r7}
 800bf30:	b085      	sub	sp, #20
 800bf32:	af00      	add	r7, sp, #0
 800bf34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	68fa      	ldr	r2, [r7, #12]
 800bf44:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800bf48:	f023 0303 	bic.w	r3, r3, #3
 800bf4c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bf54:	685b      	ldr	r3, [r3, #4]
 800bf56:	68fa      	ldr	r2, [r7, #12]
 800bf58:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bf5c:	f043 0302 	orr.w	r3, r3, #2
 800bf60:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bf62:	2300      	movs	r3, #0
}
 800bf64:	4618      	mov	r0, r3
 800bf66:	3714      	adds	r7, #20
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6e:	4770      	bx	lr

0800bf70 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800bf70:	b480      	push	{r7}
 800bf72:	b085      	sub	sp, #20
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	695b      	ldr	r3, [r3, #20]
 800bf7c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	699b      	ldr	r3, [r3, #24]
 800bf82:	68fa      	ldr	r2, [r7, #12]
 800bf84:	4013      	ands	r3, r2
 800bf86:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800bf88:	68fb      	ldr	r3, [r7, #12]
}
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	3714      	adds	r7, #20
 800bf8e:	46bd      	mov	sp, r7
 800bf90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf94:	4770      	bx	lr

0800bf96 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800bf96:	b480      	push	{r7}
 800bf98:	b085      	sub	sp, #20
 800bf9a:	af00      	add	r7, sp, #0
 800bf9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bfa8:	699b      	ldr	r3, [r3, #24]
 800bfaa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bfb2:	69db      	ldr	r3, [r3, #28]
 800bfb4:	68ba      	ldr	r2, [r7, #8]
 800bfb6:	4013      	ands	r3, r2
 800bfb8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800bfba:	68bb      	ldr	r3, [r7, #8]
 800bfbc:	0c1b      	lsrs	r3, r3, #16
}
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	3714      	adds	r7, #20
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc8:	4770      	bx	lr

0800bfca <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800bfca:	b480      	push	{r7}
 800bfcc:	b085      	sub	sp, #20
 800bfce:	af00      	add	r7, sp, #0
 800bfd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bfdc:	699b      	ldr	r3, [r3, #24]
 800bfde:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bfe6:	69db      	ldr	r3, [r3, #28]
 800bfe8:	68ba      	ldr	r2, [r7, #8]
 800bfea:	4013      	ands	r3, r2
 800bfec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800bfee:	68bb      	ldr	r3, [r7, #8]
 800bff0:	b29b      	uxth	r3, r3
}
 800bff2:	4618      	mov	r0, r3
 800bff4:	3714      	adds	r7, #20
 800bff6:	46bd      	mov	sp, r7
 800bff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffc:	4770      	bx	lr

0800bffe <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bffe:	b480      	push	{r7}
 800c000:	b085      	sub	sp, #20
 800c002:	af00      	add	r7, sp, #0
 800c004:	6078      	str	r0, [r7, #4]
 800c006:	460b      	mov	r3, r1
 800c008:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c00e:	78fb      	ldrb	r3, [r7, #3]
 800c010:	015a      	lsls	r2, r3, #5
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	4413      	add	r3, r2
 800c016:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c01a:	689b      	ldr	r3, [r3, #8]
 800c01c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c024:	695b      	ldr	r3, [r3, #20]
 800c026:	68ba      	ldr	r2, [r7, #8]
 800c028:	4013      	ands	r3, r2
 800c02a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c02c:	68bb      	ldr	r3, [r7, #8]
}
 800c02e:	4618      	mov	r0, r3
 800c030:	3714      	adds	r7, #20
 800c032:	46bd      	mov	sp, r7
 800c034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c038:	4770      	bx	lr

0800c03a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c03a:	b480      	push	{r7}
 800c03c:	b087      	sub	sp, #28
 800c03e:	af00      	add	r7, sp, #0
 800c040:	6078      	str	r0, [r7, #4]
 800c042:	460b      	mov	r3, r1
 800c044:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800c04a:	697b      	ldr	r3, [r7, #20]
 800c04c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c050:	691b      	ldr	r3, [r3, #16]
 800c052:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800c054:	697b      	ldr	r3, [r7, #20]
 800c056:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c05a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c05c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c05e:	78fb      	ldrb	r3, [r7, #3]
 800c060:	f003 030f 	and.w	r3, r3, #15
 800c064:	68fa      	ldr	r2, [r7, #12]
 800c066:	fa22 f303 	lsr.w	r3, r2, r3
 800c06a:	01db      	lsls	r3, r3, #7
 800c06c:	b2db      	uxtb	r3, r3
 800c06e:	693a      	ldr	r2, [r7, #16]
 800c070:	4313      	orrs	r3, r2
 800c072:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800c074:	78fb      	ldrb	r3, [r7, #3]
 800c076:	015a      	lsls	r2, r3, #5
 800c078:	697b      	ldr	r3, [r7, #20]
 800c07a:	4413      	add	r3, r2
 800c07c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c080:	689b      	ldr	r3, [r3, #8]
 800c082:	693a      	ldr	r2, [r7, #16]
 800c084:	4013      	ands	r3, r2
 800c086:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c088:	68bb      	ldr	r3, [r7, #8]
}
 800c08a:	4618      	mov	r0, r3
 800c08c:	371c      	adds	r7, #28
 800c08e:	46bd      	mov	sp, r7
 800c090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c094:	4770      	bx	lr

0800c096 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800c096:	b480      	push	{r7}
 800c098:	b083      	sub	sp, #12
 800c09a:	af00      	add	r7, sp, #0
 800c09c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	695b      	ldr	r3, [r3, #20]
 800c0a2:	f003 0301 	and.w	r3, r3, #1
}
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	370c      	adds	r7, #12
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b0:	4770      	bx	lr

0800c0b2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800c0b2:	b480      	push	{r7}
 800c0b4:	b085      	sub	sp, #20
 800c0b6:	af00      	add	r7, sp, #0
 800c0b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	68fa      	ldr	r2, [r7, #12]
 800c0c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c0cc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800c0d0:	f023 0307 	bic.w	r3, r3, #7
 800c0d4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c0dc:	685b      	ldr	r3, [r3, #4]
 800c0de:	68fa      	ldr	r2, [r7, #12]
 800c0e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c0e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c0e8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c0ea:	2300      	movs	r3, #0
}
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	3714      	adds	r7, #20
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f6:	4770      	bx	lr

0800c0f8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800c0f8:	b480      	push	{r7}
 800c0fa:	b087      	sub	sp, #28
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	60f8      	str	r0, [r7, #12]
 800c100:	460b      	mov	r3, r1
 800c102:	607a      	str	r2, [r7, #4]
 800c104:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	333c      	adds	r3, #60	@ 0x3c
 800c10e:	3304      	adds	r3, #4
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c114:	693b      	ldr	r3, [r7, #16]
 800c116:	4a26      	ldr	r2, [pc, #152]	@ (800c1b0 <USB_EP0_OutStart+0xb8>)
 800c118:	4293      	cmp	r3, r2
 800c11a:	d90a      	bls.n	800c132 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c11c:	697b      	ldr	r3, [r7, #20]
 800c11e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c128:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c12c:	d101      	bne.n	800c132 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800c12e:	2300      	movs	r3, #0
 800c130:	e037      	b.n	800c1a2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c132:	697b      	ldr	r3, [r7, #20]
 800c134:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c138:	461a      	mov	r2, r3
 800c13a:	2300      	movs	r3, #0
 800c13c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c13e:	697b      	ldr	r3, [r7, #20]
 800c140:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c144:	691b      	ldr	r3, [r3, #16]
 800c146:	697a      	ldr	r2, [r7, #20]
 800c148:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c14c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c150:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800c152:	697b      	ldr	r3, [r7, #20]
 800c154:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c158:	691b      	ldr	r3, [r3, #16]
 800c15a:	697a      	ldr	r2, [r7, #20]
 800c15c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c160:	f043 0318 	orr.w	r3, r3, #24
 800c164:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800c166:	697b      	ldr	r3, [r7, #20]
 800c168:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c16c:	691b      	ldr	r3, [r3, #16]
 800c16e:	697a      	ldr	r2, [r7, #20]
 800c170:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c174:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800c178:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800c17a:	7afb      	ldrb	r3, [r7, #11]
 800c17c:	2b01      	cmp	r3, #1
 800c17e:	d10f      	bne.n	800c1a0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800c180:	697b      	ldr	r3, [r7, #20]
 800c182:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c186:	461a      	mov	r2, r3
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800c18c:	697b      	ldr	r3, [r7, #20]
 800c18e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	697a      	ldr	r2, [r7, #20]
 800c196:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c19a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800c19e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c1a0:	2300      	movs	r3, #0
}
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	371c      	adds	r7, #28
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ac:	4770      	bx	lr
 800c1ae:	bf00      	nop
 800c1b0:	4f54300a 	.word	0x4f54300a

0800c1b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c1b4:	b480      	push	{r7}
 800c1b6:	b085      	sub	sp, #20
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c1bc:	2300      	movs	r3, #0
 800c1be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	3301      	adds	r3, #1
 800c1c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c1cc:	d901      	bls.n	800c1d2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c1ce:	2303      	movs	r3, #3
 800c1d0:	e022      	b.n	800c218 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	691b      	ldr	r3, [r3, #16]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	daf2      	bge.n	800c1c0 <USB_CoreReset+0xc>

  count = 10U;
 800c1da:	230a      	movs	r3, #10
 800c1dc:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800c1de:	e002      	b.n	800c1e6 <USB_CoreReset+0x32>
  {
    count--;
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	3b01      	subs	r3, #1
 800c1e4:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d1f9      	bne.n	800c1e0 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	691b      	ldr	r3, [r3, #16]
 800c1f0:	f043 0201 	orr.w	r2, r3, #1
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	3301      	adds	r3, #1
 800c1fc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c204:	d901      	bls.n	800c20a <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800c206:	2303      	movs	r3, #3
 800c208:	e006      	b.n	800c218 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	691b      	ldr	r3, [r3, #16]
 800c20e:	f003 0301 	and.w	r3, r3, #1
 800c212:	2b01      	cmp	r3, #1
 800c214:	d0f0      	beq.n	800c1f8 <USB_CoreReset+0x44>

  return HAL_OK;
 800c216:	2300      	movs	r3, #0
}
 800c218:	4618      	mov	r0, r3
 800c21a:	3714      	adds	r7, #20
 800c21c:	46bd      	mov	sp, r7
 800c21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c222:	4770      	bx	lr

0800c224 <lwip_cdc_debug_printf>:
  * @brief  Send debug message via CDC
  * @param  msg: debug message string
  * @retval None
  */
static void lwip_cdc_debug_printf(const char *msg)
{
 800c224:	b580      	push	{r7, lr}
 800c226:	b084      	sub	sp, #16
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
  uint8_t len = strlen(msg);
 800c22c:	6878      	ldr	r0, [r7, #4]
 800c22e:	f7f3 ffcf 	bl	80001d0 <strlen>
 800c232:	4603      	mov	r3, r0
 800c234:	73fb      	strb	r3, [r7, #15]
  /*if (len > 0)
  {
    CDC_Transmit_FS((uint8_t*)msg, len);
    HAL_Delay(1); // Small delay to ensure transmission
  }*/
}
 800c236:	bf00      	nop
 800c238:	3710      	adds	r7, #16
 800c23a:	46bd      	mov	sp, r7
 800c23c:	bd80      	pop	{r7, pc}
	...

0800c240 <lwip_cdc_debug_log>:
  * @param  prefix: message prefix
  * @param  msg: debug message string
  * @retval None
  */
static void lwip_cdc_debug_log(const char *prefix, const char *msg)
{
 800c240:	b580      	push	{r7, lr}
 800c242:	b0a6      	sub	sp, #152	@ 0x98
 800c244:	af02      	add	r7, sp, #8
 800c246:	6078      	str	r0, [r7, #4]
 800c248:	6039      	str	r1, [r7, #0]
  char debug_buf[128];
  uint32_t tick = HAL_GetTick();
 800c24a:	f7f8 fd75 	bl	8004d38 <HAL_GetTick>
 800c24e:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
  snprintf(debug_buf, sizeof(debug_buf), "[%lu] %s: %s\r\n", tick, prefix, msg);
 800c252:	f107 000c 	add.w	r0, r7, #12
 800c256:	683b      	ldr	r3, [r7, #0]
 800c258:	9301      	str	r3, [sp, #4]
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	9300      	str	r3, [sp, #0]
 800c25e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c262:	4a06      	ldr	r2, [pc, #24]	@ (800c27c <lwip_cdc_debug_log+0x3c>)
 800c264:	2180      	movs	r1, #128	@ 0x80
 800c266:	f012 f823 	bl	801e2b0 <sniprintf>
  lwip_cdc_debug_printf(debug_buf);
 800c26a:	f107 030c 	add.w	r3, r7, #12
 800c26e:	4618      	mov	r0, r3
 800c270:	f7ff ffd8 	bl	800c224 <lwip_cdc_debug_printf>
}
 800c274:	bf00      	nop
 800c276:	3790      	adds	r7, #144	@ 0x90
 800c278:	46bd      	mov	sp, r7
 800c27a:	bd80      	pop	{r7, pc}
 800c27c:	080204dc 	.word	0x080204dc

0800c280 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800c280:	b5b0      	push	{r4, r5, r7, lr}
 800c282:	b0ac      	sub	sp, #176	@ 0xb0
 800c284:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800c286:	4bac      	ldr	r3, [pc, #688]	@ (800c538 <MX_LWIP_Init+0x2b8>)
 800c288:	22c0      	movs	r2, #192	@ 0xc0
 800c28a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800c28c:	4baa      	ldr	r3, [pc, #680]	@ (800c538 <MX_LWIP_Init+0x2b8>)
 800c28e:	22a8      	movs	r2, #168	@ 0xa8
 800c290:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 10;
 800c292:	4ba9      	ldr	r3, [pc, #676]	@ (800c538 <MX_LWIP_Init+0x2b8>)
 800c294:	220a      	movs	r2, #10
 800c296:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 88;
 800c298:	4ba7      	ldr	r3, [pc, #668]	@ (800c538 <MX_LWIP_Init+0x2b8>)
 800c29a:	2258      	movs	r2, #88	@ 0x58
 800c29c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800c29e:	4ba7      	ldr	r3, [pc, #668]	@ (800c53c <MX_LWIP_Init+0x2bc>)
 800c2a0:	22ff      	movs	r2, #255	@ 0xff
 800c2a2:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800c2a4:	4ba5      	ldr	r3, [pc, #660]	@ (800c53c <MX_LWIP_Init+0x2bc>)
 800c2a6:	22ff      	movs	r2, #255	@ 0xff
 800c2a8:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800c2aa:	4ba4      	ldr	r3, [pc, #656]	@ (800c53c <MX_LWIP_Init+0x2bc>)
 800c2ac:	22ff      	movs	r2, #255	@ 0xff
 800c2ae:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800c2b0:	4ba2      	ldr	r3, [pc, #648]	@ (800c53c <MX_LWIP_Init+0x2bc>)
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 800c2b6:	4ba2      	ldr	r3, [pc, #648]	@ (800c540 <MX_LWIP_Init+0x2c0>)
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 800c2bc:	4ba0      	ldr	r3, [pc, #640]	@ (800c540 <MX_LWIP_Init+0x2c0>)
 800c2be:	2200      	movs	r2, #0
 800c2c0:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800c2c2:	4b9f      	ldr	r3, [pc, #636]	@ (800c540 <MX_LWIP_Init+0x2c0>)
 800c2c4:	2200      	movs	r2, #0
 800c2c6:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 800c2c8:	4b9d      	ldr	r3, [pc, #628]	@ (800c540 <MX_LWIP_Init+0x2c0>)
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
  char ip_msg[128];
  snprintf(ip_msg, sizeof(ip_msg), "IP: %d.%d.%d.%d", IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800c2ce:	4b9a      	ldr	r3, [pc, #616]	@ (800c538 <MX_LWIP_Init+0x2b8>)
 800c2d0:	781b      	ldrb	r3, [r3, #0]
 800c2d2:	461c      	mov	r4, r3
 800c2d4:	4b98      	ldr	r3, [pc, #608]	@ (800c538 <MX_LWIP_Init+0x2b8>)
 800c2d6:	785b      	ldrb	r3, [r3, #1]
 800c2d8:	461a      	mov	r2, r3
 800c2da:	4b97      	ldr	r3, [pc, #604]	@ (800c538 <MX_LWIP_Init+0x2b8>)
 800c2dc:	789b      	ldrb	r3, [r3, #2]
 800c2de:	4619      	mov	r1, r3
 800c2e0:	4b95      	ldr	r3, [pc, #596]	@ (800c538 <MX_LWIP_Init+0x2b8>)
 800c2e2:	78db      	ldrb	r3, [r3, #3]
 800c2e4:	f107 0020 	add.w	r0, r7, #32
 800c2e8:	9302      	str	r3, [sp, #8]
 800c2ea:	9101      	str	r1, [sp, #4]
 800c2ec:	9200      	str	r2, [sp, #0]
 800c2ee:	4623      	mov	r3, r4
 800c2f0:	4a94      	ldr	r2, [pc, #592]	@ (800c544 <MX_LWIP_Init+0x2c4>)
 800c2f2:	2180      	movs	r1, #128	@ 0x80
 800c2f4:	f011 ffdc 	bl	801e2b0 <sniprintf>
  lwip_cdc_debug_log("LWIP_INIT", ip_msg);
 800c2f8:	f107 0320 	add.w	r3, r7, #32
 800c2fc:	4619      	mov	r1, r3
 800c2fe:	4892      	ldr	r0, [pc, #584]	@ (800c548 <MX_LWIP_Init+0x2c8>)
 800c300:	f7ff ff9e 	bl	800c240 <lwip_cdc_debug_log>
  
  snprintf(ip_msg, sizeof(ip_msg), "Netmask: %d.%d.%d.%d", NETMASK_ADDRESS[0], NETMASK_ADDRESS[1], NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800c304:	4b8d      	ldr	r3, [pc, #564]	@ (800c53c <MX_LWIP_Init+0x2bc>)
 800c306:	781b      	ldrb	r3, [r3, #0]
 800c308:	461c      	mov	r4, r3
 800c30a:	4b8c      	ldr	r3, [pc, #560]	@ (800c53c <MX_LWIP_Init+0x2bc>)
 800c30c:	785b      	ldrb	r3, [r3, #1]
 800c30e:	461a      	mov	r2, r3
 800c310:	4b8a      	ldr	r3, [pc, #552]	@ (800c53c <MX_LWIP_Init+0x2bc>)
 800c312:	789b      	ldrb	r3, [r3, #2]
 800c314:	4619      	mov	r1, r3
 800c316:	4b89      	ldr	r3, [pc, #548]	@ (800c53c <MX_LWIP_Init+0x2bc>)
 800c318:	78db      	ldrb	r3, [r3, #3]
 800c31a:	f107 0020 	add.w	r0, r7, #32
 800c31e:	9302      	str	r3, [sp, #8]
 800c320:	9101      	str	r1, [sp, #4]
 800c322:	9200      	str	r2, [sp, #0]
 800c324:	4623      	mov	r3, r4
 800c326:	4a89      	ldr	r2, [pc, #548]	@ (800c54c <MX_LWIP_Init+0x2cc>)
 800c328:	2180      	movs	r1, #128	@ 0x80
 800c32a:	f011 ffc1 	bl	801e2b0 <sniprintf>
  lwip_cdc_debug_log("LWIP_INIT", ip_msg);
 800c32e:	f107 0320 	add.w	r3, r7, #32
 800c332:	4619      	mov	r1, r3
 800c334:	4884      	ldr	r0, [pc, #528]	@ (800c548 <MX_LWIP_Init+0x2c8>)
 800c336:	f7ff ff83 	bl	800c240 <lwip_cdc_debug_log>
  
  snprintf(ip_msg, sizeof(ip_msg), "Gateway: %d.%d.%d.%d", GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800c33a:	4b81      	ldr	r3, [pc, #516]	@ (800c540 <MX_LWIP_Init+0x2c0>)
 800c33c:	781b      	ldrb	r3, [r3, #0]
 800c33e:	461c      	mov	r4, r3
 800c340:	4b7f      	ldr	r3, [pc, #508]	@ (800c540 <MX_LWIP_Init+0x2c0>)
 800c342:	785b      	ldrb	r3, [r3, #1]
 800c344:	461a      	mov	r2, r3
 800c346:	4b7e      	ldr	r3, [pc, #504]	@ (800c540 <MX_LWIP_Init+0x2c0>)
 800c348:	789b      	ldrb	r3, [r3, #2]
 800c34a:	4619      	mov	r1, r3
 800c34c:	4b7c      	ldr	r3, [pc, #496]	@ (800c540 <MX_LWIP_Init+0x2c0>)
 800c34e:	78db      	ldrb	r3, [r3, #3]
 800c350:	f107 0020 	add.w	r0, r7, #32
 800c354:	9302      	str	r3, [sp, #8]
 800c356:	9101      	str	r1, [sp, #4]
 800c358:	9200      	str	r2, [sp, #0]
 800c35a:	4623      	mov	r3, r4
 800c35c:	4a7c      	ldr	r2, [pc, #496]	@ (800c550 <MX_LWIP_Init+0x2d0>)
 800c35e:	2180      	movs	r1, #128	@ 0x80
 800c360:	f011 ffa6 	bl	801e2b0 <sniprintf>
  lwip_cdc_debug_log("LWIP_INIT", ip_msg);
 800c364:	f107 0320 	add.w	r3, r7, #32
 800c368:	4619      	mov	r1, r3
 800c36a:	4877      	ldr	r0, [pc, #476]	@ (800c548 <MX_LWIP_Init+0x2c8>)
 800c36c:	f7ff ff68 	bl	800c240 <lwip_cdc_debug_log>
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800c370:	2100      	movs	r1, #0
 800c372:	2000      	movs	r0, #0
 800c374:	f006 fac8 	bl	8012908 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800c378:	4b6f      	ldr	r3, [pc, #444]	@ (800c538 <MX_LWIP_Init+0x2b8>)
 800c37a:	781b      	ldrb	r3, [r3, #0]
 800c37c:	061a      	lsls	r2, r3, #24
 800c37e:	4b6e      	ldr	r3, [pc, #440]	@ (800c538 <MX_LWIP_Init+0x2b8>)
 800c380:	785b      	ldrb	r3, [r3, #1]
 800c382:	041b      	lsls	r3, r3, #16
 800c384:	431a      	orrs	r2, r3
 800c386:	4b6c      	ldr	r3, [pc, #432]	@ (800c538 <MX_LWIP_Init+0x2b8>)
 800c388:	789b      	ldrb	r3, [r3, #2]
 800c38a:	021b      	lsls	r3, r3, #8
 800c38c:	4313      	orrs	r3, r2
 800c38e:	4a6a      	ldr	r2, [pc, #424]	@ (800c538 <MX_LWIP_Init+0x2b8>)
 800c390:	78d2      	ldrb	r2, [r2, #3]
 800c392:	4313      	orrs	r3, r2
 800c394:	061a      	lsls	r2, r3, #24
 800c396:	4b68      	ldr	r3, [pc, #416]	@ (800c538 <MX_LWIP_Init+0x2b8>)
 800c398:	781b      	ldrb	r3, [r3, #0]
 800c39a:	0619      	lsls	r1, r3, #24
 800c39c:	4b66      	ldr	r3, [pc, #408]	@ (800c538 <MX_LWIP_Init+0x2b8>)
 800c39e:	785b      	ldrb	r3, [r3, #1]
 800c3a0:	041b      	lsls	r3, r3, #16
 800c3a2:	4319      	orrs	r1, r3
 800c3a4:	4b64      	ldr	r3, [pc, #400]	@ (800c538 <MX_LWIP_Init+0x2b8>)
 800c3a6:	789b      	ldrb	r3, [r3, #2]
 800c3a8:	021b      	lsls	r3, r3, #8
 800c3aa:	430b      	orrs	r3, r1
 800c3ac:	4962      	ldr	r1, [pc, #392]	@ (800c538 <MX_LWIP_Init+0x2b8>)
 800c3ae:	78c9      	ldrb	r1, [r1, #3]
 800c3b0:	430b      	orrs	r3, r1
 800c3b2:	021b      	lsls	r3, r3, #8
 800c3b4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800c3b8:	431a      	orrs	r2, r3
 800c3ba:	4b5f      	ldr	r3, [pc, #380]	@ (800c538 <MX_LWIP_Init+0x2b8>)
 800c3bc:	781b      	ldrb	r3, [r3, #0]
 800c3be:	0619      	lsls	r1, r3, #24
 800c3c0:	4b5d      	ldr	r3, [pc, #372]	@ (800c538 <MX_LWIP_Init+0x2b8>)
 800c3c2:	785b      	ldrb	r3, [r3, #1]
 800c3c4:	041b      	lsls	r3, r3, #16
 800c3c6:	4319      	orrs	r1, r3
 800c3c8:	4b5b      	ldr	r3, [pc, #364]	@ (800c538 <MX_LWIP_Init+0x2b8>)
 800c3ca:	789b      	ldrb	r3, [r3, #2]
 800c3cc:	021b      	lsls	r3, r3, #8
 800c3ce:	430b      	orrs	r3, r1
 800c3d0:	4959      	ldr	r1, [pc, #356]	@ (800c538 <MX_LWIP_Init+0x2b8>)
 800c3d2:	78c9      	ldrb	r1, [r1, #3]
 800c3d4:	430b      	orrs	r3, r1
 800c3d6:	0a1b      	lsrs	r3, r3, #8
 800c3d8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800c3dc:	431a      	orrs	r2, r3
 800c3de:	4b56      	ldr	r3, [pc, #344]	@ (800c538 <MX_LWIP_Init+0x2b8>)
 800c3e0:	781b      	ldrb	r3, [r3, #0]
 800c3e2:	0619      	lsls	r1, r3, #24
 800c3e4:	4b54      	ldr	r3, [pc, #336]	@ (800c538 <MX_LWIP_Init+0x2b8>)
 800c3e6:	785b      	ldrb	r3, [r3, #1]
 800c3e8:	041b      	lsls	r3, r3, #16
 800c3ea:	4319      	orrs	r1, r3
 800c3ec:	4b52      	ldr	r3, [pc, #328]	@ (800c538 <MX_LWIP_Init+0x2b8>)
 800c3ee:	789b      	ldrb	r3, [r3, #2]
 800c3f0:	021b      	lsls	r3, r3, #8
 800c3f2:	430b      	orrs	r3, r1
 800c3f4:	4950      	ldr	r1, [pc, #320]	@ (800c538 <MX_LWIP_Init+0x2b8>)
 800c3f6:	78c9      	ldrb	r1, [r1, #3]
 800c3f8:	430b      	orrs	r3, r1
 800c3fa:	0e1b      	lsrs	r3, r3, #24
 800c3fc:	4313      	orrs	r3, r2
 800c3fe:	4a55      	ldr	r2, [pc, #340]	@ (800c554 <MX_LWIP_Init+0x2d4>)
 800c400:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800c402:	4b4e      	ldr	r3, [pc, #312]	@ (800c53c <MX_LWIP_Init+0x2bc>)
 800c404:	781b      	ldrb	r3, [r3, #0]
 800c406:	061a      	lsls	r2, r3, #24
 800c408:	4b4c      	ldr	r3, [pc, #304]	@ (800c53c <MX_LWIP_Init+0x2bc>)
 800c40a:	785b      	ldrb	r3, [r3, #1]
 800c40c:	041b      	lsls	r3, r3, #16
 800c40e:	431a      	orrs	r2, r3
 800c410:	4b4a      	ldr	r3, [pc, #296]	@ (800c53c <MX_LWIP_Init+0x2bc>)
 800c412:	789b      	ldrb	r3, [r3, #2]
 800c414:	021b      	lsls	r3, r3, #8
 800c416:	4313      	orrs	r3, r2
 800c418:	4a48      	ldr	r2, [pc, #288]	@ (800c53c <MX_LWIP_Init+0x2bc>)
 800c41a:	78d2      	ldrb	r2, [r2, #3]
 800c41c:	4313      	orrs	r3, r2
 800c41e:	061a      	lsls	r2, r3, #24
 800c420:	4b46      	ldr	r3, [pc, #280]	@ (800c53c <MX_LWIP_Init+0x2bc>)
 800c422:	781b      	ldrb	r3, [r3, #0]
 800c424:	0619      	lsls	r1, r3, #24
 800c426:	4b45      	ldr	r3, [pc, #276]	@ (800c53c <MX_LWIP_Init+0x2bc>)
 800c428:	785b      	ldrb	r3, [r3, #1]
 800c42a:	041b      	lsls	r3, r3, #16
 800c42c:	4319      	orrs	r1, r3
 800c42e:	4b43      	ldr	r3, [pc, #268]	@ (800c53c <MX_LWIP_Init+0x2bc>)
 800c430:	789b      	ldrb	r3, [r3, #2]
 800c432:	021b      	lsls	r3, r3, #8
 800c434:	430b      	orrs	r3, r1
 800c436:	4941      	ldr	r1, [pc, #260]	@ (800c53c <MX_LWIP_Init+0x2bc>)
 800c438:	78c9      	ldrb	r1, [r1, #3]
 800c43a:	430b      	orrs	r3, r1
 800c43c:	021b      	lsls	r3, r3, #8
 800c43e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800c442:	431a      	orrs	r2, r3
 800c444:	4b3d      	ldr	r3, [pc, #244]	@ (800c53c <MX_LWIP_Init+0x2bc>)
 800c446:	781b      	ldrb	r3, [r3, #0]
 800c448:	0619      	lsls	r1, r3, #24
 800c44a:	4b3c      	ldr	r3, [pc, #240]	@ (800c53c <MX_LWIP_Init+0x2bc>)
 800c44c:	785b      	ldrb	r3, [r3, #1]
 800c44e:	041b      	lsls	r3, r3, #16
 800c450:	4319      	orrs	r1, r3
 800c452:	4b3a      	ldr	r3, [pc, #232]	@ (800c53c <MX_LWIP_Init+0x2bc>)
 800c454:	789b      	ldrb	r3, [r3, #2]
 800c456:	021b      	lsls	r3, r3, #8
 800c458:	430b      	orrs	r3, r1
 800c45a:	4938      	ldr	r1, [pc, #224]	@ (800c53c <MX_LWIP_Init+0x2bc>)
 800c45c:	78c9      	ldrb	r1, [r1, #3]
 800c45e:	430b      	orrs	r3, r1
 800c460:	0a1b      	lsrs	r3, r3, #8
 800c462:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800c466:	431a      	orrs	r2, r3
 800c468:	4b34      	ldr	r3, [pc, #208]	@ (800c53c <MX_LWIP_Init+0x2bc>)
 800c46a:	781b      	ldrb	r3, [r3, #0]
 800c46c:	0619      	lsls	r1, r3, #24
 800c46e:	4b33      	ldr	r3, [pc, #204]	@ (800c53c <MX_LWIP_Init+0x2bc>)
 800c470:	785b      	ldrb	r3, [r3, #1]
 800c472:	041b      	lsls	r3, r3, #16
 800c474:	4319      	orrs	r1, r3
 800c476:	4b31      	ldr	r3, [pc, #196]	@ (800c53c <MX_LWIP_Init+0x2bc>)
 800c478:	789b      	ldrb	r3, [r3, #2]
 800c47a:	021b      	lsls	r3, r3, #8
 800c47c:	430b      	orrs	r3, r1
 800c47e:	492f      	ldr	r1, [pc, #188]	@ (800c53c <MX_LWIP_Init+0x2bc>)
 800c480:	78c9      	ldrb	r1, [r1, #3]
 800c482:	430b      	orrs	r3, r1
 800c484:	0e1b      	lsrs	r3, r3, #24
 800c486:	4313      	orrs	r3, r2
 800c488:	4a33      	ldr	r2, [pc, #204]	@ (800c558 <MX_LWIP_Init+0x2d8>)
 800c48a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800c48c:	4b2c      	ldr	r3, [pc, #176]	@ (800c540 <MX_LWIP_Init+0x2c0>)
 800c48e:	781b      	ldrb	r3, [r3, #0]
 800c490:	061a      	lsls	r2, r3, #24
 800c492:	4b2b      	ldr	r3, [pc, #172]	@ (800c540 <MX_LWIP_Init+0x2c0>)
 800c494:	785b      	ldrb	r3, [r3, #1]
 800c496:	041b      	lsls	r3, r3, #16
 800c498:	431a      	orrs	r2, r3
 800c49a:	4b29      	ldr	r3, [pc, #164]	@ (800c540 <MX_LWIP_Init+0x2c0>)
 800c49c:	789b      	ldrb	r3, [r3, #2]
 800c49e:	021b      	lsls	r3, r3, #8
 800c4a0:	4313      	orrs	r3, r2
 800c4a2:	4a27      	ldr	r2, [pc, #156]	@ (800c540 <MX_LWIP_Init+0x2c0>)
 800c4a4:	78d2      	ldrb	r2, [r2, #3]
 800c4a6:	4313      	orrs	r3, r2
 800c4a8:	061a      	lsls	r2, r3, #24
 800c4aa:	4b25      	ldr	r3, [pc, #148]	@ (800c540 <MX_LWIP_Init+0x2c0>)
 800c4ac:	781b      	ldrb	r3, [r3, #0]
 800c4ae:	0619      	lsls	r1, r3, #24
 800c4b0:	4b23      	ldr	r3, [pc, #140]	@ (800c540 <MX_LWIP_Init+0x2c0>)
 800c4b2:	785b      	ldrb	r3, [r3, #1]
 800c4b4:	041b      	lsls	r3, r3, #16
 800c4b6:	4319      	orrs	r1, r3
 800c4b8:	4b21      	ldr	r3, [pc, #132]	@ (800c540 <MX_LWIP_Init+0x2c0>)
 800c4ba:	789b      	ldrb	r3, [r3, #2]
 800c4bc:	021b      	lsls	r3, r3, #8
 800c4be:	430b      	orrs	r3, r1
 800c4c0:	491f      	ldr	r1, [pc, #124]	@ (800c540 <MX_LWIP_Init+0x2c0>)
 800c4c2:	78c9      	ldrb	r1, [r1, #3]
 800c4c4:	430b      	orrs	r3, r1
 800c4c6:	021b      	lsls	r3, r3, #8
 800c4c8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800c4cc:	431a      	orrs	r2, r3
 800c4ce:	4b1c      	ldr	r3, [pc, #112]	@ (800c540 <MX_LWIP_Init+0x2c0>)
 800c4d0:	781b      	ldrb	r3, [r3, #0]
 800c4d2:	0619      	lsls	r1, r3, #24
 800c4d4:	4b1a      	ldr	r3, [pc, #104]	@ (800c540 <MX_LWIP_Init+0x2c0>)
 800c4d6:	785b      	ldrb	r3, [r3, #1]
 800c4d8:	041b      	lsls	r3, r3, #16
 800c4da:	4319      	orrs	r1, r3
 800c4dc:	4b18      	ldr	r3, [pc, #96]	@ (800c540 <MX_LWIP_Init+0x2c0>)
 800c4de:	789b      	ldrb	r3, [r3, #2]
 800c4e0:	021b      	lsls	r3, r3, #8
 800c4e2:	430b      	orrs	r3, r1
 800c4e4:	4916      	ldr	r1, [pc, #88]	@ (800c540 <MX_LWIP_Init+0x2c0>)
 800c4e6:	78c9      	ldrb	r1, [r1, #3]
 800c4e8:	430b      	orrs	r3, r1
 800c4ea:	0a1b      	lsrs	r3, r3, #8
 800c4ec:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800c4f0:	431a      	orrs	r2, r3
 800c4f2:	4b13      	ldr	r3, [pc, #76]	@ (800c540 <MX_LWIP_Init+0x2c0>)
 800c4f4:	781b      	ldrb	r3, [r3, #0]
 800c4f6:	0619      	lsls	r1, r3, #24
 800c4f8:	4b11      	ldr	r3, [pc, #68]	@ (800c540 <MX_LWIP_Init+0x2c0>)
 800c4fa:	785b      	ldrb	r3, [r3, #1]
 800c4fc:	041b      	lsls	r3, r3, #16
 800c4fe:	4319      	orrs	r1, r3
 800c500:	4b0f      	ldr	r3, [pc, #60]	@ (800c540 <MX_LWIP_Init+0x2c0>)
 800c502:	789b      	ldrb	r3, [r3, #2]
 800c504:	021b      	lsls	r3, r3, #8
 800c506:	430b      	orrs	r3, r1
 800c508:	490d      	ldr	r1, [pc, #52]	@ (800c540 <MX_LWIP_Init+0x2c0>)
 800c50a:	78c9      	ldrb	r1, [r1, #3]
 800c50c:	430b      	orrs	r3, r1
 800c50e:	0e1b      	lsrs	r3, r3, #24
 800c510:	4313      	orrs	r3, r2
 800c512:	4a12      	ldr	r2, [pc, #72]	@ (800c55c <MX_LWIP_Init+0x2dc>)
 800c514:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800c516:	4b12      	ldr	r3, [pc, #72]	@ (800c560 <MX_LWIP_Init+0x2e0>)
 800c518:	9302      	str	r3, [sp, #8]
 800c51a:	4b12      	ldr	r3, [pc, #72]	@ (800c564 <MX_LWIP_Init+0x2e4>)
 800c51c:	9301      	str	r3, [sp, #4]
 800c51e:	2300      	movs	r3, #0
 800c520:	9300      	str	r3, [sp, #0]
 800c522:	4b0e      	ldr	r3, [pc, #56]	@ (800c55c <MX_LWIP_Init+0x2dc>)
 800c524:	4a0c      	ldr	r2, [pc, #48]	@ (800c558 <MX_LWIP_Init+0x2d8>)
 800c526:	490b      	ldr	r1, [pc, #44]	@ (800c554 <MX_LWIP_Init+0x2d4>)
 800c528:	480f      	ldr	r0, [pc, #60]	@ (800c568 <MX_LWIP_Init+0x2e8>)
 800c52a:	f006 ffb7 	bl	801349c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800c52e:	480e      	ldr	r0, [pc, #56]	@ (800c568 <MX_LWIP_Init+0x2e8>)
 800c530:	f007 f966 	bl	8013800 <netif_set_default>
 800c534:	e01a      	b.n	800c56c <MX_LWIP_Init+0x2ec>
 800c536:	bf00      	nop
 800c538:	20000a08 	.word	0x20000a08
 800c53c:	20000a0c 	.word	0x20000a0c
 800c540:	20000a10 	.word	0x20000a10
 800c544:	08020704 	.word	0x08020704
 800c548:	08020714 	.word	0x08020714
 800c54c:	08020720 	.word	0x08020720
 800c550:	08020738 	.word	0x08020738
 800c554:	200009fc 	.word	0x200009fc
 800c558:	20000a00 	.word	0x20000a00
 800c55c:	20000a04 	.word	0x20000a04
 800c560:	08012845 	.word	0x08012845
 800c564:	0800d095 	.word	0x0800d095
 800c568:	200009c8 	.word	0x200009c8

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800c56c:	4812      	ldr	r0, [pc, #72]	@ (800c5b8 <MX_LWIP_Init+0x338>)
 800c56e:	f007 f957 	bl	8013820 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800c572:	4912      	ldr	r1, [pc, #72]	@ (800c5bc <MX_LWIP_Init+0x33c>)
 800c574:	4810      	ldr	r0, [pc, #64]	@ (800c5b8 <MX_LWIP_Init+0x338>)
 800c576:	f007 fa23 	bl	80139c0 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  lwip_cdc_debug_log("LWIP_INIT", "Creating Ethernet link handler thread");
 800c57a:	4911      	ldr	r1, [pc, #68]	@ (800c5c0 <MX_LWIP_Init+0x340>)
 800c57c:	4811      	ldr	r0, [pc, #68]	@ (800c5c4 <MX_LWIP_Init+0x344>)
 800c57e:	f7ff fe5f 	bl	800c240 <lwip_cdc_debug_log>
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 800c582:	4b11      	ldr	r3, [pc, #68]	@ (800c5c8 <MX_LWIP_Init+0x348>)
 800c584:	1d3c      	adds	r4, r7, #4
 800c586:	461d      	mov	r5, r3
 800c588:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c58a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c58c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c590:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 800c594:	1d3b      	adds	r3, r7, #4
 800c596:	4908      	ldr	r1, [pc, #32]	@ (800c5b8 <MX_LWIP_Init+0x338>)
 800c598:	4618      	mov	r0, r3
 800c59a:	f003 f933 	bl	800f804 <osThreadCreate>
  lwip_cdc_debug_log("LWIP_INIT", "Ethernet link handler thread created");
 800c59e:	490b      	ldr	r1, [pc, #44]	@ (800c5cc <MX_LWIP_Init+0x34c>)
 800c5a0:	4808      	ldr	r0, [pc, #32]	@ (800c5c4 <MX_LWIP_Init+0x344>)
 800c5a2:	f7ff fe4d 	bl	800c240 <lwip_cdc_debug_log>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */
  lwip_cdc_debug_log("LWIP_INIT", "LwIP initialization completed successfully");
 800c5a6:	490a      	ldr	r1, [pc, #40]	@ (800c5d0 <MX_LWIP_Init+0x350>)
 800c5a8:	4806      	ldr	r0, [pc, #24]	@ (800c5c4 <MX_LWIP_Init+0x344>)
 800c5aa:	f7ff fe49 	bl	800c240 <lwip_cdc_debug_log>
/* USER CODE END 3 */
}
 800c5ae:	bf00      	nop
 800c5b0:	37a0      	adds	r7, #160	@ 0xa0
 800c5b2:	46bd      	mov	sp, r7
 800c5b4:	bdb0      	pop	{r4, r5, r7, pc}
 800c5b6:	bf00      	nop
 800c5b8:	200009c8 	.word	0x200009c8
 800c5bc:	0800c5d5 	.word	0x0800c5d5
 800c5c0:	08020750 	.word	0x08020750
 800c5c4:	08020714 	.word	0x08020714
 800c5c8:	080207d4 	.word	0x080207d4
 800c5cc:	08020778 	.word	0x08020778
 800c5d0:	080207a0 	.word	0x080207a0

0800c5d4 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b0a2      	sub	sp, #136	@ 0x88
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
  if (netif_is_up(netif))
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c5e2:	f003 0301 	and.w	r3, r3, #1
 800c5e6:	b2db      	uxtb	r3, r3
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d016      	beq.n	800c61a <ethernet_link_status_updated+0x46>
  {
/* USER CODE BEGIN 5 */
    lwip_cdc_debug_log("LINK_STATUS", "Network interface is UP");
 800c5ec:	490f      	ldr	r1, [pc, #60]	@ (800c62c <ethernet_link_status_updated+0x58>)
 800c5ee:	4810      	ldr	r0, [pc, #64]	@ (800c630 <ethernet_link_status_updated+0x5c>)
 800c5f0:	f7ff fe26 	bl	800c240 <lwip_cdc_debug_log>
    
    char status_msg[128];
    snprintf(status_msg, sizeof(status_msg), "Interface UP - IP: %s", ip4addr_ntoa(netif_ip4_addr(netif)));
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	3304      	adds	r3, #4
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	f00f feeb 	bl	801c3d4 <ip4addr_ntoa>
 800c5fe:	4603      	mov	r3, r0
 800c600:	f107 0008 	add.w	r0, r7, #8
 800c604:	4a0b      	ldr	r2, [pc, #44]	@ (800c634 <ethernet_link_status_updated+0x60>)
 800c606:	2180      	movs	r1, #128	@ 0x80
 800c608:	f011 fe52 	bl	801e2b0 <sniprintf>
    lwip_cdc_debug_log("LINK_STATUS", status_msg);
 800c60c:	f107 0308 	add.w	r3, r7, #8
 800c610:	4619      	mov	r1, r3
 800c612:	4807      	ldr	r0, [pc, #28]	@ (800c630 <ethernet_link_status_updated+0x5c>)
 800c614:	f7ff fe14 	bl	800c240 <lwip_cdc_debug_log>
  {
/* USER CODE BEGIN 6 */
    lwip_cdc_debug_log("LINK_STATUS", "Network interface is DOWN");
/* USER CODE END 6 */
  }
}
 800c618:	e003      	b.n	800c622 <ethernet_link_status_updated+0x4e>
    lwip_cdc_debug_log("LINK_STATUS", "Network interface is DOWN");
 800c61a:	4907      	ldr	r1, [pc, #28]	@ (800c638 <ethernet_link_status_updated+0x64>)
 800c61c:	4804      	ldr	r0, [pc, #16]	@ (800c630 <ethernet_link_status_updated+0x5c>)
 800c61e:	f7ff fe0f 	bl	800c240 <lwip_cdc_debug_log>
}
 800c622:	bf00      	nop
 800c624:	3788      	adds	r7, #136	@ 0x88
 800c626:	46bd      	mov	sp, r7
 800c628:	bd80      	pop	{r7, pc}
 800c62a:	bf00      	nop
 800c62c:	080207f0 	.word	0x080207f0
 800c630:	08020808 	.word	0x08020808
 800c634:	08020814 	.word	0x08020814
 800c638:	0802082c 	.word	0x0802082c

0800c63c <cdc_debug_printf>:
  * @brief  Send debug message via CDC
  * @param  msg: debug message string
  * @retval None
  */
static void cdc_debug_printf(const char *msg)
{
 800c63c:	b580      	push	{r7, lr}
 800c63e:	b084      	sub	sp, #16
 800c640:	af00      	add	r7, sp, #0
 800c642:	6078      	str	r0, [r7, #4]
  uint8_t len = strlen(msg);
 800c644:	6878      	ldr	r0, [r7, #4]
 800c646:	f7f3 fdc3 	bl	80001d0 <strlen>
 800c64a:	4603      	mov	r3, r0
 800c64c:	73fb      	strb	r3, [r7, #15]
  /*if (len > 0)
  {
    CDC_Transmit_FS((uint8_t*)msg, len);
    HAL_Delay(1); // Small delay to ensure transmission
  }*/
}
 800c64e:	bf00      	nop
 800c650:	3710      	adds	r7, #16
 800c652:	46bd      	mov	sp, r7
 800c654:	bd80      	pop	{r7, pc}
	...

0800c658 <cdc_debug_log>:
  * @param  prefix: message prefix
  * @param  msg: debug message string
  * @retval None
  */
static void cdc_debug_log(const char *prefix, const char *msg)
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b0a6      	sub	sp, #152	@ 0x98
 800c65c:	af02      	add	r7, sp, #8
 800c65e:	6078      	str	r0, [r7, #4]
 800c660:	6039      	str	r1, [r7, #0]
  char debug_buf[128];
  uint32_t tick = HAL_GetTick();
 800c662:	f7f8 fb69 	bl	8004d38 <HAL_GetTick>
 800c666:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
  snprintf(debug_buf, sizeof(debug_buf), "[%lu] %s: %s\r\n", tick, prefix, msg);
 800c66a:	f107 000c 	add.w	r0, r7, #12
 800c66e:	683b      	ldr	r3, [r7, #0]
 800c670:	9301      	str	r3, [sp, #4]
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	9300      	str	r3, [sp, #0]
 800c676:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c67a:	4a06      	ldr	r2, [pc, #24]	@ (800c694 <cdc_debug_log+0x3c>)
 800c67c:	2180      	movs	r1, #128	@ 0x80
 800c67e:	f011 fe17 	bl	801e2b0 <sniprintf>
  cdc_debug_printf(debug_buf);
 800c682:	f107 030c 	add.w	r3, r7, #12
 800c686:	4618      	mov	r0, r3
 800c688:	f7ff ffd8 	bl	800c63c <cdc_debug_printf>
}
 800c68c:	bf00      	nop
 800c68e:	3790      	adds	r7, #144	@ 0x90
 800c690:	46bd      	mov	sp, r7
 800c692:	bd80      	pop	{r7, pc}
 800c694:	08020848 	.word	0x08020848

0800c698 <debug_eth_dma_descriptors>:
/**
  * @brief  Debug ETH DMA descriptors
  * @retval None
  */
static void debug_eth_dma_descriptors(void)
{
 800c698:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c69a:	b0cf      	sub	sp, #316	@ 0x13c
 800c69c:	af06      	add	r7, sp, #24
  char debug_msg[256];
  
  cdc_debug_log("DMA_DESC", "=== RX Descriptors Status ===");
 800c69e:	495d      	ldr	r1, [pc, #372]	@ (800c814 <debug_eth_dma_descriptors+0x17c>)
 800c6a0:	485d      	ldr	r0, [pc, #372]	@ (800c818 <debug_eth_dma_descriptors+0x180>)
 800c6a2:	f7ff ffd9 	bl	800c658 <cdc_debug_log>
  // 检查RX描述符状态
  for(int i = 0; i < ETH_RX_DESC_CNT; i++) {
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800c6ac:	e048      	b.n	800c740 <debug_eth_dma_descriptors+0xa8>
    uint32_t desc0 = DMARxDscrTab[i].DESC0;
 800c6ae:	495b      	ldr	r1, [pc, #364]	@ (800c81c <debug_eth_dma_descriptors+0x184>)
 800c6b0:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800c6b4:	4613      	mov	r3, r2
 800c6b6:	009b      	lsls	r3, r3, #2
 800c6b8:	4413      	add	r3, r2
 800c6ba:	00db      	lsls	r3, r3, #3
 800c6bc:	440b      	add	r3, r1
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    uint32_t desc2 = DMARxDscrTab[i].DESC2;
 800c6c4:	4955      	ldr	r1, [pc, #340]	@ (800c81c <debug_eth_dma_descriptors+0x184>)
 800c6c6:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800c6ca:	4613      	mov	r3, r2
 800c6cc:	009b      	lsls	r3, r3, #2
 800c6ce:	4413      	add	r3, r2
 800c6d0:	00db      	lsls	r3, r3, #3
 800c6d2:	440b      	add	r3, r1
 800c6d4:	3308      	adds	r3, #8
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    
    snprintf(debug_msg, sizeof(debug_msg),
             "RX[%d]: OWN=%lu ES=%lu FS=%lu LS=%lu FL=%lu Buf1=0x%08lX",
             i, 
             (desc0 & ETH_DMARXDESC_OWN) ? 1UL : 0UL,      // Owner bit
 800c6dc:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800c6e0:	0fdb      	lsrs	r3, r3, #31
             (desc0 & ETH_DMARXDESC_ES) ? 1UL : 0UL,       // Error Summary
 800c6e2:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 800c6e6:	0bd2      	lsrs	r2, r2, #15
    snprintf(debug_msg, sizeof(debug_msg),
 800c6e8:	f002 0201 	and.w	r2, r2, #1
             (desc0 & ETH_DMARXDESC_FS) ? 1UL : 0UL,       // First Segment
 800c6ec:	f8d7 1108 	ldr.w	r1, [r7, #264]	@ 0x108
 800c6f0:	0a49      	lsrs	r1, r1, #9
    snprintf(debug_msg, sizeof(debug_msg),
 800c6f2:	f001 0101 	and.w	r1, r1, #1
             (desc0 & ETH_DMARXDESC_LS) ? 1UL : 0UL,       // Last Segment
 800c6f6:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 800c6fa:	0a00      	lsrs	r0, r0, #8
    snprintf(debug_msg, sizeof(debug_msg),
 800c6fc:	f000 0001 	and.w	r0, r0, #1
             (desc0 & ETH_DMARXDESC_FL) >> 16,             // Frame Length
 800c700:	f8d7 4108 	ldr.w	r4, [r7, #264]	@ 0x108
 800c704:	0c24      	lsrs	r4, r4, #16
    snprintf(debug_msg, sizeof(debug_msg),
 800c706:	f3c4 040d 	ubfx	r4, r4, #0, #14
 800c70a:	1d3e      	adds	r6, r7, #4
 800c70c:	f8d7 5104 	ldr.w	r5, [r7, #260]	@ 0x104
 800c710:	9505      	str	r5, [sp, #20]
 800c712:	9404      	str	r4, [sp, #16]
 800c714:	9003      	str	r0, [sp, #12]
 800c716:	9102      	str	r1, [sp, #8]
 800c718:	9201      	str	r2, [sp, #4]
 800c71a:	9300      	str	r3, [sp, #0]
 800c71c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800c720:	4a3f      	ldr	r2, [pc, #252]	@ (800c820 <debug_eth_dma_descriptors+0x188>)
 800c722:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800c726:	4630      	mov	r0, r6
 800c728:	f011 fdc2 	bl	801e2b0 <sniprintf>
             desc2);                                        // Buffer1 Address
    cdc_debug_log("DMA_DESC", debug_msg);
 800c72c:	1d3b      	adds	r3, r7, #4
 800c72e:	4619      	mov	r1, r3
 800c730:	4839      	ldr	r0, [pc, #228]	@ (800c818 <debug_eth_dma_descriptors+0x180>)
 800c732:	f7ff ff91 	bl	800c658 <cdc_debug_log>
  for(int i = 0; i < ETH_RX_DESC_CNT; i++) {
 800c736:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800c73a:	3301      	adds	r3, #1
 800c73c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800c740:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800c744:	2b03      	cmp	r3, #3
 800c746:	d9b2      	bls.n	800c6ae <debug_eth_dma_descriptors+0x16>
  }
  
  cdc_debug_log("DMA_DESC", "=== TX Descriptors Status ===");
 800c748:	4936      	ldr	r1, [pc, #216]	@ (800c824 <debug_eth_dma_descriptors+0x18c>)
 800c74a:	4833      	ldr	r0, [pc, #204]	@ (800c818 <debug_eth_dma_descriptors+0x180>)
 800c74c:	f7ff ff84 	bl	800c658 <cdc_debug_log>
  // 检查TX描述符状态
  for(int i = 0; i < ETH_TX_DESC_CNT; i++) {
 800c750:	2300      	movs	r3, #0
 800c752:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800c756:	e053      	b.n	800c800 <debug_eth_dma_descriptors+0x168>
    uint32_t desc0 = DMATxDscrTab[i].DESC0;
 800c758:	4933      	ldr	r1, [pc, #204]	@ (800c828 <debug_eth_dma_descriptors+0x190>)
 800c75a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800c75e:	4613      	mov	r3, r2
 800c760:	009b      	lsls	r3, r3, #2
 800c762:	4413      	add	r3, r2
 800c764:	00db      	lsls	r3, r3, #3
 800c766:	440b      	add	r3, r1
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    uint32_t desc1 = DMATxDscrTab[i].DESC1;
 800c76e:	492e      	ldr	r1, [pc, #184]	@ (800c828 <debug_eth_dma_descriptors+0x190>)
 800c770:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800c774:	4613      	mov	r3, r2
 800c776:	009b      	lsls	r3, r3, #2
 800c778:	4413      	add	r3, r2
 800c77a:	00db      	lsls	r3, r3, #3
 800c77c:	440b      	add	r3, r1
 800c77e:	3304      	adds	r3, #4
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    uint32_t desc2 = DMATxDscrTab[i].DESC2;
 800c786:	4928      	ldr	r1, [pc, #160]	@ (800c828 <debug_eth_dma_descriptors+0x190>)
 800c788:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800c78c:	4613      	mov	r3, r2
 800c78e:	009b      	lsls	r3, r3, #2
 800c790:	4413      	add	r3, r2
 800c792:	00db      	lsls	r3, r3, #3
 800c794:	440b      	add	r3, r1
 800c796:	3308      	adds	r3, #8
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    
    snprintf(debug_msg, sizeof(debug_msg),
             "TX[%d]: OWN=%lu ES=%lu FS=%lu LS=%lu TBS1=%lu Buf1=0x%08lX",
             i,
             (desc0 & ETH_DMATXDESC_OWN) ? 1UL : 0UL,      // Owner bit
 800c79e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c7a2:	0fdb      	lsrs	r3, r3, #31
             (desc0 & ETH_DMATXDESC_ES) ? 1UL : 0UL,       // Error Summary
 800c7a4:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800c7a8:	0bd2      	lsrs	r2, r2, #15
    snprintf(debug_msg, sizeof(debug_msg),
 800c7aa:	f002 0201 	and.w	r2, r2, #1
             (desc0 & ETH_DMATXDESC_FS) ? 1UL : 0UL,       // First Segment
 800c7ae:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 800c7b2:	0f09      	lsrs	r1, r1, #28
    snprintf(debug_msg, sizeof(debug_msg),
 800c7b4:	f001 0101 	and.w	r1, r1, #1
             (desc0 & ETH_DMATXDESC_LS) ? 1UL : 0UL,       // Last Segment
 800c7b8:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 800c7bc:	0f40      	lsrs	r0, r0, #29
    snprintf(debug_msg, sizeof(debug_msg),
 800c7be:	f000 0001 	and.w	r0, r0, #1
 800c7c2:	f8d7 4110 	ldr.w	r4, [r7, #272]	@ 0x110
 800c7c6:	f3c4 040c 	ubfx	r4, r4, #0, #13
 800c7ca:	1d3e      	adds	r6, r7, #4
 800c7cc:	f8d7 510c 	ldr.w	r5, [r7, #268]	@ 0x10c
 800c7d0:	9505      	str	r5, [sp, #20]
 800c7d2:	9404      	str	r4, [sp, #16]
 800c7d4:	9003      	str	r0, [sp, #12]
 800c7d6:	9102      	str	r1, [sp, #8]
 800c7d8:	9201      	str	r2, [sp, #4]
 800c7da:	9300      	str	r3, [sp, #0]
 800c7dc:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800c7e0:	4a12      	ldr	r2, [pc, #72]	@ (800c82c <debug_eth_dma_descriptors+0x194>)
 800c7e2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800c7e6:	4630      	mov	r0, r6
 800c7e8:	f011 fd62 	bl	801e2b0 <sniprintf>
             desc1 & ETH_DMATXDESC_TBS1,                   // Transmit Buffer1 Size
             desc2);                                        // Buffer1 Address
    cdc_debug_log("DMA_DESC", debug_msg);
 800c7ec:	1d3b      	adds	r3, r7, #4
 800c7ee:	4619      	mov	r1, r3
 800c7f0:	4809      	ldr	r0, [pc, #36]	@ (800c818 <debug_eth_dma_descriptors+0x180>)
 800c7f2:	f7ff ff31 	bl	800c658 <cdc_debug_log>
  for(int i = 0; i < ETH_TX_DESC_CNT; i++) {
 800c7f6:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800c7fa:	3301      	adds	r3, #1
 800c7fc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800c800:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800c804:	2b03      	cmp	r3, #3
 800c806:	d9a7      	bls.n	800c758 <debug_eth_dma_descriptors+0xc0>
  }
}
 800c808:	bf00      	nop
 800c80a:	bf00      	nop
 800c80c:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 800c810:	46bd      	mov	sp, r7
 800c812:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c814:	08020928 	.word	0x08020928
 800c818:	08020948 	.word	0x08020948
 800c81c:	200053a0 	.word	0x200053a0
 800c820:	08020954 	.word	0x08020954
 800c824:	08020990 	.word	0x08020990
 800c828:	20005440 	.word	0x20005440
 800c82c:	080209b0 	.word	0x080209b0

0800c830 <debug_eth_dma_registers>:
/**
  * @brief  Debug ETH DMA registers
  * @retval None
  */
static void debug_eth_dma_registers(void)
{
 800c830:	b580      	push	{r7, lr}
 800c832:	b0a0      	sub	sp, #128	@ 0x80
 800c834:	af00      	add	r7, sp, #0
  char debug_msg[128];
  
  snprintf(debug_msg, sizeof(debug_msg), "DMA_BMR=0x%08lX", ETH->DMABMR);
 800c836:	4b25      	ldr	r3, [pc, #148]	@ (800c8cc <debug_eth_dma_registers+0x9c>)
 800c838:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	4638      	mov	r0, r7
 800c840:	4a23      	ldr	r2, [pc, #140]	@ (800c8d0 <debug_eth_dma_registers+0xa0>)
 800c842:	2180      	movs	r1, #128	@ 0x80
 800c844:	f011 fd34 	bl	801e2b0 <sniprintf>
  cdc_debug_log("DMA_REG", debug_msg);
 800c848:	463b      	mov	r3, r7
 800c84a:	4619      	mov	r1, r3
 800c84c:	4821      	ldr	r0, [pc, #132]	@ (800c8d4 <debug_eth_dma_registers+0xa4>)
 800c84e:	f7ff ff03 	bl	800c658 <cdc_debug_log>
  
  snprintf(debug_msg, sizeof(debug_msg), "DMA_SR=0x%08lX", ETH->DMASR);
 800c852:	4b1e      	ldr	r3, [pc, #120]	@ (800c8cc <debug_eth_dma_registers+0x9c>)
 800c854:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c858:	695b      	ldr	r3, [r3, #20]
 800c85a:	4638      	mov	r0, r7
 800c85c:	4a1e      	ldr	r2, [pc, #120]	@ (800c8d8 <debug_eth_dma_registers+0xa8>)
 800c85e:	2180      	movs	r1, #128	@ 0x80
 800c860:	f011 fd26 	bl	801e2b0 <sniprintf>
  cdc_debug_log("DMA_REG", debug_msg);
 800c864:	463b      	mov	r3, r7
 800c866:	4619      	mov	r1, r3
 800c868:	481a      	ldr	r0, [pc, #104]	@ (800c8d4 <debug_eth_dma_registers+0xa4>)
 800c86a:	f7ff fef5 	bl	800c658 <cdc_debug_log>
  
  snprintf(debug_msg, sizeof(debug_msg), "DMA_IER=0x%08lX", ETH->DMAIER);
 800c86e:	4b17      	ldr	r3, [pc, #92]	@ (800c8cc <debug_eth_dma_registers+0x9c>)
 800c870:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c874:	69db      	ldr	r3, [r3, #28]
 800c876:	4638      	mov	r0, r7
 800c878:	4a18      	ldr	r2, [pc, #96]	@ (800c8dc <debug_eth_dma_registers+0xac>)
 800c87a:	2180      	movs	r1, #128	@ 0x80
 800c87c:	f011 fd18 	bl	801e2b0 <sniprintf>
  cdc_debug_log("DMA_REG", debug_msg);
 800c880:	463b      	mov	r3, r7
 800c882:	4619      	mov	r1, r3
 800c884:	4813      	ldr	r0, [pc, #76]	@ (800c8d4 <debug_eth_dma_registers+0xa4>)
 800c886:	f7ff fee7 	bl	800c658 <cdc_debug_log>
  
  snprintf(debug_msg, sizeof(debug_msg), "DMA_RDLAR=0x%08lX", ETH->DMARDLAR);
 800c88a:	4b10      	ldr	r3, [pc, #64]	@ (800c8cc <debug_eth_dma_registers+0x9c>)
 800c88c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c890:	68db      	ldr	r3, [r3, #12]
 800c892:	4638      	mov	r0, r7
 800c894:	4a12      	ldr	r2, [pc, #72]	@ (800c8e0 <debug_eth_dma_registers+0xb0>)
 800c896:	2180      	movs	r1, #128	@ 0x80
 800c898:	f011 fd0a 	bl	801e2b0 <sniprintf>
  cdc_debug_log("DMA_REG", debug_msg);
 800c89c:	463b      	mov	r3, r7
 800c89e:	4619      	mov	r1, r3
 800c8a0:	480c      	ldr	r0, [pc, #48]	@ (800c8d4 <debug_eth_dma_registers+0xa4>)
 800c8a2:	f7ff fed9 	bl	800c658 <cdc_debug_log>
  
  snprintf(debug_msg, sizeof(debug_msg), "DMA_TDLAR=0x%08lX", ETH->DMATDLAR);
 800c8a6:	4b09      	ldr	r3, [pc, #36]	@ (800c8cc <debug_eth_dma_registers+0x9c>)
 800c8a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c8ac:	691b      	ldr	r3, [r3, #16]
 800c8ae:	4638      	mov	r0, r7
 800c8b0:	4a0c      	ldr	r2, [pc, #48]	@ (800c8e4 <debug_eth_dma_registers+0xb4>)
 800c8b2:	2180      	movs	r1, #128	@ 0x80
 800c8b4:	f011 fcfc 	bl	801e2b0 <sniprintf>
  cdc_debug_log("DMA_REG", debug_msg);
 800c8b8:	463b      	mov	r3, r7
 800c8ba:	4619      	mov	r1, r3
 800c8bc:	4805      	ldr	r0, [pc, #20]	@ (800c8d4 <debug_eth_dma_registers+0xa4>)
 800c8be:	f7ff fecb 	bl	800c658 <cdc_debug_log>
}
 800c8c2:	bf00      	nop
 800c8c4:	3780      	adds	r7, #128	@ 0x80
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	bd80      	pop	{r7, pc}
 800c8ca:	bf00      	nop
 800c8cc:	40028000 	.word	0x40028000
 800c8d0:	080209ec 	.word	0x080209ec
 800c8d4:	080209fc 	.word	0x080209fc
 800c8d8:	08020a04 	.word	0x08020a04
 800c8dc:	08020a14 	.word	0x08020a14
 800c8e0:	08020a24 	.word	0x08020a24
 800c8e4:	08020a38 	.word	0x08020a38

0800c8e8 <debug_eth_config>:
/**
  * @brief  Debug ETH configuration and status
  * @retval None
  */
static void debug_eth_config(void)
{
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	b0a2      	sub	sp, #136	@ 0x88
 800c8ec:	af02      	add	r7, sp, #8
  char debug_msg[128];
  
  // MAC configuration
  snprintf(debug_msg, sizeof(debug_msg), "MAC_CR=0x%08lX", ETH->MACCR);
 800c8ee:	4b1c      	ldr	r3, [pc, #112]	@ (800c960 <debug_eth_config+0x78>)
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	4638      	mov	r0, r7
 800c8f4:	4a1b      	ldr	r2, [pc, #108]	@ (800c964 <debug_eth_config+0x7c>)
 800c8f6:	2180      	movs	r1, #128	@ 0x80
 800c8f8:	f011 fcda 	bl	801e2b0 <sniprintf>
  cdc_debug_log("ETH_CFG", debug_msg);
 800c8fc:	463b      	mov	r3, r7
 800c8fe:	4619      	mov	r1, r3
 800c900:	4819      	ldr	r0, [pc, #100]	@ (800c968 <debug_eth_config+0x80>)
 800c902:	f7ff fea9 	bl	800c658 <cdc_debug_log>
  
  snprintf(debug_msg, sizeof(debug_msg), "MAC_FCR=0x%08lX", ETH->MACFCR);
 800c906:	4b16      	ldr	r3, [pc, #88]	@ (800c960 <debug_eth_config+0x78>)
 800c908:	699b      	ldr	r3, [r3, #24]
 800c90a:	4638      	mov	r0, r7
 800c90c:	4a17      	ldr	r2, [pc, #92]	@ (800c96c <debug_eth_config+0x84>)
 800c90e:	2180      	movs	r1, #128	@ 0x80
 800c910:	f011 fcce 	bl	801e2b0 <sniprintf>
  cdc_debug_log("ETH_CFG", debug_msg);
 800c914:	463b      	mov	r3, r7
 800c916:	4619      	mov	r1, r3
 800c918:	4813      	ldr	r0, [pc, #76]	@ (800c968 <debug_eth_config+0x80>)
 800c91a:	f7ff fe9d 	bl	800c658 <cdc_debug_log>
  
  // DMA configuration  
  snprintf(debug_msg, sizeof(debug_msg), "DMA_OMR=0x%08lX", ETH->DMAOMR);
 800c91e:	4b10      	ldr	r3, [pc, #64]	@ (800c960 <debug_eth_config+0x78>)
 800c920:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c924:	699b      	ldr	r3, [r3, #24]
 800c926:	4638      	mov	r0, r7
 800c928:	4a11      	ldr	r2, [pc, #68]	@ (800c970 <debug_eth_config+0x88>)
 800c92a:	2180      	movs	r1, #128	@ 0x80
 800c92c:	f011 fcc0 	bl	801e2b0 <sniprintf>
  cdc_debug_log("ETH_CFG", debug_msg);
 800c930:	463b      	mov	r3, r7
 800c932:	4619      	mov	r1, r3
 800c934:	480c      	ldr	r0, [pc, #48]	@ (800c968 <debug_eth_config+0x80>)
 800c936:	f7ff fe8f 	bl	800c658 <cdc_debug_log>
  
  // Debug descriptor counts
  snprintf(debug_msg, sizeof(debug_msg), "RX_DESC_CNT=%d, TX_DESC_CNT=%d, RX_BUF_CNT=%d", 
 800c93a:	4638      	mov	r0, r7
 800c93c:	230c      	movs	r3, #12
 800c93e:	9301      	str	r3, [sp, #4]
 800c940:	2304      	movs	r3, #4
 800c942:	9300      	str	r3, [sp, #0]
 800c944:	2304      	movs	r3, #4
 800c946:	4a0b      	ldr	r2, [pc, #44]	@ (800c974 <debug_eth_config+0x8c>)
 800c948:	2180      	movs	r1, #128	@ 0x80
 800c94a:	f011 fcb1 	bl	801e2b0 <sniprintf>
           ETH_RX_DESC_CNT, ETH_TX_DESC_CNT, ETH_RX_BUFFER_CNT);
  cdc_debug_log("ETH_CFG", debug_msg);
 800c94e:	463b      	mov	r3, r7
 800c950:	4619      	mov	r1, r3
 800c952:	4805      	ldr	r0, [pc, #20]	@ (800c968 <debug_eth_config+0x80>)
 800c954:	f7ff fe80 	bl	800c658 <cdc_debug_log>
}
 800c958:	bf00      	nop
 800c95a:	3780      	adds	r7, #128	@ 0x80
 800c95c:	46bd      	mov	sp, r7
 800c95e:	bd80      	pop	{r7, pc}
 800c960:	40028000 	.word	0x40028000
 800c964:	08020a4c 	.word	0x08020a4c
 800c968:	08020a5c 	.word	0x08020a5c
 800c96c:	08020a64 	.word	0x08020a64
 800c970:	08020a74 	.word	0x08020a74
 800c974:	08020a84 	.word	0x08020a84

0800c978 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b082      	sub	sp, #8
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800c980:	4b04      	ldr	r3, [pc, #16]	@ (800c994 <HAL_ETH_RxCpltCallback+0x1c>)
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	4618      	mov	r0, r3
 800c986:	f003 f8b9 	bl	800fafc <osSemaphoreRelease>
}
 800c98a:	bf00      	nop
 800c98c:	3708      	adds	r7, #8
 800c98e:	46bd      	mov	sp, r7
 800c990:	bd80      	pop	{r7, pc}
 800c992:	bf00      	nop
 800c994:	20005514 	.word	0x20005514

0800c998 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800c998:	b580      	push	{r7, lr}
 800c99a:	b082      	sub	sp, #8
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 800c9a0:	4b04      	ldr	r3, [pc, #16]	@ (800c9b4 <HAL_ETH_TxCpltCallback+0x1c>)
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	f003 f8a9 	bl	800fafc <osSemaphoreRelease>
}
 800c9aa:	bf00      	nop
 800c9ac:	3708      	adds	r7, #8
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	bd80      	pop	{r7, pc}
 800c9b2:	bf00      	nop
 800c9b4:	20005518 	.word	0x20005518

0800c9b8 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b082      	sub	sp, #8
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 800c9c0:	6878      	ldr	r0, [r7, #4]
 800c9c2:	f7f9 fcd3 	bl	800636c <HAL_ETH_GetDMAError>
 800c9c6:	4603      	mov	r3, r0
 800c9c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c9cc:	2b80      	cmp	r3, #128	@ 0x80
 800c9ce:	d104      	bne.n	800c9da <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 800c9d0:	4b04      	ldr	r3, [pc, #16]	@ (800c9e4 <HAL_ETH_ErrorCallback+0x2c>)
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	f003 f891 	bl	800fafc <osSemaphoreRelease>
  }
}
 800c9da:	bf00      	nop
 800c9dc:	3708      	adds	r7, #8
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	bd80      	pop	{r7, pc}
 800c9e2:	bf00      	nop
 800c9e4:	20005514 	.word	0x20005514

0800c9e8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800c9e8:	b5b0      	push	{r4, r5, r7, lr}
 800c9ea:	b0ce      	sub	sp, #312	@ 0x138
 800c9ec:	af02      	add	r7, sp, #8
 800c9ee:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c9f2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800c9f6:	6018      	str	r0, [r3, #0]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  ETH_MACConfigTypeDef macConfig;
/* USER CODE END low_level_init Variables Initialization for User BSP */
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800c9fe:	4bba      	ldr	r3, [pc, #744]	@ (800cce8 <low_level_init+0x300>)
 800ca00:	4aba      	ldr	r2, [pc, #744]	@ (800ccec <low_level_init+0x304>)
 800ca02:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800ca04:	2300      	movs	r3, #0
 800ca06:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
  MACAddr[1] = 0x80;
 800ca0a:	2380      	movs	r3, #128	@ 0x80
 800ca0c:	f887 30b5 	strb.w	r3, [r7, #181]	@ 0xb5
  MACAddr[2] = 0xE1;
 800ca10:	23e1      	movs	r3, #225	@ 0xe1
 800ca12:	f887 30b6 	strb.w	r3, [r7, #182]	@ 0xb6
  MACAddr[3] = 0x00;
 800ca16:	2300      	movs	r3, #0
 800ca18:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
  MACAddr[4] = 0x00;
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	f887 30b8 	strb.w	r3, [r7, #184]	@ 0xb8
  MACAddr[5] = 0x00;
 800ca22:	2300      	movs	r3, #0
 800ca24:	f887 30b9 	strb.w	r3, [r7, #185]	@ 0xb9
  heth.Init.MACAddr = &MACAddr[0];
 800ca28:	4aaf      	ldr	r2, [pc, #700]	@ (800cce8 <low_level_init+0x300>)
 800ca2a:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800ca2e:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800ca30:	4bad      	ldr	r3, [pc, #692]	@ (800cce8 <low_level_init+0x300>)
 800ca32:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800ca36:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800ca38:	4bab      	ldr	r3, [pc, #684]	@ (800cce8 <low_level_init+0x300>)
 800ca3a:	4aad      	ldr	r2, [pc, #692]	@ (800ccf0 <low_level_init+0x308>)
 800ca3c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800ca3e:	4baa      	ldr	r3, [pc, #680]	@ (800cce8 <low_level_init+0x300>)
 800ca40:	4aac      	ldr	r2, [pc, #688]	@ (800ccf4 <low_level_init+0x30c>)
 800ca42:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800ca44:	4ba8      	ldr	r3, [pc, #672]	@ (800cce8 <low_level_init+0x300>)
 800ca46:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800ca4a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800ca4c:	48a6      	ldr	r0, [pc, #664]	@ (800cce8 <low_level_init+0x300>)
 800ca4e:	f7f8 fe87 	bl	8005760 <HAL_ETH_Init>
 800ca52:	4603      	mov	r3, r0
 800ca54:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800ca58:	2238      	movs	r2, #56	@ 0x38
 800ca5a:	2100      	movs	r1, #0
 800ca5c:	48a6      	ldr	r0, [pc, #664]	@ (800ccf8 <low_level_init+0x310>)
 800ca5e:	f011 fcca 	bl	801e3f6 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800ca62:	4ba5      	ldr	r3, [pc, #660]	@ (800ccf8 <low_level_init+0x310>)
 800ca64:	2221      	movs	r2, #33	@ 0x21
 800ca66:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800ca68:	4ba3      	ldr	r3, [pc, #652]	@ (800ccf8 <low_level_init+0x310>)
 800ca6a:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800ca6e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800ca70:	4ba1      	ldr	r3, [pc, #644]	@ (800ccf8 <low_level_init+0x310>)
 800ca72:	2200      	movs	r2, #0
 800ca74:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800ca76:	48a1      	ldr	r0, [pc, #644]	@ (800ccfc <low_level_init+0x314>)
 800ca78:	f006 fbca 	bl	8013210 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800ca7c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ca80:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	2206      	movs	r2, #6
 800ca88:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800ca8c:	4b96      	ldr	r3, [pc, #600]	@ (800cce8 <low_level_init+0x300>)
 800ca8e:	685b      	ldr	r3, [r3, #4]
 800ca90:	781a      	ldrb	r2, [r3, #0]
 800ca92:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ca96:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800caa0:	4b91      	ldr	r3, [pc, #580]	@ (800cce8 <low_level_init+0x300>)
 800caa2:	685b      	ldr	r3, [r3, #4]
 800caa4:	785a      	ldrb	r2, [r3, #1]
 800caa6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800caaa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800cab4:	4b8c      	ldr	r3, [pc, #560]	@ (800cce8 <low_level_init+0x300>)
 800cab6:	685b      	ldr	r3, [r3, #4]
 800cab8:	789a      	ldrb	r2, [r3, #2]
 800caba:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cabe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800cac8:	4b87      	ldr	r3, [pc, #540]	@ (800cce8 <low_level_init+0x300>)
 800caca:	685b      	ldr	r3, [r3, #4]
 800cacc:	78da      	ldrb	r2, [r3, #3]
 800cace:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cad2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800cadc:	4b82      	ldr	r3, [pc, #520]	@ (800cce8 <low_level_init+0x300>)
 800cade:	685b      	ldr	r3, [r3, #4]
 800cae0:	791a      	ldrb	r2, [r3, #4]
 800cae2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cae6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800caf0:	4b7d      	ldr	r3, [pc, #500]	@ (800cce8 <low_level_init+0x300>)
 800caf2:	685b      	ldr	r3, [r3, #4]
 800caf4:	795a      	ldrb	r2, [r3, #5]
 800caf6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cafa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800cb04:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cb08:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800cb12:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800cb14:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cb18:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800cb22:	f043 030a 	orr.w	r3, r3, #10
 800cb26:	b2da      	uxtb	r2, r3
 800cb28:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cb2c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(RxSem);
 800cb36:	2300      	movs	r3, #0
 800cb38:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(RxSem), 1);
 800cb42:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800cb46:	2101      	movs	r1, #1
 800cb48:	4618      	mov	r0, r3
 800cb4a:	f002 ff57 	bl	800f9fc <osSemaphoreCreate>
 800cb4e:	4603      	mov	r3, r0
 800cb50:	4a6b      	ldr	r2, [pc, #428]	@ (800cd00 <low_level_init+0x318>)
 800cb52:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  osSemaphoreDef(TxSem);
 800cb54:	2300      	movs	r3, #0
 800cb56:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  TxPktSemaphore = osSemaphoreCreate(osSemaphore(TxSem), 1);
 800cb60:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800cb64:	2101      	movs	r1, #1
 800cb66:	4618      	mov	r0, r3
 800cb68:	f002 ff48 	bl	800f9fc <osSemaphoreCreate>
 800cb6c:	4603      	mov	r3, r0
 800cb6e:	4a65      	ldr	r2, [pc, #404]	@ (800cd04 <low_level_init+0x31c>)
 800cb70:	6013      	str	r3, [r2, #0]

  /* Decrease the semaphore's initial count from 1 to 0 */
  osSemaphoreWait(RxPktSemaphore, 0);
 800cb72:	4b63      	ldr	r3, [pc, #396]	@ (800cd00 <low_level_init+0x318>)
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	2100      	movs	r1, #0
 800cb78:	4618      	mov	r0, r3
 800cb7a:	f002 ff71 	bl	800fa60 <osSemaphoreWait>
  osSemaphoreWait(TxPktSemaphore, 0);
 800cb7e:	4b61      	ldr	r3, [pc, #388]	@ (800cd04 <low_level_init+0x31c>)
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	2100      	movs	r1, #0
 800cb84:	4618      	mov	r0, r3
 800cb86:	f002 ff6b 	bl	800fa60 <osSemaphoreWait>

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800cb8a:	4b5f      	ldr	r3, [pc, #380]	@ (800cd08 <low_level_init+0x320>)
 800cb8c:	f107 0488 	add.w	r4, r7, #136	@ 0x88
 800cb90:	461d      	mov	r5, r3
 800cb92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cb94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cb96:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800cb9a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800cb9e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cba2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800cba6:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 800cbaa:	6819      	ldr	r1, [r3, #0]
 800cbac:	4610      	mov	r0, r2
 800cbae:	f002 fe29 	bl	800f804 <osThreadCreate>

/* USER CODE BEGIN low_level_init Code 1 for User BSP */

/* USER CODE END low_level_init Code 1 for User BSP */

  if (hal_eth_init_status == HAL_OK)
 800cbb2:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	f040 8158 	bne.w	800ce6c <low_level_init+0x484>
  {
/* USER CODE BEGIN low_level_init Code 2 for User BSP */
    cdc_debug_log("PHY_INIT", "Starting PHY chip initialization");
 800cbbc:	4953      	ldr	r1, [pc, #332]	@ (800cd0c <low_level_init+0x324>)
 800cbbe:	4854      	ldr	r0, [pc, #336]	@ (800cd10 <low_level_init+0x328>)
 800cbc0:	f7ff fd4a 	bl	800c658 <cdc_debug_log>
    
    /* Set up PHY chip IO context */
    PHYchip_io_ctx.init = PHY_IO_Init;
 800cbc4:	4b53      	ldr	r3, [pc, #332]	@ (800cd14 <low_level_init+0x32c>)
 800cbc6:	4a54      	ldr	r2, [pc, #336]	@ (800cd18 <low_level_init+0x330>)
 800cbc8:	601a      	str	r2, [r3, #0]
    PHYchip_io_ctx.deinit = PHY_IO_DeInit;
 800cbca:	4b52      	ldr	r3, [pc, #328]	@ (800cd14 <low_level_init+0x32c>)
 800cbcc:	4a53      	ldr	r2, [pc, #332]	@ (800cd1c <low_level_init+0x334>)
 800cbce:	605a      	str	r2, [r3, #4]
    PHYchip_io_ctx.readreg = PHY_IO_ReadReg;
 800cbd0:	4b50      	ldr	r3, [pc, #320]	@ (800cd14 <low_level_init+0x32c>)
 800cbd2:	4a53      	ldr	r2, [pc, #332]	@ (800cd20 <low_level_init+0x338>)
 800cbd4:	60da      	str	r2, [r3, #12]
    PHYchip_io_ctx.writereg = PHY_IO_WriteReg;
 800cbd6:	4b4f      	ldr	r3, [pc, #316]	@ (800cd14 <low_level_init+0x32c>)
 800cbd8:	4a52      	ldr	r2, [pc, #328]	@ (800cd24 <low_level_init+0x33c>)
 800cbda:	609a      	str	r2, [r3, #8]
    PHYchip_io_ctx.gettick = PHY_IO_GetTick;
 800cbdc:	4b4d      	ldr	r3, [pc, #308]	@ (800cd14 <low_level_init+0x32c>)
 800cbde:	4a52      	ldr	r2, [pc, #328]	@ (800cd28 <low_level_init+0x340>)
 800cbe0:	611a      	str	r2, [r3, #16]

    /* Register PHY chip IO functions */
    if (eth_chip_regster_bus_io(&PHYchip, &PHYchip_io_ctx) != ETH_CHIP_STATUS_OK)
 800cbe2:	494c      	ldr	r1, [pc, #304]	@ (800cd14 <low_level_init+0x32c>)
 800cbe4:	4851      	ldr	r0, [pc, #324]	@ (800cd2c <low_level_init+0x344>)
 800cbe6:	f7f7 fe98 	bl	800491a <eth_chip_regster_bus_io>
 800cbea:	4603      	mov	r3, r0
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d005      	beq.n	800cbfc <low_level_init+0x214>
    {
      cdc_debug_log("PHY_INIT", "Failed to register PHY IO functions");
 800cbf0:	494f      	ldr	r1, [pc, #316]	@ (800cd30 <low_level_init+0x348>)
 800cbf2:	4847      	ldr	r0, [pc, #284]	@ (800cd10 <low_level_init+0x328>)
 800cbf4:	f7ff fd30 	bl	800c658 <cdc_debug_log>
      Error_Handler();
 800cbf8:	f7f5 fa9e 	bl	8002138 <Error_Handler>
    }
    cdc_debug_log("PHY_INIT", "PHY IO functions registered successfully");
 800cbfc:	494d      	ldr	r1, [pc, #308]	@ (800cd34 <low_level_init+0x34c>)
 800cbfe:	4844      	ldr	r0, [pc, #272]	@ (800cd10 <low_level_init+0x328>)
 800cc00:	f7ff fd2a 	bl	800c658 <cdc_debug_log>

    /* Initialize PHY chip */
    if (eth_chip_init(&PHYchip) != ETH_CHIP_STATUS_OK)
 800cc04:	4849      	ldr	r0, [pc, #292]	@ (800cd2c <low_level_init+0x344>)
 800cc06:	f7f7 febb 	bl	8004980 <eth_chip_init>
 800cc0a:	4603      	mov	r3, r0
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d005      	beq.n	800cc1c <low_level_init+0x234>
    {
      cdc_debug_log("PHY_INIT", "PHY chip initialization failed");
 800cc10:	4949      	ldr	r1, [pc, #292]	@ (800cd38 <low_level_init+0x350>)
 800cc12:	483f      	ldr	r0, [pc, #252]	@ (800cd10 <low_level_init+0x328>)
 800cc14:	f7ff fd20 	bl	800c658 <cdc_debug_log>
      Error_Handler();
 800cc18:	f7f5 fa8e 	bl	8002138 <Error_Handler>
    }
    
    char phy_addr_msg[64];
    snprintf(phy_addr_msg, sizeof(phy_addr_msg), "PHY chip initialized, address: %lu", PHYchip.devaddr);
 800cc1c:	4b43      	ldr	r3, [pc, #268]	@ (800cd2c <low_level_init+0x344>)
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	f107 0008 	add.w	r0, r7, #8
 800cc24:	4a45      	ldr	r2, [pc, #276]	@ (800cd3c <low_level_init+0x354>)
 800cc26:	2140      	movs	r1, #64	@ 0x40
 800cc28:	f011 fb42 	bl	801e2b0 <sniprintf>
    cdc_debug_log("PHY_INIT", phy_addr_msg);
 800cc2c:	f107 0308 	add.w	r3, r7, #8
 800cc30:	4619      	mov	r1, r3
 800cc32:	4837      	ldr	r0, [pc, #220]	@ (800cd10 <low_level_init+0x328>)
 800cc34:	f7ff fd10 	bl	800c658 <cdc_debug_log>

    /* Disable PHY power down mode */
    if (eth_chip_disable_power_down_mode(&PHYchip) != ETH_CHIP_STATUS_OK)
 800cc38:	483c      	ldr	r0, [pc, #240]	@ (800cd2c <low_level_init+0x344>)
 800cc3a:	f7f7 ffa7 	bl	8004b8c <eth_chip_disable_power_down_mode>
 800cc3e:	4603      	mov	r3, r0
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d005      	beq.n	800cc50 <low_level_init+0x268>
    {
      cdc_debug_log("PHY_INIT", "Failed to disable PHY power down mode");
 800cc44:	493e      	ldr	r1, [pc, #248]	@ (800cd40 <low_level_init+0x358>)
 800cc46:	4832      	ldr	r0, [pc, #200]	@ (800cd10 <low_level_init+0x328>)
 800cc48:	f7ff fd06 	bl	800c658 <cdc_debug_log>
      Error_Handler();
 800cc4c:	f7f5 fa74 	bl	8002138 <Error_Handler>
    }
    cdc_debug_log("PHY_INIT", "PHY power down mode disabled");
 800cc50:	493c      	ldr	r1, [pc, #240]	@ (800cd44 <low_level_init+0x35c>)
 800cc52:	482f      	ldr	r0, [pc, #188]	@ (800cd10 <low_level_init+0x328>)
 800cc54:	f7ff fd00 	bl	800c658 <cdc_debug_log>

    /* 启动自动协商 */
    if (eth_chip_start_auto_nego(&PHYchip) != ETH_CHIP_STATUS_OK)
 800cc58:	4834      	ldr	r0, [pc, #208]	@ (800cd2c <low_level_init+0x344>)
 800cc5a:	f7f7 ffc4 	bl	8004be6 <eth_chip_start_auto_nego>
 800cc5e:	4603      	mov	r3, r0
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d005      	beq.n	800cc70 <low_level_init+0x288>
    {
      cdc_debug_log("PHY_INIT", "Failed to start auto-negotiation");
 800cc64:	4938      	ldr	r1, [pc, #224]	@ (800cd48 <low_level_init+0x360>)
 800cc66:	482a      	ldr	r0, [pc, #168]	@ (800cd10 <low_level_init+0x328>)
 800cc68:	f7ff fcf6 	bl	800c658 <cdc_debug_log>
      Error_Handler();
 800cc6c:	f7f5 fa64 	bl	8002138 <Error_Handler>
    }
    cdc_debug_log("PHY_INIT", "Auto-negotiation started successfully");
 800cc70:	4936      	ldr	r1, [pc, #216]	@ (800cd4c <low_level_init+0x364>)
 800cc72:	4827      	ldr	r0, [pc, #156]	@ (800cd10 <low_level_init+0x328>)
 800cc74:	f7ff fcf0 	bl	800c658 <cdc_debug_log>

    /* 等待自动协商完成 */
    uint32_t autoneg_timeout = 0;
 800cc78:	2300      	movs	r3, #0
 800cc7a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    int32_t nego_state;
    do {
      HAL_Delay(100);
 800cc7e:	2064      	movs	r0, #100	@ 0x64
 800cc80:	f7f8 f866 	bl	8004d50 <HAL_Delay>
      nego_state = eth_chip_get_link_state(&PHYchip);
 800cc84:	4829      	ldr	r0, [pc, #164]	@ (800cd2c <low_level_init+0x344>)
 800cc86:	f7f7 ffdb 	bl	8004c40 <eth_chip_get_link_state>
 800cc8a:	f8c7 0124 	str.w	r0, [r7, #292]	@ 0x124
      autoneg_timeout++;
 800cc8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cc92:	3301      	adds	r3, #1
 800cc94:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
      
      if (autoneg_timeout % 10 == 0) {
 800cc98:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 800cc9c:	4b2c      	ldr	r3, [pc, #176]	@ (800cd50 <low_level_init+0x368>)
 800cc9e:	fba3 2301 	umull	r2, r3, r3, r1
 800cca2:	08da      	lsrs	r2, r3, #3
 800cca4:	4613      	mov	r3, r2
 800cca6:	009b      	lsls	r3, r3, #2
 800cca8:	4413      	add	r3, r2
 800ccaa:	005b      	lsls	r3, r3, #1
 800ccac:	1aca      	subs	r2, r1, r3
 800ccae:	2a00      	cmp	r2, #0
 800ccb0:	d110      	bne.n	800ccd4 <low_level_init+0x2ec>
        char timeout_msg[64];
        snprintf(timeout_msg, sizeof(timeout_msg), "Auto-nego timeout: %lu, state: %ld", autoneg_timeout, nego_state);
 800ccb2:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 800ccb6:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800ccba:	9300      	str	r3, [sp, #0]
 800ccbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ccc0:	4a24      	ldr	r2, [pc, #144]	@ (800cd54 <low_level_init+0x36c>)
 800ccc2:	2140      	movs	r1, #64	@ 0x40
 800ccc4:	f011 faf4 	bl	801e2b0 <sniprintf>
        cdc_debug_log("PHY_INIT", timeout_msg);
 800ccc8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800cccc:	4619      	mov	r1, r3
 800ccce:	4810      	ldr	r0, [pc, #64]	@ (800cd10 <low_level_init+0x328>)
 800ccd0:	f7ff fcc2 	bl	800c658 <cdc_debug_log>
      }
      
      /* 超时保护 */
      if (autoneg_timeout > 50) { // 5秒超时
 800ccd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ccd8:	2b32      	cmp	r3, #50	@ 0x32
 800ccda:	d93f      	bls.n	800cd5c <low_level_init+0x374>
        cdc_debug_log("PHY_INIT", "Auto-negotiation timeout, using current state");
 800ccdc:	491e      	ldr	r1, [pc, #120]	@ (800cd58 <low_level_init+0x370>)
 800ccde:	480c      	ldr	r0, [pc, #48]	@ (800cd10 <low_level_init+0x328>)
 800cce0:	f7ff fcba 	bl	800c658 <cdc_debug_log>
        break;
 800cce4:	e043      	b.n	800cd6e <low_level_init+0x386>
 800cce6:	bf00      	nop
 800cce8:	2000551c 	.word	0x2000551c
 800ccec:	40028000 	.word	0x40028000
 800ccf0:	20005440 	.word	0x20005440
 800ccf4:	200053a0 	.word	0x200053a0
 800ccf8:	200055cc 	.word	0x200055cc
 800ccfc:	08023dd4 	.word	0x08023dd4
 800cd00:	20005514 	.word	0x20005514
 800cd04:	20005518 	.word	0x20005518
 800cd08:	08020db4 	.word	0x08020db4
 800cd0c:	08020ab4 	.word	0x08020ab4
 800cd10:	08020ad8 	.word	0x08020ad8
 800cd14:	20005500 	.word	0x20005500
 800cd18:	0800d141 	.word	0x0800d141
 800cd1c:	0800d16d 	.word	0x0800d16d
 800cd20:	0800d195 	.word	0x0800d195
 800cd24:	0800d1ed 	.word	0x0800d1ed
 800cd28:	0800d249 	.word	0x0800d249
 800cd2c:	200054e0 	.word	0x200054e0
 800cd30:	08020ae4 	.word	0x08020ae4
 800cd34:	08020b08 	.word	0x08020b08
 800cd38:	08020b34 	.word	0x08020b34
 800cd3c:	08020b54 	.word	0x08020b54
 800cd40:	08020b78 	.word	0x08020b78
 800cd44:	08020ba0 	.word	0x08020ba0
 800cd48:	08020bc0 	.word	0x08020bc0
 800cd4c:	08020be4 	.word	0x08020be4
 800cd50:	cccccccd 	.word	0xcccccccd
 800cd54:	08020c0c 	.word	0x08020c0c
 800cd58:	08020c30 	.word	0x08020c30
      }
    } while (nego_state == ETH_CHIP_STATUS_AUTONEGO_NOTDONE || nego_state == ETH_CHIP_STATUS_READ_ERROR);
 800cd5c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800cd60:	2b06      	cmp	r3, #6
 800cd62:	d08c      	beq.n	800cc7e <low_level_init+0x296>
 800cd64:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800cd68:	f113 0f05 	cmn.w	r3, #5
 800cd6c:	d087      	beq.n	800cc7e <low_level_init+0x296>

    /* Get PHY link state and configure ETH accordingly */
    phy_link_state = eth_chip_get_link_state(&PHYchip);
 800cd6e:	4843      	ldr	r0, [pc, #268]	@ (800ce7c <low_level_init+0x494>)
 800cd70:	f7f7 ff66 	bl	8004c40 <eth_chip_get_link_state>
 800cd74:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120
    
    char link_msg[64];
    snprintf(link_msg, sizeof(link_msg), "Initial PHY link state: %ld", phy_link_state);
 800cd78:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 800cd7c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800cd80:	4a3f      	ldr	r2, [pc, #252]	@ (800ce80 <low_level_init+0x498>)
 800cd82:	2140      	movs	r1, #64	@ 0x40
 800cd84:	f011 fa94 	bl	801e2b0 <sniprintf>
    cdc_debug_log("PHY_INIT", link_msg);
 800cd88:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800cd8c:	4619      	mov	r1, r3
 800cd8e:	483d      	ldr	r0, [pc, #244]	@ (800ce84 <low_level_init+0x49c>)
 800cd90:	f7ff fc62 	bl	800c658 <cdc_debug_log>
    
    if (phy_link_state != ETH_CHIP_STATUS_READ_ERROR)
 800cd94:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800cd98:	f113 0f05 	cmn.w	r3, #5
 800cd9c:	d053      	beq.n	800ce46 <low_level_init+0x45e>
    {
      /* Get current MAC configuration */
      HAL_ETH_GetMACConfig(&heth, &macConfig);
 800cd9e:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 800cda2:	4619      	mov	r1, r3
 800cda4:	4838      	ldr	r0, [pc, #224]	@ (800ce88 <low_level_init+0x4a0>)
 800cda6:	f7f9 f9c3 	bl	8006130 <HAL_ETH_GetMACConfig>
      
      switch (phy_link_state)
 800cdaa:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800cdae:	3b02      	subs	r3, #2
 800cdb0:	2b03      	cmp	r3, #3
 800cdb2:	d83b      	bhi.n	800ce2c <low_level_init+0x444>
 800cdb4:	a201      	add	r2, pc, #4	@ (adr r2, 800cdbc <low_level_init+0x3d4>)
 800cdb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdba:	bf00      	nop
 800cdbc:	0800cdcd 	.word	0x0800cdcd
 800cdc0:	0800cde7 	.word	0x0800cde7
 800cdc4:	0800cdff 	.word	0x0800cdff
 800cdc8:	0800ce17 	.word	0x0800ce17
      {
        case ETH_CHIP_STATUS_100MBITS_FULLDUPLEX:
          macConfig.DuplexMode = ETH_FULLDUPLEX_MODE;
 800cdcc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800cdd0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
          macConfig.Speed = ETH_SPEED_100M;
 800cdd4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800cdd8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          cdc_debug_log("PHY_INIT", "Configured: 100M Full Duplex");
 800cddc:	492b      	ldr	r1, [pc, #172]	@ (800ce8c <low_level_init+0x4a4>)
 800cdde:	4829      	ldr	r0, [pc, #164]	@ (800ce84 <low_level_init+0x49c>)
 800cde0:	f7ff fc3a 	bl	800c658 <cdc_debug_log>
          break;
 800cde4:	e02f      	b.n	800ce46 <low_level_init+0x45e>
        case ETH_CHIP_STATUS_100MBITS_HALFDUPLEX:
          macConfig.DuplexMode = ETH_HALFDUPLEX_MODE;
 800cde6:	2300      	movs	r3, #0
 800cde8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
          macConfig.Speed = ETH_SPEED_100M;
 800cdec:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800cdf0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          cdc_debug_log("PHY_INIT", "Configured: 100M Half Duplex");
 800cdf4:	4926      	ldr	r1, [pc, #152]	@ (800ce90 <low_level_init+0x4a8>)
 800cdf6:	4823      	ldr	r0, [pc, #140]	@ (800ce84 <low_level_init+0x49c>)
 800cdf8:	f7ff fc2e 	bl	800c658 <cdc_debug_log>
          break;
 800cdfc:	e023      	b.n	800ce46 <low_level_init+0x45e>
        case ETH_CHIP_STATUS_10MBITS_FULLDUPLEX:
          macConfig.DuplexMode = ETH_FULLDUPLEX_MODE;
 800cdfe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ce02:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
          macConfig.Speed = ETH_SPEED_10M;
 800ce06:	2300      	movs	r3, #0
 800ce08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          cdc_debug_log("PHY_INIT", "Configured: 10M Full Duplex");
 800ce0c:	4921      	ldr	r1, [pc, #132]	@ (800ce94 <low_level_init+0x4ac>)
 800ce0e:	481d      	ldr	r0, [pc, #116]	@ (800ce84 <low_level_init+0x49c>)
 800ce10:	f7ff fc22 	bl	800c658 <cdc_debug_log>
          break;
 800ce14:	e017      	b.n	800ce46 <low_level_init+0x45e>
        case ETH_CHIP_STATUS_10MBITS_HALFDUPLEX:
          macConfig.DuplexMode = ETH_HALFDUPLEX_MODE;
 800ce16:	2300      	movs	r3, #0
 800ce18:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
          macConfig.Speed = ETH_SPEED_10M;
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          cdc_debug_log("PHY_INIT", "Configured: 10M Half Duplex");
 800ce22:	491d      	ldr	r1, [pc, #116]	@ (800ce98 <low_level_init+0x4b0>)
 800ce24:	4817      	ldr	r0, [pc, #92]	@ (800ce84 <low_level_init+0x49c>)
 800ce26:	f7ff fc17 	bl	800c658 <cdc_debug_log>
          break;
 800ce2a:	e00c      	b.n	800ce46 <low_level_init+0x45e>
        default:
          macConfig.DuplexMode = ETH_FULLDUPLEX_MODE;
 800ce2c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ce30:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
          macConfig.Speed = ETH_SPEED_100M;
 800ce34:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800ce38:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          cdc_debug_log("PHY_INIT", "Default: 100M Full Duplex");
 800ce3c:	4917      	ldr	r1, [pc, #92]	@ (800ce9c <low_level_init+0x4b4>)
 800ce3e:	4811      	ldr	r0, [pc, #68]	@ (800ce84 <low_level_init+0x49c>)
 800ce40:	f7ff fc0a 	bl	800c658 <cdc_debug_log>
          break;
 800ce44:	bf00      	nop

    }

    /* 重要：在启动ETH中断之前，不要调用HAL_ETH_Start_IT！
     * 信号量必须先创建，否则会在中断回调中造成HardFault */
    cdc_debug_log("PHY_INIT", "PHY configuration completed, deferring ETH start until after semaphore creation");
 800ce46:	4916      	ldr	r1, [pc, #88]	@ (800cea0 <low_level_init+0x4b8>)
 800ce48:	480e      	ldr	r0, [pc, #56]	@ (800ce84 <low_level_init+0x49c>)
 800ce4a:	f7ff fc05 	bl	800c658 <cdc_debug_log>
    
    /* Debug ETH configuration after initialization */
    cdc_debug_log("ETH_INIT", "=== ETH Initialization Debug ===");
 800ce4e:	4915      	ldr	r1, [pc, #84]	@ (800cea4 <low_level_init+0x4bc>)
 800ce50:	4815      	ldr	r0, [pc, #84]	@ (800cea8 <low_level_init+0x4c0>)
 800ce52:	f7ff fc01 	bl	800c658 <cdc_debug_log>
    debug_eth_config();
 800ce56:	f7ff fd47 	bl	800c8e8 <debug_eth_config>
    debug_eth_dma_registers();
 800ce5a:	f7ff fce9 	bl	800c830 <debug_eth_dma_registers>
    debug_eth_dma_descriptors();
 800ce5e:	f7ff fc1b 	bl	800c698 <debug_eth_dma_descriptors>
    cdc_debug_log("ETH_INIT", "=== ETH Debug Complete ===");
 800ce62:	4912      	ldr	r1, [pc, #72]	@ (800ceac <low_level_init+0x4c4>)
 800ce64:	4810      	ldr	r0, [pc, #64]	@ (800cea8 <low_level_init+0x4c0>)
 800ce66:	f7ff fbf7 	bl	800c658 <cdc_debug_log>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800ce6a:	e001      	b.n	800ce70 <low_level_init+0x488>
    Error_Handler();
 800ce6c:	f7f5 f964 	bl	8002138 <Error_Handler>
}
 800ce70:	bf00      	nop
 800ce72:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800ce76:	46bd      	mov	sp, r7
 800ce78:	bdb0      	pop	{r4, r5, r7, pc}
 800ce7a:	bf00      	nop
 800ce7c:	200054e0 	.word	0x200054e0
 800ce80:	08020c60 	.word	0x08020c60
 800ce84:	08020ad8 	.word	0x08020ad8
 800ce88:	2000551c 	.word	0x2000551c
 800ce8c:	08020c7c 	.word	0x08020c7c
 800ce90:	08020c9c 	.word	0x08020c9c
 800ce94:	08020cbc 	.word	0x08020cbc
 800ce98:	08020cd8 	.word	0x08020cd8
 800ce9c:	08020cf4 	.word	0x08020cf4
 800cea0:	08020d10 	.word	0x08020d10
 800cea4:	08020d60 	.word	0x08020d60
 800cea8:	08020d84 	.word	0x08020d84
 800ceac:	08020d90 	.word	0x08020d90

0800ceb0 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b092      	sub	sp, #72	@ 0x48
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	6078      	str	r0, [r7, #4]
 800ceb8:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800ceba:	2300      	movs	r3, #0
 800cebc:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800cebe:	2300      	movs	r3, #0
 800cec0:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800cec2:	2300      	movs	r3, #0
 800cec4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800cec8:	f107 030c 	add.w	r3, r7, #12
 800cecc:	2230      	movs	r2, #48	@ 0x30
 800cece:	2100      	movs	r1, #0
 800ced0:	4618      	mov	r0, r3
 800ced2:	f011 fa90 	bl	801e3f6 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800ced6:	f107 030c 	add.w	r3, r7, #12
 800ceda:	2230      	movs	r2, #48	@ 0x30
 800cedc:	2100      	movs	r1, #0
 800cede:	4618      	mov	r0, r3
 800cee0:	f011 fa89 	bl	801e3f6 <memset>

  for(q = p; q != NULL; q = q->next)
 800cee4:	683b      	ldr	r3, [r7, #0]
 800cee6:	643b      	str	r3, [r7, #64]	@ 0x40
 800cee8:	e045      	b.n	800cf76 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800ceea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ceec:	2b03      	cmp	r3, #3
 800ceee:	d902      	bls.n	800cef6 <low_level_output+0x46>
      return ERR_IF;
 800cef0:	f06f 030b 	mvn.w	r3, #11
 800cef4:	e07f      	b.n	800cff6 <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 800cef6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cef8:	6859      	ldr	r1, [r3, #4]
 800cefa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cefc:	4613      	mov	r3, r2
 800cefe:	005b      	lsls	r3, r3, #1
 800cf00:	4413      	add	r3, r2
 800cf02:	009b      	lsls	r3, r3, #2
 800cf04:	3348      	adds	r3, #72	@ 0x48
 800cf06:	443b      	add	r3, r7
 800cf08:	3b3c      	subs	r3, #60	@ 0x3c
 800cf0a:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800cf0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cf0e:	895b      	ldrh	r3, [r3, #10]
 800cf10:	4619      	mov	r1, r3
 800cf12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cf14:	4613      	mov	r3, r2
 800cf16:	005b      	lsls	r3, r3, #1
 800cf18:	4413      	add	r3, r2
 800cf1a:	009b      	lsls	r3, r3, #2
 800cf1c:	3348      	adds	r3, #72	@ 0x48
 800cf1e:	443b      	add	r3, r7
 800cf20:	3b38      	subs	r3, #56	@ 0x38
 800cf22:	6019      	str	r1, [r3, #0]

    if(i>0)
 800cf24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d011      	beq.n	800cf4e <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800cf2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cf2c:	1e5a      	subs	r2, r3, #1
 800cf2e:	f107 000c 	add.w	r0, r7, #12
 800cf32:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800cf34:	460b      	mov	r3, r1
 800cf36:	005b      	lsls	r3, r3, #1
 800cf38:	440b      	add	r3, r1
 800cf3a:	009b      	lsls	r3, r3, #2
 800cf3c:	18c1      	adds	r1, r0, r3
 800cf3e:	4613      	mov	r3, r2
 800cf40:	005b      	lsls	r3, r3, #1
 800cf42:	4413      	add	r3, r2
 800cf44:	009b      	lsls	r3, r3, #2
 800cf46:	3348      	adds	r3, #72	@ 0x48
 800cf48:	443b      	add	r3, r7
 800cf4a:	3b34      	subs	r3, #52	@ 0x34
 800cf4c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800cf4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d109      	bne.n	800cf6a <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800cf56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cf58:	4613      	mov	r3, r2
 800cf5a:	005b      	lsls	r3, r3, #1
 800cf5c:	4413      	add	r3, r2
 800cf5e:	009b      	lsls	r3, r3, #2
 800cf60:	3348      	adds	r3, #72	@ 0x48
 800cf62:	443b      	add	r3, r7
 800cf64:	3b34      	subs	r3, #52	@ 0x34
 800cf66:	2200      	movs	r2, #0
 800cf68:	601a      	str	r2, [r3, #0]
    }

    i++;
 800cf6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cf6c:	3301      	adds	r3, #1
 800cf6e:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 800cf70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	643b      	str	r3, [r7, #64]	@ 0x40
 800cf76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d1b6      	bne.n	800ceea <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800cf7c:	683b      	ldr	r3, [r7, #0]
 800cf7e:	891b      	ldrh	r3, [r3, #8]
 800cf80:	461a      	mov	r2, r3
 800cf82:	4b1f      	ldr	r3, [pc, #124]	@ (800d000 <low_level_output+0x150>)
 800cf84:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800cf86:	4a1e      	ldr	r2, [pc, #120]	@ (800d000 <low_level_output+0x150>)
 800cf88:	f107 030c 	add.w	r3, r7, #12
 800cf8c:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800cf8e:	4a1c      	ldr	r2, [pc, #112]	@ (800d000 <low_level_output+0x150>)
 800cf90:	683b      	ldr	r3, [r7, #0]
 800cf92:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 800cf94:	6838      	ldr	r0, [r7, #0]
 800cf96:	f007 f967 	bl	8014268 <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 800cf9a:	4919      	ldr	r1, [pc, #100]	@ (800d000 <low_level_output+0x150>)
 800cf9c:	4819      	ldr	r0, [pc, #100]	@ (800d004 <low_level_output+0x154>)
 800cf9e:	f7f8 fd6a 	bl	8005a76 <HAL_ETH_Transmit_IT>
 800cfa2:	4603      	mov	r3, r0
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d103      	bne.n	800cfb0 <low_level_output+0x100>
    {
      errval = ERR_OK;
 800cfa8:	2300      	movs	r3, #0
 800cfaa:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800cfae:	e01b      	b.n	800cfe8 <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 800cfb0:	4814      	ldr	r0, [pc, #80]	@ (800d004 <low_level_output+0x154>)
 800cfb2:	f7f9 f9ce 	bl	8006352 <HAL_ETH_GetError>
 800cfb6:	4603      	mov	r3, r0
 800cfb8:	f003 0302 	and.w	r3, r3, #2
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d00d      	beq.n	800cfdc <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreWait(TxPktSemaphore, ETHIF_TX_TIMEOUT);
 800cfc0:	4b11      	ldr	r3, [pc, #68]	@ (800d008 <low_level_output+0x158>)
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800cfc8:	4618      	mov	r0, r3
 800cfca:	f002 fd49 	bl	800fa60 <osSemaphoreWait>
        HAL_ETH_ReleaseTxPacket(&heth);
 800cfce:	480d      	ldr	r0, [pc, #52]	@ (800d004 <low_level_output+0x154>)
 800cfd0:	f7f8 fef0 	bl	8005db4 <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 800cfd4:	23fe      	movs	r3, #254	@ 0xfe
 800cfd6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800cfda:	e005      	b.n	800cfe8 <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 800cfdc:	6838      	ldr	r0, [r7, #0]
 800cfde:	f007 f89d 	bl	801411c <pbuf_free>
        errval =  ERR_IF;
 800cfe2:	23f4      	movs	r3, #244	@ 0xf4
 800cfe4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 800cfe8:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800cfec:	f113 0f02 	cmn.w	r3, #2
 800cff0:	d0d3      	beq.n	800cf9a <low_level_output+0xea>

  return errval;
 800cff2:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800cff6:	4618      	mov	r0, r3
 800cff8:	3748      	adds	r7, #72	@ 0x48
 800cffa:	46bd      	mov	sp, r7
 800cffc:	bd80      	pop	{r7, pc}
 800cffe:	bf00      	nop
 800d000:	200055cc 	.word	0x200055cc
 800d004:	2000551c 	.word	0x2000551c
 800d008:	20005518 	.word	0x20005518

0800d00c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800d00c:	b580      	push	{r7, lr}
 800d00e:	b084      	sub	sp, #16
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800d014:	2300      	movs	r3, #0
 800d016:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800d018:	4b07      	ldr	r3, [pc, #28]	@ (800d038 <low_level_input+0x2c>)
 800d01a:	781b      	ldrb	r3, [r3, #0]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d105      	bne.n	800d02c <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800d020:	f107 030c 	add.w	r3, r7, #12
 800d024:	4619      	mov	r1, r3
 800d026:	4805      	ldr	r0, [pc, #20]	@ (800d03c <low_level_input+0x30>)
 800d028:	f7f8 fd81 	bl	8005b2e <HAL_ETH_ReadData>
  }

  return p;
 800d02c:	68fb      	ldr	r3, [r7, #12]
}
 800d02e:	4618      	mov	r0, r3
 800d030:	3710      	adds	r7, #16
 800d032:	46bd      	mov	sp, r7
 800d034:	bd80      	pop	{r7, pc}
 800d036:	bf00      	nop
 800d038:	2000539c 	.word	0x2000539c
 800d03c:	2000551c 	.word	0x2000551c

0800d040 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 800d040:	b580      	push	{r7, lr}
 800d042:	b084      	sub	sp, #16
 800d044:	af00      	add	r7, sp, #0
 800d046:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800d048:	2300      	movs	r3, #0
 800d04a:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800d050:	4b0f      	ldr	r3, [pc, #60]	@ (800d090 <ethernetif_input+0x50>)
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	f04f 31ff 	mov.w	r1, #4294967295
 800d058:	4618      	mov	r0, r3
 800d05a:	f002 fd01 	bl	800fa60 <osSemaphoreWait>
 800d05e:	4603      	mov	r3, r0
 800d060:	2b00      	cmp	r3, #0
 800d062:	d1f5      	bne.n	800d050 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 800d064:	68b8      	ldr	r0, [r7, #8]
 800d066:	f7ff ffd1 	bl	800d00c <low_level_input>
 800d06a:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d00a      	beq.n	800d088 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800d072:	68bb      	ldr	r3, [r7, #8]
 800d074:	691b      	ldr	r3, [r3, #16]
 800d076:	68b9      	ldr	r1, [r7, #8]
 800d078:	68f8      	ldr	r0, [r7, #12]
 800d07a:	4798      	blx	r3
 800d07c:	4603      	mov	r3, r0
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d002      	beq.n	800d088 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800d082:	68f8      	ldr	r0, [r7, #12]
 800d084:	f007 f84a 	bl	801411c <pbuf_free>
          }
        }
      } while(p!=NULL);
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d1ea      	bne.n	800d064 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800d08e:	e7df      	b.n	800d050 <ethernetif_input+0x10>
 800d090:	20005514 	.word	0x20005514

0800d094 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800d094:	b580      	push	{r7, lr}
 800d096:	b082      	sub	sp, #8
 800d098:	af00      	add	r7, sp, #0
 800d09a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d106      	bne.n	800d0b0 <ethernetif_init+0x1c>
 800d0a2:	4b0e      	ldr	r3, [pc, #56]	@ (800d0dc <ethernetif_init+0x48>)
 800d0a4:	f44f 723a 	mov.w	r2, #744	@ 0x2e8
 800d0a8:	490d      	ldr	r1, [pc, #52]	@ (800d0e0 <ethernetif_init+0x4c>)
 800d0aa:	480e      	ldr	r0, [pc, #56]	@ (800d0e4 <ethernetif_init+0x50>)
 800d0ac:	f011 f8ee 	bl	801e28c <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	2273      	movs	r2, #115	@ 0x73
 800d0b4:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	2274      	movs	r2, #116	@ 0x74
 800d0bc:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	4a09      	ldr	r2, [pc, #36]	@ (800d0e8 <ethernetif_init+0x54>)
 800d0c4:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	4a08      	ldr	r2, [pc, #32]	@ (800d0ec <ethernetif_init+0x58>)
 800d0ca:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800d0cc:	6878      	ldr	r0, [r7, #4]
 800d0ce:	f7ff fc8b 	bl	800c9e8 <low_level_init>

  return ERR_OK;
 800d0d2:	2300      	movs	r3, #0
}
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	3708      	adds	r7, #8
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	bd80      	pop	{r7, pc}
 800d0dc:	08020dd0 	.word	0x08020dd0
 800d0e0:	08020dec 	.word	0x08020dec
 800d0e4:	08020dfc 	.word	0x08020dfc
 800d0e8:	0801b50d 	.word	0x0801b50d
 800d0ec:	0800ceb1 	.word	0x0800ceb1

0800d0f0 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800d0f0:	b580      	push	{r7, lr}
 800d0f2:	b084      	sub	sp, #16
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800d0fc:	68f9      	ldr	r1, [r7, #12]
 800d0fe:	4809      	ldr	r0, [pc, #36]	@ (800d124 <pbuf_free_custom+0x34>)
 800d100:	f006 f976 	bl	80133f0 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800d104:	4b08      	ldr	r3, [pc, #32]	@ (800d128 <pbuf_free_custom+0x38>)
 800d106:	781b      	ldrb	r3, [r3, #0]
 800d108:	2b01      	cmp	r3, #1
 800d10a:	d107      	bne.n	800d11c <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800d10c:	4b06      	ldr	r3, [pc, #24]	@ (800d128 <pbuf_free_custom+0x38>)
 800d10e:	2200      	movs	r2, #0
 800d110:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800d112:	4b06      	ldr	r3, [pc, #24]	@ (800d12c <pbuf_free_custom+0x3c>)
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	4618      	mov	r0, r3
 800d118:	f002 fcf0 	bl	800fafc <osSemaphoreRelease>
  }
}
 800d11c:	bf00      	nop
 800d11e:	3710      	adds	r7, #16
 800d120:	46bd      	mov	sp, r7
 800d122:	bd80      	pop	{r7, pc}
 800d124:	08023dd4 	.word	0x08023dd4
 800d128:	2000539c 	.word	0x2000539c
 800d12c:	20005514 	.word	0x20005514

0800d130 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800d130:	b580      	push	{r7, lr}
 800d132:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800d134:	f7f7 fe00 	bl	8004d38 <HAL_GetTick>
 800d138:	4603      	mov	r3, r0
}
 800d13a:	4618      	mov	r0, r3
 800d13c:	bd80      	pop	{r7, pc}
	...

0800d140 <PHY_IO_Init>:
/**
  * @brief  Initialize the PHY interface
  * @retval 0 if OK, -1 if ERROR
  */
static int32_t PHY_IO_Init(void)
{
 800d140:	b580      	push	{r7, lr}
 800d142:	af00      	add	r7, sp, #0
  /* 基本的PHY硬件初始化已经由HAL_ETH_Init处理 */
  /* 这里进行PHY芯片特定的初始化 */
  cdc_debug_log("PHY_IO", "PHY_IO_Init called - performing PHY-specific initialization");
 800d144:	4906      	ldr	r1, [pc, #24]	@ (800d160 <PHY_IO_Init+0x20>)
 800d146:	4807      	ldr	r0, [pc, #28]	@ (800d164 <PHY_IO_Init+0x24>)
 800d148:	f7ff fa86 	bl	800c658 <cdc_debug_log>
  
  /* 等待PHY准备就绪 */
  HAL_Delay(10);
 800d14c:	200a      	movs	r0, #10
 800d14e:	f7f7 fdff 	bl	8004d50 <HAL_Delay>
  
  cdc_debug_log("PHY_IO", "PHY_IO_Init completed successfully");
 800d152:	4905      	ldr	r1, [pc, #20]	@ (800d168 <PHY_IO_Init+0x28>)
 800d154:	4803      	ldr	r0, [pc, #12]	@ (800d164 <PHY_IO_Init+0x24>)
 800d156:	f7ff fa7f 	bl	800c658 <cdc_debug_log>
  return 0;
 800d15a:	2300      	movs	r3, #0
}
 800d15c:	4618      	mov	r0, r3
 800d15e:	bd80      	pop	{r7, pc}
 800d160:	08020e24 	.word	0x08020e24
 800d164:	08020e60 	.word	0x08020e60
 800d168:	08020e68 	.word	0x08020e68

0800d16c <PHY_IO_DeInit>:
/**
  * @brief  De-Initialize the PHY interface
  * @retval 0 if OK, -1 if ERROR
  */
static int32_t PHY_IO_DeInit(void)
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	af00      	add	r7, sp, #0
  cdc_debug_log("PHY_IO", "PHY_IO_DeInit called - performing PHY-specific cleanup");
 800d170:	4905      	ldr	r1, [pc, #20]	@ (800d188 <PHY_IO_DeInit+0x1c>)
 800d172:	4806      	ldr	r0, [pc, #24]	@ (800d18c <PHY_IO_DeInit+0x20>)
 800d174:	f7ff fa70 	bl	800c658 <cdc_debug_log>
  
  /* 可以在这里添加特定的PHY去初始化操作 */
  /* 例如：使能省电模式 */
  
  cdc_debug_log("PHY_IO", "PHY_IO_DeInit completed");
 800d178:	4905      	ldr	r1, [pc, #20]	@ (800d190 <PHY_IO_DeInit+0x24>)
 800d17a:	4804      	ldr	r0, [pc, #16]	@ (800d18c <PHY_IO_DeInit+0x20>)
 800d17c:	f7ff fa6c 	bl	800c658 <cdc_debug_log>
  return 0;
 800d180:	2300      	movs	r3, #0
}
 800d182:	4618      	mov	r0, r3
 800d184:	bd80      	pop	{r7, pc}
 800d186:	bf00      	nop
 800d188:	08020e8c 	.word	0x08020e8c
 800d18c:	08020e60 	.word	0x08020e60
 800d190:	08020ec4 	.word	0x08020ec4

0800d194 <PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: Pointer to register value
  * @retval 0 if OK, -1 if ERROR
  */
static int32_t PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800d194:	b580      	push	{r7, lr}
 800d196:	b096      	sub	sp, #88	@ 0x58
 800d198:	af02      	add	r7, sp, #8
 800d19a:	60f8      	str	r0, [r7, #12]
 800d19c:	60b9      	str	r1, [r7, #8]
 800d19e:	607a      	str	r2, [r7, #4]
  if (HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	68ba      	ldr	r2, [r7, #8]
 800d1a4:	68f9      	ldr	r1, [r7, #12]
 800d1a6:	480e      	ldr	r0, [pc, #56]	@ (800d1e0 <PHY_IO_ReadReg+0x4c>)
 800d1a8:	f7f8 ff2e 	bl	8006008 <HAL_ETH_ReadPHYRegister>
 800d1ac:	4603      	mov	r3, r0
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d011      	beq.n	800d1d6 <PHY_IO_ReadReg+0x42>
  {
    char error_msg[64];
    snprintf(error_msg, sizeof(error_msg), "Read failed - Addr:0x%02lX Reg:0x%02lX", DevAddr, RegAddr);
 800d1b2:	f107 0010 	add.w	r0, r7, #16
 800d1b6:	68bb      	ldr	r3, [r7, #8]
 800d1b8:	9300      	str	r3, [sp, #0]
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	4a09      	ldr	r2, [pc, #36]	@ (800d1e4 <PHY_IO_ReadReg+0x50>)
 800d1be:	2140      	movs	r1, #64	@ 0x40
 800d1c0:	f011 f876 	bl	801e2b0 <sniprintf>
    cdc_debug_log("PHY_IO", error_msg);
 800d1c4:	f107 0310 	add.w	r3, r7, #16
 800d1c8:	4619      	mov	r1, r3
 800d1ca:	4807      	ldr	r0, [pc, #28]	@ (800d1e8 <PHY_IO_ReadReg+0x54>)
 800d1cc:	f7ff fa44 	bl	800c658 <cdc_debug_log>
    return -1;
 800d1d0:	f04f 33ff 	mov.w	r3, #4294967295
 800d1d4:	e000      	b.n	800d1d8 <PHY_IO_ReadReg+0x44>
  }
  return 0;
 800d1d6:	2300      	movs	r3, #0
}
 800d1d8:	4618      	mov	r0, r3
 800d1da:	3750      	adds	r7, #80	@ 0x50
 800d1dc:	46bd      	mov	sp, r7
 800d1de:	bd80      	pop	{r7, pc}
 800d1e0:	2000551c 	.word	0x2000551c
 800d1e4:	08020edc 	.word	0x08020edc
 800d1e8:	08020e60 	.word	0x08020e60

0800d1ec <PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Register value to write
  * @retval 0 if OK, -1 if ERROR
  */
static int32_t PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800d1ec:	b580      	push	{r7, lr}
 800d1ee:	b096      	sub	sp, #88	@ 0x58
 800d1f0:	af02      	add	r7, sp, #8
 800d1f2:	60f8      	str	r0, [r7, #12]
 800d1f4:	60b9      	str	r1, [r7, #8]
 800d1f6:	607a      	str	r2, [r7, #4]
  if (HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	68ba      	ldr	r2, [r7, #8]
 800d1fc:	68f9      	ldr	r1, [r7, #12]
 800d1fe:	480f      	ldr	r0, [pc, #60]	@ (800d23c <PHY_IO_WriteReg+0x50>)
 800d200:	f7f8 ff4d 	bl	800609e <HAL_ETH_WritePHYRegister>
 800d204:	4603      	mov	r3, r0
 800d206:	2b00      	cmp	r3, #0
 800d208:	d013      	beq.n	800d232 <PHY_IO_WriteReg+0x46>
  {
    char error_msg[64];
    snprintf(error_msg, sizeof(error_msg), "Write failed - Addr:0x%02lX Reg:0x%02lX Val:0x%04lX", DevAddr, RegAddr, RegVal);
 800d20a:	f107 0010 	add.w	r0, r7, #16
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	9301      	str	r3, [sp, #4]
 800d212:	68bb      	ldr	r3, [r7, #8]
 800d214:	9300      	str	r3, [sp, #0]
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	4a09      	ldr	r2, [pc, #36]	@ (800d240 <PHY_IO_WriteReg+0x54>)
 800d21a:	2140      	movs	r1, #64	@ 0x40
 800d21c:	f011 f848 	bl	801e2b0 <sniprintf>
    cdc_debug_log("PHY_IO", error_msg);
 800d220:	f107 0310 	add.w	r3, r7, #16
 800d224:	4619      	mov	r1, r3
 800d226:	4807      	ldr	r0, [pc, #28]	@ (800d244 <PHY_IO_WriteReg+0x58>)
 800d228:	f7ff fa16 	bl	800c658 <cdc_debug_log>
    return -1;
 800d22c:	f04f 33ff 	mov.w	r3, #4294967295
 800d230:	e000      	b.n	800d234 <PHY_IO_WriteReg+0x48>
  }
  return 0;
 800d232:	2300      	movs	r3, #0
}
 800d234:	4618      	mov	r0, r3
 800d236:	3750      	adds	r7, #80	@ 0x50
 800d238:	46bd      	mov	sp, r7
 800d23a:	bd80      	pop	{r7, pc}
 800d23c:	2000551c 	.word	0x2000551c
 800d240:	08020f04 	.word	0x08020f04
 800d244:	08020e60 	.word	0x08020e60

0800d248 <PHY_IO_GetTick>:
/**
  * @brief  Get system tick for timing
  * @retval Current tick value
  */
static int32_t PHY_IO_GetTick(void)
{
 800d248:	b580      	push	{r7, lr}
 800d24a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800d24c:	f7f7 fd74 	bl	8004d38 <HAL_GetTick>
 800d250:	4603      	mov	r3, r0
}
 800d252:	4618      	mov	r0, r3
 800d254:	bd80      	pop	{r7, pc}
	...

0800d258 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 800d258:	b580      	push	{r7, lr}
 800d25a:	b0b0      	sub	sp, #192	@ 0xc0
 800d25c:	af00      	add	r7, sp, #0
 800d25e:	6078      	str	r0, [r7, #4]

/* USER CODE BEGIN ETH link init */
  struct netif *netif = (struct netif *) argument;
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  int32_t phy_link_state;
  ETH_MACConfigTypeDef macConfig;
  uint32_t linkchanged = 0, linkup = 0;
 800d266:	2300      	movs	r3, #0
 800d268:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800d26c:	2300      	movs	r3, #0
 800d26e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t link_check_counter = 0;
 800d272:	2300      	movs	r3, #0
 800d274:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  
  cdc_debug_log("LINK_THREAD", "Ethernet link monitoring started");
 800d278:	49be      	ldr	r1, [pc, #760]	@ (800d574 <ethernet_link_thread+0x31c>)
 800d27a:	48bf      	ldr	r0, [pc, #764]	@ (800d578 <ethernet_link_thread+0x320>)
 800d27c:	f7ff f9ec 	bl	800c658 <cdc_debug_log>

  for(;;)
  {

/* USER CODE BEGIN ETH link Thread core code for User BSP */
    link_check_counter++;
 800d280:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d284:	3301      	adds	r3, #1
 800d286:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    
    /* Only log every 50th check to avoid flooding (approximately every 5 seconds) */
    if (link_check_counter % 50 == 0)
 800d28a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d28e:	4bbb      	ldr	r3, [pc, #748]	@ (800d57c <ethernet_link_thread+0x324>)
 800d290:	fba3 1302 	umull	r1, r3, r3, r2
 800d294:	091b      	lsrs	r3, r3, #4
 800d296:	2132      	movs	r1, #50	@ 0x32
 800d298:	fb01 f303 	mul.w	r3, r1, r3
 800d29c:	1ad3      	subs	r3, r2, r3
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d10d      	bne.n	800d2be <ethernet_link_thread+0x66>
    {
      char counter_msg[32];
      snprintf(counter_msg, sizeof(counter_msg), "Link check #%lu", link_check_counter);
 800d2a2:	f107 0008 	add.w	r0, r7, #8
 800d2a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d2aa:	4ab5      	ldr	r2, [pc, #724]	@ (800d580 <ethernet_link_thread+0x328>)
 800d2ac:	2120      	movs	r1, #32
 800d2ae:	f010 ffff 	bl	801e2b0 <sniprintf>
      cdc_debug_log("LINK_THREAD", counter_msg);
 800d2b2:	f107 0308 	add.w	r3, r7, #8
 800d2b6:	4619      	mov	r1, r3
 800d2b8:	48af      	ldr	r0, [pc, #700]	@ (800d578 <ethernet_link_thread+0x320>)
 800d2ba:	f7ff f9cd 	bl	800c658 <cdc_debug_log>
    }
    
    phy_link_state = eth_chip_get_link_state(&PHYchip);
 800d2be:	48b1      	ldr	r0, [pc, #708]	@ (800d584 <ethernet_link_thread+0x32c>)
 800d2c0:	f7f7 fcbe 	bl	8004c40 <eth_chip_get_link_state>
 800d2c4:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
    
    if (phy_link_state != ETH_CHIP_STATUS_READ_ERROR && phy_link_state != ETH_CHIP_STATUS_LINK_DOWN)
 800d2c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d2cc:	f113 0f05 	cmn.w	r3, #5
 800d2d0:	f000 8111 	beq.w	800d4f6 <ethernet_link_thread+0x29e>
 800d2d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d2d8:	2b01      	cmp	r3, #1
 800d2da:	f000 810c 	beq.w	800d4f6 <ethernet_link_thread+0x29e>
    {
      /* PHY link is up */
      switch (phy_link_state)
 800d2de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d2e2:	3b02      	subs	r3, #2
 800d2e4:	2b04      	cmp	r3, #4
 800d2e6:	d874      	bhi.n	800d3d2 <ethernet_link_thread+0x17a>
 800d2e8:	a201      	add	r2, pc, #4	@ (adr r2, 800d2f0 <ethernet_link_thread+0x98>)
 800d2ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2ee:	bf00      	nop
 800d2f0:	0800d305 	.word	0x0800d305
 800d2f4:	0800d32d 	.word	0x0800d32d
 800d2f8:	0800d355 	.word	0x0800d355
 800d2fc:	0800d37d 	.word	0x0800d37d
 800d300:	0800d3a5 	.word	0x0800d3a5
      {
        case ETH_CHIP_STATUS_100MBITS_FULLDUPLEX:
          if (link_check_counter % 50 == 0) cdc_debug_log("LINK_THREAD", "Link: 100M Full Duplex");
 800d304:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d308:	4b9c      	ldr	r3, [pc, #624]	@ (800d57c <ethernet_link_thread+0x324>)
 800d30a:	fba3 1302 	umull	r1, r3, r3, r2
 800d30e:	091b      	lsrs	r3, r3, #4
 800d310:	2132      	movs	r1, #50	@ 0x32
 800d312:	fb01 f303 	mul.w	r3, r1, r3
 800d316:	1ad3      	subs	r3, r2, r3
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d103      	bne.n	800d324 <ethernet_link_thread+0xcc>
 800d31c:	499a      	ldr	r1, [pc, #616]	@ (800d588 <ethernet_link_thread+0x330>)
 800d31e:	4896      	ldr	r0, [pc, #600]	@ (800d578 <ethernet_link_thread+0x320>)
 800d320:	f7ff f99a 	bl	800c658 <cdc_debug_log>
          linkup = 1;
 800d324:	2301      	movs	r3, #1
 800d326:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
          break;
 800d32a:	e066      	b.n	800d3fa <ethernet_link_thread+0x1a2>
        case ETH_CHIP_STATUS_100MBITS_HALFDUPLEX:
          if (link_check_counter % 50 == 0) cdc_debug_log("LINK_THREAD", "Link: 100M Half Duplex");
 800d32c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d330:	4b92      	ldr	r3, [pc, #584]	@ (800d57c <ethernet_link_thread+0x324>)
 800d332:	fba3 1302 	umull	r1, r3, r3, r2
 800d336:	091b      	lsrs	r3, r3, #4
 800d338:	2132      	movs	r1, #50	@ 0x32
 800d33a:	fb01 f303 	mul.w	r3, r1, r3
 800d33e:	1ad3      	subs	r3, r2, r3
 800d340:	2b00      	cmp	r3, #0
 800d342:	d103      	bne.n	800d34c <ethernet_link_thread+0xf4>
 800d344:	4991      	ldr	r1, [pc, #580]	@ (800d58c <ethernet_link_thread+0x334>)
 800d346:	488c      	ldr	r0, [pc, #560]	@ (800d578 <ethernet_link_thread+0x320>)
 800d348:	f7ff f986 	bl	800c658 <cdc_debug_log>
          linkup = 1;
 800d34c:	2301      	movs	r3, #1
 800d34e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
          break;
 800d352:	e052      	b.n	800d3fa <ethernet_link_thread+0x1a2>
        case ETH_CHIP_STATUS_10MBITS_FULLDUPLEX:
          if (link_check_counter % 50 == 0) cdc_debug_log("LINK_THREAD", "Link: 10M Full Duplex");
 800d354:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d358:	4b88      	ldr	r3, [pc, #544]	@ (800d57c <ethernet_link_thread+0x324>)
 800d35a:	fba3 1302 	umull	r1, r3, r3, r2
 800d35e:	091b      	lsrs	r3, r3, #4
 800d360:	2132      	movs	r1, #50	@ 0x32
 800d362:	fb01 f303 	mul.w	r3, r1, r3
 800d366:	1ad3      	subs	r3, r2, r3
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d103      	bne.n	800d374 <ethernet_link_thread+0x11c>
 800d36c:	4988      	ldr	r1, [pc, #544]	@ (800d590 <ethernet_link_thread+0x338>)
 800d36e:	4882      	ldr	r0, [pc, #520]	@ (800d578 <ethernet_link_thread+0x320>)
 800d370:	f7ff f972 	bl	800c658 <cdc_debug_log>
          linkup = 1;
 800d374:	2301      	movs	r3, #1
 800d376:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
          break;
 800d37a:	e03e      	b.n	800d3fa <ethernet_link_thread+0x1a2>
        case ETH_CHIP_STATUS_10MBITS_HALFDUPLEX:
          if (link_check_counter % 50 == 0) cdc_debug_log("LINK_THREAD", "Link: 10M Half Duplex");
 800d37c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d380:	4b7e      	ldr	r3, [pc, #504]	@ (800d57c <ethernet_link_thread+0x324>)
 800d382:	fba3 1302 	umull	r1, r3, r3, r2
 800d386:	091b      	lsrs	r3, r3, #4
 800d388:	2132      	movs	r1, #50	@ 0x32
 800d38a:	fb01 f303 	mul.w	r3, r1, r3
 800d38e:	1ad3      	subs	r3, r2, r3
 800d390:	2b00      	cmp	r3, #0
 800d392:	d103      	bne.n	800d39c <ethernet_link_thread+0x144>
 800d394:	497f      	ldr	r1, [pc, #508]	@ (800d594 <ethernet_link_thread+0x33c>)
 800d396:	4878      	ldr	r0, [pc, #480]	@ (800d578 <ethernet_link_thread+0x320>)
 800d398:	f7ff f95e 	bl	800c658 <cdc_debug_log>
          linkup = 1;
 800d39c:	2301      	movs	r3, #1
 800d39e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
          break;
 800d3a2:	e02a      	b.n	800d3fa <ethernet_link_thread+0x1a2>
        case ETH_CHIP_STATUS_AUTONEGO_NOTDONE:
          if (link_check_counter % 50 == 0) {
 800d3a4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d3a8:	4b74      	ldr	r3, [pc, #464]	@ (800d57c <ethernet_link_thread+0x324>)
 800d3aa:	fba3 1302 	umull	r1, r3, r3, r2
 800d3ae:	091b      	lsrs	r3, r3, #4
 800d3b0:	2132      	movs	r1, #50	@ 0x32
 800d3b2:	fb01 f303 	mul.w	r3, r1, r3
 800d3b6:	1ad3      	subs	r3, r2, r3
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d106      	bne.n	800d3ca <ethernet_link_thread+0x172>
            cdc_debug_log("LINK_THREAD", "Auto-negotiation in progress, restarting...");
 800d3bc:	4976      	ldr	r1, [pc, #472]	@ (800d598 <ethernet_link_thread+0x340>)
 800d3be:	486e      	ldr	r0, [pc, #440]	@ (800d578 <ethernet_link_thread+0x320>)
 800d3c0:	f7ff f94a 	bl	800c658 <cdc_debug_log>
            eth_chip_start_auto_nego(&PHYchip);
 800d3c4:	486f      	ldr	r0, [pc, #444]	@ (800d584 <ethernet_link_thread+0x32c>)
 800d3c6:	f7f7 fc0e 	bl	8004be6 <eth_chip_start_auto_nego>
          }
          linkup = 0;
 800d3ca:	2300      	movs	r3, #0
 800d3cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
          break;
 800d3d0:	e013      	b.n	800d3fa <ethernet_link_thread+0x1a2>
        default:
          if (link_check_counter % 50 == 0) cdc_debug_log("LINK_THREAD", "Link: Unknown state");
 800d3d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d3d6:	4b69      	ldr	r3, [pc, #420]	@ (800d57c <ethernet_link_thread+0x324>)
 800d3d8:	fba3 1302 	umull	r1, r3, r3, r2
 800d3dc:	091b      	lsrs	r3, r3, #4
 800d3de:	2132      	movs	r1, #50	@ 0x32
 800d3e0:	fb01 f303 	mul.w	r3, r1, r3
 800d3e4:	1ad3      	subs	r3, r2, r3
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d103      	bne.n	800d3f2 <ethernet_link_thread+0x19a>
 800d3ea:	496c      	ldr	r1, [pc, #432]	@ (800d59c <ethernet_link_thread+0x344>)
 800d3ec:	4862      	ldr	r0, [pc, #392]	@ (800d578 <ethernet_link_thread+0x320>)
 800d3ee:	f7ff f933 	bl	800c658 <cdc_debug_log>
          linkup = 0;
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
          break;
 800d3f8:	bf00      	nop
      }
      
      if (linkup && !netif_is_link_up(netif))
 800d3fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	f000 8113 	beq.w	800d62a <ethernet_link_thread+0x3d2>
 800d404:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800d408:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d40c:	f003 0304 	and.w	r3, r3, #4
 800d410:	2b00      	cmp	r3, #0
 800d412:	f040 810a 	bne.w	800d62a <ethernet_link_thread+0x3d2>
      {
        cdc_debug_log("LINK_THREAD", "Link UP detected - configuring interface");
 800d416:	4962      	ldr	r1, [pc, #392]	@ (800d5a0 <ethernet_link_thread+0x348>)
 800d418:	4857      	ldr	r0, [pc, #348]	@ (800d578 <ethernet_link_thread+0x320>)
 800d41a:	f7ff f91d 	bl	800c658 <cdc_debug_log>
        
        /* Get current MAC configuration */
        HAL_ETH_GetMACConfig(&heth, &macConfig);
 800d41e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800d422:	4619      	mov	r1, r3
 800d424:	485f      	ldr	r0, [pc, #380]	@ (800d5a4 <ethernet_link_thread+0x34c>)
 800d426:	f7f8 fe83 	bl	8006130 <HAL_ETH_GetMACConfig>
        
        /* Configure ETH DupLex and Speed based on PHY state */
        switch (phy_link_state)
 800d42a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d42e:	3b02      	subs	r3, #2
 800d430:	2b03      	cmp	r3, #3
 800d432:	d833      	bhi.n	800d49c <ethernet_link_thread+0x244>
 800d434:	a201      	add	r2, pc, #4	@ (adr r2, 800d43c <ethernet_link_thread+0x1e4>)
 800d436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d43a:	bf00      	nop
 800d43c:	0800d44d 	.word	0x0800d44d
 800d440:	0800d463 	.word	0x0800d463
 800d444:	0800d477 	.word	0x0800d477
 800d448:	0800d48b 	.word	0x0800d48b
        {
          case ETH_CHIP_STATUS_100MBITS_FULLDUPLEX:
            macConfig.DuplexMode = ETH_FULLDUPLEX_MODE;
 800d44c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d450:	663b      	str	r3, [r7, #96]	@ 0x60
            macConfig.Speed = ETH_SPEED_100M;
 800d452:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800d456:	65fb      	str	r3, [r7, #92]	@ 0x5c
            cdc_debug_log("LINK_THREAD", "Configuring: 100M Full Duplex");
 800d458:	4953      	ldr	r1, [pc, #332]	@ (800d5a8 <ethernet_link_thread+0x350>)
 800d45a:	4847      	ldr	r0, [pc, #284]	@ (800d578 <ethernet_link_thread+0x320>)
 800d45c:	f7ff f8fc 	bl	800c658 <cdc_debug_log>
            break;
 800d460:	e01c      	b.n	800d49c <ethernet_link_thread+0x244>
          case ETH_CHIP_STATUS_100MBITS_HALFDUPLEX:
            macConfig.DuplexMode = ETH_HALFDUPLEX_MODE;
 800d462:	2300      	movs	r3, #0
 800d464:	663b      	str	r3, [r7, #96]	@ 0x60
            macConfig.Speed = ETH_SPEED_100M;
 800d466:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800d46a:	65fb      	str	r3, [r7, #92]	@ 0x5c
            cdc_debug_log("LINK_THREAD", "Configuring: 100M Half Duplex");
 800d46c:	494f      	ldr	r1, [pc, #316]	@ (800d5ac <ethernet_link_thread+0x354>)
 800d46e:	4842      	ldr	r0, [pc, #264]	@ (800d578 <ethernet_link_thread+0x320>)
 800d470:	f7ff f8f2 	bl	800c658 <cdc_debug_log>
            break;
 800d474:	e012      	b.n	800d49c <ethernet_link_thread+0x244>
          case ETH_CHIP_STATUS_10MBITS_FULLDUPLEX:
            macConfig.DuplexMode = ETH_FULLDUPLEX_MODE;
 800d476:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d47a:	663b      	str	r3, [r7, #96]	@ 0x60
            macConfig.Speed = ETH_SPEED_10M;
 800d47c:	2300      	movs	r3, #0
 800d47e:	65fb      	str	r3, [r7, #92]	@ 0x5c
            cdc_debug_log("LINK_THREAD", "Configuring: 10M Full Duplex");
 800d480:	494b      	ldr	r1, [pc, #300]	@ (800d5b0 <ethernet_link_thread+0x358>)
 800d482:	483d      	ldr	r0, [pc, #244]	@ (800d578 <ethernet_link_thread+0x320>)
 800d484:	f7ff f8e8 	bl	800c658 <cdc_debug_log>
            break;
 800d488:	e008      	b.n	800d49c <ethernet_link_thread+0x244>
          case ETH_CHIP_STATUS_10MBITS_HALFDUPLEX:
            macConfig.DuplexMode = ETH_HALFDUPLEX_MODE;
 800d48a:	2300      	movs	r3, #0
 800d48c:	663b      	str	r3, [r7, #96]	@ 0x60
            macConfig.Speed = ETH_SPEED_10M;
 800d48e:	2300      	movs	r3, #0
 800d490:	65fb      	str	r3, [r7, #92]	@ 0x5c
            cdc_debug_log("LINK_THREAD", "Configuring: 10M Half Duplex");
 800d492:	4948      	ldr	r1, [pc, #288]	@ (800d5b4 <ethernet_link_thread+0x35c>)
 800d494:	4838      	ldr	r0, [pc, #224]	@ (800d578 <ethernet_link_thread+0x320>)
 800d496:	f7ff f8df 	bl	800c658 <cdc_debug_log>
            break;
 800d49a:	bf00      	nop
        }
        
        /* Apply the new MAC configuration */
        if (HAL_ETH_SetMACConfig(&heth, &macConfig) != HAL_OK)
 800d49c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800d4a0:	4619      	mov	r1, r3
 800d4a2:	4840      	ldr	r0, [pc, #256]	@ (800d5a4 <ethernet_link_thread+0x34c>)
 800d4a4:	f7f8 ff3b 	bl	800631e <HAL_ETH_SetMACConfig>
 800d4a8:	4603      	mov	r3, r0
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d004      	beq.n	800d4b8 <ethernet_link_thread+0x260>
        {
          cdc_debug_log("LINK_THREAD", "Failed to set MAC configuration");
 800d4ae:	4942      	ldr	r1, [pc, #264]	@ (800d5b8 <ethernet_link_thread+0x360>)
 800d4b0:	4831      	ldr	r0, [pc, #196]	@ (800d578 <ethernet_link_thread+0x320>)
 800d4b2:	f7ff f8d1 	bl	800c658 <cdc_debug_log>
 800d4b6:	e003      	b.n	800d4c0 <ethernet_link_thread+0x268>
        }
        else
        {
          cdc_debug_log("LINK_THREAD", "MAC configuration updated successfully");
 800d4b8:	4940      	ldr	r1, [pc, #256]	@ (800d5bc <ethernet_link_thread+0x364>)
 800d4ba:	482f      	ldr	r0, [pc, #188]	@ (800d578 <ethernet_link_thread+0x320>)
 800d4bc:	f7ff f8cc 	bl	800c658 <cdc_debug_log>
        }
        
        /* Start ETH if not already started */
        if (HAL_ETH_Start_IT(&heth) != HAL_OK)
 800d4c0:	4838      	ldr	r0, [pc, #224]	@ (800d5a4 <ethernet_link_thread+0x34c>)
 800d4c2:	f7f8 f9e9 	bl	8005898 <HAL_ETH_Start_IT>
 800d4c6:	4603      	mov	r3, r0
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d004      	beq.n	800d4d6 <ethernet_link_thread+0x27e>
        {
          cdc_debug_log("LINK_THREAD", "Failed to start ETH");
 800d4cc:	493c      	ldr	r1, [pc, #240]	@ (800d5c0 <ethernet_link_thread+0x368>)
 800d4ce:	482a      	ldr	r0, [pc, #168]	@ (800d578 <ethernet_link_thread+0x320>)
 800d4d0:	f7ff f8c2 	bl	800c658 <cdc_debug_log>
 800d4d4:	e003      	b.n	800d4de <ethernet_link_thread+0x286>
        }
        else
        {
          cdc_debug_log("LINK_THREAD", "ETH started successfully");
 800d4d6:	493b      	ldr	r1, [pc, #236]	@ (800d5c4 <ethernet_link_thread+0x36c>)
 800d4d8:	4827      	ldr	r0, [pc, #156]	@ (800d578 <ethernet_link_thread+0x320>)
 800d4da:	f7ff f8bd 	bl	800c658 <cdc_debug_log>
        }
        
        /* Notify link up */
        netif_set_link_up(netif);
 800d4de:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 800d4e2:	f006 fa09 	bl	80138f8 <netif_set_link_up>
        cdc_debug_log("LINK_THREAD", "Network interface link set to UP");
 800d4e6:	4938      	ldr	r1, [pc, #224]	@ (800d5c8 <ethernet_link_thread+0x370>)
 800d4e8:	4823      	ldr	r0, [pc, #140]	@ (800d578 <ethernet_link_thread+0x320>)
 800d4ea:	f7ff f8b5 	bl	800c658 <cdc_debug_log>
        linkchanged = 1;
 800d4ee:	2301      	movs	r3, #1
 800d4f0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
      if (linkup && !netif_is_link_up(netif))
 800d4f4:	e099      	b.n	800d62a <ethernet_link_thread+0x3d2>
      }
    }
    else
    {
      /* PHY link is down */
      if (netif_is_link_up(netif))
 800d4f6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800d4fa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d4fe:	089b      	lsrs	r3, r3, #2
 800d500:	f003 0301 	and.w	r3, r3, #1
 800d504:	b2db      	uxtb	r3, r3
 800d506:	2b00      	cmp	r3, #0
 800d508:	d01e      	beq.n	800d548 <ethernet_link_thread+0x2f0>
      {
        cdc_debug_log("LINK_THREAD", "Link DOWN detected - stopping interface");
 800d50a:	4930      	ldr	r1, [pc, #192]	@ (800d5cc <ethernet_link_thread+0x374>)
 800d50c:	481a      	ldr	r0, [pc, #104]	@ (800d578 <ethernet_link_thread+0x320>)
 800d50e:	f7ff f8a3 	bl	800c658 <cdc_debug_log>
        
        /* Stop ETH */
        if (HAL_ETH_Stop_IT(&heth) != HAL_OK)
 800d512:	4824      	ldr	r0, [pc, #144]	@ (800d5a4 <ethernet_link_thread+0x34c>)
 800d514:	f7f8 fa30 	bl	8005978 <HAL_ETH_Stop_IT>
 800d518:	4603      	mov	r3, r0
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d004      	beq.n	800d528 <ethernet_link_thread+0x2d0>
        {
          cdc_debug_log("LINK_THREAD", "Failed to stop ETH");
 800d51e:	492c      	ldr	r1, [pc, #176]	@ (800d5d0 <ethernet_link_thread+0x378>)
 800d520:	4815      	ldr	r0, [pc, #84]	@ (800d578 <ethernet_link_thread+0x320>)
 800d522:	f7ff f899 	bl	800c658 <cdc_debug_log>
 800d526:	e003      	b.n	800d530 <ethernet_link_thread+0x2d8>
        }
        else
        {
          cdc_debug_log("LINK_THREAD", "ETH stopped successfully");
 800d528:	492a      	ldr	r1, [pc, #168]	@ (800d5d4 <ethernet_link_thread+0x37c>)
 800d52a:	4813      	ldr	r0, [pc, #76]	@ (800d578 <ethernet_link_thread+0x320>)
 800d52c:	f7ff f894 	bl	800c658 <cdc_debug_log>
        }
        
        /* Notify link down */
        netif_set_link_down(netif);
 800d530:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 800d534:	f006 fa14 	bl	8013960 <netif_set_link_down>
        cdc_debug_log("LINK_THREAD", "Network interface link set to DOWN");
 800d538:	4927      	ldr	r1, [pc, #156]	@ (800d5d8 <ethernet_link_thread+0x380>)
 800d53a:	480f      	ldr	r0, [pc, #60]	@ (800d578 <ethernet_link_thread+0x320>)
 800d53c:	f7ff f88c 	bl	800c658 <cdc_debug_log>
        linkchanged = 1;
 800d540:	2301      	movs	r3, #1
 800d542:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800d546:	e06c      	b.n	800d622 <ethernet_link_thread+0x3ca>
      }
      else if (link_check_counter % 50 == 0)
 800d548:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d54c:	4b0b      	ldr	r3, [pc, #44]	@ (800d57c <ethernet_link_thread+0x324>)
 800d54e:	fba3 1302 	umull	r1, r3, r3, r2
 800d552:	091b      	lsrs	r3, r3, #4
 800d554:	2132      	movs	r1, #50	@ 0x32
 800d556:	fb01 f303 	mul.w	r3, r1, r3
 800d55a:	1ad3      	subs	r3, r2, r3
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d160      	bne.n	800d622 <ethernet_link_thread+0x3ca>
      {
        if (phy_link_state == ETH_CHIP_STATUS_READ_ERROR)
 800d560:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d564:	f113 0f05 	cmn.w	r3, #5
 800d568:	d13a      	bne.n	800d5e0 <ethernet_link_thread+0x388>
        {
          cdc_debug_log("LINK_THREAD", "PHY read error detected");
 800d56a:	491c      	ldr	r1, [pc, #112]	@ (800d5dc <ethernet_link_thread+0x384>)
 800d56c:	4802      	ldr	r0, [pc, #8]	@ (800d578 <ethernet_link_thread+0x320>)
 800d56e:	f7ff f873 	bl	800c658 <cdc_debug_log>
 800d572:	e056      	b.n	800d622 <ethernet_link_thread+0x3ca>
 800d574:	08020f38 	.word	0x08020f38
 800d578:	08020f5c 	.word	0x08020f5c
 800d57c:	51eb851f 	.word	0x51eb851f
 800d580:	08020f68 	.word	0x08020f68
 800d584:	200054e0 	.word	0x200054e0
 800d588:	08020f78 	.word	0x08020f78
 800d58c:	08020f90 	.word	0x08020f90
 800d590:	08020fa8 	.word	0x08020fa8
 800d594:	08020fc0 	.word	0x08020fc0
 800d598:	08020fd8 	.word	0x08020fd8
 800d59c:	08021004 	.word	0x08021004
 800d5a0:	08021018 	.word	0x08021018
 800d5a4:	2000551c 	.word	0x2000551c
 800d5a8:	08021044 	.word	0x08021044
 800d5ac:	08021064 	.word	0x08021064
 800d5b0:	08021084 	.word	0x08021084
 800d5b4:	080210a4 	.word	0x080210a4
 800d5b8:	080210c4 	.word	0x080210c4
 800d5bc:	080210e4 	.word	0x080210e4
 800d5c0:	0802110c 	.word	0x0802110c
 800d5c4:	08021120 	.word	0x08021120
 800d5c8:	0802113c 	.word	0x0802113c
 800d5cc:	08021160 	.word	0x08021160
 800d5d0:	08021188 	.word	0x08021188
 800d5d4:	0802119c 	.word	0x0802119c
 800d5d8:	080211b8 	.word	0x080211b8
 800d5dc:	080211dc 	.word	0x080211dc
        }
        else if (phy_link_state == ETH_CHIP_STATUS_LINK_DOWN)
 800d5e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d5e4:	2b01      	cmp	r3, #1
 800d5e6:	d10e      	bne.n	800d606 <ethernet_link_thread+0x3ae>
        {
          cdc_debug_log("LINK_THREAD", "Link is down, restarting auto-negotiation");
 800d5e8:	4926      	ldr	r1, [pc, #152]	@ (800d684 <ethernet_link_thread+0x42c>)
 800d5ea:	4827      	ldr	r0, [pc, #156]	@ (800d688 <ethernet_link_thread+0x430>)
 800d5ec:	f7ff f834 	bl	800c658 <cdc_debug_log>
          /* 尝试重新启动自动协商 */
          if (eth_chip_start_auto_nego(&PHYchip) == ETH_CHIP_STATUS_OK)
 800d5f0:	4826      	ldr	r0, [pc, #152]	@ (800d68c <ethernet_link_thread+0x434>)
 800d5f2:	f7f7 faf8 	bl	8004be6 <eth_chip_start_auto_nego>
 800d5f6:	4603      	mov	r3, r0
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d112      	bne.n	800d622 <ethernet_link_thread+0x3ca>
          {
            cdc_debug_log("LINK_THREAD", "Auto-negotiation restarted");
 800d5fc:	4924      	ldr	r1, [pc, #144]	@ (800d690 <ethernet_link_thread+0x438>)
 800d5fe:	4822      	ldr	r0, [pc, #136]	@ (800d688 <ethernet_link_thread+0x430>)
 800d600:	f7ff f82a 	bl	800c658 <cdc_debug_log>
 800d604:	e00d      	b.n	800d622 <ethernet_link_thread+0x3ca>
          }
        }
        else
        {
          char state_msg[64];
          snprintf(state_msg, sizeof(state_msg), "Unknown PHY state: %ld", phy_link_state);
 800d606:	f107 0008 	add.w	r0, r7, #8
 800d60a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d60e:	4a21      	ldr	r2, [pc, #132]	@ (800d694 <ethernet_link_thread+0x43c>)
 800d610:	2140      	movs	r1, #64	@ 0x40
 800d612:	f010 fe4d 	bl	801e2b0 <sniprintf>
          cdc_debug_log("LINK_THREAD", state_msg);
 800d616:	f107 0308 	add.w	r3, r7, #8
 800d61a:	4619      	mov	r1, r3
 800d61c:	481a      	ldr	r0, [pc, #104]	@ (800d688 <ethernet_link_thread+0x430>)
 800d61e:	f7ff f81b 	bl	800c658 <cdc_debug_log>
        }
      }
      linkup = 0;
 800d622:	2300      	movs	r3, #0
 800d624:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d628:	e000      	b.n	800d62c <ethernet_link_thread+0x3d4>
      if (linkup && !netif_is_link_up(netif))
 800d62a:	bf00      	nop
    }
    
    /* Reset link change flag */
    if (linkchanged)
 800d62c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800d630:	2b00      	cmp	r3, #0
 800d632:	d00c      	beq.n	800d64e <ethernet_link_thread+0x3f6>
    {
      linkchanged = 0;
 800d634:	2300      	movs	r3, #0
 800d636:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
      /* Debug DMA status after link change */
      cdc_debug_log("LINK_THREAD", "=== DMA Status After Link Change ===");
 800d63a:	4917      	ldr	r1, [pc, #92]	@ (800d698 <ethernet_link_thread+0x440>)
 800d63c:	4812      	ldr	r0, [pc, #72]	@ (800d688 <ethernet_link_thread+0x430>)
 800d63e:	f7ff f80b 	bl	800c658 <cdc_debug_log>
      debug_eth_dma_registers();
 800d642:	f7ff f8f5 	bl	800c830 <debug_eth_dma_registers>
      cdc_debug_log("LINK_THREAD", "=== DMA Debug Complete ===");
 800d646:	4915      	ldr	r1, [pc, #84]	@ (800d69c <ethernet_link_thread+0x444>)
 800d648:	480f      	ldr	r0, [pc, #60]	@ (800d688 <ethernet_link_thread+0x430>)
 800d64a:	f7ff f805 	bl	800c658 <cdc_debug_log>
    }
    
    /* Periodic DMA debug every 100 cycles (approximately 10 seconds) */
    if (link_check_counter % 100 == 0)
 800d64e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d652:	4b13      	ldr	r3, [pc, #76]	@ (800d6a0 <ethernet_link_thread+0x448>)
 800d654:	fba3 1302 	umull	r1, r3, r3, r2
 800d658:	095b      	lsrs	r3, r3, #5
 800d65a:	2164      	movs	r1, #100	@ 0x64
 800d65c:	fb01 f303 	mul.w	r3, r1, r3
 800d660:	1ad3      	subs	r3, r2, r3
 800d662:	2b00      	cmp	r3, #0
 800d664:	d109      	bne.n	800d67a <ethernet_link_thread+0x422>
    {
      cdc_debug_log("LINK_THREAD", "=== Periodic DMA Status Check ===");
 800d666:	490f      	ldr	r1, [pc, #60]	@ (800d6a4 <ethernet_link_thread+0x44c>)
 800d668:	4807      	ldr	r0, [pc, #28]	@ (800d688 <ethernet_link_thread+0x430>)
 800d66a:	f7fe fff5 	bl	800c658 <cdc_debug_log>
      debug_eth_dma_registers();
 800d66e:	f7ff f8df 	bl	800c830 <debug_eth_dma_registers>
      cdc_debug_log("LINK_THREAD", "=== Periodic Debug Complete ===");
 800d672:	490d      	ldr	r1, [pc, #52]	@ (800d6a8 <ethernet_link_thread+0x450>)
 800d674:	4804      	ldr	r0, [pc, #16]	@ (800d688 <ethernet_link_thread+0x430>)
 800d676:	f7fe ffef 	bl	800c658 <cdc_debug_log>
    }
/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800d67a:	2064      	movs	r0, #100	@ 0x64
 800d67c:	f002 f90e 	bl	800f89c <osDelay>
    link_check_counter++;
 800d680:	e5fe      	b.n	800d280 <ethernet_link_thread+0x28>
 800d682:	bf00      	nop
 800d684:	080211f4 	.word	0x080211f4
 800d688:	08020f5c 	.word	0x08020f5c
 800d68c:	200054e0 	.word	0x200054e0
 800d690:	08021220 	.word	0x08021220
 800d694:	0802123c 	.word	0x0802123c
 800d698:	08021254 	.word	0x08021254
 800d69c:	0802127c 	.word	0x0802127c
 800d6a0:	51eb851f 	.word	0x51eb851f
 800d6a4:	08021298 	.word	0x08021298
 800d6a8:	080212bc 	.word	0x080212bc

0800d6ac <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b086      	sub	sp, #24
 800d6b0:	af02      	add	r7, sp, #8
 800d6b2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800d6b4:	4812      	ldr	r0, [pc, #72]	@ (800d700 <HAL_ETH_RxAllocateCallback+0x54>)
 800d6b6:	f005 fe27 	bl	8013308 <memp_malloc_pool>
 800d6ba:	60f8      	str	r0, [r7, #12]
  if (p)
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d014      	beq.n	800d6ec <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	f103 0220 	add.w	r2, r3, #32
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	4a0d      	ldr	r2, [pc, #52]	@ (800d704 <HAL_ETH_RxAllocateCallback+0x58>)
 800d6d0:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800d6da:	9201      	str	r2, [sp, #4]
 800d6dc:	9300      	str	r3, [sp, #0]
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	2241      	movs	r2, #65	@ 0x41
 800d6e2:	2100      	movs	r1, #0
 800d6e4:	2000      	movs	r0, #0
 800d6e6:	f006 fb5f 	bl	8013da8 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800d6ea:	e005      	b.n	800d6f8 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800d6ec:	4b06      	ldr	r3, [pc, #24]	@ (800d708 <HAL_ETH_RxAllocateCallback+0x5c>)
 800d6ee:	2201      	movs	r2, #1
 800d6f0:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	2200      	movs	r2, #0
 800d6f6:	601a      	str	r2, [r3, #0]
}
 800d6f8:	bf00      	nop
 800d6fa:	3710      	adds	r7, #16
 800d6fc:	46bd      	mov	sp, r7
 800d6fe:	bd80      	pop	{r7, pc}
 800d700:	08023dd4 	.word	0x08023dd4
 800d704:	0800d0f1 	.word	0x0800d0f1
 800d708:	2000539c 	.word	0x2000539c

0800d70c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800d70c:	b480      	push	{r7}
 800d70e:	b089      	sub	sp, #36	@ 0x24
 800d710:	af00      	add	r7, sp, #0
 800d712:	60f8      	str	r0, [r7, #12]
 800d714:	60b9      	str	r1, [r7, #8]
 800d716:	607a      	str	r2, [r7, #4]
 800d718:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800d71e:	68bb      	ldr	r3, [r7, #8]
 800d720:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800d722:	2300      	movs	r3, #0
 800d724:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	3b20      	subs	r3, #32
 800d72a:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800d72c:	69fb      	ldr	r3, [r7, #28]
 800d72e:	2200      	movs	r2, #0
 800d730:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800d732:	69fb      	ldr	r3, [r7, #28]
 800d734:	2200      	movs	r2, #0
 800d736:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800d738:	69fb      	ldr	r3, [r7, #28]
 800d73a:	887a      	ldrh	r2, [r7, #2]
 800d73c:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800d73e:	69bb      	ldr	r3, [r7, #24]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	2b00      	cmp	r3, #0
 800d744:	d103      	bne.n	800d74e <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800d746:	69bb      	ldr	r3, [r7, #24]
 800d748:	69fa      	ldr	r2, [r7, #28]
 800d74a:	601a      	str	r2, [r3, #0]
 800d74c:	e003      	b.n	800d756 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800d74e:	697b      	ldr	r3, [r7, #20]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	69fa      	ldr	r2, [r7, #28]
 800d754:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800d756:	697b      	ldr	r3, [r7, #20]
 800d758:	69fa      	ldr	r2, [r7, #28]
 800d75a:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800d75c:	69bb      	ldr	r3, [r7, #24]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	61fb      	str	r3, [r7, #28]
 800d762:	e009      	b.n	800d778 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800d764:	69fb      	ldr	r3, [r7, #28]
 800d766:	891a      	ldrh	r2, [r3, #8]
 800d768:	887b      	ldrh	r3, [r7, #2]
 800d76a:	4413      	add	r3, r2
 800d76c:	b29a      	uxth	r2, r3
 800d76e:	69fb      	ldr	r3, [r7, #28]
 800d770:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800d772:	69fb      	ldr	r3, [r7, #28]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	61fb      	str	r3, [r7, #28]
 800d778:	69fb      	ldr	r3, [r7, #28]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d1f2      	bne.n	800d764 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 800d77e:	bf00      	nop
 800d780:	bf00      	nop
 800d782:	3724      	adds	r7, #36	@ 0x24
 800d784:	46bd      	mov	sp, r7
 800d786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d78a:	4770      	bx	lr

0800d78c <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800d78c:	b580      	push	{r7, lr}
 800d78e:	b082      	sub	sp, #8
 800d790:	af00      	add	r7, sp, #0
 800d792:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800d794:	6878      	ldr	r0, [r7, #4]
 800d796:	f006 fcc1 	bl	801411c <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800d79a:	bf00      	nop
 800d79c:	3708      	adds	r7, #8
 800d79e:	46bd      	mov	sp, r7
 800d7a0:	bd80      	pop	{r7, pc}
	...

0800d7a4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d7a4:	b580      	push	{r7, lr}
 800d7a6:	b084      	sub	sp, #16
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	6078      	str	r0, [r7, #4]
 800d7ac:	460b      	mov	r3, r1
 800d7ae:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800d7b0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800d7b4:	f010 fb9e 	bl	801def4 <USBD_static_malloc>
 800d7b8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d109      	bne.n	800d7d4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	32b0      	adds	r2, #176	@ 0xb0
 800d7ca:	2100      	movs	r1, #0
 800d7cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800d7d0:	2302      	movs	r3, #2
 800d7d2:	e0d4      	b.n	800d97e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800d7d4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800d7d8:	2100      	movs	r1, #0
 800d7da:	68f8      	ldr	r0, [r7, #12]
 800d7dc:	f010 fe0b 	bl	801e3f6 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	32b0      	adds	r2, #176	@ 0xb0
 800d7ea:	68f9      	ldr	r1, [r7, #12]
 800d7ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	32b0      	adds	r2, #176	@ 0xb0
 800d7fa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	7c1b      	ldrb	r3, [r3, #16]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d138      	bne.n	800d87e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800d80c:	4b5e      	ldr	r3, [pc, #376]	@ (800d988 <USBD_CDC_Init+0x1e4>)
 800d80e:	7819      	ldrb	r1, [r3, #0]
 800d810:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d814:	2202      	movs	r2, #2
 800d816:	6878      	ldr	r0, [r7, #4]
 800d818:	f010 fa49 	bl	801dcae <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800d81c:	4b5a      	ldr	r3, [pc, #360]	@ (800d988 <USBD_CDC_Init+0x1e4>)
 800d81e:	781b      	ldrb	r3, [r3, #0]
 800d820:	f003 020f 	and.w	r2, r3, #15
 800d824:	6879      	ldr	r1, [r7, #4]
 800d826:	4613      	mov	r3, r2
 800d828:	009b      	lsls	r3, r3, #2
 800d82a:	4413      	add	r3, r2
 800d82c:	009b      	lsls	r3, r3, #2
 800d82e:	440b      	add	r3, r1
 800d830:	3323      	adds	r3, #35	@ 0x23
 800d832:	2201      	movs	r2, #1
 800d834:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d836:	4b55      	ldr	r3, [pc, #340]	@ (800d98c <USBD_CDC_Init+0x1e8>)
 800d838:	7819      	ldrb	r1, [r3, #0]
 800d83a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d83e:	2202      	movs	r2, #2
 800d840:	6878      	ldr	r0, [r7, #4]
 800d842:	f010 fa34 	bl	801dcae <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d846:	4b51      	ldr	r3, [pc, #324]	@ (800d98c <USBD_CDC_Init+0x1e8>)
 800d848:	781b      	ldrb	r3, [r3, #0]
 800d84a:	f003 020f 	and.w	r2, r3, #15
 800d84e:	6879      	ldr	r1, [r7, #4]
 800d850:	4613      	mov	r3, r2
 800d852:	009b      	lsls	r3, r3, #2
 800d854:	4413      	add	r3, r2
 800d856:	009b      	lsls	r3, r3, #2
 800d858:	440b      	add	r3, r1
 800d85a:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800d85e:	2201      	movs	r2, #1
 800d860:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800d862:	4b4b      	ldr	r3, [pc, #300]	@ (800d990 <USBD_CDC_Init+0x1ec>)
 800d864:	781b      	ldrb	r3, [r3, #0]
 800d866:	f003 020f 	and.w	r2, r3, #15
 800d86a:	6879      	ldr	r1, [r7, #4]
 800d86c:	4613      	mov	r3, r2
 800d86e:	009b      	lsls	r3, r3, #2
 800d870:	4413      	add	r3, r2
 800d872:	009b      	lsls	r3, r3, #2
 800d874:	440b      	add	r3, r1
 800d876:	331c      	adds	r3, #28
 800d878:	2210      	movs	r2, #16
 800d87a:	601a      	str	r2, [r3, #0]
 800d87c:	e035      	b.n	800d8ea <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800d87e:	4b42      	ldr	r3, [pc, #264]	@ (800d988 <USBD_CDC_Init+0x1e4>)
 800d880:	7819      	ldrb	r1, [r3, #0]
 800d882:	2340      	movs	r3, #64	@ 0x40
 800d884:	2202      	movs	r2, #2
 800d886:	6878      	ldr	r0, [r7, #4]
 800d888:	f010 fa11 	bl	801dcae <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800d88c:	4b3e      	ldr	r3, [pc, #248]	@ (800d988 <USBD_CDC_Init+0x1e4>)
 800d88e:	781b      	ldrb	r3, [r3, #0]
 800d890:	f003 020f 	and.w	r2, r3, #15
 800d894:	6879      	ldr	r1, [r7, #4]
 800d896:	4613      	mov	r3, r2
 800d898:	009b      	lsls	r3, r3, #2
 800d89a:	4413      	add	r3, r2
 800d89c:	009b      	lsls	r3, r3, #2
 800d89e:	440b      	add	r3, r1
 800d8a0:	3323      	adds	r3, #35	@ 0x23
 800d8a2:	2201      	movs	r2, #1
 800d8a4:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d8a6:	4b39      	ldr	r3, [pc, #228]	@ (800d98c <USBD_CDC_Init+0x1e8>)
 800d8a8:	7819      	ldrb	r1, [r3, #0]
 800d8aa:	2340      	movs	r3, #64	@ 0x40
 800d8ac:	2202      	movs	r2, #2
 800d8ae:	6878      	ldr	r0, [r7, #4]
 800d8b0:	f010 f9fd 	bl	801dcae <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d8b4:	4b35      	ldr	r3, [pc, #212]	@ (800d98c <USBD_CDC_Init+0x1e8>)
 800d8b6:	781b      	ldrb	r3, [r3, #0]
 800d8b8:	f003 020f 	and.w	r2, r3, #15
 800d8bc:	6879      	ldr	r1, [r7, #4]
 800d8be:	4613      	mov	r3, r2
 800d8c0:	009b      	lsls	r3, r3, #2
 800d8c2:	4413      	add	r3, r2
 800d8c4:	009b      	lsls	r3, r3, #2
 800d8c6:	440b      	add	r3, r1
 800d8c8:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800d8cc:	2201      	movs	r2, #1
 800d8ce:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800d8d0:	4b2f      	ldr	r3, [pc, #188]	@ (800d990 <USBD_CDC_Init+0x1ec>)
 800d8d2:	781b      	ldrb	r3, [r3, #0]
 800d8d4:	f003 020f 	and.w	r2, r3, #15
 800d8d8:	6879      	ldr	r1, [r7, #4]
 800d8da:	4613      	mov	r3, r2
 800d8dc:	009b      	lsls	r3, r3, #2
 800d8de:	4413      	add	r3, r2
 800d8e0:	009b      	lsls	r3, r3, #2
 800d8e2:	440b      	add	r3, r1
 800d8e4:	331c      	adds	r3, #28
 800d8e6:	2210      	movs	r2, #16
 800d8e8:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d8ea:	4b29      	ldr	r3, [pc, #164]	@ (800d990 <USBD_CDC_Init+0x1ec>)
 800d8ec:	7819      	ldrb	r1, [r3, #0]
 800d8ee:	2308      	movs	r3, #8
 800d8f0:	2203      	movs	r2, #3
 800d8f2:	6878      	ldr	r0, [r7, #4]
 800d8f4:	f010 f9db 	bl	801dcae <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800d8f8:	4b25      	ldr	r3, [pc, #148]	@ (800d990 <USBD_CDC_Init+0x1ec>)
 800d8fa:	781b      	ldrb	r3, [r3, #0]
 800d8fc:	f003 020f 	and.w	r2, r3, #15
 800d900:	6879      	ldr	r1, [r7, #4]
 800d902:	4613      	mov	r3, r2
 800d904:	009b      	lsls	r3, r3, #2
 800d906:	4413      	add	r3, r2
 800d908:	009b      	lsls	r3, r3, #2
 800d90a:	440b      	add	r3, r1
 800d90c:	3323      	adds	r3, #35	@ 0x23
 800d90e:	2201      	movs	r2, #1
 800d910:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	2200      	movs	r2, #0
 800d916:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d920:	687a      	ldr	r2, [r7, #4]
 800d922:	33b0      	adds	r3, #176	@ 0xb0
 800d924:	009b      	lsls	r3, r3, #2
 800d926:	4413      	add	r3, r2
 800d928:	685b      	ldr	r3, [r3, #4]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	2200      	movs	r2, #0
 800d932:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	2200      	movs	r2, #0
 800d93a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800d944:	2b00      	cmp	r3, #0
 800d946:	d101      	bne.n	800d94c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800d948:	2302      	movs	r3, #2
 800d94a:	e018      	b.n	800d97e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	7c1b      	ldrb	r3, [r3, #16]
 800d950:	2b00      	cmp	r3, #0
 800d952:	d10a      	bne.n	800d96a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d954:	4b0d      	ldr	r3, [pc, #52]	@ (800d98c <USBD_CDC_Init+0x1e8>)
 800d956:	7819      	ldrb	r1, [r3, #0]
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d95e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d962:	6878      	ldr	r0, [r7, #4]
 800d964:	f010 fa92 	bl	801de8c <USBD_LL_PrepareReceive>
 800d968:	e008      	b.n	800d97c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d96a:	4b08      	ldr	r3, [pc, #32]	@ (800d98c <USBD_CDC_Init+0x1e8>)
 800d96c:	7819      	ldrb	r1, [r3, #0]
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d974:	2340      	movs	r3, #64	@ 0x40
 800d976:	6878      	ldr	r0, [r7, #4]
 800d978:	f010 fa88 	bl	801de8c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d97c:	2300      	movs	r3, #0
}
 800d97e:	4618      	mov	r0, r3
 800d980:	3710      	adds	r7, #16
 800d982:	46bd      	mov	sp, r7
 800d984:	bd80      	pop	{r7, pc}
 800d986:	bf00      	nop
 800d988:	2000009b 	.word	0x2000009b
 800d98c:	2000009c 	.word	0x2000009c
 800d990:	2000009d 	.word	0x2000009d

0800d994 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d994:	b580      	push	{r7, lr}
 800d996:	b082      	sub	sp, #8
 800d998:	af00      	add	r7, sp, #0
 800d99a:	6078      	str	r0, [r7, #4]
 800d99c:	460b      	mov	r3, r1
 800d99e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800d9a0:	4b3a      	ldr	r3, [pc, #232]	@ (800da8c <USBD_CDC_DeInit+0xf8>)
 800d9a2:	781b      	ldrb	r3, [r3, #0]
 800d9a4:	4619      	mov	r1, r3
 800d9a6:	6878      	ldr	r0, [r7, #4]
 800d9a8:	f010 f9a7 	bl	801dcfa <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800d9ac:	4b37      	ldr	r3, [pc, #220]	@ (800da8c <USBD_CDC_DeInit+0xf8>)
 800d9ae:	781b      	ldrb	r3, [r3, #0]
 800d9b0:	f003 020f 	and.w	r2, r3, #15
 800d9b4:	6879      	ldr	r1, [r7, #4]
 800d9b6:	4613      	mov	r3, r2
 800d9b8:	009b      	lsls	r3, r3, #2
 800d9ba:	4413      	add	r3, r2
 800d9bc:	009b      	lsls	r3, r3, #2
 800d9be:	440b      	add	r3, r1
 800d9c0:	3323      	adds	r3, #35	@ 0x23
 800d9c2:	2200      	movs	r2, #0
 800d9c4:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800d9c6:	4b32      	ldr	r3, [pc, #200]	@ (800da90 <USBD_CDC_DeInit+0xfc>)
 800d9c8:	781b      	ldrb	r3, [r3, #0]
 800d9ca:	4619      	mov	r1, r3
 800d9cc:	6878      	ldr	r0, [r7, #4]
 800d9ce:	f010 f994 	bl	801dcfa <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800d9d2:	4b2f      	ldr	r3, [pc, #188]	@ (800da90 <USBD_CDC_DeInit+0xfc>)
 800d9d4:	781b      	ldrb	r3, [r3, #0]
 800d9d6:	f003 020f 	and.w	r2, r3, #15
 800d9da:	6879      	ldr	r1, [r7, #4]
 800d9dc:	4613      	mov	r3, r2
 800d9de:	009b      	lsls	r3, r3, #2
 800d9e0:	4413      	add	r3, r2
 800d9e2:	009b      	lsls	r3, r3, #2
 800d9e4:	440b      	add	r3, r1
 800d9e6:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800d9ea:	2200      	movs	r2, #0
 800d9ec:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800d9ee:	4b29      	ldr	r3, [pc, #164]	@ (800da94 <USBD_CDC_DeInit+0x100>)
 800d9f0:	781b      	ldrb	r3, [r3, #0]
 800d9f2:	4619      	mov	r1, r3
 800d9f4:	6878      	ldr	r0, [r7, #4]
 800d9f6:	f010 f980 	bl	801dcfa <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800d9fa:	4b26      	ldr	r3, [pc, #152]	@ (800da94 <USBD_CDC_DeInit+0x100>)
 800d9fc:	781b      	ldrb	r3, [r3, #0]
 800d9fe:	f003 020f 	and.w	r2, r3, #15
 800da02:	6879      	ldr	r1, [r7, #4]
 800da04:	4613      	mov	r3, r2
 800da06:	009b      	lsls	r3, r3, #2
 800da08:	4413      	add	r3, r2
 800da0a:	009b      	lsls	r3, r3, #2
 800da0c:	440b      	add	r3, r1
 800da0e:	3323      	adds	r3, #35	@ 0x23
 800da10:	2200      	movs	r2, #0
 800da12:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800da14:	4b1f      	ldr	r3, [pc, #124]	@ (800da94 <USBD_CDC_DeInit+0x100>)
 800da16:	781b      	ldrb	r3, [r3, #0]
 800da18:	f003 020f 	and.w	r2, r3, #15
 800da1c:	6879      	ldr	r1, [r7, #4]
 800da1e:	4613      	mov	r3, r2
 800da20:	009b      	lsls	r3, r3, #2
 800da22:	4413      	add	r3, r2
 800da24:	009b      	lsls	r3, r3, #2
 800da26:	440b      	add	r3, r1
 800da28:	331c      	adds	r3, #28
 800da2a:	2200      	movs	r2, #0
 800da2c:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	32b0      	adds	r2, #176	@ 0xb0
 800da38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d01f      	beq.n	800da80 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800da46:	687a      	ldr	r2, [r7, #4]
 800da48:	33b0      	adds	r3, #176	@ 0xb0
 800da4a:	009b      	lsls	r3, r3, #2
 800da4c:	4413      	add	r3, r2
 800da4e:	685b      	ldr	r3, [r3, #4]
 800da50:	685b      	ldr	r3, [r3, #4]
 800da52:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	32b0      	adds	r2, #176	@ 0xb0
 800da5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da62:	4618      	mov	r0, r3
 800da64:	f010 fa54 	bl	801df10 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	32b0      	adds	r2, #176	@ 0xb0
 800da72:	2100      	movs	r1, #0
 800da74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	2200      	movs	r2, #0
 800da7c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800da80:	2300      	movs	r3, #0
}
 800da82:	4618      	mov	r0, r3
 800da84:	3708      	adds	r7, #8
 800da86:	46bd      	mov	sp, r7
 800da88:	bd80      	pop	{r7, pc}
 800da8a:	bf00      	nop
 800da8c:	2000009b 	.word	0x2000009b
 800da90:	2000009c 	.word	0x2000009c
 800da94:	2000009d 	.word	0x2000009d

0800da98 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800da98:	b580      	push	{r7, lr}
 800da9a:	b086      	sub	sp, #24
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	6078      	str	r0, [r7, #4]
 800daa0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	32b0      	adds	r2, #176	@ 0xb0
 800daac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dab0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800dab2:	2300      	movs	r3, #0
 800dab4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800dab6:	2300      	movs	r3, #0
 800dab8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800daba:	2300      	movs	r3, #0
 800dabc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800dabe:	693b      	ldr	r3, [r7, #16]
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d101      	bne.n	800dac8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800dac4:	2303      	movs	r3, #3
 800dac6:	e0bf      	b.n	800dc48 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dac8:	683b      	ldr	r3, [r7, #0]
 800daca:	781b      	ldrb	r3, [r3, #0]
 800dacc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d050      	beq.n	800db76 <USBD_CDC_Setup+0xde>
 800dad4:	2b20      	cmp	r3, #32
 800dad6:	f040 80af 	bne.w	800dc38 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800dada:	683b      	ldr	r3, [r7, #0]
 800dadc:	88db      	ldrh	r3, [r3, #6]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d03a      	beq.n	800db58 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800dae2:	683b      	ldr	r3, [r7, #0]
 800dae4:	781b      	ldrb	r3, [r3, #0]
 800dae6:	b25b      	sxtb	r3, r3
 800dae8:	2b00      	cmp	r3, #0
 800daea:	da1b      	bge.n	800db24 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800daf2:	687a      	ldr	r2, [r7, #4]
 800daf4:	33b0      	adds	r3, #176	@ 0xb0
 800daf6:	009b      	lsls	r3, r3, #2
 800daf8:	4413      	add	r3, r2
 800dafa:	685b      	ldr	r3, [r3, #4]
 800dafc:	689b      	ldr	r3, [r3, #8]
 800dafe:	683a      	ldr	r2, [r7, #0]
 800db00:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800db02:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800db04:	683a      	ldr	r2, [r7, #0]
 800db06:	88d2      	ldrh	r2, [r2, #6]
 800db08:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800db0a:	683b      	ldr	r3, [r7, #0]
 800db0c:	88db      	ldrh	r3, [r3, #6]
 800db0e:	2b07      	cmp	r3, #7
 800db10:	bf28      	it	cs
 800db12:	2307      	movcs	r3, #7
 800db14:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800db16:	693b      	ldr	r3, [r7, #16]
 800db18:	89fa      	ldrh	r2, [r7, #14]
 800db1a:	4619      	mov	r1, r3
 800db1c:	6878      	ldr	r0, [r7, #4]
 800db1e:	f001 fda9 	bl	800f674 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800db22:	e090      	b.n	800dc46 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800db24:	683b      	ldr	r3, [r7, #0]
 800db26:	785a      	ldrb	r2, [r3, #1]
 800db28:	693b      	ldr	r3, [r7, #16]
 800db2a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800db2e:	683b      	ldr	r3, [r7, #0]
 800db30:	88db      	ldrh	r3, [r3, #6]
 800db32:	2b3f      	cmp	r3, #63	@ 0x3f
 800db34:	d803      	bhi.n	800db3e <USBD_CDC_Setup+0xa6>
 800db36:	683b      	ldr	r3, [r7, #0]
 800db38:	88db      	ldrh	r3, [r3, #6]
 800db3a:	b2da      	uxtb	r2, r3
 800db3c:	e000      	b.n	800db40 <USBD_CDC_Setup+0xa8>
 800db3e:	2240      	movs	r2, #64	@ 0x40
 800db40:	693b      	ldr	r3, [r7, #16]
 800db42:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800db46:	6939      	ldr	r1, [r7, #16]
 800db48:	693b      	ldr	r3, [r7, #16]
 800db4a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800db4e:	461a      	mov	r2, r3
 800db50:	6878      	ldr	r0, [r7, #4]
 800db52:	f001 fdbe 	bl	800f6d2 <USBD_CtlPrepareRx>
      break;
 800db56:	e076      	b.n	800dc46 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800db5e:	687a      	ldr	r2, [r7, #4]
 800db60:	33b0      	adds	r3, #176	@ 0xb0
 800db62:	009b      	lsls	r3, r3, #2
 800db64:	4413      	add	r3, r2
 800db66:	685b      	ldr	r3, [r3, #4]
 800db68:	689b      	ldr	r3, [r3, #8]
 800db6a:	683a      	ldr	r2, [r7, #0]
 800db6c:	7850      	ldrb	r0, [r2, #1]
 800db6e:	2200      	movs	r2, #0
 800db70:	6839      	ldr	r1, [r7, #0]
 800db72:	4798      	blx	r3
      break;
 800db74:	e067      	b.n	800dc46 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800db76:	683b      	ldr	r3, [r7, #0]
 800db78:	785b      	ldrb	r3, [r3, #1]
 800db7a:	2b0b      	cmp	r3, #11
 800db7c:	d851      	bhi.n	800dc22 <USBD_CDC_Setup+0x18a>
 800db7e:	a201      	add	r2, pc, #4	@ (adr r2, 800db84 <USBD_CDC_Setup+0xec>)
 800db80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db84:	0800dbb5 	.word	0x0800dbb5
 800db88:	0800dc31 	.word	0x0800dc31
 800db8c:	0800dc23 	.word	0x0800dc23
 800db90:	0800dc23 	.word	0x0800dc23
 800db94:	0800dc23 	.word	0x0800dc23
 800db98:	0800dc23 	.word	0x0800dc23
 800db9c:	0800dc23 	.word	0x0800dc23
 800dba0:	0800dc23 	.word	0x0800dc23
 800dba4:	0800dc23 	.word	0x0800dc23
 800dba8:	0800dc23 	.word	0x0800dc23
 800dbac:	0800dbdf 	.word	0x0800dbdf
 800dbb0:	0800dc09 	.word	0x0800dc09
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dbba:	b2db      	uxtb	r3, r3
 800dbbc:	2b03      	cmp	r3, #3
 800dbbe:	d107      	bne.n	800dbd0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800dbc0:	f107 030a 	add.w	r3, r7, #10
 800dbc4:	2202      	movs	r2, #2
 800dbc6:	4619      	mov	r1, r3
 800dbc8:	6878      	ldr	r0, [r7, #4]
 800dbca:	f001 fd53 	bl	800f674 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800dbce:	e032      	b.n	800dc36 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800dbd0:	6839      	ldr	r1, [r7, #0]
 800dbd2:	6878      	ldr	r0, [r7, #4]
 800dbd4:	f001 fcd1 	bl	800f57a <USBD_CtlError>
            ret = USBD_FAIL;
 800dbd8:	2303      	movs	r3, #3
 800dbda:	75fb      	strb	r3, [r7, #23]
          break;
 800dbdc:	e02b      	b.n	800dc36 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dbe4:	b2db      	uxtb	r3, r3
 800dbe6:	2b03      	cmp	r3, #3
 800dbe8:	d107      	bne.n	800dbfa <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800dbea:	f107 030d 	add.w	r3, r7, #13
 800dbee:	2201      	movs	r2, #1
 800dbf0:	4619      	mov	r1, r3
 800dbf2:	6878      	ldr	r0, [r7, #4]
 800dbf4:	f001 fd3e 	bl	800f674 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800dbf8:	e01d      	b.n	800dc36 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800dbfa:	6839      	ldr	r1, [r7, #0]
 800dbfc:	6878      	ldr	r0, [r7, #4]
 800dbfe:	f001 fcbc 	bl	800f57a <USBD_CtlError>
            ret = USBD_FAIL;
 800dc02:	2303      	movs	r3, #3
 800dc04:	75fb      	strb	r3, [r7, #23]
          break;
 800dc06:	e016      	b.n	800dc36 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dc0e:	b2db      	uxtb	r3, r3
 800dc10:	2b03      	cmp	r3, #3
 800dc12:	d00f      	beq.n	800dc34 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800dc14:	6839      	ldr	r1, [r7, #0]
 800dc16:	6878      	ldr	r0, [r7, #4]
 800dc18:	f001 fcaf 	bl	800f57a <USBD_CtlError>
            ret = USBD_FAIL;
 800dc1c:	2303      	movs	r3, #3
 800dc1e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800dc20:	e008      	b.n	800dc34 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800dc22:	6839      	ldr	r1, [r7, #0]
 800dc24:	6878      	ldr	r0, [r7, #4]
 800dc26:	f001 fca8 	bl	800f57a <USBD_CtlError>
          ret = USBD_FAIL;
 800dc2a:	2303      	movs	r3, #3
 800dc2c:	75fb      	strb	r3, [r7, #23]
          break;
 800dc2e:	e002      	b.n	800dc36 <USBD_CDC_Setup+0x19e>
          break;
 800dc30:	bf00      	nop
 800dc32:	e008      	b.n	800dc46 <USBD_CDC_Setup+0x1ae>
          break;
 800dc34:	bf00      	nop
      }
      break;
 800dc36:	e006      	b.n	800dc46 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800dc38:	6839      	ldr	r1, [r7, #0]
 800dc3a:	6878      	ldr	r0, [r7, #4]
 800dc3c:	f001 fc9d 	bl	800f57a <USBD_CtlError>
      ret = USBD_FAIL;
 800dc40:	2303      	movs	r3, #3
 800dc42:	75fb      	strb	r3, [r7, #23]
      break;
 800dc44:	bf00      	nop
  }

  return (uint8_t)ret;
 800dc46:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc48:	4618      	mov	r0, r3
 800dc4a:	3718      	adds	r7, #24
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	bd80      	pop	{r7, pc}

0800dc50 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800dc50:	b580      	push	{r7, lr}
 800dc52:	b084      	sub	sp, #16
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	6078      	str	r0, [r7, #4]
 800dc58:	460b      	mov	r3, r1
 800dc5a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800dc62:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	32b0      	adds	r2, #176	@ 0xb0
 800dc6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d101      	bne.n	800dc7a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800dc76:	2303      	movs	r3, #3
 800dc78:	e065      	b.n	800dd46 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	32b0      	adds	r2, #176	@ 0xb0
 800dc84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc88:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800dc8a:	78fb      	ldrb	r3, [r7, #3]
 800dc8c:	f003 020f 	and.w	r2, r3, #15
 800dc90:	6879      	ldr	r1, [r7, #4]
 800dc92:	4613      	mov	r3, r2
 800dc94:	009b      	lsls	r3, r3, #2
 800dc96:	4413      	add	r3, r2
 800dc98:	009b      	lsls	r3, r3, #2
 800dc9a:	440b      	add	r3, r1
 800dc9c:	3314      	adds	r3, #20
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d02f      	beq.n	800dd04 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800dca4:	78fb      	ldrb	r3, [r7, #3]
 800dca6:	f003 020f 	and.w	r2, r3, #15
 800dcaa:	6879      	ldr	r1, [r7, #4]
 800dcac:	4613      	mov	r3, r2
 800dcae:	009b      	lsls	r3, r3, #2
 800dcb0:	4413      	add	r3, r2
 800dcb2:	009b      	lsls	r3, r3, #2
 800dcb4:	440b      	add	r3, r1
 800dcb6:	3314      	adds	r3, #20
 800dcb8:	681a      	ldr	r2, [r3, #0]
 800dcba:	78fb      	ldrb	r3, [r7, #3]
 800dcbc:	f003 010f 	and.w	r1, r3, #15
 800dcc0:	68f8      	ldr	r0, [r7, #12]
 800dcc2:	460b      	mov	r3, r1
 800dcc4:	00db      	lsls	r3, r3, #3
 800dcc6:	440b      	add	r3, r1
 800dcc8:	009b      	lsls	r3, r3, #2
 800dcca:	4403      	add	r3, r0
 800dccc:	331c      	adds	r3, #28
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	fbb2 f1f3 	udiv	r1, r2, r3
 800dcd4:	fb01 f303 	mul.w	r3, r1, r3
 800dcd8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d112      	bne.n	800dd04 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800dcde:	78fb      	ldrb	r3, [r7, #3]
 800dce0:	f003 020f 	and.w	r2, r3, #15
 800dce4:	6879      	ldr	r1, [r7, #4]
 800dce6:	4613      	mov	r3, r2
 800dce8:	009b      	lsls	r3, r3, #2
 800dcea:	4413      	add	r3, r2
 800dcec:	009b      	lsls	r3, r3, #2
 800dcee:	440b      	add	r3, r1
 800dcf0:	3314      	adds	r3, #20
 800dcf2:	2200      	movs	r2, #0
 800dcf4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800dcf6:	78f9      	ldrb	r1, [r7, #3]
 800dcf8:	2300      	movs	r3, #0
 800dcfa:	2200      	movs	r2, #0
 800dcfc:	6878      	ldr	r0, [r7, #4]
 800dcfe:	f010 f8a4 	bl	801de4a <USBD_LL_Transmit>
 800dd02:	e01f      	b.n	800dd44 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800dd04:	68bb      	ldr	r3, [r7, #8]
 800dd06:	2200      	movs	r2, #0
 800dd08:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dd12:	687a      	ldr	r2, [r7, #4]
 800dd14:	33b0      	adds	r3, #176	@ 0xb0
 800dd16:	009b      	lsls	r3, r3, #2
 800dd18:	4413      	add	r3, r2
 800dd1a:	685b      	ldr	r3, [r3, #4]
 800dd1c:	691b      	ldr	r3, [r3, #16]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d010      	beq.n	800dd44 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dd28:	687a      	ldr	r2, [r7, #4]
 800dd2a:	33b0      	adds	r3, #176	@ 0xb0
 800dd2c:	009b      	lsls	r3, r3, #2
 800dd2e:	4413      	add	r3, r2
 800dd30:	685b      	ldr	r3, [r3, #4]
 800dd32:	691b      	ldr	r3, [r3, #16]
 800dd34:	68ba      	ldr	r2, [r7, #8]
 800dd36:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800dd3a:	68ba      	ldr	r2, [r7, #8]
 800dd3c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800dd40:	78fa      	ldrb	r2, [r7, #3]
 800dd42:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800dd44:	2300      	movs	r3, #0
}
 800dd46:	4618      	mov	r0, r3
 800dd48:	3710      	adds	r7, #16
 800dd4a:	46bd      	mov	sp, r7
 800dd4c:	bd80      	pop	{r7, pc}

0800dd4e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800dd4e:	b580      	push	{r7, lr}
 800dd50:	b084      	sub	sp, #16
 800dd52:	af00      	add	r7, sp, #0
 800dd54:	6078      	str	r0, [r7, #4]
 800dd56:	460b      	mov	r3, r1
 800dd58:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	32b0      	adds	r2, #176	@ 0xb0
 800dd64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd68:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	32b0      	adds	r2, #176	@ 0xb0
 800dd74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d101      	bne.n	800dd80 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800dd7c:	2303      	movs	r3, #3
 800dd7e:	e01a      	b.n	800ddb6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800dd80:	78fb      	ldrb	r3, [r7, #3]
 800dd82:	4619      	mov	r1, r3
 800dd84:	6878      	ldr	r0, [r7, #4]
 800dd86:	f010 f8a2 	bl	801dece <USBD_LL_GetRxDataSize>
 800dd8a:	4602      	mov	r2, r0
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dd98:	687a      	ldr	r2, [r7, #4]
 800dd9a:	33b0      	adds	r3, #176	@ 0xb0
 800dd9c:	009b      	lsls	r3, r3, #2
 800dd9e:	4413      	add	r3, r2
 800dda0:	685b      	ldr	r3, [r3, #4]
 800dda2:	68db      	ldr	r3, [r3, #12]
 800dda4:	68fa      	ldr	r2, [r7, #12]
 800dda6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800ddaa:	68fa      	ldr	r2, [r7, #12]
 800ddac:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800ddb0:	4611      	mov	r1, r2
 800ddb2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ddb4:	2300      	movs	r3, #0
}
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	3710      	adds	r7, #16
 800ddba:	46bd      	mov	sp, r7
 800ddbc:	bd80      	pop	{r7, pc}

0800ddbe <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ddbe:	b580      	push	{r7, lr}
 800ddc0:	b084      	sub	sp, #16
 800ddc2:	af00      	add	r7, sp, #0
 800ddc4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	32b0      	adds	r2, #176	@ 0xb0
 800ddd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ddd4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d101      	bne.n	800dde0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800dddc:	2303      	movs	r3, #3
 800ddde:	e024      	b.n	800de2a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dde6:	687a      	ldr	r2, [r7, #4]
 800dde8:	33b0      	adds	r3, #176	@ 0xb0
 800ddea:	009b      	lsls	r3, r3, #2
 800ddec:	4413      	add	r3, r2
 800ddee:	685b      	ldr	r3, [r3, #4]
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d019      	beq.n	800de28 <USBD_CDC_EP0_RxReady+0x6a>
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800ddfa:	2bff      	cmp	r3, #255	@ 0xff
 800ddfc:	d014      	beq.n	800de28 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800de04:	687a      	ldr	r2, [r7, #4]
 800de06:	33b0      	adds	r3, #176	@ 0xb0
 800de08:	009b      	lsls	r3, r3, #2
 800de0a:	4413      	add	r3, r2
 800de0c:	685b      	ldr	r3, [r3, #4]
 800de0e:	689b      	ldr	r3, [r3, #8]
 800de10:	68fa      	ldr	r2, [r7, #12]
 800de12:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800de16:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800de18:	68fa      	ldr	r2, [r7, #12]
 800de1a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800de1e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	22ff      	movs	r2, #255	@ 0xff
 800de24:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800de28:	2300      	movs	r3, #0
}
 800de2a:	4618      	mov	r0, r3
 800de2c:	3710      	adds	r7, #16
 800de2e:	46bd      	mov	sp, r7
 800de30:	bd80      	pop	{r7, pc}
	...

0800de34 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800de34:	b580      	push	{r7, lr}
 800de36:	b086      	sub	sp, #24
 800de38:	af00      	add	r7, sp, #0
 800de3a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800de3c:	2182      	movs	r1, #130	@ 0x82
 800de3e:	4818      	ldr	r0, [pc, #96]	@ (800dea0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800de40:	f000 fd62 	bl	800e908 <USBD_GetEpDesc>
 800de44:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800de46:	2101      	movs	r1, #1
 800de48:	4815      	ldr	r0, [pc, #84]	@ (800dea0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800de4a:	f000 fd5d 	bl	800e908 <USBD_GetEpDesc>
 800de4e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800de50:	2181      	movs	r1, #129	@ 0x81
 800de52:	4813      	ldr	r0, [pc, #76]	@ (800dea0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800de54:	f000 fd58 	bl	800e908 <USBD_GetEpDesc>
 800de58:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800de5a:	697b      	ldr	r3, [r7, #20]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d002      	beq.n	800de66 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800de60:	697b      	ldr	r3, [r7, #20]
 800de62:	2210      	movs	r2, #16
 800de64:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800de66:	693b      	ldr	r3, [r7, #16]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d006      	beq.n	800de7a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800de6c:	693b      	ldr	r3, [r7, #16]
 800de6e:	2200      	movs	r2, #0
 800de70:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800de74:	711a      	strb	r2, [r3, #4]
 800de76:	2200      	movs	r2, #0
 800de78:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d006      	beq.n	800de8e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	2200      	movs	r2, #0
 800de84:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800de88:	711a      	strb	r2, [r3, #4]
 800de8a:	2200      	movs	r2, #0
 800de8c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	2243      	movs	r2, #67	@ 0x43
 800de92:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800de94:	4b02      	ldr	r3, [pc, #8]	@ (800dea0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800de96:	4618      	mov	r0, r3
 800de98:	3718      	adds	r7, #24
 800de9a:	46bd      	mov	sp, r7
 800de9c:	bd80      	pop	{r7, pc}
 800de9e:	bf00      	nop
 800dea0:	20000058 	.word	0x20000058

0800dea4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800dea4:	b580      	push	{r7, lr}
 800dea6:	b086      	sub	sp, #24
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800deac:	2182      	movs	r1, #130	@ 0x82
 800deae:	4818      	ldr	r0, [pc, #96]	@ (800df10 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800deb0:	f000 fd2a 	bl	800e908 <USBD_GetEpDesc>
 800deb4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800deb6:	2101      	movs	r1, #1
 800deb8:	4815      	ldr	r0, [pc, #84]	@ (800df10 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800deba:	f000 fd25 	bl	800e908 <USBD_GetEpDesc>
 800debe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800dec0:	2181      	movs	r1, #129	@ 0x81
 800dec2:	4813      	ldr	r0, [pc, #76]	@ (800df10 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800dec4:	f000 fd20 	bl	800e908 <USBD_GetEpDesc>
 800dec8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800deca:	697b      	ldr	r3, [r7, #20]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d002      	beq.n	800ded6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800ded0:	697b      	ldr	r3, [r7, #20]
 800ded2:	2210      	movs	r2, #16
 800ded4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ded6:	693b      	ldr	r3, [r7, #16]
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d006      	beq.n	800deea <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800dedc:	693b      	ldr	r3, [r7, #16]
 800dede:	2200      	movs	r2, #0
 800dee0:	711a      	strb	r2, [r3, #4]
 800dee2:	2200      	movs	r2, #0
 800dee4:	f042 0202 	orr.w	r2, r2, #2
 800dee8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	2b00      	cmp	r3, #0
 800deee:	d006      	beq.n	800defe <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	2200      	movs	r2, #0
 800def4:	711a      	strb	r2, [r3, #4]
 800def6:	2200      	movs	r2, #0
 800def8:	f042 0202 	orr.w	r2, r2, #2
 800defc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	2243      	movs	r2, #67	@ 0x43
 800df02:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800df04:	4b02      	ldr	r3, [pc, #8]	@ (800df10 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800df06:	4618      	mov	r0, r3
 800df08:	3718      	adds	r7, #24
 800df0a:	46bd      	mov	sp, r7
 800df0c:	bd80      	pop	{r7, pc}
 800df0e:	bf00      	nop
 800df10:	20000058 	.word	0x20000058

0800df14 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800df14:	b580      	push	{r7, lr}
 800df16:	b086      	sub	sp, #24
 800df18:	af00      	add	r7, sp, #0
 800df1a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800df1c:	2182      	movs	r1, #130	@ 0x82
 800df1e:	4818      	ldr	r0, [pc, #96]	@ (800df80 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800df20:	f000 fcf2 	bl	800e908 <USBD_GetEpDesc>
 800df24:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800df26:	2101      	movs	r1, #1
 800df28:	4815      	ldr	r0, [pc, #84]	@ (800df80 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800df2a:	f000 fced 	bl	800e908 <USBD_GetEpDesc>
 800df2e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800df30:	2181      	movs	r1, #129	@ 0x81
 800df32:	4813      	ldr	r0, [pc, #76]	@ (800df80 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800df34:	f000 fce8 	bl	800e908 <USBD_GetEpDesc>
 800df38:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800df3a:	697b      	ldr	r3, [r7, #20]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d002      	beq.n	800df46 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800df40:	697b      	ldr	r3, [r7, #20]
 800df42:	2210      	movs	r2, #16
 800df44:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800df46:	693b      	ldr	r3, [r7, #16]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d006      	beq.n	800df5a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800df4c:	693b      	ldr	r3, [r7, #16]
 800df4e:	2200      	movs	r2, #0
 800df50:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800df54:	711a      	strb	r2, [r3, #4]
 800df56:	2200      	movs	r2, #0
 800df58:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d006      	beq.n	800df6e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	2200      	movs	r2, #0
 800df64:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800df68:	711a      	strb	r2, [r3, #4]
 800df6a:	2200      	movs	r2, #0
 800df6c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	2243      	movs	r2, #67	@ 0x43
 800df72:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800df74:	4b02      	ldr	r3, [pc, #8]	@ (800df80 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800df76:	4618      	mov	r0, r3
 800df78:	3718      	adds	r7, #24
 800df7a:	46bd      	mov	sp, r7
 800df7c:	bd80      	pop	{r7, pc}
 800df7e:	bf00      	nop
 800df80:	20000058 	.word	0x20000058

0800df84 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800df84:	b480      	push	{r7}
 800df86:	b083      	sub	sp, #12
 800df88:	af00      	add	r7, sp, #0
 800df8a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	220a      	movs	r2, #10
 800df90:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800df92:	4b03      	ldr	r3, [pc, #12]	@ (800dfa0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800df94:	4618      	mov	r0, r3
 800df96:	370c      	adds	r7, #12
 800df98:	46bd      	mov	sp, r7
 800df9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df9e:	4770      	bx	lr
 800dfa0:	20000014 	.word	0x20000014

0800dfa4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800dfa4:	b480      	push	{r7}
 800dfa6:	b083      	sub	sp, #12
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	6078      	str	r0, [r7, #4]
 800dfac:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800dfae:	683b      	ldr	r3, [r7, #0]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d101      	bne.n	800dfb8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800dfb4:	2303      	movs	r3, #3
 800dfb6:	e009      	b.n	800dfcc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dfbe:	687a      	ldr	r2, [r7, #4]
 800dfc0:	33b0      	adds	r3, #176	@ 0xb0
 800dfc2:	009b      	lsls	r3, r3, #2
 800dfc4:	4413      	add	r3, r2
 800dfc6:	683a      	ldr	r2, [r7, #0]
 800dfc8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800dfca:	2300      	movs	r3, #0
}
 800dfcc:	4618      	mov	r0, r3
 800dfce:	370c      	adds	r7, #12
 800dfd0:	46bd      	mov	sp, r7
 800dfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfd6:	4770      	bx	lr

0800dfd8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800dfd8:	b480      	push	{r7}
 800dfda:	b087      	sub	sp, #28
 800dfdc:	af00      	add	r7, sp, #0
 800dfde:	60f8      	str	r0, [r7, #12]
 800dfe0:	60b9      	str	r1, [r7, #8]
 800dfe2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	32b0      	adds	r2, #176	@ 0xb0
 800dfee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dff2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800dff4:	697b      	ldr	r3, [r7, #20]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d101      	bne.n	800dffe <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800dffa:	2303      	movs	r3, #3
 800dffc:	e008      	b.n	800e010 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800dffe:	697b      	ldr	r3, [r7, #20]
 800e000:	68ba      	ldr	r2, [r7, #8]
 800e002:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800e006:	697b      	ldr	r3, [r7, #20]
 800e008:	687a      	ldr	r2, [r7, #4]
 800e00a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800e00e:	2300      	movs	r3, #0
}
 800e010:	4618      	mov	r0, r3
 800e012:	371c      	adds	r7, #28
 800e014:	46bd      	mov	sp, r7
 800e016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e01a:	4770      	bx	lr

0800e01c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800e01c:	b480      	push	{r7}
 800e01e:	b085      	sub	sp, #20
 800e020:	af00      	add	r7, sp, #0
 800e022:	6078      	str	r0, [r7, #4]
 800e024:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	32b0      	adds	r2, #176	@ 0xb0
 800e030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e034:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d101      	bne.n	800e040 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800e03c:	2303      	movs	r3, #3
 800e03e:	e004      	b.n	800e04a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	683a      	ldr	r2, [r7, #0]
 800e044:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800e048:	2300      	movs	r3, #0
}
 800e04a:	4618      	mov	r0, r3
 800e04c:	3714      	adds	r7, #20
 800e04e:	46bd      	mov	sp, r7
 800e050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e054:	4770      	bx	lr
	...

0800e058 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800e058:	b580      	push	{r7, lr}
 800e05a:	b084      	sub	sp, #16
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	32b0      	adds	r2, #176	@ 0xb0
 800e06a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e06e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800e070:	2301      	movs	r3, #1
 800e072:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800e074:	68bb      	ldr	r3, [r7, #8]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d101      	bne.n	800e07e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800e07a:	2303      	movs	r3, #3
 800e07c:	e025      	b.n	800e0ca <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800e07e:	68bb      	ldr	r3, [r7, #8]
 800e080:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800e084:	2b00      	cmp	r3, #0
 800e086:	d11f      	bne.n	800e0c8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800e088:	68bb      	ldr	r3, [r7, #8]
 800e08a:	2201      	movs	r2, #1
 800e08c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800e090:	4b10      	ldr	r3, [pc, #64]	@ (800e0d4 <USBD_CDC_TransmitPacket+0x7c>)
 800e092:	781b      	ldrb	r3, [r3, #0]
 800e094:	f003 020f 	and.w	r2, r3, #15
 800e098:	68bb      	ldr	r3, [r7, #8]
 800e09a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800e09e:	6878      	ldr	r0, [r7, #4]
 800e0a0:	4613      	mov	r3, r2
 800e0a2:	009b      	lsls	r3, r3, #2
 800e0a4:	4413      	add	r3, r2
 800e0a6:	009b      	lsls	r3, r3, #2
 800e0a8:	4403      	add	r3, r0
 800e0aa:	3314      	adds	r3, #20
 800e0ac:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800e0ae:	4b09      	ldr	r3, [pc, #36]	@ (800e0d4 <USBD_CDC_TransmitPacket+0x7c>)
 800e0b0:	7819      	ldrb	r1, [r3, #0]
 800e0b2:	68bb      	ldr	r3, [r7, #8]
 800e0b4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800e0b8:	68bb      	ldr	r3, [r7, #8]
 800e0ba:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800e0be:	6878      	ldr	r0, [r7, #4]
 800e0c0:	f00f fec3 	bl	801de4a <USBD_LL_Transmit>

    ret = USBD_OK;
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800e0c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0ca:	4618      	mov	r0, r3
 800e0cc:	3710      	adds	r7, #16
 800e0ce:	46bd      	mov	sp, r7
 800e0d0:	bd80      	pop	{r7, pc}
 800e0d2:	bf00      	nop
 800e0d4:	2000009b 	.word	0x2000009b

0800e0d8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e0d8:	b580      	push	{r7, lr}
 800e0da:	b084      	sub	sp, #16
 800e0dc:	af00      	add	r7, sp, #0
 800e0de:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	32b0      	adds	r2, #176	@ 0xb0
 800e0ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0ee:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	32b0      	adds	r2, #176	@ 0xb0
 800e0fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d101      	bne.n	800e106 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800e102:	2303      	movs	r3, #3
 800e104:	e018      	b.n	800e138 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	7c1b      	ldrb	r3, [r3, #16]
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d10a      	bne.n	800e124 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e10e:	4b0c      	ldr	r3, [pc, #48]	@ (800e140 <USBD_CDC_ReceivePacket+0x68>)
 800e110:	7819      	ldrb	r1, [r3, #0]
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e118:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e11c:	6878      	ldr	r0, [r7, #4]
 800e11e:	f00f feb5 	bl	801de8c <USBD_LL_PrepareReceive>
 800e122:	e008      	b.n	800e136 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e124:	4b06      	ldr	r3, [pc, #24]	@ (800e140 <USBD_CDC_ReceivePacket+0x68>)
 800e126:	7819      	ldrb	r1, [r3, #0]
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e12e:	2340      	movs	r3, #64	@ 0x40
 800e130:	6878      	ldr	r0, [r7, #4]
 800e132:	f00f feab 	bl	801de8c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e136:	2300      	movs	r3, #0
}
 800e138:	4618      	mov	r0, r3
 800e13a:	3710      	adds	r7, #16
 800e13c:	46bd      	mov	sp, r7
 800e13e:	bd80      	pop	{r7, pc}
 800e140:	2000009c 	.word	0x2000009c

0800e144 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e144:	b580      	push	{r7, lr}
 800e146:	b086      	sub	sp, #24
 800e148:	af00      	add	r7, sp, #0
 800e14a:	60f8      	str	r0, [r7, #12]
 800e14c:	60b9      	str	r1, [r7, #8]
 800e14e:	4613      	mov	r3, r2
 800e150:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	2b00      	cmp	r3, #0
 800e156:	d101      	bne.n	800e15c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e158:	2303      	movs	r3, #3
 800e15a:	e01f      	b.n	800e19c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	2200      	movs	r2, #0
 800e160:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	2200      	movs	r2, #0
 800e168:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	2200      	movs	r2, #0
 800e170:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e174:	68bb      	ldr	r3, [r7, #8]
 800e176:	2b00      	cmp	r3, #0
 800e178:	d003      	beq.n	800e182 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	68ba      	ldr	r2, [r7, #8]
 800e17e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	2201      	movs	r2, #1
 800e186:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	79fa      	ldrb	r2, [r7, #7]
 800e18e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e190:	68f8      	ldr	r0, [r7, #12]
 800e192:	f00f fd25 	bl	801dbe0 <USBD_LL_Init>
 800e196:	4603      	mov	r3, r0
 800e198:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e19a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e19c:	4618      	mov	r0, r3
 800e19e:	3718      	adds	r7, #24
 800e1a0:	46bd      	mov	sp, r7
 800e1a2:	bd80      	pop	{r7, pc}

0800e1a4 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	b084      	sub	sp, #16
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	6078      	str	r0, [r7, #4]
 800e1ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e1ae:	2300      	movs	r3, #0
 800e1b0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e1b2:	683b      	ldr	r3, [r7, #0]
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d101      	bne.n	800e1bc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e1b8:	2303      	movs	r3, #3
 800e1ba:	e025      	b.n	800e208 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	683a      	ldr	r2, [r7, #0]
 800e1c0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	32ae      	adds	r2, #174	@ 0xae
 800e1ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e1d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d00f      	beq.n	800e1f8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	32ae      	adds	r2, #174	@ 0xae
 800e1e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e1e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1e8:	f107 020e 	add.w	r2, r7, #14
 800e1ec:	4610      	mov	r0, r2
 800e1ee:	4798      	blx	r3
 800e1f0:	4602      	mov	r2, r0
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e1fe:	1c5a      	adds	r2, r3, #1
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800e206:	2300      	movs	r3, #0
}
 800e208:	4618      	mov	r0, r3
 800e20a:	3710      	adds	r7, #16
 800e20c:	46bd      	mov	sp, r7
 800e20e:	bd80      	pop	{r7, pc}

0800e210 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e210:	b580      	push	{r7, lr}
 800e212:	b082      	sub	sp, #8
 800e214:	af00      	add	r7, sp, #0
 800e216:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e218:	6878      	ldr	r0, [r7, #4]
 800e21a:	f00f fd2d 	bl	801dc78 <USBD_LL_Start>
 800e21e:	4603      	mov	r3, r0
}
 800e220:	4618      	mov	r0, r3
 800e222:	3708      	adds	r7, #8
 800e224:	46bd      	mov	sp, r7
 800e226:	bd80      	pop	{r7, pc}

0800e228 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800e228:	b480      	push	{r7}
 800e22a:	b083      	sub	sp, #12
 800e22c:	af00      	add	r7, sp, #0
 800e22e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e230:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800e232:	4618      	mov	r0, r3
 800e234:	370c      	adds	r7, #12
 800e236:	46bd      	mov	sp, r7
 800e238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e23c:	4770      	bx	lr

0800e23e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e23e:	b580      	push	{r7, lr}
 800e240:	b084      	sub	sp, #16
 800e242:	af00      	add	r7, sp, #0
 800e244:	6078      	str	r0, [r7, #4]
 800e246:	460b      	mov	r3, r1
 800e248:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e24a:	2300      	movs	r3, #0
 800e24c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e254:	2b00      	cmp	r3, #0
 800e256:	d009      	beq.n	800e26c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	78fa      	ldrb	r2, [r7, #3]
 800e262:	4611      	mov	r1, r2
 800e264:	6878      	ldr	r0, [r7, #4]
 800e266:	4798      	blx	r3
 800e268:	4603      	mov	r3, r0
 800e26a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e26c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e26e:	4618      	mov	r0, r3
 800e270:	3710      	adds	r7, #16
 800e272:	46bd      	mov	sp, r7
 800e274:	bd80      	pop	{r7, pc}

0800e276 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e276:	b580      	push	{r7, lr}
 800e278:	b084      	sub	sp, #16
 800e27a:	af00      	add	r7, sp, #0
 800e27c:	6078      	str	r0, [r7, #4]
 800e27e:	460b      	mov	r3, r1
 800e280:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e282:	2300      	movs	r3, #0
 800e284:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e28c:	685b      	ldr	r3, [r3, #4]
 800e28e:	78fa      	ldrb	r2, [r7, #3]
 800e290:	4611      	mov	r1, r2
 800e292:	6878      	ldr	r0, [r7, #4]
 800e294:	4798      	blx	r3
 800e296:	4603      	mov	r3, r0
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d001      	beq.n	800e2a0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800e29c:	2303      	movs	r3, #3
 800e29e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e2a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2a2:	4618      	mov	r0, r3
 800e2a4:	3710      	adds	r7, #16
 800e2a6:	46bd      	mov	sp, r7
 800e2a8:	bd80      	pop	{r7, pc}

0800e2aa <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e2aa:	b580      	push	{r7, lr}
 800e2ac:	b084      	sub	sp, #16
 800e2ae:	af00      	add	r7, sp, #0
 800e2b0:	6078      	str	r0, [r7, #4]
 800e2b2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e2ba:	6839      	ldr	r1, [r7, #0]
 800e2bc:	4618      	mov	r0, r3
 800e2be:	f001 f922 	bl	800f506 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	2201      	movs	r2, #1
 800e2c6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800e2d0:	461a      	mov	r2, r3
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e2de:	f003 031f 	and.w	r3, r3, #31
 800e2e2:	2b02      	cmp	r3, #2
 800e2e4:	d01a      	beq.n	800e31c <USBD_LL_SetupStage+0x72>
 800e2e6:	2b02      	cmp	r3, #2
 800e2e8:	d822      	bhi.n	800e330 <USBD_LL_SetupStage+0x86>
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d002      	beq.n	800e2f4 <USBD_LL_SetupStage+0x4a>
 800e2ee:	2b01      	cmp	r3, #1
 800e2f0:	d00a      	beq.n	800e308 <USBD_LL_SetupStage+0x5e>
 800e2f2:	e01d      	b.n	800e330 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e2fa:	4619      	mov	r1, r3
 800e2fc:	6878      	ldr	r0, [r7, #4]
 800e2fe:	f000 fb77 	bl	800e9f0 <USBD_StdDevReq>
 800e302:	4603      	mov	r3, r0
 800e304:	73fb      	strb	r3, [r7, #15]
      break;
 800e306:	e020      	b.n	800e34a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e30e:	4619      	mov	r1, r3
 800e310:	6878      	ldr	r0, [r7, #4]
 800e312:	f000 fbdf 	bl	800ead4 <USBD_StdItfReq>
 800e316:	4603      	mov	r3, r0
 800e318:	73fb      	strb	r3, [r7, #15]
      break;
 800e31a:	e016      	b.n	800e34a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e322:	4619      	mov	r1, r3
 800e324:	6878      	ldr	r0, [r7, #4]
 800e326:	f000 fc41 	bl	800ebac <USBD_StdEPReq>
 800e32a:	4603      	mov	r3, r0
 800e32c:	73fb      	strb	r3, [r7, #15]
      break;
 800e32e:	e00c      	b.n	800e34a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e336:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800e33a:	b2db      	uxtb	r3, r3
 800e33c:	4619      	mov	r1, r3
 800e33e:	6878      	ldr	r0, [r7, #4]
 800e340:	f00f fcfa 	bl	801dd38 <USBD_LL_StallEP>
 800e344:	4603      	mov	r3, r0
 800e346:	73fb      	strb	r3, [r7, #15]
      break;
 800e348:	bf00      	nop
  }

  return ret;
 800e34a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e34c:	4618      	mov	r0, r3
 800e34e:	3710      	adds	r7, #16
 800e350:	46bd      	mov	sp, r7
 800e352:	bd80      	pop	{r7, pc}

0800e354 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e354:	b580      	push	{r7, lr}
 800e356:	b086      	sub	sp, #24
 800e358:	af00      	add	r7, sp, #0
 800e35a:	60f8      	str	r0, [r7, #12]
 800e35c:	460b      	mov	r3, r1
 800e35e:	607a      	str	r2, [r7, #4]
 800e360:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800e362:	2300      	movs	r3, #0
 800e364:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800e366:	7afb      	ldrb	r3, [r7, #11]
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d177      	bne.n	800e45c <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800e372:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800e37a:	2b03      	cmp	r3, #3
 800e37c:	f040 80a1 	bne.w	800e4c2 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 800e380:	693b      	ldr	r3, [r7, #16]
 800e382:	685b      	ldr	r3, [r3, #4]
 800e384:	693a      	ldr	r2, [r7, #16]
 800e386:	8992      	ldrh	r2, [r2, #12]
 800e388:	4293      	cmp	r3, r2
 800e38a:	d91c      	bls.n	800e3c6 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 800e38c:	693b      	ldr	r3, [r7, #16]
 800e38e:	685b      	ldr	r3, [r3, #4]
 800e390:	693a      	ldr	r2, [r7, #16]
 800e392:	8992      	ldrh	r2, [r2, #12]
 800e394:	1a9a      	subs	r2, r3, r2
 800e396:	693b      	ldr	r3, [r7, #16]
 800e398:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800e39a:	693b      	ldr	r3, [r7, #16]
 800e39c:	691b      	ldr	r3, [r3, #16]
 800e39e:	693a      	ldr	r2, [r7, #16]
 800e3a0:	8992      	ldrh	r2, [r2, #12]
 800e3a2:	441a      	add	r2, r3
 800e3a4:	693b      	ldr	r3, [r7, #16]
 800e3a6:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 800e3a8:	693b      	ldr	r3, [r7, #16]
 800e3aa:	6919      	ldr	r1, [r3, #16]
 800e3ac:	693b      	ldr	r3, [r7, #16]
 800e3ae:	899b      	ldrh	r3, [r3, #12]
 800e3b0:	461a      	mov	r2, r3
 800e3b2:	693b      	ldr	r3, [r7, #16]
 800e3b4:	685b      	ldr	r3, [r3, #4]
 800e3b6:	4293      	cmp	r3, r2
 800e3b8:	bf38      	it	cc
 800e3ba:	4613      	movcc	r3, r2
 800e3bc:	461a      	mov	r2, r3
 800e3be:	68f8      	ldr	r0, [r7, #12]
 800e3c0:	f001 f9a8 	bl	800f714 <USBD_CtlContinueRx>
 800e3c4:	e07d      	b.n	800e4c2 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e3cc:	f003 031f 	and.w	r3, r3, #31
 800e3d0:	2b02      	cmp	r3, #2
 800e3d2:	d014      	beq.n	800e3fe <USBD_LL_DataOutStage+0xaa>
 800e3d4:	2b02      	cmp	r3, #2
 800e3d6:	d81d      	bhi.n	800e414 <USBD_LL_DataOutStage+0xc0>
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d002      	beq.n	800e3e2 <USBD_LL_DataOutStage+0x8e>
 800e3dc:	2b01      	cmp	r3, #1
 800e3de:	d003      	beq.n	800e3e8 <USBD_LL_DataOutStage+0x94>
 800e3e0:	e018      	b.n	800e414 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800e3e2:	2300      	movs	r3, #0
 800e3e4:	75bb      	strb	r3, [r7, #22]
            break;
 800e3e6:	e018      	b.n	800e41a <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800e3ee:	b2db      	uxtb	r3, r3
 800e3f0:	4619      	mov	r1, r3
 800e3f2:	68f8      	ldr	r0, [r7, #12]
 800e3f4:	f000 fa6e 	bl	800e8d4 <USBD_CoreFindIF>
 800e3f8:	4603      	mov	r3, r0
 800e3fa:	75bb      	strb	r3, [r7, #22]
            break;
 800e3fc:	e00d      	b.n	800e41a <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800e404:	b2db      	uxtb	r3, r3
 800e406:	4619      	mov	r1, r3
 800e408:	68f8      	ldr	r0, [r7, #12]
 800e40a:	f000 fa70 	bl	800e8ee <USBD_CoreFindEP>
 800e40e:	4603      	mov	r3, r0
 800e410:	75bb      	strb	r3, [r7, #22]
            break;
 800e412:	e002      	b.n	800e41a <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800e414:	2300      	movs	r3, #0
 800e416:	75bb      	strb	r3, [r7, #22]
            break;
 800e418:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800e41a:	7dbb      	ldrb	r3, [r7, #22]
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d119      	bne.n	800e454 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e426:	b2db      	uxtb	r3, r3
 800e428:	2b03      	cmp	r3, #3
 800e42a:	d113      	bne.n	800e454 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800e42c:	7dba      	ldrb	r2, [r7, #22]
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	32ae      	adds	r2, #174	@ 0xae
 800e432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e436:	691b      	ldr	r3, [r3, #16]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d00b      	beq.n	800e454 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 800e43c:	7dba      	ldrb	r2, [r7, #22]
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800e444:	7dba      	ldrb	r2, [r7, #22]
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	32ae      	adds	r2, #174	@ 0xae
 800e44a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e44e:	691b      	ldr	r3, [r3, #16]
 800e450:	68f8      	ldr	r0, [r7, #12]
 800e452:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800e454:	68f8      	ldr	r0, [r7, #12]
 800e456:	f001 f96e 	bl	800f736 <USBD_CtlSendStatus>
 800e45a:	e032      	b.n	800e4c2 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800e45c:	7afb      	ldrb	r3, [r7, #11]
 800e45e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e462:	b2db      	uxtb	r3, r3
 800e464:	4619      	mov	r1, r3
 800e466:	68f8      	ldr	r0, [r7, #12]
 800e468:	f000 fa41 	bl	800e8ee <USBD_CoreFindEP>
 800e46c:	4603      	mov	r3, r0
 800e46e:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e470:	7dbb      	ldrb	r3, [r7, #22]
 800e472:	2bff      	cmp	r3, #255	@ 0xff
 800e474:	d025      	beq.n	800e4c2 <USBD_LL_DataOutStage+0x16e>
 800e476:	7dbb      	ldrb	r3, [r7, #22]
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d122      	bne.n	800e4c2 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e482:	b2db      	uxtb	r3, r3
 800e484:	2b03      	cmp	r3, #3
 800e486:	d117      	bne.n	800e4b8 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800e488:	7dba      	ldrb	r2, [r7, #22]
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	32ae      	adds	r2, #174	@ 0xae
 800e48e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e492:	699b      	ldr	r3, [r3, #24]
 800e494:	2b00      	cmp	r3, #0
 800e496:	d00f      	beq.n	800e4b8 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 800e498:	7dba      	ldrb	r2, [r7, #22]
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800e4a0:	7dba      	ldrb	r2, [r7, #22]
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	32ae      	adds	r2, #174	@ 0xae
 800e4a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e4aa:	699b      	ldr	r3, [r3, #24]
 800e4ac:	7afa      	ldrb	r2, [r7, #11]
 800e4ae:	4611      	mov	r1, r2
 800e4b0:	68f8      	ldr	r0, [r7, #12]
 800e4b2:	4798      	blx	r3
 800e4b4:	4603      	mov	r3, r0
 800e4b6:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800e4b8:	7dfb      	ldrb	r3, [r7, #23]
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d001      	beq.n	800e4c2 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800e4be:	7dfb      	ldrb	r3, [r7, #23]
 800e4c0:	e000      	b.n	800e4c4 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800e4c2:	2300      	movs	r3, #0
}
 800e4c4:	4618      	mov	r0, r3
 800e4c6:	3718      	adds	r7, #24
 800e4c8:	46bd      	mov	sp, r7
 800e4ca:	bd80      	pop	{r7, pc}

0800e4cc <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e4cc:	b580      	push	{r7, lr}
 800e4ce:	b086      	sub	sp, #24
 800e4d0:	af00      	add	r7, sp, #0
 800e4d2:	60f8      	str	r0, [r7, #12]
 800e4d4:	460b      	mov	r3, r1
 800e4d6:	607a      	str	r2, [r7, #4]
 800e4d8:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800e4da:	7afb      	ldrb	r3, [r7, #11]
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d178      	bne.n	800e5d2 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	3314      	adds	r3, #20
 800e4e4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800e4ec:	2b02      	cmp	r3, #2
 800e4ee:	d163      	bne.n	800e5b8 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 800e4f0:	693b      	ldr	r3, [r7, #16]
 800e4f2:	685b      	ldr	r3, [r3, #4]
 800e4f4:	693a      	ldr	r2, [r7, #16]
 800e4f6:	8992      	ldrh	r2, [r2, #12]
 800e4f8:	4293      	cmp	r3, r2
 800e4fa:	d91c      	bls.n	800e536 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 800e4fc:	693b      	ldr	r3, [r7, #16]
 800e4fe:	685b      	ldr	r3, [r3, #4]
 800e500:	693a      	ldr	r2, [r7, #16]
 800e502:	8992      	ldrh	r2, [r2, #12]
 800e504:	1a9a      	subs	r2, r3, r2
 800e506:	693b      	ldr	r3, [r7, #16]
 800e508:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800e50a:	693b      	ldr	r3, [r7, #16]
 800e50c:	691b      	ldr	r3, [r3, #16]
 800e50e:	693a      	ldr	r2, [r7, #16]
 800e510:	8992      	ldrh	r2, [r2, #12]
 800e512:	441a      	add	r2, r3
 800e514:	693b      	ldr	r3, [r7, #16]
 800e516:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 800e518:	693b      	ldr	r3, [r7, #16]
 800e51a:	6919      	ldr	r1, [r3, #16]
 800e51c:	693b      	ldr	r3, [r7, #16]
 800e51e:	685b      	ldr	r3, [r3, #4]
 800e520:	461a      	mov	r2, r3
 800e522:	68f8      	ldr	r0, [r7, #12]
 800e524:	f001 f8c4 	bl	800f6b0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e528:	2300      	movs	r3, #0
 800e52a:	2200      	movs	r2, #0
 800e52c:	2100      	movs	r1, #0
 800e52e:	68f8      	ldr	r0, [r7, #12]
 800e530:	f00f fcac 	bl	801de8c <USBD_LL_PrepareReceive>
 800e534:	e040      	b.n	800e5b8 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e536:	693b      	ldr	r3, [r7, #16]
 800e538:	899b      	ldrh	r3, [r3, #12]
 800e53a:	461a      	mov	r2, r3
 800e53c:	693b      	ldr	r3, [r7, #16]
 800e53e:	685b      	ldr	r3, [r3, #4]
 800e540:	429a      	cmp	r2, r3
 800e542:	d11c      	bne.n	800e57e <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 800e544:	693b      	ldr	r3, [r7, #16]
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	693a      	ldr	r2, [r7, #16]
 800e54a:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800e54c:	4293      	cmp	r3, r2
 800e54e:	d316      	bcc.n	800e57e <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 800e550:	693b      	ldr	r3, [r7, #16]
 800e552:	681a      	ldr	r2, [r3, #0]
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e55a:	429a      	cmp	r2, r3
 800e55c:	d20f      	bcs.n	800e57e <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e55e:	2200      	movs	r2, #0
 800e560:	2100      	movs	r1, #0
 800e562:	68f8      	ldr	r0, [r7, #12]
 800e564:	f001 f8a4 	bl	800f6b0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	2200      	movs	r2, #0
 800e56c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e570:	2300      	movs	r3, #0
 800e572:	2200      	movs	r2, #0
 800e574:	2100      	movs	r1, #0
 800e576:	68f8      	ldr	r0, [r7, #12]
 800e578:	f00f fc88 	bl	801de8c <USBD_LL_PrepareReceive>
 800e57c:	e01c      	b.n	800e5b8 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e584:	b2db      	uxtb	r3, r3
 800e586:	2b03      	cmp	r3, #3
 800e588:	d10f      	bne.n	800e5aa <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e590:	68db      	ldr	r3, [r3, #12]
 800e592:	2b00      	cmp	r3, #0
 800e594:	d009      	beq.n	800e5aa <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	2200      	movs	r2, #0
 800e59a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e5a4:	68db      	ldr	r3, [r3, #12]
 800e5a6:	68f8      	ldr	r0, [r7, #12]
 800e5a8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e5aa:	2180      	movs	r1, #128	@ 0x80
 800e5ac:	68f8      	ldr	r0, [r7, #12]
 800e5ae:	f00f fbc3 	bl	801dd38 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800e5b2:	68f8      	ldr	r0, [r7, #12]
 800e5b4:	f001 f8d2 	bl	800f75c <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d03a      	beq.n	800e638 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800e5c2:	68f8      	ldr	r0, [r7, #12]
 800e5c4:	f7ff fe30 	bl	800e228 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	2200      	movs	r2, #0
 800e5cc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800e5d0:	e032      	b.n	800e638 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800e5d2:	7afb      	ldrb	r3, [r7, #11]
 800e5d4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800e5d8:	b2db      	uxtb	r3, r3
 800e5da:	4619      	mov	r1, r3
 800e5dc:	68f8      	ldr	r0, [r7, #12]
 800e5de:	f000 f986 	bl	800e8ee <USBD_CoreFindEP>
 800e5e2:	4603      	mov	r3, r0
 800e5e4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e5e6:	7dfb      	ldrb	r3, [r7, #23]
 800e5e8:	2bff      	cmp	r3, #255	@ 0xff
 800e5ea:	d025      	beq.n	800e638 <USBD_LL_DataInStage+0x16c>
 800e5ec:	7dfb      	ldrb	r3, [r7, #23]
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d122      	bne.n	800e638 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e5f8:	b2db      	uxtb	r3, r3
 800e5fa:	2b03      	cmp	r3, #3
 800e5fc:	d11c      	bne.n	800e638 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800e5fe:	7dfa      	ldrb	r2, [r7, #23]
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	32ae      	adds	r2, #174	@ 0xae
 800e604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e608:	695b      	ldr	r3, [r3, #20]
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d014      	beq.n	800e638 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800e60e:	7dfa      	ldrb	r2, [r7, #23]
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800e616:	7dfa      	ldrb	r2, [r7, #23]
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	32ae      	adds	r2, #174	@ 0xae
 800e61c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e620:	695b      	ldr	r3, [r3, #20]
 800e622:	7afa      	ldrb	r2, [r7, #11]
 800e624:	4611      	mov	r1, r2
 800e626:	68f8      	ldr	r0, [r7, #12]
 800e628:	4798      	blx	r3
 800e62a:	4603      	mov	r3, r0
 800e62c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800e62e:	7dbb      	ldrb	r3, [r7, #22]
 800e630:	2b00      	cmp	r3, #0
 800e632:	d001      	beq.n	800e638 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 800e634:	7dbb      	ldrb	r3, [r7, #22]
 800e636:	e000      	b.n	800e63a <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 800e638:	2300      	movs	r3, #0
}
 800e63a:	4618      	mov	r0, r3
 800e63c:	3718      	adds	r7, #24
 800e63e:	46bd      	mov	sp, r7
 800e640:	bd80      	pop	{r7, pc}

0800e642 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800e642:	b580      	push	{r7, lr}
 800e644:	b084      	sub	sp, #16
 800e646:	af00      	add	r7, sp, #0
 800e648:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800e64a:	2300      	movs	r3, #0
 800e64c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	2201      	movs	r2, #1
 800e652:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	2200      	movs	r2, #0
 800e65a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	2200      	movs	r2, #0
 800e662:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	2200      	movs	r2, #0
 800e668:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	2200      	movs	r2, #0
 800e670:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d014      	beq.n	800e6a8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e684:	685b      	ldr	r3, [r3, #4]
 800e686:	2b00      	cmp	r3, #0
 800e688:	d00e      	beq.n	800e6a8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e690:	685b      	ldr	r3, [r3, #4]
 800e692:	687a      	ldr	r2, [r7, #4]
 800e694:	6852      	ldr	r2, [r2, #4]
 800e696:	b2d2      	uxtb	r2, r2
 800e698:	4611      	mov	r1, r2
 800e69a:	6878      	ldr	r0, [r7, #4]
 800e69c:	4798      	blx	r3
 800e69e:	4603      	mov	r3, r0
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d001      	beq.n	800e6a8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800e6a4:	2303      	movs	r3, #3
 800e6a6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e6a8:	2340      	movs	r3, #64	@ 0x40
 800e6aa:	2200      	movs	r2, #0
 800e6ac:	2100      	movs	r1, #0
 800e6ae:	6878      	ldr	r0, [r7, #4]
 800e6b0:	f00f fafd 	bl	801dcae <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	2201      	movs	r2, #1
 800e6b8:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	2240      	movs	r2, #64	@ 0x40
 800e6c0:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e6c4:	2340      	movs	r3, #64	@ 0x40
 800e6c6:	2200      	movs	r2, #0
 800e6c8:	2180      	movs	r1, #128	@ 0x80
 800e6ca:	6878      	ldr	r0, [r7, #4]
 800e6cc:	f00f faef 	bl	801dcae <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	2201      	movs	r2, #1
 800e6d4:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	2240      	movs	r2, #64	@ 0x40
 800e6dc:	841a      	strh	r2, [r3, #32]

  return ret;
 800e6de:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6e0:	4618      	mov	r0, r3
 800e6e2:	3710      	adds	r7, #16
 800e6e4:	46bd      	mov	sp, r7
 800e6e6:	bd80      	pop	{r7, pc}

0800e6e8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800e6e8:	b480      	push	{r7}
 800e6ea:	b083      	sub	sp, #12
 800e6ec:	af00      	add	r7, sp, #0
 800e6ee:	6078      	str	r0, [r7, #4]
 800e6f0:	460b      	mov	r3, r1
 800e6f2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	78fa      	ldrb	r2, [r7, #3]
 800e6f8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800e6fa:	2300      	movs	r3, #0
}
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	370c      	adds	r7, #12
 800e700:	46bd      	mov	sp, r7
 800e702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e706:	4770      	bx	lr

0800e708 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800e708:	b480      	push	{r7}
 800e70a:	b083      	sub	sp, #12
 800e70c:	af00      	add	r7, sp, #0
 800e70e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e716:	b2db      	uxtb	r3, r3
 800e718:	2b04      	cmp	r3, #4
 800e71a:	d006      	beq.n	800e72a <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e722:	b2da      	uxtb	r2, r3
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	2204      	movs	r2, #4
 800e72e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800e732:	2300      	movs	r3, #0
}
 800e734:	4618      	mov	r0, r3
 800e736:	370c      	adds	r7, #12
 800e738:	46bd      	mov	sp, r7
 800e73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e73e:	4770      	bx	lr

0800e740 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800e740:	b480      	push	{r7}
 800e742:	b083      	sub	sp, #12
 800e744:	af00      	add	r7, sp, #0
 800e746:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e74e:	b2db      	uxtb	r3, r3
 800e750:	2b04      	cmp	r3, #4
 800e752:	d106      	bne.n	800e762 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800e75a:	b2da      	uxtb	r2, r3
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800e762:	2300      	movs	r3, #0
}
 800e764:	4618      	mov	r0, r3
 800e766:	370c      	adds	r7, #12
 800e768:	46bd      	mov	sp, r7
 800e76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e76e:	4770      	bx	lr

0800e770 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800e770:	b580      	push	{r7, lr}
 800e772:	b082      	sub	sp, #8
 800e774:	af00      	add	r7, sp, #0
 800e776:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e77e:	b2db      	uxtb	r3, r3
 800e780:	2b03      	cmp	r3, #3
 800e782:	d110      	bne.n	800e7a6 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d00b      	beq.n	800e7a6 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e794:	69db      	ldr	r3, [r3, #28]
 800e796:	2b00      	cmp	r3, #0
 800e798:	d005      	beq.n	800e7a6 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e7a0:	69db      	ldr	r3, [r3, #28]
 800e7a2:	6878      	ldr	r0, [r7, #4]
 800e7a4:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800e7a6:	2300      	movs	r3, #0
}
 800e7a8:	4618      	mov	r0, r3
 800e7aa:	3708      	adds	r7, #8
 800e7ac:	46bd      	mov	sp, r7
 800e7ae:	bd80      	pop	{r7, pc}

0800e7b0 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800e7b0:	b580      	push	{r7, lr}
 800e7b2:	b082      	sub	sp, #8
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	6078      	str	r0, [r7, #4]
 800e7b8:	460b      	mov	r3, r1
 800e7ba:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	32ae      	adds	r2, #174	@ 0xae
 800e7c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d101      	bne.n	800e7d2 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800e7ce:	2303      	movs	r3, #3
 800e7d0:	e01c      	b.n	800e80c <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e7d8:	b2db      	uxtb	r3, r3
 800e7da:	2b03      	cmp	r3, #3
 800e7dc:	d115      	bne.n	800e80a <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	32ae      	adds	r2, #174	@ 0xae
 800e7e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e7ec:	6a1b      	ldr	r3, [r3, #32]
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d00b      	beq.n	800e80a <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	32ae      	adds	r2, #174	@ 0xae
 800e7fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e800:	6a1b      	ldr	r3, [r3, #32]
 800e802:	78fa      	ldrb	r2, [r7, #3]
 800e804:	4611      	mov	r1, r2
 800e806:	6878      	ldr	r0, [r7, #4]
 800e808:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e80a:	2300      	movs	r3, #0
}
 800e80c:	4618      	mov	r0, r3
 800e80e:	3708      	adds	r7, #8
 800e810:	46bd      	mov	sp, r7
 800e812:	bd80      	pop	{r7, pc}

0800e814 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800e814:	b580      	push	{r7, lr}
 800e816:	b082      	sub	sp, #8
 800e818:	af00      	add	r7, sp, #0
 800e81a:	6078      	str	r0, [r7, #4]
 800e81c:	460b      	mov	r3, r1
 800e81e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	32ae      	adds	r2, #174	@ 0xae
 800e82a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d101      	bne.n	800e836 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800e832:	2303      	movs	r3, #3
 800e834:	e01c      	b.n	800e870 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e83c:	b2db      	uxtb	r3, r3
 800e83e:	2b03      	cmp	r3, #3
 800e840:	d115      	bne.n	800e86e <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	32ae      	adds	r2, #174	@ 0xae
 800e84c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e852:	2b00      	cmp	r3, #0
 800e854:	d00b      	beq.n	800e86e <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	32ae      	adds	r2, #174	@ 0xae
 800e860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e866:	78fa      	ldrb	r2, [r7, #3]
 800e868:	4611      	mov	r1, r2
 800e86a:	6878      	ldr	r0, [r7, #4]
 800e86c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e86e:	2300      	movs	r3, #0
}
 800e870:	4618      	mov	r0, r3
 800e872:	3708      	adds	r7, #8
 800e874:	46bd      	mov	sp, r7
 800e876:	bd80      	pop	{r7, pc}

0800e878 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800e878:	b480      	push	{r7}
 800e87a:	b083      	sub	sp, #12
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e880:	2300      	movs	r3, #0
}
 800e882:	4618      	mov	r0, r3
 800e884:	370c      	adds	r7, #12
 800e886:	46bd      	mov	sp, r7
 800e888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e88c:	4770      	bx	lr

0800e88e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800e88e:	b580      	push	{r7, lr}
 800e890:	b084      	sub	sp, #16
 800e892:	af00      	add	r7, sp, #0
 800e894:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800e896:	2300      	movs	r3, #0
 800e898:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	2201      	movs	r2, #1
 800e89e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d00e      	beq.n	800e8ca <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e8b2:	685b      	ldr	r3, [r3, #4]
 800e8b4:	687a      	ldr	r2, [r7, #4]
 800e8b6:	6852      	ldr	r2, [r2, #4]
 800e8b8:	b2d2      	uxtb	r2, r2
 800e8ba:	4611      	mov	r1, r2
 800e8bc:	6878      	ldr	r0, [r7, #4]
 800e8be:	4798      	blx	r3
 800e8c0:	4603      	mov	r3, r0
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d001      	beq.n	800e8ca <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800e8c6:	2303      	movs	r3, #3
 800e8c8:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e8ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8cc:	4618      	mov	r0, r3
 800e8ce:	3710      	adds	r7, #16
 800e8d0:	46bd      	mov	sp, r7
 800e8d2:	bd80      	pop	{r7, pc}

0800e8d4 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e8d4:	b480      	push	{r7}
 800e8d6:	b083      	sub	sp, #12
 800e8d8:	af00      	add	r7, sp, #0
 800e8da:	6078      	str	r0, [r7, #4]
 800e8dc:	460b      	mov	r3, r1
 800e8de:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e8e0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e8e2:	4618      	mov	r0, r3
 800e8e4:	370c      	adds	r7, #12
 800e8e6:	46bd      	mov	sp, r7
 800e8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ec:	4770      	bx	lr

0800e8ee <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e8ee:	b480      	push	{r7}
 800e8f0:	b083      	sub	sp, #12
 800e8f2:	af00      	add	r7, sp, #0
 800e8f4:	6078      	str	r0, [r7, #4]
 800e8f6:	460b      	mov	r3, r1
 800e8f8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e8fa:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e8fc:	4618      	mov	r0, r3
 800e8fe:	370c      	adds	r7, #12
 800e900:	46bd      	mov	sp, r7
 800e902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e906:	4770      	bx	lr

0800e908 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800e908:	b580      	push	{r7, lr}
 800e90a:	b086      	sub	sp, #24
 800e90c:	af00      	add	r7, sp, #0
 800e90e:	6078      	str	r0, [r7, #4]
 800e910:	460b      	mov	r3, r1
 800e912:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800e91c:	2300      	movs	r3, #0
 800e91e:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	885b      	ldrh	r3, [r3, #2]
 800e924:	b29b      	uxth	r3, r3
 800e926:	68fa      	ldr	r2, [r7, #12]
 800e928:	7812      	ldrb	r2, [r2, #0]
 800e92a:	4293      	cmp	r3, r2
 800e92c:	d91f      	bls.n	800e96e <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	781b      	ldrb	r3, [r3, #0]
 800e932:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800e934:	e013      	b.n	800e95e <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800e936:	f107 030a 	add.w	r3, r7, #10
 800e93a:	4619      	mov	r1, r3
 800e93c:	6978      	ldr	r0, [r7, #20]
 800e93e:	f000 f81b 	bl	800e978 <USBD_GetNextDesc>
 800e942:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800e944:	697b      	ldr	r3, [r7, #20]
 800e946:	785b      	ldrb	r3, [r3, #1]
 800e948:	2b05      	cmp	r3, #5
 800e94a:	d108      	bne.n	800e95e <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800e94c:	697b      	ldr	r3, [r7, #20]
 800e94e:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800e950:	693b      	ldr	r3, [r7, #16]
 800e952:	789b      	ldrb	r3, [r3, #2]
 800e954:	78fa      	ldrb	r2, [r7, #3]
 800e956:	429a      	cmp	r2, r3
 800e958:	d008      	beq.n	800e96c <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800e95a:	2300      	movs	r3, #0
 800e95c:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	885b      	ldrh	r3, [r3, #2]
 800e962:	b29a      	uxth	r2, r3
 800e964:	897b      	ldrh	r3, [r7, #10]
 800e966:	429a      	cmp	r2, r3
 800e968:	d8e5      	bhi.n	800e936 <USBD_GetEpDesc+0x2e>
 800e96a:	e000      	b.n	800e96e <USBD_GetEpDesc+0x66>
          break;
 800e96c:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800e96e:	693b      	ldr	r3, [r7, #16]
}
 800e970:	4618      	mov	r0, r3
 800e972:	3718      	adds	r7, #24
 800e974:	46bd      	mov	sp, r7
 800e976:	bd80      	pop	{r7, pc}

0800e978 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800e978:	b480      	push	{r7}
 800e97a:	b085      	sub	sp, #20
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	6078      	str	r0, [r7, #4]
 800e980:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800e986:	683b      	ldr	r3, [r7, #0]
 800e988:	881b      	ldrh	r3, [r3, #0]
 800e98a:	68fa      	ldr	r2, [r7, #12]
 800e98c:	7812      	ldrb	r2, [r2, #0]
 800e98e:	4413      	add	r3, r2
 800e990:	b29a      	uxth	r2, r3
 800e992:	683b      	ldr	r3, [r7, #0]
 800e994:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	781b      	ldrb	r3, [r3, #0]
 800e99a:	461a      	mov	r2, r3
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	4413      	add	r3, r2
 800e9a0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800e9a2:	68fb      	ldr	r3, [r7, #12]
}
 800e9a4:	4618      	mov	r0, r3
 800e9a6:	3714      	adds	r7, #20
 800e9a8:	46bd      	mov	sp, r7
 800e9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ae:	4770      	bx	lr

0800e9b0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800e9b0:	b480      	push	{r7}
 800e9b2:	b087      	sub	sp, #28
 800e9b4:	af00      	add	r7, sp, #0
 800e9b6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800e9bc:	697b      	ldr	r3, [r7, #20]
 800e9be:	781b      	ldrb	r3, [r3, #0]
 800e9c0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800e9c2:	697b      	ldr	r3, [r7, #20]
 800e9c4:	3301      	adds	r3, #1
 800e9c6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800e9c8:	697b      	ldr	r3, [r7, #20]
 800e9ca:	781b      	ldrb	r3, [r3, #0]
 800e9cc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e9ce:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800e9d2:	021b      	lsls	r3, r3, #8
 800e9d4:	b21a      	sxth	r2, r3
 800e9d6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e9da:	4313      	orrs	r3, r2
 800e9dc:	b21b      	sxth	r3, r3
 800e9de:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800e9e0:	89fb      	ldrh	r3, [r7, #14]
}
 800e9e2:	4618      	mov	r0, r3
 800e9e4:	371c      	adds	r7, #28
 800e9e6:	46bd      	mov	sp, r7
 800e9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ec:	4770      	bx	lr
	...

0800e9f0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e9f0:	b580      	push	{r7, lr}
 800e9f2:	b084      	sub	sp, #16
 800e9f4:	af00      	add	r7, sp, #0
 800e9f6:	6078      	str	r0, [r7, #4]
 800e9f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e9fa:	2300      	movs	r3, #0
 800e9fc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e9fe:	683b      	ldr	r3, [r7, #0]
 800ea00:	781b      	ldrb	r3, [r3, #0]
 800ea02:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ea06:	2b40      	cmp	r3, #64	@ 0x40
 800ea08:	d005      	beq.n	800ea16 <USBD_StdDevReq+0x26>
 800ea0a:	2b40      	cmp	r3, #64	@ 0x40
 800ea0c:	d857      	bhi.n	800eabe <USBD_StdDevReq+0xce>
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d00f      	beq.n	800ea32 <USBD_StdDevReq+0x42>
 800ea12:	2b20      	cmp	r3, #32
 800ea14:	d153      	bne.n	800eabe <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	32ae      	adds	r2, #174	@ 0xae
 800ea20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea24:	689b      	ldr	r3, [r3, #8]
 800ea26:	6839      	ldr	r1, [r7, #0]
 800ea28:	6878      	ldr	r0, [r7, #4]
 800ea2a:	4798      	blx	r3
 800ea2c:	4603      	mov	r3, r0
 800ea2e:	73fb      	strb	r3, [r7, #15]
      break;
 800ea30:	e04a      	b.n	800eac8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ea32:	683b      	ldr	r3, [r7, #0]
 800ea34:	785b      	ldrb	r3, [r3, #1]
 800ea36:	2b09      	cmp	r3, #9
 800ea38:	d83b      	bhi.n	800eab2 <USBD_StdDevReq+0xc2>
 800ea3a:	a201      	add	r2, pc, #4	@ (adr r2, 800ea40 <USBD_StdDevReq+0x50>)
 800ea3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea40:	0800ea95 	.word	0x0800ea95
 800ea44:	0800eaa9 	.word	0x0800eaa9
 800ea48:	0800eab3 	.word	0x0800eab3
 800ea4c:	0800ea9f 	.word	0x0800ea9f
 800ea50:	0800eab3 	.word	0x0800eab3
 800ea54:	0800ea73 	.word	0x0800ea73
 800ea58:	0800ea69 	.word	0x0800ea69
 800ea5c:	0800eab3 	.word	0x0800eab3
 800ea60:	0800ea8b 	.word	0x0800ea8b
 800ea64:	0800ea7d 	.word	0x0800ea7d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ea68:	6839      	ldr	r1, [r7, #0]
 800ea6a:	6878      	ldr	r0, [r7, #4]
 800ea6c:	f000 fa3e 	bl	800eeec <USBD_GetDescriptor>
          break;
 800ea70:	e024      	b.n	800eabc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ea72:	6839      	ldr	r1, [r7, #0]
 800ea74:	6878      	ldr	r0, [r7, #4]
 800ea76:	f000 fba3 	bl	800f1c0 <USBD_SetAddress>
          break;
 800ea7a:	e01f      	b.n	800eabc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ea7c:	6839      	ldr	r1, [r7, #0]
 800ea7e:	6878      	ldr	r0, [r7, #4]
 800ea80:	f000 fbe2 	bl	800f248 <USBD_SetConfig>
 800ea84:	4603      	mov	r3, r0
 800ea86:	73fb      	strb	r3, [r7, #15]
          break;
 800ea88:	e018      	b.n	800eabc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ea8a:	6839      	ldr	r1, [r7, #0]
 800ea8c:	6878      	ldr	r0, [r7, #4]
 800ea8e:	f000 fc85 	bl	800f39c <USBD_GetConfig>
          break;
 800ea92:	e013      	b.n	800eabc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ea94:	6839      	ldr	r1, [r7, #0]
 800ea96:	6878      	ldr	r0, [r7, #4]
 800ea98:	f000 fcb6 	bl	800f408 <USBD_GetStatus>
          break;
 800ea9c:	e00e      	b.n	800eabc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ea9e:	6839      	ldr	r1, [r7, #0]
 800eaa0:	6878      	ldr	r0, [r7, #4]
 800eaa2:	f000 fce5 	bl	800f470 <USBD_SetFeature>
          break;
 800eaa6:	e009      	b.n	800eabc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800eaa8:	6839      	ldr	r1, [r7, #0]
 800eaaa:	6878      	ldr	r0, [r7, #4]
 800eaac:	f000 fd09 	bl	800f4c2 <USBD_ClrFeature>
          break;
 800eab0:	e004      	b.n	800eabc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800eab2:	6839      	ldr	r1, [r7, #0]
 800eab4:	6878      	ldr	r0, [r7, #4]
 800eab6:	f000 fd60 	bl	800f57a <USBD_CtlError>
          break;
 800eaba:	bf00      	nop
      }
      break;
 800eabc:	e004      	b.n	800eac8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800eabe:	6839      	ldr	r1, [r7, #0]
 800eac0:	6878      	ldr	r0, [r7, #4]
 800eac2:	f000 fd5a 	bl	800f57a <USBD_CtlError>
      break;
 800eac6:	bf00      	nop
  }

  return ret;
 800eac8:	7bfb      	ldrb	r3, [r7, #15]
}
 800eaca:	4618      	mov	r0, r3
 800eacc:	3710      	adds	r7, #16
 800eace:	46bd      	mov	sp, r7
 800ead0:	bd80      	pop	{r7, pc}
 800ead2:	bf00      	nop

0800ead4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ead4:	b580      	push	{r7, lr}
 800ead6:	b084      	sub	sp, #16
 800ead8:	af00      	add	r7, sp, #0
 800eada:	6078      	str	r0, [r7, #4]
 800eadc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800eade:	2300      	movs	r3, #0
 800eae0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800eae2:	683b      	ldr	r3, [r7, #0]
 800eae4:	781b      	ldrb	r3, [r3, #0]
 800eae6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800eaea:	2b40      	cmp	r3, #64	@ 0x40
 800eaec:	d005      	beq.n	800eafa <USBD_StdItfReq+0x26>
 800eaee:	2b40      	cmp	r3, #64	@ 0x40
 800eaf0:	d852      	bhi.n	800eb98 <USBD_StdItfReq+0xc4>
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d001      	beq.n	800eafa <USBD_StdItfReq+0x26>
 800eaf6:	2b20      	cmp	r3, #32
 800eaf8:	d14e      	bne.n	800eb98 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eb00:	b2db      	uxtb	r3, r3
 800eb02:	3b01      	subs	r3, #1
 800eb04:	2b02      	cmp	r3, #2
 800eb06:	d840      	bhi.n	800eb8a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800eb08:	683b      	ldr	r3, [r7, #0]
 800eb0a:	889b      	ldrh	r3, [r3, #4]
 800eb0c:	b2db      	uxtb	r3, r3
 800eb0e:	2b01      	cmp	r3, #1
 800eb10:	d836      	bhi.n	800eb80 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800eb12:	683b      	ldr	r3, [r7, #0]
 800eb14:	889b      	ldrh	r3, [r3, #4]
 800eb16:	b2db      	uxtb	r3, r3
 800eb18:	4619      	mov	r1, r3
 800eb1a:	6878      	ldr	r0, [r7, #4]
 800eb1c:	f7ff feda 	bl	800e8d4 <USBD_CoreFindIF>
 800eb20:	4603      	mov	r3, r0
 800eb22:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800eb24:	7bbb      	ldrb	r3, [r7, #14]
 800eb26:	2bff      	cmp	r3, #255	@ 0xff
 800eb28:	d01d      	beq.n	800eb66 <USBD_StdItfReq+0x92>
 800eb2a:	7bbb      	ldrb	r3, [r7, #14]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d11a      	bne.n	800eb66 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800eb30:	7bba      	ldrb	r2, [r7, #14]
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	32ae      	adds	r2, #174	@ 0xae
 800eb36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb3a:	689b      	ldr	r3, [r3, #8]
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d00f      	beq.n	800eb60 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800eb40:	7bba      	ldrb	r2, [r7, #14]
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800eb48:	7bba      	ldrb	r2, [r7, #14]
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	32ae      	adds	r2, #174	@ 0xae
 800eb4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb52:	689b      	ldr	r3, [r3, #8]
 800eb54:	6839      	ldr	r1, [r7, #0]
 800eb56:	6878      	ldr	r0, [r7, #4]
 800eb58:	4798      	blx	r3
 800eb5a:	4603      	mov	r3, r0
 800eb5c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800eb5e:	e004      	b.n	800eb6a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800eb60:	2303      	movs	r3, #3
 800eb62:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800eb64:	e001      	b.n	800eb6a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800eb66:	2303      	movs	r3, #3
 800eb68:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800eb6a:	683b      	ldr	r3, [r7, #0]
 800eb6c:	88db      	ldrh	r3, [r3, #6]
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d110      	bne.n	800eb94 <USBD_StdItfReq+0xc0>
 800eb72:	7bfb      	ldrb	r3, [r7, #15]
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d10d      	bne.n	800eb94 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800eb78:	6878      	ldr	r0, [r7, #4]
 800eb7a:	f000 fddc 	bl	800f736 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800eb7e:	e009      	b.n	800eb94 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800eb80:	6839      	ldr	r1, [r7, #0]
 800eb82:	6878      	ldr	r0, [r7, #4]
 800eb84:	f000 fcf9 	bl	800f57a <USBD_CtlError>
          break;
 800eb88:	e004      	b.n	800eb94 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800eb8a:	6839      	ldr	r1, [r7, #0]
 800eb8c:	6878      	ldr	r0, [r7, #4]
 800eb8e:	f000 fcf4 	bl	800f57a <USBD_CtlError>
          break;
 800eb92:	e000      	b.n	800eb96 <USBD_StdItfReq+0xc2>
          break;
 800eb94:	bf00      	nop
      }
      break;
 800eb96:	e004      	b.n	800eba2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800eb98:	6839      	ldr	r1, [r7, #0]
 800eb9a:	6878      	ldr	r0, [r7, #4]
 800eb9c:	f000 fced 	bl	800f57a <USBD_CtlError>
      break;
 800eba0:	bf00      	nop
  }

  return ret;
 800eba2:	7bfb      	ldrb	r3, [r7, #15]
}
 800eba4:	4618      	mov	r0, r3
 800eba6:	3710      	adds	r7, #16
 800eba8:	46bd      	mov	sp, r7
 800ebaa:	bd80      	pop	{r7, pc}

0800ebac <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ebac:	b580      	push	{r7, lr}
 800ebae:	b084      	sub	sp, #16
 800ebb0:	af00      	add	r7, sp, #0
 800ebb2:	6078      	str	r0, [r7, #4]
 800ebb4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800ebb6:	2300      	movs	r3, #0
 800ebb8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800ebba:	683b      	ldr	r3, [r7, #0]
 800ebbc:	889b      	ldrh	r3, [r3, #4]
 800ebbe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ebc0:	683b      	ldr	r3, [r7, #0]
 800ebc2:	781b      	ldrb	r3, [r3, #0]
 800ebc4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ebc8:	2b40      	cmp	r3, #64	@ 0x40
 800ebca:	d007      	beq.n	800ebdc <USBD_StdEPReq+0x30>
 800ebcc:	2b40      	cmp	r3, #64	@ 0x40
 800ebce:	f200 8181 	bhi.w	800eed4 <USBD_StdEPReq+0x328>
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d02a      	beq.n	800ec2c <USBD_StdEPReq+0x80>
 800ebd6:	2b20      	cmp	r3, #32
 800ebd8:	f040 817c 	bne.w	800eed4 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800ebdc:	7bbb      	ldrb	r3, [r7, #14]
 800ebde:	4619      	mov	r1, r3
 800ebe0:	6878      	ldr	r0, [r7, #4]
 800ebe2:	f7ff fe84 	bl	800e8ee <USBD_CoreFindEP>
 800ebe6:	4603      	mov	r3, r0
 800ebe8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ebea:	7b7b      	ldrb	r3, [r7, #13]
 800ebec:	2bff      	cmp	r3, #255	@ 0xff
 800ebee:	f000 8176 	beq.w	800eede <USBD_StdEPReq+0x332>
 800ebf2:	7b7b      	ldrb	r3, [r7, #13]
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	f040 8172 	bne.w	800eede <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 800ebfa:	7b7a      	ldrb	r2, [r7, #13]
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ec02:	7b7a      	ldrb	r2, [r7, #13]
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	32ae      	adds	r2, #174	@ 0xae
 800ec08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec0c:	689b      	ldr	r3, [r3, #8]
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	f000 8165 	beq.w	800eede <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800ec14:	7b7a      	ldrb	r2, [r7, #13]
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	32ae      	adds	r2, #174	@ 0xae
 800ec1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec1e:	689b      	ldr	r3, [r3, #8]
 800ec20:	6839      	ldr	r1, [r7, #0]
 800ec22:	6878      	ldr	r0, [r7, #4]
 800ec24:	4798      	blx	r3
 800ec26:	4603      	mov	r3, r0
 800ec28:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ec2a:	e158      	b.n	800eede <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ec2c:	683b      	ldr	r3, [r7, #0]
 800ec2e:	785b      	ldrb	r3, [r3, #1]
 800ec30:	2b03      	cmp	r3, #3
 800ec32:	d008      	beq.n	800ec46 <USBD_StdEPReq+0x9a>
 800ec34:	2b03      	cmp	r3, #3
 800ec36:	f300 8147 	bgt.w	800eec8 <USBD_StdEPReq+0x31c>
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	f000 809b 	beq.w	800ed76 <USBD_StdEPReq+0x1ca>
 800ec40:	2b01      	cmp	r3, #1
 800ec42:	d03c      	beq.n	800ecbe <USBD_StdEPReq+0x112>
 800ec44:	e140      	b.n	800eec8 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ec4c:	b2db      	uxtb	r3, r3
 800ec4e:	2b02      	cmp	r3, #2
 800ec50:	d002      	beq.n	800ec58 <USBD_StdEPReq+0xac>
 800ec52:	2b03      	cmp	r3, #3
 800ec54:	d016      	beq.n	800ec84 <USBD_StdEPReq+0xd8>
 800ec56:	e02c      	b.n	800ecb2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ec58:	7bbb      	ldrb	r3, [r7, #14]
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d00d      	beq.n	800ec7a <USBD_StdEPReq+0xce>
 800ec5e:	7bbb      	ldrb	r3, [r7, #14]
 800ec60:	2b80      	cmp	r3, #128	@ 0x80
 800ec62:	d00a      	beq.n	800ec7a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ec64:	7bbb      	ldrb	r3, [r7, #14]
 800ec66:	4619      	mov	r1, r3
 800ec68:	6878      	ldr	r0, [r7, #4]
 800ec6a:	f00f f865 	bl	801dd38 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ec6e:	2180      	movs	r1, #128	@ 0x80
 800ec70:	6878      	ldr	r0, [r7, #4]
 800ec72:	f00f f861 	bl	801dd38 <USBD_LL_StallEP>
 800ec76:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ec78:	e020      	b.n	800ecbc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800ec7a:	6839      	ldr	r1, [r7, #0]
 800ec7c:	6878      	ldr	r0, [r7, #4]
 800ec7e:	f000 fc7c 	bl	800f57a <USBD_CtlError>
              break;
 800ec82:	e01b      	b.n	800ecbc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ec84:	683b      	ldr	r3, [r7, #0]
 800ec86:	885b      	ldrh	r3, [r3, #2]
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d10e      	bne.n	800ecaa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ec8c:	7bbb      	ldrb	r3, [r7, #14]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d00b      	beq.n	800ecaa <USBD_StdEPReq+0xfe>
 800ec92:	7bbb      	ldrb	r3, [r7, #14]
 800ec94:	2b80      	cmp	r3, #128	@ 0x80
 800ec96:	d008      	beq.n	800ecaa <USBD_StdEPReq+0xfe>
 800ec98:	683b      	ldr	r3, [r7, #0]
 800ec9a:	88db      	ldrh	r3, [r3, #6]
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d104      	bne.n	800ecaa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800eca0:	7bbb      	ldrb	r3, [r7, #14]
 800eca2:	4619      	mov	r1, r3
 800eca4:	6878      	ldr	r0, [r7, #4]
 800eca6:	f00f f847 	bl	801dd38 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ecaa:	6878      	ldr	r0, [r7, #4]
 800ecac:	f000 fd43 	bl	800f736 <USBD_CtlSendStatus>

              break;
 800ecb0:	e004      	b.n	800ecbc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800ecb2:	6839      	ldr	r1, [r7, #0]
 800ecb4:	6878      	ldr	r0, [r7, #4]
 800ecb6:	f000 fc60 	bl	800f57a <USBD_CtlError>
              break;
 800ecba:	bf00      	nop
          }
          break;
 800ecbc:	e109      	b.n	800eed2 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ecc4:	b2db      	uxtb	r3, r3
 800ecc6:	2b02      	cmp	r3, #2
 800ecc8:	d002      	beq.n	800ecd0 <USBD_StdEPReq+0x124>
 800ecca:	2b03      	cmp	r3, #3
 800eccc:	d016      	beq.n	800ecfc <USBD_StdEPReq+0x150>
 800ecce:	e04b      	b.n	800ed68 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ecd0:	7bbb      	ldrb	r3, [r7, #14]
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d00d      	beq.n	800ecf2 <USBD_StdEPReq+0x146>
 800ecd6:	7bbb      	ldrb	r3, [r7, #14]
 800ecd8:	2b80      	cmp	r3, #128	@ 0x80
 800ecda:	d00a      	beq.n	800ecf2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ecdc:	7bbb      	ldrb	r3, [r7, #14]
 800ecde:	4619      	mov	r1, r3
 800ece0:	6878      	ldr	r0, [r7, #4]
 800ece2:	f00f f829 	bl	801dd38 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ece6:	2180      	movs	r1, #128	@ 0x80
 800ece8:	6878      	ldr	r0, [r7, #4]
 800ecea:	f00f f825 	bl	801dd38 <USBD_LL_StallEP>
 800ecee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ecf0:	e040      	b.n	800ed74 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ecf2:	6839      	ldr	r1, [r7, #0]
 800ecf4:	6878      	ldr	r0, [r7, #4]
 800ecf6:	f000 fc40 	bl	800f57a <USBD_CtlError>
              break;
 800ecfa:	e03b      	b.n	800ed74 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ecfc:	683b      	ldr	r3, [r7, #0]
 800ecfe:	885b      	ldrh	r3, [r3, #2]
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d136      	bne.n	800ed72 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ed04:	7bbb      	ldrb	r3, [r7, #14]
 800ed06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d004      	beq.n	800ed18 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ed0e:	7bbb      	ldrb	r3, [r7, #14]
 800ed10:	4619      	mov	r1, r3
 800ed12:	6878      	ldr	r0, [r7, #4]
 800ed14:	f00f f82f 	bl	801dd76 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ed18:	6878      	ldr	r0, [r7, #4]
 800ed1a:	f000 fd0c 	bl	800f736 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800ed1e:	7bbb      	ldrb	r3, [r7, #14]
 800ed20:	4619      	mov	r1, r3
 800ed22:	6878      	ldr	r0, [r7, #4]
 800ed24:	f7ff fde3 	bl	800e8ee <USBD_CoreFindEP>
 800ed28:	4603      	mov	r3, r0
 800ed2a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ed2c:	7b7b      	ldrb	r3, [r7, #13]
 800ed2e:	2bff      	cmp	r3, #255	@ 0xff
 800ed30:	d01f      	beq.n	800ed72 <USBD_StdEPReq+0x1c6>
 800ed32:	7b7b      	ldrb	r3, [r7, #13]
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d11c      	bne.n	800ed72 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800ed38:	7b7a      	ldrb	r2, [r7, #13]
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800ed40:	7b7a      	ldrb	r2, [r7, #13]
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	32ae      	adds	r2, #174	@ 0xae
 800ed46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed4a:	689b      	ldr	r3, [r3, #8]
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d010      	beq.n	800ed72 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ed50:	7b7a      	ldrb	r2, [r7, #13]
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	32ae      	adds	r2, #174	@ 0xae
 800ed56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed5a:	689b      	ldr	r3, [r3, #8]
 800ed5c:	6839      	ldr	r1, [r7, #0]
 800ed5e:	6878      	ldr	r0, [r7, #4]
 800ed60:	4798      	blx	r3
 800ed62:	4603      	mov	r3, r0
 800ed64:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800ed66:	e004      	b.n	800ed72 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800ed68:	6839      	ldr	r1, [r7, #0]
 800ed6a:	6878      	ldr	r0, [r7, #4]
 800ed6c:	f000 fc05 	bl	800f57a <USBD_CtlError>
              break;
 800ed70:	e000      	b.n	800ed74 <USBD_StdEPReq+0x1c8>
              break;
 800ed72:	bf00      	nop
          }
          break;
 800ed74:	e0ad      	b.n	800eed2 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ed7c:	b2db      	uxtb	r3, r3
 800ed7e:	2b02      	cmp	r3, #2
 800ed80:	d002      	beq.n	800ed88 <USBD_StdEPReq+0x1dc>
 800ed82:	2b03      	cmp	r3, #3
 800ed84:	d033      	beq.n	800edee <USBD_StdEPReq+0x242>
 800ed86:	e099      	b.n	800eebc <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ed88:	7bbb      	ldrb	r3, [r7, #14]
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d007      	beq.n	800ed9e <USBD_StdEPReq+0x1f2>
 800ed8e:	7bbb      	ldrb	r3, [r7, #14]
 800ed90:	2b80      	cmp	r3, #128	@ 0x80
 800ed92:	d004      	beq.n	800ed9e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800ed94:	6839      	ldr	r1, [r7, #0]
 800ed96:	6878      	ldr	r0, [r7, #4]
 800ed98:	f000 fbef 	bl	800f57a <USBD_CtlError>
                break;
 800ed9c:	e093      	b.n	800eec6 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ed9e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	da0b      	bge.n	800edbe <USBD_StdEPReq+0x212>
 800eda6:	7bbb      	ldrb	r3, [r7, #14]
 800eda8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800edac:	4613      	mov	r3, r2
 800edae:	009b      	lsls	r3, r3, #2
 800edb0:	4413      	add	r3, r2
 800edb2:	009b      	lsls	r3, r3, #2
 800edb4:	3310      	adds	r3, #16
 800edb6:	687a      	ldr	r2, [r7, #4]
 800edb8:	4413      	add	r3, r2
 800edba:	3304      	adds	r3, #4
 800edbc:	e00b      	b.n	800edd6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800edbe:	7bbb      	ldrb	r3, [r7, #14]
 800edc0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800edc4:	4613      	mov	r3, r2
 800edc6:	009b      	lsls	r3, r3, #2
 800edc8:	4413      	add	r3, r2
 800edca:	009b      	lsls	r3, r3, #2
 800edcc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800edd0:	687a      	ldr	r2, [r7, #4]
 800edd2:	4413      	add	r3, r2
 800edd4:	3304      	adds	r3, #4
 800edd6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800edd8:	68bb      	ldr	r3, [r7, #8]
 800edda:	2200      	movs	r2, #0
 800eddc:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800edde:	68bb      	ldr	r3, [r7, #8]
 800ede0:	330e      	adds	r3, #14
 800ede2:	2202      	movs	r2, #2
 800ede4:	4619      	mov	r1, r3
 800ede6:	6878      	ldr	r0, [r7, #4]
 800ede8:	f000 fc44 	bl	800f674 <USBD_CtlSendData>
              break;
 800edec:	e06b      	b.n	800eec6 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800edee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	da11      	bge.n	800ee1a <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800edf6:	7bbb      	ldrb	r3, [r7, #14]
 800edf8:	f003 020f 	and.w	r2, r3, #15
 800edfc:	6879      	ldr	r1, [r7, #4]
 800edfe:	4613      	mov	r3, r2
 800ee00:	009b      	lsls	r3, r3, #2
 800ee02:	4413      	add	r3, r2
 800ee04:	009b      	lsls	r3, r3, #2
 800ee06:	440b      	add	r3, r1
 800ee08:	3323      	adds	r3, #35	@ 0x23
 800ee0a:	781b      	ldrb	r3, [r3, #0]
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d117      	bne.n	800ee40 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800ee10:	6839      	ldr	r1, [r7, #0]
 800ee12:	6878      	ldr	r0, [r7, #4]
 800ee14:	f000 fbb1 	bl	800f57a <USBD_CtlError>
                  break;
 800ee18:	e055      	b.n	800eec6 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ee1a:	7bbb      	ldrb	r3, [r7, #14]
 800ee1c:	f003 020f 	and.w	r2, r3, #15
 800ee20:	6879      	ldr	r1, [r7, #4]
 800ee22:	4613      	mov	r3, r2
 800ee24:	009b      	lsls	r3, r3, #2
 800ee26:	4413      	add	r3, r2
 800ee28:	009b      	lsls	r3, r3, #2
 800ee2a:	440b      	add	r3, r1
 800ee2c:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800ee30:	781b      	ldrb	r3, [r3, #0]
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d104      	bne.n	800ee40 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800ee36:	6839      	ldr	r1, [r7, #0]
 800ee38:	6878      	ldr	r0, [r7, #4]
 800ee3a:	f000 fb9e 	bl	800f57a <USBD_CtlError>
                  break;
 800ee3e:	e042      	b.n	800eec6 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ee40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	da0b      	bge.n	800ee60 <USBD_StdEPReq+0x2b4>
 800ee48:	7bbb      	ldrb	r3, [r7, #14]
 800ee4a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ee4e:	4613      	mov	r3, r2
 800ee50:	009b      	lsls	r3, r3, #2
 800ee52:	4413      	add	r3, r2
 800ee54:	009b      	lsls	r3, r3, #2
 800ee56:	3310      	adds	r3, #16
 800ee58:	687a      	ldr	r2, [r7, #4]
 800ee5a:	4413      	add	r3, r2
 800ee5c:	3304      	adds	r3, #4
 800ee5e:	e00b      	b.n	800ee78 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ee60:	7bbb      	ldrb	r3, [r7, #14]
 800ee62:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ee66:	4613      	mov	r3, r2
 800ee68:	009b      	lsls	r3, r3, #2
 800ee6a:	4413      	add	r3, r2
 800ee6c:	009b      	lsls	r3, r3, #2
 800ee6e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ee72:	687a      	ldr	r2, [r7, #4]
 800ee74:	4413      	add	r3, r2
 800ee76:	3304      	adds	r3, #4
 800ee78:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ee7a:	7bbb      	ldrb	r3, [r7, #14]
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d002      	beq.n	800ee86 <USBD_StdEPReq+0x2da>
 800ee80:	7bbb      	ldrb	r3, [r7, #14]
 800ee82:	2b80      	cmp	r3, #128	@ 0x80
 800ee84:	d103      	bne.n	800ee8e <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800ee86:	68bb      	ldr	r3, [r7, #8]
 800ee88:	2200      	movs	r2, #0
 800ee8a:	739a      	strb	r2, [r3, #14]
 800ee8c:	e00e      	b.n	800eeac <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ee8e:	7bbb      	ldrb	r3, [r7, #14]
 800ee90:	4619      	mov	r1, r3
 800ee92:	6878      	ldr	r0, [r7, #4]
 800ee94:	f00e ff8e 	bl	801ddb4 <USBD_LL_IsStallEP>
 800ee98:	4603      	mov	r3, r0
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d003      	beq.n	800eea6 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800ee9e:	68bb      	ldr	r3, [r7, #8]
 800eea0:	2201      	movs	r2, #1
 800eea2:	739a      	strb	r2, [r3, #14]
 800eea4:	e002      	b.n	800eeac <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800eea6:	68bb      	ldr	r3, [r7, #8]
 800eea8:	2200      	movs	r2, #0
 800eeaa:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800eeac:	68bb      	ldr	r3, [r7, #8]
 800eeae:	330e      	adds	r3, #14
 800eeb0:	2202      	movs	r2, #2
 800eeb2:	4619      	mov	r1, r3
 800eeb4:	6878      	ldr	r0, [r7, #4]
 800eeb6:	f000 fbdd 	bl	800f674 <USBD_CtlSendData>
              break;
 800eeba:	e004      	b.n	800eec6 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 800eebc:	6839      	ldr	r1, [r7, #0]
 800eebe:	6878      	ldr	r0, [r7, #4]
 800eec0:	f000 fb5b 	bl	800f57a <USBD_CtlError>
              break;
 800eec4:	bf00      	nop
          }
          break;
 800eec6:	e004      	b.n	800eed2 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 800eec8:	6839      	ldr	r1, [r7, #0]
 800eeca:	6878      	ldr	r0, [r7, #4]
 800eecc:	f000 fb55 	bl	800f57a <USBD_CtlError>
          break;
 800eed0:	bf00      	nop
      }
      break;
 800eed2:	e005      	b.n	800eee0 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 800eed4:	6839      	ldr	r1, [r7, #0]
 800eed6:	6878      	ldr	r0, [r7, #4]
 800eed8:	f000 fb4f 	bl	800f57a <USBD_CtlError>
      break;
 800eedc:	e000      	b.n	800eee0 <USBD_StdEPReq+0x334>
      break;
 800eede:	bf00      	nop
  }

  return ret;
 800eee0:	7bfb      	ldrb	r3, [r7, #15]
}
 800eee2:	4618      	mov	r0, r3
 800eee4:	3710      	adds	r7, #16
 800eee6:	46bd      	mov	sp, r7
 800eee8:	bd80      	pop	{r7, pc}
	...

0800eeec <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eeec:	b580      	push	{r7, lr}
 800eeee:	b084      	sub	sp, #16
 800eef0:	af00      	add	r7, sp, #0
 800eef2:	6078      	str	r0, [r7, #4]
 800eef4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800eef6:	2300      	movs	r3, #0
 800eef8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800eefa:	2300      	movs	r3, #0
 800eefc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800eefe:	2300      	movs	r3, #0
 800ef00:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ef02:	683b      	ldr	r3, [r7, #0]
 800ef04:	885b      	ldrh	r3, [r3, #2]
 800ef06:	0a1b      	lsrs	r3, r3, #8
 800ef08:	b29b      	uxth	r3, r3
 800ef0a:	3b01      	subs	r3, #1
 800ef0c:	2b06      	cmp	r3, #6
 800ef0e:	f200 8128 	bhi.w	800f162 <USBD_GetDescriptor+0x276>
 800ef12:	a201      	add	r2, pc, #4	@ (adr r2, 800ef18 <USBD_GetDescriptor+0x2c>)
 800ef14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef18:	0800ef35 	.word	0x0800ef35
 800ef1c:	0800ef4d 	.word	0x0800ef4d
 800ef20:	0800ef8d 	.word	0x0800ef8d
 800ef24:	0800f163 	.word	0x0800f163
 800ef28:	0800f163 	.word	0x0800f163
 800ef2c:	0800f103 	.word	0x0800f103
 800ef30:	0800f12f 	.word	0x0800f12f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	687a      	ldr	r2, [r7, #4]
 800ef3e:	7c12      	ldrb	r2, [r2, #16]
 800ef40:	f107 0108 	add.w	r1, r7, #8
 800ef44:	4610      	mov	r0, r2
 800ef46:	4798      	blx	r3
 800ef48:	60f8      	str	r0, [r7, #12]
      break;
 800ef4a:	e112      	b.n	800f172 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	7c1b      	ldrb	r3, [r3, #16]
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d10d      	bne.n	800ef70 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ef5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef5c:	f107 0208 	add.w	r2, r7, #8
 800ef60:	4610      	mov	r0, r2
 800ef62:	4798      	blx	r3
 800ef64:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	3301      	adds	r3, #1
 800ef6a:	2202      	movs	r2, #2
 800ef6c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ef6e:	e100      	b.n	800f172 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ef76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef78:	f107 0208 	add.w	r2, r7, #8
 800ef7c:	4610      	mov	r0, r2
 800ef7e:	4798      	blx	r3
 800ef80:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	3301      	adds	r3, #1
 800ef86:	2202      	movs	r2, #2
 800ef88:	701a      	strb	r2, [r3, #0]
      break;
 800ef8a:	e0f2      	b.n	800f172 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ef8c:	683b      	ldr	r3, [r7, #0]
 800ef8e:	885b      	ldrh	r3, [r3, #2]
 800ef90:	b2db      	uxtb	r3, r3
 800ef92:	2b05      	cmp	r3, #5
 800ef94:	f200 80ac 	bhi.w	800f0f0 <USBD_GetDescriptor+0x204>
 800ef98:	a201      	add	r2, pc, #4	@ (adr r2, 800efa0 <USBD_GetDescriptor+0xb4>)
 800ef9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef9e:	bf00      	nop
 800efa0:	0800efb9 	.word	0x0800efb9
 800efa4:	0800efed 	.word	0x0800efed
 800efa8:	0800f021 	.word	0x0800f021
 800efac:	0800f055 	.word	0x0800f055
 800efb0:	0800f089 	.word	0x0800f089
 800efb4:	0800f0bd 	.word	0x0800f0bd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800efbe:	685b      	ldr	r3, [r3, #4]
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d00b      	beq.n	800efdc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800efca:	685b      	ldr	r3, [r3, #4]
 800efcc:	687a      	ldr	r2, [r7, #4]
 800efce:	7c12      	ldrb	r2, [r2, #16]
 800efd0:	f107 0108 	add.w	r1, r7, #8
 800efd4:	4610      	mov	r0, r2
 800efd6:	4798      	blx	r3
 800efd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800efda:	e091      	b.n	800f100 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800efdc:	6839      	ldr	r1, [r7, #0]
 800efde:	6878      	ldr	r0, [r7, #4]
 800efe0:	f000 facb 	bl	800f57a <USBD_CtlError>
            err++;
 800efe4:	7afb      	ldrb	r3, [r7, #11]
 800efe6:	3301      	adds	r3, #1
 800efe8:	72fb      	strb	r3, [r7, #11]
          break;
 800efea:	e089      	b.n	800f100 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800eff2:	689b      	ldr	r3, [r3, #8]
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d00b      	beq.n	800f010 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800effe:	689b      	ldr	r3, [r3, #8]
 800f000:	687a      	ldr	r2, [r7, #4]
 800f002:	7c12      	ldrb	r2, [r2, #16]
 800f004:	f107 0108 	add.w	r1, r7, #8
 800f008:	4610      	mov	r0, r2
 800f00a:	4798      	blx	r3
 800f00c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f00e:	e077      	b.n	800f100 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f010:	6839      	ldr	r1, [r7, #0]
 800f012:	6878      	ldr	r0, [r7, #4]
 800f014:	f000 fab1 	bl	800f57a <USBD_CtlError>
            err++;
 800f018:	7afb      	ldrb	r3, [r7, #11]
 800f01a:	3301      	adds	r3, #1
 800f01c:	72fb      	strb	r3, [r7, #11]
          break;
 800f01e:	e06f      	b.n	800f100 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f026:	68db      	ldr	r3, [r3, #12]
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d00b      	beq.n	800f044 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f032:	68db      	ldr	r3, [r3, #12]
 800f034:	687a      	ldr	r2, [r7, #4]
 800f036:	7c12      	ldrb	r2, [r2, #16]
 800f038:	f107 0108 	add.w	r1, r7, #8
 800f03c:	4610      	mov	r0, r2
 800f03e:	4798      	blx	r3
 800f040:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f042:	e05d      	b.n	800f100 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f044:	6839      	ldr	r1, [r7, #0]
 800f046:	6878      	ldr	r0, [r7, #4]
 800f048:	f000 fa97 	bl	800f57a <USBD_CtlError>
            err++;
 800f04c:	7afb      	ldrb	r3, [r7, #11]
 800f04e:	3301      	adds	r3, #1
 800f050:	72fb      	strb	r3, [r7, #11]
          break;
 800f052:	e055      	b.n	800f100 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f05a:	691b      	ldr	r3, [r3, #16]
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d00b      	beq.n	800f078 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f066:	691b      	ldr	r3, [r3, #16]
 800f068:	687a      	ldr	r2, [r7, #4]
 800f06a:	7c12      	ldrb	r2, [r2, #16]
 800f06c:	f107 0108 	add.w	r1, r7, #8
 800f070:	4610      	mov	r0, r2
 800f072:	4798      	blx	r3
 800f074:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f076:	e043      	b.n	800f100 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f078:	6839      	ldr	r1, [r7, #0]
 800f07a:	6878      	ldr	r0, [r7, #4]
 800f07c:	f000 fa7d 	bl	800f57a <USBD_CtlError>
            err++;
 800f080:	7afb      	ldrb	r3, [r7, #11]
 800f082:	3301      	adds	r3, #1
 800f084:	72fb      	strb	r3, [r7, #11]
          break;
 800f086:	e03b      	b.n	800f100 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f08e:	695b      	ldr	r3, [r3, #20]
 800f090:	2b00      	cmp	r3, #0
 800f092:	d00b      	beq.n	800f0ac <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f09a:	695b      	ldr	r3, [r3, #20]
 800f09c:	687a      	ldr	r2, [r7, #4]
 800f09e:	7c12      	ldrb	r2, [r2, #16]
 800f0a0:	f107 0108 	add.w	r1, r7, #8
 800f0a4:	4610      	mov	r0, r2
 800f0a6:	4798      	blx	r3
 800f0a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f0aa:	e029      	b.n	800f100 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f0ac:	6839      	ldr	r1, [r7, #0]
 800f0ae:	6878      	ldr	r0, [r7, #4]
 800f0b0:	f000 fa63 	bl	800f57a <USBD_CtlError>
            err++;
 800f0b4:	7afb      	ldrb	r3, [r7, #11]
 800f0b6:	3301      	adds	r3, #1
 800f0b8:	72fb      	strb	r3, [r7, #11]
          break;
 800f0ba:	e021      	b.n	800f100 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f0c2:	699b      	ldr	r3, [r3, #24]
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d00b      	beq.n	800f0e0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f0ce:	699b      	ldr	r3, [r3, #24]
 800f0d0:	687a      	ldr	r2, [r7, #4]
 800f0d2:	7c12      	ldrb	r2, [r2, #16]
 800f0d4:	f107 0108 	add.w	r1, r7, #8
 800f0d8:	4610      	mov	r0, r2
 800f0da:	4798      	blx	r3
 800f0dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f0de:	e00f      	b.n	800f100 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f0e0:	6839      	ldr	r1, [r7, #0]
 800f0e2:	6878      	ldr	r0, [r7, #4]
 800f0e4:	f000 fa49 	bl	800f57a <USBD_CtlError>
            err++;
 800f0e8:	7afb      	ldrb	r3, [r7, #11]
 800f0ea:	3301      	adds	r3, #1
 800f0ec:	72fb      	strb	r3, [r7, #11]
          break;
 800f0ee:	e007      	b.n	800f100 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800f0f0:	6839      	ldr	r1, [r7, #0]
 800f0f2:	6878      	ldr	r0, [r7, #4]
 800f0f4:	f000 fa41 	bl	800f57a <USBD_CtlError>
          err++;
 800f0f8:	7afb      	ldrb	r3, [r7, #11]
 800f0fa:	3301      	adds	r3, #1
 800f0fc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800f0fe:	bf00      	nop
      }
      break;
 800f100:	e037      	b.n	800f172 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	7c1b      	ldrb	r3, [r3, #16]
 800f106:	2b00      	cmp	r3, #0
 800f108:	d109      	bne.n	800f11e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f110:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f112:	f107 0208 	add.w	r2, r7, #8
 800f116:	4610      	mov	r0, r2
 800f118:	4798      	blx	r3
 800f11a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f11c:	e029      	b.n	800f172 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800f11e:	6839      	ldr	r1, [r7, #0]
 800f120:	6878      	ldr	r0, [r7, #4]
 800f122:	f000 fa2a 	bl	800f57a <USBD_CtlError>
        err++;
 800f126:	7afb      	ldrb	r3, [r7, #11]
 800f128:	3301      	adds	r3, #1
 800f12a:	72fb      	strb	r3, [r7, #11]
      break;
 800f12c:	e021      	b.n	800f172 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	7c1b      	ldrb	r3, [r3, #16]
 800f132:	2b00      	cmp	r3, #0
 800f134:	d10d      	bne.n	800f152 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f13c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f13e:	f107 0208 	add.w	r2, r7, #8
 800f142:	4610      	mov	r0, r2
 800f144:	4798      	blx	r3
 800f146:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	3301      	adds	r3, #1
 800f14c:	2207      	movs	r2, #7
 800f14e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f150:	e00f      	b.n	800f172 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800f152:	6839      	ldr	r1, [r7, #0]
 800f154:	6878      	ldr	r0, [r7, #4]
 800f156:	f000 fa10 	bl	800f57a <USBD_CtlError>
        err++;
 800f15a:	7afb      	ldrb	r3, [r7, #11]
 800f15c:	3301      	adds	r3, #1
 800f15e:	72fb      	strb	r3, [r7, #11]
      break;
 800f160:	e007      	b.n	800f172 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800f162:	6839      	ldr	r1, [r7, #0]
 800f164:	6878      	ldr	r0, [r7, #4]
 800f166:	f000 fa08 	bl	800f57a <USBD_CtlError>
      err++;
 800f16a:	7afb      	ldrb	r3, [r7, #11]
 800f16c:	3301      	adds	r3, #1
 800f16e:	72fb      	strb	r3, [r7, #11]
      break;
 800f170:	bf00      	nop
  }

  if (err != 0U)
 800f172:	7afb      	ldrb	r3, [r7, #11]
 800f174:	2b00      	cmp	r3, #0
 800f176:	d11e      	bne.n	800f1b6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800f178:	683b      	ldr	r3, [r7, #0]
 800f17a:	88db      	ldrh	r3, [r3, #6]
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d016      	beq.n	800f1ae <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800f180:	893b      	ldrh	r3, [r7, #8]
 800f182:	2b00      	cmp	r3, #0
 800f184:	d00e      	beq.n	800f1a4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800f186:	683b      	ldr	r3, [r7, #0]
 800f188:	88da      	ldrh	r2, [r3, #6]
 800f18a:	893b      	ldrh	r3, [r7, #8]
 800f18c:	4293      	cmp	r3, r2
 800f18e:	bf28      	it	cs
 800f190:	4613      	movcs	r3, r2
 800f192:	b29b      	uxth	r3, r3
 800f194:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f196:	893b      	ldrh	r3, [r7, #8]
 800f198:	461a      	mov	r2, r3
 800f19a:	68f9      	ldr	r1, [r7, #12]
 800f19c:	6878      	ldr	r0, [r7, #4]
 800f19e:	f000 fa69 	bl	800f674 <USBD_CtlSendData>
 800f1a2:	e009      	b.n	800f1b8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800f1a4:	6839      	ldr	r1, [r7, #0]
 800f1a6:	6878      	ldr	r0, [r7, #4]
 800f1a8:	f000 f9e7 	bl	800f57a <USBD_CtlError>
 800f1ac:	e004      	b.n	800f1b8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800f1ae:	6878      	ldr	r0, [r7, #4]
 800f1b0:	f000 fac1 	bl	800f736 <USBD_CtlSendStatus>
 800f1b4:	e000      	b.n	800f1b8 <USBD_GetDescriptor+0x2cc>
    return;
 800f1b6:	bf00      	nop
  }
}
 800f1b8:	3710      	adds	r7, #16
 800f1ba:	46bd      	mov	sp, r7
 800f1bc:	bd80      	pop	{r7, pc}
 800f1be:	bf00      	nop

0800f1c0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f1c0:	b580      	push	{r7, lr}
 800f1c2:	b084      	sub	sp, #16
 800f1c4:	af00      	add	r7, sp, #0
 800f1c6:	6078      	str	r0, [r7, #4]
 800f1c8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f1ca:	683b      	ldr	r3, [r7, #0]
 800f1cc:	889b      	ldrh	r3, [r3, #4]
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d131      	bne.n	800f236 <USBD_SetAddress+0x76>
 800f1d2:	683b      	ldr	r3, [r7, #0]
 800f1d4:	88db      	ldrh	r3, [r3, #6]
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d12d      	bne.n	800f236 <USBD_SetAddress+0x76>
 800f1da:	683b      	ldr	r3, [r7, #0]
 800f1dc:	885b      	ldrh	r3, [r3, #2]
 800f1de:	2b7f      	cmp	r3, #127	@ 0x7f
 800f1e0:	d829      	bhi.n	800f236 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f1e2:	683b      	ldr	r3, [r7, #0]
 800f1e4:	885b      	ldrh	r3, [r3, #2]
 800f1e6:	b2db      	uxtb	r3, r3
 800f1e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f1ec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f1f4:	b2db      	uxtb	r3, r3
 800f1f6:	2b03      	cmp	r3, #3
 800f1f8:	d104      	bne.n	800f204 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800f1fa:	6839      	ldr	r1, [r7, #0]
 800f1fc:	6878      	ldr	r0, [r7, #4]
 800f1fe:	f000 f9bc 	bl	800f57a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f202:	e01d      	b.n	800f240 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	7bfa      	ldrb	r2, [r7, #15]
 800f208:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f20c:	7bfb      	ldrb	r3, [r7, #15]
 800f20e:	4619      	mov	r1, r3
 800f210:	6878      	ldr	r0, [r7, #4]
 800f212:	f00e fdfb 	bl	801de0c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f216:	6878      	ldr	r0, [r7, #4]
 800f218:	f000 fa8d 	bl	800f736 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f21c:	7bfb      	ldrb	r3, [r7, #15]
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d004      	beq.n	800f22c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	2202      	movs	r2, #2
 800f226:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f22a:	e009      	b.n	800f240 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	2201      	movs	r2, #1
 800f230:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f234:	e004      	b.n	800f240 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f236:	6839      	ldr	r1, [r7, #0]
 800f238:	6878      	ldr	r0, [r7, #4]
 800f23a:	f000 f99e 	bl	800f57a <USBD_CtlError>
  }
}
 800f23e:	bf00      	nop
 800f240:	bf00      	nop
 800f242:	3710      	adds	r7, #16
 800f244:	46bd      	mov	sp, r7
 800f246:	bd80      	pop	{r7, pc}

0800f248 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f248:	b580      	push	{r7, lr}
 800f24a:	b084      	sub	sp, #16
 800f24c:	af00      	add	r7, sp, #0
 800f24e:	6078      	str	r0, [r7, #4]
 800f250:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f252:	2300      	movs	r3, #0
 800f254:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f256:	683b      	ldr	r3, [r7, #0]
 800f258:	885b      	ldrh	r3, [r3, #2]
 800f25a:	b2da      	uxtb	r2, r3
 800f25c:	4b4e      	ldr	r3, [pc, #312]	@ (800f398 <USBD_SetConfig+0x150>)
 800f25e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f260:	4b4d      	ldr	r3, [pc, #308]	@ (800f398 <USBD_SetConfig+0x150>)
 800f262:	781b      	ldrb	r3, [r3, #0]
 800f264:	2b01      	cmp	r3, #1
 800f266:	d905      	bls.n	800f274 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f268:	6839      	ldr	r1, [r7, #0]
 800f26a:	6878      	ldr	r0, [r7, #4]
 800f26c:	f000 f985 	bl	800f57a <USBD_CtlError>
    return USBD_FAIL;
 800f270:	2303      	movs	r3, #3
 800f272:	e08c      	b.n	800f38e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f27a:	b2db      	uxtb	r3, r3
 800f27c:	2b02      	cmp	r3, #2
 800f27e:	d002      	beq.n	800f286 <USBD_SetConfig+0x3e>
 800f280:	2b03      	cmp	r3, #3
 800f282:	d029      	beq.n	800f2d8 <USBD_SetConfig+0x90>
 800f284:	e075      	b.n	800f372 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800f286:	4b44      	ldr	r3, [pc, #272]	@ (800f398 <USBD_SetConfig+0x150>)
 800f288:	781b      	ldrb	r3, [r3, #0]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d020      	beq.n	800f2d0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800f28e:	4b42      	ldr	r3, [pc, #264]	@ (800f398 <USBD_SetConfig+0x150>)
 800f290:	781b      	ldrb	r3, [r3, #0]
 800f292:	461a      	mov	r2, r3
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f298:	4b3f      	ldr	r3, [pc, #252]	@ (800f398 <USBD_SetConfig+0x150>)
 800f29a:	781b      	ldrb	r3, [r3, #0]
 800f29c:	4619      	mov	r1, r3
 800f29e:	6878      	ldr	r0, [r7, #4]
 800f2a0:	f7fe ffcd 	bl	800e23e <USBD_SetClassConfig>
 800f2a4:	4603      	mov	r3, r0
 800f2a6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800f2a8:	7bfb      	ldrb	r3, [r7, #15]
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d008      	beq.n	800f2c0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800f2ae:	6839      	ldr	r1, [r7, #0]
 800f2b0:	6878      	ldr	r0, [r7, #4]
 800f2b2:	f000 f962 	bl	800f57a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	2202      	movs	r2, #2
 800f2ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f2be:	e065      	b.n	800f38c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f2c0:	6878      	ldr	r0, [r7, #4]
 800f2c2:	f000 fa38 	bl	800f736 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	2203      	movs	r2, #3
 800f2ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800f2ce:	e05d      	b.n	800f38c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f2d0:	6878      	ldr	r0, [r7, #4]
 800f2d2:	f000 fa30 	bl	800f736 <USBD_CtlSendStatus>
      break;
 800f2d6:	e059      	b.n	800f38c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800f2d8:	4b2f      	ldr	r3, [pc, #188]	@ (800f398 <USBD_SetConfig+0x150>)
 800f2da:	781b      	ldrb	r3, [r3, #0]
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d112      	bne.n	800f306 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	2202      	movs	r2, #2
 800f2e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800f2e8:	4b2b      	ldr	r3, [pc, #172]	@ (800f398 <USBD_SetConfig+0x150>)
 800f2ea:	781b      	ldrb	r3, [r3, #0]
 800f2ec:	461a      	mov	r2, r3
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f2f2:	4b29      	ldr	r3, [pc, #164]	@ (800f398 <USBD_SetConfig+0x150>)
 800f2f4:	781b      	ldrb	r3, [r3, #0]
 800f2f6:	4619      	mov	r1, r3
 800f2f8:	6878      	ldr	r0, [r7, #4]
 800f2fa:	f7fe ffbc 	bl	800e276 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800f2fe:	6878      	ldr	r0, [r7, #4]
 800f300:	f000 fa19 	bl	800f736 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f304:	e042      	b.n	800f38c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800f306:	4b24      	ldr	r3, [pc, #144]	@ (800f398 <USBD_SetConfig+0x150>)
 800f308:	781b      	ldrb	r3, [r3, #0]
 800f30a:	461a      	mov	r2, r3
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	685b      	ldr	r3, [r3, #4]
 800f310:	429a      	cmp	r2, r3
 800f312:	d02a      	beq.n	800f36a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	685b      	ldr	r3, [r3, #4]
 800f318:	b2db      	uxtb	r3, r3
 800f31a:	4619      	mov	r1, r3
 800f31c:	6878      	ldr	r0, [r7, #4]
 800f31e:	f7fe ffaa 	bl	800e276 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800f322:	4b1d      	ldr	r3, [pc, #116]	@ (800f398 <USBD_SetConfig+0x150>)
 800f324:	781b      	ldrb	r3, [r3, #0]
 800f326:	461a      	mov	r2, r3
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f32c:	4b1a      	ldr	r3, [pc, #104]	@ (800f398 <USBD_SetConfig+0x150>)
 800f32e:	781b      	ldrb	r3, [r3, #0]
 800f330:	4619      	mov	r1, r3
 800f332:	6878      	ldr	r0, [r7, #4]
 800f334:	f7fe ff83 	bl	800e23e <USBD_SetClassConfig>
 800f338:	4603      	mov	r3, r0
 800f33a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800f33c:	7bfb      	ldrb	r3, [r7, #15]
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d00f      	beq.n	800f362 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800f342:	6839      	ldr	r1, [r7, #0]
 800f344:	6878      	ldr	r0, [r7, #4]
 800f346:	f000 f918 	bl	800f57a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	685b      	ldr	r3, [r3, #4]
 800f34e:	b2db      	uxtb	r3, r3
 800f350:	4619      	mov	r1, r3
 800f352:	6878      	ldr	r0, [r7, #4]
 800f354:	f7fe ff8f 	bl	800e276 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	2202      	movs	r2, #2
 800f35c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800f360:	e014      	b.n	800f38c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f362:	6878      	ldr	r0, [r7, #4]
 800f364:	f000 f9e7 	bl	800f736 <USBD_CtlSendStatus>
      break;
 800f368:	e010      	b.n	800f38c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f36a:	6878      	ldr	r0, [r7, #4]
 800f36c:	f000 f9e3 	bl	800f736 <USBD_CtlSendStatus>
      break;
 800f370:	e00c      	b.n	800f38c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800f372:	6839      	ldr	r1, [r7, #0]
 800f374:	6878      	ldr	r0, [r7, #4]
 800f376:	f000 f900 	bl	800f57a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f37a:	4b07      	ldr	r3, [pc, #28]	@ (800f398 <USBD_SetConfig+0x150>)
 800f37c:	781b      	ldrb	r3, [r3, #0]
 800f37e:	4619      	mov	r1, r3
 800f380:	6878      	ldr	r0, [r7, #4]
 800f382:	f7fe ff78 	bl	800e276 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800f386:	2303      	movs	r3, #3
 800f388:	73fb      	strb	r3, [r7, #15]
      break;
 800f38a:	bf00      	nop
  }

  return ret;
 800f38c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f38e:	4618      	mov	r0, r3
 800f390:	3710      	adds	r7, #16
 800f392:	46bd      	mov	sp, r7
 800f394:	bd80      	pop	{r7, pc}
 800f396:	bf00      	nop
 800f398:	20005604 	.word	0x20005604

0800f39c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f39c:	b580      	push	{r7, lr}
 800f39e:	b082      	sub	sp, #8
 800f3a0:	af00      	add	r7, sp, #0
 800f3a2:	6078      	str	r0, [r7, #4]
 800f3a4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f3a6:	683b      	ldr	r3, [r7, #0]
 800f3a8:	88db      	ldrh	r3, [r3, #6]
 800f3aa:	2b01      	cmp	r3, #1
 800f3ac:	d004      	beq.n	800f3b8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f3ae:	6839      	ldr	r1, [r7, #0]
 800f3b0:	6878      	ldr	r0, [r7, #4]
 800f3b2:	f000 f8e2 	bl	800f57a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800f3b6:	e023      	b.n	800f400 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f3be:	b2db      	uxtb	r3, r3
 800f3c0:	2b02      	cmp	r3, #2
 800f3c2:	dc02      	bgt.n	800f3ca <USBD_GetConfig+0x2e>
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	dc03      	bgt.n	800f3d0 <USBD_GetConfig+0x34>
 800f3c8:	e015      	b.n	800f3f6 <USBD_GetConfig+0x5a>
 800f3ca:	2b03      	cmp	r3, #3
 800f3cc:	d00b      	beq.n	800f3e6 <USBD_GetConfig+0x4a>
 800f3ce:	e012      	b.n	800f3f6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	2200      	movs	r2, #0
 800f3d4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	3308      	adds	r3, #8
 800f3da:	2201      	movs	r2, #1
 800f3dc:	4619      	mov	r1, r3
 800f3de:	6878      	ldr	r0, [r7, #4]
 800f3e0:	f000 f948 	bl	800f674 <USBD_CtlSendData>
        break;
 800f3e4:	e00c      	b.n	800f400 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	3304      	adds	r3, #4
 800f3ea:	2201      	movs	r2, #1
 800f3ec:	4619      	mov	r1, r3
 800f3ee:	6878      	ldr	r0, [r7, #4]
 800f3f0:	f000 f940 	bl	800f674 <USBD_CtlSendData>
        break;
 800f3f4:	e004      	b.n	800f400 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800f3f6:	6839      	ldr	r1, [r7, #0]
 800f3f8:	6878      	ldr	r0, [r7, #4]
 800f3fa:	f000 f8be 	bl	800f57a <USBD_CtlError>
        break;
 800f3fe:	bf00      	nop
}
 800f400:	bf00      	nop
 800f402:	3708      	adds	r7, #8
 800f404:	46bd      	mov	sp, r7
 800f406:	bd80      	pop	{r7, pc}

0800f408 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f408:	b580      	push	{r7, lr}
 800f40a:	b082      	sub	sp, #8
 800f40c:	af00      	add	r7, sp, #0
 800f40e:	6078      	str	r0, [r7, #4]
 800f410:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f418:	b2db      	uxtb	r3, r3
 800f41a:	3b01      	subs	r3, #1
 800f41c:	2b02      	cmp	r3, #2
 800f41e:	d81e      	bhi.n	800f45e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800f420:	683b      	ldr	r3, [r7, #0]
 800f422:	88db      	ldrh	r3, [r3, #6]
 800f424:	2b02      	cmp	r3, #2
 800f426:	d004      	beq.n	800f432 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800f428:	6839      	ldr	r1, [r7, #0]
 800f42a:	6878      	ldr	r0, [r7, #4]
 800f42c:	f000 f8a5 	bl	800f57a <USBD_CtlError>
        break;
 800f430:	e01a      	b.n	800f468 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	2201      	movs	r2, #1
 800f436:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d005      	beq.n	800f44e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	68db      	ldr	r3, [r3, #12]
 800f446:	f043 0202 	orr.w	r2, r3, #2
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	330c      	adds	r3, #12
 800f452:	2202      	movs	r2, #2
 800f454:	4619      	mov	r1, r3
 800f456:	6878      	ldr	r0, [r7, #4]
 800f458:	f000 f90c 	bl	800f674 <USBD_CtlSendData>
      break;
 800f45c:	e004      	b.n	800f468 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800f45e:	6839      	ldr	r1, [r7, #0]
 800f460:	6878      	ldr	r0, [r7, #4]
 800f462:	f000 f88a 	bl	800f57a <USBD_CtlError>
      break;
 800f466:	bf00      	nop
  }
}
 800f468:	bf00      	nop
 800f46a:	3708      	adds	r7, #8
 800f46c:	46bd      	mov	sp, r7
 800f46e:	bd80      	pop	{r7, pc}

0800f470 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f470:	b580      	push	{r7, lr}
 800f472:	b082      	sub	sp, #8
 800f474:	af00      	add	r7, sp, #0
 800f476:	6078      	str	r0, [r7, #4]
 800f478:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f47a:	683b      	ldr	r3, [r7, #0]
 800f47c:	885b      	ldrh	r3, [r3, #2]
 800f47e:	2b01      	cmp	r3, #1
 800f480:	d107      	bne.n	800f492 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	2201      	movs	r2, #1
 800f486:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800f48a:	6878      	ldr	r0, [r7, #4]
 800f48c:	f000 f953 	bl	800f736 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800f490:	e013      	b.n	800f4ba <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800f492:	683b      	ldr	r3, [r7, #0]
 800f494:	885b      	ldrh	r3, [r3, #2]
 800f496:	2b02      	cmp	r3, #2
 800f498:	d10b      	bne.n	800f4b2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800f49a:	683b      	ldr	r3, [r7, #0]
 800f49c:	889b      	ldrh	r3, [r3, #4]
 800f49e:	0a1b      	lsrs	r3, r3, #8
 800f4a0:	b29b      	uxth	r3, r3
 800f4a2:	b2da      	uxtb	r2, r3
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800f4aa:	6878      	ldr	r0, [r7, #4]
 800f4ac:	f000 f943 	bl	800f736 <USBD_CtlSendStatus>
}
 800f4b0:	e003      	b.n	800f4ba <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800f4b2:	6839      	ldr	r1, [r7, #0]
 800f4b4:	6878      	ldr	r0, [r7, #4]
 800f4b6:	f000 f860 	bl	800f57a <USBD_CtlError>
}
 800f4ba:	bf00      	nop
 800f4bc:	3708      	adds	r7, #8
 800f4be:	46bd      	mov	sp, r7
 800f4c0:	bd80      	pop	{r7, pc}

0800f4c2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f4c2:	b580      	push	{r7, lr}
 800f4c4:	b082      	sub	sp, #8
 800f4c6:	af00      	add	r7, sp, #0
 800f4c8:	6078      	str	r0, [r7, #4]
 800f4ca:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f4d2:	b2db      	uxtb	r3, r3
 800f4d4:	3b01      	subs	r3, #1
 800f4d6:	2b02      	cmp	r3, #2
 800f4d8:	d80b      	bhi.n	800f4f2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f4da:	683b      	ldr	r3, [r7, #0]
 800f4dc:	885b      	ldrh	r3, [r3, #2]
 800f4de:	2b01      	cmp	r3, #1
 800f4e0:	d10c      	bne.n	800f4fc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	2200      	movs	r2, #0
 800f4e6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f4ea:	6878      	ldr	r0, [r7, #4]
 800f4ec:	f000 f923 	bl	800f736 <USBD_CtlSendStatus>
      }
      break;
 800f4f0:	e004      	b.n	800f4fc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800f4f2:	6839      	ldr	r1, [r7, #0]
 800f4f4:	6878      	ldr	r0, [r7, #4]
 800f4f6:	f000 f840 	bl	800f57a <USBD_CtlError>
      break;
 800f4fa:	e000      	b.n	800f4fe <USBD_ClrFeature+0x3c>
      break;
 800f4fc:	bf00      	nop
  }
}
 800f4fe:	bf00      	nop
 800f500:	3708      	adds	r7, #8
 800f502:	46bd      	mov	sp, r7
 800f504:	bd80      	pop	{r7, pc}

0800f506 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f506:	b580      	push	{r7, lr}
 800f508:	b084      	sub	sp, #16
 800f50a:	af00      	add	r7, sp, #0
 800f50c:	6078      	str	r0, [r7, #4]
 800f50e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800f510:	683b      	ldr	r3, [r7, #0]
 800f512:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	781a      	ldrb	r2, [r3, #0]
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	3301      	adds	r3, #1
 800f520:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	781a      	ldrb	r2, [r3, #0]
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	3301      	adds	r3, #1
 800f52e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800f530:	68f8      	ldr	r0, [r7, #12]
 800f532:	f7ff fa3d 	bl	800e9b0 <SWAPBYTE>
 800f536:	4603      	mov	r3, r0
 800f538:	461a      	mov	r2, r3
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	3301      	adds	r3, #1
 800f542:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	3301      	adds	r3, #1
 800f548:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800f54a:	68f8      	ldr	r0, [r7, #12]
 800f54c:	f7ff fa30 	bl	800e9b0 <SWAPBYTE>
 800f550:	4603      	mov	r3, r0
 800f552:	461a      	mov	r2, r3
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	3301      	adds	r3, #1
 800f55c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	3301      	adds	r3, #1
 800f562:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800f564:	68f8      	ldr	r0, [r7, #12]
 800f566:	f7ff fa23 	bl	800e9b0 <SWAPBYTE>
 800f56a:	4603      	mov	r3, r0
 800f56c:	461a      	mov	r2, r3
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	80da      	strh	r2, [r3, #6]
}
 800f572:	bf00      	nop
 800f574:	3710      	adds	r7, #16
 800f576:	46bd      	mov	sp, r7
 800f578:	bd80      	pop	{r7, pc}

0800f57a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f57a:	b580      	push	{r7, lr}
 800f57c:	b082      	sub	sp, #8
 800f57e:	af00      	add	r7, sp, #0
 800f580:	6078      	str	r0, [r7, #4]
 800f582:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f584:	2180      	movs	r1, #128	@ 0x80
 800f586:	6878      	ldr	r0, [r7, #4]
 800f588:	f00e fbd6 	bl	801dd38 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f58c:	2100      	movs	r1, #0
 800f58e:	6878      	ldr	r0, [r7, #4]
 800f590:	f00e fbd2 	bl	801dd38 <USBD_LL_StallEP>
}
 800f594:	bf00      	nop
 800f596:	3708      	adds	r7, #8
 800f598:	46bd      	mov	sp, r7
 800f59a:	bd80      	pop	{r7, pc}

0800f59c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f59c:	b580      	push	{r7, lr}
 800f59e:	b086      	sub	sp, #24
 800f5a0:	af00      	add	r7, sp, #0
 800f5a2:	60f8      	str	r0, [r7, #12]
 800f5a4:	60b9      	str	r1, [r7, #8]
 800f5a6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f5a8:	2300      	movs	r3, #0
 800f5aa:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d042      	beq.n	800f638 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800f5b6:	6938      	ldr	r0, [r7, #16]
 800f5b8:	f000 f842 	bl	800f640 <USBD_GetLen>
 800f5bc:	4603      	mov	r3, r0
 800f5be:	3301      	adds	r3, #1
 800f5c0:	005b      	lsls	r3, r3, #1
 800f5c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f5c6:	d808      	bhi.n	800f5da <USBD_GetString+0x3e>
 800f5c8:	6938      	ldr	r0, [r7, #16]
 800f5ca:	f000 f839 	bl	800f640 <USBD_GetLen>
 800f5ce:	4603      	mov	r3, r0
 800f5d0:	3301      	adds	r3, #1
 800f5d2:	b29b      	uxth	r3, r3
 800f5d4:	005b      	lsls	r3, r3, #1
 800f5d6:	b29a      	uxth	r2, r3
 800f5d8:	e001      	b.n	800f5de <USBD_GetString+0x42>
 800f5da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800f5e2:	7dfb      	ldrb	r3, [r7, #23]
 800f5e4:	68ba      	ldr	r2, [r7, #8]
 800f5e6:	4413      	add	r3, r2
 800f5e8:	687a      	ldr	r2, [r7, #4]
 800f5ea:	7812      	ldrb	r2, [r2, #0]
 800f5ec:	701a      	strb	r2, [r3, #0]
  idx++;
 800f5ee:	7dfb      	ldrb	r3, [r7, #23]
 800f5f0:	3301      	adds	r3, #1
 800f5f2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f5f4:	7dfb      	ldrb	r3, [r7, #23]
 800f5f6:	68ba      	ldr	r2, [r7, #8]
 800f5f8:	4413      	add	r3, r2
 800f5fa:	2203      	movs	r2, #3
 800f5fc:	701a      	strb	r2, [r3, #0]
  idx++;
 800f5fe:	7dfb      	ldrb	r3, [r7, #23]
 800f600:	3301      	adds	r3, #1
 800f602:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800f604:	e013      	b.n	800f62e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800f606:	7dfb      	ldrb	r3, [r7, #23]
 800f608:	68ba      	ldr	r2, [r7, #8]
 800f60a:	4413      	add	r3, r2
 800f60c:	693a      	ldr	r2, [r7, #16]
 800f60e:	7812      	ldrb	r2, [r2, #0]
 800f610:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800f612:	693b      	ldr	r3, [r7, #16]
 800f614:	3301      	adds	r3, #1
 800f616:	613b      	str	r3, [r7, #16]
    idx++;
 800f618:	7dfb      	ldrb	r3, [r7, #23]
 800f61a:	3301      	adds	r3, #1
 800f61c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800f61e:	7dfb      	ldrb	r3, [r7, #23]
 800f620:	68ba      	ldr	r2, [r7, #8]
 800f622:	4413      	add	r3, r2
 800f624:	2200      	movs	r2, #0
 800f626:	701a      	strb	r2, [r3, #0]
    idx++;
 800f628:	7dfb      	ldrb	r3, [r7, #23]
 800f62a:	3301      	adds	r3, #1
 800f62c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800f62e:	693b      	ldr	r3, [r7, #16]
 800f630:	781b      	ldrb	r3, [r3, #0]
 800f632:	2b00      	cmp	r3, #0
 800f634:	d1e7      	bne.n	800f606 <USBD_GetString+0x6a>
 800f636:	e000      	b.n	800f63a <USBD_GetString+0x9e>
    return;
 800f638:	bf00      	nop
  }
}
 800f63a:	3718      	adds	r7, #24
 800f63c:	46bd      	mov	sp, r7
 800f63e:	bd80      	pop	{r7, pc}

0800f640 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f640:	b480      	push	{r7}
 800f642:	b085      	sub	sp, #20
 800f644:	af00      	add	r7, sp, #0
 800f646:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f648:	2300      	movs	r3, #0
 800f64a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800f650:	e005      	b.n	800f65e <USBD_GetLen+0x1e>
  {
    len++;
 800f652:	7bfb      	ldrb	r3, [r7, #15]
 800f654:	3301      	adds	r3, #1
 800f656:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800f658:	68bb      	ldr	r3, [r7, #8]
 800f65a:	3301      	adds	r3, #1
 800f65c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800f65e:	68bb      	ldr	r3, [r7, #8]
 800f660:	781b      	ldrb	r3, [r3, #0]
 800f662:	2b00      	cmp	r3, #0
 800f664:	d1f5      	bne.n	800f652 <USBD_GetLen+0x12>
  }

  return len;
 800f666:	7bfb      	ldrb	r3, [r7, #15]
}
 800f668:	4618      	mov	r0, r3
 800f66a:	3714      	adds	r7, #20
 800f66c:	46bd      	mov	sp, r7
 800f66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f672:	4770      	bx	lr

0800f674 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800f674:	b580      	push	{r7, lr}
 800f676:	b084      	sub	sp, #16
 800f678:	af00      	add	r7, sp, #0
 800f67a:	60f8      	str	r0, [r7, #12]
 800f67c:	60b9      	str	r1, [r7, #8]
 800f67e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	2202      	movs	r2, #2
 800f684:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	687a      	ldr	r2, [r7, #4]
 800f68c:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	68ba      	ldr	r2, [r7, #8]
 800f692:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	687a      	ldr	r2, [r7, #4]
 800f698:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	68ba      	ldr	r2, [r7, #8]
 800f69e:	2100      	movs	r1, #0
 800f6a0:	68f8      	ldr	r0, [r7, #12]
 800f6a2:	f00e fbd2 	bl	801de4a <USBD_LL_Transmit>

  return USBD_OK;
 800f6a6:	2300      	movs	r3, #0
}
 800f6a8:	4618      	mov	r0, r3
 800f6aa:	3710      	adds	r7, #16
 800f6ac:	46bd      	mov	sp, r7
 800f6ae:	bd80      	pop	{r7, pc}

0800f6b0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800f6b0:	b580      	push	{r7, lr}
 800f6b2:	b084      	sub	sp, #16
 800f6b4:	af00      	add	r7, sp, #0
 800f6b6:	60f8      	str	r0, [r7, #12]
 800f6b8:	60b9      	str	r1, [r7, #8]
 800f6ba:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	68ba      	ldr	r2, [r7, #8]
 800f6c0:	2100      	movs	r1, #0
 800f6c2:	68f8      	ldr	r0, [r7, #12]
 800f6c4:	f00e fbc1 	bl	801de4a <USBD_LL_Transmit>

  return USBD_OK;
 800f6c8:	2300      	movs	r3, #0
}
 800f6ca:	4618      	mov	r0, r3
 800f6cc:	3710      	adds	r7, #16
 800f6ce:	46bd      	mov	sp, r7
 800f6d0:	bd80      	pop	{r7, pc}

0800f6d2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800f6d2:	b580      	push	{r7, lr}
 800f6d4:	b084      	sub	sp, #16
 800f6d6:	af00      	add	r7, sp, #0
 800f6d8:	60f8      	str	r0, [r7, #12]
 800f6da:	60b9      	str	r1, [r7, #8]
 800f6dc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	2203      	movs	r2, #3
 800f6e2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	687a      	ldr	r2, [r7, #4]
 800f6ea:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	68ba      	ldr	r2, [r7, #8]
 800f6f2:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	687a      	ldr	r2, [r7, #4]
 800f6fa:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	68ba      	ldr	r2, [r7, #8]
 800f702:	2100      	movs	r1, #0
 800f704:	68f8      	ldr	r0, [r7, #12]
 800f706:	f00e fbc1 	bl	801de8c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f70a:	2300      	movs	r3, #0
}
 800f70c:	4618      	mov	r0, r3
 800f70e:	3710      	adds	r7, #16
 800f710:	46bd      	mov	sp, r7
 800f712:	bd80      	pop	{r7, pc}

0800f714 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800f714:	b580      	push	{r7, lr}
 800f716:	b084      	sub	sp, #16
 800f718:	af00      	add	r7, sp, #0
 800f71a:	60f8      	str	r0, [r7, #12]
 800f71c:	60b9      	str	r1, [r7, #8]
 800f71e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	68ba      	ldr	r2, [r7, #8]
 800f724:	2100      	movs	r1, #0
 800f726:	68f8      	ldr	r0, [r7, #12]
 800f728:	f00e fbb0 	bl	801de8c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f72c:	2300      	movs	r3, #0
}
 800f72e:	4618      	mov	r0, r3
 800f730:	3710      	adds	r7, #16
 800f732:	46bd      	mov	sp, r7
 800f734:	bd80      	pop	{r7, pc}

0800f736 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f736:	b580      	push	{r7, lr}
 800f738:	b082      	sub	sp, #8
 800f73a:	af00      	add	r7, sp, #0
 800f73c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	2204      	movs	r2, #4
 800f742:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f746:	2300      	movs	r3, #0
 800f748:	2200      	movs	r2, #0
 800f74a:	2100      	movs	r1, #0
 800f74c:	6878      	ldr	r0, [r7, #4]
 800f74e:	f00e fb7c 	bl	801de4a <USBD_LL_Transmit>

  return USBD_OK;
 800f752:	2300      	movs	r3, #0
}
 800f754:	4618      	mov	r0, r3
 800f756:	3708      	adds	r7, #8
 800f758:	46bd      	mov	sp, r7
 800f75a:	bd80      	pop	{r7, pc}

0800f75c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f75c:	b580      	push	{r7, lr}
 800f75e:	b082      	sub	sp, #8
 800f760:	af00      	add	r7, sp, #0
 800f762:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	2205      	movs	r2, #5
 800f768:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f76c:	2300      	movs	r3, #0
 800f76e:	2200      	movs	r2, #0
 800f770:	2100      	movs	r1, #0
 800f772:	6878      	ldr	r0, [r7, #4]
 800f774:	f00e fb8a 	bl	801de8c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f778:	2300      	movs	r3, #0
}
 800f77a:	4618      	mov	r0, r3
 800f77c:	3708      	adds	r7, #8
 800f77e:	46bd      	mov	sp, r7
 800f780:	bd80      	pop	{r7, pc}

0800f782 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800f782:	b480      	push	{r7}
 800f784:	b085      	sub	sp, #20
 800f786:	af00      	add	r7, sp, #0
 800f788:	4603      	mov	r3, r0
 800f78a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800f78c:	2300      	movs	r3, #0
 800f78e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800f790:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f794:	2b84      	cmp	r3, #132	@ 0x84
 800f796:	d005      	beq.n	800f7a4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800f798:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	4413      	add	r3, r2
 800f7a0:	3303      	adds	r3, #3
 800f7a2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800f7a4:	68fb      	ldr	r3, [r7, #12]
}
 800f7a6:	4618      	mov	r0, r3
 800f7a8:	3714      	adds	r7, #20
 800f7aa:	46bd      	mov	sp, r7
 800f7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7b0:	4770      	bx	lr

0800f7b2 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800f7b2:	b480      	push	{r7}
 800f7b4:	b083      	sub	sp, #12
 800f7b6:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f7b8:	f3ef 8305 	mrs	r3, IPSR
 800f7bc:	607b      	str	r3, [r7, #4]
  return(result);
 800f7be:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	bf14      	ite	ne
 800f7c4:	2301      	movne	r3, #1
 800f7c6:	2300      	moveq	r3, #0
 800f7c8:	b2db      	uxtb	r3, r3
}
 800f7ca:	4618      	mov	r0, r3
 800f7cc:	370c      	adds	r7, #12
 800f7ce:	46bd      	mov	sp, r7
 800f7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7d4:	4770      	bx	lr

0800f7d6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800f7d6:	b580      	push	{r7, lr}
 800f7d8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800f7da:	f001 fc95 	bl	8011108 <vTaskStartScheduler>
  
  return osOK;
 800f7de:	2300      	movs	r3, #0
}
 800f7e0:	4618      	mov	r0, r3
 800f7e2:	bd80      	pop	{r7, pc}

0800f7e4 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800f7e4:	b580      	push	{r7, lr}
 800f7e6:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800f7e8:	f7ff ffe3 	bl	800f7b2 <inHandlerMode>
 800f7ec:	4603      	mov	r3, r0
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d003      	beq.n	800f7fa <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800f7f2:	f001 fdaf 	bl	8011354 <xTaskGetTickCountFromISR>
 800f7f6:	4603      	mov	r3, r0
 800f7f8:	e002      	b.n	800f800 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800f7fa:	f001 fd9b 	bl	8011334 <xTaskGetTickCount>
 800f7fe:	4603      	mov	r3, r0
  }
}
 800f800:	4618      	mov	r0, r3
 800f802:	bd80      	pop	{r7, pc}

0800f804 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800f804:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f806:	b089      	sub	sp, #36	@ 0x24
 800f808:	af04      	add	r7, sp, #16
 800f80a:	6078      	str	r0, [r7, #4]
 800f80c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	695b      	ldr	r3, [r3, #20]
 800f812:	2b00      	cmp	r3, #0
 800f814:	d020      	beq.n	800f858 <osThreadCreate+0x54>
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	699b      	ldr	r3, [r3, #24]
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d01c      	beq.n	800f858 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	685c      	ldr	r4, [r3, #4]
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	691e      	ldr	r6, [r3, #16]
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f830:	4618      	mov	r0, r3
 800f832:	f7ff ffa6 	bl	800f782 <makeFreeRtosPriority>
 800f836:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	695b      	ldr	r3, [r3, #20]
 800f83c:	687a      	ldr	r2, [r7, #4]
 800f83e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f840:	9202      	str	r2, [sp, #8]
 800f842:	9301      	str	r3, [sp, #4]
 800f844:	9100      	str	r1, [sp, #0]
 800f846:	683b      	ldr	r3, [r7, #0]
 800f848:	4632      	mov	r2, r6
 800f84a:	4629      	mov	r1, r5
 800f84c:	4620      	mov	r0, r4
 800f84e:	f001 fa75 	bl	8010d3c <xTaskCreateStatic>
 800f852:	4603      	mov	r3, r0
 800f854:	60fb      	str	r3, [r7, #12]
 800f856:	e01c      	b.n	800f892 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	685c      	ldr	r4, [r3, #4]
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f864:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f86c:	4618      	mov	r0, r3
 800f86e:	f7ff ff88 	bl	800f782 <makeFreeRtosPriority>
 800f872:	4602      	mov	r2, r0
 800f874:	f107 030c 	add.w	r3, r7, #12
 800f878:	9301      	str	r3, [sp, #4]
 800f87a:	9200      	str	r2, [sp, #0]
 800f87c:	683b      	ldr	r3, [r7, #0]
 800f87e:	4632      	mov	r2, r6
 800f880:	4629      	mov	r1, r5
 800f882:	4620      	mov	r0, r4
 800f884:	f001 faba 	bl	8010dfc <xTaskCreate>
 800f888:	4603      	mov	r3, r0
 800f88a:	2b01      	cmp	r3, #1
 800f88c:	d001      	beq.n	800f892 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800f88e:	2300      	movs	r3, #0
 800f890:	e000      	b.n	800f894 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800f892:	68fb      	ldr	r3, [r7, #12]
}
 800f894:	4618      	mov	r0, r3
 800f896:	3714      	adds	r7, #20
 800f898:	46bd      	mov	sp, r7
 800f89a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f89c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800f89c:	b580      	push	{r7, lr}
 800f89e:	b084      	sub	sp, #16
 800f8a0:	af00      	add	r7, sp, #0
 800f8a2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d001      	beq.n	800f8b2 <osDelay+0x16>
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	e000      	b.n	800f8b4 <osDelay+0x18>
 800f8b2:	2301      	movs	r3, #1
 800f8b4:	4618      	mov	r0, r3
 800f8b6:	f001 fbf1 	bl	801109c <vTaskDelay>
  
  return osOK;
 800f8ba:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800f8bc:	4618      	mov	r0, r3
 800f8be:	3710      	adds	r7, #16
 800f8c0:	46bd      	mov	sp, r7
 800f8c2:	bd80      	pop	{r7, pc}

0800f8c4 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800f8c4:	b580      	push	{r7, lr}
 800f8c6:	b082      	sub	sp, #8
 800f8c8:	af00      	add	r7, sp, #0
 800f8ca:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	685b      	ldr	r3, [r3, #4]
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d007      	beq.n	800f8e4 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	685b      	ldr	r3, [r3, #4]
 800f8d8:	4619      	mov	r1, r3
 800f8da:	2001      	movs	r0, #1
 800f8dc:	f000 fc47 	bl	801016e <xQueueCreateMutexStatic>
 800f8e0:	4603      	mov	r3, r0
 800f8e2:	e003      	b.n	800f8ec <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800f8e4:	2001      	movs	r0, #1
 800f8e6:	f000 fc2a 	bl	801013e <xQueueCreateMutex>
 800f8ea:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800f8ec:	4618      	mov	r0, r3
 800f8ee:	3708      	adds	r7, #8
 800f8f0:	46bd      	mov	sp, r7
 800f8f2:	bd80      	pop	{r7, pc}

0800f8f4 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800f8f4:	b580      	push	{r7, lr}
 800f8f6:	b084      	sub	sp, #16
 800f8f8:	af00      	add	r7, sp, #0
 800f8fa:	6078      	str	r0, [r7, #4]
 800f8fc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800f8fe:	2300      	movs	r3, #0
 800f900:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	2b00      	cmp	r3, #0
 800f906:	d101      	bne.n	800f90c <osMutexWait+0x18>
    return osErrorParameter;
 800f908:	2380      	movs	r3, #128	@ 0x80
 800f90a:	e03a      	b.n	800f982 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800f90c:	2300      	movs	r3, #0
 800f90e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800f910:	683b      	ldr	r3, [r7, #0]
 800f912:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f916:	d103      	bne.n	800f920 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800f918:	f04f 33ff 	mov.w	r3, #4294967295
 800f91c:	60fb      	str	r3, [r7, #12]
 800f91e:	e009      	b.n	800f934 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800f920:	683b      	ldr	r3, [r7, #0]
 800f922:	2b00      	cmp	r3, #0
 800f924:	d006      	beq.n	800f934 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800f926:	683b      	ldr	r3, [r7, #0]
 800f928:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d101      	bne.n	800f934 <osMutexWait+0x40>
      ticks = 1;
 800f930:	2301      	movs	r3, #1
 800f932:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800f934:	f7ff ff3d 	bl	800f7b2 <inHandlerMode>
 800f938:	4603      	mov	r3, r0
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d017      	beq.n	800f96e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800f93e:	f107 0308 	add.w	r3, r7, #8
 800f942:	461a      	mov	r2, r3
 800f944:	2100      	movs	r1, #0
 800f946:	6878      	ldr	r0, [r7, #4]
 800f948:	f001 f84e 	bl	80109e8 <xQueueReceiveFromISR>
 800f94c:	4603      	mov	r3, r0
 800f94e:	2b01      	cmp	r3, #1
 800f950:	d001      	beq.n	800f956 <osMutexWait+0x62>
      return osErrorOS;
 800f952:	23ff      	movs	r3, #255	@ 0xff
 800f954:	e015      	b.n	800f982 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800f956:	68bb      	ldr	r3, [r7, #8]
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d011      	beq.n	800f980 <osMutexWait+0x8c>
 800f95c:	4b0b      	ldr	r3, [pc, #44]	@ (800f98c <osMutexWait+0x98>)
 800f95e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f962:	601a      	str	r2, [r3, #0]
 800f964:	f3bf 8f4f 	dsb	sy
 800f968:	f3bf 8f6f 	isb	sy
 800f96c:	e008      	b.n	800f980 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800f96e:	68f9      	ldr	r1, [r7, #12]
 800f970:	6878      	ldr	r0, [r7, #4]
 800f972:	f000 ff29 	bl	80107c8 <xQueueSemaphoreTake>
 800f976:	4603      	mov	r3, r0
 800f978:	2b01      	cmp	r3, #1
 800f97a:	d001      	beq.n	800f980 <osMutexWait+0x8c>
    return osErrorOS;
 800f97c:	23ff      	movs	r3, #255	@ 0xff
 800f97e:	e000      	b.n	800f982 <osMutexWait+0x8e>
  }
  
  return osOK;
 800f980:	2300      	movs	r3, #0
}
 800f982:	4618      	mov	r0, r3
 800f984:	3710      	adds	r7, #16
 800f986:	46bd      	mov	sp, r7
 800f988:	bd80      	pop	{r7, pc}
 800f98a:	bf00      	nop
 800f98c:	e000ed04 	.word	0xe000ed04

0800f990 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800f990:	b580      	push	{r7, lr}
 800f992:	b084      	sub	sp, #16
 800f994:	af00      	add	r7, sp, #0
 800f996:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800f998:	2300      	movs	r3, #0
 800f99a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800f99c:	2300      	movs	r3, #0
 800f99e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800f9a0:	f7ff ff07 	bl	800f7b2 <inHandlerMode>
 800f9a4:	4603      	mov	r3, r0
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d016      	beq.n	800f9d8 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800f9aa:	f107 0308 	add.w	r3, r7, #8
 800f9ae:	4619      	mov	r1, r3
 800f9b0:	6878      	ldr	r0, [r7, #4]
 800f9b2:	f000 fd97 	bl	80104e4 <xQueueGiveFromISR>
 800f9b6:	4603      	mov	r3, r0
 800f9b8:	2b01      	cmp	r3, #1
 800f9ba:	d001      	beq.n	800f9c0 <osMutexRelease+0x30>
      return osErrorOS;
 800f9bc:	23ff      	movs	r3, #255	@ 0xff
 800f9be:	e017      	b.n	800f9f0 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800f9c0:	68bb      	ldr	r3, [r7, #8]
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d013      	beq.n	800f9ee <osMutexRelease+0x5e>
 800f9c6:	4b0c      	ldr	r3, [pc, #48]	@ (800f9f8 <osMutexRelease+0x68>)
 800f9c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f9cc:	601a      	str	r2, [r3, #0]
 800f9ce:	f3bf 8f4f 	dsb	sy
 800f9d2:	f3bf 8f6f 	isb	sy
 800f9d6:	e00a      	b.n	800f9ee <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800f9d8:	2300      	movs	r3, #0
 800f9da:	2200      	movs	r2, #0
 800f9dc:	2100      	movs	r1, #0
 800f9de:	6878      	ldr	r0, [r7, #4]
 800f9e0:	f000 fbe0 	bl	80101a4 <xQueueGenericSend>
 800f9e4:	4603      	mov	r3, r0
 800f9e6:	2b01      	cmp	r3, #1
 800f9e8:	d001      	beq.n	800f9ee <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800f9ea:	23ff      	movs	r3, #255	@ 0xff
 800f9ec:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800f9ee:	68fb      	ldr	r3, [r7, #12]
}
 800f9f0:	4618      	mov	r0, r3
 800f9f2:	3710      	adds	r7, #16
 800f9f4:	46bd      	mov	sp, r7
 800f9f6:	bd80      	pop	{r7, pc}
 800f9f8:	e000ed04 	.word	0xe000ed04

0800f9fc <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800f9fc:	b580      	push	{r7, lr}
 800f9fe:	b086      	sub	sp, #24
 800fa00:	af02      	add	r7, sp, #8
 800fa02:	6078      	str	r0, [r7, #4]
 800fa04:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	685b      	ldr	r3, [r3, #4]
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d00f      	beq.n	800fa2e <osSemaphoreCreate+0x32>
    if (count == 1) {
 800fa0e:	683b      	ldr	r3, [r7, #0]
 800fa10:	2b01      	cmp	r3, #1
 800fa12:	d10a      	bne.n	800fa2a <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	685b      	ldr	r3, [r3, #4]
 800fa18:	2203      	movs	r2, #3
 800fa1a:	9200      	str	r2, [sp, #0]
 800fa1c:	2200      	movs	r2, #0
 800fa1e:	2100      	movs	r1, #0
 800fa20:	2001      	movs	r0, #1
 800fa22:	f000 fa9b 	bl	800ff5c <xQueueGenericCreateStatic>
 800fa26:	4603      	mov	r3, r0
 800fa28:	e016      	b.n	800fa58 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800fa2a:	2300      	movs	r3, #0
 800fa2c:	e014      	b.n	800fa58 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800fa2e:	683b      	ldr	r3, [r7, #0]
 800fa30:	2b01      	cmp	r3, #1
 800fa32:	d110      	bne.n	800fa56 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800fa34:	2203      	movs	r2, #3
 800fa36:	2100      	movs	r1, #0
 800fa38:	2001      	movs	r0, #1
 800fa3a:	f000 fb0c 	bl	8010056 <xQueueGenericCreate>
 800fa3e:	60f8      	str	r0, [r7, #12]
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d005      	beq.n	800fa52 <osSemaphoreCreate+0x56>
 800fa46:	2300      	movs	r3, #0
 800fa48:	2200      	movs	r2, #0
 800fa4a:	2100      	movs	r1, #0
 800fa4c:	68f8      	ldr	r0, [r7, #12]
 800fa4e:	f000 fba9 	bl	80101a4 <xQueueGenericSend>
      return sema;
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	e000      	b.n	800fa58 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800fa56:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800fa58:	4618      	mov	r0, r3
 800fa5a:	3710      	adds	r7, #16
 800fa5c:	46bd      	mov	sp, r7
 800fa5e:	bd80      	pop	{r7, pc}

0800fa60 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800fa60:	b580      	push	{r7, lr}
 800fa62:	b084      	sub	sp, #16
 800fa64:	af00      	add	r7, sp, #0
 800fa66:	6078      	str	r0, [r7, #4]
 800fa68:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800fa6a:	2300      	movs	r3, #0
 800fa6c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d101      	bne.n	800fa78 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800fa74:	2380      	movs	r3, #128	@ 0x80
 800fa76:	e03a      	b.n	800faee <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800fa78:	2300      	movs	r3, #0
 800fa7a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800fa7c:	683b      	ldr	r3, [r7, #0]
 800fa7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa82:	d103      	bne.n	800fa8c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800fa84:	f04f 33ff 	mov.w	r3, #4294967295
 800fa88:	60fb      	str	r3, [r7, #12]
 800fa8a:	e009      	b.n	800faa0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800fa8c:	683b      	ldr	r3, [r7, #0]
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d006      	beq.n	800faa0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800fa92:	683b      	ldr	r3, [r7, #0]
 800fa94:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d101      	bne.n	800faa0 <osSemaphoreWait+0x40>
      ticks = 1;
 800fa9c:	2301      	movs	r3, #1
 800fa9e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800faa0:	f7ff fe87 	bl	800f7b2 <inHandlerMode>
 800faa4:	4603      	mov	r3, r0
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d017      	beq.n	800fada <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800faaa:	f107 0308 	add.w	r3, r7, #8
 800faae:	461a      	mov	r2, r3
 800fab0:	2100      	movs	r1, #0
 800fab2:	6878      	ldr	r0, [r7, #4]
 800fab4:	f000 ff98 	bl	80109e8 <xQueueReceiveFromISR>
 800fab8:	4603      	mov	r3, r0
 800faba:	2b01      	cmp	r3, #1
 800fabc:	d001      	beq.n	800fac2 <osSemaphoreWait+0x62>
      return osErrorOS;
 800fabe:	23ff      	movs	r3, #255	@ 0xff
 800fac0:	e015      	b.n	800faee <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800fac2:	68bb      	ldr	r3, [r7, #8]
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d011      	beq.n	800faec <osSemaphoreWait+0x8c>
 800fac8:	4b0b      	ldr	r3, [pc, #44]	@ (800faf8 <osSemaphoreWait+0x98>)
 800faca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800face:	601a      	str	r2, [r3, #0]
 800fad0:	f3bf 8f4f 	dsb	sy
 800fad4:	f3bf 8f6f 	isb	sy
 800fad8:	e008      	b.n	800faec <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800fada:	68f9      	ldr	r1, [r7, #12]
 800fadc:	6878      	ldr	r0, [r7, #4]
 800fade:	f000 fe73 	bl	80107c8 <xQueueSemaphoreTake>
 800fae2:	4603      	mov	r3, r0
 800fae4:	2b01      	cmp	r3, #1
 800fae6:	d001      	beq.n	800faec <osSemaphoreWait+0x8c>
    return osErrorOS;
 800fae8:	23ff      	movs	r3, #255	@ 0xff
 800faea:	e000      	b.n	800faee <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800faec:	2300      	movs	r3, #0
}
 800faee:	4618      	mov	r0, r3
 800faf0:	3710      	adds	r7, #16
 800faf2:	46bd      	mov	sp, r7
 800faf4:	bd80      	pop	{r7, pc}
 800faf6:	bf00      	nop
 800faf8:	e000ed04 	.word	0xe000ed04

0800fafc <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800fafc:	b580      	push	{r7, lr}
 800fafe:	b084      	sub	sp, #16
 800fb00:	af00      	add	r7, sp, #0
 800fb02:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800fb04:	2300      	movs	r3, #0
 800fb06:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800fb08:	2300      	movs	r3, #0
 800fb0a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800fb0c:	f7ff fe51 	bl	800f7b2 <inHandlerMode>
 800fb10:	4603      	mov	r3, r0
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d016      	beq.n	800fb44 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800fb16:	f107 0308 	add.w	r3, r7, #8
 800fb1a:	4619      	mov	r1, r3
 800fb1c:	6878      	ldr	r0, [r7, #4]
 800fb1e:	f000 fce1 	bl	80104e4 <xQueueGiveFromISR>
 800fb22:	4603      	mov	r3, r0
 800fb24:	2b01      	cmp	r3, #1
 800fb26:	d001      	beq.n	800fb2c <osSemaphoreRelease+0x30>
      return osErrorOS;
 800fb28:	23ff      	movs	r3, #255	@ 0xff
 800fb2a:	e017      	b.n	800fb5c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800fb2c:	68bb      	ldr	r3, [r7, #8]
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d013      	beq.n	800fb5a <osSemaphoreRelease+0x5e>
 800fb32:	4b0c      	ldr	r3, [pc, #48]	@ (800fb64 <osSemaphoreRelease+0x68>)
 800fb34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fb38:	601a      	str	r2, [r3, #0]
 800fb3a:	f3bf 8f4f 	dsb	sy
 800fb3e:	f3bf 8f6f 	isb	sy
 800fb42:	e00a      	b.n	800fb5a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800fb44:	2300      	movs	r3, #0
 800fb46:	2200      	movs	r2, #0
 800fb48:	2100      	movs	r1, #0
 800fb4a:	6878      	ldr	r0, [r7, #4]
 800fb4c:	f000 fb2a 	bl	80101a4 <xQueueGenericSend>
 800fb50:	4603      	mov	r3, r0
 800fb52:	2b01      	cmp	r3, #1
 800fb54:	d001      	beq.n	800fb5a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800fb56:	23ff      	movs	r3, #255	@ 0xff
 800fb58:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800fb5a:	68fb      	ldr	r3, [r7, #12]
}
 800fb5c:	4618      	mov	r0, r3
 800fb5e:	3710      	adds	r7, #16
 800fb60:	46bd      	mov	sp, r7
 800fb62:	bd80      	pop	{r7, pc}
 800fb64:	e000ed04 	.word	0xe000ed04

0800fb68 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800fb68:	b590      	push	{r4, r7, lr}
 800fb6a:	b085      	sub	sp, #20
 800fb6c:	af02      	add	r7, sp, #8
 800fb6e:	6078      	str	r0, [r7, #4]
 800fb70:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	689b      	ldr	r3, [r3, #8]
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d011      	beq.n	800fb9e <osMessageCreate+0x36>
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	68db      	ldr	r3, [r3, #12]
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d00d      	beq.n	800fb9e <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	6818      	ldr	r0, [r3, #0]
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	6859      	ldr	r1, [r3, #4]
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	689a      	ldr	r2, [r3, #8]
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	68db      	ldr	r3, [r3, #12]
 800fb92:	2400      	movs	r4, #0
 800fb94:	9400      	str	r4, [sp, #0]
 800fb96:	f000 f9e1 	bl	800ff5c <xQueueGenericCreateStatic>
 800fb9a:	4603      	mov	r3, r0
 800fb9c:	e008      	b.n	800fbb0 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	6818      	ldr	r0, [r3, #0]
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	685b      	ldr	r3, [r3, #4]
 800fba6:	2200      	movs	r2, #0
 800fba8:	4619      	mov	r1, r3
 800fbaa:	f000 fa54 	bl	8010056 <xQueueGenericCreate>
 800fbae:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800fbb0:	4618      	mov	r0, r3
 800fbb2:	370c      	adds	r7, #12
 800fbb4:	46bd      	mov	sp, r7
 800fbb6:	bd90      	pop	{r4, r7, pc}

0800fbb8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800fbb8:	b580      	push	{r7, lr}
 800fbba:	b086      	sub	sp, #24
 800fbbc:	af00      	add	r7, sp, #0
 800fbbe:	60f8      	str	r0, [r7, #12]
 800fbc0:	60b9      	str	r1, [r7, #8]
 800fbc2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800fbc4:	2300      	movs	r3, #0
 800fbc6:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800fbcc:	697b      	ldr	r3, [r7, #20]
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d101      	bne.n	800fbd6 <osMessagePut+0x1e>
    ticks = 1;
 800fbd2:	2301      	movs	r3, #1
 800fbd4:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800fbd6:	f7ff fdec 	bl	800f7b2 <inHandlerMode>
 800fbda:	4603      	mov	r3, r0
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d018      	beq.n	800fc12 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800fbe0:	f107 0210 	add.w	r2, r7, #16
 800fbe4:	f107 0108 	add.w	r1, r7, #8
 800fbe8:	2300      	movs	r3, #0
 800fbea:	68f8      	ldr	r0, [r7, #12]
 800fbec:	f000 fbdc 	bl	80103a8 <xQueueGenericSendFromISR>
 800fbf0:	4603      	mov	r3, r0
 800fbf2:	2b01      	cmp	r3, #1
 800fbf4:	d001      	beq.n	800fbfa <osMessagePut+0x42>
      return osErrorOS;
 800fbf6:	23ff      	movs	r3, #255	@ 0xff
 800fbf8:	e018      	b.n	800fc2c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800fbfa:	693b      	ldr	r3, [r7, #16]
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d014      	beq.n	800fc2a <osMessagePut+0x72>
 800fc00:	4b0c      	ldr	r3, [pc, #48]	@ (800fc34 <osMessagePut+0x7c>)
 800fc02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fc06:	601a      	str	r2, [r3, #0]
 800fc08:	f3bf 8f4f 	dsb	sy
 800fc0c:	f3bf 8f6f 	isb	sy
 800fc10:	e00b      	b.n	800fc2a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800fc12:	f107 0108 	add.w	r1, r7, #8
 800fc16:	2300      	movs	r3, #0
 800fc18:	697a      	ldr	r2, [r7, #20]
 800fc1a:	68f8      	ldr	r0, [r7, #12]
 800fc1c:	f000 fac2 	bl	80101a4 <xQueueGenericSend>
 800fc20:	4603      	mov	r3, r0
 800fc22:	2b01      	cmp	r3, #1
 800fc24:	d001      	beq.n	800fc2a <osMessagePut+0x72>
      return osErrorOS;
 800fc26:	23ff      	movs	r3, #255	@ 0xff
 800fc28:	e000      	b.n	800fc2c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800fc2a:	2300      	movs	r3, #0
}
 800fc2c:	4618      	mov	r0, r3
 800fc2e:	3718      	adds	r7, #24
 800fc30:	46bd      	mov	sp, r7
 800fc32:	bd80      	pop	{r7, pc}
 800fc34:	e000ed04 	.word	0xe000ed04

0800fc38 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800fc38:	b590      	push	{r4, r7, lr}
 800fc3a:	b08b      	sub	sp, #44	@ 0x2c
 800fc3c:	af00      	add	r7, sp, #0
 800fc3e:	60f8      	str	r0, [r7, #12]
 800fc40:	60b9      	str	r1, [r7, #8]
 800fc42:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800fc44:	68bb      	ldr	r3, [r7, #8]
 800fc46:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800fc48:	2300      	movs	r3, #0
 800fc4a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800fc4c:	68bb      	ldr	r3, [r7, #8]
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d10a      	bne.n	800fc68 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800fc52:	2380      	movs	r3, #128	@ 0x80
 800fc54:	617b      	str	r3, [r7, #20]
    return event;
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	461c      	mov	r4, r3
 800fc5a:	f107 0314 	add.w	r3, r7, #20
 800fc5e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fc62:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800fc66:	e054      	b.n	800fd12 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800fc68:	2300      	movs	r3, #0
 800fc6a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800fc6c:	2300      	movs	r3, #0
 800fc6e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc76:	d103      	bne.n	800fc80 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800fc78:	f04f 33ff 	mov.w	r3, #4294967295
 800fc7c:	627b      	str	r3, [r7, #36]	@ 0x24
 800fc7e:	e009      	b.n	800fc94 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d006      	beq.n	800fc94 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 800fc8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d101      	bne.n	800fc94 <osMessageGet+0x5c>
      ticks = 1;
 800fc90:	2301      	movs	r3, #1
 800fc92:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 800fc94:	f7ff fd8d 	bl	800f7b2 <inHandlerMode>
 800fc98:	4603      	mov	r3, r0
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d01c      	beq.n	800fcd8 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800fc9e:	f107 0220 	add.w	r2, r7, #32
 800fca2:	f107 0314 	add.w	r3, r7, #20
 800fca6:	3304      	adds	r3, #4
 800fca8:	4619      	mov	r1, r3
 800fcaa:	68b8      	ldr	r0, [r7, #8]
 800fcac:	f000 fe9c 	bl	80109e8 <xQueueReceiveFromISR>
 800fcb0:	4603      	mov	r3, r0
 800fcb2:	2b01      	cmp	r3, #1
 800fcb4:	d102      	bne.n	800fcbc <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800fcb6:	2310      	movs	r3, #16
 800fcb8:	617b      	str	r3, [r7, #20]
 800fcba:	e001      	b.n	800fcc0 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800fcbc:	2300      	movs	r3, #0
 800fcbe:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800fcc0:	6a3b      	ldr	r3, [r7, #32]
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d01d      	beq.n	800fd02 <osMessageGet+0xca>
 800fcc6:	4b15      	ldr	r3, [pc, #84]	@ (800fd1c <osMessageGet+0xe4>)
 800fcc8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fccc:	601a      	str	r2, [r3, #0]
 800fcce:	f3bf 8f4f 	dsb	sy
 800fcd2:	f3bf 8f6f 	isb	sy
 800fcd6:	e014      	b.n	800fd02 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800fcd8:	f107 0314 	add.w	r3, r7, #20
 800fcdc:	3304      	adds	r3, #4
 800fcde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fce0:	4619      	mov	r1, r3
 800fce2:	68b8      	ldr	r0, [r7, #8]
 800fce4:	f000 fc8e 	bl	8010604 <xQueueReceive>
 800fce8:	4603      	mov	r3, r0
 800fcea:	2b01      	cmp	r3, #1
 800fcec:	d102      	bne.n	800fcf4 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800fcee:	2310      	movs	r3, #16
 800fcf0:	617b      	str	r3, [r7, #20]
 800fcf2:	e006      	b.n	800fd02 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800fcf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d101      	bne.n	800fcfe <osMessageGet+0xc6>
 800fcfa:	2300      	movs	r3, #0
 800fcfc:	e000      	b.n	800fd00 <osMessageGet+0xc8>
 800fcfe:	2340      	movs	r3, #64	@ 0x40
 800fd00:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	461c      	mov	r4, r3
 800fd06:	f107 0314 	add.w	r3, r7, #20
 800fd0a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fd0e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800fd12:	68f8      	ldr	r0, [r7, #12]
 800fd14:	372c      	adds	r7, #44	@ 0x2c
 800fd16:	46bd      	mov	sp, r7
 800fd18:	bd90      	pop	{r4, r7, pc}
 800fd1a:	bf00      	nop
 800fd1c:	e000ed04 	.word	0xe000ed04

0800fd20 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800fd20:	b480      	push	{r7}
 800fd22:	b083      	sub	sp, #12
 800fd24:	af00      	add	r7, sp, #0
 800fd26:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	f103 0208 	add.w	r2, r3, #8
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	f04f 32ff 	mov.w	r2, #4294967295
 800fd38:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	f103 0208 	add.w	r2, r3, #8
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	f103 0208 	add.w	r2, r3, #8
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	2200      	movs	r2, #0
 800fd52:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800fd54:	bf00      	nop
 800fd56:	370c      	adds	r7, #12
 800fd58:	46bd      	mov	sp, r7
 800fd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd5e:	4770      	bx	lr

0800fd60 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800fd60:	b480      	push	{r7}
 800fd62:	b083      	sub	sp, #12
 800fd64:	af00      	add	r7, sp, #0
 800fd66:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	2200      	movs	r2, #0
 800fd6c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800fd6e:	bf00      	nop
 800fd70:	370c      	adds	r7, #12
 800fd72:	46bd      	mov	sp, r7
 800fd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd78:	4770      	bx	lr

0800fd7a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800fd7a:	b480      	push	{r7}
 800fd7c:	b085      	sub	sp, #20
 800fd7e:	af00      	add	r7, sp, #0
 800fd80:	6078      	str	r0, [r7, #4]
 800fd82:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	685b      	ldr	r3, [r3, #4]
 800fd88:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800fd8a:	683b      	ldr	r3, [r7, #0]
 800fd8c:	68fa      	ldr	r2, [r7, #12]
 800fd8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	689a      	ldr	r2, [r3, #8]
 800fd94:	683b      	ldr	r3, [r7, #0]
 800fd96:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	689b      	ldr	r3, [r3, #8]
 800fd9c:	683a      	ldr	r2, [r7, #0]
 800fd9e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	683a      	ldr	r2, [r7, #0]
 800fda4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800fda6:	683b      	ldr	r3, [r7, #0]
 800fda8:	687a      	ldr	r2, [r7, #4]
 800fdaa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	1c5a      	adds	r2, r3, #1
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	601a      	str	r2, [r3, #0]
}
 800fdb6:	bf00      	nop
 800fdb8:	3714      	adds	r7, #20
 800fdba:	46bd      	mov	sp, r7
 800fdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdc0:	4770      	bx	lr

0800fdc2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800fdc2:	b480      	push	{r7}
 800fdc4:	b085      	sub	sp, #20
 800fdc6:	af00      	add	r7, sp, #0
 800fdc8:	6078      	str	r0, [r7, #4]
 800fdca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800fdcc:	683b      	ldr	r3, [r7, #0]
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800fdd2:	68bb      	ldr	r3, [r7, #8]
 800fdd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fdd8:	d103      	bne.n	800fde2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	691b      	ldr	r3, [r3, #16]
 800fdde:	60fb      	str	r3, [r7, #12]
 800fde0:	e00c      	b.n	800fdfc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	3308      	adds	r3, #8
 800fde6:	60fb      	str	r3, [r7, #12]
 800fde8:	e002      	b.n	800fdf0 <vListInsert+0x2e>
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	685b      	ldr	r3, [r3, #4]
 800fdee:	60fb      	str	r3, [r7, #12]
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	685b      	ldr	r3, [r3, #4]
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	68ba      	ldr	r2, [r7, #8]
 800fdf8:	429a      	cmp	r2, r3
 800fdfa:	d2f6      	bcs.n	800fdea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	685a      	ldr	r2, [r3, #4]
 800fe00:	683b      	ldr	r3, [r7, #0]
 800fe02:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800fe04:	683b      	ldr	r3, [r7, #0]
 800fe06:	685b      	ldr	r3, [r3, #4]
 800fe08:	683a      	ldr	r2, [r7, #0]
 800fe0a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800fe0c:	683b      	ldr	r3, [r7, #0]
 800fe0e:	68fa      	ldr	r2, [r7, #12]
 800fe10:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	683a      	ldr	r2, [r7, #0]
 800fe16:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800fe18:	683b      	ldr	r3, [r7, #0]
 800fe1a:	687a      	ldr	r2, [r7, #4]
 800fe1c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	1c5a      	adds	r2, r3, #1
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	601a      	str	r2, [r3, #0]
}
 800fe28:	bf00      	nop
 800fe2a:	3714      	adds	r7, #20
 800fe2c:	46bd      	mov	sp, r7
 800fe2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe32:	4770      	bx	lr

0800fe34 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800fe34:	b480      	push	{r7}
 800fe36:	b085      	sub	sp, #20
 800fe38:	af00      	add	r7, sp, #0
 800fe3a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	691b      	ldr	r3, [r3, #16]
 800fe40:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	685b      	ldr	r3, [r3, #4]
 800fe46:	687a      	ldr	r2, [r7, #4]
 800fe48:	6892      	ldr	r2, [r2, #8]
 800fe4a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	689b      	ldr	r3, [r3, #8]
 800fe50:	687a      	ldr	r2, [r7, #4]
 800fe52:	6852      	ldr	r2, [r2, #4]
 800fe54:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	685b      	ldr	r3, [r3, #4]
 800fe5a:	687a      	ldr	r2, [r7, #4]
 800fe5c:	429a      	cmp	r2, r3
 800fe5e:	d103      	bne.n	800fe68 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	689a      	ldr	r2, [r3, #8]
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	2200      	movs	r2, #0
 800fe6c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	681b      	ldr	r3, [r3, #0]
 800fe72:	1e5a      	subs	r2, r3, #1
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	681b      	ldr	r3, [r3, #0]
}
 800fe7c:	4618      	mov	r0, r3
 800fe7e:	3714      	adds	r7, #20
 800fe80:	46bd      	mov	sp, r7
 800fe82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe86:	4770      	bx	lr

0800fe88 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800fe88:	b580      	push	{r7, lr}
 800fe8a:	b084      	sub	sp, #16
 800fe8c:	af00      	add	r7, sp, #0
 800fe8e:	6078      	str	r0, [r7, #4]
 800fe90:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d10b      	bne.n	800feb4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800fe9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fea0:	f383 8811 	msr	BASEPRI, r3
 800fea4:	f3bf 8f6f 	isb	sy
 800fea8:	f3bf 8f4f 	dsb	sy
 800feac:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800feae:	bf00      	nop
 800feb0:	bf00      	nop
 800feb2:	e7fd      	b.n	800feb0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800feb4:	f002 f8c0 	bl	8012038 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	681a      	ldr	r2, [r3, #0]
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fec0:	68f9      	ldr	r1, [r7, #12]
 800fec2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800fec4:	fb01 f303 	mul.w	r3, r1, r3
 800fec8:	441a      	add	r2, r3
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800fece:	68fb      	ldr	r3, [r7, #12]
 800fed0:	2200      	movs	r2, #0
 800fed2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	681a      	ldr	r2, [r3, #0]
 800fed8:	68fb      	ldr	r3, [r7, #12]
 800feda:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	681a      	ldr	r2, [r3, #0]
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fee4:	3b01      	subs	r3, #1
 800fee6:	68f9      	ldr	r1, [r7, #12]
 800fee8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800feea:	fb01 f303 	mul.w	r3, r1, r3
 800feee:	441a      	add	r2, r3
 800fef0:	68fb      	ldr	r3, [r7, #12]
 800fef2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	22ff      	movs	r2, #255	@ 0xff
 800fef8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800fefc:	68fb      	ldr	r3, [r7, #12]
 800fefe:	22ff      	movs	r2, #255	@ 0xff
 800ff00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800ff04:	683b      	ldr	r3, [r7, #0]
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d114      	bne.n	800ff34 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	691b      	ldr	r3, [r3, #16]
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d01a      	beq.n	800ff48 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	3310      	adds	r3, #16
 800ff16:	4618      	mov	r0, r3
 800ff18:	f001 fb72 	bl	8011600 <xTaskRemoveFromEventList>
 800ff1c:	4603      	mov	r3, r0
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d012      	beq.n	800ff48 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ff22:	4b0d      	ldr	r3, [pc, #52]	@ (800ff58 <xQueueGenericReset+0xd0>)
 800ff24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ff28:	601a      	str	r2, [r3, #0]
 800ff2a:	f3bf 8f4f 	dsb	sy
 800ff2e:	f3bf 8f6f 	isb	sy
 800ff32:	e009      	b.n	800ff48 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	3310      	adds	r3, #16
 800ff38:	4618      	mov	r0, r3
 800ff3a:	f7ff fef1 	bl	800fd20 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	3324      	adds	r3, #36	@ 0x24
 800ff42:	4618      	mov	r0, r3
 800ff44:	f7ff feec 	bl	800fd20 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ff48:	f002 f8a8 	bl	801209c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ff4c:	2301      	movs	r3, #1
}
 800ff4e:	4618      	mov	r0, r3
 800ff50:	3710      	adds	r7, #16
 800ff52:	46bd      	mov	sp, r7
 800ff54:	bd80      	pop	{r7, pc}
 800ff56:	bf00      	nop
 800ff58:	e000ed04 	.word	0xe000ed04

0800ff5c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ff5c:	b580      	push	{r7, lr}
 800ff5e:	b08e      	sub	sp, #56	@ 0x38
 800ff60:	af02      	add	r7, sp, #8
 800ff62:	60f8      	str	r0, [r7, #12]
 800ff64:	60b9      	str	r1, [r7, #8]
 800ff66:	607a      	str	r2, [r7, #4]
 800ff68:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d10b      	bne.n	800ff88 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800ff70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff74:	f383 8811 	msr	BASEPRI, r3
 800ff78:	f3bf 8f6f 	isb	sy
 800ff7c:	f3bf 8f4f 	dsb	sy
 800ff80:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ff82:	bf00      	nop
 800ff84:	bf00      	nop
 800ff86:	e7fd      	b.n	800ff84 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ff88:	683b      	ldr	r3, [r7, #0]
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d10b      	bne.n	800ffa6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800ff8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff92:	f383 8811 	msr	BASEPRI, r3
 800ff96:	f3bf 8f6f 	isb	sy
 800ff9a:	f3bf 8f4f 	dsb	sy
 800ff9e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ffa0:	bf00      	nop
 800ffa2:	bf00      	nop
 800ffa4:	e7fd      	b.n	800ffa2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d002      	beq.n	800ffb2 <xQueueGenericCreateStatic+0x56>
 800ffac:	68bb      	ldr	r3, [r7, #8]
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d001      	beq.n	800ffb6 <xQueueGenericCreateStatic+0x5a>
 800ffb2:	2301      	movs	r3, #1
 800ffb4:	e000      	b.n	800ffb8 <xQueueGenericCreateStatic+0x5c>
 800ffb6:	2300      	movs	r3, #0
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d10b      	bne.n	800ffd4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800ffbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ffc0:	f383 8811 	msr	BASEPRI, r3
 800ffc4:	f3bf 8f6f 	isb	sy
 800ffc8:	f3bf 8f4f 	dsb	sy
 800ffcc:	623b      	str	r3, [r7, #32]
}
 800ffce:	bf00      	nop
 800ffd0:	bf00      	nop
 800ffd2:	e7fd      	b.n	800ffd0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d102      	bne.n	800ffe0 <xQueueGenericCreateStatic+0x84>
 800ffda:	68bb      	ldr	r3, [r7, #8]
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d101      	bne.n	800ffe4 <xQueueGenericCreateStatic+0x88>
 800ffe0:	2301      	movs	r3, #1
 800ffe2:	e000      	b.n	800ffe6 <xQueueGenericCreateStatic+0x8a>
 800ffe4:	2300      	movs	r3, #0
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d10b      	bne.n	8010002 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800ffea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ffee:	f383 8811 	msr	BASEPRI, r3
 800fff2:	f3bf 8f6f 	isb	sy
 800fff6:	f3bf 8f4f 	dsb	sy
 800fffa:	61fb      	str	r3, [r7, #28]
}
 800fffc:	bf00      	nop
 800fffe:	bf00      	nop
 8010000:	e7fd      	b.n	800fffe <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8010002:	2348      	movs	r3, #72	@ 0x48
 8010004:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8010006:	697b      	ldr	r3, [r7, #20]
 8010008:	2b48      	cmp	r3, #72	@ 0x48
 801000a:	d00b      	beq.n	8010024 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 801000c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010010:	f383 8811 	msr	BASEPRI, r3
 8010014:	f3bf 8f6f 	isb	sy
 8010018:	f3bf 8f4f 	dsb	sy
 801001c:	61bb      	str	r3, [r7, #24]
}
 801001e:	bf00      	nop
 8010020:	bf00      	nop
 8010022:	e7fd      	b.n	8010020 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8010024:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010026:	683b      	ldr	r3, [r7, #0]
 8010028:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 801002a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801002c:	2b00      	cmp	r3, #0
 801002e:	d00d      	beq.n	801004c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010030:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010032:	2201      	movs	r2, #1
 8010034:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010038:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 801003c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801003e:	9300      	str	r3, [sp, #0]
 8010040:	4613      	mov	r3, r2
 8010042:	687a      	ldr	r2, [r7, #4]
 8010044:	68b9      	ldr	r1, [r7, #8]
 8010046:	68f8      	ldr	r0, [r7, #12]
 8010048:	f000 f840 	bl	80100cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801004c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 801004e:	4618      	mov	r0, r3
 8010050:	3730      	adds	r7, #48	@ 0x30
 8010052:	46bd      	mov	sp, r7
 8010054:	bd80      	pop	{r7, pc}

08010056 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8010056:	b580      	push	{r7, lr}
 8010058:	b08a      	sub	sp, #40	@ 0x28
 801005a:	af02      	add	r7, sp, #8
 801005c:	60f8      	str	r0, [r7, #12]
 801005e:	60b9      	str	r1, [r7, #8]
 8010060:	4613      	mov	r3, r2
 8010062:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	2b00      	cmp	r3, #0
 8010068:	d10b      	bne.n	8010082 <xQueueGenericCreate+0x2c>
	__asm volatile
 801006a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801006e:	f383 8811 	msr	BASEPRI, r3
 8010072:	f3bf 8f6f 	isb	sy
 8010076:	f3bf 8f4f 	dsb	sy
 801007a:	613b      	str	r3, [r7, #16]
}
 801007c:	bf00      	nop
 801007e:	bf00      	nop
 8010080:	e7fd      	b.n	801007e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	68ba      	ldr	r2, [r7, #8]
 8010086:	fb02 f303 	mul.w	r3, r2, r3
 801008a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 801008c:	69fb      	ldr	r3, [r7, #28]
 801008e:	3348      	adds	r3, #72	@ 0x48
 8010090:	4618      	mov	r0, r3
 8010092:	f002 f8f3 	bl	801227c <pvPortMalloc>
 8010096:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8010098:	69bb      	ldr	r3, [r7, #24]
 801009a:	2b00      	cmp	r3, #0
 801009c:	d011      	beq.n	80100c2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801009e:	69bb      	ldr	r3, [r7, #24]
 80100a0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80100a2:	697b      	ldr	r3, [r7, #20]
 80100a4:	3348      	adds	r3, #72	@ 0x48
 80100a6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80100a8:	69bb      	ldr	r3, [r7, #24]
 80100aa:	2200      	movs	r2, #0
 80100ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80100b0:	79fa      	ldrb	r2, [r7, #7]
 80100b2:	69bb      	ldr	r3, [r7, #24]
 80100b4:	9300      	str	r3, [sp, #0]
 80100b6:	4613      	mov	r3, r2
 80100b8:	697a      	ldr	r2, [r7, #20]
 80100ba:	68b9      	ldr	r1, [r7, #8]
 80100bc:	68f8      	ldr	r0, [r7, #12]
 80100be:	f000 f805 	bl	80100cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80100c2:	69bb      	ldr	r3, [r7, #24]
	}
 80100c4:	4618      	mov	r0, r3
 80100c6:	3720      	adds	r7, #32
 80100c8:	46bd      	mov	sp, r7
 80100ca:	bd80      	pop	{r7, pc}

080100cc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80100cc:	b580      	push	{r7, lr}
 80100ce:	b084      	sub	sp, #16
 80100d0:	af00      	add	r7, sp, #0
 80100d2:	60f8      	str	r0, [r7, #12]
 80100d4:	60b9      	str	r1, [r7, #8]
 80100d6:	607a      	str	r2, [r7, #4]
 80100d8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80100da:	68bb      	ldr	r3, [r7, #8]
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d103      	bne.n	80100e8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80100e0:	69bb      	ldr	r3, [r7, #24]
 80100e2:	69ba      	ldr	r2, [r7, #24]
 80100e4:	601a      	str	r2, [r3, #0]
 80100e6:	e002      	b.n	80100ee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80100e8:	69bb      	ldr	r3, [r7, #24]
 80100ea:	687a      	ldr	r2, [r7, #4]
 80100ec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80100ee:	69bb      	ldr	r3, [r7, #24]
 80100f0:	68fa      	ldr	r2, [r7, #12]
 80100f2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80100f4:	69bb      	ldr	r3, [r7, #24]
 80100f6:	68ba      	ldr	r2, [r7, #8]
 80100f8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80100fa:	2101      	movs	r1, #1
 80100fc:	69b8      	ldr	r0, [r7, #24]
 80100fe:	f7ff fec3 	bl	800fe88 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8010102:	bf00      	nop
 8010104:	3710      	adds	r7, #16
 8010106:	46bd      	mov	sp, r7
 8010108:	bd80      	pop	{r7, pc}

0801010a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 801010a:	b580      	push	{r7, lr}
 801010c:	b082      	sub	sp, #8
 801010e:	af00      	add	r7, sp, #0
 8010110:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	2b00      	cmp	r3, #0
 8010116:	d00e      	beq.n	8010136 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	2200      	movs	r2, #0
 801011c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	2200      	movs	r2, #0
 8010122:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	2200      	movs	r2, #0
 8010128:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801012a:	2300      	movs	r3, #0
 801012c:	2200      	movs	r2, #0
 801012e:	2100      	movs	r1, #0
 8010130:	6878      	ldr	r0, [r7, #4]
 8010132:	f000 f837 	bl	80101a4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8010136:	bf00      	nop
 8010138:	3708      	adds	r7, #8
 801013a:	46bd      	mov	sp, r7
 801013c:	bd80      	pop	{r7, pc}

0801013e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 801013e:	b580      	push	{r7, lr}
 8010140:	b086      	sub	sp, #24
 8010142:	af00      	add	r7, sp, #0
 8010144:	4603      	mov	r3, r0
 8010146:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8010148:	2301      	movs	r3, #1
 801014a:	617b      	str	r3, [r7, #20]
 801014c:	2300      	movs	r3, #0
 801014e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8010150:	79fb      	ldrb	r3, [r7, #7]
 8010152:	461a      	mov	r2, r3
 8010154:	6939      	ldr	r1, [r7, #16]
 8010156:	6978      	ldr	r0, [r7, #20]
 8010158:	f7ff ff7d 	bl	8010056 <xQueueGenericCreate>
 801015c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 801015e:	68f8      	ldr	r0, [r7, #12]
 8010160:	f7ff ffd3 	bl	801010a <prvInitialiseMutex>

		return xNewQueue;
 8010164:	68fb      	ldr	r3, [r7, #12]
	}
 8010166:	4618      	mov	r0, r3
 8010168:	3718      	adds	r7, #24
 801016a:	46bd      	mov	sp, r7
 801016c:	bd80      	pop	{r7, pc}

0801016e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 801016e:	b580      	push	{r7, lr}
 8010170:	b088      	sub	sp, #32
 8010172:	af02      	add	r7, sp, #8
 8010174:	4603      	mov	r3, r0
 8010176:	6039      	str	r1, [r7, #0]
 8010178:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801017a:	2301      	movs	r3, #1
 801017c:	617b      	str	r3, [r7, #20]
 801017e:	2300      	movs	r3, #0
 8010180:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8010182:	79fb      	ldrb	r3, [r7, #7]
 8010184:	9300      	str	r3, [sp, #0]
 8010186:	683b      	ldr	r3, [r7, #0]
 8010188:	2200      	movs	r2, #0
 801018a:	6939      	ldr	r1, [r7, #16]
 801018c:	6978      	ldr	r0, [r7, #20]
 801018e:	f7ff fee5 	bl	800ff5c <xQueueGenericCreateStatic>
 8010192:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8010194:	68f8      	ldr	r0, [r7, #12]
 8010196:	f7ff ffb8 	bl	801010a <prvInitialiseMutex>

		return xNewQueue;
 801019a:	68fb      	ldr	r3, [r7, #12]
	}
 801019c:	4618      	mov	r0, r3
 801019e:	3718      	adds	r7, #24
 80101a0:	46bd      	mov	sp, r7
 80101a2:	bd80      	pop	{r7, pc}

080101a4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80101a4:	b580      	push	{r7, lr}
 80101a6:	b08e      	sub	sp, #56	@ 0x38
 80101a8:	af00      	add	r7, sp, #0
 80101aa:	60f8      	str	r0, [r7, #12]
 80101ac:	60b9      	str	r1, [r7, #8]
 80101ae:	607a      	str	r2, [r7, #4]
 80101b0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80101b2:	2300      	movs	r3, #0
 80101b4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80101b6:	68fb      	ldr	r3, [r7, #12]
 80101b8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80101ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d10b      	bne.n	80101d8 <xQueueGenericSend+0x34>
	__asm volatile
 80101c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80101c4:	f383 8811 	msr	BASEPRI, r3
 80101c8:	f3bf 8f6f 	isb	sy
 80101cc:	f3bf 8f4f 	dsb	sy
 80101d0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80101d2:	bf00      	nop
 80101d4:	bf00      	nop
 80101d6:	e7fd      	b.n	80101d4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80101d8:	68bb      	ldr	r3, [r7, #8]
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d103      	bne.n	80101e6 <xQueueGenericSend+0x42>
 80101de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d101      	bne.n	80101ea <xQueueGenericSend+0x46>
 80101e6:	2301      	movs	r3, #1
 80101e8:	e000      	b.n	80101ec <xQueueGenericSend+0x48>
 80101ea:	2300      	movs	r3, #0
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d10b      	bne.n	8010208 <xQueueGenericSend+0x64>
	__asm volatile
 80101f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80101f4:	f383 8811 	msr	BASEPRI, r3
 80101f8:	f3bf 8f6f 	isb	sy
 80101fc:	f3bf 8f4f 	dsb	sy
 8010200:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8010202:	bf00      	nop
 8010204:	bf00      	nop
 8010206:	e7fd      	b.n	8010204 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010208:	683b      	ldr	r3, [r7, #0]
 801020a:	2b02      	cmp	r3, #2
 801020c:	d103      	bne.n	8010216 <xQueueGenericSend+0x72>
 801020e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010210:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010212:	2b01      	cmp	r3, #1
 8010214:	d101      	bne.n	801021a <xQueueGenericSend+0x76>
 8010216:	2301      	movs	r3, #1
 8010218:	e000      	b.n	801021c <xQueueGenericSend+0x78>
 801021a:	2300      	movs	r3, #0
 801021c:	2b00      	cmp	r3, #0
 801021e:	d10b      	bne.n	8010238 <xQueueGenericSend+0x94>
	__asm volatile
 8010220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010224:	f383 8811 	msr	BASEPRI, r3
 8010228:	f3bf 8f6f 	isb	sy
 801022c:	f3bf 8f4f 	dsb	sy
 8010230:	623b      	str	r3, [r7, #32]
}
 8010232:	bf00      	nop
 8010234:	bf00      	nop
 8010236:	e7fd      	b.n	8010234 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010238:	f001 fba8 	bl	801198c <xTaskGetSchedulerState>
 801023c:	4603      	mov	r3, r0
 801023e:	2b00      	cmp	r3, #0
 8010240:	d102      	bne.n	8010248 <xQueueGenericSend+0xa4>
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	2b00      	cmp	r3, #0
 8010246:	d101      	bne.n	801024c <xQueueGenericSend+0xa8>
 8010248:	2301      	movs	r3, #1
 801024a:	e000      	b.n	801024e <xQueueGenericSend+0xaa>
 801024c:	2300      	movs	r3, #0
 801024e:	2b00      	cmp	r3, #0
 8010250:	d10b      	bne.n	801026a <xQueueGenericSend+0xc6>
	__asm volatile
 8010252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010256:	f383 8811 	msr	BASEPRI, r3
 801025a:	f3bf 8f6f 	isb	sy
 801025e:	f3bf 8f4f 	dsb	sy
 8010262:	61fb      	str	r3, [r7, #28]
}
 8010264:	bf00      	nop
 8010266:	bf00      	nop
 8010268:	e7fd      	b.n	8010266 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801026a:	f001 fee5 	bl	8012038 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801026e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010270:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010274:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010276:	429a      	cmp	r2, r3
 8010278:	d302      	bcc.n	8010280 <xQueueGenericSend+0xdc>
 801027a:	683b      	ldr	r3, [r7, #0]
 801027c:	2b02      	cmp	r3, #2
 801027e:	d129      	bne.n	80102d4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010280:	683a      	ldr	r2, [r7, #0]
 8010282:	68b9      	ldr	r1, [r7, #8]
 8010284:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010286:	f000 fc49 	bl	8010b1c <prvCopyDataToQueue>
 801028a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801028c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801028e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010290:	2b00      	cmp	r3, #0
 8010292:	d010      	beq.n	80102b6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010296:	3324      	adds	r3, #36	@ 0x24
 8010298:	4618      	mov	r0, r3
 801029a:	f001 f9b1 	bl	8011600 <xTaskRemoveFromEventList>
 801029e:	4603      	mov	r3, r0
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d013      	beq.n	80102cc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80102a4:	4b3f      	ldr	r3, [pc, #252]	@ (80103a4 <xQueueGenericSend+0x200>)
 80102a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80102aa:	601a      	str	r2, [r3, #0]
 80102ac:	f3bf 8f4f 	dsb	sy
 80102b0:	f3bf 8f6f 	isb	sy
 80102b4:	e00a      	b.n	80102cc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80102b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d007      	beq.n	80102cc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80102bc:	4b39      	ldr	r3, [pc, #228]	@ (80103a4 <xQueueGenericSend+0x200>)
 80102be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80102c2:	601a      	str	r2, [r3, #0]
 80102c4:	f3bf 8f4f 	dsb	sy
 80102c8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80102cc:	f001 fee6 	bl	801209c <vPortExitCritical>
				return pdPASS;
 80102d0:	2301      	movs	r3, #1
 80102d2:	e063      	b.n	801039c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d103      	bne.n	80102e2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80102da:	f001 fedf 	bl	801209c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80102de:	2300      	movs	r3, #0
 80102e0:	e05c      	b.n	801039c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80102e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d106      	bne.n	80102f6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80102e8:	f107 0314 	add.w	r3, r7, #20
 80102ec:	4618      	mov	r0, r3
 80102ee:	f001 f9eb 	bl	80116c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80102f2:	2301      	movs	r3, #1
 80102f4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80102f6:	f001 fed1 	bl	801209c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80102fa:	f000 ff6f 	bl	80111dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80102fe:	f001 fe9b 	bl	8012038 <vPortEnterCritical>
 8010302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010304:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010308:	b25b      	sxtb	r3, r3
 801030a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801030e:	d103      	bne.n	8010318 <xQueueGenericSend+0x174>
 8010310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010312:	2200      	movs	r2, #0
 8010314:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801031a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801031e:	b25b      	sxtb	r3, r3
 8010320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010324:	d103      	bne.n	801032e <xQueueGenericSend+0x18a>
 8010326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010328:	2200      	movs	r2, #0
 801032a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801032e:	f001 feb5 	bl	801209c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010332:	1d3a      	adds	r2, r7, #4
 8010334:	f107 0314 	add.w	r3, r7, #20
 8010338:	4611      	mov	r1, r2
 801033a:	4618      	mov	r0, r3
 801033c:	f001 f9da 	bl	80116f4 <xTaskCheckForTimeOut>
 8010340:	4603      	mov	r3, r0
 8010342:	2b00      	cmp	r3, #0
 8010344:	d124      	bne.n	8010390 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010346:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010348:	f000 fce0 	bl	8010d0c <prvIsQueueFull>
 801034c:	4603      	mov	r3, r0
 801034e:	2b00      	cmp	r3, #0
 8010350:	d018      	beq.n	8010384 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010354:	3310      	adds	r3, #16
 8010356:	687a      	ldr	r2, [r7, #4]
 8010358:	4611      	mov	r1, r2
 801035a:	4618      	mov	r0, r3
 801035c:	f001 f92a 	bl	80115b4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010360:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010362:	f000 fc6b 	bl	8010c3c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010366:	f000 ff47 	bl	80111f8 <xTaskResumeAll>
 801036a:	4603      	mov	r3, r0
 801036c:	2b00      	cmp	r3, #0
 801036e:	f47f af7c 	bne.w	801026a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8010372:	4b0c      	ldr	r3, [pc, #48]	@ (80103a4 <xQueueGenericSend+0x200>)
 8010374:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010378:	601a      	str	r2, [r3, #0]
 801037a:	f3bf 8f4f 	dsb	sy
 801037e:	f3bf 8f6f 	isb	sy
 8010382:	e772      	b.n	801026a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010384:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010386:	f000 fc59 	bl	8010c3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801038a:	f000 ff35 	bl	80111f8 <xTaskResumeAll>
 801038e:	e76c      	b.n	801026a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010390:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010392:	f000 fc53 	bl	8010c3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010396:	f000 ff2f 	bl	80111f8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801039a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801039c:	4618      	mov	r0, r3
 801039e:	3738      	adds	r7, #56	@ 0x38
 80103a0:	46bd      	mov	sp, r7
 80103a2:	bd80      	pop	{r7, pc}
 80103a4:	e000ed04 	.word	0xe000ed04

080103a8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80103a8:	b580      	push	{r7, lr}
 80103aa:	b090      	sub	sp, #64	@ 0x40
 80103ac:	af00      	add	r7, sp, #0
 80103ae:	60f8      	str	r0, [r7, #12]
 80103b0:	60b9      	str	r1, [r7, #8]
 80103b2:	607a      	str	r2, [r7, #4]
 80103b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80103ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d10b      	bne.n	80103d8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80103c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80103c4:	f383 8811 	msr	BASEPRI, r3
 80103c8:	f3bf 8f6f 	isb	sy
 80103cc:	f3bf 8f4f 	dsb	sy
 80103d0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80103d2:	bf00      	nop
 80103d4:	bf00      	nop
 80103d6:	e7fd      	b.n	80103d4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80103d8:	68bb      	ldr	r3, [r7, #8]
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d103      	bne.n	80103e6 <xQueueGenericSendFromISR+0x3e>
 80103de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	d101      	bne.n	80103ea <xQueueGenericSendFromISR+0x42>
 80103e6:	2301      	movs	r3, #1
 80103e8:	e000      	b.n	80103ec <xQueueGenericSendFromISR+0x44>
 80103ea:	2300      	movs	r3, #0
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d10b      	bne.n	8010408 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80103f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80103f4:	f383 8811 	msr	BASEPRI, r3
 80103f8:	f3bf 8f6f 	isb	sy
 80103fc:	f3bf 8f4f 	dsb	sy
 8010400:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8010402:	bf00      	nop
 8010404:	bf00      	nop
 8010406:	e7fd      	b.n	8010404 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010408:	683b      	ldr	r3, [r7, #0]
 801040a:	2b02      	cmp	r3, #2
 801040c:	d103      	bne.n	8010416 <xQueueGenericSendFromISR+0x6e>
 801040e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010410:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010412:	2b01      	cmp	r3, #1
 8010414:	d101      	bne.n	801041a <xQueueGenericSendFromISR+0x72>
 8010416:	2301      	movs	r3, #1
 8010418:	e000      	b.n	801041c <xQueueGenericSendFromISR+0x74>
 801041a:	2300      	movs	r3, #0
 801041c:	2b00      	cmp	r3, #0
 801041e:	d10b      	bne.n	8010438 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8010420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010424:	f383 8811 	msr	BASEPRI, r3
 8010428:	f3bf 8f6f 	isb	sy
 801042c:	f3bf 8f4f 	dsb	sy
 8010430:	623b      	str	r3, [r7, #32]
}
 8010432:	bf00      	nop
 8010434:	bf00      	nop
 8010436:	e7fd      	b.n	8010434 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010438:	f001 fede 	bl	80121f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801043c:	f3ef 8211 	mrs	r2, BASEPRI
 8010440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010444:	f383 8811 	msr	BASEPRI, r3
 8010448:	f3bf 8f6f 	isb	sy
 801044c:	f3bf 8f4f 	dsb	sy
 8010450:	61fa      	str	r2, [r7, #28]
 8010452:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8010454:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010456:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010458:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801045a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801045c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801045e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010460:	429a      	cmp	r2, r3
 8010462:	d302      	bcc.n	801046a <xQueueGenericSendFromISR+0xc2>
 8010464:	683b      	ldr	r3, [r7, #0]
 8010466:	2b02      	cmp	r3, #2
 8010468:	d12f      	bne.n	80104ca <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801046a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801046c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010470:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010478:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801047a:	683a      	ldr	r2, [r7, #0]
 801047c:	68b9      	ldr	r1, [r7, #8]
 801047e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010480:	f000 fb4c 	bl	8010b1c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010484:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8010488:	f1b3 3fff 	cmp.w	r3, #4294967295
 801048c:	d112      	bne.n	80104b4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801048e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010492:	2b00      	cmp	r3, #0
 8010494:	d016      	beq.n	80104c4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010498:	3324      	adds	r3, #36	@ 0x24
 801049a:	4618      	mov	r0, r3
 801049c:	f001 f8b0 	bl	8011600 <xTaskRemoveFromEventList>
 80104a0:	4603      	mov	r3, r0
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d00e      	beq.n	80104c4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d00b      	beq.n	80104c4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	2201      	movs	r2, #1
 80104b0:	601a      	str	r2, [r3, #0]
 80104b2:	e007      	b.n	80104c4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80104b4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80104b8:	3301      	adds	r3, #1
 80104ba:	b2db      	uxtb	r3, r3
 80104bc:	b25a      	sxtb	r2, r3
 80104be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80104c4:	2301      	movs	r3, #1
 80104c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80104c8:	e001      	b.n	80104ce <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80104ca:	2300      	movs	r3, #0
 80104cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80104ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80104d0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80104d2:	697b      	ldr	r3, [r7, #20]
 80104d4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80104d8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80104da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80104dc:	4618      	mov	r0, r3
 80104de:	3740      	adds	r7, #64	@ 0x40
 80104e0:	46bd      	mov	sp, r7
 80104e2:	bd80      	pop	{r7, pc}

080104e4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80104e4:	b580      	push	{r7, lr}
 80104e6:	b08e      	sub	sp, #56	@ 0x38
 80104e8:	af00      	add	r7, sp, #0
 80104ea:	6078      	str	r0, [r7, #4]
 80104ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80104f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d10b      	bne.n	8010510 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80104f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80104fc:	f383 8811 	msr	BASEPRI, r3
 8010500:	f3bf 8f6f 	isb	sy
 8010504:	f3bf 8f4f 	dsb	sy
 8010508:	623b      	str	r3, [r7, #32]
}
 801050a:	bf00      	nop
 801050c:	bf00      	nop
 801050e:	e7fd      	b.n	801050c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010514:	2b00      	cmp	r3, #0
 8010516:	d00b      	beq.n	8010530 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8010518:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801051c:	f383 8811 	msr	BASEPRI, r3
 8010520:	f3bf 8f6f 	isb	sy
 8010524:	f3bf 8f4f 	dsb	sy
 8010528:	61fb      	str	r3, [r7, #28]
}
 801052a:	bf00      	nop
 801052c:	bf00      	nop
 801052e:	e7fd      	b.n	801052c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8010530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	2b00      	cmp	r3, #0
 8010536:	d103      	bne.n	8010540 <xQueueGiveFromISR+0x5c>
 8010538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801053a:	689b      	ldr	r3, [r3, #8]
 801053c:	2b00      	cmp	r3, #0
 801053e:	d101      	bne.n	8010544 <xQueueGiveFromISR+0x60>
 8010540:	2301      	movs	r3, #1
 8010542:	e000      	b.n	8010546 <xQueueGiveFromISR+0x62>
 8010544:	2300      	movs	r3, #0
 8010546:	2b00      	cmp	r3, #0
 8010548:	d10b      	bne.n	8010562 <xQueueGiveFromISR+0x7e>
	__asm volatile
 801054a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801054e:	f383 8811 	msr	BASEPRI, r3
 8010552:	f3bf 8f6f 	isb	sy
 8010556:	f3bf 8f4f 	dsb	sy
 801055a:	61bb      	str	r3, [r7, #24]
}
 801055c:	bf00      	nop
 801055e:	bf00      	nop
 8010560:	e7fd      	b.n	801055e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010562:	f001 fe49 	bl	80121f8 <vPortValidateInterruptPriority>
	__asm volatile
 8010566:	f3ef 8211 	mrs	r2, BASEPRI
 801056a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801056e:	f383 8811 	msr	BASEPRI, r3
 8010572:	f3bf 8f6f 	isb	sy
 8010576:	f3bf 8f4f 	dsb	sy
 801057a:	617a      	str	r2, [r7, #20]
 801057c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801057e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010580:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010584:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010586:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8010588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801058a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801058c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801058e:	429a      	cmp	r2, r3
 8010590:	d22b      	bcs.n	80105ea <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010594:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010598:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801059c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801059e:	1c5a      	adds	r2, r3, #1
 80105a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80105a2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80105a4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80105a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105ac:	d112      	bne.n	80105d4 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80105ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80105b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d016      	beq.n	80105e4 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80105b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80105b8:	3324      	adds	r3, #36	@ 0x24
 80105ba:	4618      	mov	r0, r3
 80105bc:	f001 f820 	bl	8011600 <xTaskRemoveFromEventList>
 80105c0:	4603      	mov	r3, r0
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d00e      	beq.n	80105e4 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80105c6:	683b      	ldr	r3, [r7, #0]
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d00b      	beq.n	80105e4 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80105cc:	683b      	ldr	r3, [r7, #0]
 80105ce:	2201      	movs	r2, #1
 80105d0:	601a      	str	r2, [r3, #0]
 80105d2:	e007      	b.n	80105e4 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80105d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80105d8:	3301      	adds	r3, #1
 80105da:	b2db      	uxtb	r3, r3
 80105dc:	b25a      	sxtb	r2, r3
 80105de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80105e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80105e4:	2301      	movs	r3, #1
 80105e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80105e8:	e001      	b.n	80105ee <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80105ea:	2300      	movs	r3, #0
 80105ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80105ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105f0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80105f2:	68fb      	ldr	r3, [r7, #12]
 80105f4:	f383 8811 	msr	BASEPRI, r3
}
 80105f8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80105fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80105fc:	4618      	mov	r0, r3
 80105fe:	3738      	adds	r7, #56	@ 0x38
 8010600:	46bd      	mov	sp, r7
 8010602:	bd80      	pop	{r7, pc}

08010604 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010604:	b580      	push	{r7, lr}
 8010606:	b08c      	sub	sp, #48	@ 0x30
 8010608:	af00      	add	r7, sp, #0
 801060a:	60f8      	str	r0, [r7, #12]
 801060c:	60b9      	str	r1, [r7, #8]
 801060e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010610:	2300      	movs	r3, #0
 8010612:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801061a:	2b00      	cmp	r3, #0
 801061c:	d10b      	bne.n	8010636 <xQueueReceive+0x32>
	__asm volatile
 801061e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010622:	f383 8811 	msr	BASEPRI, r3
 8010626:	f3bf 8f6f 	isb	sy
 801062a:	f3bf 8f4f 	dsb	sy
 801062e:	623b      	str	r3, [r7, #32]
}
 8010630:	bf00      	nop
 8010632:	bf00      	nop
 8010634:	e7fd      	b.n	8010632 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010636:	68bb      	ldr	r3, [r7, #8]
 8010638:	2b00      	cmp	r3, #0
 801063a:	d103      	bne.n	8010644 <xQueueReceive+0x40>
 801063c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801063e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010640:	2b00      	cmp	r3, #0
 8010642:	d101      	bne.n	8010648 <xQueueReceive+0x44>
 8010644:	2301      	movs	r3, #1
 8010646:	e000      	b.n	801064a <xQueueReceive+0x46>
 8010648:	2300      	movs	r3, #0
 801064a:	2b00      	cmp	r3, #0
 801064c:	d10b      	bne.n	8010666 <xQueueReceive+0x62>
	__asm volatile
 801064e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010652:	f383 8811 	msr	BASEPRI, r3
 8010656:	f3bf 8f6f 	isb	sy
 801065a:	f3bf 8f4f 	dsb	sy
 801065e:	61fb      	str	r3, [r7, #28]
}
 8010660:	bf00      	nop
 8010662:	bf00      	nop
 8010664:	e7fd      	b.n	8010662 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010666:	f001 f991 	bl	801198c <xTaskGetSchedulerState>
 801066a:	4603      	mov	r3, r0
 801066c:	2b00      	cmp	r3, #0
 801066e:	d102      	bne.n	8010676 <xQueueReceive+0x72>
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	2b00      	cmp	r3, #0
 8010674:	d101      	bne.n	801067a <xQueueReceive+0x76>
 8010676:	2301      	movs	r3, #1
 8010678:	e000      	b.n	801067c <xQueueReceive+0x78>
 801067a:	2300      	movs	r3, #0
 801067c:	2b00      	cmp	r3, #0
 801067e:	d10b      	bne.n	8010698 <xQueueReceive+0x94>
	__asm volatile
 8010680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010684:	f383 8811 	msr	BASEPRI, r3
 8010688:	f3bf 8f6f 	isb	sy
 801068c:	f3bf 8f4f 	dsb	sy
 8010690:	61bb      	str	r3, [r7, #24]
}
 8010692:	bf00      	nop
 8010694:	bf00      	nop
 8010696:	e7fd      	b.n	8010694 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010698:	f001 fcce 	bl	8012038 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801069c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801069e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80106a0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80106a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d01f      	beq.n	80106e8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80106a8:	68b9      	ldr	r1, [r7, #8]
 80106aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80106ac:	f000 faa0 	bl	8010bf0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80106b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106b2:	1e5a      	subs	r2, r3, #1
 80106b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80106b6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80106b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80106ba:	691b      	ldr	r3, [r3, #16]
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d00f      	beq.n	80106e0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80106c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80106c2:	3310      	adds	r3, #16
 80106c4:	4618      	mov	r0, r3
 80106c6:	f000 ff9b 	bl	8011600 <xTaskRemoveFromEventList>
 80106ca:	4603      	mov	r3, r0
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d007      	beq.n	80106e0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80106d0:	4b3c      	ldr	r3, [pc, #240]	@ (80107c4 <xQueueReceive+0x1c0>)
 80106d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80106d6:	601a      	str	r2, [r3, #0]
 80106d8:	f3bf 8f4f 	dsb	sy
 80106dc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80106e0:	f001 fcdc 	bl	801209c <vPortExitCritical>
				return pdPASS;
 80106e4:	2301      	movs	r3, #1
 80106e6:	e069      	b.n	80107bc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d103      	bne.n	80106f6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80106ee:	f001 fcd5 	bl	801209c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80106f2:	2300      	movs	r3, #0
 80106f4:	e062      	b.n	80107bc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80106f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d106      	bne.n	801070a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80106fc:	f107 0310 	add.w	r3, r7, #16
 8010700:	4618      	mov	r0, r3
 8010702:	f000 ffe1 	bl	80116c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010706:	2301      	movs	r3, #1
 8010708:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801070a:	f001 fcc7 	bl	801209c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801070e:	f000 fd65 	bl	80111dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010712:	f001 fc91 	bl	8012038 <vPortEnterCritical>
 8010716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010718:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801071c:	b25b      	sxtb	r3, r3
 801071e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010722:	d103      	bne.n	801072c <xQueueReceive+0x128>
 8010724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010726:	2200      	movs	r2, #0
 8010728:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801072c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801072e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010732:	b25b      	sxtb	r3, r3
 8010734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010738:	d103      	bne.n	8010742 <xQueueReceive+0x13e>
 801073a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801073c:	2200      	movs	r2, #0
 801073e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010742:	f001 fcab 	bl	801209c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010746:	1d3a      	adds	r2, r7, #4
 8010748:	f107 0310 	add.w	r3, r7, #16
 801074c:	4611      	mov	r1, r2
 801074e:	4618      	mov	r0, r3
 8010750:	f000 ffd0 	bl	80116f4 <xTaskCheckForTimeOut>
 8010754:	4603      	mov	r3, r0
 8010756:	2b00      	cmp	r3, #0
 8010758:	d123      	bne.n	80107a2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801075a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801075c:	f000 fac0 	bl	8010ce0 <prvIsQueueEmpty>
 8010760:	4603      	mov	r3, r0
 8010762:	2b00      	cmp	r3, #0
 8010764:	d017      	beq.n	8010796 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010768:	3324      	adds	r3, #36	@ 0x24
 801076a:	687a      	ldr	r2, [r7, #4]
 801076c:	4611      	mov	r1, r2
 801076e:	4618      	mov	r0, r3
 8010770:	f000 ff20 	bl	80115b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010774:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010776:	f000 fa61 	bl	8010c3c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801077a:	f000 fd3d 	bl	80111f8 <xTaskResumeAll>
 801077e:	4603      	mov	r3, r0
 8010780:	2b00      	cmp	r3, #0
 8010782:	d189      	bne.n	8010698 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8010784:	4b0f      	ldr	r3, [pc, #60]	@ (80107c4 <xQueueReceive+0x1c0>)
 8010786:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801078a:	601a      	str	r2, [r3, #0]
 801078c:	f3bf 8f4f 	dsb	sy
 8010790:	f3bf 8f6f 	isb	sy
 8010794:	e780      	b.n	8010698 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8010796:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010798:	f000 fa50 	bl	8010c3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801079c:	f000 fd2c 	bl	80111f8 <xTaskResumeAll>
 80107a0:	e77a      	b.n	8010698 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80107a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80107a4:	f000 fa4a 	bl	8010c3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80107a8:	f000 fd26 	bl	80111f8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80107ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80107ae:	f000 fa97 	bl	8010ce0 <prvIsQueueEmpty>
 80107b2:	4603      	mov	r3, r0
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	f43f af6f 	beq.w	8010698 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80107ba:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80107bc:	4618      	mov	r0, r3
 80107be:	3730      	adds	r7, #48	@ 0x30
 80107c0:	46bd      	mov	sp, r7
 80107c2:	bd80      	pop	{r7, pc}
 80107c4:	e000ed04 	.word	0xe000ed04

080107c8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80107c8:	b580      	push	{r7, lr}
 80107ca:	b08e      	sub	sp, #56	@ 0x38
 80107cc:	af00      	add	r7, sp, #0
 80107ce:	6078      	str	r0, [r7, #4]
 80107d0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80107d2:	2300      	movs	r3, #0
 80107d4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80107da:	2300      	movs	r3, #0
 80107dc:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80107de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d10b      	bne.n	80107fc <xQueueSemaphoreTake+0x34>
	__asm volatile
 80107e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80107e8:	f383 8811 	msr	BASEPRI, r3
 80107ec:	f3bf 8f6f 	isb	sy
 80107f0:	f3bf 8f4f 	dsb	sy
 80107f4:	623b      	str	r3, [r7, #32]
}
 80107f6:	bf00      	nop
 80107f8:	bf00      	nop
 80107fa:	e7fd      	b.n	80107f8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80107fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010800:	2b00      	cmp	r3, #0
 8010802:	d00b      	beq.n	801081c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8010804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010808:	f383 8811 	msr	BASEPRI, r3
 801080c:	f3bf 8f6f 	isb	sy
 8010810:	f3bf 8f4f 	dsb	sy
 8010814:	61fb      	str	r3, [r7, #28]
}
 8010816:	bf00      	nop
 8010818:	bf00      	nop
 801081a:	e7fd      	b.n	8010818 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801081c:	f001 f8b6 	bl	801198c <xTaskGetSchedulerState>
 8010820:	4603      	mov	r3, r0
 8010822:	2b00      	cmp	r3, #0
 8010824:	d102      	bne.n	801082c <xQueueSemaphoreTake+0x64>
 8010826:	683b      	ldr	r3, [r7, #0]
 8010828:	2b00      	cmp	r3, #0
 801082a:	d101      	bne.n	8010830 <xQueueSemaphoreTake+0x68>
 801082c:	2301      	movs	r3, #1
 801082e:	e000      	b.n	8010832 <xQueueSemaphoreTake+0x6a>
 8010830:	2300      	movs	r3, #0
 8010832:	2b00      	cmp	r3, #0
 8010834:	d10b      	bne.n	801084e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8010836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801083a:	f383 8811 	msr	BASEPRI, r3
 801083e:	f3bf 8f6f 	isb	sy
 8010842:	f3bf 8f4f 	dsb	sy
 8010846:	61bb      	str	r3, [r7, #24]
}
 8010848:	bf00      	nop
 801084a:	bf00      	nop
 801084c:	e7fd      	b.n	801084a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801084e:	f001 fbf3 	bl	8012038 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8010852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010854:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010856:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8010858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801085a:	2b00      	cmp	r3, #0
 801085c:	d024      	beq.n	80108a8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801085e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010860:	1e5a      	subs	r2, r3, #1
 8010862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010864:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	2b00      	cmp	r3, #0
 801086c:	d104      	bne.n	8010878 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801086e:	f001 fa39 	bl	8011ce4 <pvTaskIncrementMutexHeldCount>
 8010872:	4602      	mov	r2, r0
 8010874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010876:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801087a:	691b      	ldr	r3, [r3, #16]
 801087c:	2b00      	cmp	r3, #0
 801087e:	d00f      	beq.n	80108a0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010882:	3310      	adds	r3, #16
 8010884:	4618      	mov	r0, r3
 8010886:	f000 febb 	bl	8011600 <xTaskRemoveFromEventList>
 801088a:	4603      	mov	r3, r0
 801088c:	2b00      	cmp	r3, #0
 801088e:	d007      	beq.n	80108a0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010890:	4b54      	ldr	r3, [pc, #336]	@ (80109e4 <xQueueSemaphoreTake+0x21c>)
 8010892:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010896:	601a      	str	r2, [r3, #0]
 8010898:	f3bf 8f4f 	dsb	sy
 801089c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80108a0:	f001 fbfc 	bl	801209c <vPortExitCritical>
				return pdPASS;
 80108a4:	2301      	movs	r3, #1
 80108a6:	e098      	b.n	80109da <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80108a8:	683b      	ldr	r3, [r7, #0]
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d112      	bne.n	80108d4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80108ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d00b      	beq.n	80108cc <xQueueSemaphoreTake+0x104>
	__asm volatile
 80108b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80108b8:	f383 8811 	msr	BASEPRI, r3
 80108bc:	f3bf 8f6f 	isb	sy
 80108c0:	f3bf 8f4f 	dsb	sy
 80108c4:	617b      	str	r3, [r7, #20]
}
 80108c6:	bf00      	nop
 80108c8:	bf00      	nop
 80108ca:	e7fd      	b.n	80108c8 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80108cc:	f001 fbe6 	bl	801209c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80108d0:	2300      	movs	r3, #0
 80108d2:	e082      	b.n	80109da <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80108d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d106      	bne.n	80108e8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80108da:	f107 030c 	add.w	r3, r7, #12
 80108de:	4618      	mov	r0, r3
 80108e0:	f000 fef2 	bl	80116c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80108e4:	2301      	movs	r3, #1
 80108e6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80108e8:	f001 fbd8 	bl	801209c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80108ec:	f000 fc76 	bl	80111dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80108f0:	f001 fba2 	bl	8012038 <vPortEnterCritical>
 80108f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108f6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80108fa:	b25b      	sxtb	r3, r3
 80108fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010900:	d103      	bne.n	801090a <xQueueSemaphoreTake+0x142>
 8010902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010904:	2200      	movs	r2, #0
 8010906:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801090a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801090c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010910:	b25b      	sxtb	r3, r3
 8010912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010916:	d103      	bne.n	8010920 <xQueueSemaphoreTake+0x158>
 8010918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801091a:	2200      	movs	r2, #0
 801091c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010920:	f001 fbbc 	bl	801209c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010924:	463a      	mov	r2, r7
 8010926:	f107 030c 	add.w	r3, r7, #12
 801092a:	4611      	mov	r1, r2
 801092c:	4618      	mov	r0, r3
 801092e:	f000 fee1 	bl	80116f4 <xTaskCheckForTimeOut>
 8010932:	4603      	mov	r3, r0
 8010934:	2b00      	cmp	r3, #0
 8010936:	d132      	bne.n	801099e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010938:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801093a:	f000 f9d1 	bl	8010ce0 <prvIsQueueEmpty>
 801093e:	4603      	mov	r3, r0
 8010940:	2b00      	cmp	r3, #0
 8010942:	d026      	beq.n	8010992 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	2b00      	cmp	r3, #0
 801094a:	d109      	bne.n	8010960 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 801094c:	f001 fb74 	bl	8012038 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010950:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010952:	689b      	ldr	r3, [r3, #8]
 8010954:	4618      	mov	r0, r3
 8010956:	f001 f837 	bl	80119c8 <xTaskPriorityInherit>
 801095a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 801095c:	f001 fb9e 	bl	801209c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010962:	3324      	adds	r3, #36	@ 0x24
 8010964:	683a      	ldr	r2, [r7, #0]
 8010966:	4611      	mov	r1, r2
 8010968:	4618      	mov	r0, r3
 801096a:	f000 fe23 	bl	80115b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801096e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010970:	f000 f964 	bl	8010c3c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010974:	f000 fc40 	bl	80111f8 <xTaskResumeAll>
 8010978:	4603      	mov	r3, r0
 801097a:	2b00      	cmp	r3, #0
 801097c:	f47f af67 	bne.w	801084e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8010980:	4b18      	ldr	r3, [pc, #96]	@ (80109e4 <xQueueSemaphoreTake+0x21c>)
 8010982:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010986:	601a      	str	r2, [r3, #0]
 8010988:	f3bf 8f4f 	dsb	sy
 801098c:	f3bf 8f6f 	isb	sy
 8010990:	e75d      	b.n	801084e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8010992:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010994:	f000 f952 	bl	8010c3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010998:	f000 fc2e 	bl	80111f8 <xTaskResumeAll>
 801099c:	e757      	b.n	801084e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801099e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80109a0:	f000 f94c 	bl	8010c3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80109a4:	f000 fc28 	bl	80111f8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80109a8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80109aa:	f000 f999 	bl	8010ce0 <prvIsQueueEmpty>
 80109ae:	4603      	mov	r3, r0
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	f43f af4c 	beq.w	801084e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80109b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d00d      	beq.n	80109d8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80109bc:	f001 fb3c 	bl	8012038 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80109c0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80109c2:	f000 f893 	bl	8010aec <prvGetDisinheritPriorityAfterTimeout>
 80109c6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80109c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109ca:	689b      	ldr	r3, [r3, #8]
 80109cc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80109ce:	4618      	mov	r0, r3
 80109d0:	f001 f8f8 	bl	8011bc4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80109d4:	f001 fb62 	bl	801209c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80109d8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80109da:	4618      	mov	r0, r3
 80109dc:	3738      	adds	r7, #56	@ 0x38
 80109de:	46bd      	mov	sp, r7
 80109e0:	bd80      	pop	{r7, pc}
 80109e2:	bf00      	nop
 80109e4:	e000ed04 	.word	0xe000ed04

080109e8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80109e8:	b580      	push	{r7, lr}
 80109ea:	b08e      	sub	sp, #56	@ 0x38
 80109ec:	af00      	add	r7, sp, #0
 80109ee:	60f8      	str	r0, [r7, #12]
 80109f0:	60b9      	str	r1, [r7, #8]
 80109f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80109f4:	68fb      	ldr	r3, [r7, #12]
 80109f6:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80109f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d10b      	bne.n	8010a16 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80109fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a02:	f383 8811 	msr	BASEPRI, r3
 8010a06:	f3bf 8f6f 	isb	sy
 8010a0a:	f3bf 8f4f 	dsb	sy
 8010a0e:	623b      	str	r3, [r7, #32]
}
 8010a10:	bf00      	nop
 8010a12:	bf00      	nop
 8010a14:	e7fd      	b.n	8010a12 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010a16:	68bb      	ldr	r3, [r7, #8]
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d103      	bne.n	8010a24 <xQueueReceiveFromISR+0x3c>
 8010a1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d101      	bne.n	8010a28 <xQueueReceiveFromISR+0x40>
 8010a24:	2301      	movs	r3, #1
 8010a26:	e000      	b.n	8010a2a <xQueueReceiveFromISR+0x42>
 8010a28:	2300      	movs	r3, #0
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d10b      	bne.n	8010a46 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8010a2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a32:	f383 8811 	msr	BASEPRI, r3
 8010a36:	f3bf 8f6f 	isb	sy
 8010a3a:	f3bf 8f4f 	dsb	sy
 8010a3e:	61fb      	str	r3, [r7, #28]
}
 8010a40:	bf00      	nop
 8010a42:	bf00      	nop
 8010a44:	e7fd      	b.n	8010a42 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010a46:	f001 fbd7 	bl	80121f8 <vPortValidateInterruptPriority>
	__asm volatile
 8010a4a:	f3ef 8211 	mrs	r2, BASEPRI
 8010a4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a52:	f383 8811 	msr	BASEPRI, r3
 8010a56:	f3bf 8f6f 	isb	sy
 8010a5a:	f3bf 8f4f 	dsb	sy
 8010a5e:	61ba      	str	r2, [r7, #24]
 8010a60:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8010a62:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010a64:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010a6a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010a6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d02f      	beq.n	8010ad2 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8010a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a74:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010a78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010a7c:	68b9      	ldr	r1, [r7, #8]
 8010a7e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010a80:	f000 f8b6 	bl	8010bf0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010a84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010a86:	1e5a      	subs	r2, r3, #1
 8010a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a8a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8010a8c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8010a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a94:	d112      	bne.n	8010abc <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a98:	691b      	ldr	r3, [r3, #16]
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d016      	beq.n	8010acc <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010aa0:	3310      	adds	r3, #16
 8010aa2:	4618      	mov	r0, r3
 8010aa4:	f000 fdac 	bl	8011600 <xTaskRemoveFromEventList>
 8010aa8:	4603      	mov	r3, r0
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d00e      	beq.n	8010acc <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d00b      	beq.n	8010acc <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	2201      	movs	r2, #1
 8010ab8:	601a      	str	r2, [r3, #0]
 8010aba:	e007      	b.n	8010acc <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8010abc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010ac0:	3301      	adds	r3, #1
 8010ac2:	b2db      	uxtb	r3, r3
 8010ac4:	b25a      	sxtb	r2, r3
 8010ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ac8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8010acc:	2301      	movs	r3, #1
 8010ace:	637b      	str	r3, [r7, #52]	@ 0x34
 8010ad0:	e001      	b.n	8010ad6 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8010ad2:	2300      	movs	r3, #0
 8010ad4:	637b      	str	r3, [r7, #52]	@ 0x34
 8010ad6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ad8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010ada:	693b      	ldr	r3, [r7, #16]
 8010adc:	f383 8811 	msr	BASEPRI, r3
}
 8010ae0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010ae2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8010ae4:	4618      	mov	r0, r3
 8010ae6:	3738      	adds	r7, #56	@ 0x38
 8010ae8:	46bd      	mov	sp, r7
 8010aea:	bd80      	pop	{r7, pc}

08010aec <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8010aec:	b480      	push	{r7}
 8010aee:	b085      	sub	sp, #20
 8010af0:	af00      	add	r7, sp, #0
 8010af2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d006      	beq.n	8010b0a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	f1c3 0307 	rsb	r3, r3, #7
 8010b06:	60fb      	str	r3, [r7, #12]
 8010b08:	e001      	b.n	8010b0e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8010b0a:	2300      	movs	r3, #0
 8010b0c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8010b0e:	68fb      	ldr	r3, [r7, #12]
	}
 8010b10:	4618      	mov	r0, r3
 8010b12:	3714      	adds	r7, #20
 8010b14:	46bd      	mov	sp, r7
 8010b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b1a:	4770      	bx	lr

08010b1c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010b1c:	b580      	push	{r7, lr}
 8010b1e:	b086      	sub	sp, #24
 8010b20:	af00      	add	r7, sp, #0
 8010b22:	60f8      	str	r0, [r7, #12]
 8010b24:	60b9      	str	r1, [r7, #8]
 8010b26:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010b28:	2300      	movs	r3, #0
 8010b2a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010b30:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010b32:	68fb      	ldr	r3, [r7, #12]
 8010b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d10d      	bne.n	8010b56 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010b3a:	68fb      	ldr	r3, [r7, #12]
 8010b3c:	681b      	ldr	r3, [r3, #0]
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d14d      	bne.n	8010bde <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010b42:	68fb      	ldr	r3, [r7, #12]
 8010b44:	689b      	ldr	r3, [r3, #8]
 8010b46:	4618      	mov	r0, r3
 8010b48:	f000 ffb4 	bl	8011ab4 <xTaskPriorityDisinherit>
 8010b4c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8010b4e:	68fb      	ldr	r3, [r7, #12]
 8010b50:	2200      	movs	r2, #0
 8010b52:	609a      	str	r2, [r3, #8]
 8010b54:	e043      	b.n	8010bde <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d119      	bne.n	8010b90 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010b5c:	68fb      	ldr	r3, [r7, #12]
 8010b5e:	6858      	ldr	r0, [r3, #4]
 8010b60:	68fb      	ldr	r3, [r7, #12]
 8010b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010b64:	461a      	mov	r2, r3
 8010b66:	68b9      	ldr	r1, [r7, #8]
 8010b68:	f00d fd43 	bl	801e5f2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010b6c:	68fb      	ldr	r3, [r7, #12]
 8010b6e:	685a      	ldr	r2, [r3, #4]
 8010b70:	68fb      	ldr	r3, [r7, #12]
 8010b72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010b74:	441a      	add	r2, r3
 8010b76:	68fb      	ldr	r3, [r7, #12]
 8010b78:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	685a      	ldr	r2, [r3, #4]
 8010b7e:	68fb      	ldr	r3, [r7, #12]
 8010b80:	689b      	ldr	r3, [r3, #8]
 8010b82:	429a      	cmp	r2, r3
 8010b84:	d32b      	bcc.n	8010bde <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010b86:	68fb      	ldr	r3, [r7, #12]
 8010b88:	681a      	ldr	r2, [r3, #0]
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	605a      	str	r2, [r3, #4]
 8010b8e:	e026      	b.n	8010bde <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010b90:	68fb      	ldr	r3, [r7, #12]
 8010b92:	68d8      	ldr	r0, [r3, #12]
 8010b94:	68fb      	ldr	r3, [r7, #12]
 8010b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010b98:	461a      	mov	r2, r3
 8010b9a:	68b9      	ldr	r1, [r7, #8]
 8010b9c:	f00d fd29 	bl	801e5f2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010ba0:	68fb      	ldr	r3, [r7, #12]
 8010ba2:	68da      	ldr	r2, [r3, #12]
 8010ba4:	68fb      	ldr	r3, [r7, #12]
 8010ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010ba8:	425b      	negs	r3, r3
 8010baa:	441a      	add	r2, r3
 8010bac:	68fb      	ldr	r3, [r7, #12]
 8010bae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010bb0:	68fb      	ldr	r3, [r7, #12]
 8010bb2:	68da      	ldr	r2, [r3, #12]
 8010bb4:	68fb      	ldr	r3, [r7, #12]
 8010bb6:	681b      	ldr	r3, [r3, #0]
 8010bb8:	429a      	cmp	r2, r3
 8010bba:	d207      	bcs.n	8010bcc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8010bbc:	68fb      	ldr	r3, [r7, #12]
 8010bbe:	689a      	ldr	r2, [r3, #8]
 8010bc0:	68fb      	ldr	r3, [r7, #12]
 8010bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010bc4:	425b      	negs	r3, r3
 8010bc6:	441a      	add	r2, r3
 8010bc8:	68fb      	ldr	r3, [r7, #12]
 8010bca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	2b02      	cmp	r3, #2
 8010bd0:	d105      	bne.n	8010bde <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010bd2:	693b      	ldr	r3, [r7, #16]
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d002      	beq.n	8010bde <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8010bd8:	693b      	ldr	r3, [r7, #16]
 8010bda:	3b01      	subs	r3, #1
 8010bdc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010bde:	693b      	ldr	r3, [r7, #16]
 8010be0:	1c5a      	adds	r2, r3, #1
 8010be2:	68fb      	ldr	r3, [r7, #12]
 8010be4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8010be6:	697b      	ldr	r3, [r7, #20]
}
 8010be8:	4618      	mov	r0, r3
 8010bea:	3718      	adds	r7, #24
 8010bec:	46bd      	mov	sp, r7
 8010bee:	bd80      	pop	{r7, pc}

08010bf0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8010bf0:	b580      	push	{r7, lr}
 8010bf2:	b082      	sub	sp, #8
 8010bf4:	af00      	add	r7, sp, #0
 8010bf6:	6078      	str	r0, [r7, #4]
 8010bf8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d018      	beq.n	8010c34 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	68da      	ldr	r2, [r3, #12]
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010c0a:	441a      	add	r2, r3
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	68da      	ldr	r2, [r3, #12]
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	689b      	ldr	r3, [r3, #8]
 8010c18:	429a      	cmp	r2, r3
 8010c1a:	d303      	bcc.n	8010c24 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	681a      	ldr	r2, [r3, #0]
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	68d9      	ldr	r1, [r3, #12]
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010c2c:	461a      	mov	r2, r3
 8010c2e:	6838      	ldr	r0, [r7, #0]
 8010c30:	f00d fcdf 	bl	801e5f2 <memcpy>
	}
}
 8010c34:	bf00      	nop
 8010c36:	3708      	adds	r7, #8
 8010c38:	46bd      	mov	sp, r7
 8010c3a:	bd80      	pop	{r7, pc}

08010c3c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8010c3c:	b580      	push	{r7, lr}
 8010c3e:	b084      	sub	sp, #16
 8010c40:	af00      	add	r7, sp, #0
 8010c42:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010c44:	f001 f9f8 	bl	8012038 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010c4e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010c50:	e011      	b.n	8010c76 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d012      	beq.n	8010c80 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	3324      	adds	r3, #36	@ 0x24
 8010c5e:	4618      	mov	r0, r3
 8010c60:	f000 fcce 	bl	8011600 <xTaskRemoveFromEventList>
 8010c64:	4603      	mov	r3, r0
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d001      	beq.n	8010c6e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010c6a:	f000 fda7 	bl	80117bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8010c6e:	7bfb      	ldrb	r3, [r7, #15]
 8010c70:	3b01      	subs	r3, #1
 8010c72:	b2db      	uxtb	r3, r3
 8010c74:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	dce9      	bgt.n	8010c52 <prvUnlockQueue+0x16>
 8010c7e:	e000      	b.n	8010c82 <prvUnlockQueue+0x46>
					break;
 8010c80:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	22ff      	movs	r2, #255	@ 0xff
 8010c86:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8010c8a:	f001 fa07 	bl	801209c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010c8e:	f001 f9d3 	bl	8012038 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010c98:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010c9a:	e011      	b.n	8010cc0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	691b      	ldr	r3, [r3, #16]
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d012      	beq.n	8010cca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	3310      	adds	r3, #16
 8010ca8:	4618      	mov	r0, r3
 8010caa:	f000 fca9 	bl	8011600 <xTaskRemoveFromEventList>
 8010cae:	4603      	mov	r3, r0
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d001      	beq.n	8010cb8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010cb4:	f000 fd82 	bl	80117bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8010cb8:	7bbb      	ldrb	r3, [r7, #14]
 8010cba:	3b01      	subs	r3, #1
 8010cbc:	b2db      	uxtb	r3, r3
 8010cbe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010cc0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	dce9      	bgt.n	8010c9c <prvUnlockQueue+0x60>
 8010cc8:	e000      	b.n	8010ccc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8010cca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	22ff      	movs	r2, #255	@ 0xff
 8010cd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8010cd4:	f001 f9e2 	bl	801209c <vPortExitCritical>
}
 8010cd8:	bf00      	nop
 8010cda:	3710      	adds	r7, #16
 8010cdc:	46bd      	mov	sp, r7
 8010cde:	bd80      	pop	{r7, pc}

08010ce0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010ce0:	b580      	push	{r7, lr}
 8010ce2:	b084      	sub	sp, #16
 8010ce4:	af00      	add	r7, sp, #0
 8010ce6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010ce8:	f001 f9a6 	bl	8012038 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d102      	bne.n	8010cfa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8010cf4:	2301      	movs	r3, #1
 8010cf6:	60fb      	str	r3, [r7, #12]
 8010cf8:	e001      	b.n	8010cfe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010cfa:	2300      	movs	r3, #0
 8010cfc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010cfe:	f001 f9cd 	bl	801209c <vPortExitCritical>

	return xReturn;
 8010d02:	68fb      	ldr	r3, [r7, #12]
}
 8010d04:	4618      	mov	r0, r3
 8010d06:	3710      	adds	r7, #16
 8010d08:	46bd      	mov	sp, r7
 8010d0a:	bd80      	pop	{r7, pc}

08010d0c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010d0c:	b580      	push	{r7, lr}
 8010d0e:	b084      	sub	sp, #16
 8010d10:	af00      	add	r7, sp, #0
 8010d12:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010d14:	f001 f990 	bl	8012038 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010d20:	429a      	cmp	r2, r3
 8010d22:	d102      	bne.n	8010d2a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8010d24:	2301      	movs	r3, #1
 8010d26:	60fb      	str	r3, [r7, #12]
 8010d28:	e001      	b.n	8010d2e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010d2a:	2300      	movs	r3, #0
 8010d2c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010d2e:	f001 f9b5 	bl	801209c <vPortExitCritical>

	return xReturn;
 8010d32:	68fb      	ldr	r3, [r7, #12]
}
 8010d34:	4618      	mov	r0, r3
 8010d36:	3710      	adds	r7, #16
 8010d38:	46bd      	mov	sp, r7
 8010d3a:	bd80      	pop	{r7, pc}

08010d3c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010d3c:	b580      	push	{r7, lr}
 8010d3e:	b08e      	sub	sp, #56	@ 0x38
 8010d40:	af04      	add	r7, sp, #16
 8010d42:	60f8      	str	r0, [r7, #12]
 8010d44:	60b9      	str	r1, [r7, #8]
 8010d46:	607a      	str	r2, [r7, #4]
 8010d48:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8010d4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d10b      	bne.n	8010d68 <xTaskCreateStatic+0x2c>
	__asm volatile
 8010d50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d54:	f383 8811 	msr	BASEPRI, r3
 8010d58:	f3bf 8f6f 	isb	sy
 8010d5c:	f3bf 8f4f 	dsb	sy
 8010d60:	623b      	str	r3, [r7, #32]
}
 8010d62:	bf00      	nop
 8010d64:	bf00      	nop
 8010d66:	e7fd      	b.n	8010d64 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8010d68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d10b      	bne.n	8010d86 <xTaskCreateStatic+0x4a>
	__asm volatile
 8010d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d72:	f383 8811 	msr	BASEPRI, r3
 8010d76:	f3bf 8f6f 	isb	sy
 8010d7a:	f3bf 8f4f 	dsb	sy
 8010d7e:	61fb      	str	r3, [r7, #28]
}
 8010d80:	bf00      	nop
 8010d82:	bf00      	nop
 8010d84:	e7fd      	b.n	8010d82 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8010d86:	23a0      	movs	r3, #160	@ 0xa0
 8010d88:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010d8a:	693b      	ldr	r3, [r7, #16]
 8010d8c:	2ba0      	cmp	r3, #160	@ 0xa0
 8010d8e:	d00b      	beq.n	8010da8 <xTaskCreateStatic+0x6c>
	__asm volatile
 8010d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d94:	f383 8811 	msr	BASEPRI, r3
 8010d98:	f3bf 8f6f 	isb	sy
 8010d9c:	f3bf 8f4f 	dsb	sy
 8010da0:	61bb      	str	r3, [r7, #24]
}
 8010da2:	bf00      	nop
 8010da4:	bf00      	nop
 8010da6:	e7fd      	b.n	8010da4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010da8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010daa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d01e      	beq.n	8010dee <xTaskCreateStatic+0xb2>
 8010db0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d01b      	beq.n	8010dee <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010db6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010db8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010dbc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010dbe:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010dc2:	2202      	movs	r2, #2
 8010dc4:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010dc8:	2300      	movs	r3, #0
 8010dca:	9303      	str	r3, [sp, #12]
 8010dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010dce:	9302      	str	r3, [sp, #8]
 8010dd0:	f107 0314 	add.w	r3, r7, #20
 8010dd4:	9301      	str	r3, [sp, #4]
 8010dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010dd8:	9300      	str	r3, [sp, #0]
 8010dda:	683b      	ldr	r3, [r7, #0]
 8010ddc:	687a      	ldr	r2, [r7, #4]
 8010dde:	68b9      	ldr	r1, [r7, #8]
 8010de0:	68f8      	ldr	r0, [r7, #12]
 8010de2:	f000 f851 	bl	8010e88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010de6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010de8:	f000 f8ee 	bl	8010fc8 <prvAddNewTaskToReadyList>
 8010dec:	e001      	b.n	8010df2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8010dee:	2300      	movs	r3, #0
 8010df0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8010df2:	697b      	ldr	r3, [r7, #20]
	}
 8010df4:	4618      	mov	r0, r3
 8010df6:	3728      	adds	r7, #40	@ 0x28
 8010df8:	46bd      	mov	sp, r7
 8010dfa:	bd80      	pop	{r7, pc}

08010dfc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010dfc:	b580      	push	{r7, lr}
 8010dfe:	b08c      	sub	sp, #48	@ 0x30
 8010e00:	af04      	add	r7, sp, #16
 8010e02:	60f8      	str	r0, [r7, #12]
 8010e04:	60b9      	str	r1, [r7, #8]
 8010e06:	603b      	str	r3, [r7, #0]
 8010e08:	4613      	mov	r3, r2
 8010e0a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010e0c:	88fb      	ldrh	r3, [r7, #6]
 8010e0e:	009b      	lsls	r3, r3, #2
 8010e10:	4618      	mov	r0, r3
 8010e12:	f001 fa33 	bl	801227c <pvPortMalloc>
 8010e16:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010e18:	697b      	ldr	r3, [r7, #20]
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d00e      	beq.n	8010e3c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010e1e:	20a0      	movs	r0, #160	@ 0xa0
 8010e20:	f001 fa2c 	bl	801227c <pvPortMalloc>
 8010e24:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8010e26:	69fb      	ldr	r3, [r7, #28]
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d003      	beq.n	8010e34 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010e2c:	69fb      	ldr	r3, [r7, #28]
 8010e2e:	697a      	ldr	r2, [r7, #20]
 8010e30:	631a      	str	r2, [r3, #48]	@ 0x30
 8010e32:	e005      	b.n	8010e40 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010e34:	6978      	ldr	r0, [r7, #20]
 8010e36:	f001 faef 	bl	8012418 <vPortFree>
 8010e3a:	e001      	b.n	8010e40 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010e3c:	2300      	movs	r3, #0
 8010e3e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010e40:	69fb      	ldr	r3, [r7, #28]
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d017      	beq.n	8010e76 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010e46:	69fb      	ldr	r3, [r7, #28]
 8010e48:	2200      	movs	r2, #0
 8010e4a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010e4e:	88fa      	ldrh	r2, [r7, #6]
 8010e50:	2300      	movs	r3, #0
 8010e52:	9303      	str	r3, [sp, #12]
 8010e54:	69fb      	ldr	r3, [r7, #28]
 8010e56:	9302      	str	r3, [sp, #8]
 8010e58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e5a:	9301      	str	r3, [sp, #4]
 8010e5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e5e:	9300      	str	r3, [sp, #0]
 8010e60:	683b      	ldr	r3, [r7, #0]
 8010e62:	68b9      	ldr	r1, [r7, #8]
 8010e64:	68f8      	ldr	r0, [r7, #12]
 8010e66:	f000 f80f 	bl	8010e88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010e6a:	69f8      	ldr	r0, [r7, #28]
 8010e6c:	f000 f8ac 	bl	8010fc8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010e70:	2301      	movs	r3, #1
 8010e72:	61bb      	str	r3, [r7, #24]
 8010e74:	e002      	b.n	8010e7c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010e76:	f04f 33ff 	mov.w	r3, #4294967295
 8010e7a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010e7c:	69bb      	ldr	r3, [r7, #24]
	}
 8010e7e:	4618      	mov	r0, r3
 8010e80:	3720      	adds	r7, #32
 8010e82:	46bd      	mov	sp, r7
 8010e84:	bd80      	pop	{r7, pc}
	...

08010e88 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010e88:	b580      	push	{r7, lr}
 8010e8a:	b088      	sub	sp, #32
 8010e8c:	af00      	add	r7, sp, #0
 8010e8e:	60f8      	str	r0, [r7, #12]
 8010e90:	60b9      	str	r1, [r7, #8]
 8010e92:	607a      	str	r2, [r7, #4]
 8010e94:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8010ea0:	3b01      	subs	r3, #1
 8010ea2:	009b      	lsls	r3, r3, #2
 8010ea4:	4413      	add	r3, r2
 8010ea6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010ea8:	69bb      	ldr	r3, [r7, #24]
 8010eaa:	f023 0307 	bic.w	r3, r3, #7
 8010eae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010eb0:	69bb      	ldr	r3, [r7, #24]
 8010eb2:	f003 0307 	and.w	r3, r3, #7
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d00b      	beq.n	8010ed2 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8010eba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ebe:	f383 8811 	msr	BASEPRI, r3
 8010ec2:	f3bf 8f6f 	isb	sy
 8010ec6:	f3bf 8f4f 	dsb	sy
 8010eca:	617b      	str	r3, [r7, #20]
}
 8010ecc:	bf00      	nop
 8010ece:	bf00      	nop
 8010ed0:	e7fd      	b.n	8010ece <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010ed2:	68bb      	ldr	r3, [r7, #8]
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d01f      	beq.n	8010f18 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010ed8:	2300      	movs	r3, #0
 8010eda:	61fb      	str	r3, [r7, #28]
 8010edc:	e012      	b.n	8010f04 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010ede:	68ba      	ldr	r2, [r7, #8]
 8010ee0:	69fb      	ldr	r3, [r7, #28]
 8010ee2:	4413      	add	r3, r2
 8010ee4:	7819      	ldrb	r1, [r3, #0]
 8010ee6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010ee8:	69fb      	ldr	r3, [r7, #28]
 8010eea:	4413      	add	r3, r2
 8010eec:	3334      	adds	r3, #52	@ 0x34
 8010eee:	460a      	mov	r2, r1
 8010ef0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010ef2:	68ba      	ldr	r2, [r7, #8]
 8010ef4:	69fb      	ldr	r3, [r7, #28]
 8010ef6:	4413      	add	r3, r2
 8010ef8:	781b      	ldrb	r3, [r3, #0]
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d006      	beq.n	8010f0c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010efe:	69fb      	ldr	r3, [r7, #28]
 8010f00:	3301      	adds	r3, #1
 8010f02:	61fb      	str	r3, [r7, #28]
 8010f04:	69fb      	ldr	r3, [r7, #28]
 8010f06:	2b0f      	cmp	r3, #15
 8010f08:	d9e9      	bls.n	8010ede <prvInitialiseNewTask+0x56>
 8010f0a:	e000      	b.n	8010f0e <prvInitialiseNewTask+0x86>
			{
				break;
 8010f0c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f10:	2200      	movs	r2, #0
 8010f12:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8010f16:	e003      	b.n	8010f20 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010f18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f1a:	2200      	movs	r2, #0
 8010f1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010f20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f22:	2b06      	cmp	r3, #6
 8010f24:	d901      	bls.n	8010f2a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010f26:	2306      	movs	r3, #6
 8010f28:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f2c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010f2e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f32:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010f34:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8010f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f38:	2200      	movs	r2, #0
 8010f3a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f3e:	3304      	adds	r3, #4
 8010f40:	4618      	mov	r0, r3
 8010f42:	f7fe ff0d 	bl	800fd60 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f48:	3318      	adds	r3, #24
 8010f4a:	4618      	mov	r0, r3
 8010f4c:	f7fe ff08 	bl	800fd60 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010f54:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f58:	f1c3 0207 	rsb	r2, r3, #7
 8010f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f5e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010f64:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f68:	2200      	movs	r2, #0
 8010f6a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f70:	2200      	movs	r2, #0
 8010f72:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8010f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f78:	334c      	adds	r3, #76	@ 0x4c
 8010f7a:	224c      	movs	r2, #76	@ 0x4c
 8010f7c:	2100      	movs	r1, #0
 8010f7e:	4618      	mov	r0, r3
 8010f80:	f00d fa39 	bl	801e3f6 <memset>
 8010f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f86:	4a0d      	ldr	r2, [pc, #52]	@ (8010fbc <prvInitialiseNewTask+0x134>)
 8010f88:	651a      	str	r2, [r3, #80]	@ 0x50
 8010f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f8c:	4a0c      	ldr	r2, [pc, #48]	@ (8010fc0 <prvInitialiseNewTask+0x138>)
 8010f8e:	655a      	str	r2, [r3, #84]	@ 0x54
 8010f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f92:	4a0c      	ldr	r2, [pc, #48]	@ (8010fc4 <prvInitialiseNewTask+0x13c>)
 8010f94:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010f96:	683a      	ldr	r2, [r7, #0]
 8010f98:	68f9      	ldr	r1, [r7, #12]
 8010f9a:	69b8      	ldr	r0, [r7, #24]
 8010f9c:	f000 ff1c 	bl	8011dd8 <pxPortInitialiseStack>
 8010fa0:	4602      	mov	r2, r0
 8010fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010fa4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8010fa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d002      	beq.n	8010fb2 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010fac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010fae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010fb0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010fb2:	bf00      	nop
 8010fb4:	3720      	adds	r7, #32
 8010fb6:	46bd      	mov	sp, r7
 8010fb8:	bd80      	pop	{r7, pc}
 8010fba:	bf00      	nop
 8010fbc:	2000e810 	.word	0x2000e810
 8010fc0:	2000e878 	.word	0x2000e878
 8010fc4:	2000e8e0 	.word	0x2000e8e0

08010fc8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010fc8:	b580      	push	{r7, lr}
 8010fca:	b082      	sub	sp, #8
 8010fcc:	af00      	add	r7, sp, #0
 8010fce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010fd0:	f001 f832 	bl	8012038 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010fd4:	4b2a      	ldr	r3, [pc, #168]	@ (8011080 <prvAddNewTaskToReadyList+0xb8>)
 8010fd6:	681b      	ldr	r3, [r3, #0]
 8010fd8:	3301      	adds	r3, #1
 8010fda:	4a29      	ldr	r2, [pc, #164]	@ (8011080 <prvAddNewTaskToReadyList+0xb8>)
 8010fdc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010fde:	4b29      	ldr	r3, [pc, #164]	@ (8011084 <prvAddNewTaskToReadyList+0xbc>)
 8010fe0:	681b      	ldr	r3, [r3, #0]
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d109      	bne.n	8010ffa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010fe6:	4a27      	ldr	r2, [pc, #156]	@ (8011084 <prvAddNewTaskToReadyList+0xbc>)
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010fec:	4b24      	ldr	r3, [pc, #144]	@ (8011080 <prvAddNewTaskToReadyList+0xb8>)
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	2b01      	cmp	r3, #1
 8010ff2:	d110      	bne.n	8011016 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010ff4:	f000 fc06 	bl	8011804 <prvInitialiseTaskLists>
 8010ff8:	e00d      	b.n	8011016 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8010ffa:	4b23      	ldr	r3, [pc, #140]	@ (8011088 <prvAddNewTaskToReadyList+0xc0>)
 8010ffc:	681b      	ldr	r3, [r3, #0]
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d109      	bne.n	8011016 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8011002:	4b20      	ldr	r3, [pc, #128]	@ (8011084 <prvAddNewTaskToReadyList+0xbc>)
 8011004:	681b      	ldr	r3, [r3, #0]
 8011006:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801100c:	429a      	cmp	r2, r3
 801100e:	d802      	bhi.n	8011016 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8011010:	4a1c      	ldr	r2, [pc, #112]	@ (8011084 <prvAddNewTaskToReadyList+0xbc>)
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8011016:	4b1d      	ldr	r3, [pc, #116]	@ (801108c <prvAddNewTaskToReadyList+0xc4>)
 8011018:	681b      	ldr	r3, [r3, #0]
 801101a:	3301      	adds	r3, #1
 801101c:	4a1b      	ldr	r2, [pc, #108]	@ (801108c <prvAddNewTaskToReadyList+0xc4>)
 801101e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011024:	2201      	movs	r2, #1
 8011026:	409a      	lsls	r2, r3
 8011028:	4b19      	ldr	r3, [pc, #100]	@ (8011090 <prvAddNewTaskToReadyList+0xc8>)
 801102a:	681b      	ldr	r3, [r3, #0]
 801102c:	4313      	orrs	r3, r2
 801102e:	4a18      	ldr	r2, [pc, #96]	@ (8011090 <prvAddNewTaskToReadyList+0xc8>)
 8011030:	6013      	str	r3, [r2, #0]
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011036:	4613      	mov	r3, r2
 8011038:	009b      	lsls	r3, r3, #2
 801103a:	4413      	add	r3, r2
 801103c:	009b      	lsls	r3, r3, #2
 801103e:	4a15      	ldr	r2, [pc, #84]	@ (8011094 <prvAddNewTaskToReadyList+0xcc>)
 8011040:	441a      	add	r2, r3
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	3304      	adds	r3, #4
 8011046:	4619      	mov	r1, r3
 8011048:	4610      	mov	r0, r2
 801104a:	f7fe fe96 	bl	800fd7a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801104e:	f001 f825 	bl	801209c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8011052:	4b0d      	ldr	r3, [pc, #52]	@ (8011088 <prvAddNewTaskToReadyList+0xc0>)
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	2b00      	cmp	r3, #0
 8011058:	d00e      	beq.n	8011078 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801105a:	4b0a      	ldr	r3, [pc, #40]	@ (8011084 <prvAddNewTaskToReadyList+0xbc>)
 801105c:	681b      	ldr	r3, [r3, #0]
 801105e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011064:	429a      	cmp	r2, r3
 8011066:	d207      	bcs.n	8011078 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8011068:	4b0b      	ldr	r3, [pc, #44]	@ (8011098 <prvAddNewTaskToReadyList+0xd0>)
 801106a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801106e:	601a      	str	r2, [r3, #0]
 8011070:	f3bf 8f4f 	dsb	sy
 8011074:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011078:	bf00      	nop
 801107a:	3708      	adds	r7, #8
 801107c:	46bd      	mov	sp, r7
 801107e:	bd80      	pop	{r7, pc}
 8011080:	20005708 	.word	0x20005708
 8011084:	20005608 	.word	0x20005608
 8011088:	20005714 	.word	0x20005714
 801108c:	20005724 	.word	0x20005724
 8011090:	20005710 	.word	0x20005710
 8011094:	2000560c 	.word	0x2000560c
 8011098:	e000ed04 	.word	0xe000ed04

0801109c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801109c:	b580      	push	{r7, lr}
 801109e:	b084      	sub	sp, #16
 80110a0:	af00      	add	r7, sp, #0
 80110a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80110a4:	2300      	movs	r3, #0
 80110a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d018      	beq.n	80110e0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80110ae:	4b14      	ldr	r3, [pc, #80]	@ (8011100 <vTaskDelay+0x64>)
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d00b      	beq.n	80110ce <vTaskDelay+0x32>
	__asm volatile
 80110b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80110ba:	f383 8811 	msr	BASEPRI, r3
 80110be:	f3bf 8f6f 	isb	sy
 80110c2:	f3bf 8f4f 	dsb	sy
 80110c6:	60bb      	str	r3, [r7, #8]
}
 80110c8:	bf00      	nop
 80110ca:	bf00      	nop
 80110cc:	e7fd      	b.n	80110ca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80110ce:	f000 f885 	bl	80111dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80110d2:	2100      	movs	r1, #0
 80110d4:	6878      	ldr	r0, [r7, #4]
 80110d6:	f000 fe19 	bl	8011d0c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80110da:	f000 f88d 	bl	80111f8 <xTaskResumeAll>
 80110de:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80110e0:	68fb      	ldr	r3, [r7, #12]
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d107      	bne.n	80110f6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80110e6:	4b07      	ldr	r3, [pc, #28]	@ (8011104 <vTaskDelay+0x68>)
 80110e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80110ec:	601a      	str	r2, [r3, #0]
 80110ee:	f3bf 8f4f 	dsb	sy
 80110f2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80110f6:	bf00      	nop
 80110f8:	3710      	adds	r7, #16
 80110fa:	46bd      	mov	sp, r7
 80110fc:	bd80      	pop	{r7, pc}
 80110fe:	bf00      	nop
 8011100:	20005730 	.word	0x20005730
 8011104:	e000ed04 	.word	0xe000ed04

08011108 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8011108:	b580      	push	{r7, lr}
 801110a:	b08a      	sub	sp, #40	@ 0x28
 801110c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801110e:	2300      	movs	r3, #0
 8011110:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8011112:	2300      	movs	r3, #0
 8011114:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8011116:	463a      	mov	r2, r7
 8011118:	1d39      	adds	r1, r7, #4
 801111a:	f107 0308 	add.w	r3, r7, #8
 801111e:	4618      	mov	r0, r3
 8011120:	f7f0 fd94 	bl	8001c4c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8011124:	6839      	ldr	r1, [r7, #0]
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	68ba      	ldr	r2, [r7, #8]
 801112a:	9202      	str	r2, [sp, #8]
 801112c:	9301      	str	r3, [sp, #4]
 801112e:	2300      	movs	r3, #0
 8011130:	9300      	str	r3, [sp, #0]
 8011132:	2300      	movs	r3, #0
 8011134:	460a      	mov	r2, r1
 8011136:	4921      	ldr	r1, [pc, #132]	@ (80111bc <vTaskStartScheduler+0xb4>)
 8011138:	4821      	ldr	r0, [pc, #132]	@ (80111c0 <vTaskStartScheduler+0xb8>)
 801113a:	f7ff fdff 	bl	8010d3c <xTaskCreateStatic>
 801113e:	4603      	mov	r3, r0
 8011140:	4a20      	ldr	r2, [pc, #128]	@ (80111c4 <vTaskStartScheduler+0xbc>)
 8011142:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8011144:	4b1f      	ldr	r3, [pc, #124]	@ (80111c4 <vTaskStartScheduler+0xbc>)
 8011146:	681b      	ldr	r3, [r3, #0]
 8011148:	2b00      	cmp	r3, #0
 801114a:	d002      	beq.n	8011152 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801114c:	2301      	movs	r3, #1
 801114e:	617b      	str	r3, [r7, #20]
 8011150:	e001      	b.n	8011156 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8011152:	2300      	movs	r3, #0
 8011154:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8011156:	697b      	ldr	r3, [r7, #20]
 8011158:	2b01      	cmp	r3, #1
 801115a:	d11b      	bne.n	8011194 <vTaskStartScheduler+0x8c>
	__asm volatile
 801115c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011160:	f383 8811 	msr	BASEPRI, r3
 8011164:	f3bf 8f6f 	isb	sy
 8011168:	f3bf 8f4f 	dsb	sy
 801116c:	613b      	str	r3, [r7, #16]
}
 801116e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011170:	4b15      	ldr	r3, [pc, #84]	@ (80111c8 <vTaskStartScheduler+0xc0>)
 8011172:	681b      	ldr	r3, [r3, #0]
 8011174:	334c      	adds	r3, #76	@ 0x4c
 8011176:	4a15      	ldr	r2, [pc, #84]	@ (80111cc <vTaskStartScheduler+0xc4>)
 8011178:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801117a:	4b15      	ldr	r3, [pc, #84]	@ (80111d0 <vTaskStartScheduler+0xc8>)
 801117c:	f04f 32ff 	mov.w	r2, #4294967295
 8011180:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8011182:	4b14      	ldr	r3, [pc, #80]	@ (80111d4 <vTaskStartScheduler+0xcc>)
 8011184:	2201      	movs	r2, #1
 8011186:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8011188:	4b13      	ldr	r3, [pc, #76]	@ (80111d8 <vTaskStartScheduler+0xd0>)
 801118a:	2200      	movs	r2, #0
 801118c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801118e:	f000 feaf 	bl	8011ef0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8011192:	e00f      	b.n	80111b4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011194:	697b      	ldr	r3, [r7, #20]
 8011196:	f1b3 3fff 	cmp.w	r3, #4294967295
 801119a:	d10b      	bne.n	80111b4 <vTaskStartScheduler+0xac>
	__asm volatile
 801119c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80111a0:	f383 8811 	msr	BASEPRI, r3
 80111a4:	f3bf 8f6f 	isb	sy
 80111a8:	f3bf 8f4f 	dsb	sy
 80111ac:	60fb      	str	r3, [r7, #12]
}
 80111ae:	bf00      	nop
 80111b0:	bf00      	nop
 80111b2:	e7fd      	b.n	80111b0 <vTaskStartScheduler+0xa8>
}
 80111b4:	bf00      	nop
 80111b6:	3718      	adds	r7, #24
 80111b8:	46bd      	mov	sp, r7
 80111ba:	bd80      	pop	{r7, pc}
 80111bc:	080212dc 	.word	0x080212dc
 80111c0:	080117d5 	.word	0x080117d5
 80111c4:	2000572c 	.word	0x2000572c
 80111c8:	20005608 	.word	0x20005608
 80111cc:	20000120 	.word	0x20000120
 80111d0:	20005728 	.word	0x20005728
 80111d4:	20005714 	.word	0x20005714
 80111d8:	2000570c 	.word	0x2000570c

080111dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80111dc:	b480      	push	{r7}
 80111de:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80111e0:	4b04      	ldr	r3, [pc, #16]	@ (80111f4 <vTaskSuspendAll+0x18>)
 80111e2:	681b      	ldr	r3, [r3, #0]
 80111e4:	3301      	adds	r3, #1
 80111e6:	4a03      	ldr	r2, [pc, #12]	@ (80111f4 <vTaskSuspendAll+0x18>)
 80111e8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80111ea:	bf00      	nop
 80111ec:	46bd      	mov	sp, r7
 80111ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111f2:	4770      	bx	lr
 80111f4:	20005730 	.word	0x20005730

080111f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80111f8:	b580      	push	{r7, lr}
 80111fa:	b084      	sub	sp, #16
 80111fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80111fe:	2300      	movs	r3, #0
 8011200:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8011202:	2300      	movs	r3, #0
 8011204:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8011206:	4b42      	ldr	r3, [pc, #264]	@ (8011310 <xTaskResumeAll+0x118>)
 8011208:	681b      	ldr	r3, [r3, #0]
 801120a:	2b00      	cmp	r3, #0
 801120c:	d10b      	bne.n	8011226 <xTaskResumeAll+0x2e>
	__asm volatile
 801120e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011212:	f383 8811 	msr	BASEPRI, r3
 8011216:	f3bf 8f6f 	isb	sy
 801121a:	f3bf 8f4f 	dsb	sy
 801121e:	603b      	str	r3, [r7, #0]
}
 8011220:	bf00      	nop
 8011222:	bf00      	nop
 8011224:	e7fd      	b.n	8011222 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8011226:	f000 ff07 	bl	8012038 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801122a:	4b39      	ldr	r3, [pc, #228]	@ (8011310 <xTaskResumeAll+0x118>)
 801122c:	681b      	ldr	r3, [r3, #0]
 801122e:	3b01      	subs	r3, #1
 8011230:	4a37      	ldr	r2, [pc, #220]	@ (8011310 <xTaskResumeAll+0x118>)
 8011232:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011234:	4b36      	ldr	r3, [pc, #216]	@ (8011310 <xTaskResumeAll+0x118>)
 8011236:	681b      	ldr	r3, [r3, #0]
 8011238:	2b00      	cmp	r3, #0
 801123a:	d161      	bne.n	8011300 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801123c:	4b35      	ldr	r3, [pc, #212]	@ (8011314 <xTaskResumeAll+0x11c>)
 801123e:	681b      	ldr	r3, [r3, #0]
 8011240:	2b00      	cmp	r3, #0
 8011242:	d05d      	beq.n	8011300 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011244:	e02e      	b.n	80112a4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011246:	4b34      	ldr	r3, [pc, #208]	@ (8011318 <xTaskResumeAll+0x120>)
 8011248:	68db      	ldr	r3, [r3, #12]
 801124a:	68db      	ldr	r3, [r3, #12]
 801124c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801124e:	68fb      	ldr	r3, [r7, #12]
 8011250:	3318      	adds	r3, #24
 8011252:	4618      	mov	r0, r3
 8011254:	f7fe fdee 	bl	800fe34 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011258:	68fb      	ldr	r3, [r7, #12]
 801125a:	3304      	adds	r3, #4
 801125c:	4618      	mov	r0, r3
 801125e:	f7fe fde9 	bl	800fe34 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011262:	68fb      	ldr	r3, [r7, #12]
 8011264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011266:	2201      	movs	r2, #1
 8011268:	409a      	lsls	r2, r3
 801126a:	4b2c      	ldr	r3, [pc, #176]	@ (801131c <xTaskResumeAll+0x124>)
 801126c:	681b      	ldr	r3, [r3, #0]
 801126e:	4313      	orrs	r3, r2
 8011270:	4a2a      	ldr	r2, [pc, #168]	@ (801131c <xTaskResumeAll+0x124>)
 8011272:	6013      	str	r3, [r2, #0]
 8011274:	68fb      	ldr	r3, [r7, #12]
 8011276:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011278:	4613      	mov	r3, r2
 801127a:	009b      	lsls	r3, r3, #2
 801127c:	4413      	add	r3, r2
 801127e:	009b      	lsls	r3, r3, #2
 8011280:	4a27      	ldr	r2, [pc, #156]	@ (8011320 <xTaskResumeAll+0x128>)
 8011282:	441a      	add	r2, r3
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	3304      	adds	r3, #4
 8011288:	4619      	mov	r1, r3
 801128a:	4610      	mov	r0, r2
 801128c:	f7fe fd75 	bl	800fd7a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011290:	68fb      	ldr	r3, [r7, #12]
 8011292:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011294:	4b23      	ldr	r3, [pc, #140]	@ (8011324 <xTaskResumeAll+0x12c>)
 8011296:	681b      	ldr	r3, [r3, #0]
 8011298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801129a:	429a      	cmp	r2, r3
 801129c:	d302      	bcc.n	80112a4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801129e:	4b22      	ldr	r3, [pc, #136]	@ (8011328 <xTaskResumeAll+0x130>)
 80112a0:	2201      	movs	r2, #1
 80112a2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80112a4:	4b1c      	ldr	r3, [pc, #112]	@ (8011318 <xTaskResumeAll+0x120>)
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d1cc      	bne.n	8011246 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80112ac:	68fb      	ldr	r3, [r7, #12]
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	d001      	beq.n	80112b6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80112b2:	f000 fb4b 	bl	801194c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80112b6:	4b1d      	ldr	r3, [pc, #116]	@ (801132c <xTaskResumeAll+0x134>)
 80112b8:	681b      	ldr	r3, [r3, #0]
 80112ba:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d010      	beq.n	80112e4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80112c2:	f000 f859 	bl	8011378 <xTaskIncrementTick>
 80112c6:	4603      	mov	r3, r0
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d002      	beq.n	80112d2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80112cc:	4b16      	ldr	r3, [pc, #88]	@ (8011328 <xTaskResumeAll+0x130>)
 80112ce:	2201      	movs	r2, #1
 80112d0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	3b01      	subs	r3, #1
 80112d6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d1f1      	bne.n	80112c2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80112de:	4b13      	ldr	r3, [pc, #76]	@ (801132c <xTaskResumeAll+0x134>)
 80112e0:	2200      	movs	r2, #0
 80112e2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80112e4:	4b10      	ldr	r3, [pc, #64]	@ (8011328 <xTaskResumeAll+0x130>)
 80112e6:	681b      	ldr	r3, [r3, #0]
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d009      	beq.n	8011300 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80112ec:	2301      	movs	r3, #1
 80112ee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80112f0:	4b0f      	ldr	r3, [pc, #60]	@ (8011330 <xTaskResumeAll+0x138>)
 80112f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80112f6:	601a      	str	r2, [r3, #0]
 80112f8:	f3bf 8f4f 	dsb	sy
 80112fc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011300:	f000 fecc 	bl	801209c <vPortExitCritical>

	return xAlreadyYielded;
 8011304:	68bb      	ldr	r3, [r7, #8]
}
 8011306:	4618      	mov	r0, r3
 8011308:	3710      	adds	r7, #16
 801130a:	46bd      	mov	sp, r7
 801130c:	bd80      	pop	{r7, pc}
 801130e:	bf00      	nop
 8011310:	20005730 	.word	0x20005730
 8011314:	20005708 	.word	0x20005708
 8011318:	200056c8 	.word	0x200056c8
 801131c:	20005710 	.word	0x20005710
 8011320:	2000560c 	.word	0x2000560c
 8011324:	20005608 	.word	0x20005608
 8011328:	2000571c 	.word	0x2000571c
 801132c:	20005718 	.word	0x20005718
 8011330:	e000ed04 	.word	0xe000ed04

08011334 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8011334:	b480      	push	{r7}
 8011336:	b083      	sub	sp, #12
 8011338:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801133a:	4b05      	ldr	r3, [pc, #20]	@ (8011350 <xTaskGetTickCount+0x1c>)
 801133c:	681b      	ldr	r3, [r3, #0]
 801133e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8011340:	687b      	ldr	r3, [r7, #4]
}
 8011342:	4618      	mov	r0, r3
 8011344:	370c      	adds	r7, #12
 8011346:	46bd      	mov	sp, r7
 8011348:	f85d 7b04 	ldr.w	r7, [sp], #4
 801134c:	4770      	bx	lr
 801134e:	bf00      	nop
 8011350:	2000570c 	.word	0x2000570c

08011354 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8011354:	b580      	push	{r7, lr}
 8011356:	b082      	sub	sp, #8
 8011358:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801135a:	f000 ff4d 	bl	80121f8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 801135e:	2300      	movs	r3, #0
 8011360:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8011362:	4b04      	ldr	r3, [pc, #16]	@ (8011374 <xTaskGetTickCountFromISR+0x20>)
 8011364:	681b      	ldr	r3, [r3, #0]
 8011366:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011368:	683b      	ldr	r3, [r7, #0]
}
 801136a:	4618      	mov	r0, r3
 801136c:	3708      	adds	r7, #8
 801136e:	46bd      	mov	sp, r7
 8011370:	bd80      	pop	{r7, pc}
 8011372:	bf00      	nop
 8011374:	2000570c 	.word	0x2000570c

08011378 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011378:	b580      	push	{r7, lr}
 801137a:	b086      	sub	sp, #24
 801137c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801137e:	2300      	movs	r3, #0
 8011380:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011382:	4b4f      	ldr	r3, [pc, #316]	@ (80114c0 <xTaskIncrementTick+0x148>)
 8011384:	681b      	ldr	r3, [r3, #0]
 8011386:	2b00      	cmp	r3, #0
 8011388:	f040 808f 	bne.w	80114aa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801138c:	4b4d      	ldr	r3, [pc, #308]	@ (80114c4 <xTaskIncrementTick+0x14c>)
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	3301      	adds	r3, #1
 8011392:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011394:	4a4b      	ldr	r2, [pc, #300]	@ (80114c4 <xTaskIncrementTick+0x14c>)
 8011396:	693b      	ldr	r3, [r7, #16]
 8011398:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801139a:	693b      	ldr	r3, [r7, #16]
 801139c:	2b00      	cmp	r3, #0
 801139e:	d121      	bne.n	80113e4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80113a0:	4b49      	ldr	r3, [pc, #292]	@ (80114c8 <xTaskIncrementTick+0x150>)
 80113a2:	681b      	ldr	r3, [r3, #0]
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d00b      	beq.n	80113c2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80113aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80113ae:	f383 8811 	msr	BASEPRI, r3
 80113b2:	f3bf 8f6f 	isb	sy
 80113b6:	f3bf 8f4f 	dsb	sy
 80113ba:	603b      	str	r3, [r7, #0]
}
 80113bc:	bf00      	nop
 80113be:	bf00      	nop
 80113c0:	e7fd      	b.n	80113be <xTaskIncrementTick+0x46>
 80113c2:	4b41      	ldr	r3, [pc, #260]	@ (80114c8 <xTaskIncrementTick+0x150>)
 80113c4:	681b      	ldr	r3, [r3, #0]
 80113c6:	60fb      	str	r3, [r7, #12]
 80113c8:	4b40      	ldr	r3, [pc, #256]	@ (80114cc <xTaskIncrementTick+0x154>)
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	4a3e      	ldr	r2, [pc, #248]	@ (80114c8 <xTaskIncrementTick+0x150>)
 80113ce:	6013      	str	r3, [r2, #0]
 80113d0:	4a3e      	ldr	r2, [pc, #248]	@ (80114cc <xTaskIncrementTick+0x154>)
 80113d2:	68fb      	ldr	r3, [r7, #12]
 80113d4:	6013      	str	r3, [r2, #0]
 80113d6:	4b3e      	ldr	r3, [pc, #248]	@ (80114d0 <xTaskIncrementTick+0x158>)
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	3301      	adds	r3, #1
 80113dc:	4a3c      	ldr	r2, [pc, #240]	@ (80114d0 <xTaskIncrementTick+0x158>)
 80113de:	6013      	str	r3, [r2, #0]
 80113e0:	f000 fab4 	bl	801194c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80113e4:	4b3b      	ldr	r3, [pc, #236]	@ (80114d4 <xTaskIncrementTick+0x15c>)
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	693a      	ldr	r2, [r7, #16]
 80113ea:	429a      	cmp	r2, r3
 80113ec:	d348      	bcc.n	8011480 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80113ee:	4b36      	ldr	r3, [pc, #216]	@ (80114c8 <xTaskIncrementTick+0x150>)
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	681b      	ldr	r3, [r3, #0]
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d104      	bne.n	8011402 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80113f8:	4b36      	ldr	r3, [pc, #216]	@ (80114d4 <xTaskIncrementTick+0x15c>)
 80113fa:	f04f 32ff 	mov.w	r2, #4294967295
 80113fe:	601a      	str	r2, [r3, #0]
					break;
 8011400:	e03e      	b.n	8011480 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011402:	4b31      	ldr	r3, [pc, #196]	@ (80114c8 <xTaskIncrementTick+0x150>)
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	68db      	ldr	r3, [r3, #12]
 8011408:	68db      	ldr	r3, [r3, #12]
 801140a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801140c:	68bb      	ldr	r3, [r7, #8]
 801140e:	685b      	ldr	r3, [r3, #4]
 8011410:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011412:	693a      	ldr	r2, [r7, #16]
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	429a      	cmp	r2, r3
 8011418:	d203      	bcs.n	8011422 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801141a:	4a2e      	ldr	r2, [pc, #184]	@ (80114d4 <xTaskIncrementTick+0x15c>)
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011420:	e02e      	b.n	8011480 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011422:	68bb      	ldr	r3, [r7, #8]
 8011424:	3304      	adds	r3, #4
 8011426:	4618      	mov	r0, r3
 8011428:	f7fe fd04 	bl	800fe34 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801142c:	68bb      	ldr	r3, [r7, #8]
 801142e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011430:	2b00      	cmp	r3, #0
 8011432:	d004      	beq.n	801143e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011434:	68bb      	ldr	r3, [r7, #8]
 8011436:	3318      	adds	r3, #24
 8011438:	4618      	mov	r0, r3
 801143a:	f7fe fcfb 	bl	800fe34 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801143e:	68bb      	ldr	r3, [r7, #8]
 8011440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011442:	2201      	movs	r2, #1
 8011444:	409a      	lsls	r2, r3
 8011446:	4b24      	ldr	r3, [pc, #144]	@ (80114d8 <xTaskIncrementTick+0x160>)
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	4313      	orrs	r3, r2
 801144c:	4a22      	ldr	r2, [pc, #136]	@ (80114d8 <xTaskIncrementTick+0x160>)
 801144e:	6013      	str	r3, [r2, #0]
 8011450:	68bb      	ldr	r3, [r7, #8]
 8011452:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011454:	4613      	mov	r3, r2
 8011456:	009b      	lsls	r3, r3, #2
 8011458:	4413      	add	r3, r2
 801145a:	009b      	lsls	r3, r3, #2
 801145c:	4a1f      	ldr	r2, [pc, #124]	@ (80114dc <xTaskIncrementTick+0x164>)
 801145e:	441a      	add	r2, r3
 8011460:	68bb      	ldr	r3, [r7, #8]
 8011462:	3304      	adds	r3, #4
 8011464:	4619      	mov	r1, r3
 8011466:	4610      	mov	r0, r2
 8011468:	f7fe fc87 	bl	800fd7a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801146c:	68bb      	ldr	r3, [r7, #8]
 801146e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011470:	4b1b      	ldr	r3, [pc, #108]	@ (80114e0 <xTaskIncrementTick+0x168>)
 8011472:	681b      	ldr	r3, [r3, #0]
 8011474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011476:	429a      	cmp	r2, r3
 8011478:	d3b9      	bcc.n	80113ee <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 801147a:	2301      	movs	r3, #1
 801147c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801147e:	e7b6      	b.n	80113ee <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011480:	4b17      	ldr	r3, [pc, #92]	@ (80114e0 <xTaskIncrementTick+0x168>)
 8011482:	681b      	ldr	r3, [r3, #0]
 8011484:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011486:	4915      	ldr	r1, [pc, #84]	@ (80114dc <xTaskIncrementTick+0x164>)
 8011488:	4613      	mov	r3, r2
 801148a:	009b      	lsls	r3, r3, #2
 801148c:	4413      	add	r3, r2
 801148e:	009b      	lsls	r3, r3, #2
 8011490:	440b      	add	r3, r1
 8011492:	681b      	ldr	r3, [r3, #0]
 8011494:	2b01      	cmp	r3, #1
 8011496:	d901      	bls.n	801149c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8011498:	2301      	movs	r3, #1
 801149a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801149c:	4b11      	ldr	r3, [pc, #68]	@ (80114e4 <xTaskIncrementTick+0x16c>)
 801149e:	681b      	ldr	r3, [r3, #0]
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d007      	beq.n	80114b4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80114a4:	2301      	movs	r3, #1
 80114a6:	617b      	str	r3, [r7, #20]
 80114a8:	e004      	b.n	80114b4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80114aa:	4b0f      	ldr	r3, [pc, #60]	@ (80114e8 <xTaskIncrementTick+0x170>)
 80114ac:	681b      	ldr	r3, [r3, #0]
 80114ae:	3301      	adds	r3, #1
 80114b0:	4a0d      	ldr	r2, [pc, #52]	@ (80114e8 <xTaskIncrementTick+0x170>)
 80114b2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80114b4:	697b      	ldr	r3, [r7, #20]
}
 80114b6:	4618      	mov	r0, r3
 80114b8:	3718      	adds	r7, #24
 80114ba:	46bd      	mov	sp, r7
 80114bc:	bd80      	pop	{r7, pc}
 80114be:	bf00      	nop
 80114c0:	20005730 	.word	0x20005730
 80114c4:	2000570c 	.word	0x2000570c
 80114c8:	200056c0 	.word	0x200056c0
 80114cc:	200056c4 	.word	0x200056c4
 80114d0:	20005720 	.word	0x20005720
 80114d4:	20005728 	.word	0x20005728
 80114d8:	20005710 	.word	0x20005710
 80114dc:	2000560c 	.word	0x2000560c
 80114e0:	20005608 	.word	0x20005608
 80114e4:	2000571c 	.word	0x2000571c
 80114e8:	20005718 	.word	0x20005718

080114ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80114ec:	b480      	push	{r7}
 80114ee:	b087      	sub	sp, #28
 80114f0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80114f2:	4b2a      	ldr	r3, [pc, #168]	@ (801159c <vTaskSwitchContext+0xb0>)
 80114f4:	681b      	ldr	r3, [r3, #0]
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	d003      	beq.n	8011502 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80114fa:	4b29      	ldr	r3, [pc, #164]	@ (80115a0 <vTaskSwitchContext+0xb4>)
 80114fc:	2201      	movs	r2, #1
 80114fe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011500:	e045      	b.n	801158e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8011502:	4b27      	ldr	r3, [pc, #156]	@ (80115a0 <vTaskSwitchContext+0xb4>)
 8011504:	2200      	movs	r2, #0
 8011506:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011508:	4b26      	ldr	r3, [pc, #152]	@ (80115a4 <vTaskSwitchContext+0xb8>)
 801150a:	681b      	ldr	r3, [r3, #0]
 801150c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801150e:	68fb      	ldr	r3, [r7, #12]
 8011510:	fab3 f383 	clz	r3, r3
 8011514:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8011516:	7afb      	ldrb	r3, [r7, #11]
 8011518:	f1c3 031f 	rsb	r3, r3, #31
 801151c:	617b      	str	r3, [r7, #20]
 801151e:	4922      	ldr	r1, [pc, #136]	@ (80115a8 <vTaskSwitchContext+0xbc>)
 8011520:	697a      	ldr	r2, [r7, #20]
 8011522:	4613      	mov	r3, r2
 8011524:	009b      	lsls	r3, r3, #2
 8011526:	4413      	add	r3, r2
 8011528:	009b      	lsls	r3, r3, #2
 801152a:	440b      	add	r3, r1
 801152c:	681b      	ldr	r3, [r3, #0]
 801152e:	2b00      	cmp	r3, #0
 8011530:	d10b      	bne.n	801154a <vTaskSwitchContext+0x5e>
	__asm volatile
 8011532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011536:	f383 8811 	msr	BASEPRI, r3
 801153a:	f3bf 8f6f 	isb	sy
 801153e:	f3bf 8f4f 	dsb	sy
 8011542:	607b      	str	r3, [r7, #4]
}
 8011544:	bf00      	nop
 8011546:	bf00      	nop
 8011548:	e7fd      	b.n	8011546 <vTaskSwitchContext+0x5a>
 801154a:	697a      	ldr	r2, [r7, #20]
 801154c:	4613      	mov	r3, r2
 801154e:	009b      	lsls	r3, r3, #2
 8011550:	4413      	add	r3, r2
 8011552:	009b      	lsls	r3, r3, #2
 8011554:	4a14      	ldr	r2, [pc, #80]	@ (80115a8 <vTaskSwitchContext+0xbc>)
 8011556:	4413      	add	r3, r2
 8011558:	613b      	str	r3, [r7, #16]
 801155a:	693b      	ldr	r3, [r7, #16]
 801155c:	685b      	ldr	r3, [r3, #4]
 801155e:	685a      	ldr	r2, [r3, #4]
 8011560:	693b      	ldr	r3, [r7, #16]
 8011562:	605a      	str	r2, [r3, #4]
 8011564:	693b      	ldr	r3, [r7, #16]
 8011566:	685a      	ldr	r2, [r3, #4]
 8011568:	693b      	ldr	r3, [r7, #16]
 801156a:	3308      	adds	r3, #8
 801156c:	429a      	cmp	r2, r3
 801156e:	d104      	bne.n	801157a <vTaskSwitchContext+0x8e>
 8011570:	693b      	ldr	r3, [r7, #16]
 8011572:	685b      	ldr	r3, [r3, #4]
 8011574:	685a      	ldr	r2, [r3, #4]
 8011576:	693b      	ldr	r3, [r7, #16]
 8011578:	605a      	str	r2, [r3, #4]
 801157a:	693b      	ldr	r3, [r7, #16]
 801157c:	685b      	ldr	r3, [r3, #4]
 801157e:	68db      	ldr	r3, [r3, #12]
 8011580:	4a0a      	ldr	r2, [pc, #40]	@ (80115ac <vTaskSwitchContext+0xc0>)
 8011582:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011584:	4b09      	ldr	r3, [pc, #36]	@ (80115ac <vTaskSwitchContext+0xc0>)
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	334c      	adds	r3, #76	@ 0x4c
 801158a:	4a09      	ldr	r2, [pc, #36]	@ (80115b0 <vTaskSwitchContext+0xc4>)
 801158c:	6013      	str	r3, [r2, #0]
}
 801158e:	bf00      	nop
 8011590:	371c      	adds	r7, #28
 8011592:	46bd      	mov	sp, r7
 8011594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011598:	4770      	bx	lr
 801159a:	bf00      	nop
 801159c:	20005730 	.word	0x20005730
 80115a0:	2000571c 	.word	0x2000571c
 80115a4:	20005710 	.word	0x20005710
 80115a8:	2000560c 	.word	0x2000560c
 80115ac:	20005608 	.word	0x20005608
 80115b0:	20000120 	.word	0x20000120

080115b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80115b4:	b580      	push	{r7, lr}
 80115b6:	b084      	sub	sp, #16
 80115b8:	af00      	add	r7, sp, #0
 80115ba:	6078      	str	r0, [r7, #4]
 80115bc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	d10b      	bne.n	80115dc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80115c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80115c8:	f383 8811 	msr	BASEPRI, r3
 80115cc:	f3bf 8f6f 	isb	sy
 80115d0:	f3bf 8f4f 	dsb	sy
 80115d4:	60fb      	str	r3, [r7, #12]
}
 80115d6:	bf00      	nop
 80115d8:	bf00      	nop
 80115da:	e7fd      	b.n	80115d8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80115dc:	4b07      	ldr	r3, [pc, #28]	@ (80115fc <vTaskPlaceOnEventList+0x48>)
 80115de:	681b      	ldr	r3, [r3, #0]
 80115e0:	3318      	adds	r3, #24
 80115e2:	4619      	mov	r1, r3
 80115e4:	6878      	ldr	r0, [r7, #4]
 80115e6:	f7fe fbec 	bl	800fdc2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80115ea:	2101      	movs	r1, #1
 80115ec:	6838      	ldr	r0, [r7, #0]
 80115ee:	f000 fb8d 	bl	8011d0c <prvAddCurrentTaskToDelayedList>
}
 80115f2:	bf00      	nop
 80115f4:	3710      	adds	r7, #16
 80115f6:	46bd      	mov	sp, r7
 80115f8:	bd80      	pop	{r7, pc}
 80115fa:	bf00      	nop
 80115fc:	20005608 	.word	0x20005608

08011600 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011600:	b580      	push	{r7, lr}
 8011602:	b086      	sub	sp, #24
 8011604:	af00      	add	r7, sp, #0
 8011606:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	68db      	ldr	r3, [r3, #12]
 801160c:	68db      	ldr	r3, [r3, #12]
 801160e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011610:	693b      	ldr	r3, [r7, #16]
 8011612:	2b00      	cmp	r3, #0
 8011614:	d10b      	bne.n	801162e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8011616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801161a:	f383 8811 	msr	BASEPRI, r3
 801161e:	f3bf 8f6f 	isb	sy
 8011622:	f3bf 8f4f 	dsb	sy
 8011626:	60fb      	str	r3, [r7, #12]
}
 8011628:	bf00      	nop
 801162a:	bf00      	nop
 801162c:	e7fd      	b.n	801162a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801162e:	693b      	ldr	r3, [r7, #16]
 8011630:	3318      	adds	r3, #24
 8011632:	4618      	mov	r0, r3
 8011634:	f7fe fbfe 	bl	800fe34 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011638:	4b1d      	ldr	r3, [pc, #116]	@ (80116b0 <xTaskRemoveFromEventList+0xb0>)
 801163a:	681b      	ldr	r3, [r3, #0]
 801163c:	2b00      	cmp	r3, #0
 801163e:	d11c      	bne.n	801167a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011640:	693b      	ldr	r3, [r7, #16]
 8011642:	3304      	adds	r3, #4
 8011644:	4618      	mov	r0, r3
 8011646:	f7fe fbf5 	bl	800fe34 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801164a:	693b      	ldr	r3, [r7, #16]
 801164c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801164e:	2201      	movs	r2, #1
 8011650:	409a      	lsls	r2, r3
 8011652:	4b18      	ldr	r3, [pc, #96]	@ (80116b4 <xTaskRemoveFromEventList+0xb4>)
 8011654:	681b      	ldr	r3, [r3, #0]
 8011656:	4313      	orrs	r3, r2
 8011658:	4a16      	ldr	r2, [pc, #88]	@ (80116b4 <xTaskRemoveFromEventList+0xb4>)
 801165a:	6013      	str	r3, [r2, #0]
 801165c:	693b      	ldr	r3, [r7, #16]
 801165e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011660:	4613      	mov	r3, r2
 8011662:	009b      	lsls	r3, r3, #2
 8011664:	4413      	add	r3, r2
 8011666:	009b      	lsls	r3, r3, #2
 8011668:	4a13      	ldr	r2, [pc, #76]	@ (80116b8 <xTaskRemoveFromEventList+0xb8>)
 801166a:	441a      	add	r2, r3
 801166c:	693b      	ldr	r3, [r7, #16]
 801166e:	3304      	adds	r3, #4
 8011670:	4619      	mov	r1, r3
 8011672:	4610      	mov	r0, r2
 8011674:	f7fe fb81 	bl	800fd7a <vListInsertEnd>
 8011678:	e005      	b.n	8011686 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801167a:	693b      	ldr	r3, [r7, #16]
 801167c:	3318      	adds	r3, #24
 801167e:	4619      	mov	r1, r3
 8011680:	480e      	ldr	r0, [pc, #56]	@ (80116bc <xTaskRemoveFromEventList+0xbc>)
 8011682:	f7fe fb7a 	bl	800fd7a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011686:	693b      	ldr	r3, [r7, #16]
 8011688:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801168a:	4b0d      	ldr	r3, [pc, #52]	@ (80116c0 <xTaskRemoveFromEventList+0xc0>)
 801168c:	681b      	ldr	r3, [r3, #0]
 801168e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011690:	429a      	cmp	r2, r3
 8011692:	d905      	bls.n	80116a0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011694:	2301      	movs	r3, #1
 8011696:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011698:	4b0a      	ldr	r3, [pc, #40]	@ (80116c4 <xTaskRemoveFromEventList+0xc4>)
 801169a:	2201      	movs	r2, #1
 801169c:	601a      	str	r2, [r3, #0]
 801169e:	e001      	b.n	80116a4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80116a0:	2300      	movs	r3, #0
 80116a2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80116a4:	697b      	ldr	r3, [r7, #20]
}
 80116a6:	4618      	mov	r0, r3
 80116a8:	3718      	adds	r7, #24
 80116aa:	46bd      	mov	sp, r7
 80116ac:	bd80      	pop	{r7, pc}
 80116ae:	bf00      	nop
 80116b0:	20005730 	.word	0x20005730
 80116b4:	20005710 	.word	0x20005710
 80116b8:	2000560c 	.word	0x2000560c
 80116bc:	200056c8 	.word	0x200056c8
 80116c0:	20005608 	.word	0x20005608
 80116c4:	2000571c 	.word	0x2000571c

080116c8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80116c8:	b480      	push	{r7}
 80116ca:	b083      	sub	sp, #12
 80116cc:	af00      	add	r7, sp, #0
 80116ce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80116d0:	4b06      	ldr	r3, [pc, #24]	@ (80116ec <vTaskInternalSetTimeOutState+0x24>)
 80116d2:	681a      	ldr	r2, [r3, #0]
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80116d8:	4b05      	ldr	r3, [pc, #20]	@ (80116f0 <vTaskInternalSetTimeOutState+0x28>)
 80116da:	681a      	ldr	r2, [r3, #0]
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	605a      	str	r2, [r3, #4]
}
 80116e0:	bf00      	nop
 80116e2:	370c      	adds	r7, #12
 80116e4:	46bd      	mov	sp, r7
 80116e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ea:	4770      	bx	lr
 80116ec:	20005720 	.word	0x20005720
 80116f0:	2000570c 	.word	0x2000570c

080116f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80116f4:	b580      	push	{r7, lr}
 80116f6:	b088      	sub	sp, #32
 80116f8:	af00      	add	r7, sp, #0
 80116fa:	6078      	str	r0, [r7, #4]
 80116fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	2b00      	cmp	r3, #0
 8011702:	d10b      	bne.n	801171c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8011704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011708:	f383 8811 	msr	BASEPRI, r3
 801170c:	f3bf 8f6f 	isb	sy
 8011710:	f3bf 8f4f 	dsb	sy
 8011714:	613b      	str	r3, [r7, #16]
}
 8011716:	bf00      	nop
 8011718:	bf00      	nop
 801171a:	e7fd      	b.n	8011718 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801171c:	683b      	ldr	r3, [r7, #0]
 801171e:	2b00      	cmp	r3, #0
 8011720:	d10b      	bne.n	801173a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8011722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011726:	f383 8811 	msr	BASEPRI, r3
 801172a:	f3bf 8f6f 	isb	sy
 801172e:	f3bf 8f4f 	dsb	sy
 8011732:	60fb      	str	r3, [r7, #12]
}
 8011734:	bf00      	nop
 8011736:	bf00      	nop
 8011738:	e7fd      	b.n	8011736 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 801173a:	f000 fc7d 	bl	8012038 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801173e:	4b1d      	ldr	r3, [pc, #116]	@ (80117b4 <xTaskCheckForTimeOut+0xc0>)
 8011740:	681b      	ldr	r3, [r3, #0]
 8011742:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	685b      	ldr	r3, [r3, #4]
 8011748:	69ba      	ldr	r2, [r7, #24]
 801174a:	1ad3      	subs	r3, r2, r3
 801174c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801174e:	683b      	ldr	r3, [r7, #0]
 8011750:	681b      	ldr	r3, [r3, #0]
 8011752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011756:	d102      	bne.n	801175e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011758:	2300      	movs	r3, #0
 801175a:	61fb      	str	r3, [r7, #28]
 801175c:	e023      	b.n	80117a6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	681a      	ldr	r2, [r3, #0]
 8011762:	4b15      	ldr	r3, [pc, #84]	@ (80117b8 <xTaskCheckForTimeOut+0xc4>)
 8011764:	681b      	ldr	r3, [r3, #0]
 8011766:	429a      	cmp	r2, r3
 8011768:	d007      	beq.n	801177a <xTaskCheckForTimeOut+0x86>
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	685b      	ldr	r3, [r3, #4]
 801176e:	69ba      	ldr	r2, [r7, #24]
 8011770:	429a      	cmp	r2, r3
 8011772:	d302      	bcc.n	801177a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011774:	2301      	movs	r3, #1
 8011776:	61fb      	str	r3, [r7, #28]
 8011778:	e015      	b.n	80117a6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801177a:	683b      	ldr	r3, [r7, #0]
 801177c:	681b      	ldr	r3, [r3, #0]
 801177e:	697a      	ldr	r2, [r7, #20]
 8011780:	429a      	cmp	r2, r3
 8011782:	d20b      	bcs.n	801179c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011784:	683b      	ldr	r3, [r7, #0]
 8011786:	681a      	ldr	r2, [r3, #0]
 8011788:	697b      	ldr	r3, [r7, #20]
 801178a:	1ad2      	subs	r2, r2, r3
 801178c:	683b      	ldr	r3, [r7, #0]
 801178e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011790:	6878      	ldr	r0, [r7, #4]
 8011792:	f7ff ff99 	bl	80116c8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8011796:	2300      	movs	r3, #0
 8011798:	61fb      	str	r3, [r7, #28]
 801179a:	e004      	b.n	80117a6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 801179c:	683b      	ldr	r3, [r7, #0]
 801179e:	2200      	movs	r2, #0
 80117a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80117a2:	2301      	movs	r3, #1
 80117a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80117a6:	f000 fc79 	bl	801209c <vPortExitCritical>

	return xReturn;
 80117aa:	69fb      	ldr	r3, [r7, #28]
}
 80117ac:	4618      	mov	r0, r3
 80117ae:	3720      	adds	r7, #32
 80117b0:	46bd      	mov	sp, r7
 80117b2:	bd80      	pop	{r7, pc}
 80117b4:	2000570c 	.word	0x2000570c
 80117b8:	20005720 	.word	0x20005720

080117bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80117bc:	b480      	push	{r7}
 80117be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80117c0:	4b03      	ldr	r3, [pc, #12]	@ (80117d0 <vTaskMissedYield+0x14>)
 80117c2:	2201      	movs	r2, #1
 80117c4:	601a      	str	r2, [r3, #0]
}
 80117c6:	bf00      	nop
 80117c8:	46bd      	mov	sp, r7
 80117ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ce:	4770      	bx	lr
 80117d0:	2000571c 	.word	0x2000571c

080117d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80117d4:	b580      	push	{r7, lr}
 80117d6:	b082      	sub	sp, #8
 80117d8:	af00      	add	r7, sp, #0
 80117da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80117dc:	f000 f852 	bl	8011884 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80117e0:	4b06      	ldr	r3, [pc, #24]	@ (80117fc <prvIdleTask+0x28>)
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	2b01      	cmp	r3, #1
 80117e6:	d9f9      	bls.n	80117dc <prvIdleTask+0x8>
			{
				taskYIELD();
 80117e8:	4b05      	ldr	r3, [pc, #20]	@ (8011800 <prvIdleTask+0x2c>)
 80117ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80117ee:	601a      	str	r2, [r3, #0]
 80117f0:	f3bf 8f4f 	dsb	sy
 80117f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80117f8:	e7f0      	b.n	80117dc <prvIdleTask+0x8>
 80117fa:	bf00      	nop
 80117fc:	2000560c 	.word	0x2000560c
 8011800:	e000ed04 	.word	0xe000ed04

08011804 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011804:	b580      	push	{r7, lr}
 8011806:	b082      	sub	sp, #8
 8011808:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801180a:	2300      	movs	r3, #0
 801180c:	607b      	str	r3, [r7, #4]
 801180e:	e00c      	b.n	801182a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011810:	687a      	ldr	r2, [r7, #4]
 8011812:	4613      	mov	r3, r2
 8011814:	009b      	lsls	r3, r3, #2
 8011816:	4413      	add	r3, r2
 8011818:	009b      	lsls	r3, r3, #2
 801181a:	4a12      	ldr	r2, [pc, #72]	@ (8011864 <prvInitialiseTaskLists+0x60>)
 801181c:	4413      	add	r3, r2
 801181e:	4618      	mov	r0, r3
 8011820:	f7fe fa7e 	bl	800fd20 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	3301      	adds	r3, #1
 8011828:	607b      	str	r3, [r7, #4]
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	2b06      	cmp	r3, #6
 801182e:	d9ef      	bls.n	8011810 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011830:	480d      	ldr	r0, [pc, #52]	@ (8011868 <prvInitialiseTaskLists+0x64>)
 8011832:	f7fe fa75 	bl	800fd20 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011836:	480d      	ldr	r0, [pc, #52]	@ (801186c <prvInitialiseTaskLists+0x68>)
 8011838:	f7fe fa72 	bl	800fd20 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801183c:	480c      	ldr	r0, [pc, #48]	@ (8011870 <prvInitialiseTaskLists+0x6c>)
 801183e:	f7fe fa6f 	bl	800fd20 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011842:	480c      	ldr	r0, [pc, #48]	@ (8011874 <prvInitialiseTaskLists+0x70>)
 8011844:	f7fe fa6c 	bl	800fd20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011848:	480b      	ldr	r0, [pc, #44]	@ (8011878 <prvInitialiseTaskLists+0x74>)
 801184a:	f7fe fa69 	bl	800fd20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801184e:	4b0b      	ldr	r3, [pc, #44]	@ (801187c <prvInitialiseTaskLists+0x78>)
 8011850:	4a05      	ldr	r2, [pc, #20]	@ (8011868 <prvInitialiseTaskLists+0x64>)
 8011852:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011854:	4b0a      	ldr	r3, [pc, #40]	@ (8011880 <prvInitialiseTaskLists+0x7c>)
 8011856:	4a05      	ldr	r2, [pc, #20]	@ (801186c <prvInitialiseTaskLists+0x68>)
 8011858:	601a      	str	r2, [r3, #0]
}
 801185a:	bf00      	nop
 801185c:	3708      	adds	r7, #8
 801185e:	46bd      	mov	sp, r7
 8011860:	bd80      	pop	{r7, pc}
 8011862:	bf00      	nop
 8011864:	2000560c 	.word	0x2000560c
 8011868:	20005698 	.word	0x20005698
 801186c:	200056ac 	.word	0x200056ac
 8011870:	200056c8 	.word	0x200056c8
 8011874:	200056dc 	.word	0x200056dc
 8011878:	200056f4 	.word	0x200056f4
 801187c:	200056c0 	.word	0x200056c0
 8011880:	200056c4 	.word	0x200056c4

08011884 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011884:	b580      	push	{r7, lr}
 8011886:	b082      	sub	sp, #8
 8011888:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801188a:	e019      	b.n	80118c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801188c:	f000 fbd4 	bl	8012038 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011890:	4b10      	ldr	r3, [pc, #64]	@ (80118d4 <prvCheckTasksWaitingTermination+0x50>)
 8011892:	68db      	ldr	r3, [r3, #12]
 8011894:	68db      	ldr	r3, [r3, #12]
 8011896:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	3304      	adds	r3, #4
 801189c:	4618      	mov	r0, r3
 801189e:	f7fe fac9 	bl	800fe34 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80118a2:	4b0d      	ldr	r3, [pc, #52]	@ (80118d8 <prvCheckTasksWaitingTermination+0x54>)
 80118a4:	681b      	ldr	r3, [r3, #0]
 80118a6:	3b01      	subs	r3, #1
 80118a8:	4a0b      	ldr	r2, [pc, #44]	@ (80118d8 <prvCheckTasksWaitingTermination+0x54>)
 80118aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80118ac:	4b0b      	ldr	r3, [pc, #44]	@ (80118dc <prvCheckTasksWaitingTermination+0x58>)
 80118ae:	681b      	ldr	r3, [r3, #0]
 80118b0:	3b01      	subs	r3, #1
 80118b2:	4a0a      	ldr	r2, [pc, #40]	@ (80118dc <prvCheckTasksWaitingTermination+0x58>)
 80118b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80118b6:	f000 fbf1 	bl	801209c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80118ba:	6878      	ldr	r0, [r7, #4]
 80118bc:	f000 f810 	bl	80118e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80118c0:	4b06      	ldr	r3, [pc, #24]	@ (80118dc <prvCheckTasksWaitingTermination+0x58>)
 80118c2:	681b      	ldr	r3, [r3, #0]
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	d1e1      	bne.n	801188c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80118c8:	bf00      	nop
 80118ca:	bf00      	nop
 80118cc:	3708      	adds	r7, #8
 80118ce:	46bd      	mov	sp, r7
 80118d0:	bd80      	pop	{r7, pc}
 80118d2:	bf00      	nop
 80118d4:	200056dc 	.word	0x200056dc
 80118d8:	20005708 	.word	0x20005708
 80118dc:	200056f0 	.word	0x200056f0

080118e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80118e0:	b580      	push	{r7, lr}
 80118e2:	b084      	sub	sp, #16
 80118e4:	af00      	add	r7, sp, #0
 80118e6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	334c      	adds	r3, #76	@ 0x4c
 80118ec:	4618      	mov	r0, r3
 80118ee:	f00c fdb7 	bl	801e460 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	d108      	bne.n	801190e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011900:	4618      	mov	r0, r3
 8011902:	f000 fd89 	bl	8012418 <vPortFree>
				vPortFree( pxTCB );
 8011906:	6878      	ldr	r0, [r7, #4]
 8011908:	f000 fd86 	bl	8012418 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801190c:	e019      	b.n	8011942 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8011914:	2b01      	cmp	r3, #1
 8011916:	d103      	bne.n	8011920 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8011918:	6878      	ldr	r0, [r7, #4]
 801191a:	f000 fd7d 	bl	8012418 <vPortFree>
	}
 801191e:	e010      	b.n	8011942 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8011926:	2b02      	cmp	r3, #2
 8011928:	d00b      	beq.n	8011942 <prvDeleteTCB+0x62>
	__asm volatile
 801192a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801192e:	f383 8811 	msr	BASEPRI, r3
 8011932:	f3bf 8f6f 	isb	sy
 8011936:	f3bf 8f4f 	dsb	sy
 801193a:	60fb      	str	r3, [r7, #12]
}
 801193c:	bf00      	nop
 801193e:	bf00      	nop
 8011940:	e7fd      	b.n	801193e <prvDeleteTCB+0x5e>
	}
 8011942:	bf00      	nop
 8011944:	3710      	adds	r7, #16
 8011946:	46bd      	mov	sp, r7
 8011948:	bd80      	pop	{r7, pc}
	...

0801194c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801194c:	b480      	push	{r7}
 801194e:	b083      	sub	sp, #12
 8011950:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011952:	4b0c      	ldr	r3, [pc, #48]	@ (8011984 <prvResetNextTaskUnblockTime+0x38>)
 8011954:	681b      	ldr	r3, [r3, #0]
 8011956:	681b      	ldr	r3, [r3, #0]
 8011958:	2b00      	cmp	r3, #0
 801195a:	d104      	bne.n	8011966 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801195c:	4b0a      	ldr	r3, [pc, #40]	@ (8011988 <prvResetNextTaskUnblockTime+0x3c>)
 801195e:	f04f 32ff 	mov.w	r2, #4294967295
 8011962:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011964:	e008      	b.n	8011978 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011966:	4b07      	ldr	r3, [pc, #28]	@ (8011984 <prvResetNextTaskUnblockTime+0x38>)
 8011968:	681b      	ldr	r3, [r3, #0]
 801196a:	68db      	ldr	r3, [r3, #12]
 801196c:	68db      	ldr	r3, [r3, #12]
 801196e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	685b      	ldr	r3, [r3, #4]
 8011974:	4a04      	ldr	r2, [pc, #16]	@ (8011988 <prvResetNextTaskUnblockTime+0x3c>)
 8011976:	6013      	str	r3, [r2, #0]
}
 8011978:	bf00      	nop
 801197a:	370c      	adds	r7, #12
 801197c:	46bd      	mov	sp, r7
 801197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011982:	4770      	bx	lr
 8011984:	200056c0 	.word	0x200056c0
 8011988:	20005728 	.word	0x20005728

0801198c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801198c:	b480      	push	{r7}
 801198e:	b083      	sub	sp, #12
 8011990:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011992:	4b0b      	ldr	r3, [pc, #44]	@ (80119c0 <xTaskGetSchedulerState+0x34>)
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	2b00      	cmp	r3, #0
 8011998:	d102      	bne.n	80119a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801199a:	2301      	movs	r3, #1
 801199c:	607b      	str	r3, [r7, #4]
 801199e:	e008      	b.n	80119b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80119a0:	4b08      	ldr	r3, [pc, #32]	@ (80119c4 <xTaskGetSchedulerState+0x38>)
 80119a2:	681b      	ldr	r3, [r3, #0]
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d102      	bne.n	80119ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80119a8:	2302      	movs	r3, #2
 80119aa:	607b      	str	r3, [r7, #4]
 80119ac:	e001      	b.n	80119b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80119ae:	2300      	movs	r3, #0
 80119b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80119b2:	687b      	ldr	r3, [r7, #4]
	}
 80119b4:	4618      	mov	r0, r3
 80119b6:	370c      	adds	r7, #12
 80119b8:	46bd      	mov	sp, r7
 80119ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119be:	4770      	bx	lr
 80119c0:	20005714 	.word	0x20005714
 80119c4:	20005730 	.word	0x20005730

080119c8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80119c8:	b580      	push	{r7, lr}
 80119ca:	b084      	sub	sp, #16
 80119cc:	af00      	add	r7, sp, #0
 80119ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80119d4:	2300      	movs	r3, #0
 80119d6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	2b00      	cmp	r3, #0
 80119dc:	d05e      	beq.n	8011a9c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80119de:	68bb      	ldr	r3, [r7, #8]
 80119e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80119e2:	4b31      	ldr	r3, [pc, #196]	@ (8011aa8 <xTaskPriorityInherit+0xe0>)
 80119e4:	681b      	ldr	r3, [r3, #0]
 80119e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80119e8:	429a      	cmp	r2, r3
 80119ea:	d24e      	bcs.n	8011a8a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80119ec:	68bb      	ldr	r3, [r7, #8]
 80119ee:	699b      	ldr	r3, [r3, #24]
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	db06      	blt.n	8011a02 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80119f4:	4b2c      	ldr	r3, [pc, #176]	@ (8011aa8 <xTaskPriorityInherit+0xe0>)
 80119f6:	681b      	ldr	r3, [r3, #0]
 80119f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80119fa:	f1c3 0207 	rsb	r2, r3, #7
 80119fe:	68bb      	ldr	r3, [r7, #8]
 8011a00:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8011a02:	68bb      	ldr	r3, [r7, #8]
 8011a04:	6959      	ldr	r1, [r3, #20]
 8011a06:	68bb      	ldr	r3, [r7, #8]
 8011a08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011a0a:	4613      	mov	r3, r2
 8011a0c:	009b      	lsls	r3, r3, #2
 8011a0e:	4413      	add	r3, r2
 8011a10:	009b      	lsls	r3, r3, #2
 8011a12:	4a26      	ldr	r2, [pc, #152]	@ (8011aac <xTaskPriorityInherit+0xe4>)
 8011a14:	4413      	add	r3, r2
 8011a16:	4299      	cmp	r1, r3
 8011a18:	d12f      	bne.n	8011a7a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011a1a:	68bb      	ldr	r3, [r7, #8]
 8011a1c:	3304      	adds	r3, #4
 8011a1e:	4618      	mov	r0, r3
 8011a20:	f7fe fa08 	bl	800fe34 <uxListRemove>
 8011a24:	4603      	mov	r3, r0
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d10a      	bne.n	8011a40 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8011a2a:	68bb      	ldr	r3, [r7, #8]
 8011a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011a2e:	2201      	movs	r2, #1
 8011a30:	fa02 f303 	lsl.w	r3, r2, r3
 8011a34:	43da      	mvns	r2, r3
 8011a36:	4b1e      	ldr	r3, [pc, #120]	@ (8011ab0 <xTaskPriorityInherit+0xe8>)
 8011a38:	681b      	ldr	r3, [r3, #0]
 8011a3a:	4013      	ands	r3, r2
 8011a3c:	4a1c      	ldr	r2, [pc, #112]	@ (8011ab0 <xTaskPriorityInherit+0xe8>)
 8011a3e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011a40:	4b19      	ldr	r3, [pc, #100]	@ (8011aa8 <xTaskPriorityInherit+0xe0>)
 8011a42:	681b      	ldr	r3, [r3, #0]
 8011a44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011a46:	68bb      	ldr	r3, [r7, #8]
 8011a48:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8011a4a:	68bb      	ldr	r3, [r7, #8]
 8011a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011a4e:	2201      	movs	r2, #1
 8011a50:	409a      	lsls	r2, r3
 8011a52:	4b17      	ldr	r3, [pc, #92]	@ (8011ab0 <xTaskPriorityInherit+0xe8>)
 8011a54:	681b      	ldr	r3, [r3, #0]
 8011a56:	4313      	orrs	r3, r2
 8011a58:	4a15      	ldr	r2, [pc, #84]	@ (8011ab0 <xTaskPriorityInherit+0xe8>)
 8011a5a:	6013      	str	r3, [r2, #0]
 8011a5c:	68bb      	ldr	r3, [r7, #8]
 8011a5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011a60:	4613      	mov	r3, r2
 8011a62:	009b      	lsls	r3, r3, #2
 8011a64:	4413      	add	r3, r2
 8011a66:	009b      	lsls	r3, r3, #2
 8011a68:	4a10      	ldr	r2, [pc, #64]	@ (8011aac <xTaskPriorityInherit+0xe4>)
 8011a6a:	441a      	add	r2, r3
 8011a6c:	68bb      	ldr	r3, [r7, #8]
 8011a6e:	3304      	adds	r3, #4
 8011a70:	4619      	mov	r1, r3
 8011a72:	4610      	mov	r0, r2
 8011a74:	f7fe f981 	bl	800fd7a <vListInsertEnd>
 8011a78:	e004      	b.n	8011a84 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011a7a:	4b0b      	ldr	r3, [pc, #44]	@ (8011aa8 <xTaskPriorityInherit+0xe0>)
 8011a7c:	681b      	ldr	r3, [r3, #0]
 8011a7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011a80:	68bb      	ldr	r3, [r7, #8]
 8011a82:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8011a84:	2301      	movs	r3, #1
 8011a86:	60fb      	str	r3, [r7, #12]
 8011a88:	e008      	b.n	8011a9c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8011a8a:	68bb      	ldr	r3, [r7, #8]
 8011a8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011a8e:	4b06      	ldr	r3, [pc, #24]	@ (8011aa8 <xTaskPriorityInherit+0xe0>)
 8011a90:	681b      	ldr	r3, [r3, #0]
 8011a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011a94:	429a      	cmp	r2, r3
 8011a96:	d201      	bcs.n	8011a9c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8011a98:	2301      	movs	r3, #1
 8011a9a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011a9c:	68fb      	ldr	r3, [r7, #12]
	}
 8011a9e:	4618      	mov	r0, r3
 8011aa0:	3710      	adds	r7, #16
 8011aa2:	46bd      	mov	sp, r7
 8011aa4:	bd80      	pop	{r7, pc}
 8011aa6:	bf00      	nop
 8011aa8:	20005608 	.word	0x20005608
 8011aac:	2000560c 	.word	0x2000560c
 8011ab0:	20005710 	.word	0x20005710

08011ab4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011ab4:	b580      	push	{r7, lr}
 8011ab6:	b086      	sub	sp, #24
 8011ab8:	af00      	add	r7, sp, #0
 8011aba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011ac0:	2300      	movs	r3, #0
 8011ac2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	d070      	beq.n	8011bac <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8011aca:	4b3b      	ldr	r3, [pc, #236]	@ (8011bb8 <xTaskPriorityDisinherit+0x104>)
 8011acc:	681b      	ldr	r3, [r3, #0]
 8011ace:	693a      	ldr	r2, [r7, #16]
 8011ad0:	429a      	cmp	r2, r3
 8011ad2:	d00b      	beq.n	8011aec <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8011ad4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011ad8:	f383 8811 	msr	BASEPRI, r3
 8011adc:	f3bf 8f6f 	isb	sy
 8011ae0:	f3bf 8f4f 	dsb	sy
 8011ae4:	60fb      	str	r3, [r7, #12]
}
 8011ae6:	bf00      	nop
 8011ae8:	bf00      	nop
 8011aea:	e7fd      	b.n	8011ae8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8011aec:	693b      	ldr	r3, [r7, #16]
 8011aee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	d10b      	bne.n	8011b0c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8011af4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011af8:	f383 8811 	msr	BASEPRI, r3
 8011afc:	f3bf 8f6f 	isb	sy
 8011b00:	f3bf 8f4f 	dsb	sy
 8011b04:	60bb      	str	r3, [r7, #8]
}
 8011b06:	bf00      	nop
 8011b08:	bf00      	nop
 8011b0a:	e7fd      	b.n	8011b08 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8011b0c:	693b      	ldr	r3, [r7, #16]
 8011b0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011b10:	1e5a      	subs	r2, r3, #1
 8011b12:	693b      	ldr	r3, [r7, #16]
 8011b14:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011b16:	693b      	ldr	r3, [r7, #16]
 8011b18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011b1a:	693b      	ldr	r3, [r7, #16]
 8011b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011b1e:	429a      	cmp	r2, r3
 8011b20:	d044      	beq.n	8011bac <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011b22:	693b      	ldr	r3, [r7, #16]
 8011b24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d140      	bne.n	8011bac <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011b2a:	693b      	ldr	r3, [r7, #16]
 8011b2c:	3304      	adds	r3, #4
 8011b2e:	4618      	mov	r0, r3
 8011b30:	f7fe f980 	bl	800fe34 <uxListRemove>
 8011b34:	4603      	mov	r3, r0
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	d115      	bne.n	8011b66 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8011b3a:	693b      	ldr	r3, [r7, #16]
 8011b3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011b3e:	491f      	ldr	r1, [pc, #124]	@ (8011bbc <xTaskPriorityDisinherit+0x108>)
 8011b40:	4613      	mov	r3, r2
 8011b42:	009b      	lsls	r3, r3, #2
 8011b44:	4413      	add	r3, r2
 8011b46:	009b      	lsls	r3, r3, #2
 8011b48:	440b      	add	r3, r1
 8011b4a:	681b      	ldr	r3, [r3, #0]
 8011b4c:	2b00      	cmp	r3, #0
 8011b4e:	d10a      	bne.n	8011b66 <xTaskPriorityDisinherit+0xb2>
 8011b50:	693b      	ldr	r3, [r7, #16]
 8011b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011b54:	2201      	movs	r2, #1
 8011b56:	fa02 f303 	lsl.w	r3, r2, r3
 8011b5a:	43da      	mvns	r2, r3
 8011b5c:	4b18      	ldr	r3, [pc, #96]	@ (8011bc0 <xTaskPriorityDisinherit+0x10c>)
 8011b5e:	681b      	ldr	r3, [r3, #0]
 8011b60:	4013      	ands	r3, r2
 8011b62:	4a17      	ldr	r2, [pc, #92]	@ (8011bc0 <xTaskPriorityDisinherit+0x10c>)
 8011b64:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011b66:	693b      	ldr	r3, [r7, #16]
 8011b68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011b6a:	693b      	ldr	r3, [r7, #16]
 8011b6c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011b6e:	693b      	ldr	r3, [r7, #16]
 8011b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011b72:	f1c3 0207 	rsb	r2, r3, #7
 8011b76:	693b      	ldr	r3, [r7, #16]
 8011b78:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011b7a:	693b      	ldr	r3, [r7, #16]
 8011b7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011b7e:	2201      	movs	r2, #1
 8011b80:	409a      	lsls	r2, r3
 8011b82:	4b0f      	ldr	r3, [pc, #60]	@ (8011bc0 <xTaskPriorityDisinherit+0x10c>)
 8011b84:	681b      	ldr	r3, [r3, #0]
 8011b86:	4313      	orrs	r3, r2
 8011b88:	4a0d      	ldr	r2, [pc, #52]	@ (8011bc0 <xTaskPriorityDisinherit+0x10c>)
 8011b8a:	6013      	str	r3, [r2, #0]
 8011b8c:	693b      	ldr	r3, [r7, #16]
 8011b8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011b90:	4613      	mov	r3, r2
 8011b92:	009b      	lsls	r3, r3, #2
 8011b94:	4413      	add	r3, r2
 8011b96:	009b      	lsls	r3, r3, #2
 8011b98:	4a08      	ldr	r2, [pc, #32]	@ (8011bbc <xTaskPriorityDisinherit+0x108>)
 8011b9a:	441a      	add	r2, r3
 8011b9c:	693b      	ldr	r3, [r7, #16]
 8011b9e:	3304      	adds	r3, #4
 8011ba0:	4619      	mov	r1, r3
 8011ba2:	4610      	mov	r0, r2
 8011ba4:	f7fe f8e9 	bl	800fd7a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011ba8:	2301      	movs	r3, #1
 8011baa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011bac:	697b      	ldr	r3, [r7, #20]
	}
 8011bae:	4618      	mov	r0, r3
 8011bb0:	3718      	adds	r7, #24
 8011bb2:	46bd      	mov	sp, r7
 8011bb4:	bd80      	pop	{r7, pc}
 8011bb6:	bf00      	nop
 8011bb8:	20005608 	.word	0x20005608
 8011bbc:	2000560c 	.word	0x2000560c
 8011bc0:	20005710 	.word	0x20005710

08011bc4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8011bc4:	b580      	push	{r7, lr}
 8011bc6:	b088      	sub	sp, #32
 8011bc8:	af00      	add	r7, sp, #0
 8011bca:	6078      	str	r0, [r7, #4]
 8011bcc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8011bd2:	2301      	movs	r3, #1
 8011bd4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	d079      	beq.n	8011cd0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8011bdc:	69bb      	ldr	r3, [r7, #24]
 8011bde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d10b      	bne.n	8011bfc <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8011be4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011be8:	f383 8811 	msr	BASEPRI, r3
 8011bec:	f3bf 8f6f 	isb	sy
 8011bf0:	f3bf 8f4f 	dsb	sy
 8011bf4:	60fb      	str	r3, [r7, #12]
}
 8011bf6:	bf00      	nop
 8011bf8:	bf00      	nop
 8011bfa:	e7fd      	b.n	8011bf8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8011bfc:	69bb      	ldr	r3, [r7, #24]
 8011bfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011c00:	683a      	ldr	r2, [r7, #0]
 8011c02:	429a      	cmp	r2, r3
 8011c04:	d902      	bls.n	8011c0c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8011c06:	683b      	ldr	r3, [r7, #0]
 8011c08:	61fb      	str	r3, [r7, #28]
 8011c0a:	e002      	b.n	8011c12 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8011c0c:	69bb      	ldr	r3, [r7, #24]
 8011c0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011c10:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8011c12:	69bb      	ldr	r3, [r7, #24]
 8011c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011c16:	69fa      	ldr	r2, [r7, #28]
 8011c18:	429a      	cmp	r2, r3
 8011c1a:	d059      	beq.n	8011cd0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8011c1c:	69bb      	ldr	r3, [r7, #24]
 8011c1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011c20:	697a      	ldr	r2, [r7, #20]
 8011c22:	429a      	cmp	r2, r3
 8011c24:	d154      	bne.n	8011cd0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8011c26:	4b2c      	ldr	r3, [pc, #176]	@ (8011cd8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8011c28:	681b      	ldr	r3, [r3, #0]
 8011c2a:	69ba      	ldr	r2, [r7, #24]
 8011c2c:	429a      	cmp	r2, r3
 8011c2e:	d10b      	bne.n	8011c48 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8011c30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011c34:	f383 8811 	msr	BASEPRI, r3
 8011c38:	f3bf 8f6f 	isb	sy
 8011c3c:	f3bf 8f4f 	dsb	sy
 8011c40:	60bb      	str	r3, [r7, #8]
}
 8011c42:	bf00      	nop
 8011c44:	bf00      	nop
 8011c46:	e7fd      	b.n	8011c44 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8011c48:	69bb      	ldr	r3, [r7, #24]
 8011c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011c4c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8011c4e:	69bb      	ldr	r3, [r7, #24]
 8011c50:	69fa      	ldr	r2, [r7, #28]
 8011c52:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011c54:	69bb      	ldr	r3, [r7, #24]
 8011c56:	699b      	ldr	r3, [r3, #24]
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	db04      	blt.n	8011c66 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011c5c:	69fb      	ldr	r3, [r7, #28]
 8011c5e:	f1c3 0207 	rsb	r2, r3, #7
 8011c62:	69bb      	ldr	r3, [r7, #24]
 8011c64:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011c66:	69bb      	ldr	r3, [r7, #24]
 8011c68:	6959      	ldr	r1, [r3, #20]
 8011c6a:	693a      	ldr	r2, [r7, #16]
 8011c6c:	4613      	mov	r3, r2
 8011c6e:	009b      	lsls	r3, r3, #2
 8011c70:	4413      	add	r3, r2
 8011c72:	009b      	lsls	r3, r3, #2
 8011c74:	4a19      	ldr	r2, [pc, #100]	@ (8011cdc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8011c76:	4413      	add	r3, r2
 8011c78:	4299      	cmp	r1, r3
 8011c7a:	d129      	bne.n	8011cd0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011c7c:	69bb      	ldr	r3, [r7, #24]
 8011c7e:	3304      	adds	r3, #4
 8011c80:	4618      	mov	r0, r3
 8011c82:	f7fe f8d7 	bl	800fe34 <uxListRemove>
 8011c86:	4603      	mov	r3, r0
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d10a      	bne.n	8011ca2 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8011c8c:	69bb      	ldr	r3, [r7, #24]
 8011c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011c90:	2201      	movs	r2, #1
 8011c92:	fa02 f303 	lsl.w	r3, r2, r3
 8011c96:	43da      	mvns	r2, r3
 8011c98:	4b11      	ldr	r3, [pc, #68]	@ (8011ce0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8011c9a:	681b      	ldr	r3, [r3, #0]
 8011c9c:	4013      	ands	r3, r2
 8011c9e:	4a10      	ldr	r2, [pc, #64]	@ (8011ce0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8011ca0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8011ca2:	69bb      	ldr	r3, [r7, #24]
 8011ca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011ca6:	2201      	movs	r2, #1
 8011ca8:	409a      	lsls	r2, r3
 8011caa:	4b0d      	ldr	r3, [pc, #52]	@ (8011ce0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8011cac:	681b      	ldr	r3, [r3, #0]
 8011cae:	4313      	orrs	r3, r2
 8011cb0:	4a0b      	ldr	r2, [pc, #44]	@ (8011ce0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8011cb2:	6013      	str	r3, [r2, #0]
 8011cb4:	69bb      	ldr	r3, [r7, #24]
 8011cb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011cb8:	4613      	mov	r3, r2
 8011cba:	009b      	lsls	r3, r3, #2
 8011cbc:	4413      	add	r3, r2
 8011cbe:	009b      	lsls	r3, r3, #2
 8011cc0:	4a06      	ldr	r2, [pc, #24]	@ (8011cdc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8011cc2:	441a      	add	r2, r3
 8011cc4:	69bb      	ldr	r3, [r7, #24]
 8011cc6:	3304      	adds	r3, #4
 8011cc8:	4619      	mov	r1, r3
 8011cca:	4610      	mov	r0, r2
 8011ccc:	f7fe f855 	bl	800fd7a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011cd0:	bf00      	nop
 8011cd2:	3720      	adds	r7, #32
 8011cd4:	46bd      	mov	sp, r7
 8011cd6:	bd80      	pop	{r7, pc}
 8011cd8:	20005608 	.word	0x20005608
 8011cdc:	2000560c 	.word	0x2000560c
 8011ce0:	20005710 	.word	0x20005710

08011ce4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8011ce4:	b480      	push	{r7}
 8011ce6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8011ce8:	4b07      	ldr	r3, [pc, #28]	@ (8011d08 <pvTaskIncrementMutexHeldCount+0x24>)
 8011cea:	681b      	ldr	r3, [r3, #0]
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d004      	beq.n	8011cfa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8011cf0:	4b05      	ldr	r3, [pc, #20]	@ (8011d08 <pvTaskIncrementMutexHeldCount+0x24>)
 8011cf2:	681b      	ldr	r3, [r3, #0]
 8011cf4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8011cf6:	3201      	adds	r2, #1
 8011cf8:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8011cfa:	4b03      	ldr	r3, [pc, #12]	@ (8011d08 <pvTaskIncrementMutexHeldCount+0x24>)
 8011cfc:	681b      	ldr	r3, [r3, #0]
	}
 8011cfe:	4618      	mov	r0, r3
 8011d00:	46bd      	mov	sp, r7
 8011d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d06:	4770      	bx	lr
 8011d08:	20005608 	.word	0x20005608

08011d0c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011d0c:	b580      	push	{r7, lr}
 8011d0e:	b084      	sub	sp, #16
 8011d10:	af00      	add	r7, sp, #0
 8011d12:	6078      	str	r0, [r7, #4]
 8011d14:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011d16:	4b29      	ldr	r3, [pc, #164]	@ (8011dbc <prvAddCurrentTaskToDelayedList+0xb0>)
 8011d18:	681b      	ldr	r3, [r3, #0]
 8011d1a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011d1c:	4b28      	ldr	r3, [pc, #160]	@ (8011dc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011d1e:	681b      	ldr	r3, [r3, #0]
 8011d20:	3304      	adds	r3, #4
 8011d22:	4618      	mov	r0, r3
 8011d24:	f7fe f886 	bl	800fe34 <uxListRemove>
 8011d28:	4603      	mov	r3, r0
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	d10b      	bne.n	8011d46 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8011d2e:	4b24      	ldr	r3, [pc, #144]	@ (8011dc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011d30:	681b      	ldr	r3, [r3, #0]
 8011d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011d34:	2201      	movs	r2, #1
 8011d36:	fa02 f303 	lsl.w	r3, r2, r3
 8011d3a:	43da      	mvns	r2, r3
 8011d3c:	4b21      	ldr	r3, [pc, #132]	@ (8011dc4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	4013      	ands	r3, r2
 8011d42:	4a20      	ldr	r2, [pc, #128]	@ (8011dc4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8011d44:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d4c:	d10a      	bne.n	8011d64 <prvAddCurrentTaskToDelayedList+0x58>
 8011d4e:	683b      	ldr	r3, [r7, #0]
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d007      	beq.n	8011d64 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011d54:	4b1a      	ldr	r3, [pc, #104]	@ (8011dc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011d56:	681b      	ldr	r3, [r3, #0]
 8011d58:	3304      	adds	r3, #4
 8011d5a:	4619      	mov	r1, r3
 8011d5c:	481a      	ldr	r0, [pc, #104]	@ (8011dc8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8011d5e:	f7fe f80c 	bl	800fd7a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011d62:	e026      	b.n	8011db2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011d64:	68fa      	ldr	r2, [r7, #12]
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	4413      	add	r3, r2
 8011d6a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011d6c:	4b14      	ldr	r3, [pc, #80]	@ (8011dc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011d6e:	681b      	ldr	r3, [r3, #0]
 8011d70:	68ba      	ldr	r2, [r7, #8]
 8011d72:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011d74:	68ba      	ldr	r2, [r7, #8]
 8011d76:	68fb      	ldr	r3, [r7, #12]
 8011d78:	429a      	cmp	r2, r3
 8011d7a:	d209      	bcs.n	8011d90 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011d7c:	4b13      	ldr	r3, [pc, #76]	@ (8011dcc <prvAddCurrentTaskToDelayedList+0xc0>)
 8011d7e:	681a      	ldr	r2, [r3, #0]
 8011d80:	4b0f      	ldr	r3, [pc, #60]	@ (8011dc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011d82:	681b      	ldr	r3, [r3, #0]
 8011d84:	3304      	adds	r3, #4
 8011d86:	4619      	mov	r1, r3
 8011d88:	4610      	mov	r0, r2
 8011d8a:	f7fe f81a 	bl	800fdc2 <vListInsert>
}
 8011d8e:	e010      	b.n	8011db2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011d90:	4b0f      	ldr	r3, [pc, #60]	@ (8011dd0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8011d92:	681a      	ldr	r2, [r3, #0]
 8011d94:	4b0a      	ldr	r3, [pc, #40]	@ (8011dc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011d96:	681b      	ldr	r3, [r3, #0]
 8011d98:	3304      	adds	r3, #4
 8011d9a:	4619      	mov	r1, r3
 8011d9c:	4610      	mov	r0, r2
 8011d9e:	f7fe f810 	bl	800fdc2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011da2:	4b0c      	ldr	r3, [pc, #48]	@ (8011dd4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8011da4:	681b      	ldr	r3, [r3, #0]
 8011da6:	68ba      	ldr	r2, [r7, #8]
 8011da8:	429a      	cmp	r2, r3
 8011daa:	d202      	bcs.n	8011db2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8011dac:	4a09      	ldr	r2, [pc, #36]	@ (8011dd4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8011dae:	68bb      	ldr	r3, [r7, #8]
 8011db0:	6013      	str	r3, [r2, #0]
}
 8011db2:	bf00      	nop
 8011db4:	3710      	adds	r7, #16
 8011db6:	46bd      	mov	sp, r7
 8011db8:	bd80      	pop	{r7, pc}
 8011dba:	bf00      	nop
 8011dbc:	2000570c 	.word	0x2000570c
 8011dc0:	20005608 	.word	0x20005608
 8011dc4:	20005710 	.word	0x20005710
 8011dc8:	200056f4 	.word	0x200056f4
 8011dcc:	200056c4 	.word	0x200056c4
 8011dd0:	200056c0 	.word	0x200056c0
 8011dd4:	20005728 	.word	0x20005728

08011dd8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011dd8:	b480      	push	{r7}
 8011dda:	b085      	sub	sp, #20
 8011ddc:	af00      	add	r7, sp, #0
 8011dde:	60f8      	str	r0, [r7, #12]
 8011de0:	60b9      	str	r1, [r7, #8]
 8011de2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011de4:	68fb      	ldr	r3, [r7, #12]
 8011de6:	3b04      	subs	r3, #4
 8011de8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011dea:	68fb      	ldr	r3, [r7, #12]
 8011dec:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8011df0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011df2:	68fb      	ldr	r3, [r7, #12]
 8011df4:	3b04      	subs	r3, #4
 8011df6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011df8:	68bb      	ldr	r3, [r7, #8]
 8011dfa:	f023 0201 	bic.w	r2, r3, #1
 8011dfe:	68fb      	ldr	r3, [r7, #12]
 8011e00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011e02:	68fb      	ldr	r3, [r7, #12]
 8011e04:	3b04      	subs	r3, #4
 8011e06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011e08:	4a0c      	ldr	r2, [pc, #48]	@ (8011e3c <pxPortInitialiseStack+0x64>)
 8011e0a:	68fb      	ldr	r3, [r7, #12]
 8011e0c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8011e0e:	68fb      	ldr	r3, [r7, #12]
 8011e10:	3b14      	subs	r3, #20
 8011e12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011e14:	687a      	ldr	r2, [r7, #4]
 8011e16:	68fb      	ldr	r3, [r7, #12]
 8011e18:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8011e1a:	68fb      	ldr	r3, [r7, #12]
 8011e1c:	3b04      	subs	r3, #4
 8011e1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011e20:	68fb      	ldr	r3, [r7, #12]
 8011e22:	f06f 0202 	mvn.w	r2, #2
 8011e26:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011e28:	68fb      	ldr	r3, [r7, #12]
 8011e2a:	3b20      	subs	r3, #32
 8011e2c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011e2e:	68fb      	ldr	r3, [r7, #12]
}
 8011e30:	4618      	mov	r0, r3
 8011e32:	3714      	adds	r7, #20
 8011e34:	46bd      	mov	sp, r7
 8011e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e3a:	4770      	bx	lr
 8011e3c:	08011e41 	.word	0x08011e41

08011e40 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011e40:	b480      	push	{r7}
 8011e42:	b085      	sub	sp, #20
 8011e44:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8011e46:	2300      	movs	r3, #0
 8011e48:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011e4a:	4b13      	ldr	r3, [pc, #76]	@ (8011e98 <prvTaskExitError+0x58>)
 8011e4c:	681b      	ldr	r3, [r3, #0]
 8011e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e52:	d00b      	beq.n	8011e6c <prvTaskExitError+0x2c>
	__asm volatile
 8011e54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e58:	f383 8811 	msr	BASEPRI, r3
 8011e5c:	f3bf 8f6f 	isb	sy
 8011e60:	f3bf 8f4f 	dsb	sy
 8011e64:	60fb      	str	r3, [r7, #12]
}
 8011e66:	bf00      	nop
 8011e68:	bf00      	nop
 8011e6a:	e7fd      	b.n	8011e68 <prvTaskExitError+0x28>
	__asm volatile
 8011e6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e70:	f383 8811 	msr	BASEPRI, r3
 8011e74:	f3bf 8f6f 	isb	sy
 8011e78:	f3bf 8f4f 	dsb	sy
 8011e7c:	60bb      	str	r3, [r7, #8]
}
 8011e7e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011e80:	bf00      	nop
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d0fc      	beq.n	8011e82 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011e88:	bf00      	nop
 8011e8a:	bf00      	nop
 8011e8c:	3714      	adds	r7, #20
 8011e8e:	46bd      	mov	sp, r7
 8011e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e94:	4770      	bx	lr
 8011e96:	bf00      	nop
 8011e98:	200000a0 	.word	0x200000a0
 8011e9c:	00000000 	.word	0x00000000

08011ea0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011ea0:	4b07      	ldr	r3, [pc, #28]	@ (8011ec0 <pxCurrentTCBConst2>)
 8011ea2:	6819      	ldr	r1, [r3, #0]
 8011ea4:	6808      	ldr	r0, [r1, #0]
 8011ea6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011eaa:	f380 8809 	msr	PSP, r0
 8011eae:	f3bf 8f6f 	isb	sy
 8011eb2:	f04f 0000 	mov.w	r0, #0
 8011eb6:	f380 8811 	msr	BASEPRI, r0
 8011eba:	4770      	bx	lr
 8011ebc:	f3af 8000 	nop.w

08011ec0 <pxCurrentTCBConst2>:
 8011ec0:	20005608 	.word	0x20005608
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011ec4:	bf00      	nop
 8011ec6:	bf00      	nop

08011ec8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011ec8:	4808      	ldr	r0, [pc, #32]	@ (8011eec <prvPortStartFirstTask+0x24>)
 8011eca:	6800      	ldr	r0, [r0, #0]
 8011ecc:	6800      	ldr	r0, [r0, #0]
 8011ece:	f380 8808 	msr	MSP, r0
 8011ed2:	f04f 0000 	mov.w	r0, #0
 8011ed6:	f380 8814 	msr	CONTROL, r0
 8011eda:	b662      	cpsie	i
 8011edc:	b661      	cpsie	f
 8011ede:	f3bf 8f4f 	dsb	sy
 8011ee2:	f3bf 8f6f 	isb	sy
 8011ee6:	df00      	svc	0
 8011ee8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8011eea:	bf00      	nop
 8011eec:	e000ed08 	.word	0xe000ed08

08011ef0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011ef0:	b580      	push	{r7, lr}
 8011ef2:	b086      	sub	sp, #24
 8011ef4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8011ef6:	4b47      	ldr	r3, [pc, #284]	@ (8012014 <xPortStartScheduler+0x124>)
 8011ef8:	681b      	ldr	r3, [r3, #0]
 8011efa:	4a47      	ldr	r2, [pc, #284]	@ (8012018 <xPortStartScheduler+0x128>)
 8011efc:	4293      	cmp	r3, r2
 8011efe:	d10b      	bne.n	8011f18 <xPortStartScheduler+0x28>
	__asm volatile
 8011f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011f04:	f383 8811 	msr	BASEPRI, r3
 8011f08:	f3bf 8f6f 	isb	sy
 8011f0c:	f3bf 8f4f 	dsb	sy
 8011f10:	60fb      	str	r3, [r7, #12]
}
 8011f12:	bf00      	nop
 8011f14:	bf00      	nop
 8011f16:	e7fd      	b.n	8011f14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8011f18:	4b3e      	ldr	r3, [pc, #248]	@ (8012014 <xPortStartScheduler+0x124>)
 8011f1a:	681b      	ldr	r3, [r3, #0]
 8011f1c:	4a3f      	ldr	r2, [pc, #252]	@ (801201c <xPortStartScheduler+0x12c>)
 8011f1e:	4293      	cmp	r3, r2
 8011f20:	d10b      	bne.n	8011f3a <xPortStartScheduler+0x4a>
	__asm volatile
 8011f22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011f26:	f383 8811 	msr	BASEPRI, r3
 8011f2a:	f3bf 8f6f 	isb	sy
 8011f2e:	f3bf 8f4f 	dsb	sy
 8011f32:	613b      	str	r3, [r7, #16]
}
 8011f34:	bf00      	nop
 8011f36:	bf00      	nop
 8011f38:	e7fd      	b.n	8011f36 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011f3a:	4b39      	ldr	r3, [pc, #228]	@ (8012020 <xPortStartScheduler+0x130>)
 8011f3c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8011f3e:	697b      	ldr	r3, [r7, #20]
 8011f40:	781b      	ldrb	r3, [r3, #0]
 8011f42:	b2db      	uxtb	r3, r3
 8011f44:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011f46:	697b      	ldr	r3, [r7, #20]
 8011f48:	22ff      	movs	r2, #255	@ 0xff
 8011f4a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011f4c:	697b      	ldr	r3, [r7, #20]
 8011f4e:	781b      	ldrb	r3, [r3, #0]
 8011f50:	b2db      	uxtb	r3, r3
 8011f52:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011f54:	78fb      	ldrb	r3, [r7, #3]
 8011f56:	b2db      	uxtb	r3, r3
 8011f58:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8011f5c:	b2da      	uxtb	r2, r3
 8011f5e:	4b31      	ldr	r3, [pc, #196]	@ (8012024 <xPortStartScheduler+0x134>)
 8011f60:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8011f62:	4b31      	ldr	r3, [pc, #196]	@ (8012028 <xPortStartScheduler+0x138>)
 8011f64:	2207      	movs	r2, #7
 8011f66:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011f68:	e009      	b.n	8011f7e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8011f6a:	4b2f      	ldr	r3, [pc, #188]	@ (8012028 <xPortStartScheduler+0x138>)
 8011f6c:	681b      	ldr	r3, [r3, #0]
 8011f6e:	3b01      	subs	r3, #1
 8011f70:	4a2d      	ldr	r2, [pc, #180]	@ (8012028 <xPortStartScheduler+0x138>)
 8011f72:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011f74:	78fb      	ldrb	r3, [r7, #3]
 8011f76:	b2db      	uxtb	r3, r3
 8011f78:	005b      	lsls	r3, r3, #1
 8011f7a:	b2db      	uxtb	r3, r3
 8011f7c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011f7e:	78fb      	ldrb	r3, [r7, #3]
 8011f80:	b2db      	uxtb	r3, r3
 8011f82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011f86:	2b80      	cmp	r3, #128	@ 0x80
 8011f88:	d0ef      	beq.n	8011f6a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011f8a:	4b27      	ldr	r3, [pc, #156]	@ (8012028 <xPortStartScheduler+0x138>)
 8011f8c:	681b      	ldr	r3, [r3, #0]
 8011f8e:	f1c3 0307 	rsb	r3, r3, #7
 8011f92:	2b04      	cmp	r3, #4
 8011f94:	d00b      	beq.n	8011fae <xPortStartScheduler+0xbe>
	__asm volatile
 8011f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011f9a:	f383 8811 	msr	BASEPRI, r3
 8011f9e:	f3bf 8f6f 	isb	sy
 8011fa2:	f3bf 8f4f 	dsb	sy
 8011fa6:	60bb      	str	r3, [r7, #8]
}
 8011fa8:	bf00      	nop
 8011faa:	bf00      	nop
 8011fac:	e7fd      	b.n	8011faa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8011fae:	4b1e      	ldr	r3, [pc, #120]	@ (8012028 <xPortStartScheduler+0x138>)
 8011fb0:	681b      	ldr	r3, [r3, #0]
 8011fb2:	021b      	lsls	r3, r3, #8
 8011fb4:	4a1c      	ldr	r2, [pc, #112]	@ (8012028 <xPortStartScheduler+0x138>)
 8011fb6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011fb8:	4b1b      	ldr	r3, [pc, #108]	@ (8012028 <xPortStartScheduler+0x138>)
 8011fba:	681b      	ldr	r3, [r3, #0]
 8011fbc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8011fc0:	4a19      	ldr	r2, [pc, #100]	@ (8012028 <xPortStartScheduler+0x138>)
 8011fc2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	b2da      	uxtb	r2, r3
 8011fc8:	697b      	ldr	r3, [r7, #20]
 8011fca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8011fcc:	4b17      	ldr	r3, [pc, #92]	@ (801202c <xPortStartScheduler+0x13c>)
 8011fce:	681b      	ldr	r3, [r3, #0]
 8011fd0:	4a16      	ldr	r2, [pc, #88]	@ (801202c <xPortStartScheduler+0x13c>)
 8011fd2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8011fd6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011fd8:	4b14      	ldr	r3, [pc, #80]	@ (801202c <xPortStartScheduler+0x13c>)
 8011fda:	681b      	ldr	r3, [r3, #0]
 8011fdc:	4a13      	ldr	r2, [pc, #76]	@ (801202c <xPortStartScheduler+0x13c>)
 8011fde:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8011fe2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8011fe4:	f000 f8da 	bl	801219c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011fe8:	4b11      	ldr	r3, [pc, #68]	@ (8012030 <xPortStartScheduler+0x140>)
 8011fea:	2200      	movs	r2, #0
 8011fec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8011fee:	f000 f8f9 	bl	80121e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8011ff2:	4b10      	ldr	r3, [pc, #64]	@ (8012034 <xPortStartScheduler+0x144>)
 8011ff4:	681b      	ldr	r3, [r3, #0]
 8011ff6:	4a0f      	ldr	r2, [pc, #60]	@ (8012034 <xPortStartScheduler+0x144>)
 8011ff8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8011ffc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8011ffe:	f7ff ff63 	bl	8011ec8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8012002:	f7ff fa73 	bl	80114ec <vTaskSwitchContext>
	prvTaskExitError();
 8012006:	f7ff ff1b 	bl	8011e40 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801200a:	2300      	movs	r3, #0
}
 801200c:	4618      	mov	r0, r3
 801200e:	3718      	adds	r7, #24
 8012010:	46bd      	mov	sp, r7
 8012012:	bd80      	pop	{r7, pc}
 8012014:	e000ed00 	.word	0xe000ed00
 8012018:	410fc271 	.word	0x410fc271
 801201c:	410fc270 	.word	0x410fc270
 8012020:	e000e400 	.word	0xe000e400
 8012024:	20005734 	.word	0x20005734
 8012028:	20005738 	.word	0x20005738
 801202c:	e000ed20 	.word	0xe000ed20
 8012030:	200000a0 	.word	0x200000a0
 8012034:	e000ef34 	.word	0xe000ef34

08012038 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012038:	b480      	push	{r7}
 801203a:	b083      	sub	sp, #12
 801203c:	af00      	add	r7, sp, #0
	__asm volatile
 801203e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012042:	f383 8811 	msr	BASEPRI, r3
 8012046:	f3bf 8f6f 	isb	sy
 801204a:	f3bf 8f4f 	dsb	sy
 801204e:	607b      	str	r3, [r7, #4]
}
 8012050:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8012052:	4b10      	ldr	r3, [pc, #64]	@ (8012094 <vPortEnterCritical+0x5c>)
 8012054:	681b      	ldr	r3, [r3, #0]
 8012056:	3301      	adds	r3, #1
 8012058:	4a0e      	ldr	r2, [pc, #56]	@ (8012094 <vPortEnterCritical+0x5c>)
 801205a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801205c:	4b0d      	ldr	r3, [pc, #52]	@ (8012094 <vPortEnterCritical+0x5c>)
 801205e:	681b      	ldr	r3, [r3, #0]
 8012060:	2b01      	cmp	r3, #1
 8012062:	d110      	bne.n	8012086 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012064:	4b0c      	ldr	r3, [pc, #48]	@ (8012098 <vPortEnterCritical+0x60>)
 8012066:	681b      	ldr	r3, [r3, #0]
 8012068:	b2db      	uxtb	r3, r3
 801206a:	2b00      	cmp	r3, #0
 801206c:	d00b      	beq.n	8012086 <vPortEnterCritical+0x4e>
	__asm volatile
 801206e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012072:	f383 8811 	msr	BASEPRI, r3
 8012076:	f3bf 8f6f 	isb	sy
 801207a:	f3bf 8f4f 	dsb	sy
 801207e:	603b      	str	r3, [r7, #0]
}
 8012080:	bf00      	nop
 8012082:	bf00      	nop
 8012084:	e7fd      	b.n	8012082 <vPortEnterCritical+0x4a>
	}
}
 8012086:	bf00      	nop
 8012088:	370c      	adds	r7, #12
 801208a:	46bd      	mov	sp, r7
 801208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012090:	4770      	bx	lr
 8012092:	bf00      	nop
 8012094:	200000a0 	.word	0x200000a0
 8012098:	e000ed04 	.word	0xe000ed04

0801209c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801209c:	b480      	push	{r7}
 801209e:	b083      	sub	sp, #12
 80120a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80120a2:	4b12      	ldr	r3, [pc, #72]	@ (80120ec <vPortExitCritical+0x50>)
 80120a4:	681b      	ldr	r3, [r3, #0]
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	d10b      	bne.n	80120c2 <vPortExitCritical+0x26>
	__asm volatile
 80120aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80120ae:	f383 8811 	msr	BASEPRI, r3
 80120b2:	f3bf 8f6f 	isb	sy
 80120b6:	f3bf 8f4f 	dsb	sy
 80120ba:	607b      	str	r3, [r7, #4]
}
 80120bc:	bf00      	nop
 80120be:	bf00      	nop
 80120c0:	e7fd      	b.n	80120be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80120c2:	4b0a      	ldr	r3, [pc, #40]	@ (80120ec <vPortExitCritical+0x50>)
 80120c4:	681b      	ldr	r3, [r3, #0]
 80120c6:	3b01      	subs	r3, #1
 80120c8:	4a08      	ldr	r2, [pc, #32]	@ (80120ec <vPortExitCritical+0x50>)
 80120ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80120cc:	4b07      	ldr	r3, [pc, #28]	@ (80120ec <vPortExitCritical+0x50>)
 80120ce:	681b      	ldr	r3, [r3, #0]
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	d105      	bne.n	80120e0 <vPortExitCritical+0x44>
 80120d4:	2300      	movs	r3, #0
 80120d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80120d8:	683b      	ldr	r3, [r7, #0]
 80120da:	f383 8811 	msr	BASEPRI, r3
}
 80120de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80120e0:	bf00      	nop
 80120e2:	370c      	adds	r7, #12
 80120e4:	46bd      	mov	sp, r7
 80120e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120ea:	4770      	bx	lr
 80120ec:	200000a0 	.word	0x200000a0

080120f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80120f0:	f3ef 8009 	mrs	r0, PSP
 80120f4:	f3bf 8f6f 	isb	sy
 80120f8:	4b15      	ldr	r3, [pc, #84]	@ (8012150 <pxCurrentTCBConst>)
 80120fa:	681a      	ldr	r2, [r3, #0]
 80120fc:	f01e 0f10 	tst.w	lr, #16
 8012100:	bf08      	it	eq
 8012102:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012106:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801210a:	6010      	str	r0, [r2, #0]
 801210c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012110:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8012114:	f380 8811 	msr	BASEPRI, r0
 8012118:	f3bf 8f4f 	dsb	sy
 801211c:	f3bf 8f6f 	isb	sy
 8012120:	f7ff f9e4 	bl	80114ec <vTaskSwitchContext>
 8012124:	f04f 0000 	mov.w	r0, #0
 8012128:	f380 8811 	msr	BASEPRI, r0
 801212c:	bc09      	pop	{r0, r3}
 801212e:	6819      	ldr	r1, [r3, #0]
 8012130:	6808      	ldr	r0, [r1, #0]
 8012132:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012136:	f01e 0f10 	tst.w	lr, #16
 801213a:	bf08      	it	eq
 801213c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012140:	f380 8809 	msr	PSP, r0
 8012144:	f3bf 8f6f 	isb	sy
 8012148:	4770      	bx	lr
 801214a:	bf00      	nop
 801214c:	f3af 8000 	nop.w

08012150 <pxCurrentTCBConst>:
 8012150:	20005608 	.word	0x20005608
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012154:	bf00      	nop
 8012156:	bf00      	nop

08012158 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012158:	b580      	push	{r7, lr}
 801215a:	b082      	sub	sp, #8
 801215c:	af00      	add	r7, sp, #0
	__asm volatile
 801215e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012162:	f383 8811 	msr	BASEPRI, r3
 8012166:	f3bf 8f6f 	isb	sy
 801216a:	f3bf 8f4f 	dsb	sy
 801216e:	607b      	str	r3, [r7, #4]
}
 8012170:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012172:	f7ff f901 	bl	8011378 <xTaskIncrementTick>
 8012176:	4603      	mov	r3, r0
 8012178:	2b00      	cmp	r3, #0
 801217a:	d003      	beq.n	8012184 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801217c:	4b06      	ldr	r3, [pc, #24]	@ (8012198 <SysTick_Handler+0x40>)
 801217e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012182:	601a      	str	r2, [r3, #0]
 8012184:	2300      	movs	r3, #0
 8012186:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012188:	683b      	ldr	r3, [r7, #0]
 801218a:	f383 8811 	msr	BASEPRI, r3
}
 801218e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012190:	bf00      	nop
 8012192:	3708      	adds	r7, #8
 8012194:	46bd      	mov	sp, r7
 8012196:	bd80      	pop	{r7, pc}
 8012198:	e000ed04 	.word	0xe000ed04

0801219c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801219c:	b480      	push	{r7}
 801219e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80121a0:	4b0b      	ldr	r3, [pc, #44]	@ (80121d0 <vPortSetupTimerInterrupt+0x34>)
 80121a2:	2200      	movs	r2, #0
 80121a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80121a6:	4b0b      	ldr	r3, [pc, #44]	@ (80121d4 <vPortSetupTimerInterrupt+0x38>)
 80121a8:	2200      	movs	r2, #0
 80121aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80121ac:	4b0a      	ldr	r3, [pc, #40]	@ (80121d8 <vPortSetupTimerInterrupt+0x3c>)
 80121ae:	681b      	ldr	r3, [r3, #0]
 80121b0:	4a0a      	ldr	r2, [pc, #40]	@ (80121dc <vPortSetupTimerInterrupt+0x40>)
 80121b2:	fba2 2303 	umull	r2, r3, r2, r3
 80121b6:	099b      	lsrs	r3, r3, #6
 80121b8:	4a09      	ldr	r2, [pc, #36]	@ (80121e0 <vPortSetupTimerInterrupt+0x44>)
 80121ba:	3b01      	subs	r3, #1
 80121bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80121be:	4b04      	ldr	r3, [pc, #16]	@ (80121d0 <vPortSetupTimerInterrupt+0x34>)
 80121c0:	2207      	movs	r2, #7
 80121c2:	601a      	str	r2, [r3, #0]
}
 80121c4:	bf00      	nop
 80121c6:	46bd      	mov	sp, r7
 80121c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121cc:	4770      	bx	lr
 80121ce:	bf00      	nop
 80121d0:	e000e010 	.word	0xe000e010
 80121d4:	e000e018 	.word	0xe000e018
 80121d8:	20000008 	.word	0x20000008
 80121dc:	10624dd3 	.word	0x10624dd3
 80121e0:	e000e014 	.word	0xe000e014

080121e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80121e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80121f4 <vPortEnableVFP+0x10>
 80121e8:	6801      	ldr	r1, [r0, #0]
 80121ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80121ee:	6001      	str	r1, [r0, #0]
 80121f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80121f2:	bf00      	nop
 80121f4:	e000ed88 	.word	0xe000ed88

080121f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80121f8:	b480      	push	{r7}
 80121fa:	b085      	sub	sp, #20
 80121fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80121fe:	f3ef 8305 	mrs	r3, IPSR
 8012202:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012204:	68fb      	ldr	r3, [r7, #12]
 8012206:	2b0f      	cmp	r3, #15
 8012208:	d915      	bls.n	8012236 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801220a:	4a18      	ldr	r2, [pc, #96]	@ (801226c <vPortValidateInterruptPriority+0x74>)
 801220c:	68fb      	ldr	r3, [r7, #12]
 801220e:	4413      	add	r3, r2
 8012210:	781b      	ldrb	r3, [r3, #0]
 8012212:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012214:	4b16      	ldr	r3, [pc, #88]	@ (8012270 <vPortValidateInterruptPriority+0x78>)
 8012216:	781b      	ldrb	r3, [r3, #0]
 8012218:	7afa      	ldrb	r2, [r7, #11]
 801221a:	429a      	cmp	r2, r3
 801221c:	d20b      	bcs.n	8012236 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801221e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012222:	f383 8811 	msr	BASEPRI, r3
 8012226:	f3bf 8f6f 	isb	sy
 801222a:	f3bf 8f4f 	dsb	sy
 801222e:	607b      	str	r3, [r7, #4]
}
 8012230:	bf00      	nop
 8012232:	bf00      	nop
 8012234:	e7fd      	b.n	8012232 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012236:	4b0f      	ldr	r3, [pc, #60]	@ (8012274 <vPortValidateInterruptPriority+0x7c>)
 8012238:	681b      	ldr	r3, [r3, #0]
 801223a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801223e:	4b0e      	ldr	r3, [pc, #56]	@ (8012278 <vPortValidateInterruptPriority+0x80>)
 8012240:	681b      	ldr	r3, [r3, #0]
 8012242:	429a      	cmp	r2, r3
 8012244:	d90b      	bls.n	801225e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8012246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801224a:	f383 8811 	msr	BASEPRI, r3
 801224e:	f3bf 8f6f 	isb	sy
 8012252:	f3bf 8f4f 	dsb	sy
 8012256:	603b      	str	r3, [r7, #0]
}
 8012258:	bf00      	nop
 801225a:	bf00      	nop
 801225c:	e7fd      	b.n	801225a <vPortValidateInterruptPriority+0x62>
	}
 801225e:	bf00      	nop
 8012260:	3714      	adds	r7, #20
 8012262:	46bd      	mov	sp, r7
 8012264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012268:	4770      	bx	lr
 801226a:	bf00      	nop
 801226c:	e000e3f0 	.word	0xe000e3f0
 8012270:	20005734 	.word	0x20005734
 8012274:	e000ed0c 	.word	0xe000ed0c
 8012278:	20005738 	.word	0x20005738

0801227c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801227c:	b580      	push	{r7, lr}
 801227e:	b08a      	sub	sp, #40	@ 0x28
 8012280:	af00      	add	r7, sp, #0
 8012282:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012284:	2300      	movs	r3, #0
 8012286:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012288:	f7fe ffa8 	bl	80111dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801228c:	4b5c      	ldr	r3, [pc, #368]	@ (8012400 <pvPortMalloc+0x184>)
 801228e:	681b      	ldr	r3, [r3, #0]
 8012290:	2b00      	cmp	r3, #0
 8012292:	d101      	bne.n	8012298 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012294:	f000 f924 	bl	80124e0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012298:	4b5a      	ldr	r3, [pc, #360]	@ (8012404 <pvPortMalloc+0x188>)
 801229a:	681a      	ldr	r2, [r3, #0]
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	4013      	ands	r3, r2
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	f040 8095 	bne.w	80123d0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d01e      	beq.n	80122ea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80122ac:	2208      	movs	r2, #8
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	4413      	add	r3, r2
 80122b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	f003 0307 	and.w	r3, r3, #7
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	d015      	beq.n	80122ea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	f023 0307 	bic.w	r3, r3, #7
 80122c4:	3308      	adds	r3, #8
 80122c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	f003 0307 	and.w	r3, r3, #7
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	d00b      	beq.n	80122ea <pvPortMalloc+0x6e>
	__asm volatile
 80122d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80122d6:	f383 8811 	msr	BASEPRI, r3
 80122da:	f3bf 8f6f 	isb	sy
 80122de:	f3bf 8f4f 	dsb	sy
 80122e2:	617b      	str	r3, [r7, #20]
}
 80122e4:	bf00      	nop
 80122e6:	bf00      	nop
 80122e8:	e7fd      	b.n	80122e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d06f      	beq.n	80123d0 <pvPortMalloc+0x154>
 80122f0:	4b45      	ldr	r3, [pc, #276]	@ (8012408 <pvPortMalloc+0x18c>)
 80122f2:	681b      	ldr	r3, [r3, #0]
 80122f4:	687a      	ldr	r2, [r7, #4]
 80122f6:	429a      	cmp	r2, r3
 80122f8:	d86a      	bhi.n	80123d0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80122fa:	4b44      	ldr	r3, [pc, #272]	@ (801240c <pvPortMalloc+0x190>)
 80122fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80122fe:	4b43      	ldr	r3, [pc, #268]	@ (801240c <pvPortMalloc+0x190>)
 8012300:	681b      	ldr	r3, [r3, #0]
 8012302:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012304:	e004      	b.n	8012310 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8012306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012308:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801230a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801230c:	681b      	ldr	r3, [r3, #0]
 801230e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012312:	685b      	ldr	r3, [r3, #4]
 8012314:	687a      	ldr	r2, [r7, #4]
 8012316:	429a      	cmp	r2, r3
 8012318:	d903      	bls.n	8012322 <pvPortMalloc+0xa6>
 801231a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801231c:	681b      	ldr	r3, [r3, #0]
 801231e:	2b00      	cmp	r3, #0
 8012320:	d1f1      	bne.n	8012306 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8012322:	4b37      	ldr	r3, [pc, #220]	@ (8012400 <pvPortMalloc+0x184>)
 8012324:	681b      	ldr	r3, [r3, #0]
 8012326:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012328:	429a      	cmp	r2, r3
 801232a:	d051      	beq.n	80123d0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801232c:	6a3b      	ldr	r3, [r7, #32]
 801232e:	681b      	ldr	r3, [r3, #0]
 8012330:	2208      	movs	r2, #8
 8012332:	4413      	add	r3, r2
 8012334:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012338:	681a      	ldr	r2, [r3, #0]
 801233a:	6a3b      	ldr	r3, [r7, #32]
 801233c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801233e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012340:	685a      	ldr	r2, [r3, #4]
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	1ad2      	subs	r2, r2, r3
 8012346:	2308      	movs	r3, #8
 8012348:	005b      	lsls	r3, r3, #1
 801234a:	429a      	cmp	r2, r3
 801234c:	d920      	bls.n	8012390 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801234e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	4413      	add	r3, r2
 8012354:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012356:	69bb      	ldr	r3, [r7, #24]
 8012358:	f003 0307 	and.w	r3, r3, #7
 801235c:	2b00      	cmp	r3, #0
 801235e:	d00b      	beq.n	8012378 <pvPortMalloc+0xfc>
	__asm volatile
 8012360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012364:	f383 8811 	msr	BASEPRI, r3
 8012368:	f3bf 8f6f 	isb	sy
 801236c:	f3bf 8f4f 	dsb	sy
 8012370:	613b      	str	r3, [r7, #16]
}
 8012372:	bf00      	nop
 8012374:	bf00      	nop
 8012376:	e7fd      	b.n	8012374 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801237a:	685a      	ldr	r2, [r3, #4]
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	1ad2      	subs	r2, r2, r3
 8012380:	69bb      	ldr	r3, [r7, #24]
 8012382:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012386:	687a      	ldr	r2, [r7, #4]
 8012388:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801238a:	69b8      	ldr	r0, [r7, #24]
 801238c:	f000 f90a 	bl	80125a4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012390:	4b1d      	ldr	r3, [pc, #116]	@ (8012408 <pvPortMalloc+0x18c>)
 8012392:	681a      	ldr	r2, [r3, #0]
 8012394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012396:	685b      	ldr	r3, [r3, #4]
 8012398:	1ad3      	subs	r3, r2, r3
 801239a:	4a1b      	ldr	r2, [pc, #108]	@ (8012408 <pvPortMalloc+0x18c>)
 801239c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801239e:	4b1a      	ldr	r3, [pc, #104]	@ (8012408 <pvPortMalloc+0x18c>)
 80123a0:	681a      	ldr	r2, [r3, #0]
 80123a2:	4b1b      	ldr	r3, [pc, #108]	@ (8012410 <pvPortMalloc+0x194>)
 80123a4:	681b      	ldr	r3, [r3, #0]
 80123a6:	429a      	cmp	r2, r3
 80123a8:	d203      	bcs.n	80123b2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80123aa:	4b17      	ldr	r3, [pc, #92]	@ (8012408 <pvPortMalloc+0x18c>)
 80123ac:	681b      	ldr	r3, [r3, #0]
 80123ae:	4a18      	ldr	r2, [pc, #96]	@ (8012410 <pvPortMalloc+0x194>)
 80123b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80123b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80123b4:	685a      	ldr	r2, [r3, #4]
 80123b6:	4b13      	ldr	r3, [pc, #76]	@ (8012404 <pvPortMalloc+0x188>)
 80123b8:	681b      	ldr	r3, [r3, #0]
 80123ba:	431a      	orrs	r2, r3
 80123bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80123be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80123c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80123c2:	2200      	movs	r2, #0
 80123c4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80123c6:	4b13      	ldr	r3, [pc, #76]	@ (8012414 <pvPortMalloc+0x198>)
 80123c8:	681b      	ldr	r3, [r3, #0]
 80123ca:	3301      	adds	r3, #1
 80123cc:	4a11      	ldr	r2, [pc, #68]	@ (8012414 <pvPortMalloc+0x198>)
 80123ce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80123d0:	f7fe ff12 	bl	80111f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80123d4:	69fb      	ldr	r3, [r7, #28]
 80123d6:	f003 0307 	and.w	r3, r3, #7
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d00b      	beq.n	80123f6 <pvPortMalloc+0x17a>
	__asm volatile
 80123de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80123e2:	f383 8811 	msr	BASEPRI, r3
 80123e6:	f3bf 8f6f 	isb	sy
 80123ea:	f3bf 8f4f 	dsb	sy
 80123ee:	60fb      	str	r3, [r7, #12]
}
 80123f0:	bf00      	nop
 80123f2:	bf00      	nop
 80123f4:	e7fd      	b.n	80123f2 <pvPortMalloc+0x176>
	return pvReturn;
 80123f6:	69fb      	ldr	r3, [r7, #28]
}
 80123f8:	4618      	mov	r0, r3
 80123fa:	3728      	adds	r7, #40	@ 0x28
 80123fc:	46bd      	mov	sp, r7
 80123fe:	bd80      	pop	{r7, pc}
 8012400:	20009344 	.word	0x20009344
 8012404:	20009358 	.word	0x20009358
 8012408:	20009348 	.word	0x20009348
 801240c:	2000933c 	.word	0x2000933c
 8012410:	2000934c 	.word	0x2000934c
 8012414:	20009350 	.word	0x20009350

08012418 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012418:	b580      	push	{r7, lr}
 801241a:	b086      	sub	sp, #24
 801241c:	af00      	add	r7, sp, #0
 801241e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	2b00      	cmp	r3, #0
 8012428:	d04f      	beq.n	80124ca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801242a:	2308      	movs	r3, #8
 801242c:	425b      	negs	r3, r3
 801242e:	697a      	ldr	r2, [r7, #20]
 8012430:	4413      	add	r3, r2
 8012432:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8012434:	697b      	ldr	r3, [r7, #20]
 8012436:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012438:	693b      	ldr	r3, [r7, #16]
 801243a:	685a      	ldr	r2, [r3, #4]
 801243c:	4b25      	ldr	r3, [pc, #148]	@ (80124d4 <vPortFree+0xbc>)
 801243e:	681b      	ldr	r3, [r3, #0]
 8012440:	4013      	ands	r3, r2
 8012442:	2b00      	cmp	r3, #0
 8012444:	d10b      	bne.n	801245e <vPortFree+0x46>
	__asm volatile
 8012446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801244a:	f383 8811 	msr	BASEPRI, r3
 801244e:	f3bf 8f6f 	isb	sy
 8012452:	f3bf 8f4f 	dsb	sy
 8012456:	60fb      	str	r3, [r7, #12]
}
 8012458:	bf00      	nop
 801245a:	bf00      	nop
 801245c:	e7fd      	b.n	801245a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801245e:	693b      	ldr	r3, [r7, #16]
 8012460:	681b      	ldr	r3, [r3, #0]
 8012462:	2b00      	cmp	r3, #0
 8012464:	d00b      	beq.n	801247e <vPortFree+0x66>
	__asm volatile
 8012466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801246a:	f383 8811 	msr	BASEPRI, r3
 801246e:	f3bf 8f6f 	isb	sy
 8012472:	f3bf 8f4f 	dsb	sy
 8012476:	60bb      	str	r3, [r7, #8]
}
 8012478:	bf00      	nop
 801247a:	bf00      	nop
 801247c:	e7fd      	b.n	801247a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801247e:	693b      	ldr	r3, [r7, #16]
 8012480:	685a      	ldr	r2, [r3, #4]
 8012482:	4b14      	ldr	r3, [pc, #80]	@ (80124d4 <vPortFree+0xbc>)
 8012484:	681b      	ldr	r3, [r3, #0]
 8012486:	4013      	ands	r3, r2
 8012488:	2b00      	cmp	r3, #0
 801248a:	d01e      	beq.n	80124ca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801248c:	693b      	ldr	r3, [r7, #16]
 801248e:	681b      	ldr	r3, [r3, #0]
 8012490:	2b00      	cmp	r3, #0
 8012492:	d11a      	bne.n	80124ca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012494:	693b      	ldr	r3, [r7, #16]
 8012496:	685a      	ldr	r2, [r3, #4]
 8012498:	4b0e      	ldr	r3, [pc, #56]	@ (80124d4 <vPortFree+0xbc>)
 801249a:	681b      	ldr	r3, [r3, #0]
 801249c:	43db      	mvns	r3, r3
 801249e:	401a      	ands	r2, r3
 80124a0:	693b      	ldr	r3, [r7, #16]
 80124a2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80124a4:	f7fe fe9a 	bl	80111dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80124a8:	693b      	ldr	r3, [r7, #16]
 80124aa:	685a      	ldr	r2, [r3, #4]
 80124ac:	4b0a      	ldr	r3, [pc, #40]	@ (80124d8 <vPortFree+0xc0>)
 80124ae:	681b      	ldr	r3, [r3, #0]
 80124b0:	4413      	add	r3, r2
 80124b2:	4a09      	ldr	r2, [pc, #36]	@ (80124d8 <vPortFree+0xc0>)
 80124b4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80124b6:	6938      	ldr	r0, [r7, #16]
 80124b8:	f000 f874 	bl	80125a4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80124bc:	4b07      	ldr	r3, [pc, #28]	@ (80124dc <vPortFree+0xc4>)
 80124be:	681b      	ldr	r3, [r3, #0]
 80124c0:	3301      	adds	r3, #1
 80124c2:	4a06      	ldr	r2, [pc, #24]	@ (80124dc <vPortFree+0xc4>)
 80124c4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80124c6:	f7fe fe97 	bl	80111f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80124ca:	bf00      	nop
 80124cc:	3718      	adds	r7, #24
 80124ce:	46bd      	mov	sp, r7
 80124d0:	bd80      	pop	{r7, pc}
 80124d2:	bf00      	nop
 80124d4:	20009358 	.word	0x20009358
 80124d8:	20009348 	.word	0x20009348
 80124dc:	20009354 	.word	0x20009354

080124e0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80124e0:	b480      	push	{r7}
 80124e2:	b085      	sub	sp, #20
 80124e4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80124e6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80124ea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80124ec:	4b27      	ldr	r3, [pc, #156]	@ (801258c <prvHeapInit+0xac>)
 80124ee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80124f0:	68fb      	ldr	r3, [r7, #12]
 80124f2:	f003 0307 	and.w	r3, r3, #7
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	d00c      	beq.n	8012514 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80124fa:	68fb      	ldr	r3, [r7, #12]
 80124fc:	3307      	adds	r3, #7
 80124fe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012500:	68fb      	ldr	r3, [r7, #12]
 8012502:	f023 0307 	bic.w	r3, r3, #7
 8012506:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8012508:	68ba      	ldr	r2, [r7, #8]
 801250a:	68fb      	ldr	r3, [r7, #12]
 801250c:	1ad3      	subs	r3, r2, r3
 801250e:	4a1f      	ldr	r2, [pc, #124]	@ (801258c <prvHeapInit+0xac>)
 8012510:	4413      	add	r3, r2
 8012512:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012514:	68fb      	ldr	r3, [r7, #12]
 8012516:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8012518:	4a1d      	ldr	r2, [pc, #116]	@ (8012590 <prvHeapInit+0xb0>)
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801251e:	4b1c      	ldr	r3, [pc, #112]	@ (8012590 <prvHeapInit+0xb0>)
 8012520:	2200      	movs	r2, #0
 8012522:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	68ba      	ldr	r2, [r7, #8]
 8012528:	4413      	add	r3, r2
 801252a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801252c:	2208      	movs	r2, #8
 801252e:	68fb      	ldr	r3, [r7, #12]
 8012530:	1a9b      	subs	r3, r3, r2
 8012532:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012534:	68fb      	ldr	r3, [r7, #12]
 8012536:	f023 0307 	bic.w	r3, r3, #7
 801253a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801253c:	68fb      	ldr	r3, [r7, #12]
 801253e:	4a15      	ldr	r2, [pc, #84]	@ (8012594 <prvHeapInit+0xb4>)
 8012540:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012542:	4b14      	ldr	r3, [pc, #80]	@ (8012594 <prvHeapInit+0xb4>)
 8012544:	681b      	ldr	r3, [r3, #0]
 8012546:	2200      	movs	r2, #0
 8012548:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801254a:	4b12      	ldr	r3, [pc, #72]	@ (8012594 <prvHeapInit+0xb4>)
 801254c:	681b      	ldr	r3, [r3, #0]
 801254e:	2200      	movs	r2, #0
 8012550:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8012556:	683b      	ldr	r3, [r7, #0]
 8012558:	68fa      	ldr	r2, [r7, #12]
 801255a:	1ad2      	subs	r2, r2, r3
 801255c:	683b      	ldr	r3, [r7, #0]
 801255e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012560:	4b0c      	ldr	r3, [pc, #48]	@ (8012594 <prvHeapInit+0xb4>)
 8012562:	681a      	ldr	r2, [r3, #0]
 8012564:	683b      	ldr	r3, [r7, #0]
 8012566:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012568:	683b      	ldr	r3, [r7, #0]
 801256a:	685b      	ldr	r3, [r3, #4]
 801256c:	4a0a      	ldr	r2, [pc, #40]	@ (8012598 <prvHeapInit+0xb8>)
 801256e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012570:	683b      	ldr	r3, [r7, #0]
 8012572:	685b      	ldr	r3, [r3, #4]
 8012574:	4a09      	ldr	r2, [pc, #36]	@ (801259c <prvHeapInit+0xbc>)
 8012576:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012578:	4b09      	ldr	r3, [pc, #36]	@ (80125a0 <prvHeapInit+0xc0>)
 801257a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801257e:	601a      	str	r2, [r3, #0]
}
 8012580:	bf00      	nop
 8012582:	3714      	adds	r7, #20
 8012584:	46bd      	mov	sp, r7
 8012586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801258a:	4770      	bx	lr
 801258c:	2000573c 	.word	0x2000573c
 8012590:	2000933c 	.word	0x2000933c
 8012594:	20009344 	.word	0x20009344
 8012598:	2000934c 	.word	0x2000934c
 801259c:	20009348 	.word	0x20009348
 80125a0:	20009358 	.word	0x20009358

080125a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80125a4:	b480      	push	{r7}
 80125a6:	b085      	sub	sp, #20
 80125a8:	af00      	add	r7, sp, #0
 80125aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80125ac:	4b28      	ldr	r3, [pc, #160]	@ (8012650 <prvInsertBlockIntoFreeList+0xac>)
 80125ae:	60fb      	str	r3, [r7, #12]
 80125b0:	e002      	b.n	80125b8 <prvInsertBlockIntoFreeList+0x14>
 80125b2:	68fb      	ldr	r3, [r7, #12]
 80125b4:	681b      	ldr	r3, [r3, #0]
 80125b6:	60fb      	str	r3, [r7, #12]
 80125b8:	68fb      	ldr	r3, [r7, #12]
 80125ba:	681b      	ldr	r3, [r3, #0]
 80125bc:	687a      	ldr	r2, [r7, #4]
 80125be:	429a      	cmp	r2, r3
 80125c0:	d8f7      	bhi.n	80125b2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80125c2:	68fb      	ldr	r3, [r7, #12]
 80125c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80125c6:	68fb      	ldr	r3, [r7, #12]
 80125c8:	685b      	ldr	r3, [r3, #4]
 80125ca:	68ba      	ldr	r2, [r7, #8]
 80125cc:	4413      	add	r3, r2
 80125ce:	687a      	ldr	r2, [r7, #4]
 80125d0:	429a      	cmp	r2, r3
 80125d2:	d108      	bne.n	80125e6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80125d4:	68fb      	ldr	r3, [r7, #12]
 80125d6:	685a      	ldr	r2, [r3, #4]
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	685b      	ldr	r3, [r3, #4]
 80125dc:	441a      	add	r2, r3
 80125de:	68fb      	ldr	r3, [r7, #12]
 80125e0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80125e2:	68fb      	ldr	r3, [r7, #12]
 80125e4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	685b      	ldr	r3, [r3, #4]
 80125ee:	68ba      	ldr	r2, [r7, #8]
 80125f0:	441a      	add	r2, r3
 80125f2:	68fb      	ldr	r3, [r7, #12]
 80125f4:	681b      	ldr	r3, [r3, #0]
 80125f6:	429a      	cmp	r2, r3
 80125f8:	d118      	bne.n	801262c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80125fa:	68fb      	ldr	r3, [r7, #12]
 80125fc:	681a      	ldr	r2, [r3, #0]
 80125fe:	4b15      	ldr	r3, [pc, #84]	@ (8012654 <prvInsertBlockIntoFreeList+0xb0>)
 8012600:	681b      	ldr	r3, [r3, #0]
 8012602:	429a      	cmp	r2, r3
 8012604:	d00d      	beq.n	8012622 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	685a      	ldr	r2, [r3, #4]
 801260a:	68fb      	ldr	r3, [r7, #12]
 801260c:	681b      	ldr	r3, [r3, #0]
 801260e:	685b      	ldr	r3, [r3, #4]
 8012610:	441a      	add	r2, r3
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8012616:	68fb      	ldr	r3, [r7, #12]
 8012618:	681b      	ldr	r3, [r3, #0]
 801261a:	681a      	ldr	r2, [r3, #0]
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	601a      	str	r2, [r3, #0]
 8012620:	e008      	b.n	8012634 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012622:	4b0c      	ldr	r3, [pc, #48]	@ (8012654 <prvInsertBlockIntoFreeList+0xb0>)
 8012624:	681a      	ldr	r2, [r3, #0]
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	601a      	str	r2, [r3, #0]
 801262a:	e003      	b.n	8012634 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801262c:	68fb      	ldr	r3, [r7, #12]
 801262e:	681a      	ldr	r2, [r3, #0]
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012634:	68fa      	ldr	r2, [r7, #12]
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	429a      	cmp	r2, r3
 801263a:	d002      	beq.n	8012642 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801263c:	68fb      	ldr	r3, [r7, #12]
 801263e:	687a      	ldr	r2, [r7, #4]
 8012640:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012642:	bf00      	nop
 8012644:	3714      	adds	r7, #20
 8012646:	46bd      	mov	sp, r7
 8012648:	f85d 7b04 	ldr.w	r7, [sp], #4
 801264c:	4770      	bx	lr
 801264e:	bf00      	nop
 8012650:	2000933c 	.word	0x2000933c
 8012654:	20009344 	.word	0x20009344

08012658 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8012658:	b580      	push	{r7, lr}
 801265a:	b084      	sub	sp, #16
 801265c:	af00      	add	r7, sp, #0
 801265e:	6078      	str	r0, [r7, #4]
 8012660:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8012662:	f008 f945 	bl	801a8f0 <sys_timeouts_sleeptime>
 8012666:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8012668:	68fb      	ldr	r3, [r7, #12]
 801266a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801266e:	d10b      	bne.n	8012688 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8012670:	4813      	ldr	r0, [pc, #76]	@ (80126c0 <tcpip_timeouts_mbox_fetch+0x68>)
 8012672:	f00a ff18 	bl	801d4a6 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8012676:	2200      	movs	r2, #0
 8012678:	6839      	ldr	r1, [r7, #0]
 801267a:	6878      	ldr	r0, [r7, #4]
 801267c:	f00a fe8a 	bl	801d394 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8012680:	480f      	ldr	r0, [pc, #60]	@ (80126c0 <tcpip_timeouts_mbox_fetch+0x68>)
 8012682:	f00a ff01 	bl	801d488 <sys_mutex_lock>
    return;
 8012686:	e018      	b.n	80126ba <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8012688:	68fb      	ldr	r3, [r7, #12]
 801268a:	2b00      	cmp	r3, #0
 801268c:	d102      	bne.n	8012694 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 801268e:	f008 f8f5 	bl	801a87c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8012692:	e7e6      	b.n	8012662 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8012694:	480a      	ldr	r0, [pc, #40]	@ (80126c0 <tcpip_timeouts_mbox_fetch+0x68>)
 8012696:	f00a ff06 	bl	801d4a6 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 801269a:	68fa      	ldr	r2, [r7, #12]
 801269c:	6839      	ldr	r1, [r7, #0]
 801269e:	6878      	ldr	r0, [r7, #4]
 80126a0:	f00a fe78 	bl	801d394 <sys_arch_mbox_fetch>
 80126a4:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 80126a6:	4806      	ldr	r0, [pc, #24]	@ (80126c0 <tcpip_timeouts_mbox_fetch+0x68>)
 80126a8:	f00a feee 	bl	801d488 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 80126ac:	68bb      	ldr	r3, [r7, #8]
 80126ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80126b2:	d102      	bne.n	80126ba <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 80126b4:	f008 f8e2 	bl	801a87c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80126b8:	e7d3      	b.n	8012662 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 80126ba:	3710      	adds	r7, #16
 80126bc:	46bd      	mov	sp, r7
 80126be:	bd80      	pop	{r7, pc}
 80126c0:	20009368 	.word	0x20009368

080126c4 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 80126c4:	b580      	push	{r7, lr}
 80126c6:	b084      	sub	sp, #16
 80126c8:	af00      	add	r7, sp, #0
 80126ca:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 80126cc:	4810      	ldr	r0, [pc, #64]	@ (8012710 <tcpip_thread+0x4c>)
 80126ce:	f00a fedb 	bl	801d488 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 80126d2:	4b10      	ldr	r3, [pc, #64]	@ (8012714 <tcpip_thread+0x50>)
 80126d4:	681b      	ldr	r3, [r3, #0]
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	d005      	beq.n	80126e6 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 80126da:	4b0e      	ldr	r3, [pc, #56]	@ (8012714 <tcpip_thread+0x50>)
 80126dc:	681b      	ldr	r3, [r3, #0]
 80126de:	4a0e      	ldr	r2, [pc, #56]	@ (8012718 <tcpip_thread+0x54>)
 80126e0:	6812      	ldr	r2, [r2, #0]
 80126e2:	4610      	mov	r0, r2
 80126e4:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80126e6:	f107 030c 	add.w	r3, r7, #12
 80126ea:	4619      	mov	r1, r3
 80126ec:	480b      	ldr	r0, [pc, #44]	@ (801271c <tcpip_thread+0x58>)
 80126ee:	f7ff ffb3 	bl	8012658 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 80126f2:	68fb      	ldr	r3, [r7, #12]
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	d106      	bne.n	8012706 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80126f8:	4b09      	ldr	r3, [pc, #36]	@ (8012720 <tcpip_thread+0x5c>)
 80126fa:	2291      	movs	r2, #145	@ 0x91
 80126fc:	4909      	ldr	r1, [pc, #36]	@ (8012724 <tcpip_thread+0x60>)
 80126fe:	480a      	ldr	r0, [pc, #40]	@ (8012728 <tcpip_thread+0x64>)
 8012700:	f00b fdc4 	bl	801e28c <iprintf>
      continue;
 8012704:	e003      	b.n	801270e <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8012706:	68fb      	ldr	r3, [r7, #12]
 8012708:	4618      	mov	r0, r3
 801270a:	f000 f80f 	bl	801272c <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 801270e:	e7ea      	b.n	80126e6 <tcpip_thread+0x22>
 8012710:	20009368 	.word	0x20009368
 8012714:	2000935c 	.word	0x2000935c
 8012718:	20009360 	.word	0x20009360
 801271c:	20009364 	.word	0x20009364
 8012720:	080212e4 	.word	0x080212e4
 8012724:	08021314 	.word	0x08021314
 8012728:	08021334 	.word	0x08021334

0801272c <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 801272c:	b580      	push	{r7, lr}
 801272e:	b082      	sub	sp, #8
 8012730:	af00      	add	r7, sp, #0
 8012732:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	781b      	ldrb	r3, [r3, #0]
 8012738:	2b02      	cmp	r3, #2
 801273a:	d026      	beq.n	801278a <tcpip_thread_handle_msg+0x5e>
 801273c:	2b02      	cmp	r3, #2
 801273e:	dc2b      	bgt.n	8012798 <tcpip_thread_handle_msg+0x6c>
 8012740:	2b00      	cmp	r3, #0
 8012742:	d002      	beq.n	801274a <tcpip_thread_handle_msg+0x1e>
 8012744:	2b01      	cmp	r3, #1
 8012746:	d015      	beq.n	8012774 <tcpip_thread_handle_msg+0x48>
 8012748:	e026      	b.n	8012798 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	68db      	ldr	r3, [r3, #12]
 801274e:	687a      	ldr	r2, [r7, #4]
 8012750:	6850      	ldr	r0, [r2, #4]
 8012752:	687a      	ldr	r2, [r7, #4]
 8012754:	6892      	ldr	r2, [r2, #8]
 8012756:	4611      	mov	r1, r2
 8012758:	4798      	blx	r3
 801275a:	4603      	mov	r3, r0
 801275c:	2b00      	cmp	r3, #0
 801275e:	d004      	beq.n	801276a <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	685b      	ldr	r3, [r3, #4]
 8012764:	4618      	mov	r0, r3
 8012766:	f001 fcd9 	bl	801411c <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801276a:	6879      	ldr	r1, [r7, #4]
 801276c:	2009      	movs	r0, #9
 801276e:	f000 fe63 	bl	8013438 <memp_free>
      break;
 8012772:	e018      	b.n	80127a6 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	685b      	ldr	r3, [r3, #4]
 8012778:	687a      	ldr	r2, [r7, #4]
 801277a:	6892      	ldr	r2, [r2, #8]
 801277c:	4610      	mov	r0, r2
 801277e:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8012780:	6879      	ldr	r1, [r7, #4]
 8012782:	2008      	movs	r0, #8
 8012784:	f000 fe58 	bl	8013438 <memp_free>
      break;
 8012788:	e00d      	b.n	80127a6 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	685b      	ldr	r3, [r3, #4]
 801278e:	687a      	ldr	r2, [r7, #4]
 8012790:	6892      	ldr	r2, [r2, #8]
 8012792:	4610      	mov	r0, r2
 8012794:	4798      	blx	r3
      break;
 8012796:	e006      	b.n	80127a6 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8012798:	4b05      	ldr	r3, [pc, #20]	@ (80127b0 <tcpip_thread_handle_msg+0x84>)
 801279a:	22cf      	movs	r2, #207	@ 0xcf
 801279c:	4905      	ldr	r1, [pc, #20]	@ (80127b4 <tcpip_thread_handle_msg+0x88>)
 801279e:	4806      	ldr	r0, [pc, #24]	@ (80127b8 <tcpip_thread_handle_msg+0x8c>)
 80127a0:	f00b fd74 	bl	801e28c <iprintf>
      break;
 80127a4:	bf00      	nop
  }
}
 80127a6:	bf00      	nop
 80127a8:	3708      	adds	r7, #8
 80127aa:	46bd      	mov	sp, r7
 80127ac:	bd80      	pop	{r7, pc}
 80127ae:	bf00      	nop
 80127b0:	080212e4 	.word	0x080212e4
 80127b4:	08021314 	.word	0x08021314
 80127b8:	08021334 	.word	0x08021334

080127bc <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 80127bc:	b580      	push	{r7, lr}
 80127be:	b086      	sub	sp, #24
 80127c0:	af00      	add	r7, sp, #0
 80127c2:	60f8      	str	r0, [r7, #12]
 80127c4:	60b9      	str	r1, [r7, #8]
 80127c6:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80127c8:	481a      	ldr	r0, [pc, #104]	@ (8012834 <tcpip_inpkt+0x78>)
 80127ca:	f00a fe22 	bl	801d412 <sys_mbox_valid>
 80127ce:	4603      	mov	r3, r0
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	d105      	bne.n	80127e0 <tcpip_inpkt+0x24>
 80127d4:	4b18      	ldr	r3, [pc, #96]	@ (8012838 <tcpip_inpkt+0x7c>)
 80127d6:	22fc      	movs	r2, #252	@ 0xfc
 80127d8:	4918      	ldr	r1, [pc, #96]	@ (801283c <tcpip_inpkt+0x80>)
 80127da:	4819      	ldr	r0, [pc, #100]	@ (8012840 <tcpip_inpkt+0x84>)
 80127dc:	f00b fd56 	bl	801e28c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80127e0:	2009      	movs	r0, #9
 80127e2:	f000 fdb3 	bl	801334c <memp_malloc>
 80127e6:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 80127e8:	697b      	ldr	r3, [r7, #20]
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	d102      	bne.n	80127f4 <tcpip_inpkt+0x38>
    return ERR_MEM;
 80127ee:	f04f 33ff 	mov.w	r3, #4294967295
 80127f2:	e01a      	b.n	801282a <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 80127f4:	697b      	ldr	r3, [r7, #20]
 80127f6:	2200      	movs	r2, #0
 80127f8:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 80127fa:	697b      	ldr	r3, [r7, #20]
 80127fc:	68fa      	ldr	r2, [r7, #12]
 80127fe:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8012800:	697b      	ldr	r3, [r7, #20]
 8012802:	68ba      	ldr	r2, [r7, #8]
 8012804:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8012806:	697b      	ldr	r3, [r7, #20]
 8012808:	687a      	ldr	r2, [r7, #4]
 801280a:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 801280c:	6979      	ldr	r1, [r7, #20]
 801280e:	4809      	ldr	r0, [pc, #36]	@ (8012834 <tcpip_inpkt+0x78>)
 8012810:	f00a fda6 	bl	801d360 <sys_mbox_trypost>
 8012814:	4603      	mov	r3, r0
 8012816:	2b00      	cmp	r3, #0
 8012818:	d006      	beq.n	8012828 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801281a:	6979      	ldr	r1, [r7, #20]
 801281c:	2009      	movs	r0, #9
 801281e:	f000 fe0b 	bl	8013438 <memp_free>
    return ERR_MEM;
 8012822:	f04f 33ff 	mov.w	r3, #4294967295
 8012826:	e000      	b.n	801282a <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8012828:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 801282a:	4618      	mov	r0, r3
 801282c:	3718      	adds	r7, #24
 801282e:	46bd      	mov	sp, r7
 8012830:	bd80      	pop	{r7, pc}
 8012832:	bf00      	nop
 8012834:	20009364 	.word	0x20009364
 8012838:	080212e4 	.word	0x080212e4
 801283c:	0802135c 	.word	0x0802135c
 8012840:	08021334 	.word	0x08021334

08012844 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8012844:	b580      	push	{r7, lr}
 8012846:	b082      	sub	sp, #8
 8012848:	af00      	add	r7, sp, #0
 801284a:	6078      	str	r0, [r7, #4]
 801284c:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 801284e:	683b      	ldr	r3, [r7, #0]
 8012850:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012854:	f003 0318 	and.w	r3, r3, #24
 8012858:	2b00      	cmp	r3, #0
 801285a:	d006      	beq.n	801286a <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 801285c:	4a08      	ldr	r2, [pc, #32]	@ (8012880 <tcpip_input+0x3c>)
 801285e:	6839      	ldr	r1, [r7, #0]
 8012860:	6878      	ldr	r0, [r7, #4]
 8012862:	f7ff ffab 	bl	80127bc <tcpip_inpkt>
 8012866:	4603      	mov	r3, r0
 8012868:	e005      	b.n	8012876 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 801286a:	4a06      	ldr	r2, [pc, #24]	@ (8012884 <tcpip_input+0x40>)
 801286c:	6839      	ldr	r1, [r7, #0]
 801286e:	6878      	ldr	r0, [r7, #4]
 8012870:	f7ff ffa4 	bl	80127bc <tcpip_inpkt>
 8012874:	4603      	mov	r3, r0
}
 8012876:	4618      	mov	r0, r3
 8012878:	3708      	adds	r7, #8
 801287a:	46bd      	mov	sp, r7
 801287c:	bd80      	pop	{r7, pc}
 801287e:	bf00      	nop
 8012880:	0801d171 	.word	0x0801d171
 8012884:	0801bf59 	.word	0x0801bf59

08012888 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8012888:	b580      	push	{r7, lr}
 801288a:	b084      	sub	sp, #16
 801288c:	af00      	add	r7, sp, #0
 801288e:	6078      	str	r0, [r7, #4]
 8012890:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8012892:	4819      	ldr	r0, [pc, #100]	@ (80128f8 <tcpip_try_callback+0x70>)
 8012894:	f00a fdbd 	bl	801d412 <sys_mbox_valid>
 8012898:	4603      	mov	r3, r0
 801289a:	2b00      	cmp	r3, #0
 801289c:	d106      	bne.n	80128ac <tcpip_try_callback+0x24>
 801289e:	4b17      	ldr	r3, [pc, #92]	@ (80128fc <tcpip_try_callback+0x74>)
 80128a0:	f240 125d 	movw	r2, #349	@ 0x15d
 80128a4:	4916      	ldr	r1, [pc, #88]	@ (8012900 <tcpip_try_callback+0x78>)
 80128a6:	4817      	ldr	r0, [pc, #92]	@ (8012904 <tcpip_try_callback+0x7c>)
 80128a8:	f00b fcf0 	bl	801e28c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 80128ac:	2008      	movs	r0, #8
 80128ae:	f000 fd4d 	bl	801334c <memp_malloc>
 80128b2:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 80128b4:	68fb      	ldr	r3, [r7, #12]
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	d102      	bne.n	80128c0 <tcpip_try_callback+0x38>
    return ERR_MEM;
 80128ba:	f04f 33ff 	mov.w	r3, #4294967295
 80128be:	e017      	b.n	80128f0 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 80128c0:	68fb      	ldr	r3, [r7, #12]
 80128c2:	2201      	movs	r2, #1
 80128c4:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 80128c6:	68fb      	ldr	r3, [r7, #12]
 80128c8:	687a      	ldr	r2, [r7, #4]
 80128ca:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 80128cc:	68fb      	ldr	r3, [r7, #12]
 80128ce:	683a      	ldr	r2, [r7, #0]
 80128d0:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80128d2:	68f9      	ldr	r1, [r7, #12]
 80128d4:	4808      	ldr	r0, [pc, #32]	@ (80128f8 <tcpip_try_callback+0x70>)
 80128d6:	f00a fd43 	bl	801d360 <sys_mbox_trypost>
 80128da:	4603      	mov	r3, r0
 80128dc:	2b00      	cmp	r3, #0
 80128de:	d006      	beq.n	80128ee <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 80128e0:	68f9      	ldr	r1, [r7, #12]
 80128e2:	2008      	movs	r0, #8
 80128e4:	f000 fda8 	bl	8013438 <memp_free>
    return ERR_MEM;
 80128e8:	f04f 33ff 	mov.w	r3, #4294967295
 80128ec:	e000      	b.n	80128f0 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 80128ee:	2300      	movs	r3, #0
}
 80128f0:	4618      	mov	r0, r3
 80128f2:	3710      	adds	r7, #16
 80128f4:	46bd      	mov	sp, r7
 80128f6:	bd80      	pop	{r7, pc}
 80128f8:	20009364 	.word	0x20009364
 80128fc:	080212e4 	.word	0x080212e4
 8012900:	0802135c 	.word	0x0802135c
 8012904:	08021334 	.word	0x08021334

08012908 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8012908:	b580      	push	{r7, lr}
 801290a:	b084      	sub	sp, #16
 801290c:	af02      	add	r7, sp, #8
 801290e:	6078      	str	r0, [r7, #4]
 8012910:	6039      	str	r1, [r7, #0]
  lwip_init();
 8012912:	f000 f872 	bl	80129fa <lwip_init>

  tcpip_init_done = initfunc;
 8012916:	4a17      	ldr	r2, [pc, #92]	@ (8012974 <tcpip_init+0x6c>)
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 801291c:	4a16      	ldr	r2, [pc, #88]	@ (8012978 <tcpip_init+0x70>)
 801291e:	683b      	ldr	r3, [r7, #0]
 8012920:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8012922:	2106      	movs	r1, #6
 8012924:	4815      	ldr	r0, [pc, #84]	@ (801297c <tcpip_init+0x74>)
 8012926:	f00a fcf9 	bl	801d31c <sys_mbox_new>
 801292a:	4603      	mov	r3, r0
 801292c:	2b00      	cmp	r3, #0
 801292e:	d006      	beq.n	801293e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8012930:	4b13      	ldr	r3, [pc, #76]	@ (8012980 <tcpip_init+0x78>)
 8012932:	f240 2261 	movw	r2, #609	@ 0x261
 8012936:	4913      	ldr	r1, [pc, #76]	@ (8012984 <tcpip_init+0x7c>)
 8012938:	4813      	ldr	r0, [pc, #76]	@ (8012988 <tcpip_init+0x80>)
 801293a:	f00b fca7 	bl	801e28c <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 801293e:	4813      	ldr	r0, [pc, #76]	@ (801298c <tcpip_init+0x84>)
 8012940:	f00a fd86 	bl	801d450 <sys_mutex_new>
 8012944:	4603      	mov	r3, r0
 8012946:	2b00      	cmp	r3, #0
 8012948:	d006      	beq.n	8012958 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 801294a:	4b0d      	ldr	r3, [pc, #52]	@ (8012980 <tcpip_init+0x78>)
 801294c:	f240 2265 	movw	r2, #613	@ 0x265
 8012950:	490f      	ldr	r1, [pc, #60]	@ (8012990 <tcpip_init+0x88>)
 8012952:	480d      	ldr	r0, [pc, #52]	@ (8012988 <tcpip_init+0x80>)
 8012954:	f00b fc9a 	bl	801e28c <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8012958:	2300      	movs	r3, #0
 801295a:	9300      	str	r3, [sp, #0]
 801295c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012960:	2200      	movs	r2, #0
 8012962:	490c      	ldr	r1, [pc, #48]	@ (8012994 <tcpip_init+0x8c>)
 8012964:	480c      	ldr	r0, [pc, #48]	@ (8012998 <tcpip_init+0x90>)
 8012966:	f00a fdab 	bl	801d4c0 <sys_thread_new>
}
 801296a:	bf00      	nop
 801296c:	3708      	adds	r7, #8
 801296e:	46bd      	mov	sp, r7
 8012970:	bd80      	pop	{r7, pc}
 8012972:	bf00      	nop
 8012974:	2000935c 	.word	0x2000935c
 8012978:	20009360 	.word	0x20009360
 801297c:	20009364 	.word	0x20009364
 8012980:	080212e4 	.word	0x080212e4
 8012984:	0802136c 	.word	0x0802136c
 8012988:	08021334 	.word	0x08021334
 801298c:	20009368 	.word	0x20009368
 8012990:	08021390 	.word	0x08021390
 8012994:	080126c5 	.word	0x080126c5
 8012998:	080213b4 	.word	0x080213b4

0801299c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 801299c:	b480      	push	{r7}
 801299e:	b083      	sub	sp, #12
 80129a0:	af00      	add	r7, sp, #0
 80129a2:	4603      	mov	r3, r0
 80129a4:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80129a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80129aa:	021b      	lsls	r3, r3, #8
 80129ac:	b21a      	sxth	r2, r3
 80129ae:	88fb      	ldrh	r3, [r7, #6]
 80129b0:	0a1b      	lsrs	r3, r3, #8
 80129b2:	b29b      	uxth	r3, r3
 80129b4:	b21b      	sxth	r3, r3
 80129b6:	4313      	orrs	r3, r2
 80129b8:	b21b      	sxth	r3, r3
 80129ba:	b29b      	uxth	r3, r3
}
 80129bc:	4618      	mov	r0, r3
 80129be:	370c      	adds	r7, #12
 80129c0:	46bd      	mov	sp, r7
 80129c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129c6:	4770      	bx	lr

080129c8 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80129c8:	b480      	push	{r7}
 80129ca:	b083      	sub	sp, #12
 80129cc:	af00      	add	r7, sp, #0
 80129ce:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	061a      	lsls	r2, r3, #24
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	021b      	lsls	r3, r3, #8
 80129d8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80129dc:	431a      	orrs	r2, r3
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	0a1b      	lsrs	r3, r3, #8
 80129e2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80129e6:	431a      	orrs	r2, r3
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	0e1b      	lsrs	r3, r3, #24
 80129ec:	4313      	orrs	r3, r2
}
 80129ee:	4618      	mov	r0, r3
 80129f0:	370c      	adds	r7, #12
 80129f2:	46bd      	mov	sp, r7
 80129f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129f8:	4770      	bx	lr

080129fa <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80129fa:	b580      	push	{r7, lr}
 80129fc:	b082      	sub	sp, #8
 80129fe:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8012a00:	2300      	movs	r3, #0
 8012a02:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8012a04:	f00a fd16 	bl	801d434 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8012a08:	f000 f8d4 	bl	8012bb4 <mem_init>
  memp_init();
 8012a0c:	f000 fc30 	bl	8013270 <memp_init>
  pbuf_init();
  netif_init();
 8012a10:	f000 fd3c 	bl	801348c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8012a14:	f007 ffa4 	bl	801a960 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8012a18:	f001 fe1a 	bl	8014650 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8012a1c:	f007 fee6 	bl	801a7ec <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8012a20:	bf00      	nop
 8012a22:	3708      	adds	r7, #8
 8012a24:	46bd      	mov	sp, r7
 8012a26:	bd80      	pop	{r7, pc}

08012a28 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8012a28:	b480      	push	{r7}
 8012a2a:	b083      	sub	sp, #12
 8012a2c:	af00      	add	r7, sp, #0
 8012a2e:	4603      	mov	r3, r0
 8012a30:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8012a32:	4b05      	ldr	r3, [pc, #20]	@ (8012a48 <ptr_to_mem+0x20>)
 8012a34:	681a      	ldr	r2, [r3, #0]
 8012a36:	88fb      	ldrh	r3, [r7, #6]
 8012a38:	4413      	add	r3, r2
}
 8012a3a:	4618      	mov	r0, r3
 8012a3c:	370c      	adds	r7, #12
 8012a3e:	46bd      	mov	sp, r7
 8012a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a44:	4770      	bx	lr
 8012a46:	bf00      	nop
 8012a48:	200099d8 	.word	0x200099d8

08012a4c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8012a4c:	b480      	push	{r7}
 8012a4e:	b083      	sub	sp, #12
 8012a50:	af00      	add	r7, sp, #0
 8012a52:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8012a54:	4b05      	ldr	r3, [pc, #20]	@ (8012a6c <mem_to_ptr+0x20>)
 8012a56:	681b      	ldr	r3, [r3, #0]
 8012a58:	687a      	ldr	r2, [r7, #4]
 8012a5a:	1ad3      	subs	r3, r2, r3
 8012a5c:	b29b      	uxth	r3, r3
}
 8012a5e:	4618      	mov	r0, r3
 8012a60:	370c      	adds	r7, #12
 8012a62:	46bd      	mov	sp, r7
 8012a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a68:	4770      	bx	lr
 8012a6a:	bf00      	nop
 8012a6c:	200099d8 	.word	0x200099d8

08012a70 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8012a70:	b590      	push	{r4, r7, lr}
 8012a72:	b085      	sub	sp, #20
 8012a74:	af00      	add	r7, sp, #0
 8012a76:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8012a78:	4b45      	ldr	r3, [pc, #276]	@ (8012b90 <plug_holes+0x120>)
 8012a7a:	681b      	ldr	r3, [r3, #0]
 8012a7c:	687a      	ldr	r2, [r7, #4]
 8012a7e:	429a      	cmp	r2, r3
 8012a80:	d206      	bcs.n	8012a90 <plug_holes+0x20>
 8012a82:	4b44      	ldr	r3, [pc, #272]	@ (8012b94 <plug_holes+0x124>)
 8012a84:	f240 12df 	movw	r2, #479	@ 0x1df
 8012a88:	4943      	ldr	r1, [pc, #268]	@ (8012b98 <plug_holes+0x128>)
 8012a8a:	4844      	ldr	r0, [pc, #272]	@ (8012b9c <plug_holes+0x12c>)
 8012a8c:	f00b fbfe 	bl	801e28c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8012a90:	4b43      	ldr	r3, [pc, #268]	@ (8012ba0 <plug_holes+0x130>)
 8012a92:	681b      	ldr	r3, [r3, #0]
 8012a94:	687a      	ldr	r2, [r7, #4]
 8012a96:	429a      	cmp	r2, r3
 8012a98:	d306      	bcc.n	8012aa8 <plug_holes+0x38>
 8012a9a:	4b3e      	ldr	r3, [pc, #248]	@ (8012b94 <plug_holes+0x124>)
 8012a9c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8012aa0:	4940      	ldr	r1, [pc, #256]	@ (8012ba4 <plug_holes+0x134>)
 8012aa2:	483e      	ldr	r0, [pc, #248]	@ (8012b9c <plug_holes+0x12c>)
 8012aa4:	f00b fbf2 	bl	801e28c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	791b      	ldrb	r3, [r3, #4]
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	d006      	beq.n	8012abe <plug_holes+0x4e>
 8012ab0:	4b38      	ldr	r3, [pc, #224]	@ (8012b94 <plug_holes+0x124>)
 8012ab2:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8012ab6:	493c      	ldr	r1, [pc, #240]	@ (8012ba8 <plug_holes+0x138>)
 8012ab8:	4838      	ldr	r0, [pc, #224]	@ (8012b9c <plug_holes+0x12c>)
 8012aba:	f00b fbe7 	bl	801e28c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	881b      	ldrh	r3, [r3, #0]
 8012ac2:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8012ac6:	d906      	bls.n	8012ad6 <plug_holes+0x66>
 8012ac8:	4b32      	ldr	r3, [pc, #200]	@ (8012b94 <plug_holes+0x124>)
 8012aca:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8012ace:	4937      	ldr	r1, [pc, #220]	@ (8012bac <plug_holes+0x13c>)
 8012ad0:	4832      	ldr	r0, [pc, #200]	@ (8012b9c <plug_holes+0x12c>)
 8012ad2:	f00b fbdb 	bl	801e28c <iprintf>

  nmem = ptr_to_mem(mem->next);
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	881b      	ldrh	r3, [r3, #0]
 8012ada:	4618      	mov	r0, r3
 8012adc:	f7ff ffa4 	bl	8012a28 <ptr_to_mem>
 8012ae0:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8012ae2:	687a      	ldr	r2, [r7, #4]
 8012ae4:	68fb      	ldr	r3, [r7, #12]
 8012ae6:	429a      	cmp	r2, r3
 8012ae8:	d024      	beq.n	8012b34 <plug_holes+0xc4>
 8012aea:	68fb      	ldr	r3, [r7, #12]
 8012aec:	791b      	ldrb	r3, [r3, #4]
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d120      	bne.n	8012b34 <plug_holes+0xc4>
 8012af2:	4b2b      	ldr	r3, [pc, #172]	@ (8012ba0 <plug_holes+0x130>)
 8012af4:	681b      	ldr	r3, [r3, #0]
 8012af6:	68fa      	ldr	r2, [r7, #12]
 8012af8:	429a      	cmp	r2, r3
 8012afa:	d01b      	beq.n	8012b34 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8012afc:	4b2c      	ldr	r3, [pc, #176]	@ (8012bb0 <plug_holes+0x140>)
 8012afe:	681b      	ldr	r3, [r3, #0]
 8012b00:	68fa      	ldr	r2, [r7, #12]
 8012b02:	429a      	cmp	r2, r3
 8012b04:	d102      	bne.n	8012b0c <plug_holes+0x9c>
      lfree = mem;
 8012b06:	4a2a      	ldr	r2, [pc, #168]	@ (8012bb0 <plug_holes+0x140>)
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8012b0c:	68fb      	ldr	r3, [r7, #12]
 8012b0e:	881a      	ldrh	r2, [r3, #0]
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8012b14:	68fb      	ldr	r3, [r7, #12]
 8012b16:	881b      	ldrh	r3, [r3, #0]
 8012b18:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8012b1c:	d00a      	beq.n	8012b34 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8012b1e:	68fb      	ldr	r3, [r7, #12]
 8012b20:	881b      	ldrh	r3, [r3, #0]
 8012b22:	4618      	mov	r0, r3
 8012b24:	f7ff ff80 	bl	8012a28 <ptr_to_mem>
 8012b28:	4604      	mov	r4, r0
 8012b2a:	6878      	ldr	r0, [r7, #4]
 8012b2c:	f7ff ff8e 	bl	8012a4c <mem_to_ptr>
 8012b30:	4603      	mov	r3, r0
 8012b32:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	885b      	ldrh	r3, [r3, #2]
 8012b38:	4618      	mov	r0, r3
 8012b3a:	f7ff ff75 	bl	8012a28 <ptr_to_mem>
 8012b3e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8012b40:	68ba      	ldr	r2, [r7, #8]
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	429a      	cmp	r2, r3
 8012b46:	d01f      	beq.n	8012b88 <plug_holes+0x118>
 8012b48:	68bb      	ldr	r3, [r7, #8]
 8012b4a:	791b      	ldrb	r3, [r3, #4]
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	d11b      	bne.n	8012b88 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8012b50:	4b17      	ldr	r3, [pc, #92]	@ (8012bb0 <plug_holes+0x140>)
 8012b52:	681b      	ldr	r3, [r3, #0]
 8012b54:	687a      	ldr	r2, [r7, #4]
 8012b56:	429a      	cmp	r2, r3
 8012b58:	d102      	bne.n	8012b60 <plug_holes+0xf0>
      lfree = pmem;
 8012b5a:	4a15      	ldr	r2, [pc, #84]	@ (8012bb0 <plug_holes+0x140>)
 8012b5c:	68bb      	ldr	r3, [r7, #8]
 8012b5e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	881a      	ldrh	r2, [r3, #0]
 8012b64:	68bb      	ldr	r3, [r7, #8]
 8012b66:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	881b      	ldrh	r3, [r3, #0]
 8012b6c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8012b70:	d00a      	beq.n	8012b88 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	881b      	ldrh	r3, [r3, #0]
 8012b76:	4618      	mov	r0, r3
 8012b78:	f7ff ff56 	bl	8012a28 <ptr_to_mem>
 8012b7c:	4604      	mov	r4, r0
 8012b7e:	68b8      	ldr	r0, [r7, #8]
 8012b80:	f7ff ff64 	bl	8012a4c <mem_to_ptr>
 8012b84:	4603      	mov	r3, r0
 8012b86:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8012b88:	bf00      	nop
 8012b8a:	3714      	adds	r7, #20
 8012b8c:	46bd      	mov	sp, r7
 8012b8e:	bd90      	pop	{r4, r7, pc}
 8012b90:	200099d8 	.word	0x200099d8
 8012b94:	080213c4 	.word	0x080213c4
 8012b98:	080213f4 	.word	0x080213f4
 8012b9c:	0802140c 	.word	0x0802140c
 8012ba0:	200099dc 	.word	0x200099dc
 8012ba4:	08021434 	.word	0x08021434
 8012ba8:	08021450 	.word	0x08021450
 8012bac:	0802146c 	.word	0x0802146c
 8012bb0:	200099e4 	.word	0x200099e4

08012bb4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8012bb4:	b580      	push	{r7, lr}
 8012bb6:	b082      	sub	sp, #8
 8012bb8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8012bba:	4b1f      	ldr	r3, [pc, #124]	@ (8012c38 <mem_init+0x84>)
 8012bbc:	3303      	adds	r3, #3
 8012bbe:	f023 0303 	bic.w	r3, r3, #3
 8012bc2:	461a      	mov	r2, r3
 8012bc4:	4b1d      	ldr	r3, [pc, #116]	@ (8012c3c <mem_init+0x88>)
 8012bc6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8012bc8:	4b1c      	ldr	r3, [pc, #112]	@ (8012c3c <mem_init+0x88>)
 8012bca:	681b      	ldr	r3, [r3, #0]
 8012bcc:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8012bd4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	2200      	movs	r2, #0
 8012bda:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	2200      	movs	r2, #0
 8012be0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8012be2:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 8012be6:	f7ff ff1f 	bl	8012a28 <ptr_to_mem>
 8012bea:	4603      	mov	r3, r0
 8012bec:	4a14      	ldr	r2, [pc, #80]	@ (8012c40 <mem_init+0x8c>)
 8012bee:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8012bf0:	4b13      	ldr	r3, [pc, #76]	@ (8012c40 <mem_init+0x8c>)
 8012bf2:	681b      	ldr	r3, [r3, #0]
 8012bf4:	2201      	movs	r2, #1
 8012bf6:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8012bf8:	4b11      	ldr	r3, [pc, #68]	@ (8012c40 <mem_init+0x8c>)
 8012bfa:	681b      	ldr	r3, [r3, #0]
 8012bfc:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8012c00:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8012c02:	4b0f      	ldr	r3, [pc, #60]	@ (8012c40 <mem_init+0x8c>)
 8012c04:	681b      	ldr	r3, [r3, #0]
 8012c06:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8012c0a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8012c0c:	4b0b      	ldr	r3, [pc, #44]	@ (8012c3c <mem_init+0x88>)
 8012c0e:	681b      	ldr	r3, [r3, #0]
 8012c10:	4a0c      	ldr	r2, [pc, #48]	@ (8012c44 <mem_init+0x90>)
 8012c12:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8012c14:	480c      	ldr	r0, [pc, #48]	@ (8012c48 <mem_init+0x94>)
 8012c16:	f00a fc1b 	bl	801d450 <sys_mutex_new>
 8012c1a:	4603      	mov	r3, r0
 8012c1c:	2b00      	cmp	r3, #0
 8012c1e:	d006      	beq.n	8012c2e <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8012c20:	4b0a      	ldr	r3, [pc, #40]	@ (8012c4c <mem_init+0x98>)
 8012c22:	f240 221f 	movw	r2, #543	@ 0x21f
 8012c26:	490a      	ldr	r1, [pc, #40]	@ (8012c50 <mem_init+0x9c>)
 8012c28:	480a      	ldr	r0, [pc, #40]	@ (8012c54 <mem_init+0xa0>)
 8012c2a:	f00b fb2f 	bl	801e28c <iprintf>
  }
}
 8012c2e:	bf00      	nop
 8012c30:	3708      	adds	r7, #8
 8012c32:	46bd      	mov	sp, r7
 8012c34:	bd80      	pop	{r7, pc}
 8012c36:	bf00      	nop
 8012c38:	20009384 	.word	0x20009384
 8012c3c:	200099d8 	.word	0x200099d8
 8012c40:	200099dc 	.word	0x200099dc
 8012c44:	200099e4 	.word	0x200099e4
 8012c48:	200099e0 	.word	0x200099e0
 8012c4c:	080213c4 	.word	0x080213c4
 8012c50:	08021498 	.word	0x08021498
 8012c54:	0802140c 	.word	0x0802140c

08012c58 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8012c58:	b580      	push	{r7, lr}
 8012c5a:	b086      	sub	sp, #24
 8012c5c:	af00      	add	r7, sp, #0
 8012c5e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8012c60:	6878      	ldr	r0, [r7, #4]
 8012c62:	f7ff fef3 	bl	8012a4c <mem_to_ptr>
 8012c66:	4603      	mov	r3, r0
 8012c68:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	881b      	ldrh	r3, [r3, #0]
 8012c6e:	4618      	mov	r0, r3
 8012c70:	f7ff feda 	bl	8012a28 <ptr_to_mem>
 8012c74:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	885b      	ldrh	r3, [r3, #2]
 8012c7a:	4618      	mov	r0, r3
 8012c7c:	f7ff fed4 	bl	8012a28 <ptr_to_mem>
 8012c80:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	881b      	ldrh	r3, [r3, #0]
 8012c86:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8012c8a:	d818      	bhi.n	8012cbe <mem_link_valid+0x66>
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	885b      	ldrh	r3, [r3, #2]
 8012c90:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8012c94:	d813      	bhi.n	8012cbe <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8012c9a:	8afa      	ldrh	r2, [r7, #22]
 8012c9c:	429a      	cmp	r2, r3
 8012c9e:	d004      	beq.n	8012caa <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8012ca0:	68fb      	ldr	r3, [r7, #12]
 8012ca2:	881b      	ldrh	r3, [r3, #0]
 8012ca4:	8afa      	ldrh	r2, [r7, #22]
 8012ca6:	429a      	cmp	r2, r3
 8012ca8:	d109      	bne.n	8012cbe <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8012caa:	4b08      	ldr	r3, [pc, #32]	@ (8012ccc <mem_link_valid+0x74>)
 8012cac:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8012cae:	693a      	ldr	r2, [r7, #16]
 8012cb0:	429a      	cmp	r2, r3
 8012cb2:	d006      	beq.n	8012cc2 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8012cb4:	693b      	ldr	r3, [r7, #16]
 8012cb6:	885b      	ldrh	r3, [r3, #2]
 8012cb8:	8afa      	ldrh	r2, [r7, #22]
 8012cba:	429a      	cmp	r2, r3
 8012cbc:	d001      	beq.n	8012cc2 <mem_link_valid+0x6a>
    return 0;
 8012cbe:	2300      	movs	r3, #0
 8012cc0:	e000      	b.n	8012cc4 <mem_link_valid+0x6c>
  }
  return 1;
 8012cc2:	2301      	movs	r3, #1
}
 8012cc4:	4618      	mov	r0, r3
 8012cc6:	3718      	adds	r7, #24
 8012cc8:	46bd      	mov	sp, r7
 8012cca:	bd80      	pop	{r7, pc}
 8012ccc:	200099dc 	.word	0x200099dc

08012cd0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8012cd0:	b580      	push	{r7, lr}
 8012cd2:	b088      	sub	sp, #32
 8012cd4:	af00      	add	r7, sp, #0
 8012cd6:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	d070      	beq.n	8012dc0 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	f003 0303 	and.w	r3, r3, #3
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	d00d      	beq.n	8012d04 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8012ce8:	4b37      	ldr	r3, [pc, #220]	@ (8012dc8 <mem_free+0xf8>)
 8012cea:	f240 2273 	movw	r2, #627	@ 0x273
 8012cee:	4937      	ldr	r1, [pc, #220]	@ (8012dcc <mem_free+0xfc>)
 8012cf0:	4837      	ldr	r0, [pc, #220]	@ (8012dd0 <mem_free+0x100>)
 8012cf2:	f00b facb 	bl	801e28c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8012cf6:	f00a fc09 	bl	801d50c <sys_arch_protect>
 8012cfa:	60f8      	str	r0, [r7, #12]
 8012cfc:	68f8      	ldr	r0, [r7, #12]
 8012cfe:	f00a fc13 	bl	801d528 <sys_arch_unprotect>
    return;
 8012d02:	e05e      	b.n	8012dc2 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	3b08      	subs	r3, #8
 8012d08:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8012d0a:	4b32      	ldr	r3, [pc, #200]	@ (8012dd4 <mem_free+0x104>)
 8012d0c:	681b      	ldr	r3, [r3, #0]
 8012d0e:	69fa      	ldr	r2, [r7, #28]
 8012d10:	429a      	cmp	r2, r3
 8012d12:	d306      	bcc.n	8012d22 <mem_free+0x52>
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	f103 020c 	add.w	r2, r3, #12
 8012d1a:	4b2f      	ldr	r3, [pc, #188]	@ (8012dd8 <mem_free+0x108>)
 8012d1c:	681b      	ldr	r3, [r3, #0]
 8012d1e:	429a      	cmp	r2, r3
 8012d20:	d90d      	bls.n	8012d3e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8012d22:	4b29      	ldr	r3, [pc, #164]	@ (8012dc8 <mem_free+0xf8>)
 8012d24:	f240 227f 	movw	r2, #639	@ 0x27f
 8012d28:	492c      	ldr	r1, [pc, #176]	@ (8012ddc <mem_free+0x10c>)
 8012d2a:	4829      	ldr	r0, [pc, #164]	@ (8012dd0 <mem_free+0x100>)
 8012d2c:	f00b faae 	bl	801e28c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8012d30:	f00a fbec 	bl	801d50c <sys_arch_protect>
 8012d34:	6138      	str	r0, [r7, #16]
 8012d36:	6938      	ldr	r0, [r7, #16]
 8012d38:	f00a fbf6 	bl	801d528 <sys_arch_unprotect>
    return;
 8012d3c:	e041      	b.n	8012dc2 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8012d3e:	4828      	ldr	r0, [pc, #160]	@ (8012de0 <mem_free+0x110>)
 8012d40:	f00a fba2 	bl	801d488 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8012d44:	69fb      	ldr	r3, [r7, #28]
 8012d46:	791b      	ldrb	r3, [r3, #4]
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d110      	bne.n	8012d6e <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8012d4c:	4b1e      	ldr	r3, [pc, #120]	@ (8012dc8 <mem_free+0xf8>)
 8012d4e:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8012d52:	4924      	ldr	r1, [pc, #144]	@ (8012de4 <mem_free+0x114>)
 8012d54:	481e      	ldr	r0, [pc, #120]	@ (8012dd0 <mem_free+0x100>)
 8012d56:	f00b fa99 	bl	801e28c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8012d5a:	4821      	ldr	r0, [pc, #132]	@ (8012de0 <mem_free+0x110>)
 8012d5c:	f00a fba3 	bl	801d4a6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8012d60:	f00a fbd4 	bl	801d50c <sys_arch_protect>
 8012d64:	6178      	str	r0, [r7, #20]
 8012d66:	6978      	ldr	r0, [r7, #20]
 8012d68:	f00a fbde 	bl	801d528 <sys_arch_unprotect>
    return;
 8012d6c:	e029      	b.n	8012dc2 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8012d6e:	69f8      	ldr	r0, [r7, #28]
 8012d70:	f7ff ff72 	bl	8012c58 <mem_link_valid>
 8012d74:	4603      	mov	r3, r0
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	d110      	bne.n	8012d9c <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8012d7a:	4b13      	ldr	r3, [pc, #76]	@ (8012dc8 <mem_free+0xf8>)
 8012d7c:	f240 2295 	movw	r2, #661	@ 0x295
 8012d80:	4919      	ldr	r1, [pc, #100]	@ (8012de8 <mem_free+0x118>)
 8012d82:	4813      	ldr	r0, [pc, #76]	@ (8012dd0 <mem_free+0x100>)
 8012d84:	f00b fa82 	bl	801e28c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8012d88:	4815      	ldr	r0, [pc, #84]	@ (8012de0 <mem_free+0x110>)
 8012d8a:	f00a fb8c 	bl	801d4a6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8012d8e:	f00a fbbd 	bl	801d50c <sys_arch_protect>
 8012d92:	61b8      	str	r0, [r7, #24]
 8012d94:	69b8      	ldr	r0, [r7, #24]
 8012d96:	f00a fbc7 	bl	801d528 <sys_arch_unprotect>
    return;
 8012d9a:	e012      	b.n	8012dc2 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8012d9c:	69fb      	ldr	r3, [r7, #28]
 8012d9e:	2200      	movs	r2, #0
 8012da0:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8012da2:	4b12      	ldr	r3, [pc, #72]	@ (8012dec <mem_free+0x11c>)
 8012da4:	681b      	ldr	r3, [r3, #0]
 8012da6:	69fa      	ldr	r2, [r7, #28]
 8012da8:	429a      	cmp	r2, r3
 8012daa:	d202      	bcs.n	8012db2 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8012dac:	4a0f      	ldr	r2, [pc, #60]	@ (8012dec <mem_free+0x11c>)
 8012dae:	69fb      	ldr	r3, [r7, #28]
 8012db0:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8012db2:	69f8      	ldr	r0, [r7, #28]
 8012db4:	f7ff fe5c 	bl	8012a70 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8012db8:	4809      	ldr	r0, [pc, #36]	@ (8012de0 <mem_free+0x110>)
 8012dba:	f00a fb74 	bl	801d4a6 <sys_mutex_unlock>
 8012dbe:	e000      	b.n	8012dc2 <mem_free+0xf2>
    return;
 8012dc0:	bf00      	nop
}
 8012dc2:	3720      	adds	r7, #32
 8012dc4:	46bd      	mov	sp, r7
 8012dc6:	bd80      	pop	{r7, pc}
 8012dc8:	080213c4 	.word	0x080213c4
 8012dcc:	080214b4 	.word	0x080214b4
 8012dd0:	0802140c 	.word	0x0802140c
 8012dd4:	200099d8 	.word	0x200099d8
 8012dd8:	200099dc 	.word	0x200099dc
 8012ddc:	080214d8 	.word	0x080214d8
 8012de0:	200099e0 	.word	0x200099e0
 8012de4:	080214f4 	.word	0x080214f4
 8012de8:	0802151c 	.word	0x0802151c
 8012dec:	200099e4 	.word	0x200099e4

08012df0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8012df0:	b580      	push	{r7, lr}
 8012df2:	b088      	sub	sp, #32
 8012df4:	af00      	add	r7, sp, #0
 8012df6:	6078      	str	r0, [r7, #4]
 8012df8:	460b      	mov	r3, r1
 8012dfa:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8012dfc:	887b      	ldrh	r3, [r7, #2]
 8012dfe:	3303      	adds	r3, #3
 8012e00:	b29b      	uxth	r3, r3
 8012e02:	f023 0303 	bic.w	r3, r3, #3
 8012e06:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8012e08:	8bfb      	ldrh	r3, [r7, #30]
 8012e0a:	2b0b      	cmp	r3, #11
 8012e0c:	d801      	bhi.n	8012e12 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8012e0e:	230c      	movs	r3, #12
 8012e10:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8012e12:	8bfb      	ldrh	r3, [r7, #30]
 8012e14:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8012e18:	d803      	bhi.n	8012e22 <mem_trim+0x32>
 8012e1a:	8bfa      	ldrh	r2, [r7, #30]
 8012e1c:	887b      	ldrh	r3, [r7, #2]
 8012e1e:	429a      	cmp	r2, r3
 8012e20:	d201      	bcs.n	8012e26 <mem_trim+0x36>
    return NULL;
 8012e22:	2300      	movs	r3, #0
 8012e24:	e0d8      	b.n	8012fd8 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8012e26:	4b6e      	ldr	r3, [pc, #440]	@ (8012fe0 <mem_trim+0x1f0>)
 8012e28:	681b      	ldr	r3, [r3, #0]
 8012e2a:	687a      	ldr	r2, [r7, #4]
 8012e2c:	429a      	cmp	r2, r3
 8012e2e:	d304      	bcc.n	8012e3a <mem_trim+0x4a>
 8012e30:	4b6c      	ldr	r3, [pc, #432]	@ (8012fe4 <mem_trim+0x1f4>)
 8012e32:	681b      	ldr	r3, [r3, #0]
 8012e34:	687a      	ldr	r2, [r7, #4]
 8012e36:	429a      	cmp	r2, r3
 8012e38:	d306      	bcc.n	8012e48 <mem_trim+0x58>
 8012e3a:	4b6b      	ldr	r3, [pc, #428]	@ (8012fe8 <mem_trim+0x1f8>)
 8012e3c:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8012e40:	496a      	ldr	r1, [pc, #424]	@ (8012fec <mem_trim+0x1fc>)
 8012e42:	486b      	ldr	r0, [pc, #428]	@ (8012ff0 <mem_trim+0x200>)
 8012e44:	f00b fa22 	bl	801e28c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8012e48:	4b65      	ldr	r3, [pc, #404]	@ (8012fe0 <mem_trim+0x1f0>)
 8012e4a:	681b      	ldr	r3, [r3, #0]
 8012e4c:	687a      	ldr	r2, [r7, #4]
 8012e4e:	429a      	cmp	r2, r3
 8012e50:	d304      	bcc.n	8012e5c <mem_trim+0x6c>
 8012e52:	4b64      	ldr	r3, [pc, #400]	@ (8012fe4 <mem_trim+0x1f4>)
 8012e54:	681b      	ldr	r3, [r3, #0]
 8012e56:	687a      	ldr	r2, [r7, #4]
 8012e58:	429a      	cmp	r2, r3
 8012e5a:	d307      	bcc.n	8012e6c <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8012e5c:	f00a fb56 	bl	801d50c <sys_arch_protect>
 8012e60:	60b8      	str	r0, [r7, #8]
 8012e62:	68b8      	ldr	r0, [r7, #8]
 8012e64:	f00a fb60 	bl	801d528 <sys_arch_unprotect>
    return rmem;
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	e0b5      	b.n	8012fd8 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	3b08      	subs	r3, #8
 8012e70:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8012e72:	69b8      	ldr	r0, [r7, #24]
 8012e74:	f7ff fdea 	bl	8012a4c <mem_to_ptr>
 8012e78:	4603      	mov	r3, r0
 8012e7a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8012e7c:	69bb      	ldr	r3, [r7, #24]
 8012e7e:	881a      	ldrh	r2, [r3, #0]
 8012e80:	8afb      	ldrh	r3, [r7, #22]
 8012e82:	1ad3      	subs	r3, r2, r3
 8012e84:	b29b      	uxth	r3, r3
 8012e86:	3b08      	subs	r3, #8
 8012e88:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8012e8a:	8bfa      	ldrh	r2, [r7, #30]
 8012e8c:	8abb      	ldrh	r3, [r7, #20]
 8012e8e:	429a      	cmp	r2, r3
 8012e90:	d906      	bls.n	8012ea0 <mem_trim+0xb0>
 8012e92:	4b55      	ldr	r3, [pc, #340]	@ (8012fe8 <mem_trim+0x1f8>)
 8012e94:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8012e98:	4956      	ldr	r1, [pc, #344]	@ (8012ff4 <mem_trim+0x204>)
 8012e9a:	4855      	ldr	r0, [pc, #340]	@ (8012ff0 <mem_trim+0x200>)
 8012e9c:	f00b f9f6 	bl	801e28c <iprintf>
  if (newsize > size) {
 8012ea0:	8bfa      	ldrh	r2, [r7, #30]
 8012ea2:	8abb      	ldrh	r3, [r7, #20]
 8012ea4:	429a      	cmp	r2, r3
 8012ea6:	d901      	bls.n	8012eac <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8012ea8:	2300      	movs	r3, #0
 8012eaa:	e095      	b.n	8012fd8 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8012eac:	8bfa      	ldrh	r2, [r7, #30]
 8012eae:	8abb      	ldrh	r3, [r7, #20]
 8012eb0:	429a      	cmp	r2, r3
 8012eb2:	d101      	bne.n	8012eb8 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	e08f      	b.n	8012fd8 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8012eb8:	484f      	ldr	r0, [pc, #316]	@ (8012ff8 <mem_trim+0x208>)
 8012eba:	f00a fae5 	bl	801d488 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8012ebe:	69bb      	ldr	r3, [r7, #24]
 8012ec0:	881b      	ldrh	r3, [r3, #0]
 8012ec2:	4618      	mov	r0, r3
 8012ec4:	f7ff fdb0 	bl	8012a28 <ptr_to_mem>
 8012ec8:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8012eca:	693b      	ldr	r3, [r7, #16]
 8012ecc:	791b      	ldrb	r3, [r3, #4]
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	d13f      	bne.n	8012f52 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8012ed2:	69bb      	ldr	r3, [r7, #24]
 8012ed4:	881b      	ldrh	r3, [r3, #0]
 8012ed6:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8012eda:	d106      	bne.n	8012eea <mem_trim+0xfa>
 8012edc:	4b42      	ldr	r3, [pc, #264]	@ (8012fe8 <mem_trim+0x1f8>)
 8012ede:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8012ee2:	4946      	ldr	r1, [pc, #280]	@ (8012ffc <mem_trim+0x20c>)
 8012ee4:	4842      	ldr	r0, [pc, #264]	@ (8012ff0 <mem_trim+0x200>)
 8012ee6:	f00b f9d1 	bl	801e28c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8012eea:	693b      	ldr	r3, [r7, #16]
 8012eec:	881b      	ldrh	r3, [r3, #0]
 8012eee:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8012ef0:	8afa      	ldrh	r2, [r7, #22]
 8012ef2:	8bfb      	ldrh	r3, [r7, #30]
 8012ef4:	4413      	add	r3, r2
 8012ef6:	b29b      	uxth	r3, r3
 8012ef8:	3308      	adds	r3, #8
 8012efa:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8012efc:	4b40      	ldr	r3, [pc, #256]	@ (8013000 <mem_trim+0x210>)
 8012efe:	681b      	ldr	r3, [r3, #0]
 8012f00:	693a      	ldr	r2, [r7, #16]
 8012f02:	429a      	cmp	r2, r3
 8012f04:	d106      	bne.n	8012f14 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8012f06:	89fb      	ldrh	r3, [r7, #14]
 8012f08:	4618      	mov	r0, r3
 8012f0a:	f7ff fd8d 	bl	8012a28 <ptr_to_mem>
 8012f0e:	4603      	mov	r3, r0
 8012f10:	4a3b      	ldr	r2, [pc, #236]	@ (8013000 <mem_trim+0x210>)
 8012f12:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8012f14:	89fb      	ldrh	r3, [r7, #14]
 8012f16:	4618      	mov	r0, r3
 8012f18:	f7ff fd86 	bl	8012a28 <ptr_to_mem>
 8012f1c:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8012f1e:	693b      	ldr	r3, [r7, #16]
 8012f20:	2200      	movs	r2, #0
 8012f22:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8012f24:	693b      	ldr	r3, [r7, #16]
 8012f26:	89ba      	ldrh	r2, [r7, #12]
 8012f28:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8012f2a:	693b      	ldr	r3, [r7, #16]
 8012f2c:	8afa      	ldrh	r2, [r7, #22]
 8012f2e:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8012f30:	69bb      	ldr	r3, [r7, #24]
 8012f32:	89fa      	ldrh	r2, [r7, #14]
 8012f34:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8012f36:	693b      	ldr	r3, [r7, #16]
 8012f38:	881b      	ldrh	r3, [r3, #0]
 8012f3a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8012f3e:	d047      	beq.n	8012fd0 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8012f40:	693b      	ldr	r3, [r7, #16]
 8012f42:	881b      	ldrh	r3, [r3, #0]
 8012f44:	4618      	mov	r0, r3
 8012f46:	f7ff fd6f 	bl	8012a28 <ptr_to_mem>
 8012f4a:	4602      	mov	r2, r0
 8012f4c:	89fb      	ldrh	r3, [r7, #14]
 8012f4e:	8053      	strh	r3, [r2, #2]
 8012f50:	e03e      	b.n	8012fd0 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8012f52:	8bfb      	ldrh	r3, [r7, #30]
 8012f54:	f103 0214 	add.w	r2, r3, #20
 8012f58:	8abb      	ldrh	r3, [r7, #20]
 8012f5a:	429a      	cmp	r2, r3
 8012f5c:	d838      	bhi.n	8012fd0 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8012f5e:	8afa      	ldrh	r2, [r7, #22]
 8012f60:	8bfb      	ldrh	r3, [r7, #30]
 8012f62:	4413      	add	r3, r2
 8012f64:	b29b      	uxth	r3, r3
 8012f66:	3308      	adds	r3, #8
 8012f68:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8012f6a:	69bb      	ldr	r3, [r7, #24]
 8012f6c:	881b      	ldrh	r3, [r3, #0]
 8012f6e:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8012f72:	d106      	bne.n	8012f82 <mem_trim+0x192>
 8012f74:	4b1c      	ldr	r3, [pc, #112]	@ (8012fe8 <mem_trim+0x1f8>)
 8012f76:	f240 3216 	movw	r2, #790	@ 0x316
 8012f7a:	4920      	ldr	r1, [pc, #128]	@ (8012ffc <mem_trim+0x20c>)
 8012f7c:	481c      	ldr	r0, [pc, #112]	@ (8012ff0 <mem_trim+0x200>)
 8012f7e:	f00b f985 	bl	801e28c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8012f82:	89fb      	ldrh	r3, [r7, #14]
 8012f84:	4618      	mov	r0, r3
 8012f86:	f7ff fd4f 	bl	8012a28 <ptr_to_mem>
 8012f8a:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8012f8c:	4b1c      	ldr	r3, [pc, #112]	@ (8013000 <mem_trim+0x210>)
 8012f8e:	681b      	ldr	r3, [r3, #0]
 8012f90:	693a      	ldr	r2, [r7, #16]
 8012f92:	429a      	cmp	r2, r3
 8012f94:	d202      	bcs.n	8012f9c <mem_trim+0x1ac>
      lfree = mem2;
 8012f96:	4a1a      	ldr	r2, [pc, #104]	@ (8013000 <mem_trim+0x210>)
 8012f98:	693b      	ldr	r3, [r7, #16]
 8012f9a:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8012f9c:	693b      	ldr	r3, [r7, #16]
 8012f9e:	2200      	movs	r2, #0
 8012fa0:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8012fa2:	69bb      	ldr	r3, [r7, #24]
 8012fa4:	881a      	ldrh	r2, [r3, #0]
 8012fa6:	693b      	ldr	r3, [r7, #16]
 8012fa8:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8012faa:	693b      	ldr	r3, [r7, #16]
 8012fac:	8afa      	ldrh	r2, [r7, #22]
 8012fae:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8012fb0:	69bb      	ldr	r3, [r7, #24]
 8012fb2:	89fa      	ldrh	r2, [r7, #14]
 8012fb4:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8012fb6:	693b      	ldr	r3, [r7, #16]
 8012fb8:	881b      	ldrh	r3, [r3, #0]
 8012fba:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8012fbe:	d007      	beq.n	8012fd0 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8012fc0:	693b      	ldr	r3, [r7, #16]
 8012fc2:	881b      	ldrh	r3, [r3, #0]
 8012fc4:	4618      	mov	r0, r3
 8012fc6:	f7ff fd2f 	bl	8012a28 <ptr_to_mem>
 8012fca:	4602      	mov	r2, r0
 8012fcc:	89fb      	ldrh	r3, [r7, #14]
 8012fce:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8012fd0:	4809      	ldr	r0, [pc, #36]	@ (8012ff8 <mem_trim+0x208>)
 8012fd2:	f00a fa68 	bl	801d4a6 <sys_mutex_unlock>
  return rmem;
 8012fd6:	687b      	ldr	r3, [r7, #4]
}
 8012fd8:	4618      	mov	r0, r3
 8012fda:	3720      	adds	r7, #32
 8012fdc:	46bd      	mov	sp, r7
 8012fde:	bd80      	pop	{r7, pc}
 8012fe0:	200099d8 	.word	0x200099d8
 8012fe4:	200099dc 	.word	0x200099dc
 8012fe8:	080213c4 	.word	0x080213c4
 8012fec:	08021550 	.word	0x08021550
 8012ff0:	0802140c 	.word	0x0802140c
 8012ff4:	08021568 	.word	0x08021568
 8012ff8:	200099e0 	.word	0x200099e0
 8012ffc:	08021588 	.word	0x08021588
 8013000:	200099e4 	.word	0x200099e4

08013004 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8013004:	b580      	push	{r7, lr}
 8013006:	b088      	sub	sp, #32
 8013008:	af00      	add	r7, sp, #0
 801300a:	4603      	mov	r3, r0
 801300c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 801300e:	88fb      	ldrh	r3, [r7, #6]
 8013010:	2b00      	cmp	r3, #0
 8013012:	d101      	bne.n	8013018 <mem_malloc+0x14>
    return NULL;
 8013014:	2300      	movs	r3, #0
 8013016:	e0e2      	b.n	80131de <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8013018:	88fb      	ldrh	r3, [r7, #6]
 801301a:	3303      	adds	r3, #3
 801301c:	b29b      	uxth	r3, r3
 801301e:	f023 0303 	bic.w	r3, r3, #3
 8013022:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8013024:	8bbb      	ldrh	r3, [r7, #28]
 8013026:	2b0b      	cmp	r3, #11
 8013028:	d801      	bhi.n	801302e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 801302a:	230c      	movs	r3, #12
 801302c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 801302e:	8bbb      	ldrh	r3, [r7, #28]
 8013030:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8013034:	d803      	bhi.n	801303e <mem_malloc+0x3a>
 8013036:	8bba      	ldrh	r2, [r7, #28]
 8013038:	88fb      	ldrh	r3, [r7, #6]
 801303a:	429a      	cmp	r2, r3
 801303c:	d201      	bcs.n	8013042 <mem_malloc+0x3e>
    return NULL;
 801303e:	2300      	movs	r3, #0
 8013040:	e0cd      	b.n	80131de <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8013042:	4869      	ldr	r0, [pc, #420]	@ (80131e8 <mem_malloc+0x1e4>)
 8013044:	f00a fa20 	bl	801d488 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8013048:	4b68      	ldr	r3, [pc, #416]	@ (80131ec <mem_malloc+0x1e8>)
 801304a:	681b      	ldr	r3, [r3, #0]
 801304c:	4618      	mov	r0, r3
 801304e:	f7ff fcfd 	bl	8012a4c <mem_to_ptr>
 8013052:	4603      	mov	r3, r0
 8013054:	83fb      	strh	r3, [r7, #30]
 8013056:	e0b7      	b.n	80131c8 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8013058:	8bfb      	ldrh	r3, [r7, #30]
 801305a:	4618      	mov	r0, r3
 801305c:	f7ff fce4 	bl	8012a28 <ptr_to_mem>
 8013060:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8013062:	697b      	ldr	r3, [r7, #20]
 8013064:	791b      	ldrb	r3, [r3, #4]
 8013066:	2b00      	cmp	r3, #0
 8013068:	f040 80a7 	bne.w	80131ba <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 801306c:	697b      	ldr	r3, [r7, #20]
 801306e:	881b      	ldrh	r3, [r3, #0]
 8013070:	461a      	mov	r2, r3
 8013072:	8bfb      	ldrh	r3, [r7, #30]
 8013074:	1ad3      	subs	r3, r2, r3
 8013076:	f1a3 0208 	sub.w	r2, r3, #8
 801307a:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 801307c:	429a      	cmp	r2, r3
 801307e:	f0c0 809c 	bcc.w	80131ba <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8013082:	697b      	ldr	r3, [r7, #20]
 8013084:	881b      	ldrh	r3, [r3, #0]
 8013086:	461a      	mov	r2, r3
 8013088:	8bfb      	ldrh	r3, [r7, #30]
 801308a:	1ad3      	subs	r3, r2, r3
 801308c:	f1a3 0208 	sub.w	r2, r3, #8
 8013090:	8bbb      	ldrh	r3, [r7, #28]
 8013092:	3314      	adds	r3, #20
 8013094:	429a      	cmp	r2, r3
 8013096:	d333      	bcc.n	8013100 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8013098:	8bfa      	ldrh	r2, [r7, #30]
 801309a:	8bbb      	ldrh	r3, [r7, #28]
 801309c:	4413      	add	r3, r2
 801309e:	b29b      	uxth	r3, r3
 80130a0:	3308      	adds	r3, #8
 80130a2:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80130a4:	8a7b      	ldrh	r3, [r7, #18]
 80130a6:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80130aa:	d106      	bne.n	80130ba <mem_malloc+0xb6>
 80130ac:	4b50      	ldr	r3, [pc, #320]	@ (80131f0 <mem_malloc+0x1ec>)
 80130ae:	f240 3287 	movw	r2, #903	@ 0x387
 80130b2:	4950      	ldr	r1, [pc, #320]	@ (80131f4 <mem_malloc+0x1f0>)
 80130b4:	4850      	ldr	r0, [pc, #320]	@ (80131f8 <mem_malloc+0x1f4>)
 80130b6:	f00b f8e9 	bl	801e28c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80130ba:	8a7b      	ldrh	r3, [r7, #18]
 80130bc:	4618      	mov	r0, r3
 80130be:	f7ff fcb3 	bl	8012a28 <ptr_to_mem>
 80130c2:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80130c4:	68fb      	ldr	r3, [r7, #12]
 80130c6:	2200      	movs	r2, #0
 80130c8:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80130ca:	697b      	ldr	r3, [r7, #20]
 80130cc:	881a      	ldrh	r2, [r3, #0]
 80130ce:	68fb      	ldr	r3, [r7, #12]
 80130d0:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80130d2:	68fb      	ldr	r3, [r7, #12]
 80130d4:	8bfa      	ldrh	r2, [r7, #30]
 80130d6:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80130d8:	697b      	ldr	r3, [r7, #20]
 80130da:	8a7a      	ldrh	r2, [r7, #18]
 80130dc:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80130de:	697b      	ldr	r3, [r7, #20]
 80130e0:	2201      	movs	r2, #1
 80130e2:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80130e4:	68fb      	ldr	r3, [r7, #12]
 80130e6:	881b      	ldrh	r3, [r3, #0]
 80130e8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80130ec:	d00b      	beq.n	8013106 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80130ee:	68fb      	ldr	r3, [r7, #12]
 80130f0:	881b      	ldrh	r3, [r3, #0]
 80130f2:	4618      	mov	r0, r3
 80130f4:	f7ff fc98 	bl	8012a28 <ptr_to_mem>
 80130f8:	4602      	mov	r2, r0
 80130fa:	8a7b      	ldrh	r3, [r7, #18]
 80130fc:	8053      	strh	r3, [r2, #2]
 80130fe:	e002      	b.n	8013106 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8013100:	697b      	ldr	r3, [r7, #20]
 8013102:	2201      	movs	r2, #1
 8013104:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8013106:	4b39      	ldr	r3, [pc, #228]	@ (80131ec <mem_malloc+0x1e8>)
 8013108:	681b      	ldr	r3, [r3, #0]
 801310a:	697a      	ldr	r2, [r7, #20]
 801310c:	429a      	cmp	r2, r3
 801310e:	d127      	bne.n	8013160 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8013110:	4b36      	ldr	r3, [pc, #216]	@ (80131ec <mem_malloc+0x1e8>)
 8013112:	681b      	ldr	r3, [r3, #0]
 8013114:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8013116:	e005      	b.n	8013124 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8013118:	69bb      	ldr	r3, [r7, #24]
 801311a:	881b      	ldrh	r3, [r3, #0]
 801311c:	4618      	mov	r0, r3
 801311e:	f7ff fc83 	bl	8012a28 <ptr_to_mem>
 8013122:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8013124:	69bb      	ldr	r3, [r7, #24]
 8013126:	791b      	ldrb	r3, [r3, #4]
 8013128:	2b00      	cmp	r3, #0
 801312a:	d004      	beq.n	8013136 <mem_malloc+0x132>
 801312c:	4b33      	ldr	r3, [pc, #204]	@ (80131fc <mem_malloc+0x1f8>)
 801312e:	681b      	ldr	r3, [r3, #0]
 8013130:	69ba      	ldr	r2, [r7, #24]
 8013132:	429a      	cmp	r2, r3
 8013134:	d1f0      	bne.n	8013118 <mem_malloc+0x114>
          }
          lfree = cur;
 8013136:	4a2d      	ldr	r2, [pc, #180]	@ (80131ec <mem_malloc+0x1e8>)
 8013138:	69bb      	ldr	r3, [r7, #24]
 801313a:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 801313c:	4b2b      	ldr	r3, [pc, #172]	@ (80131ec <mem_malloc+0x1e8>)
 801313e:	681a      	ldr	r2, [r3, #0]
 8013140:	4b2e      	ldr	r3, [pc, #184]	@ (80131fc <mem_malloc+0x1f8>)
 8013142:	681b      	ldr	r3, [r3, #0]
 8013144:	429a      	cmp	r2, r3
 8013146:	d00b      	beq.n	8013160 <mem_malloc+0x15c>
 8013148:	4b28      	ldr	r3, [pc, #160]	@ (80131ec <mem_malloc+0x1e8>)
 801314a:	681b      	ldr	r3, [r3, #0]
 801314c:	791b      	ldrb	r3, [r3, #4]
 801314e:	2b00      	cmp	r3, #0
 8013150:	d006      	beq.n	8013160 <mem_malloc+0x15c>
 8013152:	4b27      	ldr	r3, [pc, #156]	@ (80131f0 <mem_malloc+0x1ec>)
 8013154:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8013158:	4929      	ldr	r1, [pc, #164]	@ (8013200 <mem_malloc+0x1fc>)
 801315a:	4827      	ldr	r0, [pc, #156]	@ (80131f8 <mem_malloc+0x1f4>)
 801315c:	f00b f896 	bl	801e28c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8013160:	4821      	ldr	r0, [pc, #132]	@ (80131e8 <mem_malloc+0x1e4>)
 8013162:	f00a f9a0 	bl	801d4a6 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8013166:	8bba      	ldrh	r2, [r7, #28]
 8013168:	697b      	ldr	r3, [r7, #20]
 801316a:	4413      	add	r3, r2
 801316c:	3308      	adds	r3, #8
 801316e:	4a23      	ldr	r2, [pc, #140]	@ (80131fc <mem_malloc+0x1f8>)
 8013170:	6812      	ldr	r2, [r2, #0]
 8013172:	4293      	cmp	r3, r2
 8013174:	d906      	bls.n	8013184 <mem_malloc+0x180>
 8013176:	4b1e      	ldr	r3, [pc, #120]	@ (80131f0 <mem_malloc+0x1ec>)
 8013178:	f240 32b9 	movw	r2, #953	@ 0x3b9
 801317c:	4921      	ldr	r1, [pc, #132]	@ (8013204 <mem_malloc+0x200>)
 801317e:	481e      	ldr	r0, [pc, #120]	@ (80131f8 <mem_malloc+0x1f4>)
 8013180:	f00b f884 	bl	801e28c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8013184:	697b      	ldr	r3, [r7, #20]
 8013186:	f003 0303 	and.w	r3, r3, #3
 801318a:	2b00      	cmp	r3, #0
 801318c:	d006      	beq.n	801319c <mem_malloc+0x198>
 801318e:	4b18      	ldr	r3, [pc, #96]	@ (80131f0 <mem_malloc+0x1ec>)
 8013190:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8013194:	491c      	ldr	r1, [pc, #112]	@ (8013208 <mem_malloc+0x204>)
 8013196:	4818      	ldr	r0, [pc, #96]	@ (80131f8 <mem_malloc+0x1f4>)
 8013198:	f00b f878 	bl	801e28c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 801319c:	697b      	ldr	r3, [r7, #20]
 801319e:	f003 0303 	and.w	r3, r3, #3
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	d006      	beq.n	80131b4 <mem_malloc+0x1b0>
 80131a6:	4b12      	ldr	r3, [pc, #72]	@ (80131f0 <mem_malloc+0x1ec>)
 80131a8:	f240 32bd 	movw	r2, #957	@ 0x3bd
 80131ac:	4917      	ldr	r1, [pc, #92]	@ (801320c <mem_malloc+0x208>)
 80131ae:	4812      	ldr	r0, [pc, #72]	@ (80131f8 <mem_malloc+0x1f4>)
 80131b0:	f00b f86c 	bl	801e28c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80131b4:	697b      	ldr	r3, [r7, #20]
 80131b6:	3308      	adds	r3, #8
 80131b8:	e011      	b.n	80131de <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 80131ba:	8bfb      	ldrh	r3, [r7, #30]
 80131bc:	4618      	mov	r0, r3
 80131be:	f7ff fc33 	bl	8012a28 <ptr_to_mem>
 80131c2:	4603      	mov	r3, r0
 80131c4:	881b      	ldrh	r3, [r3, #0]
 80131c6:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80131c8:	8bfa      	ldrh	r2, [r7, #30]
 80131ca:	8bbb      	ldrh	r3, [r7, #28]
 80131cc:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 80131d0:	429a      	cmp	r2, r3
 80131d2:	f4ff af41 	bcc.w	8013058 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 80131d6:	4804      	ldr	r0, [pc, #16]	@ (80131e8 <mem_malloc+0x1e4>)
 80131d8:	f00a f965 	bl	801d4a6 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80131dc:	2300      	movs	r3, #0
}
 80131de:	4618      	mov	r0, r3
 80131e0:	3720      	adds	r7, #32
 80131e2:	46bd      	mov	sp, r7
 80131e4:	bd80      	pop	{r7, pc}
 80131e6:	bf00      	nop
 80131e8:	200099e0 	.word	0x200099e0
 80131ec:	200099e4 	.word	0x200099e4
 80131f0:	080213c4 	.word	0x080213c4
 80131f4:	08021588 	.word	0x08021588
 80131f8:	0802140c 	.word	0x0802140c
 80131fc:	200099dc 	.word	0x200099dc
 8013200:	0802159c 	.word	0x0802159c
 8013204:	080215b8 	.word	0x080215b8
 8013208:	080215e8 	.word	0x080215e8
 801320c:	08021618 	.word	0x08021618

08013210 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8013210:	b480      	push	{r7}
 8013212:	b085      	sub	sp, #20
 8013214:	af00      	add	r7, sp, #0
 8013216:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	689b      	ldr	r3, [r3, #8]
 801321c:	2200      	movs	r2, #0
 801321e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	685b      	ldr	r3, [r3, #4]
 8013224:	3303      	adds	r3, #3
 8013226:	f023 0303 	bic.w	r3, r3, #3
 801322a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 801322c:	2300      	movs	r3, #0
 801322e:	60fb      	str	r3, [r7, #12]
 8013230:	e011      	b.n	8013256 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	689b      	ldr	r3, [r3, #8]
 8013236:	681a      	ldr	r2, [r3, #0]
 8013238:	68bb      	ldr	r3, [r7, #8]
 801323a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	689b      	ldr	r3, [r3, #8]
 8013240:	68ba      	ldr	r2, [r7, #8]
 8013242:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	881b      	ldrh	r3, [r3, #0]
 8013248:	461a      	mov	r2, r3
 801324a:	68bb      	ldr	r3, [r7, #8]
 801324c:	4413      	add	r3, r2
 801324e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8013250:	68fb      	ldr	r3, [r7, #12]
 8013252:	3301      	adds	r3, #1
 8013254:	60fb      	str	r3, [r7, #12]
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	885b      	ldrh	r3, [r3, #2]
 801325a:	461a      	mov	r2, r3
 801325c:	68fb      	ldr	r3, [r7, #12]
 801325e:	4293      	cmp	r3, r2
 8013260:	dbe7      	blt.n	8013232 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8013262:	bf00      	nop
 8013264:	bf00      	nop
 8013266:	3714      	adds	r7, #20
 8013268:	46bd      	mov	sp, r7
 801326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801326e:	4770      	bx	lr

08013270 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8013270:	b580      	push	{r7, lr}
 8013272:	b082      	sub	sp, #8
 8013274:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8013276:	2300      	movs	r3, #0
 8013278:	80fb      	strh	r3, [r7, #6]
 801327a:	e009      	b.n	8013290 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 801327c:	88fb      	ldrh	r3, [r7, #6]
 801327e:	4a08      	ldr	r2, [pc, #32]	@ (80132a0 <memp_init+0x30>)
 8013280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013284:	4618      	mov	r0, r3
 8013286:	f7ff ffc3 	bl	8013210 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801328a:	88fb      	ldrh	r3, [r7, #6]
 801328c:	3301      	adds	r3, #1
 801328e:	80fb      	strh	r3, [r7, #6]
 8013290:	88fb      	ldrh	r3, [r7, #6]
 8013292:	2b0c      	cmp	r3, #12
 8013294:	d9f2      	bls.n	801327c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8013296:	bf00      	nop
 8013298:	bf00      	nop
 801329a:	3708      	adds	r7, #8
 801329c:	46bd      	mov	sp, r7
 801329e:	bd80      	pop	{r7, pc}
 80132a0:	08023e7c 	.word	0x08023e7c

080132a4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80132a4:	b580      	push	{r7, lr}
 80132a6:	b084      	sub	sp, #16
 80132a8:	af00      	add	r7, sp, #0
 80132aa:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 80132ac:	f00a f92e 	bl	801d50c <sys_arch_protect>
 80132b0:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	689b      	ldr	r3, [r3, #8]
 80132b6:	681b      	ldr	r3, [r3, #0]
 80132b8:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80132ba:	68bb      	ldr	r3, [r7, #8]
 80132bc:	2b00      	cmp	r3, #0
 80132be:	d015      	beq.n	80132ec <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	689b      	ldr	r3, [r3, #8]
 80132c4:	68ba      	ldr	r2, [r7, #8]
 80132c6:	6812      	ldr	r2, [r2, #0]
 80132c8:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80132ca:	68bb      	ldr	r3, [r7, #8]
 80132cc:	f003 0303 	and.w	r3, r3, #3
 80132d0:	2b00      	cmp	r3, #0
 80132d2:	d006      	beq.n	80132e2 <do_memp_malloc_pool+0x3e>
 80132d4:	4b09      	ldr	r3, [pc, #36]	@ (80132fc <do_memp_malloc_pool+0x58>)
 80132d6:	f44f 728c 	mov.w	r2, #280	@ 0x118
 80132da:	4909      	ldr	r1, [pc, #36]	@ (8013300 <do_memp_malloc_pool+0x5c>)
 80132dc:	4809      	ldr	r0, [pc, #36]	@ (8013304 <do_memp_malloc_pool+0x60>)
 80132de:	f00a ffd5 	bl	801e28c <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80132e2:	68f8      	ldr	r0, [r7, #12]
 80132e4:	f00a f920 	bl	801d528 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80132e8:	68bb      	ldr	r3, [r7, #8]
 80132ea:	e003      	b.n	80132f4 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80132ec:	68f8      	ldr	r0, [r7, #12]
 80132ee:	f00a f91b 	bl	801d528 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80132f2:	2300      	movs	r3, #0
}
 80132f4:	4618      	mov	r0, r3
 80132f6:	3710      	adds	r7, #16
 80132f8:	46bd      	mov	sp, r7
 80132fa:	bd80      	pop	{r7, pc}
 80132fc:	0802163c 	.word	0x0802163c
 8013300:	0802166c 	.word	0x0802166c
 8013304:	08021690 	.word	0x08021690

08013308 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8013308:	b580      	push	{r7, lr}
 801330a:	b082      	sub	sp, #8
 801330c:	af00      	add	r7, sp, #0
 801330e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	2b00      	cmp	r3, #0
 8013314:	d106      	bne.n	8013324 <memp_malloc_pool+0x1c>
 8013316:	4b0a      	ldr	r3, [pc, #40]	@ (8013340 <memp_malloc_pool+0x38>)
 8013318:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 801331c:	4909      	ldr	r1, [pc, #36]	@ (8013344 <memp_malloc_pool+0x3c>)
 801331e:	480a      	ldr	r0, [pc, #40]	@ (8013348 <memp_malloc_pool+0x40>)
 8013320:	f00a ffb4 	bl	801e28c <iprintf>
  if (desc == NULL) {
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	2b00      	cmp	r3, #0
 8013328:	d101      	bne.n	801332e <memp_malloc_pool+0x26>
    return NULL;
 801332a:	2300      	movs	r3, #0
 801332c:	e003      	b.n	8013336 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 801332e:	6878      	ldr	r0, [r7, #4]
 8013330:	f7ff ffb8 	bl	80132a4 <do_memp_malloc_pool>
 8013334:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8013336:	4618      	mov	r0, r3
 8013338:	3708      	adds	r7, #8
 801333a:	46bd      	mov	sp, r7
 801333c:	bd80      	pop	{r7, pc}
 801333e:	bf00      	nop
 8013340:	0802163c 	.word	0x0802163c
 8013344:	080216b8 	.word	0x080216b8
 8013348:	08021690 	.word	0x08021690

0801334c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 801334c:	b580      	push	{r7, lr}
 801334e:	b084      	sub	sp, #16
 8013350:	af00      	add	r7, sp, #0
 8013352:	4603      	mov	r3, r0
 8013354:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8013356:	79fb      	ldrb	r3, [r7, #7]
 8013358:	2b0c      	cmp	r3, #12
 801335a:	d908      	bls.n	801336e <memp_malloc+0x22>
 801335c:	4b0a      	ldr	r3, [pc, #40]	@ (8013388 <memp_malloc+0x3c>)
 801335e:	f240 1257 	movw	r2, #343	@ 0x157
 8013362:	490a      	ldr	r1, [pc, #40]	@ (801338c <memp_malloc+0x40>)
 8013364:	480a      	ldr	r0, [pc, #40]	@ (8013390 <memp_malloc+0x44>)
 8013366:	f00a ff91 	bl	801e28c <iprintf>
 801336a:	2300      	movs	r3, #0
 801336c:	e008      	b.n	8013380 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 801336e:	79fb      	ldrb	r3, [r7, #7]
 8013370:	4a08      	ldr	r2, [pc, #32]	@ (8013394 <memp_malloc+0x48>)
 8013372:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013376:	4618      	mov	r0, r3
 8013378:	f7ff ff94 	bl	80132a4 <do_memp_malloc_pool>
 801337c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 801337e:	68fb      	ldr	r3, [r7, #12]
}
 8013380:	4618      	mov	r0, r3
 8013382:	3710      	adds	r7, #16
 8013384:	46bd      	mov	sp, r7
 8013386:	bd80      	pop	{r7, pc}
 8013388:	0802163c 	.word	0x0802163c
 801338c:	080216cc 	.word	0x080216cc
 8013390:	08021690 	.word	0x08021690
 8013394:	08023e7c 	.word	0x08023e7c

08013398 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8013398:	b580      	push	{r7, lr}
 801339a:	b084      	sub	sp, #16
 801339c:	af00      	add	r7, sp, #0
 801339e:	6078      	str	r0, [r7, #4]
 80133a0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80133a2:	683b      	ldr	r3, [r7, #0]
 80133a4:	f003 0303 	and.w	r3, r3, #3
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	d006      	beq.n	80133ba <do_memp_free_pool+0x22>
 80133ac:	4b0d      	ldr	r3, [pc, #52]	@ (80133e4 <do_memp_free_pool+0x4c>)
 80133ae:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 80133b2:	490d      	ldr	r1, [pc, #52]	@ (80133e8 <do_memp_free_pool+0x50>)
 80133b4:	480d      	ldr	r0, [pc, #52]	@ (80133ec <do_memp_free_pool+0x54>)
 80133b6:	f00a ff69 	bl	801e28c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80133ba:	683b      	ldr	r3, [r7, #0]
 80133bc:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 80133be:	f00a f8a5 	bl	801d50c <sys_arch_protect>
 80133c2:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	689b      	ldr	r3, [r3, #8]
 80133c8:	681a      	ldr	r2, [r3, #0]
 80133ca:	68fb      	ldr	r3, [r7, #12]
 80133cc:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	689b      	ldr	r3, [r3, #8]
 80133d2:	68fa      	ldr	r2, [r7, #12]
 80133d4:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 80133d6:	68b8      	ldr	r0, [r7, #8]
 80133d8:	f00a f8a6 	bl	801d528 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 80133dc:	bf00      	nop
 80133de:	3710      	adds	r7, #16
 80133e0:	46bd      	mov	sp, r7
 80133e2:	bd80      	pop	{r7, pc}
 80133e4:	0802163c 	.word	0x0802163c
 80133e8:	080216ec 	.word	0x080216ec
 80133ec:	08021690 	.word	0x08021690

080133f0 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80133f0:	b580      	push	{r7, lr}
 80133f2:	b082      	sub	sp, #8
 80133f4:	af00      	add	r7, sp, #0
 80133f6:	6078      	str	r0, [r7, #4]
 80133f8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	d106      	bne.n	801340e <memp_free_pool+0x1e>
 8013400:	4b0a      	ldr	r3, [pc, #40]	@ (801342c <memp_free_pool+0x3c>)
 8013402:	f240 1295 	movw	r2, #405	@ 0x195
 8013406:	490a      	ldr	r1, [pc, #40]	@ (8013430 <memp_free_pool+0x40>)
 8013408:	480a      	ldr	r0, [pc, #40]	@ (8013434 <memp_free_pool+0x44>)
 801340a:	f00a ff3f 	bl	801e28c <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	2b00      	cmp	r3, #0
 8013412:	d007      	beq.n	8013424 <memp_free_pool+0x34>
 8013414:	683b      	ldr	r3, [r7, #0]
 8013416:	2b00      	cmp	r3, #0
 8013418:	d004      	beq.n	8013424 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 801341a:	6839      	ldr	r1, [r7, #0]
 801341c:	6878      	ldr	r0, [r7, #4]
 801341e:	f7ff ffbb 	bl	8013398 <do_memp_free_pool>
 8013422:	e000      	b.n	8013426 <memp_free_pool+0x36>
    return;
 8013424:	bf00      	nop
}
 8013426:	3708      	adds	r7, #8
 8013428:	46bd      	mov	sp, r7
 801342a:	bd80      	pop	{r7, pc}
 801342c:	0802163c 	.word	0x0802163c
 8013430:	080216b8 	.word	0x080216b8
 8013434:	08021690 	.word	0x08021690

08013438 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8013438:	b580      	push	{r7, lr}
 801343a:	b082      	sub	sp, #8
 801343c:	af00      	add	r7, sp, #0
 801343e:	4603      	mov	r3, r0
 8013440:	6039      	str	r1, [r7, #0]
 8013442:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8013444:	79fb      	ldrb	r3, [r7, #7]
 8013446:	2b0c      	cmp	r3, #12
 8013448:	d907      	bls.n	801345a <memp_free+0x22>
 801344a:	4b0c      	ldr	r3, [pc, #48]	@ (801347c <memp_free+0x44>)
 801344c:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8013450:	490b      	ldr	r1, [pc, #44]	@ (8013480 <memp_free+0x48>)
 8013452:	480c      	ldr	r0, [pc, #48]	@ (8013484 <memp_free+0x4c>)
 8013454:	f00a ff1a 	bl	801e28c <iprintf>
 8013458:	e00c      	b.n	8013474 <memp_free+0x3c>

  if (mem == NULL) {
 801345a:	683b      	ldr	r3, [r7, #0]
 801345c:	2b00      	cmp	r3, #0
 801345e:	d008      	beq.n	8013472 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8013460:	79fb      	ldrb	r3, [r7, #7]
 8013462:	4a09      	ldr	r2, [pc, #36]	@ (8013488 <memp_free+0x50>)
 8013464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013468:	6839      	ldr	r1, [r7, #0]
 801346a:	4618      	mov	r0, r3
 801346c:	f7ff ff94 	bl	8013398 <do_memp_free_pool>
 8013470:	e000      	b.n	8013474 <memp_free+0x3c>
    return;
 8013472:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8013474:	3708      	adds	r7, #8
 8013476:	46bd      	mov	sp, r7
 8013478:	bd80      	pop	{r7, pc}
 801347a:	bf00      	nop
 801347c:	0802163c 	.word	0x0802163c
 8013480:	0802170c 	.word	0x0802170c
 8013484:	08021690 	.word	0x08021690
 8013488:	08023e7c 	.word	0x08023e7c

0801348c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 801348c:	b480      	push	{r7}
 801348e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8013490:	bf00      	nop
 8013492:	46bd      	mov	sp, r7
 8013494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013498:	4770      	bx	lr
	...

0801349c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 801349c:	b580      	push	{r7, lr}
 801349e:	b086      	sub	sp, #24
 80134a0:	af00      	add	r7, sp, #0
 80134a2:	60f8      	str	r0, [r7, #12]
 80134a4:	60b9      	str	r1, [r7, #8]
 80134a6:	607a      	str	r2, [r7, #4]
 80134a8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80134aa:	68fb      	ldr	r3, [r7, #12]
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	d108      	bne.n	80134c2 <netif_add+0x26>
 80134b0:	4b57      	ldr	r3, [pc, #348]	@ (8013610 <netif_add+0x174>)
 80134b2:	f240 1227 	movw	r2, #295	@ 0x127
 80134b6:	4957      	ldr	r1, [pc, #348]	@ (8013614 <netif_add+0x178>)
 80134b8:	4857      	ldr	r0, [pc, #348]	@ (8013618 <netif_add+0x17c>)
 80134ba:	f00a fee7 	bl	801e28c <iprintf>
 80134be:	2300      	movs	r3, #0
 80134c0:	e0a2      	b.n	8013608 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80134c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80134c4:	2b00      	cmp	r3, #0
 80134c6:	d108      	bne.n	80134da <netif_add+0x3e>
 80134c8:	4b51      	ldr	r3, [pc, #324]	@ (8013610 <netif_add+0x174>)
 80134ca:	f44f 7294 	mov.w	r2, #296	@ 0x128
 80134ce:	4953      	ldr	r1, [pc, #332]	@ (801361c <netif_add+0x180>)
 80134d0:	4851      	ldr	r0, [pc, #324]	@ (8013618 <netif_add+0x17c>)
 80134d2:	f00a fedb 	bl	801e28c <iprintf>
 80134d6:	2300      	movs	r3, #0
 80134d8:	e096      	b.n	8013608 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80134da:	68bb      	ldr	r3, [r7, #8]
 80134dc:	2b00      	cmp	r3, #0
 80134de:	d101      	bne.n	80134e4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80134e0:	4b4f      	ldr	r3, [pc, #316]	@ (8013620 <netif_add+0x184>)
 80134e2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	d101      	bne.n	80134ee <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80134ea:	4b4d      	ldr	r3, [pc, #308]	@ (8013620 <netif_add+0x184>)
 80134ec:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80134ee:	683b      	ldr	r3, [r7, #0]
 80134f0:	2b00      	cmp	r3, #0
 80134f2:	d101      	bne.n	80134f8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80134f4:	4b4a      	ldr	r3, [pc, #296]	@ (8013620 <netif_add+0x184>)
 80134f6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80134f8:	68fb      	ldr	r3, [r7, #12]
 80134fa:	2200      	movs	r2, #0
 80134fc:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80134fe:	68fb      	ldr	r3, [r7, #12]
 8013500:	2200      	movs	r2, #0
 8013502:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8013504:	68fb      	ldr	r3, [r7, #12]
 8013506:	2200      	movs	r2, #0
 8013508:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 801350a:	68fb      	ldr	r3, [r7, #12]
 801350c:	4a45      	ldr	r2, [pc, #276]	@ (8013624 <netif_add+0x188>)
 801350e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8013510:	68fb      	ldr	r3, [r7, #12]
 8013512:	2200      	movs	r2, #0
 8013514:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 8013516:	68fb      	ldr	r3, [r7, #12]
 8013518:	2200      	movs	r2, #0
 801351a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 801351e:	68fb      	ldr	r3, [r7, #12]
 8013520:	2200      	movs	r2, #0
 8013522:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8013524:	68fb      	ldr	r3, [r7, #12]
 8013526:	6a3a      	ldr	r2, [r7, #32]
 8013528:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 801352a:	4b3f      	ldr	r3, [pc, #252]	@ (8013628 <netif_add+0x18c>)
 801352c:	781a      	ldrb	r2, [r3, #0]
 801352e:	68fb      	ldr	r3, [r7, #12]
 8013530:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 8013534:	68fb      	ldr	r3, [r7, #12]
 8013536:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013538:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 801353a:	683b      	ldr	r3, [r7, #0]
 801353c:	687a      	ldr	r2, [r7, #4]
 801353e:	68b9      	ldr	r1, [r7, #8]
 8013540:	68f8      	ldr	r0, [r7, #12]
 8013542:	f000 f913 	bl	801376c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8013546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013548:	68f8      	ldr	r0, [r7, #12]
 801354a:	4798      	blx	r3
 801354c:	4603      	mov	r3, r0
 801354e:	2b00      	cmp	r3, #0
 8013550:	d001      	beq.n	8013556 <netif_add+0xba>
    return NULL;
 8013552:	2300      	movs	r3, #0
 8013554:	e058      	b.n	8013608 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8013556:	68fb      	ldr	r3, [r7, #12]
 8013558:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801355c:	2bff      	cmp	r3, #255	@ 0xff
 801355e:	d103      	bne.n	8013568 <netif_add+0xcc>
        netif->num = 0;
 8013560:	68fb      	ldr	r3, [r7, #12]
 8013562:	2200      	movs	r2, #0
 8013564:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 8013568:	2300      	movs	r3, #0
 801356a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801356c:	4b2f      	ldr	r3, [pc, #188]	@ (801362c <netif_add+0x190>)
 801356e:	681b      	ldr	r3, [r3, #0]
 8013570:	617b      	str	r3, [r7, #20]
 8013572:	e02b      	b.n	80135cc <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8013574:	697a      	ldr	r2, [r7, #20]
 8013576:	68fb      	ldr	r3, [r7, #12]
 8013578:	429a      	cmp	r2, r3
 801357a:	d106      	bne.n	801358a <netif_add+0xee>
 801357c:	4b24      	ldr	r3, [pc, #144]	@ (8013610 <netif_add+0x174>)
 801357e:	f240 128b 	movw	r2, #395	@ 0x18b
 8013582:	492b      	ldr	r1, [pc, #172]	@ (8013630 <netif_add+0x194>)
 8013584:	4824      	ldr	r0, [pc, #144]	@ (8013618 <netif_add+0x17c>)
 8013586:	f00a fe81 	bl	801e28c <iprintf>
        num_netifs++;
 801358a:	693b      	ldr	r3, [r7, #16]
 801358c:	3301      	adds	r3, #1
 801358e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8013590:	693b      	ldr	r3, [r7, #16]
 8013592:	2bff      	cmp	r3, #255	@ 0xff
 8013594:	dd06      	ble.n	80135a4 <netif_add+0x108>
 8013596:	4b1e      	ldr	r3, [pc, #120]	@ (8013610 <netif_add+0x174>)
 8013598:	f240 128d 	movw	r2, #397	@ 0x18d
 801359c:	4925      	ldr	r1, [pc, #148]	@ (8013634 <netif_add+0x198>)
 801359e:	481e      	ldr	r0, [pc, #120]	@ (8013618 <netif_add+0x17c>)
 80135a0:	f00a fe74 	bl	801e28c <iprintf>
        if (netif2->num == netif->num) {
 80135a4:	697b      	ldr	r3, [r7, #20]
 80135a6:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 80135aa:	68fb      	ldr	r3, [r7, #12]
 80135ac:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80135b0:	429a      	cmp	r2, r3
 80135b2:	d108      	bne.n	80135c6 <netif_add+0x12a>
          netif->num++;
 80135b4:	68fb      	ldr	r3, [r7, #12]
 80135b6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80135ba:	3301      	adds	r3, #1
 80135bc:	b2da      	uxtb	r2, r3
 80135be:	68fb      	ldr	r3, [r7, #12]
 80135c0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 80135c4:	e005      	b.n	80135d2 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80135c6:	697b      	ldr	r3, [r7, #20]
 80135c8:	681b      	ldr	r3, [r3, #0]
 80135ca:	617b      	str	r3, [r7, #20]
 80135cc:	697b      	ldr	r3, [r7, #20]
 80135ce:	2b00      	cmp	r3, #0
 80135d0:	d1d0      	bne.n	8013574 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 80135d2:	697b      	ldr	r3, [r7, #20]
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	d1be      	bne.n	8013556 <netif_add+0xba>
  }
  if (netif->num == 254) {
 80135d8:	68fb      	ldr	r3, [r7, #12]
 80135da:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80135de:	2bfe      	cmp	r3, #254	@ 0xfe
 80135e0:	d103      	bne.n	80135ea <netif_add+0x14e>
    netif_num = 0;
 80135e2:	4b11      	ldr	r3, [pc, #68]	@ (8013628 <netif_add+0x18c>)
 80135e4:	2200      	movs	r2, #0
 80135e6:	701a      	strb	r2, [r3, #0]
 80135e8:	e006      	b.n	80135f8 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80135ea:	68fb      	ldr	r3, [r7, #12]
 80135ec:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80135f0:	3301      	adds	r3, #1
 80135f2:	b2da      	uxtb	r2, r3
 80135f4:	4b0c      	ldr	r3, [pc, #48]	@ (8013628 <netif_add+0x18c>)
 80135f6:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80135f8:	4b0c      	ldr	r3, [pc, #48]	@ (801362c <netif_add+0x190>)
 80135fa:	681a      	ldr	r2, [r3, #0]
 80135fc:	68fb      	ldr	r3, [r7, #12]
 80135fe:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8013600:	4a0a      	ldr	r2, [pc, #40]	@ (801362c <netif_add+0x190>)
 8013602:	68fb      	ldr	r3, [r7, #12]
 8013604:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8013606:	68fb      	ldr	r3, [r7, #12]
}
 8013608:	4618      	mov	r0, r3
 801360a:	3718      	adds	r7, #24
 801360c:	46bd      	mov	sp, r7
 801360e:	bd80      	pop	{r7, pc}
 8013610:	08021728 	.word	0x08021728
 8013614:	080217bc 	.word	0x080217bc
 8013618:	08021778 	.word	0x08021778
 801361c:	080217d8 	.word	0x080217d8
 8013620:	08023ef0 	.word	0x08023ef0
 8013624:	080139e3 	.word	0x080139e3
 8013628:	2000cabc 	.word	0x2000cabc
 801362c:	2000cab4 	.word	0x2000cab4
 8013630:	080217fc 	.word	0x080217fc
 8013634:	08021810 	.word	0x08021810

08013638 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013638:	b580      	push	{r7, lr}
 801363a:	b082      	sub	sp, #8
 801363c:	af00      	add	r7, sp, #0
 801363e:	6078      	str	r0, [r7, #4]
 8013640:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8013642:	6839      	ldr	r1, [r7, #0]
 8013644:	6878      	ldr	r0, [r7, #4]
 8013646:	f002 fdab 	bl	80161a0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 801364a:	6839      	ldr	r1, [r7, #0]
 801364c:	6878      	ldr	r0, [r7, #4]
 801364e:	f007 fb11 	bl	801ac74 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8013652:	bf00      	nop
 8013654:	3708      	adds	r7, #8
 8013656:	46bd      	mov	sp, r7
 8013658:	bd80      	pop	{r7, pc}
	...

0801365c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 801365c:	b580      	push	{r7, lr}
 801365e:	b086      	sub	sp, #24
 8013660:	af00      	add	r7, sp, #0
 8013662:	60f8      	str	r0, [r7, #12]
 8013664:	60b9      	str	r1, [r7, #8]
 8013666:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8013668:	68bb      	ldr	r3, [r7, #8]
 801366a:	2b00      	cmp	r3, #0
 801366c:	d106      	bne.n	801367c <netif_do_set_ipaddr+0x20>
 801366e:	4b1d      	ldr	r3, [pc, #116]	@ (80136e4 <netif_do_set_ipaddr+0x88>)
 8013670:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8013674:	491c      	ldr	r1, [pc, #112]	@ (80136e8 <netif_do_set_ipaddr+0x8c>)
 8013676:	481d      	ldr	r0, [pc, #116]	@ (80136ec <netif_do_set_ipaddr+0x90>)
 8013678:	f00a fe08 	bl	801e28c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	2b00      	cmp	r3, #0
 8013680:	d106      	bne.n	8013690 <netif_do_set_ipaddr+0x34>
 8013682:	4b18      	ldr	r3, [pc, #96]	@ (80136e4 <netif_do_set_ipaddr+0x88>)
 8013684:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8013688:	4917      	ldr	r1, [pc, #92]	@ (80136e8 <netif_do_set_ipaddr+0x8c>)
 801368a:	4818      	ldr	r0, [pc, #96]	@ (80136ec <netif_do_set_ipaddr+0x90>)
 801368c:	f00a fdfe 	bl	801e28c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8013690:	68bb      	ldr	r3, [r7, #8]
 8013692:	681a      	ldr	r2, [r3, #0]
 8013694:	68fb      	ldr	r3, [r7, #12]
 8013696:	3304      	adds	r3, #4
 8013698:	681b      	ldr	r3, [r3, #0]
 801369a:	429a      	cmp	r2, r3
 801369c:	d01c      	beq.n	80136d8 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 801369e:	68bb      	ldr	r3, [r7, #8]
 80136a0:	681b      	ldr	r3, [r3, #0]
 80136a2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80136a4:	68fb      	ldr	r3, [r7, #12]
 80136a6:	3304      	adds	r3, #4
 80136a8:	681a      	ldr	r2, [r3, #0]
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80136ae:	f107 0314 	add.w	r3, r7, #20
 80136b2:	4619      	mov	r1, r3
 80136b4:	6878      	ldr	r0, [r7, #4]
 80136b6:	f7ff ffbf 	bl	8013638 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80136ba:	68bb      	ldr	r3, [r7, #8]
 80136bc:	2b00      	cmp	r3, #0
 80136be:	d002      	beq.n	80136c6 <netif_do_set_ipaddr+0x6a>
 80136c0:	68bb      	ldr	r3, [r7, #8]
 80136c2:	681b      	ldr	r3, [r3, #0]
 80136c4:	e000      	b.n	80136c8 <netif_do_set_ipaddr+0x6c>
 80136c6:	2300      	movs	r3, #0
 80136c8:	68fa      	ldr	r2, [r7, #12]
 80136ca:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80136cc:	2101      	movs	r1, #1
 80136ce:	68f8      	ldr	r0, [r7, #12]
 80136d0:	f000 f8d2 	bl	8013878 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80136d4:	2301      	movs	r3, #1
 80136d6:	e000      	b.n	80136da <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80136d8:	2300      	movs	r3, #0
}
 80136da:	4618      	mov	r0, r3
 80136dc:	3718      	adds	r7, #24
 80136de:	46bd      	mov	sp, r7
 80136e0:	bd80      	pop	{r7, pc}
 80136e2:	bf00      	nop
 80136e4:	08021728 	.word	0x08021728
 80136e8:	08021840 	.word	0x08021840
 80136ec:	08021778 	.word	0x08021778

080136f0 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80136f0:	b480      	push	{r7}
 80136f2:	b085      	sub	sp, #20
 80136f4:	af00      	add	r7, sp, #0
 80136f6:	60f8      	str	r0, [r7, #12]
 80136f8:	60b9      	str	r1, [r7, #8]
 80136fa:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80136fc:	68bb      	ldr	r3, [r7, #8]
 80136fe:	681a      	ldr	r2, [r3, #0]
 8013700:	68fb      	ldr	r3, [r7, #12]
 8013702:	3308      	adds	r3, #8
 8013704:	681b      	ldr	r3, [r3, #0]
 8013706:	429a      	cmp	r2, r3
 8013708:	d00a      	beq.n	8013720 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 801370a:	68bb      	ldr	r3, [r7, #8]
 801370c:	2b00      	cmp	r3, #0
 801370e:	d002      	beq.n	8013716 <netif_do_set_netmask+0x26>
 8013710:	68bb      	ldr	r3, [r7, #8]
 8013712:	681b      	ldr	r3, [r3, #0]
 8013714:	e000      	b.n	8013718 <netif_do_set_netmask+0x28>
 8013716:	2300      	movs	r3, #0
 8013718:	68fa      	ldr	r2, [r7, #12]
 801371a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 801371c:	2301      	movs	r3, #1
 801371e:	e000      	b.n	8013722 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8013720:	2300      	movs	r3, #0
}
 8013722:	4618      	mov	r0, r3
 8013724:	3714      	adds	r7, #20
 8013726:	46bd      	mov	sp, r7
 8013728:	f85d 7b04 	ldr.w	r7, [sp], #4
 801372c:	4770      	bx	lr

0801372e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 801372e:	b480      	push	{r7}
 8013730:	b085      	sub	sp, #20
 8013732:	af00      	add	r7, sp, #0
 8013734:	60f8      	str	r0, [r7, #12]
 8013736:	60b9      	str	r1, [r7, #8]
 8013738:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 801373a:	68bb      	ldr	r3, [r7, #8]
 801373c:	681a      	ldr	r2, [r3, #0]
 801373e:	68fb      	ldr	r3, [r7, #12]
 8013740:	330c      	adds	r3, #12
 8013742:	681b      	ldr	r3, [r3, #0]
 8013744:	429a      	cmp	r2, r3
 8013746:	d00a      	beq.n	801375e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8013748:	68bb      	ldr	r3, [r7, #8]
 801374a:	2b00      	cmp	r3, #0
 801374c:	d002      	beq.n	8013754 <netif_do_set_gw+0x26>
 801374e:	68bb      	ldr	r3, [r7, #8]
 8013750:	681b      	ldr	r3, [r3, #0]
 8013752:	e000      	b.n	8013756 <netif_do_set_gw+0x28>
 8013754:	2300      	movs	r3, #0
 8013756:	68fa      	ldr	r2, [r7, #12]
 8013758:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 801375a:	2301      	movs	r3, #1
 801375c:	e000      	b.n	8013760 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 801375e:	2300      	movs	r3, #0
}
 8013760:	4618      	mov	r0, r3
 8013762:	3714      	adds	r7, #20
 8013764:	46bd      	mov	sp, r7
 8013766:	f85d 7b04 	ldr.w	r7, [sp], #4
 801376a:	4770      	bx	lr

0801376c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 801376c:	b580      	push	{r7, lr}
 801376e:	b088      	sub	sp, #32
 8013770:	af00      	add	r7, sp, #0
 8013772:	60f8      	str	r0, [r7, #12]
 8013774:	60b9      	str	r1, [r7, #8]
 8013776:	607a      	str	r2, [r7, #4]
 8013778:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 801377a:	2300      	movs	r3, #0
 801377c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 801377e:	2300      	movs	r3, #0
 8013780:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8013782:	68bb      	ldr	r3, [r7, #8]
 8013784:	2b00      	cmp	r3, #0
 8013786:	d101      	bne.n	801378c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8013788:	4b1c      	ldr	r3, [pc, #112]	@ (80137fc <netif_set_addr+0x90>)
 801378a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	2b00      	cmp	r3, #0
 8013790:	d101      	bne.n	8013796 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8013792:	4b1a      	ldr	r3, [pc, #104]	@ (80137fc <netif_set_addr+0x90>)
 8013794:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8013796:	683b      	ldr	r3, [r7, #0]
 8013798:	2b00      	cmp	r3, #0
 801379a:	d101      	bne.n	80137a0 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 801379c:	4b17      	ldr	r3, [pc, #92]	@ (80137fc <netif_set_addr+0x90>)
 801379e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80137a0:	68bb      	ldr	r3, [r7, #8]
 80137a2:	2b00      	cmp	r3, #0
 80137a4:	d003      	beq.n	80137ae <netif_set_addr+0x42>
 80137a6:	68bb      	ldr	r3, [r7, #8]
 80137a8:	681b      	ldr	r3, [r3, #0]
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	d101      	bne.n	80137b2 <netif_set_addr+0x46>
 80137ae:	2301      	movs	r3, #1
 80137b0:	e000      	b.n	80137b4 <netif_set_addr+0x48>
 80137b2:	2300      	movs	r3, #0
 80137b4:	617b      	str	r3, [r7, #20]
  if (remove) {
 80137b6:	697b      	ldr	r3, [r7, #20]
 80137b8:	2b00      	cmp	r3, #0
 80137ba:	d006      	beq.n	80137ca <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80137bc:	f107 0310 	add.w	r3, r7, #16
 80137c0:	461a      	mov	r2, r3
 80137c2:	68b9      	ldr	r1, [r7, #8]
 80137c4:	68f8      	ldr	r0, [r7, #12]
 80137c6:	f7ff ff49 	bl	801365c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80137ca:	69fa      	ldr	r2, [r7, #28]
 80137cc:	6879      	ldr	r1, [r7, #4]
 80137ce:	68f8      	ldr	r0, [r7, #12]
 80137d0:	f7ff ff8e 	bl	80136f0 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80137d4:	69ba      	ldr	r2, [r7, #24]
 80137d6:	6839      	ldr	r1, [r7, #0]
 80137d8:	68f8      	ldr	r0, [r7, #12]
 80137da:	f7ff ffa8 	bl	801372e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80137de:	697b      	ldr	r3, [r7, #20]
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d106      	bne.n	80137f2 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80137e4:	f107 0310 	add.w	r3, r7, #16
 80137e8:	461a      	mov	r2, r3
 80137ea:	68b9      	ldr	r1, [r7, #8]
 80137ec:	68f8      	ldr	r0, [r7, #12]
 80137ee:	f7ff ff35 	bl	801365c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80137f2:	bf00      	nop
 80137f4:	3720      	adds	r7, #32
 80137f6:	46bd      	mov	sp, r7
 80137f8:	bd80      	pop	{r7, pc}
 80137fa:	bf00      	nop
 80137fc:	08023ef0 	.word	0x08023ef0

08013800 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8013800:	b480      	push	{r7}
 8013802:	b083      	sub	sp, #12
 8013804:	af00      	add	r7, sp, #0
 8013806:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8013808:	4a04      	ldr	r2, [pc, #16]	@ (801381c <netif_set_default+0x1c>)
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 801380e:	bf00      	nop
 8013810:	370c      	adds	r7, #12
 8013812:	46bd      	mov	sp, r7
 8013814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013818:	4770      	bx	lr
 801381a:	bf00      	nop
 801381c:	2000cab8 	.word	0x2000cab8

08013820 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8013820:	b580      	push	{r7, lr}
 8013822:	b082      	sub	sp, #8
 8013824:	af00      	add	r7, sp, #0
 8013826:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8013828:	687b      	ldr	r3, [r7, #4]
 801382a:	2b00      	cmp	r3, #0
 801382c:	d107      	bne.n	801383e <netif_set_up+0x1e>
 801382e:	4b0f      	ldr	r3, [pc, #60]	@ (801386c <netif_set_up+0x4c>)
 8013830:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8013834:	490e      	ldr	r1, [pc, #56]	@ (8013870 <netif_set_up+0x50>)
 8013836:	480f      	ldr	r0, [pc, #60]	@ (8013874 <netif_set_up+0x54>)
 8013838:	f00a fd28 	bl	801e28c <iprintf>
 801383c:	e013      	b.n	8013866 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013844:	f003 0301 	and.w	r3, r3, #1
 8013848:	2b00      	cmp	r3, #0
 801384a:	d10c      	bne.n	8013866 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013852:	f043 0301 	orr.w	r3, r3, #1
 8013856:	b2da      	uxtb	r2, r3
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801385e:	2103      	movs	r1, #3
 8013860:	6878      	ldr	r0, [r7, #4]
 8013862:	f000 f809 	bl	8013878 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8013866:	3708      	adds	r7, #8
 8013868:	46bd      	mov	sp, r7
 801386a:	bd80      	pop	{r7, pc}
 801386c:	08021728 	.word	0x08021728
 8013870:	080218b0 	.word	0x080218b0
 8013874:	08021778 	.word	0x08021778

08013878 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8013878:	b580      	push	{r7, lr}
 801387a:	b082      	sub	sp, #8
 801387c:	af00      	add	r7, sp, #0
 801387e:	6078      	str	r0, [r7, #4]
 8013880:	460b      	mov	r3, r1
 8013882:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	2b00      	cmp	r3, #0
 8013888:	d106      	bne.n	8013898 <netif_issue_reports+0x20>
 801388a:	4b18      	ldr	r3, [pc, #96]	@ (80138ec <netif_issue_reports+0x74>)
 801388c:	f240 326d 	movw	r2, #877	@ 0x36d
 8013890:	4917      	ldr	r1, [pc, #92]	@ (80138f0 <netif_issue_reports+0x78>)
 8013892:	4818      	ldr	r0, [pc, #96]	@ (80138f4 <netif_issue_reports+0x7c>)
 8013894:	f00a fcfa 	bl	801e28c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801389e:	f003 0304 	and.w	r3, r3, #4
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	d01e      	beq.n	80138e4 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80138ac:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80138b0:	2b00      	cmp	r3, #0
 80138b2:	d017      	beq.n	80138e4 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80138b4:	78fb      	ldrb	r3, [r7, #3]
 80138b6:	f003 0301 	and.w	r3, r3, #1
 80138ba:	2b00      	cmp	r3, #0
 80138bc:	d013      	beq.n	80138e6 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	3304      	adds	r3, #4
 80138c2:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	d00e      	beq.n	80138e6 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80138ce:	f003 0308 	and.w	r3, r3, #8
 80138d2:	2b00      	cmp	r3, #0
 80138d4:	d007      	beq.n	80138e6 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80138d6:	687b      	ldr	r3, [r7, #4]
 80138d8:	3304      	adds	r3, #4
 80138da:	4619      	mov	r1, r3
 80138dc:	6878      	ldr	r0, [r7, #4]
 80138de:	f008 f903 	bl	801bae8 <etharp_request>
 80138e2:	e000      	b.n	80138e6 <netif_issue_reports+0x6e>
    return;
 80138e4:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80138e6:	3708      	adds	r7, #8
 80138e8:	46bd      	mov	sp, r7
 80138ea:	bd80      	pop	{r7, pc}
 80138ec:	08021728 	.word	0x08021728
 80138f0:	080218cc 	.word	0x080218cc
 80138f4:	08021778 	.word	0x08021778

080138f8 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80138f8:	b580      	push	{r7, lr}
 80138fa:	b082      	sub	sp, #8
 80138fc:	af00      	add	r7, sp, #0
 80138fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	2b00      	cmp	r3, #0
 8013904:	d107      	bne.n	8013916 <netif_set_link_up+0x1e>
 8013906:	4b13      	ldr	r3, [pc, #76]	@ (8013954 <netif_set_link_up+0x5c>)
 8013908:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 801390c:	4912      	ldr	r1, [pc, #72]	@ (8013958 <netif_set_link_up+0x60>)
 801390e:	4813      	ldr	r0, [pc, #76]	@ (801395c <netif_set_link_up+0x64>)
 8013910:	f00a fcbc 	bl	801e28c <iprintf>
 8013914:	e01b      	b.n	801394e <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801391c:	f003 0304 	and.w	r3, r3, #4
 8013920:	2b00      	cmp	r3, #0
 8013922:	d114      	bne.n	801394e <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801392a:	f043 0304 	orr.w	r3, r3, #4
 801392e:	b2da      	uxtb	r2, r3
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8013936:	2103      	movs	r1, #3
 8013938:	6878      	ldr	r0, [r7, #4]
 801393a:	f7ff ff9d 	bl	8013878 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	69db      	ldr	r3, [r3, #28]
 8013942:	2b00      	cmp	r3, #0
 8013944:	d003      	beq.n	801394e <netif_set_link_up+0x56>
 8013946:	687b      	ldr	r3, [r7, #4]
 8013948:	69db      	ldr	r3, [r3, #28]
 801394a:	6878      	ldr	r0, [r7, #4]
 801394c:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801394e:	3708      	adds	r7, #8
 8013950:	46bd      	mov	sp, r7
 8013952:	bd80      	pop	{r7, pc}
 8013954:	08021728 	.word	0x08021728
 8013958:	08021910 	.word	0x08021910
 801395c:	08021778 	.word	0x08021778

08013960 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8013960:	b580      	push	{r7, lr}
 8013962:	b082      	sub	sp, #8
 8013964:	af00      	add	r7, sp, #0
 8013966:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	2b00      	cmp	r3, #0
 801396c:	d107      	bne.n	801397e <netif_set_link_down+0x1e>
 801396e:	4b11      	ldr	r3, [pc, #68]	@ (80139b4 <netif_set_link_down+0x54>)
 8013970:	f240 4206 	movw	r2, #1030	@ 0x406
 8013974:	4910      	ldr	r1, [pc, #64]	@ (80139b8 <netif_set_link_down+0x58>)
 8013976:	4811      	ldr	r0, [pc, #68]	@ (80139bc <netif_set_link_down+0x5c>)
 8013978:	f00a fc88 	bl	801e28c <iprintf>
 801397c:	e017      	b.n	80139ae <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013984:	f003 0304 	and.w	r3, r3, #4
 8013988:	2b00      	cmp	r3, #0
 801398a:	d010      	beq.n	80139ae <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013992:	f023 0304 	bic.w	r3, r3, #4
 8013996:	b2da      	uxtb	r2, r3
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	69db      	ldr	r3, [r3, #28]
 80139a2:	2b00      	cmp	r3, #0
 80139a4:	d003      	beq.n	80139ae <netif_set_link_down+0x4e>
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	69db      	ldr	r3, [r3, #28]
 80139aa:	6878      	ldr	r0, [r7, #4]
 80139ac:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80139ae:	3708      	adds	r7, #8
 80139b0:	46bd      	mov	sp, r7
 80139b2:	bd80      	pop	{r7, pc}
 80139b4:	08021728 	.word	0x08021728
 80139b8:	08021934 	.word	0x08021934
 80139bc:	08021778 	.word	0x08021778

080139c0 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80139c0:	b480      	push	{r7}
 80139c2:	b083      	sub	sp, #12
 80139c4:	af00      	add	r7, sp, #0
 80139c6:	6078      	str	r0, [r7, #4]
 80139c8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	2b00      	cmp	r3, #0
 80139ce:	d002      	beq.n	80139d6 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	683a      	ldr	r2, [r7, #0]
 80139d4:	61da      	str	r2, [r3, #28]
  }
}
 80139d6:	bf00      	nop
 80139d8:	370c      	adds	r7, #12
 80139da:	46bd      	mov	sp, r7
 80139dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139e0:	4770      	bx	lr

080139e2 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80139e2:	b480      	push	{r7}
 80139e4:	b085      	sub	sp, #20
 80139e6:	af00      	add	r7, sp, #0
 80139e8:	60f8      	str	r0, [r7, #12]
 80139ea:	60b9      	str	r1, [r7, #8]
 80139ec:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80139ee:	f06f 030b 	mvn.w	r3, #11
}
 80139f2:	4618      	mov	r0, r3
 80139f4:	3714      	adds	r7, #20
 80139f6:	46bd      	mov	sp, r7
 80139f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139fc:	4770      	bx	lr
	...

08013a00 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8013a00:	b480      	push	{r7}
 8013a02:	b085      	sub	sp, #20
 8013a04:	af00      	add	r7, sp, #0
 8013a06:	4603      	mov	r3, r0
 8013a08:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8013a0a:	79fb      	ldrb	r3, [r7, #7]
 8013a0c:	2b00      	cmp	r3, #0
 8013a0e:	d013      	beq.n	8013a38 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8013a10:	4b0d      	ldr	r3, [pc, #52]	@ (8013a48 <netif_get_by_index+0x48>)
 8013a12:	681b      	ldr	r3, [r3, #0]
 8013a14:	60fb      	str	r3, [r7, #12]
 8013a16:	e00c      	b.n	8013a32 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8013a18:	68fb      	ldr	r3, [r7, #12]
 8013a1a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013a1e:	3301      	adds	r3, #1
 8013a20:	b2db      	uxtb	r3, r3
 8013a22:	79fa      	ldrb	r2, [r7, #7]
 8013a24:	429a      	cmp	r2, r3
 8013a26:	d101      	bne.n	8013a2c <netif_get_by_index+0x2c>
        return netif; /* found! */
 8013a28:	68fb      	ldr	r3, [r7, #12]
 8013a2a:	e006      	b.n	8013a3a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8013a2c:	68fb      	ldr	r3, [r7, #12]
 8013a2e:	681b      	ldr	r3, [r3, #0]
 8013a30:	60fb      	str	r3, [r7, #12]
 8013a32:	68fb      	ldr	r3, [r7, #12]
 8013a34:	2b00      	cmp	r3, #0
 8013a36:	d1ef      	bne.n	8013a18 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8013a38:	2300      	movs	r3, #0
}
 8013a3a:	4618      	mov	r0, r3
 8013a3c:	3714      	adds	r7, #20
 8013a3e:	46bd      	mov	sp, r7
 8013a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a44:	4770      	bx	lr
 8013a46:	bf00      	nop
 8013a48:	2000cab4 	.word	0x2000cab4

08013a4c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8013a4c:	b580      	push	{r7, lr}
 8013a4e:	b082      	sub	sp, #8
 8013a50:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8013a52:	f009 fd5b 	bl	801d50c <sys_arch_protect>
 8013a56:	6038      	str	r0, [r7, #0]
 8013a58:	4b0d      	ldr	r3, [pc, #52]	@ (8013a90 <pbuf_free_ooseq+0x44>)
 8013a5a:	2200      	movs	r2, #0
 8013a5c:	701a      	strb	r2, [r3, #0]
 8013a5e:	6838      	ldr	r0, [r7, #0]
 8013a60:	f009 fd62 	bl	801d528 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8013a64:	4b0b      	ldr	r3, [pc, #44]	@ (8013a94 <pbuf_free_ooseq+0x48>)
 8013a66:	681b      	ldr	r3, [r3, #0]
 8013a68:	607b      	str	r3, [r7, #4]
 8013a6a:	e00a      	b.n	8013a82 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	d003      	beq.n	8013a7c <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8013a74:	6878      	ldr	r0, [r7, #4]
 8013a76:	f002 fbd1 	bl	801621c <tcp_free_ooseq>
      return;
 8013a7a:	e005      	b.n	8013a88 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	68db      	ldr	r3, [r3, #12]
 8013a80:	607b      	str	r3, [r7, #4]
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	d1f1      	bne.n	8013a6c <pbuf_free_ooseq+0x20>
    }
  }
}
 8013a88:	3708      	adds	r7, #8
 8013a8a:	46bd      	mov	sp, r7
 8013a8c:	bd80      	pop	{r7, pc}
 8013a8e:	bf00      	nop
 8013a90:	2000cabd 	.word	0x2000cabd
 8013a94:	2000cacc 	.word	0x2000cacc

08013a98 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8013a98:	b580      	push	{r7, lr}
 8013a9a:	b082      	sub	sp, #8
 8013a9c:	af00      	add	r7, sp, #0
 8013a9e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8013aa0:	f7ff ffd4 	bl	8013a4c <pbuf_free_ooseq>
}
 8013aa4:	bf00      	nop
 8013aa6:	3708      	adds	r7, #8
 8013aa8:	46bd      	mov	sp, r7
 8013aaa:	bd80      	pop	{r7, pc}

08013aac <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8013aac:	b580      	push	{r7, lr}
 8013aae:	b082      	sub	sp, #8
 8013ab0:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8013ab2:	f009 fd2b 	bl	801d50c <sys_arch_protect>
 8013ab6:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8013ab8:	4b0f      	ldr	r3, [pc, #60]	@ (8013af8 <pbuf_pool_is_empty+0x4c>)
 8013aba:	781b      	ldrb	r3, [r3, #0]
 8013abc:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8013abe:	4b0e      	ldr	r3, [pc, #56]	@ (8013af8 <pbuf_pool_is_empty+0x4c>)
 8013ac0:	2201      	movs	r2, #1
 8013ac2:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8013ac4:	6878      	ldr	r0, [r7, #4]
 8013ac6:	f009 fd2f 	bl	801d528 <sys_arch_unprotect>

  if (!queued) {
 8013aca:	78fb      	ldrb	r3, [r7, #3]
 8013acc:	2b00      	cmp	r3, #0
 8013ace:	d10f      	bne.n	8013af0 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8013ad0:	2100      	movs	r1, #0
 8013ad2:	480a      	ldr	r0, [pc, #40]	@ (8013afc <pbuf_pool_is_empty+0x50>)
 8013ad4:	f7fe fed8 	bl	8012888 <tcpip_try_callback>
 8013ad8:	4603      	mov	r3, r0
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	d008      	beq.n	8013af0 <pbuf_pool_is_empty+0x44>
 8013ade:	f009 fd15 	bl	801d50c <sys_arch_protect>
 8013ae2:	6078      	str	r0, [r7, #4]
 8013ae4:	4b04      	ldr	r3, [pc, #16]	@ (8013af8 <pbuf_pool_is_empty+0x4c>)
 8013ae6:	2200      	movs	r2, #0
 8013ae8:	701a      	strb	r2, [r3, #0]
 8013aea:	6878      	ldr	r0, [r7, #4]
 8013aec:	f009 fd1c 	bl	801d528 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8013af0:	bf00      	nop
 8013af2:	3708      	adds	r7, #8
 8013af4:	46bd      	mov	sp, r7
 8013af6:	bd80      	pop	{r7, pc}
 8013af8:	2000cabd 	.word	0x2000cabd
 8013afc:	08013a99 	.word	0x08013a99

08013b00 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8013b00:	b480      	push	{r7}
 8013b02:	b085      	sub	sp, #20
 8013b04:	af00      	add	r7, sp, #0
 8013b06:	60f8      	str	r0, [r7, #12]
 8013b08:	60b9      	str	r1, [r7, #8]
 8013b0a:	4611      	mov	r1, r2
 8013b0c:	461a      	mov	r2, r3
 8013b0e:	460b      	mov	r3, r1
 8013b10:	80fb      	strh	r3, [r7, #6]
 8013b12:	4613      	mov	r3, r2
 8013b14:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8013b16:	68fb      	ldr	r3, [r7, #12]
 8013b18:	2200      	movs	r2, #0
 8013b1a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8013b1c:	68fb      	ldr	r3, [r7, #12]
 8013b1e:	68ba      	ldr	r2, [r7, #8]
 8013b20:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8013b22:	68fb      	ldr	r3, [r7, #12]
 8013b24:	88fa      	ldrh	r2, [r7, #6]
 8013b26:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8013b28:	68fb      	ldr	r3, [r7, #12]
 8013b2a:	88ba      	ldrh	r2, [r7, #4]
 8013b2c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8013b2e:	8b3b      	ldrh	r3, [r7, #24]
 8013b30:	b2da      	uxtb	r2, r3
 8013b32:	68fb      	ldr	r3, [r7, #12]
 8013b34:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8013b36:	68fb      	ldr	r3, [r7, #12]
 8013b38:	7f3a      	ldrb	r2, [r7, #28]
 8013b3a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8013b3c:	68fb      	ldr	r3, [r7, #12]
 8013b3e:	2201      	movs	r2, #1
 8013b40:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8013b42:	68fb      	ldr	r3, [r7, #12]
 8013b44:	2200      	movs	r2, #0
 8013b46:	73da      	strb	r2, [r3, #15]
}
 8013b48:	bf00      	nop
 8013b4a:	3714      	adds	r7, #20
 8013b4c:	46bd      	mov	sp, r7
 8013b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b52:	4770      	bx	lr

08013b54 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8013b54:	b580      	push	{r7, lr}
 8013b56:	b08c      	sub	sp, #48	@ 0x30
 8013b58:	af02      	add	r7, sp, #8
 8013b5a:	4603      	mov	r3, r0
 8013b5c:	71fb      	strb	r3, [r7, #7]
 8013b5e:	460b      	mov	r3, r1
 8013b60:	80bb      	strh	r3, [r7, #4]
 8013b62:	4613      	mov	r3, r2
 8013b64:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8013b66:	79fb      	ldrb	r3, [r7, #7]
 8013b68:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8013b6a:	887b      	ldrh	r3, [r7, #2]
 8013b6c:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8013b70:	d07f      	beq.n	8013c72 <pbuf_alloc+0x11e>
 8013b72:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8013b76:	f300 80c8 	bgt.w	8013d0a <pbuf_alloc+0x1b6>
 8013b7a:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8013b7e:	d010      	beq.n	8013ba2 <pbuf_alloc+0x4e>
 8013b80:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8013b84:	f300 80c1 	bgt.w	8013d0a <pbuf_alloc+0x1b6>
 8013b88:	2b01      	cmp	r3, #1
 8013b8a:	d002      	beq.n	8013b92 <pbuf_alloc+0x3e>
 8013b8c:	2b41      	cmp	r3, #65	@ 0x41
 8013b8e:	f040 80bc 	bne.w	8013d0a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8013b92:	887a      	ldrh	r2, [r7, #2]
 8013b94:	88bb      	ldrh	r3, [r7, #4]
 8013b96:	4619      	mov	r1, r3
 8013b98:	2000      	movs	r0, #0
 8013b9a:	f000 f8d1 	bl	8013d40 <pbuf_alloc_reference>
 8013b9e:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8013ba0:	e0bd      	b.n	8013d1e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8013ba2:	2300      	movs	r3, #0
 8013ba4:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8013ba6:	2300      	movs	r3, #0
 8013ba8:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8013baa:	88bb      	ldrh	r3, [r7, #4]
 8013bac:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8013bae:	200c      	movs	r0, #12
 8013bb0:	f7ff fbcc 	bl	801334c <memp_malloc>
 8013bb4:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8013bb6:	693b      	ldr	r3, [r7, #16]
 8013bb8:	2b00      	cmp	r3, #0
 8013bba:	d109      	bne.n	8013bd0 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8013bbc:	f7ff ff76 	bl	8013aac <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8013bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013bc2:	2b00      	cmp	r3, #0
 8013bc4:	d002      	beq.n	8013bcc <pbuf_alloc+0x78>
            pbuf_free(p);
 8013bc6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013bc8:	f000 faa8 	bl	801411c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8013bcc:	2300      	movs	r3, #0
 8013bce:	e0a7      	b.n	8013d20 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8013bd0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013bd2:	3303      	adds	r3, #3
 8013bd4:	b29b      	uxth	r3, r3
 8013bd6:	f023 0303 	bic.w	r3, r3, #3
 8013bda:	b29b      	uxth	r3, r3
 8013bdc:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8013be0:	b29b      	uxth	r3, r3
 8013be2:	8b7a      	ldrh	r2, [r7, #26]
 8013be4:	4293      	cmp	r3, r2
 8013be6:	bf28      	it	cs
 8013be8:	4613      	movcs	r3, r2
 8013bea:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8013bec:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013bee:	3310      	adds	r3, #16
 8013bf0:	693a      	ldr	r2, [r7, #16]
 8013bf2:	4413      	add	r3, r2
 8013bf4:	3303      	adds	r3, #3
 8013bf6:	f023 0303 	bic.w	r3, r3, #3
 8013bfa:	4618      	mov	r0, r3
 8013bfc:	89f9      	ldrh	r1, [r7, #14]
 8013bfe:	8b7a      	ldrh	r2, [r7, #26]
 8013c00:	2300      	movs	r3, #0
 8013c02:	9301      	str	r3, [sp, #4]
 8013c04:	887b      	ldrh	r3, [r7, #2]
 8013c06:	9300      	str	r3, [sp, #0]
 8013c08:	460b      	mov	r3, r1
 8013c0a:	4601      	mov	r1, r0
 8013c0c:	6938      	ldr	r0, [r7, #16]
 8013c0e:	f7ff ff77 	bl	8013b00 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8013c12:	693b      	ldr	r3, [r7, #16]
 8013c14:	685b      	ldr	r3, [r3, #4]
 8013c16:	f003 0303 	and.w	r3, r3, #3
 8013c1a:	2b00      	cmp	r3, #0
 8013c1c:	d006      	beq.n	8013c2c <pbuf_alloc+0xd8>
 8013c1e:	4b42      	ldr	r3, [pc, #264]	@ (8013d28 <pbuf_alloc+0x1d4>)
 8013c20:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8013c24:	4941      	ldr	r1, [pc, #260]	@ (8013d2c <pbuf_alloc+0x1d8>)
 8013c26:	4842      	ldr	r0, [pc, #264]	@ (8013d30 <pbuf_alloc+0x1dc>)
 8013c28:	f00a fb30 	bl	801e28c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8013c2c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013c2e:	3303      	adds	r3, #3
 8013c30:	f023 0303 	bic.w	r3, r3, #3
 8013c34:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8013c38:	d106      	bne.n	8013c48 <pbuf_alloc+0xf4>
 8013c3a:	4b3b      	ldr	r3, [pc, #236]	@ (8013d28 <pbuf_alloc+0x1d4>)
 8013c3c:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8013c40:	493c      	ldr	r1, [pc, #240]	@ (8013d34 <pbuf_alloc+0x1e0>)
 8013c42:	483b      	ldr	r0, [pc, #236]	@ (8013d30 <pbuf_alloc+0x1dc>)
 8013c44:	f00a fb22 	bl	801e28c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8013c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c4a:	2b00      	cmp	r3, #0
 8013c4c:	d102      	bne.n	8013c54 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8013c4e:	693b      	ldr	r3, [r7, #16]
 8013c50:	627b      	str	r3, [r7, #36]	@ 0x24
 8013c52:	e002      	b.n	8013c5a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8013c54:	69fb      	ldr	r3, [r7, #28]
 8013c56:	693a      	ldr	r2, [r7, #16]
 8013c58:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8013c5a:	693b      	ldr	r3, [r7, #16]
 8013c5c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8013c5e:	8b7a      	ldrh	r2, [r7, #26]
 8013c60:	89fb      	ldrh	r3, [r7, #14]
 8013c62:	1ad3      	subs	r3, r2, r3
 8013c64:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8013c66:	2300      	movs	r3, #0
 8013c68:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 8013c6a:	8b7b      	ldrh	r3, [r7, #26]
 8013c6c:	2b00      	cmp	r3, #0
 8013c6e:	d19e      	bne.n	8013bae <pbuf_alloc+0x5a>
      break;
 8013c70:	e055      	b.n	8013d1e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8013c72:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013c74:	3303      	adds	r3, #3
 8013c76:	b29b      	uxth	r3, r3
 8013c78:	f023 0303 	bic.w	r3, r3, #3
 8013c7c:	b29a      	uxth	r2, r3
 8013c7e:	88bb      	ldrh	r3, [r7, #4]
 8013c80:	3303      	adds	r3, #3
 8013c82:	b29b      	uxth	r3, r3
 8013c84:	f023 0303 	bic.w	r3, r3, #3
 8013c88:	b29b      	uxth	r3, r3
 8013c8a:	4413      	add	r3, r2
 8013c8c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8013c8e:	8b3b      	ldrh	r3, [r7, #24]
 8013c90:	3310      	adds	r3, #16
 8013c92:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8013c94:	8b3a      	ldrh	r2, [r7, #24]
 8013c96:	88bb      	ldrh	r3, [r7, #4]
 8013c98:	3303      	adds	r3, #3
 8013c9a:	f023 0303 	bic.w	r3, r3, #3
 8013c9e:	429a      	cmp	r2, r3
 8013ca0:	d306      	bcc.n	8013cb0 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8013ca2:	8afa      	ldrh	r2, [r7, #22]
 8013ca4:	88bb      	ldrh	r3, [r7, #4]
 8013ca6:	3303      	adds	r3, #3
 8013ca8:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8013cac:	429a      	cmp	r2, r3
 8013cae:	d201      	bcs.n	8013cb4 <pbuf_alloc+0x160>
        return NULL;
 8013cb0:	2300      	movs	r3, #0
 8013cb2:	e035      	b.n	8013d20 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8013cb4:	8afb      	ldrh	r3, [r7, #22]
 8013cb6:	4618      	mov	r0, r3
 8013cb8:	f7ff f9a4 	bl	8013004 <mem_malloc>
 8013cbc:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8013cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	d101      	bne.n	8013cc8 <pbuf_alloc+0x174>
        return NULL;
 8013cc4:	2300      	movs	r3, #0
 8013cc6:	e02b      	b.n	8013d20 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8013cc8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013cca:	3310      	adds	r3, #16
 8013ccc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013cce:	4413      	add	r3, r2
 8013cd0:	3303      	adds	r3, #3
 8013cd2:	f023 0303 	bic.w	r3, r3, #3
 8013cd6:	4618      	mov	r0, r3
 8013cd8:	88b9      	ldrh	r1, [r7, #4]
 8013cda:	88ba      	ldrh	r2, [r7, #4]
 8013cdc:	2300      	movs	r3, #0
 8013cde:	9301      	str	r3, [sp, #4]
 8013ce0:	887b      	ldrh	r3, [r7, #2]
 8013ce2:	9300      	str	r3, [sp, #0]
 8013ce4:	460b      	mov	r3, r1
 8013ce6:	4601      	mov	r1, r0
 8013ce8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013cea:	f7ff ff09 	bl	8013b00 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8013cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013cf0:	685b      	ldr	r3, [r3, #4]
 8013cf2:	f003 0303 	and.w	r3, r3, #3
 8013cf6:	2b00      	cmp	r3, #0
 8013cf8:	d010      	beq.n	8013d1c <pbuf_alloc+0x1c8>
 8013cfa:	4b0b      	ldr	r3, [pc, #44]	@ (8013d28 <pbuf_alloc+0x1d4>)
 8013cfc:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8013d00:	490d      	ldr	r1, [pc, #52]	@ (8013d38 <pbuf_alloc+0x1e4>)
 8013d02:	480b      	ldr	r0, [pc, #44]	@ (8013d30 <pbuf_alloc+0x1dc>)
 8013d04:	f00a fac2 	bl	801e28c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8013d08:	e008      	b.n	8013d1c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8013d0a:	4b07      	ldr	r3, [pc, #28]	@ (8013d28 <pbuf_alloc+0x1d4>)
 8013d0c:	f240 1227 	movw	r2, #295	@ 0x127
 8013d10:	490a      	ldr	r1, [pc, #40]	@ (8013d3c <pbuf_alloc+0x1e8>)
 8013d12:	4807      	ldr	r0, [pc, #28]	@ (8013d30 <pbuf_alloc+0x1dc>)
 8013d14:	f00a faba 	bl	801e28c <iprintf>
      return NULL;
 8013d18:	2300      	movs	r3, #0
 8013d1a:	e001      	b.n	8013d20 <pbuf_alloc+0x1cc>
      break;
 8013d1c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8013d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8013d20:	4618      	mov	r0, r3
 8013d22:	3728      	adds	r7, #40	@ 0x28
 8013d24:	46bd      	mov	sp, r7
 8013d26:	bd80      	pop	{r7, pc}
 8013d28:	08021958 	.word	0x08021958
 8013d2c:	08021988 	.word	0x08021988
 8013d30:	080219b8 	.word	0x080219b8
 8013d34:	080219e0 	.word	0x080219e0
 8013d38:	08021a14 	.word	0x08021a14
 8013d3c:	08021a40 	.word	0x08021a40

08013d40 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8013d40:	b580      	push	{r7, lr}
 8013d42:	b086      	sub	sp, #24
 8013d44:	af02      	add	r7, sp, #8
 8013d46:	6078      	str	r0, [r7, #4]
 8013d48:	460b      	mov	r3, r1
 8013d4a:	807b      	strh	r3, [r7, #2]
 8013d4c:	4613      	mov	r3, r2
 8013d4e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8013d50:	883b      	ldrh	r3, [r7, #0]
 8013d52:	2b41      	cmp	r3, #65	@ 0x41
 8013d54:	d009      	beq.n	8013d6a <pbuf_alloc_reference+0x2a>
 8013d56:	883b      	ldrh	r3, [r7, #0]
 8013d58:	2b01      	cmp	r3, #1
 8013d5a:	d006      	beq.n	8013d6a <pbuf_alloc_reference+0x2a>
 8013d5c:	4b0f      	ldr	r3, [pc, #60]	@ (8013d9c <pbuf_alloc_reference+0x5c>)
 8013d5e:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8013d62:	490f      	ldr	r1, [pc, #60]	@ (8013da0 <pbuf_alloc_reference+0x60>)
 8013d64:	480f      	ldr	r0, [pc, #60]	@ (8013da4 <pbuf_alloc_reference+0x64>)
 8013d66:	f00a fa91 	bl	801e28c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8013d6a:	200b      	movs	r0, #11
 8013d6c:	f7ff faee 	bl	801334c <memp_malloc>
 8013d70:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8013d72:	68fb      	ldr	r3, [r7, #12]
 8013d74:	2b00      	cmp	r3, #0
 8013d76:	d101      	bne.n	8013d7c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8013d78:	2300      	movs	r3, #0
 8013d7a:	e00b      	b.n	8013d94 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8013d7c:	8879      	ldrh	r1, [r7, #2]
 8013d7e:	887a      	ldrh	r2, [r7, #2]
 8013d80:	2300      	movs	r3, #0
 8013d82:	9301      	str	r3, [sp, #4]
 8013d84:	883b      	ldrh	r3, [r7, #0]
 8013d86:	9300      	str	r3, [sp, #0]
 8013d88:	460b      	mov	r3, r1
 8013d8a:	6879      	ldr	r1, [r7, #4]
 8013d8c:	68f8      	ldr	r0, [r7, #12]
 8013d8e:	f7ff feb7 	bl	8013b00 <pbuf_init_alloced_pbuf>
  return p;
 8013d92:	68fb      	ldr	r3, [r7, #12]
}
 8013d94:	4618      	mov	r0, r3
 8013d96:	3710      	adds	r7, #16
 8013d98:	46bd      	mov	sp, r7
 8013d9a:	bd80      	pop	{r7, pc}
 8013d9c:	08021958 	.word	0x08021958
 8013da0:	08021a5c 	.word	0x08021a5c
 8013da4:	080219b8 	.word	0x080219b8

08013da8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8013da8:	b580      	push	{r7, lr}
 8013daa:	b088      	sub	sp, #32
 8013dac:	af02      	add	r7, sp, #8
 8013dae:	607b      	str	r3, [r7, #4]
 8013db0:	4603      	mov	r3, r0
 8013db2:	73fb      	strb	r3, [r7, #15]
 8013db4:	460b      	mov	r3, r1
 8013db6:	81bb      	strh	r3, [r7, #12]
 8013db8:	4613      	mov	r3, r2
 8013dba:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8013dbc:	7bfb      	ldrb	r3, [r7, #15]
 8013dbe:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8013dc0:	8a7b      	ldrh	r3, [r7, #18]
 8013dc2:	3303      	adds	r3, #3
 8013dc4:	f023 0203 	bic.w	r2, r3, #3
 8013dc8:	89bb      	ldrh	r3, [r7, #12]
 8013dca:	441a      	add	r2, r3
 8013dcc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013dce:	429a      	cmp	r2, r3
 8013dd0:	d901      	bls.n	8013dd6 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8013dd2:	2300      	movs	r3, #0
 8013dd4:	e018      	b.n	8013e08 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8013dd6:	6a3b      	ldr	r3, [r7, #32]
 8013dd8:	2b00      	cmp	r3, #0
 8013dda:	d007      	beq.n	8013dec <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8013ddc:	8a7b      	ldrh	r3, [r7, #18]
 8013dde:	3303      	adds	r3, #3
 8013de0:	f023 0303 	bic.w	r3, r3, #3
 8013de4:	6a3a      	ldr	r2, [r7, #32]
 8013de6:	4413      	add	r3, r2
 8013de8:	617b      	str	r3, [r7, #20]
 8013dea:	e001      	b.n	8013df0 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8013dec:	2300      	movs	r3, #0
 8013dee:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8013df0:	6878      	ldr	r0, [r7, #4]
 8013df2:	89b9      	ldrh	r1, [r7, #12]
 8013df4:	89ba      	ldrh	r2, [r7, #12]
 8013df6:	2302      	movs	r3, #2
 8013df8:	9301      	str	r3, [sp, #4]
 8013dfa:	897b      	ldrh	r3, [r7, #10]
 8013dfc:	9300      	str	r3, [sp, #0]
 8013dfe:	460b      	mov	r3, r1
 8013e00:	6979      	ldr	r1, [r7, #20]
 8013e02:	f7ff fe7d 	bl	8013b00 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8013e06:	687b      	ldr	r3, [r7, #4]
}
 8013e08:	4618      	mov	r0, r3
 8013e0a:	3718      	adds	r7, #24
 8013e0c:	46bd      	mov	sp, r7
 8013e0e:	bd80      	pop	{r7, pc}

08013e10 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8013e10:	b580      	push	{r7, lr}
 8013e12:	b084      	sub	sp, #16
 8013e14:	af00      	add	r7, sp, #0
 8013e16:	6078      	str	r0, [r7, #4]
 8013e18:	460b      	mov	r3, r1
 8013e1a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	2b00      	cmp	r3, #0
 8013e20:	d106      	bne.n	8013e30 <pbuf_realloc+0x20>
 8013e22:	4b3a      	ldr	r3, [pc, #232]	@ (8013f0c <pbuf_realloc+0xfc>)
 8013e24:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8013e28:	4939      	ldr	r1, [pc, #228]	@ (8013f10 <pbuf_realloc+0x100>)
 8013e2a:	483a      	ldr	r0, [pc, #232]	@ (8013f14 <pbuf_realloc+0x104>)
 8013e2c:	f00a fa2e 	bl	801e28c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	891b      	ldrh	r3, [r3, #8]
 8013e34:	887a      	ldrh	r2, [r7, #2]
 8013e36:	429a      	cmp	r2, r3
 8013e38:	d263      	bcs.n	8013f02 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	891a      	ldrh	r2, [r3, #8]
 8013e3e:	887b      	ldrh	r3, [r7, #2]
 8013e40:	1ad3      	subs	r3, r2, r3
 8013e42:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8013e44:	887b      	ldrh	r3, [r7, #2]
 8013e46:	817b      	strh	r3, [r7, #10]
  q = p;
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8013e4c:	e018      	b.n	8013e80 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8013e4e:	68fb      	ldr	r3, [r7, #12]
 8013e50:	895b      	ldrh	r3, [r3, #10]
 8013e52:	897a      	ldrh	r2, [r7, #10]
 8013e54:	1ad3      	subs	r3, r2, r3
 8013e56:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8013e58:	68fb      	ldr	r3, [r7, #12]
 8013e5a:	891a      	ldrh	r2, [r3, #8]
 8013e5c:	893b      	ldrh	r3, [r7, #8]
 8013e5e:	1ad3      	subs	r3, r2, r3
 8013e60:	b29a      	uxth	r2, r3
 8013e62:	68fb      	ldr	r3, [r7, #12]
 8013e64:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8013e66:	68fb      	ldr	r3, [r7, #12]
 8013e68:	681b      	ldr	r3, [r3, #0]
 8013e6a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8013e6c:	68fb      	ldr	r3, [r7, #12]
 8013e6e:	2b00      	cmp	r3, #0
 8013e70:	d106      	bne.n	8013e80 <pbuf_realloc+0x70>
 8013e72:	4b26      	ldr	r3, [pc, #152]	@ (8013f0c <pbuf_realloc+0xfc>)
 8013e74:	f240 12af 	movw	r2, #431	@ 0x1af
 8013e78:	4927      	ldr	r1, [pc, #156]	@ (8013f18 <pbuf_realloc+0x108>)
 8013e7a:	4826      	ldr	r0, [pc, #152]	@ (8013f14 <pbuf_realloc+0x104>)
 8013e7c:	f00a fa06 	bl	801e28c <iprintf>
  while (rem_len > q->len) {
 8013e80:	68fb      	ldr	r3, [r7, #12]
 8013e82:	895b      	ldrh	r3, [r3, #10]
 8013e84:	897a      	ldrh	r2, [r7, #10]
 8013e86:	429a      	cmp	r2, r3
 8013e88:	d8e1      	bhi.n	8013e4e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8013e8a:	68fb      	ldr	r3, [r7, #12]
 8013e8c:	7b1b      	ldrb	r3, [r3, #12]
 8013e8e:	f003 030f 	and.w	r3, r3, #15
 8013e92:	2b00      	cmp	r3, #0
 8013e94:	d121      	bne.n	8013eda <pbuf_realloc+0xca>
 8013e96:	68fb      	ldr	r3, [r7, #12]
 8013e98:	895b      	ldrh	r3, [r3, #10]
 8013e9a:	897a      	ldrh	r2, [r7, #10]
 8013e9c:	429a      	cmp	r2, r3
 8013e9e:	d01c      	beq.n	8013eda <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8013ea0:	68fb      	ldr	r3, [r7, #12]
 8013ea2:	7b5b      	ldrb	r3, [r3, #13]
 8013ea4:	f003 0302 	and.w	r3, r3, #2
 8013ea8:	2b00      	cmp	r3, #0
 8013eaa:	d116      	bne.n	8013eda <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8013eac:	68fb      	ldr	r3, [r7, #12]
 8013eae:	685a      	ldr	r2, [r3, #4]
 8013eb0:	68fb      	ldr	r3, [r7, #12]
 8013eb2:	1ad3      	subs	r3, r2, r3
 8013eb4:	b29a      	uxth	r2, r3
 8013eb6:	897b      	ldrh	r3, [r7, #10]
 8013eb8:	4413      	add	r3, r2
 8013eba:	b29b      	uxth	r3, r3
 8013ebc:	4619      	mov	r1, r3
 8013ebe:	68f8      	ldr	r0, [r7, #12]
 8013ec0:	f7fe ff96 	bl	8012df0 <mem_trim>
 8013ec4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8013ec6:	68fb      	ldr	r3, [r7, #12]
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	d106      	bne.n	8013eda <pbuf_realloc+0xca>
 8013ecc:	4b0f      	ldr	r3, [pc, #60]	@ (8013f0c <pbuf_realloc+0xfc>)
 8013ece:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8013ed2:	4912      	ldr	r1, [pc, #72]	@ (8013f1c <pbuf_realloc+0x10c>)
 8013ed4:	480f      	ldr	r0, [pc, #60]	@ (8013f14 <pbuf_realloc+0x104>)
 8013ed6:	f00a f9d9 	bl	801e28c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8013eda:	68fb      	ldr	r3, [r7, #12]
 8013edc:	897a      	ldrh	r2, [r7, #10]
 8013ede:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8013ee0:	68fb      	ldr	r3, [r7, #12]
 8013ee2:	895a      	ldrh	r2, [r3, #10]
 8013ee4:	68fb      	ldr	r3, [r7, #12]
 8013ee6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8013ee8:	68fb      	ldr	r3, [r7, #12]
 8013eea:	681b      	ldr	r3, [r3, #0]
 8013eec:	2b00      	cmp	r3, #0
 8013eee:	d004      	beq.n	8013efa <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8013ef0:	68fb      	ldr	r3, [r7, #12]
 8013ef2:	681b      	ldr	r3, [r3, #0]
 8013ef4:	4618      	mov	r0, r3
 8013ef6:	f000 f911 	bl	801411c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8013efa:	68fb      	ldr	r3, [r7, #12]
 8013efc:	2200      	movs	r2, #0
 8013efe:	601a      	str	r2, [r3, #0]
 8013f00:	e000      	b.n	8013f04 <pbuf_realloc+0xf4>
    return;
 8013f02:	bf00      	nop

}
 8013f04:	3710      	adds	r7, #16
 8013f06:	46bd      	mov	sp, r7
 8013f08:	bd80      	pop	{r7, pc}
 8013f0a:	bf00      	nop
 8013f0c:	08021958 	.word	0x08021958
 8013f10:	08021a70 	.word	0x08021a70
 8013f14:	080219b8 	.word	0x080219b8
 8013f18:	08021a88 	.word	0x08021a88
 8013f1c:	08021aa0 	.word	0x08021aa0

08013f20 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8013f20:	b580      	push	{r7, lr}
 8013f22:	b086      	sub	sp, #24
 8013f24:	af00      	add	r7, sp, #0
 8013f26:	60f8      	str	r0, [r7, #12]
 8013f28:	60b9      	str	r1, [r7, #8]
 8013f2a:	4613      	mov	r3, r2
 8013f2c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8013f2e:	68fb      	ldr	r3, [r7, #12]
 8013f30:	2b00      	cmp	r3, #0
 8013f32:	d106      	bne.n	8013f42 <pbuf_add_header_impl+0x22>
 8013f34:	4b2b      	ldr	r3, [pc, #172]	@ (8013fe4 <pbuf_add_header_impl+0xc4>)
 8013f36:	f240 12df 	movw	r2, #479	@ 0x1df
 8013f3a:	492b      	ldr	r1, [pc, #172]	@ (8013fe8 <pbuf_add_header_impl+0xc8>)
 8013f3c:	482b      	ldr	r0, [pc, #172]	@ (8013fec <pbuf_add_header_impl+0xcc>)
 8013f3e:	f00a f9a5 	bl	801e28c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8013f42:	68fb      	ldr	r3, [r7, #12]
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	d003      	beq.n	8013f50 <pbuf_add_header_impl+0x30>
 8013f48:	68bb      	ldr	r3, [r7, #8]
 8013f4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013f4e:	d301      	bcc.n	8013f54 <pbuf_add_header_impl+0x34>
    return 1;
 8013f50:	2301      	movs	r3, #1
 8013f52:	e043      	b.n	8013fdc <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8013f54:	68bb      	ldr	r3, [r7, #8]
 8013f56:	2b00      	cmp	r3, #0
 8013f58:	d101      	bne.n	8013f5e <pbuf_add_header_impl+0x3e>
    return 0;
 8013f5a:	2300      	movs	r3, #0
 8013f5c:	e03e      	b.n	8013fdc <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8013f5e:	68bb      	ldr	r3, [r7, #8]
 8013f60:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8013f62:	68fb      	ldr	r3, [r7, #12]
 8013f64:	891a      	ldrh	r2, [r3, #8]
 8013f66:	8a7b      	ldrh	r3, [r7, #18]
 8013f68:	4413      	add	r3, r2
 8013f6a:	b29b      	uxth	r3, r3
 8013f6c:	8a7a      	ldrh	r2, [r7, #18]
 8013f6e:	429a      	cmp	r2, r3
 8013f70:	d901      	bls.n	8013f76 <pbuf_add_header_impl+0x56>
    return 1;
 8013f72:	2301      	movs	r3, #1
 8013f74:	e032      	b.n	8013fdc <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8013f76:	68fb      	ldr	r3, [r7, #12]
 8013f78:	7b1b      	ldrb	r3, [r3, #12]
 8013f7a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8013f7c:	8a3b      	ldrh	r3, [r7, #16]
 8013f7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013f82:	2b00      	cmp	r3, #0
 8013f84:	d00c      	beq.n	8013fa0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8013f86:	68fb      	ldr	r3, [r7, #12]
 8013f88:	685a      	ldr	r2, [r3, #4]
 8013f8a:	68bb      	ldr	r3, [r7, #8]
 8013f8c:	425b      	negs	r3, r3
 8013f8e:	4413      	add	r3, r2
 8013f90:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8013f92:	68fb      	ldr	r3, [r7, #12]
 8013f94:	3310      	adds	r3, #16
 8013f96:	697a      	ldr	r2, [r7, #20]
 8013f98:	429a      	cmp	r2, r3
 8013f9a:	d20d      	bcs.n	8013fb8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8013f9c:	2301      	movs	r3, #1
 8013f9e:	e01d      	b.n	8013fdc <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8013fa0:	79fb      	ldrb	r3, [r7, #7]
 8013fa2:	2b00      	cmp	r3, #0
 8013fa4:	d006      	beq.n	8013fb4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8013fa6:	68fb      	ldr	r3, [r7, #12]
 8013fa8:	685a      	ldr	r2, [r3, #4]
 8013faa:	68bb      	ldr	r3, [r7, #8]
 8013fac:	425b      	negs	r3, r3
 8013fae:	4413      	add	r3, r2
 8013fb0:	617b      	str	r3, [r7, #20]
 8013fb2:	e001      	b.n	8013fb8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8013fb4:	2301      	movs	r3, #1
 8013fb6:	e011      	b.n	8013fdc <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8013fb8:	68fb      	ldr	r3, [r7, #12]
 8013fba:	697a      	ldr	r2, [r7, #20]
 8013fbc:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8013fbe:	68fb      	ldr	r3, [r7, #12]
 8013fc0:	895a      	ldrh	r2, [r3, #10]
 8013fc2:	8a7b      	ldrh	r3, [r7, #18]
 8013fc4:	4413      	add	r3, r2
 8013fc6:	b29a      	uxth	r2, r3
 8013fc8:	68fb      	ldr	r3, [r7, #12]
 8013fca:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8013fcc:	68fb      	ldr	r3, [r7, #12]
 8013fce:	891a      	ldrh	r2, [r3, #8]
 8013fd0:	8a7b      	ldrh	r3, [r7, #18]
 8013fd2:	4413      	add	r3, r2
 8013fd4:	b29a      	uxth	r2, r3
 8013fd6:	68fb      	ldr	r3, [r7, #12]
 8013fd8:	811a      	strh	r2, [r3, #8]


  return 0;
 8013fda:	2300      	movs	r3, #0
}
 8013fdc:	4618      	mov	r0, r3
 8013fde:	3718      	adds	r7, #24
 8013fe0:	46bd      	mov	sp, r7
 8013fe2:	bd80      	pop	{r7, pc}
 8013fe4:	08021958 	.word	0x08021958
 8013fe8:	08021abc 	.word	0x08021abc
 8013fec:	080219b8 	.word	0x080219b8

08013ff0 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8013ff0:	b580      	push	{r7, lr}
 8013ff2:	b082      	sub	sp, #8
 8013ff4:	af00      	add	r7, sp, #0
 8013ff6:	6078      	str	r0, [r7, #4]
 8013ff8:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8013ffa:	2200      	movs	r2, #0
 8013ffc:	6839      	ldr	r1, [r7, #0]
 8013ffe:	6878      	ldr	r0, [r7, #4]
 8014000:	f7ff ff8e 	bl	8013f20 <pbuf_add_header_impl>
 8014004:	4603      	mov	r3, r0
}
 8014006:	4618      	mov	r0, r3
 8014008:	3708      	adds	r7, #8
 801400a:	46bd      	mov	sp, r7
 801400c:	bd80      	pop	{r7, pc}
	...

08014010 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8014010:	b580      	push	{r7, lr}
 8014012:	b084      	sub	sp, #16
 8014014:	af00      	add	r7, sp, #0
 8014016:	6078      	str	r0, [r7, #4]
 8014018:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	2b00      	cmp	r3, #0
 801401e:	d106      	bne.n	801402e <pbuf_remove_header+0x1e>
 8014020:	4b20      	ldr	r3, [pc, #128]	@ (80140a4 <pbuf_remove_header+0x94>)
 8014022:	f240 224b 	movw	r2, #587	@ 0x24b
 8014026:	4920      	ldr	r1, [pc, #128]	@ (80140a8 <pbuf_remove_header+0x98>)
 8014028:	4820      	ldr	r0, [pc, #128]	@ (80140ac <pbuf_remove_header+0x9c>)
 801402a:	f00a f92f 	bl	801e28c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	2b00      	cmp	r3, #0
 8014032:	d003      	beq.n	801403c <pbuf_remove_header+0x2c>
 8014034:	683b      	ldr	r3, [r7, #0]
 8014036:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801403a:	d301      	bcc.n	8014040 <pbuf_remove_header+0x30>
    return 1;
 801403c:	2301      	movs	r3, #1
 801403e:	e02c      	b.n	801409a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8014040:	683b      	ldr	r3, [r7, #0]
 8014042:	2b00      	cmp	r3, #0
 8014044:	d101      	bne.n	801404a <pbuf_remove_header+0x3a>
    return 0;
 8014046:	2300      	movs	r3, #0
 8014048:	e027      	b.n	801409a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 801404a:	683b      	ldr	r3, [r7, #0]
 801404c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	895b      	ldrh	r3, [r3, #10]
 8014052:	89fa      	ldrh	r2, [r7, #14]
 8014054:	429a      	cmp	r2, r3
 8014056:	d908      	bls.n	801406a <pbuf_remove_header+0x5a>
 8014058:	4b12      	ldr	r3, [pc, #72]	@ (80140a4 <pbuf_remove_header+0x94>)
 801405a:	f240 2255 	movw	r2, #597	@ 0x255
 801405e:	4914      	ldr	r1, [pc, #80]	@ (80140b0 <pbuf_remove_header+0xa0>)
 8014060:	4812      	ldr	r0, [pc, #72]	@ (80140ac <pbuf_remove_header+0x9c>)
 8014062:	f00a f913 	bl	801e28c <iprintf>
 8014066:	2301      	movs	r3, #1
 8014068:	e017      	b.n	801409a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	685b      	ldr	r3, [r3, #4]
 801406e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	685a      	ldr	r2, [r3, #4]
 8014074:	683b      	ldr	r3, [r7, #0]
 8014076:	441a      	add	r2, r3
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 801407c:	687b      	ldr	r3, [r7, #4]
 801407e:	895a      	ldrh	r2, [r3, #10]
 8014080:	89fb      	ldrh	r3, [r7, #14]
 8014082:	1ad3      	subs	r3, r2, r3
 8014084:	b29a      	uxth	r2, r3
 8014086:	687b      	ldr	r3, [r7, #4]
 8014088:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	891a      	ldrh	r2, [r3, #8]
 801408e:	89fb      	ldrh	r3, [r7, #14]
 8014090:	1ad3      	subs	r3, r2, r3
 8014092:	b29a      	uxth	r2, r3
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8014098:	2300      	movs	r3, #0
}
 801409a:	4618      	mov	r0, r3
 801409c:	3710      	adds	r7, #16
 801409e:	46bd      	mov	sp, r7
 80140a0:	bd80      	pop	{r7, pc}
 80140a2:	bf00      	nop
 80140a4:	08021958 	.word	0x08021958
 80140a8:	08021abc 	.word	0x08021abc
 80140ac:	080219b8 	.word	0x080219b8
 80140b0:	08021ac8 	.word	0x08021ac8

080140b4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80140b4:	b580      	push	{r7, lr}
 80140b6:	b082      	sub	sp, #8
 80140b8:	af00      	add	r7, sp, #0
 80140ba:	6078      	str	r0, [r7, #4]
 80140bc:	460b      	mov	r3, r1
 80140be:	807b      	strh	r3, [r7, #2]
 80140c0:	4613      	mov	r3, r2
 80140c2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80140c4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80140c8:	2b00      	cmp	r3, #0
 80140ca:	da08      	bge.n	80140de <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80140cc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80140d0:	425b      	negs	r3, r3
 80140d2:	4619      	mov	r1, r3
 80140d4:	6878      	ldr	r0, [r7, #4]
 80140d6:	f7ff ff9b 	bl	8014010 <pbuf_remove_header>
 80140da:	4603      	mov	r3, r0
 80140dc:	e007      	b.n	80140ee <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80140de:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80140e2:	787a      	ldrb	r2, [r7, #1]
 80140e4:	4619      	mov	r1, r3
 80140e6:	6878      	ldr	r0, [r7, #4]
 80140e8:	f7ff ff1a 	bl	8013f20 <pbuf_add_header_impl>
 80140ec:	4603      	mov	r3, r0
  }
}
 80140ee:	4618      	mov	r0, r3
 80140f0:	3708      	adds	r7, #8
 80140f2:	46bd      	mov	sp, r7
 80140f4:	bd80      	pop	{r7, pc}

080140f6 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80140f6:	b580      	push	{r7, lr}
 80140f8:	b082      	sub	sp, #8
 80140fa:	af00      	add	r7, sp, #0
 80140fc:	6078      	str	r0, [r7, #4]
 80140fe:	460b      	mov	r3, r1
 8014100:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8014102:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014106:	2201      	movs	r2, #1
 8014108:	4619      	mov	r1, r3
 801410a:	6878      	ldr	r0, [r7, #4]
 801410c:	f7ff ffd2 	bl	80140b4 <pbuf_header_impl>
 8014110:	4603      	mov	r3, r0
}
 8014112:	4618      	mov	r0, r3
 8014114:	3708      	adds	r7, #8
 8014116:	46bd      	mov	sp, r7
 8014118:	bd80      	pop	{r7, pc}
	...

0801411c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 801411c:	b580      	push	{r7, lr}
 801411e:	b088      	sub	sp, #32
 8014120:	af00      	add	r7, sp, #0
 8014122:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	2b00      	cmp	r3, #0
 8014128:	d10b      	bne.n	8014142 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	2b00      	cmp	r3, #0
 801412e:	d106      	bne.n	801413e <pbuf_free+0x22>
 8014130:	4b3b      	ldr	r3, [pc, #236]	@ (8014220 <pbuf_free+0x104>)
 8014132:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8014136:	493b      	ldr	r1, [pc, #236]	@ (8014224 <pbuf_free+0x108>)
 8014138:	483b      	ldr	r0, [pc, #236]	@ (8014228 <pbuf_free+0x10c>)
 801413a:	f00a f8a7 	bl	801e28c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 801413e:	2300      	movs	r3, #0
 8014140:	e069      	b.n	8014216 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8014142:	2300      	movs	r3, #0
 8014144:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8014146:	e062      	b.n	801420e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8014148:	f009 f9e0 	bl	801d50c <sys_arch_protect>
 801414c:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801414e:	687b      	ldr	r3, [r7, #4]
 8014150:	7b9b      	ldrb	r3, [r3, #14]
 8014152:	2b00      	cmp	r3, #0
 8014154:	d106      	bne.n	8014164 <pbuf_free+0x48>
 8014156:	4b32      	ldr	r3, [pc, #200]	@ (8014220 <pbuf_free+0x104>)
 8014158:	f240 22f1 	movw	r2, #753	@ 0x2f1
 801415c:	4933      	ldr	r1, [pc, #204]	@ (801422c <pbuf_free+0x110>)
 801415e:	4832      	ldr	r0, [pc, #200]	@ (8014228 <pbuf_free+0x10c>)
 8014160:	f00a f894 	bl	801e28c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	7b9b      	ldrb	r3, [r3, #14]
 8014168:	3b01      	subs	r3, #1
 801416a:	b2da      	uxtb	r2, r3
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	739a      	strb	r2, [r3, #14]
 8014170:	687b      	ldr	r3, [r7, #4]
 8014172:	7b9b      	ldrb	r3, [r3, #14]
 8014174:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8014176:	69b8      	ldr	r0, [r7, #24]
 8014178:	f009 f9d6 	bl	801d528 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 801417c:	7dfb      	ldrb	r3, [r7, #23]
 801417e:	2b00      	cmp	r3, #0
 8014180:	d143      	bne.n	801420a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	681b      	ldr	r3, [r3, #0]
 8014186:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	7b1b      	ldrb	r3, [r3, #12]
 801418c:	f003 030f 	and.w	r3, r3, #15
 8014190:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	7b5b      	ldrb	r3, [r3, #13]
 8014196:	f003 0302 	and.w	r3, r3, #2
 801419a:	2b00      	cmp	r3, #0
 801419c:	d011      	beq.n	80141c2 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80141a2:	68bb      	ldr	r3, [r7, #8]
 80141a4:	691b      	ldr	r3, [r3, #16]
 80141a6:	2b00      	cmp	r3, #0
 80141a8:	d106      	bne.n	80141b8 <pbuf_free+0x9c>
 80141aa:	4b1d      	ldr	r3, [pc, #116]	@ (8014220 <pbuf_free+0x104>)
 80141ac:	f240 22ff 	movw	r2, #767	@ 0x2ff
 80141b0:	491f      	ldr	r1, [pc, #124]	@ (8014230 <pbuf_free+0x114>)
 80141b2:	481d      	ldr	r0, [pc, #116]	@ (8014228 <pbuf_free+0x10c>)
 80141b4:	f00a f86a 	bl	801e28c <iprintf>
        pc->custom_free_function(p);
 80141b8:	68bb      	ldr	r3, [r7, #8]
 80141ba:	691b      	ldr	r3, [r3, #16]
 80141bc:	6878      	ldr	r0, [r7, #4]
 80141be:	4798      	blx	r3
 80141c0:	e01d      	b.n	80141fe <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80141c2:	7bfb      	ldrb	r3, [r7, #15]
 80141c4:	2b02      	cmp	r3, #2
 80141c6:	d104      	bne.n	80141d2 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 80141c8:	6879      	ldr	r1, [r7, #4]
 80141ca:	200c      	movs	r0, #12
 80141cc:	f7ff f934 	bl	8013438 <memp_free>
 80141d0:	e015      	b.n	80141fe <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80141d2:	7bfb      	ldrb	r3, [r7, #15]
 80141d4:	2b01      	cmp	r3, #1
 80141d6:	d104      	bne.n	80141e2 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 80141d8:	6879      	ldr	r1, [r7, #4]
 80141da:	200b      	movs	r0, #11
 80141dc:	f7ff f92c 	bl	8013438 <memp_free>
 80141e0:	e00d      	b.n	80141fe <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80141e2:	7bfb      	ldrb	r3, [r7, #15]
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	d103      	bne.n	80141f0 <pbuf_free+0xd4>
          mem_free(p);
 80141e8:	6878      	ldr	r0, [r7, #4]
 80141ea:	f7fe fd71 	bl	8012cd0 <mem_free>
 80141ee:	e006      	b.n	80141fe <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80141f0:	4b0b      	ldr	r3, [pc, #44]	@ (8014220 <pbuf_free+0x104>)
 80141f2:	f240 320f 	movw	r2, #783	@ 0x30f
 80141f6:	490f      	ldr	r1, [pc, #60]	@ (8014234 <pbuf_free+0x118>)
 80141f8:	480b      	ldr	r0, [pc, #44]	@ (8014228 <pbuf_free+0x10c>)
 80141fa:	f00a f847 	bl	801e28c <iprintf>
        }
      }
      count++;
 80141fe:	7ffb      	ldrb	r3, [r7, #31]
 8014200:	3301      	adds	r3, #1
 8014202:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8014204:	693b      	ldr	r3, [r7, #16]
 8014206:	607b      	str	r3, [r7, #4]
 8014208:	e001      	b.n	801420e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 801420a:	2300      	movs	r3, #0
 801420c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801420e:	687b      	ldr	r3, [r7, #4]
 8014210:	2b00      	cmp	r3, #0
 8014212:	d199      	bne.n	8014148 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8014214:	7ffb      	ldrb	r3, [r7, #31]
}
 8014216:	4618      	mov	r0, r3
 8014218:	3720      	adds	r7, #32
 801421a:	46bd      	mov	sp, r7
 801421c:	bd80      	pop	{r7, pc}
 801421e:	bf00      	nop
 8014220:	08021958 	.word	0x08021958
 8014224:	08021abc 	.word	0x08021abc
 8014228:	080219b8 	.word	0x080219b8
 801422c:	08021ae8 	.word	0x08021ae8
 8014230:	08021b00 	.word	0x08021b00
 8014234:	08021b24 	.word	0x08021b24

08014238 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8014238:	b480      	push	{r7}
 801423a:	b085      	sub	sp, #20
 801423c:	af00      	add	r7, sp, #0
 801423e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8014240:	2300      	movs	r3, #0
 8014242:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8014244:	e005      	b.n	8014252 <pbuf_clen+0x1a>
    ++len;
 8014246:	89fb      	ldrh	r3, [r7, #14]
 8014248:	3301      	adds	r3, #1
 801424a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	681b      	ldr	r3, [r3, #0]
 8014250:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	2b00      	cmp	r3, #0
 8014256:	d1f6      	bne.n	8014246 <pbuf_clen+0xe>
  }
  return len;
 8014258:	89fb      	ldrh	r3, [r7, #14]
}
 801425a:	4618      	mov	r0, r3
 801425c:	3714      	adds	r7, #20
 801425e:	46bd      	mov	sp, r7
 8014260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014264:	4770      	bx	lr
	...

08014268 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8014268:	b580      	push	{r7, lr}
 801426a:	b084      	sub	sp, #16
 801426c:	af00      	add	r7, sp, #0
 801426e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	2b00      	cmp	r3, #0
 8014274:	d016      	beq.n	80142a4 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8014276:	f009 f949 	bl	801d50c <sys_arch_protect>
 801427a:	60f8      	str	r0, [r7, #12]
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	7b9b      	ldrb	r3, [r3, #14]
 8014280:	3301      	adds	r3, #1
 8014282:	b2da      	uxtb	r2, r3
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	739a      	strb	r2, [r3, #14]
 8014288:	68f8      	ldr	r0, [r7, #12]
 801428a:	f009 f94d 	bl	801d528 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	7b9b      	ldrb	r3, [r3, #14]
 8014292:	2b00      	cmp	r3, #0
 8014294:	d106      	bne.n	80142a4 <pbuf_ref+0x3c>
 8014296:	4b05      	ldr	r3, [pc, #20]	@ (80142ac <pbuf_ref+0x44>)
 8014298:	f240 3242 	movw	r2, #834	@ 0x342
 801429c:	4904      	ldr	r1, [pc, #16]	@ (80142b0 <pbuf_ref+0x48>)
 801429e:	4805      	ldr	r0, [pc, #20]	@ (80142b4 <pbuf_ref+0x4c>)
 80142a0:	f009 fff4 	bl	801e28c <iprintf>
  }
}
 80142a4:	bf00      	nop
 80142a6:	3710      	adds	r7, #16
 80142a8:	46bd      	mov	sp, r7
 80142aa:	bd80      	pop	{r7, pc}
 80142ac:	08021958 	.word	0x08021958
 80142b0:	08021b38 	.word	0x08021b38
 80142b4:	080219b8 	.word	0x080219b8

080142b8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80142b8:	b580      	push	{r7, lr}
 80142ba:	b084      	sub	sp, #16
 80142bc:	af00      	add	r7, sp, #0
 80142be:	6078      	str	r0, [r7, #4]
 80142c0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	2b00      	cmp	r3, #0
 80142c6:	d002      	beq.n	80142ce <pbuf_cat+0x16>
 80142c8:	683b      	ldr	r3, [r7, #0]
 80142ca:	2b00      	cmp	r3, #0
 80142cc:	d107      	bne.n	80142de <pbuf_cat+0x26>
 80142ce:	4b20      	ldr	r3, [pc, #128]	@ (8014350 <pbuf_cat+0x98>)
 80142d0:	f240 3259 	movw	r2, #857	@ 0x359
 80142d4:	491f      	ldr	r1, [pc, #124]	@ (8014354 <pbuf_cat+0x9c>)
 80142d6:	4820      	ldr	r0, [pc, #128]	@ (8014358 <pbuf_cat+0xa0>)
 80142d8:	f009 ffd8 	bl	801e28c <iprintf>
 80142dc:	e034      	b.n	8014348 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	60fb      	str	r3, [r7, #12]
 80142e2:	e00a      	b.n	80142fa <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80142e4:	68fb      	ldr	r3, [r7, #12]
 80142e6:	891a      	ldrh	r2, [r3, #8]
 80142e8:	683b      	ldr	r3, [r7, #0]
 80142ea:	891b      	ldrh	r3, [r3, #8]
 80142ec:	4413      	add	r3, r2
 80142ee:	b29a      	uxth	r2, r3
 80142f0:	68fb      	ldr	r3, [r7, #12]
 80142f2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80142f4:	68fb      	ldr	r3, [r7, #12]
 80142f6:	681b      	ldr	r3, [r3, #0]
 80142f8:	60fb      	str	r3, [r7, #12]
 80142fa:	68fb      	ldr	r3, [r7, #12]
 80142fc:	681b      	ldr	r3, [r3, #0]
 80142fe:	2b00      	cmp	r3, #0
 8014300:	d1f0      	bne.n	80142e4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8014302:	68fb      	ldr	r3, [r7, #12]
 8014304:	891a      	ldrh	r2, [r3, #8]
 8014306:	68fb      	ldr	r3, [r7, #12]
 8014308:	895b      	ldrh	r3, [r3, #10]
 801430a:	429a      	cmp	r2, r3
 801430c:	d006      	beq.n	801431c <pbuf_cat+0x64>
 801430e:	4b10      	ldr	r3, [pc, #64]	@ (8014350 <pbuf_cat+0x98>)
 8014310:	f240 3262 	movw	r2, #866	@ 0x362
 8014314:	4911      	ldr	r1, [pc, #68]	@ (801435c <pbuf_cat+0xa4>)
 8014316:	4810      	ldr	r0, [pc, #64]	@ (8014358 <pbuf_cat+0xa0>)
 8014318:	f009 ffb8 	bl	801e28c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 801431c:	68fb      	ldr	r3, [r7, #12]
 801431e:	681b      	ldr	r3, [r3, #0]
 8014320:	2b00      	cmp	r3, #0
 8014322:	d006      	beq.n	8014332 <pbuf_cat+0x7a>
 8014324:	4b0a      	ldr	r3, [pc, #40]	@ (8014350 <pbuf_cat+0x98>)
 8014326:	f240 3263 	movw	r2, #867	@ 0x363
 801432a:	490d      	ldr	r1, [pc, #52]	@ (8014360 <pbuf_cat+0xa8>)
 801432c:	480a      	ldr	r0, [pc, #40]	@ (8014358 <pbuf_cat+0xa0>)
 801432e:	f009 ffad 	bl	801e28c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8014332:	68fb      	ldr	r3, [r7, #12]
 8014334:	891a      	ldrh	r2, [r3, #8]
 8014336:	683b      	ldr	r3, [r7, #0]
 8014338:	891b      	ldrh	r3, [r3, #8]
 801433a:	4413      	add	r3, r2
 801433c:	b29a      	uxth	r2, r3
 801433e:	68fb      	ldr	r3, [r7, #12]
 8014340:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8014342:	68fb      	ldr	r3, [r7, #12]
 8014344:	683a      	ldr	r2, [r7, #0]
 8014346:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8014348:	3710      	adds	r7, #16
 801434a:	46bd      	mov	sp, r7
 801434c:	bd80      	pop	{r7, pc}
 801434e:	bf00      	nop
 8014350:	08021958 	.word	0x08021958
 8014354:	08021b4c 	.word	0x08021b4c
 8014358:	080219b8 	.word	0x080219b8
 801435c:	08021b84 	.word	0x08021b84
 8014360:	08021bb4 	.word	0x08021bb4

08014364 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8014364:	b580      	push	{r7, lr}
 8014366:	b086      	sub	sp, #24
 8014368:	af00      	add	r7, sp, #0
 801436a:	6078      	str	r0, [r7, #4]
 801436c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 801436e:	2300      	movs	r3, #0
 8014370:	617b      	str	r3, [r7, #20]
 8014372:	2300      	movs	r3, #0
 8014374:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8014376:	687b      	ldr	r3, [r7, #4]
 8014378:	2b00      	cmp	r3, #0
 801437a:	d008      	beq.n	801438e <pbuf_copy+0x2a>
 801437c:	683b      	ldr	r3, [r7, #0]
 801437e:	2b00      	cmp	r3, #0
 8014380:	d005      	beq.n	801438e <pbuf_copy+0x2a>
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	891a      	ldrh	r2, [r3, #8]
 8014386:	683b      	ldr	r3, [r7, #0]
 8014388:	891b      	ldrh	r3, [r3, #8]
 801438a:	429a      	cmp	r2, r3
 801438c:	d209      	bcs.n	80143a2 <pbuf_copy+0x3e>
 801438e:	4b57      	ldr	r3, [pc, #348]	@ (80144ec <pbuf_copy+0x188>)
 8014390:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8014394:	4956      	ldr	r1, [pc, #344]	@ (80144f0 <pbuf_copy+0x18c>)
 8014396:	4857      	ldr	r0, [pc, #348]	@ (80144f4 <pbuf_copy+0x190>)
 8014398:	f009 ff78 	bl	801e28c <iprintf>
 801439c:	f06f 030f 	mvn.w	r3, #15
 80143a0:	e09f      	b.n	80144e2 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	895b      	ldrh	r3, [r3, #10]
 80143a6:	461a      	mov	r2, r3
 80143a8:	697b      	ldr	r3, [r7, #20]
 80143aa:	1ad2      	subs	r2, r2, r3
 80143ac:	683b      	ldr	r3, [r7, #0]
 80143ae:	895b      	ldrh	r3, [r3, #10]
 80143b0:	4619      	mov	r1, r3
 80143b2:	693b      	ldr	r3, [r7, #16]
 80143b4:	1acb      	subs	r3, r1, r3
 80143b6:	429a      	cmp	r2, r3
 80143b8:	d306      	bcc.n	80143c8 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80143ba:	683b      	ldr	r3, [r7, #0]
 80143bc:	895b      	ldrh	r3, [r3, #10]
 80143be:	461a      	mov	r2, r3
 80143c0:	693b      	ldr	r3, [r7, #16]
 80143c2:	1ad3      	subs	r3, r2, r3
 80143c4:	60fb      	str	r3, [r7, #12]
 80143c6:	e005      	b.n	80143d4 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80143c8:	687b      	ldr	r3, [r7, #4]
 80143ca:	895b      	ldrh	r3, [r3, #10]
 80143cc:	461a      	mov	r2, r3
 80143ce:	697b      	ldr	r3, [r7, #20]
 80143d0:	1ad3      	subs	r3, r2, r3
 80143d2:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	685a      	ldr	r2, [r3, #4]
 80143d8:	697b      	ldr	r3, [r7, #20]
 80143da:	18d0      	adds	r0, r2, r3
 80143dc:	683b      	ldr	r3, [r7, #0]
 80143de:	685a      	ldr	r2, [r3, #4]
 80143e0:	693b      	ldr	r3, [r7, #16]
 80143e2:	4413      	add	r3, r2
 80143e4:	68fa      	ldr	r2, [r7, #12]
 80143e6:	4619      	mov	r1, r3
 80143e8:	f00a f903 	bl	801e5f2 <memcpy>
    offset_to += len;
 80143ec:	697a      	ldr	r2, [r7, #20]
 80143ee:	68fb      	ldr	r3, [r7, #12]
 80143f0:	4413      	add	r3, r2
 80143f2:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80143f4:	693a      	ldr	r2, [r7, #16]
 80143f6:	68fb      	ldr	r3, [r7, #12]
 80143f8:	4413      	add	r3, r2
 80143fa:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	895b      	ldrh	r3, [r3, #10]
 8014400:	461a      	mov	r2, r3
 8014402:	697b      	ldr	r3, [r7, #20]
 8014404:	4293      	cmp	r3, r2
 8014406:	d906      	bls.n	8014416 <pbuf_copy+0xb2>
 8014408:	4b38      	ldr	r3, [pc, #224]	@ (80144ec <pbuf_copy+0x188>)
 801440a:	f240 32d9 	movw	r2, #985	@ 0x3d9
 801440e:	493a      	ldr	r1, [pc, #232]	@ (80144f8 <pbuf_copy+0x194>)
 8014410:	4838      	ldr	r0, [pc, #224]	@ (80144f4 <pbuf_copy+0x190>)
 8014412:	f009 ff3b 	bl	801e28c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8014416:	683b      	ldr	r3, [r7, #0]
 8014418:	895b      	ldrh	r3, [r3, #10]
 801441a:	461a      	mov	r2, r3
 801441c:	693b      	ldr	r3, [r7, #16]
 801441e:	4293      	cmp	r3, r2
 8014420:	d906      	bls.n	8014430 <pbuf_copy+0xcc>
 8014422:	4b32      	ldr	r3, [pc, #200]	@ (80144ec <pbuf_copy+0x188>)
 8014424:	f240 32da 	movw	r2, #986	@ 0x3da
 8014428:	4934      	ldr	r1, [pc, #208]	@ (80144fc <pbuf_copy+0x198>)
 801442a:	4832      	ldr	r0, [pc, #200]	@ (80144f4 <pbuf_copy+0x190>)
 801442c:	f009 ff2e 	bl	801e28c <iprintf>
    if (offset_from >= p_from->len) {
 8014430:	683b      	ldr	r3, [r7, #0]
 8014432:	895b      	ldrh	r3, [r3, #10]
 8014434:	461a      	mov	r2, r3
 8014436:	693b      	ldr	r3, [r7, #16]
 8014438:	4293      	cmp	r3, r2
 801443a:	d304      	bcc.n	8014446 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 801443c:	2300      	movs	r3, #0
 801443e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8014440:	683b      	ldr	r3, [r7, #0]
 8014442:	681b      	ldr	r3, [r3, #0]
 8014444:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	895b      	ldrh	r3, [r3, #10]
 801444a:	461a      	mov	r2, r3
 801444c:	697b      	ldr	r3, [r7, #20]
 801444e:	4293      	cmp	r3, r2
 8014450:	d114      	bne.n	801447c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8014452:	2300      	movs	r3, #0
 8014454:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8014456:	687b      	ldr	r3, [r7, #4]
 8014458:	681b      	ldr	r3, [r3, #0]
 801445a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	2b00      	cmp	r3, #0
 8014460:	d10c      	bne.n	801447c <pbuf_copy+0x118>
 8014462:	683b      	ldr	r3, [r7, #0]
 8014464:	2b00      	cmp	r3, #0
 8014466:	d009      	beq.n	801447c <pbuf_copy+0x118>
 8014468:	4b20      	ldr	r3, [pc, #128]	@ (80144ec <pbuf_copy+0x188>)
 801446a:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 801446e:	4924      	ldr	r1, [pc, #144]	@ (8014500 <pbuf_copy+0x19c>)
 8014470:	4820      	ldr	r0, [pc, #128]	@ (80144f4 <pbuf_copy+0x190>)
 8014472:	f009 ff0b 	bl	801e28c <iprintf>
 8014476:	f06f 030f 	mvn.w	r3, #15
 801447a:	e032      	b.n	80144e2 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801447c:	683b      	ldr	r3, [r7, #0]
 801447e:	2b00      	cmp	r3, #0
 8014480:	d013      	beq.n	80144aa <pbuf_copy+0x146>
 8014482:	683b      	ldr	r3, [r7, #0]
 8014484:	895a      	ldrh	r2, [r3, #10]
 8014486:	683b      	ldr	r3, [r7, #0]
 8014488:	891b      	ldrh	r3, [r3, #8]
 801448a:	429a      	cmp	r2, r3
 801448c:	d10d      	bne.n	80144aa <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801448e:	683b      	ldr	r3, [r7, #0]
 8014490:	681b      	ldr	r3, [r3, #0]
 8014492:	2b00      	cmp	r3, #0
 8014494:	d009      	beq.n	80144aa <pbuf_copy+0x146>
 8014496:	4b15      	ldr	r3, [pc, #84]	@ (80144ec <pbuf_copy+0x188>)
 8014498:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 801449c:	4919      	ldr	r1, [pc, #100]	@ (8014504 <pbuf_copy+0x1a0>)
 801449e:	4815      	ldr	r0, [pc, #84]	@ (80144f4 <pbuf_copy+0x190>)
 80144a0:	f009 fef4 	bl	801e28c <iprintf>
 80144a4:	f06f 0305 	mvn.w	r3, #5
 80144a8:	e01b      	b.n	80144e2 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80144aa:	687b      	ldr	r3, [r7, #4]
 80144ac:	2b00      	cmp	r3, #0
 80144ae:	d013      	beq.n	80144d8 <pbuf_copy+0x174>
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	895a      	ldrh	r2, [r3, #10]
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	891b      	ldrh	r3, [r3, #8]
 80144b8:	429a      	cmp	r2, r3
 80144ba:	d10d      	bne.n	80144d8 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	681b      	ldr	r3, [r3, #0]
 80144c0:	2b00      	cmp	r3, #0
 80144c2:	d009      	beq.n	80144d8 <pbuf_copy+0x174>
 80144c4:	4b09      	ldr	r3, [pc, #36]	@ (80144ec <pbuf_copy+0x188>)
 80144c6:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 80144ca:	490e      	ldr	r1, [pc, #56]	@ (8014504 <pbuf_copy+0x1a0>)
 80144cc:	4809      	ldr	r0, [pc, #36]	@ (80144f4 <pbuf_copy+0x190>)
 80144ce:	f009 fedd 	bl	801e28c <iprintf>
 80144d2:	f06f 0305 	mvn.w	r3, #5
 80144d6:	e004      	b.n	80144e2 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80144d8:	683b      	ldr	r3, [r7, #0]
 80144da:	2b00      	cmp	r3, #0
 80144dc:	f47f af61 	bne.w	80143a2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80144e0:	2300      	movs	r3, #0
}
 80144e2:	4618      	mov	r0, r3
 80144e4:	3718      	adds	r7, #24
 80144e6:	46bd      	mov	sp, r7
 80144e8:	bd80      	pop	{r7, pc}
 80144ea:	bf00      	nop
 80144ec:	08021958 	.word	0x08021958
 80144f0:	08021c00 	.word	0x08021c00
 80144f4:	080219b8 	.word	0x080219b8
 80144f8:	08021c30 	.word	0x08021c30
 80144fc:	08021c48 	.word	0x08021c48
 8014500:	08021c64 	.word	0x08021c64
 8014504:	08021c74 	.word	0x08021c74

08014508 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8014508:	b580      	push	{r7, lr}
 801450a:	b088      	sub	sp, #32
 801450c:	af00      	add	r7, sp, #0
 801450e:	60f8      	str	r0, [r7, #12]
 8014510:	60b9      	str	r1, [r7, #8]
 8014512:	4611      	mov	r1, r2
 8014514:	461a      	mov	r2, r3
 8014516:	460b      	mov	r3, r1
 8014518:	80fb      	strh	r3, [r7, #6]
 801451a:	4613      	mov	r3, r2
 801451c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 801451e:	2300      	movs	r3, #0
 8014520:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8014522:	2300      	movs	r3, #0
 8014524:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8014526:	68fb      	ldr	r3, [r7, #12]
 8014528:	2b00      	cmp	r3, #0
 801452a:	d108      	bne.n	801453e <pbuf_copy_partial+0x36>
 801452c:	4b2b      	ldr	r3, [pc, #172]	@ (80145dc <pbuf_copy_partial+0xd4>)
 801452e:	f240 420a 	movw	r2, #1034	@ 0x40a
 8014532:	492b      	ldr	r1, [pc, #172]	@ (80145e0 <pbuf_copy_partial+0xd8>)
 8014534:	482b      	ldr	r0, [pc, #172]	@ (80145e4 <pbuf_copy_partial+0xdc>)
 8014536:	f009 fea9 	bl	801e28c <iprintf>
 801453a:	2300      	movs	r3, #0
 801453c:	e04a      	b.n	80145d4 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801453e:	68bb      	ldr	r3, [r7, #8]
 8014540:	2b00      	cmp	r3, #0
 8014542:	d108      	bne.n	8014556 <pbuf_copy_partial+0x4e>
 8014544:	4b25      	ldr	r3, [pc, #148]	@ (80145dc <pbuf_copy_partial+0xd4>)
 8014546:	f240 420b 	movw	r2, #1035	@ 0x40b
 801454a:	4927      	ldr	r1, [pc, #156]	@ (80145e8 <pbuf_copy_partial+0xe0>)
 801454c:	4825      	ldr	r0, [pc, #148]	@ (80145e4 <pbuf_copy_partial+0xdc>)
 801454e:	f009 fe9d 	bl	801e28c <iprintf>
 8014552:	2300      	movs	r3, #0
 8014554:	e03e      	b.n	80145d4 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8014556:	68fb      	ldr	r3, [r7, #12]
 8014558:	61fb      	str	r3, [r7, #28]
 801455a:	e034      	b.n	80145c6 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 801455c:	88bb      	ldrh	r3, [r7, #4]
 801455e:	2b00      	cmp	r3, #0
 8014560:	d00a      	beq.n	8014578 <pbuf_copy_partial+0x70>
 8014562:	69fb      	ldr	r3, [r7, #28]
 8014564:	895b      	ldrh	r3, [r3, #10]
 8014566:	88ba      	ldrh	r2, [r7, #4]
 8014568:	429a      	cmp	r2, r3
 801456a:	d305      	bcc.n	8014578 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 801456c:	69fb      	ldr	r3, [r7, #28]
 801456e:	895b      	ldrh	r3, [r3, #10]
 8014570:	88ba      	ldrh	r2, [r7, #4]
 8014572:	1ad3      	subs	r3, r2, r3
 8014574:	80bb      	strh	r3, [r7, #4]
 8014576:	e023      	b.n	80145c0 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8014578:	69fb      	ldr	r3, [r7, #28]
 801457a:	895a      	ldrh	r2, [r3, #10]
 801457c:	88bb      	ldrh	r3, [r7, #4]
 801457e:	1ad3      	subs	r3, r2, r3
 8014580:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8014582:	8b3a      	ldrh	r2, [r7, #24]
 8014584:	88fb      	ldrh	r3, [r7, #6]
 8014586:	429a      	cmp	r2, r3
 8014588:	d901      	bls.n	801458e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 801458a:	88fb      	ldrh	r3, [r7, #6]
 801458c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801458e:	8b7b      	ldrh	r3, [r7, #26]
 8014590:	68ba      	ldr	r2, [r7, #8]
 8014592:	18d0      	adds	r0, r2, r3
 8014594:	69fb      	ldr	r3, [r7, #28]
 8014596:	685a      	ldr	r2, [r3, #4]
 8014598:	88bb      	ldrh	r3, [r7, #4]
 801459a:	4413      	add	r3, r2
 801459c:	8b3a      	ldrh	r2, [r7, #24]
 801459e:	4619      	mov	r1, r3
 80145a0:	f00a f827 	bl	801e5f2 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80145a4:	8afa      	ldrh	r2, [r7, #22]
 80145a6:	8b3b      	ldrh	r3, [r7, #24]
 80145a8:	4413      	add	r3, r2
 80145aa:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80145ac:	8b7a      	ldrh	r2, [r7, #26]
 80145ae:	8b3b      	ldrh	r3, [r7, #24]
 80145b0:	4413      	add	r3, r2
 80145b2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80145b4:	88fa      	ldrh	r2, [r7, #6]
 80145b6:	8b3b      	ldrh	r3, [r7, #24]
 80145b8:	1ad3      	subs	r3, r2, r3
 80145ba:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80145bc:	2300      	movs	r3, #0
 80145be:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80145c0:	69fb      	ldr	r3, [r7, #28]
 80145c2:	681b      	ldr	r3, [r3, #0]
 80145c4:	61fb      	str	r3, [r7, #28]
 80145c6:	88fb      	ldrh	r3, [r7, #6]
 80145c8:	2b00      	cmp	r3, #0
 80145ca:	d002      	beq.n	80145d2 <pbuf_copy_partial+0xca>
 80145cc:	69fb      	ldr	r3, [r7, #28]
 80145ce:	2b00      	cmp	r3, #0
 80145d0:	d1c4      	bne.n	801455c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80145d2:	8afb      	ldrh	r3, [r7, #22]
}
 80145d4:	4618      	mov	r0, r3
 80145d6:	3720      	adds	r7, #32
 80145d8:	46bd      	mov	sp, r7
 80145da:	bd80      	pop	{r7, pc}
 80145dc:	08021958 	.word	0x08021958
 80145e0:	08021ca0 	.word	0x08021ca0
 80145e4:	080219b8 	.word	0x080219b8
 80145e8:	08021cc0 	.word	0x08021cc0

080145ec <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80145ec:	b580      	push	{r7, lr}
 80145ee:	b084      	sub	sp, #16
 80145f0:	af00      	add	r7, sp, #0
 80145f2:	4603      	mov	r3, r0
 80145f4:	603a      	str	r2, [r7, #0]
 80145f6:	71fb      	strb	r3, [r7, #7]
 80145f8:	460b      	mov	r3, r1
 80145fa:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80145fc:	683b      	ldr	r3, [r7, #0]
 80145fe:	8919      	ldrh	r1, [r3, #8]
 8014600:	88ba      	ldrh	r2, [r7, #4]
 8014602:	79fb      	ldrb	r3, [r7, #7]
 8014604:	4618      	mov	r0, r3
 8014606:	f7ff faa5 	bl	8013b54 <pbuf_alloc>
 801460a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 801460c:	68fb      	ldr	r3, [r7, #12]
 801460e:	2b00      	cmp	r3, #0
 8014610:	d101      	bne.n	8014616 <pbuf_clone+0x2a>
    return NULL;
 8014612:	2300      	movs	r3, #0
 8014614:	e011      	b.n	801463a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8014616:	6839      	ldr	r1, [r7, #0]
 8014618:	68f8      	ldr	r0, [r7, #12]
 801461a:	f7ff fea3 	bl	8014364 <pbuf_copy>
 801461e:	4603      	mov	r3, r0
 8014620:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8014622:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8014626:	2b00      	cmp	r3, #0
 8014628:	d006      	beq.n	8014638 <pbuf_clone+0x4c>
 801462a:	4b06      	ldr	r3, [pc, #24]	@ (8014644 <pbuf_clone+0x58>)
 801462c:	f240 5224 	movw	r2, #1316	@ 0x524
 8014630:	4905      	ldr	r1, [pc, #20]	@ (8014648 <pbuf_clone+0x5c>)
 8014632:	4806      	ldr	r0, [pc, #24]	@ (801464c <pbuf_clone+0x60>)
 8014634:	f009 fe2a 	bl	801e28c <iprintf>
  return q;
 8014638:	68fb      	ldr	r3, [r7, #12]
}
 801463a:	4618      	mov	r0, r3
 801463c:	3710      	adds	r7, #16
 801463e:	46bd      	mov	sp, r7
 8014640:	bd80      	pop	{r7, pc}
 8014642:	bf00      	nop
 8014644:	08021958 	.word	0x08021958
 8014648:	08021dcc 	.word	0x08021dcc
 801464c:	080219b8 	.word	0x080219b8

08014650 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8014650:	b580      	push	{r7, lr}
 8014652:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8014654:	f009 fc96 	bl	801df84 <rand>
 8014658:	4603      	mov	r3, r0
 801465a:	b29b      	uxth	r3, r3
 801465c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8014660:	b29b      	uxth	r3, r3
 8014662:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8014666:	b29a      	uxth	r2, r3
 8014668:	4b01      	ldr	r3, [pc, #4]	@ (8014670 <tcp_init+0x20>)
 801466a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801466c:	bf00      	nop
 801466e:	bd80      	pop	{r7, pc}
 8014670:	200000a4 	.word	0x200000a4

08014674 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8014674:	b580      	push	{r7, lr}
 8014676:	b082      	sub	sp, #8
 8014678:	af00      	add	r7, sp, #0
 801467a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	7d1b      	ldrb	r3, [r3, #20]
 8014680:	2b01      	cmp	r3, #1
 8014682:	d105      	bne.n	8014690 <tcp_free+0x1c>
 8014684:	4b06      	ldr	r3, [pc, #24]	@ (80146a0 <tcp_free+0x2c>)
 8014686:	22d4      	movs	r2, #212	@ 0xd4
 8014688:	4906      	ldr	r1, [pc, #24]	@ (80146a4 <tcp_free+0x30>)
 801468a:	4807      	ldr	r0, [pc, #28]	@ (80146a8 <tcp_free+0x34>)
 801468c:	f009 fdfe 	bl	801e28c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8014690:	6879      	ldr	r1, [r7, #4]
 8014692:	2001      	movs	r0, #1
 8014694:	f7fe fed0 	bl	8013438 <memp_free>
}
 8014698:	bf00      	nop
 801469a:	3708      	adds	r7, #8
 801469c:	46bd      	mov	sp, r7
 801469e:	bd80      	pop	{r7, pc}
 80146a0:	08021e58 	.word	0x08021e58
 80146a4:	08021e88 	.word	0x08021e88
 80146a8:	08021e9c 	.word	0x08021e9c

080146ac <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80146ac:	b580      	push	{r7, lr}
 80146ae:	b082      	sub	sp, #8
 80146b0:	af00      	add	r7, sp, #0
 80146b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	7d1b      	ldrb	r3, [r3, #20]
 80146b8:	2b01      	cmp	r3, #1
 80146ba:	d105      	bne.n	80146c8 <tcp_free_listen+0x1c>
 80146bc:	4b06      	ldr	r3, [pc, #24]	@ (80146d8 <tcp_free_listen+0x2c>)
 80146be:	22df      	movs	r2, #223	@ 0xdf
 80146c0:	4906      	ldr	r1, [pc, #24]	@ (80146dc <tcp_free_listen+0x30>)
 80146c2:	4807      	ldr	r0, [pc, #28]	@ (80146e0 <tcp_free_listen+0x34>)
 80146c4:	f009 fde2 	bl	801e28c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80146c8:	6879      	ldr	r1, [r7, #4]
 80146ca:	2002      	movs	r0, #2
 80146cc:	f7fe feb4 	bl	8013438 <memp_free>
}
 80146d0:	bf00      	nop
 80146d2:	3708      	adds	r7, #8
 80146d4:	46bd      	mov	sp, r7
 80146d6:	bd80      	pop	{r7, pc}
 80146d8:	08021e58 	.word	0x08021e58
 80146dc:	08021ec4 	.word	0x08021ec4
 80146e0:	08021e9c 	.word	0x08021e9c

080146e4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80146e4:	b580      	push	{r7, lr}
 80146e6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80146e8:	f001 f85e 	bl	80157a8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80146ec:	4b07      	ldr	r3, [pc, #28]	@ (801470c <tcp_tmr+0x28>)
 80146ee:	781b      	ldrb	r3, [r3, #0]
 80146f0:	3301      	adds	r3, #1
 80146f2:	b2da      	uxtb	r2, r3
 80146f4:	4b05      	ldr	r3, [pc, #20]	@ (801470c <tcp_tmr+0x28>)
 80146f6:	701a      	strb	r2, [r3, #0]
 80146f8:	4b04      	ldr	r3, [pc, #16]	@ (801470c <tcp_tmr+0x28>)
 80146fa:	781b      	ldrb	r3, [r3, #0]
 80146fc:	f003 0301 	and.w	r3, r3, #1
 8014700:	2b00      	cmp	r3, #0
 8014702:	d001      	beq.n	8014708 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8014704:	f000 fd0e 	bl	8015124 <tcp_slowtmr>
  }
}
 8014708:	bf00      	nop
 801470a:	bd80      	pop	{r7, pc}
 801470c:	2000cad5 	.word	0x2000cad5

08014710 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8014710:	b580      	push	{r7, lr}
 8014712:	b084      	sub	sp, #16
 8014714:	af00      	add	r7, sp, #0
 8014716:	6078      	str	r0, [r7, #4]
 8014718:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 801471a:	683b      	ldr	r3, [r7, #0]
 801471c:	2b00      	cmp	r3, #0
 801471e:	d105      	bne.n	801472c <tcp_remove_listener+0x1c>
 8014720:	4b0d      	ldr	r3, [pc, #52]	@ (8014758 <tcp_remove_listener+0x48>)
 8014722:	22ff      	movs	r2, #255	@ 0xff
 8014724:	490d      	ldr	r1, [pc, #52]	@ (801475c <tcp_remove_listener+0x4c>)
 8014726:	480e      	ldr	r0, [pc, #56]	@ (8014760 <tcp_remove_listener+0x50>)
 8014728:	f009 fdb0 	bl	801e28c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801472c:	687b      	ldr	r3, [r7, #4]
 801472e:	60fb      	str	r3, [r7, #12]
 8014730:	e00a      	b.n	8014748 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8014732:	68fb      	ldr	r3, [r7, #12]
 8014734:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014736:	683a      	ldr	r2, [r7, #0]
 8014738:	429a      	cmp	r2, r3
 801473a:	d102      	bne.n	8014742 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 801473c:	68fb      	ldr	r3, [r7, #12]
 801473e:	2200      	movs	r2, #0
 8014740:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8014742:	68fb      	ldr	r3, [r7, #12]
 8014744:	68db      	ldr	r3, [r3, #12]
 8014746:	60fb      	str	r3, [r7, #12]
 8014748:	68fb      	ldr	r3, [r7, #12]
 801474a:	2b00      	cmp	r3, #0
 801474c:	d1f1      	bne.n	8014732 <tcp_remove_listener+0x22>
    }
  }
}
 801474e:	bf00      	nop
 8014750:	bf00      	nop
 8014752:	3710      	adds	r7, #16
 8014754:	46bd      	mov	sp, r7
 8014756:	bd80      	pop	{r7, pc}
 8014758:	08021e58 	.word	0x08021e58
 801475c:	08021ee0 	.word	0x08021ee0
 8014760:	08021e9c 	.word	0x08021e9c

08014764 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8014764:	b580      	push	{r7, lr}
 8014766:	b084      	sub	sp, #16
 8014768:	af00      	add	r7, sp, #0
 801476a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801476c:	687b      	ldr	r3, [r7, #4]
 801476e:	2b00      	cmp	r3, #0
 8014770:	d106      	bne.n	8014780 <tcp_listen_closed+0x1c>
 8014772:	4b14      	ldr	r3, [pc, #80]	@ (80147c4 <tcp_listen_closed+0x60>)
 8014774:	f240 1211 	movw	r2, #273	@ 0x111
 8014778:	4913      	ldr	r1, [pc, #76]	@ (80147c8 <tcp_listen_closed+0x64>)
 801477a:	4814      	ldr	r0, [pc, #80]	@ (80147cc <tcp_listen_closed+0x68>)
 801477c:	f009 fd86 	bl	801e28c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	7d1b      	ldrb	r3, [r3, #20]
 8014784:	2b01      	cmp	r3, #1
 8014786:	d006      	beq.n	8014796 <tcp_listen_closed+0x32>
 8014788:	4b0e      	ldr	r3, [pc, #56]	@ (80147c4 <tcp_listen_closed+0x60>)
 801478a:	f44f 7289 	mov.w	r2, #274	@ 0x112
 801478e:	4910      	ldr	r1, [pc, #64]	@ (80147d0 <tcp_listen_closed+0x6c>)
 8014790:	480e      	ldr	r0, [pc, #56]	@ (80147cc <tcp_listen_closed+0x68>)
 8014792:	f009 fd7b 	bl	801e28c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8014796:	2301      	movs	r3, #1
 8014798:	60fb      	str	r3, [r7, #12]
 801479a:	e00b      	b.n	80147b4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 801479c:	4a0d      	ldr	r2, [pc, #52]	@ (80147d4 <tcp_listen_closed+0x70>)
 801479e:	68fb      	ldr	r3, [r7, #12]
 80147a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80147a4:	681b      	ldr	r3, [r3, #0]
 80147a6:	6879      	ldr	r1, [r7, #4]
 80147a8:	4618      	mov	r0, r3
 80147aa:	f7ff ffb1 	bl	8014710 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80147ae:	68fb      	ldr	r3, [r7, #12]
 80147b0:	3301      	adds	r3, #1
 80147b2:	60fb      	str	r3, [r7, #12]
 80147b4:	68fb      	ldr	r3, [r7, #12]
 80147b6:	2b03      	cmp	r3, #3
 80147b8:	d9f0      	bls.n	801479c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80147ba:	bf00      	nop
 80147bc:	bf00      	nop
 80147be:	3710      	adds	r7, #16
 80147c0:	46bd      	mov	sp, r7
 80147c2:	bd80      	pop	{r7, pc}
 80147c4:	08021e58 	.word	0x08021e58
 80147c8:	08021f08 	.word	0x08021f08
 80147cc:	08021e9c 	.word	0x08021e9c
 80147d0:	08021f14 	.word	0x08021f14
 80147d4:	08023ec8 	.word	0x08023ec8

080147d8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80147d8:	b5b0      	push	{r4, r5, r7, lr}
 80147da:	b088      	sub	sp, #32
 80147dc:	af04      	add	r7, sp, #16
 80147de:	6078      	str	r0, [r7, #4]
 80147e0:	460b      	mov	r3, r1
 80147e2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80147e4:	687b      	ldr	r3, [r7, #4]
 80147e6:	2b00      	cmp	r3, #0
 80147e8:	d106      	bne.n	80147f8 <tcp_close_shutdown+0x20>
 80147ea:	4b63      	ldr	r3, [pc, #396]	@ (8014978 <tcp_close_shutdown+0x1a0>)
 80147ec:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 80147f0:	4962      	ldr	r1, [pc, #392]	@ (801497c <tcp_close_shutdown+0x1a4>)
 80147f2:	4863      	ldr	r0, [pc, #396]	@ (8014980 <tcp_close_shutdown+0x1a8>)
 80147f4:	f009 fd4a 	bl	801e28c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80147f8:	78fb      	ldrb	r3, [r7, #3]
 80147fa:	2b00      	cmp	r3, #0
 80147fc:	d066      	beq.n	80148cc <tcp_close_shutdown+0xf4>
 80147fe:	687b      	ldr	r3, [r7, #4]
 8014800:	7d1b      	ldrb	r3, [r3, #20]
 8014802:	2b04      	cmp	r3, #4
 8014804:	d003      	beq.n	801480e <tcp_close_shutdown+0x36>
 8014806:	687b      	ldr	r3, [r7, #4]
 8014808:	7d1b      	ldrb	r3, [r3, #20]
 801480a:	2b07      	cmp	r3, #7
 801480c:	d15e      	bne.n	80148cc <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014812:	2b00      	cmp	r3, #0
 8014814:	d104      	bne.n	8014820 <tcp_close_shutdown+0x48>
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801481a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801481e:	d055      	beq.n	80148cc <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	8b5b      	ldrh	r3, [r3, #26]
 8014824:	f003 0310 	and.w	r3, r3, #16
 8014828:	2b00      	cmp	r3, #0
 801482a:	d106      	bne.n	801483a <tcp_close_shutdown+0x62>
 801482c:	4b52      	ldr	r3, [pc, #328]	@ (8014978 <tcp_close_shutdown+0x1a0>)
 801482e:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8014832:	4954      	ldr	r1, [pc, #336]	@ (8014984 <tcp_close_shutdown+0x1ac>)
 8014834:	4852      	ldr	r0, [pc, #328]	@ (8014980 <tcp_close_shutdown+0x1a8>)
 8014836:	f009 fd29 	bl	801e28c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 801483e:	687b      	ldr	r3, [r7, #4]
 8014840:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8014842:	687d      	ldr	r5, [r7, #4]
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	3304      	adds	r3, #4
 8014848:	687a      	ldr	r2, [r7, #4]
 801484a:	8ad2      	ldrh	r2, [r2, #22]
 801484c:	6879      	ldr	r1, [r7, #4]
 801484e:	8b09      	ldrh	r1, [r1, #24]
 8014850:	9102      	str	r1, [sp, #8]
 8014852:	9201      	str	r2, [sp, #4]
 8014854:	9300      	str	r3, [sp, #0]
 8014856:	462b      	mov	r3, r5
 8014858:	4622      	mov	r2, r4
 801485a:	4601      	mov	r1, r0
 801485c:	6878      	ldr	r0, [r7, #4]
 801485e:	f005 fd43 	bl	801a2e8 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8014862:	6878      	ldr	r0, [r7, #4]
 8014864:	f001 fb26 	bl	8015eb4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8014868:	4b47      	ldr	r3, [pc, #284]	@ (8014988 <tcp_close_shutdown+0x1b0>)
 801486a:	681b      	ldr	r3, [r3, #0]
 801486c:	687a      	ldr	r2, [r7, #4]
 801486e:	429a      	cmp	r2, r3
 8014870:	d105      	bne.n	801487e <tcp_close_shutdown+0xa6>
 8014872:	4b45      	ldr	r3, [pc, #276]	@ (8014988 <tcp_close_shutdown+0x1b0>)
 8014874:	681b      	ldr	r3, [r3, #0]
 8014876:	68db      	ldr	r3, [r3, #12]
 8014878:	4a43      	ldr	r2, [pc, #268]	@ (8014988 <tcp_close_shutdown+0x1b0>)
 801487a:	6013      	str	r3, [r2, #0]
 801487c:	e013      	b.n	80148a6 <tcp_close_shutdown+0xce>
 801487e:	4b42      	ldr	r3, [pc, #264]	@ (8014988 <tcp_close_shutdown+0x1b0>)
 8014880:	681b      	ldr	r3, [r3, #0]
 8014882:	60fb      	str	r3, [r7, #12]
 8014884:	e00c      	b.n	80148a0 <tcp_close_shutdown+0xc8>
 8014886:	68fb      	ldr	r3, [r7, #12]
 8014888:	68db      	ldr	r3, [r3, #12]
 801488a:	687a      	ldr	r2, [r7, #4]
 801488c:	429a      	cmp	r2, r3
 801488e:	d104      	bne.n	801489a <tcp_close_shutdown+0xc2>
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	68da      	ldr	r2, [r3, #12]
 8014894:	68fb      	ldr	r3, [r7, #12]
 8014896:	60da      	str	r2, [r3, #12]
 8014898:	e005      	b.n	80148a6 <tcp_close_shutdown+0xce>
 801489a:	68fb      	ldr	r3, [r7, #12]
 801489c:	68db      	ldr	r3, [r3, #12]
 801489e:	60fb      	str	r3, [r7, #12]
 80148a0:	68fb      	ldr	r3, [r7, #12]
 80148a2:	2b00      	cmp	r3, #0
 80148a4:	d1ef      	bne.n	8014886 <tcp_close_shutdown+0xae>
 80148a6:	687b      	ldr	r3, [r7, #4]
 80148a8:	2200      	movs	r2, #0
 80148aa:	60da      	str	r2, [r3, #12]
 80148ac:	4b37      	ldr	r3, [pc, #220]	@ (801498c <tcp_close_shutdown+0x1b4>)
 80148ae:	2201      	movs	r2, #1
 80148b0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80148b2:	4b37      	ldr	r3, [pc, #220]	@ (8014990 <tcp_close_shutdown+0x1b8>)
 80148b4:	681b      	ldr	r3, [r3, #0]
 80148b6:	687a      	ldr	r2, [r7, #4]
 80148b8:	429a      	cmp	r2, r3
 80148ba:	d102      	bne.n	80148c2 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80148bc:	f003 ffba 	bl	8018834 <tcp_trigger_input_pcb_close>
 80148c0:	e002      	b.n	80148c8 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80148c2:	6878      	ldr	r0, [r7, #4]
 80148c4:	f7ff fed6 	bl	8014674 <tcp_free>
      }
      return ERR_OK;
 80148c8:	2300      	movs	r3, #0
 80148ca:	e050      	b.n	801496e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80148cc:	687b      	ldr	r3, [r7, #4]
 80148ce:	7d1b      	ldrb	r3, [r3, #20]
 80148d0:	2b02      	cmp	r3, #2
 80148d2:	d03b      	beq.n	801494c <tcp_close_shutdown+0x174>
 80148d4:	2b02      	cmp	r3, #2
 80148d6:	dc44      	bgt.n	8014962 <tcp_close_shutdown+0x18a>
 80148d8:	2b00      	cmp	r3, #0
 80148da:	d002      	beq.n	80148e2 <tcp_close_shutdown+0x10a>
 80148dc:	2b01      	cmp	r3, #1
 80148de:	d02a      	beq.n	8014936 <tcp_close_shutdown+0x15e>
 80148e0:	e03f      	b.n	8014962 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80148e2:	687b      	ldr	r3, [r7, #4]
 80148e4:	8adb      	ldrh	r3, [r3, #22]
 80148e6:	2b00      	cmp	r3, #0
 80148e8:	d021      	beq.n	801492e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80148ea:	4b2a      	ldr	r3, [pc, #168]	@ (8014994 <tcp_close_shutdown+0x1bc>)
 80148ec:	681b      	ldr	r3, [r3, #0]
 80148ee:	687a      	ldr	r2, [r7, #4]
 80148f0:	429a      	cmp	r2, r3
 80148f2:	d105      	bne.n	8014900 <tcp_close_shutdown+0x128>
 80148f4:	4b27      	ldr	r3, [pc, #156]	@ (8014994 <tcp_close_shutdown+0x1bc>)
 80148f6:	681b      	ldr	r3, [r3, #0]
 80148f8:	68db      	ldr	r3, [r3, #12]
 80148fa:	4a26      	ldr	r2, [pc, #152]	@ (8014994 <tcp_close_shutdown+0x1bc>)
 80148fc:	6013      	str	r3, [r2, #0]
 80148fe:	e013      	b.n	8014928 <tcp_close_shutdown+0x150>
 8014900:	4b24      	ldr	r3, [pc, #144]	@ (8014994 <tcp_close_shutdown+0x1bc>)
 8014902:	681b      	ldr	r3, [r3, #0]
 8014904:	60bb      	str	r3, [r7, #8]
 8014906:	e00c      	b.n	8014922 <tcp_close_shutdown+0x14a>
 8014908:	68bb      	ldr	r3, [r7, #8]
 801490a:	68db      	ldr	r3, [r3, #12]
 801490c:	687a      	ldr	r2, [r7, #4]
 801490e:	429a      	cmp	r2, r3
 8014910:	d104      	bne.n	801491c <tcp_close_shutdown+0x144>
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	68da      	ldr	r2, [r3, #12]
 8014916:	68bb      	ldr	r3, [r7, #8]
 8014918:	60da      	str	r2, [r3, #12]
 801491a:	e005      	b.n	8014928 <tcp_close_shutdown+0x150>
 801491c:	68bb      	ldr	r3, [r7, #8]
 801491e:	68db      	ldr	r3, [r3, #12]
 8014920:	60bb      	str	r3, [r7, #8]
 8014922:	68bb      	ldr	r3, [r7, #8]
 8014924:	2b00      	cmp	r3, #0
 8014926:	d1ef      	bne.n	8014908 <tcp_close_shutdown+0x130>
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	2200      	movs	r2, #0
 801492c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 801492e:	6878      	ldr	r0, [r7, #4]
 8014930:	f7ff fea0 	bl	8014674 <tcp_free>
      break;
 8014934:	e01a      	b.n	801496c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8014936:	6878      	ldr	r0, [r7, #4]
 8014938:	f7ff ff14 	bl	8014764 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 801493c:	6879      	ldr	r1, [r7, #4]
 801493e:	4816      	ldr	r0, [pc, #88]	@ (8014998 <tcp_close_shutdown+0x1c0>)
 8014940:	f001 fb08 	bl	8015f54 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8014944:	6878      	ldr	r0, [r7, #4]
 8014946:	f7ff feb1 	bl	80146ac <tcp_free_listen>
      break;
 801494a:	e00f      	b.n	801496c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801494c:	6879      	ldr	r1, [r7, #4]
 801494e:	480e      	ldr	r0, [pc, #56]	@ (8014988 <tcp_close_shutdown+0x1b0>)
 8014950:	f001 fb00 	bl	8015f54 <tcp_pcb_remove>
 8014954:	4b0d      	ldr	r3, [pc, #52]	@ (801498c <tcp_close_shutdown+0x1b4>)
 8014956:	2201      	movs	r2, #1
 8014958:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 801495a:	6878      	ldr	r0, [r7, #4]
 801495c:	f7ff fe8a 	bl	8014674 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8014960:	e004      	b.n	801496c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8014962:	6878      	ldr	r0, [r7, #4]
 8014964:	f000 f81a 	bl	801499c <tcp_close_shutdown_fin>
 8014968:	4603      	mov	r3, r0
 801496a:	e000      	b.n	801496e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 801496c:	2300      	movs	r3, #0
}
 801496e:	4618      	mov	r0, r3
 8014970:	3710      	adds	r7, #16
 8014972:	46bd      	mov	sp, r7
 8014974:	bdb0      	pop	{r4, r5, r7, pc}
 8014976:	bf00      	nop
 8014978:	08021e58 	.word	0x08021e58
 801497c:	08021f2c 	.word	0x08021f2c
 8014980:	08021e9c 	.word	0x08021e9c
 8014984:	08021f4c 	.word	0x08021f4c
 8014988:	2000cacc 	.word	0x2000cacc
 801498c:	2000cad4 	.word	0x2000cad4
 8014990:	2000cb0c 	.word	0x2000cb0c
 8014994:	2000cac4 	.word	0x2000cac4
 8014998:	2000cac8 	.word	0x2000cac8

0801499c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 801499c:	b580      	push	{r7, lr}
 801499e:	b084      	sub	sp, #16
 80149a0:	af00      	add	r7, sp, #0
 80149a2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	2b00      	cmp	r3, #0
 80149a8:	d106      	bne.n	80149b8 <tcp_close_shutdown_fin+0x1c>
 80149aa:	4b2e      	ldr	r3, [pc, #184]	@ (8014a64 <tcp_close_shutdown_fin+0xc8>)
 80149ac:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 80149b0:	492d      	ldr	r1, [pc, #180]	@ (8014a68 <tcp_close_shutdown_fin+0xcc>)
 80149b2:	482e      	ldr	r0, [pc, #184]	@ (8014a6c <tcp_close_shutdown_fin+0xd0>)
 80149b4:	f009 fc6a 	bl	801e28c <iprintf>

  switch (pcb->state) {
 80149b8:	687b      	ldr	r3, [r7, #4]
 80149ba:	7d1b      	ldrb	r3, [r3, #20]
 80149bc:	2b07      	cmp	r3, #7
 80149be:	d020      	beq.n	8014a02 <tcp_close_shutdown_fin+0x66>
 80149c0:	2b07      	cmp	r3, #7
 80149c2:	dc2b      	bgt.n	8014a1c <tcp_close_shutdown_fin+0x80>
 80149c4:	2b03      	cmp	r3, #3
 80149c6:	d002      	beq.n	80149ce <tcp_close_shutdown_fin+0x32>
 80149c8:	2b04      	cmp	r3, #4
 80149ca:	d00d      	beq.n	80149e8 <tcp_close_shutdown_fin+0x4c>
 80149cc:	e026      	b.n	8014a1c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80149ce:	6878      	ldr	r0, [r7, #4]
 80149d0:	f004 fd98 	bl	8019504 <tcp_send_fin>
 80149d4:	4603      	mov	r3, r0
 80149d6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80149d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80149dc:	2b00      	cmp	r3, #0
 80149de:	d11f      	bne.n	8014a20 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80149e0:	687b      	ldr	r3, [r7, #4]
 80149e2:	2205      	movs	r2, #5
 80149e4:	751a      	strb	r2, [r3, #20]
      }
      break;
 80149e6:	e01b      	b.n	8014a20 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80149e8:	6878      	ldr	r0, [r7, #4]
 80149ea:	f004 fd8b 	bl	8019504 <tcp_send_fin>
 80149ee:	4603      	mov	r3, r0
 80149f0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80149f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80149f6:	2b00      	cmp	r3, #0
 80149f8:	d114      	bne.n	8014a24 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80149fa:	687b      	ldr	r3, [r7, #4]
 80149fc:	2205      	movs	r2, #5
 80149fe:	751a      	strb	r2, [r3, #20]
      }
      break;
 8014a00:	e010      	b.n	8014a24 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8014a02:	6878      	ldr	r0, [r7, #4]
 8014a04:	f004 fd7e 	bl	8019504 <tcp_send_fin>
 8014a08:	4603      	mov	r3, r0
 8014a0a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8014a0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014a10:	2b00      	cmp	r3, #0
 8014a12:	d109      	bne.n	8014a28 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8014a14:	687b      	ldr	r3, [r7, #4]
 8014a16:	2209      	movs	r2, #9
 8014a18:	751a      	strb	r2, [r3, #20]
      }
      break;
 8014a1a:	e005      	b.n	8014a28 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8014a1c:	2300      	movs	r3, #0
 8014a1e:	e01c      	b.n	8014a5a <tcp_close_shutdown_fin+0xbe>
      break;
 8014a20:	bf00      	nop
 8014a22:	e002      	b.n	8014a2a <tcp_close_shutdown_fin+0x8e>
      break;
 8014a24:	bf00      	nop
 8014a26:	e000      	b.n	8014a2a <tcp_close_shutdown_fin+0x8e>
      break;
 8014a28:	bf00      	nop
  }

  if (err == ERR_OK) {
 8014a2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014a2e:	2b00      	cmp	r3, #0
 8014a30:	d103      	bne.n	8014a3a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8014a32:	6878      	ldr	r0, [r7, #4]
 8014a34:	f004 fea4 	bl	8019780 <tcp_output>
 8014a38:	e00d      	b.n	8014a56 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8014a3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014a42:	d108      	bne.n	8014a56 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	8b5b      	ldrh	r3, [r3, #26]
 8014a48:	f043 0308 	orr.w	r3, r3, #8
 8014a4c:	b29a      	uxth	r2, r3
 8014a4e:	687b      	ldr	r3, [r7, #4]
 8014a50:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8014a52:	2300      	movs	r3, #0
 8014a54:	e001      	b.n	8014a5a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8014a56:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014a5a:	4618      	mov	r0, r3
 8014a5c:	3710      	adds	r7, #16
 8014a5e:	46bd      	mov	sp, r7
 8014a60:	bd80      	pop	{r7, pc}
 8014a62:	bf00      	nop
 8014a64:	08021e58 	.word	0x08021e58
 8014a68:	08021f08 	.word	0x08021f08
 8014a6c:	08021e9c 	.word	0x08021e9c

08014a70 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8014a70:	b580      	push	{r7, lr}
 8014a72:	b082      	sub	sp, #8
 8014a74:	af00      	add	r7, sp, #0
 8014a76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	2b00      	cmp	r3, #0
 8014a7c:	d109      	bne.n	8014a92 <tcp_close+0x22>
 8014a7e:	4b0f      	ldr	r3, [pc, #60]	@ (8014abc <tcp_close+0x4c>)
 8014a80:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8014a84:	490e      	ldr	r1, [pc, #56]	@ (8014ac0 <tcp_close+0x50>)
 8014a86:	480f      	ldr	r0, [pc, #60]	@ (8014ac4 <tcp_close+0x54>)
 8014a88:	f009 fc00 	bl	801e28c <iprintf>
 8014a8c:	f06f 030f 	mvn.w	r3, #15
 8014a90:	e00f      	b.n	8014ab2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8014a92:	687b      	ldr	r3, [r7, #4]
 8014a94:	7d1b      	ldrb	r3, [r3, #20]
 8014a96:	2b01      	cmp	r3, #1
 8014a98:	d006      	beq.n	8014aa8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	8b5b      	ldrh	r3, [r3, #26]
 8014a9e:	f043 0310 	orr.w	r3, r3, #16
 8014aa2:	b29a      	uxth	r2, r3
 8014aa4:	687b      	ldr	r3, [r7, #4]
 8014aa6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8014aa8:	2101      	movs	r1, #1
 8014aaa:	6878      	ldr	r0, [r7, #4]
 8014aac:	f7ff fe94 	bl	80147d8 <tcp_close_shutdown>
 8014ab0:	4603      	mov	r3, r0
}
 8014ab2:	4618      	mov	r0, r3
 8014ab4:	3708      	adds	r7, #8
 8014ab6:	46bd      	mov	sp, r7
 8014ab8:	bd80      	pop	{r7, pc}
 8014aba:	bf00      	nop
 8014abc:	08021e58 	.word	0x08021e58
 8014ac0:	08021f68 	.word	0x08021f68
 8014ac4:	08021e9c 	.word	0x08021e9c

08014ac8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8014ac8:	b580      	push	{r7, lr}
 8014aca:	b08e      	sub	sp, #56	@ 0x38
 8014acc:	af04      	add	r7, sp, #16
 8014ace:	6078      	str	r0, [r7, #4]
 8014ad0:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8014ad2:	687b      	ldr	r3, [r7, #4]
 8014ad4:	2b00      	cmp	r3, #0
 8014ad6:	d107      	bne.n	8014ae8 <tcp_abandon+0x20>
 8014ad8:	4b52      	ldr	r3, [pc, #328]	@ (8014c24 <tcp_abandon+0x15c>)
 8014ada:	f240 223d 	movw	r2, #573	@ 0x23d
 8014ade:	4952      	ldr	r1, [pc, #328]	@ (8014c28 <tcp_abandon+0x160>)
 8014ae0:	4852      	ldr	r0, [pc, #328]	@ (8014c2c <tcp_abandon+0x164>)
 8014ae2:	f009 fbd3 	bl	801e28c <iprintf>
 8014ae6:	e099      	b.n	8014c1c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8014ae8:	687b      	ldr	r3, [r7, #4]
 8014aea:	7d1b      	ldrb	r3, [r3, #20]
 8014aec:	2b01      	cmp	r3, #1
 8014aee:	d106      	bne.n	8014afe <tcp_abandon+0x36>
 8014af0:	4b4c      	ldr	r3, [pc, #304]	@ (8014c24 <tcp_abandon+0x15c>)
 8014af2:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8014af6:	494e      	ldr	r1, [pc, #312]	@ (8014c30 <tcp_abandon+0x168>)
 8014af8:	484c      	ldr	r0, [pc, #304]	@ (8014c2c <tcp_abandon+0x164>)
 8014afa:	f009 fbc7 	bl	801e28c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8014afe:	687b      	ldr	r3, [r7, #4]
 8014b00:	7d1b      	ldrb	r3, [r3, #20]
 8014b02:	2b0a      	cmp	r3, #10
 8014b04:	d107      	bne.n	8014b16 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8014b06:	6879      	ldr	r1, [r7, #4]
 8014b08:	484a      	ldr	r0, [pc, #296]	@ (8014c34 <tcp_abandon+0x16c>)
 8014b0a:	f001 fa23 	bl	8015f54 <tcp_pcb_remove>
    tcp_free(pcb);
 8014b0e:	6878      	ldr	r0, [r7, #4]
 8014b10:	f7ff fdb0 	bl	8014674 <tcp_free>
 8014b14:	e082      	b.n	8014c1c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8014b16:	2300      	movs	r3, #0
 8014b18:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8014b1a:	2300      	movs	r3, #0
 8014b1c:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014b22:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8014b24:	687b      	ldr	r3, [r7, #4]
 8014b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014b28:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8014b2a:	687b      	ldr	r3, [r7, #4]
 8014b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014b30:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8014b32:	687b      	ldr	r3, [r7, #4]
 8014b34:	691b      	ldr	r3, [r3, #16]
 8014b36:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	7d1b      	ldrb	r3, [r3, #20]
 8014b3c:	2b00      	cmp	r3, #0
 8014b3e:	d126      	bne.n	8014b8e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8014b40:	687b      	ldr	r3, [r7, #4]
 8014b42:	8adb      	ldrh	r3, [r3, #22]
 8014b44:	2b00      	cmp	r3, #0
 8014b46:	d02e      	beq.n	8014ba6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8014b48:	4b3b      	ldr	r3, [pc, #236]	@ (8014c38 <tcp_abandon+0x170>)
 8014b4a:	681b      	ldr	r3, [r3, #0]
 8014b4c:	687a      	ldr	r2, [r7, #4]
 8014b4e:	429a      	cmp	r2, r3
 8014b50:	d105      	bne.n	8014b5e <tcp_abandon+0x96>
 8014b52:	4b39      	ldr	r3, [pc, #228]	@ (8014c38 <tcp_abandon+0x170>)
 8014b54:	681b      	ldr	r3, [r3, #0]
 8014b56:	68db      	ldr	r3, [r3, #12]
 8014b58:	4a37      	ldr	r2, [pc, #220]	@ (8014c38 <tcp_abandon+0x170>)
 8014b5a:	6013      	str	r3, [r2, #0]
 8014b5c:	e013      	b.n	8014b86 <tcp_abandon+0xbe>
 8014b5e:	4b36      	ldr	r3, [pc, #216]	@ (8014c38 <tcp_abandon+0x170>)
 8014b60:	681b      	ldr	r3, [r3, #0]
 8014b62:	61fb      	str	r3, [r7, #28]
 8014b64:	e00c      	b.n	8014b80 <tcp_abandon+0xb8>
 8014b66:	69fb      	ldr	r3, [r7, #28]
 8014b68:	68db      	ldr	r3, [r3, #12]
 8014b6a:	687a      	ldr	r2, [r7, #4]
 8014b6c:	429a      	cmp	r2, r3
 8014b6e:	d104      	bne.n	8014b7a <tcp_abandon+0xb2>
 8014b70:	687b      	ldr	r3, [r7, #4]
 8014b72:	68da      	ldr	r2, [r3, #12]
 8014b74:	69fb      	ldr	r3, [r7, #28]
 8014b76:	60da      	str	r2, [r3, #12]
 8014b78:	e005      	b.n	8014b86 <tcp_abandon+0xbe>
 8014b7a:	69fb      	ldr	r3, [r7, #28]
 8014b7c:	68db      	ldr	r3, [r3, #12]
 8014b7e:	61fb      	str	r3, [r7, #28]
 8014b80:	69fb      	ldr	r3, [r7, #28]
 8014b82:	2b00      	cmp	r3, #0
 8014b84:	d1ef      	bne.n	8014b66 <tcp_abandon+0x9e>
 8014b86:	687b      	ldr	r3, [r7, #4]
 8014b88:	2200      	movs	r2, #0
 8014b8a:	60da      	str	r2, [r3, #12]
 8014b8c:	e00b      	b.n	8014ba6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8014b8e:	683b      	ldr	r3, [r7, #0]
 8014b90:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8014b92:	687b      	ldr	r3, [r7, #4]
 8014b94:	8adb      	ldrh	r3, [r3, #22]
 8014b96:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8014b98:	6879      	ldr	r1, [r7, #4]
 8014b9a:	4828      	ldr	r0, [pc, #160]	@ (8014c3c <tcp_abandon+0x174>)
 8014b9c:	f001 f9da 	bl	8015f54 <tcp_pcb_remove>
 8014ba0:	4b27      	ldr	r3, [pc, #156]	@ (8014c40 <tcp_abandon+0x178>)
 8014ba2:	2201      	movs	r2, #1
 8014ba4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8014ba6:	687b      	ldr	r3, [r7, #4]
 8014ba8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014baa:	2b00      	cmp	r3, #0
 8014bac:	d004      	beq.n	8014bb8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8014bae:	687b      	ldr	r3, [r7, #4]
 8014bb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014bb2:	4618      	mov	r0, r3
 8014bb4:	f000 fed8 	bl	8015968 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8014bb8:	687b      	ldr	r3, [r7, #4]
 8014bba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014bbc:	2b00      	cmp	r3, #0
 8014bbe:	d004      	beq.n	8014bca <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014bc4:	4618      	mov	r0, r3
 8014bc6:	f000 fecf 	bl	8015968 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014bce:	2b00      	cmp	r3, #0
 8014bd0:	d004      	beq.n	8014bdc <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8014bd2:	687b      	ldr	r3, [r7, #4]
 8014bd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014bd6:	4618      	mov	r0, r3
 8014bd8:	f000 fec6 	bl	8015968 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8014bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014bde:	2b00      	cmp	r3, #0
 8014be0:	d00e      	beq.n	8014c00 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8014be2:	6879      	ldr	r1, [r7, #4]
 8014be4:	687b      	ldr	r3, [r7, #4]
 8014be6:	3304      	adds	r3, #4
 8014be8:	687a      	ldr	r2, [r7, #4]
 8014bea:	8b12      	ldrh	r2, [r2, #24]
 8014bec:	9202      	str	r2, [sp, #8]
 8014bee:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8014bf0:	9201      	str	r2, [sp, #4]
 8014bf2:	9300      	str	r3, [sp, #0]
 8014bf4:	460b      	mov	r3, r1
 8014bf6:	697a      	ldr	r2, [r7, #20]
 8014bf8:	69b9      	ldr	r1, [r7, #24]
 8014bfa:	6878      	ldr	r0, [r7, #4]
 8014bfc:	f005 fb74 	bl	801a2e8 <tcp_rst>
    }
    last_state = pcb->state;
 8014c00:	687b      	ldr	r3, [r7, #4]
 8014c02:	7d1b      	ldrb	r3, [r3, #20]
 8014c04:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8014c06:	6878      	ldr	r0, [r7, #4]
 8014c08:	f7ff fd34 	bl	8014674 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8014c0c:	693b      	ldr	r3, [r7, #16]
 8014c0e:	2b00      	cmp	r3, #0
 8014c10:	d004      	beq.n	8014c1c <tcp_abandon+0x154>
 8014c12:	693b      	ldr	r3, [r7, #16]
 8014c14:	f06f 010c 	mvn.w	r1, #12
 8014c18:	68f8      	ldr	r0, [r7, #12]
 8014c1a:	4798      	blx	r3
  }
}
 8014c1c:	3728      	adds	r7, #40	@ 0x28
 8014c1e:	46bd      	mov	sp, r7
 8014c20:	bd80      	pop	{r7, pc}
 8014c22:	bf00      	nop
 8014c24:	08021e58 	.word	0x08021e58
 8014c28:	08021f9c 	.word	0x08021f9c
 8014c2c:	08021e9c 	.word	0x08021e9c
 8014c30:	08021fb8 	.word	0x08021fb8
 8014c34:	2000cad0 	.word	0x2000cad0
 8014c38:	2000cac4 	.word	0x2000cac4
 8014c3c:	2000cacc 	.word	0x2000cacc
 8014c40:	2000cad4 	.word	0x2000cad4

08014c44 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8014c44:	b580      	push	{r7, lr}
 8014c46:	b082      	sub	sp, #8
 8014c48:	af00      	add	r7, sp, #0
 8014c4a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8014c4c:	2101      	movs	r1, #1
 8014c4e:	6878      	ldr	r0, [r7, #4]
 8014c50:	f7ff ff3a 	bl	8014ac8 <tcp_abandon>
}
 8014c54:	bf00      	nop
 8014c56:	3708      	adds	r7, #8
 8014c58:	46bd      	mov	sp, r7
 8014c5a:	bd80      	pop	{r7, pc}

08014c5c <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8014c5c:	b580      	push	{r7, lr}
 8014c5e:	b088      	sub	sp, #32
 8014c60:	af00      	add	r7, sp, #0
 8014c62:	60f8      	str	r0, [r7, #12]
 8014c64:	60b9      	str	r1, [r7, #8]
 8014c66:	4613      	mov	r3, r2
 8014c68:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8014c6a:	2304      	movs	r3, #4
 8014c6c:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8014c6e:	68bb      	ldr	r3, [r7, #8]
 8014c70:	2b00      	cmp	r3, #0
 8014c72:	d101      	bne.n	8014c78 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8014c74:	4b3e      	ldr	r3, [pc, #248]	@ (8014d70 <tcp_bind+0x114>)
 8014c76:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8014c78:	68fb      	ldr	r3, [r7, #12]
 8014c7a:	2b00      	cmp	r3, #0
 8014c7c:	d109      	bne.n	8014c92 <tcp_bind+0x36>
 8014c7e:	4b3d      	ldr	r3, [pc, #244]	@ (8014d74 <tcp_bind+0x118>)
 8014c80:	f240 22a9 	movw	r2, #681	@ 0x2a9
 8014c84:	493c      	ldr	r1, [pc, #240]	@ (8014d78 <tcp_bind+0x11c>)
 8014c86:	483d      	ldr	r0, [pc, #244]	@ (8014d7c <tcp_bind+0x120>)
 8014c88:	f009 fb00 	bl	801e28c <iprintf>
 8014c8c:	f06f 030f 	mvn.w	r3, #15
 8014c90:	e06a      	b.n	8014d68 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8014c92:	68fb      	ldr	r3, [r7, #12]
 8014c94:	7d1b      	ldrb	r3, [r3, #20]
 8014c96:	2b00      	cmp	r3, #0
 8014c98:	d009      	beq.n	8014cae <tcp_bind+0x52>
 8014c9a:	4b36      	ldr	r3, [pc, #216]	@ (8014d74 <tcp_bind+0x118>)
 8014c9c:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8014ca0:	4937      	ldr	r1, [pc, #220]	@ (8014d80 <tcp_bind+0x124>)
 8014ca2:	4836      	ldr	r0, [pc, #216]	@ (8014d7c <tcp_bind+0x120>)
 8014ca4:	f009 faf2 	bl	801e28c <iprintf>
 8014ca8:	f06f 0305 	mvn.w	r3, #5
 8014cac:	e05c      	b.n	8014d68 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8014cae:	88fb      	ldrh	r3, [r7, #6]
 8014cb0:	2b00      	cmp	r3, #0
 8014cb2:	d109      	bne.n	8014cc8 <tcp_bind+0x6c>
    port = tcp_new_port();
 8014cb4:	f000 f9f0 	bl	8015098 <tcp_new_port>
 8014cb8:	4603      	mov	r3, r0
 8014cba:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8014cbc:	88fb      	ldrh	r3, [r7, #6]
 8014cbe:	2b00      	cmp	r3, #0
 8014cc0:	d135      	bne.n	8014d2e <tcp_bind+0xd2>
      return ERR_BUF;
 8014cc2:	f06f 0301 	mvn.w	r3, #1
 8014cc6:	e04f      	b.n	8014d68 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8014cc8:	2300      	movs	r3, #0
 8014cca:	61fb      	str	r3, [r7, #28]
 8014ccc:	e02b      	b.n	8014d26 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8014cce:	4a2d      	ldr	r2, [pc, #180]	@ (8014d84 <tcp_bind+0x128>)
 8014cd0:	69fb      	ldr	r3, [r7, #28]
 8014cd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014cd6:	681b      	ldr	r3, [r3, #0]
 8014cd8:	61bb      	str	r3, [r7, #24]
 8014cda:	e01e      	b.n	8014d1a <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8014cdc:	69bb      	ldr	r3, [r7, #24]
 8014cde:	8adb      	ldrh	r3, [r3, #22]
 8014ce0:	88fa      	ldrh	r2, [r7, #6]
 8014ce2:	429a      	cmp	r2, r3
 8014ce4:	d116      	bne.n	8014d14 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8014ce6:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8014ce8:	2b00      	cmp	r3, #0
 8014cea:	d010      	beq.n	8014d0e <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8014cec:	69bb      	ldr	r3, [r7, #24]
 8014cee:	681b      	ldr	r3, [r3, #0]
 8014cf0:	2b00      	cmp	r3, #0
 8014cf2:	d00c      	beq.n	8014d0e <tcp_bind+0xb2>
 8014cf4:	68bb      	ldr	r3, [r7, #8]
 8014cf6:	2b00      	cmp	r3, #0
 8014cf8:	d009      	beq.n	8014d0e <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8014cfa:	68bb      	ldr	r3, [r7, #8]
 8014cfc:	681b      	ldr	r3, [r3, #0]
 8014cfe:	2b00      	cmp	r3, #0
 8014d00:	d005      	beq.n	8014d0e <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8014d02:	69bb      	ldr	r3, [r7, #24]
 8014d04:	681a      	ldr	r2, [r3, #0]
 8014d06:	68bb      	ldr	r3, [r7, #8]
 8014d08:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8014d0a:	429a      	cmp	r2, r3
 8014d0c:	d102      	bne.n	8014d14 <tcp_bind+0xb8>
              return ERR_USE;
 8014d0e:	f06f 0307 	mvn.w	r3, #7
 8014d12:	e029      	b.n	8014d68 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8014d14:	69bb      	ldr	r3, [r7, #24]
 8014d16:	68db      	ldr	r3, [r3, #12]
 8014d18:	61bb      	str	r3, [r7, #24]
 8014d1a:	69bb      	ldr	r3, [r7, #24]
 8014d1c:	2b00      	cmp	r3, #0
 8014d1e:	d1dd      	bne.n	8014cdc <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8014d20:	69fb      	ldr	r3, [r7, #28]
 8014d22:	3301      	adds	r3, #1
 8014d24:	61fb      	str	r3, [r7, #28]
 8014d26:	69fa      	ldr	r2, [r7, #28]
 8014d28:	697b      	ldr	r3, [r7, #20]
 8014d2a:	429a      	cmp	r2, r3
 8014d2c:	dbcf      	blt.n	8014cce <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8014d2e:	68bb      	ldr	r3, [r7, #8]
 8014d30:	2b00      	cmp	r3, #0
 8014d32:	d00c      	beq.n	8014d4e <tcp_bind+0xf2>
 8014d34:	68bb      	ldr	r3, [r7, #8]
 8014d36:	681b      	ldr	r3, [r3, #0]
 8014d38:	2b00      	cmp	r3, #0
 8014d3a:	d008      	beq.n	8014d4e <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8014d3c:	68bb      	ldr	r3, [r7, #8]
 8014d3e:	2b00      	cmp	r3, #0
 8014d40:	d002      	beq.n	8014d48 <tcp_bind+0xec>
 8014d42:	68bb      	ldr	r3, [r7, #8]
 8014d44:	681b      	ldr	r3, [r3, #0]
 8014d46:	e000      	b.n	8014d4a <tcp_bind+0xee>
 8014d48:	2300      	movs	r3, #0
 8014d4a:	68fa      	ldr	r2, [r7, #12]
 8014d4c:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8014d4e:	68fb      	ldr	r3, [r7, #12]
 8014d50:	88fa      	ldrh	r2, [r7, #6]
 8014d52:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8014d54:	4b0c      	ldr	r3, [pc, #48]	@ (8014d88 <tcp_bind+0x12c>)
 8014d56:	681a      	ldr	r2, [r3, #0]
 8014d58:	68fb      	ldr	r3, [r7, #12]
 8014d5a:	60da      	str	r2, [r3, #12]
 8014d5c:	4a0a      	ldr	r2, [pc, #40]	@ (8014d88 <tcp_bind+0x12c>)
 8014d5e:	68fb      	ldr	r3, [r7, #12]
 8014d60:	6013      	str	r3, [r2, #0]
 8014d62:	f005 fc83 	bl	801a66c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8014d66:	2300      	movs	r3, #0
}
 8014d68:	4618      	mov	r0, r3
 8014d6a:	3720      	adds	r7, #32
 8014d6c:	46bd      	mov	sp, r7
 8014d6e:	bd80      	pop	{r7, pc}
 8014d70:	08023ef0 	.word	0x08023ef0
 8014d74:	08021e58 	.word	0x08021e58
 8014d78:	08021fec 	.word	0x08021fec
 8014d7c:	08021e9c 	.word	0x08021e9c
 8014d80:	08022004 	.word	0x08022004
 8014d84:	08023ec8 	.word	0x08023ec8
 8014d88:	2000cac4 	.word	0x2000cac4

08014d8c <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8014d8c:	b580      	push	{r7, lr}
 8014d8e:	b084      	sub	sp, #16
 8014d90:	af00      	add	r7, sp, #0
 8014d92:	60f8      	str	r0, [r7, #12]
 8014d94:	60b9      	str	r1, [r7, #8]
 8014d96:	4613      	mov	r3, r2
 8014d98:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8014d9a:	68bb      	ldr	r3, [r7, #8]
 8014d9c:	2b00      	cmp	r3, #0
 8014d9e:	d106      	bne.n	8014dae <tcp_accept_null+0x22>
 8014da0:	4b07      	ldr	r3, [pc, #28]	@ (8014dc0 <tcp_accept_null+0x34>)
 8014da2:	f240 320f 	movw	r2, #783	@ 0x30f
 8014da6:	4907      	ldr	r1, [pc, #28]	@ (8014dc4 <tcp_accept_null+0x38>)
 8014da8:	4807      	ldr	r0, [pc, #28]	@ (8014dc8 <tcp_accept_null+0x3c>)
 8014daa:	f009 fa6f 	bl	801e28c <iprintf>

  tcp_abort(pcb);
 8014dae:	68b8      	ldr	r0, [r7, #8]
 8014db0:	f7ff ff48 	bl	8014c44 <tcp_abort>

  return ERR_ABRT;
 8014db4:	f06f 030c 	mvn.w	r3, #12
}
 8014db8:	4618      	mov	r0, r3
 8014dba:	3710      	adds	r7, #16
 8014dbc:	46bd      	mov	sp, r7
 8014dbe:	bd80      	pop	{r7, pc}
 8014dc0:	08021e58 	.word	0x08021e58
 8014dc4:	0802202c 	.word	0x0802202c
 8014dc8:	08021e9c 	.word	0x08021e9c

08014dcc <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8014dcc:	b580      	push	{r7, lr}
 8014dce:	b082      	sub	sp, #8
 8014dd0:	af00      	add	r7, sp, #0
 8014dd2:	6078      	str	r0, [r7, #4]
 8014dd4:	460b      	mov	r3, r1
 8014dd6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8014dd8:	78fb      	ldrb	r3, [r7, #3]
 8014dda:	2200      	movs	r2, #0
 8014ddc:	4619      	mov	r1, r3
 8014dde:	6878      	ldr	r0, [r7, #4]
 8014de0:	f000 f806 	bl	8014df0 <tcp_listen_with_backlog_and_err>
 8014de4:	4603      	mov	r3, r0
}
 8014de6:	4618      	mov	r0, r3
 8014de8:	3708      	adds	r7, #8
 8014dea:	46bd      	mov	sp, r7
 8014dec:	bd80      	pop	{r7, pc}
	...

08014df0 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8014df0:	b580      	push	{r7, lr}
 8014df2:	b088      	sub	sp, #32
 8014df4:	af00      	add	r7, sp, #0
 8014df6:	60f8      	str	r0, [r7, #12]
 8014df8:	460b      	mov	r3, r1
 8014dfa:	607a      	str	r2, [r7, #4]
 8014dfc:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8014dfe:	2300      	movs	r3, #0
 8014e00:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8014e02:	68fb      	ldr	r3, [r7, #12]
 8014e04:	2b00      	cmp	r3, #0
 8014e06:	d109      	bne.n	8014e1c <tcp_listen_with_backlog_and_err+0x2c>
 8014e08:	4b47      	ldr	r3, [pc, #284]	@ (8014f28 <tcp_listen_with_backlog_and_err+0x138>)
 8014e0a:	f240 3259 	movw	r2, #857	@ 0x359
 8014e0e:	4947      	ldr	r1, [pc, #284]	@ (8014f2c <tcp_listen_with_backlog_and_err+0x13c>)
 8014e10:	4847      	ldr	r0, [pc, #284]	@ (8014f30 <tcp_listen_with_backlog_and_err+0x140>)
 8014e12:	f009 fa3b 	bl	801e28c <iprintf>
 8014e16:	23f0      	movs	r3, #240	@ 0xf0
 8014e18:	76fb      	strb	r3, [r7, #27]
 8014e1a:	e079      	b.n	8014f10 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8014e1c:	68fb      	ldr	r3, [r7, #12]
 8014e1e:	7d1b      	ldrb	r3, [r3, #20]
 8014e20:	2b00      	cmp	r3, #0
 8014e22:	d009      	beq.n	8014e38 <tcp_listen_with_backlog_and_err+0x48>
 8014e24:	4b40      	ldr	r3, [pc, #256]	@ (8014f28 <tcp_listen_with_backlog_and_err+0x138>)
 8014e26:	f240 325a 	movw	r2, #858	@ 0x35a
 8014e2a:	4942      	ldr	r1, [pc, #264]	@ (8014f34 <tcp_listen_with_backlog_and_err+0x144>)
 8014e2c:	4840      	ldr	r0, [pc, #256]	@ (8014f30 <tcp_listen_with_backlog_and_err+0x140>)
 8014e2e:	f009 fa2d 	bl	801e28c <iprintf>
 8014e32:	23f1      	movs	r3, #241	@ 0xf1
 8014e34:	76fb      	strb	r3, [r7, #27]
 8014e36:	e06b      	b.n	8014f10 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8014e38:	68fb      	ldr	r3, [r7, #12]
 8014e3a:	7d1b      	ldrb	r3, [r3, #20]
 8014e3c:	2b01      	cmp	r3, #1
 8014e3e:	d104      	bne.n	8014e4a <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8014e40:	68fb      	ldr	r3, [r7, #12]
 8014e42:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8014e44:	23f7      	movs	r3, #247	@ 0xf7
 8014e46:	76fb      	strb	r3, [r7, #27]
    goto done;
 8014e48:	e062      	b.n	8014f10 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8014e4a:	2002      	movs	r0, #2
 8014e4c:	f7fe fa7e 	bl	801334c <memp_malloc>
 8014e50:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8014e52:	69fb      	ldr	r3, [r7, #28]
 8014e54:	2b00      	cmp	r3, #0
 8014e56:	d102      	bne.n	8014e5e <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8014e58:	23ff      	movs	r3, #255	@ 0xff
 8014e5a:	76fb      	strb	r3, [r7, #27]
    goto done;
 8014e5c:	e058      	b.n	8014f10 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8014e5e:	68fb      	ldr	r3, [r7, #12]
 8014e60:	691a      	ldr	r2, [r3, #16]
 8014e62:	69fb      	ldr	r3, [r7, #28]
 8014e64:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8014e66:	68fb      	ldr	r3, [r7, #12]
 8014e68:	8ada      	ldrh	r2, [r3, #22]
 8014e6a:	69fb      	ldr	r3, [r7, #28]
 8014e6c:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8014e6e:	69fb      	ldr	r3, [r7, #28]
 8014e70:	2201      	movs	r2, #1
 8014e72:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8014e74:	68fb      	ldr	r3, [r7, #12]
 8014e76:	7d5a      	ldrb	r2, [r3, #21]
 8014e78:	69fb      	ldr	r3, [r7, #28]
 8014e7a:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8014e7c:	68fb      	ldr	r3, [r7, #12]
 8014e7e:	7a5a      	ldrb	r2, [r3, #9]
 8014e80:	69fb      	ldr	r3, [r7, #28]
 8014e82:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8014e84:	69fb      	ldr	r3, [r7, #28]
 8014e86:	2200      	movs	r2, #0
 8014e88:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8014e8a:	68fb      	ldr	r3, [r7, #12]
 8014e8c:	7ada      	ldrb	r2, [r3, #11]
 8014e8e:	69fb      	ldr	r3, [r7, #28]
 8014e90:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8014e92:	68fb      	ldr	r3, [r7, #12]
 8014e94:	7a9a      	ldrb	r2, [r3, #10]
 8014e96:	69fb      	ldr	r3, [r7, #28]
 8014e98:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8014e9a:	68fb      	ldr	r3, [r7, #12]
 8014e9c:	681a      	ldr	r2, [r3, #0]
 8014e9e:	69fb      	ldr	r3, [r7, #28]
 8014ea0:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8014ea2:	68fb      	ldr	r3, [r7, #12]
 8014ea4:	8adb      	ldrh	r3, [r3, #22]
 8014ea6:	2b00      	cmp	r3, #0
 8014ea8:	d021      	beq.n	8014eee <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8014eaa:	4b23      	ldr	r3, [pc, #140]	@ (8014f38 <tcp_listen_with_backlog_and_err+0x148>)
 8014eac:	681b      	ldr	r3, [r3, #0]
 8014eae:	68fa      	ldr	r2, [r7, #12]
 8014eb0:	429a      	cmp	r2, r3
 8014eb2:	d105      	bne.n	8014ec0 <tcp_listen_with_backlog_and_err+0xd0>
 8014eb4:	4b20      	ldr	r3, [pc, #128]	@ (8014f38 <tcp_listen_with_backlog_and_err+0x148>)
 8014eb6:	681b      	ldr	r3, [r3, #0]
 8014eb8:	68db      	ldr	r3, [r3, #12]
 8014eba:	4a1f      	ldr	r2, [pc, #124]	@ (8014f38 <tcp_listen_with_backlog_and_err+0x148>)
 8014ebc:	6013      	str	r3, [r2, #0]
 8014ebe:	e013      	b.n	8014ee8 <tcp_listen_with_backlog_and_err+0xf8>
 8014ec0:	4b1d      	ldr	r3, [pc, #116]	@ (8014f38 <tcp_listen_with_backlog_and_err+0x148>)
 8014ec2:	681b      	ldr	r3, [r3, #0]
 8014ec4:	617b      	str	r3, [r7, #20]
 8014ec6:	e00c      	b.n	8014ee2 <tcp_listen_with_backlog_and_err+0xf2>
 8014ec8:	697b      	ldr	r3, [r7, #20]
 8014eca:	68db      	ldr	r3, [r3, #12]
 8014ecc:	68fa      	ldr	r2, [r7, #12]
 8014ece:	429a      	cmp	r2, r3
 8014ed0:	d104      	bne.n	8014edc <tcp_listen_with_backlog_and_err+0xec>
 8014ed2:	68fb      	ldr	r3, [r7, #12]
 8014ed4:	68da      	ldr	r2, [r3, #12]
 8014ed6:	697b      	ldr	r3, [r7, #20]
 8014ed8:	60da      	str	r2, [r3, #12]
 8014eda:	e005      	b.n	8014ee8 <tcp_listen_with_backlog_and_err+0xf8>
 8014edc:	697b      	ldr	r3, [r7, #20]
 8014ede:	68db      	ldr	r3, [r3, #12]
 8014ee0:	617b      	str	r3, [r7, #20]
 8014ee2:	697b      	ldr	r3, [r7, #20]
 8014ee4:	2b00      	cmp	r3, #0
 8014ee6:	d1ef      	bne.n	8014ec8 <tcp_listen_with_backlog_and_err+0xd8>
 8014ee8:	68fb      	ldr	r3, [r7, #12]
 8014eea:	2200      	movs	r2, #0
 8014eec:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8014eee:	68f8      	ldr	r0, [r7, #12]
 8014ef0:	f7ff fbc0 	bl	8014674 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8014ef4:	69fb      	ldr	r3, [r7, #28]
 8014ef6:	4a11      	ldr	r2, [pc, #68]	@ (8014f3c <tcp_listen_with_backlog_and_err+0x14c>)
 8014ef8:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8014efa:	4b11      	ldr	r3, [pc, #68]	@ (8014f40 <tcp_listen_with_backlog_and_err+0x150>)
 8014efc:	681a      	ldr	r2, [r3, #0]
 8014efe:	69fb      	ldr	r3, [r7, #28]
 8014f00:	60da      	str	r2, [r3, #12]
 8014f02:	4a0f      	ldr	r2, [pc, #60]	@ (8014f40 <tcp_listen_with_backlog_and_err+0x150>)
 8014f04:	69fb      	ldr	r3, [r7, #28]
 8014f06:	6013      	str	r3, [r2, #0]
 8014f08:	f005 fbb0 	bl	801a66c <tcp_timer_needed>
  res = ERR_OK;
 8014f0c:	2300      	movs	r3, #0
 8014f0e:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8014f10:	687b      	ldr	r3, [r7, #4]
 8014f12:	2b00      	cmp	r3, #0
 8014f14:	d002      	beq.n	8014f1c <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8014f16:	687b      	ldr	r3, [r7, #4]
 8014f18:	7efa      	ldrb	r2, [r7, #27]
 8014f1a:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8014f1c:	69fb      	ldr	r3, [r7, #28]
}
 8014f1e:	4618      	mov	r0, r3
 8014f20:	3720      	adds	r7, #32
 8014f22:	46bd      	mov	sp, r7
 8014f24:	bd80      	pop	{r7, pc}
 8014f26:	bf00      	nop
 8014f28:	08021e58 	.word	0x08021e58
 8014f2c:	0802204c 	.word	0x0802204c
 8014f30:	08021e9c 	.word	0x08021e9c
 8014f34:	0802207c 	.word	0x0802207c
 8014f38:	2000cac4 	.word	0x2000cac4
 8014f3c:	08014d8d 	.word	0x08014d8d
 8014f40:	2000cac8 	.word	0x2000cac8

08014f44 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8014f44:	b580      	push	{r7, lr}
 8014f46:	b084      	sub	sp, #16
 8014f48:	af00      	add	r7, sp, #0
 8014f4a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8014f4c:	687b      	ldr	r3, [r7, #4]
 8014f4e:	2b00      	cmp	r3, #0
 8014f50:	d106      	bne.n	8014f60 <tcp_update_rcv_ann_wnd+0x1c>
 8014f52:	4b25      	ldr	r3, [pc, #148]	@ (8014fe8 <tcp_update_rcv_ann_wnd+0xa4>)
 8014f54:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8014f58:	4924      	ldr	r1, [pc, #144]	@ (8014fec <tcp_update_rcv_ann_wnd+0xa8>)
 8014f5a:	4825      	ldr	r0, [pc, #148]	@ (8014ff0 <tcp_update_rcv_ann_wnd+0xac>)
 8014f5c:	f009 f996 	bl	801e28c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014f64:	687a      	ldr	r2, [r7, #4]
 8014f66:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8014f68:	4413      	add	r3, r2
 8014f6a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014f70:	687a      	ldr	r2, [r7, #4]
 8014f72:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8014f74:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8014f78:	bf28      	it	cs
 8014f7a:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 8014f7e:	b292      	uxth	r2, r2
 8014f80:	4413      	add	r3, r2
 8014f82:	68fa      	ldr	r2, [r7, #12]
 8014f84:	1ad3      	subs	r3, r2, r3
 8014f86:	2b00      	cmp	r3, #0
 8014f88:	db08      	blt.n	8014f9c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8014f8a:	687b      	ldr	r3, [r7, #4]
 8014f8c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8014f8e:	687b      	ldr	r3, [r7, #4]
 8014f90:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014f96:	68fa      	ldr	r2, [r7, #12]
 8014f98:	1ad3      	subs	r3, r2, r3
 8014f9a:	e020      	b.n	8014fde <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8014f9c:	687b      	ldr	r3, [r7, #4]
 8014f9e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014fa0:	687b      	ldr	r3, [r7, #4]
 8014fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014fa4:	1ad3      	subs	r3, r2, r3
 8014fa6:	2b00      	cmp	r3, #0
 8014fa8:	dd03      	ble.n	8014fb2 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8014faa:	687b      	ldr	r3, [r7, #4]
 8014fac:	2200      	movs	r2, #0
 8014fae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8014fb0:	e014      	b.n	8014fdc <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8014fb2:	687b      	ldr	r3, [r7, #4]
 8014fb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014fb6:	687b      	ldr	r3, [r7, #4]
 8014fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014fba:	1ad3      	subs	r3, r2, r3
 8014fbc:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8014fbe:	68bb      	ldr	r3, [r7, #8]
 8014fc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014fc4:	d306      	bcc.n	8014fd4 <tcp_update_rcv_ann_wnd+0x90>
 8014fc6:	4b08      	ldr	r3, [pc, #32]	@ (8014fe8 <tcp_update_rcv_ann_wnd+0xa4>)
 8014fc8:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8014fcc:	4909      	ldr	r1, [pc, #36]	@ (8014ff4 <tcp_update_rcv_ann_wnd+0xb0>)
 8014fce:	4808      	ldr	r0, [pc, #32]	@ (8014ff0 <tcp_update_rcv_ann_wnd+0xac>)
 8014fd0:	f009 f95c 	bl	801e28c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8014fd4:	68bb      	ldr	r3, [r7, #8]
 8014fd6:	b29a      	uxth	r2, r3
 8014fd8:	687b      	ldr	r3, [r7, #4]
 8014fda:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8014fdc:	2300      	movs	r3, #0
  }
}
 8014fde:	4618      	mov	r0, r3
 8014fe0:	3710      	adds	r7, #16
 8014fe2:	46bd      	mov	sp, r7
 8014fe4:	bd80      	pop	{r7, pc}
 8014fe6:	bf00      	nop
 8014fe8:	08021e58 	.word	0x08021e58
 8014fec:	080220b4 	.word	0x080220b4
 8014ff0:	08021e9c 	.word	0x08021e9c
 8014ff4:	080220d8 	.word	0x080220d8

08014ff8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8014ff8:	b580      	push	{r7, lr}
 8014ffa:	b084      	sub	sp, #16
 8014ffc:	af00      	add	r7, sp, #0
 8014ffe:	6078      	str	r0, [r7, #4]
 8015000:	460b      	mov	r3, r1
 8015002:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	2b00      	cmp	r3, #0
 8015008:	d107      	bne.n	801501a <tcp_recved+0x22>
 801500a:	4b1f      	ldr	r3, [pc, #124]	@ (8015088 <tcp_recved+0x90>)
 801500c:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8015010:	491e      	ldr	r1, [pc, #120]	@ (801508c <tcp_recved+0x94>)
 8015012:	481f      	ldr	r0, [pc, #124]	@ (8015090 <tcp_recved+0x98>)
 8015014:	f009 f93a 	bl	801e28c <iprintf>
 8015018:	e032      	b.n	8015080 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801501a:	687b      	ldr	r3, [r7, #4]
 801501c:	7d1b      	ldrb	r3, [r3, #20]
 801501e:	2b01      	cmp	r3, #1
 8015020:	d106      	bne.n	8015030 <tcp_recved+0x38>
 8015022:	4b19      	ldr	r3, [pc, #100]	@ (8015088 <tcp_recved+0x90>)
 8015024:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8015028:	491a      	ldr	r1, [pc, #104]	@ (8015094 <tcp_recved+0x9c>)
 801502a:	4819      	ldr	r0, [pc, #100]	@ (8015090 <tcp_recved+0x98>)
 801502c:	f009 f92e 	bl	801e28c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8015034:	887b      	ldrh	r3, [r7, #2]
 8015036:	4413      	add	r3, r2
 8015038:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 801503a:	89fb      	ldrh	r3, [r7, #14]
 801503c:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8015040:	d804      	bhi.n	801504c <tcp_recved+0x54>
 8015042:	687b      	ldr	r3, [r7, #4]
 8015044:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015046:	89fa      	ldrh	r2, [r7, #14]
 8015048:	429a      	cmp	r2, r3
 801504a:	d204      	bcs.n	8015056 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8015052:	851a      	strh	r2, [r3, #40]	@ 0x28
 8015054:	e002      	b.n	801505c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	89fa      	ldrh	r2, [r7, #14]
 801505a:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 801505c:	6878      	ldr	r0, [r7, #4]
 801505e:	f7ff ff71 	bl	8014f44 <tcp_update_rcv_ann_wnd>
 8015062:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8015064:	68bb      	ldr	r3, [r7, #8]
 8015066:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 801506a:	d309      	bcc.n	8015080 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 801506c:	687b      	ldr	r3, [r7, #4]
 801506e:	8b5b      	ldrh	r3, [r3, #26]
 8015070:	f043 0302 	orr.w	r3, r3, #2
 8015074:	b29a      	uxth	r2, r3
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801507a:	6878      	ldr	r0, [r7, #4]
 801507c:	f004 fb80 	bl	8019780 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8015080:	3710      	adds	r7, #16
 8015082:	46bd      	mov	sp, r7
 8015084:	bd80      	pop	{r7, pc}
 8015086:	bf00      	nop
 8015088:	08021e58 	.word	0x08021e58
 801508c:	080220f4 	.word	0x080220f4
 8015090:	08021e9c 	.word	0x08021e9c
 8015094:	0802210c 	.word	0x0802210c

08015098 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8015098:	b480      	push	{r7}
 801509a:	b083      	sub	sp, #12
 801509c:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 801509e:	2300      	movs	r3, #0
 80150a0:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 80150a2:	4b1e      	ldr	r3, [pc, #120]	@ (801511c <tcp_new_port+0x84>)
 80150a4:	881b      	ldrh	r3, [r3, #0]
 80150a6:	3301      	adds	r3, #1
 80150a8:	b29a      	uxth	r2, r3
 80150aa:	4b1c      	ldr	r3, [pc, #112]	@ (801511c <tcp_new_port+0x84>)
 80150ac:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 80150ae:	4b1b      	ldr	r3, [pc, #108]	@ (801511c <tcp_new_port+0x84>)
 80150b0:	881b      	ldrh	r3, [r3, #0]
 80150b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80150b6:	4293      	cmp	r3, r2
 80150b8:	d103      	bne.n	80150c2 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80150ba:	4b18      	ldr	r3, [pc, #96]	@ (801511c <tcp_new_port+0x84>)
 80150bc:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 80150c0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80150c2:	2300      	movs	r3, #0
 80150c4:	71fb      	strb	r3, [r7, #7]
 80150c6:	e01e      	b.n	8015106 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80150c8:	79fb      	ldrb	r3, [r7, #7]
 80150ca:	4a15      	ldr	r2, [pc, #84]	@ (8015120 <tcp_new_port+0x88>)
 80150cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80150d0:	681b      	ldr	r3, [r3, #0]
 80150d2:	603b      	str	r3, [r7, #0]
 80150d4:	e011      	b.n	80150fa <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 80150d6:	683b      	ldr	r3, [r7, #0]
 80150d8:	8ada      	ldrh	r2, [r3, #22]
 80150da:	4b10      	ldr	r3, [pc, #64]	@ (801511c <tcp_new_port+0x84>)
 80150dc:	881b      	ldrh	r3, [r3, #0]
 80150de:	429a      	cmp	r2, r3
 80150e0:	d108      	bne.n	80150f4 <tcp_new_port+0x5c>
        n++;
 80150e2:	88bb      	ldrh	r3, [r7, #4]
 80150e4:	3301      	adds	r3, #1
 80150e6:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80150e8:	88bb      	ldrh	r3, [r7, #4]
 80150ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80150ee:	d3d8      	bcc.n	80150a2 <tcp_new_port+0xa>
          return 0;
 80150f0:	2300      	movs	r3, #0
 80150f2:	e00d      	b.n	8015110 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80150f4:	683b      	ldr	r3, [r7, #0]
 80150f6:	68db      	ldr	r3, [r3, #12]
 80150f8:	603b      	str	r3, [r7, #0]
 80150fa:	683b      	ldr	r3, [r7, #0]
 80150fc:	2b00      	cmp	r3, #0
 80150fe:	d1ea      	bne.n	80150d6 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8015100:	79fb      	ldrb	r3, [r7, #7]
 8015102:	3301      	adds	r3, #1
 8015104:	71fb      	strb	r3, [r7, #7]
 8015106:	79fb      	ldrb	r3, [r7, #7]
 8015108:	2b03      	cmp	r3, #3
 801510a:	d9dd      	bls.n	80150c8 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 801510c:	4b03      	ldr	r3, [pc, #12]	@ (801511c <tcp_new_port+0x84>)
 801510e:	881b      	ldrh	r3, [r3, #0]
}
 8015110:	4618      	mov	r0, r3
 8015112:	370c      	adds	r7, #12
 8015114:	46bd      	mov	sp, r7
 8015116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801511a:	4770      	bx	lr
 801511c:	200000a4 	.word	0x200000a4
 8015120:	08023ec8 	.word	0x08023ec8

08015124 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8015124:	b5b0      	push	{r4, r5, r7, lr}
 8015126:	b090      	sub	sp, #64	@ 0x40
 8015128:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 801512a:	2300      	movs	r3, #0
 801512c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 8015130:	4b95      	ldr	r3, [pc, #596]	@ (8015388 <tcp_slowtmr+0x264>)
 8015132:	681b      	ldr	r3, [r3, #0]
 8015134:	3301      	adds	r3, #1
 8015136:	4a94      	ldr	r2, [pc, #592]	@ (8015388 <tcp_slowtmr+0x264>)
 8015138:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 801513a:	4b94      	ldr	r3, [pc, #592]	@ (801538c <tcp_slowtmr+0x268>)
 801513c:	781b      	ldrb	r3, [r3, #0]
 801513e:	3301      	adds	r3, #1
 8015140:	b2da      	uxtb	r2, r3
 8015142:	4b92      	ldr	r3, [pc, #584]	@ (801538c <tcp_slowtmr+0x268>)
 8015144:	701a      	strb	r2, [r3, #0]
 8015146:	e000      	b.n	801514a <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8015148:	bf00      	nop
  prev = NULL;
 801514a:	2300      	movs	r3, #0
 801514c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 801514e:	4b90      	ldr	r3, [pc, #576]	@ (8015390 <tcp_slowtmr+0x26c>)
 8015150:	681b      	ldr	r3, [r3, #0]
 8015152:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8015154:	e29f      	b.n	8015696 <tcp_slowtmr+0x572>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8015156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015158:	7d1b      	ldrb	r3, [r3, #20]
 801515a:	2b00      	cmp	r3, #0
 801515c:	d106      	bne.n	801516c <tcp_slowtmr+0x48>
 801515e:	4b8d      	ldr	r3, [pc, #564]	@ (8015394 <tcp_slowtmr+0x270>)
 8015160:	f240 42be 	movw	r2, #1214	@ 0x4be
 8015164:	498c      	ldr	r1, [pc, #560]	@ (8015398 <tcp_slowtmr+0x274>)
 8015166:	488d      	ldr	r0, [pc, #564]	@ (801539c <tcp_slowtmr+0x278>)
 8015168:	f009 f890 	bl	801e28c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 801516c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801516e:	7d1b      	ldrb	r3, [r3, #20]
 8015170:	2b01      	cmp	r3, #1
 8015172:	d106      	bne.n	8015182 <tcp_slowtmr+0x5e>
 8015174:	4b87      	ldr	r3, [pc, #540]	@ (8015394 <tcp_slowtmr+0x270>)
 8015176:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 801517a:	4989      	ldr	r1, [pc, #548]	@ (80153a0 <tcp_slowtmr+0x27c>)
 801517c:	4887      	ldr	r0, [pc, #540]	@ (801539c <tcp_slowtmr+0x278>)
 801517e:	f009 f885 	bl	801e28c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8015182:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015184:	7d1b      	ldrb	r3, [r3, #20]
 8015186:	2b0a      	cmp	r3, #10
 8015188:	d106      	bne.n	8015198 <tcp_slowtmr+0x74>
 801518a:	4b82      	ldr	r3, [pc, #520]	@ (8015394 <tcp_slowtmr+0x270>)
 801518c:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8015190:	4984      	ldr	r1, [pc, #528]	@ (80153a4 <tcp_slowtmr+0x280>)
 8015192:	4882      	ldr	r0, [pc, #520]	@ (801539c <tcp_slowtmr+0x278>)
 8015194:	f009 f87a 	bl	801e28c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8015198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801519a:	7f9a      	ldrb	r2, [r3, #30]
 801519c:	4b7b      	ldr	r3, [pc, #492]	@ (801538c <tcp_slowtmr+0x268>)
 801519e:	781b      	ldrb	r3, [r3, #0]
 80151a0:	429a      	cmp	r2, r3
 80151a2:	d105      	bne.n	80151b0 <tcp_slowtmr+0x8c>
      prev = pcb;
 80151a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151a6:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80151a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151aa:	68db      	ldr	r3, [r3, #12]
 80151ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 80151ae:	e272      	b.n	8015696 <tcp_slowtmr+0x572>
    pcb->last_timer = tcp_timer_ctr;
 80151b0:	4b76      	ldr	r3, [pc, #472]	@ (801538c <tcp_slowtmr+0x268>)
 80151b2:	781a      	ldrb	r2, [r3, #0]
 80151b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151b6:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 80151b8:	2300      	movs	r3, #0
 80151ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 80151be:	2300      	movs	r3, #0
 80151c0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80151c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151c6:	7d1b      	ldrb	r3, [r3, #20]
 80151c8:	2b02      	cmp	r3, #2
 80151ca:	d10a      	bne.n	80151e2 <tcp_slowtmr+0xbe>
 80151cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151ce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80151d2:	2b05      	cmp	r3, #5
 80151d4:	d905      	bls.n	80151e2 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 80151d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80151da:	3301      	adds	r3, #1
 80151dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80151e0:	e11e      	b.n	8015420 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80151e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151e4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80151e8:	2b0b      	cmp	r3, #11
 80151ea:	d905      	bls.n	80151f8 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 80151ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80151f0:	3301      	adds	r3, #1
 80151f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80151f6:	e113      	b.n	8015420 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 80151f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151fa:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80151fe:	2b00      	cmp	r3, #0
 8015200:	d075      	beq.n	80152ee <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8015202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015204:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015206:	2b00      	cmp	r3, #0
 8015208:	d006      	beq.n	8015218 <tcp_slowtmr+0xf4>
 801520a:	4b62      	ldr	r3, [pc, #392]	@ (8015394 <tcp_slowtmr+0x270>)
 801520c:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8015210:	4965      	ldr	r1, [pc, #404]	@ (80153a8 <tcp_slowtmr+0x284>)
 8015212:	4862      	ldr	r0, [pc, #392]	@ (801539c <tcp_slowtmr+0x278>)
 8015214:	f009 f83a 	bl	801e28c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8015218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801521a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801521c:	2b00      	cmp	r3, #0
 801521e:	d106      	bne.n	801522e <tcp_slowtmr+0x10a>
 8015220:	4b5c      	ldr	r3, [pc, #368]	@ (8015394 <tcp_slowtmr+0x270>)
 8015222:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8015226:	4961      	ldr	r1, [pc, #388]	@ (80153ac <tcp_slowtmr+0x288>)
 8015228:	485c      	ldr	r0, [pc, #368]	@ (801539c <tcp_slowtmr+0x278>)
 801522a:	f009 f82f 	bl	801e28c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801522e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015230:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8015234:	2b0b      	cmp	r3, #11
 8015236:	d905      	bls.n	8015244 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8015238:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801523c:	3301      	adds	r3, #1
 801523e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015242:	e0ed      	b.n	8015420 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8015244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015246:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801524a:	3b01      	subs	r3, #1
 801524c:	4a58      	ldr	r2, [pc, #352]	@ (80153b0 <tcp_slowtmr+0x28c>)
 801524e:	5cd3      	ldrb	r3, [r2, r3]
 8015250:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8015252:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015254:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8015258:	7c7a      	ldrb	r2, [r7, #17]
 801525a:	429a      	cmp	r2, r3
 801525c:	d907      	bls.n	801526e <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 801525e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015260:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8015264:	3301      	adds	r3, #1
 8015266:	b2da      	uxtb	r2, r3
 8015268:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801526a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 801526e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015270:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8015274:	7c7a      	ldrb	r2, [r7, #17]
 8015276:	429a      	cmp	r2, r3
 8015278:	f200 80d2 	bhi.w	8015420 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 801527c:	2301      	movs	r3, #1
 801527e:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8015280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015282:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8015286:	2b00      	cmp	r3, #0
 8015288:	d108      	bne.n	801529c <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 801528a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801528c:	f005 f920 	bl	801a4d0 <tcp_zero_window_probe>
 8015290:	4603      	mov	r3, r0
 8015292:	2b00      	cmp	r3, #0
 8015294:	d014      	beq.n	80152c0 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8015296:	2300      	movs	r3, #0
 8015298:	623b      	str	r3, [r7, #32]
 801529a:	e011      	b.n	80152c0 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 801529c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801529e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80152a2:	4619      	mov	r1, r3
 80152a4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80152a6:	f003 ffe5 	bl	8019274 <tcp_split_unsent_seg>
 80152aa:	4603      	mov	r3, r0
 80152ac:	2b00      	cmp	r3, #0
 80152ae:	d107      	bne.n	80152c0 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 80152b0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80152b2:	f004 fa65 	bl	8019780 <tcp_output>
 80152b6:	4603      	mov	r3, r0
 80152b8:	2b00      	cmp	r3, #0
 80152ba:	d101      	bne.n	80152c0 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 80152bc:	2300      	movs	r3, #0
 80152be:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 80152c0:	6a3b      	ldr	r3, [r7, #32]
 80152c2:	2b00      	cmp	r3, #0
 80152c4:	f000 80ac 	beq.w	8015420 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 80152c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152ca:	2200      	movs	r2, #0
 80152cc:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80152d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152d2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80152d6:	2b06      	cmp	r3, #6
 80152d8:	f200 80a2 	bhi.w	8015420 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 80152dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152de:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80152e2:	3301      	adds	r3, #1
 80152e4:	b2da      	uxtb	r2, r3
 80152e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152e8:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 80152ec:	e098      	b.n	8015420 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80152ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152f0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80152f4:	2b00      	cmp	r3, #0
 80152f6:	db0f      	blt.n	8015318 <tcp_slowtmr+0x1f4>
 80152f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152fa:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80152fe:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8015302:	4293      	cmp	r3, r2
 8015304:	d008      	beq.n	8015318 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 8015306:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015308:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801530c:	b29b      	uxth	r3, r3
 801530e:	3301      	adds	r3, #1
 8015310:	b29b      	uxth	r3, r3
 8015312:	b21a      	sxth	r2, r3
 8015314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015316:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8015318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801531a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 801531e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015320:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8015324:	429a      	cmp	r2, r3
 8015326:	db7b      	blt.n	8015420 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8015328:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801532a:	f004 fd1d 	bl	8019d68 <tcp_rexmit_rto_prepare>
 801532e:	4603      	mov	r3, r0
 8015330:	2b00      	cmp	r3, #0
 8015332:	d007      	beq.n	8015344 <tcp_slowtmr+0x220>
 8015334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015336:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015338:	2b00      	cmp	r3, #0
 801533a:	d171      	bne.n	8015420 <tcp_slowtmr+0x2fc>
 801533c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801533e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015340:	2b00      	cmp	r3, #0
 8015342:	d06d      	beq.n	8015420 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 8015344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015346:	7d1b      	ldrb	r3, [r3, #20]
 8015348:	2b02      	cmp	r3, #2
 801534a:	d03a      	beq.n	80153c2 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 801534c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801534e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015352:	2b0c      	cmp	r3, #12
 8015354:	bf28      	it	cs
 8015356:	230c      	movcs	r3, #12
 8015358:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801535a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801535c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8015360:	10db      	asrs	r3, r3, #3
 8015362:	b21b      	sxth	r3, r3
 8015364:	461a      	mov	r2, r3
 8015366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015368:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801536c:	4413      	add	r3, r2
 801536e:	7efa      	ldrb	r2, [r7, #27]
 8015370:	4910      	ldr	r1, [pc, #64]	@ (80153b4 <tcp_slowtmr+0x290>)
 8015372:	5c8a      	ldrb	r2, [r1, r2]
 8015374:	4093      	lsls	r3, r2
 8015376:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8015378:	697b      	ldr	r3, [r7, #20]
 801537a:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 801537e:	4293      	cmp	r3, r2
 8015380:	dc1a      	bgt.n	80153b8 <tcp_slowtmr+0x294>
 8015382:	697b      	ldr	r3, [r7, #20]
 8015384:	b21a      	sxth	r2, r3
 8015386:	e019      	b.n	80153bc <tcp_slowtmr+0x298>
 8015388:	2000cac0 	.word	0x2000cac0
 801538c:	2000cad6 	.word	0x2000cad6
 8015390:	2000cacc 	.word	0x2000cacc
 8015394:	08021e58 	.word	0x08021e58
 8015398:	0802219c 	.word	0x0802219c
 801539c:	08021e9c 	.word	0x08021e9c
 80153a0:	080221c8 	.word	0x080221c8
 80153a4:	080221f4 	.word	0x080221f4
 80153a8:	08022224 	.word	0x08022224
 80153ac:	08022258 	.word	0x08022258
 80153b0:	08023ec0 	.word	0x08023ec0
 80153b4:	08023eb0 	.word	0x08023eb0
 80153b8:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80153bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80153be:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 80153c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80153c4:	2200      	movs	r2, #0
 80153c6:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80153c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80153ca:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80153ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80153d0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80153d4:	4293      	cmp	r3, r2
 80153d6:	bf28      	it	cs
 80153d8:	4613      	movcs	r3, r2
 80153da:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80153dc:	8a7b      	ldrh	r3, [r7, #18]
 80153de:	085b      	lsrs	r3, r3, #1
 80153e0:	b29a      	uxth	r2, r3
 80153e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80153e4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80153e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80153ea:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80153ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80153f0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80153f2:	005b      	lsls	r3, r3, #1
 80153f4:	b29b      	uxth	r3, r3
 80153f6:	429a      	cmp	r2, r3
 80153f8:	d206      	bcs.n	8015408 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80153fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80153fc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80153fe:	005b      	lsls	r3, r3, #1
 8015400:	b29a      	uxth	r2, r3
 8015402:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015404:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8015408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801540a:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 801540c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801540e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 8015412:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015414:	2200      	movs	r2, #0
 8015416:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 801541a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801541c:	f004 fd14 	bl	8019e48 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 8015420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015422:	7d1b      	ldrb	r3, [r3, #20]
 8015424:	2b06      	cmp	r3, #6
 8015426:	d111      	bne.n	801544c <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8015428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801542a:	8b5b      	ldrh	r3, [r3, #26]
 801542c:	f003 0310 	and.w	r3, r3, #16
 8015430:	2b00      	cmp	r3, #0
 8015432:	d00b      	beq.n	801544c <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015434:	4b9d      	ldr	r3, [pc, #628]	@ (80156ac <tcp_slowtmr+0x588>)
 8015436:	681a      	ldr	r2, [r3, #0]
 8015438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801543a:	6a1b      	ldr	r3, [r3, #32]
 801543c:	1ad3      	subs	r3, r2, r3
 801543e:	2b28      	cmp	r3, #40	@ 0x28
 8015440:	d904      	bls.n	801544c <tcp_slowtmr+0x328>
          ++pcb_remove;
 8015442:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015446:	3301      	adds	r3, #1
 8015448:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801544c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801544e:	7a5b      	ldrb	r3, [r3, #9]
 8015450:	f003 0308 	and.w	r3, r3, #8
 8015454:	2b00      	cmp	r3, #0
 8015456:	d04c      	beq.n	80154f2 <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 8015458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801545a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801545c:	2b04      	cmp	r3, #4
 801545e:	d003      	beq.n	8015468 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8015460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015462:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8015464:	2b07      	cmp	r3, #7
 8015466:	d144      	bne.n	80154f2 <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015468:	4b90      	ldr	r3, [pc, #576]	@ (80156ac <tcp_slowtmr+0x588>)
 801546a:	681a      	ldr	r2, [r3, #0]
 801546c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801546e:	6a1b      	ldr	r3, [r3, #32]
 8015470:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8015472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015474:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8015478:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 801547c:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 8015480:	498b      	ldr	r1, [pc, #556]	@ (80156b0 <tcp_slowtmr+0x58c>)
 8015482:	fba1 1303 	umull	r1, r3, r1, r3
 8015486:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015488:	429a      	cmp	r2, r3
 801548a:	d90a      	bls.n	80154a2 <tcp_slowtmr+0x37e>
        ++pcb_remove;
 801548c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015490:	3301      	adds	r3, #1
 8015492:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8015496:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801549a:	3301      	adds	r3, #1
 801549c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80154a0:	e027      	b.n	80154f2 <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80154a2:	4b82      	ldr	r3, [pc, #520]	@ (80156ac <tcp_slowtmr+0x588>)
 80154a4:	681a      	ldr	r2, [r3, #0]
 80154a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154a8:	6a1b      	ldr	r3, [r3, #32]
 80154aa:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80154ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154ae:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 80154b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154b4:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 80154b8:	4618      	mov	r0, r3
 80154ba:	4b7e      	ldr	r3, [pc, #504]	@ (80156b4 <tcp_slowtmr+0x590>)
 80154bc:	fb00 f303 	mul.w	r3, r0, r3
 80154c0:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80154c2:	497b      	ldr	r1, [pc, #492]	@ (80156b0 <tcp_slowtmr+0x58c>)
 80154c4:	fba1 1303 	umull	r1, r3, r1, r3
 80154c8:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80154ca:	429a      	cmp	r2, r3
 80154cc:	d911      	bls.n	80154f2 <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 80154ce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80154d0:	f004 ffbe 	bl	801a450 <tcp_keepalive>
 80154d4:	4603      	mov	r3, r0
 80154d6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 80154da:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80154de:	2b00      	cmp	r3, #0
 80154e0:	d107      	bne.n	80154f2 <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 80154e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154e4:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 80154e8:	3301      	adds	r3, #1
 80154ea:	b2da      	uxtb	r2, r3
 80154ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154ee:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 80154f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80154f6:	2b00      	cmp	r3, #0
 80154f8:	d011      	beq.n	801551e <tcp_slowtmr+0x3fa>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80154fa:	4b6c      	ldr	r3, [pc, #432]	@ (80156ac <tcp_slowtmr+0x588>)
 80154fc:	681a      	ldr	r2, [r3, #0]
 80154fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015500:	6a1b      	ldr	r3, [r3, #32]
 8015502:	1ad2      	subs	r2, r2, r3
 8015504:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015506:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 801550a:	4619      	mov	r1, r3
 801550c:	460b      	mov	r3, r1
 801550e:	005b      	lsls	r3, r3, #1
 8015510:	440b      	add	r3, r1
 8015512:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8015514:	429a      	cmp	r2, r3
 8015516:	d302      	bcc.n	801551e <tcp_slowtmr+0x3fa>
      tcp_free_ooseq(pcb);
 8015518:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801551a:	f000 fe7f 	bl	801621c <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 801551e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015520:	7d1b      	ldrb	r3, [r3, #20]
 8015522:	2b03      	cmp	r3, #3
 8015524:	d10b      	bne.n	801553e <tcp_slowtmr+0x41a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015526:	4b61      	ldr	r3, [pc, #388]	@ (80156ac <tcp_slowtmr+0x588>)
 8015528:	681a      	ldr	r2, [r3, #0]
 801552a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801552c:	6a1b      	ldr	r3, [r3, #32]
 801552e:	1ad3      	subs	r3, r2, r3
 8015530:	2b28      	cmp	r3, #40	@ 0x28
 8015532:	d904      	bls.n	801553e <tcp_slowtmr+0x41a>
        ++pcb_remove;
 8015534:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015538:	3301      	adds	r3, #1
 801553a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 801553e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015540:	7d1b      	ldrb	r3, [r3, #20]
 8015542:	2b09      	cmp	r3, #9
 8015544:	d10b      	bne.n	801555e <tcp_slowtmr+0x43a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8015546:	4b59      	ldr	r3, [pc, #356]	@ (80156ac <tcp_slowtmr+0x588>)
 8015548:	681a      	ldr	r2, [r3, #0]
 801554a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801554c:	6a1b      	ldr	r3, [r3, #32]
 801554e:	1ad3      	subs	r3, r2, r3
 8015550:	2bf0      	cmp	r3, #240	@ 0xf0
 8015552:	d904      	bls.n	801555e <tcp_slowtmr+0x43a>
        ++pcb_remove;
 8015554:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015558:	3301      	adds	r3, #1
 801555a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 801555e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015562:	2b00      	cmp	r3, #0
 8015564:	d060      	beq.n	8015628 <tcp_slowtmr+0x504>
      tcp_err_fn err_fn = pcb->errf;
 8015566:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015568:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801556c:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 801556e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015570:	f000 fca0 	bl	8015eb4 <tcp_pcb_purge>
      if (prev != NULL) {
 8015574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015576:	2b00      	cmp	r3, #0
 8015578:	d010      	beq.n	801559c <tcp_slowtmr+0x478>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801557a:	4b4f      	ldr	r3, [pc, #316]	@ (80156b8 <tcp_slowtmr+0x594>)
 801557c:	681b      	ldr	r3, [r3, #0]
 801557e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015580:	429a      	cmp	r2, r3
 8015582:	d106      	bne.n	8015592 <tcp_slowtmr+0x46e>
 8015584:	4b4d      	ldr	r3, [pc, #308]	@ (80156bc <tcp_slowtmr+0x598>)
 8015586:	f240 526d 	movw	r2, #1389	@ 0x56d
 801558a:	494d      	ldr	r1, [pc, #308]	@ (80156c0 <tcp_slowtmr+0x59c>)
 801558c:	484d      	ldr	r0, [pc, #308]	@ (80156c4 <tcp_slowtmr+0x5a0>)
 801558e:	f008 fe7d 	bl	801e28c <iprintf>
        prev->next = pcb->next;
 8015592:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015594:	68da      	ldr	r2, [r3, #12]
 8015596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015598:	60da      	str	r2, [r3, #12]
 801559a:	e00f      	b.n	80155bc <tcp_slowtmr+0x498>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 801559c:	4b46      	ldr	r3, [pc, #280]	@ (80156b8 <tcp_slowtmr+0x594>)
 801559e:	681b      	ldr	r3, [r3, #0]
 80155a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80155a2:	429a      	cmp	r2, r3
 80155a4:	d006      	beq.n	80155b4 <tcp_slowtmr+0x490>
 80155a6:	4b45      	ldr	r3, [pc, #276]	@ (80156bc <tcp_slowtmr+0x598>)
 80155a8:	f240 5271 	movw	r2, #1393	@ 0x571
 80155ac:	4946      	ldr	r1, [pc, #280]	@ (80156c8 <tcp_slowtmr+0x5a4>)
 80155ae:	4845      	ldr	r0, [pc, #276]	@ (80156c4 <tcp_slowtmr+0x5a0>)
 80155b0:	f008 fe6c 	bl	801e28c <iprintf>
        tcp_active_pcbs = pcb->next;
 80155b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80155b6:	68db      	ldr	r3, [r3, #12]
 80155b8:	4a3f      	ldr	r2, [pc, #252]	@ (80156b8 <tcp_slowtmr+0x594>)
 80155ba:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 80155bc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80155c0:	2b00      	cmp	r3, #0
 80155c2:	d013      	beq.n	80155ec <tcp_slowtmr+0x4c8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80155c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80155c6:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80155c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80155ca:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80155cc:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 80155ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80155d0:	3304      	adds	r3, #4
 80155d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80155d4:	8ad2      	ldrh	r2, [r2, #22]
 80155d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80155d8:	8b09      	ldrh	r1, [r1, #24]
 80155da:	9102      	str	r1, [sp, #8]
 80155dc:	9201      	str	r2, [sp, #4]
 80155de:	9300      	str	r3, [sp, #0]
 80155e0:	462b      	mov	r3, r5
 80155e2:	4622      	mov	r2, r4
 80155e4:	4601      	mov	r1, r0
 80155e6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80155e8:	f004 fe7e 	bl	801a2e8 <tcp_rst>
      err_arg = pcb->callback_arg;
 80155ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80155ee:	691b      	ldr	r3, [r3, #16]
 80155f0:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80155f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80155f4:	7d1b      	ldrb	r3, [r3, #20]
 80155f6:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80155f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80155fa:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80155fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80155fe:	68db      	ldr	r3, [r3, #12]
 8015600:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8015602:	6838      	ldr	r0, [r7, #0]
 8015604:	f7ff f836 	bl	8014674 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8015608:	4b30      	ldr	r3, [pc, #192]	@ (80156cc <tcp_slowtmr+0x5a8>)
 801560a:	2200      	movs	r2, #0
 801560c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801560e:	68fb      	ldr	r3, [r7, #12]
 8015610:	2b00      	cmp	r3, #0
 8015612:	d004      	beq.n	801561e <tcp_slowtmr+0x4fa>
 8015614:	68fb      	ldr	r3, [r7, #12]
 8015616:	f06f 010c 	mvn.w	r1, #12
 801561a:	68b8      	ldr	r0, [r7, #8]
 801561c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 801561e:	4b2b      	ldr	r3, [pc, #172]	@ (80156cc <tcp_slowtmr+0x5a8>)
 8015620:	781b      	ldrb	r3, [r3, #0]
 8015622:	2b00      	cmp	r3, #0
 8015624:	d037      	beq.n	8015696 <tcp_slowtmr+0x572>
        goto tcp_slowtmr_start;
 8015626:	e590      	b.n	801514a <tcp_slowtmr+0x26>
      prev = pcb;
 8015628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801562a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 801562c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801562e:	68db      	ldr	r3, [r3, #12]
 8015630:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 8015632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015634:	7f1b      	ldrb	r3, [r3, #28]
 8015636:	3301      	adds	r3, #1
 8015638:	b2da      	uxtb	r2, r3
 801563a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801563c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801563e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015640:	7f1a      	ldrb	r2, [r3, #28]
 8015642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015644:	7f5b      	ldrb	r3, [r3, #29]
 8015646:	429a      	cmp	r2, r3
 8015648:	d325      	bcc.n	8015696 <tcp_slowtmr+0x572>
        prev->polltmr = 0;
 801564a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801564c:	2200      	movs	r2, #0
 801564e:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8015650:	4b1e      	ldr	r3, [pc, #120]	@ (80156cc <tcp_slowtmr+0x5a8>)
 8015652:	2200      	movs	r2, #0
 8015654:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8015656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015658:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801565c:	2b00      	cmp	r3, #0
 801565e:	d00b      	beq.n	8015678 <tcp_slowtmr+0x554>
 8015660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015662:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8015666:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015668:	6912      	ldr	r2, [r2, #16]
 801566a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801566c:	4610      	mov	r0, r2
 801566e:	4798      	blx	r3
 8015670:	4603      	mov	r3, r0
 8015672:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8015676:	e002      	b.n	801567e <tcp_slowtmr+0x55a>
 8015678:	2300      	movs	r3, #0
 801567a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 801567e:	4b13      	ldr	r3, [pc, #76]	@ (80156cc <tcp_slowtmr+0x5a8>)
 8015680:	781b      	ldrb	r3, [r3, #0]
 8015682:	2b00      	cmp	r3, #0
 8015684:	f47f ad60 	bne.w	8015148 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8015688:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 801568c:	2b00      	cmp	r3, #0
 801568e:	d102      	bne.n	8015696 <tcp_slowtmr+0x572>
          tcp_output(prev);
 8015690:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015692:	f004 f875 	bl	8019780 <tcp_output>
  while (pcb != NULL) {
 8015696:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015698:	2b00      	cmp	r3, #0
 801569a:	f47f ad5c 	bne.w	8015156 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 801569e:	2300      	movs	r3, #0
 80156a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 80156a2:	4b0b      	ldr	r3, [pc, #44]	@ (80156d0 <tcp_slowtmr+0x5ac>)
 80156a4:	681b      	ldr	r3, [r3, #0]
 80156a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80156a8:	e067      	b.n	801577a <tcp_slowtmr+0x656>
 80156aa:	bf00      	nop
 80156ac:	2000cac0 	.word	0x2000cac0
 80156b0:	10624dd3 	.word	0x10624dd3
 80156b4:	000124f8 	.word	0x000124f8
 80156b8:	2000cacc 	.word	0x2000cacc
 80156bc:	08021e58 	.word	0x08021e58
 80156c0:	08022290 	.word	0x08022290
 80156c4:	08021e9c 	.word	0x08021e9c
 80156c8:	080222bc 	.word	0x080222bc
 80156cc:	2000cad4 	.word	0x2000cad4
 80156d0:	2000cad0 	.word	0x2000cad0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80156d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80156d6:	7d1b      	ldrb	r3, [r3, #20]
 80156d8:	2b0a      	cmp	r3, #10
 80156da:	d006      	beq.n	80156ea <tcp_slowtmr+0x5c6>
 80156dc:	4b2b      	ldr	r3, [pc, #172]	@ (801578c <tcp_slowtmr+0x668>)
 80156de:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 80156e2:	492b      	ldr	r1, [pc, #172]	@ (8015790 <tcp_slowtmr+0x66c>)
 80156e4:	482b      	ldr	r0, [pc, #172]	@ (8015794 <tcp_slowtmr+0x670>)
 80156e6:	f008 fdd1 	bl	801e28c <iprintf>
    pcb_remove = 0;
 80156ea:	2300      	movs	r3, #0
 80156ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80156f0:	4b29      	ldr	r3, [pc, #164]	@ (8015798 <tcp_slowtmr+0x674>)
 80156f2:	681a      	ldr	r2, [r3, #0]
 80156f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80156f6:	6a1b      	ldr	r3, [r3, #32]
 80156f8:	1ad3      	subs	r3, r2, r3
 80156fa:	2bf0      	cmp	r3, #240	@ 0xf0
 80156fc:	d904      	bls.n	8015708 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 80156fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015702:	3301      	adds	r3, #1
 8015704:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8015708:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801570c:	2b00      	cmp	r3, #0
 801570e:	d02f      	beq.n	8015770 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8015710:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015712:	f000 fbcf 	bl	8015eb4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8015716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015718:	2b00      	cmp	r3, #0
 801571a:	d010      	beq.n	801573e <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 801571c:	4b1f      	ldr	r3, [pc, #124]	@ (801579c <tcp_slowtmr+0x678>)
 801571e:	681b      	ldr	r3, [r3, #0]
 8015720:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015722:	429a      	cmp	r2, r3
 8015724:	d106      	bne.n	8015734 <tcp_slowtmr+0x610>
 8015726:	4b19      	ldr	r3, [pc, #100]	@ (801578c <tcp_slowtmr+0x668>)
 8015728:	f240 52af 	movw	r2, #1455	@ 0x5af
 801572c:	491c      	ldr	r1, [pc, #112]	@ (80157a0 <tcp_slowtmr+0x67c>)
 801572e:	4819      	ldr	r0, [pc, #100]	@ (8015794 <tcp_slowtmr+0x670>)
 8015730:	f008 fdac 	bl	801e28c <iprintf>
        prev->next = pcb->next;
 8015734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015736:	68da      	ldr	r2, [r3, #12]
 8015738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801573a:	60da      	str	r2, [r3, #12]
 801573c:	e00f      	b.n	801575e <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801573e:	4b17      	ldr	r3, [pc, #92]	@ (801579c <tcp_slowtmr+0x678>)
 8015740:	681b      	ldr	r3, [r3, #0]
 8015742:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015744:	429a      	cmp	r2, r3
 8015746:	d006      	beq.n	8015756 <tcp_slowtmr+0x632>
 8015748:	4b10      	ldr	r3, [pc, #64]	@ (801578c <tcp_slowtmr+0x668>)
 801574a:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 801574e:	4915      	ldr	r1, [pc, #84]	@ (80157a4 <tcp_slowtmr+0x680>)
 8015750:	4810      	ldr	r0, [pc, #64]	@ (8015794 <tcp_slowtmr+0x670>)
 8015752:	f008 fd9b 	bl	801e28c <iprintf>
        tcp_tw_pcbs = pcb->next;
 8015756:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015758:	68db      	ldr	r3, [r3, #12]
 801575a:	4a10      	ldr	r2, [pc, #64]	@ (801579c <tcp_slowtmr+0x678>)
 801575c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801575e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015760:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8015762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015764:	68db      	ldr	r3, [r3, #12]
 8015766:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8015768:	69f8      	ldr	r0, [r7, #28]
 801576a:	f7fe ff83 	bl	8014674 <tcp_free>
 801576e:	e004      	b.n	801577a <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8015770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015772:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8015774:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015776:	68db      	ldr	r3, [r3, #12]
 8015778:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 801577a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801577c:	2b00      	cmp	r3, #0
 801577e:	d1a9      	bne.n	80156d4 <tcp_slowtmr+0x5b0>
    }
  }
}
 8015780:	bf00      	nop
 8015782:	bf00      	nop
 8015784:	3730      	adds	r7, #48	@ 0x30
 8015786:	46bd      	mov	sp, r7
 8015788:	bdb0      	pop	{r4, r5, r7, pc}
 801578a:	bf00      	nop
 801578c:	08021e58 	.word	0x08021e58
 8015790:	080222e8 	.word	0x080222e8
 8015794:	08021e9c 	.word	0x08021e9c
 8015798:	2000cac0 	.word	0x2000cac0
 801579c:	2000cad0 	.word	0x2000cad0
 80157a0:	08022318 	.word	0x08022318
 80157a4:	08022340 	.word	0x08022340

080157a8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80157a8:	b580      	push	{r7, lr}
 80157aa:	b082      	sub	sp, #8
 80157ac:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80157ae:	4b2d      	ldr	r3, [pc, #180]	@ (8015864 <tcp_fasttmr+0xbc>)
 80157b0:	781b      	ldrb	r3, [r3, #0]
 80157b2:	3301      	adds	r3, #1
 80157b4:	b2da      	uxtb	r2, r3
 80157b6:	4b2b      	ldr	r3, [pc, #172]	@ (8015864 <tcp_fasttmr+0xbc>)
 80157b8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80157ba:	4b2b      	ldr	r3, [pc, #172]	@ (8015868 <tcp_fasttmr+0xc0>)
 80157bc:	681b      	ldr	r3, [r3, #0]
 80157be:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80157c0:	e048      	b.n	8015854 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80157c2:	687b      	ldr	r3, [r7, #4]
 80157c4:	7f9a      	ldrb	r2, [r3, #30]
 80157c6:	4b27      	ldr	r3, [pc, #156]	@ (8015864 <tcp_fasttmr+0xbc>)
 80157c8:	781b      	ldrb	r3, [r3, #0]
 80157ca:	429a      	cmp	r2, r3
 80157cc:	d03f      	beq.n	801584e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80157ce:	4b25      	ldr	r3, [pc, #148]	@ (8015864 <tcp_fasttmr+0xbc>)
 80157d0:	781a      	ldrb	r2, [r3, #0]
 80157d2:	687b      	ldr	r3, [r7, #4]
 80157d4:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80157d6:	687b      	ldr	r3, [r7, #4]
 80157d8:	8b5b      	ldrh	r3, [r3, #26]
 80157da:	f003 0301 	and.w	r3, r3, #1
 80157de:	2b00      	cmp	r3, #0
 80157e0:	d010      	beq.n	8015804 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80157e2:	687b      	ldr	r3, [r7, #4]
 80157e4:	8b5b      	ldrh	r3, [r3, #26]
 80157e6:	f043 0302 	orr.w	r3, r3, #2
 80157ea:	b29a      	uxth	r2, r3
 80157ec:	687b      	ldr	r3, [r7, #4]
 80157ee:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80157f0:	6878      	ldr	r0, [r7, #4]
 80157f2:	f003 ffc5 	bl	8019780 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80157f6:	687b      	ldr	r3, [r7, #4]
 80157f8:	8b5b      	ldrh	r3, [r3, #26]
 80157fa:	f023 0303 	bic.w	r3, r3, #3
 80157fe:	b29a      	uxth	r2, r3
 8015800:	687b      	ldr	r3, [r7, #4]
 8015802:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8015804:	687b      	ldr	r3, [r7, #4]
 8015806:	8b5b      	ldrh	r3, [r3, #26]
 8015808:	f003 0308 	and.w	r3, r3, #8
 801580c:	2b00      	cmp	r3, #0
 801580e:	d009      	beq.n	8015824 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8015810:	687b      	ldr	r3, [r7, #4]
 8015812:	8b5b      	ldrh	r3, [r3, #26]
 8015814:	f023 0308 	bic.w	r3, r3, #8
 8015818:	b29a      	uxth	r2, r3
 801581a:	687b      	ldr	r3, [r7, #4]
 801581c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801581e:	6878      	ldr	r0, [r7, #4]
 8015820:	f7ff f8bc 	bl	801499c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8015824:	687b      	ldr	r3, [r7, #4]
 8015826:	68db      	ldr	r3, [r3, #12]
 8015828:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801582a:	687b      	ldr	r3, [r7, #4]
 801582c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801582e:	2b00      	cmp	r3, #0
 8015830:	d00a      	beq.n	8015848 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8015832:	4b0e      	ldr	r3, [pc, #56]	@ (801586c <tcp_fasttmr+0xc4>)
 8015834:	2200      	movs	r2, #0
 8015836:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8015838:	6878      	ldr	r0, [r7, #4]
 801583a:	f000 f819 	bl	8015870 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801583e:	4b0b      	ldr	r3, [pc, #44]	@ (801586c <tcp_fasttmr+0xc4>)
 8015840:	781b      	ldrb	r3, [r3, #0]
 8015842:	2b00      	cmp	r3, #0
 8015844:	d000      	beq.n	8015848 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8015846:	e7b8      	b.n	80157ba <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8015848:	683b      	ldr	r3, [r7, #0]
 801584a:	607b      	str	r3, [r7, #4]
 801584c:	e002      	b.n	8015854 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801584e:	687b      	ldr	r3, [r7, #4]
 8015850:	68db      	ldr	r3, [r3, #12]
 8015852:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8015854:	687b      	ldr	r3, [r7, #4]
 8015856:	2b00      	cmp	r3, #0
 8015858:	d1b3      	bne.n	80157c2 <tcp_fasttmr+0x1a>
    }
  }
}
 801585a:	bf00      	nop
 801585c:	bf00      	nop
 801585e:	3708      	adds	r7, #8
 8015860:	46bd      	mov	sp, r7
 8015862:	bd80      	pop	{r7, pc}
 8015864:	2000cad6 	.word	0x2000cad6
 8015868:	2000cacc 	.word	0x2000cacc
 801586c:	2000cad4 	.word	0x2000cad4

08015870 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8015870:	b590      	push	{r4, r7, lr}
 8015872:	b085      	sub	sp, #20
 8015874:	af00      	add	r7, sp, #0
 8015876:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8015878:	687b      	ldr	r3, [r7, #4]
 801587a:	2b00      	cmp	r3, #0
 801587c:	d109      	bne.n	8015892 <tcp_process_refused_data+0x22>
 801587e:	4b37      	ldr	r3, [pc, #220]	@ (801595c <tcp_process_refused_data+0xec>)
 8015880:	f240 6209 	movw	r2, #1545	@ 0x609
 8015884:	4936      	ldr	r1, [pc, #216]	@ (8015960 <tcp_process_refused_data+0xf0>)
 8015886:	4837      	ldr	r0, [pc, #220]	@ (8015964 <tcp_process_refused_data+0xf4>)
 8015888:	f008 fd00 	bl	801e28c <iprintf>
 801588c:	f06f 030f 	mvn.w	r3, #15
 8015890:	e060      	b.n	8015954 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8015892:	687b      	ldr	r3, [r7, #4]
 8015894:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015896:	7b5b      	ldrb	r3, [r3, #13]
 8015898:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801589a:	687b      	ldr	r3, [r7, #4]
 801589c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801589e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80158a0:	687b      	ldr	r3, [r7, #4]
 80158a2:	2200      	movs	r2, #0
 80158a4:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80158a6:	687b      	ldr	r3, [r7, #4]
 80158a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80158ac:	2b00      	cmp	r3, #0
 80158ae:	d00b      	beq.n	80158c8 <tcp_process_refused_data+0x58>
 80158b0:	687b      	ldr	r3, [r7, #4]
 80158b2:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80158b6:	687b      	ldr	r3, [r7, #4]
 80158b8:	6918      	ldr	r0, [r3, #16]
 80158ba:	2300      	movs	r3, #0
 80158bc:	68ba      	ldr	r2, [r7, #8]
 80158be:	6879      	ldr	r1, [r7, #4]
 80158c0:	47a0      	blx	r4
 80158c2:	4603      	mov	r3, r0
 80158c4:	73fb      	strb	r3, [r7, #15]
 80158c6:	e007      	b.n	80158d8 <tcp_process_refused_data+0x68>
 80158c8:	2300      	movs	r3, #0
 80158ca:	68ba      	ldr	r2, [r7, #8]
 80158cc:	6879      	ldr	r1, [r7, #4]
 80158ce:	2000      	movs	r0, #0
 80158d0:	f000 f8c2 	bl	8015a58 <tcp_recv_null>
 80158d4:	4603      	mov	r3, r0
 80158d6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80158d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80158dc:	2b00      	cmp	r3, #0
 80158de:	d12a      	bne.n	8015936 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80158e0:	7bbb      	ldrb	r3, [r7, #14]
 80158e2:	f003 0320 	and.w	r3, r3, #32
 80158e6:	2b00      	cmp	r3, #0
 80158e8:	d033      	beq.n	8015952 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80158ea:	687b      	ldr	r3, [r7, #4]
 80158ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80158ee:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80158f2:	d005      	beq.n	8015900 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80158f4:	687b      	ldr	r3, [r7, #4]
 80158f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80158f8:	3301      	adds	r3, #1
 80158fa:	b29a      	uxth	r2, r3
 80158fc:	687b      	ldr	r3, [r7, #4]
 80158fe:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8015900:	687b      	ldr	r3, [r7, #4]
 8015902:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015906:	2b00      	cmp	r3, #0
 8015908:	d00b      	beq.n	8015922 <tcp_process_refused_data+0xb2>
 801590a:	687b      	ldr	r3, [r7, #4]
 801590c:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8015910:	687b      	ldr	r3, [r7, #4]
 8015912:	6918      	ldr	r0, [r3, #16]
 8015914:	2300      	movs	r3, #0
 8015916:	2200      	movs	r2, #0
 8015918:	6879      	ldr	r1, [r7, #4]
 801591a:	47a0      	blx	r4
 801591c:	4603      	mov	r3, r0
 801591e:	73fb      	strb	r3, [r7, #15]
 8015920:	e001      	b.n	8015926 <tcp_process_refused_data+0xb6>
 8015922:	2300      	movs	r3, #0
 8015924:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8015926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801592a:	f113 0f0d 	cmn.w	r3, #13
 801592e:	d110      	bne.n	8015952 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8015930:	f06f 030c 	mvn.w	r3, #12
 8015934:	e00e      	b.n	8015954 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8015936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801593a:	f113 0f0d 	cmn.w	r3, #13
 801593e:	d102      	bne.n	8015946 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8015940:	f06f 030c 	mvn.w	r3, #12
 8015944:	e006      	b.n	8015954 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8015946:	687b      	ldr	r3, [r7, #4]
 8015948:	68ba      	ldr	r2, [r7, #8]
 801594a:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 801594c:	f06f 0304 	mvn.w	r3, #4
 8015950:	e000      	b.n	8015954 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8015952:	2300      	movs	r3, #0
}
 8015954:	4618      	mov	r0, r3
 8015956:	3714      	adds	r7, #20
 8015958:	46bd      	mov	sp, r7
 801595a:	bd90      	pop	{r4, r7, pc}
 801595c:	08021e58 	.word	0x08021e58
 8015960:	08022368 	.word	0x08022368
 8015964:	08021e9c 	.word	0x08021e9c

08015968 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8015968:	b580      	push	{r7, lr}
 801596a:	b084      	sub	sp, #16
 801596c:	af00      	add	r7, sp, #0
 801596e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8015970:	e007      	b.n	8015982 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8015972:	687b      	ldr	r3, [r7, #4]
 8015974:	681b      	ldr	r3, [r3, #0]
 8015976:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8015978:	6878      	ldr	r0, [r7, #4]
 801597a:	f000 f80a 	bl	8015992 <tcp_seg_free>
    seg = next;
 801597e:	68fb      	ldr	r3, [r7, #12]
 8015980:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8015982:	687b      	ldr	r3, [r7, #4]
 8015984:	2b00      	cmp	r3, #0
 8015986:	d1f4      	bne.n	8015972 <tcp_segs_free+0xa>
  }
}
 8015988:	bf00      	nop
 801598a:	bf00      	nop
 801598c:	3710      	adds	r7, #16
 801598e:	46bd      	mov	sp, r7
 8015990:	bd80      	pop	{r7, pc}

08015992 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8015992:	b580      	push	{r7, lr}
 8015994:	b082      	sub	sp, #8
 8015996:	af00      	add	r7, sp, #0
 8015998:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801599a:	687b      	ldr	r3, [r7, #4]
 801599c:	2b00      	cmp	r3, #0
 801599e:	d00c      	beq.n	80159ba <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80159a0:	687b      	ldr	r3, [r7, #4]
 80159a2:	685b      	ldr	r3, [r3, #4]
 80159a4:	2b00      	cmp	r3, #0
 80159a6:	d004      	beq.n	80159b2 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	685b      	ldr	r3, [r3, #4]
 80159ac:	4618      	mov	r0, r3
 80159ae:	f7fe fbb5 	bl	801411c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80159b2:	6879      	ldr	r1, [r7, #4]
 80159b4:	2003      	movs	r0, #3
 80159b6:	f7fd fd3f 	bl	8013438 <memp_free>
  }
}
 80159ba:	bf00      	nop
 80159bc:	3708      	adds	r7, #8
 80159be:	46bd      	mov	sp, r7
 80159c0:	bd80      	pop	{r7, pc}
	...

080159c4 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 80159c4:	b580      	push	{r7, lr}
 80159c6:	b082      	sub	sp, #8
 80159c8:	af00      	add	r7, sp, #0
 80159ca:	6078      	str	r0, [r7, #4]
 80159cc:	460b      	mov	r3, r1
 80159ce:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 80159d0:	687b      	ldr	r3, [r7, #4]
 80159d2:	2b00      	cmp	r3, #0
 80159d4:	d107      	bne.n	80159e6 <tcp_setprio+0x22>
 80159d6:	4b07      	ldr	r3, [pc, #28]	@ (80159f4 <tcp_setprio+0x30>)
 80159d8:	f44f 62ce 	mov.w	r2, #1648	@ 0x670
 80159dc:	4906      	ldr	r1, [pc, #24]	@ (80159f8 <tcp_setprio+0x34>)
 80159de:	4807      	ldr	r0, [pc, #28]	@ (80159fc <tcp_setprio+0x38>)
 80159e0:	f008 fc54 	bl	801e28c <iprintf>
 80159e4:	e002      	b.n	80159ec <tcp_setprio+0x28>

  pcb->prio = prio;
 80159e6:	687b      	ldr	r3, [r7, #4]
 80159e8:	78fa      	ldrb	r2, [r7, #3]
 80159ea:	755a      	strb	r2, [r3, #21]
}
 80159ec:	3708      	adds	r7, #8
 80159ee:	46bd      	mov	sp, r7
 80159f0:	bd80      	pop	{r7, pc}
 80159f2:	bf00      	nop
 80159f4:	08021e58 	.word	0x08021e58
 80159f8:	08022390 	.word	0x08022390
 80159fc:	08021e9c 	.word	0x08021e9c

08015a00 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8015a00:	b580      	push	{r7, lr}
 8015a02:	b084      	sub	sp, #16
 8015a04:	af00      	add	r7, sp, #0
 8015a06:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8015a08:	687b      	ldr	r3, [r7, #4]
 8015a0a:	2b00      	cmp	r3, #0
 8015a0c:	d106      	bne.n	8015a1c <tcp_seg_copy+0x1c>
 8015a0e:	4b0f      	ldr	r3, [pc, #60]	@ (8015a4c <tcp_seg_copy+0x4c>)
 8015a10:	f240 6282 	movw	r2, #1666	@ 0x682
 8015a14:	490e      	ldr	r1, [pc, #56]	@ (8015a50 <tcp_seg_copy+0x50>)
 8015a16:	480f      	ldr	r0, [pc, #60]	@ (8015a54 <tcp_seg_copy+0x54>)
 8015a18:	f008 fc38 	bl	801e28c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8015a1c:	2003      	movs	r0, #3
 8015a1e:	f7fd fc95 	bl	801334c <memp_malloc>
 8015a22:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8015a24:	68fb      	ldr	r3, [r7, #12]
 8015a26:	2b00      	cmp	r3, #0
 8015a28:	d101      	bne.n	8015a2e <tcp_seg_copy+0x2e>
    return NULL;
 8015a2a:	2300      	movs	r3, #0
 8015a2c:	e00a      	b.n	8015a44 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8015a2e:	2210      	movs	r2, #16
 8015a30:	6879      	ldr	r1, [r7, #4]
 8015a32:	68f8      	ldr	r0, [r7, #12]
 8015a34:	f008 fddd 	bl	801e5f2 <memcpy>
  pbuf_ref(cseg->p);
 8015a38:	68fb      	ldr	r3, [r7, #12]
 8015a3a:	685b      	ldr	r3, [r3, #4]
 8015a3c:	4618      	mov	r0, r3
 8015a3e:	f7fe fc13 	bl	8014268 <pbuf_ref>
  return cseg;
 8015a42:	68fb      	ldr	r3, [r7, #12]
}
 8015a44:	4618      	mov	r0, r3
 8015a46:	3710      	adds	r7, #16
 8015a48:	46bd      	mov	sp, r7
 8015a4a:	bd80      	pop	{r7, pc}
 8015a4c:	08021e58 	.word	0x08021e58
 8015a50:	080223ac 	.word	0x080223ac
 8015a54:	08021e9c 	.word	0x08021e9c

08015a58 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8015a58:	b580      	push	{r7, lr}
 8015a5a:	b084      	sub	sp, #16
 8015a5c:	af00      	add	r7, sp, #0
 8015a5e:	60f8      	str	r0, [r7, #12]
 8015a60:	60b9      	str	r1, [r7, #8]
 8015a62:	607a      	str	r2, [r7, #4]
 8015a64:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8015a66:	68bb      	ldr	r3, [r7, #8]
 8015a68:	2b00      	cmp	r3, #0
 8015a6a:	d109      	bne.n	8015a80 <tcp_recv_null+0x28>
 8015a6c:	4b12      	ldr	r3, [pc, #72]	@ (8015ab8 <tcp_recv_null+0x60>)
 8015a6e:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8015a72:	4912      	ldr	r1, [pc, #72]	@ (8015abc <tcp_recv_null+0x64>)
 8015a74:	4812      	ldr	r0, [pc, #72]	@ (8015ac0 <tcp_recv_null+0x68>)
 8015a76:	f008 fc09 	bl	801e28c <iprintf>
 8015a7a:	f06f 030f 	mvn.w	r3, #15
 8015a7e:	e016      	b.n	8015aae <tcp_recv_null+0x56>

  if (p != NULL) {
 8015a80:	687b      	ldr	r3, [r7, #4]
 8015a82:	2b00      	cmp	r3, #0
 8015a84:	d009      	beq.n	8015a9a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8015a86:	687b      	ldr	r3, [r7, #4]
 8015a88:	891b      	ldrh	r3, [r3, #8]
 8015a8a:	4619      	mov	r1, r3
 8015a8c:	68b8      	ldr	r0, [r7, #8]
 8015a8e:	f7ff fab3 	bl	8014ff8 <tcp_recved>
    pbuf_free(p);
 8015a92:	6878      	ldr	r0, [r7, #4]
 8015a94:	f7fe fb42 	bl	801411c <pbuf_free>
 8015a98:	e008      	b.n	8015aac <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8015a9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015a9e:	2b00      	cmp	r3, #0
 8015aa0:	d104      	bne.n	8015aac <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8015aa2:	68b8      	ldr	r0, [r7, #8]
 8015aa4:	f7fe ffe4 	bl	8014a70 <tcp_close>
 8015aa8:	4603      	mov	r3, r0
 8015aaa:	e000      	b.n	8015aae <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8015aac:	2300      	movs	r3, #0
}
 8015aae:	4618      	mov	r0, r3
 8015ab0:	3710      	adds	r7, #16
 8015ab2:	46bd      	mov	sp, r7
 8015ab4:	bd80      	pop	{r7, pc}
 8015ab6:	bf00      	nop
 8015ab8:	08021e58 	.word	0x08021e58
 8015abc:	080223c8 	.word	0x080223c8
 8015ac0:	08021e9c 	.word	0x08021e9c

08015ac4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8015ac4:	b580      	push	{r7, lr}
 8015ac6:	b086      	sub	sp, #24
 8015ac8:	af00      	add	r7, sp, #0
 8015aca:	4603      	mov	r3, r0
 8015acc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8015ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015ad2:	2b00      	cmp	r3, #0
 8015ad4:	db01      	blt.n	8015ada <tcp_kill_prio+0x16>
 8015ad6:	79fb      	ldrb	r3, [r7, #7]
 8015ad8:	e000      	b.n	8015adc <tcp_kill_prio+0x18>
 8015ada:	237f      	movs	r3, #127	@ 0x7f
 8015adc:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8015ade:	7afb      	ldrb	r3, [r7, #11]
 8015ae0:	2b00      	cmp	r3, #0
 8015ae2:	d034      	beq.n	8015b4e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8015ae4:	7afb      	ldrb	r3, [r7, #11]
 8015ae6:	3b01      	subs	r3, #1
 8015ae8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8015aea:	2300      	movs	r3, #0
 8015aec:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8015aee:	2300      	movs	r3, #0
 8015af0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015af2:	4b19      	ldr	r3, [pc, #100]	@ (8015b58 <tcp_kill_prio+0x94>)
 8015af4:	681b      	ldr	r3, [r3, #0]
 8015af6:	617b      	str	r3, [r7, #20]
 8015af8:	e01f      	b.n	8015b3a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8015afa:	697b      	ldr	r3, [r7, #20]
 8015afc:	7d5b      	ldrb	r3, [r3, #21]
 8015afe:	7afa      	ldrb	r2, [r7, #11]
 8015b00:	429a      	cmp	r2, r3
 8015b02:	d80c      	bhi.n	8015b1e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8015b04:	697b      	ldr	r3, [r7, #20]
 8015b06:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8015b08:	7afa      	ldrb	r2, [r7, #11]
 8015b0a:	429a      	cmp	r2, r3
 8015b0c:	d112      	bne.n	8015b34 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8015b0e:	4b13      	ldr	r3, [pc, #76]	@ (8015b5c <tcp_kill_prio+0x98>)
 8015b10:	681a      	ldr	r2, [r3, #0]
 8015b12:	697b      	ldr	r3, [r7, #20]
 8015b14:	6a1b      	ldr	r3, [r3, #32]
 8015b16:	1ad3      	subs	r3, r2, r3
 8015b18:	68fa      	ldr	r2, [r7, #12]
 8015b1a:	429a      	cmp	r2, r3
 8015b1c:	d80a      	bhi.n	8015b34 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8015b1e:	4b0f      	ldr	r3, [pc, #60]	@ (8015b5c <tcp_kill_prio+0x98>)
 8015b20:	681a      	ldr	r2, [r3, #0]
 8015b22:	697b      	ldr	r3, [r7, #20]
 8015b24:	6a1b      	ldr	r3, [r3, #32]
 8015b26:	1ad3      	subs	r3, r2, r3
 8015b28:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8015b2a:	697b      	ldr	r3, [r7, #20]
 8015b2c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8015b2e:	697b      	ldr	r3, [r7, #20]
 8015b30:	7d5b      	ldrb	r3, [r3, #21]
 8015b32:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015b34:	697b      	ldr	r3, [r7, #20]
 8015b36:	68db      	ldr	r3, [r3, #12]
 8015b38:	617b      	str	r3, [r7, #20]
 8015b3a:	697b      	ldr	r3, [r7, #20]
 8015b3c:	2b00      	cmp	r3, #0
 8015b3e:	d1dc      	bne.n	8015afa <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8015b40:	693b      	ldr	r3, [r7, #16]
 8015b42:	2b00      	cmp	r3, #0
 8015b44:	d004      	beq.n	8015b50 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8015b46:	6938      	ldr	r0, [r7, #16]
 8015b48:	f7ff f87c 	bl	8014c44 <tcp_abort>
 8015b4c:	e000      	b.n	8015b50 <tcp_kill_prio+0x8c>
    return;
 8015b4e:	bf00      	nop
  }
}
 8015b50:	3718      	adds	r7, #24
 8015b52:	46bd      	mov	sp, r7
 8015b54:	bd80      	pop	{r7, pc}
 8015b56:	bf00      	nop
 8015b58:	2000cacc 	.word	0x2000cacc
 8015b5c:	2000cac0 	.word	0x2000cac0

08015b60 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8015b60:	b580      	push	{r7, lr}
 8015b62:	b086      	sub	sp, #24
 8015b64:	af00      	add	r7, sp, #0
 8015b66:	4603      	mov	r3, r0
 8015b68:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8015b6a:	79fb      	ldrb	r3, [r7, #7]
 8015b6c:	2b08      	cmp	r3, #8
 8015b6e:	d009      	beq.n	8015b84 <tcp_kill_state+0x24>
 8015b70:	79fb      	ldrb	r3, [r7, #7]
 8015b72:	2b09      	cmp	r3, #9
 8015b74:	d006      	beq.n	8015b84 <tcp_kill_state+0x24>
 8015b76:	4b1a      	ldr	r3, [pc, #104]	@ (8015be0 <tcp_kill_state+0x80>)
 8015b78:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8015b7c:	4919      	ldr	r1, [pc, #100]	@ (8015be4 <tcp_kill_state+0x84>)
 8015b7e:	481a      	ldr	r0, [pc, #104]	@ (8015be8 <tcp_kill_state+0x88>)
 8015b80:	f008 fb84 	bl	801e28c <iprintf>

  inactivity = 0;
 8015b84:	2300      	movs	r3, #0
 8015b86:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8015b88:	2300      	movs	r3, #0
 8015b8a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015b8c:	4b17      	ldr	r3, [pc, #92]	@ (8015bec <tcp_kill_state+0x8c>)
 8015b8e:	681b      	ldr	r3, [r3, #0]
 8015b90:	617b      	str	r3, [r7, #20]
 8015b92:	e017      	b.n	8015bc4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8015b94:	697b      	ldr	r3, [r7, #20]
 8015b96:	7d1b      	ldrb	r3, [r3, #20]
 8015b98:	79fa      	ldrb	r2, [r7, #7]
 8015b9a:	429a      	cmp	r2, r3
 8015b9c:	d10f      	bne.n	8015bbe <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8015b9e:	4b14      	ldr	r3, [pc, #80]	@ (8015bf0 <tcp_kill_state+0x90>)
 8015ba0:	681a      	ldr	r2, [r3, #0]
 8015ba2:	697b      	ldr	r3, [r7, #20]
 8015ba4:	6a1b      	ldr	r3, [r3, #32]
 8015ba6:	1ad3      	subs	r3, r2, r3
 8015ba8:	68fa      	ldr	r2, [r7, #12]
 8015baa:	429a      	cmp	r2, r3
 8015bac:	d807      	bhi.n	8015bbe <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8015bae:	4b10      	ldr	r3, [pc, #64]	@ (8015bf0 <tcp_kill_state+0x90>)
 8015bb0:	681a      	ldr	r2, [r3, #0]
 8015bb2:	697b      	ldr	r3, [r7, #20]
 8015bb4:	6a1b      	ldr	r3, [r3, #32]
 8015bb6:	1ad3      	subs	r3, r2, r3
 8015bb8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8015bba:	697b      	ldr	r3, [r7, #20]
 8015bbc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015bbe:	697b      	ldr	r3, [r7, #20]
 8015bc0:	68db      	ldr	r3, [r3, #12]
 8015bc2:	617b      	str	r3, [r7, #20]
 8015bc4:	697b      	ldr	r3, [r7, #20]
 8015bc6:	2b00      	cmp	r3, #0
 8015bc8:	d1e4      	bne.n	8015b94 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8015bca:	693b      	ldr	r3, [r7, #16]
 8015bcc:	2b00      	cmp	r3, #0
 8015bce:	d003      	beq.n	8015bd8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8015bd0:	2100      	movs	r1, #0
 8015bd2:	6938      	ldr	r0, [r7, #16]
 8015bd4:	f7fe ff78 	bl	8014ac8 <tcp_abandon>
  }
}
 8015bd8:	bf00      	nop
 8015bda:	3718      	adds	r7, #24
 8015bdc:	46bd      	mov	sp, r7
 8015bde:	bd80      	pop	{r7, pc}
 8015be0:	08021e58 	.word	0x08021e58
 8015be4:	080223e4 	.word	0x080223e4
 8015be8:	08021e9c 	.word	0x08021e9c
 8015bec:	2000cacc 	.word	0x2000cacc
 8015bf0:	2000cac0 	.word	0x2000cac0

08015bf4 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8015bf4:	b580      	push	{r7, lr}
 8015bf6:	b084      	sub	sp, #16
 8015bf8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8015bfa:	2300      	movs	r3, #0
 8015bfc:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8015bfe:	2300      	movs	r3, #0
 8015c00:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8015c02:	4b12      	ldr	r3, [pc, #72]	@ (8015c4c <tcp_kill_timewait+0x58>)
 8015c04:	681b      	ldr	r3, [r3, #0]
 8015c06:	60fb      	str	r3, [r7, #12]
 8015c08:	e012      	b.n	8015c30 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8015c0a:	4b11      	ldr	r3, [pc, #68]	@ (8015c50 <tcp_kill_timewait+0x5c>)
 8015c0c:	681a      	ldr	r2, [r3, #0]
 8015c0e:	68fb      	ldr	r3, [r7, #12]
 8015c10:	6a1b      	ldr	r3, [r3, #32]
 8015c12:	1ad3      	subs	r3, r2, r3
 8015c14:	687a      	ldr	r2, [r7, #4]
 8015c16:	429a      	cmp	r2, r3
 8015c18:	d807      	bhi.n	8015c2a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8015c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8015c50 <tcp_kill_timewait+0x5c>)
 8015c1c:	681a      	ldr	r2, [r3, #0]
 8015c1e:	68fb      	ldr	r3, [r7, #12]
 8015c20:	6a1b      	ldr	r3, [r3, #32]
 8015c22:	1ad3      	subs	r3, r2, r3
 8015c24:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8015c26:	68fb      	ldr	r3, [r7, #12]
 8015c28:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8015c2a:	68fb      	ldr	r3, [r7, #12]
 8015c2c:	68db      	ldr	r3, [r3, #12]
 8015c2e:	60fb      	str	r3, [r7, #12]
 8015c30:	68fb      	ldr	r3, [r7, #12]
 8015c32:	2b00      	cmp	r3, #0
 8015c34:	d1e9      	bne.n	8015c0a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8015c36:	68bb      	ldr	r3, [r7, #8]
 8015c38:	2b00      	cmp	r3, #0
 8015c3a:	d002      	beq.n	8015c42 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8015c3c:	68b8      	ldr	r0, [r7, #8]
 8015c3e:	f7ff f801 	bl	8014c44 <tcp_abort>
  }
}
 8015c42:	bf00      	nop
 8015c44:	3710      	adds	r7, #16
 8015c46:	46bd      	mov	sp, r7
 8015c48:	bd80      	pop	{r7, pc}
 8015c4a:	bf00      	nop
 8015c4c:	2000cad0 	.word	0x2000cad0
 8015c50:	2000cac0 	.word	0x2000cac0

08015c54 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8015c54:	b580      	push	{r7, lr}
 8015c56:	b082      	sub	sp, #8
 8015c58:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8015c5a:	4b10      	ldr	r3, [pc, #64]	@ (8015c9c <tcp_handle_closepend+0x48>)
 8015c5c:	681b      	ldr	r3, [r3, #0]
 8015c5e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8015c60:	e014      	b.n	8015c8c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8015c62:	687b      	ldr	r3, [r7, #4]
 8015c64:	68db      	ldr	r3, [r3, #12]
 8015c66:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8015c68:	687b      	ldr	r3, [r7, #4]
 8015c6a:	8b5b      	ldrh	r3, [r3, #26]
 8015c6c:	f003 0308 	and.w	r3, r3, #8
 8015c70:	2b00      	cmp	r3, #0
 8015c72:	d009      	beq.n	8015c88 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8015c74:	687b      	ldr	r3, [r7, #4]
 8015c76:	8b5b      	ldrh	r3, [r3, #26]
 8015c78:	f023 0308 	bic.w	r3, r3, #8
 8015c7c:	b29a      	uxth	r2, r3
 8015c7e:	687b      	ldr	r3, [r7, #4]
 8015c80:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8015c82:	6878      	ldr	r0, [r7, #4]
 8015c84:	f7fe fe8a 	bl	801499c <tcp_close_shutdown_fin>
    }
    pcb = next;
 8015c88:	683b      	ldr	r3, [r7, #0]
 8015c8a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8015c8c:	687b      	ldr	r3, [r7, #4]
 8015c8e:	2b00      	cmp	r3, #0
 8015c90:	d1e7      	bne.n	8015c62 <tcp_handle_closepend+0xe>
  }
}
 8015c92:	bf00      	nop
 8015c94:	bf00      	nop
 8015c96:	3708      	adds	r7, #8
 8015c98:	46bd      	mov	sp, r7
 8015c9a:	bd80      	pop	{r7, pc}
 8015c9c:	2000cacc 	.word	0x2000cacc

08015ca0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8015ca0:	b580      	push	{r7, lr}
 8015ca2:	b084      	sub	sp, #16
 8015ca4:	af00      	add	r7, sp, #0
 8015ca6:	4603      	mov	r3, r0
 8015ca8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8015caa:	2001      	movs	r0, #1
 8015cac:	f7fd fb4e 	bl	801334c <memp_malloc>
 8015cb0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8015cb2:	68fb      	ldr	r3, [r7, #12]
 8015cb4:	2b00      	cmp	r3, #0
 8015cb6:	d126      	bne.n	8015d06 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8015cb8:	f7ff ffcc 	bl	8015c54 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8015cbc:	f7ff ff9a 	bl	8015bf4 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8015cc0:	2001      	movs	r0, #1
 8015cc2:	f7fd fb43 	bl	801334c <memp_malloc>
 8015cc6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8015cc8:	68fb      	ldr	r3, [r7, #12]
 8015cca:	2b00      	cmp	r3, #0
 8015ccc:	d11b      	bne.n	8015d06 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8015cce:	2009      	movs	r0, #9
 8015cd0:	f7ff ff46 	bl	8015b60 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8015cd4:	2001      	movs	r0, #1
 8015cd6:	f7fd fb39 	bl	801334c <memp_malloc>
 8015cda:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8015cdc:	68fb      	ldr	r3, [r7, #12]
 8015cde:	2b00      	cmp	r3, #0
 8015ce0:	d111      	bne.n	8015d06 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8015ce2:	2008      	movs	r0, #8
 8015ce4:	f7ff ff3c 	bl	8015b60 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8015ce8:	2001      	movs	r0, #1
 8015cea:	f7fd fb2f 	bl	801334c <memp_malloc>
 8015cee:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8015cf0:	68fb      	ldr	r3, [r7, #12]
 8015cf2:	2b00      	cmp	r3, #0
 8015cf4:	d107      	bne.n	8015d06 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8015cf6:	79fb      	ldrb	r3, [r7, #7]
 8015cf8:	4618      	mov	r0, r3
 8015cfa:	f7ff fee3 	bl	8015ac4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8015cfe:	2001      	movs	r0, #1
 8015d00:	f7fd fb24 	bl	801334c <memp_malloc>
 8015d04:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8015d06:	68fb      	ldr	r3, [r7, #12]
 8015d08:	2b00      	cmp	r3, #0
 8015d0a:	d03f      	beq.n	8015d8c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8015d0c:	229c      	movs	r2, #156	@ 0x9c
 8015d0e:	2100      	movs	r1, #0
 8015d10:	68f8      	ldr	r0, [r7, #12]
 8015d12:	f008 fb70 	bl	801e3f6 <memset>
    pcb->prio = prio;
 8015d16:	68fb      	ldr	r3, [r7, #12]
 8015d18:	79fa      	ldrb	r2, [r7, #7]
 8015d1a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8015d1c:	68fb      	ldr	r3, [r7, #12]
 8015d1e:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8015d22:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8015d26:	68fb      	ldr	r3, [r7, #12]
 8015d28:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8015d2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8015d2e:	68fb      	ldr	r3, [r7, #12]
 8015d30:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8015d32:	68fb      	ldr	r3, [r7, #12]
 8015d34:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8015d36:	68fb      	ldr	r3, [r7, #12]
 8015d38:	22ff      	movs	r2, #255	@ 0xff
 8015d3a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8015d3c:	68fb      	ldr	r3, [r7, #12]
 8015d3e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8015d42:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8015d44:	68fb      	ldr	r3, [r7, #12]
 8015d46:	2206      	movs	r2, #6
 8015d48:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8015d4c:	68fb      	ldr	r3, [r7, #12]
 8015d4e:	2206      	movs	r2, #6
 8015d50:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8015d52:	68fb      	ldr	r3, [r7, #12]
 8015d54:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015d58:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 8015d5a:	68fb      	ldr	r3, [r7, #12]
 8015d5c:	2201      	movs	r2, #1
 8015d5e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8015d62:	4b0d      	ldr	r3, [pc, #52]	@ (8015d98 <tcp_alloc+0xf8>)
 8015d64:	681a      	ldr	r2, [r3, #0]
 8015d66:	68fb      	ldr	r3, [r7, #12]
 8015d68:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8015d6a:	4b0c      	ldr	r3, [pc, #48]	@ (8015d9c <tcp_alloc+0xfc>)
 8015d6c:	781a      	ldrb	r2, [r3, #0]
 8015d6e:	68fb      	ldr	r3, [r7, #12]
 8015d70:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8015d72:	68fb      	ldr	r3, [r7, #12]
 8015d74:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8015d78:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8015d7c:	68fb      	ldr	r3, [r7, #12]
 8015d7e:	4a08      	ldr	r2, [pc, #32]	@ (8015da0 <tcp_alloc+0x100>)
 8015d80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8015d84:	68fb      	ldr	r3, [r7, #12]
 8015d86:	4a07      	ldr	r2, [pc, #28]	@ (8015da4 <tcp_alloc+0x104>)
 8015d88:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8015d8c:	68fb      	ldr	r3, [r7, #12]
}
 8015d8e:	4618      	mov	r0, r3
 8015d90:	3710      	adds	r7, #16
 8015d92:	46bd      	mov	sp, r7
 8015d94:	bd80      	pop	{r7, pc}
 8015d96:	bf00      	nop
 8015d98:	2000cac0 	.word	0x2000cac0
 8015d9c:	2000cad6 	.word	0x2000cad6
 8015da0:	08015a59 	.word	0x08015a59
 8015da4:	006ddd00 	.word	0x006ddd00

08015da8 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 8015da8:	b580      	push	{r7, lr}
 8015daa:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 8015dac:	2040      	movs	r0, #64	@ 0x40
 8015dae:	f7ff ff77 	bl	8015ca0 <tcp_alloc>
 8015db2:	4603      	mov	r3, r0
}
 8015db4:	4618      	mov	r0, r3
 8015db6:	bd80      	pop	{r7, pc}

08015db8 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8015db8:	b580      	push	{r7, lr}
 8015dba:	b082      	sub	sp, #8
 8015dbc:	af00      	add	r7, sp, #0
 8015dbe:	6078      	str	r0, [r7, #4]
 8015dc0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8015dc2:	687b      	ldr	r3, [r7, #4]
 8015dc4:	2b00      	cmp	r3, #0
 8015dc6:	d00e      	beq.n	8015de6 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8015dc8:	687b      	ldr	r3, [r7, #4]
 8015dca:	7d1b      	ldrb	r3, [r3, #20]
 8015dcc:	2b01      	cmp	r3, #1
 8015dce:	d106      	bne.n	8015dde <tcp_recv+0x26>
 8015dd0:	4b07      	ldr	r3, [pc, #28]	@ (8015df0 <tcp_recv+0x38>)
 8015dd2:	f240 72df 	movw	r2, #2015	@ 0x7df
 8015dd6:	4907      	ldr	r1, [pc, #28]	@ (8015df4 <tcp_recv+0x3c>)
 8015dd8:	4807      	ldr	r0, [pc, #28]	@ (8015df8 <tcp_recv+0x40>)
 8015dda:	f008 fa57 	bl	801e28c <iprintf>
    pcb->recv = recv;
 8015dde:	687b      	ldr	r3, [r7, #4]
 8015de0:	683a      	ldr	r2, [r7, #0]
 8015de2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 8015de6:	bf00      	nop
 8015de8:	3708      	adds	r7, #8
 8015dea:	46bd      	mov	sp, r7
 8015dec:	bd80      	pop	{r7, pc}
 8015dee:	bf00      	nop
 8015df0:	08021e58 	.word	0x08021e58
 8015df4:	080223f4 	.word	0x080223f4
 8015df8:	08021e9c 	.word	0x08021e9c

08015dfc <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8015dfc:	b580      	push	{r7, lr}
 8015dfe:	b082      	sub	sp, #8
 8015e00:	af00      	add	r7, sp, #0
 8015e02:	6078      	str	r0, [r7, #4]
 8015e04:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8015e06:	687b      	ldr	r3, [r7, #4]
 8015e08:	2b00      	cmp	r3, #0
 8015e0a:	d00e      	beq.n	8015e2a <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8015e0c:	687b      	ldr	r3, [r7, #4]
 8015e0e:	7d1b      	ldrb	r3, [r3, #20]
 8015e10:	2b01      	cmp	r3, #1
 8015e12:	d106      	bne.n	8015e22 <tcp_sent+0x26>
 8015e14:	4b07      	ldr	r3, [pc, #28]	@ (8015e34 <tcp_sent+0x38>)
 8015e16:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 8015e1a:	4907      	ldr	r1, [pc, #28]	@ (8015e38 <tcp_sent+0x3c>)
 8015e1c:	4807      	ldr	r0, [pc, #28]	@ (8015e3c <tcp_sent+0x40>)
 8015e1e:	f008 fa35 	bl	801e28c <iprintf>
    pcb->sent = sent;
 8015e22:	687b      	ldr	r3, [r7, #4]
 8015e24:	683a      	ldr	r2, [r7, #0]
 8015e26:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 8015e2a:	bf00      	nop
 8015e2c:	3708      	adds	r7, #8
 8015e2e:	46bd      	mov	sp, r7
 8015e30:	bd80      	pop	{r7, pc}
 8015e32:	bf00      	nop
 8015e34:	08021e58 	.word	0x08021e58
 8015e38:	0802241c 	.word	0x0802241c
 8015e3c:	08021e9c 	.word	0x08021e9c

08015e40 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8015e40:	b580      	push	{r7, lr}
 8015e42:	b082      	sub	sp, #8
 8015e44:	af00      	add	r7, sp, #0
 8015e46:	6078      	str	r0, [r7, #4]
 8015e48:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8015e4a:	687b      	ldr	r3, [r7, #4]
 8015e4c:	2b00      	cmp	r3, #0
 8015e4e:	d00e      	beq.n	8015e6e <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8015e50:	687b      	ldr	r3, [r7, #4]
 8015e52:	7d1b      	ldrb	r3, [r3, #20]
 8015e54:	2b01      	cmp	r3, #1
 8015e56:	d106      	bne.n	8015e66 <tcp_err+0x26>
 8015e58:	4b07      	ldr	r3, [pc, #28]	@ (8015e78 <tcp_err+0x38>)
 8015e5a:	f640 020d 	movw	r2, #2061	@ 0x80d
 8015e5e:	4907      	ldr	r1, [pc, #28]	@ (8015e7c <tcp_err+0x3c>)
 8015e60:	4807      	ldr	r0, [pc, #28]	@ (8015e80 <tcp_err+0x40>)
 8015e62:	f008 fa13 	bl	801e28c <iprintf>
    pcb->errf = err;
 8015e66:	687b      	ldr	r3, [r7, #4]
 8015e68:	683a      	ldr	r2, [r7, #0]
 8015e6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 8015e6e:	bf00      	nop
 8015e70:	3708      	adds	r7, #8
 8015e72:	46bd      	mov	sp, r7
 8015e74:	bd80      	pop	{r7, pc}
 8015e76:	bf00      	nop
 8015e78:	08021e58 	.word	0x08021e58
 8015e7c:	08022444 	.word	0x08022444
 8015e80:	08021e9c 	.word	0x08021e9c

08015e84 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8015e84:	b480      	push	{r7}
 8015e86:	b085      	sub	sp, #20
 8015e88:	af00      	add	r7, sp, #0
 8015e8a:	6078      	str	r0, [r7, #4]
 8015e8c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8015e8e:	687b      	ldr	r3, [r7, #4]
 8015e90:	2b00      	cmp	r3, #0
 8015e92:	d008      	beq.n	8015ea6 <tcp_accept+0x22>
 8015e94:	687b      	ldr	r3, [r7, #4]
 8015e96:	7d1b      	ldrb	r3, [r3, #20]
 8015e98:	2b01      	cmp	r3, #1
 8015e9a:	d104      	bne.n	8015ea6 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8015ea0:	68fb      	ldr	r3, [r7, #12]
 8015ea2:	683a      	ldr	r2, [r7, #0]
 8015ea4:	619a      	str	r2, [r3, #24]
  }
}
 8015ea6:	bf00      	nop
 8015ea8:	3714      	adds	r7, #20
 8015eaa:	46bd      	mov	sp, r7
 8015eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015eb0:	4770      	bx	lr
	...

08015eb4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8015eb4:	b580      	push	{r7, lr}
 8015eb6:	b082      	sub	sp, #8
 8015eb8:	af00      	add	r7, sp, #0
 8015eba:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8015ebc:	687b      	ldr	r3, [r7, #4]
 8015ebe:	2b00      	cmp	r3, #0
 8015ec0:	d107      	bne.n	8015ed2 <tcp_pcb_purge+0x1e>
 8015ec2:	4b21      	ldr	r3, [pc, #132]	@ (8015f48 <tcp_pcb_purge+0x94>)
 8015ec4:	f640 0251 	movw	r2, #2129	@ 0x851
 8015ec8:	4920      	ldr	r1, [pc, #128]	@ (8015f4c <tcp_pcb_purge+0x98>)
 8015eca:	4821      	ldr	r0, [pc, #132]	@ (8015f50 <tcp_pcb_purge+0x9c>)
 8015ecc:	f008 f9de 	bl	801e28c <iprintf>
 8015ed0:	e037      	b.n	8015f42 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8015ed2:	687b      	ldr	r3, [r7, #4]
 8015ed4:	7d1b      	ldrb	r3, [r3, #20]
 8015ed6:	2b00      	cmp	r3, #0
 8015ed8:	d033      	beq.n	8015f42 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8015eda:	687b      	ldr	r3, [r7, #4]
 8015edc:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8015ede:	2b0a      	cmp	r3, #10
 8015ee0:	d02f      	beq.n	8015f42 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8015ee2:	687b      	ldr	r3, [r7, #4]
 8015ee4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8015ee6:	2b01      	cmp	r3, #1
 8015ee8:	d02b      	beq.n	8015f42 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8015eea:	687b      	ldr	r3, [r7, #4]
 8015eec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015eee:	2b00      	cmp	r3, #0
 8015ef0:	d007      	beq.n	8015f02 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8015ef2:	687b      	ldr	r3, [r7, #4]
 8015ef4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015ef6:	4618      	mov	r0, r3
 8015ef8:	f7fe f910 	bl	801411c <pbuf_free>
      pcb->refused_data = NULL;
 8015efc:	687b      	ldr	r3, [r7, #4]
 8015efe:	2200      	movs	r2, #0
 8015f00:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8015f02:	687b      	ldr	r3, [r7, #4]
 8015f04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015f06:	2b00      	cmp	r3, #0
 8015f08:	d002      	beq.n	8015f10 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8015f0a:	6878      	ldr	r0, [r7, #4]
 8015f0c:	f000 f986 	bl	801621c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8015f10:	687b      	ldr	r3, [r7, #4]
 8015f12:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015f16:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8015f18:	687b      	ldr	r3, [r7, #4]
 8015f1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015f1c:	4618      	mov	r0, r3
 8015f1e:	f7ff fd23 	bl	8015968 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8015f22:	687b      	ldr	r3, [r7, #4]
 8015f24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015f26:	4618      	mov	r0, r3
 8015f28:	f7ff fd1e 	bl	8015968 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8015f2c:	687b      	ldr	r3, [r7, #4]
 8015f2e:	2200      	movs	r2, #0
 8015f30:	66da      	str	r2, [r3, #108]	@ 0x6c
 8015f32:	687b      	ldr	r3, [r7, #4]
 8015f34:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8015f36:	687b      	ldr	r3, [r7, #4]
 8015f38:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8015f3a:	687b      	ldr	r3, [r7, #4]
 8015f3c:	2200      	movs	r2, #0
 8015f3e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8015f42:	3708      	adds	r7, #8
 8015f44:	46bd      	mov	sp, r7
 8015f46:	bd80      	pop	{r7, pc}
 8015f48:	08021e58 	.word	0x08021e58
 8015f4c:	080224a4 	.word	0x080224a4
 8015f50:	08021e9c 	.word	0x08021e9c

08015f54 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8015f54:	b580      	push	{r7, lr}
 8015f56:	b084      	sub	sp, #16
 8015f58:	af00      	add	r7, sp, #0
 8015f5a:	6078      	str	r0, [r7, #4]
 8015f5c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8015f5e:	683b      	ldr	r3, [r7, #0]
 8015f60:	2b00      	cmp	r3, #0
 8015f62:	d106      	bne.n	8015f72 <tcp_pcb_remove+0x1e>
 8015f64:	4b3e      	ldr	r3, [pc, #248]	@ (8016060 <tcp_pcb_remove+0x10c>)
 8015f66:	f640 0283 	movw	r2, #2179	@ 0x883
 8015f6a:	493e      	ldr	r1, [pc, #248]	@ (8016064 <tcp_pcb_remove+0x110>)
 8015f6c:	483e      	ldr	r0, [pc, #248]	@ (8016068 <tcp_pcb_remove+0x114>)
 8015f6e:	f008 f98d 	bl	801e28c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8015f72:	687b      	ldr	r3, [r7, #4]
 8015f74:	2b00      	cmp	r3, #0
 8015f76:	d106      	bne.n	8015f86 <tcp_pcb_remove+0x32>
 8015f78:	4b39      	ldr	r3, [pc, #228]	@ (8016060 <tcp_pcb_remove+0x10c>)
 8015f7a:	f640 0284 	movw	r2, #2180	@ 0x884
 8015f7e:	493b      	ldr	r1, [pc, #236]	@ (801606c <tcp_pcb_remove+0x118>)
 8015f80:	4839      	ldr	r0, [pc, #228]	@ (8016068 <tcp_pcb_remove+0x114>)
 8015f82:	f008 f983 	bl	801e28c <iprintf>

  TCP_RMV(pcblist, pcb);
 8015f86:	687b      	ldr	r3, [r7, #4]
 8015f88:	681b      	ldr	r3, [r3, #0]
 8015f8a:	683a      	ldr	r2, [r7, #0]
 8015f8c:	429a      	cmp	r2, r3
 8015f8e:	d105      	bne.n	8015f9c <tcp_pcb_remove+0x48>
 8015f90:	687b      	ldr	r3, [r7, #4]
 8015f92:	681b      	ldr	r3, [r3, #0]
 8015f94:	68da      	ldr	r2, [r3, #12]
 8015f96:	687b      	ldr	r3, [r7, #4]
 8015f98:	601a      	str	r2, [r3, #0]
 8015f9a:	e013      	b.n	8015fc4 <tcp_pcb_remove+0x70>
 8015f9c:	687b      	ldr	r3, [r7, #4]
 8015f9e:	681b      	ldr	r3, [r3, #0]
 8015fa0:	60fb      	str	r3, [r7, #12]
 8015fa2:	e00c      	b.n	8015fbe <tcp_pcb_remove+0x6a>
 8015fa4:	68fb      	ldr	r3, [r7, #12]
 8015fa6:	68db      	ldr	r3, [r3, #12]
 8015fa8:	683a      	ldr	r2, [r7, #0]
 8015faa:	429a      	cmp	r2, r3
 8015fac:	d104      	bne.n	8015fb8 <tcp_pcb_remove+0x64>
 8015fae:	683b      	ldr	r3, [r7, #0]
 8015fb0:	68da      	ldr	r2, [r3, #12]
 8015fb2:	68fb      	ldr	r3, [r7, #12]
 8015fb4:	60da      	str	r2, [r3, #12]
 8015fb6:	e005      	b.n	8015fc4 <tcp_pcb_remove+0x70>
 8015fb8:	68fb      	ldr	r3, [r7, #12]
 8015fba:	68db      	ldr	r3, [r3, #12]
 8015fbc:	60fb      	str	r3, [r7, #12]
 8015fbe:	68fb      	ldr	r3, [r7, #12]
 8015fc0:	2b00      	cmp	r3, #0
 8015fc2:	d1ef      	bne.n	8015fa4 <tcp_pcb_remove+0x50>
 8015fc4:	683b      	ldr	r3, [r7, #0]
 8015fc6:	2200      	movs	r2, #0
 8015fc8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8015fca:	6838      	ldr	r0, [r7, #0]
 8015fcc:	f7ff ff72 	bl	8015eb4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8015fd0:	683b      	ldr	r3, [r7, #0]
 8015fd2:	7d1b      	ldrb	r3, [r3, #20]
 8015fd4:	2b0a      	cmp	r3, #10
 8015fd6:	d013      	beq.n	8016000 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8015fd8:	683b      	ldr	r3, [r7, #0]
 8015fda:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8015fdc:	2b01      	cmp	r3, #1
 8015fde:	d00f      	beq.n	8016000 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8015fe0:	683b      	ldr	r3, [r7, #0]
 8015fe2:	8b5b      	ldrh	r3, [r3, #26]
 8015fe4:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8015fe8:	2b00      	cmp	r3, #0
 8015fea:	d009      	beq.n	8016000 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8015fec:	683b      	ldr	r3, [r7, #0]
 8015fee:	8b5b      	ldrh	r3, [r3, #26]
 8015ff0:	f043 0302 	orr.w	r3, r3, #2
 8015ff4:	b29a      	uxth	r2, r3
 8015ff6:	683b      	ldr	r3, [r7, #0]
 8015ff8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8015ffa:	6838      	ldr	r0, [r7, #0]
 8015ffc:	f003 fbc0 	bl	8019780 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8016000:	683b      	ldr	r3, [r7, #0]
 8016002:	7d1b      	ldrb	r3, [r3, #20]
 8016004:	2b01      	cmp	r3, #1
 8016006:	d020      	beq.n	801604a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8016008:	683b      	ldr	r3, [r7, #0]
 801600a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801600c:	2b00      	cmp	r3, #0
 801600e:	d006      	beq.n	801601e <tcp_pcb_remove+0xca>
 8016010:	4b13      	ldr	r3, [pc, #76]	@ (8016060 <tcp_pcb_remove+0x10c>)
 8016012:	f640 0293 	movw	r2, #2195	@ 0x893
 8016016:	4916      	ldr	r1, [pc, #88]	@ (8016070 <tcp_pcb_remove+0x11c>)
 8016018:	4813      	ldr	r0, [pc, #76]	@ (8016068 <tcp_pcb_remove+0x114>)
 801601a:	f008 f937 	bl	801e28c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801601e:	683b      	ldr	r3, [r7, #0]
 8016020:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016022:	2b00      	cmp	r3, #0
 8016024:	d006      	beq.n	8016034 <tcp_pcb_remove+0xe0>
 8016026:	4b0e      	ldr	r3, [pc, #56]	@ (8016060 <tcp_pcb_remove+0x10c>)
 8016028:	f640 0294 	movw	r2, #2196	@ 0x894
 801602c:	4911      	ldr	r1, [pc, #68]	@ (8016074 <tcp_pcb_remove+0x120>)
 801602e:	480e      	ldr	r0, [pc, #56]	@ (8016068 <tcp_pcb_remove+0x114>)
 8016030:	f008 f92c 	bl	801e28c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8016034:	683b      	ldr	r3, [r7, #0]
 8016036:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016038:	2b00      	cmp	r3, #0
 801603a:	d006      	beq.n	801604a <tcp_pcb_remove+0xf6>
 801603c:	4b08      	ldr	r3, [pc, #32]	@ (8016060 <tcp_pcb_remove+0x10c>)
 801603e:	f640 0296 	movw	r2, #2198	@ 0x896
 8016042:	490d      	ldr	r1, [pc, #52]	@ (8016078 <tcp_pcb_remove+0x124>)
 8016044:	4808      	ldr	r0, [pc, #32]	@ (8016068 <tcp_pcb_remove+0x114>)
 8016046:	f008 f921 	bl	801e28c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801604a:	683b      	ldr	r3, [r7, #0]
 801604c:	2200      	movs	r2, #0
 801604e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8016050:	683b      	ldr	r3, [r7, #0]
 8016052:	2200      	movs	r2, #0
 8016054:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8016056:	bf00      	nop
 8016058:	3710      	adds	r7, #16
 801605a:	46bd      	mov	sp, r7
 801605c:	bd80      	pop	{r7, pc}
 801605e:	bf00      	nop
 8016060:	08021e58 	.word	0x08021e58
 8016064:	080224c0 	.word	0x080224c0
 8016068:	08021e9c 	.word	0x08021e9c
 801606c:	080224dc 	.word	0x080224dc
 8016070:	080224fc 	.word	0x080224fc
 8016074:	08022514 	.word	0x08022514
 8016078:	08022530 	.word	0x08022530

0801607c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 801607c:	b580      	push	{r7, lr}
 801607e:	b082      	sub	sp, #8
 8016080:	af00      	add	r7, sp, #0
 8016082:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8016084:	687b      	ldr	r3, [r7, #4]
 8016086:	2b00      	cmp	r3, #0
 8016088:	d106      	bne.n	8016098 <tcp_next_iss+0x1c>
 801608a:	4b0a      	ldr	r3, [pc, #40]	@ (80160b4 <tcp_next_iss+0x38>)
 801608c:	f640 02af 	movw	r2, #2223	@ 0x8af
 8016090:	4909      	ldr	r1, [pc, #36]	@ (80160b8 <tcp_next_iss+0x3c>)
 8016092:	480a      	ldr	r0, [pc, #40]	@ (80160bc <tcp_next_iss+0x40>)
 8016094:	f008 f8fa 	bl	801e28c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8016098:	4b09      	ldr	r3, [pc, #36]	@ (80160c0 <tcp_next_iss+0x44>)
 801609a:	681a      	ldr	r2, [r3, #0]
 801609c:	4b09      	ldr	r3, [pc, #36]	@ (80160c4 <tcp_next_iss+0x48>)
 801609e:	681b      	ldr	r3, [r3, #0]
 80160a0:	4413      	add	r3, r2
 80160a2:	4a07      	ldr	r2, [pc, #28]	@ (80160c0 <tcp_next_iss+0x44>)
 80160a4:	6013      	str	r3, [r2, #0]
  return iss;
 80160a6:	4b06      	ldr	r3, [pc, #24]	@ (80160c0 <tcp_next_iss+0x44>)
 80160a8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80160aa:	4618      	mov	r0, r3
 80160ac:	3708      	adds	r7, #8
 80160ae:	46bd      	mov	sp, r7
 80160b0:	bd80      	pop	{r7, pc}
 80160b2:	bf00      	nop
 80160b4:	08021e58 	.word	0x08021e58
 80160b8:	08022548 	.word	0x08022548
 80160bc:	08021e9c 	.word	0x08021e9c
 80160c0:	200000a8 	.word	0x200000a8
 80160c4:	2000cac0 	.word	0x2000cac0

080160c8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80160c8:	b580      	push	{r7, lr}
 80160ca:	b086      	sub	sp, #24
 80160cc:	af00      	add	r7, sp, #0
 80160ce:	4603      	mov	r3, r0
 80160d0:	60b9      	str	r1, [r7, #8]
 80160d2:	607a      	str	r2, [r7, #4]
 80160d4:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80160d6:	687b      	ldr	r3, [r7, #4]
 80160d8:	2b00      	cmp	r3, #0
 80160da:	d106      	bne.n	80160ea <tcp_eff_send_mss_netif+0x22>
 80160dc:	4b14      	ldr	r3, [pc, #80]	@ (8016130 <tcp_eff_send_mss_netif+0x68>)
 80160de:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 80160e2:	4914      	ldr	r1, [pc, #80]	@ (8016134 <tcp_eff_send_mss_netif+0x6c>)
 80160e4:	4814      	ldr	r0, [pc, #80]	@ (8016138 <tcp_eff_send_mss_netif+0x70>)
 80160e6:	f008 f8d1 	bl	801e28c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80160ea:	68bb      	ldr	r3, [r7, #8]
 80160ec:	2b00      	cmp	r3, #0
 80160ee:	d101      	bne.n	80160f4 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80160f0:	89fb      	ldrh	r3, [r7, #14]
 80160f2:	e019      	b.n	8016128 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80160f4:	68bb      	ldr	r3, [r7, #8]
 80160f6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80160f8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80160fa:	8afb      	ldrh	r3, [r7, #22]
 80160fc:	2b00      	cmp	r3, #0
 80160fe:	d012      	beq.n	8016126 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8016100:	2328      	movs	r3, #40	@ 0x28
 8016102:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8016104:	8afa      	ldrh	r2, [r7, #22]
 8016106:	8abb      	ldrh	r3, [r7, #20]
 8016108:	429a      	cmp	r2, r3
 801610a:	d904      	bls.n	8016116 <tcp_eff_send_mss_netif+0x4e>
 801610c:	8afa      	ldrh	r2, [r7, #22]
 801610e:	8abb      	ldrh	r3, [r7, #20]
 8016110:	1ad3      	subs	r3, r2, r3
 8016112:	b29b      	uxth	r3, r3
 8016114:	e000      	b.n	8016118 <tcp_eff_send_mss_netif+0x50>
 8016116:	2300      	movs	r3, #0
 8016118:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801611a:	8a7a      	ldrh	r2, [r7, #18]
 801611c:	89fb      	ldrh	r3, [r7, #14]
 801611e:	4293      	cmp	r3, r2
 8016120:	bf28      	it	cs
 8016122:	4613      	movcs	r3, r2
 8016124:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8016126:	89fb      	ldrh	r3, [r7, #14]
}
 8016128:	4618      	mov	r0, r3
 801612a:	3718      	adds	r7, #24
 801612c:	46bd      	mov	sp, r7
 801612e:	bd80      	pop	{r7, pc}
 8016130:	08021e58 	.word	0x08021e58
 8016134:	08022564 	.word	0x08022564
 8016138:	08021e9c 	.word	0x08021e9c

0801613c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 801613c:	b580      	push	{r7, lr}
 801613e:	b084      	sub	sp, #16
 8016140:	af00      	add	r7, sp, #0
 8016142:	6078      	str	r0, [r7, #4]
 8016144:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8016146:	683b      	ldr	r3, [r7, #0]
 8016148:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801614a:	687b      	ldr	r3, [r7, #4]
 801614c:	2b00      	cmp	r3, #0
 801614e:	d119      	bne.n	8016184 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8016150:	4b10      	ldr	r3, [pc, #64]	@ (8016194 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8016152:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 8016156:	4910      	ldr	r1, [pc, #64]	@ (8016198 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8016158:	4810      	ldr	r0, [pc, #64]	@ (801619c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801615a:	f008 f897 	bl	801e28c <iprintf>

  while (pcb != NULL) {
 801615e:	e011      	b.n	8016184 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8016160:	68fb      	ldr	r3, [r7, #12]
 8016162:	681a      	ldr	r2, [r3, #0]
 8016164:	687b      	ldr	r3, [r7, #4]
 8016166:	681b      	ldr	r3, [r3, #0]
 8016168:	429a      	cmp	r2, r3
 801616a:	d108      	bne.n	801617e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 801616c:	68fb      	ldr	r3, [r7, #12]
 801616e:	68db      	ldr	r3, [r3, #12]
 8016170:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8016172:	68f8      	ldr	r0, [r7, #12]
 8016174:	f7fe fd66 	bl	8014c44 <tcp_abort>
      pcb = next;
 8016178:	68bb      	ldr	r3, [r7, #8]
 801617a:	60fb      	str	r3, [r7, #12]
 801617c:	e002      	b.n	8016184 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 801617e:	68fb      	ldr	r3, [r7, #12]
 8016180:	68db      	ldr	r3, [r3, #12]
 8016182:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8016184:	68fb      	ldr	r3, [r7, #12]
 8016186:	2b00      	cmp	r3, #0
 8016188:	d1ea      	bne.n	8016160 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801618a:	bf00      	nop
 801618c:	bf00      	nop
 801618e:	3710      	adds	r7, #16
 8016190:	46bd      	mov	sp, r7
 8016192:	bd80      	pop	{r7, pc}
 8016194:	08021e58 	.word	0x08021e58
 8016198:	0802258c 	.word	0x0802258c
 801619c:	08021e9c 	.word	0x08021e9c

080161a0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80161a0:	b580      	push	{r7, lr}
 80161a2:	b084      	sub	sp, #16
 80161a4:	af00      	add	r7, sp, #0
 80161a6:	6078      	str	r0, [r7, #4]
 80161a8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80161aa:	687b      	ldr	r3, [r7, #4]
 80161ac:	2b00      	cmp	r3, #0
 80161ae:	d02a      	beq.n	8016206 <tcp_netif_ip_addr_changed+0x66>
 80161b0:	687b      	ldr	r3, [r7, #4]
 80161b2:	681b      	ldr	r3, [r3, #0]
 80161b4:	2b00      	cmp	r3, #0
 80161b6:	d026      	beq.n	8016206 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80161b8:	4b15      	ldr	r3, [pc, #84]	@ (8016210 <tcp_netif_ip_addr_changed+0x70>)
 80161ba:	681b      	ldr	r3, [r3, #0]
 80161bc:	4619      	mov	r1, r3
 80161be:	6878      	ldr	r0, [r7, #4]
 80161c0:	f7ff ffbc 	bl	801613c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80161c4:	4b13      	ldr	r3, [pc, #76]	@ (8016214 <tcp_netif_ip_addr_changed+0x74>)
 80161c6:	681b      	ldr	r3, [r3, #0]
 80161c8:	4619      	mov	r1, r3
 80161ca:	6878      	ldr	r0, [r7, #4]
 80161cc:	f7ff ffb6 	bl	801613c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80161d0:	683b      	ldr	r3, [r7, #0]
 80161d2:	2b00      	cmp	r3, #0
 80161d4:	d017      	beq.n	8016206 <tcp_netif_ip_addr_changed+0x66>
 80161d6:	683b      	ldr	r3, [r7, #0]
 80161d8:	681b      	ldr	r3, [r3, #0]
 80161da:	2b00      	cmp	r3, #0
 80161dc:	d013      	beq.n	8016206 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80161de:	4b0e      	ldr	r3, [pc, #56]	@ (8016218 <tcp_netif_ip_addr_changed+0x78>)
 80161e0:	681b      	ldr	r3, [r3, #0]
 80161e2:	60fb      	str	r3, [r7, #12]
 80161e4:	e00c      	b.n	8016200 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80161e6:	68fb      	ldr	r3, [r7, #12]
 80161e8:	681a      	ldr	r2, [r3, #0]
 80161ea:	687b      	ldr	r3, [r7, #4]
 80161ec:	681b      	ldr	r3, [r3, #0]
 80161ee:	429a      	cmp	r2, r3
 80161f0:	d103      	bne.n	80161fa <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80161f2:	683b      	ldr	r3, [r7, #0]
 80161f4:	681a      	ldr	r2, [r3, #0]
 80161f6:	68fb      	ldr	r3, [r7, #12]
 80161f8:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80161fa:	68fb      	ldr	r3, [r7, #12]
 80161fc:	68db      	ldr	r3, [r3, #12]
 80161fe:	60fb      	str	r3, [r7, #12]
 8016200:	68fb      	ldr	r3, [r7, #12]
 8016202:	2b00      	cmp	r3, #0
 8016204:	d1ef      	bne.n	80161e6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8016206:	bf00      	nop
 8016208:	3710      	adds	r7, #16
 801620a:	46bd      	mov	sp, r7
 801620c:	bd80      	pop	{r7, pc}
 801620e:	bf00      	nop
 8016210:	2000cacc 	.word	0x2000cacc
 8016214:	2000cac4 	.word	0x2000cac4
 8016218:	2000cac8 	.word	0x2000cac8

0801621c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 801621c:	b580      	push	{r7, lr}
 801621e:	b082      	sub	sp, #8
 8016220:	af00      	add	r7, sp, #0
 8016222:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8016224:	687b      	ldr	r3, [r7, #4]
 8016226:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016228:	2b00      	cmp	r3, #0
 801622a:	d007      	beq.n	801623c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 801622c:	687b      	ldr	r3, [r7, #4]
 801622e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016230:	4618      	mov	r0, r3
 8016232:	f7ff fb99 	bl	8015968 <tcp_segs_free>
    pcb->ooseq = NULL;
 8016236:	687b      	ldr	r3, [r7, #4]
 8016238:	2200      	movs	r2, #0
 801623a:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 801623c:	bf00      	nop
 801623e:	3708      	adds	r7, #8
 8016240:	46bd      	mov	sp, r7
 8016242:	bd80      	pop	{r7, pc}

08016244 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8016244:	b590      	push	{r4, r7, lr}
 8016246:	b08d      	sub	sp, #52	@ 0x34
 8016248:	af04      	add	r7, sp, #16
 801624a:	6078      	str	r0, [r7, #4]
 801624c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801624e:	687b      	ldr	r3, [r7, #4]
 8016250:	2b00      	cmp	r3, #0
 8016252:	d105      	bne.n	8016260 <tcp_input+0x1c>
 8016254:	4b9b      	ldr	r3, [pc, #620]	@ (80164c4 <tcp_input+0x280>)
 8016256:	2283      	movs	r2, #131	@ 0x83
 8016258:	499b      	ldr	r1, [pc, #620]	@ (80164c8 <tcp_input+0x284>)
 801625a:	489c      	ldr	r0, [pc, #624]	@ (80164cc <tcp_input+0x288>)
 801625c:	f008 f816 	bl	801e28c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8016260:	687b      	ldr	r3, [r7, #4]
 8016262:	685b      	ldr	r3, [r3, #4]
 8016264:	4a9a      	ldr	r2, [pc, #616]	@ (80164d0 <tcp_input+0x28c>)
 8016266:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8016268:	687b      	ldr	r3, [r7, #4]
 801626a:	895b      	ldrh	r3, [r3, #10]
 801626c:	2b13      	cmp	r3, #19
 801626e:	f240 83d1 	bls.w	8016a14 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8016272:	4b98      	ldr	r3, [pc, #608]	@ (80164d4 <tcp_input+0x290>)
 8016274:	695b      	ldr	r3, [r3, #20]
 8016276:	4a97      	ldr	r2, [pc, #604]	@ (80164d4 <tcp_input+0x290>)
 8016278:	6812      	ldr	r2, [r2, #0]
 801627a:	4611      	mov	r1, r2
 801627c:	4618      	mov	r0, r3
 801627e:	f006 f867 	bl	801c350 <ip4_addr_isbroadcast_u32>
 8016282:	4603      	mov	r3, r0
 8016284:	2b00      	cmp	r3, #0
 8016286:	f040 83c7 	bne.w	8016a18 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801628a:	4b92      	ldr	r3, [pc, #584]	@ (80164d4 <tcp_input+0x290>)
 801628c:	695b      	ldr	r3, [r3, #20]
 801628e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8016292:	2be0      	cmp	r3, #224	@ 0xe0
 8016294:	f000 83c0 	beq.w	8016a18 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8016298:	4b8d      	ldr	r3, [pc, #564]	@ (80164d0 <tcp_input+0x28c>)
 801629a:	681b      	ldr	r3, [r3, #0]
 801629c:	899b      	ldrh	r3, [r3, #12]
 801629e:	b29b      	uxth	r3, r3
 80162a0:	4618      	mov	r0, r3
 80162a2:	f7fc fb7b 	bl	801299c <lwip_htons>
 80162a6:	4603      	mov	r3, r0
 80162a8:	0b1b      	lsrs	r3, r3, #12
 80162aa:	b29b      	uxth	r3, r3
 80162ac:	b2db      	uxtb	r3, r3
 80162ae:	009b      	lsls	r3, r3, #2
 80162b0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80162b2:	7cbb      	ldrb	r3, [r7, #18]
 80162b4:	2b13      	cmp	r3, #19
 80162b6:	f240 83b1 	bls.w	8016a1c <tcp_input+0x7d8>
 80162ba:	7cbb      	ldrb	r3, [r7, #18]
 80162bc:	b29a      	uxth	r2, r3
 80162be:	687b      	ldr	r3, [r7, #4]
 80162c0:	891b      	ldrh	r3, [r3, #8]
 80162c2:	429a      	cmp	r2, r3
 80162c4:	f200 83aa 	bhi.w	8016a1c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80162c8:	7cbb      	ldrb	r3, [r7, #18]
 80162ca:	b29b      	uxth	r3, r3
 80162cc:	3b14      	subs	r3, #20
 80162ce:	b29a      	uxth	r2, r3
 80162d0:	4b81      	ldr	r3, [pc, #516]	@ (80164d8 <tcp_input+0x294>)
 80162d2:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80162d4:	4b81      	ldr	r3, [pc, #516]	@ (80164dc <tcp_input+0x298>)
 80162d6:	2200      	movs	r2, #0
 80162d8:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80162da:	687b      	ldr	r3, [r7, #4]
 80162dc:	895a      	ldrh	r2, [r3, #10]
 80162de:	7cbb      	ldrb	r3, [r7, #18]
 80162e0:	b29b      	uxth	r3, r3
 80162e2:	429a      	cmp	r2, r3
 80162e4:	d309      	bcc.n	80162fa <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80162e6:	4b7c      	ldr	r3, [pc, #496]	@ (80164d8 <tcp_input+0x294>)
 80162e8:	881a      	ldrh	r2, [r3, #0]
 80162ea:	4b7d      	ldr	r3, [pc, #500]	@ (80164e0 <tcp_input+0x29c>)
 80162ec:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80162ee:	7cbb      	ldrb	r3, [r7, #18]
 80162f0:	4619      	mov	r1, r3
 80162f2:	6878      	ldr	r0, [r7, #4]
 80162f4:	f7fd fe8c 	bl	8014010 <pbuf_remove_header>
 80162f8:	e04e      	b.n	8016398 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80162fa:	687b      	ldr	r3, [r7, #4]
 80162fc:	681b      	ldr	r3, [r3, #0]
 80162fe:	2b00      	cmp	r3, #0
 8016300:	d105      	bne.n	801630e <tcp_input+0xca>
 8016302:	4b70      	ldr	r3, [pc, #448]	@ (80164c4 <tcp_input+0x280>)
 8016304:	22c2      	movs	r2, #194	@ 0xc2
 8016306:	4977      	ldr	r1, [pc, #476]	@ (80164e4 <tcp_input+0x2a0>)
 8016308:	4870      	ldr	r0, [pc, #448]	@ (80164cc <tcp_input+0x288>)
 801630a:	f007 ffbf 	bl	801e28c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801630e:	2114      	movs	r1, #20
 8016310:	6878      	ldr	r0, [r7, #4]
 8016312:	f7fd fe7d 	bl	8014010 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8016316:	687b      	ldr	r3, [r7, #4]
 8016318:	895a      	ldrh	r2, [r3, #10]
 801631a:	4b71      	ldr	r3, [pc, #452]	@ (80164e0 <tcp_input+0x29c>)
 801631c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801631e:	4b6e      	ldr	r3, [pc, #440]	@ (80164d8 <tcp_input+0x294>)
 8016320:	881a      	ldrh	r2, [r3, #0]
 8016322:	4b6f      	ldr	r3, [pc, #444]	@ (80164e0 <tcp_input+0x29c>)
 8016324:	881b      	ldrh	r3, [r3, #0]
 8016326:	1ad3      	subs	r3, r2, r3
 8016328:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801632a:	4b6d      	ldr	r3, [pc, #436]	@ (80164e0 <tcp_input+0x29c>)
 801632c:	881b      	ldrh	r3, [r3, #0]
 801632e:	4619      	mov	r1, r3
 8016330:	6878      	ldr	r0, [r7, #4]
 8016332:	f7fd fe6d 	bl	8014010 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8016336:	687b      	ldr	r3, [r7, #4]
 8016338:	681b      	ldr	r3, [r3, #0]
 801633a:	895b      	ldrh	r3, [r3, #10]
 801633c:	8a3a      	ldrh	r2, [r7, #16]
 801633e:	429a      	cmp	r2, r3
 8016340:	f200 836e 	bhi.w	8016a20 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8016344:	687b      	ldr	r3, [r7, #4]
 8016346:	681b      	ldr	r3, [r3, #0]
 8016348:	685b      	ldr	r3, [r3, #4]
 801634a:	4a64      	ldr	r2, [pc, #400]	@ (80164dc <tcp_input+0x298>)
 801634c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 801634e:	687b      	ldr	r3, [r7, #4]
 8016350:	681b      	ldr	r3, [r3, #0]
 8016352:	8a3a      	ldrh	r2, [r7, #16]
 8016354:	4611      	mov	r1, r2
 8016356:	4618      	mov	r0, r3
 8016358:	f7fd fe5a 	bl	8014010 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801635c:	687b      	ldr	r3, [r7, #4]
 801635e:	891a      	ldrh	r2, [r3, #8]
 8016360:	8a3b      	ldrh	r3, [r7, #16]
 8016362:	1ad3      	subs	r3, r2, r3
 8016364:	b29a      	uxth	r2, r3
 8016366:	687b      	ldr	r3, [r7, #4]
 8016368:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801636a:	687b      	ldr	r3, [r7, #4]
 801636c:	895b      	ldrh	r3, [r3, #10]
 801636e:	2b00      	cmp	r3, #0
 8016370:	d005      	beq.n	801637e <tcp_input+0x13a>
 8016372:	4b54      	ldr	r3, [pc, #336]	@ (80164c4 <tcp_input+0x280>)
 8016374:	22df      	movs	r2, #223	@ 0xdf
 8016376:	495c      	ldr	r1, [pc, #368]	@ (80164e8 <tcp_input+0x2a4>)
 8016378:	4854      	ldr	r0, [pc, #336]	@ (80164cc <tcp_input+0x288>)
 801637a:	f007 ff87 	bl	801e28c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801637e:	687b      	ldr	r3, [r7, #4]
 8016380:	891a      	ldrh	r2, [r3, #8]
 8016382:	687b      	ldr	r3, [r7, #4]
 8016384:	681b      	ldr	r3, [r3, #0]
 8016386:	891b      	ldrh	r3, [r3, #8]
 8016388:	429a      	cmp	r2, r3
 801638a:	d005      	beq.n	8016398 <tcp_input+0x154>
 801638c:	4b4d      	ldr	r3, [pc, #308]	@ (80164c4 <tcp_input+0x280>)
 801638e:	22e0      	movs	r2, #224	@ 0xe0
 8016390:	4956      	ldr	r1, [pc, #344]	@ (80164ec <tcp_input+0x2a8>)
 8016392:	484e      	ldr	r0, [pc, #312]	@ (80164cc <tcp_input+0x288>)
 8016394:	f007 ff7a 	bl	801e28c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8016398:	4b4d      	ldr	r3, [pc, #308]	@ (80164d0 <tcp_input+0x28c>)
 801639a:	681b      	ldr	r3, [r3, #0]
 801639c:	881b      	ldrh	r3, [r3, #0]
 801639e:	b29b      	uxth	r3, r3
 80163a0:	4a4b      	ldr	r2, [pc, #300]	@ (80164d0 <tcp_input+0x28c>)
 80163a2:	6814      	ldr	r4, [r2, #0]
 80163a4:	4618      	mov	r0, r3
 80163a6:	f7fc faf9 	bl	801299c <lwip_htons>
 80163aa:	4603      	mov	r3, r0
 80163ac:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80163ae:	4b48      	ldr	r3, [pc, #288]	@ (80164d0 <tcp_input+0x28c>)
 80163b0:	681b      	ldr	r3, [r3, #0]
 80163b2:	885b      	ldrh	r3, [r3, #2]
 80163b4:	b29b      	uxth	r3, r3
 80163b6:	4a46      	ldr	r2, [pc, #280]	@ (80164d0 <tcp_input+0x28c>)
 80163b8:	6814      	ldr	r4, [r2, #0]
 80163ba:	4618      	mov	r0, r3
 80163bc:	f7fc faee 	bl	801299c <lwip_htons>
 80163c0:	4603      	mov	r3, r0
 80163c2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80163c4:	4b42      	ldr	r3, [pc, #264]	@ (80164d0 <tcp_input+0x28c>)
 80163c6:	681b      	ldr	r3, [r3, #0]
 80163c8:	685b      	ldr	r3, [r3, #4]
 80163ca:	4a41      	ldr	r2, [pc, #260]	@ (80164d0 <tcp_input+0x28c>)
 80163cc:	6814      	ldr	r4, [r2, #0]
 80163ce:	4618      	mov	r0, r3
 80163d0:	f7fc fafa 	bl	80129c8 <lwip_htonl>
 80163d4:	4603      	mov	r3, r0
 80163d6:	6063      	str	r3, [r4, #4]
 80163d8:	6863      	ldr	r3, [r4, #4]
 80163da:	4a45      	ldr	r2, [pc, #276]	@ (80164f0 <tcp_input+0x2ac>)
 80163dc:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80163de:	4b3c      	ldr	r3, [pc, #240]	@ (80164d0 <tcp_input+0x28c>)
 80163e0:	681b      	ldr	r3, [r3, #0]
 80163e2:	689b      	ldr	r3, [r3, #8]
 80163e4:	4a3a      	ldr	r2, [pc, #232]	@ (80164d0 <tcp_input+0x28c>)
 80163e6:	6814      	ldr	r4, [r2, #0]
 80163e8:	4618      	mov	r0, r3
 80163ea:	f7fc faed 	bl	80129c8 <lwip_htonl>
 80163ee:	4603      	mov	r3, r0
 80163f0:	60a3      	str	r3, [r4, #8]
 80163f2:	68a3      	ldr	r3, [r4, #8]
 80163f4:	4a3f      	ldr	r2, [pc, #252]	@ (80164f4 <tcp_input+0x2b0>)
 80163f6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80163f8:	4b35      	ldr	r3, [pc, #212]	@ (80164d0 <tcp_input+0x28c>)
 80163fa:	681b      	ldr	r3, [r3, #0]
 80163fc:	89db      	ldrh	r3, [r3, #14]
 80163fe:	b29b      	uxth	r3, r3
 8016400:	4a33      	ldr	r2, [pc, #204]	@ (80164d0 <tcp_input+0x28c>)
 8016402:	6814      	ldr	r4, [r2, #0]
 8016404:	4618      	mov	r0, r3
 8016406:	f7fc fac9 	bl	801299c <lwip_htons>
 801640a:	4603      	mov	r3, r0
 801640c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801640e:	4b30      	ldr	r3, [pc, #192]	@ (80164d0 <tcp_input+0x28c>)
 8016410:	681b      	ldr	r3, [r3, #0]
 8016412:	899b      	ldrh	r3, [r3, #12]
 8016414:	b29b      	uxth	r3, r3
 8016416:	4618      	mov	r0, r3
 8016418:	f7fc fac0 	bl	801299c <lwip_htons>
 801641c:	4603      	mov	r3, r0
 801641e:	b2db      	uxtb	r3, r3
 8016420:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8016424:	b2da      	uxtb	r2, r3
 8016426:	4b34      	ldr	r3, [pc, #208]	@ (80164f8 <tcp_input+0x2b4>)
 8016428:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801642a:	687b      	ldr	r3, [r7, #4]
 801642c:	891a      	ldrh	r2, [r3, #8]
 801642e:	4b33      	ldr	r3, [pc, #204]	@ (80164fc <tcp_input+0x2b8>)
 8016430:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8016432:	4b31      	ldr	r3, [pc, #196]	@ (80164f8 <tcp_input+0x2b4>)
 8016434:	781b      	ldrb	r3, [r3, #0]
 8016436:	f003 0303 	and.w	r3, r3, #3
 801643a:	2b00      	cmp	r3, #0
 801643c:	d00c      	beq.n	8016458 <tcp_input+0x214>
    tcplen++;
 801643e:	4b2f      	ldr	r3, [pc, #188]	@ (80164fc <tcp_input+0x2b8>)
 8016440:	881b      	ldrh	r3, [r3, #0]
 8016442:	3301      	adds	r3, #1
 8016444:	b29a      	uxth	r2, r3
 8016446:	4b2d      	ldr	r3, [pc, #180]	@ (80164fc <tcp_input+0x2b8>)
 8016448:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801644a:	687b      	ldr	r3, [r7, #4]
 801644c:	891a      	ldrh	r2, [r3, #8]
 801644e:	4b2b      	ldr	r3, [pc, #172]	@ (80164fc <tcp_input+0x2b8>)
 8016450:	881b      	ldrh	r3, [r3, #0]
 8016452:	429a      	cmp	r2, r3
 8016454:	f200 82e6 	bhi.w	8016a24 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8016458:	2300      	movs	r3, #0
 801645a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801645c:	4b28      	ldr	r3, [pc, #160]	@ (8016500 <tcp_input+0x2bc>)
 801645e:	681b      	ldr	r3, [r3, #0]
 8016460:	61fb      	str	r3, [r7, #28]
 8016462:	e09d      	b.n	80165a0 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8016464:	69fb      	ldr	r3, [r7, #28]
 8016466:	7d1b      	ldrb	r3, [r3, #20]
 8016468:	2b00      	cmp	r3, #0
 801646a:	d105      	bne.n	8016478 <tcp_input+0x234>
 801646c:	4b15      	ldr	r3, [pc, #84]	@ (80164c4 <tcp_input+0x280>)
 801646e:	22fb      	movs	r2, #251	@ 0xfb
 8016470:	4924      	ldr	r1, [pc, #144]	@ (8016504 <tcp_input+0x2c0>)
 8016472:	4816      	ldr	r0, [pc, #88]	@ (80164cc <tcp_input+0x288>)
 8016474:	f007 ff0a 	bl	801e28c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8016478:	69fb      	ldr	r3, [r7, #28]
 801647a:	7d1b      	ldrb	r3, [r3, #20]
 801647c:	2b0a      	cmp	r3, #10
 801647e:	d105      	bne.n	801648c <tcp_input+0x248>
 8016480:	4b10      	ldr	r3, [pc, #64]	@ (80164c4 <tcp_input+0x280>)
 8016482:	22fc      	movs	r2, #252	@ 0xfc
 8016484:	4920      	ldr	r1, [pc, #128]	@ (8016508 <tcp_input+0x2c4>)
 8016486:	4811      	ldr	r0, [pc, #68]	@ (80164cc <tcp_input+0x288>)
 8016488:	f007 ff00 	bl	801e28c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801648c:	69fb      	ldr	r3, [r7, #28]
 801648e:	7d1b      	ldrb	r3, [r3, #20]
 8016490:	2b01      	cmp	r3, #1
 8016492:	d105      	bne.n	80164a0 <tcp_input+0x25c>
 8016494:	4b0b      	ldr	r3, [pc, #44]	@ (80164c4 <tcp_input+0x280>)
 8016496:	22fd      	movs	r2, #253	@ 0xfd
 8016498:	491c      	ldr	r1, [pc, #112]	@ (801650c <tcp_input+0x2c8>)
 801649a:	480c      	ldr	r0, [pc, #48]	@ (80164cc <tcp_input+0x288>)
 801649c:	f007 fef6 	bl	801e28c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80164a0:	69fb      	ldr	r3, [r7, #28]
 80164a2:	7a1b      	ldrb	r3, [r3, #8]
 80164a4:	2b00      	cmp	r3, #0
 80164a6:	d033      	beq.n	8016510 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80164a8:	69fb      	ldr	r3, [r7, #28]
 80164aa:	7a1a      	ldrb	r2, [r3, #8]
 80164ac:	4b09      	ldr	r3, [pc, #36]	@ (80164d4 <tcp_input+0x290>)
 80164ae:	685b      	ldr	r3, [r3, #4]
 80164b0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80164b4:	3301      	adds	r3, #1
 80164b6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80164b8:	429a      	cmp	r2, r3
 80164ba:	d029      	beq.n	8016510 <tcp_input+0x2cc>
      prev = pcb;
 80164bc:	69fb      	ldr	r3, [r7, #28]
 80164be:	61bb      	str	r3, [r7, #24]
      continue;
 80164c0:	e06b      	b.n	801659a <tcp_input+0x356>
 80164c2:	bf00      	nop
 80164c4:	080225c0 	.word	0x080225c0
 80164c8:	080225f4 	.word	0x080225f4
 80164cc:	0802260c 	.word	0x0802260c
 80164d0:	2000cae8 	.word	0x2000cae8
 80164d4:	2000936c 	.word	0x2000936c
 80164d8:	2000caec 	.word	0x2000caec
 80164dc:	2000caf0 	.word	0x2000caf0
 80164e0:	2000caee 	.word	0x2000caee
 80164e4:	08022634 	.word	0x08022634
 80164e8:	08022644 	.word	0x08022644
 80164ec:	08022650 	.word	0x08022650
 80164f0:	2000caf8 	.word	0x2000caf8
 80164f4:	2000cafc 	.word	0x2000cafc
 80164f8:	2000cb04 	.word	0x2000cb04
 80164fc:	2000cb02 	.word	0x2000cb02
 8016500:	2000cacc 	.word	0x2000cacc
 8016504:	08022670 	.word	0x08022670
 8016508:	08022698 	.word	0x08022698
 801650c:	080226c4 	.word	0x080226c4
    }

    if (pcb->remote_port == tcphdr->src &&
 8016510:	69fb      	ldr	r3, [r7, #28]
 8016512:	8b1a      	ldrh	r2, [r3, #24]
 8016514:	4b72      	ldr	r3, [pc, #456]	@ (80166e0 <tcp_input+0x49c>)
 8016516:	681b      	ldr	r3, [r3, #0]
 8016518:	881b      	ldrh	r3, [r3, #0]
 801651a:	b29b      	uxth	r3, r3
 801651c:	429a      	cmp	r2, r3
 801651e:	d13a      	bne.n	8016596 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8016520:	69fb      	ldr	r3, [r7, #28]
 8016522:	8ada      	ldrh	r2, [r3, #22]
 8016524:	4b6e      	ldr	r3, [pc, #440]	@ (80166e0 <tcp_input+0x49c>)
 8016526:	681b      	ldr	r3, [r3, #0]
 8016528:	885b      	ldrh	r3, [r3, #2]
 801652a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 801652c:	429a      	cmp	r2, r3
 801652e:	d132      	bne.n	8016596 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016530:	69fb      	ldr	r3, [r7, #28]
 8016532:	685a      	ldr	r2, [r3, #4]
 8016534:	4b6b      	ldr	r3, [pc, #428]	@ (80166e4 <tcp_input+0x4a0>)
 8016536:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8016538:	429a      	cmp	r2, r3
 801653a:	d12c      	bne.n	8016596 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801653c:	69fb      	ldr	r3, [r7, #28]
 801653e:	681a      	ldr	r2, [r3, #0]
 8016540:	4b68      	ldr	r3, [pc, #416]	@ (80166e4 <tcp_input+0x4a0>)
 8016542:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016544:	429a      	cmp	r2, r3
 8016546:	d126      	bne.n	8016596 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8016548:	69fb      	ldr	r3, [r7, #28]
 801654a:	68db      	ldr	r3, [r3, #12]
 801654c:	69fa      	ldr	r2, [r7, #28]
 801654e:	429a      	cmp	r2, r3
 8016550:	d106      	bne.n	8016560 <tcp_input+0x31c>
 8016552:	4b65      	ldr	r3, [pc, #404]	@ (80166e8 <tcp_input+0x4a4>)
 8016554:	f240 120d 	movw	r2, #269	@ 0x10d
 8016558:	4964      	ldr	r1, [pc, #400]	@ (80166ec <tcp_input+0x4a8>)
 801655a:	4865      	ldr	r0, [pc, #404]	@ (80166f0 <tcp_input+0x4ac>)
 801655c:	f007 fe96 	bl	801e28c <iprintf>
      if (prev != NULL) {
 8016560:	69bb      	ldr	r3, [r7, #24]
 8016562:	2b00      	cmp	r3, #0
 8016564:	d00a      	beq.n	801657c <tcp_input+0x338>
        prev->next = pcb->next;
 8016566:	69fb      	ldr	r3, [r7, #28]
 8016568:	68da      	ldr	r2, [r3, #12]
 801656a:	69bb      	ldr	r3, [r7, #24]
 801656c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801656e:	4b61      	ldr	r3, [pc, #388]	@ (80166f4 <tcp_input+0x4b0>)
 8016570:	681a      	ldr	r2, [r3, #0]
 8016572:	69fb      	ldr	r3, [r7, #28]
 8016574:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8016576:	4a5f      	ldr	r2, [pc, #380]	@ (80166f4 <tcp_input+0x4b0>)
 8016578:	69fb      	ldr	r3, [r7, #28]
 801657a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801657c:	69fb      	ldr	r3, [r7, #28]
 801657e:	68db      	ldr	r3, [r3, #12]
 8016580:	69fa      	ldr	r2, [r7, #28]
 8016582:	429a      	cmp	r2, r3
 8016584:	d111      	bne.n	80165aa <tcp_input+0x366>
 8016586:	4b58      	ldr	r3, [pc, #352]	@ (80166e8 <tcp_input+0x4a4>)
 8016588:	f240 1215 	movw	r2, #277	@ 0x115
 801658c:	495a      	ldr	r1, [pc, #360]	@ (80166f8 <tcp_input+0x4b4>)
 801658e:	4858      	ldr	r0, [pc, #352]	@ (80166f0 <tcp_input+0x4ac>)
 8016590:	f007 fe7c 	bl	801e28c <iprintf>
      break;
 8016594:	e009      	b.n	80165aa <tcp_input+0x366>
    }
    prev = pcb;
 8016596:	69fb      	ldr	r3, [r7, #28]
 8016598:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801659a:	69fb      	ldr	r3, [r7, #28]
 801659c:	68db      	ldr	r3, [r3, #12]
 801659e:	61fb      	str	r3, [r7, #28]
 80165a0:	69fb      	ldr	r3, [r7, #28]
 80165a2:	2b00      	cmp	r3, #0
 80165a4:	f47f af5e 	bne.w	8016464 <tcp_input+0x220>
 80165a8:	e000      	b.n	80165ac <tcp_input+0x368>
      break;
 80165aa:	bf00      	nop
  }

  if (pcb == NULL) {
 80165ac:	69fb      	ldr	r3, [r7, #28]
 80165ae:	2b00      	cmp	r3, #0
 80165b0:	f040 80aa 	bne.w	8016708 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80165b4:	4b51      	ldr	r3, [pc, #324]	@ (80166fc <tcp_input+0x4b8>)
 80165b6:	681b      	ldr	r3, [r3, #0]
 80165b8:	61fb      	str	r3, [r7, #28]
 80165ba:	e03f      	b.n	801663c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80165bc:	69fb      	ldr	r3, [r7, #28]
 80165be:	7d1b      	ldrb	r3, [r3, #20]
 80165c0:	2b0a      	cmp	r3, #10
 80165c2:	d006      	beq.n	80165d2 <tcp_input+0x38e>
 80165c4:	4b48      	ldr	r3, [pc, #288]	@ (80166e8 <tcp_input+0x4a4>)
 80165c6:	f240 121f 	movw	r2, #287	@ 0x11f
 80165ca:	494d      	ldr	r1, [pc, #308]	@ (8016700 <tcp_input+0x4bc>)
 80165cc:	4848      	ldr	r0, [pc, #288]	@ (80166f0 <tcp_input+0x4ac>)
 80165ce:	f007 fe5d 	bl	801e28c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80165d2:	69fb      	ldr	r3, [r7, #28]
 80165d4:	7a1b      	ldrb	r3, [r3, #8]
 80165d6:	2b00      	cmp	r3, #0
 80165d8:	d009      	beq.n	80165ee <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80165da:	69fb      	ldr	r3, [r7, #28]
 80165dc:	7a1a      	ldrb	r2, [r3, #8]
 80165de:	4b41      	ldr	r3, [pc, #260]	@ (80166e4 <tcp_input+0x4a0>)
 80165e0:	685b      	ldr	r3, [r3, #4]
 80165e2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80165e6:	3301      	adds	r3, #1
 80165e8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80165ea:	429a      	cmp	r2, r3
 80165ec:	d122      	bne.n	8016634 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80165ee:	69fb      	ldr	r3, [r7, #28]
 80165f0:	8b1a      	ldrh	r2, [r3, #24]
 80165f2:	4b3b      	ldr	r3, [pc, #236]	@ (80166e0 <tcp_input+0x49c>)
 80165f4:	681b      	ldr	r3, [r3, #0]
 80165f6:	881b      	ldrh	r3, [r3, #0]
 80165f8:	b29b      	uxth	r3, r3
 80165fa:	429a      	cmp	r2, r3
 80165fc:	d11b      	bne.n	8016636 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80165fe:	69fb      	ldr	r3, [r7, #28]
 8016600:	8ada      	ldrh	r2, [r3, #22]
 8016602:	4b37      	ldr	r3, [pc, #220]	@ (80166e0 <tcp_input+0x49c>)
 8016604:	681b      	ldr	r3, [r3, #0]
 8016606:	885b      	ldrh	r3, [r3, #2]
 8016608:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801660a:	429a      	cmp	r2, r3
 801660c:	d113      	bne.n	8016636 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801660e:	69fb      	ldr	r3, [r7, #28]
 8016610:	685a      	ldr	r2, [r3, #4]
 8016612:	4b34      	ldr	r3, [pc, #208]	@ (80166e4 <tcp_input+0x4a0>)
 8016614:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8016616:	429a      	cmp	r2, r3
 8016618:	d10d      	bne.n	8016636 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801661a:	69fb      	ldr	r3, [r7, #28]
 801661c:	681a      	ldr	r2, [r3, #0]
 801661e:	4b31      	ldr	r3, [pc, #196]	@ (80166e4 <tcp_input+0x4a0>)
 8016620:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016622:	429a      	cmp	r2, r3
 8016624:	d107      	bne.n	8016636 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8016626:	69f8      	ldr	r0, [r7, #28]
 8016628:	f000 fb56 	bl	8016cd8 <tcp_timewait_input>
        }
        pbuf_free(p);
 801662c:	6878      	ldr	r0, [r7, #4]
 801662e:	f7fd fd75 	bl	801411c <pbuf_free>
        return;
 8016632:	e1fd      	b.n	8016a30 <tcp_input+0x7ec>
        continue;
 8016634:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8016636:	69fb      	ldr	r3, [r7, #28]
 8016638:	68db      	ldr	r3, [r3, #12]
 801663a:	61fb      	str	r3, [r7, #28]
 801663c:	69fb      	ldr	r3, [r7, #28]
 801663e:	2b00      	cmp	r3, #0
 8016640:	d1bc      	bne.n	80165bc <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8016642:	2300      	movs	r3, #0
 8016644:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8016646:	4b2f      	ldr	r3, [pc, #188]	@ (8016704 <tcp_input+0x4c0>)
 8016648:	681b      	ldr	r3, [r3, #0]
 801664a:	617b      	str	r3, [r7, #20]
 801664c:	e02a      	b.n	80166a4 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801664e:	697b      	ldr	r3, [r7, #20]
 8016650:	7a1b      	ldrb	r3, [r3, #8]
 8016652:	2b00      	cmp	r3, #0
 8016654:	d00c      	beq.n	8016670 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8016656:	697b      	ldr	r3, [r7, #20]
 8016658:	7a1a      	ldrb	r2, [r3, #8]
 801665a:	4b22      	ldr	r3, [pc, #136]	@ (80166e4 <tcp_input+0x4a0>)
 801665c:	685b      	ldr	r3, [r3, #4]
 801665e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8016662:	3301      	adds	r3, #1
 8016664:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8016666:	429a      	cmp	r2, r3
 8016668:	d002      	beq.n	8016670 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801666a:	697b      	ldr	r3, [r7, #20]
 801666c:	61bb      	str	r3, [r7, #24]
        continue;
 801666e:	e016      	b.n	801669e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8016670:	697b      	ldr	r3, [r7, #20]
 8016672:	8ada      	ldrh	r2, [r3, #22]
 8016674:	4b1a      	ldr	r3, [pc, #104]	@ (80166e0 <tcp_input+0x49c>)
 8016676:	681b      	ldr	r3, [r3, #0]
 8016678:	885b      	ldrh	r3, [r3, #2]
 801667a:	b29b      	uxth	r3, r3
 801667c:	429a      	cmp	r2, r3
 801667e:	d10c      	bne.n	801669a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8016680:	697b      	ldr	r3, [r7, #20]
 8016682:	681a      	ldr	r2, [r3, #0]
 8016684:	4b17      	ldr	r3, [pc, #92]	@ (80166e4 <tcp_input+0x4a0>)
 8016686:	695b      	ldr	r3, [r3, #20]
 8016688:	429a      	cmp	r2, r3
 801668a:	d00f      	beq.n	80166ac <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801668c:	697b      	ldr	r3, [r7, #20]
 801668e:	2b00      	cmp	r3, #0
 8016690:	d00d      	beq.n	80166ae <tcp_input+0x46a>
 8016692:	697b      	ldr	r3, [r7, #20]
 8016694:	681b      	ldr	r3, [r3, #0]
 8016696:	2b00      	cmp	r3, #0
 8016698:	d009      	beq.n	80166ae <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801669a:	697b      	ldr	r3, [r7, #20]
 801669c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801669e:	697b      	ldr	r3, [r7, #20]
 80166a0:	68db      	ldr	r3, [r3, #12]
 80166a2:	617b      	str	r3, [r7, #20]
 80166a4:	697b      	ldr	r3, [r7, #20]
 80166a6:	2b00      	cmp	r3, #0
 80166a8:	d1d1      	bne.n	801664e <tcp_input+0x40a>
 80166aa:	e000      	b.n	80166ae <tcp_input+0x46a>
            break;
 80166ac:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80166ae:	697b      	ldr	r3, [r7, #20]
 80166b0:	2b00      	cmp	r3, #0
 80166b2:	d029      	beq.n	8016708 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80166b4:	69bb      	ldr	r3, [r7, #24]
 80166b6:	2b00      	cmp	r3, #0
 80166b8:	d00a      	beq.n	80166d0 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80166ba:	697b      	ldr	r3, [r7, #20]
 80166bc:	68da      	ldr	r2, [r3, #12]
 80166be:	69bb      	ldr	r3, [r7, #24]
 80166c0:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80166c2:	4b10      	ldr	r3, [pc, #64]	@ (8016704 <tcp_input+0x4c0>)
 80166c4:	681a      	ldr	r2, [r3, #0]
 80166c6:	697b      	ldr	r3, [r7, #20]
 80166c8:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80166ca:	4a0e      	ldr	r2, [pc, #56]	@ (8016704 <tcp_input+0x4c0>)
 80166cc:	697b      	ldr	r3, [r7, #20]
 80166ce:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80166d0:	6978      	ldr	r0, [r7, #20]
 80166d2:	f000 fa03 	bl	8016adc <tcp_listen_input>
      }
      pbuf_free(p);
 80166d6:	6878      	ldr	r0, [r7, #4]
 80166d8:	f7fd fd20 	bl	801411c <pbuf_free>
      return;
 80166dc:	e1a8      	b.n	8016a30 <tcp_input+0x7ec>
 80166de:	bf00      	nop
 80166e0:	2000cae8 	.word	0x2000cae8
 80166e4:	2000936c 	.word	0x2000936c
 80166e8:	080225c0 	.word	0x080225c0
 80166ec:	080226ec 	.word	0x080226ec
 80166f0:	0802260c 	.word	0x0802260c
 80166f4:	2000cacc 	.word	0x2000cacc
 80166f8:	08022718 	.word	0x08022718
 80166fc:	2000cad0 	.word	0x2000cad0
 8016700:	08022744 	.word	0x08022744
 8016704:	2000cac8 	.word	0x2000cac8
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8016708:	69fb      	ldr	r3, [r7, #28]
 801670a:	2b00      	cmp	r3, #0
 801670c:	f000 8158 	beq.w	80169c0 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8016710:	4b95      	ldr	r3, [pc, #596]	@ (8016968 <tcp_input+0x724>)
 8016712:	2200      	movs	r2, #0
 8016714:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8016716:	687b      	ldr	r3, [r7, #4]
 8016718:	891a      	ldrh	r2, [r3, #8]
 801671a:	4b93      	ldr	r3, [pc, #588]	@ (8016968 <tcp_input+0x724>)
 801671c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801671e:	4a92      	ldr	r2, [pc, #584]	@ (8016968 <tcp_input+0x724>)
 8016720:	687b      	ldr	r3, [r7, #4]
 8016722:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8016724:	4b91      	ldr	r3, [pc, #580]	@ (801696c <tcp_input+0x728>)
 8016726:	681b      	ldr	r3, [r3, #0]
 8016728:	4a8f      	ldr	r2, [pc, #572]	@ (8016968 <tcp_input+0x724>)
 801672a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 801672c:	4b90      	ldr	r3, [pc, #576]	@ (8016970 <tcp_input+0x72c>)
 801672e:	2200      	movs	r2, #0
 8016730:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8016732:	4b90      	ldr	r3, [pc, #576]	@ (8016974 <tcp_input+0x730>)
 8016734:	2200      	movs	r2, #0
 8016736:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8016738:	4b8f      	ldr	r3, [pc, #572]	@ (8016978 <tcp_input+0x734>)
 801673a:	2200      	movs	r2, #0
 801673c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801673e:	4b8f      	ldr	r3, [pc, #572]	@ (801697c <tcp_input+0x738>)
 8016740:	781b      	ldrb	r3, [r3, #0]
 8016742:	f003 0308 	and.w	r3, r3, #8
 8016746:	2b00      	cmp	r3, #0
 8016748:	d006      	beq.n	8016758 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 801674a:	687b      	ldr	r3, [r7, #4]
 801674c:	7b5b      	ldrb	r3, [r3, #13]
 801674e:	f043 0301 	orr.w	r3, r3, #1
 8016752:	b2da      	uxtb	r2, r3
 8016754:	687b      	ldr	r3, [r7, #4]
 8016756:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8016758:	69fb      	ldr	r3, [r7, #28]
 801675a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801675c:	2b00      	cmp	r3, #0
 801675e:	d017      	beq.n	8016790 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8016760:	69f8      	ldr	r0, [r7, #28]
 8016762:	f7ff f885 	bl	8015870 <tcp_process_refused_data>
 8016766:	4603      	mov	r3, r0
 8016768:	f113 0f0d 	cmn.w	r3, #13
 801676c:	d007      	beq.n	801677e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801676e:	69fb      	ldr	r3, [r7, #28]
 8016770:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8016772:	2b00      	cmp	r3, #0
 8016774:	d00c      	beq.n	8016790 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8016776:	4b82      	ldr	r3, [pc, #520]	@ (8016980 <tcp_input+0x73c>)
 8016778:	881b      	ldrh	r3, [r3, #0]
 801677a:	2b00      	cmp	r3, #0
 801677c:	d008      	beq.n	8016790 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801677e:	69fb      	ldr	r3, [r7, #28]
 8016780:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016782:	2b00      	cmp	r3, #0
 8016784:	f040 80e3 	bne.w	801694e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8016788:	69f8      	ldr	r0, [r7, #28]
 801678a:	f003 fdff 	bl	801a38c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801678e:	e0de      	b.n	801694e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8016790:	4a7c      	ldr	r2, [pc, #496]	@ (8016984 <tcp_input+0x740>)
 8016792:	69fb      	ldr	r3, [r7, #28]
 8016794:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8016796:	69f8      	ldr	r0, [r7, #28]
 8016798:	f000 fb18 	bl	8016dcc <tcp_process>
 801679c:	4603      	mov	r3, r0
 801679e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80167a0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80167a4:	f113 0f0d 	cmn.w	r3, #13
 80167a8:	f000 80d3 	beq.w	8016952 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 80167ac:	4b71      	ldr	r3, [pc, #452]	@ (8016974 <tcp_input+0x730>)
 80167ae:	781b      	ldrb	r3, [r3, #0]
 80167b0:	f003 0308 	and.w	r3, r3, #8
 80167b4:	2b00      	cmp	r3, #0
 80167b6:	d015      	beq.n	80167e4 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80167b8:	69fb      	ldr	r3, [r7, #28]
 80167ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80167be:	2b00      	cmp	r3, #0
 80167c0:	d008      	beq.n	80167d4 <tcp_input+0x590>
 80167c2:	69fb      	ldr	r3, [r7, #28]
 80167c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80167c8:	69fa      	ldr	r2, [r7, #28]
 80167ca:	6912      	ldr	r2, [r2, #16]
 80167cc:	f06f 010d 	mvn.w	r1, #13
 80167d0:	4610      	mov	r0, r2
 80167d2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80167d4:	69f9      	ldr	r1, [r7, #28]
 80167d6:	486c      	ldr	r0, [pc, #432]	@ (8016988 <tcp_input+0x744>)
 80167d8:	f7ff fbbc 	bl	8015f54 <tcp_pcb_remove>
        tcp_free(pcb);
 80167dc:	69f8      	ldr	r0, [r7, #28]
 80167de:	f7fd ff49 	bl	8014674 <tcp_free>
 80167e2:	e0da      	b.n	801699a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 80167e4:	2300      	movs	r3, #0
 80167e6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80167e8:	4b63      	ldr	r3, [pc, #396]	@ (8016978 <tcp_input+0x734>)
 80167ea:	881b      	ldrh	r3, [r3, #0]
 80167ec:	2b00      	cmp	r3, #0
 80167ee:	d01d      	beq.n	801682c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80167f0:	4b61      	ldr	r3, [pc, #388]	@ (8016978 <tcp_input+0x734>)
 80167f2:	881b      	ldrh	r3, [r3, #0]
 80167f4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80167f6:	69fb      	ldr	r3, [r7, #28]
 80167f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80167fc:	2b00      	cmp	r3, #0
 80167fe:	d00a      	beq.n	8016816 <tcp_input+0x5d2>
 8016800:	69fb      	ldr	r3, [r7, #28]
 8016802:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8016806:	69fa      	ldr	r2, [r7, #28]
 8016808:	6910      	ldr	r0, [r2, #16]
 801680a:	89fa      	ldrh	r2, [r7, #14]
 801680c:	69f9      	ldr	r1, [r7, #28]
 801680e:	4798      	blx	r3
 8016810:	4603      	mov	r3, r0
 8016812:	74fb      	strb	r3, [r7, #19]
 8016814:	e001      	b.n	801681a <tcp_input+0x5d6>
 8016816:	2300      	movs	r3, #0
 8016818:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801681a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801681e:	f113 0f0d 	cmn.w	r3, #13
 8016822:	f000 8098 	beq.w	8016956 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8016826:	4b54      	ldr	r3, [pc, #336]	@ (8016978 <tcp_input+0x734>)
 8016828:	2200      	movs	r2, #0
 801682a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801682c:	69f8      	ldr	r0, [r7, #28]
 801682e:	f000 f915 	bl	8016a5c <tcp_input_delayed_close>
 8016832:	4603      	mov	r3, r0
 8016834:	2b00      	cmp	r3, #0
 8016836:	f040 8090 	bne.w	801695a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801683a:	4b4d      	ldr	r3, [pc, #308]	@ (8016970 <tcp_input+0x72c>)
 801683c:	681b      	ldr	r3, [r3, #0]
 801683e:	2b00      	cmp	r3, #0
 8016840:	d041      	beq.n	80168c6 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8016842:	69fb      	ldr	r3, [r7, #28]
 8016844:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016846:	2b00      	cmp	r3, #0
 8016848:	d006      	beq.n	8016858 <tcp_input+0x614>
 801684a:	4b50      	ldr	r3, [pc, #320]	@ (801698c <tcp_input+0x748>)
 801684c:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8016850:	494f      	ldr	r1, [pc, #316]	@ (8016990 <tcp_input+0x74c>)
 8016852:	4850      	ldr	r0, [pc, #320]	@ (8016994 <tcp_input+0x750>)
 8016854:	f007 fd1a 	bl	801e28c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8016858:	69fb      	ldr	r3, [r7, #28]
 801685a:	8b5b      	ldrh	r3, [r3, #26]
 801685c:	f003 0310 	and.w	r3, r3, #16
 8016860:	2b00      	cmp	r3, #0
 8016862:	d008      	beq.n	8016876 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8016864:	4b42      	ldr	r3, [pc, #264]	@ (8016970 <tcp_input+0x72c>)
 8016866:	681b      	ldr	r3, [r3, #0]
 8016868:	4618      	mov	r0, r3
 801686a:	f7fd fc57 	bl	801411c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801686e:	69f8      	ldr	r0, [r7, #28]
 8016870:	f7fe f9e8 	bl	8014c44 <tcp_abort>
            goto aborted;
 8016874:	e091      	b.n	801699a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8016876:	69fb      	ldr	r3, [r7, #28]
 8016878:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801687c:	2b00      	cmp	r3, #0
 801687e:	d00c      	beq.n	801689a <tcp_input+0x656>
 8016880:	69fb      	ldr	r3, [r7, #28]
 8016882:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8016886:	69fb      	ldr	r3, [r7, #28]
 8016888:	6918      	ldr	r0, [r3, #16]
 801688a:	4b39      	ldr	r3, [pc, #228]	@ (8016970 <tcp_input+0x72c>)
 801688c:	681a      	ldr	r2, [r3, #0]
 801688e:	2300      	movs	r3, #0
 8016890:	69f9      	ldr	r1, [r7, #28]
 8016892:	47a0      	blx	r4
 8016894:	4603      	mov	r3, r0
 8016896:	74fb      	strb	r3, [r7, #19]
 8016898:	e008      	b.n	80168ac <tcp_input+0x668>
 801689a:	4b35      	ldr	r3, [pc, #212]	@ (8016970 <tcp_input+0x72c>)
 801689c:	681a      	ldr	r2, [r3, #0]
 801689e:	2300      	movs	r3, #0
 80168a0:	69f9      	ldr	r1, [r7, #28]
 80168a2:	2000      	movs	r0, #0
 80168a4:	f7ff f8d8 	bl	8015a58 <tcp_recv_null>
 80168a8:	4603      	mov	r3, r0
 80168aa:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80168ac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80168b0:	f113 0f0d 	cmn.w	r3, #13
 80168b4:	d053      	beq.n	801695e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80168b6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80168ba:	2b00      	cmp	r3, #0
 80168bc:	d003      	beq.n	80168c6 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80168be:	4b2c      	ldr	r3, [pc, #176]	@ (8016970 <tcp_input+0x72c>)
 80168c0:	681a      	ldr	r2, [r3, #0]
 80168c2:	69fb      	ldr	r3, [r7, #28]
 80168c4:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80168c6:	4b2b      	ldr	r3, [pc, #172]	@ (8016974 <tcp_input+0x730>)
 80168c8:	781b      	ldrb	r3, [r3, #0]
 80168ca:	f003 0320 	and.w	r3, r3, #32
 80168ce:	2b00      	cmp	r3, #0
 80168d0:	d030      	beq.n	8016934 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 80168d2:	69fb      	ldr	r3, [r7, #28]
 80168d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80168d6:	2b00      	cmp	r3, #0
 80168d8:	d009      	beq.n	80168ee <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80168da:	69fb      	ldr	r3, [r7, #28]
 80168dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80168de:	7b5a      	ldrb	r2, [r3, #13]
 80168e0:	69fb      	ldr	r3, [r7, #28]
 80168e2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80168e4:	f042 0220 	orr.w	r2, r2, #32
 80168e8:	b2d2      	uxtb	r2, r2
 80168ea:	735a      	strb	r2, [r3, #13]
 80168ec:	e022      	b.n	8016934 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80168ee:	69fb      	ldr	r3, [r7, #28]
 80168f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80168f2:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80168f6:	d005      	beq.n	8016904 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 80168f8:	69fb      	ldr	r3, [r7, #28]
 80168fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80168fc:	3301      	adds	r3, #1
 80168fe:	b29a      	uxth	r2, r3
 8016900:	69fb      	ldr	r3, [r7, #28]
 8016902:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8016904:	69fb      	ldr	r3, [r7, #28]
 8016906:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801690a:	2b00      	cmp	r3, #0
 801690c:	d00b      	beq.n	8016926 <tcp_input+0x6e2>
 801690e:	69fb      	ldr	r3, [r7, #28]
 8016910:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8016914:	69fb      	ldr	r3, [r7, #28]
 8016916:	6918      	ldr	r0, [r3, #16]
 8016918:	2300      	movs	r3, #0
 801691a:	2200      	movs	r2, #0
 801691c:	69f9      	ldr	r1, [r7, #28]
 801691e:	47a0      	blx	r4
 8016920:	4603      	mov	r3, r0
 8016922:	74fb      	strb	r3, [r7, #19]
 8016924:	e001      	b.n	801692a <tcp_input+0x6e6>
 8016926:	2300      	movs	r3, #0
 8016928:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801692a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801692e:	f113 0f0d 	cmn.w	r3, #13
 8016932:	d016      	beq.n	8016962 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8016934:	4b13      	ldr	r3, [pc, #76]	@ (8016984 <tcp_input+0x740>)
 8016936:	2200      	movs	r2, #0
 8016938:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801693a:	69f8      	ldr	r0, [r7, #28]
 801693c:	f000 f88e 	bl	8016a5c <tcp_input_delayed_close>
 8016940:	4603      	mov	r3, r0
 8016942:	2b00      	cmp	r3, #0
 8016944:	d128      	bne.n	8016998 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8016946:	69f8      	ldr	r0, [r7, #28]
 8016948:	f002 ff1a 	bl	8019780 <tcp_output>
 801694c:	e025      	b.n	801699a <tcp_input+0x756>
        goto aborted;
 801694e:	bf00      	nop
 8016950:	e023      	b.n	801699a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8016952:	bf00      	nop
 8016954:	e021      	b.n	801699a <tcp_input+0x756>
              goto aborted;
 8016956:	bf00      	nop
 8016958:	e01f      	b.n	801699a <tcp_input+0x756>
          goto aborted;
 801695a:	bf00      	nop
 801695c:	e01d      	b.n	801699a <tcp_input+0x756>
            goto aborted;
 801695e:	bf00      	nop
 8016960:	e01b      	b.n	801699a <tcp_input+0x756>
              goto aborted;
 8016962:	bf00      	nop
 8016964:	e019      	b.n	801699a <tcp_input+0x756>
 8016966:	bf00      	nop
 8016968:	2000cad8 	.word	0x2000cad8
 801696c:	2000cae8 	.word	0x2000cae8
 8016970:	2000cb08 	.word	0x2000cb08
 8016974:	2000cb05 	.word	0x2000cb05
 8016978:	2000cb00 	.word	0x2000cb00
 801697c:	2000cb04 	.word	0x2000cb04
 8016980:	2000cb02 	.word	0x2000cb02
 8016984:	2000cb0c 	.word	0x2000cb0c
 8016988:	2000cacc 	.word	0x2000cacc
 801698c:	080225c0 	.word	0x080225c0
 8016990:	08022774 	.word	0x08022774
 8016994:	0802260c 	.word	0x0802260c
          goto aborted;
 8016998:	bf00      	nop
    tcp_input_pcb = NULL;
 801699a:	4b27      	ldr	r3, [pc, #156]	@ (8016a38 <tcp_input+0x7f4>)
 801699c:	2200      	movs	r2, #0
 801699e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80169a0:	4b26      	ldr	r3, [pc, #152]	@ (8016a3c <tcp_input+0x7f8>)
 80169a2:	2200      	movs	r2, #0
 80169a4:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80169a6:	4b26      	ldr	r3, [pc, #152]	@ (8016a40 <tcp_input+0x7fc>)
 80169a8:	685b      	ldr	r3, [r3, #4]
 80169aa:	2b00      	cmp	r3, #0
 80169ac:	d03f      	beq.n	8016a2e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 80169ae:	4b24      	ldr	r3, [pc, #144]	@ (8016a40 <tcp_input+0x7fc>)
 80169b0:	685b      	ldr	r3, [r3, #4]
 80169b2:	4618      	mov	r0, r3
 80169b4:	f7fd fbb2 	bl	801411c <pbuf_free>
      inseg.p = NULL;
 80169b8:	4b21      	ldr	r3, [pc, #132]	@ (8016a40 <tcp_input+0x7fc>)
 80169ba:	2200      	movs	r2, #0
 80169bc:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80169be:	e036      	b.n	8016a2e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80169c0:	4b20      	ldr	r3, [pc, #128]	@ (8016a44 <tcp_input+0x800>)
 80169c2:	681b      	ldr	r3, [r3, #0]
 80169c4:	899b      	ldrh	r3, [r3, #12]
 80169c6:	b29b      	uxth	r3, r3
 80169c8:	4618      	mov	r0, r3
 80169ca:	f7fb ffe7 	bl	801299c <lwip_htons>
 80169ce:	4603      	mov	r3, r0
 80169d0:	b2db      	uxtb	r3, r3
 80169d2:	f003 0304 	and.w	r3, r3, #4
 80169d6:	2b00      	cmp	r3, #0
 80169d8:	d118      	bne.n	8016a0c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80169da:	4b1b      	ldr	r3, [pc, #108]	@ (8016a48 <tcp_input+0x804>)
 80169dc:	6819      	ldr	r1, [r3, #0]
 80169de:	4b1b      	ldr	r3, [pc, #108]	@ (8016a4c <tcp_input+0x808>)
 80169e0:	881b      	ldrh	r3, [r3, #0]
 80169e2:	461a      	mov	r2, r3
 80169e4:	4b1a      	ldr	r3, [pc, #104]	@ (8016a50 <tcp_input+0x80c>)
 80169e6:	681b      	ldr	r3, [r3, #0]
 80169e8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80169ea:	4b16      	ldr	r3, [pc, #88]	@ (8016a44 <tcp_input+0x800>)
 80169ec:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80169ee:	885b      	ldrh	r3, [r3, #2]
 80169f0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80169f2:	4a14      	ldr	r2, [pc, #80]	@ (8016a44 <tcp_input+0x800>)
 80169f4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80169f6:	8812      	ldrh	r2, [r2, #0]
 80169f8:	b292      	uxth	r2, r2
 80169fa:	9202      	str	r2, [sp, #8]
 80169fc:	9301      	str	r3, [sp, #4]
 80169fe:	4b15      	ldr	r3, [pc, #84]	@ (8016a54 <tcp_input+0x810>)
 8016a00:	9300      	str	r3, [sp, #0]
 8016a02:	4b15      	ldr	r3, [pc, #84]	@ (8016a58 <tcp_input+0x814>)
 8016a04:	4602      	mov	r2, r0
 8016a06:	2000      	movs	r0, #0
 8016a08:	f003 fc6e 	bl	801a2e8 <tcp_rst>
    pbuf_free(p);
 8016a0c:	6878      	ldr	r0, [r7, #4]
 8016a0e:	f7fd fb85 	bl	801411c <pbuf_free>
  return;
 8016a12:	e00c      	b.n	8016a2e <tcp_input+0x7ea>
    goto dropped;
 8016a14:	bf00      	nop
 8016a16:	e006      	b.n	8016a26 <tcp_input+0x7e2>
    goto dropped;
 8016a18:	bf00      	nop
 8016a1a:	e004      	b.n	8016a26 <tcp_input+0x7e2>
    goto dropped;
 8016a1c:	bf00      	nop
 8016a1e:	e002      	b.n	8016a26 <tcp_input+0x7e2>
      goto dropped;
 8016a20:	bf00      	nop
 8016a22:	e000      	b.n	8016a26 <tcp_input+0x7e2>
      goto dropped;
 8016a24:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8016a26:	6878      	ldr	r0, [r7, #4]
 8016a28:	f7fd fb78 	bl	801411c <pbuf_free>
 8016a2c:	e000      	b.n	8016a30 <tcp_input+0x7ec>
  return;
 8016a2e:	bf00      	nop
}
 8016a30:	3724      	adds	r7, #36	@ 0x24
 8016a32:	46bd      	mov	sp, r7
 8016a34:	bd90      	pop	{r4, r7, pc}
 8016a36:	bf00      	nop
 8016a38:	2000cb0c 	.word	0x2000cb0c
 8016a3c:	2000cb08 	.word	0x2000cb08
 8016a40:	2000cad8 	.word	0x2000cad8
 8016a44:	2000cae8 	.word	0x2000cae8
 8016a48:	2000cafc 	.word	0x2000cafc
 8016a4c:	2000cb02 	.word	0x2000cb02
 8016a50:	2000caf8 	.word	0x2000caf8
 8016a54:	2000937c 	.word	0x2000937c
 8016a58:	20009380 	.word	0x20009380

08016a5c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8016a5c:	b580      	push	{r7, lr}
 8016a5e:	b082      	sub	sp, #8
 8016a60:	af00      	add	r7, sp, #0
 8016a62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8016a64:	687b      	ldr	r3, [r7, #4]
 8016a66:	2b00      	cmp	r3, #0
 8016a68:	d106      	bne.n	8016a78 <tcp_input_delayed_close+0x1c>
 8016a6a:	4b17      	ldr	r3, [pc, #92]	@ (8016ac8 <tcp_input_delayed_close+0x6c>)
 8016a6c:	f240 225a 	movw	r2, #602	@ 0x25a
 8016a70:	4916      	ldr	r1, [pc, #88]	@ (8016acc <tcp_input_delayed_close+0x70>)
 8016a72:	4817      	ldr	r0, [pc, #92]	@ (8016ad0 <tcp_input_delayed_close+0x74>)
 8016a74:	f007 fc0a 	bl	801e28c <iprintf>

  if (recv_flags & TF_CLOSED) {
 8016a78:	4b16      	ldr	r3, [pc, #88]	@ (8016ad4 <tcp_input_delayed_close+0x78>)
 8016a7a:	781b      	ldrb	r3, [r3, #0]
 8016a7c:	f003 0310 	and.w	r3, r3, #16
 8016a80:	2b00      	cmp	r3, #0
 8016a82:	d01c      	beq.n	8016abe <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8016a84:	687b      	ldr	r3, [r7, #4]
 8016a86:	8b5b      	ldrh	r3, [r3, #26]
 8016a88:	f003 0310 	and.w	r3, r3, #16
 8016a8c:	2b00      	cmp	r3, #0
 8016a8e:	d10d      	bne.n	8016aac <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8016a90:	687b      	ldr	r3, [r7, #4]
 8016a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8016a96:	2b00      	cmp	r3, #0
 8016a98:	d008      	beq.n	8016aac <tcp_input_delayed_close+0x50>
 8016a9a:	687b      	ldr	r3, [r7, #4]
 8016a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8016aa0:	687a      	ldr	r2, [r7, #4]
 8016aa2:	6912      	ldr	r2, [r2, #16]
 8016aa4:	f06f 010e 	mvn.w	r1, #14
 8016aa8:	4610      	mov	r0, r2
 8016aaa:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8016aac:	6879      	ldr	r1, [r7, #4]
 8016aae:	480a      	ldr	r0, [pc, #40]	@ (8016ad8 <tcp_input_delayed_close+0x7c>)
 8016ab0:	f7ff fa50 	bl	8015f54 <tcp_pcb_remove>
    tcp_free(pcb);
 8016ab4:	6878      	ldr	r0, [r7, #4]
 8016ab6:	f7fd fddd 	bl	8014674 <tcp_free>
    return 1;
 8016aba:	2301      	movs	r3, #1
 8016abc:	e000      	b.n	8016ac0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8016abe:	2300      	movs	r3, #0
}
 8016ac0:	4618      	mov	r0, r3
 8016ac2:	3708      	adds	r7, #8
 8016ac4:	46bd      	mov	sp, r7
 8016ac6:	bd80      	pop	{r7, pc}
 8016ac8:	080225c0 	.word	0x080225c0
 8016acc:	08022790 	.word	0x08022790
 8016ad0:	0802260c 	.word	0x0802260c
 8016ad4:	2000cb05 	.word	0x2000cb05
 8016ad8:	2000cacc 	.word	0x2000cacc

08016adc <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8016adc:	b590      	push	{r4, r7, lr}
 8016ade:	b08b      	sub	sp, #44	@ 0x2c
 8016ae0:	af04      	add	r7, sp, #16
 8016ae2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8016ae4:	4b6f      	ldr	r3, [pc, #444]	@ (8016ca4 <tcp_listen_input+0x1c8>)
 8016ae6:	781b      	ldrb	r3, [r3, #0]
 8016ae8:	f003 0304 	and.w	r3, r3, #4
 8016aec:	2b00      	cmp	r3, #0
 8016aee:	f040 80d2 	bne.w	8016c96 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8016af2:	687b      	ldr	r3, [r7, #4]
 8016af4:	2b00      	cmp	r3, #0
 8016af6:	d106      	bne.n	8016b06 <tcp_listen_input+0x2a>
 8016af8:	4b6b      	ldr	r3, [pc, #428]	@ (8016ca8 <tcp_listen_input+0x1cc>)
 8016afa:	f240 2281 	movw	r2, #641	@ 0x281
 8016afe:	496b      	ldr	r1, [pc, #428]	@ (8016cac <tcp_listen_input+0x1d0>)
 8016b00:	486b      	ldr	r0, [pc, #428]	@ (8016cb0 <tcp_listen_input+0x1d4>)
 8016b02:	f007 fbc3 	bl	801e28c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8016b06:	4b67      	ldr	r3, [pc, #412]	@ (8016ca4 <tcp_listen_input+0x1c8>)
 8016b08:	781b      	ldrb	r3, [r3, #0]
 8016b0a:	f003 0310 	and.w	r3, r3, #16
 8016b0e:	2b00      	cmp	r3, #0
 8016b10:	d019      	beq.n	8016b46 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016b12:	4b68      	ldr	r3, [pc, #416]	@ (8016cb4 <tcp_listen_input+0x1d8>)
 8016b14:	6819      	ldr	r1, [r3, #0]
 8016b16:	4b68      	ldr	r3, [pc, #416]	@ (8016cb8 <tcp_listen_input+0x1dc>)
 8016b18:	881b      	ldrh	r3, [r3, #0]
 8016b1a:	461a      	mov	r2, r3
 8016b1c:	4b67      	ldr	r3, [pc, #412]	@ (8016cbc <tcp_listen_input+0x1e0>)
 8016b1e:	681b      	ldr	r3, [r3, #0]
 8016b20:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016b22:	4b67      	ldr	r3, [pc, #412]	@ (8016cc0 <tcp_listen_input+0x1e4>)
 8016b24:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016b26:	885b      	ldrh	r3, [r3, #2]
 8016b28:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016b2a:	4a65      	ldr	r2, [pc, #404]	@ (8016cc0 <tcp_listen_input+0x1e4>)
 8016b2c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016b2e:	8812      	ldrh	r2, [r2, #0]
 8016b30:	b292      	uxth	r2, r2
 8016b32:	9202      	str	r2, [sp, #8]
 8016b34:	9301      	str	r3, [sp, #4]
 8016b36:	4b63      	ldr	r3, [pc, #396]	@ (8016cc4 <tcp_listen_input+0x1e8>)
 8016b38:	9300      	str	r3, [sp, #0]
 8016b3a:	4b63      	ldr	r3, [pc, #396]	@ (8016cc8 <tcp_listen_input+0x1ec>)
 8016b3c:	4602      	mov	r2, r0
 8016b3e:	6878      	ldr	r0, [r7, #4]
 8016b40:	f003 fbd2 	bl	801a2e8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8016b44:	e0a9      	b.n	8016c9a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8016b46:	4b57      	ldr	r3, [pc, #348]	@ (8016ca4 <tcp_listen_input+0x1c8>)
 8016b48:	781b      	ldrb	r3, [r3, #0]
 8016b4a:	f003 0302 	and.w	r3, r3, #2
 8016b4e:	2b00      	cmp	r3, #0
 8016b50:	f000 80a3 	beq.w	8016c9a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8016b54:	687b      	ldr	r3, [r7, #4]
 8016b56:	7d5b      	ldrb	r3, [r3, #21]
 8016b58:	4618      	mov	r0, r3
 8016b5a:	f7ff f8a1 	bl	8015ca0 <tcp_alloc>
 8016b5e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8016b60:	697b      	ldr	r3, [r7, #20]
 8016b62:	2b00      	cmp	r3, #0
 8016b64:	d111      	bne.n	8016b8a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8016b66:	687b      	ldr	r3, [r7, #4]
 8016b68:	699b      	ldr	r3, [r3, #24]
 8016b6a:	2b00      	cmp	r3, #0
 8016b6c:	d00a      	beq.n	8016b84 <tcp_listen_input+0xa8>
 8016b6e:	687b      	ldr	r3, [r7, #4]
 8016b70:	699b      	ldr	r3, [r3, #24]
 8016b72:	687a      	ldr	r2, [r7, #4]
 8016b74:	6910      	ldr	r0, [r2, #16]
 8016b76:	f04f 32ff 	mov.w	r2, #4294967295
 8016b7a:	2100      	movs	r1, #0
 8016b7c:	4798      	blx	r3
 8016b7e:	4603      	mov	r3, r0
 8016b80:	73bb      	strb	r3, [r7, #14]
      return;
 8016b82:	e08b      	b.n	8016c9c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8016b84:	23f0      	movs	r3, #240	@ 0xf0
 8016b86:	73bb      	strb	r3, [r7, #14]
      return;
 8016b88:	e088      	b.n	8016c9c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8016b8a:	4b50      	ldr	r3, [pc, #320]	@ (8016ccc <tcp_listen_input+0x1f0>)
 8016b8c:	695a      	ldr	r2, [r3, #20]
 8016b8e:	697b      	ldr	r3, [r7, #20]
 8016b90:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8016b92:	4b4e      	ldr	r3, [pc, #312]	@ (8016ccc <tcp_listen_input+0x1f0>)
 8016b94:	691a      	ldr	r2, [r3, #16]
 8016b96:	697b      	ldr	r3, [r7, #20]
 8016b98:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8016b9a:	687b      	ldr	r3, [r7, #4]
 8016b9c:	8ada      	ldrh	r2, [r3, #22]
 8016b9e:	697b      	ldr	r3, [r7, #20]
 8016ba0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8016ba2:	4b47      	ldr	r3, [pc, #284]	@ (8016cc0 <tcp_listen_input+0x1e4>)
 8016ba4:	681b      	ldr	r3, [r3, #0]
 8016ba6:	881b      	ldrh	r3, [r3, #0]
 8016ba8:	b29a      	uxth	r2, r3
 8016baa:	697b      	ldr	r3, [r7, #20]
 8016bac:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8016bae:	697b      	ldr	r3, [r7, #20]
 8016bb0:	2203      	movs	r2, #3
 8016bb2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8016bb4:	4b41      	ldr	r3, [pc, #260]	@ (8016cbc <tcp_listen_input+0x1e0>)
 8016bb6:	681b      	ldr	r3, [r3, #0]
 8016bb8:	1c5a      	adds	r2, r3, #1
 8016bba:	697b      	ldr	r3, [r7, #20]
 8016bbc:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8016bbe:	697b      	ldr	r3, [r7, #20]
 8016bc0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016bc2:	697b      	ldr	r3, [r7, #20]
 8016bc4:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8016bc6:	6978      	ldr	r0, [r7, #20]
 8016bc8:	f7ff fa58 	bl	801607c <tcp_next_iss>
 8016bcc:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8016bce:	697b      	ldr	r3, [r7, #20]
 8016bd0:	693a      	ldr	r2, [r7, #16]
 8016bd2:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8016bd4:	697b      	ldr	r3, [r7, #20]
 8016bd6:	693a      	ldr	r2, [r7, #16]
 8016bd8:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 8016bda:	697b      	ldr	r3, [r7, #20]
 8016bdc:	693a      	ldr	r2, [r7, #16]
 8016bde:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8016be0:	697b      	ldr	r3, [r7, #20]
 8016be2:	693a      	ldr	r2, [r7, #16]
 8016be4:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8016be6:	4b35      	ldr	r3, [pc, #212]	@ (8016cbc <tcp_listen_input+0x1e0>)
 8016be8:	681b      	ldr	r3, [r3, #0]
 8016bea:	1e5a      	subs	r2, r3, #1
 8016bec:	697b      	ldr	r3, [r7, #20]
 8016bee:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8016bf0:	687b      	ldr	r3, [r7, #4]
 8016bf2:	691a      	ldr	r2, [r3, #16]
 8016bf4:	697b      	ldr	r3, [r7, #20]
 8016bf6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8016bf8:	697b      	ldr	r3, [r7, #20]
 8016bfa:	687a      	ldr	r2, [r7, #4]
 8016bfc:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8016bfe:	687b      	ldr	r3, [r7, #4]
 8016c00:	7a5b      	ldrb	r3, [r3, #9]
 8016c02:	f003 030c 	and.w	r3, r3, #12
 8016c06:	b2da      	uxtb	r2, r3
 8016c08:	697b      	ldr	r3, [r7, #20]
 8016c0a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8016c0c:	687b      	ldr	r3, [r7, #4]
 8016c0e:	7a1a      	ldrb	r2, [r3, #8]
 8016c10:	697b      	ldr	r3, [r7, #20]
 8016c12:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8016c14:	4b2e      	ldr	r3, [pc, #184]	@ (8016cd0 <tcp_listen_input+0x1f4>)
 8016c16:	681a      	ldr	r2, [r3, #0]
 8016c18:	697b      	ldr	r3, [r7, #20]
 8016c1a:	60da      	str	r2, [r3, #12]
 8016c1c:	4a2c      	ldr	r2, [pc, #176]	@ (8016cd0 <tcp_listen_input+0x1f4>)
 8016c1e:	697b      	ldr	r3, [r7, #20]
 8016c20:	6013      	str	r3, [r2, #0]
 8016c22:	f003 fd23 	bl	801a66c <tcp_timer_needed>
 8016c26:	4b2b      	ldr	r3, [pc, #172]	@ (8016cd4 <tcp_listen_input+0x1f8>)
 8016c28:	2201      	movs	r2, #1
 8016c2a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8016c2c:	6978      	ldr	r0, [r7, #20]
 8016c2e:	f001 fd8b 	bl	8018748 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8016c32:	4b23      	ldr	r3, [pc, #140]	@ (8016cc0 <tcp_listen_input+0x1e4>)
 8016c34:	681b      	ldr	r3, [r3, #0]
 8016c36:	89db      	ldrh	r3, [r3, #14]
 8016c38:	b29a      	uxth	r2, r3
 8016c3a:	697b      	ldr	r3, [r7, #20]
 8016c3c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8016c40:	697b      	ldr	r3, [r7, #20]
 8016c42:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8016c46:	697b      	ldr	r3, [r7, #20]
 8016c48:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8016c4c:	697b      	ldr	r3, [r7, #20]
 8016c4e:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8016c50:	697b      	ldr	r3, [r7, #20]
 8016c52:	3304      	adds	r3, #4
 8016c54:	4618      	mov	r0, r3
 8016c56:	f005 f8e5 	bl	801be24 <ip4_route>
 8016c5a:	4601      	mov	r1, r0
 8016c5c:	697b      	ldr	r3, [r7, #20]
 8016c5e:	3304      	adds	r3, #4
 8016c60:	461a      	mov	r2, r3
 8016c62:	4620      	mov	r0, r4
 8016c64:	f7ff fa30 	bl	80160c8 <tcp_eff_send_mss_netif>
 8016c68:	4603      	mov	r3, r0
 8016c6a:	461a      	mov	r2, r3
 8016c6c:	697b      	ldr	r3, [r7, #20]
 8016c6e:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8016c70:	2112      	movs	r1, #18
 8016c72:	6978      	ldr	r0, [r7, #20]
 8016c74:	f002 fc96 	bl	80195a4 <tcp_enqueue_flags>
 8016c78:	4603      	mov	r3, r0
 8016c7a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8016c7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016c80:	2b00      	cmp	r3, #0
 8016c82:	d004      	beq.n	8016c8e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8016c84:	2100      	movs	r1, #0
 8016c86:	6978      	ldr	r0, [r7, #20]
 8016c88:	f7fd ff1e 	bl	8014ac8 <tcp_abandon>
      return;
 8016c8c:	e006      	b.n	8016c9c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8016c8e:	6978      	ldr	r0, [r7, #20]
 8016c90:	f002 fd76 	bl	8019780 <tcp_output>
  return;
 8016c94:	e001      	b.n	8016c9a <tcp_listen_input+0x1be>
    return;
 8016c96:	bf00      	nop
 8016c98:	e000      	b.n	8016c9c <tcp_listen_input+0x1c0>
  return;
 8016c9a:	bf00      	nop
}
 8016c9c:	371c      	adds	r7, #28
 8016c9e:	46bd      	mov	sp, r7
 8016ca0:	bd90      	pop	{r4, r7, pc}
 8016ca2:	bf00      	nop
 8016ca4:	2000cb04 	.word	0x2000cb04
 8016ca8:	080225c0 	.word	0x080225c0
 8016cac:	080227b8 	.word	0x080227b8
 8016cb0:	0802260c 	.word	0x0802260c
 8016cb4:	2000cafc 	.word	0x2000cafc
 8016cb8:	2000cb02 	.word	0x2000cb02
 8016cbc:	2000caf8 	.word	0x2000caf8
 8016cc0:	2000cae8 	.word	0x2000cae8
 8016cc4:	2000937c 	.word	0x2000937c
 8016cc8:	20009380 	.word	0x20009380
 8016ccc:	2000936c 	.word	0x2000936c
 8016cd0:	2000cacc 	.word	0x2000cacc
 8016cd4:	2000cad4 	.word	0x2000cad4

08016cd8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8016cd8:	b580      	push	{r7, lr}
 8016cda:	b086      	sub	sp, #24
 8016cdc:	af04      	add	r7, sp, #16
 8016cde:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8016ce0:	4b2f      	ldr	r3, [pc, #188]	@ (8016da0 <tcp_timewait_input+0xc8>)
 8016ce2:	781b      	ldrb	r3, [r3, #0]
 8016ce4:	f003 0304 	and.w	r3, r3, #4
 8016ce8:	2b00      	cmp	r3, #0
 8016cea:	d153      	bne.n	8016d94 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8016cec:	687b      	ldr	r3, [r7, #4]
 8016cee:	2b00      	cmp	r3, #0
 8016cf0:	d106      	bne.n	8016d00 <tcp_timewait_input+0x28>
 8016cf2:	4b2c      	ldr	r3, [pc, #176]	@ (8016da4 <tcp_timewait_input+0xcc>)
 8016cf4:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8016cf8:	492b      	ldr	r1, [pc, #172]	@ (8016da8 <tcp_timewait_input+0xd0>)
 8016cfa:	482c      	ldr	r0, [pc, #176]	@ (8016dac <tcp_timewait_input+0xd4>)
 8016cfc:	f007 fac6 	bl	801e28c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8016d00:	4b27      	ldr	r3, [pc, #156]	@ (8016da0 <tcp_timewait_input+0xc8>)
 8016d02:	781b      	ldrb	r3, [r3, #0]
 8016d04:	f003 0302 	and.w	r3, r3, #2
 8016d08:	2b00      	cmp	r3, #0
 8016d0a:	d02a      	beq.n	8016d62 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8016d0c:	4b28      	ldr	r3, [pc, #160]	@ (8016db0 <tcp_timewait_input+0xd8>)
 8016d0e:	681a      	ldr	r2, [r3, #0]
 8016d10:	687b      	ldr	r3, [r7, #4]
 8016d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016d14:	1ad3      	subs	r3, r2, r3
 8016d16:	2b00      	cmp	r3, #0
 8016d18:	db2d      	blt.n	8016d76 <tcp_timewait_input+0x9e>
 8016d1a:	4b25      	ldr	r3, [pc, #148]	@ (8016db0 <tcp_timewait_input+0xd8>)
 8016d1c:	681a      	ldr	r2, [r3, #0]
 8016d1e:	687b      	ldr	r3, [r7, #4]
 8016d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016d22:	6879      	ldr	r1, [r7, #4]
 8016d24:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8016d26:	440b      	add	r3, r1
 8016d28:	1ad3      	subs	r3, r2, r3
 8016d2a:	2b00      	cmp	r3, #0
 8016d2c:	dc23      	bgt.n	8016d76 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016d2e:	4b21      	ldr	r3, [pc, #132]	@ (8016db4 <tcp_timewait_input+0xdc>)
 8016d30:	6819      	ldr	r1, [r3, #0]
 8016d32:	4b21      	ldr	r3, [pc, #132]	@ (8016db8 <tcp_timewait_input+0xe0>)
 8016d34:	881b      	ldrh	r3, [r3, #0]
 8016d36:	461a      	mov	r2, r3
 8016d38:	4b1d      	ldr	r3, [pc, #116]	@ (8016db0 <tcp_timewait_input+0xd8>)
 8016d3a:	681b      	ldr	r3, [r3, #0]
 8016d3c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016d3e:	4b1f      	ldr	r3, [pc, #124]	@ (8016dbc <tcp_timewait_input+0xe4>)
 8016d40:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016d42:	885b      	ldrh	r3, [r3, #2]
 8016d44:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016d46:	4a1d      	ldr	r2, [pc, #116]	@ (8016dbc <tcp_timewait_input+0xe4>)
 8016d48:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016d4a:	8812      	ldrh	r2, [r2, #0]
 8016d4c:	b292      	uxth	r2, r2
 8016d4e:	9202      	str	r2, [sp, #8]
 8016d50:	9301      	str	r3, [sp, #4]
 8016d52:	4b1b      	ldr	r3, [pc, #108]	@ (8016dc0 <tcp_timewait_input+0xe8>)
 8016d54:	9300      	str	r3, [sp, #0]
 8016d56:	4b1b      	ldr	r3, [pc, #108]	@ (8016dc4 <tcp_timewait_input+0xec>)
 8016d58:	4602      	mov	r2, r0
 8016d5a:	6878      	ldr	r0, [r7, #4]
 8016d5c:	f003 fac4 	bl	801a2e8 <tcp_rst>
      return;
 8016d60:	e01b      	b.n	8016d9a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8016d62:	4b0f      	ldr	r3, [pc, #60]	@ (8016da0 <tcp_timewait_input+0xc8>)
 8016d64:	781b      	ldrb	r3, [r3, #0]
 8016d66:	f003 0301 	and.w	r3, r3, #1
 8016d6a:	2b00      	cmp	r3, #0
 8016d6c:	d003      	beq.n	8016d76 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8016d6e:	4b16      	ldr	r3, [pc, #88]	@ (8016dc8 <tcp_timewait_input+0xf0>)
 8016d70:	681a      	ldr	r2, [r3, #0]
 8016d72:	687b      	ldr	r3, [r7, #4]
 8016d74:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8016d76:	4b10      	ldr	r3, [pc, #64]	@ (8016db8 <tcp_timewait_input+0xe0>)
 8016d78:	881b      	ldrh	r3, [r3, #0]
 8016d7a:	2b00      	cmp	r3, #0
 8016d7c:	d00c      	beq.n	8016d98 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8016d7e:	687b      	ldr	r3, [r7, #4]
 8016d80:	8b5b      	ldrh	r3, [r3, #26]
 8016d82:	f043 0302 	orr.w	r3, r3, #2
 8016d86:	b29a      	uxth	r2, r3
 8016d88:	687b      	ldr	r3, [r7, #4]
 8016d8a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8016d8c:	6878      	ldr	r0, [r7, #4]
 8016d8e:	f002 fcf7 	bl	8019780 <tcp_output>
  }
  return;
 8016d92:	e001      	b.n	8016d98 <tcp_timewait_input+0xc0>
    return;
 8016d94:	bf00      	nop
 8016d96:	e000      	b.n	8016d9a <tcp_timewait_input+0xc2>
  return;
 8016d98:	bf00      	nop
}
 8016d9a:	3708      	adds	r7, #8
 8016d9c:	46bd      	mov	sp, r7
 8016d9e:	bd80      	pop	{r7, pc}
 8016da0:	2000cb04 	.word	0x2000cb04
 8016da4:	080225c0 	.word	0x080225c0
 8016da8:	080227d8 	.word	0x080227d8
 8016dac:	0802260c 	.word	0x0802260c
 8016db0:	2000caf8 	.word	0x2000caf8
 8016db4:	2000cafc 	.word	0x2000cafc
 8016db8:	2000cb02 	.word	0x2000cb02
 8016dbc:	2000cae8 	.word	0x2000cae8
 8016dc0:	2000937c 	.word	0x2000937c
 8016dc4:	20009380 	.word	0x20009380
 8016dc8:	2000cac0 	.word	0x2000cac0

08016dcc <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8016dcc:	b590      	push	{r4, r7, lr}
 8016dce:	b08d      	sub	sp, #52	@ 0x34
 8016dd0:	af04      	add	r7, sp, #16
 8016dd2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8016dd4:	2300      	movs	r3, #0
 8016dd6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8016dd8:	2300      	movs	r3, #0
 8016dda:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8016ddc:	687b      	ldr	r3, [r7, #4]
 8016dde:	2b00      	cmp	r3, #0
 8016de0:	d106      	bne.n	8016df0 <tcp_process+0x24>
 8016de2:	4b9d      	ldr	r3, [pc, #628]	@ (8017058 <tcp_process+0x28c>)
 8016de4:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8016de8:	499c      	ldr	r1, [pc, #624]	@ (801705c <tcp_process+0x290>)
 8016dea:	489d      	ldr	r0, [pc, #628]	@ (8017060 <tcp_process+0x294>)
 8016dec:	f007 fa4e 	bl	801e28c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8016df0:	4b9c      	ldr	r3, [pc, #624]	@ (8017064 <tcp_process+0x298>)
 8016df2:	781b      	ldrb	r3, [r3, #0]
 8016df4:	f003 0304 	and.w	r3, r3, #4
 8016df8:	2b00      	cmp	r3, #0
 8016dfa:	d04e      	beq.n	8016e9a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8016dfc:	687b      	ldr	r3, [r7, #4]
 8016dfe:	7d1b      	ldrb	r3, [r3, #20]
 8016e00:	2b02      	cmp	r3, #2
 8016e02:	d108      	bne.n	8016e16 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8016e04:	687b      	ldr	r3, [r7, #4]
 8016e06:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8016e08:	4b97      	ldr	r3, [pc, #604]	@ (8017068 <tcp_process+0x29c>)
 8016e0a:	681b      	ldr	r3, [r3, #0]
 8016e0c:	429a      	cmp	r2, r3
 8016e0e:	d123      	bne.n	8016e58 <tcp_process+0x8c>
        acceptable = 1;
 8016e10:	2301      	movs	r3, #1
 8016e12:	76fb      	strb	r3, [r7, #27]
 8016e14:	e020      	b.n	8016e58 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8016e16:	687b      	ldr	r3, [r7, #4]
 8016e18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016e1a:	4b94      	ldr	r3, [pc, #592]	@ (801706c <tcp_process+0x2a0>)
 8016e1c:	681b      	ldr	r3, [r3, #0]
 8016e1e:	429a      	cmp	r2, r3
 8016e20:	d102      	bne.n	8016e28 <tcp_process+0x5c>
        acceptable = 1;
 8016e22:	2301      	movs	r3, #1
 8016e24:	76fb      	strb	r3, [r7, #27]
 8016e26:	e017      	b.n	8016e58 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8016e28:	4b90      	ldr	r3, [pc, #576]	@ (801706c <tcp_process+0x2a0>)
 8016e2a:	681a      	ldr	r2, [r3, #0]
 8016e2c:	687b      	ldr	r3, [r7, #4]
 8016e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016e30:	1ad3      	subs	r3, r2, r3
 8016e32:	2b00      	cmp	r3, #0
 8016e34:	db10      	blt.n	8016e58 <tcp_process+0x8c>
 8016e36:	4b8d      	ldr	r3, [pc, #564]	@ (801706c <tcp_process+0x2a0>)
 8016e38:	681a      	ldr	r2, [r3, #0]
 8016e3a:	687b      	ldr	r3, [r7, #4]
 8016e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016e3e:	6879      	ldr	r1, [r7, #4]
 8016e40:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8016e42:	440b      	add	r3, r1
 8016e44:	1ad3      	subs	r3, r2, r3
 8016e46:	2b00      	cmp	r3, #0
 8016e48:	dc06      	bgt.n	8016e58 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8016e4a:	687b      	ldr	r3, [r7, #4]
 8016e4c:	8b5b      	ldrh	r3, [r3, #26]
 8016e4e:	f043 0302 	orr.w	r3, r3, #2
 8016e52:	b29a      	uxth	r2, r3
 8016e54:	687b      	ldr	r3, [r7, #4]
 8016e56:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8016e58:	7efb      	ldrb	r3, [r7, #27]
 8016e5a:	2b00      	cmp	r3, #0
 8016e5c:	d01b      	beq.n	8016e96 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8016e5e:	687b      	ldr	r3, [r7, #4]
 8016e60:	7d1b      	ldrb	r3, [r3, #20]
 8016e62:	2b00      	cmp	r3, #0
 8016e64:	d106      	bne.n	8016e74 <tcp_process+0xa8>
 8016e66:	4b7c      	ldr	r3, [pc, #496]	@ (8017058 <tcp_process+0x28c>)
 8016e68:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8016e6c:	4980      	ldr	r1, [pc, #512]	@ (8017070 <tcp_process+0x2a4>)
 8016e6e:	487c      	ldr	r0, [pc, #496]	@ (8017060 <tcp_process+0x294>)
 8016e70:	f007 fa0c 	bl	801e28c <iprintf>
      recv_flags |= TF_RESET;
 8016e74:	4b7f      	ldr	r3, [pc, #508]	@ (8017074 <tcp_process+0x2a8>)
 8016e76:	781b      	ldrb	r3, [r3, #0]
 8016e78:	f043 0308 	orr.w	r3, r3, #8
 8016e7c:	b2da      	uxtb	r2, r3
 8016e7e:	4b7d      	ldr	r3, [pc, #500]	@ (8017074 <tcp_process+0x2a8>)
 8016e80:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8016e82:	687b      	ldr	r3, [r7, #4]
 8016e84:	8b5b      	ldrh	r3, [r3, #26]
 8016e86:	f023 0301 	bic.w	r3, r3, #1
 8016e8a:	b29a      	uxth	r2, r3
 8016e8c:	687b      	ldr	r3, [r7, #4]
 8016e8e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8016e90:	f06f 030d 	mvn.w	r3, #13
 8016e94:	e37a      	b.n	801758c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8016e96:	2300      	movs	r3, #0
 8016e98:	e378      	b.n	801758c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8016e9a:	4b72      	ldr	r3, [pc, #456]	@ (8017064 <tcp_process+0x298>)
 8016e9c:	781b      	ldrb	r3, [r3, #0]
 8016e9e:	f003 0302 	and.w	r3, r3, #2
 8016ea2:	2b00      	cmp	r3, #0
 8016ea4:	d010      	beq.n	8016ec8 <tcp_process+0xfc>
 8016ea6:	687b      	ldr	r3, [r7, #4]
 8016ea8:	7d1b      	ldrb	r3, [r3, #20]
 8016eaa:	2b02      	cmp	r3, #2
 8016eac:	d00c      	beq.n	8016ec8 <tcp_process+0xfc>
 8016eae:	687b      	ldr	r3, [r7, #4]
 8016eb0:	7d1b      	ldrb	r3, [r3, #20]
 8016eb2:	2b03      	cmp	r3, #3
 8016eb4:	d008      	beq.n	8016ec8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8016eb6:	687b      	ldr	r3, [r7, #4]
 8016eb8:	8b5b      	ldrh	r3, [r3, #26]
 8016eba:	f043 0302 	orr.w	r3, r3, #2
 8016ebe:	b29a      	uxth	r2, r3
 8016ec0:	687b      	ldr	r3, [r7, #4]
 8016ec2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8016ec4:	2300      	movs	r3, #0
 8016ec6:	e361      	b.n	801758c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8016ec8:	687b      	ldr	r3, [r7, #4]
 8016eca:	8b5b      	ldrh	r3, [r3, #26]
 8016ecc:	f003 0310 	and.w	r3, r3, #16
 8016ed0:	2b00      	cmp	r3, #0
 8016ed2:	d103      	bne.n	8016edc <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8016ed4:	4b68      	ldr	r3, [pc, #416]	@ (8017078 <tcp_process+0x2ac>)
 8016ed6:	681a      	ldr	r2, [r3, #0]
 8016ed8:	687b      	ldr	r3, [r7, #4]
 8016eda:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8016edc:	687b      	ldr	r3, [r7, #4]
 8016ede:	2200      	movs	r2, #0
 8016ee0:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8016ee4:	687b      	ldr	r3, [r7, #4]
 8016ee6:	2200      	movs	r2, #0
 8016ee8:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8016eec:	6878      	ldr	r0, [r7, #4]
 8016eee:	f001 fc2b 	bl	8018748 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8016ef2:	687b      	ldr	r3, [r7, #4]
 8016ef4:	7d1b      	ldrb	r3, [r3, #20]
 8016ef6:	3b02      	subs	r3, #2
 8016ef8:	2b07      	cmp	r3, #7
 8016efa:	f200 8337 	bhi.w	801756c <tcp_process+0x7a0>
 8016efe:	a201      	add	r2, pc, #4	@ (adr r2, 8016f04 <tcp_process+0x138>)
 8016f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016f04:	08016f25 	.word	0x08016f25
 8016f08:	08017155 	.word	0x08017155
 8016f0c:	080172cd 	.word	0x080172cd
 8016f10:	080172f7 	.word	0x080172f7
 8016f14:	0801741b 	.word	0x0801741b
 8016f18:	080172cd 	.word	0x080172cd
 8016f1c:	080174a7 	.word	0x080174a7
 8016f20:	08017537 	.word	0x08017537
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8016f24:	4b4f      	ldr	r3, [pc, #316]	@ (8017064 <tcp_process+0x298>)
 8016f26:	781b      	ldrb	r3, [r3, #0]
 8016f28:	f003 0310 	and.w	r3, r3, #16
 8016f2c:	2b00      	cmp	r3, #0
 8016f2e:	f000 80e4 	beq.w	80170fa <tcp_process+0x32e>
 8016f32:	4b4c      	ldr	r3, [pc, #304]	@ (8017064 <tcp_process+0x298>)
 8016f34:	781b      	ldrb	r3, [r3, #0]
 8016f36:	f003 0302 	and.w	r3, r3, #2
 8016f3a:	2b00      	cmp	r3, #0
 8016f3c:	f000 80dd 	beq.w	80170fa <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8016f40:	687b      	ldr	r3, [r7, #4]
 8016f42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016f44:	1c5a      	adds	r2, r3, #1
 8016f46:	4b48      	ldr	r3, [pc, #288]	@ (8017068 <tcp_process+0x29c>)
 8016f48:	681b      	ldr	r3, [r3, #0]
 8016f4a:	429a      	cmp	r2, r3
 8016f4c:	f040 80d5 	bne.w	80170fa <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8016f50:	4b46      	ldr	r3, [pc, #280]	@ (801706c <tcp_process+0x2a0>)
 8016f52:	681b      	ldr	r3, [r3, #0]
 8016f54:	1c5a      	adds	r2, r3, #1
 8016f56:	687b      	ldr	r3, [r7, #4]
 8016f58:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8016f5a:	687b      	ldr	r3, [r7, #4]
 8016f5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016f5e:	687b      	ldr	r3, [r7, #4]
 8016f60:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 8016f62:	4b41      	ldr	r3, [pc, #260]	@ (8017068 <tcp_process+0x29c>)
 8016f64:	681a      	ldr	r2, [r3, #0]
 8016f66:	687b      	ldr	r3, [r7, #4]
 8016f68:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8016f6a:	4b44      	ldr	r3, [pc, #272]	@ (801707c <tcp_process+0x2b0>)
 8016f6c:	681b      	ldr	r3, [r3, #0]
 8016f6e:	89db      	ldrh	r3, [r3, #14]
 8016f70:	b29a      	uxth	r2, r3
 8016f72:	687b      	ldr	r3, [r7, #4]
 8016f74:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8016f78:	687b      	ldr	r3, [r7, #4]
 8016f7a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8016f7e:	687b      	ldr	r3, [r7, #4]
 8016f80:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8016f84:	4b39      	ldr	r3, [pc, #228]	@ (801706c <tcp_process+0x2a0>)
 8016f86:	681b      	ldr	r3, [r3, #0]
 8016f88:	1e5a      	subs	r2, r3, #1
 8016f8a:	687b      	ldr	r3, [r7, #4]
 8016f8c:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 8016f8e:	687b      	ldr	r3, [r7, #4]
 8016f90:	2204      	movs	r2, #4
 8016f92:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8016f94:	687b      	ldr	r3, [r7, #4]
 8016f96:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8016f98:	687b      	ldr	r3, [r7, #4]
 8016f9a:	3304      	adds	r3, #4
 8016f9c:	4618      	mov	r0, r3
 8016f9e:	f004 ff41 	bl	801be24 <ip4_route>
 8016fa2:	4601      	mov	r1, r0
 8016fa4:	687b      	ldr	r3, [r7, #4]
 8016fa6:	3304      	adds	r3, #4
 8016fa8:	461a      	mov	r2, r3
 8016faa:	4620      	mov	r0, r4
 8016fac:	f7ff f88c 	bl	80160c8 <tcp_eff_send_mss_netif>
 8016fb0:	4603      	mov	r3, r0
 8016fb2:	461a      	mov	r2, r3
 8016fb4:	687b      	ldr	r3, [r7, #4]
 8016fb6:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8016fb8:	687b      	ldr	r3, [r7, #4]
 8016fba:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016fbc:	009a      	lsls	r2, r3, #2
 8016fbe:	687b      	ldr	r3, [r7, #4]
 8016fc0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016fc2:	005b      	lsls	r3, r3, #1
 8016fc4:	f241 111c 	movw	r1, #4380	@ 0x111c
 8016fc8:	428b      	cmp	r3, r1
 8016fca:	bf38      	it	cc
 8016fcc:	460b      	movcc	r3, r1
 8016fce:	429a      	cmp	r2, r3
 8016fd0:	d204      	bcs.n	8016fdc <tcp_process+0x210>
 8016fd2:	687b      	ldr	r3, [r7, #4]
 8016fd4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016fd6:	009b      	lsls	r3, r3, #2
 8016fd8:	b29b      	uxth	r3, r3
 8016fda:	e00d      	b.n	8016ff8 <tcp_process+0x22c>
 8016fdc:	687b      	ldr	r3, [r7, #4]
 8016fde:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016fe0:	005b      	lsls	r3, r3, #1
 8016fe2:	f241 121c 	movw	r2, #4380	@ 0x111c
 8016fe6:	4293      	cmp	r3, r2
 8016fe8:	d904      	bls.n	8016ff4 <tcp_process+0x228>
 8016fea:	687b      	ldr	r3, [r7, #4]
 8016fec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016fee:	005b      	lsls	r3, r3, #1
 8016ff0:	b29b      	uxth	r3, r3
 8016ff2:	e001      	b.n	8016ff8 <tcp_process+0x22c>
 8016ff4:	f241 131c 	movw	r3, #4380	@ 0x111c
 8016ff8:	687a      	ldr	r2, [r7, #4]
 8016ffa:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8016ffe:	687b      	ldr	r3, [r7, #4]
 8017000:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8017004:	2b00      	cmp	r3, #0
 8017006:	d106      	bne.n	8017016 <tcp_process+0x24a>
 8017008:	4b13      	ldr	r3, [pc, #76]	@ (8017058 <tcp_process+0x28c>)
 801700a:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 801700e:	491c      	ldr	r1, [pc, #112]	@ (8017080 <tcp_process+0x2b4>)
 8017010:	4813      	ldr	r0, [pc, #76]	@ (8017060 <tcp_process+0x294>)
 8017012:	f007 f93b 	bl	801e28c <iprintf>
        --pcb->snd_queuelen;
 8017016:	687b      	ldr	r3, [r7, #4]
 8017018:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801701c:	3b01      	subs	r3, #1
 801701e:	b29a      	uxth	r2, r3
 8017020:	687b      	ldr	r3, [r7, #4]
 8017022:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8017026:	687b      	ldr	r3, [r7, #4]
 8017028:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801702a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 801702c:	69fb      	ldr	r3, [r7, #28]
 801702e:	2b00      	cmp	r3, #0
 8017030:	d12a      	bne.n	8017088 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8017032:	687b      	ldr	r3, [r7, #4]
 8017034:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017036:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8017038:	69fb      	ldr	r3, [r7, #28]
 801703a:	2b00      	cmp	r3, #0
 801703c:	d106      	bne.n	801704c <tcp_process+0x280>
 801703e:	4b06      	ldr	r3, [pc, #24]	@ (8017058 <tcp_process+0x28c>)
 8017040:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8017044:	490f      	ldr	r1, [pc, #60]	@ (8017084 <tcp_process+0x2b8>)
 8017046:	4806      	ldr	r0, [pc, #24]	@ (8017060 <tcp_process+0x294>)
 8017048:	f007 f920 	bl	801e28c <iprintf>
          pcb->unsent = rseg->next;
 801704c:	69fb      	ldr	r3, [r7, #28]
 801704e:	681a      	ldr	r2, [r3, #0]
 8017050:	687b      	ldr	r3, [r7, #4]
 8017052:	66da      	str	r2, [r3, #108]	@ 0x6c
 8017054:	e01c      	b.n	8017090 <tcp_process+0x2c4>
 8017056:	bf00      	nop
 8017058:	080225c0 	.word	0x080225c0
 801705c:	080227f8 	.word	0x080227f8
 8017060:	0802260c 	.word	0x0802260c
 8017064:	2000cb04 	.word	0x2000cb04
 8017068:	2000cafc 	.word	0x2000cafc
 801706c:	2000caf8 	.word	0x2000caf8
 8017070:	08022814 	.word	0x08022814
 8017074:	2000cb05 	.word	0x2000cb05
 8017078:	2000cac0 	.word	0x2000cac0
 801707c:	2000cae8 	.word	0x2000cae8
 8017080:	08022834 	.word	0x08022834
 8017084:	0802284c 	.word	0x0802284c
        } else {
          pcb->unacked = rseg->next;
 8017088:	69fb      	ldr	r3, [r7, #28]
 801708a:	681a      	ldr	r2, [r3, #0]
 801708c:	687b      	ldr	r3, [r7, #4]
 801708e:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8017090:	69f8      	ldr	r0, [r7, #28]
 8017092:	f7fe fc7e 	bl	8015992 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8017096:	687b      	ldr	r3, [r7, #4]
 8017098:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801709a:	2b00      	cmp	r3, #0
 801709c:	d104      	bne.n	80170a8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801709e:	687b      	ldr	r3, [r7, #4]
 80170a0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80170a4:	861a      	strh	r2, [r3, #48]	@ 0x30
 80170a6:	e006      	b.n	80170b6 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 80170a8:	687b      	ldr	r3, [r7, #4]
 80170aa:	2200      	movs	r2, #0
 80170ac:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 80170ae:	687b      	ldr	r3, [r7, #4]
 80170b0:	2200      	movs	r2, #0
 80170b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80170b6:	687b      	ldr	r3, [r7, #4]
 80170b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80170bc:	2b00      	cmp	r3, #0
 80170be:	d00a      	beq.n	80170d6 <tcp_process+0x30a>
 80170c0:	687b      	ldr	r3, [r7, #4]
 80170c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80170c6:	687a      	ldr	r2, [r7, #4]
 80170c8:	6910      	ldr	r0, [r2, #16]
 80170ca:	2200      	movs	r2, #0
 80170cc:	6879      	ldr	r1, [r7, #4]
 80170ce:	4798      	blx	r3
 80170d0:	4603      	mov	r3, r0
 80170d2:	76bb      	strb	r3, [r7, #26]
 80170d4:	e001      	b.n	80170da <tcp_process+0x30e>
 80170d6:	2300      	movs	r3, #0
 80170d8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80170da:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80170de:	f113 0f0d 	cmn.w	r3, #13
 80170e2:	d102      	bne.n	80170ea <tcp_process+0x31e>
          return ERR_ABRT;
 80170e4:	f06f 030c 	mvn.w	r3, #12
 80170e8:	e250      	b.n	801758c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80170ea:	687b      	ldr	r3, [r7, #4]
 80170ec:	8b5b      	ldrh	r3, [r3, #26]
 80170ee:	f043 0302 	orr.w	r3, r3, #2
 80170f2:	b29a      	uxth	r2, r3
 80170f4:	687b      	ldr	r3, [r7, #4]
 80170f6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80170f8:	e23a      	b.n	8017570 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80170fa:	4b98      	ldr	r3, [pc, #608]	@ (801735c <tcp_process+0x590>)
 80170fc:	781b      	ldrb	r3, [r3, #0]
 80170fe:	f003 0310 	and.w	r3, r3, #16
 8017102:	2b00      	cmp	r3, #0
 8017104:	f000 8234 	beq.w	8017570 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017108:	4b95      	ldr	r3, [pc, #596]	@ (8017360 <tcp_process+0x594>)
 801710a:	6819      	ldr	r1, [r3, #0]
 801710c:	4b95      	ldr	r3, [pc, #596]	@ (8017364 <tcp_process+0x598>)
 801710e:	881b      	ldrh	r3, [r3, #0]
 8017110:	461a      	mov	r2, r3
 8017112:	4b95      	ldr	r3, [pc, #596]	@ (8017368 <tcp_process+0x59c>)
 8017114:	681b      	ldr	r3, [r3, #0]
 8017116:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017118:	4b94      	ldr	r3, [pc, #592]	@ (801736c <tcp_process+0x5a0>)
 801711a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801711c:	885b      	ldrh	r3, [r3, #2]
 801711e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017120:	4a92      	ldr	r2, [pc, #584]	@ (801736c <tcp_process+0x5a0>)
 8017122:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017124:	8812      	ldrh	r2, [r2, #0]
 8017126:	b292      	uxth	r2, r2
 8017128:	9202      	str	r2, [sp, #8]
 801712a:	9301      	str	r3, [sp, #4]
 801712c:	4b90      	ldr	r3, [pc, #576]	@ (8017370 <tcp_process+0x5a4>)
 801712e:	9300      	str	r3, [sp, #0]
 8017130:	4b90      	ldr	r3, [pc, #576]	@ (8017374 <tcp_process+0x5a8>)
 8017132:	4602      	mov	r2, r0
 8017134:	6878      	ldr	r0, [r7, #4]
 8017136:	f003 f8d7 	bl	801a2e8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801713a:	687b      	ldr	r3, [r7, #4]
 801713c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8017140:	2b05      	cmp	r3, #5
 8017142:	f200 8215 	bhi.w	8017570 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8017146:	687b      	ldr	r3, [r7, #4]
 8017148:	2200      	movs	r2, #0
 801714a:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 801714c:	6878      	ldr	r0, [r7, #4]
 801714e:	f002 fea3 	bl	8019e98 <tcp_rexmit_rto>
      break;
 8017152:	e20d      	b.n	8017570 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8017154:	4b81      	ldr	r3, [pc, #516]	@ (801735c <tcp_process+0x590>)
 8017156:	781b      	ldrb	r3, [r3, #0]
 8017158:	f003 0310 	and.w	r3, r3, #16
 801715c:	2b00      	cmp	r3, #0
 801715e:	f000 80a1 	beq.w	80172a4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8017162:	4b7f      	ldr	r3, [pc, #508]	@ (8017360 <tcp_process+0x594>)
 8017164:	681a      	ldr	r2, [r3, #0]
 8017166:	687b      	ldr	r3, [r7, #4]
 8017168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801716a:	1ad3      	subs	r3, r2, r3
 801716c:	3b01      	subs	r3, #1
 801716e:	2b00      	cmp	r3, #0
 8017170:	db7e      	blt.n	8017270 <tcp_process+0x4a4>
 8017172:	4b7b      	ldr	r3, [pc, #492]	@ (8017360 <tcp_process+0x594>)
 8017174:	681a      	ldr	r2, [r3, #0]
 8017176:	687b      	ldr	r3, [r7, #4]
 8017178:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801717a:	1ad3      	subs	r3, r2, r3
 801717c:	2b00      	cmp	r3, #0
 801717e:	dc77      	bgt.n	8017270 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8017180:	687b      	ldr	r3, [r7, #4]
 8017182:	2204      	movs	r2, #4
 8017184:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8017186:	687b      	ldr	r3, [r7, #4]
 8017188:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801718a:	2b00      	cmp	r3, #0
 801718c:	d102      	bne.n	8017194 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801718e:	23fa      	movs	r3, #250	@ 0xfa
 8017190:	76bb      	strb	r3, [r7, #26]
 8017192:	e01d      	b.n	80171d0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8017194:	687b      	ldr	r3, [r7, #4]
 8017196:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017198:	699b      	ldr	r3, [r3, #24]
 801719a:	2b00      	cmp	r3, #0
 801719c:	d106      	bne.n	80171ac <tcp_process+0x3e0>
 801719e:	4b76      	ldr	r3, [pc, #472]	@ (8017378 <tcp_process+0x5ac>)
 80171a0:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 80171a4:	4975      	ldr	r1, [pc, #468]	@ (801737c <tcp_process+0x5b0>)
 80171a6:	4876      	ldr	r0, [pc, #472]	@ (8017380 <tcp_process+0x5b4>)
 80171a8:	f007 f870 	bl	801e28c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80171ac:	687b      	ldr	r3, [r7, #4]
 80171ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80171b0:	699b      	ldr	r3, [r3, #24]
 80171b2:	2b00      	cmp	r3, #0
 80171b4:	d00a      	beq.n	80171cc <tcp_process+0x400>
 80171b6:	687b      	ldr	r3, [r7, #4]
 80171b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80171ba:	699b      	ldr	r3, [r3, #24]
 80171bc:	687a      	ldr	r2, [r7, #4]
 80171be:	6910      	ldr	r0, [r2, #16]
 80171c0:	2200      	movs	r2, #0
 80171c2:	6879      	ldr	r1, [r7, #4]
 80171c4:	4798      	blx	r3
 80171c6:	4603      	mov	r3, r0
 80171c8:	76bb      	strb	r3, [r7, #26]
 80171ca:	e001      	b.n	80171d0 <tcp_process+0x404>
 80171cc:	23f0      	movs	r3, #240	@ 0xf0
 80171ce:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80171d0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80171d4:	2b00      	cmp	r3, #0
 80171d6:	d00a      	beq.n	80171ee <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80171d8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80171dc:	f113 0f0d 	cmn.w	r3, #13
 80171e0:	d002      	beq.n	80171e8 <tcp_process+0x41c>
              tcp_abort(pcb);
 80171e2:	6878      	ldr	r0, [r7, #4]
 80171e4:	f7fd fd2e 	bl	8014c44 <tcp_abort>
            }
            return ERR_ABRT;
 80171e8:	f06f 030c 	mvn.w	r3, #12
 80171ec:	e1ce      	b.n	801758c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80171ee:	6878      	ldr	r0, [r7, #4]
 80171f0:	f000 fae0 	bl	80177b4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80171f4:	4b63      	ldr	r3, [pc, #396]	@ (8017384 <tcp_process+0x5b8>)
 80171f6:	881b      	ldrh	r3, [r3, #0]
 80171f8:	2b00      	cmp	r3, #0
 80171fa:	d005      	beq.n	8017208 <tcp_process+0x43c>
            recv_acked--;
 80171fc:	4b61      	ldr	r3, [pc, #388]	@ (8017384 <tcp_process+0x5b8>)
 80171fe:	881b      	ldrh	r3, [r3, #0]
 8017200:	3b01      	subs	r3, #1
 8017202:	b29a      	uxth	r2, r3
 8017204:	4b5f      	ldr	r3, [pc, #380]	@ (8017384 <tcp_process+0x5b8>)
 8017206:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8017208:	687b      	ldr	r3, [r7, #4]
 801720a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801720c:	009a      	lsls	r2, r3, #2
 801720e:	687b      	ldr	r3, [r7, #4]
 8017210:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017212:	005b      	lsls	r3, r3, #1
 8017214:	f241 111c 	movw	r1, #4380	@ 0x111c
 8017218:	428b      	cmp	r3, r1
 801721a:	bf38      	it	cc
 801721c:	460b      	movcc	r3, r1
 801721e:	429a      	cmp	r2, r3
 8017220:	d204      	bcs.n	801722c <tcp_process+0x460>
 8017222:	687b      	ldr	r3, [r7, #4]
 8017224:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017226:	009b      	lsls	r3, r3, #2
 8017228:	b29b      	uxth	r3, r3
 801722a:	e00d      	b.n	8017248 <tcp_process+0x47c>
 801722c:	687b      	ldr	r3, [r7, #4]
 801722e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017230:	005b      	lsls	r3, r3, #1
 8017232:	f241 121c 	movw	r2, #4380	@ 0x111c
 8017236:	4293      	cmp	r3, r2
 8017238:	d904      	bls.n	8017244 <tcp_process+0x478>
 801723a:	687b      	ldr	r3, [r7, #4]
 801723c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801723e:	005b      	lsls	r3, r3, #1
 8017240:	b29b      	uxth	r3, r3
 8017242:	e001      	b.n	8017248 <tcp_process+0x47c>
 8017244:	f241 131c 	movw	r3, #4380	@ 0x111c
 8017248:	687a      	ldr	r2, [r7, #4]
 801724a:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801724e:	4b4e      	ldr	r3, [pc, #312]	@ (8017388 <tcp_process+0x5bc>)
 8017250:	781b      	ldrb	r3, [r3, #0]
 8017252:	f003 0320 	and.w	r3, r3, #32
 8017256:	2b00      	cmp	r3, #0
 8017258:	d037      	beq.n	80172ca <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801725a:	687b      	ldr	r3, [r7, #4]
 801725c:	8b5b      	ldrh	r3, [r3, #26]
 801725e:	f043 0302 	orr.w	r3, r3, #2
 8017262:	b29a      	uxth	r2, r3
 8017264:	687b      	ldr	r3, [r7, #4]
 8017266:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8017268:	687b      	ldr	r3, [r7, #4]
 801726a:	2207      	movs	r2, #7
 801726c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801726e:	e02c      	b.n	80172ca <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017270:	4b3b      	ldr	r3, [pc, #236]	@ (8017360 <tcp_process+0x594>)
 8017272:	6819      	ldr	r1, [r3, #0]
 8017274:	4b3b      	ldr	r3, [pc, #236]	@ (8017364 <tcp_process+0x598>)
 8017276:	881b      	ldrh	r3, [r3, #0]
 8017278:	461a      	mov	r2, r3
 801727a:	4b3b      	ldr	r3, [pc, #236]	@ (8017368 <tcp_process+0x59c>)
 801727c:	681b      	ldr	r3, [r3, #0]
 801727e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017280:	4b3a      	ldr	r3, [pc, #232]	@ (801736c <tcp_process+0x5a0>)
 8017282:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017284:	885b      	ldrh	r3, [r3, #2]
 8017286:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017288:	4a38      	ldr	r2, [pc, #224]	@ (801736c <tcp_process+0x5a0>)
 801728a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801728c:	8812      	ldrh	r2, [r2, #0]
 801728e:	b292      	uxth	r2, r2
 8017290:	9202      	str	r2, [sp, #8]
 8017292:	9301      	str	r3, [sp, #4]
 8017294:	4b36      	ldr	r3, [pc, #216]	@ (8017370 <tcp_process+0x5a4>)
 8017296:	9300      	str	r3, [sp, #0]
 8017298:	4b36      	ldr	r3, [pc, #216]	@ (8017374 <tcp_process+0x5a8>)
 801729a:	4602      	mov	r2, r0
 801729c:	6878      	ldr	r0, [r7, #4]
 801729e:	f003 f823 	bl	801a2e8 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80172a2:	e167      	b.n	8017574 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80172a4:	4b2d      	ldr	r3, [pc, #180]	@ (801735c <tcp_process+0x590>)
 80172a6:	781b      	ldrb	r3, [r3, #0]
 80172a8:	f003 0302 	and.w	r3, r3, #2
 80172ac:	2b00      	cmp	r3, #0
 80172ae:	f000 8161 	beq.w	8017574 <tcp_process+0x7a8>
 80172b2:	687b      	ldr	r3, [r7, #4]
 80172b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80172b6:	1e5a      	subs	r2, r3, #1
 80172b8:	4b2b      	ldr	r3, [pc, #172]	@ (8017368 <tcp_process+0x59c>)
 80172ba:	681b      	ldr	r3, [r3, #0]
 80172bc:	429a      	cmp	r2, r3
 80172be:	f040 8159 	bne.w	8017574 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80172c2:	6878      	ldr	r0, [r7, #4]
 80172c4:	f002 fe0a 	bl	8019edc <tcp_rexmit>
      break;
 80172c8:	e154      	b.n	8017574 <tcp_process+0x7a8>
 80172ca:	e153      	b.n	8017574 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80172cc:	6878      	ldr	r0, [r7, #4]
 80172ce:	f000 fa71 	bl	80177b4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80172d2:	4b2d      	ldr	r3, [pc, #180]	@ (8017388 <tcp_process+0x5bc>)
 80172d4:	781b      	ldrb	r3, [r3, #0]
 80172d6:	f003 0320 	and.w	r3, r3, #32
 80172da:	2b00      	cmp	r3, #0
 80172dc:	f000 814c 	beq.w	8017578 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80172e0:	687b      	ldr	r3, [r7, #4]
 80172e2:	8b5b      	ldrh	r3, [r3, #26]
 80172e4:	f043 0302 	orr.w	r3, r3, #2
 80172e8:	b29a      	uxth	r2, r3
 80172ea:	687b      	ldr	r3, [r7, #4]
 80172ec:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80172ee:	687b      	ldr	r3, [r7, #4]
 80172f0:	2207      	movs	r2, #7
 80172f2:	751a      	strb	r2, [r3, #20]
      }
      break;
 80172f4:	e140      	b.n	8017578 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80172f6:	6878      	ldr	r0, [r7, #4]
 80172f8:	f000 fa5c 	bl	80177b4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80172fc:	4b22      	ldr	r3, [pc, #136]	@ (8017388 <tcp_process+0x5bc>)
 80172fe:	781b      	ldrb	r3, [r3, #0]
 8017300:	f003 0320 	and.w	r3, r3, #32
 8017304:	2b00      	cmp	r3, #0
 8017306:	d071      	beq.n	80173ec <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017308:	4b14      	ldr	r3, [pc, #80]	@ (801735c <tcp_process+0x590>)
 801730a:	781b      	ldrb	r3, [r3, #0]
 801730c:	f003 0310 	and.w	r3, r3, #16
 8017310:	2b00      	cmp	r3, #0
 8017312:	d060      	beq.n	80173d6 <tcp_process+0x60a>
 8017314:	687b      	ldr	r3, [r7, #4]
 8017316:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017318:	4b11      	ldr	r3, [pc, #68]	@ (8017360 <tcp_process+0x594>)
 801731a:	681b      	ldr	r3, [r3, #0]
 801731c:	429a      	cmp	r2, r3
 801731e:	d15a      	bne.n	80173d6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8017320:	687b      	ldr	r3, [r7, #4]
 8017322:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017324:	2b00      	cmp	r3, #0
 8017326:	d156      	bne.n	80173d6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8017328:	687b      	ldr	r3, [r7, #4]
 801732a:	8b5b      	ldrh	r3, [r3, #26]
 801732c:	f043 0302 	orr.w	r3, r3, #2
 8017330:	b29a      	uxth	r2, r3
 8017332:	687b      	ldr	r3, [r7, #4]
 8017334:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8017336:	6878      	ldr	r0, [r7, #4]
 8017338:	f7fe fdbc 	bl	8015eb4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801733c:	4b13      	ldr	r3, [pc, #76]	@ (801738c <tcp_process+0x5c0>)
 801733e:	681b      	ldr	r3, [r3, #0]
 8017340:	687a      	ldr	r2, [r7, #4]
 8017342:	429a      	cmp	r2, r3
 8017344:	d105      	bne.n	8017352 <tcp_process+0x586>
 8017346:	4b11      	ldr	r3, [pc, #68]	@ (801738c <tcp_process+0x5c0>)
 8017348:	681b      	ldr	r3, [r3, #0]
 801734a:	68db      	ldr	r3, [r3, #12]
 801734c:	4a0f      	ldr	r2, [pc, #60]	@ (801738c <tcp_process+0x5c0>)
 801734e:	6013      	str	r3, [r2, #0]
 8017350:	e02e      	b.n	80173b0 <tcp_process+0x5e4>
 8017352:	4b0e      	ldr	r3, [pc, #56]	@ (801738c <tcp_process+0x5c0>)
 8017354:	681b      	ldr	r3, [r3, #0]
 8017356:	617b      	str	r3, [r7, #20]
 8017358:	e027      	b.n	80173aa <tcp_process+0x5de>
 801735a:	bf00      	nop
 801735c:	2000cb04 	.word	0x2000cb04
 8017360:	2000cafc 	.word	0x2000cafc
 8017364:	2000cb02 	.word	0x2000cb02
 8017368:	2000caf8 	.word	0x2000caf8
 801736c:	2000cae8 	.word	0x2000cae8
 8017370:	2000937c 	.word	0x2000937c
 8017374:	20009380 	.word	0x20009380
 8017378:	080225c0 	.word	0x080225c0
 801737c:	08022860 	.word	0x08022860
 8017380:	0802260c 	.word	0x0802260c
 8017384:	2000cb00 	.word	0x2000cb00
 8017388:	2000cb05 	.word	0x2000cb05
 801738c:	2000cacc 	.word	0x2000cacc
 8017390:	697b      	ldr	r3, [r7, #20]
 8017392:	68db      	ldr	r3, [r3, #12]
 8017394:	687a      	ldr	r2, [r7, #4]
 8017396:	429a      	cmp	r2, r3
 8017398:	d104      	bne.n	80173a4 <tcp_process+0x5d8>
 801739a:	687b      	ldr	r3, [r7, #4]
 801739c:	68da      	ldr	r2, [r3, #12]
 801739e:	697b      	ldr	r3, [r7, #20]
 80173a0:	60da      	str	r2, [r3, #12]
 80173a2:	e005      	b.n	80173b0 <tcp_process+0x5e4>
 80173a4:	697b      	ldr	r3, [r7, #20]
 80173a6:	68db      	ldr	r3, [r3, #12]
 80173a8:	617b      	str	r3, [r7, #20]
 80173aa:	697b      	ldr	r3, [r7, #20]
 80173ac:	2b00      	cmp	r3, #0
 80173ae:	d1ef      	bne.n	8017390 <tcp_process+0x5c4>
 80173b0:	687b      	ldr	r3, [r7, #4]
 80173b2:	2200      	movs	r2, #0
 80173b4:	60da      	str	r2, [r3, #12]
 80173b6:	4b77      	ldr	r3, [pc, #476]	@ (8017594 <tcp_process+0x7c8>)
 80173b8:	2201      	movs	r2, #1
 80173ba:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80173bc:	687b      	ldr	r3, [r7, #4]
 80173be:	220a      	movs	r2, #10
 80173c0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80173c2:	4b75      	ldr	r3, [pc, #468]	@ (8017598 <tcp_process+0x7cc>)
 80173c4:	681a      	ldr	r2, [r3, #0]
 80173c6:	687b      	ldr	r3, [r7, #4]
 80173c8:	60da      	str	r2, [r3, #12]
 80173ca:	4a73      	ldr	r2, [pc, #460]	@ (8017598 <tcp_process+0x7cc>)
 80173cc:	687b      	ldr	r3, [r7, #4]
 80173ce:	6013      	str	r3, [r2, #0]
 80173d0:	f003 f94c 	bl	801a66c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80173d4:	e0d2      	b.n	801757c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80173d6:	687b      	ldr	r3, [r7, #4]
 80173d8:	8b5b      	ldrh	r3, [r3, #26]
 80173da:	f043 0302 	orr.w	r3, r3, #2
 80173de:	b29a      	uxth	r2, r3
 80173e0:	687b      	ldr	r3, [r7, #4]
 80173e2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80173e4:	687b      	ldr	r3, [r7, #4]
 80173e6:	2208      	movs	r2, #8
 80173e8:	751a      	strb	r2, [r3, #20]
      break;
 80173ea:	e0c7      	b.n	801757c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80173ec:	4b6b      	ldr	r3, [pc, #428]	@ (801759c <tcp_process+0x7d0>)
 80173ee:	781b      	ldrb	r3, [r3, #0]
 80173f0:	f003 0310 	and.w	r3, r3, #16
 80173f4:	2b00      	cmp	r3, #0
 80173f6:	f000 80c1 	beq.w	801757c <tcp_process+0x7b0>
 80173fa:	687b      	ldr	r3, [r7, #4]
 80173fc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80173fe:	4b68      	ldr	r3, [pc, #416]	@ (80175a0 <tcp_process+0x7d4>)
 8017400:	681b      	ldr	r3, [r3, #0]
 8017402:	429a      	cmp	r2, r3
 8017404:	f040 80ba 	bne.w	801757c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8017408:	687b      	ldr	r3, [r7, #4]
 801740a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801740c:	2b00      	cmp	r3, #0
 801740e:	f040 80b5 	bne.w	801757c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8017412:	687b      	ldr	r3, [r7, #4]
 8017414:	2206      	movs	r2, #6
 8017416:	751a      	strb	r2, [r3, #20]
      break;
 8017418:	e0b0      	b.n	801757c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801741a:	6878      	ldr	r0, [r7, #4]
 801741c:	f000 f9ca 	bl	80177b4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8017420:	4b60      	ldr	r3, [pc, #384]	@ (80175a4 <tcp_process+0x7d8>)
 8017422:	781b      	ldrb	r3, [r3, #0]
 8017424:	f003 0320 	and.w	r3, r3, #32
 8017428:	2b00      	cmp	r3, #0
 801742a:	f000 80a9 	beq.w	8017580 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801742e:	687b      	ldr	r3, [r7, #4]
 8017430:	8b5b      	ldrh	r3, [r3, #26]
 8017432:	f043 0302 	orr.w	r3, r3, #2
 8017436:	b29a      	uxth	r2, r3
 8017438:	687b      	ldr	r3, [r7, #4]
 801743a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801743c:	6878      	ldr	r0, [r7, #4]
 801743e:	f7fe fd39 	bl	8015eb4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8017442:	4b59      	ldr	r3, [pc, #356]	@ (80175a8 <tcp_process+0x7dc>)
 8017444:	681b      	ldr	r3, [r3, #0]
 8017446:	687a      	ldr	r2, [r7, #4]
 8017448:	429a      	cmp	r2, r3
 801744a:	d105      	bne.n	8017458 <tcp_process+0x68c>
 801744c:	4b56      	ldr	r3, [pc, #344]	@ (80175a8 <tcp_process+0x7dc>)
 801744e:	681b      	ldr	r3, [r3, #0]
 8017450:	68db      	ldr	r3, [r3, #12]
 8017452:	4a55      	ldr	r2, [pc, #340]	@ (80175a8 <tcp_process+0x7dc>)
 8017454:	6013      	str	r3, [r2, #0]
 8017456:	e013      	b.n	8017480 <tcp_process+0x6b4>
 8017458:	4b53      	ldr	r3, [pc, #332]	@ (80175a8 <tcp_process+0x7dc>)
 801745a:	681b      	ldr	r3, [r3, #0]
 801745c:	613b      	str	r3, [r7, #16]
 801745e:	e00c      	b.n	801747a <tcp_process+0x6ae>
 8017460:	693b      	ldr	r3, [r7, #16]
 8017462:	68db      	ldr	r3, [r3, #12]
 8017464:	687a      	ldr	r2, [r7, #4]
 8017466:	429a      	cmp	r2, r3
 8017468:	d104      	bne.n	8017474 <tcp_process+0x6a8>
 801746a:	687b      	ldr	r3, [r7, #4]
 801746c:	68da      	ldr	r2, [r3, #12]
 801746e:	693b      	ldr	r3, [r7, #16]
 8017470:	60da      	str	r2, [r3, #12]
 8017472:	e005      	b.n	8017480 <tcp_process+0x6b4>
 8017474:	693b      	ldr	r3, [r7, #16]
 8017476:	68db      	ldr	r3, [r3, #12]
 8017478:	613b      	str	r3, [r7, #16]
 801747a:	693b      	ldr	r3, [r7, #16]
 801747c:	2b00      	cmp	r3, #0
 801747e:	d1ef      	bne.n	8017460 <tcp_process+0x694>
 8017480:	687b      	ldr	r3, [r7, #4]
 8017482:	2200      	movs	r2, #0
 8017484:	60da      	str	r2, [r3, #12]
 8017486:	4b43      	ldr	r3, [pc, #268]	@ (8017594 <tcp_process+0x7c8>)
 8017488:	2201      	movs	r2, #1
 801748a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801748c:	687b      	ldr	r3, [r7, #4]
 801748e:	220a      	movs	r2, #10
 8017490:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8017492:	4b41      	ldr	r3, [pc, #260]	@ (8017598 <tcp_process+0x7cc>)
 8017494:	681a      	ldr	r2, [r3, #0]
 8017496:	687b      	ldr	r3, [r7, #4]
 8017498:	60da      	str	r2, [r3, #12]
 801749a:	4a3f      	ldr	r2, [pc, #252]	@ (8017598 <tcp_process+0x7cc>)
 801749c:	687b      	ldr	r3, [r7, #4]
 801749e:	6013      	str	r3, [r2, #0]
 80174a0:	f003 f8e4 	bl	801a66c <tcp_timer_needed>
      }
      break;
 80174a4:	e06c      	b.n	8017580 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80174a6:	6878      	ldr	r0, [r7, #4]
 80174a8:	f000 f984 	bl	80177b4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80174ac:	4b3b      	ldr	r3, [pc, #236]	@ (801759c <tcp_process+0x7d0>)
 80174ae:	781b      	ldrb	r3, [r3, #0]
 80174b0:	f003 0310 	and.w	r3, r3, #16
 80174b4:	2b00      	cmp	r3, #0
 80174b6:	d065      	beq.n	8017584 <tcp_process+0x7b8>
 80174b8:	687b      	ldr	r3, [r7, #4]
 80174ba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80174bc:	4b38      	ldr	r3, [pc, #224]	@ (80175a0 <tcp_process+0x7d4>)
 80174be:	681b      	ldr	r3, [r3, #0]
 80174c0:	429a      	cmp	r2, r3
 80174c2:	d15f      	bne.n	8017584 <tcp_process+0x7b8>
 80174c4:	687b      	ldr	r3, [r7, #4]
 80174c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80174c8:	2b00      	cmp	r3, #0
 80174ca:	d15b      	bne.n	8017584 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80174cc:	6878      	ldr	r0, [r7, #4]
 80174ce:	f7fe fcf1 	bl	8015eb4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80174d2:	4b35      	ldr	r3, [pc, #212]	@ (80175a8 <tcp_process+0x7dc>)
 80174d4:	681b      	ldr	r3, [r3, #0]
 80174d6:	687a      	ldr	r2, [r7, #4]
 80174d8:	429a      	cmp	r2, r3
 80174da:	d105      	bne.n	80174e8 <tcp_process+0x71c>
 80174dc:	4b32      	ldr	r3, [pc, #200]	@ (80175a8 <tcp_process+0x7dc>)
 80174de:	681b      	ldr	r3, [r3, #0]
 80174e0:	68db      	ldr	r3, [r3, #12]
 80174e2:	4a31      	ldr	r2, [pc, #196]	@ (80175a8 <tcp_process+0x7dc>)
 80174e4:	6013      	str	r3, [r2, #0]
 80174e6:	e013      	b.n	8017510 <tcp_process+0x744>
 80174e8:	4b2f      	ldr	r3, [pc, #188]	@ (80175a8 <tcp_process+0x7dc>)
 80174ea:	681b      	ldr	r3, [r3, #0]
 80174ec:	60fb      	str	r3, [r7, #12]
 80174ee:	e00c      	b.n	801750a <tcp_process+0x73e>
 80174f0:	68fb      	ldr	r3, [r7, #12]
 80174f2:	68db      	ldr	r3, [r3, #12]
 80174f4:	687a      	ldr	r2, [r7, #4]
 80174f6:	429a      	cmp	r2, r3
 80174f8:	d104      	bne.n	8017504 <tcp_process+0x738>
 80174fa:	687b      	ldr	r3, [r7, #4]
 80174fc:	68da      	ldr	r2, [r3, #12]
 80174fe:	68fb      	ldr	r3, [r7, #12]
 8017500:	60da      	str	r2, [r3, #12]
 8017502:	e005      	b.n	8017510 <tcp_process+0x744>
 8017504:	68fb      	ldr	r3, [r7, #12]
 8017506:	68db      	ldr	r3, [r3, #12]
 8017508:	60fb      	str	r3, [r7, #12]
 801750a:	68fb      	ldr	r3, [r7, #12]
 801750c:	2b00      	cmp	r3, #0
 801750e:	d1ef      	bne.n	80174f0 <tcp_process+0x724>
 8017510:	687b      	ldr	r3, [r7, #4]
 8017512:	2200      	movs	r2, #0
 8017514:	60da      	str	r2, [r3, #12]
 8017516:	4b1f      	ldr	r3, [pc, #124]	@ (8017594 <tcp_process+0x7c8>)
 8017518:	2201      	movs	r2, #1
 801751a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801751c:	687b      	ldr	r3, [r7, #4]
 801751e:	220a      	movs	r2, #10
 8017520:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8017522:	4b1d      	ldr	r3, [pc, #116]	@ (8017598 <tcp_process+0x7cc>)
 8017524:	681a      	ldr	r2, [r3, #0]
 8017526:	687b      	ldr	r3, [r7, #4]
 8017528:	60da      	str	r2, [r3, #12]
 801752a:	4a1b      	ldr	r2, [pc, #108]	@ (8017598 <tcp_process+0x7cc>)
 801752c:	687b      	ldr	r3, [r7, #4]
 801752e:	6013      	str	r3, [r2, #0]
 8017530:	f003 f89c 	bl	801a66c <tcp_timer_needed>
      }
      break;
 8017534:	e026      	b.n	8017584 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8017536:	6878      	ldr	r0, [r7, #4]
 8017538:	f000 f93c 	bl	80177b4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801753c:	4b17      	ldr	r3, [pc, #92]	@ (801759c <tcp_process+0x7d0>)
 801753e:	781b      	ldrb	r3, [r3, #0]
 8017540:	f003 0310 	and.w	r3, r3, #16
 8017544:	2b00      	cmp	r3, #0
 8017546:	d01f      	beq.n	8017588 <tcp_process+0x7bc>
 8017548:	687b      	ldr	r3, [r7, #4]
 801754a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801754c:	4b14      	ldr	r3, [pc, #80]	@ (80175a0 <tcp_process+0x7d4>)
 801754e:	681b      	ldr	r3, [r3, #0]
 8017550:	429a      	cmp	r2, r3
 8017552:	d119      	bne.n	8017588 <tcp_process+0x7bc>
 8017554:	687b      	ldr	r3, [r7, #4]
 8017556:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017558:	2b00      	cmp	r3, #0
 801755a:	d115      	bne.n	8017588 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801755c:	4b11      	ldr	r3, [pc, #68]	@ (80175a4 <tcp_process+0x7d8>)
 801755e:	781b      	ldrb	r3, [r3, #0]
 8017560:	f043 0310 	orr.w	r3, r3, #16
 8017564:	b2da      	uxtb	r2, r3
 8017566:	4b0f      	ldr	r3, [pc, #60]	@ (80175a4 <tcp_process+0x7d8>)
 8017568:	701a      	strb	r2, [r3, #0]
      }
      break;
 801756a:	e00d      	b.n	8017588 <tcp_process+0x7bc>
    default:
      break;
 801756c:	bf00      	nop
 801756e:	e00c      	b.n	801758a <tcp_process+0x7be>
      break;
 8017570:	bf00      	nop
 8017572:	e00a      	b.n	801758a <tcp_process+0x7be>
      break;
 8017574:	bf00      	nop
 8017576:	e008      	b.n	801758a <tcp_process+0x7be>
      break;
 8017578:	bf00      	nop
 801757a:	e006      	b.n	801758a <tcp_process+0x7be>
      break;
 801757c:	bf00      	nop
 801757e:	e004      	b.n	801758a <tcp_process+0x7be>
      break;
 8017580:	bf00      	nop
 8017582:	e002      	b.n	801758a <tcp_process+0x7be>
      break;
 8017584:	bf00      	nop
 8017586:	e000      	b.n	801758a <tcp_process+0x7be>
      break;
 8017588:	bf00      	nop
  }
  return ERR_OK;
 801758a:	2300      	movs	r3, #0
}
 801758c:	4618      	mov	r0, r3
 801758e:	3724      	adds	r7, #36	@ 0x24
 8017590:	46bd      	mov	sp, r7
 8017592:	bd90      	pop	{r4, r7, pc}
 8017594:	2000cad4 	.word	0x2000cad4
 8017598:	2000cad0 	.word	0x2000cad0
 801759c:	2000cb04 	.word	0x2000cb04
 80175a0:	2000cafc 	.word	0x2000cafc
 80175a4:	2000cb05 	.word	0x2000cb05
 80175a8:	2000cacc 	.word	0x2000cacc

080175ac <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80175ac:	b590      	push	{r4, r7, lr}
 80175ae:	b085      	sub	sp, #20
 80175b0:	af00      	add	r7, sp, #0
 80175b2:	6078      	str	r0, [r7, #4]
 80175b4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80175b6:	687b      	ldr	r3, [r7, #4]
 80175b8:	2b00      	cmp	r3, #0
 80175ba:	d106      	bne.n	80175ca <tcp_oos_insert_segment+0x1e>
 80175bc:	4b3b      	ldr	r3, [pc, #236]	@ (80176ac <tcp_oos_insert_segment+0x100>)
 80175be:	f240 421f 	movw	r2, #1055	@ 0x41f
 80175c2:	493b      	ldr	r1, [pc, #236]	@ (80176b0 <tcp_oos_insert_segment+0x104>)
 80175c4:	483b      	ldr	r0, [pc, #236]	@ (80176b4 <tcp_oos_insert_segment+0x108>)
 80175c6:	f006 fe61 	bl	801e28c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80175ca:	687b      	ldr	r3, [r7, #4]
 80175cc:	68db      	ldr	r3, [r3, #12]
 80175ce:	899b      	ldrh	r3, [r3, #12]
 80175d0:	b29b      	uxth	r3, r3
 80175d2:	4618      	mov	r0, r3
 80175d4:	f7fb f9e2 	bl	801299c <lwip_htons>
 80175d8:	4603      	mov	r3, r0
 80175da:	b2db      	uxtb	r3, r3
 80175dc:	f003 0301 	and.w	r3, r3, #1
 80175e0:	2b00      	cmp	r3, #0
 80175e2:	d028      	beq.n	8017636 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80175e4:	6838      	ldr	r0, [r7, #0]
 80175e6:	f7fe f9bf 	bl	8015968 <tcp_segs_free>
    next = NULL;
 80175ea:	2300      	movs	r3, #0
 80175ec:	603b      	str	r3, [r7, #0]
 80175ee:	e056      	b.n	801769e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80175f0:	683b      	ldr	r3, [r7, #0]
 80175f2:	68db      	ldr	r3, [r3, #12]
 80175f4:	899b      	ldrh	r3, [r3, #12]
 80175f6:	b29b      	uxth	r3, r3
 80175f8:	4618      	mov	r0, r3
 80175fa:	f7fb f9cf 	bl	801299c <lwip_htons>
 80175fe:	4603      	mov	r3, r0
 8017600:	b2db      	uxtb	r3, r3
 8017602:	f003 0301 	and.w	r3, r3, #1
 8017606:	2b00      	cmp	r3, #0
 8017608:	d00d      	beq.n	8017626 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801760a:	687b      	ldr	r3, [r7, #4]
 801760c:	68db      	ldr	r3, [r3, #12]
 801760e:	899b      	ldrh	r3, [r3, #12]
 8017610:	b29c      	uxth	r4, r3
 8017612:	2001      	movs	r0, #1
 8017614:	f7fb f9c2 	bl	801299c <lwip_htons>
 8017618:	4603      	mov	r3, r0
 801761a:	461a      	mov	r2, r3
 801761c:	687b      	ldr	r3, [r7, #4]
 801761e:	68db      	ldr	r3, [r3, #12]
 8017620:	4322      	orrs	r2, r4
 8017622:	b292      	uxth	r2, r2
 8017624:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8017626:	683b      	ldr	r3, [r7, #0]
 8017628:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801762a:	683b      	ldr	r3, [r7, #0]
 801762c:	681b      	ldr	r3, [r3, #0]
 801762e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8017630:	68f8      	ldr	r0, [r7, #12]
 8017632:	f7fe f9ae 	bl	8015992 <tcp_seg_free>
    while (next &&
 8017636:	683b      	ldr	r3, [r7, #0]
 8017638:	2b00      	cmp	r3, #0
 801763a:	d00e      	beq.n	801765a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801763c:	687b      	ldr	r3, [r7, #4]
 801763e:	891b      	ldrh	r3, [r3, #8]
 8017640:	461a      	mov	r2, r3
 8017642:	4b1d      	ldr	r3, [pc, #116]	@ (80176b8 <tcp_oos_insert_segment+0x10c>)
 8017644:	681b      	ldr	r3, [r3, #0]
 8017646:	441a      	add	r2, r3
 8017648:	683b      	ldr	r3, [r7, #0]
 801764a:	68db      	ldr	r3, [r3, #12]
 801764c:	685b      	ldr	r3, [r3, #4]
 801764e:	6839      	ldr	r1, [r7, #0]
 8017650:	8909      	ldrh	r1, [r1, #8]
 8017652:	440b      	add	r3, r1
 8017654:	1ad3      	subs	r3, r2, r3
    while (next &&
 8017656:	2b00      	cmp	r3, #0
 8017658:	daca      	bge.n	80175f0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801765a:	683b      	ldr	r3, [r7, #0]
 801765c:	2b00      	cmp	r3, #0
 801765e:	d01e      	beq.n	801769e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8017660:	687b      	ldr	r3, [r7, #4]
 8017662:	891b      	ldrh	r3, [r3, #8]
 8017664:	461a      	mov	r2, r3
 8017666:	4b14      	ldr	r3, [pc, #80]	@ (80176b8 <tcp_oos_insert_segment+0x10c>)
 8017668:	681b      	ldr	r3, [r3, #0]
 801766a:	441a      	add	r2, r3
 801766c:	683b      	ldr	r3, [r7, #0]
 801766e:	68db      	ldr	r3, [r3, #12]
 8017670:	685b      	ldr	r3, [r3, #4]
 8017672:	1ad3      	subs	r3, r2, r3
    if (next &&
 8017674:	2b00      	cmp	r3, #0
 8017676:	dd12      	ble.n	801769e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8017678:	683b      	ldr	r3, [r7, #0]
 801767a:	68db      	ldr	r3, [r3, #12]
 801767c:	685b      	ldr	r3, [r3, #4]
 801767e:	b29a      	uxth	r2, r3
 8017680:	4b0d      	ldr	r3, [pc, #52]	@ (80176b8 <tcp_oos_insert_segment+0x10c>)
 8017682:	681b      	ldr	r3, [r3, #0]
 8017684:	b29b      	uxth	r3, r3
 8017686:	1ad3      	subs	r3, r2, r3
 8017688:	b29a      	uxth	r2, r3
 801768a:	687b      	ldr	r3, [r7, #4]
 801768c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801768e:	687b      	ldr	r3, [r7, #4]
 8017690:	685a      	ldr	r2, [r3, #4]
 8017692:	687b      	ldr	r3, [r7, #4]
 8017694:	891b      	ldrh	r3, [r3, #8]
 8017696:	4619      	mov	r1, r3
 8017698:	4610      	mov	r0, r2
 801769a:	f7fc fbb9 	bl	8013e10 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801769e:	687b      	ldr	r3, [r7, #4]
 80176a0:	683a      	ldr	r2, [r7, #0]
 80176a2:	601a      	str	r2, [r3, #0]
}
 80176a4:	bf00      	nop
 80176a6:	3714      	adds	r7, #20
 80176a8:	46bd      	mov	sp, r7
 80176aa:	bd90      	pop	{r4, r7, pc}
 80176ac:	080225c0 	.word	0x080225c0
 80176b0:	08022880 	.word	0x08022880
 80176b4:	0802260c 	.word	0x0802260c
 80176b8:	2000caf8 	.word	0x2000caf8

080176bc <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80176bc:	b5b0      	push	{r4, r5, r7, lr}
 80176be:	b086      	sub	sp, #24
 80176c0:	af00      	add	r7, sp, #0
 80176c2:	60f8      	str	r0, [r7, #12]
 80176c4:	60b9      	str	r1, [r7, #8]
 80176c6:	607a      	str	r2, [r7, #4]
 80176c8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80176ca:	e03e      	b.n	801774a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80176cc:	68bb      	ldr	r3, [r7, #8]
 80176ce:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80176d0:	68bb      	ldr	r3, [r7, #8]
 80176d2:	681b      	ldr	r3, [r3, #0]
 80176d4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80176d6:	697b      	ldr	r3, [r7, #20]
 80176d8:	685b      	ldr	r3, [r3, #4]
 80176da:	4618      	mov	r0, r3
 80176dc:	f7fc fdac 	bl	8014238 <pbuf_clen>
 80176e0:	4603      	mov	r3, r0
 80176e2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80176e4:	68fb      	ldr	r3, [r7, #12]
 80176e6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80176ea:	8a7a      	ldrh	r2, [r7, #18]
 80176ec:	429a      	cmp	r2, r3
 80176ee:	d906      	bls.n	80176fe <tcp_free_acked_segments+0x42>
 80176f0:	4b2a      	ldr	r3, [pc, #168]	@ (801779c <tcp_free_acked_segments+0xe0>)
 80176f2:	f240 4257 	movw	r2, #1111	@ 0x457
 80176f6:	492a      	ldr	r1, [pc, #168]	@ (80177a0 <tcp_free_acked_segments+0xe4>)
 80176f8:	482a      	ldr	r0, [pc, #168]	@ (80177a4 <tcp_free_acked_segments+0xe8>)
 80176fa:	f006 fdc7 	bl	801e28c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80176fe:	68fb      	ldr	r3, [r7, #12]
 8017700:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8017704:	8a7b      	ldrh	r3, [r7, #18]
 8017706:	1ad3      	subs	r3, r2, r3
 8017708:	b29a      	uxth	r2, r3
 801770a:	68fb      	ldr	r3, [r7, #12]
 801770c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8017710:	697b      	ldr	r3, [r7, #20]
 8017712:	891a      	ldrh	r2, [r3, #8]
 8017714:	4b24      	ldr	r3, [pc, #144]	@ (80177a8 <tcp_free_acked_segments+0xec>)
 8017716:	881b      	ldrh	r3, [r3, #0]
 8017718:	4413      	add	r3, r2
 801771a:	b29a      	uxth	r2, r3
 801771c:	4b22      	ldr	r3, [pc, #136]	@ (80177a8 <tcp_free_acked_segments+0xec>)
 801771e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8017720:	6978      	ldr	r0, [r7, #20]
 8017722:	f7fe f936 	bl	8015992 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8017726:	68fb      	ldr	r3, [r7, #12]
 8017728:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801772c:	2b00      	cmp	r3, #0
 801772e:	d00c      	beq.n	801774a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8017730:	68bb      	ldr	r3, [r7, #8]
 8017732:	2b00      	cmp	r3, #0
 8017734:	d109      	bne.n	801774a <tcp_free_acked_segments+0x8e>
 8017736:	683b      	ldr	r3, [r7, #0]
 8017738:	2b00      	cmp	r3, #0
 801773a:	d106      	bne.n	801774a <tcp_free_acked_segments+0x8e>
 801773c:	4b17      	ldr	r3, [pc, #92]	@ (801779c <tcp_free_acked_segments+0xe0>)
 801773e:	f240 4261 	movw	r2, #1121	@ 0x461
 8017742:	491a      	ldr	r1, [pc, #104]	@ (80177ac <tcp_free_acked_segments+0xf0>)
 8017744:	4817      	ldr	r0, [pc, #92]	@ (80177a4 <tcp_free_acked_segments+0xe8>)
 8017746:	f006 fda1 	bl	801e28c <iprintf>
  while (seg_list != NULL &&
 801774a:	68bb      	ldr	r3, [r7, #8]
 801774c:	2b00      	cmp	r3, #0
 801774e:	d020      	beq.n	8017792 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8017750:	68bb      	ldr	r3, [r7, #8]
 8017752:	68db      	ldr	r3, [r3, #12]
 8017754:	685b      	ldr	r3, [r3, #4]
 8017756:	4618      	mov	r0, r3
 8017758:	f7fb f936 	bl	80129c8 <lwip_htonl>
 801775c:	4604      	mov	r4, r0
 801775e:	68bb      	ldr	r3, [r7, #8]
 8017760:	891b      	ldrh	r3, [r3, #8]
 8017762:	461d      	mov	r5, r3
 8017764:	68bb      	ldr	r3, [r7, #8]
 8017766:	68db      	ldr	r3, [r3, #12]
 8017768:	899b      	ldrh	r3, [r3, #12]
 801776a:	b29b      	uxth	r3, r3
 801776c:	4618      	mov	r0, r3
 801776e:	f7fb f915 	bl	801299c <lwip_htons>
 8017772:	4603      	mov	r3, r0
 8017774:	b2db      	uxtb	r3, r3
 8017776:	f003 0303 	and.w	r3, r3, #3
 801777a:	2b00      	cmp	r3, #0
 801777c:	d001      	beq.n	8017782 <tcp_free_acked_segments+0xc6>
 801777e:	2301      	movs	r3, #1
 8017780:	e000      	b.n	8017784 <tcp_free_acked_segments+0xc8>
 8017782:	2300      	movs	r3, #0
 8017784:	442b      	add	r3, r5
 8017786:	18e2      	adds	r2, r4, r3
 8017788:	4b09      	ldr	r3, [pc, #36]	@ (80177b0 <tcp_free_acked_segments+0xf4>)
 801778a:	681b      	ldr	r3, [r3, #0]
 801778c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801778e:	2b00      	cmp	r3, #0
 8017790:	dd9c      	ble.n	80176cc <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8017792:	68bb      	ldr	r3, [r7, #8]
}
 8017794:	4618      	mov	r0, r3
 8017796:	3718      	adds	r7, #24
 8017798:	46bd      	mov	sp, r7
 801779a:	bdb0      	pop	{r4, r5, r7, pc}
 801779c:	080225c0 	.word	0x080225c0
 80177a0:	080228a8 	.word	0x080228a8
 80177a4:	0802260c 	.word	0x0802260c
 80177a8:	2000cb00 	.word	0x2000cb00
 80177ac:	080228d0 	.word	0x080228d0
 80177b0:	2000cafc 	.word	0x2000cafc

080177b4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80177b4:	b5b0      	push	{r4, r5, r7, lr}
 80177b6:	b094      	sub	sp, #80	@ 0x50
 80177b8:	af00      	add	r7, sp, #0
 80177ba:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80177bc:	2300      	movs	r3, #0
 80177be:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80177c0:	687b      	ldr	r3, [r7, #4]
 80177c2:	2b00      	cmp	r3, #0
 80177c4:	d106      	bne.n	80177d4 <tcp_receive+0x20>
 80177c6:	4b91      	ldr	r3, [pc, #580]	@ (8017a0c <tcp_receive+0x258>)
 80177c8:	f240 427b 	movw	r2, #1147	@ 0x47b
 80177cc:	4990      	ldr	r1, [pc, #576]	@ (8017a10 <tcp_receive+0x25c>)
 80177ce:	4891      	ldr	r0, [pc, #580]	@ (8017a14 <tcp_receive+0x260>)
 80177d0:	f006 fd5c 	bl	801e28c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80177d4:	687b      	ldr	r3, [r7, #4]
 80177d6:	7d1b      	ldrb	r3, [r3, #20]
 80177d8:	2b03      	cmp	r3, #3
 80177da:	d806      	bhi.n	80177ea <tcp_receive+0x36>
 80177dc:	4b8b      	ldr	r3, [pc, #556]	@ (8017a0c <tcp_receive+0x258>)
 80177de:	f240 427c 	movw	r2, #1148	@ 0x47c
 80177e2:	498d      	ldr	r1, [pc, #564]	@ (8017a18 <tcp_receive+0x264>)
 80177e4:	488b      	ldr	r0, [pc, #556]	@ (8017a14 <tcp_receive+0x260>)
 80177e6:	f006 fd51 	bl	801e28c <iprintf>

  if (flags & TCP_ACK) {
 80177ea:	4b8c      	ldr	r3, [pc, #560]	@ (8017a1c <tcp_receive+0x268>)
 80177ec:	781b      	ldrb	r3, [r3, #0]
 80177ee:	f003 0310 	and.w	r3, r3, #16
 80177f2:	2b00      	cmp	r3, #0
 80177f4:	f000 8264 	beq.w	8017cc0 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80177f8:	687b      	ldr	r3, [r7, #4]
 80177fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80177fe:	461a      	mov	r2, r3
 8017800:	687b      	ldr	r3, [r7, #4]
 8017802:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017804:	4413      	add	r3, r2
 8017806:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8017808:	687b      	ldr	r3, [r7, #4]
 801780a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801780c:	4b84      	ldr	r3, [pc, #528]	@ (8017a20 <tcp_receive+0x26c>)
 801780e:	681b      	ldr	r3, [r3, #0]
 8017810:	1ad3      	subs	r3, r2, r3
 8017812:	2b00      	cmp	r3, #0
 8017814:	db1b      	blt.n	801784e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8017816:	687b      	ldr	r3, [r7, #4]
 8017818:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801781a:	4b81      	ldr	r3, [pc, #516]	@ (8017a20 <tcp_receive+0x26c>)
 801781c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801781e:	429a      	cmp	r2, r3
 8017820:	d106      	bne.n	8017830 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8017822:	687b      	ldr	r3, [r7, #4]
 8017824:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8017826:	4b7f      	ldr	r3, [pc, #508]	@ (8017a24 <tcp_receive+0x270>)
 8017828:	681b      	ldr	r3, [r3, #0]
 801782a:	1ad3      	subs	r3, r2, r3
 801782c:	2b00      	cmp	r3, #0
 801782e:	db0e      	blt.n	801784e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8017830:	687b      	ldr	r3, [r7, #4]
 8017832:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8017834:	4b7b      	ldr	r3, [pc, #492]	@ (8017a24 <tcp_receive+0x270>)
 8017836:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8017838:	429a      	cmp	r2, r3
 801783a:	d125      	bne.n	8017888 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801783c:	4b7a      	ldr	r3, [pc, #488]	@ (8017a28 <tcp_receive+0x274>)
 801783e:	681b      	ldr	r3, [r3, #0]
 8017840:	89db      	ldrh	r3, [r3, #14]
 8017842:	b29a      	uxth	r2, r3
 8017844:	687b      	ldr	r3, [r7, #4]
 8017846:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801784a:	429a      	cmp	r2, r3
 801784c:	d91c      	bls.n	8017888 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801784e:	4b76      	ldr	r3, [pc, #472]	@ (8017a28 <tcp_receive+0x274>)
 8017850:	681b      	ldr	r3, [r3, #0]
 8017852:	89db      	ldrh	r3, [r3, #14]
 8017854:	b29a      	uxth	r2, r3
 8017856:	687b      	ldr	r3, [r7, #4]
 8017858:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801785c:	687b      	ldr	r3, [r7, #4]
 801785e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8017862:	687b      	ldr	r3, [r7, #4]
 8017864:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8017868:	429a      	cmp	r2, r3
 801786a:	d205      	bcs.n	8017878 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801786c:	687b      	ldr	r3, [r7, #4]
 801786e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8017872:	687b      	ldr	r3, [r7, #4]
 8017874:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8017878:	4b69      	ldr	r3, [pc, #420]	@ (8017a20 <tcp_receive+0x26c>)
 801787a:	681a      	ldr	r2, [r3, #0]
 801787c:	687b      	ldr	r3, [r7, #4]
 801787e:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8017880:	4b68      	ldr	r3, [pc, #416]	@ (8017a24 <tcp_receive+0x270>)
 8017882:	681a      	ldr	r2, [r3, #0]
 8017884:	687b      	ldr	r3, [r7, #4]
 8017886:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8017888:	4b66      	ldr	r3, [pc, #408]	@ (8017a24 <tcp_receive+0x270>)
 801788a:	681a      	ldr	r2, [r3, #0]
 801788c:	687b      	ldr	r3, [r7, #4]
 801788e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017890:	1ad3      	subs	r3, r2, r3
 8017892:	2b00      	cmp	r3, #0
 8017894:	dc58      	bgt.n	8017948 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8017896:	4b65      	ldr	r3, [pc, #404]	@ (8017a2c <tcp_receive+0x278>)
 8017898:	881b      	ldrh	r3, [r3, #0]
 801789a:	2b00      	cmp	r3, #0
 801789c:	d14b      	bne.n	8017936 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801789e:	687b      	ldr	r3, [r7, #4]
 80178a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80178a2:	687a      	ldr	r2, [r7, #4]
 80178a4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 80178a8:	4413      	add	r3, r2
 80178aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80178ac:	429a      	cmp	r2, r3
 80178ae:	d142      	bne.n	8017936 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80178b0:	687b      	ldr	r3, [r7, #4]
 80178b2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80178b6:	2b00      	cmp	r3, #0
 80178b8:	db3d      	blt.n	8017936 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80178ba:	687b      	ldr	r3, [r7, #4]
 80178bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80178be:	4b59      	ldr	r3, [pc, #356]	@ (8017a24 <tcp_receive+0x270>)
 80178c0:	681b      	ldr	r3, [r3, #0]
 80178c2:	429a      	cmp	r2, r3
 80178c4:	d137      	bne.n	8017936 <tcp_receive+0x182>
              found_dupack = 1;
 80178c6:	2301      	movs	r3, #1
 80178c8:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80178ca:	687b      	ldr	r3, [r7, #4]
 80178cc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80178d0:	2bff      	cmp	r3, #255	@ 0xff
 80178d2:	d007      	beq.n	80178e4 <tcp_receive+0x130>
                ++pcb->dupacks;
 80178d4:	687b      	ldr	r3, [r7, #4]
 80178d6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80178da:	3301      	adds	r3, #1
 80178dc:	b2da      	uxtb	r2, r3
 80178de:	687b      	ldr	r3, [r7, #4]
 80178e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 80178e4:	687b      	ldr	r3, [r7, #4]
 80178e6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80178ea:	2b03      	cmp	r3, #3
 80178ec:	d91b      	bls.n	8017926 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80178ee:	687b      	ldr	r3, [r7, #4]
 80178f0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80178f4:	687b      	ldr	r3, [r7, #4]
 80178f6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80178f8:	4413      	add	r3, r2
 80178fa:	b29a      	uxth	r2, r3
 80178fc:	687b      	ldr	r3, [r7, #4]
 80178fe:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8017902:	429a      	cmp	r2, r3
 8017904:	d30a      	bcc.n	801791c <tcp_receive+0x168>
 8017906:	687b      	ldr	r3, [r7, #4]
 8017908:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801790c:	687b      	ldr	r3, [r7, #4]
 801790e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017910:	4413      	add	r3, r2
 8017912:	b29a      	uxth	r2, r3
 8017914:	687b      	ldr	r3, [r7, #4]
 8017916:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801791a:	e004      	b.n	8017926 <tcp_receive+0x172>
 801791c:	687b      	ldr	r3, [r7, #4]
 801791e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017922:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8017926:	687b      	ldr	r3, [r7, #4]
 8017928:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801792c:	2b02      	cmp	r3, #2
 801792e:	d902      	bls.n	8017936 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8017930:	6878      	ldr	r0, [r7, #4]
 8017932:	f002 fb3f 	bl	8019fb4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8017936:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017938:	2b00      	cmp	r3, #0
 801793a:	f040 8161 	bne.w	8017c00 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 801793e:	687b      	ldr	r3, [r7, #4]
 8017940:	2200      	movs	r2, #0
 8017942:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8017946:	e15b      	b.n	8017c00 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8017948:	4b36      	ldr	r3, [pc, #216]	@ (8017a24 <tcp_receive+0x270>)
 801794a:	681a      	ldr	r2, [r3, #0]
 801794c:	687b      	ldr	r3, [r7, #4]
 801794e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017950:	1ad3      	subs	r3, r2, r3
 8017952:	3b01      	subs	r3, #1
 8017954:	2b00      	cmp	r3, #0
 8017956:	f2c0 814e 	blt.w	8017bf6 <tcp_receive+0x442>
 801795a:	4b32      	ldr	r3, [pc, #200]	@ (8017a24 <tcp_receive+0x270>)
 801795c:	681a      	ldr	r2, [r3, #0]
 801795e:	687b      	ldr	r3, [r7, #4]
 8017960:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017962:	1ad3      	subs	r3, r2, r3
 8017964:	2b00      	cmp	r3, #0
 8017966:	f300 8146 	bgt.w	8017bf6 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801796a:	687b      	ldr	r3, [r7, #4]
 801796c:	8b5b      	ldrh	r3, [r3, #26]
 801796e:	f003 0304 	and.w	r3, r3, #4
 8017972:	2b00      	cmp	r3, #0
 8017974:	d010      	beq.n	8017998 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8017976:	687b      	ldr	r3, [r7, #4]
 8017978:	8b5b      	ldrh	r3, [r3, #26]
 801797a:	f023 0304 	bic.w	r3, r3, #4
 801797e:	b29a      	uxth	r2, r3
 8017980:	687b      	ldr	r3, [r7, #4]
 8017982:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8017984:	687b      	ldr	r3, [r7, #4]
 8017986:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801798a:	687b      	ldr	r3, [r7, #4]
 801798c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8017990:	687b      	ldr	r3, [r7, #4]
 8017992:	2200      	movs	r2, #0
 8017994:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8017998:	687b      	ldr	r3, [r7, #4]
 801799a:	2200      	movs	r2, #0
 801799c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80179a0:	687b      	ldr	r3, [r7, #4]
 80179a2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80179a6:	10db      	asrs	r3, r3, #3
 80179a8:	b21b      	sxth	r3, r3
 80179aa:	b29a      	uxth	r2, r3
 80179ac:	687b      	ldr	r3, [r7, #4]
 80179ae:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80179b2:	b29b      	uxth	r3, r3
 80179b4:	4413      	add	r3, r2
 80179b6:	b29b      	uxth	r3, r3
 80179b8:	b21a      	sxth	r2, r3
 80179ba:	687b      	ldr	r3, [r7, #4]
 80179bc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80179c0:	4b18      	ldr	r3, [pc, #96]	@ (8017a24 <tcp_receive+0x270>)
 80179c2:	681b      	ldr	r3, [r3, #0]
 80179c4:	b29a      	uxth	r2, r3
 80179c6:	687b      	ldr	r3, [r7, #4]
 80179c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80179ca:	b29b      	uxth	r3, r3
 80179cc:	1ad3      	subs	r3, r2, r3
 80179ce:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80179d0:	687b      	ldr	r3, [r7, #4]
 80179d2:	2200      	movs	r2, #0
 80179d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 80179d8:	4b12      	ldr	r3, [pc, #72]	@ (8017a24 <tcp_receive+0x270>)
 80179da:	681a      	ldr	r2, [r3, #0]
 80179dc:	687b      	ldr	r3, [r7, #4]
 80179de:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80179e0:	687b      	ldr	r3, [r7, #4]
 80179e2:	7d1b      	ldrb	r3, [r3, #20]
 80179e4:	2b03      	cmp	r3, #3
 80179e6:	f240 8097 	bls.w	8017b18 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 80179ea:	687b      	ldr	r3, [r7, #4]
 80179ec:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80179f0:	687b      	ldr	r3, [r7, #4]
 80179f2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80179f6:	429a      	cmp	r2, r3
 80179f8:	d245      	bcs.n	8017a86 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80179fa:	687b      	ldr	r3, [r7, #4]
 80179fc:	8b5b      	ldrh	r3, [r3, #26]
 80179fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8017a02:	2b00      	cmp	r3, #0
 8017a04:	d014      	beq.n	8017a30 <tcp_receive+0x27c>
 8017a06:	2301      	movs	r3, #1
 8017a08:	e013      	b.n	8017a32 <tcp_receive+0x27e>
 8017a0a:	bf00      	nop
 8017a0c:	080225c0 	.word	0x080225c0
 8017a10:	080228f0 	.word	0x080228f0
 8017a14:	0802260c 	.word	0x0802260c
 8017a18:	0802290c 	.word	0x0802290c
 8017a1c:	2000cb04 	.word	0x2000cb04
 8017a20:	2000caf8 	.word	0x2000caf8
 8017a24:	2000cafc 	.word	0x2000cafc
 8017a28:	2000cae8 	.word	0x2000cae8
 8017a2c:	2000cb02 	.word	0x2000cb02
 8017a30:	2302      	movs	r3, #2
 8017a32:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8017a36:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8017a3a:	b29a      	uxth	r2, r3
 8017a3c:	687b      	ldr	r3, [r7, #4]
 8017a3e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017a40:	fb12 f303 	smulbb	r3, r2, r3
 8017a44:	b29b      	uxth	r3, r3
 8017a46:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8017a48:	4293      	cmp	r3, r2
 8017a4a:	bf28      	it	cs
 8017a4c:	4613      	movcs	r3, r2
 8017a4e:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8017a50:	687b      	ldr	r3, [r7, #4]
 8017a52:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8017a56:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8017a58:	4413      	add	r3, r2
 8017a5a:	b29a      	uxth	r2, r3
 8017a5c:	687b      	ldr	r3, [r7, #4]
 8017a5e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8017a62:	429a      	cmp	r2, r3
 8017a64:	d309      	bcc.n	8017a7a <tcp_receive+0x2c6>
 8017a66:	687b      	ldr	r3, [r7, #4]
 8017a68:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8017a6c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8017a6e:	4413      	add	r3, r2
 8017a70:	b29a      	uxth	r2, r3
 8017a72:	687b      	ldr	r3, [r7, #4]
 8017a74:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8017a78:	e04e      	b.n	8017b18 <tcp_receive+0x364>
 8017a7a:	687b      	ldr	r3, [r7, #4]
 8017a7c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017a80:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8017a84:	e048      	b.n	8017b18 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8017a86:	687b      	ldr	r3, [r7, #4]
 8017a88:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8017a8c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8017a8e:	4413      	add	r3, r2
 8017a90:	b29a      	uxth	r2, r3
 8017a92:	687b      	ldr	r3, [r7, #4]
 8017a94:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8017a98:	429a      	cmp	r2, r3
 8017a9a:	d309      	bcc.n	8017ab0 <tcp_receive+0x2fc>
 8017a9c:	687b      	ldr	r3, [r7, #4]
 8017a9e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8017aa2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8017aa4:	4413      	add	r3, r2
 8017aa6:	b29a      	uxth	r2, r3
 8017aa8:	687b      	ldr	r3, [r7, #4]
 8017aaa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8017aae:	e004      	b.n	8017aba <tcp_receive+0x306>
 8017ab0:	687b      	ldr	r3, [r7, #4]
 8017ab2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017ab6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8017aba:	687b      	ldr	r3, [r7, #4]
 8017abc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8017ac0:	687b      	ldr	r3, [r7, #4]
 8017ac2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8017ac6:	429a      	cmp	r2, r3
 8017ac8:	d326      	bcc.n	8017b18 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8017aca:	687b      	ldr	r3, [r7, #4]
 8017acc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8017ad0:	687b      	ldr	r3, [r7, #4]
 8017ad2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8017ad6:	1ad3      	subs	r3, r2, r3
 8017ad8:	b29a      	uxth	r2, r3
 8017ada:	687b      	ldr	r3, [r7, #4]
 8017adc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8017ae0:	687b      	ldr	r3, [r7, #4]
 8017ae2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8017ae6:	687b      	ldr	r3, [r7, #4]
 8017ae8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017aea:	4413      	add	r3, r2
 8017aec:	b29a      	uxth	r2, r3
 8017aee:	687b      	ldr	r3, [r7, #4]
 8017af0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8017af4:	429a      	cmp	r2, r3
 8017af6:	d30a      	bcc.n	8017b0e <tcp_receive+0x35a>
 8017af8:	687b      	ldr	r3, [r7, #4]
 8017afa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8017afe:	687b      	ldr	r3, [r7, #4]
 8017b00:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017b02:	4413      	add	r3, r2
 8017b04:	b29a      	uxth	r2, r3
 8017b06:	687b      	ldr	r3, [r7, #4]
 8017b08:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8017b0c:	e004      	b.n	8017b18 <tcp_receive+0x364>
 8017b0e:	687b      	ldr	r3, [r7, #4]
 8017b10:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017b14:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8017b18:	687b      	ldr	r3, [r7, #4]
 8017b1a:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8017b1c:	687b      	ldr	r3, [r7, #4]
 8017b1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017b20:	4a98      	ldr	r2, [pc, #608]	@ (8017d84 <tcp_receive+0x5d0>)
 8017b22:	6878      	ldr	r0, [r7, #4]
 8017b24:	f7ff fdca 	bl	80176bc <tcp_free_acked_segments>
 8017b28:	4602      	mov	r2, r0
 8017b2a:	687b      	ldr	r3, [r7, #4]
 8017b2c:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8017b2e:	687b      	ldr	r3, [r7, #4]
 8017b30:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8017b32:	687b      	ldr	r3, [r7, #4]
 8017b34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017b36:	4a94      	ldr	r2, [pc, #592]	@ (8017d88 <tcp_receive+0x5d4>)
 8017b38:	6878      	ldr	r0, [r7, #4]
 8017b3a:	f7ff fdbf 	bl	80176bc <tcp_free_acked_segments>
 8017b3e:	4602      	mov	r2, r0
 8017b40:	687b      	ldr	r3, [r7, #4]
 8017b42:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8017b44:	687b      	ldr	r3, [r7, #4]
 8017b46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017b48:	2b00      	cmp	r3, #0
 8017b4a:	d104      	bne.n	8017b56 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8017b4c:	687b      	ldr	r3, [r7, #4]
 8017b4e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017b52:	861a      	strh	r2, [r3, #48]	@ 0x30
 8017b54:	e002      	b.n	8017b5c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8017b56:	687b      	ldr	r3, [r7, #4]
 8017b58:	2200      	movs	r2, #0
 8017b5a:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8017b5c:	687b      	ldr	r3, [r7, #4]
 8017b5e:	2200      	movs	r2, #0
 8017b60:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8017b62:	687b      	ldr	r3, [r7, #4]
 8017b64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017b66:	2b00      	cmp	r3, #0
 8017b68:	d103      	bne.n	8017b72 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8017b6a:	687b      	ldr	r3, [r7, #4]
 8017b6c:	2200      	movs	r2, #0
 8017b6e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8017b72:	687b      	ldr	r3, [r7, #4]
 8017b74:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8017b78:	4b84      	ldr	r3, [pc, #528]	@ (8017d8c <tcp_receive+0x5d8>)
 8017b7a:	881b      	ldrh	r3, [r3, #0]
 8017b7c:	4413      	add	r3, r2
 8017b7e:	b29a      	uxth	r2, r3
 8017b80:	687b      	ldr	r3, [r7, #4]
 8017b82:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8017b86:	687b      	ldr	r3, [r7, #4]
 8017b88:	8b5b      	ldrh	r3, [r3, #26]
 8017b8a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8017b8e:	2b00      	cmp	r3, #0
 8017b90:	d035      	beq.n	8017bfe <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8017b92:	687b      	ldr	r3, [r7, #4]
 8017b94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017b96:	2b00      	cmp	r3, #0
 8017b98:	d118      	bne.n	8017bcc <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8017b9a:	687b      	ldr	r3, [r7, #4]
 8017b9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017b9e:	2b00      	cmp	r3, #0
 8017ba0:	d00c      	beq.n	8017bbc <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8017ba2:	687b      	ldr	r3, [r7, #4]
 8017ba4:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8017ba6:	687b      	ldr	r3, [r7, #4]
 8017ba8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017baa:	68db      	ldr	r3, [r3, #12]
 8017bac:	685b      	ldr	r3, [r3, #4]
 8017bae:	4618      	mov	r0, r3
 8017bb0:	f7fa ff0a 	bl	80129c8 <lwip_htonl>
 8017bb4:	4603      	mov	r3, r0
 8017bb6:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8017bb8:	2b00      	cmp	r3, #0
 8017bba:	dc20      	bgt.n	8017bfe <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8017bbc:	687b      	ldr	r3, [r7, #4]
 8017bbe:	8b5b      	ldrh	r3, [r3, #26]
 8017bc0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8017bc4:	b29a      	uxth	r2, r3
 8017bc6:	687b      	ldr	r3, [r7, #4]
 8017bc8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8017bca:	e018      	b.n	8017bfe <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8017bcc:	687b      	ldr	r3, [r7, #4]
 8017bce:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8017bd0:	687b      	ldr	r3, [r7, #4]
 8017bd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017bd4:	68db      	ldr	r3, [r3, #12]
 8017bd6:	685b      	ldr	r3, [r3, #4]
 8017bd8:	4618      	mov	r0, r3
 8017bda:	f7fa fef5 	bl	80129c8 <lwip_htonl>
 8017bde:	4603      	mov	r3, r0
 8017be0:	1ae3      	subs	r3, r4, r3
 8017be2:	2b00      	cmp	r3, #0
 8017be4:	dc0b      	bgt.n	8017bfe <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8017be6:	687b      	ldr	r3, [r7, #4]
 8017be8:	8b5b      	ldrh	r3, [r3, #26]
 8017bea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8017bee:	b29a      	uxth	r2, r3
 8017bf0:	687b      	ldr	r3, [r7, #4]
 8017bf2:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8017bf4:	e003      	b.n	8017bfe <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8017bf6:	6878      	ldr	r0, [r7, #4]
 8017bf8:	f002 fbc8 	bl	801a38c <tcp_send_empty_ack>
 8017bfc:	e000      	b.n	8017c00 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8017bfe:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8017c00:	687b      	ldr	r3, [r7, #4]
 8017c02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017c04:	2b00      	cmp	r3, #0
 8017c06:	d05b      	beq.n	8017cc0 <tcp_receive+0x50c>
 8017c08:	687b      	ldr	r3, [r7, #4]
 8017c0a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8017c0c:	4b60      	ldr	r3, [pc, #384]	@ (8017d90 <tcp_receive+0x5dc>)
 8017c0e:	681b      	ldr	r3, [r3, #0]
 8017c10:	1ad3      	subs	r3, r2, r3
 8017c12:	2b00      	cmp	r3, #0
 8017c14:	da54      	bge.n	8017cc0 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8017c16:	4b5f      	ldr	r3, [pc, #380]	@ (8017d94 <tcp_receive+0x5e0>)
 8017c18:	681b      	ldr	r3, [r3, #0]
 8017c1a:	b29a      	uxth	r2, r3
 8017c1c:	687b      	ldr	r3, [r7, #4]
 8017c1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017c20:	b29b      	uxth	r3, r3
 8017c22:	1ad3      	subs	r3, r2, r3
 8017c24:	b29b      	uxth	r3, r3
 8017c26:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8017c2a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8017c2e:	687b      	ldr	r3, [r7, #4]
 8017c30:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8017c34:	10db      	asrs	r3, r3, #3
 8017c36:	b21b      	sxth	r3, r3
 8017c38:	b29b      	uxth	r3, r3
 8017c3a:	1ad3      	subs	r3, r2, r3
 8017c3c:	b29b      	uxth	r3, r3
 8017c3e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8017c42:	687b      	ldr	r3, [r7, #4]
 8017c44:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8017c48:	b29a      	uxth	r2, r3
 8017c4a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8017c4e:	4413      	add	r3, r2
 8017c50:	b29b      	uxth	r3, r3
 8017c52:	b21a      	sxth	r2, r3
 8017c54:	687b      	ldr	r3, [r7, #4]
 8017c56:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8017c58:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8017c5c:	2b00      	cmp	r3, #0
 8017c5e:	da05      	bge.n	8017c6c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8017c60:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8017c64:	425b      	negs	r3, r3
 8017c66:	b29b      	uxth	r3, r3
 8017c68:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8017c6c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8017c70:	687b      	ldr	r3, [r7, #4]
 8017c72:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8017c76:	109b      	asrs	r3, r3, #2
 8017c78:	b21b      	sxth	r3, r3
 8017c7a:	b29b      	uxth	r3, r3
 8017c7c:	1ad3      	subs	r3, r2, r3
 8017c7e:	b29b      	uxth	r3, r3
 8017c80:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8017c84:	687b      	ldr	r3, [r7, #4]
 8017c86:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8017c8a:	b29a      	uxth	r2, r3
 8017c8c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8017c90:	4413      	add	r3, r2
 8017c92:	b29b      	uxth	r3, r3
 8017c94:	b21a      	sxth	r2, r3
 8017c96:	687b      	ldr	r3, [r7, #4]
 8017c98:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8017c9a:	687b      	ldr	r3, [r7, #4]
 8017c9c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8017ca0:	10db      	asrs	r3, r3, #3
 8017ca2:	b21b      	sxth	r3, r3
 8017ca4:	b29a      	uxth	r2, r3
 8017ca6:	687b      	ldr	r3, [r7, #4]
 8017ca8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8017cac:	b29b      	uxth	r3, r3
 8017cae:	4413      	add	r3, r2
 8017cb0:	b29b      	uxth	r3, r3
 8017cb2:	b21a      	sxth	r2, r3
 8017cb4:	687b      	ldr	r3, [r7, #4]
 8017cb6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8017cba:	687b      	ldr	r3, [r7, #4]
 8017cbc:	2200      	movs	r2, #0
 8017cbe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8017cc0:	4b35      	ldr	r3, [pc, #212]	@ (8017d98 <tcp_receive+0x5e4>)
 8017cc2:	881b      	ldrh	r3, [r3, #0]
 8017cc4:	2b00      	cmp	r3, #0
 8017cc6:	f000 84df 	beq.w	8018688 <tcp_receive+0xed4>
 8017cca:	687b      	ldr	r3, [r7, #4]
 8017ccc:	7d1b      	ldrb	r3, [r3, #20]
 8017cce:	2b06      	cmp	r3, #6
 8017cd0:	f200 84da 	bhi.w	8018688 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8017cd4:	687b      	ldr	r3, [r7, #4]
 8017cd6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017cd8:	4b30      	ldr	r3, [pc, #192]	@ (8017d9c <tcp_receive+0x5e8>)
 8017cda:	681b      	ldr	r3, [r3, #0]
 8017cdc:	1ad3      	subs	r3, r2, r3
 8017cde:	3b01      	subs	r3, #1
 8017ce0:	2b00      	cmp	r3, #0
 8017ce2:	f2c0 808f 	blt.w	8017e04 <tcp_receive+0x650>
 8017ce6:	687b      	ldr	r3, [r7, #4]
 8017ce8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017cea:	4b2b      	ldr	r3, [pc, #172]	@ (8017d98 <tcp_receive+0x5e4>)
 8017cec:	881b      	ldrh	r3, [r3, #0]
 8017cee:	4619      	mov	r1, r3
 8017cf0:	4b2a      	ldr	r3, [pc, #168]	@ (8017d9c <tcp_receive+0x5e8>)
 8017cf2:	681b      	ldr	r3, [r3, #0]
 8017cf4:	440b      	add	r3, r1
 8017cf6:	1ad3      	subs	r3, r2, r3
 8017cf8:	3301      	adds	r3, #1
 8017cfa:	2b00      	cmp	r3, #0
 8017cfc:	f300 8082 	bgt.w	8017e04 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8017d00:	4b27      	ldr	r3, [pc, #156]	@ (8017da0 <tcp_receive+0x5ec>)
 8017d02:	685b      	ldr	r3, [r3, #4]
 8017d04:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8017d06:	687b      	ldr	r3, [r7, #4]
 8017d08:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017d0a:	4b24      	ldr	r3, [pc, #144]	@ (8017d9c <tcp_receive+0x5e8>)
 8017d0c:	681b      	ldr	r3, [r3, #0]
 8017d0e:	1ad3      	subs	r3, r2, r3
 8017d10:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8017d12:	4b23      	ldr	r3, [pc, #140]	@ (8017da0 <tcp_receive+0x5ec>)
 8017d14:	685b      	ldr	r3, [r3, #4]
 8017d16:	2b00      	cmp	r3, #0
 8017d18:	d106      	bne.n	8017d28 <tcp_receive+0x574>
 8017d1a:	4b22      	ldr	r3, [pc, #136]	@ (8017da4 <tcp_receive+0x5f0>)
 8017d1c:	f240 5294 	movw	r2, #1428	@ 0x594
 8017d20:	4921      	ldr	r1, [pc, #132]	@ (8017da8 <tcp_receive+0x5f4>)
 8017d22:	4822      	ldr	r0, [pc, #136]	@ (8017dac <tcp_receive+0x5f8>)
 8017d24:	f006 fab2 	bl	801e28c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8017d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017d2a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8017d2e:	4293      	cmp	r3, r2
 8017d30:	d906      	bls.n	8017d40 <tcp_receive+0x58c>
 8017d32:	4b1c      	ldr	r3, [pc, #112]	@ (8017da4 <tcp_receive+0x5f0>)
 8017d34:	f240 5295 	movw	r2, #1429	@ 0x595
 8017d38:	491d      	ldr	r1, [pc, #116]	@ (8017db0 <tcp_receive+0x5fc>)
 8017d3a:	481c      	ldr	r0, [pc, #112]	@ (8017dac <tcp_receive+0x5f8>)
 8017d3c:	f006 faa6 	bl	801e28c <iprintf>
      off = (u16_t)off32;
 8017d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017d42:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8017d46:	4b16      	ldr	r3, [pc, #88]	@ (8017da0 <tcp_receive+0x5ec>)
 8017d48:	685b      	ldr	r3, [r3, #4]
 8017d4a:	891b      	ldrh	r3, [r3, #8]
 8017d4c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8017d50:	429a      	cmp	r2, r3
 8017d52:	d906      	bls.n	8017d62 <tcp_receive+0x5ae>
 8017d54:	4b13      	ldr	r3, [pc, #76]	@ (8017da4 <tcp_receive+0x5f0>)
 8017d56:	f240 5297 	movw	r2, #1431	@ 0x597
 8017d5a:	4916      	ldr	r1, [pc, #88]	@ (8017db4 <tcp_receive+0x600>)
 8017d5c:	4813      	ldr	r0, [pc, #76]	@ (8017dac <tcp_receive+0x5f8>)
 8017d5e:	f006 fa95 	bl	801e28c <iprintf>
      inseg.len -= off;
 8017d62:	4b0f      	ldr	r3, [pc, #60]	@ (8017da0 <tcp_receive+0x5ec>)
 8017d64:	891a      	ldrh	r2, [r3, #8]
 8017d66:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017d6a:	1ad3      	subs	r3, r2, r3
 8017d6c:	b29a      	uxth	r2, r3
 8017d6e:	4b0c      	ldr	r3, [pc, #48]	@ (8017da0 <tcp_receive+0x5ec>)
 8017d70:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8017d72:	4b0b      	ldr	r3, [pc, #44]	@ (8017da0 <tcp_receive+0x5ec>)
 8017d74:	685b      	ldr	r3, [r3, #4]
 8017d76:	891a      	ldrh	r2, [r3, #8]
 8017d78:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017d7c:	1ad3      	subs	r3, r2, r3
 8017d7e:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8017d80:	e02a      	b.n	8017dd8 <tcp_receive+0x624>
 8017d82:	bf00      	nop
 8017d84:	08022928 	.word	0x08022928
 8017d88:	08022930 	.word	0x08022930
 8017d8c:	2000cb00 	.word	0x2000cb00
 8017d90:	2000cafc 	.word	0x2000cafc
 8017d94:	2000cac0 	.word	0x2000cac0
 8017d98:	2000cb02 	.word	0x2000cb02
 8017d9c:	2000caf8 	.word	0x2000caf8
 8017da0:	2000cad8 	.word	0x2000cad8
 8017da4:	080225c0 	.word	0x080225c0
 8017da8:	08022938 	.word	0x08022938
 8017dac:	0802260c 	.word	0x0802260c
 8017db0:	08022948 	.word	0x08022948
 8017db4:	08022958 	.word	0x08022958
        off -= p->len;
 8017db8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017dba:	895b      	ldrh	r3, [r3, #10]
 8017dbc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8017dc0:	1ad3      	subs	r3, r2, r3
 8017dc2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8017dc6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017dc8:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8017dca:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8017dcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017dce:	2200      	movs	r2, #0
 8017dd0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8017dd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017dd4:	681b      	ldr	r3, [r3, #0]
 8017dd6:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8017dd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017dda:	895b      	ldrh	r3, [r3, #10]
 8017ddc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8017de0:	429a      	cmp	r2, r3
 8017de2:	d8e9      	bhi.n	8017db8 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8017de4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017de8:	4619      	mov	r1, r3
 8017dea:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8017dec:	f7fc f910 	bl	8014010 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8017df0:	687b      	ldr	r3, [r7, #4]
 8017df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017df4:	4a90      	ldr	r2, [pc, #576]	@ (8018038 <tcp_receive+0x884>)
 8017df6:	6013      	str	r3, [r2, #0]
 8017df8:	4b90      	ldr	r3, [pc, #576]	@ (801803c <tcp_receive+0x888>)
 8017dfa:	68db      	ldr	r3, [r3, #12]
 8017dfc:	4a8e      	ldr	r2, [pc, #568]	@ (8018038 <tcp_receive+0x884>)
 8017dfe:	6812      	ldr	r2, [r2, #0]
 8017e00:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8017e02:	e00d      	b.n	8017e20 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8017e04:	4b8c      	ldr	r3, [pc, #560]	@ (8018038 <tcp_receive+0x884>)
 8017e06:	681a      	ldr	r2, [r3, #0]
 8017e08:	687b      	ldr	r3, [r7, #4]
 8017e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017e0c:	1ad3      	subs	r3, r2, r3
 8017e0e:	2b00      	cmp	r3, #0
 8017e10:	da06      	bge.n	8017e20 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8017e12:	687b      	ldr	r3, [r7, #4]
 8017e14:	8b5b      	ldrh	r3, [r3, #26]
 8017e16:	f043 0302 	orr.w	r3, r3, #2
 8017e1a:	b29a      	uxth	r2, r3
 8017e1c:	687b      	ldr	r3, [r7, #4]
 8017e1e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8017e20:	4b85      	ldr	r3, [pc, #532]	@ (8018038 <tcp_receive+0x884>)
 8017e22:	681a      	ldr	r2, [r3, #0]
 8017e24:	687b      	ldr	r3, [r7, #4]
 8017e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017e28:	1ad3      	subs	r3, r2, r3
 8017e2a:	2b00      	cmp	r3, #0
 8017e2c:	f2c0 8427 	blt.w	801867e <tcp_receive+0xeca>
 8017e30:	4b81      	ldr	r3, [pc, #516]	@ (8018038 <tcp_receive+0x884>)
 8017e32:	681a      	ldr	r2, [r3, #0]
 8017e34:	687b      	ldr	r3, [r7, #4]
 8017e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017e38:	6879      	ldr	r1, [r7, #4]
 8017e3a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8017e3c:	440b      	add	r3, r1
 8017e3e:	1ad3      	subs	r3, r2, r3
 8017e40:	3301      	adds	r3, #1
 8017e42:	2b00      	cmp	r3, #0
 8017e44:	f300 841b 	bgt.w	801867e <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8017e48:	687b      	ldr	r3, [r7, #4]
 8017e4a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017e4c:	4b7a      	ldr	r3, [pc, #488]	@ (8018038 <tcp_receive+0x884>)
 8017e4e:	681b      	ldr	r3, [r3, #0]
 8017e50:	429a      	cmp	r2, r3
 8017e52:	f040 8298 	bne.w	8018386 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8017e56:	4b79      	ldr	r3, [pc, #484]	@ (801803c <tcp_receive+0x888>)
 8017e58:	891c      	ldrh	r4, [r3, #8]
 8017e5a:	4b78      	ldr	r3, [pc, #480]	@ (801803c <tcp_receive+0x888>)
 8017e5c:	68db      	ldr	r3, [r3, #12]
 8017e5e:	899b      	ldrh	r3, [r3, #12]
 8017e60:	b29b      	uxth	r3, r3
 8017e62:	4618      	mov	r0, r3
 8017e64:	f7fa fd9a 	bl	801299c <lwip_htons>
 8017e68:	4603      	mov	r3, r0
 8017e6a:	b2db      	uxtb	r3, r3
 8017e6c:	f003 0303 	and.w	r3, r3, #3
 8017e70:	2b00      	cmp	r3, #0
 8017e72:	d001      	beq.n	8017e78 <tcp_receive+0x6c4>
 8017e74:	2301      	movs	r3, #1
 8017e76:	e000      	b.n	8017e7a <tcp_receive+0x6c6>
 8017e78:	2300      	movs	r3, #0
 8017e7a:	4423      	add	r3, r4
 8017e7c:	b29a      	uxth	r2, r3
 8017e7e:	4b70      	ldr	r3, [pc, #448]	@ (8018040 <tcp_receive+0x88c>)
 8017e80:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8017e82:	687b      	ldr	r3, [r7, #4]
 8017e84:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8017e86:	4b6e      	ldr	r3, [pc, #440]	@ (8018040 <tcp_receive+0x88c>)
 8017e88:	881b      	ldrh	r3, [r3, #0]
 8017e8a:	429a      	cmp	r2, r3
 8017e8c:	d274      	bcs.n	8017f78 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8017e8e:	4b6b      	ldr	r3, [pc, #428]	@ (801803c <tcp_receive+0x888>)
 8017e90:	68db      	ldr	r3, [r3, #12]
 8017e92:	899b      	ldrh	r3, [r3, #12]
 8017e94:	b29b      	uxth	r3, r3
 8017e96:	4618      	mov	r0, r3
 8017e98:	f7fa fd80 	bl	801299c <lwip_htons>
 8017e9c:	4603      	mov	r3, r0
 8017e9e:	b2db      	uxtb	r3, r3
 8017ea0:	f003 0301 	and.w	r3, r3, #1
 8017ea4:	2b00      	cmp	r3, #0
 8017ea6:	d01e      	beq.n	8017ee6 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8017ea8:	4b64      	ldr	r3, [pc, #400]	@ (801803c <tcp_receive+0x888>)
 8017eaa:	68db      	ldr	r3, [r3, #12]
 8017eac:	899b      	ldrh	r3, [r3, #12]
 8017eae:	b29b      	uxth	r3, r3
 8017eb0:	b21b      	sxth	r3, r3
 8017eb2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8017eb6:	b21c      	sxth	r4, r3
 8017eb8:	4b60      	ldr	r3, [pc, #384]	@ (801803c <tcp_receive+0x888>)
 8017eba:	68db      	ldr	r3, [r3, #12]
 8017ebc:	899b      	ldrh	r3, [r3, #12]
 8017ebe:	b29b      	uxth	r3, r3
 8017ec0:	4618      	mov	r0, r3
 8017ec2:	f7fa fd6b 	bl	801299c <lwip_htons>
 8017ec6:	4603      	mov	r3, r0
 8017ec8:	b2db      	uxtb	r3, r3
 8017eca:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8017ece:	b29b      	uxth	r3, r3
 8017ed0:	4618      	mov	r0, r3
 8017ed2:	f7fa fd63 	bl	801299c <lwip_htons>
 8017ed6:	4603      	mov	r3, r0
 8017ed8:	b21b      	sxth	r3, r3
 8017eda:	4323      	orrs	r3, r4
 8017edc:	b21a      	sxth	r2, r3
 8017ede:	4b57      	ldr	r3, [pc, #348]	@ (801803c <tcp_receive+0x888>)
 8017ee0:	68db      	ldr	r3, [r3, #12]
 8017ee2:	b292      	uxth	r2, r2
 8017ee4:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8017ee6:	687b      	ldr	r3, [r7, #4]
 8017ee8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8017eea:	4b54      	ldr	r3, [pc, #336]	@ (801803c <tcp_receive+0x888>)
 8017eec:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8017eee:	4b53      	ldr	r3, [pc, #332]	@ (801803c <tcp_receive+0x888>)
 8017ef0:	68db      	ldr	r3, [r3, #12]
 8017ef2:	899b      	ldrh	r3, [r3, #12]
 8017ef4:	b29b      	uxth	r3, r3
 8017ef6:	4618      	mov	r0, r3
 8017ef8:	f7fa fd50 	bl	801299c <lwip_htons>
 8017efc:	4603      	mov	r3, r0
 8017efe:	b2db      	uxtb	r3, r3
 8017f00:	f003 0302 	and.w	r3, r3, #2
 8017f04:	2b00      	cmp	r3, #0
 8017f06:	d005      	beq.n	8017f14 <tcp_receive+0x760>
            inseg.len -= 1;
 8017f08:	4b4c      	ldr	r3, [pc, #304]	@ (801803c <tcp_receive+0x888>)
 8017f0a:	891b      	ldrh	r3, [r3, #8]
 8017f0c:	3b01      	subs	r3, #1
 8017f0e:	b29a      	uxth	r2, r3
 8017f10:	4b4a      	ldr	r3, [pc, #296]	@ (801803c <tcp_receive+0x888>)
 8017f12:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8017f14:	4b49      	ldr	r3, [pc, #292]	@ (801803c <tcp_receive+0x888>)
 8017f16:	685b      	ldr	r3, [r3, #4]
 8017f18:	4a48      	ldr	r2, [pc, #288]	@ (801803c <tcp_receive+0x888>)
 8017f1a:	8912      	ldrh	r2, [r2, #8]
 8017f1c:	4611      	mov	r1, r2
 8017f1e:	4618      	mov	r0, r3
 8017f20:	f7fb ff76 	bl	8013e10 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8017f24:	4b45      	ldr	r3, [pc, #276]	@ (801803c <tcp_receive+0x888>)
 8017f26:	891c      	ldrh	r4, [r3, #8]
 8017f28:	4b44      	ldr	r3, [pc, #272]	@ (801803c <tcp_receive+0x888>)
 8017f2a:	68db      	ldr	r3, [r3, #12]
 8017f2c:	899b      	ldrh	r3, [r3, #12]
 8017f2e:	b29b      	uxth	r3, r3
 8017f30:	4618      	mov	r0, r3
 8017f32:	f7fa fd33 	bl	801299c <lwip_htons>
 8017f36:	4603      	mov	r3, r0
 8017f38:	b2db      	uxtb	r3, r3
 8017f3a:	f003 0303 	and.w	r3, r3, #3
 8017f3e:	2b00      	cmp	r3, #0
 8017f40:	d001      	beq.n	8017f46 <tcp_receive+0x792>
 8017f42:	2301      	movs	r3, #1
 8017f44:	e000      	b.n	8017f48 <tcp_receive+0x794>
 8017f46:	2300      	movs	r3, #0
 8017f48:	4423      	add	r3, r4
 8017f4a:	b29a      	uxth	r2, r3
 8017f4c:	4b3c      	ldr	r3, [pc, #240]	@ (8018040 <tcp_receive+0x88c>)
 8017f4e:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8017f50:	4b3b      	ldr	r3, [pc, #236]	@ (8018040 <tcp_receive+0x88c>)
 8017f52:	881b      	ldrh	r3, [r3, #0]
 8017f54:	461a      	mov	r2, r3
 8017f56:	4b38      	ldr	r3, [pc, #224]	@ (8018038 <tcp_receive+0x884>)
 8017f58:	681b      	ldr	r3, [r3, #0]
 8017f5a:	441a      	add	r2, r3
 8017f5c:	687b      	ldr	r3, [r7, #4]
 8017f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017f60:	6879      	ldr	r1, [r7, #4]
 8017f62:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8017f64:	440b      	add	r3, r1
 8017f66:	429a      	cmp	r2, r3
 8017f68:	d006      	beq.n	8017f78 <tcp_receive+0x7c4>
 8017f6a:	4b36      	ldr	r3, [pc, #216]	@ (8018044 <tcp_receive+0x890>)
 8017f6c:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8017f70:	4935      	ldr	r1, [pc, #212]	@ (8018048 <tcp_receive+0x894>)
 8017f72:	4836      	ldr	r0, [pc, #216]	@ (801804c <tcp_receive+0x898>)
 8017f74:	f006 f98a 	bl	801e28c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8017f78:	687b      	ldr	r3, [r7, #4]
 8017f7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017f7c:	2b00      	cmp	r3, #0
 8017f7e:	f000 80e6 	beq.w	801814e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8017f82:	4b2e      	ldr	r3, [pc, #184]	@ (801803c <tcp_receive+0x888>)
 8017f84:	68db      	ldr	r3, [r3, #12]
 8017f86:	899b      	ldrh	r3, [r3, #12]
 8017f88:	b29b      	uxth	r3, r3
 8017f8a:	4618      	mov	r0, r3
 8017f8c:	f7fa fd06 	bl	801299c <lwip_htons>
 8017f90:	4603      	mov	r3, r0
 8017f92:	b2db      	uxtb	r3, r3
 8017f94:	f003 0301 	and.w	r3, r3, #1
 8017f98:	2b00      	cmp	r3, #0
 8017f9a:	d010      	beq.n	8017fbe <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8017f9c:	e00a      	b.n	8017fb4 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8017f9e:	687b      	ldr	r3, [r7, #4]
 8017fa0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017fa2:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8017fa4:	687b      	ldr	r3, [r7, #4]
 8017fa6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017fa8:	681a      	ldr	r2, [r3, #0]
 8017faa:	687b      	ldr	r3, [r7, #4]
 8017fac:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8017fae:	68f8      	ldr	r0, [r7, #12]
 8017fb0:	f7fd fcef 	bl	8015992 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8017fb4:	687b      	ldr	r3, [r7, #4]
 8017fb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017fb8:	2b00      	cmp	r3, #0
 8017fba:	d1f0      	bne.n	8017f9e <tcp_receive+0x7ea>
 8017fbc:	e0c7      	b.n	801814e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8017fbe:	687b      	ldr	r3, [r7, #4]
 8017fc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017fc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8017fc4:	e051      	b.n	801806a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8017fc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017fc8:	68db      	ldr	r3, [r3, #12]
 8017fca:	899b      	ldrh	r3, [r3, #12]
 8017fcc:	b29b      	uxth	r3, r3
 8017fce:	4618      	mov	r0, r3
 8017fd0:	f7fa fce4 	bl	801299c <lwip_htons>
 8017fd4:	4603      	mov	r3, r0
 8017fd6:	b2db      	uxtb	r3, r3
 8017fd8:	f003 0301 	and.w	r3, r3, #1
 8017fdc:	2b00      	cmp	r3, #0
 8017fde:	d03c      	beq.n	801805a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8017fe0:	4b16      	ldr	r3, [pc, #88]	@ (801803c <tcp_receive+0x888>)
 8017fe2:	68db      	ldr	r3, [r3, #12]
 8017fe4:	899b      	ldrh	r3, [r3, #12]
 8017fe6:	b29b      	uxth	r3, r3
 8017fe8:	4618      	mov	r0, r3
 8017fea:	f7fa fcd7 	bl	801299c <lwip_htons>
 8017fee:	4603      	mov	r3, r0
 8017ff0:	b2db      	uxtb	r3, r3
 8017ff2:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8017ff6:	2b00      	cmp	r3, #0
 8017ff8:	d12f      	bne.n	801805a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8017ffa:	4b10      	ldr	r3, [pc, #64]	@ (801803c <tcp_receive+0x888>)
 8017ffc:	68db      	ldr	r3, [r3, #12]
 8017ffe:	899b      	ldrh	r3, [r3, #12]
 8018000:	b29c      	uxth	r4, r3
 8018002:	2001      	movs	r0, #1
 8018004:	f7fa fcca 	bl	801299c <lwip_htons>
 8018008:	4603      	mov	r3, r0
 801800a:	461a      	mov	r2, r3
 801800c:	4b0b      	ldr	r3, [pc, #44]	@ (801803c <tcp_receive+0x888>)
 801800e:	68db      	ldr	r3, [r3, #12]
 8018010:	4322      	orrs	r2, r4
 8018012:	b292      	uxth	r2, r2
 8018014:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8018016:	4b09      	ldr	r3, [pc, #36]	@ (801803c <tcp_receive+0x888>)
 8018018:	891c      	ldrh	r4, [r3, #8]
 801801a:	4b08      	ldr	r3, [pc, #32]	@ (801803c <tcp_receive+0x888>)
 801801c:	68db      	ldr	r3, [r3, #12]
 801801e:	899b      	ldrh	r3, [r3, #12]
 8018020:	b29b      	uxth	r3, r3
 8018022:	4618      	mov	r0, r3
 8018024:	f7fa fcba 	bl	801299c <lwip_htons>
 8018028:	4603      	mov	r3, r0
 801802a:	b2db      	uxtb	r3, r3
 801802c:	f003 0303 	and.w	r3, r3, #3
 8018030:	2b00      	cmp	r3, #0
 8018032:	d00d      	beq.n	8018050 <tcp_receive+0x89c>
 8018034:	2301      	movs	r3, #1
 8018036:	e00c      	b.n	8018052 <tcp_receive+0x89e>
 8018038:	2000caf8 	.word	0x2000caf8
 801803c:	2000cad8 	.word	0x2000cad8
 8018040:	2000cb02 	.word	0x2000cb02
 8018044:	080225c0 	.word	0x080225c0
 8018048:	08022968 	.word	0x08022968
 801804c:	0802260c 	.word	0x0802260c
 8018050:	2300      	movs	r3, #0
 8018052:	4423      	add	r3, r4
 8018054:	b29a      	uxth	r2, r3
 8018056:	4b98      	ldr	r3, [pc, #608]	@ (80182b8 <tcp_receive+0xb04>)
 8018058:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801805a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801805c:	613b      	str	r3, [r7, #16]
              next = next->next;
 801805e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018060:	681b      	ldr	r3, [r3, #0]
 8018062:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8018064:	6938      	ldr	r0, [r7, #16]
 8018066:	f7fd fc94 	bl	8015992 <tcp_seg_free>
            while (next &&
 801806a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801806c:	2b00      	cmp	r3, #0
 801806e:	d00e      	beq.n	801808e <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8018070:	4b91      	ldr	r3, [pc, #580]	@ (80182b8 <tcp_receive+0xb04>)
 8018072:	881b      	ldrh	r3, [r3, #0]
 8018074:	461a      	mov	r2, r3
 8018076:	4b91      	ldr	r3, [pc, #580]	@ (80182bc <tcp_receive+0xb08>)
 8018078:	681b      	ldr	r3, [r3, #0]
 801807a:	441a      	add	r2, r3
 801807c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801807e:	68db      	ldr	r3, [r3, #12]
 8018080:	685b      	ldr	r3, [r3, #4]
 8018082:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8018084:	8909      	ldrh	r1, [r1, #8]
 8018086:	440b      	add	r3, r1
 8018088:	1ad3      	subs	r3, r2, r3
            while (next &&
 801808a:	2b00      	cmp	r3, #0
 801808c:	da9b      	bge.n	8017fc6 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801808e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018090:	2b00      	cmp	r3, #0
 8018092:	d059      	beq.n	8018148 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8018094:	4b88      	ldr	r3, [pc, #544]	@ (80182b8 <tcp_receive+0xb04>)
 8018096:	881b      	ldrh	r3, [r3, #0]
 8018098:	461a      	mov	r2, r3
 801809a:	4b88      	ldr	r3, [pc, #544]	@ (80182bc <tcp_receive+0xb08>)
 801809c:	681b      	ldr	r3, [r3, #0]
 801809e:	441a      	add	r2, r3
 80180a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80180a2:	68db      	ldr	r3, [r3, #12]
 80180a4:	685b      	ldr	r3, [r3, #4]
 80180a6:	1ad3      	subs	r3, r2, r3
            if (next &&
 80180a8:	2b00      	cmp	r3, #0
 80180aa:	dd4d      	ble.n	8018148 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80180ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80180ae:	68db      	ldr	r3, [r3, #12]
 80180b0:	685b      	ldr	r3, [r3, #4]
 80180b2:	b29a      	uxth	r2, r3
 80180b4:	4b81      	ldr	r3, [pc, #516]	@ (80182bc <tcp_receive+0xb08>)
 80180b6:	681b      	ldr	r3, [r3, #0]
 80180b8:	b29b      	uxth	r3, r3
 80180ba:	1ad3      	subs	r3, r2, r3
 80180bc:	b29a      	uxth	r2, r3
 80180be:	4b80      	ldr	r3, [pc, #512]	@ (80182c0 <tcp_receive+0xb0c>)
 80180c0:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80180c2:	4b7f      	ldr	r3, [pc, #508]	@ (80182c0 <tcp_receive+0xb0c>)
 80180c4:	68db      	ldr	r3, [r3, #12]
 80180c6:	899b      	ldrh	r3, [r3, #12]
 80180c8:	b29b      	uxth	r3, r3
 80180ca:	4618      	mov	r0, r3
 80180cc:	f7fa fc66 	bl	801299c <lwip_htons>
 80180d0:	4603      	mov	r3, r0
 80180d2:	b2db      	uxtb	r3, r3
 80180d4:	f003 0302 	and.w	r3, r3, #2
 80180d8:	2b00      	cmp	r3, #0
 80180da:	d005      	beq.n	80180e8 <tcp_receive+0x934>
                inseg.len -= 1;
 80180dc:	4b78      	ldr	r3, [pc, #480]	@ (80182c0 <tcp_receive+0xb0c>)
 80180de:	891b      	ldrh	r3, [r3, #8]
 80180e0:	3b01      	subs	r3, #1
 80180e2:	b29a      	uxth	r2, r3
 80180e4:	4b76      	ldr	r3, [pc, #472]	@ (80182c0 <tcp_receive+0xb0c>)
 80180e6:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80180e8:	4b75      	ldr	r3, [pc, #468]	@ (80182c0 <tcp_receive+0xb0c>)
 80180ea:	685b      	ldr	r3, [r3, #4]
 80180ec:	4a74      	ldr	r2, [pc, #464]	@ (80182c0 <tcp_receive+0xb0c>)
 80180ee:	8912      	ldrh	r2, [r2, #8]
 80180f0:	4611      	mov	r1, r2
 80180f2:	4618      	mov	r0, r3
 80180f4:	f7fb fe8c 	bl	8013e10 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80180f8:	4b71      	ldr	r3, [pc, #452]	@ (80182c0 <tcp_receive+0xb0c>)
 80180fa:	891c      	ldrh	r4, [r3, #8]
 80180fc:	4b70      	ldr	r3, [pc, #448]	@ (80182c0 <tcp_receive+0xb0c>)
 80180fe:	68db      	ldr	r3, [r3, #12]
 8018100:	899b      	ldrh	r3, [r3, #12]
 8018102:	b29b      	uxth	r3, r3
 8018104:	4618      	mov	r0, r3
 8018106:	f7fa fc49 	bl	801299c <lwip_htons>
 801810a:	4603      	mov	r3, r0
 801810c:	b2db      	uxtb	r3, r3
 801810e:	f003 0303 	and.w	r3, r3, #3
 8018112:	2b00      	cmp	r3, #0
 8018114:	d001      	beq.n	801811a <tcp_receive+0x966>
 8018116:	2301      	movs	r3, #1
 8018118:	e000      	b.n	801811c <tcp_receive+0x968>
 801811a:	2300      	movs	r3, #0
 801811c:	4423      	add	r3, r4
 801811e:	b29a      	uxth	r2, r3
 8018120:	4b65      	ldr	r3, [pc, #404]	@ (80182b8 <tcp_receive+0xb04>)
 8018122:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8018124:	4b64      	ldr	r3, [pc, #400]	@ (80182b8 <tcp_receive+0xb04>)
 8018126:	881b      	ldrh	r3, [r3, #0]
 8018128:	461a      	mov	r2, r3
 801812a:	4b64      	ldr	r3, [pc, #400]	@ (80182bc <tcp_receive+0xb08>)
 801812c:	681b      	ldr	r3, [r3, #0]
 801812e:	441a      	add	r2, r3
 8018130:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018132:	68db      	ldr	r3, [r3, #12]
 8018134:	685b      	ldr	r3, [r3, #4]
 8018136:	429a      	cmp	r2, r3
 8018138:	d006      	beq.n	8018148 <tcp_receive+0x994>
 801813a:	4b62      	ldr	r3, [pc, #392]	@ (80182c4 <tcp_receive+0xb10>)
 801813c:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8018140:	4961      	ldr	r1, [pc, #388]	@ (80182c8 <tcp_receive+0xb14>)
 8018142:	4862      	ldr	r0, [pc, #392]	@ (80182cc <tcp_receive+0xb18>)
 8018144:	f006 f8a2 	bl	801e28c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8018148:	687b      	ldr	r3, [r7, #4]
 801814a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801814c:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801814e:	4b5a      	ldr	r3, [pc, #360]	@ (80182b8 <tcp_receive+0xb04>)
 8018150:	881b      	ldrh	r3, [r3, #0]
 8018152:	461a      	mov	r2, r3
 8018154:	4b59      	ldr	r3, [pc, #356]	@ (80182bc <tcp_receive+0xb08>)
 8018156:	681b      	ldr	r3, [r3, #0]
 8018158:	441a      	add	r2, r3
 801815a:	687b      	ldr	r3, [r7, #4]
 801815c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801815e:	687b      	ldr	r3, [r7, #4]
 8018160:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8018162:	4b55      	ldr	r3, [pc, #340]	@ (80182b8 <tcp_receive+0xb04>)
 8018164:	881b      	ldrh	r3, [r3, #0]
 8018166:	429a      	cmp	r2, r3
 8018168:	d206      	bcs.n	8018178 <tcp_receive+0x9c4>
 801816a:	4b56      	ldr	r3, [pc, #344]	@ (80182c4 <tcp_receive+0xb10>)
 801816c:	f240 6207 	movw	r2, #1543	@ 0x607
 8018170:	4957      	ldr	r1, [pc, #348]	@ (80182d0 <tcp_receive+0xb1c>)
 8018172:	4856      	ldr	r0, [pc, #344]	@ (80182cc <tcp_receive+0xb18>)
 8018174:	f006 f88a 	bl	801e28c <iprintf>
        pcb->rcv_wnd -= tcplen;
 8018178:	687b      	ldr	r3, [r7, #4]
 801817a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801817c:	4b4e      	ldr	r3, [pc, #312]	@ (80182b8 <tcp_receive+0xb04>)
 801817e:	881b      	ldrh	r3, [r3, #0]
 8018180:	1ad3      	subs	r3, r2, r3
 8018182:	b29a      	uxth	r2, r3
 8018184:	687b      	ldr	r3, [r7, #4]
 8018186:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8018188:	6878      	ldr	r0, [r7, #4]
 801818a:	f7fc fedb 	bl	8014f44 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801818e:	4b4c      	ldr	r3, [pc, #304]	@ (80182c0 <tcp_receive+0xb0c>)
 8018190:	685b      	ldr	r3, [r3, #4]
 8018192:	891b      	ldrh	r3, [r3, #8]
 8018194:	2b00      	cmp	r3, #0
 8018196:	d006      	beq.n	80181a6 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8018198:	4b49      	ldr	r3, [pc, #292]	@ (80182c0 <tcp_receive+0xb0c>)
 801819a:	685b      	ldr	r3, [r3, #4]
 801819c:	4a4d      	ldr	r2, [pc, #308]	@ (80182d4 <tcp_receive+0xb20>)
 801819e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80181a0:	4b47      	ldr	r3, [pc, #284]	@ (80182c0 <tcp_receive+0xb0c>)
 80181a2:	2200      	movs	r2, #0
 80181a4:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80181a6:	4b46      	ldr	r3, [pc, #280]	@ (80182c0 <tcp_receive+0xb0c>)
 80181a8:	68db      	ldr	r3, [r3, #12]
 80181aa:	899b      	ldrh	r3, [r3, #12]
 80181ac:	b29b      	uxth	r3, r3
 80181ae:	4618      	mov	r0, r3
 80181b0:	f7fa fbf4 	bl	801299c <lwip_htons>
 80181b4:	4603      	mov	r3, r0
 80181b6:	b2db      	uxtb	r3, r3
 80181b8:	f003 0301 	and.w	r3, r3, #1
 80181bc:	2b00      	cmp	r3, #0
 80181be:	f000 80b8 	beq.w	8018332 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80181c2:	4b45      	ldr	r3, [pc, #276]	@ (80182d8 <tcp_receive+0xb24>)
 80181c4:	781b      	ldrb	r3, [r3, #0]
 80181c6:	f043 0320 	orr.w	r3, r3, #32
 80181ca:	b2da      	uxtb	r2, r3
 80181cc:	4b42      	ldr	r3, [pc, #264]	@ (80182d8 <tcp_receive+0xb24>)
 80181ce:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80181d0:	e0af      	b.n	8018332 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80181d2:	687b      	ldr	r3, [r7, #4]
 80181d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80181d6:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80181d8:	687b      	ldr	r3, [r7, #4]
 80181da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80181dc:	68db      	ldr	r3, [r3, #12]
 80181de:	685b      	ldr	r3, [r3, #4]
 80181e0:	4a36      	ldr	r2, [pc, #216]	@ (80182bc <tcp_receive+0xb08>)
 80181e2:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80181e4:	68bb      	ldr	r3, [r7, #8]
 80181e6:	891b      	ldrh	r3, [r3, #8]
 80181e8:	461c      	mov	r4, r3
 80181ea:	68bb      	ldr	r3, [r7, #8]
 80181ec:	68db      	ldr	r3, [r3, #12]
 80181ee:	899b      	ldrh	r3, [r3, #12]
 80181f0:	b29b      	uxth	r3, r3
 80181f2:	4618      	mov	r0, r3
 80181f4:	f7fa fbd2 	bl	801299c <lwip_htons>
 80181f8:	4603      	mov	r3, r0
 80181fa:	b2db      	uxtb	r3, r3
 80181fc:	f003 0303 	and.w	r3, r3, #3
 8018200:	2b00      	cmp	r3, #0
 8018202:	d001      	beq.n	8018208 <tcp_receive+0xa54>
 8018204:	2301      	movs	r3, #1
 8018206:	e000      	b.n	801820a <tcp_receive+0xa56>
 8018208:	2300      	movs	r3, #0
 801820a:	191a      	adds	r2, r3, r4
 801820c:	687b      	ldr	r3, [r7, #4]
 801820e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018210:	441a      	add	r2, r3
 8018212:	687b      	ldr	r3, [r7, #4]
 8018214:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8018216:	687b      	ldr	r3, [r7, #4]
 8018218:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801821a:	461c      	mov	r4, r3
 801821c:	68bb      	ldr	r3, [r7, #8]
 801821e:	891b      	ldrh	r3, [r3, #8]
 8018220:	461d      	mov	r5, r3
 8018222:	68bb      	ldr	r3, [r7, #8]
 8018224:	68db      	ldr	r3, [r3, #12]
 8018226:	899b      	ldrh	r3, [r3, #12]
 8018228:	b29b      	uxth	r3, r3
 801822a:	4618      	mov	r0, r3
 801822c:	f7fa fbb6 	bl	801299c <lwip_htons>
 8018230:	4603      	mov	r3, r0
 8018232:	b2db      	uxtb	r3, r3
 8018234:	f003 0303 	and.w	r3, r3, #3
 8018238:	2b00      	cmp	r3, #0
 801823a:	d001      	beq.n	8018240 <tcp_receive+0xa8c>
 801823c:	2301      	movs	r3, #1
 801823e:	e000      	b.n	8018242 <tcp_receive+0xa8e>
 8018240:	2300      	movs	r3, #0
 8018242:	442b      	add	r3, r5
 8018244:	429c      	cmp	r4, r3
 8018246:	d206      	bcs.n	8018256 <tcp_receive+0xaa2>
 8018248:	4b1e      	ldr	r3, [pc, #120]	@ (80182c4 <tcp_receive+0xb10>)
 801824a:	f240 622b 	movw	r2, #1579	@ 0x62b
 801824e:	4923      	ldr	r1, [pc, #140]	@ (80182dc <tcp_receive+0xb28>)
 8018250:	481e      	ldr	r0, [pc, #120]	@ (80182cc <tcp_receive+0xb18>)
 8018252:	f006 f81b 	bl	801e28c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8018256:	68bb      	ldr	r3, [r7, #8]
 8018258:	891b      	ldrh	r3, [r3, #8]
 801825a:	461c      	mov	r4, r3
 801825c:	68bb      	ldr	r3, [r7, #8]
 801825e:	68db      	ldr	r3, [r3, #12]
 8018260:	899b      	ldrh	r3, [r3, #12]
 8018262:	b29b      	uxth	r3, r3
 8018264:	4618      	mov	r0, r3
 8018266:	f7fa fb99 	bl	801299c <lwip_htons>
 801826a:	4603      	mov	r3, r0
 801826c:	b2db      	uxtb	r3, r3
 801826e:	f003 0303 	and.w	r3, r3, #3
 8018272:	2b00      	cmp	r3, #0
 8018274:	d001      	beq.n	801827a <tcp_receive+0xac6>
 8018276:	2301      	movs	r3, #1
 8018278:	e000      	b.n	801827c <tcp_receive+0xac8>
 801827a:	2300      	movs	r3, #0
 801827c:	1919      	adds	r1, r3, r4
 801827e:	687b      	ldr	r3, [r7, #4]
 8018280:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8018282:	b28b      	uxth	r3, r1
 8018284:	1ad3      	subs	r3, r2, r3
 8018286:	b29a      	uxth	r2, r3
 8018288:	687b      	ldr	r3, [r7, #4]
 801828a:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801828c:	6878      	ldr	r0, [r7, #4]
 801828e:	f7fc fe59 	bl	8014f44 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8018292:	68bb      	ldr	r3, [r7, #8]
 8018294:	685b      	ldr	r3, [r3, #4]
 8018296:	891b      	ldrh	r3, [r3, #8]
 8018298:	2b00      	cmp	r3, #0
 801829a:	d028      	beq.n	80182ee <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801829c:	4b0d      	ldr	r3, [pc, #52]	@ (80182d4 <tcp_receive+0xb20>)
 801829e:	681b      	ldr	r3, [r3, #0]
 80182a0:	2b00      	cmp	r3, #0
 80182a2:	d01d      	beq.n	80182e0 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 80182a4:	4b0b      	ldr	r3, [pc, #44]	@ (80182d4 <tcp_receive+0xb20>)
 80182a6:	681a      	ldr	r2, [r3, #0]
 80182a8:	68bb      	ldr	r3, [r7, #8]
 80182aa:	685b      	ldr	r3, [r3, #4]
 80182ac:	4619      	mov	r1, r3
 80182ae:	4610      	mov	r0, r2
 80182b0:	f7fc f802 	bl	80142b8 <pbuf_cat>
 80182b4:	e018      	b.n	80182e8 <tcp_receive+0xb34>
 80182b6:	bf00      	nop
 80182b8:	2000cb02 	.word	0x2000cb02
 80182bc:	2000caf8 	.word	0x2000caf8
 80182c0:	2000cad8 	.word	0x2000cad8
 80182c4:	080225c0 	.word	0x080225c0
 80182c8:	080229a0 	.word	0x080229a0
 80182cc:	0802260c 	.word	0x0802260c
 80182d0:	080229dc 	.word	0x080229dc
 80182d4:	2000cb08 	.word	0x2000cb08
 80182d8:	2000cb05 	.word	0x2000cb05
 80182dc:	080229fc 	.word	0x080229fc
            } else {
              recv_data = cseg->p;
 80182e0:	68bb      	ldr	r3, [r7, #8]
 80182e2:	685b      	ldr	r3, [r3, #4]
 80182e4:	4a70      	ldr	r2, [pc, #448]	@ (80184a8 <tcp_receive+0xcf4>)
 80182e6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80182e8:	68bb      	ldr	r3, [r7, #8]
 80182ea:	2200      	movs	r2, #0
 80182ec:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80182ee:	68bb      	ldr	r3, [r7, #8]
 80182f0:	68db      	ldr	r3, [r3, #12]
 80182f2:	899b      	ldrh	r3, [r3, #12]
 80182f4:	b29b      	uxth	r3, r3
 80182f6:	4618      	mov	r0, r3
 80182f8:	f7fa fb50 	bl	801299c <lwip_htons>
 80182fc:	4603      	mov	r3, r0
 80182fe:	b2db      	uxtb	r3, r3
 8018300:	f003 0301 	and.w	r3, r3, #1
 8018304:	2b00      	cmp	r3, #0
 8018306:	d00d      	beq.n	8018324 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8018308:	4b68      	ldr	r3, [pc, #416]	@ (80184ac <tcp_receive+0xcf8>)
 801830a:	781b      	ldrb	r3, [r3, #0]
 801830c:	f043 0320 	orr.w	r3, r3, #32
 8018310:	b2da      	uxtb	r2, r3
 8018312:	4b66      	ldr	r3, [pc, #408]	@ (80184ac <tcp_receive+0xcf8>)
 8018314:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8018316:	687b      	ldr	r3, [r7, #4]
 8018318:	7d1b      	ldrb	r3, [r3, #20]
 801831a:	2b04      	cmp	r3, #4
 801831c:	d102      	bne.n	8018324 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 801831e:	687b      	ldr	r3, [r7, #4]
 8018320:	2207      	movs	r2, #7
 8018322:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8018324:	68bb      	ldr	r3, [r7, #8]
 8018326:	681a      	ldr	r2, [r3, #0]
 8018328:	687b      	ldr	r3, [r7, #4]
 801832a:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 801832c:	68b8      	ldr	r0, [r7, #8]
 801832e:	f7fd fb30 	bl	8015992 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8018332:	687b      	ldr	r3, [r7, #4]
 8018334:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018336:	2b00      	cmp	r3, #0
 8018338:	d008      	beq.n	801834c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801833a:	687b      	ldr	r3, [r7, #4]
 801833c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801833e:	68db      	ldr	r3, [r3, #12]
 8018340:	685a      	ldr	r2, [r3, #4]
 8018342:	687b      	ldr	r3, [r7, #4]
 8018344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 8018346:	429a      	cmp	r2, r3
 8018348:	f43f af43 	beq.w	80181d2 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801834c:	687b      	ldr	r3, [r7, #4]
 801834e:	8b5b      	ldrh	r3, [r3, #26]
 8018350:	f003 0301 	and.w	r3, r3, #1
 8018354:	2b00      	cmp	r3, #0
 8018356:	d00e      	beq.n	8018376 <tcp_receive+0xbc2>
 8018358:	687b      	ldr	r3, [r7, #4]
 801835a:	8b5b      	ldrh	r3, [r3, #26]
 801835c:	f023 0301 	bic.w	r3, r3, #1
 8018360:	b29a      	uxth	r2, r3
 8018362:	687b      	ldr	r3, [r7, #4]
 8018364:	835a      	strh	r2, [r3, #26]
 8018366:	687b      	ldr	r3, [r7, #4]
 8018368:	8b5b      	ldrh	r3, [r3, #26]
 801836a:	f043 0302 	orr.w	r3, r3, #2
 801836e:	b29a      	uxth	r2, r3
 8018370:	687b      	ldr	r3, [r7, #4]
 8018372:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8018374:	e187      	b.n	8018686 <tcp_receive+0xed2>
        tcp_ack(pcb);
 8018376:	687b      	ldr	r3, [r7, #4]
 8018378:	8b5b      	ldrh	r3, [r3, #26]
 801837a:	f043 0301 	orr.w	r3, r3, #1
 801837e:	b29a      	uxth	r2, r3
 8018380:	687b      	ldr	r3, [r7, #4]
 8018382:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8018384:	e17f      	b.n	8018686 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8018386:	687b      	ldr	r3, [r7, #4]
 8018388:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801838a:	2b00      	cmp	r3, #0
 801838c:	d106      	bne.n	801839c <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801838e:	4848      	ldr	r0, [pc, #288]	@ (80184b0 <tcp_receive+0xcfc>)
 8018390:	f7fd fb36 	bl	8015a00 <tcp_seg_copy>
 8018394:	4602      	mov	r2, r0
 8018396:	687b      	ldr	r3, [r7, #4]
 8018398:	675a      	str	r2, [r3, #116]	@ 0x74
 801839a:	e16c      	b.n	8018676 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801839c:	2300      	movs	r3, #0
 801839e:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80183a0:	687b      	ldr	r3, [r7, #4]
 80183a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80183a4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80183a6:	e156      	b.n	8018656 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 80183a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80183aa:	68db      	ldr	r3, [r3, #12]
 80183ac:	685a      	ldr	r2, [r3, #4]
 80183ae:	4b41      	ldr	r3, [pc, #260]	@ (80184b4 <tcp_receive+0xd00>)
 80183b0:	681b      	ldr	r3, [r3, #0]
 80183b2:	429a      	cmp	r2, r3
 80183b4:	d11d      	bne.n	80183f2 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80183b6:	4b3e      	ldr	r3, [pc, #248]	@ (80184b0 <tcp_receive+0xcfc>)
 80183b8:	891a      	ldrh	r2, [r3, #8]
 80183ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80183bc:	891b      	ldrh	r3, [r3, #8]
 80183be:	429a      	cmp	r2, r3
 80183c0:	f240 814e 	bls.w	8018660 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80183c4:	483a      	ldr	r0, [pc, #232]	@ (80184b0 <tcp_receive+0xcfc>)
 80183c6:	f7fd fb1b 	bl	8015a00 <tcp_seg_copy>
 80183ca:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80183cc:	697b      	ldr	r3, [r7, #20]
 80183ce:	2b00      	cmp	r3, #0
 80183d0:	f000 8148 	beq.w	8018664 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 80183d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80183d6:	2b00      	cmp	r3, #0
 80183d8:	d003      	beq.n	80183e2 <tcp_receive+0xc2e>
                    prev->next = cseg;
 80183da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80183dc:	697a      	ldr	r2, [r7, #20]
 80183de:	601a      	str	r2, [r3, #0]
 80183e0:	e002      	b.n	80183e8 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 80183e2:	687b      	ldr	r3, [r7, #4]
 80183e4:	697a      	ldr	r2, [r7, #20]
 80183e6:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80183e8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80183ea:	6978      	ldr	r0, [r7, #20]
 80183ec:	f7ff f8de 	bl	80175ac <tcp_oos_insert_segment>
                }
                break;
 80183f0:	e138      	b.n	8018664 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80183f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80183f4:	2b00      	cmp	r3, #0
 80183f6:	d117      	bne.n	8018428 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80183f8:	4b2e      	ldr	r3, [pc, #184]	@ (80184b4 <tcp_receive+0xd00>)
 80183fa:	681a      	ldr	r2, [r3, #0]
 80183fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80183fe:	68db      	ldr	r3, [r3, #12]
 8018400:	685b      	ldr	r3, [r3, #4]
 8018402:	1ad3      	subs	r3, r2, r3
 8018404:	2b00      	cmp	r3, #0
 8018406:	da57      	bge.n	80184b8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8018408:	4829      	ldr	r0, [pc, #164]	@ (80184b0 <tcp_receive+0xcfc>)
 801840a:	f7fd faf9 	bl	8015a00 <tcp_seg_copy>
 801840e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8018410:	69bb      	ldr	r3, [r7, #24]
 8018412:	2b00      	cmp	r3, #0
 8018414:	f000 8128 	beq.w	8018668 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 8018418:	687b      	ldr	r3, [r7, #4]
 801841a:	69ba      	ldr	r2, [r7, #24]
 801841c:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 801841e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8018420:	69b8      	ldr	r0, [r7, #24]
 8018422:	f7ff f8c3 	bl	80175ac <tcp_oos_insert_segment>
                  }
                  break;
 8018426:	e11f      	b.n	8018668 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8018428:	4b22      	ldr	r3, [pc, #136]	@ (80184b4 <tcp_receive+0xd00>)
 801842a:	681a      	ldr	r2, [r3, #0]
 801842c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801842e:	68db      	ldr	r3, [r3, #12]
 8018430:	685b      	ldr	r3, [r3, #4]
 8018432:	1ad3      	subs	r3, r2, r3
 8018434:	3b01      	subs	r3, #1
 8018436:	2b00      	cmp	r3, #0
 8018438:	db3e      	blt.n	80184b8 <tcp_receive+0xd04>
 801843a:	4b1e      	ldr	r3, [pc, #120]	@ (80184b4 <tcp_receive+0xd00>)
 801843c:	681a      	ldr	r2, [r3, #0]
 801843e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018440:	68db      	ldr	r3, [r3, #12]
 8018442:	685b      	ldr	r3, [r3, #4]
 8018444:	1ad3      	subs	r3, r2, r3
 8018446:	3301      	adds	r3, #1
 8018448:	2b00      	cmp	r3, #0
 801844a:	dc35      	bgt.n	80184b8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801844c:	4818      	ldr	r0, [pc, #96]	@ (80184b0 <tcp_receive+0xcfc>)
 801844e:	f7fd fad7 	bl	8015a00 <tcp_seg_copy>
 8018452:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8018454:	69fb      	ldr	r3, [r7, #28]
 8018456:	2b00      	cmp	r3, #0
 8018458:	f000 8108 	beq.w	801866c <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801845c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801845e:	68db      	ldr	r3, [r3, #12]
 8018460:	685b      	ldr	r3, [r3, #4]
 8018462:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8018464:	8912      	ldrh	r2, [r2, #8]
 8018466:	441a      	add	r2, r3
 8018468:	4b12      	ldr	r3, [pc, #72]	@ (80184b4 <tcp_receive+0xd00>)
 801846a:	681b      	ldr	r3, [r3, #0]
 801846c:	1ad3      	subs	r3, r2, r3
 801846e:	2b00      	cmp	r3, #0
 8018470:	dd12      	ble.n	8018498 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8018472:	4b10      	ldr	r3, [pc, #64]	@ (80184b4 <tcp_receive+0xd00>)
 8018474:	681b      	ldr	r3, [r3, #0]
 8018476:	b29a      	uxth	r2, r3
 8018478:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801847a:	68db      	ldr	r3, [r3, #12]
 801847c:	685b      	ldr	r3, [r3, #4]
 801847e:	b29b      	uxth	r3, r3
 8018480:	1ad3      	subs	r3, r2, r3
 8018482:	b29a      	uxth	r2, r3
 8018484:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018486:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8018488:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801848a:	685a      	ldr	r2, [r3, #4]
 801848c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801848e:	891b      	ldrh	r3, [r3, #8]
 8018490:	4619      	mov	r1, r3
 8018492:	4610      	mov	r0, r2
 8018494:	f7fb fcbc 	bl	8013e10 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8018498:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801849a:	69fa      	ldr	r2, [r7, #28]
 801849c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801849e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80184a0:	69f8      	ldr	r0, [r7, #28]
 80184a2:	f7ff f883 	bl	80175ac <tcp_oos_insert_segment>
                  }
                  break;
 80184a6:	e0e1      	b.n	801866c <tcp_receive+0xeb8>
 80184a8:	2000cb08 	.word	0x2000cb08
 80184ac:	2000cb05 	.word	0x2000cb05
 80184b0:	2000cad8 	.word	0x2000cad8
 80184b4:	2000caf8 	.word	0x2000caf8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80184b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80184ba:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80184bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80184be:	681b      	ldr	r3, [r3, #0]
 80184c0:	2b00      	cmp	r3, #0
 80184c2:	f040 80c5 	bne.w	8018650 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80184c6:	4b7f      	ldr	r3, [pc, #508]	@ (80186c4 <tcp_receive+0xf10>)
 80184c8:	681a      	ldr	r2, [r3, #0]
 80184ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80184cc:	68db      	ldr	r3, [r3, #12]
 80184ce:	685b      	ldr	r3, [r3, #4]
 80184d0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80184d2:	2b00      	cmp	r3, #0
 80184d4:	f340 80bc 	ble.w	8018650 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80184d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80184da:	68db      	ldr	r3, [r3, #12]
 80184dc:	899b      	ldrh	r3, [r3, #12]
 80184de:	b29b      	uxth	r3, r3
 80184e0:	4618      	mov	r0, r3
 80184e2:	f7fa fa5b 	bl	801299c <lwip_htons>
 80184e6:	4603      	mov	r3, r0
 80184e8:	b2db      	uxtb	r3, r3
 80184ea:	f003 0301 	and.w	r3, r3, #1
 80184ee:	2b00      	cmp	r3, #0
 80184f0:	f040 80be 	bne.w	8018670 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80184f4:	4874      	ldr	r0, [pc, #464]	@ (80186c8 <tcp_receive+0xf14>)
 80184f6:	f7fd fa83 	bl	8015a00 <tcp_seg_copy>
 80184fa:	4602      	mov	r2, r0
 80184fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80184fe:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8018500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018502:	681b      	ldr	r3, [r3, #0]
 8018504:	2b00      	cmp	r3, #0
 8018506:	f000 80b5 	beq.w	8018674 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801850a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801850c:	68db      	ldr	r3, [r3, #12]
 801850e:	685b      	ldr	r3, [r3, #4]
 8018510:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8018512:	8912      	ldrh	r2, [r2, #8]
 8018514:	441a      	add	r2, r3
 8018516:	4b6b      	ldr	r3, [pc, #428]	@ (80186c4 <tcp_receive+0xf10>)
 8018518:	681b      	ldr	r3, [r3, #0]
 801851a:	1ad3      	subs	r3, r2, r3
 801851c:	2b00      	cmp	r3, #0
 801851e:	dd12      	ble.n	8018546 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8018520:	4b68      	ldr	r3, [pc, #416]	@ (80186c4 <tcp_receive+0xf10>)
 8018522:	681b      	ldr	r3, [r3, #0]
 8018524:	b29a      	uxth	r2, r3
 8018526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018528:	68db      	ldr	r3, [r3, #12]
 801852a:	685b      	ldr	r3, [r3, #4]
 801852c:	b29b      	uxth	r3, r3
 801852e:	1ad3      	subs	r3, r2, r3
 8018530:	b29a      	uxth	r2, r3
 8018532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018534:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8018536:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018538:	685a      	ldr	r2, [r3, #4]
 801853a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801853c:	891b      	ldrh	r3, [r3, #8]
 801853e:	4619      	mov	r1, r3
 8018540:	4610      	mov	r0, r2
 8018542:	f7fb fc65 	bl	8013e10 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8018546:	4b61      	ldr	r3, [pc, #388]	@ (80186cc <tcp_receive+0xf18>)
 8018548:	881b      	ldrh	r3, [r3, #0]
 801854a:	461a      	mov	r2, r3
 801854c:	4b5d      	ldr	r3, [pc, #372]	@ (80186c4 <tcp_receive+0xf10>)
 801854e:	681b      	ldr	r3, [r3, #0]
 8018550:	441a      	add	r2, r3
 8018552:	687b      	ldr	r3, [r7, #4]
 8018554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018556:	6879      	ldr	r1, [r7, #4]
 8018558:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801855a:	440b      	add	r3, r1
 801855c:	1ad3      	subs	r3, r2, r3
 801855e:	2b00      	cmp	r3, #0
 8018560:	f340 8088 	ble.w	8018674 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8018564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018566:	681b      	ldr	r3, [r3, #0]
 8018568:	68db      	ldr	r3, [r3, #12]
 801856a:	899b      	ldrh	r3, [r3, #12]
 801856c:	b29b      	uxth	r3, r3
 801856e:	4618      	mov	r0, r3
 8018570:	f7fa fa14 	bl	801299c <lwip_htons>
 8018574:	4603      	mov	r3, r0
 8018576:	b2db      	uxtb	r3, r3
 8018578:	f003 0301 	and.w	r3, r3, #1
 801857c:	2b00      	cmp	r3, #0
 801857e:	d021      	beq.n	80185c4 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8018580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018582:	681b      	ldr	r3, [r3, #0]
 8018584:	68db      	ldr	r3, [r3, #12]
 8018586:	899b      	ldrh	r3, [r3, #12]
 8018588:	b29b      	uxth	r3, r3
 801858a:	b21b      	sxth	r3, r3
 801858c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8018590:	b21c      	sxth	r4, r3
 8018592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018594:	681b      	ldr	r3, [r3, #0]
 8018596:	68db      	ldr	r3, [r3, #12]
 8018598:	899b      	ldrh	r3, [r3, #12]
 801859a:	b29b      	uxth	r3, r3
 801859c:	4618      	mov	r0, r3
 801859e:	f7fa f9fd 	bl	801299c <lwip_htons>
 80185a2:	4603      	mov	r3, r0
 80185a4:	b2db      	uxtb	r3, r3
 80185a6:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80185aa:	b29b      	uxth	r3, r3
 80185ac:	4618      	mov	r0, r3
 80185ae:	f7fa f9f5 	bl	801299c <lwip_htons>
 80185b2:	4603      	mov	r3, r0
 80185b4:	b21b      	sxth	r3, r3
 80185b6:	4323      	orrs	r3, r4
 80185b8:	b21a      	sxth	r2, r3
 80185ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80185bc:	681b      	ldr	r3, [r3, #0]
 80185be:	68db      	ldr	r3, [r3, #12]
 80185c0:	b292      	uxth	r2, r2
 80185c2:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80185c4:	687b      	ldr	r3, [r7, #4]
 80185c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80185c8:	b29a      	uxth	r2, r3
 80185ca:	687b      	ldr	r3, [r7, #4]
 80185cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80185ce:	4413      	add	r3, r2
 80185d0:	b299      	uxth	r1, r3
 80185d2:	4b3c      	ldr	r3, [pc, #240]	@ (80186c4 <tcp_receive+0xf10>)
 80185d4:	681b      	ldr	r3, [r3, #0]
 80185d6:	b29a      	uxth	r2, r3
 80185d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80185da:	681b      	ldr	r3, [r3, #0]
 80185dc:	1a8a      	subs	r2, r1, r2
 80185de:	b292      	uxth	r2, r2
 80185e0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80185e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80185e4:	681b      	ldr	r3, [r3, #0]
 80185e6:	685a      	ldr	r2, [r3, #4]
 80185e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80185ea:	681b      	ldr	r3, [r3, #0]
 80185ec:	891b      	ldrh	r3, [r3, #8]
 80185ee:	4619      	mov	r1, r3
 80185f0:	4610      	mov	r0, r2
 80185f2:	f7fb fc0d 	bl	8013e10 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80185f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80185f8:	681b      	ldr	r3, [r3, #0]
 80185fa:	891c      	ldrh	r4, [r3, #8]
 80185fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80185fe:	681b      	ldr	r3, [r3, #0]
 8018600:	68db      	ldr	r3, [r3, #12]
 8018602:	899b      	ldrh	r3, [r3, #12]
 8018604:	b29b      	uxth	r3, r3
 8018606:	4618      	mov	r0, r3
 8018608:	f7fa f9c8 	bl	801299c <lwip_htons>
 801860c:	4603      	mov	r3, r0
 801860e:	b2db      	uxtb	r3, r3
 8018610:	f003 0303 	and.w	r3, r3, #3
 8018614:	2b00      	cmp	r3, #0
 8018616:	d001      	beq.n	801861c <tcp_receive+0xe68>
 8018618:	2301      	movs	r3, #1
 801861a:	e000      	b.n	801861e <tcp_receive+0xe6a>
 801861c:	2300      	movs	r3, #0
 801861e:	4423      	add	r3, r4
 8018620:	b29a      	uxth	r2, r3
 8018622:	4b2a      	ldr	r3, [pc, #168]	@ (80186cc <tcp_receive+0xf18>)
 8018624:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8018626:	4b29      	ldr	r3, [pc, #164]	@ (80186cc <tcp_receive+0xf18>)
 8018628:	881b      	ldrh	r3, [r3, #0]
 801862a:	461a      	mov	r2, r3
 801862c:	4b25      	ldr	r3, [pc, #148]	@ (80186c4 <tcp_receive+0xf10>)
 801862e:	681b      	ldr	r3, [r3, #0]
 8018630:	441a      	add	r2, r3
 8018632:	687b      	ldr	r3, [r7, #4]
 8018634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018636:	6879      	ldr	r1, [r7, #4]
 8018638:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801863a:	440b      	add	r3, r1
 801863c:	429a      	cmp	r2, r3
 801863e:	d019      	beq.n	8018674 <tcp_receive+0xec0>
 8018640:	4b23      	ldr	r3, [pc, #140]	@ (80186d0 <tcp_receive+0xf1c>)
 8018642:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 8018646:	4923      	ldr	r1, [pc, #140]	@ (80186d4 <tcp_receive+0xf20>)
 8018648:	4823      	ldr	r0, [pc, #140]	@ (80186d8 <tcp_receive+0xf24>)
 801864a:	f005 fe1f 	bl	801e28c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801864e:	e011      	b.n	8018674 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8018650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018652:	681b      	ldr	r3, [r3, #0]
 8018654:	63bb      	str	r3, [r7, #56]	@ 0x38
 8018656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018658:	2b00      	cmp	r3, #0
 801865a:	f47f aea5 	bne.w	80183a8 <tcp_receive+0xbf4>
 801865e:	e00a      	b.n	8018676 <tcp_receive+0xec2>
                break;
 8018660:	bf00      	nop
 8018662:	e008      	b.n	8018676 <tcp_receive+0xec2>
                break;
 8018664:	bf00      	nop
 8018666:	e006      	b.n	8018676 <tcp_receive+0xec2>
                  break;
 8018668:	bf00      	nop
 801866a:	e004      	b.n	8018676 <tcp_receive+0xec2>
                  break;
 801866c:	bf00      	nop
 801866e:	e002      	b.n	8018676 <tcp_receive+0xec2>
                  break;
 8018670:	bf00      	nop
 8018672:	e000      	b.n	8018676 <tcp_receive+0xec2>
                break;
 8018674:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8018676:	6878      	ldr	r0, [r7, #4]
 8018678:	f001 fe88 	bl	801a38c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801867c:	e003      	b.n	8018686 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801867e:	6878      	ldr	r0, [r7, #4]
 8018680:	f001 fe84 	bl	801a38c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8018684:	e01a      	b.n	80186bc <tcp_receive+0xf08>
 8018686:	e019      	b.n	80186bc <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8018688:	4b0e      	ldr	r3, [pc, #56]	@ (80186c4 <tcp_receive+0xf10>)
 801868a:	681a      	ldr	r2, [r3, #0]
 801868c:	687b      	ldr	r3, [r7, #4]
 801868e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018690:	1ad3      	subs	r3, r2, r3
 8018692:	2b00      	cmp	r3, #0
 8018694:	db0a      	blt.n	80186ac <tcp_receive+0xef8>
 8018696:	4b0b      	ldr	r3, [pc, #44]	@ (80186c4 <tcp_receive+0xf10>)
 8018698:	681a      	ldr	r2, [r3, #0]
 801869a:	687b      	ldr	r3, [r7, #4]
 801869c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801869e:	6879      	ldr	r1, [r7, #4]
 80186a0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80186a2:	440b      	add	r3, r1
 80186a4:	1ad3      	subs	r3, r2, r3
 80186a6:	3301      	adds	r3, #1
 80186a8:	2b00      	cmp	r3, #0
 80186aa:	dd07      	ble.n	80186bc <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 80186ac:	687b      	ldr	r3, [r7, #4]
 80186ae:	8b5b      	ldrh	r3, [r3, #26]
 80186b0:	f043 0302 	orr.w	r3, r3, #2
 80186b4:	b29a      	uxth	r2, r3
 80186b6:	687b      	ldr	r3, [r7, #4]
 80186b8:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80186ba:	e7ff      	b.n	80186bc <tcp_receive+0xf08>
 80186bc:	bf00      	nop
 80186be:	3750      	adds	r7, #80	@ 0x50
 80186c0:	46bd      	mov	sp, r7
 80186c2:	bdb0      	pop	{r4, r5, r7, pc}
 80186c4:	2000caf8 	.word	0x2000caf8
 80186c8:	2000cad8 	.word	0x2000cad8
 80186cc:	2000cb02 	.word	0x2000cb02
 80186d0:	080225c0 	.word	0x080225c0
 80186d4:	08022968 	.word	0x08022968
 80186d8:	0802260c 	.word	0x0802260c

080186dc <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80186dc:	b480      	push	{r7}
 80186de:	b083      	sub	sp, #12
 80186e0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80186e2:	4b15      	ldr	r3, [pc, #84]	@ (8018738 <tcp_get_next_optbyte+0x5c>)
 80186e4:	881b      	ldrh	r3, [r3, #0]
 80186e6:	1c5a      	adds	r2, r3, #1
 80186e8:	b291      	uxth	r1, r2
 80186ea:	4a13      	ldr	r2, [pc, #76]	@ (8018738 <tcp_get_next_optbyte+0x5c>)
 80186ec:	8011      	strh	r1, [r2, #0]
 80186ee:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80186f0:	4b12      	ldr	r3, [pc, #72]	@ (801873c <tcp_get_next_optbyte+0x60>)
 80186f2:	681b      	ldr	r3, [r3, #0]
 80186f4:	2b00      	cmp	r3, #0
 80186f6:	d004      	beq.n	8018702 <tcp_get_next_optbyte+0x26>
 80186f8:	4b11      	ldr	r3, [pc, #68]	@ (8018740 <tcp_get_next_optbyte+0x64>)
 80186fa:	881b      	ldrh	r3, [r3, #0]
 80186fc:	88fa      	ldrh	r2, [r7, #6]
 80186fe:	429a      	cmp	r2, r3
 8018700:	d208      	bcs.n	8018714 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8018702:	4b10      	ldr	r3, [pc, #64]	@ (8018744 <tcp_get_next_optbyte+0x68>)
 8018704:	681b      	ldr	r3, [r3, #0]
 8018706:	3314      	adds	r3, #20
 8018708:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801870a:	88fb      	ldrh	r3, [r7, #6]
 801870c:	683a      	ldr	r2, [r7, #0]
 801870e:	4413      	add	r3, r2
 8018710:	781b      	ldrb	r3, [r3, #0]
 8018712:	e00b      	b.n	801872c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8018714:	88fb      	ldrh	r3, [r7, #6]
 8018716:	b2da      	uxtb	r2, r3
 8018718:	4b09      	ldr	r3, [pc, #36]	@ (8018740 <tcp_get_next_optbyte+0x64>)
 801871a:	881b      	ldrh	r3, [r3, #0]
 801871c:	b2db      	uxtb	r3, r3
 801871e:	1ad3      	subs	r3, r2, r3
 8018720:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8018722:	4b06      	ldr	r3, [pc, #24]	@ (801873c <tcp_get_next_optbyte+0x60>)
 8018724:	681a      	ldr	r2, [r3, #0]
 8018726:	797b      	ldrb	r3, [r7, #5]
 8018728:	4413      	add	r3, r2
 801872a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801872c:	4618      	mov	r0, r3
 801872e:	370c      	adds	r7, #12
 8018730:	46bd      	mov	sp, r7
 8018732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018736:	4770      	bx	lr
 8018738:	2000caf4 	.word	0x2000caf4
 801873c:	2000caf0 	.word	0x2000caf0
 8018740:	2000caee 	.word	0x2000caee
 8018744:	2000cae8 	.word	0x2000cae8

08018748 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8018748:	b580      	push	{r7, lr}
 801874a:	b084      	sub	sp, #16
 801874c:	af00      	add	r7, sp, #0
 801874e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8018750:	687b      	ldr	r3, [r7, #4]
 8018752:	2b00      	cmp	r3, #0
 8018754:	d106      	bne.n	8018764 <tcp_parseopt+0x1c>
 8018756:	4b32      	ldr	r3, [pc, #200]	@ (8018820 <tcp_parseopt+0xd8>)
 8018758:	f240 727d 	movw	r2, #1917	@ 0x77d
 801875c:	4931      	ldr	r1, [pc, #196]	@ (8018824 <tcp_parseopt+0xdc>)
 801875e:	4832      	ldr	r0, [pc, #200]	@ (8018828 <tcp_parseopt+0xe0>)
 8018760:	f005 fd94 	bl	801e28c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8018764:	4b31      	ldr	r3, [pc, #196]	@ (801882c <tcp_parseopt+0xe4>)
 8018766:	881b      	ldrh	r3, [r3, #0]
 8018768:	2b00      	cmp	r3, #0
 801876a:	d056      	beq.n	801881a <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801876c:	4b30      	ldr	r3, [pc, #192]	@ (8018830 <tcp_parseopt+0xe8>)
 801876e:	2200      	movs	r2, #0
 8018770:	801a      	strh	r2, [r3, #0]
 8018772:	e046      	b.n	8018802 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8018774:	f7ff ffb2 	bl	80186dc <tcp_get_next_optbyte>
 8018778:	4603      	mov	r3, r0
 801877a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801877c:	7bfb      	ldrb	r3, [r7, #15]
 801877e:	2b02      	cmp	r3, #2
 8018780:	d006      	beq.n	8018790 <tcp_parseopt+0x48>
 8018782:	2b02      	cmp	r3, #2
 8018784:	dc2a      	bgt.n	80187dc <tcp_parseopt+0x94>
 8018786:	2b00      	cmp	r3, #0
 8018788:	d042      	beq.n	8018810 <tcp_parseopt+0xc8>
 801878a:	2b01      	cmp	r3, #1
 801878c:	d038      	beq.n	8018800 <tcp_parseopt+0xb8>
 801878e:	e025      	b.n	80187dc <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8018790:	f7ff ffa4 	bl	80186dc <tcp_get_next_optbyte>
 8018794:	4603      	mov	r3, r0
 8018796:	2b04      	cmp	r3, #4
 8018798:	d13c      	bne.n	8018814 <tcp_parseopt+0xcc>
 801879a:	4b25      	ldr	r3, [pc, #148]	@ (8018830 <tcp_parseopt+0xe8>)
 801879c:	881b      	ldrh	r3, [r3, #0]
 801879e:	3301      	adds	r3, #1
 80187a0:	4a22      	ldr	r2, [pc, #136]	@ (801882c <tcp_parseopt+0xe4>)
 80187a2:	8812      	ldrh	r2, [r2, #0]
 80187a4:	4293      	cmp	r3, r2
 80187a6:	da35      	bge.n	8018814 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80187a8:	f7ff ff98 	bl	80186dc <tcp_get_next_optbyte>
 80187ac:	4603      	mov	r3, r0
 80187ae:	021b      	lsls	r3, r3, #8
 80187b0:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80187b2:	f7ff ff93 	bl	80186dc <tcp_get_next_optbyte>
 80187b6:	4603      	mov	r3, r0
 80187b8:	461a      	mov	r2, r3
 80187ba:	89bb      	ldrh	r3, [r7, #12]
 80187bc:	4313      	orrs	r3, r2
 80187be:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80187c0:	89bb      	ldrh	r3, [r7, #12]
 80187c2:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 80187c6:	d804      	bhi.n	80187d2 <tcp_parseopt+0x8a>
 80187c8:	89bb      	ldrh	r3, [r7, #12]
 80187ca:	2b00      	cmp	r3, #0
 80187cc:	d001      	beq.n	80187d2 <tcp_parseopt+0x8a>
 80187ce:	89ba      	ldrh	r2, [r7, #12]
 80187d0:	e001      	b.n	80187d6 <tcp_parseopt+0x8e>
 80187d2:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80187d6:	687b      	ldr	r3, [r7, #4]
 80187d8:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 80187da:	e012      	b.n	8018802 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80187dc:	f7ff ff7e 	bl	80186dc <tcp_get_next_optbyte>
 80187e0:	4603      	mov	r3, r0
 80187e2:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80187e4:	7afb      	ldrb	r3, [r7, #11]
 80187e6:	2b01      	cmp	r3, #1
 80187e8:	d916      	bls.n	8018818 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80187ea:	7afb      	ldrb	r3, [r7, #11]
 80187ec:	b29a      	uxth	r2, r3
 80187ee:	4b10      	ldr	r3, [pc, #64]	@ (8018830 <tcp_parseopt+0xe8>)
 80187f0:	881b      	ldrh	r3, [r3, #0]
 80187f2:	4413      	add	r3, r2
 80187f4:	b29b      	uxth	r3, r3
 80187f6:	3b02      	subs	r3, #2
 80187f8:	b29a      	uxth	r2, r3
 80187fa:	4b0d      	ldr	r3, [pc, #52]	@ (8018830 <tcp_parseopt+0xe8>)
 80187fc:	801a      	strh	r2, [r3, #0]
 80187fe:	e000      	b.n	8018802 <tcp_parseopt+0xba>
          break;
 8018800:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8018802:	4b0b      	ldr	r3, [pc, #44]	@ (8018830 <tcp_parseopt+0xe8>)
 8018804:	881a      	ldrh	r2, [r3, #0]
 8018806:	4b09      	ldr	r3, [pc, #36]	@ (801882c <tcp_parseopt+0xe4>)
 8018808:	881b      	ldrh	r3, [r3, #0]
 801880a:	429a      	cmp	r2, r3
 801880c:	d3b2      	bcc.n	8018774 <tcp_parseopt+0x2c>
 801880e:	e004      	b.n	801881a <tcp_parseopt+0xd2>
          return;
 8018810:	bf00      	nop
 8018812:	e002      	b.n	801881a <tcp_parseopt+0xd2>
            return;
 8018814:	bf00      	nop
 8018816:	e000      	b.n	801881a <tcp_parseopt+0xd2>
            return;
 8018818:	bf00      	nop
      }
    }
  }
}
 801881a:	3710      	adds	r7, #16
 801881c:	46bd      	mov	sp, r7
 801881e:	bd80      	pop	{r7, pc}
 8018820:	080225c0 	.word	0x080225c0
 8018824:	08022a24 	.word	0x08022a24
 8018828:	0802260c 	.word	0x0802260c
 801882c:	2000caec 	.word	0x2000caec
 8018830:	2000caf4 	.word	0x2000caf4

08018834 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8018834:	b480      	push	{r7}
 8018836:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8018838:	4b05      	ldr	r3, [pc, #20]	@ (8018850 <tcp_trigger_input_pcb_close+0x1c>)
 801883a:	781b      	ldrb	r3, [r3, #0]
 801883c:	f043 0310 	orr.w	r3, r3, #16
 8018840:	b2da      	uxtb	r2, r3
 8018842:	4b03      	ldr	r3, [pc, #12]	@ (8018850 <tcp_trigger_input_pcb_close+0x1c>)
 8018844:	701a      	strb	r2, [r3, #0]
}
 8018846:	bf00      	nop
 8018848:	46bd      	mov	sp, r7
 801884a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801884e:	4770      	bx	lr
 8018850:	2000cb05 	.word	0x2000cb05

08018854 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8018854:	b580      	push	{r7, lr}
 8018856:	b084      	sub	sp, #16
 8018858:	af00      	add	r7, sp, #0
 801885a:	60f8      	str	r0, [r7, #12]
 801885c:	60b9      	str	r1, [r7, #8]
 801885e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8018860:	68fb      	ldr	r3, [r7, #12]
 8018862:	2b00      	cmp	r3, #0
 8018864:	d00a      	beq.n	801887c <tcp_route+0x28>
 8018866:	68fb      	ldr	r3, [r7, #12]
 8018868:	7a1b      	ldrb	r3, [r3, #8]
 801886a:	2b00      	cmp	r3, #0
 801886c:	d006      	beq.n	801887c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801886e:	68fb      	ldr	r3, [r7, #12]
 8018870:	7a1b      	ldrb	r3, [r3, #8]
 8018872:	4618      	mov	r0, r3
 8018874:	f7fb f8c4 	bl	8013a00 <netif_get_by_index>
 8018878:	4603      	mov	r3, r0
 801887a:	e003      	b.n	8018884 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801887c:	6878      	ldr	r0, [r7, #4]
 801887e:	f003 fad1 	bl	801be24 <ip4_route>
 8018882:	4603      	mov	r3, r0
  }
}
 8018884:	4618      	mov	r0, r3
 8018886:	3710      	adds	r7, #16
 8018888:	46bd      	mov	sp, r7
 801888a:	bd80      	pop	{r7, pc}

0801888c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801888c:	b590      	push	{r4, r7, lr}
 801888e:	b087      	sub	sp, #28
 8018890:	af00      	add	r7, sp, #0
 8018892:	60f8      	str	r0, [r7, #12]
 8018894:	60b9      	str	r1, [r7, #8]
 8018896:	603b      	str	r3, [r7, #0]
 8018898:	4613      	mov	r3, r2
 801889a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801889c:	68fb      	ldr	r3, [r7, #12]
 801889e:	2b00      	cmp	r3, #0
 80188a0:	d105      	bne.n	80188ae <tcp_create_segment+0x22>
 80188a2:	4b43      	ldr	r3, [pc, #268]	@ (80189b0 <tcp_create_segment+0x124>)
 80188a4:	22a3      	movs	r2, #163	@ 0xa3
 80188a6:	4943      	ldr	r1, [pc, #268]	@ (80189b4 <tcp_create_segment+0x128>)
 80188a8:	4843      	ldr	r0, [pc, #268]	@ (80189b8 <tcp_create_segment+0x12c>)
 80188aa:	f005 fcef 	bl	801e28c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80188ae:	68bb      	ldr	r3, [r7, #8]
 80188b0:	2b00      	cmp	r3, #0
 80188b2:	d105      	bne.n	80188c0 <tcp_create_segment+0x34>
 80188b4:	4b3e      	ldr	r3, [pc, #248]	@ (80189b0 <tcp_create_segment+0x124>)
 80188b6:	22a4      	movs	r2, #164	@ 0xa4
 80188b8:	4940      	ldr	r1, [pc, #256]	@ (80189bc <tcp_create_segment+0x130>)
 80188ba:	483f      	ldr	r0, [pc, #252]	@ (80189b8 <tcp_create_segment+0x12c>)
 80188bc:	f005 fce6 	bl	801e28c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80188c0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80188c4:	009b      	lsls	r3, r3, #2
 80188c6:	b2db      	uxtb	r3, r3
 80188c8:	f003 0304 	and.w	r3, r3, #4
 80188cc:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80188ce:	2003      	movs	r0, #3
 80188d0:	f7fa fd3c 	bl	801334c <memp_malloc>
 80188d4:	6138      	str	r0, [r7, #16]
 80188d6:	693b      	ldr	r3, [r7, #16]
 80188d8:	2b00      	cmp	r3, #0
 80188da:	d104      	bne.n	80188e6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80188dc:	68b8      	ldr	r0, [r7, #8]
 80188de:	f7fb fc1d 	bl	801411c <pbuf_free>
    return NULL;
 80188e2:	2300      	movs	r3, #0
 80188e4:	e060      	b.n	80189a8 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 80188e6:	693b      	ldr	r3, [r7, #16]
 80188e8:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80188ec:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80188ee:	693b      	ldr	r3, [r7, #16]
 80188f0:	2200      	movs	r2, #0
 80188f2:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80188f4:	693b      	ldr	r3, [r7, #16]
 80188f6:	68ba      	ldr	r2, [r7, #8]
 80188f8:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80188fa:	68bb      	ldr	r3, [r7, #8]
 80188fc:	891a      	ldrh	r2, [r3, #8]
 80188fe:	7dfb      	ldrb	r3, [r7, #23]
 8018900:	b29b      	uxth	r3, r3
 8018902:	429a      	cmp	r2, r3
 8018904:	d205      	bcs.n	8018912 <tcp_create_segment+0x86>
 8018906:	4b2a      	ldr	r3, [pc, #168]	@ (80189b0 <tcp_create_segment+0x124>)
 8018908:	22b0      	movs	r2, #176	@ 0xb0
 801890a:	492d      	ldr	r1, [pc, #180]	@ (80189c0 <tcp_create_segment+0x134>)
 801890c:	482a      	ldr	r0, [pc, #168]	@ (80189b8 <tcp_create_segment+0x12c>)
 801890e:	f005 fcbd 	bl	801e28c <iprintf>
  seg->len = p->tot_len - optlen;
 8018912:	68bb      	ldr	r3, [r7, #8]
 8018914:	891a      	ldrh	r2, [r3, #8]
 8018916:	7dfb      	ldrb	r3, [r7, #23]
 8018918:	b29b      	uxth	r3, r3
 801891a:	1ad3      	subs	r3, r2, r3
 801891c:	b29a      	uxth	r2, r3
 801891e:	693b      	ldr	r3, [r7, #16]
 8018920:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8018922:	2114      	movs	r1, #20
 8018924:	68b8      	ldr	r0, [r7, #8]
 8018926:	f7fb fb63 	bl	8013ff0 <pbuf_add_header>
 801892a:	4603      	mov	r3, r0
 801892c:	2b00      	cmp	r3, #0
 801892e:	d004      	beq.n	801893a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8018930:	6938      	ldr	r0, [r7, #16]
 8018932:	f7fd f82e 	bl	8015992 <tcp_seg_free>
    return NULL;
 8018936:	2300      	movs	r3, #0
 8018938:	e036      	b.n	80189a8 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801893a:	693b      	ldr	r3, [r7, #16]
 801893c:	685b      	ldr	r3, [r3, #4]
 801893e:	685a      	ldr	r2, [r3, #4]
 8018940:	693b      	ldr	r3, [r7, #16]
 8018942:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8018944:	68fb      	ldr	r3, [r7, #12]
 8018946:	8ada      	ldrh	r2, [r3, #22]
 8018948:	693b      	ldr	r3, [r7, #16]
 801894a:	68dc      	ldr	r4, [r3, #12]
 801894c:	4610      	mov	r0, r2
 801894e:	f7fa f825 	bl	801299c <lwip_htons>
 8018952:	4603      	mov	r3, r0
 8018954:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8018956:	68fb      	ldr	r3, [r7, #12]
 8018958:	8b1a      	ldrh	r2, [r3, #24]
 801895a:	693b      	ldr	r3, [r7, #16]
 801895c:	68dc      	ldr	r4, [r3, #12]
 801895e:	4610      	mov	r0, r2
 8018960:	f7fa f81c 	bl	801299c <lwip_htons>
 8018964:	4603      	mov	r3, r0
 8018966:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8018968:	693b      	ldr	r3, [r7, #16]
 801896a:	68dc      	ldr	r4, [r3, #12]
 801896c:	6838      	ldr	r0, [r7, #0]
 801896e:	f7fa f82b 	bl	80129c8 <lwip_htonl>
 8018972:	4603      	mov	r3, r0
 8018974:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8018976:	7dfb      	ldrb	r3, [r7, #23]
 8018978:	089b      	lsrs	r3, r3, #2
 801897a:	b2db      	uxtb	r3, r3
 801897c:	3305      	adds	r3, #5
 801897e:	b29b      	uxth	r3, r3
 8018980:	031b      	lsls	r3, r3, #12
 8018982:	b29a      	uxth	r2, r3
 8018984:	79fb      	ldrb	r3, [r7, #7]
 8018986:	b29b      	uxth	r3, r3
 8018988:	4313      	orrs	r3, r2
 801898a:	b29a      	uxth	r2, r3
 801898c:	693b      	ldr	r3, [r7, #16]
 801898e:	68dc      	ldr	r4, [r3, #12]
 8018990:	4610      	mov	r0, r2
 8018992:	f7fa f803 	bl	801299c <lwip_htons>
 8018996:	4603      	mov	r3, r0
 8018998:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801899a:	693b      	ldr	r3, [r7, #16]
 801899c:	68db      	ldr	r3, [r3, #12]
 801899e:	2200      	movs	r2, #0
 80189a0:	749a      	strb	r2, [r3, #18]
 80189a2:	2200      	movs	r2, #0
 80189a4:	74da      	strb	r2, [r3, #19]
  return seg;
 80189a6:	693b      	ldr	r3, [r7, #16]
}
 80189a8:	4618      	mov	r0, r3
 80189aa:	371c      	adds	r7, #28
 80189ac:	46bd      	mov	sp, r7
 80189ae:	bd90      	pop	{r4, r7, pc}
 80189b0:	08022a40 	.word	0x08022a40
 80189b4:	08022a74 	.word	0x08022a74
 80189b8:	08022a94 	.word	0x08022a94
 80189bc:	08022abc 	.word	0x08022abc
 80189c0:	08022ae0 	.word	0x08022ae0

080189c4 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80189c4:	b580      	push	{r7, lr}
 80189c6:	b086      	sub	sp, #24
 80189c8:	af00      	add	r7, sp, #0
 80189ca:	607b      	str	r3, [r7, #4]
 80189cc:	4603      	mov	r3, r0
 80189ce:	73fb      	strb	r3, [r7, #15]
 80189d0:	460b      	mov	r3, r1
 80189d2:	81bb      	strh	r3, [r7, #12]
 80189d4:	4613      	mov	r3, r2
 80189d6:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 80189d8:	89bb      	ldrh	r3, [r7, #12]
 80189da:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 80189dc:	687b      	ldr	r3, [r7, #4]
 80189de:	2b00      	cmp	r3, #0
 80189e0:	d105      	bne.n	80189ee <tcp_pbuf_prealloc+0x2a>
 80189e2:	4b30      	ldr	r3, [pc, #192]	@ (8018aa4 <tcp_pbuf_prealloc+0xe0>)
 80189e4:	22e8      	movs	r2, #232	@ 0xe8
 80189e6:	4930      	ldr	r1, [pc, #192]	@ (8018aa8 <tcp_pbuf_prealloc+0xe4>)
 80189e8:	4830      	ldr	r0, [pc, #192]	@ (8018aac <tcp_pbuf_prealloc+0xe8>)
 80189ea:	f005 fc4f 	bl	801e28c <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 80189ee:	6a3b      	ldr	r3, [r7, #32]
 80189f0:	2b00      	cmp	r3, #0
 80189f2:	d105      	bne.n	8018a00 <tcp_pbuf_prealloc+0x3c>
 80189f4:	4b2b      	ldr	r3, [pc, #172]	@ (8018aa4 <tcp_pbuf_prealloc+0xe0>)
 80189f6:	22e9      	movs	r2, #233	@ 0xe9
 80189f8:	492d      	ldr	r1, [pc, #180]	@ (8018ab0 <tcp_pbuf_prealloc+0xec>)
 80189fa:	482c      	ldr	r0, [pc, #176]	@ (8018aac <tcp_pbuf_prealloc+0xe8>)
 80189fc:	f005 fc46 	bl	801e28c <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8018a00:	89ba      	ldrh	r2, [r7, #12]
 8018a02:	897b      	ldrh	r3, [r7, #10]
 8018a04:	429a      	cmp	r2, r3
 8018a06:	d221      	bcs.n	8018a4c <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8018a08:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8018a0c:	f003 0302 	and.w	r3, r3, #2
 8018a10:	2b00      	cmp	r3, #0
 8018a12:	d111      	bne.n	8018a38 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8018a14:	6a3b      	ldr	r3, [r7, #32]
 8018a16:	8b5b      	ldrh	r3, [r3, #26]
 8018a18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8018a1c:	2b00      	cmp	r3, #0
 8018a1e:	d115      	bne.n	8018a4c <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8018a20:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8018a24:	2b00      	cmp	r3, #0
 8018a26:	d007      	beq.n	8018a38 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8018a28:	6a3b      	ldr	r3, [r7, #32]
 8018a2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 8018a2c:	2b00      	cmp	r3, #0
 8018a2e:	d103      	bne.n	8018a38 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8018a30:	6a3b      	ldr	r3, [r7, #32]
 8018a32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 8018a34:	2b00      	cmp	r3, #0
 8018a36:	d009      	beq.n	8018a4c <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8018a38:	89bb      	ldrh	r3, [r7, #12]
 8018a3a:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 8018a3e:	f023 0203 	bic.w	r2, r3, #3
 8018a42:	897b      	ldrh	r3, [r7, #10]
 8018a44:	4293      	cmp	r3, r2
 8018a46:	bf28      	it	cs
 8018a48:	4613      	movcs	r3, r2
 8018a4a:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8018a4c:	8af9      	ldrh	r1, [r7, #22]
 8018a4e:	7bfb      	ldrb	r3, [r7, #15]
 8018a50:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8018a54:	4618      	mov	r0, r3
 8018a56:	f7fb f87d 	bl	8013b54 <pbuf_alloc>
 8018a5a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8018a5c:	693b      	ldr	r3, [r7, #16]
 8018a5e:	2b00      	cmp	r3, #0
 8018a60:	d101      	bne.n	8018a66 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8018a62:	2300      	movs	r3, #0
 8018a64:	e019      	b.n	8018a9a <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8018a66:	693b      	ldr	r3, [r7, #16]
 8018a68:	681b      	ldr	r3, [r3, #0]
 8018a6a:	2b00      	cmp	r3, #0
 8018a6c:	d006      	beq.n	8018a7c <tcp_pbuf_prealloc+0xb8>
 8018a6e:	4b0d      	ldr	r3, [pc, #52]	@ (8018aa4 <tcp_pbuf_prealloc+0xe0>)
 8018a70:	f240 120b 	movw	r2, #267	@ 0x10b
 8018a74:	490f      	ldr	r1, [pc, #60]	@ (8018ab4 <tcp_pbuf_prealloc+0xf0>)
 8018a76:	480d      	ldr	r0, [pc, #52]	@ (8018aac <tcp_pbuf_prealloc+0xe8>)
 8018a78:	f005 fc08 	bl	801e28c <iprintf>
  *oversize = p->len - length;
 8018a7c:	693b      	ldr	r3, [r7, #16]
 8018a7e:	895a      	ldrh	r2, [r3, #10]
 8018a80:	89bb      	ldrh	r3, [r7, #12]
 8018a82:	1ad3      	subs	r3, r2, r3
 8018a84:	b29a      	uxth	r2, r3
 8018a86:	687b      	ldr	r3, [r7, #4]
 8018a88:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8018a8a:	693b      	ldr	r3, [r7, #16]
 8018a8c:	89ba      	ldrh	r2, [r7, #12]
 8018a8e:	811a      	strh	r2, [r3, #8]
 8018a90:	693b      	ldr	r3, [r7, #16]
 8018a92:	891a      	ldrh	r2, [r3, #8]
 8018a94:	693b      	ldr	r3, [r7, #16]
 8018a96:	815a      	strh	r2, [r3, #10]
  return p;
 8018a98:	693b      	ldr	r3, [r7, #16]
}
 8018a9a:	4618      	mov	r0, r3
 8018a9c:	3718      	adds	r7, #24
 8018a9e:	46bd      	mov	sp, r7
 8018aa0:	bd80      	pop	{r7, pc}
 8018aa2:	bf00      	nop
 8018aa4:	08022a40 	.word	0x08022a40
 8018aa8:	08022af8 	.word	0x08022af8
 8018aac:	08022a94 	.word	0x08022a94
 8018ab0:	08022b1c 	.word	0x08022b1c
 8018ab4:	08022b3c 	.word	0x08022b3c

08018ab8 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8018ab8:	b580      	push	{r7, lr}
 8018aba:	b082      	sub	sp, #8
 8018abc:	af00      	add	r7, sp, #0
 8018abe:	6078      	str	r0, [r7, #4]
 8018ac0:	460b      	mov	r3, r1
 8018ac2:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8018ac4:	687b      	ldr	r3, [r7, #4]
 8018ac6:	2b00      	cmp	r3, #0
 8018ac8:	d106      	bne.n	8018ad8 <tcp_write_checks+0x20>
 8018aca:	4b33      	ldr	r3, [pc, #204]	@ (8018b98 <tcp_write_checks+0xe0>)
 8018acc:	f240 1233 	movw	r2, #307	@ 0x133
 8018ad0:	4932      	ldr	r1, [pc, #200]	@ (8018b9c <tcp_write_checks+0xe4>)
 8018ad2:	4833      	ldr	r0, [pc, #204]	@ (8018ba0 <tcp_write_checks+0xe8>)
 8018ad4:	f005 fbda 	bl	801e28c <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8018ad8:	687b      	ldr	r3, [r7, #4]
 8018ada:	7d1b      	ldrb	r3, [r3, #20]
 8018adc:	2b04      	cmp	r3, #4
 8018ade:	d00e      	beq.n	8018afe <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8018ae0:	687b      	ldr	r3, [r7, #4]
 8018ae2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8018ae4:	2b07      	cmp	r3, #7
 8018ae6:	d00a      	beq.n	8018afe <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8018ae8:	687b      	ldr	r3, [r7, #4]
 8018aea:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8018aec:	2b02      	cmp	r3, #2
 8018aee:	d006      	beq.n	8018afe <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8018af0:	687b      	ldr	r3, [r7, #4]
 8018af2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8018af4:	2b03      	cmp	r3, #3
 8018af6:	d002      	beq.n	8018afe <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8018af8:	f06f 030a 	mvn.w	r3, #10
 8018afc:	e048      	b.n	8018b90 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8018afe:	887b      	ldrh	r3, [r7, #2]
 8018b00:	2b00      	cmp	r3, #0
 8018b02:	d101      	bne.n	8018b08 <tcp_write_checks+0x50>
    return ERR_OK;
 8018b04:	2300      	movs	r3, #0
 8018b06:	e043      	b.n	8018b90 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8018b08:	687b      	ldr	r3, [r7, #4]
 8018b0a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8018b0e:	887a      	ldrh	r2, [r7, #2]
 8018b10:	429a      	cmp	r2, r3
 8018b12:	d909      	bls.n	8018b28 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8018b14:	687b      	ldr	r3, [r7, #4]
 8018b16:	8b5b      	ldrh	r3, [r3, #26]
 8018b18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018b1c:	b29a      	uxth	r2, r3
 8018b1e:	687b      	ldr	r3, [r7, #4]
 8018b20:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8018b22:	f04f 33ff 	mov.w	r3, #4294967295
 8018b26:	e033      	b.n	8018b90 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8018b28:	687b      	ldr	r3, [r7, #4]
 8018b2a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018b2e:	2b08      	cmp	r3, #8
 8018b30:	d909      	bls.n	8018b46 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8018b32:	687b      	ldr	r3, [r7, #4]
 8018b34:	8b5b      	ldrh	r3, [r3, #26]
 8018b36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018b3a:	b29a      	uxth	r2, r3
 8018b3c:	687b      	ldr	r3, [r7, #4]
 8018b3e:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8018b40:	f04f 33ff 	mov.w	r3, #4294967295
 8018b44:	e024      	b.n	8018b90 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8018b46:	687b      	ldr	r3, [r7, #4]
 8018b48:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018b4c:	2b00      	cmp	r3, #0
 8018b4e:	d00f      	beq.n	8018b70 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8018b50:	687b      	ldr	r3, [r7, #4]
 8018b52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018b54:	2b00      	cmp	r3, #0
 8018b56:	d11a      	bne.n	8018b8e <tcp_write_checks+0xd6>
 8018b58:	687b      	ldr	r3, [r7, #4]
 8018b5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018b5c:	2b00      	cmp	r3, #0
 8018b5e:	d116      	bne.n	8018b8e <tcp_write_checks+0xd6>
 8018b60:	4b0d      	ldr	r3, [pc, #52]	@ (8018b98 <tcp_write_checks+0xe0>)
 8018b62:	f240 1255 	movw	r2, #341	@ 0x155
 8018b66:	490f      	ldr	r1, [pc, #60]	@ (8018ba4 <tcp_write_checks+0xec>)
 8018b68:	480d      	ldr	r0, [pc, #52]	@ (8018ba0 <tcp_write_checks+0xe8>)
 8018b6a:	f005 fb8f 	bl	801e28c <iprintf>
 8018b6e:	e00e      	b.n	8018b8e <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8018b70:	687b      	ldr	r3, [r7, #4]
 8018b72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018b74:	2b00      	cmp	r3, #0
 8018b76:	d103      	bne.n	8018b80 <tcp_write_checks+0xc8>
 8018b78:	687b      	ldr	r3, [r7, #4]
 8018b7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018b7c:	2b00      	cmp	r3, #0
 8018b7e:	d006      	beq.n	8018b8e <tcp_write_checks+0xd6>
 8018b80:	4b05      	ldr	r3, [pc, #20]	@ (8018b98 <tcp_write_checks+0xe0>)
 8018b82:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 8018b86:	4908      	ldr	r1, [pc, #32]	@ (8018ba8 <tcp_write_checks+0xf0>)
 8018b88:	4805      	ldr	r0, [pc, #20]	@ (8018ba0 <tcp_write_checks+0xe8>)
 8018b8a:	f005 fb7f 	bl	801e28c <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8018b8e:	2300      	movs	r3, #0
}
 8018b90:	4618      	mov	r0, r3
 8018b92:	3708      	adds	r7, #8
 8018b94:	46bd      	mov	sp, r7
 8018b96:	bd80      	pop	{r7, pc}
 8018b98:	08022a40 	.word	0x08022a40
 8018b9c:	08022b50 	.word	0x08022b50
 8018ba0:	08022a94 	.word	0x08022a94
 8018ba4:	08022b70 	.word	0x08022b70
 8018ba8:	08022bac 	.word	0x08022bac

08018bac <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8018bac:	b590      	push	{r4, r7, lr}
 8018bae:	b09b      	sub	sp, #108	@ 0x6c
 8018bb0:	af04      	add	r7, sp, #16
 8018bb2:	60f8      	str	r0, [r7, #12]
 8018bb4:	60b9      	str	r1, [r7, #8]
 8018bb6:	4611      	mov	r1, r2
 8018bb8:	461a      	mov	r2, r3
 8018bba:	460b      	mov	r3, r1
 8018bbc:	80fb      	strh	r3, [r7, #6]
 8018bbe:	4613      	mov	r3, r2
 8018bc0:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8018bc2:	2300      	movs	r3, #0
 8018bc4:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8018bc6:	2300      	movs	r3, #0
 8018bc8:	653b      	str	r3, [r7, #80]	@ 0x50
 8018bca:	2300      	movs	r3, #0
 8018bcc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8018bce:	2300      	movs	r3, #0
 8018bd0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8018bd2:	2300      	movs	r3, #0
 8018bd4:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8018bd6:	2300      	movs	r3, #0
 8018bd8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8018bdc:	2300      	movs	r3, #0
 8018bde:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8018be2:	2300      	movs	r3, #0
 8018be4:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8018be6:	2300      	movs	r3, #0
 8018be8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8018bea:	2300      	movs	r3, #0
 8018bec:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8018bee:	68fb      	ldr	r3, [r7, #12]
 8018bf0:	2b00      	cmp	r3, #0
 8018bf2:	d109      	bne.n	8018c08 <tcp_write+0x5c>
 8018bf4:	4ba4      	ldr	r3, [pc, #656]	@ (8018e88 <tcp_write+0x2dc>)
 8018bf6:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 8018bfa:	49a4      	ldr	r1, [pc, #656]	@ (8018e8c <tcp_write+0x2e0>)
 8018bfc:	48a4      	ldr	r0, [pc, #656]	@ (8018e90 <tcp_write+0x2e4>)
 8018bfe:	f005 fb45 	bl	801e28c <iprintf>
 8018c02:	f06f 030f 	mvn.w	r3, #15
 8018c06:	e32a      	b.n	801925e <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8018c08:	68fb      	ldr	r3, [r7, #12]
 8018c0a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8018c0e:	085b      	lsrs	r3, r3, #1
 8018c10:	b29a      	uxth	r2, r3
 8018c12:	68fb      	ldr	r3, [r7, #12]
 8018c14:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018c16:	4293      	cmp	r3, r2
 8018c18:	bf28      	it	cs
 8018c1a:	4613      	movcs	r3, r2
 8018c1c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8018c1e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8018c20:	2b00      	cmp	r3, #0
 8018c22:	d102      	bne.n	8018c2a <tcp_write+0x7e>
 8018c24:	68fb      	ldr	r3, [r7, #12]
 8018c26:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018c28:	e000      	b.n	8018c2c <tcp_write+0x80>
 8018c2a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8018c2c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8018c2e:	68bb      	ldr	r3, [r7, #8]
 8018c30:	2b00      	cmp	r3, #0
 8018c32:	d109      	bne.n	8018c48 <tcp_write+0x9c>
 8018c34:	4b94      	ldr	r3, [pc, #592]	@ (8018e88 <tcp_write+0x2dc>)
 8018c36:	f240 12ad 	movw	r2, #429	@ 0x1ad
 8018c3a:	4996      	ldr	r1, [pc, #600]	@ (8018e94 <tcp_write+0x2e8>)
 8018c3c:	4894      	ldr	r0, [pc, #592]	@ (8018e90 <tcp_write+0x2e4>)
 8018c3e:	f005 fb25 	bl	801e28c <iprintf>
 8018c42:	f06f 030f 	mvn.w	r3, #15
 8018c46:	e30a      	b.n	801925e <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8018c48:	88fb      	ldrh	r3, [r7, #6]
 8018c4a:	4619      	mov	r1, r3
 8018c4c:	68f8      	ldr	r0, [r7, #12]
 8018c4e:	f7ff ff33 	bl	8018ab8 <tcp_write_checks>
 8018c52:	4603      	mov	r3, r0
 8018c54:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 8018c58:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8018c5c:	2b00      	cmp	r3, #0
 8018c5e:	d002      	beq.n	8018c66 <tcp_write+0xba>
    return err;
 8018c60:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8018c64:	e2fb      	b.n	801925e <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8018c66:	68fb      	ldr	r3, [r7, #12]
 8018c68:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018c6c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8018c70:	2300      	movs	r3, #0
 8018c72:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8018c76:	68fb      	ldr	r3, [r7, #12]
 8018c78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018c7a:	2b00      	cmp	r3, #0
 8018c7c:	f000 80f6 	beq.w	8018e6c <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8018c80:	68fb      	ldr	r3, [r7, #12]
 8018c82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018c84:	653b      	str	r3, [r7, #80]	@ 0x50
 8018c86:	e002      	b.n	8018c8e <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8018c88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018c8a:	681b      	ldr	r3, [r3, #0]
 8018c8c:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8018c8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018c90:	681b      	ldr	r3, [r3, #0]
 8018c92:	2b00      	cmp	r3, #0
 8018c94:	d1f8      	bne.n	8018c88 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8018c96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018c98:	7a9b      	ldrb	r3, [r3, #10]
 8018c9a:	009b      	lsls	r3, r3, #2
 8018c9c:	b29b      	uxth	r3, r3
 8018c9e:	f003 0304 	and.w	r3, r3, #4
 8018ca2:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8018ca4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8018ca6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018ca8:	891b      	ldrh	r3, [r3, #8]
 8018caa:	4619      	mov	r1, r3
 8018cac:	8c3b      	ldrh	r3, [r7, #32]
 8018cae:	440b      	add	r3, r1
 8018cb0:	429a      	cmp	r2, r3
 8018cb2:	da06      	bge.n	8018cc2 <tcp_write+0x116>
 8018cb4:	4b74      	ldr	r3, [pc, #464]	@ (8018e88 <tcp_write+0x2dc>)
 8018cb6:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8018cba:	4977      	ldr	r1, [pc, #476]	@ (8018e98 <tcp_write+0x2ec>)
 8018cbc:	4874      	ldr	r0, [pc, #464]	@ (8018e90 <tcp_write+0x2e4>)
 8018cbe:	f005 fae5 	bl	801e28c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8018cc2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018cc4:	891a      	ldrh	r2, [r3, #8]
 8018cc6:	8c3b      	ldrh	r3, [r7, #32]
 8018cc8:	4413      	add	r3, r2
 8018cca:	b29b      	uxth	r3, r3
 8018ccc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8018cce:	1ad3      	subs	r3, r2, r3
 8018cd0:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8018cd2:	68fb      	ldr	r3, [r7, #12]
 8018cd4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8018cd8:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8018cda:	8a7b      	ldrh	r3, [r7, #18]
 8018cdc:	2b00      	cmp	r3, #0
 8018cde:	d026      	beq.n	8018d2e <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8018ce0:	8a7b      	ldrh	r3, [r7, #18]
 8018ce2:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8018ce4:	429a      	cmp	r2, r3
 8018ce6:	d206      	bcs.n	8018cf6 <tcp_write+0x14a>
 8018ce8:	4b67      	ldr	r3, [pc, #412]	@ (8018e88 <tcp_write+0x2dc>)
 8018cea:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 8018cee:	496b      	ldr	r1, [pc, #428]	@ (8018e9c <tcp_write+0x2f0>)
 8018cf0:	4867      	ldr	r0, [pc, #412]	@ (8018e90 <tcp_write+0x2e4>)
 8018cf2:	f005 facb 	bl	801e28c <iprintf>
      seg = last_unsent;
 8018cf6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018cf8:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8018cfa:	8a7b      	ldrh	r3, [r7, #18]
 8018cfc:	88fa      	ldrh	r2, [r7, #6]
 8018cfe:	4293      	cmp	r3, r2
 8018d00:	bf28      	it	cs
 8018d02:	4613      	movcs	r3, r2
 8018d04:	b29b      	uxth	r3, r3
 8018d06:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8018d08:	4293      	cmp	r3, r2
 8018d0a:	bf28      	it	cs
 8018d0c:	4613      	movcs	r3, r2
 8018d0e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 8018d10:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8018d14:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8018d16:	4413      	add	r3, r2
 8018d18:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 8018d1c:	8a7a      	ldrh	r2, [r7, #18]
 8018d1e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8018d20:	1ad3      	subs	r3, r2, r3
 8018d22:	b29b      	uxth	r3, r3
 8018d24:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8018d26:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8018d28:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8018d2a:	1ad3      	subs	r3, r2, r3
 8018d2c:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8018d2e:	8a7b      	ldrh	r3, [r7, #18]
 8018d30:	2b00      	cmp	r3, #0
 8018d32:	d00b      	beq.n	8018d4c <tcp_write+0x1a0>
 8018d34:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8018d38:	88fb      	ldrh	r3, [r7, #6]
 8018d3a:	429a      	cmp	r2, r3
 8018d3c:	d006      	beq.n	8018d4c <tcp_write+0x1a0>
 8018d3e:	4b52      	ldr	r3, [pc, #328]	@ (8018e88 <tcp_write+0x2dc>)
 8018d40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8018d44:	4956      	ldr	r1, [pc, #344]	@ (8018ea0 <tcp_write+0x2f4>)
 8018d46:	4852      	ldr	r0, [pc, #328]	@ (8018e90 <tcp_write+0x2e4>)
 8018d48:	f005 faa0 	bl	801e28c <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8018d4c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8018d50:	88fb      	ldrh	r3, [r7, #6]
 8018d52:	429a      	cmp	r2, r3
 8018d54:	f080 8167 	bcs.w	8019026 <tcp_write+0x47a>
 8018d58:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8018d5a:	2b00      	cmp	r3, #0
 8018d5c:	f000 8163 	beq.w	8019026 <tcp_write+0x47a>
 8018d60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018d62:	891b      	ldrh	r3, [r3, #8]
 8018d64:	2b00      	cmp	r3, #0
 8018d66:	f000 815e 	beq.w	8019026 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8018d6a:	88fa      	ldrh	r2, [r7, #6]
 8018d6c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8018d70:	1ad2      	subs	r2, r2, r3
 8018d72:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8018d74:	4293      	cmp	r3, r2
 8018d76:	bfa8      	it	ge
 8018d78:	4613      	movge	r3, r2
 8018d7a:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8018d7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018d7e:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8018d80:	797b      	ldrb	r3, [r7, #5]
 8018d82:	f003 0301 	and.w	r3, r3, #1
 8018d86:	2b00      	cmp	r3, #0
 8018d88:	d027      	beq.n	8018dda <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8018d8a:	f107 0012 	add.w	r0, r7, #18
 8018d8e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8018d90:	8bf9      	ldrh	r1, [r7, #30]
 8018d92:	2301      	movs	r3, #1
 8018d94:	9302      	str	r3, [sp, #8]
 8018d96:	797b      	ldrb	r3, [r7, #5]
 8018d98:	9301      	str	r3, [sp, #4]
 8018d9a:	68fb      	ldr	r3, [r7, #12]
 8018d9c:	9300      	str	r3, [sp, #0]
 8018d9e:	4603      	mov	r3, r0
 8018da0:	2000      	movs	r0, #0
 8018da2:	f7ff fe0f 	bl	80189c4 <tcp_pbuf_prealloc>
 8018da6:	6578      	str	r0, [r7, #84]	@ 0x54
 8018da8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018daa:	2b00      	cmp	r3, #0
 8018dac:	f000 8225 	beq.w	80191fa <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8018db0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018db2:	6858      	ldr	r0, [r3, #4]
 8018db4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8018db8:	68ba      	ldr	r2, [r7, #8]
 8018dba:	4413      	add	r3, r2
 8018dbc:	8bfa      	ldrh	r2, [r7, #30]
 8018dbe:	4619      	mov	r1, r3
 8018dc0:	f005 fc17 	bl	801e5f2 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8018dc4:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8018dc6:	f7fb fa37 	bl	8014238 <pbuf_clen>
 8018dca:	4603      	mov	r3, r0
 8018dcc:	461a      	mov	r2, r3
 8018dce:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8018dd2:	4413      	add	r3, r2
 8018dd4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8018dd8:	e041      	b.n	8018e5e <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8018dda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018ddc:	685b      	ldr	r3, [r3, #4]
 8018dde:	637b      	str	r3, [r7, #52]	@ 0x34
 8018de0:	e002      	b.n	8018de8 <tcp_write+0x23c>
 8018de2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018de4:	681b      	ldr	r3, [r3, #0]
 8018de6:	637b      	str	r3, [r7, #52]	@ 0x34
 8018de8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018dea:	681b      	ldr	r3, [r3, #0]
 8018dec:	2b00      	cmp	r3, #0
 8018dee:	d1f8      	bne.n	8018de2 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8018df0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018df2:	7b1b      	ldrb	r3, [r3, #12]
 8018df4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8018df8:	2b00      	cmp	r3, #0
 8018dfa:	d115      	bne.n	8018e28 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8018dfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018dfe:	685b      	ldr	r3, [r3, #4]
 8018e00:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8018e02:	8952      	ldrh	r2, [r2, #10]
 8018e04:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8018e06:	68ba      	ldr	r2, [r7, #8]
 8018e08:	429a      	cmp	r2, r3
 8018e0a:	d10d      	bne.n	8018e28 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8018e0c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8018e10:	2b00      	cmp	r3, #0
 8018e12:	d006      	beq.n	8018e22 <tcp_write+0x276>
 8018e14:	4b1c      	ldr	r3, [pc, #112]	@ (8018e88 <tcp_write+0x2dc>)
 8018e16:	f240 2231 	movw	r2, #561	@ 0x231
 8018e1a:	4922      	ldr	r1, [pc, #136]	@ (8018ea4 <tcp_write+0x2f8>)
 8018e1c:	481c      	ldr	r0, [pc, #112]	@ (8018e90 <tcp_write+0x2e4>)
 8018e1e:	f005 fa35 	bl	801e28c <iprintf>
          extendlen = seglen;
 8018e22:	8bfb      	ldrh	r3, [r7, #30]
 8018e24:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8018e26:	e01a      	b.n	8018e5e <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8018e28:	8bfb      	ldrh	r3, [r7, #30]
 8018e2a:	2201      	movs	r2, #1
 8018e2c:	4619      	mov	r1, r3
 8018e2e:	2000      	movs	r0, #0
 8018e30:	f7fa fe90 	bl	8013b54 <pbuf_alloc>
 8018e34:	6578      	str	r0, [r7, #84]	@ 0x54
 8018e36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018e38:	2b00      	cmp	r3, #0
 8018e3a:	f000 81e0 	beq.w	80191fe <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8018e3e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8018e42:	68ba      	ldr	r2, [r7, #8]
 8018e44:	441a      	add	r2, r3
 8018e46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018e48:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8018e4a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8018e4c:	f7fb f9f4 	bl	8014238 <pbuf_clen>
 8018e50:	4603      	mov	r3, r0
 8018e52:	461a      	mov	r2, r3
 8018e54:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8018e58:	4413      	add	r3, r2
 8018e5a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8018e5e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8018e62:	8bfb      	ldrh	r3, [r7, #30]
 8018e64:	4413      	add	r3, r2
 8018e66:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8018e6a:	e0dc      	b.n	8019026 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8018e6c:	68fb      	ldr	r3, [r7, #12]
 8018e6e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8018e72:	2b00      	cmp	r3, #0
 8018e74:	f000 80d7 	beq.w	8019026 <tcp_write+0x47a>
 8018e78:	4b03      	ldr	r3, [pc, #12]	@ (8018e88 <tcp_write+0x2dc>)
 8018e7a:	f240 224a 	movw	r2, #586	@ 0x24a
 8018e7e:	490a      	ldr	r1, [pc, #40]	@ (8018ea8 <tcp_write+0x2fc>)
 8018e80:	4803      	ldr	r0, [pc, #12]	@ (8018e90 <tcp_write+0x2e4>)
 8018e82:	f005 fa03 	bl	801e28c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8018e86:	e0ce      	b.n	8019026 <tcp_write+0x47a>
 8018e88:	08022a40 	.word	0x08022a40
 8018e8c:	08022be0 	.word	0x08022be0
 8018e90:	08022a94 	.word	0x08022a94
 8018e94:	08022bf8 	.word	0x08022bf8
 8018e98:	08022c2c 	.word	0x08022c2c
 8018e9c:	08022c44 	.word	0x08022c44
 8018ea0:	08022c64 	.word	0x08022c64
 8018ea4:	08022c84 	.word	0x08022c84
 8018ea8:	08022cb0 	.word	0x08022cb0
    struct pbuf *p;
    u16_t left = len - pos;
 8018eac:	88fa      	ldrh	r2, [r7, #6]
 8018eae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8018eb2:	1ad3      	subs	r3, r2, r3
 8018eb4:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8018eb6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8018eba:	b29b      	uxth	r3, r3
 8018ebc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8018ebe:	1ad3      	subs	r3, r2, r3
 8018ec0:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8018ec2:	8b7a      	ldrh	r2, [r7, #26]
 8018ec4:	8bbb      	ldrh	r3, [r7, #28]
 8018ec6:	4293      	cmp	r3, r2
 8018ec8:	bf28      	it	cs
 8018eca:	4613      	movcs	r3, r2
 8018ecc:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8018ece:	797b      	ldrb	r3, [r7, #5]
 8018ed0:	f003 0301 	and.w	r3, r3, #1
 8018ed4:	2b00      	cmp	r3, #0
 8018ed6:	d036      	beq.n	8018f46 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8018ed8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8018edc:	b29a      	uxth	r2, r3
 8018ede:	8b3b      	ldrh	r3, [r7, #24]
 8018ee0:	4413      	add	r3, r2
 8018ee2:	b299      	uxth	r1, r3
 8018ee4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018ee6:	2b00      	cmp	r3, #0
 8018ee8:	bf0c      	ite	eq
 8018eea:	2301      	moveq	r3, #1
 8018eec:	2300      	movne	r3, #0
 8018eee:	b2db      	uxtb	r3, r3
 8018ef0:	f107 0012 	add.w	r0, r7, #18
 8018ef4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8018ef6:	9302      	str	r3, [sp, #8]
 8018ef8:	797b      	ldrb	r3, [r7, #5]
 8018efa:	9301      	str	r3, [sp, #4]
 8018efc:	68fb      	ldr	r3, [r7, #12]
 8018efe:	9300      	str	r3, [sp, #0]
 8018f00:	4603      	mov	r3, r0
 8018f02:	2036      	movs	r0, #54	@ 0x36
 8018f04:	f7ff fd5e 	bl	80189c4 <tcp_pbuf_prealloc>
 8018f08:	6338      	str	r0, [r7, #48]	@ 0x30
 8018f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018f0c:	2b00      	cmp	r3, #0
 8018f0e:	f000 8178 	beq.w	8019202 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8018f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018f14:	895b      	ldrh	r3, [r3, #10]
 8018f16:	8b3a      	ldrh	r2, [r7, #24]
 8018f18:	429a      	cmp	r2, r3
 8018f1a:	d906      	bls.n	8018f2a <tcp_write+0x37e>
 8018f1c:	4b8c      	ldr	r3, [pc, #560]	@ (8019150 <tcp_write+0x5a4>)
 8018f1e:	f240 2266 	movw	r2, #614	@ 0x266
 8018f22:	498c      	ldr	r1, [pc, #560]	@ (8019154 <tcp_write+0x5a8>)
 8018f24:	488c      	ldr	r0, [pc, #560]	@ (8019158 <tcp_write+0x5ac>)
 8018f26:	f005 f9b1 	bl	801e28c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8018f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018f2c:	685a      	ldr	r2, [r3, #4]
 8018f2e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8018f32:	18d0      	adds	r0, r2, r3
 8018f34:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8018f38:	68ba      	ldr	r2, [r7, #8]
 8018f3a:	4413      	add	r3, r2
 8018f3c:	8b3a      	ldrh	r2, [r7, #24]
 8018f3e:	4619      	mov	r1, r3
 8018f40:	f005 fb57 	bl	801e5f2 <memcpy>
 8018f44:	e02f      	b.n	8018fa6 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8018f46:	8a7b      	ldrh	r3, [r7, #18]
 8018f48:	2b00      	cmp	r3, #0
 8018f4a:	d006      	beq.n	8018f5a <tcp_write+0x3ae>
 8018f4c:	4b80      	ldr	r3, [pc, #512]	@ (8019150 <tcp_write+0x5a4>)
 8018f4e:	f240 2271 	movw	r2, #625	@ 0x271
 8018f52:	4982      	ldr	r1, [pc, #520]	@ (801915c <tcp_write+0x5b0>)
 8018f54:	4880      	ldr	r0, [pc, #512]	@ (8019158 <tcp_write+0x5ac>)
 8018f56:	f005 f999 	bl	801e28c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8018f5a:	8b3b      	ldrh	r3, [r7, #24]
 8018f5c:	2201      	movs	r2, #1
 8018f5e:	4619      	mov	r1, r3
 8018f60:	2036      	movs	r0, #54	@ 0x36
 8018f62:	f7fa fdf7 	bl	8013b54 <pbuf_alloc>
 8018f66:	6178      	str	r0, [r7, #20]
 8018f68:	697b      	ldr	r3, [r7, #20]
 8018f6a:	2b00      	cmp	r3, #0
 8018f6c:	f000 814b 	beq.w	8019206 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8018f70:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8018f74:	68ba      	ldr	r2, [r7, #8]
 8018f76:	441a      	add	r2, r3
 8018f78:	697b      	ldr	r3, [r7, #20]
 8018f7a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8018f7c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8018f80:	b29b      	uxth	r3, r3
 8018f82:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8018f86:	4619      	mov	r1, r3
 8018f88:	2036      	movs	r0, #54	@ 0x36
 8018f8a:	f7fa fde3 	bl	8013b54 <pbuf_alloc>
 8018f8e:	6338      	str	r0, [r7, #48]	@ 0x30
 8018f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018f92:	2b00      	cmp	r3, #0
 8018f94:	d103      	bne.n	8018f9e <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8018f96:	6978      	ldr	r0, [r7, #20]
 8018f98:	f7fb f8c0 	bl	801411c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8018f9c:	e136      	b.n	801920c <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8018f9e:	6979      	ldr	r1, [r7, #20]
 8018fa0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8018fa2:	f7fb f989 	bl	80142b8 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8018fa6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8018fa8:	f7fb f946 	bl	8014238 <pbuf_clen>
 8018fac:	4603      	mov	r3, r0
 8018fae:	461a      	mov	r2, r3
 8018fb0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8018fb4:	4413      	add	r3, r2
 8018fb6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8018fba:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8018fbe:	2b09      	cmp	r3, #9
 8018fc0:	d903      	bls.n	8018fca <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8018fc2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8018fc4:	f7fb f8aa 	bl	801411c <pbuf_free>
      goto memerr;
 8018fc8:	e120      	b.n	801920c <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8018fca:	68fb      	ldr	r3, [r7, #12]
 8018fcc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8018fce:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8018fd2:	441a      	add	r2, r3
 8018fd4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8018fd8:	9300      	str	r3, [sp, #0]
 8018fda:	4613      	mov	r3, r2
 8018fdc:	2200      	movs	r2, #0
 8018fde:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8018fe0:	68f8      	ldr	r0, [r7, #12]
 8018fe2:	f7ff fc53 	bl	801888c <tcp_create_segment>
 8018fe6:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8018fe8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018fea:	2b00      	cmp	r3, #0
 8018fec:	f000 810d 	beq.w	801920a <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8018ff0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018ff2:	2b00      	cmp	r3, #0
 8018ff4:	d102      	bne.n	8018ffc <tcp_write+0x450>
      queue = seg;
 8018ff6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018ff8:	647b      	str	r3, [r7, #68]	@ 0x44
 8018ffa:	e00c      	b.n	8019016 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8018ffc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018ffe:	2b00      	cmp	r3, #0
 8019000:	d106      	bne.n	8019010 <tcp_write+0x464>
 8019002:	4b53      	ldr	r3, [pc, #332]	@ (8019150 <tcp_write+0x5a4>)
 8019004:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8019008:	4955      	ldr	r1, [pc, #340]	@ (8019160 <tcp_write+0x5b4>)
 801900a:	4853      	ldr	r0, [pc, #332]	@ (8019158 <tcp_write+0x5ac>)
 801900c:	f005 f93e 	bl	801e28c <iprintf>
      prev_seg->next = seg;
 8019010:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019012:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8019014:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8019016:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019018:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801901a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801901e:	8b3b      	ldrh	r3, [r7, #24]
 8019020:	4413      	add	r3, r2
 8019022:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 8019026:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801902a:	88fb      	ldrh	r3, [r7, #6]
 801902c:	429a      	cmp	r2, r3
 801902e:	f4ff af3d 	bcc.w	8018eac <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8019032:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019034:	2b00      	cmp	r3, #0
 8019036:	d02c      	beq.n	8019092 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8019038:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801903a:	685b      	ldr	r3, [r3, #4]
 801903c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801903e:	e01e      	b.n	801907e <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8019040:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019042:	891a      	ldrh	r2, [r3, #8]
 8019044:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019046:	4413      	add	r3, r2
 8019048:	b29a      	uxth	r2, r3
 801904a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801904c:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801904e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019050:	681b      	ldr	r3, [r3, #0]
 8019052:	2b00      	cmp	r3, #0
 8019054:	d110      	bne.n	8019078 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8019056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019058:	685b      	ldr	r3, [r3, #4]
 801905a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801905c:	8952      	ldrh	r2, [r2, #10]
 801905e:	4413      	add	r3, r2
 8019060:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8019062:	68b9      	ldr	r1, [r7, #8]
 8019064:	4618      	mov	r0, r3
 8019066:	f005 fac4 	bl	801e5f2 <memcpy>
        p->len += oversize_used;
 801906a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801906c:	895a      	ldrh	r2, [r3, #10]
 801906e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019070:	4413      	add	r3, r2
 8019072:	b29a      	uxth	r2, r3
 8019074:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019076:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8019078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801907a:	681b      	ldr	r3, [r3, #0]
 801907c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801907e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019080:	2b00      	cmp	r3, #0
 8019082:	d1dd      	bne.n	8019040 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8019084:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019086:	891a      	ldrh	r2, [r3, #8]
 8019088:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801908a:	4413      	add	r3, r2
 801908c:	b29a      	uxth	r2, r3
 801908e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019090:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8019092:	8a7a      	ldrh	r2, [r7, #18]
 8019094:	68fb      	ldr	r3, [r7, #12]
 8019096:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801909a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801909c:	2b00      	cmp	r3, #0
 801909e:	d018      	beq.n	80190d2 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80190a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80190a2:	2b00      	cmp	r3, #0
 80190a4:	d106      	bne.n	80190b4 <tcp_write+0x508>
 80190a6:	4b2a      	ldr	r3, [pc, #168]	@ (8019150 <tcp_write+0x5a4>)
 80190a8:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 80190ac:	492d      	ldr	r1, [pc, #180]	@ (8019164 <tcp_write+0x5b8>)
 80190ae:	482a      	ldr	r0, [pc, #168]	@ (8019158 <tcp_write+0x5ac>)
 80190b0:	f005 f8ec 	bl	801e28c <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80190b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80190b6:	685b      	ldr	r3, [r3, #4]
 80190b8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80190ba:	4618      	mov	r0, r3
 80190bc:	f7fb f8fc 	bl	80142b8 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80190c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80190c2:	891a      	ldrh	r2, [r3, #8]
 80190c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80190c6:	891b      	ldrh	r3, [r3, #8]
 80190c8:	4413      	add	r3, r2
 80190ca:	b29a      	uxth	r2, r3
 80190cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80190ce:	811a      	strh	r2, [r3, #8]
 80190d0:	e037      	b.n	8019142 <tcp_write+0x596>
  } else if (extendlen > 0) {
 80190d2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80190d4:	2b00      	cmp	r3, #0
 80190d6:	d034      	beq.n	8019142 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80190d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80190da:	2b00      	cmp	r3, #0
 80190dc:	d003      	beq.n	80190e6 <tcp_write+0x53a>
 80190de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80190e0:	685b      	ldr	r3, [r3, #4]
 80190e2:	2b00      	cmp	r3, #0
 80190e4:	d106      	bne.n	80190f4 <tcp_write+0x548>
 80190e6:	4b1a      	ldr	r3, [pc, #104]	@ (8019150 <tcp_write+0x5a4>)
 80190e8:	f240 22e6 	movw	r2, #742	@ 0x2e6
 80190ec:	491e      	ldr	r1, [pc, #120]	@ (8019168 <tcp_write+0x5bc>)
 80190ee:	481a      	ldr	r0, [pc, #104]	@ (8019158 <tcp_write+0x5ac>)
 80190f0:	f005 f8cc 	bl	801e28c <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80190f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80190f6:	685b      	ldr	r3, [r3, #4]
 80190f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80190fa:	e009      	b.n	8019110 <tcp_write+0x564>
      p->tot_len += extendlen;
 80190fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80190fe:	891a      	ldrh	r2, [r3, #8]
 8019100:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8019102:	4413      	add	r3, r2
 8019104:	b29a      	uxth	r2, r3
 8019106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019108:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801910a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801910c:	681b      	ldr	r3, [r3, #0]
 801910e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019112:	681b      	ldr	r3, [r3, #0]
 8019114:	2b00      	cmp	r3, #0
 8019116:	d1f1      	bne.n	80190fc <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8019118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801911a:	891a      	ldrh	r2, [r3, #8]
 801911c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801911e:	4413      	add	r3, r2
 8019120:	b29a      	uxth	r2, r3
 8019122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019124:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8019126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019128:	895a      	ldrh	r2, [r3, #10]
 801912a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801912c:	4413      	add	r3, r2
 801912e:	b29a      	uxth	r2, r3
 8019130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019132:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8019134:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019136:	891a      	ldrh	r2, [r3, #8]
 8019138:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801913a:	4413      	add	r3, r2
 801913c:	b29a      	uxth	r2, r3
 801913e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019140:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8019142:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019144:	2b00      	cmp	r3, #0
 8019146:	d111      	bne.n	801916c <tcp_write+0x5c0>
    pcb->unsent = queue;
 8019148:	68fb      	ldr	r3, [r7, #12]
 801914a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801914c:	66da      	str	r2, [r3, #108]	@ 0x6c
 801914e:	e010      	b.n	8019172 <tcp_write+0x5c6>
 8019150:	08022a40 	.word	0x08022a40
 8019154:	08022ce0 	.word	0x08022ce0
 8019158:	08022a94 	.word	0x08022a94
 801915c:	08022d20 	.word	0x08022d20
 8019160:	08022d30 	.word	0x08022d30
 8019164:	08022d44 	.word	0x08022d44
 8019168:	08022d7c 	.word	0x08022d7c
  } else {
    last_unsent->next = queue;
 801916c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801916e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8019170:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8019172:	68fb      	ldr	r3, [r7, #12]
 8019174:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8019176:	88fb      	ldrh	r3, [r7, #6]
 8019178:	441a      	add	r2, r3
 801917a:	68fb      	ldr	r3, [r7, #12]
 801917c:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 801917e:	68fb      	ldr	r3, [r7, #12]
 8019180:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8019184:	88fb      	ldrh	r3, [r7, #6]
 8019186:	1ad3      	subs	r3, r2, r3
 8019188:	b29a      	uxth	r2, r3
 801918a:	68fb      	ldr	r3, [r7, #12]
 801918c:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 8019190:	68fb      	ldr	r3, [r7, #12]
 8019192:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8019196:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801919a:	68fb      	ldr	r3, [r7, #12]
 801919c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80191a0:	2b00      	cmp	r3, #0
 80191a2:	d00e      	beq.n	80191c2 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 80191a4:	68fb      	ldr	r3, [r7, #12]
 80191a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80191a8:	2b00      	cmp	r3, #0
 80191aa:	d10a      	bne.n	80191c2 <tcp_write+0x616>
 80191ac:	68fb      	ldr	r3, [r7, #12]
 80191ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80191b0:	2b00      	cmp	r3, #0
 80191b2:	d106      	bne.n	80191c2 <tcp_write+0x616>
 80191b4:	4b2c      	ldr	r3, [pc, #176]	@ (8019268 <tcp_write+0x6bc>)
 80191b6:	f240 3212 	movw	r2, #786	@ 0x312
 80191ba:	492c      	ldr	r1, [pc, #176]	@ (801926c <tcp_write+0x6c0>)
 80191bc:	482c      	ldr	r0, [pc, #176]	@ (8019270 <tcp_write+0x6c4>)
 80191be:	f005 f865 	bl	801e28c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 80191c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80191c4:	2b00      	cmp	r3, #0
 80191c6:	d016      	beq.n	80191f6 <tcp_write+0x64a>
 80191c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80191ca:	68db      	ldr	r3, [r3, #12]
 80191cc:	2b00      	cmp	r3, #0
 80191ce:	d012      	beq.n	80191f6 <tcp_write+0x64a>
 80191d0:	797b      	ldrb	r3, [r7, #5]
 80191d2:	f003 0302 	and.w	r3, r3, #2
 80191d6:	2b00      	cmp	r3, #0
 80191d8:	d10d      	bne.n	80191f6 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80191da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80191dc:	68db      	ldr	r3, [r3, #12]
 80191de:	899b      	ldrh	r3, [r3, #12]
 80191e0:	b29c      	uxth	r4, r3
 80191e2:	2008      	movs	r0, #8
 80191e4:	f7f9 fbda 	bl	801299c <lwip_htons>
 80191e8:	4603      	mov	r3, r0
 80191ea:	461a      	mov	r2, r3
 80191ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80191ee:	68db      	ldr	r3, [r3, #12]
 80191f0:	4322      	orrs	r2, r4
 80191f2:	b292      	uxth	r2, r2
 80191f4:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 80191f6:	2300      	movs	r3, #0
 80191f8:	e031      	b.n	801925e <tcp_write+0x6b2>
          goto memerr;
 80191fa:	bf00      	nop
 80191fc:	e006      	b.n	801920c <tcp_write+0x660>
            goto memerr;
 80191fe:	bf00      	nop
 8019200:	e004      	b.n	801920c <tcp_write+0x660>
        goto memerr;
 8019202:	bf00      	nop
 8019204:	e002      	b.n	801920c <tcp_write+0x660>
        goto memerr;
 8019206:	bf00      	nop
 8019208:	e000      	b.n	801920c <tcp_write+0x660>
      goto memerr;
 801920a:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801920c:	68fb      	ldr	r3, [r7, #12]
 801920e:	8b5b      	ldrh	r3, [r3, #26]
 8019210:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019214:	b29a      	uxth	r2, r3
 8019216:	68fb      	ldr	r3, [r7, #12]
 8019218:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801921a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801921c:	2b00      	cmp	r3, #0
 801921e:	d002      	beq.n	8019226 <tcp_write+0x67a>
    pbuf_free(concat_p);
 8019220:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8019222:	f7fa ff7b 	bl	801411c <pbuf_free>
  }
  if (queue != NULL) {
 8019226:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019228:	2b00      	cmp	r3, #0
 801922a:	d002      	beq.n	8019232 <tcp_write+0x686>
    tcp_segs_free(queue);
 801922c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801922e:	f7fc fb9b 	bl	8015968 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8019232:	68fb      	ldr	r3, [r7, #12]
 8019234:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019238:	2b00      	cmp	r3, #0
 801923a:	d00e      	beq.n	801925a <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801923c:	68fb      	ldr	r3, [r7, #12]
 801923e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019240:	2b00      	cmp	r3, #0
 8019242:	d10a      	bne.n	801925a <tcp_write+0x6ae>
 8019244:	68fb      	ldr	r3, [r7, #12]
 8019246:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019248:	2b00      	cmp	r3, #0
 801924a:	d106      	bne.n	801925a <tcp_write+0x6ae>
 801924c:	4b06      	ldr	r3, [pc, #24]	@ (8019268 <tcp_write+0x6bc>)
 801924e:	f240 3227 	movw	r2, #807	@ 0x327
 8019252:	4906      	ldr	r1, [pc, #24]	@ (801926c <tcp_write+0x6c0>)
 8019254:	4806      	ldr	r0, [pc, #24]	@ (8019270 <tcp_write+0x6c4>)
 8019256:	f005 f819 	bl	801e28c <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801925a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801925e:	4618      	mov	r0, r3
 8019260:	375c      	adds	r7, #92	@ 0x5c
 8019262:	46bd      	mov	sp, r7
 8019264:	bd90      	pop	{r4, r7, pc}
 8019266:	bf00      	nop
 8019268:	08022a40 	.word	0x08022a40
 801926c:	08022db4 	.word	0x08022db4
 8019270:	08022a94 	.word	0x08022a94

08019274 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8019274:	b590      	push	{r4, r7, lr}
 8019276:	b08b      	sub	sp, #44	@ 0x2c
 8019278:	af02      	add	r7, sp, #8
 801927a:	6078      	str	r0, [r7, #4]
 801927c:	460b      	mov	r3, r1
 801927e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8019280:	2300      	movs	r3, #0
 8019282:	61fb      	str	r3, [r7, #28]
 8019284:	2300      	movs	r3, #0
 8019286:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8019288:	2300      	movs	r3, #0
 801928a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801928c:	687b      	ldr	r3, [r7, #4]
 801928e:	2b00      	cmp	r3, #0
 8019290:	d106      	bne.n	80192a0 <tcp_split_unsent_seg+0x2c>
 8019292:	4b95      	ldr	r3, [pc, #596]	@ (80194e8 <tcp_split_unsent_seg+0x274>)
 8019294:	f240 324b 	movw	r2, #843	@ 0x34b
 8019298:	4994      	ldr	r1, [pc, #592]	@ (80194ec <tcp_split_unsent_seg+0x278>)
 801929a:	4895      	ldr	r0, [pc, #596]	@ (80194f0 <tcp_split_unsent_seg+0x27c>)
 801929c:	f004 fff6 	bl	801e28c <iprintf>

  useg = pcb->unsent;
 80192a0:	687b      	ldr	r3, [r7, #4]
 80192a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80192a4:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80192a6:	697b      	ldr	r3, [r7, #20]
 80192a8:	2b00      	cmp	r3, #0
 80192aa:	d102      	bne.n	80192b2 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80192ac:	f04f 33ff 	mov.w	r3, #4294967295
 80192b0:	e116      	b.n	80194e0 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80192b2:	887b      	ldrh	r3, [r7, #2]
 80192b4:	2b00      	cmp	r3, #0
 80192b6:	d109      	bne.n	80192cc <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80192b8:	4b8b      	ldr	r3, [pc, #556]	@ (80194e8 <tcp_split_unsent_seg+0x274>)
 80192ba:	f240 3253 	movw	r2, #851	@ 0x353
 80192be:	498d      	ldr	r1, [pc, #564]	@ (80194f4 <tcp_split_unsent_seg+0x280>)
 80192c0:	488b      	ldr	r0, [pc, #556]	@ (80194f0 <tcp_split_unsent_seg+0x27c>)
 80192c2:	f004 ffe3 	bl	801e28c <iprintf>
    return ERR_VAL;
 80192c6:	f06f 0305 	mvn.w	r3, #5
 80192ca:	e109      	b.n	80194e0 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80192cc:	697b      	ldr	r3, [r7, #20]
 80192ce:	891b      	ldrh	r3, [r3, #8]
 80192d0:	887a      	ldrh	r2, [r7, #2]
 80192d2:	429a      	cmp	r2, r3
 80192d4:	d301      	bcc.n	80192da <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80192d6:	2300      	movs	r3, #0
 80192d8:	e102      	b.n	80194e0 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80192da:	687b      	ldr	r3, [r7, #4]
 80192dc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80192de:	887a      	ldrh	r2, [r7, #2]
 80192e0:	429a      	cmp	r2, r3
 80192e2:	d906      	bls.n	80192f2 <tcp_split_unsent_seg+0x7e>
 80192e4:	4b80      	ldr	r3, [pc, #512]	@ (80194e8 <tcp_split_unsent_seg+0x274>)
 80192e6:	f240 325b 	movw	r2, #859	@ 0x35b
 80192ea:	4983      	ldr	r1, [pc, #524]	@ (80194f8 <tcp_split_unsent_seg+0x284>)
 80192ec:	4880      	ldr	r0, [pc, #512]	@ (80194f0 <tcp_split_unsent_seg+0x27c>)
 80192ee:	f004 ffcd 	bl	801e28c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80192f2:	697b      	ldr	r3, [r7, #20]
 80192f4:	891b      	ldrh	r3, [r3, #8]
 80192f6:	2b00      	cmp	r3, #0
 80192f8:	d106      	bne.n	8019308 <tcp_split_unsent_seg+0x94>
 80192fa:	4b7b      	ldr	r3, [pc, #492]	@ (80194e8 <tcp_split_unsent_seg+0x274>)
 80192fc:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8019300:	497e      	ldr	r1, [pc, #504]	@ (80194fc <tcp_split_unsent_seg+0x288>)
 8019302:	487b      	ldr	r0, [pc, #492]	@ (80194f0 <tcp_split_unsent_seg+0x27c>)
 8019304:	f004 ffc2 	bl	801e28c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8019308:	697b      	ldr	r3, [r7, #20]
 801930a:	7a9b      	ldrb	r3, [r3, #10]
 801930c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801930e:	7bfb      	ldrb	r3, [r7, #15]
 8019310:	009b      	lsls	r3, r3, #2
 8019312:	b2db      	uxtb	r3, r3
 8019314:	f003 0304 	and.w	r3, r3, #4
 8019318:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801931a:	697b      	ldr	r3, [r7, #20]
 801931c:	891a      	ldrh	r2, [r3, #8]
 801931e:	887b      	ldrh	r3, [r7, #2]
 8019320:	1ad3      	subs	r3, r2, r3
 8019322:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8019324:	7bbb      	ldrb	r3, [r7, #14]
 8019326:	b29a      	uxth	r2, r3
 8019328:	89bb      	ldrh	r3, [r7, #12]
 801932a:	4413      	add	r3, r2
 801932c:	b29b      	uxth	r3, r3
 801932e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8019332:	4619      	mov	r1, r3
 8019334:	2036      	movs	r0, #54	@ 0x36
 8019336:	f7fa fc0d 	bl	8013b54 <pbuf_alloc>
 801933a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801933c:	693b      	ldr	r3, [r7, #16]
 801933e:	2b00      	cmp	r3, #0
 8019340:	f000 80b7 	beq.w	80194b2 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8019344:	697b      	ldr	r3, [r7, #20]
 8019346:	685b      	ldr	r3, [r3, #4]
 8019348:	891a      	ldrh	r2, [r3, #8]
 801934a:	697b      	ldr	r3, [r7, #20]
 801934c:	891b      	ldrh	r3, [r3, #8]
 801934e:	1ad3      	subs	r3, r2, r3
 8019350:	b29a      	uxth	r2, r3
 8019352:	887b      	ldrh	r3, [r7, #2]
 8019354:	4413      	add	r3, r2
 8019356:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8019358:	697b      	ldr	r3, [r7, #20]
 801935a:	6858      	ldr	r0, [r3, #4]
 801935c:	693b      	ldr	r3, [r7, #16]
 801935e:	685a      	ldr	r2, [r3, #4]
 8019360:	7bbb      	ldrb	r3, [r7, #14]
 8019362:	18d1      	adds	r1, r2, r3
 8019364:	897b      	ldrh	r3, [r7, #10]
 8019366:	89ba      	ldrh	r2, [r7, #12]
 8019368:	f7fb f8ce 	bl	8014508 <pbuf_copy_partial>
 801936c:	4603      	mov	r3, r0
 801936e:	461a      	mov	r2, r3
 8019370:	89bb      	ldrh	r3, [r7, #12]
 8019372:	4293      	cmp	r3, r2
 8019374:	f040 809f 	bne.w	80194b6 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8019378:	697b      	ldr	r3, [r7, #20]
 801937a:	68db      	ldr	r3, [r3, #12]
 801937c:	899b      	ldrh	r3, [r3, #12]
 801937e:	b29b      	uxth	r3, r3
 8019380:	4618      	mov	r0, r3
 8019382:	f7f9 fb0b 	bl	801299c <lwip_htons>
 8019386:	4603      	mov	r3, r0
 8019388:	b2db      	uxtb	r3, r3
 801938a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801938e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8019390:	2300      	movs	r3, #0
 8019392:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8019394:	7efb      	ldrb	r3, [r7, #27]
 8019396:	f003 0308 	and.w	r3, r3, #8
 801939a:	2b00      	cmp	r3, #0
 801939c:	d007      	beq.n	80193ae <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801939e:	7efb      	ldrb	r3, [r7, #27]
 80193a0:	f023 0308 	bic.w	r3, r3, #8
 80193a4:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80193a6:	7ebb      	ldrb	r3, [r7, #26]
 80193a8:	f043 0308 	orr.w	r3, r3, #8
 80193ac:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80193ae:	7efb      	ldrb	r3, [r7, #27]
 80193b0:	f003 0301 	and.w	r3, r3, #1
 80193b4:	2b00      	cmp	r3, #0
 80193b6:	d007      	beq.n	80193c8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80193b8:	7efb      	ldrb	r3, [r7, #27]
 80193ba:	f023 0301 	bic.w	r3, r3, #1
 80193be:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80193c0:	7ebb      	ldrb	r3, [r7, #26]
 80193c2:	f043 0301 	orr.w	r3, r3, #1
 80193c6:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80193c8:	697b      	ldr	r3, [r7, #20]
 80193ca:	68db      	ldr	r3, [r3, #12]
 80193cc:	685b      	ldr	r3, [r3, #4]
 80193ce:	4618      	mov	r0, r3
 80193d0:	f7f9 fafa 	bl	80129c8 <lwip_htonl>
 80193d4:	4602      	mov	r2, r0
 80193d6:	887b      	ldrh	r3, [r7, #2]
 80193d8:	18d1      	adds	r1, r2, r3
 80193da:	7eba      	ldrb	r2, [r7, #26]
 80193dc:	7bfb      	ldrb	r3, [r7, #15]
 80193de:	9300      	str	r3, [sp, #0]
 80193e0:	460b      	mov	r3, r1
 80193e2:	6939      	ldr	r1, [r7, #16]
 80193e4:	6878      	ldr	r0, [r7, #4]
 80193e6:	f7ff fa51 	bl	801888c <tcp_create_segment>
 80193ea:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80193ec:	69fb      	ldr	r3, [r7, #28]
 80193ee:	2b00      	cmp	r3, #0
 80193f0:	d063      	beq.n	80194ba <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80193f2:	697b      	ldr	r3, [r7, #20]
 80193f4:	685b      	ldr	r3, [r3, #4]
 80193f6:	4618      	mov	r0, r3
 80193f8:	f7fa ff1e 	bl	8014238 <pbuf_clen>
 80193fc:	4603      	mov	r3, r0
 80193fe:	461a      	mov	r2, r3
 8019400:	687b      	ldr	r3, [r7, #4]
 8019402:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019406:	1a9b      	subs	r3, r3, r2
 8019408:	b29a      	uxth	r2, r3
 801940a:	687b      	ldr	r3, [r7, #4]
 801940c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8019410:	697b      	ldr	r3, [r7, #20]
 8019412:	6858      	ldr	r0, [r3, #4]
 8019414:	697b      	ldr	r3, [r7, #20]
 8019416:	685b      	ldr	r3, [r3, #4]
 8019418:	891a      	ldrh	r2, [r3, #8]
 801941a:	89bb      	ldrh	r3, [r7, #12]
 801941c:	1ad3      	subs	r3, r2, r3
 801941e:	b29b      	uxth	r3, r3
 8019420:	4619      	mov	r1, r3
 8019422:	f7fa fcf5 	bl	8013e10 <pbuf_realloc>
  useg->len -= remainder;
 8019426:	697b      	ldr	r3, [r7, #20]
 8019428:	891a      	ldrh	r2, [r3, #8]
 801942a:	89bb      	ldrh	r3, [r7, #12]
 801942c:	1ad3      	subs	r3, r2, r3
 801942e:	b29a      	uxth	r2, r3
 8019430:	697b      	ldr	r3, [r7, #20]
 8019432:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8019434:	697b      	ldr	r3, [r7, #20]
 8019436:	68db      	ldr	r3, [r3, #12]
 8019438:	899b      	ldrh	r3, [r3, #12]
 801943a:	b29c      	uxth	r4, r3
 801943c:	7efb      	ldrb	r3, [r7, #27]
 801943e:	b29b      	uxth	r3, r3
 8019440:	4618      	mov	r0, r3
 8019442:	f7f9 faab 	bl	801299c <lwip_htons>
 8019446:	4603      	mov	r3, r0
 8019448:	461a      	mov	r2, r3
 801944a:	697b      	ldr	r3, [r7, #20]
 801944c:	68db      	ldr	r3, [r3, #12]
 801944e:	4322      	orrs	r2, r4
 8019450:	b292      	uxth	r2, r2
 8019452:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8019454:	697b      	ldr	r3, [r7, #20]
 8019456:	685b      	ldr	r3, [r3, #4]
 8019458:	4618      	mov	r0, r3
 801945a:	f7fa feed 	bl	8014238 <pbuf_clen>
 801945e:	4603      	mov	r3, r0
 8019460:	461a      	mov	r2, r3
 8019462:	687b      	ldr	r3, [r7, #4]
 8019464:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019468:	4413      	add	r3, r2
 801946a:	b29a      	uxth	r2, r3
 801946c:	687b      	ldr	r3, [r7, #4]
 801946e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8019472:	69fb      	ldr	r3, [r7, #28]
 8019474:	685b      	ldr	r3, [r3, #4]
 8019476:	4618      	mov	r0, r3
 8019478:	f7fa fede 	bl	8014238 <pbuf_clen>
 801947c:	4603      	mov	r3, r0
 801947e:	461a      	mov	r2, r3
 8019480:	687b      	ldr	r3, [r7, #4]
 8019482:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019486:	4413      	add	r3, r2
 8019488:	b29a      	uxth	r2, r3
 801948a:	687b      	ldr	r3, [r7, #4]
 801948c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8019490:	697b      	ldr	r3, [r7, #20]
 8019492:	681a      	ldr	r2, [r3, #0]
 8019494:	69fb      	ldr	r3, [r7, #28]
 8019496:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8019498:	697b      	ldr	r3, [r7, #20]
 801949a:	69fa      	ldr	r2, [r7, #28]
 801949c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801949e:	69fb      	ldr	r3, [r7, #28]
 80194a0:	681b      	ldr	r3, [r3, #0]
 80194a2:	2b00      	cmp	r3, #0
 80194a4:	d103      	bne.n	80194ae <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80194a6:	687b      	ldr	r3, [r7, #4]
 80194a8:	2200      	movs	r2, #0
 80194aa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80194ae:	2300      	movs	r3, #0
 80194b0:	e016      	b.n	80194e0 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80194b2:	bf00      	nop
 80194b4:	e002      	b.n	80194bc <tcp_split_unsent_seg+0x248>
    goto memerr;
 80194b6:	bf00      	nop
 80194b8:	e000      	b.n	80194bc <tcp_split_unsent_seg+0x248>
    goto memerr;
 80194ba:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80194bc:	69fb      	ldr	r3, [r7, #28]
 80194be:	2b00      	cmp	r3, #0
 80194c0:	d006      	beq.n	80194d0 <tcp_split_unsent_seg+0x25c>
 80194c2:	4b09      	ldr	r3, [pc, #36]	@ (80194e8 <tcp_split_unsent_seg+0x274>)
 80194c4:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 80194c8:	490d      	ldr	r1, [pc, #52]	@ (8019500 <tcp_split_unsent_seg+0x28c>)
 80194ca:	4809      	ldr	r0, [pc, #36]	@ (80194f0 <tcp_split_unsent_seg+0x27c>)
 80194cc:	f004 fede 	bl	801e28c <iprintf>
  if (p != NULL) {
 80194d0:	693b      	ldr	r3, [r7, #16]
 80194d2:	2b00      	cmp	r3, #0
 80194d4:	d002      	beq.n	80194dc <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80194d6:	6938      	ldr	r0, [r7, #16]
 80194d8:	f7fa fe20 	bl	801411c <pbuf_free>
  }

  return ERR_MEM;
 80194dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80194e0:	4618      	mov	r0, r3
 80194e2:	3724      	adds	r7, #36	@ 0x24
 80194e4:	46bd      	mov	sp, r7
 80194e6:	bd90      	pop	{r4, r7, pc}
 80194e8:	08022a40 	.word	0x08022a40
 80194ec:	08022dd4 	.word	0x08022dd4
 80194f0:	08022a94 	.word	0x08022a94
 80194f4:	08022df8 	.word	0x08022df8
 80194f8:	08022e1c 	.word	0x08022e1c
 80194fc:	08022e2c 	.word	0x08022e2c
 8019500:	08022e3c 	.word	0x08022e3c

08019504 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8019504:	b590      	push	{r4, r7, lr}
 8019506:	b085      	sub	sp, #20
 8019508:	af00      	add	r7, sp, #0
 801950a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801950c:	687b      	ldr	r3, [r7, #4]
 801950e:	2b00      	cmp	r3, #0
 8019510:	d106      	bne.n	8019520 <tcp_send_fin+0x1c>
 8019512:	4b21      	ldr	r3, [pc, #132]	@ (8019598 <tcp_send_fin+0x94>)
 8019514:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8019518:	4920      	ldr	r1, [pc, #128]	@ (801959c <tcp_send_fin+0x98>)
 801951a:	4821      	ldr	r0, [pc, #132]	@ (80195a0 <tcp_send_fin+0x9c>)
 801951c:	f004 feb6 	bl	801e28c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8019520:	687b      	ldr	r3, [r7, #4]
 8019522:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019524:	2b00      	cmp	r3, #0
 8019526:	d02e      	beq.n	8019586 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8019528:	687b      	ldr	r3, [r7, #4]
 801952a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801952c:	60fb      	str	r3, [r7, #12]
 801952e:	e002      	b.n	8019536 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8019530:	68fb      	ldr	r3, [r7, #12]
 8019532:	681b      	ldr	r3, [r3, #0]
 8019534:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8019536:	68fb      	ldr	r3, [r7, #12]
 8019538:	681b      	ldr	r3, [r3, #0]
 801953a:	2b00      	cmp	r3, #0
 801953c:	d1f8      	bne.n	8019530 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801953e:	68fb      	ldr	r3, [r7, #12]
 8019540:	68db      	ldr	r3, [r3, #12]
 8019542:	899b      	ldrh	r3, [r3, #12]
 8019544:	b29b      	uxth	r3, r3
 8019546:	4618      	mov	r0, r3
 8019548:	f7f9 fa28 	bl	801299c <lwip_htons>
 801954c:	4603      	mov	r3, r0
 801954e:	b2db      	uxtb	r3, r3
 8019550:	f003 0307 	and.w	r3, r3, #7
 8019554:	2b00      	cmp	r3, #0
 8019556:	d116      	bne.n	8019586 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8019558:	68fb      	ldr	r3, [r7, #12]
 801955a:	68db      	ldr	r3, [r3, #12]
 801955c:	899b      	ldrh	r3, [r3, #12]
 801955e:	b29c      	uxth	r4, r3
 8019560:	2001      	movs	r0, #1
 8019562:	f7f9 fa1b 	bl	801299c <lwip_htons>
 8019566:	4603      	mov	r3, r0
 8019568:	461a      	mov	r2, r3
 801956a:	68fb      	ldr	r3, [r7, #12]
 801956c:	68db      	ldr	r3, [r3, #12]
 801956e:	4322      	orrs	r2, r4
 8019570:	b292      	uxth	r2, r2
 8019572:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8019574:	687b      	ldr	r3, [r7, #4]
 8019576:	8b5b      	ldrh	r3, [r3, #26]
 8019578:	f043 0320 	orr.w	r3, r3, #32
 801957c:	b29a      	uxth	r2, r3
 801957e:	687b      	ldr	r3, [r7, #4]
 8019580:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8019582:	2300      	movs	r3, #0
 8019584:	e004      	b.n	8019590 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8019586:	2101      	movs	r1, #1
 8019588:	6878      	ldr	r0, [r7, #4]
 801958a:	f000 f80b 	bl	80195a4 <tcp_enqueue_flags>
 801958e:	4603      	mov	r3, r0
}
 8019590:	4618      	mov	r0, r3
 8019592:	3714      	adds	r7, #20
 8019594:	46bd      	mov	sp, r7
 8019596:	bd90      	pop	{r4, r7, pc}
 8019598:	08022a40 	.word	0x08022a40
 801959c:	08022e48 	.word	0x08022e48
 80195a0:	08022a94 	.word	0x08022a94

080195a4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80195a4:	b580      	push	{r7, lr}
 80195a6:	b08a      	sub	sp, #40	@ 0x28
 80195a8:	af02      	add	r7, sp, #8
 80195aa:	6078      	str	r0, [r7, #4]
 80195ac:	460b      	mov	r3, r1
 80195ae:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80195b0:	2300      	movs	r3, #0
 80195b2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80195b4:	2300      	movs	r3, #0
 80195b6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80195b8:	78fb      	ldrb	r3, [r7, #3]
 80195ba:	f003 0303 	and.w	r3, r3, #3
 80195be:	2b00      	cmp	r3, #0
 80195c0:	d106      	bne.n	80195d0 <tcp_enqueue_flags+0x2c>
 80195c2:	4b67      	ldr	r3, [pc, #412]	@ (8019760 <tcp_enqueue_flags+0x1bc>)
 80195c4:	f240 4211 	movw	r2, #1041	@ 0x411
 80195c8:	4966      	ldr	r1, [pc, #408]	@ (8019764 <tcp_enqueue_flags+0x1c0>)
 80195ca:	4867      	ldr	r0, [pc, #412]	@ (8019768 <tcp_enqueue_flags+0x1c4>)
 80195cc:	f004 fe5e 	bl	801e28c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80195d0:	687b      	ldr	r3, [r7, #4]
 80195d2:	2b00      	cmp	r3, #0
 80195d4:	d106      	bne.n	80195e4 <tcp_enqueue_flags+0x40>
 80195d6:	4b62      	ldr	r3, [pc, #392]	@ (8019760 <tcp_enqueue_flags+0x1bc>)
 80195d8:	f240 4213 	movw	r2, #1043	@ 0x413
 80195dc:	4963      	ldr	r1, [pc, #396]	@ (801976c <tcp_enqueue_flags+0x1c8>)
 80195de:	4862      	ldr	r0, [pc, #392]	@ (8019768 <tcp_enqueue_flags+0x1c4>)
 80195e0:	f004 fe54 	bl	801e28c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80195e4:	78fb      	ldrb	r3, [r7, #3]
 80195e6:	f003 0302 	and.w	r3, r3, #2
 80195ea:	2b00      	cmp	r3, #0
 80195ec:	d001      	beq.n	80195f2 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80195ee:	2301      	movs	r3, #1
 80195f0:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80195f2:	7ffb      	ldrb	r3, [r7, #31]
 80195f4:	009b      	lsls	r3, r3, #2
 80195f6:	b2db      	uxtb	r3, r3
 80195f8:	f003 0304 	and.w	r3, r3, #4
 80195fc:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80195fe:	7dfb      	ldrb	r3, [r7, #23]
 8019600:	b29b      	uxth	r3, r3
 8019602:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8019606:	4619      	mov	r1, r3
 8019608:	2036      	movs	r0, #54	@ 0x36
 801960a:	f7fa faa3 	bl	8013b54 <pbuf_alloc>
 801960e:	6138      	str	r0, [r7, #16]
 8019610:	693b      	ldr	r3, [r7, #16]
 8019612:	2b00      	cmp	r3, #0
 8019614:	d109      	bne.n	801962a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019616:	687b      	ldr	r3, [r7, #4]
 8019618:	8b5b      	ldrh	r3, [r3, #26]
 801961a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801961e:	b29a      	uxth	r2, r3
 8019620:	687b      	ldr	r3, [r7, #4]
 8019622:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8019624:	f04f 33ff 	mov.w	r3, #4294967295
 8019628:	e095      	b.n	8019756 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801962a:	693b      	ldr	r3, [r7, #16]
 801962c:	895a      	ldrh	r2, [r3, #10]
 801962e:	7dfb      	ldrb	r3, [r7, #23]
 8019630:	b29b      	uxth	r3, r3
 8019632:	429a      	cmp	r2, r3
 8019634:	d206      	bcs.n	8019644 <tcp_enqueue_flags+0xa0>
 8019636:	4b4a      	ldr	r3, [pc, #296]	@ (8019760 <tcp_enqueue_flags+0x1bc>)
 8019638:	f240 4239 	movw	r2, #1081	@ 0x439
 801963c:	494c      	ldr	r1, [pc, #304]	@ (8019770 <tcp_enqueue_flags+0x1cc>)
 801963e:	484a      	ldr	r0, [pc, #296]	@ (8019768 <tcp_enqueue_flags+0x1c4>)
 8019640:	f004 fe24 	bl	801e28c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8019644:	687b      	ldr	r3, [r7, #4]
 8019646:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8019648:	78fa      	ldrb	r2, [r7, #3]
 801964a:	7ffb      	ldrb	r3, [r7, #31]
 801964c:	9300      	str	r3, [sp, #0]
 801964e:	460b      	mov	r3, r1
 8019650:	6939      	ldr	r1, [r7, #16]
 8019652:	6878      	ldr	r0, [r7, #4]
 8019654:	f7ff f91a 	bl	801888c <tcp_create_segment>
 8019658:	60f8      	str	r0, [r7, #12]
 801965a:	68fb      	ldr	r3, [r7, #12]
 801965c:	2b00      	cmp	r3, #0
 801965e:	d109      	bne.n	8019674 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019660:	687b      	ldr	r3, [r7, #4]
 8019662:	8b5b      	ldrh	r3, [r3, #26]
 8019664:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019668:	b29a      	uxth	r2, r3
 801966a:	687b      	ldr	r3, [r7, #4]
 801966c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801966e:	f04f 33ff 	mov.w	r3, #4294967295
 8019672:	e070      	b.n	8019756 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8019674:	68fb      	ldr	r3, [r7, #12]
 8019676:	68db      	ldr	r3, [r3, #12]
 8019678:	f003 0303 	and.w	r3, r3, #3
 801967c:	2b00      	cmp	r3, #0
 801967e:	d006      	beq.n	801968e <tcp_enqueue_flags+0xea>
 8019680:	4b37      	ldr	r3, [pc, #220]	@ (8019760 <tcp_enqueue_flags+0x1bc>)
 8019682:	f240 4242 	movw	r2, #1090	@ 0x442
 8019686:	493b      	ldr	r1, [pc, #236]	@ (8019774 <tcp_enqueue_flags+0x1d0>)
 8019688:	4837      	ldr	r0, [pc, #220]	@ (8019768 <tcp_enqueue_flags+0x1c4>)
 801968a:	f004 fdff 	bl	801e28c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801968e:	68fb      	ldr	r3, [r7, #12]
 8019690:	891b      	ldrh	r3, [r3, #8]
 8019692:	2b00      	cmp	r3, #0
 8019694:	d006      	beq.n	80196a4 <tcp_enqueue_flags+0x100>
 8019696:	4b32      	ldr	r3, [pc, #200]	@ (8019760 <tcp_enqueue_flags+0x1bc>)
 8019698:	f240 4243 	movw	r2, #1091	@ 0x443
 801969c:	4936      	ldr	r1, [pc, #216]	@ (8019778 <tcp_enqueue_flags+0x1d4>)
 801969e:	4832      	ldr	r0, [pc, #200]	@ (8019768 <tcp_enqueue_flags+0x1c4>)
 80196a0:	f004 fdf4 	bl	801e28c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80196a4:	687b      	ldr	r3, [r7, #4]
 80196a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80196a8:	2b00      	cmp	r3, #0
 80196aa:	d103      	bne.n	80196b4 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80196ac:	687b      	ldr	r3, [r7, #4]
 80196ae:	68fa      	ldr	r2, [r7, #12]
 80196b0:	66da      	str	r2, [r3, #108]	@ 0x6c
 80196b2:	e00d      	b.n	80196d0 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80196b4:	687b      	ldr	r3, [r7, #4]
 80196b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80196b8:	61bb      	str	r3, [r7, #24]
 80196ba:	e002      	b.n	80196c2 <tcp_enqueue_flags+0x11e>
 80196bc:	69bb      	ldr	r3, [r7, #24]
 80196be:	681b      	ldr	r3, [r3, #0]
 80196c0:	61bb      	str	r3, [r7, #24]
 80196c2:	69bb      	ldr	r3, [r7, #24]
 80196c4:	681b      	ldr	r3, [r3, #0]
 80196c6:	2b00      	cmp	r3, #0
 80196c8:	d1f8      	bne.n	80196bc <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80196ca:	69bb      	ldr	r3, [r7, #24]
 80196cc:	68fa      	ldr	r2, [r7, #12]
 80196ce:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80196d0:	687b      	ldr	r3, [r7, #4]
 80196d2:	2200      	movs	r2, #0
 80196d4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80196d8:	78fb      	ldrb	r3, [r7, #3]
 80196da:	f003 0302 	and.w	r3, r3, #2
 80196de:	2b00      	cmp	r3, #0
 80196e0:	d104      	bne.n	80196ec <tcp_enqueue_flags+0x148>
 80196e2:	78fb      	ldrb	r3, [r7, #3]
 80196e4:	f003 0301 	and.w	r3, r3, #1
 80196e8:	2b00      	cmp	r3, #0
 80196ea:	d004      	beq.n	80196f6 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80196ec:	687b      	ldr	r3, [r7, #4]
 80196ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80196f0:	1c5a      	adds	r2, r3, #1
 80196f2:	687b      	ldr	r3, [r7, #4]
 80196f4:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80196f6:	78fb      	ldrb	r3, [r7, #3]
 80196f8:	f003 0301 	and.w	r3, r3, #1
 80196fc:	2b00      	cmp	r3, #0
 80196fe:	d006      	beq.n	801970e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8019700:	687b      	ldr	r3, [r7, #4]
 8019702:	8b5b      	ldrh	r3, [r3, #26]
 8019704:	f043 0320 	orr.w	r3, r3, #32
 8019708:	b29a      	uxth	r2, r3
 801970a:	687b      	ldr	r3, [r7, #4]
 801970c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801970e:	68fb      	ldr	r3, [r7, #12]
 8019710:	685b      	ldr	r3, [r3, #4]
 8019712:	4618      	mov	r0, r3
 8019714:	f7fa fd90 	bl	8014238 <pbuf_clen>
 8019718:	4603      	mov	r3, r0
 801971a:	461a      	mov	r2, r3
 801971c:	687b      	ldr	r3, [r7, #4]
 801971e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019722:	4413      	add	r3, r2
 8019724:	b29a      	uxth	r2, r3
 8019726:	687b      	ldr	r3, [r7, #4]
 8019728:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801972c:	687b      	ldr	r3, [r7, #4]
 801972e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019732:	2b00      	cmp	r3, #0
 8019734:	d00e      	beq.n	8019754 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8019736:	687b      	ldr	r3, [r7, #4]
 8019738:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801973a:	2b00      	cmp	r3, #0
 801973c:	d10a      	bne.n	8019754 <tcp_enqueue_flags+0x1b0>
 801973e:	687b      	ldr	r3, [r7, #4]
 8019740:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019742:	2b00      	cmp	r3, #0
 8019744:	d106      	bne.n	8019754 <tcp_enqueue_flags+0x1b0>
 8019746:	4b06      	ldr	r3, [pc, #24]	@ (8019760 <tcp_enqueue_flags+0x1bc>)
 8019748:	f240 4265 	movw	r2, #1125	@ 0x465
 801974c:	490b      	ldr	r1, [pc, #44]	@ (801977c <tcp_enqueue_flags+0x1d8>)
 801974e:	4806      	ldr	r0, [pc, #24]	@ (8019768 <tcp_enqueue_flags+0x1c4>)
 8019750:	f004 fd9c 	bl	801e28c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8019754:	2300      	movs	r3, #0
}
 8019756:	4618      	mov	r0, r3
 8019758:	3720      	adds	r7, #32
 801975a:	46bd      	mov	sp, r7
 801975c:	bd80      	pop	{r7, pc}
 801975e:	bf00      	nop
 8019760:	08022a40 	.word	0x08022a40
 8019764:	08022e64 	.word	0x08022e64
 8019768:	08022a94 	.word	0x08022a94
 801976c:	08022ebc 	.word	0x08022ebc
 8019770:	08022edc 	.word	0x08022edc
 8019774:	08022f18 	.word	0x08022f18
 8019778:	08022f30 	.word	0x08022f30
 801977c:	08022f5c 	.word	0x08022f5c

08019780 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8019780:	b5b0      	push	{r4, r5, r7, lr}
 8019782:	b08a      	sub	sp, #40	@ 0x28
 8019784:	af00      	add	r7, sp, #0
 8019786:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8019788:	687b      	ldr	r3, [r7, #4]
 801978a:	2b00      	cmp	r3, #0
 801978c:	d106      	bne.n	801979c <tcp_output+0x1c>
 801978e:	4b8a      	ldr	r3, [pc, #552]	@ (80199b8 <tcp_output+0x238>)
 8019790:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8019794:	4989      	ldr	r1, [pc, #548]	@ (80199bc <tcp_output+0x23c>)
 8019796:	488a      	ldr	r0, [pc, #552]	@ (80199c0 <tcp_output+0x240>)
 8019798:	f004 fd78 	bl	801e28c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801979c:	687b      	ldr	r3, [r7, #4]
 801979e:	7d1b      	ldrb	r3, [r3, #20]
 80197a0:	2b01      	cmp	r3, #1
 80197a2:	d106      	bne.n	80197b2 <tcp_output+0x32>
 80197a4:	4b84      	ldr	r3, [pc, #528]	@ (80199b8 <tcp_output+0x238>)
 80197a6:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 80197aa:	4986      	ldr	r1, [pc, #536]	@ (80199c4 <tcp_output+0x244>)
 80197ac:	4884      	ldr	r0, [pc, #528]	@ (80199c0 <tcp_output+0x240>)
 80197ae:	f004 fd6d 	bl	801e28c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80197b2:	4b85      	ldr	r3, [pc, #532]	@ (80199c8 <tcp_output+0x248>)
 80197b4:	681b      	ldr	r3, [r3, #0]
 80197b6:	687a      	ldr	r2, [r7, #4]
 80197b8:	429a      	cmp	r2, r3
 80197ba:	d101      	bne.n	80197c0 <tcp_output+0x40>
    return ERR_OK;
 80197bc:	2300      	movs	r3, #0
 80197be:	e1ce      	b.n	8019b5e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80197c0:	687b      	ldr	r3, [r7, #4]
 80197c2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80197c6:	687b      	ldr	r3, [r7, #4]
 80197c8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80197cc:	4293      	cmp	r3, r2
 80197ce:	bf28      	it	cs
 80197d0:	4613      	movcs	r3, r2
 80197d2:	b29b      	uxth	r3, r3
 80197d4:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80197d6:	687b      	ldr	r3, [r7, #4]
 80197d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80197da:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 80197dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80197de:	2b00      	cmp	r3, #0
 80197e0:	d10b      	bne.n	80197fa <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80197e2:	687b      	ldr	r3, [r7, #4]
 80197e4:	8b5b      	ldrh	r3, [r3, #26]
 80197e6:	f003 0302 	and.w	r3, r3, #2
 80197ea:	2b00      	cmp	r3, #0
 80197ec:	f000 81aa 	beq.w	8019b44 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80197f0:	6878      	ldr	r0, [r7, #4]
 80197f2:	f000 fdcb 	bl	801a38c <tcp_send_empty_ack>
 80197f6:	4603      	mov	r3, r0
 80197f8:	e1b1      	b.n	8019b5e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80197fa:	6879      	ldr	r1, [r7, #4]
 80197fc:	687b      	ldr	r3, [r7, #4]
 80197fe:	3304      	adds	r3, #4
 8019800:	461a      	mov	r2, r3
 8019802:	6878      	ldr	r0, [r7, #4]
 8019804:	f7ff f826 	bl	8018854 <tcp_route>
 8019808:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801980a:	697b      	ldr	r3, [r7, #20]
 801980c:	2b00      	cmp	r3, #0
 801980e:	d102      	bne.n	8019816 <tcp_output+0x96>
    return ERR_RTE;
 8019810:	f06f 0303 	mvn.w	r3, #3
 8019814:	e1a3      	b.n	8019b5e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8019816:	687b      	ldr	r3, [r7, #4]
 8019818:	2b00      	cmp	r3, #0
 801981a:	d003      	beq.n	8019824 <tcp_output+0xa4>
 801981c:	687b      	ldr	r3, [r7, #4]
 801981e:	681b      	ldr	r3, [r3, #0]
 8019820:	2b00      	cmp	r3, #0
 8019822:	d111      	bne.n	8019848 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8019824:	697b      	ldr	r3, [r7, #20]
 8019826:	2b00      	cmp	r3, #0
 8019828:	d002      	beq.n	8019830 <tcp_output+0xb0>
 801982a:	697b      	ldr	r3, [r7, #20]
 801982c:	3304      	adds	r3, #4
 801982e:	e000      	b.n	8019832 <tcp_output+0xb2>
 8019830:	2300      	movs	r3, #0
 8019832:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8019834:	693b      	ldr	r3, [r7, #16]
 8019836:	2b00      	cmp	r3, #0
 8019838:	d102      	bne.n	8019840 <tcp_output+0xc0>
      return ERR_RTE;
 801983a:	f06f 0303 	mvn.w	r3, #3
 801983e:	e18e      	b.n	8019b5e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8019840:	693b      	ldr	r3, [r7, #16]
 8019842:	681a      	ldr	r2, [r3, #0]
 8019844:	687b      	ldr	r3, [r7, #4]
 8019846:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8019848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801984a:	68db      	ldr	r3, [r3, #12]
 801984c:	685b      	ldr	r3, [r3, #4]
 801984e:	4618      	mov	r0, r3
 8019850:	f7f9 f8ba 	bl	80129c8 <lwip_htonl>
 8019854:	4602      	mov	r2, r0
 8019856:	687b      	ldr	r3, [r7, #4]
 8019858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801985a:	1ad3      	subs	r3, r2, r3
 801985c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801985e:	8912      	ldrh	r2, [r2, #8]
 8019860:	4413      	add	r3, r2
 8019862:	69ba      	ldr	r2, [r7, #24]
 8019864:	429a      	cmp	r2, r3
 8019866:	d227      	bcs.n	80198b8 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8019868:	687b      	ldr	r3, [r7, #4]
 801986a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801986e:	461a      	mov	r2, r3
 8019870:	69bb      	ldr	r3, [r7, #24]
 8019872:	4293      	cmp	r3, r2
 8019874:	d114      	bne.n	80198a0 <tcp_output+0x120>
 8019876:	687b      	ldr	r3, [r7, #4]
 8019878:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801987a:	2b00      	cmp	r3, #0
 801987c:	d110      	bne.n	80198a0 <tcp_output+0x120>
 801987e:	687b      	ldr	r3, [r7, #4]
 8019880:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8019884:	2b00      	cmp	r3, #0
 8019886:	d10b      	bne.n	80198a0 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8019888:	687b      	ldr	r3, [r7, #4]
 801988a:	2200      	movs	r2, #0
 801988c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8019890:	687b      	ldr	r3, [r7, #4]
 8019892:	2201      	movs	r2, #1
 8019894:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8019898:	687b      	ldr	r3, [r7, #4]
 801989a:	2200      	movs	r2, #0
 801989c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80198a0:	687b      	ldr	r3, [r7, #4]
 80198a2:	8b5b      	ldrh	r3, [r3, #26]
 80198a4:	f003 0302 	and.w	r3, r3, #2
 80198a8:	2b00      	cmp	r3, #0
 80198aa:	f000 814d 	beq.w	8019b48 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80198ae:	6878      	ldr	r0, [r7, #4]
 80198b0:	f000 fd6c 	bl	801a38c <tcp_send_empty_ack>
 80198b4:	4603      	mov	r3, r0
 80198b6:	e152      	b.n	8019b5e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80198b8:	687b      	ldr	r3, [r7, #4]
 80198ba:	2200      	movs	r2, #0
 80198bc:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80198c0:	687b      	ldr	r3, [r7, #4]
 80198c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80198c4:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80198c6:	6a3b      	ldr	r3, [r7, #32]
 80198c8:	2b00      	cmp	r3, #0
 80198ca:	f000 811c 	beq.w	8019b06 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80198ce:	e002      	b.n	80198d6 <tcp_output+0x156>
 80198d0:	6a3b      	ldr	r3, [r7, #32]
 80198d2:	681b      	ldr	r3, [r3, #0]
 80198d4:	623b      	str	r3, [r7, #32]
 80198d6:	6a3b      	ldr	r3, [r7, #32]
 80198d8:	681b      	ldr	r3, [r3, #0]
 80198da:	2b00      	cmp	r3, #0
 80198dc:	d1f8      	bne.n	80198d0 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80198de:	e112      	b.n	8019b06 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80198e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80198e2:	68db      	ldr	r3, [r3, #12]
 80198e4:	899b      	ldrh	r3, [r3, #12]
 80198e6:	b29b      	uxth	r3, r3
 80198e8:	4618      	mov	r0, r3
 80198ea:	f7f9 f857 	bl	801299c <lwip_htons>
 80198ee:	4603      	mov	r3, r0
 80198f0:	b2db      	uxtb	r3, r3
 80198f2:	f003 0304 	and.w	r3, r3, #4
 80198f6:	2b00      	cmp	r3, #0
 80198f8:	d006      	beq.n	8019908 <tcp_output+0x188>
 80198fa:	4b2f      	ldr	r3, [pc, #188]	@ (80199b8 <tcp_output+0x238>)
 80198fc:	f240 5236 	movw	r2, #1334	@ 0x536
 8019900:	4932      	ldr	r1, [pc, #200]	@ (80199cc <tcp_output+0x24c>)
 8019902:	482f      	ldr	r0, [pc, #188]	@ (80199c0 <tcp_output+0x240>)
 8019904:	f004 fcc2 	bl	801e28c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8019908:	687b      	ldr	r3, [r7, #4]
 801990a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801990c:	2b00      	cmp	r3, #0
 801990e:	d01f      	beq.n	8019950 <tcp_output+0x1d0>
 8019910:	687b      	ldr	r3, [r7, #4]
 8019912:	8b5b      	ldrh	r3, [r3, #26]
 8019914:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8019918:	2b00      	cmp	r3, #0
 801991a:	d119      	bne.n	8019950 <tcp_output+0x1d0>
 801991c:	687b      	ldr	r3, [r7, #4]
 801991e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019920:	2b00      	cmp	r3, #0
 8019922:	d00b      	beq.n	801993c <tcp_output+0x1bc>
 8019924:	687b      	ldr	r3, [r7, #4]
 8019926:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019928:	681b      	ldr	r3, [r3, #0]
 801992a:	2b00      	cmp	r3, #0
 801992c:	d110      	bne.n	8019950 <tcp_output+0x1d0>
 801992e:	687b      	ldr	r3, [r7, #4]
 8019930:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019932:	891a      	ldrh	r2, [r3, #8]
 8019934:	687b      	ldr	r3, [r7, #4]
 8019936:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8019938:	429a      	cmp	r2, r3
 801993a:	d209      	bcs.n	8019950 <tcp_output+0x1d0>
 801993c:	687b      	ldr	r3, [r7, #4]
 801993e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8019942:	2b00      	cmp	r3, #0
 8019944:	d004      	beq.n	8019950 <tcp_output+0x1d0>
 8019946:	687b      	ldr	r3, [r7, #4]
 8019948:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801994c:	2b08      	cmp	r3, #8
 801994e:	d901      	bls.n	8019954 <tcp_output+0x1d4>
 8019950:	2301      	movs	r3, #1
 8019952:	e000      	b.n	8019956 <tcp_output+0x1d6>
 8019954:	2300      	movs	r3, #0
 8019956:	2b00      	cmp	r3, #0
 8019958:	d106      	bne.n	8019968 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801995a:	687b      	ldr	r3, [r7, #4]
 801995c:	8b5b      	ldrh	r3, [r3, #26]
 801995e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8019962:	2b00      	cmp	r3, #0
 8019964:	f000 80e4 	beq.w	8019b30 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8019968:	687b      	ldr	r3, [r7, #4]
 801996a:	7d1b      	ldrb	r3, [r3, #20]
 801996c:	2b02      	cmp	r3, #2
 801996e:	d00d      	beq.n	801998c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8019970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019972:	68db      	ldr	r3, [r3, #12]
 8019974:	899b      	ldrh	r3, [r3, #12]
 8019976:	b29c      	uxth	r4, r3
 8019978:	2010      	movs	r0, #16
 801997a:	f7f9 f80f 	bl	801299c <lwip_htons>
 801997e:	4603      	mov	r3, r0
 8019980:	461a      	mov	r2, r3
 8019982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019984:	68db      	ldr	r3, [r3, #12]
 8019986:	4322      	orrs	r2, r4
 8019988:	b292      	uxth	r2, r2
 801998a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801998c:	697a      	ldr	r2, [r7, #20]
 801998e:	6879      	ldr	r1, [r7, #4]
 8019990:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8019992:	f000 f909 	bl	8019ba8 <tcp_output_segment>
 8019996:	4603      	mov	r3, r0
 8019998:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801999a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801999e:	2b00      	cmp	r3, #0
 80199a0:	d016      	beq.n	80199d0 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80199a2:	687b      	ldr	r3, [r7, #4]
 80199a4:	8b5b      	ldrh	r3, [r3, #26]
 80199a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80199aa:	b29a      	uxth	r2, r3
 80199ac:	687b      	ldr	r3, [r7, #4]
 80199ae:	835a      	strh	r2, [r3, #26]
      return err;
 80199b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80199b4:	e0d3      	b.n	8019b5e <tcp_output+0x3de>
 80199b6:	bf00      	nop
 80199b8:	08022a40 	.word	0x08022a40
 80199bc:	08022f84 	.word	0x08022f84
 80199c0:	08022a94 	.word	0x08022a94
 80199c4:	08022f9c 	.word	0x08022f9c
 80199c8:	2000cb0c 	.word	0x2000cb0c
 80199cc:	08022fc4 	.word	0x08022fc4
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80199d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80199d2:	681a      	ldr	r2, [r3, #0]
 80199d4:	687b      	ldr	r3, [r7, #4]
 80199d6:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 80199d8:	687b      	ldr	r3, [r7, #4]
 80199da:	7d1b      	ldrb	r3, [r3, #20]
 80199dc:	2b02      	cmp	r3, #2
 80199de:	d006      	beq.n	80199ee <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80199e0:	687b      	ldr	r3, [r7, #4]
 80199e2:	8b5b      	ldrh	r3, [r3, #26]
 80199e4:	f023 0303 	bic.w	r3, r3, #3
 80199e8:	b29a      	uxth	r2, r3
 80199ea:	687b      	ldr	r3, [r7, #4]
 80199ec:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80199ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80199f0:	68db      	ldr	r3, [r3, #12]
 80199f2:	685b      	ldr	r3, [r3, #4]
 80199f4:	4618      	mov	r0, r3
 80199f6:	f7f8 ffe7 	bl	80129c8 <lwip_htonl>
 80199fa:	4604      	mov	r4, r0
 80199fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80199fe:	891b      	ldrh	r3, [r3, #8]
 8019a00:	461d      	mov	r5, r3
 8019a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019a04:	68db      	ldr	r3, [r3, #12]
 8019a06:	899b      	ldrh	r3, [r3, #12]
 8019a08:	b29b      	uxth	r3, r3
 8019a0a:	4618      	mov	r0, r3
 8019a0c:	f7f8 ffc6 	bl	801299c <lwip_htons>
 8019a10:	4603      	mov	r3, r0
 8019a12:	b2db      	uxtb	r3, r3
 8019a14:	f003 0303 	and.w	r3, r3, #3
 8019a18:	2b00      	cmp	r3, #0
 8019a1a:	d001      	beq.n	8019a20 <tcp_output+0x2a0>
 8019a1c:	2301      	movs	r3, #1
 8019a1e:	e000      	b.n	8019a22 <tcp_output+0x2a2>
 8019a20:	2300      	movs	r3, #0
 8019a22:	442b      	add	r3, r5
 8019a24:	4423      	add	r3, r4
 8019a26:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8019a28:	687b      	ldr	r3, [r7, #4]
 8019a2a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8019a2c:	68bb      	ldr	r3, [r7, #8]
 8019a2e:	1ad3      	subs	r3, r2, r3
 8019a30:	2b00      	cmp	r3, #0
 8019a32:	da02      	bge.n	8019a3a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8019a34:	687b      	ldr	r3, [r7, #4]
 8019a36:	68ba      	ldr	r2, [r7, #8]
 8019a38:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8019a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019a3c:	891b      	ldrh	r3, [r3, #8]
 8019a3e:	461c      	mov	r4, r3
 8019a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019a42:	68db      	ldr	r3, [r3, #12]
 8019a44:	899b      	ldrh	r3, [r3, #12]
 8019a46:	b29b      	uxth	r3, r3
 8019a48:	4618      	mov	r0, r3
 8019a4a:	f7f8 ffa7 	bl	801299c <lwip_htons>
 8019a4e:	4603      	mov	r3, r0
 8019a50:	b2db      	uxtb	r3, r3
 8019a52:	f003 0303 	and.w	r3, r3, #3
 8019a56:	2b00      	cmp	r3, #0
 8019a58:	d001      	beq.n	8019a5e <tcp_output+0x2de>
 8019a5a:	2301      	movs	r3, #1
 8019a5c:	e000      	b.n	8019a60 <tcp_output+0x2e0>
 8019a5e:	2300      	movs	r3, #0
 8019a60:	4423      	add	r3, r4
 8019a62:	2b00      	cmp	r3, #0
 8019a64:	d049      	beq.n	8019afa <tcp_output+0x37a>
      seg->next = NULL;
 8019a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019a68:	2200      	movs	r2, #0
 8019a6a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8019a6c:	687b      	ldr	r3, [r7, #4]
 8019a6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019a70:	2b00      	cmp	r3, #0
 8019a72:	d105      	bne.n	8019a80 <tcp_output+0x300>
        pcb->unacked = seg;
 8019a74:	687b      	ldr	r3, [r7, #4]
 8019a76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019a78:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8019a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019a7c:	623b      	str	r3, [r7, #32]
 8019a7e:	e03f      	b.n	8019b00 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8019a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019a82:	68db      	ldr	r3, [r3, #12]
 8019a84:	685b      	ldr	r3, [r3, #4]
 8019a86:	4618      	mov	r0, r3
 8019a88:	f7f8 ff9e 	bl	80129c8 <lwip_htonl>
 8019a8c:	4604      	mov	r4, r0
 8019a8e:	6a3b      	ldr	r3, [r7, #32]
 8019a90:	68db      	ldr	r3, [r3, #12]
 8019a92:	685b      	ldr	r3, [r3, #4]
 8019a94:	4618      	mov	r0, r3
 8019a96:	f7f8 ff97 	bl	80129c8 <lwip_htonl>
 8019a9a:	4603      	mov	r3, r0
 8019a9c:	1ae3      	subs	r3, r4, r3
 8019a9e:	2b00      	cmp	r3, #0
 8019aa0:	da24      	bge.n	8019aec <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8019aa2:	687b      	ldr	r3, [r7, #4]
 8019aa4:	3370      	adds	r3, #112	@ 0x70
 8019aa6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8019aa8:	e002      	b.n	8019ab0 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8019aaa:	69fb      	ldr	r3, [r7, #28]
 8019aac:	681b      	ldr	r3, [r3, #0]
 8019aae:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8019ab0:	69fb      	ldr	r3, [r7, #28]
 8019ab2:	681b      	ldr	r3, [r3, #0]
 8019ab4:	2b00      	cmp	r3, #0
 8019ab6:	d011      	beq.n	8019adc <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8019ab8:	69fb      	ldr	r3, [r7, #28]
 8019aba:	681b      	ldr	r3, [r3, #0]
 8019abc:	68db      	ldr	r3, [r3, #12]
 8019abe:	685b      	ldr	r3, [r3, #4]
 8019ac0:	4618      	mov	r0, r3
 8019ac2:	f7f8 ff81 	bl	80129c8 <lwip_htonl>
 8019ac6:	4604      	mov	r4, r0
 8019ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019aca:	68db      	ldr	r3, [r3, #12]
 8019acc:	685b      	ldr	r3, [r3, #4]
 8019ace:	4618      	mov	r0, r3
 8019ad0:	f7f8 ff7a 	bl	80129c8 <lwip_htonl>
 8019ad4:	4603      	mov	r3, r0
 8019ad6:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8019ad8:	2b00      	cmp	r3, #0
 8019ada:	dbe6      	blt.n	8019aaa <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8019adc:	69fb      	ldr	r3, [r7, #28]
 8019ade:	681a      	ldr	r2, [r3, #0]
 8019ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019ae2:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8019ae4:	69fb      	ldr	r3, [r7, #28]
 8019ae6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019ae8:	601a      	str	r2, [r3, #0]
 8019aea:	e009      	b.n	8019b00 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8019aec:	6a3b      	ldr	r3, [r7, #32]
 8019aee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019af0:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8019af2:	6a3b      	ldr	r3, [r7, #32]
 8019af4:	681b      	ldr	r3, [r3, #0]
 8019af6:	623b      	str	r3, [r7, #32]
 8019af8:	e002      	b.n	8019b00 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8019afa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8019afc:	f7fb ff49 	bl	8015992 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8019b00:	687b      	ldr	r3, [r7, #4]
 8019b02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019b04:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8019b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019b08:	2b00      	cmp	r3, #0
 8019b0a:	d012      	beq.n	8019b32 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8019b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019b0e:	68db      	ldr	r3, [r3, #12]
 8019b10:	685b      	ldr	r3, [r3, #4]
 8019b12:	4618      	mov	r0, r3
 8019b14:	f7f8 ff58 	bl	80129c8 <lwip_htonl>
 8019b18:	4602      	mov	r2, r0
 8019b1a:	687b      	ldr	r3, [r7, #4]
 8019b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019b1e:	1ad3      	subs	r3, r2, r3
 8019b20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019b22:	8912      	ldrh	r2, [r2, #8]
 8019b24:	4413      	add	r3, r2
  while (seg != NULL &&
 8019b26:	69ba      	ldr	r2, [r7, #24]
 8019b28:	429a      	cmp	r2, r3
 8019b2a:	f4bf aed9 	bcs.w	80198e0 <tcp_output+0x160>
 8019b2e:	e000      	b.n	8019b32 <tcp_output+0x3b2>
      break;
 8019b30:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8019b32:	687b      	ldr	r3, [r7, #4]
 8019b34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019b36:	2b00      	cmp	r3, #0
 8019b38:	d108      	bne.n	8019b4c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8019b3a:	687b      	ldr	r3, [r7, #4]
 8019b3c:	2200      	movs	r2, #0
 8019b3e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8019b42:	e004      	b.n	8019b4e <tcp_output+0x3ce>
    goto output_done;
 8019b44:	bf00      	nop
 8019b46:	e002      	b.n	8019b4e <tcp_output+0x3ce>
    goto output_done;
 8019b48:	bf00      	nop
 8019b4a:	e000      	b.n	8019b4e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8019b4c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8019b4e:	687b      	ldr	r3, [r7, #4]
 8019b50:	8b5b      	ldrh	r3, [r3, #26]
 8019b52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8019b56:	b29a      	uxth	r2, r3
 8019b58:	687b      	ldr	r3, [r7, #4]
 8019b5a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8019b5c:	2300      	movs	r3, #0
}
 8019b5e:	4618      	mov	r0, r3
 8019b60:	3728      	adds	r7, #40	@ 0x28
 8019b62:	46bd      	mov	sp, r7
 8019b64:	bdb0      	pop	{r4, r5, r7, pc}
 8019b66:	bf00      	nop

08019b68 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8019b68:	b580      	push	{r7, lr}
 8019b6a:	b082      	sub	sp, #8
 8019b6c:	af00      	add	r7, sp, #0
 8019b6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8019b70:	687b      	ldr	r3, [r7, #4]
 8019b72:	2b00      	cmp	r3, #0
 8019b74:	d106      	bne.n	8019b84 <tcp_output_segment_busy+0x1c>
 8019b76:	4b09      	ldr	r3, [pc, #36]	@ (8019b9c <tcp_output_segment_busy+0x34>)
 8019b78:	f240 529a 	movw	r2, #1434	@ 0x59a
 8019b7c:	4908      	ldr	r1, [pc, #32]	@ (8019ba0 <tcp_output_segment_busy+0x38>)
 8019b7e:	4809      	ldr	r0, [pc, #36]	@ (8019ba4 <tcp_output_segment_busy+0x3c>)
 8019b80:	f004 fb84 	bl	801e28c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8019b84:	687b      	ldr	r3, [r7, #4]
 8019b86:	685b      	ldr	r3, [r3, #4]
 8019b88:	7b9b      	ldrb	r3, [r3, #14]
 8019b8a:	2b01      	cmp	r3, #1
 8019b8c:	d001      	beq.n	8019b92 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8019b8e:	2301      	movs	r3, #1
 8019b90:	e000      	b.n	8019b94 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8019b92:	2300      	movs	r3, #0
}
 8019b94:	4618      	mov	r0, r3
 8019b96:	3708      	adds	r7, #8
 8019b98:	46bd      	mov	sp, r7
 8019b9a:	bd80      	pop	{r7, pc}
 8019b9c:	08022a40 	.word	0x08022a40
 8019ba0:	08022fdc 	.word	0x08022fdc
 8019ba4:	08022a94 	.word	0x08022a94

08019ba8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8019ba8:	b5b0      	push	{r4, r5, r7, lr}
 8019baa:	b08c      	sub	sp, #48	@ 0x30
 8019bac:	af04      	add	r7, sp, #16
 8019bae:	60f8      	str	r0, [r7, #12]
 8019bb0:	60b9      	str	r1, [r7, #8]
 8019bb2:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8019bb4:	68fb      	ldr	r3, [r7, #12]
 8019bb6:	2b00      	cmp	r3, #0
 8019bb8:	d106      	bne.n	8019bc8 <tcp_output_segment+0x20>
 8019bba:	4b64      	ldr	r3, [pc, #400]	@ (8019d4c <tcp_output_segment+0x1a4>)
 8019bbc:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8019bc0:	4963      	ldr	r1, [pc, #396]	@ (8019d50 <tcp_output_segment+0x1a8>)
 8019bc2:	4864      	ldr	r0, [pc, #400]	@ (8019d54 <tcp_output_segment+0x1ac>)
 8019bc4:	f004 fb62 	bl	801e28c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8019bc8:	68bb      	ldr	r3, [r7, #8]
 8019bca:	2b00      	cmp	r3, #0
 8019bcc:	d106      	bne.n	8019bdc <tcp_output_segment+0x34>
 8019bce:	4b5f      	ldr	r3, [pc, #380]	@ (8019d4c <tcp_output_segment+0x1a4>)
 8019bd0:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8019bd4:	4960      	ldr	r1, [pc, #384]	@ (8019d58 <tcp_output_segment+0x1b0>)
 8019bd6:	485f      	ldr	r0, [pc, #380]	@ (8019d54 <tcp_output_segment+0x1ac>)
 8019bd8:	f004 fb58 	bl	801e28c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8019bdc:	687b      	ldr	r3, [r7, #4]
 8019bde:	2b00      	cmp	r3, #0
 8019be0:	d106      	bne.n	8019bf0 <tcp_output_segment+0x48>
 8019be2:	4b5a      	ldr	r3, [pc, #360]	@ (8019d4c <tcp_output_segment+0x1a4>)
 8019be4:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8019be8:	495c      	ldr	r1, [pc, #368]	@ (8019d5c <tcp_output_segment+0x1b4>)
 8019bea:	485a      	ldr	r0, [pc, #360]	@ (8019d54 <tcp_output_segment+0x1ac>)
 8019bec:	f004 fb4e 	bl	801e28c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8019bf0:	68f8      	ldr	r0, [r7, #12]
 8019bf2:	f7ff ffb9 	bl	8019b68 <tcp_output_segment_busy>
 8019bf6:	4603      	mov	r3, r0
 8019bf8:	2b00      	cmp	r3, #0
 8019bfa:	d001      	beq.n	8019c00 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8019bfc:	2300      	movs	r3, #0
 8019bfe:	e0a1      	b.n	8019d44 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8019c00:	68bb      	ldr	r3, [r7, #8]
 8019c02:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019c04:	68fb      	ldr	r3, [r7, #12]
 8019c06:	68dc      	ldr	r4, [r3, #12]
 8019c08:	4610      	mov	r0, r2
 8019c0a:	f7f8 fedd 	bl	80129c8 <lwip_htonl>
 8019c0e:	4603      	mov	r3, r0
 8019c10:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8019c12:	68bb      	ldr	r3, [r7, #8]
 8019c14:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8019c16:	68fb      	ldr	r3, [r7, #12]
 8019c18:	68dc      	ldr	r4, [r3, #12]
 8019c1a:	4610      	mov	r0, r2
 8019c1c:	f7f8 febe 	bl	801299c <lwip_htons>
 8019c20:	4603      	mov	r3, r0
 8019c22:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8019c24:	68bb      	ldr	r3, [r7, #8]
 8019c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019c28:	68ba      	ldr	r2, [r7, #8]
 8019c2a:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8019c2c:	441a      	add	r2, r3
 8019c2e:	68bb      	ldr	r3, [r7, #8]
 8019c30:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8019c32:	68fb      	ldr	r3, [r7, #12]
 8019c34:	68db      	ldr	r3, [r3, #12]
 8019c36:	3314      	adds	r3, #20
 8019c38:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8019c3a:	68fb      	ldr	r3, [r7, #12]
 8019c3c:	7a9b      	ldrb	r3, [r3, #10]
 8019c3e:	f003 0301 	and.w	r3, r3, #1
 8019c42:	2b00      	cmp	r3, #0
 8019c44:	d015      	beq.n	8019c72 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8019c46:	68bb      	ldr	r3, [r7, #8]
 8019c48:	3304      	adds	r3, #4
 8019c4a:	461a      	mov	r2, r3
 8019c4c:	6879      	ldr	r1, [r7, #4]
 8019c4e:	f44f 7006 	mov.w	r0, #536	@ 0x218
 8019c52:	f7fc fa39 	bl	80160c8 <tcp_eff_send_mss_netif>
 8019c56:	4603      	mov	r3, r0
 8019c58:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8019c5a:	8b7b      	ldrh	r3, [r7, #26]
 8019c5c:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8019c60:	4618      	mov	r0, r3
 8019c62:	f7f8 feb1 	bl	80129c8 <lwip_htonl>
 8019c66:	4602      	mov	r2, r0
 8019c68:	69fb      	ldr	r3, [r7, #28]
 8019c6a:	601a      	str	r2, [r3, #0]
    opts += 1;
 8019c6c:	69fb      	ldr	r3, [r7, #28]
 8019c6e:	3304      	adds	r3, #4
 8019c70:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8019c72:	68bb      	ldr	r3, [r7, #8]
 8019c74:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8019c78:	2b00      	cmp	r3, #0
 8019c7a:	da02      	bge.n	8019c82 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8019c7c:	68bb      	ldr	r3, [r7, #8]
 8019c7e:	2200      	movs	r2, #0
 8019c80:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8019c82:	68bb      	ldr	r3, [r7, #8]
 8019c84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019c86:	2b00      	cmp	r3, #0
 8019c88:	d10c      	bne.n	8019ca4 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8019c8a:	4b35      	ldr	r3, [pc, #212]	@ (8019d60 <tcp_output_segment+0x1b8>)
 8019c8c:	681a      	ldr	r2, [r3, #0]
 8019c8e:	68bb      	ldr	r3, [r7, #8]
 8019c90:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8019c92:	68fb      	ldr	r3, [r7, #12]
 8019c94:	68db      	ldr	r3, [r3, #12]
 8019c96:	685b      	ldr	r3, [r3, #4]
 8019c98:	4618      	mov	r0, r3
 8019c9a:	f7f8 fe95 	bl	80129c8 <lwip_htonl>
 8019c9e:	4602      	mov	r2, r0
 8019ca0:	68bb      	ldr	r3, [r7, #8]
 8019ca2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8019ca4:	68fb      	ldr	r3, [r7, #12]
 8019ca6:	68da      	ldr	r2, [r3, #12]
 8019ca8:	68fb      	ldr	r3, [r7, #12]
 8019caa:	685b      	ldr	r3, [r3, #4]
 8019cac:	685b      	ldr	r3, [r3, #4]
 8019cae:	1ad3      	subs	r3, r2, r3
 8019cb0:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8019cb2:	68fb      	ldr	r3, [r7, #12]
 8019cb4:	685b      	ldr	r3, [r3, #4]
 8019cb6:	8959      	ldrh	r1, [r3, #10]
 8019cb8:	68fb      	ldr	r3, [r7, #12]
 8019cba:	685b      	ldr	r3, [r3, #4]
 8019cbc:	8b3a      	ldrh	r2, [r7, #24]
 8019cbe:	1a8a      	subs	r2, r1, r2
 8019cc0:	b292      	uxth	r2, r2
 8019cc2:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8019cc4:	68fb      	ldr	r3, [r7, #12]
 8019cc6:	685b      	ldr	r3, [r3, #4]
 8019cc8:	8919      	ldrh	r1, [r3, #8]
 8019cca:	68fb      	ldr	r3, [r7, #12]
 8019ccc:	685b      	ldr	r3, [r3, #4]
 8019cce:	8b3a      	ldrh	r2, [r7, #24]
 8019cd0:	1a8a      	subs	r2, r1, r2
 8019cd2:	b292      	uxth	r2, r2
 8019cd4:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8019cd6:	68fb      	ldr	r3, [r7, #12]
 8019cd8:	685b      	ldr	r3, [r3, #4]
 8019cda:	68fa      	ldr	r2, [r7, #12]
 8019cdc:	68d2      	ldr	r2, [r2, #12]
 8019cde:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8019ce0:	68fb      	ldr	r3, [r7, #12]
 8019ce2:	68db      	ldr	r3, [r3, #12]
 8019ce4:	2200      	movs	r2, #0
 8019ce6:	741a      	strb	r2, [r3, #16]
 8019ce8:	2200      	movs	r2, #0
 8019cea:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8019cec:	68fb      	ldr	r3, [r7, #12]
 8019cee:	68da      	ldr	r2, [r3, #12]
 8019cf0:	68fb      	ldr	r3, [r7, #12]
 8019cf2:	7a9b      	ldrb	r3, [r3, #10]
 8019cf4:	f003 0301 	and.w	r3, r3, #1
 8019cf8:	2b00      	cmp	r3, #0
 8019cfa:	d001      	beq.n	8019d00 <tcp_output_segment+0x158>
 8019cfc:	2318      	movs	r3, #24
 8019cfe:	e000      	b.n	8019d02 <tcp_output_segment+0x15a>
 8019d00:	2314      	movs	r3, #20
 8019d02:	4413      	add	r3, r2
 8019d04:	69fa      	ldr	r2, [r7, #28]
 8019d06:	429a      	cmp	r2, r3
 8019d08:	d006      	beq.n	8019d18 <tcp_output_segment+0x170>
 8019d0a:	4b10      	ldr	r3, [pc, #64]	@ (8019d4c <tcp_output_segment+0x1a4>)
 8019d0c:	f240 621c 	movw	r2, #1564	@ 0x61c
 8019d10:	4914      	ldr	r1, [pc, #80]	@ (8019d64 <tcp_output_segment+0x1bc>)
 8019d12:	4810      	ldr	r0, [pc, #64]	@ (8019d54 <tcp_output_segment+0x1ac>)
 8019d14:	f004 faba 	bl	801e28c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8019d18:	68fb      	ldr	r3, [r7, #12]
 8019d1a:	6858      	ldr	r0, [r3, #4]
 8019d1c:	68b9      	ldr	r1, [r7, #8]
 8019d1e:	68bb      	ldr	r3, [r7, #8]
 8019d20:	1d1c      	adds	r4, r3, #4
 8019d22:	68bb      	ldr	r3, [r7, #8]
 8019d24:	7add      	ldrb	r5, [r3, #11]
 8019d26:	68bb      	ldr	r3, [r7, #8]
 8019d28:	7a9b      	ldrb	r3, [r3, #10]
 8019d2a:	687a      	ldr	r2, [r7, #4]
 8019d2c:	9202      	str	r2, [sp, #8]
 8019d2e:	2206      	movs	r2, #6
 8019d30:	9201      	str	r2, [sp, #4]
 8019d32:	9300      	str	r3, [sp, #0]
 8019d34:	462b      	mov	r3, r5
 8019d36:	4622      	mov	r2, r4
 8019d38:	f002 fa32 	bl	801c1a0 <ip4_output_if>
 8019d3c:	4603      	mov	r3, r0
 8019d3e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8019d40:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8019d44:	4618      	mov	r0, r3
 8019d46:	3720      	adds	r7, #32
 8019d48:	46bd      	mov	sp, r7
 8019d4a:	bdb0      	pop	{r4, r5, r7, pc}
 8019d4c:	08022a40 	.word	0x08022a40
 8019d50:	08023004 	.word	0x08023004
 8019d54:	08022a94 	.word	0x08022a94
 8019d58:	08023024 	.word	0x08023024
 8019d5c:	08023044 	.word	0x08023044
 8019d60:	2000cac0 	.word	0x2000cac0
 8019d64:	08023068 	.word	0x08023068

08019d68 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8019d68:	b5b0      	push	{r4, r5, r7, lr}
 8019d6a:	b084      	sub	sp, #16
 8019d6c:	af00      	add	r7, sp, #0
 8019d6e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8019d70:	687b      	ldr	r3, [r7, #4]
 8019d72:	2b00      	cmp	r3, #0
 8019d74:	d106      	bne.n	8019d84 <tcp_rexmit_rto_prepare+0x1c>
 8019d76:	4b31      	ldr	r3, [pc, #196]	@ (8019e3c <tcp_rexmit_rto_prepare+0xd4>)
 8019d78:	f240 6263 	movw	r2, #1635	@ 0x663
 8019d7c:	4930      	ldr	r1, [pc, #192]	@ (8019e40 <tcp_rexmit_rto_prepare+0xd8>)
 8019d7e:	4831      	ldr	r0, [pc, #196]	@ (8019e44 <tcp_rexmit_rto_prepare+0xdc>)
 8019d80:	f004 fa84 	bl	801e28c <iprintf>

  if (pcb->unacked == NULL) {
 8019d84:	687b      	ldr	r3, [r7, #4]
 8019d86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019d88:	2b00      	cmp	r3, #0
 8019d8a:	d102      	bne.n	8019d92 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8019d8c:	f06f 0305 	mvn.w	r3, #5
 8019d90:	e050      	b.n	8019e34 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8019d92:	687b      	ldr	r3, [r7, #4]
 8019d94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019d96:	60fb      	str	r3, [r7, #12]
 8019d98:	e00b      	b.n	8019db2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8019d9a:	68f8      	ldr	r0, [r7, #12]
 8019d9c:	f7ff fee4 	bl	8019b68 <tcp_output_segment_busy>
 8019da0:	4603      	mov	r3, r0
 8019da2:	2b00      	cmp	r3, #0
 8019da4:	d002      	beq.n	8019dac <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8019da6:	f06f 0305 	mvn.w	r3, #5
 8019daa:	e043      	b.n	8019e34 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8019dac:	68fb      	ldr	r3, [r7, #12]
 8019dae:	681b      	ldr	r3, [r3, #0]
 8019db0:	60fb      	str	r3, [r7, #12]
 8019db2:	68fb      	ldr	r3, [r7, #12]
 8019db4:	681b      	ldr	r3, [r3, #0]
 8019db6:	2b00      	cmp	r3, #0
 8019db8:	d1ef      	bne.n	8019d9a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8019dba:	68f8      	ldr	r0, [r7, #12]
 8019dbc:	f7ff fed4 	bl	8019b68 <tcp_output_segment_busy>
 8019dc0:	4603      	mov	r3, r0
 8019dc2:	2b00      	cmp	r3, #0
 8019dc4:	d002      	beq.n	8019dcc <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8019dc6:	f06f 0305 	mvn.w	r3, #5
 8019dca:	e033      	b.n	8019e34 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8019dcc:	687b      	ldr	r3, [r7, #4]
 8019dce:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8019dd0:	68fb      	ldr	r3, [r7, #12]
 8019dd2:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8019dd4:	687b      	ldr	r3, [r7, #4]
 8019dd6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8019dd8:	687b      	ldr	r3, [r7, #4]
 8019dda:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8019ddc:	687b      	ldr	r3, [r7, #4]
 8019dde:	2200      	movs	r2, #0
 8019de0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8019de2:	687b      	ldr	r3, [r7, #4]
 8019de4:	8b5b      	ldrh	r3, [r3, #26]
 8019de6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8019dea:	b29a      	uxth	r2, r3
 8019dec:	687b      	ldr	r3, [r7, #4]
 8019dee:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8019df0:	68fb      	ldr	r3, [r7, #12]
 8019df2:	68db      	ldr	r3, [r3, #12]
 8019df4:	685b      	ldr	r3, [r3, #4]
 8019df6:	4618      	mov	r0, r3
 8019df8:	f7f8 fde6 	bl	80129c8 <lwip_htonl>
 8019dfc:	4604      	mov	r4, r0
 8019dfe:	68fb      	ldr	r3, [r7, #12]
 8019e00:	891b      	ldrh	r3, [r3, #8]
 8019e02:	461d      	mov	r5, r3
 8019e04:	68fb      	ldr	r3, [r7, #12]
 8019e06:	68db      	ldr	r3, [r3, #12]
 8019e08:	899b      	ldrh	r3, [r3, #12]
 8019e0a:	b29b      	uxth	r3, r3
 8019e0c:	4618      	mov	r0, r3
 8019e0e:	f7f8 fdc5 	bl	801299c <lwip_htons>
 8019e12:	4603      	mov	r3, r0
 8019e14:	b2db      	uxtb	r3, r3
 8019e16:	f003 0303 	and.w	r3, r3, #3
 8019e1a:	2b00      	cmp	r3, #0
 8019e1c:	d001      	beq.n	8019e22 <tcp_rexmit_rto_prepare+0xba>
 8019e1e:	2301      	movs	r3, #1
 8019e20:	e000      	b.n	8019e24 <tcp_rexmit_rto_prepare+0xbc>
 8019e22:	2300      	movs	r3, #0
 8019e24:	442b      	add	r3, r5
 8019e26:	18e2      	adds	r2, r4, r3
 8019e28:	687b      	ldr	r3, [r7, #4]
 8019e2a:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8019e2c:	687b      	ldr	r3, [r7, #4]
 8019e2e:	2200      	movs	r2, #0
 8019e30:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8019e32:	2300      	movs	r3, #0
}
 8019e34:	4618      	mov	r0, r3
 8019e36:	3710      	adds	r7, #16
 8019e38:	46bd      	mov	sp, r7
 8019e3a:	bdb0      	pop	{r4, r5, r7, pc}
 8019e3c:	08022a40 	.word	0x08022a40
 8019e40:	0802307c 	.word	0x0802307c
 8019e44:	08022a94 	.word	0x08022a94

08019e48 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8019e48:	b580      	push	{r7, lr}
 8019e4a:	b082      	sub	sp, #8
 8019e4c:	af00      	add	r7, sp, #0
 8019e4e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8019e50:	687b      	ldr	r3, [r7, #4]
 8019e52:	2b00      	cmp	r3, #0
 8019e54:	d106      	bne.n	8019e64 <tcp_rexmit_rto_commit+0x1c>
 8019e56:	4b0d      	ldr	r3, [pc, #52]	@ (8019e8c <tcp_rexmit_rto_commit+0x44>)
 8019e58:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8019e5c:	490c      	ldr	r1, [pc, #48]	@ (8019e90 <tcp_rexmit_rto_commit+0x48>)
 8019e5e:	480d      	ldr	r0, [pc, #52]	@ (8019e94 <tcp_rexmit_rto_commit+0x4c>)
 8019e60:	f004 fa14 	bl	801e28c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8019e64:	687b      	ldr	r3, [r7, #4]
 8019e66:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8019e6a:	2bff      	cmp	r3, #255	@ 0xff
 8019e6c:	d007      	beq.n	8019e7e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8019e6e:	687b      	ldr	r3, [r7, #4]
 8019e70:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8019e74:	3301      	adds	r3, #1
 8019e76:	b2da      	uxtb	r2, r3
 8019e78:	687b      	ldr	r3, [r7, #4]
 8019e7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8019e7e:	6878      	ldr	r0, [r7, #4]
 8019e80:	f7ff fc7e 	bl	8019780 <tcp_output>
}
 8019e84:	bf00      	nop
 8019e86:	3708      	adds	r7, #8
 8019e88:	46bd      	mov	sp, r7
 8019e8a:	bd80      	pop	{r7, pc}
 8019e8c:	08022a40 	.word	0x08022a40
 8019e90:	080230a0 	.word	0x080230a0
 8019e94:	08022a94 	.word	0x08022a94

08019e98 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8019e98:	b580      	push	{r7, lr}
 8019e9a:	b082      	sub	sp, #8
 8019e9c:	af00      	add	r7, sp, #0
 8019e9e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8019ea0:	687b      	ldr	r3, [r7, #4]
 8019ea2:	2b00      	cmp	r3, #0
 8019ea4:	d106      	bne.n	8019eb4 <tcp_rexmit_rto+0x1c>
 8019ea6:	4b0a      	ldr	r3, [pc, #40]	@ (8019ed0 <tcp_rexmit_rto+0x38>)
 8019ea8:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8019eac:	4909      	ldr	r1, [pc, #36]	@ (8019ed4 <tcp_rexmit_rto+0x3c>)
 8019eae:	480a      	ldr	r0, [pc, #40]	@ (8019ed8 <tcp_rexmit_rto+0x40>)
 8019eb0:	f004 f9ec 	bl	801e28c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8019eb4:	6878      	ldr	r0, [r7, #4]
 8019eb6:	f7ff ff57 	bl	8019d68 <tcp_rexmit_rto_prepare>
 8019eba:	4603      	mov	r3, r0
 8019ebc:	2b00      	cmp	r3, #0
 8019ebe:	d102      	bne.n	8019ec6 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8019ec0:	6878      	ldr	r0, [r7, #4]
 8019ec2:	f7ff ffc1 	bl	8019e48 <tcp_rexmit_rto_commit>
  }
}
 8019ec6:	bf00      	nop
 8019ec8:	3708      	adds	r7, #8
 8019eca:	46bd      	mov	sp, r7
 8019ecc:	bd80      	pop	{r7, pc}
 8019ece:	bf00      	nop
 8019ed0:	08022a40 	.word	0x08022a40
 8019ed4:	080230c4 	.word	0x080230c4
 8019ed8:	08022a94 	.word	0x08022a94

08019edc <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8019edc:	b590      	push	{r4, r7, lr}
 8019ede:	b085      	sub	sp, #20
 8019ee0:	af00      	add	r7, sp, #0
 8019ee2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8019ee4:	687b      	ldr	r3, [r7, #4]
 8019ee6:	2b00      	cmp	r3, #0
 8019ee8:	d106      	bne.n	8019ef8 <tcp_rexmit+0x1c>
 8019eea:	4b2f      	ldr	r3, [pc, #188]	@ (8019fa8 <tcp_rexmit+0xcc>)
 8019eec:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8019ef0:	492e      	ldr	r1, [pc, #184]	@ (8019fac <tcp_rexmit+0xd0>)
 8019ef2:	482f      	ldr	r0, [pc, #188]	@ (8019fb0 <tcp_rexmit+0xd4>)
 8019ef4:	f004 f9ca 	bl	801e28c <iprintf>

  if (pcb->unacked == NULL) {
 8019ef8:	687b      	ldr	r3, [r7, #4]
 8019efa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019efc:	2b00      	cmp	r3, #0
 8019efe:	d102      	bne.n	8019f06 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8019f00:	f06f 0305 	mvn.w	r3, #5
 8019f04:	e04c      	b.n	8019fa0 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8019f06:	687b      	ldr	r3, [r7, #4]
 8019f08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019f0a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8019f0c:	68b8      	ldr	r0, [r7, #8]
 8019f0e:	f7ff fe2b 	bl	8019b68 <tcp_output_segment_busy>
 8019f12:	4603      	mov	r3, r0
 8019f14:	2b00      	cmp	r3, #0
 8019f16:	d002      	beq.n	8019f1e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8019f18:	f06f 0305 	mvn.w	r3, #5
 8019f1c:	e040      	b.n	8019fa0 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8019f1e:	68bb      	ldr	r3, [r7, #8]
 8019f20:	681a      	ldr	r2, [r3, #0]
 8019f22:	687b      	ldr	r3, [r7, #4]
 8019f24:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8019f26:	687b      	ldr	r3, [r7, #4]
 8019f28:	336c      	adds	r3, #108	@ 0x6c
 8019f2a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8019f2c:	e002      	b.n	8019f34 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8019f2e:	68fb      	ldr	r3, [r7, #12]
 8019f30:	681b      	ldr	r3, [r3, #0]
 8019f32:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8019f34:	68fb      	ldr	r3, [r7, #12]
 8019f36:	681b      	ldr	r3, [r3, #0]
 8019f38:	2b00      	cmp	r3, #0
 8019f3a:	d011      	beq.n	8019f60 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8019f3c:	68fb      	ldr	r3, [r7, #12]
 8019f3e:	681b      	ldr	r3, [r3, #0]
 8019f40:	68db      	ldr	r3, [r3, #12]
 8019f42:	685b      	ldr	r3, [r3, #4]
 8019f44:	4618      	mov	r0, r3
 8019f46:	f7f8 fd3f 	bl	80129c8 <lwip_htonl>
 8019f4a:	4604      	mov	r4, r0
 8019f4c:	68bb      	ldr	r3, [r7, #8]
 8019f4e:	68db      	ldr	r3, [r3, #12]
 8019f50:	685b      	ldr	r3, [r3, #4]
 8019f52:	4618      	mov	r0, r3
 8019f54:	f7f8 fd38 	bl	80129c8 <lwip_htonl>
 8019f58:	4603      	mov	r3, r0
 8019f5a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8019f5c:	2b00      	cmp	r3, #0
 8019f5e:	dbe6      	blt.n	8019f2e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8019f60:	68fb      	ldr	r3, [r7, #12]
 8019f62:	681a      	ldr	r2, [r3, #0]
 8019f64:	68bb      	ldr	r3, [r7, #8]
 8019f66:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8019f68:	68fb      	ldr	r3, [r7, #12]
 8019f6a:	68ba      	ldr	r2, [r7, #8]
 8019f6c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8019f6e:	68bb      	ldr	r3, [r7, #8]
 8019f70:	681b      	ldr	r3, [r3, #0]
 8019f72:	2b00      	cmp	r3, #0
 8019f74:	d103      	bne.n	8019f7e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8019f76:	687b      	ldr	r3, [r7, #4]
 8019f78:	2200      	movs	r2, #0
 8019f7a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8019f7e:	687b      	ldr	r3, [r7, #4]
 8019f80:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8019f84:	2bff      	cmp	r3, #255	@ 0xff
 8019f86:	d007      	beq.n	8019f98 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8019f88:	687b      	ldr	r3, [r7, #4]
 8019f8a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8019f8e:	3301      	adds	r3, #1
 8019f90:	b2da      	uxtb	r2, r3
 8019f92:	687b      	ldr	r3, [r7, #4]
 8019f94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8019f98:	687b      	ldr	r3, [r7, #4]
 8019f9a:	2200      	movs	r2, #0
 8019f9c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8019f9e:	2300      	movs	r3, #0
}
 8019fa0:	4618      	mov	r0, r3
 8019fa2:	3714      	adds	r7, #20
 8019fa4:	46bd      	mov	sp, r7
 8019fa6:	bd90      	pop	{r4, r7, pc}
 8019fa8:	08022a40 	.word	0x08022a40
 8019fac:	080230e0 	.word	0x080230e0
 8019fb0:	08022a94 	.word	0x08022a94

08019fb4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8019fb4:	b580      	push	{r7, lr}
 8019fb6:	b082      	sub	sp, #8
 8019fb8:	af00      	add	r7, sp, #0
 8019fba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8019fbc:	687b      	ldr	r3, [r7, #4]
 8019fbe:	2b00      	cmp	r3, #0
 8019fc0:	d106      	bne.n	8019fd0 <tcp_rexmit_fast+0x1c>
 8019fc2:	4b2a      	ldr	r3, [pc, #168]	@ (801a06c <tcp_rexmit_fast+0xb8>)
 8019fc4:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8019fc8:	4929      	ldr	r1, [pc, #164]	@ (801a070 <tcp_rexmit_fast+0xbc>)
 8019fca:	482a      	ldr	r0, [pc, #168]	@ (801a074 <tcp_rexmit_fast+0xc0>)
 8019fcc:	f004 f95e 	bl	801e28c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8019fd0:	687b      	ldr	r3, [r7, #4]
 8019fd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019fd4:	2b00      	cmp	r3, #0
 8019fd6:	d044      	beq.n	801a062 <tcp_rexmit_fast+0xae>
 8019fd8:	687b      	ldr	r3, [r7, #4]
 8019fda:	8b5b      	ldrh	r3, [r3, #26]
 8019fdc:	f003 0304 	and.w	r3, r3, #4
 8019fe0:	2b00      	cmp	r3, #0
 8019fe2:	d13e      	bne.n	801a062 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8019fe4:	6878      	ldr	r0, [r7, #4]
 8019fe6:	f7ff ff79 	bl	8019edc <tcp_rexmit>
 8019fea:	4603      	mov	r3, r0
 8019fec:	2b00      	cmp	r3, #0
 8019fee:	d138      	bne.n	801a062 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8019ff0:	687b      	ldr	r3, [r7, #4]
 8019ff2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8019ff6:	687b      	ldr	r3, [r7, #4]
 8019ff8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8019ffc:	4293      	cmp	r3, r2
 8019ffe:	bf28      	it	cs
 801a000:	4613      	movcs	r3, r2
 801a002:	b29b      	uxth	r3, r3
 801a004:	0fda      	lsrs	r2, r3, #31
 801a006:	4413      	add	r3, r2
 801a008:	105b      	asrs	r3, r3, #1
 801a00a:	b29a      	uxth	r2, r3
 801a00c:	687b      	ldr	r3, [r7, #4]
 801a00e:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801a012:	687b      	ldr	r3, [r7, #4]
 801a014:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801a018:	461a      	mov	r2, r3
 801a01a:	687b      	ldr	r3, [r7, #4]
 801a01c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801a01e:	005b      	lsls	r3, r3, #1
 801a020:	429a      	cmp	r2, r3
 801a022:	d206      	bcs.n	801a032 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801a024:	687b      	ldr	r3, [r7, #4]
 801a026:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801a028:	005b      	lsls	r3, r3, #1
 801a02a:	b29a      	uxth	r2, r3
 801a02c:	687b      	ldr	r3, [r7, #4]
 801a02e:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801a032:	687b      	ldr	r3, [r7, #4]
 801a034:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801a038:	687b      	ldr	r3, [r7, #4]
 801a03a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801a03c:	4619      	mov	r1, r3
 801a03e:	0049      	lsls	r1, r1, #1
 801a040:	440b      	add	r3, r1
 801a042:	b29b      	uxth	r3, r3
 801a044:	4413      	add	r3, r2
 801a046:	b29a      	uxth	r2, r3
 801a048:	687b      	ldr	r3, [r7, #4]
 801a04a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 801a04e:	687b      	ldr	r3, [r7, #4]
 801a050:	8b5b      	ldrh	r3, [r3, #26]
 801a052:	f043 0304 	orr.w	r3, r3, #4
 801a056:	b29a      	uxth	r2, r3
 801a058:	687b      	ldr	r3, [r7, #4]
 801a05a:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801a05c:	687b      	ldr	r3, [r7, #4]
 801a05e:	2200      	movs	r2, #0
 801a060:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 801a062:	bf00      	nop
 801a064:	3708      	adds	r7, #8
 801a066:	46bd      	mov	sp, r7
 801a068:	bd80      	pop	{r7, pc}
 801a06a:	bf00      	nop
 801a06c:	08022a40 	.word	0x08022a40
 801a070:	080230f8 	.word	0x080230f8
 801a074:	08022a94 	.word	0x08022a94

0801a078 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801a078:	b580      	push	{r7, lr}
 801a07a:	b086      	sub	sp, #24
 801a07c:	af00      	add	r7, sp, #0
 801a07e:	60f8      	str	r0, [r7, #12]
 801a080:	607b      	str	r3, [r7, #4]
 801a082:	460b      	mov	r3, r1
 801a084:	817b      	strh	r3, [r7, #10]
 801a086:	4613      	mov	r3, r2
 801a088:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801a08a:	897a      	ldrh	r2, [r7, #10]
 801a08c:	893b      	ldrh	r3, [r7, #8]
 801a08e:	4413      	add	r3, r2
 801a090:	b29b      	uxth	r3, r3
 801a092:	3314      	adds	r3, #20
 801a094:	b29b      	uxth	r3, r3
 801a096:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801a09a:	4619      	mov	r1, r3
 801a09c:	2022      	movs	r0, #34	@ 0x22
 801a09e:	f7f9 fd59 	bl	8013b54 <pbuf_alloc>
 801a0a2:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801a0a4:	697b      	ldr	r3, [r7, #20]
 801a0a6:	2b00      	cmp	r3, #0
 801a0a8:	d04d      	beq.n	801a146 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801a0aa:	897b      	ldrh	r3, [r7, #10]
 801a0ac:	3313      	adds	r3, #19
 801a0ae:	697a      	ldr	r2, [r7, #20]
 801a0b0:	8952      	ldrh	r2, [r2, #10]
 801a0b2:	4293      	cmp	r3, r2
 801a0b4:	db06      	blt.n	801a0c4 <tcp_output_alloc_header_common+0x4c>
 801a0b6:	4b26      	ldr	r3, [pc, #152]	@ (801a150 <tcp_output_alloc_header_common+0xd8>)
 801a0b8:	f240 7223 	movw	r2, #1827	@ 0x723
 801a0bc:	4925      	ldr	r1, [pc, #148]	@ (801a154 <tcp_output_alloc_header_common+0xdc>)
 801a0be:	4826      	ldr	r0, [pc, #152]	@ (801a158 <tcp_output_alloc_header_common+0xe0>)
 801a0c0:	f004 f8e4 	bl	801e28c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801a0c4:	697b      	ldr	r3, [r7, #20]
 801a0c6:	685b      	ldr	r3, [r3, #4]
 801a0c8:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801a0ca:	8c3b      	ldrh	r3, [r7, #32]
 801a0cc:	4618      	mov	r0, r3
 801a0ce:	f7f8 fc65 	bl	801299c <lwip_htons>
 801a0d2:	4603      	mov	r3, r0
 801a0d4:	461a      	mov	r2, r3
 801a0d6:	693b      	ldr	r3, [r7, #16]
 801a0d8:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801a0da:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801a0dc:	4618      	mov	r0, r3
 801a0de:	f7f8 fc5d 	bl	801299c <lwip_htons>
 801a0e2:	4603      	mov	r3, r0
 801a0e4:	461a      	mov	r2, r3
 801a0e6:	693b      	ldr	r3, [r7, #16]
 801a0e8:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801a0ea:	693b      	ldr	r3, [r7, #16]
 801a0ec:	687a      	ldr	r2, [r7, #4]
 801a0ee:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801a0f0:	68f8      	ldr	r0, [r7, #12]
 801a0f2:	f7f8 fc69 	bl	80129c8 <lwip_htonl>
 801a0f6:	4602      	mov	r2, r0
 801a0f8:	693b      	ldr	r3, [r7, #16]
 801a0fa:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801a0fc:	897b      	ldrh	r3, [r7, #10]
 801a0fe:	089b      	lsrs	r3, r3, #2
 801a100:	b29b      	uxth	r3, r3
 801a102:	3305      	adds	r3, #5
 801a104:	b29b      	uxth	r3, r3
 801a106:	031b      	lsls	r3, r3, #12
 801a108:	b29a      	uxth	r2, r3
 801a10a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801a10e:	b29b      	uxth	r3, r3
 801a110:	4313      	orrs	r3, r2
 801a112:	b29b      	uxth	r3, r3
 801a114:	4618      	mov	r0, r3
 801a116:	f7f8 fc41 	bl	801299c <lwip_htons>
 801a11a:	4603      	mov	r3, r0
 801a11c:	461a      	mov	r2, r3
 801a11e:	693b      	ldr	r3, [r7, #16]
 801a120:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801a122:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801a124:	4618      	mov	r0, r3
 801a126:	f7f8 fc39 	bl	801299c <lwip_htons>
 801a12a:	4603      	mov	r3, r0
 801a12c:	461a      	mov	r2, r3
 801a12e:	693b      	ldr	r3, [r7, #16]
 801a130:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801a132:	693b      	ldr	r3, [r7, #16]
 801a134:	2200      	movs	r2, #0
 801a136:	741a      	strb	r2, [r3, #16]
 801a138:	2200      	movs	r2, #0
 801a13a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801a13c:	693b      	ldr	r3, [r7, #16]
 801a13e:	2200      	movs	r2, #0
 801a140:	749a      	strb	r2, [r3, #18]
 801a142:	2200      	movs	r2, #0
 801a144:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801a146:	697b      	ldr	r3, [r7, #20]
}
 801a148:	4618      	mov	r0, r3
 801a14a:	3718      	adds	r7, #24
 801a14c:	46bd      	mov	sp, r7
 801a14e:	bd80      	pop	{r7, pc}
 801a150:	08022a40 	.word	0x08022a40
 801a154:	08023118 	.word	0x08023118
 801a158:	08022a94 	.word	0x08022a94

0801a15c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801a15c:	b5b0      	push	{r4, r5, r7, lr}
 801a15e:	b08a      	sub	sp, #40	@ 0x28
 801a160:	af04      	add	r7, sp, #16
 801a162:	60f8      	str	r0, [r7, #12]
 801a164:	607b      	str	r3, [r7, #4]
 801a166:	460b      	mov	r3, r1
 801a168:	817b      	strh	r3, [r7, #10]
 801a16a:	4613      	mov	r3, r2
 801a16c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801a16e:	68fb      	ldr	r3, [r7, #12]
 801a170:	2b00      	cmp	r3, #0
 801a172:	d106      	bne.n	801a182 <tcp_output_alloc_header+0x26>
 801a174:	4b15      	ldr	r3, [pc, #84]	@ (801a1cc <tcp_output_alloc_header+0x70>)
 801a176:	f240 7242 	movw	r2, #1858	@ 0x742
 801a17a:	4915      	ldr	r1, [pc, #84]	@ (801a1d0 <tcp_output_alloc_header+0x74>)
 801a17c:	4815      	ldr	r0, [pc, #84]	@ (801a1d4 <tcp_output_alloc_header+0x78>)
 801a17e:	f004 f885 	bl	801e28c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801a182:	68fb      	ldr	r3, [r7, #12]
 801a184:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 801a186:	68fb      	ldr	r3, [r7, #12]
 801a188:	8adb      	ldrh	r3, [r3, #22]
 801a18a:	68fa      	ldr	r2, [r7, #12]
 801a18c:	8b12      	ldrh	r2, [r2, #24]
 801a18e:	68f9      	ldr	r1, [r7, #12]
 801a190:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 801a192:	893d      	ldrh	r5, [r7, #8]
 801a194:	897c      	ldrh	r4, [r7, #10]
 801a196:	9103      	str	r1, [sp, #12]
 801a198:	2110      	movs	r1, #16
 801a19a:	9102      	str	r1, [sp, #8]
 801a19c:	9201      	str	r2, [sp, #4]
 801a19e:	9300      	str	r3, [sp, #0]
 801a1a0:	687b      	ldr	r3, [r7, #4]
 801a1a2:	462a      	mov	r2, r5
 801a1a4:	4621      	mov	r1, r4
 801a1a6:	f7ff ff67 	bl	801a078 <tcp_output_alloc_header_common>
 801a1aa:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801a1ac:	697b      	ldr	r3, [r7, #20]
 801a1ae:	2b00      	cmp	r3, #0
 801a1b0:	d006      	beq.n	801a1c0 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801a1b2:	68fb      	ldr	r3, [r7, #12]
 801a1b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a1b6:	68fa      	ldr	r2, [r7, #12]
 801a1b8:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801a1ba:	441a      	add	r2, r3
 801a1bc:	68fb      	ldr	r3, [r7, #12]
 801a1be:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 801a1c0:	697b      	ldr	r3, [r7, #20]
}
 801a1c2:	4618      	mov	r0, r3
 801a1c4:	3718      	adds	r7, #24
 801a1c6:	46bd      	mov	sp, r7
 801a1c8:	bdb0      	pop	{r4, r5, r7, pc}
 801a1ca:	bf00      	nop
 801a1cc:	08022a40 	.word	0x08022a40
 801a1d0:	08023148 	.word	0x08023148
 801a1d4:	08022a94 	.word	0x08022a94

0801a1d8 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801a1d8:	b580      	push	{r7, lr}
 801a1da:	b088      	sub	sp, #32
 801a1dc:	af00      	add	r7, sp, #0
 801a1de:	60f8      	str	r0, [r7, #12]
 801a1e0:	60b9      	str	r1, [r7, #8]
 801a1e2:	4611      	mov	r1, r2
 801a1e4:	461a      	mov	r2, r3
 801a1e6:	460b      	mov	r3, r1
 801a1e8:	71fb      	strb	r3, [r7, #7]
 801a1ea:	4613      	mov	r3, r2
 801a1ec:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801a1ee:	2300      	movs	r3, #0
 801a1f0:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801a1f2:	68bb      	ldr	r3, [r7, #8]
 801a1f4:	2b00      	cmp	r3, #0
 801a1f6:	d106      	bne.n	801a206 <tcp_output_fill_options+0x2e>
 801a1f8:	4b12      	ldr	r3, [pc, #72]	@ (801a244 <tcp_output_fill_options+0x6c>)
 801a1fa:	f240 7256 	movw	r2, #1878	@ 0x756
 801a1fe:	4912      	ldr	r1, [pc, #72]	@ (801a248 <tcp_output_fill_options+0x70>)
 801a200:	4812      	ldr	r0, [pc, #72]	@ (801a24c <tcp_output_fill_options+0x74>)
 801a202:	f004 f843 	bl	801e28c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801a206:	68bb      	ldr	r3, [r7, #8]
 801a208:	685b      	ldr	r3, [r3, #4]
 801a20a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801a20c:	69bb      	ldr	r3, [r7, #24]
 801a20e:	3314      	adds	r3, #20
 801a210:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801a212:	8bfb      	ldrh	r3, [r7, #30]
 801a214:	009b      	lsls	r3, r3, #2
 801a216:	461a      	mov	r2, r3
 801a218:	79fb      	ldrb	r3, [r7, #7]
 801a21a:	009b      	lsls	r3, r3, #2
 801a21c:	f003 0304 	and.w	r3, r3, #4
 801a220:	4413      	add	r3, r2
 801a222:	3314      	adds	r3, #20
 801a224:	69ba      	ldr	r2, [r7, #24]
 801a226:	4413      	add	r3, r2
 801a228:	697a      	ldr	r2, [r7, #20]
 801a22a:	429a      	cmp	r2, r3
 801a22c:	d006      	beq.n	801a23c <tcp_output_fill_options+0x64>
 801a22e:	4b05      	ldr	r3, [pc, #20]	@ (801a244 <tcp_output_fill_options+0x6c>)
 801a230:	f240 7275 	movw	r2, #1909	@ 0x775
 801a234:	4906      	ldr	r1, [pc, #24]	@ (801a250 <tcp_output_fill_options+0x78>)
 801a236:	4805      	ldr	r0, [pc, #20]	@ (801a24c <tcp_output_fill_options+0x74>)
 801a238:	f004 f828 	bl	801e28c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801a23c:	bf00      	nop
 801a23e:	3720      	adds	r7, #32
 801a240:	46bd      	mov	sp, r7
 801a242:	bd80      	pop	{r7, pc}
 801a244:	08022a40 	.word	0x08022a40
 801a248:	08023170 	.word	0x08023170
 801a24c:	08022a94 	.word	0x08022a94
 801a250:	08023068 	.word	0x08023068

0801a254 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801a254:	b580      	push	{r7, lr}
 801a256:	b08a      	sub	sp, #40	@ 0x28
 801a258:	af04      	add	r7, sp, #16
 801a25a:	60f8      	str	r0, [r7, #12]
 801a25c:	60b9      	str	r1, [r7, #8]
 801a25e:	607a      	str	r2, [r7, #4]
 801a260:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801a262:	68bb      	ldr	r3, [r7, #8]
 801a264:	2b00      	cmp	r3, #0
 801a266:	d106      	bne.n	801a276 <tcp_output_control_segment+0x22>
 801a268:	4b1c      	ldr	r3, [pc, #112]	@ (801a2dc <tcp_output_control_segment+0x88>)
 801a26a:	f240 7287 	movw	r2, #1927	@ 0x787
 801a26e:	491c      	ldr	r1, [pc, #112]	@ (801a2e0 <tcp_output_control_segment+0x8c>)
 801a270:	481c      	ldr	r0, [pc, #112]	@ (801a2e4 <tcp_output_control_segment+0x90>)
 801a272:	f004 f80b 	bl	801e28c <iprintf>

  netif = tcp_route(pcb, src, dst);
 801a276:	683a      	ldr	r2, [r7, #0]
 801a278:	6879      	ldr	r1, [r7, #4]
 801a27a:	68f8      	ldr	r0, [r7, #12]
 801a27c:	f7fe faea 	bl	8018854 <tcp_route>
 801a280:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801a282:	693b      	ldr	r3, [r7, #16]
 801a284:	2b00      	cmp	r3, #0
 801a286:	d102      	bne.n	801a28e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801a288:	23fc      	movs	r3, #252	@ 0xfc
 801a28a:	75fb      	strb	r3, [r7, #23]
 801a28c:	e01c      	b.n	801a2c8 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801a28e:	68fb      	ldr	r3, [r7, #12]
 801a290:	2b00      	cmp	r3, #0
 801a292:	d006      	beq.n	801a2a2 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801a294:	68fb      	ldr	r3, [r7, #12]
 801a296:	7adb      	ldrb	r3, [r3, #11]
 801a298:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801a29a:	68fb      	ldr	r3, [r7, #12]
 801a29c:	7a9b      	ldrb	r3, [r3, #10]
 801a29e:	757b      	strb	r3, [r7, #21]
 801a2a0:	e003      	b.n	801a2aa <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801a2a2:	23ff      	movs	r3, #255	@ 0xff
 801a2a4:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801a2a6:	2300      	movs	r3, #0
 801a2a8:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801a2aa:	7dba      	ldrb	r2, [r7, #22]
 801a2ac:	693b      	ldr	r3, [r7, #16]
 801a2ae:	9302      	str	r3, [sp, #8]
 801a2b0:	2306      	movs	r3, #6
 801a2b2:	9301      	str	r3, [sp, #4]
 801a2b4:	7d7b      	ldrb	r3, [r7, #21]
 801a2b6:	9300      	str	r3, [sp, #0]
 801a2b8:	4613      	mov	r3, r2
 801a2ba:	683a      	ldr	r2, [r7, #0]
 801a2bc:	6879      	ldr	r1, [r7, #4]
 801a2be:	68b8      	ldr	r0, [r7, #8]
 801a2c0:	f001 ff6e 	bl	801c1a0 <ip4_output_if>
 801a2c4:	4603      	mov	r3, r0
 801a2c6:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801a2c8:	68b8      	ldr	r0, [r7, #8]
 801a2ca:	f7f9 ff27 	bl	801411c <pbuf_free>
  return err;
 801a2ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801a2d2:	4618      	mov	r0, r3
 801a2d4:	3718      	adds	r7, #24
 801a2d6:	46bd      	mov	sp, r7
 801a2d8:	bd80      	pop	{r7, pc}
 801a2da:	bf00      	nop
 801a2dc:	08022a40 	.word	0x08022a40
 801a2e0:	08023198 	.word	0x08023198
 801a2e4:	08022a94 	.word	0x08022a94

0801a2e8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801a2e8:	b590      	push	{r4, r7, lr}
 801a2ea:	b08b      	sub	sp, #44	@ 0x2c
 801a2ec:	af04      	add	r7, sp, #16
 801a2ee:	60f8      	str	r0, [r7, #12]
 801a2f0:	60b9      	str	r1, [r7, #8]
 801a2f2:	607a      	str	r2, [r7, #4]
 801a2f4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801a2f6:	683b      	ldr	r3, [r7, #0]
 801a2f8:	2b00      	cmp	r3, #0
 801a2fa:	d106      	bne.n	801a30a <tcp_rst+0x22>
 801a2fc:	4b1f      	ldr	r3, [pc, #124]	@ (801a37c <tcp_rst+0x94>)
 801a2fe:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 801a302:	491f      	ldr	r1, [pc, #124]	@ (801a380 <tcp_rst+0x98>)
 801a304:	481f      	ldr	r0, [pc, #124]	@ (801a384 <tcp_rst+0x9c>)
 801a306:	f003 ffc1 	bl	801e28c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801a30a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a30c:	2b00      	cmp	r3, #0
 801a30e:	d106      	bne.n	801a31e <tcp_rst+0x36>
 801a310:	4b1a      	ldr	r3, [pc, #104]	@ (801a37c <tcp_rst+0x94>)
 801a312:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 801a316:	491c      	ldr	r1, [pc, #112]	@ (801a388 <tcp_rst+0xa0>)
 801a318:	481a      	ldr	r0, [pc, #104]	@ (801a384 <tcp_rst+0x9c>)
 801a31a:	f003 ffb7 	bl	801e28c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801a31e:	2300      	movs	r3, #0
 801a320:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801a322:	f246 0308 	movw	r3, #24584	@ 0x6008
 801a326:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801a328:	7dfb      	ldrb	r3, [r7, #23]
 801a32a:	b29c      	uxth	r4, r3
 801a32c:	68b8      	ldr	r0, [r7, #8]
 801a32e:	f7f8 fb4b 	bl	80129c8 <lwip_htonl>
 801a332:	4602      	mov	r2, r0
 801a334:	8abb      	ldrh	r3, [r7, #20]
 801a336:	9303      	str	r3, [sp, #12]
 801a338:	2314      	movs	r3, #20
 801a33a:	9302      	str	r3, [sp, #8]
 801a33c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801a33e:	9301      	str	r3, [sp, #4]
 801a340:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801a342:	9300      	str	r3, [sp, #0]
 801a344:	4613      	mov	r3, r2
 801a346:	2200      	movs	r2, #0
 801a348:	4621      	mov	r1, r4
 801a34a:	6878      	ldr	r0, [r7, #4]
 801a34c:	f7ff fe94 	bl	801a078 <tcp_output_alloc_header_common>
 801a350:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801a352:	693b      	ldr	r3, [r7, #16]
 801a354:	2b00      	cmp	r3, #0
 801a356:	d00c      	beq.n	801a372 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801a358:	7dfb      	ldrb	r3, [r7, #23]
 801a35a:	2200      	movs	r2, #0
 801a35c:	6939      	ldr	r1, [r7, #16]
 801a35e:	68f8      	ldr	r0, [r7, #12]
 801a360:	f7ff ff3a 	bl	801a1d8 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801a364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a366:	683a      	ldr	r2, [r7, #0]
 801a368:	6939      	ldr	r1, [r7, #16]
 801a36a:	68f8      	ldr	r0, [r7, #12]
 801a36c:	f7ff ff72 	bl	801a254 <tcp_output_control_segment>
 801a370:	e000      	b.n	801a374 <tcp_rst+0x8c>
    return;
 801a372:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801a374:	371c      	adds	r7, #28
 801a376:	46bd      	mov	sp, r7
 801a378:	bd90      	pop	{r4, r7, pc}
 801a37a:	bf00      	nop
 801a37c:	08022a40 	.word	0x08022a40
 801a380:	080231c4 	.word	0x080231c4
 801a384:	08022a94 	.word	0x08022a94
 801a388:	080231e0 	.word	0x080231e0

0801a38c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801a38c:	b590      	push	{r4, r7, lr}
 801a38e:	b087      	sub	sp, #28
 801a390:	af00      	add	r7, sp, #0
 801a392:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801a394:	2300      	movs	r3, #0
 801a396:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801a398:	2300      	movs	r3, #0
 801a39a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801a39c:	687b      	ldr	r3, [r7, #4]
 801a39e:	2b00      	cmp	r3, #0
 801a3a0:	d106      	bne.n	801a3b0 <tcp_send_empty_ack+0x24>
 801a3a2:	4b28      	ldr	r3, [pc, #160]	@ (801a444 <tcp_send_empty_ack+0xb8>)
 801a3a4:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 801a3a8:	4927      	ldr	r1, [pc, #156]	@ (801a448 <tcp_send_empty_ack+0xbc>)
 801a3aa:	4828      	ldr	r0, [pc, #160]	@ (801a44c <tcp_send_empty_ack+0xc0>)
 801a3ac:	f003 ff6e 	bl	801e28c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801a3b0:	7dfb      	ldrb	r3, [r7, #23]
 801a3b2:	009b      	lsls	r3, r3, #2
 801a3b4:	b2db      	uxtb	r3, r3
 801a3b6:	f003 0304 	and.w	r3, r3, #4
 801a3ba:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801a3bc:	7d7b      	ldrb	r3, [r7, #21]
 801a3be:	b29c      	uxth	r4, r3
 801a3c0:	687b      	ldr	r3, [r7, #4]
 801a3c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a3c4:	4618      	mov	r0, r3
 801a3c6:	f7f8 faff 	bl	80129c8 <lwip_htonl>
 801a3ca:	4603      	mov	r3, r0
 801a3cc:	2200      	movs	r2, #0
 801a3ce:	4621      	mov	r1, r4
 801a3d0:	6878      	ldr	r0, [r7, #4]
 801a3d2:	f7ff fec3 	bl	801a15c <tcp_output_alloc_header>
 801a3d6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801a3d8:	693b      	ldr	r3, [r7, #16]
 801a3da:	2b00      	cmp	r3, #0
 801a3dc:	d109      	bne.n	801a3f2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801a3de:	687b      	ldr	r3, [r7, #4]
 801a3e0:	8b5b      	ldrh	r3, [r3, #26]
 801a3e2:	f043 0303 	orr.w	r3, r3, #3
 801a3e6:	b29a      	uxth	r2, r3
 801a3e8:	687b      	ldr	r3, [r7, #4]
 801a3ea:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801a3ec:	f06f 0301 	mvn.w	r3, #1
 801a3f0:	e023      	b.n	801a43a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801a3f2:	7dbb      	ldrb	r3, [r7, #22]
 801a3f4:	7dfa      	ldrb	r2, [r7, #23]
 801a3f6:	6939      	ldr	r1, [r7, #16]
 801a3f8:	6878      	ldr	r0, [r7, #4]
 801a3fa:	f7ff feed 	bl	801a1d8 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801a3fe:	687a      	ldr	r2, [r7, #4]
 801a400:	687b      	ldr	r3, [r7, #4]
 801a402:	3304      	adds	r3, #4
 801a404:	6939      	ldr	r1, [r7, #16]
 801a406:	6878      	ldr	r0, [r7, #4]
 801a408:	f7ff ff24 	bl	801a254 <tcp_output_control_segment>
 801a40c:	4603      	mov	r3, r0
 801a40e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801a410:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a414:	2b00      	cmp	r3, #0
 801a416:	d007      	beq.n	801a428 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801a418:	687b      	ldr	r3, [r7, #4]
 801a41a:	8b5b      	ldrh	r3, [r3, #26]
 801a41c:	f043 0303 	orr.w	r3, r3, #3
 801a420:	b29a      	uxth	r2, r3
 801a422:	687b      	ldr	r3, [r7, #4]
 801a424:	835a      	strh	r2, [r3, #26]
 801a426:	e006      	b.n	801a436 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801a428:	687b      	ldr	r3, [r7, #4]
 801a42a:	8b5b      	ldrh	r3, [r3, #26]
 801a42c:	f023 0303 	bic.w	r3, r3, #3
 801a430:	b29a      	uxth	r2, r3
 801a432:	687b      	ldr	r3, [r7, #4]
 801a434:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801a436:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801a43a:	4618      	mov	r0, r3
 801a43c:	371c      	adds	r7, #28
 801a43e:	46bd      	mov	sp, r7
 801a440:	bd90      	pop	{r4, r7, pc}
 801a442:	bf00      	nop
 801a444:	08022a40 	.word	0x08022a40
 801a448:	080231fc 	.word	0x080231fc
 801a44c:	08022a94 	.word	0x08022a94

0801a450 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801a450:	b590      	push	{r4, r7, lr}
 801a452:	b087      	sub	sp, #28
 801a454:	af00      	add	r7, sp, #0
 801a456:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801a458:	2300      	movs	r3, #0
 801a45a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801a45c:	687b      	ldr	r3, [r7, #4]
 801a45e:	2b00      	cmp	r3, #0
 801a460:	d106      	bne.n	801a470 <tcp_keepalive+0x20>
 801a462:	4b18      	ldr	r3, [pc, #96]	@ (801a4c4 <tcp_keepalive+0x74>)
 801a464:	f640 0224 	movw	r2, #2084	@ 0x824
 801a468:	4917      	ldr	r1, [pc, #92]	@ (801a4c8 <tcp_keepalive+0x78>)
 801a46a:	4818      	ldr	r0, [pc, #96]	@ (801a4cc <tcp_keepalive+0x7c>)
 801a46c:	f003 ff0e 	bl	801e28c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801a470:	7dfb      	ldrb	r3, [r7, #23]
 801a472:	b29c      	uxth	r4, r3
 801a474:	687b      	ldr	r3, [r7, #4]
 801a476:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a478:	3b01      	subs	r3, #1
 801a47a:	4618      	mov	r0, r3
 801a47c:	f7f8 faa4 	bl	80129c8 <lwip_htonl>
 801a480:	4603      	mov	r3, r0
 801a482:	2200      	movs	r2, #0
 801a484:	4621      	mov	r1, r4
 801a486:	6878      	ldr	r0, [r7, #4]
 801a488:	f7ff fe68 	bl	801a15c <tcp_output_alloc_header>
 801a48c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801a48e:	693b      	ldr	r3, [r7, #16]
 801a490:	2b00      	cmp	r3, #0
 801a492:	d102      	bne.n	801a49a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801a494:	f04f 33ff 	mov.w	r3, #4294967295
 801a498:	e010      	b.n	801a4bc <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801a49a:	7dfb      	ldrb	r3, [r7, #23]
 801a49c:	2200      	movs	r2, #0
 801a49e:	6939      	ldr	r1, [r7, #16]
 801a4a0:	6878      	ldr	r0, [r7, #4]
 801a4a2:	f7ff fe99 	bl	801a1d8 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801a4a6:	687a      	ldr	r2, [r7, #4]
 801a4a8:	687b      	ldr	r3, [r7, #4]
 801a4aa:	3304      	adds	r3, #4
 801a4ac:	6939      	ldr	r1, [r7, #16]
 801a4ae:	6878      	ldr	r0, [r7, #4]
 801a4b0:	f7ff fed0 	bl	801a254 <tcp_output_control_segment>
 801a4b4:	4603      	mov	r3, r0
 801a4b6:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801a4b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801a4bc:	4618      	mov	r0, r3
 801a4be:	371c      	adds	r7, #28
 801a4c0:	46bd      	mov	sp, r7
 801a4c2:	bd90      	pop	{r4, r7, pc}
 801a4c4:	08022a40 	.word	0x08022a40
 801a4c8:	0802321c 	.word	0x0802321c
 801a4cc:	08022a94 	.word	0x08022a94

0801a4d0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801a4d0:	b590      	push	{r4, r7, lr}
 801a4d2:	b08b      	sub	sp, #44	@ 0x2c
 801a4d4:	af00      	add	r7, sp, #0
 801a4d6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801a4d8:	2300      	movs	r3, #0
 801a4da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801a4de:	687b      	ldr	r3, [r7, #4]
 801a4e0:	2b00      	cmp	r3, #0
 801a4e2:	d106      	bne.n	801a4f2 <tcp_zero_window_probe+0x22>
 801a4e4:	4b4c      	ldr	r3, [pc, #304]	@ (801a618 <tcp_zero_window_probe+0x148>)
 801a4e6:	f640 024f 	movw	r2, #2127	@ 0x84f
 801a4ea:	494c      	ldr	r1, [pc, #304]	@ (801a61c <tcp_zero_window_probe+0x14c>)
 801a4ec:	484c      	ldr	r0, [pc, #304]	@ (801a620 <tcp_zero_window_probe+0x150>)
 801a4ee:	f003 fecd 	bl	801e28c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801a4f2:	687b      	ldr	r3, [r7, #4]
 801a4f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a4f6:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801a4f8:	6a3b      	ldr	r3, [r7, #32]
 801a4fa:	2b00      	cmp	r3, #0
 801a4fc:	d101      	bne.n	801a502 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801a4fe:	2300      	movs	r3, #0
 801a500:	e086      	b.n	801a610 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801a502:	687b      	ldr	r3, [r7, #4]
 801a504:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801a508:	2bff      	cmp	r3, #255	@ 0xff
 801a50a:	d007      	beq.n	801a51c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801a50c:	687b      	ldr	r3, [r7, #4]
 801a50e:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801a512:	3301      	adds	r3, #1
 801a514:	b2da      	uxtb	r2, r3
 801a516:	687b      	ldr	r3, [r7, #4]
 801a518:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801a51c:	6a3b      	ldr	r3, [r7, #32]
 801a51e:	68db      	ldr	r3, [r3, #12]
 801a520:	899b      	ldrh	r3, [r3, #12]
 801a522:	b29b      	uxth	r3, r3
 801a524:	4618      	mov	r0, r3
 801a526:	f7f8 fa39 	bl	801299c <lwip_htons>
 801a52a:	4603      	mov	r3, r0
 801a52c:	b2db      	uxtb	r3, r3
 801a52e:	f003 0301 	and.w	r3, r3, #1
 801a532:	2b00      	cmp	r3, #0
 801a534:	d005      	beq.n	801a542 <tcp_zero_window_probe+0x72>
 801a536:	6a3b      	ldr	r3, [r7, #32]
 801a538:	891b      	ldrh	r3, [r3, #8]
 801a53a:	2b00      	cmp	r3, #0
 801a53c:	d101      	bne.n	801a542 <tcp_zero_window_probe+0x72>
 801a53e:	2301      	movs	r3, #1
 801a540:	e000      	b.n	801a544 <tcp_zero_window_probe+0x74>
 801a542:	2300      	movs	r3, #0
 801a544:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801a546:	7ffb      	ldrb	r3, [r7, #31]
 801a548:	2b00      	cmp	r3, #0
 801a54a:	bf0c      	ite	eq
 801a54c:	2301      	moveq	r3, #1
 801a54e:	2300      	movne	r3, #0
 801a550:	b2db      	uxtb	r3, r3
 801a552:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801a554:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a558:	b299      	uxth	r1, r3
 801a55a:	6a3b      	ldr	r3, [r7, #32]
 801a55c:	68db      	ldr	r3, [r3, #12]
 801a55e:	685b      	ldr	r3, [r3, #4]
 801a560:	8bba      	ldrh	r2, [r7, #28]
 801a562:	6878      	ldr	r0, [r7, #4]
 801a564:	f7ff fdfa 	bl	801a15c <tcp_output_alloc_header>
 801a568:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801a56a:	69bb      	ldr	r3, [r7, #24]
 801a56c:	2b00      	cmp	r3, #0
 801a56e:	d102      	bne.n	801a576 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801a570:	f04f 33ff 	mov.w	r3, #4294967295
 801a574:	e04c      	b.n	801a610 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801a576:	69bb      	ldr	r3, [r7, #24]
 801a578:	685b      	ldr	r3, [r3, #4]
 801a57a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801a57c:	7ffb      	ldrb	r3, [r7, #31]
 801a57e:	2b00      	cmp	r3, #0
 801a580:	d011      	beq.n	801a5a6 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801a582:	697b      	ldr	r3, [r7, #20]
 801a584:	899b      	ldrh	r3, [r3, #12]
 801a586:	b29b      	uxth	r3, r3
 801a588:	b21b      	sxth	r3, r3
 801a58a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801a58e:	b21c      	sxth	r4, r3
 801a590:	2011      	movs	r0, #17
 801a592:	f7f8 fa03 	bl	801299c <lwip_htons>
 801a596:	4603      	mov	r3, r0
 801a598:	b21b      	sxth	r3, r3
 801a59a:	4323      	orrs	r3, r4
 801a59c:	b21b      	sxth	r3, r3
 801a59e:	b29a      	uxth	r2, r3
 801a5a0:	697b      	ldr	r3, [r7, #20]
 801a5a2:	819a      	strh	r2, [r3, #12]
 801a5a4:	e010      	b.n	801a5c8 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801a5a6:	69bb      	ldr	r3, [r7, #24]
 801a5a8:	685b      	ldr	r3, [r3, #4]
 801a5aa:	3314      	adds	r3, #20
 801a5ac:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801a5ae:	6a3b      	ldr	r3, [r7, #32]
 801a5b0:	6858      	ldr	r0, [r3, #4]
 801a5b2:	6a3b      	ldr	r3, [r7, #32]
 801a5b4:	685b      	ldr	r3, [r3, #4]
 801a5b6:	891a      	ldrh	r2, [r3, #8]
 801a5b8:	6a3b      	ldr	r3, [r7, #32]
 801a5ba:	891b      	ldrh	r3, [r3, #8]
 801a5bc:	1ad3      	subs	r3, r2, r3
 801a5be:	b29b      	uxth	r3, r3
 801a5c0:	2201      	movs	r2, #1
 801a5c2:	6939      	ldr	r1, [r7, #16]
 801a5c4:	f7f9 ffa0 	bl	8014508 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801a5c8:	6a3b      	ldr	r3, [r7, #32]
 801a5ca:	68db      	ldr	r3, [r3, #12]
 801a5cc:	685b      	ldr	r3, [r3, #4]
 801a5ce:	4618      	mov	r0, r3
 801a5d0:	f7f8 f9fa 	bl	80129c8 <lwip_htonl>
 801a5d4:	4603      	mov	r3, r0
 801a5d6:	3301      	adds	r3, #1
 801a5d8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801a5da:	687b      	ldr	r3, [r7, #4]
 801a5dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801a5de:	68fb      	ldr	r3, [r7, #12]
 801a5e0:	1ad3      	subs	r3, r2, r3
 801a5e2:	2b00      	cmp	r3, #0
 801a5e4:	da02      	bge.n	801a5ec <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801a5e6:	687b      	ldr	r3, [r7, #4]
 801a5e8:	68fa      	ldr	r2, [r7, #12]
 801a5ea:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801a5ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a5f0:	2200      	movs	r2, #0
 801a5f2:	69b9      	ldr	r1, [r7, #24]
 801a5f4:	6878      	ldr	r0, [r7, #4]
 801a5f6:	f7ff fdef 	bl	801a1d8 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801a5fa:	687a      	ldr	r2, [r7, #4]
 801a5fc:	687b      	ldr	r3, [r7, #4]
 801a5fe:	3304      	adds	r3, #4
 801a600:	69b9      	ldr	r1, [r7, #24]
 801a602:	6878      	ldr	r0, [r7, #4]
 801a604:	f7ff fe26 	bl	801a254 <tcp_output_control_segment>
 801a608:	4603      	mov	r3, r0
 801a60a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801a60c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801a610:	4618      	mov	r0, r3
 801a612:	372c      	adds	r7, #44	@ 0x2c
 801a614:	46bd      	mov	sp, r7
 801a616:	bd90      	pop	{r4, r7, pc}
 801a618:	08022a40 	.word	0x08022a40
 801a61c:	08023238 	.word	0x08023238
 801a620:	08022a94 	.word	0x08022a94

0801a624 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801a624:	b580      	push	{r7, lr}
 801a626:	b082      	sub	sp, #8
 801a628:	af00      	add	r7, sp, #0
 801a62a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801a62c:	f7fa f85a 	bl	80146e4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801a630:	4b0a      	ldr	r3, [pc, #40]	@ (801a65c <tcpip_tcp_timer+0x38>)
 801a632:	681b      	ldr	r3, [r3, #0]
 801a634:	2b00      	cmp	r3, #0
 801a636:	d103      	bne.n	801a640 <tcpip_tcp_timer+0x1c>
 801a638:	4b09      	ldr	r3, [pc, #36]	@ (801a660 <tcpip_tcp_timer+0x3c>)
 801a63a:	681b      	ldr	r3, [r3, #0]
 801a63c:	2b00      	cmp	r3, #0
 801a63e:	d005      	beq.n	801a64c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801a640:	2200      	movs	r2, #0
 801a642:	4908      	ldr	r1, [pc, #32]	@ (801a664 <tcpip_tcp_timer+0x40>)
 801a644:	20fa      	movs	r0, #250	@ 0xfa
 801a646:	f000 f8f3 	bl	801a830 <sys_timeout>
 801a64a:	e003      	b.n	801a654 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801a64c:	4b06      	ldr	r3, [pc, #24]	@ (801a668 <tcpip_tcp_timer+0x44>)
 801a64e:	2200      	movs	r2, #0
 801a650:	601a      	str	r2, [r3, #0]
  }
}
 801a652:	bf00      	nop
 801a654:	bf00      	nop
 801a656:	3708      	adds	r7, #8
 801a658:	46bd      	mov	sp, r7
 801a65a:	bd80      	pop	{r7, pc}
 801a65c:	2000cacc 	.word	0x2000cacc
 801a660:	2000cad0 	.word	0x2000cad0
 801a664:	0801a625 	.word	0x0801a625
 801a668:	2000cb18 	.word	0x2000cb18

0801a66c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801a66c:	b580      	push	{r7, lr}
 801a66e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801a670:	4b0a      	ldr	r3, [pc, #40]	@ (801a69c <tcp_timer_needed+0x30>)
 801a672:	681b      	ldr	r3, [r3, #0]
 801a674:	2b00      	cmp	r3, #0
 801a676:	d10f      	bne.n	801a698 <tcp_timer_needed+0x2c>
 801a678:	4b09      	ldr	r3, [pc, #36]	@ (801a6a0 <tcp_timer_needed+0x34>)
 801a67a:	681b      	ldr	r3, [r3, #0]
 801a67c:	2b00      	cmp	r3, #0
 801a67e:	d103      	bne.n	801a688 <tcp_timer_needed+0x1c>
 801a680:	4b08      	ldr	r3, [pc, #32]	@ (801a6a4 <tcp_timer_needed+0x38>)
 801a682:	681b      	ldr	r3, [r3, #0]
 801a684:	2b00      	cmp	r3, #0
 801a686:	d007      	beq.n	801a698 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801a688:	4b04      	ldr	r3, [pc, #16]	@ (801a69c <tcp_timer_needed+0x30>)
 801a68a:	2201      	movs	r2, #1
 801a68c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801a68e:	2200      	movs	r2, #0
 801a690:	4905      	ldr	r1, [pc, #20]	@ (801a6a8 <tcp_timer_needed+0x3c>)
 801a692:	20fa      	movs	r0, #250	@ 0xfa
 801a694:	f000 f8cc 	bl	801a830 <sys_timeout>
  }
}
 801a698:	bf00      	nop
 801a69a:	bd80      	pop	{r7, pc}
 801a69c:	2000cb18 	.word	0x2000cb18
 801a6a0:	2000cacc 	.word	0x2000cacc
 801a6a4:	2000cad0 	.word	0x2000cad0
 801a6a8:	0801a625 	.word	0x0801a625

0801a6ac <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801a6ac:	b580      	push	{r7, lr}
 801a6ae:	b086      	sub	sp, #24
 801a6b0:	af00      	add	r7, sp, #0
 801a6b2:	60f8      	str	r0, [r7, #12]
 801a6b4:	60b9      	str	r1, [r7, #8]
 801a6b6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801a6b8:	200a      	movs	r0, #10
 801a6ba:	f7f8 fe47 	bl	801334c <memp_malloc>
 801a6be:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801a6c0:	693b      	ldr	r3, [r7, #16]
 801a6c2:	2b00      	cmp	r3, #0
 801a6c4:	d109      	bne.n	801a6da <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801a6c6:	693b      	ldr	r3, [r7, #16]
 801a6c8:	2b00      	cmp	r3, #0
 801a6ca:	d151      	bne.n	801a770 <sys_timeout_abs+0xc4>
 801a6cc:	4b2a      	ldr	r3, [pc, #168]	@ (801a778 <sys_timeout_abs+0xcc>)
 801a6ce:	22be      	movs	r2, #190	@ 0xbe
 801a6d0:	492a      	ldr	r1, [pc, #168]	@ (801a77c <sys_timeout_abs+0xd0>)
 801a6d2:	482b      	ldr	r0, [pc, #172]	@ (801a780 <sys_timeout_abs+0xd4>)
 801a6d4:	f003 fdda 	bl	801e28c <iprintf>
    return;
 801a6d8:	e04a      	b.n	801a770 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801a6da:	693b      	ldr	r3, [r7, #16]
 801a6dc:	2200      	movs	r2, #0
 801a6de:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801a6e0:	693b      	ldr	r3, [r7, #16]
 801a6e2:	68ba      	ldr	r2, [r7, #8]
 801a6e4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801a6e6:	693b      	ldr	r3, [r7, #16]
 801a6e8:	687a      	ldr	r2, [r7, #4]
 801a6ea:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801a6ec:	693b      	ldr	r3, [r7, #16]
 801a6ee:	68fa      	ldr	r2, [r7, #12]
 801a6f0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801a6f2:	4b24      	ldr	r3, [pc, #144]	@ (801a784 <sys_timeout_abs+0xd8>)
 801a6f4:	681b      	ldr	r3, [r3, #0]
 801a6f6:	2b00      	cmp	r3, #0
 801a6f8:	d103      	bne.n	801a702 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801a6fa:	4a22      	ldr	r2, [pc, #136]	@ (801a784 <sys_timeout_abs+0xd8>)
 801a6fc:	693b      	ldr	r3, [r7, #16]
 801a6fe:	6013      	str	r3, [r2, #0]
    return;
 801a700:	e037      	b.n	801a772 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801a702:	693b      	ldr	r3, [r7, #16]
 801a704:	685a      	ldr	r2, [r3, #4]
 801a706:	4b1f      	ldr	r3, [pc, #124]	@ (801a784 <sys_timeout_abs+0xd8>)
 801a708:	681b      	ldr	r3, [r3, #0]
 801a70a:	685b      	ldr	r3, [r3, #4]
 801a70c:	1ad3      	subs	r3, r2, r3
 801a70e:	0fdb      	lsrs	r3, r3, #31
 801a710:	f003 0301 	and.w	r3, r3, #1
 801a714:	b2db      	uxtb	r3, r3
 801a716:	2b00      	cmp	r3, #0
 801a718:	d007      	beq.n	801a72a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801a71a:	4b1a      	ldr	r3, [pc, #104]	@ (801a784 <sys_timeout_abs+0xd8>)
 801a71c:	681a      	ldr	r2, [r3, #0]
 801a71e:	693b      	ldr	r3, [r7, #16]
 801a720:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801a722:	4a18      	ldr	r2, [pc, #96]	@ (801a784 <sys_timeout_abs+0xd8>)
 801a724:	693b      	ldr	r3, [r7, #16]
 801a726:	6013      	str	r3, [r2, #0]
 801a728:	e023      	b.n	801a772 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801a72a:	4b16      	ldr	r3, [pc, #88]	@ (801a784 <sys_timeout_abs+0xd8>)
 801a72c:	681b      	ldr	r3, [r3, #0]
 801a72e:	617b      	str	r3, [r7, #20]
 801a730:	e01a      	b.n	801a768 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801a732:	697b      	ldr	r3, [r7, #20]
 801a734:	681b      	ldr	r3, [r3, #0]
 801a736:	2b00      	cmp	r3, #0
 801a738:	d00b      	beq.n	801a752 <sys_timeout_abs+0xa6>
 801a73a:	693b      	ldr	r3, [r7, #16]
 801a73c:	685a      	ldr	r2, [r3, #4]
 801a73e:	697b      	ldr	r3, [r7, #20]
 801a740:	681b      	ldr	r3, [r3, #0]
 801a742:	685b      	ldr	r3, [r3, #4]
 801a744:	1ad3      	subs	r3, r2, r3
 801a746:	0fdb      	lsrs	r3, r3, #31
 801a748:	f003 0301 	and.w	r3, r3, #1
 801a74c:	b2db      	uxtb	r3, r3
 801a74e:	2b00      	cmp	r3, #0
 801a750:	d007      	beq.n	801a762 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801a752:	697b      	ldr	r3, [r7, #20]
 801a754:	681a      	ldr	r2, [r3, #0]
 801a756:	693b      	ldr	r3, [r7, #16]
 801a758:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801a75a:	697b      	ldr	r3, [r7, #20]
 801a75c:	693a      	ldr	r2, [r7, #16]
 801a75e:	601a      	str	r2, [r3, #0]
        break;
 801a760:	e007      	b.n	801a772 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801a762:	697b      	ldr	r3, [r7, #20]
 801a764:	681b      	ldr	r3, [r3, #0]
 801a766:	617b      	str	r3, [r7, #20]
 801a768:	697b      	ldr	r3, [r7, #20]
 801a76a:	2b00      	cmp	r3, #0
 801a76c:	d1e1      	bne.n	801a732 <sys_timeout_abs+0x86>
 801a76e:	e000      	b.n	801a772 <sys_timeout_abs+0xc6>
    return;
 801a770:	bf00      	nop
      }
    }
  }
}
 801a772:	3718      	adds	r7, #24
 801a774:	46bd      	mov	sp, r7
 801a776:	bd80      	pop	{r7, pc}
 801a778:	0802325c 	.word	0x0802325c
 801a77c:	08023290 	.word	0x08023290
 801a780:	080232d0 	.word	0x080232d0
 801a784:	2000cb10 	.word	0x2000cb10

0801a788 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801a788:	b580      	push	{r7, lr}
 801a78a:	b086      	sub	sp, #24
 801a78c:	af00      	add	r7, sp, #0
 801a78e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801a790:	687b      	ldr	r3, [r7, #4]
 801a792:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801a794:	697b      	ldr	r3, [r7, #20]
 801a796:	685b      	ldr	r3, [r3, #4]
 801a798:	4798      	blx	r3

  now = sys_now();
 801a79a:	f7f2 fcc9 	bl	800d130 <sys_now>
 801a79e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801a7a0:	697b      	ldr	r3, [r7, #20]
 801a7a2:	681a      	ldr	r2, [r3, #0]
 801a7a4:	4b0f      	ldr	r3, [pc, #60]	@ (801a7e4 <lwip_cyclic_timer+0x5c>)
 801a7a6:	681b      	ldr	r3, [r3, #0]
 801a7a8:	4413      	add	r3, r2
 801a7aa:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801a7ac:	68fa      	ldr	r2, [r7, #12]
 801a7ae:	693b      	ldr	r3, [r7, #16]
 801a7b0:	1ad3      	subs	r3, r2, r3
 801a7b2:	0fdb      	lsrs	r3, r3, #31
 801a7b4:	f003 0301 	and.w	r3, r3, #1
 801a7b8:	b2db      	uxtb	r3, r3
 801a7ba:	2b00      	cmp	r3, #0
 801a7bc:	d009      	beq.n	801a7d2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801a7be:	697b      	ldr	r3, [r7, #20]
 801a7c0:	681a      	ldr	r2, [r3, #0]
 801a7c2:	693b      	ldr	r3, [r7, #16]
 801a7c4:	4413      	add	r3, r2
 801a7c6:	687a      	ldr	r2, [r7, #4]
 801a7c8:	4907      	ldr	r1, [pc, #28]	@ (801a7e8 <lwip_cyclic_timer+0x60>)
 801a7ca:	4618      	mov	r0, r3
 801a7cc:	f7ff ff6e 	bl	801a6ac <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801a7d0:	e004      	b.n	801a7dc <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801a7d2:	687a      	ldr	r2, [r7, #4]
 801a7d4:	4904      	ldr	r1, [pc, #16]	@ (801a7e8 <lwip_cyclic_timer+0x60>)
 801a7d6:	68f8      	ldr	r0, [r7, #12]
 801a7d8:	f7ff ff68 	bl	801a6ac <sys_timeout_abs>
}
 801a7dc:	bf00      	nop
 801a7de:	3718      	adds	r7, #24
 801a7e0:	46bd      	mov	sp, r7
 801a7e2:	bd80      	pop	{r7, pc}
 801a7e4:	2000cb14 	.word	0x2000cb14
 801a7e8:	0801a789 	.word	0x0801a789

0801a7ec <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801a7ec:	b580      	push	{r7, lr}
 801a7ee:	b082      	sub	sp, #8
 801a7f0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801a7f2:	2301      	movs	r3, #1
 801a7f4:	607b      	str	r3, [r7, #4]
 801a7f6:	e00e      	b.n	801a816 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801a7f8:	4a0b      	ldr	r2, [pc, #44]	@ (801a828 <sys_timeouts_init+0x3c>)
 801a7fa:	687b      	ldr	r3, [r7, #4]
 801a7fc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801a800:	687b      	ldr	r3, [r7, #4]
 801a802:	00db      	lsls	r3, r3, #3
 801a804:	4a08      	ldr	r2, [pc, #32]	@ (801a828 <sys_timeouts_init+0x3c>)
 801a806:	4413      	add	r3, r2
 801a808:	461a      	mov	r2, r3
 801a80a:	4908      	ldr	r1, [pc, #32]	@ (801a82c <sys_timeouts_init+0x40>)
 801a80c:	f000 f810 	bl	801a830 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801a810:	687b      	ldr	r3, [r7, #4]
 801a812:	3301      	adds	r3, #1
 801a814:	607b      	str	r3, [r7, #4]
 801a816:	687b      	ldr	r3, [r7, #4]
 801a818:	2b02      	cmp	r3, #2
 801a81a:	d9ed      	bls.n	801a7f8 <sys_timeouts_init+0xc>
  }
}
 801a81c:	bf00      	nop
 801a81e:	bf00      	nop
 801a820:	3708      	adds	r7, #8
 801a822:	46bd      	mov	sp, r7
 801a824:	bd80      	pop	{r7, pc}
 801a826:	bf00      	nop
 801a828:	08023ed8 	.word	0x08023ed8
 801a82c:	0801a789 	.word	0x0801a789

0801a830 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801a830:	b580      	push	{r7, lr}
 801a832:	b086      	sub	sp, #24
 801a834:	af00      	add	r7, sp, #0
 801a836:	60f8      	str	r0, [r7, #12]
 801a838:	60b9      	str	r1, [r7, #8]
 801a83a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801a83c:	68fb      	ldr	r3, [r7, #12]
 801a83e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801a842:	d306      	bcc.n	801a852 <sys_timeout+0x22>
 801a844:	4b0a      	ldr	r3, [pc, #40]	@ (801a870 <sys_timeout+0x40>)
 801a846:	f240 1229 	movw	r2, #297	@ 0x129
 801a84a:	490a      	ldr	r1, [pc, #40]	@ (801a874 <sys_timeout+0x44>)
 801a84c:	480a      	ldr	r0, [pc, #40]	@ (801a878 <sys_timeout+0x48>)
 801a84e:	f003 fd1d 	bl	801e28c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801a852:	f7f2 fc6d 	bl	800d130 <sys_now>
 801a856:	4602      	mov	r2, r0
 801a858:	68fb      	ldr	r3, [r7, #12]
 801a85a:	4413      	add	r3, r2
 801a85c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801a85e:	687a      	ldr	r2, [r7, #4]
 801a860:	68b9      	ldr	r1, [r7, #8]
 801a862:	6978      	ldr	r0, [r7, #20]
 801a864:	f7ff ff22 	bl	801a6ac <sys_timeout_abs>
#endif
}
 801a868:	bf00      	nop
 801a86a:	3718      	adds	r7, #24
 801a86c:	46bd      	mov	sp, r7
 801a86e:	bd80      	pop	{r7, pc}
 801a870:	0802325c 	.word	0x0802325c
 801a874:	080232f8 	.word	0x080232f8
 801a878:	080232d0 	.word	0x080232d0

0801a87c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801a87c:	b580      	push	{r7, lr}
 801a87e:	b084      	sub	sp, #16
 801a880:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801a882:	f7f2 fc55 	bl	800d130 <sys_now>
 801a886:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801a888:	4b17      	ldr	r3, [pc, #92]	@ (801a8e8 <sys_check_timeouts+0x6c>)
 801a88a:	681b      	ldr	r3, [r3, #0]
 801a88c:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801a88e:	68bb      	ldr	r3, [r7, #8]
 801a890:	2b00      	cmp	r3, #0
 801a892:	d022      	beq.n	801a8da <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801a894:	68bb      	ldr	r3, [r7, #8]
 801a896:	685b      	ldr	r3, [r3, #4]
 801a898:	68fa      	ldr	r2, [r7, #12]
 801a89a:	1ad3      	subs	r3, r2, r3
 801a89c:	0fdb      	lsrs	r3, r3, #31
 801a89e:	f003 0301 	and.w	r3, r3, #1
 801a8a2:	b2db      	uxtb	r3, r3
 801a8a4:	2b00      	cmp	r3, #0
 801a8a6:	d11a      	bne.n	801a8de <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801a8a8:	68bb      	ldr	r3, [r7, #8]
 801a8aa:	681b      	ldr	r3, [r3, #0]
 801a8ac:	4a0e      	ldr	r2, [pc, #56]	@ (801a8e8 <sys_check_timeouts+0x6c>)
 801a8ae:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801a8b0:	68bb      	ldr	r3, [r7, #8]
 801a8b2:	689b      	ldr	r3, [r3, #8]
 801a8b4:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801a8b6:	68bb      	ldr	r3, [r7, #8]
 801a8b8:	68db      	ldr	r3, [r3, #12]
 801a8ba:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801a8bc:	68bb      	ldr	r3, [r7, #8]
 801a8be:	685b      	ldr	r3, [r3, #4]
 801a8c0:	4a0a      	ldr	r2, [pc, #40]	@ (801a8ec <sys_check_timeouts+0x70>)
 801a8c2:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801a8c4:	68b9      	ldr	r1, [r7, #8]
 801a8c6:	200a      	movs	r0, #10
 801a8c8:	f7f8 fdb6 	bl	8013438 <memp_free>
    if (handler != NULL) {
 801a8cc:	687b      	ldr	r3, [r7, #4]
 801a8ce:	2b00      	cmp	r3, #0
 801a8d0:	d0da      	beq.n	801a888 <sys_check_timeouts+0xc>
      handler(arg);
 801a8d2:	687b      	ldr	r3, [r7, #4]
 801a8d4:	6838      	ldr	r0, [r7, #0]
 801a8d6:	4798      	blx	r3
  do {
 801a8d8:	e7d6      	b.n	801a888 <sys_check_timeouts+0xc>
      return;
 801a8da:	bf00      	nop
 801a8dc:	e000      	b.n	801a8e0 <sys_check_timeouts+0x64>
      return;
 801a8de:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801a8e0:	3710      	adds	r7, #16
 801a8e2:	46bd      	mov	sp, r7
 801a8e4:	bd80      	pop	{r7, pc}
 801a8e6:	bf00      	nop
 801a8e8:	2000cb10 	.word	0x2000cb10
 801a8ec:	2000cb14 	.word	0x2000cb14

0801a8f0 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801a8f0:	b580      	push	{r7, lr}
 801a8f2:	b082      	sub	sp, #8
 801a8f4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801a8f6:	4b16      	ldr	r3, [pc, #88]	@ (801a950 <sys_timeouts_sleeptime+0x60>)
 801a8f8:	681b      	ldr	r3, [r3, #0]
 801a8fa:	2b00      	cmp	r3, #0
 801a8fc:	d102      	bne.n	801a904 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801a8fe:	f04f 33ff 	mov.w	r3, #4294967295
 801a902:	e020      	b.n	801a946 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801a904:	f7f2 fc14 	bl	800d130 <sys_now>
 801a908:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801a90a:	4b11      	ldr	r3, [pc, #68]	@ (801a950 <sys_timeouts_sleeptime+0x60>)
 801a90c:	681b      	ldr	r3, [r3, #0]
 801a90e:	685a      	ldr	r2, [r3, #4]
 801a910:	687b      	ldr	r3, [r7, #4]
 801a912:	1ad3      	subs	r3, r2, r3
 801a914:	0fdb      	lsrs	r3, r3, #31
 801a916:	f003 0301 	and.w	r3, r3, #1
 801a91a:	b2db      	uxtb	r3, r3
 801a91c:	2b00      	cmp	r3, #0
 801a91e:	d001      	beq.n	801a924 <sys_timeouts_sleeptime+0x34>
    return 0;
 801a920:	2300      	movs	r3, #0
 801a922:	e010      	b.n	801a946 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801a924:	4b0a      	ldr	r3, [pc, #40]	@ (801a950 <sys_timeouts_sleeptime+0x60>)
 801a926:	681b      	ldr	r3, [r3, #0]
 801a928:	685a      	ldr	r2, [r3, #4]
 801a92a:	687b      	ldr	r3, [r7, #4]
 801a92c:	1ad3      	subs	r3, r2, r3
 801a92e:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801a930:	683b      	ldr	r3, [r7, #0]
 801a932:	2b00      	cmp	r3, #0
 801a934:	da06      	bge.n	801a944 <sys_timeouts_sleeptime+0x54>
 801a936:	4b07      	ldr	r3, [pc, #28]	@ (801a954 <sys_timeouts_sleeptime+0x64>)
 801a938:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 801a93c:	4906      	ldr	r1, [pc, #24]	@ (801a958 <sys_timeouts_sleeptime+0x68>)
 801a93e:	4807      	ldr	r0, [pc, #28]	@ (801a95c <sys_timeouts_sleeptime+0x6c>)
 801a940:	f003 fca4 	bl	801e28c <iprintf>
    return ret;
 801a944:	683b      	ldr	r3, [r7, #0]
  }
}
 801a946:	4618      	mov	r0, r3
 801a948:	3708      	adds	r7, #8
 801a94a:	46bd      	mov	sp, r7
 801a94c:	bd80      	pop	{r7, pc}
 801a94e:	bf00      	nop
 801a950:	2000cb10 	.word	0x2000cb10
 801a954:	0802325c 	.word	0x0802325c
 801a958:	08023330 	.word	0x08023330
 801a95c:	080232d0 	.word	0x080232d0

0801a960 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801a960:	b580      	push	{r7, lr}
 801a962:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801a964:	f003 fb0e 	bl	801df84 <rand>
 801a968:	4603      	mov	r3, r0
 801a96a:	b29b      	uxth	r3, r3
 801a96c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801a970:	b29b      	uxth	r3, r3
 801a972:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 801a976:	b29a      	uxth	r2, r3
 801a978:	4b01      	ldr	r3, [pc, #4]	@ (801a980 <udp_init+0x20>)
 801a97a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801a97c:	bf00      	nop
 801a97e:	bd80      	pop	{r7, pc}
 801a980:	200000ac 	.word	0x200000ac

0801a984 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801a984:	b580      	push	{r7, lr}
 801a986:	b084      	sub	sp, #16
 801a988:	af00      	add	r7, sp, #0
 801a98a:	60f8      	str	r0, [r7, #12]
 801a98c:	60b9      	str	r1, [r7, #8]
 801a98e:	4613      	mov	r3, r2
 801a990:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801a992:	68fb      	ldr	r3, [r7, #12]
 801a994:	2b00      	cmp	r3, #0
 801a996:	d105      	bne.n	801a9a4 <udp_input_local_match+0x20>
 801a998:	4b27      	ldr	r3, [pc, #156]	@ (801aa38 <udp_input_local_match+0xb4>)
 801a99a:	2287      	movs	r2, #135	@ 0x87
 801a99c:	4927      	ldr	r1, [pc, #156]	@ (801aa3c <udp_input_local_match+0xb8>)
 801a99e:	4828      	ldr	r0, [pc, #160]	@ (801aa40 <udp_input_local_match+0xbc>)
 801a9a0:	f003 fc74 	bl	801e28c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801a9a4:	68bb      	ldr	r3, [r7, #8]
 801a9a6:	2b00      	cmp	r3, #0
 801a9a8:	d105      	bne.n	801a9b6 <udp_input_local_match+0x32>
 801a9aa:	4b23      	ldr	r3, [pc, #140]	@ (801aa38 <udp_input_local_match+0xb4>)
 801a9ac:	2288      	movs	r2, #136	@ 0x88
 801a9ae:	4925      	ldr	r1, [pc, #148]	@ (801aa44 <udp_input_local_match+0xc0>)
 801a9b0:	4823      	ldr	r0, [pc, #140]	@ (801aa40 <udp_input_local_match+0xbc>)
 801a9b2:	f003 fc6b 	bl	801e28c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801a9b6:	68fb      	ldr	r3, [r7, #12]
 801a9b8:	7a1b      	ldrb	r3, [r3, #8]
 801a9ba:	2b00      	cmp	r3, #0
 801a9bc:	d00b      	beq.n	801a9d6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801a9be:	68fb      	ldr	r3, [r7, #12]
 801a9c0:	7a1a      	ldrb	r2, [r3, #8]
 801a9c2:	4b21      	ldr	r3, [pc, #132]	@ (801aa48 <udp_input_local_match+0xc4>)
 801a9c4:	685b      	ldr	r3, [r3, #4]
 801a9c6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801a9ca:	3301      	adds	r3, #1
 801a9cc:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801a9ce:	429a      	cmp	r2, r3
 801a9d0:	d001      	beq.n	801a9d6 <udp_input_local_match+0x52>
    return 0;
 801a9d2:	2300      	movs	r3, #0
 801a9d4:	e02b      	b.n	801aa2e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801a9d6:	79fb      	ldrb	r3, [r7, #7]
 801a9d8:	2b00      	cmp	r3, #0
 801a9da:	d018      	beq.n	801aa0e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801a9dc:	68fb      	ldr	r3, [r7, #12]
 801a9de:	2b00      	cmp	r3, #0
 801a9e0:	d013      	beq.n	801aa0a <udp_input_local_match+0x86>
 801a9e2:	68fb      	ldr	r3, [r7, #12]
 801a9e4:	681b      	ldr	r3, [r3, #0]
 801a9e6:	2b00      	cmp	r3, #0
 801a9e8:	d00f      	beq.n	801aa0a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801a9ea:	4b17      	ldr	r3, [pc, #92]	@ (801aa48 <udp_input_local_match+0xc4>)
 801a9ec:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801a9ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a9f2:	d00a      	beq.n	801aa0a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801a9f4:	68fb      	ldr	r3, [r7, #12]
 801a9f6:	681a      	ldr	r2, [r3, #0]
 801a9f8:	4b13      	ldr	r3, [pc, #76]	@ (801aa48 <udp_input_local_match+0xc4>)
 801a9fa:	695b      	ldr	r3, [r3, #20]
 801a9fc:	405a      	eors	r2, r3
 801a9fe:	68bb      	ldr	r3, [r7, #8]
 801aa00:	3308      	adds	r3, #8
 801aa02:	681b      	ldr	r3, [r3, #0]
 801aa04:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801aa06:	2b00      	cmp	r3, #0
 801aa08:	d110      	bne.n	801aa2c <udp_input_local_match+0xa8>
          return 1;
 801aa0a:	2301      	movs	r3, #1
 801aa0c:	e00f      	b.n	801aa2e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801aa0e:	68fb      	ldr	r3, [r7, #12]
 801aa10:	2b00      	cmp	r3, #0
 801aa12:	d009      	beq.n	801aa28 <udp_input_local_match+0xa4>
 801aa14:	68fb      	ldr	r3, [r7, #12]
 801aa16:	681b      	ldr	r3, [r3, #0]
 801aa18:	2b00      	cmp	r3, #0
 801aa1a:	d005      	beq.n	801aa28 <udp_input_local_match+0xa4>
 801aa1c:	68fb      	ldr	r3, [r7, #12]
 801aa1e:	681a      	ldr	r2, [r3, #0]
 801aa20:	4b09      	ldr	r3, [pc, #36]	@ (801aa48 <udp_input_local_match+0xc4>)
 801aa22:	695b      	ldr	r3, [r3, #20]
 801aa24:	429a      	cmp	r2, r3
 801aa26:	d101      	bne.n	801aa2c <udp_input_local_match+0xa8>
        return 1;
 801aa28:	2301      	movs	r3, #1
 801aa2a:	e000      	b.n	801aa2e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801aa2c:	2300      	movs	r3, #0
}
 801aa2e:	4618      	mov	r0, r3
 801aa30:	3710      	adds	r7, #16
 801aa32:	46bd      	mov	sp, r7
 801aa34:	bd80      	pop	{r7, pc}
 801aa36:	bf00      	nop
 801aa38:	08023344 	.word	0x08023344
 801aa3c:	08023374 	.word	0x08023374
 801aa40:	08023398 	.word	0x08023398
 801aa44:	080233c0 	.word	0x080233c0
 801aa48:	2000936c 	.word	0x2000936c

0801aa4c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801aa4c:	b590      	push	{r4, r7, lr}
 801aa4e:	b08d      	sub	sp, #52	@ 0x34
 801aa50:	af02      	add	r7, sp, #8
 801aa52:	6078      	str	r0, [r7, #4]
 801aa54:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801aa56:	2300      	movs	r3, #0
 801aa58:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801aa5a:	687b      	ldr	r3, [r7, #4]
 801aa5c:	2b00      	cmp	r3, #0
 801aa5e:	d105      	bne.n	801aa6c <udp_input+0x20>
 801aa60:	4b7c      	ldr	r3, [pc, #496]	@ (801ac54 <udp_input+0x208>)
 801aa62:	22cf      	movs	r2, #207	@ 0xcf
 801aa64:	497c      	ldr	r1, [pc, #496]	@ (801ac58 <udp_input+0x20c>)
 801aa66:	487d      	ldr	r0, [pc, #500]	@ (801ac5c <udp_input+0x210>)
 801aa68:	f003 fc10 	bl	801e28c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801aa6c:	683b      	ldr	r3, [r7, #0]
 801aa6e:	2b00      	cmp	r3, #0
 801aa70:	d105      	bne.n	801aa7e <udp_input+0x32>
 801aa72:	4b78      	ldr	r3, [pc, #480]	@ (801ac54 <udp_input+0x208>)
 801aa74:	22d0      	movs	r2, #208	@ 0xd0
 801aa76:	497a      	ldr	r1, [pc, #488]	@ (801ac60 <udp_input+0x214>)
 801aa78:	4878      	ldr	r0, [pc, #480]	@ (801ac5c <udp_input+0x210>)
 801aa7a:	f003 fc07 	bl	801e28c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801aa7e:	687b      	ldr	r3, [r7, #4]
 801aa80:	895b      	ldrh	r3, [r3, #10]
 801aa82:	2b07      	cmp	r3, #7
 801aa84:	d803      	bhi.n	801aa8e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801aa86:	6878      	ldr	r0, [r7, #4]
 801aa88:	f7f9 fb48 	bl	801411c <pbuf_free>
    goto end;
 801aa8c:	e0de      	b.n	801ac4c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801aa8e:	687b      	ldr	r3, [r7, #4]
 801aa90:	685b      	ldr	r3, [r3, #4]
 801aa92:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801aa94:	4b73      	ldr	r3, [pc, #460]	@ (801ac64 <udp_input+0x218>)
 801aa96:	695b      	ldr	r3, [r3, #20]
 801aa98:	4a72      	ldr	r2, [pc, #456]	@ (801ac64 <udp_input+0x218>)
 801aa9a:	6812      	ldr	r2, [r2, #0]
 801aa9c:	4611      	mov	r1, r2
 801aa9e:	4618      	mov	r0, r3
 801aaa0:	f001 fc56 	bl	801c350 <ip4_addr_isbroadcast_u32>
 801aaa4:	4603      	mov	r3, r0
 801aaa6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801aaa8:	697b      	ldr	r3, [r7, #20]
 801aaaa:	881b      	ldrh	r3, [r3, #0]
 801aaac:	b29b      	uxth	r3, r3
 801aaae:	4618      	mov	r0, r3
 801aab0:	f7f7 ff74 	bl	801299c <lwip_htons>
 801aab4:	4603      	mov	r3, r0
 801aab6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801aab8:	697b      	ldr	r3, [r7, #20]
 801aaba:	885b      	ldrh	r3, [r3, #2]
 801aabc:	b29b      	uxth	r3, r3
 801aabe:	4618      	mov	r0, r3
 801aac0:	f7f7 ff6c 	bl	801299c <lwip_htons>
 801aac4:	4603      	mov	r3, r0
 801aac6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801aac8:	2300      	movs	r3, #0
 801aaca:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 801aacc:	2300      	movs	r3, #0
 801aace:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801aad0:	2300      	movs	r3, #0
 801aad2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801aad4:	4b64      	ldr	r3, [pc, #400]	@ (801ac68 <udp_input+0x21c>)
 801aad6:	681b      	ldr	r3, [r3, #0]
 801aad8:	627b      	str	r3, [r7, #36]	@ 0x24
 801aada:	e054      	b.n	801ab86 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801aadc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aade:	8a5b      	ldrh	r3, [r3, #18]
 801aae0:	89fa      	ldrh	r2, [r7, #14]
 801aae2:	429a      	cmp	r2, r3
 801aae4:	d14a      	bne.n	801ab7c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801aae6:	7cfb      	ldrb	r3, [r7, #19]
 801aae8:	461a      	mov	r2, r3
 801aaea:	6839      	ldr	r1, [r7, #0]
 801aaec:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801aaee:	f7ff ff49 	bl	801a984 <udp_input_local_match>
 801aaf2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801aaf4:	2b00      	cmp	r3, #0
 801aaf6:	d041      	beq.n	801ab7c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801aaf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aafa:	7c1b      	ldrb	r3, [r3, #16]
 801aafc:	f003 0304 	and.w	r3, r3, #4
 801ab00:	2b00      	cmp	r3, #0
 801ab02:	d11d      	bne.n	801ab40 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801ab04:	69fb      	ldr	r3, [r7, #28]
 801ab06:	2b00      	cmp	r3, #0
 801ab08:	d102      	bne.n	801ab10 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801ab0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ab0c:	61fb      	str	r3, [r7, #28]
 801ab0e:	e017      	b.n	801ab40 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801ab10:	7cfb      	ldrb	r3, [r7, #19]
 801ab12:	2b00      	cmp	r3, #0
 801ab14:	d014      	beq.n	801ab40 <udp_input+0xf4>
 801ab16:	4b53      	ldr	r3, [pc, #332]	@ (801ac64 <udp_input+0x218>)
 801ab18:	695b      	ldr	r3, [r3, #20]
 801ab1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ab1e:	d10f      	bne.n	801ab40 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801ab20:	69fb      	ldr	r3, [r7, #28]
 801ab22:	681a      	ldr	r2, [r3, #0]
 801ab24:	683b      	ldr	r3, [r7, #0]
 801ab26:	3304      	adds	r3, #4
 801ab28:	681b      	ldr	r3, [r3, #0]
 801ab2a:	429a      	cmp	r2, r3
 801ab2c:	d008      	beq.n	801ab40 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801ab2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ab30:	681a      	ldr	r2, [r3, #0]
 801ab32:	683b      	ldr	r3, [r7, #0]
 801ab34:	3304      	adds	r3, #4
 801ab36:	681b      	ldr	r3, [r3, #0]
 801ab38:	429a      	cmp	r2, r3
 801ab3a:	d101      	bne.n	801ab40 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801ab3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ab3e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801ab40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ab42:	8a9b      	ldrh	r3, [r3, #20]
 801ab44:	8a3a      	ldrh	r2, [r7, #16]
 801ab46:	429a      	cmp	r2, r3
 801ab48:	d118      	bne.n	801ab7c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801ab4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ab4c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801ab4e:	2b00      	cmp	r3, #0
 801ab50:	d005      	beq.n	801ab5e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801ab52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ab54:	685a      	ldr	r2, [r3, #4]
 801ab56:	4b43      	ldr	r3, [pc, #268]	@ (801ac64 <udp_input+0x218>)
 801ab58:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801ab5a:	429a      	cmp	r2, r3
 801ab5c:	d10e      	bne.n	801ab7c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801ab5e:	6a3b      	ldr	r3, [r7, #32]
 801ab60:	2b00      	cmp	r3, #0
 801ab62:	d014      	beq.n	801ab8e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801ab64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ab66:	68da      	ldr	r2, [r3, #12]
 801ab68:	6a3b      	ldr	r3, [r7, #32]
 801ab6a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801ab6c:	4b3e      	ldr	r3, [pc, #248]	@ (801ac68 <udp_input+0x21c>)
 801ab6e:	681a      	ldr	r2, [r3, #0]
 801ab70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ab72:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801ab74:	4a3c      	ldr	r2, [pc, #240]	@ (801ac68 <udp_input+0x21c>)
 801ab76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ab78:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801ab7a:	e008      	b.n	801ab8e <udp_input+0x142>
      }
    }

    prev = pcb;
 801ab7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ab7e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801ab80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ab82:	68db      	ldr	r3, [r3, #12]
 801ab84:	627b      	str	r3, [r7, #36]	@ 0x24
 801ab86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ab88:	2b00      	cmp	r3, #0
 801ab8a:	d1a7      	bne.n	801aadc <udp_input+0x90>
 801ab8c:	e000      	b.n	801ab90 <udp_input+0x144>
        break;
 801ab8e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801ab90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ab92:	2b00      	cmp	r3, #0
 801ab94:	d101      	bne.n	801ab9a <udp_input+0x14e>
    pcb = uncon_pcb;
 801ab96:	69fb      	ldr	r3, [r7, #28]
 801ab98:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801ab9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ab9c:	2b00      	cmp	r3, #0
 801ab9e:	d002      	beq.n	801aba6 <udp_input+0x15a>
    for_us = 1;
 801aba0:	2301      	movs	r3, #1
 801aba2:	76fb      	strb	r3, [r7, #27]
 801aba4:	e00a      	b.n	801abbc <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801aba6:	683b      	ldr	r3, [r7, #0]
 801aba8:	3304      	adds	r3, #4
 801abaa:	681a      	ldr	r2, [r3, #0]
 801abac:	4b2d      	ldr	r3, [pc, #180]	@ (801ac64 <udp_input+0x218>)
 801abae:	695b      	ldr	r3, [r3, #20]
 801abb0:	429a      	cmp	r2, r3
 801abb2:	bf0c      	ite	eq
 801abb4:	2301      	moveq	r3, #1
 801abb6:	2300      	movne	r3, #0
 801abb8:	b2db      	uxtb	r3, r3
 801abba:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801abbc:	7efb      	ldrb	r3, [r7, #27]
 801abbe:	2b00      	cmp	r3, #0
 801abc0:	d041      	beq.n	801ac46 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801abc2:	2108      	movs	r1, #8
 801abc4:	6878      	ldr	r0, [r7, #4]
 801abc6:	f7f9 fa23 	bl	8014010 <pbuf_remove_header>
 801abca:	4603      	mov	r3, r0
 801abcc:	2b00      	cmp	r3, #0
 801abce:	d00a      	beq.n	801abe6 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801abd0:	4b20      	ldr	r3, [pc, #128]	@ (801ac54 <udp_input+0x208>)
 801abd2:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 801abd6:	4925      	ldr	r1, [pc, #148]	@ (801ac6c <udp_input+0x220>)
 801abd8:	4820      	ldr	r0, [pc, #128]	@ (801ac5c <udp_input+0x210>)
 801abda:	f003 fb57 	bl	801e28c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801abde:	6878      	ldr	r0, [r7, #4]
 801abe0:	f7f9 fa9c 	bl	801411c <pbuf_free>
      goto end;
 801abe4:	e032      	b.n	801ac4c <udp_input+0x200>
    }

    if (pcb != NULL) {
 801abe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801abe8:	2b00      	cmp	r3, #0
 801abea:	d012      	beq.n	801ac12 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801abec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801abee:	699b      	ldr	r3, [r3, #24]
 801abf0:	2b00      	cmp	r3, #0
 801abf2:	d00a      	beq.n	801ac0a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801abf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801abf6:	699c      	ldr	r4, [r3, #24]
 801abf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801abfa:	69d8      	ldr	r0, [r3, #28]
 801abfc:	8a3b      	ldrh	r3, [r7, #16]
 801abfe:	9300      	str	r3, [sp, #0]
 801ac00:	4b1b      	ldr	r3, [pc, #108]	@ (801ac70 <udp_input+0x224>)
 801ac02:	687a      	ldr	r2, [r7, #4]
 801ac04:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801ac06:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801ac08:	e021      	b.n	801ac4e <udp_input+0x202>
        pbuf_free(p);
 801ac0a:	6878      	ldr	r0, [r7, #4]
 801ac0c:	f7f9 fa86 	bl	801411c <pbuf_free>
        goto end;
 801ac10:	e01c      	b.n	801ac4c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801ac12:	7cfb      	ldrb	r3, [r7, #19]
 801ac14:	2b00      	cmp	r3, #0
 801ac16:	d112      	bne.n	801ac3e <udp_input+0x1f2>
 801ac18:	4b12      	ldr	r3, [pc, #72]	@ (801ac64 <udp_input+0x218>)
 801ac1a:	695b      	ldr	r3, [r3, #20]
 801ac1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801ac20:	2be0      	cmp	r3, #224	@ 0xe0
 801ac22:	d00c      	beq.n	801ac3e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801ac24:	4b0f      	ldr	r3, [pc, #60]	@ (801ac64 <udp_input+0x218>)
 801ac26:	899b      	ldrh	r3, [r3, #12]
 801ac28:	3308      	adds	r3, #8
 801ac2a:	b29b      	uxth	r3, r3
 801ac2c:	b21b      	sxth	r3, r3
 801ac2e:	4619      	mov	r1, r3
 801ac30:	6878      	ldr	r0, [r7, #4]
 801ac32:	f7f9 fa60 	bl	80140f6 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801ac36:	2103      	movs	r1, #3
 801ac38:	6878      	ldr	r0, [r7, #4]
 801ac3a:	f001 f869 	bl	801bd10 <icmp_dest_unreach>
      pbuf_free(p);
 801ac3e:	6878      	ldr	r0, [r7, #4]
 801ac40:	f7f9 fa6c 	bl	801411c <pbuf_free>
  return;
 801ac44:	e003      	b.n	801ac4e <udp_input+0x202>
    pbuf_free(p);
 801ac46:	6878      	ldr	r0, [r7, #4]
 801ac48:	f7f9 fa68 	bl	801411c <pbuf_free>
  return;
 801ac4c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801ac4e:	372c      	adds	r7, #44	@ 0x2c
 801ac50:	46bd      	mov	sp, r7
 801ac52:	bd90      	pop	{r4, r7, pc}
 801ac54:	08023344 	.word	0x08023344
 801ac58:	080233e8 	.word	0x080233e8
 801ac5c:	08023398 	.word	0x08023398
 801ac60:	08023400 	.word	0x08023400
 801ac64:	2000936c 	.word	0x2000936c
 801ac68:	2000cb1c 	.word	0x2000cb1c
 801ac6c:	0802341c 	.word	0x0802341c
 801ac70:	2000937c 	.word	0x2000937c

0801ac74 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801ac74:	b480      	push	{r7}
 801ac76:	b085      	sub	sp, #20
 801ac78:	af00      	add	r7, sp, #0
 801ac7a:	6078      	str	r0, [r7, #4]
 801ac7c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801ac7e:	687b      	ldr	r3, [r7, #4]
 801ac80:	2b00      	cmp	r3, #0
 801ac82:	d01e      	beq.n	801acc2 <udp_netif_ip_addr_changed+0x4e>
 801ac84:	687b      	ldr	r3, [r7, #4]
 801ac86:	681b      	ldr	r3, [r3, #0]
 801ac88:	2b00      	cmp	r3, #0
 801ac8a:	d01a      	beq.n	801acc2 <udp_netif_ip_addr_changed+0x4e>
 801ac8c:	683b      	ldr	r3, [r7, #0]
 801ac8e:	2b00      	cmp	r3, #0
 801ac90:	d017      	beq.n	801acc2 <udp_netif_ip_addr_changed+0x4e>
 801ac92:	683b      	ldr	r3, [r7, #0]
 801ac94:	681b      	ldr	r3, [r3, #0]
 801ac96:	2b00      	cmp	r3, #0
 801ac98:	d013      	beq.n	801acc2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801ac9a:	4b0d      	ldr	r3, [pc, #52]	@ (801acd0 <udp_netif_ip_addr_changed+0x5c>)
 801ac9c:	681b      	ldr	r3, [r3, #0]
 801ac9e:	60fb      	str	r3, [r7, #12]
 801aca0:	e00c      	b.n	801acbc <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801aca2:	68fb      	ldr	r3, [r7, #12]
 801aca4:	681a      	ldr	r2, [r3, #0]
 801aca6:	687b      	ldr	r3, [r7, #4]
 801aca8:	681b      	ldr	r3, [r3, #0]
 801acaa:	429a      	cmp	r2, r3
 801acac:	d103      	bne.n	801acb6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801acae:	683b      	ldr	r3, [r7, #0]
 801acb0:	681a      	ldr	r2, [r3, #0]
 801acb2:	68fb      	ldr	r3, [r7, #12]
 801acb4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801acb6:	68fb      	ldr	r3, [r7, #12]
 801acb8:	68db      	ldr	r3, [r3, #12]
 801acba:	60fb      	str	r3, [r7, #12]
 801acbc:	68fb      	ldr	r3, [r7, #12]
 801acbe:	2b00      	cmp	r3, #0
 801acc0:	d1ef      	bne.n	801aca2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801acc2:	bf00      	nop
 801acc4:	3714      	adds	r7, #20
 801acc6:	46bd      	mov	sp, r7
 801acc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801accc:	4770      	bx	lr
 801acce:	bf00      	nop
 801acd0:	2000cb1c 	.word	0x2000cb1c

0801acd4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801acd4:	b580      	push	{r7, lr}
 801acd6:	b082      	sub	sp, #8
 801acd8:	af00      	add	r7, sp, #0
 801acda:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801acdc:	4915      	ldr	r1, [pc, #84]	@ (801ad34 <etharp_free_entry+0x60>)
 801acde:	687a      	ldr	r2, [r7, #4]
 801ace0:	4613      	mov	r3, r2
 801ace2:	005b      	lsls	r3, r3, #1
 801ace4:	4413      	add	r3, r2
 801ace6:	00db      	lsls	r3, r3, #3
 801ace8:	440b      	add	r3, r1
 801acea:	681b      	ldr	r3, [r3, #0]
 801acec:	2b00      	cmp	r3, #0
 801acee:	d013      	beq.n	801ad18 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801acf0:	4910      	ldr	r1, [pc, #64]	@ (801ad34 <etharp_free_entry+0x60>)
 801acf2:	687a      	ldr	r2, [r7, #4]
 801acf4:	4613      	mov	r3, r2
 801acf6:	005b      	lsls	r3, r3, #1
 801acf8:	4413      	add	r3, r2
 801acfa:	00db      	lsls	r3, r3, #3
 801acfc:	440b      	add	r3, r1
 801acfe:	681b      	ldr	r3, [r3, #0]
 801ad00:	4618      	mov	r0, r3
 801ad02:	f7f9 fa0b 	bl	801411c <pbuf_free>
    arp_table[i].q = NULL;
 801ad06:	490b      	ldr	r1, [pc, #44]	@ (801ad34 <etharp_free_entry+0x60>)
 801ad08:	687a      	ldr	r2, [r7, #4]
 801ad0a:	4613      	mov	r3, r2
 801ad0c:	005b      	lsls	r3, r3, #1
 801ad0e:	4413      	add	r3, r2
 801ad10:	00db      	lsls	r3, r3, #3
 801ad12:	440b      	add	r3, r1
 801ad14:	2200      	movs	r2, #0
 801ad16:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801ad18:	4906      	ldr	r1, [pc, #24]	@ (801ad34 <etharp_free_entry+0x60>)
 801ad1a:	687a      	ldr	r2, [r7, #4]
 801ad1c:	4613      	mov	r3, r2
 801ad1e:	005b      	lsls	r3, r3, #1
 801ad20:	4413      	add	r3, r2
 801ad22:	00db      	lsls	r3, r3, #3
 801ad24:	440b      	add	r3, r1
 801ad26:	3314      	adds	r3, #20
 801ad28:	2200      	movs	r2, #0
 801ad2a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801ad2c:	bf00      	nop
 801ad2e:	3708      	adds	r7, #8
 801ad30:	46bd      	mov	sp, r7
 801ad32:	bd80      	pop	{r7, pc}
 801ad34:	2000cb20 	.word	0x2000cb20

0801ad38 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801ad38:	b580      	push	{r7, lr}
 801ad3a:	b082      	sub	sp, #8
 801ad3c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801ad3e:	2300      	movs	r3, #0
 801ad40:	607b      	str	r3, [r7, #4]
 801ad42:	e096      	b.n	801ae72 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801ad44:	494f      	ldr	r1, [pc, #316]	@ (801ae84 <etharp_tmr+0x14c>)
 801ad46:	687a      	ldr	r2, [r7, #4]
 801ad48:	4613      	mov	r3, r2
 801ad4a:	005b      	lsls	r3, r3, #1
 801ad4c:	4413      	add	r3, r2
 801ad4e:	00db      	lsls	r3, r3, #3
 801ad50:	440b      	add	r3, r1
 801ad52:	3314      	adds	r3, #20
 801ad54:	781b      	ldrb	r3, [r3, #0]
 801ad56:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801ad58:	78fb      	ldrb	r3, [r7, #3]
 801ad5a:	2b00      	cmp	r3, #0
 801ad5c:	f000 8086 	beq.w	801ae6c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801ad60:	4948      	ldr	r1, [pc, #288]	@ (801ae84 <etharp_tmr+0x14c>)
 801ad62:	687a      	ldr	r2, [r7, #4]
 801ad64:	4613      	mov	r3, r2
 801ad66:	005b      	lsls	r3, r3, #1
 801ad68:	4413      	add	r3, r2
 801ad6a:	00db      	lsls	r3, r3, #3
 801ad6c:	440b      	add	r3, r1
 801ad6e:	3312      	adds	r3, #18
 801ad70:	881b      	ldrh	r3, [r3, #0]
 801ad72:	3301      	adds	r3, #1
 801ad74:	b298      	uxth	r0, r3
 801ad76:	4943      	ldr	r1, [pc, #268]	@ (801ae84 <etharp_tmr+0x14c>)
 801ad78:	687a      	ldr	r2, [r7, #4]
 801ad7a:	4613      	mov	r3, r2
 801ad7c:	005b      	lsls	r3, r3, #1
 801ad7e:	4413      	add	r3, r2
 801ad80:	00db      	lsls	r3, r3, #3
 801ad82:	440b      	add	r3, r1
 801ad84:	3312      	adds	r3, #18
 801ad86:	4602      	mov	r2, r0
 801ad88:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801ad8a:	493e      	ldr	r1, [pc, #248]	@ (801ae84 <etharp_tmr+0x14c>)
 801ad8c:	687a      	ldr	r2, [r7, #4]
 801ad8e:	4613      	mov	r3, r2
 801ad90:	005b      	lsls	r3, r3, #1
 801ad92:	4413      	add	r3, r2
 801ad94:	00db      	lsls	r3, r3, #3
 801ad96:	440b      	add	r3, r1
 801ad98:	3312      	adds	r3, #18
 801ad9a:	881b      	ldrh	r3, [r3, #0]
 801ad9c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 801ada0:	d215      	bcs.n	801adce <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801ada2:	4938      	ldr	r1, [pc, #224]	@ (801ae84 <etharp_tmr+0x14c>)
 801ada4:	687a      	ldr	r2, [r7, #4]
 801ada6:	4613      	mov	r3, r2
 801ada8:	005b      	lsls	r3, r3, #1
 801adaa:	4413      	add	r3, r2
 801adac:	00db      	lsls	r3, r3, #3
 801adae:	440b      	add	r3, r1
 801adb0:	3314      	adds	r3, #20
 801adb2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801adb4:	2b01      	cmp	r3, #1
 801adb6:	d10e      	bne.n	801add6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801adb8:	4932      	ldr	r1, [pc, #200]	@ (801ae84 <etharp_tmr+0x14c>)
 801adba:	687a      	ldr	r2, [r7, #4]
 801adbc:	4613      	mov	r3, r2
 801adbe:	005b      	lsls	r3, r3, #1
 801adc0:	4413      	add	r3, r2
 801adc2:	00db      	lsls	r3, r3, #3
 801adc4:	440b      	add	r3, r1
 801adc6:	3312      	adds	r3, #18
 801adc8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801adca:	2b04      	cmp	r3, #4
 801adcc:	d903      	bls.n	801add6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801adce:	6878      	ldr	r0, [r7, #4]
 801add0:	f7ff ff80 	bl	801acd4 <etharp_free_entry>
 801add4:	e04a      	b.n	801ae6c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801add6:	492b      	ldr	r1, [pc, #172]	@ (801ae84 <etharp_tmr+0x14c>)
 801add8:	687a      	ldr	r2, [r7, #4]
 801adda:	4613      	mov	r3, r2
 801addc:	005b      	lsls	r3, r3, #1
 801adde:	4413      	add	r3, r2
 801ade0:	00db      	lsls	r3, r3, #3
 801ade2:	440b      	add	r3, r1
 801ade4:	3314      	adds	r3, #20
 801ade6:	781b      	ldrb	r3, [r3, #0]
 801ade8:	2b03      	cmp	r3, #3
 801adea:	d10a      	bne.n	801ae02 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801adec:	4925      	ldr	r1, [pc, #148]	@ (801ae84 <etharp_tmr+0x14c>)
 801adee:	687a      	ldr	r2, [r7, #4]
 801adf0:	4613      	mov	r3, r2
 801adf2:	005b      	lsls	r3, r3, #1
 801adf4:	4413      	add	r3, r2
 801adf6:	00db      	lsls	r3, r3, #3
 801adf8:	440b      	add	r3, r1
 801adfa:	3314      	adds	r3, #20
 801adfc:	2204      	movs	r2, #4
 801adfe:	701a      	strb	r2, [r3, #0]
 801ae00:	e034      	b.n	801ae6c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801ae02:	4920      	ldr	r1, [pc, #128]	@ (801ae84 <etharp_tmr+0x14c>)
 801ae04:	687a      	ldr	r2, [r7, #4]
 801ae06:	4613      	mov	r3, r2
 801ae08:	005b      	lsls	r3, r3, #1
 801ae0a:	4413      	add	r3, r2
 801ae0c:	00db      	lsls	r3, r3, #3
 801ae0e:	440b      	add	r3, r1
 801ae10:	3314      	adds	r3, #20
 801ae12:	781b      	ldrb	r3, [r3, #0]
 801ae14:	2b04      	cmp	r3, #4
 801ae16:	d10a      	bne.n	801ae2e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801ae18:	491a      	ldr	r1, [pc, #104]	@ (801ae84 <etharp_tmr+0x14c>)
 801ae1a:	687a      	ldr	r2, [r7, #4]
 801ae1c:	4613      	mov	r3, r2
 801ae1e:	005b      	lsls	r3, r3, #1
 801ae20:	4413      	add	r3, r2
 801ae22:	00db      	lsls	r3, r3, #3
 801ae24:	440b      	add	r3, r1
 801ae26:	3314      	adds	r3, #20
 801ae28:	2202      	movs	r2, #2
 801ae2a:	701a      	strb	r2, [r3, #0]
 801ae2c:	e01e      	b.n	801ae6c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801ae2e:	4915      	ldr	r1, [pc, #84]	@ (801ae84 <etharp_tmr+0x14c>)
 801ae30:	687a      	ldr	r2, [r7, #4]
 801ae32:	4613      	mov	r3, r2
 801ae34:	005b      	lsls	r3, r3, #1
 801ae36:	4413      	add	r3, r2
 801ae38:	00db      	lsls	r3, r3, #3
 801ae3a:	440b      	add	r3, r1
 801ae3c:	3314      	adds	r3, #20
 801ae3e:	781b      	ldrb	r3, [r3, #0]
 801ae40:	2b01      	cmp	r3, #1
 801ae42:	d113      	bne.n	801ae6c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801ae44:	490f      	ldr	r1, [pc, #60]	@ (801ae84 <etharp_tmr+0x14c>)
 801ae46:	687a      	ldr	r2, [r7, #4]
 801ae48:	4613      	mov	r3, r2
 801ae4a:	005b      	lsls	r3, r3, #1
 801ae4c:	4413      	add	r3, r2
 801ae4e:	00db      	lsls	r3, r3, #3
 801ae50:	440b      	add	r3, r1
 801ae52:	3308      	adds	r3, #8
 801ae54:	6818      	ldr	r0, [r3, #0]
 801ae56:	687a      	ldr	r2, [r7, #4]
 801ae58:	4613      	mov	r3, r2
 801ae5a:	005b      	lsls	r3, r3, #1
 801ae5c:	4413      	add	r3, r2
 801ae5e:	00db      	lsls	r3, r3, #3
 801ae60:	4a08      	ldr	r2, [pc, #32]	@ (801ae84 <etharp_tmr+0x14c>)
 801ae62:	4413      	add	r3, r2
 801ae64:	3304      	adds	r3, #4
 801ae66:	4619      	mov	r1, r3
 801ae68:	f000 fe3e 	bl	801bae8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801ae6c:	687b      	ldr	r3, [r7, #4]
 801ae6e:	3301      	adds	r3, #1
 801ae70:	607b      	str	r3, [r7, #4]
 801ae72:	687b      	ldr	r3, [r7, #4]
 801ae74:	2b09      	cmp	r3, #9
 801ae76:	f77f af65 	ble.w	801ad44 <etharp_tmr+0xc>
      }
    }
  }
}
 801ae7a:	bf00      	nop
 801ae7c:	bf00      	nop
 801ae7e:	3708      	adds	r7, #8
 801ae80:	46bd      	mov	sp, r7
 801ae82:	bd80      	pop	{r7, pc}
 801ae84:	2000cb20 	.word	0x2000cb20

0801ae88 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801ae88:	b580      	push	{r7, lr}
 801ae8a:	b08a      	sub	sp, #40	@ 0x28
 801ae8c:	af00      	add	r7, sp, #0
 801ae8e:	60f8      	str	r0, [r7, #12]
 801ae90:	460b      	mov	r3, r1
 801ae92:	607a      	str	r2, [r7, #4]
 801ae94:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801ae96:	230a      	movs	r3, #10
 801ae98:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801ae9a:	230a      	movs	r3, #10
 801ae9c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801ae9e:	230a      	movs	r3, #10
 801aea0:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 801aea2:	2300      	movs	r3, #0
 801aea4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801aea6:	230a      	movs	r3, #10
 801aea8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801aeaa:	2300      	movs	r3, #0
 801aeac:	83bb      	strh	r3, [r7, #28]
 801aeae:	2300      	movs	r3, #0
 801aeb0:	837b      	strh	r3, [r7, #26]
 801aeb2:	2300      	movs	r3, #0
 801aeb4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801aeb6:	2300      	movs	r3, #0
 801aeb8:	843b      	strh	r3, [r7, #32]
 801aeba:	e0ae      	b.n	801b01a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801aebc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801aec0:	49a6      	ldr	r1, [pc, #664]	@ (801b15c <etharp_find_entry+0x2d4>)
 801aec2:	4613      	mov	r3, r2
 801aec4:	005b      	lsls	r3, r3, #1
 801aec6:	4413      	add	r3, r2
 801aec8:	00db      	lsls	r3, r3, #3
 801aeca:	440b      	add	r3, r1
 801aecc:	3314      	adds	r3, #20
 801aece:	781b      	ldrb	r3, [r3, #0]
 801aed0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801aed2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801aed6:	2b0a      	cmp	r3, #10
 801aed8:	d105      	bne.n	801aee6 <etharp_find_entry+0x5e>
 801aeda:	7dfb      	ldrb	r3, [r7, #23]
 801aedc:	2b00      	cmp	r3, #0
 801aede:	d102      	bne.n	801aee6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801aee0:	8c3b      	ldrh	r3, [r7, #32]
 801aee2:	847b      	strh	r3, [r7, #34]	@ 0x22
 801aee4:	e095      	b.n	801b012 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801aee6:	7dfb      	ldrb	r3, [r7, #23]
 801aee8:	2b00      	cmp	r3, #0
 801aeea:	f000 8092 	beq.w	801b012 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801aeee:	7dfb      	ldrb	r3, [r7, #23]
 801aef0:	2b01      	cmp	r3, #1
 801aef2:	d009      	beq.n	801af08 <etharp_find_entry+0x80>
 801aef4:	7dfb      	ldrb	r3, [r7, #23]
 801aef6:	2b01      	cmp	r3, #1
 801aef8:	d806      	bhi.n	801af08 <etharp_find_entry+0x80>
 801aefa:	4b99      	ldr	r3, [pc, #612]	@ (801b160 <etharp_find_entry+0x2d8>)
 801aefc:	f240 1223 	movw	r2, #291	@ 0x123
 801af00:	4998      	ldr	r1, [pc, #608]	@ (801b164 <etharp_find_entry+0x2dc>)
 801af02:	4899      	ldr	r0, [pc, #612]	@ (801b168 <etharp_find_entry+0x2e0>)
 801af04:	f003 f9c2 	bl	801e28c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801af08:	68fb      	ldr	r3, [r7, #12]
 801af0a:	2b00      	cmp	r3, #0
 801af0c:	d020      	beq.n	801af50 <etharp_find_entry+0xc8>
 801af0e:	68fb      	ldr	r3, [r7, #12]
 801af10:	6819      	ldr	r1, [r3, #0]
 801af12:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801af16:	4891      	ldr	r0, [pc, #580]	@ (801b15c <etharp_find_entry+0x2d4>)
 801af18:	4613      	mov	r3, r2
 801af1a:	005b      	lsls	r3, r3, #1
 801af1c:	4413      	add	r3, r2
 801af1e:	00db      	lsls	r3, r3, #3
 801af20:	4403      	add	r3, r0
 801af22:	3304      	adds	r3, #4
 801af24:	681b      	ldr	r3, [r3, #0]
 801af26:	4299      	cmp	r1, r3
 801af28:	d112      	bne.n	801af50 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801af2a:	687b      	ldr	r3, [r7, #4]
 801af2c:	2b00      	cmp	r3, #0
 801af2e:	d00c      	beq.n	801af4a <etharp_find_entry+0xc2>
 801af30:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801af34:	4989      	ldr	r1, [pc, #548]	@ (801b15c <etharp_find_entry+0x2d4>)
 801af36:	4613      	mov	r3, r2
 801af38:	005b      	lsls	r3, r3, #1
 801af3a:	4413      	add	r3, r2
 801af3c:	00db      	lsls	r3, r3, #3
 801af3e:	440b      	add	r3, r1
 801af40:	3308      	adds	r3, #8
 801af42:	681b      	ldr	r3, [r3, #0]
 801af44:	687a      	ldr	r2, [r7, #4]
 801af46:	429a      	cmp	r2, r3
 801af48:	d102      	bne.n	801af50 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801af4a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801af4e:	e100      	b.n	801b152 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801af50:	7dfb      	ldrb	r3, [r7, #23]
 801af52:	2b01      	cmp	r3, #1
 801af54:	d140      	bne.n	801afd8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801af56:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801af5a:	4980      	ldr	r1, [pc, #512]	@ (801b15c <etharp_find_entry+0x2d4>)
 801af5c:	4613      	mov	r3, r2
 801af5e:	005b      	lsls	r3, r3, #1
 801af60:	4413      	add	r3, r2
 801af62:	00db      	lsls	r3, r3, #3
 801af64:	440b      	add	r3, r1
 801af66:	681b      	ldr	r3, [r3, #0]
 801af68:	2b00      	cmp	r3, #0
 801af6a:	d01a      	beq.n	801afa2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801af6c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801af70:	497a      	ldr	r1, [pc, #488]	@ (801b15c <etharp_find_entry+0x2d4>)
 801af72:	4613      	mov	r3, r2
 801af74:	005b      	lsls	r3, r3, #1
 801af76:	4413      	add	r3, r2
 801af78:	00db      	lsls	r3, r3, #3
 801af7a:	440b      	add	r3, r1
 801af7c:	3312      	adds	r3, #18
 801af7e:	881b      	ldrh	r3, [r3, #0]
 801af80:	8bba      	ldrh	r2, [r7, #28]
 801af82:	429a      	cmp	r2, r3
 801af84:	d845      	bhi.n	801b012 <etharp_find_entry+0x18a>
            old_queue = i;
 801af86:	8c3b      	ldrh	r3, [r7, #32]
 801af88:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801af8a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801af8e:	4973      	ldr	r1, [pc, #460]	@ (801b15c <etharp_find_entry+0x2d4>)
 801af90:	4613      	mov	r3, r2
 801af92:	005b      	lsls	r3, r3, #1
 801af94:	4413      	add	r3, r2
 801af96:	00db      	lsls	r3, r3, #3
 801af98:	440b      	add	r3, r1
 801af9a:	3312      	adds	r3, #18
 801af9c:	881b      	ldrh	r3, [r3, #0]
 801af9e:	83bb      	strh	r3, [r7, #28]
 801afa0:	e037      	b.n	801b012 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801afa2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801afa6:	496d      	ldr	r1, [pc, #436]	@ (801b15c <etharp_find_entry+0x2d4>)
 801afa8:	4613      	mov	r3, r2
 801afaa:	005b      	lsls	r3, r3, #1
 801afac:	4413      	add	r3, r2
 801afae:	00db      	lsls	r3, r3, #3
 801afb0:	440b      	add	r3, r1
 801afb2:	3312      	adds	r3, #18
 801afb4:	881b      	ldrh	r3, [r3, #0]
 801afb6:	8b7a      	ldrh	r2, [r7, #26]
 801afb8:	429a      	cmp	r2, r3
 801afba:	d82a      	bhi.n	801b012 <etharp_find_entry+0x18a>
            old_pending = i;
 801afbc:	8c3b      	ldrh	r3, [r7, #32]
 801afbe:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 801afc0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801afc4:	4965      	ldr	r1, [pc, #404]	@ (801b15c <etharp_find_entry+0x2d4>)
 801afc6:	4613      	mov	r3, r2
 801afc8:	005b      	lsls	r3, r3, #1
 801afca:	4413      	add	r3, r2
 801afcc:	00db      	lsls	r3, r3, #3
 801afce:	440b      	add	r3, r1
 801afd0:	3312      	adds	r3, #18
 801afd2:	881b      	ldrh	r3, [r3, #0]
 801afd4:	837b      	strh	r3, [r7, #26]
 801afd6:	e01c      	b.n	801b012 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801afd8:	7dfb      	ldrb	r3, [r7, #23]
 801afda:	2b01      	cmp	r3, #1
 801afdc:	d919      	bls.n	801b012 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801afde:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801afe2:	495e      	ldr	r1, [pc, #376]	@ (801b15c <etharp_find_entry+0x2d4>)
 801afe4:	4613      	mov	r3, r2
 801afe6:	005b      	lsls	r3, r3, #1
 801afe8:	4413      	add	r3, r2
 801afea:	00db      	lsls	r3, r3, #3
 801afec:	440b      	add	r3, r1
 801afee:	3312      	adds	r3, #18
 801aff0:	881b      	ldrh	r3, [r3, #0]
 801aff2:	8b3a      	ldrh	r2, [r7, #24]
 801aff4:	429a      	cmp	r2, r3
 801aff6:	d80c      	bhi.n	801b012 <etharp_find_entry+0x18a>
            old_stable = i;
 801aff8:	8c3b      	ldrh	r3, [r7, #32]
 801affa:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 801affc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b000:	4956      	ldr	r1, [pc, #344]	@ (801b15c <etharp_find_entry+0x2d4>)
 801b002:	4613      	mov	r3, r2
 801b004:	005b      	lsls	r3, r3, #1
 801b006:	4413      	add	r3, r2
 801b008:	00db      	lsls	r3, r3, #3
 801b00a:	440b      	add	r3, r1
 801b00c:	3312      	adds	r3, #18
 801b00e:	881b      	ldrh	r3, [r3, #0]
 801b010:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801b012:	8c3b      	ldrh	r3, [r7, #32]
 801b014:	3301      	adds	r3, #1
 801b016:	b29b      	uxth	r3, r3
 801b018:	843b      	strh	r3, [r7, #32]
 801b01a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801b01e:	2b09      	cmp	r3, #9
 801b020:	f77f af4c 	ble.w	801aebc <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801b024:	7afb      	ldrb	r3, [r7, #11]
 801b026:	f003 0302 	and.w	r3, r3, #2
 801b02a:	2b00      	cmp	r3, #0
 801b02c:	d108      	bne.n	801b040 <etharp_find_entry+0x1b8>
 801b02e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801b032:	2b0a      	cmp	r3, #10
 801b034:	d107      	bne.n	801b046 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801b036:	7afb      	ldrb	r3, [r7, #11]
 801b038:	f003 0301 	and.w	r3, r3, #1
 801b03c:	2b00      	cmp	r3, #0
 801b03e:	d102      	bne.n	801b046 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801b040:	f04f 33ff 	mov.w	r3, #4294967295
 801b044:	e085      	b.n	801b152 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801b046:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801b04a:	2b09      	cmp	r3, #9
 801b04c:	dc02      	bgt.n	801b054 <etharp_find_entry+0x1cc>
    i = empty;
 801b04e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b050:	843b      	strh	r3, [r7, #32]
 801b052:	e039      	b.n	801b0c8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801b054:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 801b058:	2b09      	cmp	r3, #9
 801b05a:	dc14      	bgt.n	801b086 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801b05c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801b05e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801b060:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b064:	493d      	ldr	r1, [pc, #244]	@ (801b15c <etharp_find_entry+0x2d4>)
 801b066:	4613      	mov	r3, r2
 801b068:	005b      	lsls	r3, r3, #1
 801b06a:	4413      	add	r3, r2
 801b06c:	00db      	lsls	r3, r3, #3
 801b06e:	440b      	add	r3, r1
 801b070:	681b      	ldr	r3, [r3, #0]
 801b072:	2b00      	cmp	r3, #0
 801b074:	d018      	beq.n	801b0a8 <etharp_find_entry+0x220>
 801b076:	4b3a      	ldr	r3, [pc, #232]	@ (801b160 <etharp_find_entry+0x2d8>)
 801b078:	f240 126d 	movw	r2, #365	@ 0x16d
 801b07c:	493b      	ldr	r1, [pc, #236]	@ (801b16c <etharp_find_entry+0x2e4>)
 801b07e:	483a      	ldr	r0, [pc, #232]	@ (801b168 <etharp_find_entry+0x2e0>)
 801b080:	f003 f904 	bl	801e28c <iprintf>
 801b084:	e010      	b.n	801b0a8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801b086:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801b08a:	2b09      	cmp	r3, #9
 801b08c:	dc02      	bgt.n	801b094 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801b08e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801b090:	843b      	strh	r3, [r7, #32]
 801b092:	e009      	b.n	801b0a8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801b094:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801b098:	2b09      	cmp	r3, #9
 801b09a:	dc02      	bgt.n	801b0a2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801b09c:	8bfb      	ldrh	r3, [r7, #30]
 801b09e:	843b      	strh	r3, [r7, #32]
 801b0a0:	e002      	b.n	801b0a8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801b0a2:	f04f 33ff 	mov.w	r3, #4294967295
 801b0a6:	e054      	b.n	801b152 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801b0a8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801b0ac:	2b09      	cmp	r3, #9
 801b0ae:	dd06      	ble.n	801b0be <etharp_find_entry+0x236>
 801b0b0:	4b2b      	ldr	r3, [pc, #172]	@ (801b160 <etharp_find_entry+0x2d8>)
 801b0b2:	f240 127f 	movw	r2, #383	@ 0x17f
 801b0b6:	492e      	ldr	r1, [pc, #184]	@ (801b170 <etharp_find_entry+0x2e8>)
 801b0b8:	482b      	ldr	r0, [pc, #172]	@ (801b168 <etharp_find_entry+0x2e0>)
 801b0ba:	f003 f8e7 	bl	801e28c <iprintf>
    etharp_free_entry(i);
 801b0be:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801b0c2:	4618      	mov	r0, r3
 801b0c4:	f7ff fe06 	bl	801acd4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801b0c8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801b0cc:	2b09      	cmp	r3, #9
 801b0ce:	dd06      	ble.n	801b0de <etharp_find_entry+0x256>
 801b0d0:	4b23      	ldr	r3, [pc, #140]	@ (801b160 <etharp_find_entry+0x2d8>)
 801b0d2:	f240 1283 	movw	r2, #387	@ 0x183
 801b0d6:	4926      	ldr	r1, [pc, #152]	@ (801b170 <etharp_find_entry+0x2e8>)
 801b0d8:	4823      	ldr	r0, [pc, #140]	@ (801b168 <etharp_find_entry+0x2e0>)
 801b0da:	f003 f8d7 	bl	801e28c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801b0de:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b0e2:	491e      	ldr	r1, [pc, #120]	@ (801b15c <etharp_find_entry+0x2d4>)
 801b0e4:	4613      	mov	r3, r2
 801b0e6:	005b      	lsls	r3, r3, #1
 801b0e8:	4413      	add	r3, r2
 801b0ea:	00db      	lsls	r3, r3, #3
 801b0ec:	440b      	add	r3, r1
 801b0ee:	3314      	adds	r3, #20
 801b0f0:	781b      	ldrb	r3, [r3, #0]
 801b0f2:	2b00      	cmp	r3, #0
 801b0f4:	d006      	beq.n	801b104 <etharp_find_entry+0x27c>
 801b0f6:	4b1a      	ldr	r3, [pc, #104]	@ (801b160 <etharp_find_entry+0x2d8>)
 801b0f8:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 801b0fc:	491d      	ldr	r1, [pc, #116]	@ (801b174 <etharp_find_entry+0x2ec>)
 801b0fe:	481a      	ldr	r0, [pc, #104]	@ (801b168 <etharp_find_entry+0x2e0>)
 801b100:	f003 f8c4 	bl	801e28c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801b104:	68fb      	ldr	r3, [r7, #12]
 801b106:	2b00      	cmp	r3, #0
 801b108:	d00b      	beq.n	801b122 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801b10a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b10e:	68fb      	ldr	r3, [r7, #12]
 801b110:	6819      	ldr	r1, [r3, #0]
 801b112:	4812      	ldr	r0, [pc, #72]	@ (801b15c <etharp_find_entry+0x2d4>)
 801b114:	4613      	mov	r3, r2
 801b116:	005b      	lsls	r3, r3, #1
 801b118:	4413      	add	r3, r2
 801b11a:	00db      	lsls	r3, r3, #3
 801b11c:	4403      	add	r3, r0
 801b11e:	3304      	adds	r3, #4
 801b120:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801b122:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b126:	490d      	ldr	r1, [pc, #52]	@ (801b15c <etharp_find_entry+0x2d4>)
 801b128:	4613      	mov	r3, r2
 801b12a:	005b      	lsls	r3, r3, #1
 801b12c:	4413      	add	r3, r2
 801b12e:	00db      	lsls	r3, r3, #3
 801b130:	440b      	add	r3, r1
 801b132:	3312      	adds	r3, #18
 801b134:	2200      	movs	r2, #0
 801b136:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801b138:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b13c:	4907      	ldr	r1, [pc, #28]	@ (801b15c <etharp_find_entry+0x2d4>)
 801b13e:	4613      	mov	r3, r2
 801b140:	005b      	lsls	r3, r3, #1
 801b142:	4413      	add	r3, r2
 801b144:	00db      	lsls	r3, r3, #3
 801b146:	440b      	add	r3, r1
 801b148:	3308      	adds	r3, #8
 801b14a:	687a      	ldr	r2, [r7, #4]
 801b14c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801b14e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801b152:	4618      	mov	r0, r3
 801b154:	3728      	adds	r7, #40	@ 0x28
 801b156:	46bd      	mov	sp, r7
 801b158:	bd80      	pop	{r7, pc}
 801b15a:	bf00      	nop
 801b15c:	2000cb20 	.word	0x2000cb20
 801b160:	080236a8 	.word	0x080236a8
 801b164:	080236e0 	.word	0x080236e0
 801b168:	08023720 	.word	0x08023720
 801b16c:	08023748 	.word	0x08023748
 801b170:	08023760 	.word	0x08023760
 801b174:	08023774 	.word	0x08023774

0801b178 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801b178:	b580      	push	{r7, lr}
 801b17a:	b088      	sub	sp, #32
 801b17c:	af02      	add	r7, sp, #8
 801b17e:	60f8      	str	r0, [r7, #12]
 801b180:	60b9      	str	r1, [r7, #8]
 801b182:	607a      	str	r2, [r7, #4]
 801b184:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801b186:	68fb      	ldr	r3, [r7, #12]
 801b188:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801b18c:	2b06      	cmp	r3, #6
 801b18e:	d006      	beq.n	801b19e <etharp_update_arp_entry+0x26>
 801b190:	4b48      	ldr	r3, [pc, #288]	@ (801b2b4 <etharp_update_arp_entry+0x13c>)
 801b192:	f240 12a9 	movw	r2, #425	@ 0x1a9
 801b196:	4948      	ldr	r1, [pc, #288]	@ (801b2b8 <etharp_update_arp_entry+0x140>)
 801b198:	4848      	ldr	r0, [pc, #288]	@ (801b2bc <etharp_update_arp_entry+0x144>)
 801b19a:	f003 f877 	bl	801e28c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801b19e:	68bb      	ldr	r3, [r7, #8]
 801b1a0:	2b00      	cmp	r3, #0
 801b1a2:	d012      	beq.n	801b1ca <etharp_update_arp_entry+0x52>
 801b1a4:	68bb      	ldr	r3, [r7, #8]
 801b1a6:	681b      	ldr	r3, [r3, #0]
 801b1a8:	2b00      	cmp	r3, #0
 801b1aa:	d00e      	beq.n	801b1ca <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801b1ac:	68bb      	ldr	r3, [r7, #8]
 801b1ae:	681b      	ldr	r3, [r3, #0]
 801b1b0:	68f9      	ldr	r1, [r7, #12]
 801b1b2:	4618      	mov	r0, r3
 801b1b4:	f001 f8cc 	bl	801c350 <ip4_addr_isbroadcast_u32>
 801b1b8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801b1ba:	2b00      	cmp	r3, #0
 801b1bc:	d105      	bne.n	801b1ca <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801b1be:	68bb      	ldr	r3, [r7, #8]
 801b1c0:	681b      	ldr	r3, [r3, #0]
 801b1c2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801b1c6:	2be0      	cmp	r3, #224	@ 0xe0
 801b1c8:	d102      	bne.n	801b1d0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801b1ca:	f06f 030f 	mvn.w	r3, #15
 801b1ce:	e06c      	b.n	801b2aa <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801b1d0:	78fb      	ldrb	r3, [r7, #3]
 801b1d2:	68fa      	ldr	r2, [r7, #12]
 801b1d4:	4619      	mov	r1, r3
 801b1d6:	68b8      	ldr	r0, [r7, #8]
 801b1d8:	f7ff fe56 	bl	801ae88 <etharp_find_entry>
 801b1dc:	4603      	mov	r3, r0
 801b1de:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801b1e0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801b1e4:	2b00      	cmp	r3, #0
 801b1e6:	da02      	bge.n	801b1ee <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801b1e8:	8afb      	ldrh	r3, [r7, #22]
 801b1ea:	b25b      	sxtb	r3, r3
 801b1ec:	e05d      	b.n	801b2aa <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801b1ee:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b1f2:	4933      	ldr	r1, [pc, #204]	@ (801b2c0 <etharp_update_arp_entry+0x148>)
 801b1f4:	4613      	mov	r3, r2
 801b1f6:	005b      	lsls	r3, r3, #1
 801b1f8:	4413      	add	r3, r2
 801b1fa:	00db      	lsls	r3, r3, #3
 801b1fc:	440b      	add	r3, r1
 801b1fe:	3314      	adds	r3, #20
 801b200:	2202      	movs	r2, #2
 801b202:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801b204:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b208:	492d      	ldr	r1, [pc, #180]	@ (801b2c0 <etharp_update_arp_entry+0x148>)
 801b20a:	4613      	mov	r3, r2
 801b20c:	005b      	lsls	r3, r3, #1
 801b20e:	4413      	add	r3, r2
 801b210:	00db      	lsls	r3, r3, #3
 801b212:	440b      	add	r3, r1
 801b214:	3308      	adds	r3, #8
 801b216:	68fa      	ldr	r2, [r7, #12]
 801b218:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801b21a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b21e:	4613      	mov	r3, r2
 801b220:	005b      	lsls	r3, r3, #1
 801b222:	4413      	add	r3, r2
 801b224:	00db      	lsls	r3, r3, #3
 801b226:	3308      	adds	r3, #8
 801b228:	4a25      	ldr	r2, [pc, #148]	@ (801b2c0 <etharp_update_arp_entry+0x148>)
 801b22a:	4413      	add	r3, r2
 801b22c:	3304      	adds	r3, #4
 801b22e:	2206      	movs	r2, #6
 801b230:	6879      	ldr	r1, [r7, #4]
 801b232:	4618      	mov	r0, r3
 801b234:	f003 f9dd 	bl	801e5f2 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801b238:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b23c:	4920      	ldr	r1, [pc, #128]	@ (801b2c0 <etharp_update_arp_entry+0x148>)
 801b23e:	4613      	mov	r3, r2
 801b240:	005b      	lsls	r3, r3, #1
 801b242:	4413      	add	r3, r2
 801b244:	00db      	lsls	r3, r3, #3
 801b246:	440b      	add	r3, r1
 801b248:	3312      	adds	r3, #18
 801b24a:	2200      	movs	r2, #0
 801b24c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801b24e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b252:	491b      	ldr	r1, [pc, #108]	@ (801b2c0 <etharp_update_arp_entry+0x148>)
 801b254:	4613      	mov	r3, r2
 801b256:	005b      	lsls	r3, r3, #1
 801b258:	4413      	add	r3, r2
 801b25a:	00db      	lsls	r3, r3, #3
 801b25c:	440b      	add	r3, r1
 801b25e:	681b      	ldr	r3, [r3, #0]
 801b260:	2b00      	cmp	r3, #0
 801b262:	d021      	beq.n	801b2a8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801b264:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b268:	4915      	ldr	r1, [pc, #84]	@ (801b2c0 <etharp_update_arp_entry+0x148>)
 801b26a:	4613      	mov	r3, r2
 801b26c:	005b      	lsls	r3, r3, #1
 801b26e:	4413      	add	r3, r2
 801b270:	00db      	lsls	r3, r3, #3
 801b272:	440b      	add	r3, r1
 801b274:	681b      	ldr	r3, [r3, #0]
 801b276:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801b278:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b27c:	4910      	ldr	r1, [pc, #64]	@ (801b2c0 <etharp_update_arp_entry+0x148>)
 801b27e:	4613      	mov	r3, r2
 801b280:	005b      	lsls	r3, r3, #1
 801b282:	4413      	add	r3, r2
 801b284:	00db      	lsls	r3, r3, #3
 801b286:	440b      	add	r3, r1
 801b288:	2200      	movs	r2, #0
 801b28a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801b28c:	68fb      	ldr	r3, [r7, #12]
 801b28e:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801b292:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801b296:	9300      	str	r3, [sp, #0]
 801b298:	687b      	ldr	r3, [r7, #4]
 801b29a:	6939      	ldr	r1, [r7, #16]
 801b29c:	68f8      	ldr	r0, [r7, #12]
 801b29e:	f001 fff5 	bl	801d28c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801b2a2:	6938      	ldr	r0, [r7, #16]
 801b2a4:	f7f8 ff3a 	bl	801411c <pbuf_free>
  }
  return ERR_OK;
 801b2a8:	2300      	movs	r3, #0
}
 801b2aa:	4618      	mov	r0, r3
 801b2ac:	3718      	adds	r7, #24
 801b2ae:	46bd      	mov	sp, r7
 801b2b0:	bd80      	pop	{r7, pc}
 801b2b2:	bf00      	nop
 801b2b4:	080236a8 	.word	0x080236a8
 801b2b8:	080237a0 	.word	0x080237a0
 801b2bc:	08023720 	.word	0x08023720
 801b2c0:	2000cb20 	.word	0x2000cb20

0801b2c4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801b2c4:	b5b0      	push	{r4, r5, r7, lr}
 801b2c6:	b08a      	sub	sp, #40	@ 0x28
 801b2c8:	af04      	add	r7, sp, #16
 801b2ca:	6078      	str	r0, [r7, #4]
 801b2cc:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801b2ce:	683b      	ldr	r3, [r7, #0]
 801b2d0:	2b00      	cmp	r3, #0
 801b2d2:	d107      	bne.n	801b2e4 <etharp_input+0x20>
 801b2d4:	4b3d      	ldr	r3, [pc, #244]	@ (801b3cc <etharp_input+0x108>)
 801b2d6:	f240 228a 	movw	r2, #650	@ 0x28a
 801b2da:	493d      	ldr	r1, [pc, #244]	@ (801b3d0 <etharp_input+0x10c>)
 801b2dc:	483d      	ldr	r0, [pc, #244]	@ (801b3d4 <etharp_input+0x110>)
 801b2de:	f002 ffd5 	bl	801e28c <iprintf>
 801b2e2:	e06f      	b.n	801b3c4 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801b2e4:	687b      	ldr	r3, [r7, #4]
 801b2e6:	685b      	ldr	r3, [r3, #4]
 801b2e8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801b2ea:	693b      	ldr	r3, [r7, #16]
 801b2ec:	881b      	ldrh	r3, [r3, #0]
 801b2ee:	b29b      	uxth	r3, r3
 801b2f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801b2f4:	d10c      	bne.n	801b310 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801b2f6:	693b      	ldr	r3, [r7, #16]
 801b2f8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801b2fa:	2b06      	cmp	r3, #6
 801b2fc:	d108      	bne.n	801b310 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801b2fe:	693b      	ldr	r3, [r7, #16]
 801b300:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801b302:	2b04      	cmp	r3, #4
 801b304:	d104      	bne.n	801b310 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801b306:	693b      	ldr	r3, [r7, #16]
 801b308:	885b      	ldrh	r3, [r3, #2]
 801b30a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801b30c:	2b08      	cmp	r3, #8
 801b30e:	d003      	beq.n	801b318 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801b310:	6878      	ldr	r0, [r7, #4]
 801b312:	f7f8 ff03 	bl	801411c <pbuf_free>
    return;
 801b316:	e055      	b.n	801b3c4 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801b318:	693b      	ldr	r3, [r7, #16]
 801b31a:	330e      	adds	r3, #14
 801b31c:	681b      	ldr	r3, [r3, #0]
 801b31e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801b320:	693b      	ldr	r3, [r7, #16]
 801b322:	3318      	adds	r3, #24
 801b324:	681b      	ldr	r3, [r3, #0]
 801b326:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801b328:	683b      	ldr	r3, [r7, #0]
 801b32a:	3304      	adds	r3, #4
 801b32c:	681b      	ldr	r3, [r3, #0]
 801b32e:	2b00      	cmp	r3, #0
 801b330:	d102      	bne.n	801b338 <etharp_input+0x74>
    for_us = 0;
 801b332:	2300      	movs	r3, #0
 801b334:	75fb      	strb	r3, [r7, #23]
 801b336:	e009      	b.n	801b34c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801b338:	68ba      	ldr	r2, [r7, #8]
 801b33a:	683b      	ldr	r3, [r7, #0]
 801b33c:	3304      	adds	r3, #4
 801b33e:	681b      	ldr	r3, [r3, #0]
 801b340:	429a      	cmp	r2, r3
 801b342:	bf0c      	ite	eq
 801b344:	2301      	moveq	r3, #1
 801b346:	2300      	movne	r3, #0
 801b348:	b2db      	uxtb	r3, r3
 801b34a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801b34c:	693b      	ldr	r3, [r7, #16]
 801b34e:	f103 0208 	add.w	r2, r3, #8
 801b352:	7dfb      	ldrb	r3, [r7, #23]
 801b354:	2b00      	cmp	r3, #0
 801b356:	d001      	beq.n	801b35c <etharp_input+0x98>
 801b358:	2301      	movs	r3, #1
 801b35a:	e000      	b.n	801b35e <etharp_input+0x9a>
 801b35c:	2302      	movs	r3, #2
 801b35e:	f107 010c 	add.w	r1, r7, #12
 801b362:	6838      	ldr	r0, [r7, #0]
 801b364:	f7ff ff08 	bl	801b178 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801b368:	693b      	ldr	r3, [r7, #16]
 801b36a:	88db      	ldrh	r3, [r3, #6]
 801b36c:	b29b      	uxth	r3, r3
 801b36e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801b372:	d003      	beq.n	801b37c <etharp_input+0xb8>
 801b374:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801b378:	d01e      	beq.n	801b3b8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801b37a:	e020      	b.n	801b3be <etharp_input+0xfa>
      if (for_us) {
 801b37c:	7dfb      	ldrb	r3, [r7, #23]
 801b37e:	2b00      	cmp	r3, #0
 801b380:	d01c      	beq.n	801b3bc <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801b382:	683b      	ldr	r3, [r7, #0]
 801b384:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 801b388:	693b      	ldr	r3, [r7, #16]
 801b38a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801b38e:	683b      	ldr	r3, [r7, #0]
 801b390:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 801b394:	683b      	ldr	r3, [r7, #0]
 801b396:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801b398:	693a      	ldr	r2, [r7, #16]
 801b39a:	3208      	adds	r2, #8
        etharp_raw(netif,
 801b39c:	2102      	movs	r1, #2
 801b39e:	9103      	str	r1, [sp, #12]
 801b3a0:	f107 010c 	add.w	r1, r7, #12
 801b3a4:	9102      	str	r1, [sp, #8]
 801b3a6:	9201      	str	r2, [sp, #4]
 801b3a8:	9300      	str	r3, [sp, #0]
 801b3aa:	462b      	mov	r3, r5
 801b3ac:	4622      	mov	r2, r4
 801b3ae:	4601      	mov	r1, r0
 801b3b0:	6838      	ldr	r0, [r7, #0]
 801b3b2:	f000 faeb 	bl	801b98c <etharp_raw>
      break;
 801b3b6:	e001      	b.n	801b3bc <etharp_input+0xf8>
      break;
 801b3b8:	bf00      	nop
 801b3ba:	e000      	b.n	801b3be <etharp_input+0xfa>
      break;
 801b3bc:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801b3be:	6878      	ldr	r0, [r7, #4]
 801b3c0:	f7f8 feac 	bl	801411c <pbuf_free>
}
 801b3c4:	3718      	adds	r7, #24
 801b3c6:	46bd      	mov	sp, r7
 801b3c8:	bdb0      	pop	{r4, r5, r7, pc}
 801b3ca:	bf00      	nop
 801b3cc:	080236a8 	.word	0x080236a8
 801b3d0:	080237f8 	.word	0x080237f8
 801b3d4:	08023720 	.word	0x08023720

0801b3d8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801b3d8:	b580      	push	{r7, lr}
 801b3da:	b086      	sub	sp, #24
 801b3dc:	af02      	add	r7, sp, #8
 801b3de:	60f8      	str	r0, [r7, #12]
 801b3e0:	60b9      	str	r1, [r7, #8]
 801b3e2:	4613      	mov	r3, r2
 801b3e4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801b3e6:	79fa      	ldrb	r2, [r7, #7]
 801b3e8:	4944      	ldr	r1, [pc, #272]	@ (801b4fc <etharp_output_to_arp_index+0x124>)
 801b3ea:	4613      	mov	r3, r2
 801b3ec:	005b      	lsls	r3, r3, #1
 801b3ee:	4413      	add	r3, r2
 801b3f0:	00db      	lsls	r3, r3, #3
 801b3f2:	440b      	add	r3, r1
 801b3f4:	3314      	adds	r3, #20
 801b3f6:	781b      	ldrb	r3, [r3, #0]
 801b3f8:	2b01      	cmp	r3, #1
 801b3fa:	d806      	bhi.n	801b40a <etharp_output_to_arp_index+0x32>
 801b3fc:	4b40      	ldr	r3, [pc, #256]	@ (801b500 <etharp_output_to_arp_index+0x128>)
 801b3fe:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801b402:	4940      	ldr	r1, [pc, #256]	@ (801b504 <etharp_output_to_arp_index+0x12c>)
 801b404:	4840      	ldr	r0, [pc, #256]	@ (801b508 <etharp_output_to_arp_index+0x130>)
 801b406:	f002 ff41 	bl	801e28c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801b40a:	79fa      	ldrb	r2, [r7, #7]
 801b40c:	493b      	ldr	r1, [pc, #236]	@ (801b4fc <etharp_output_to_arp_index+0x124>)
 801b40e:	4613      	mov	r3, r2
 801b410:	005b      	lsls	r3, r3, #1
 801b412:	4413      	add	r3, r2
 801b414:	00db      	lsls	r3, r3, #3
 801b416:	440b      	add	r3, r1
 801b418:	3314      	adds	r3, #20
 801b41a:	781b      	ldrb	r3, [r3, #0]
 801b41c:	2b02      	cmp	r3, #2
 801b41e:	d153      	bne.n	801b4c8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801b420:	79fa      	ldrb	r2, [r7, #7]
 801b422:	4936      	ldr	r1, [pc, #216]	@ (801b4fc <etharp_output_to_arp_index+0x124>)
 801b424:	4613      	mov	r3, r2
 801b426:	005b      	lsls	r3, r3, #1
 801b428:	4413      	add	r3, r2
 801b42a:	00db      	lsls	r3, r3, #3
 801b42c:	440b      	add	r3, r1
 801b42e:	3312      	adds	r3, #18
 801b430:	881b      	ldrh	r3, [r3, #0]
 801b432:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 801b436:	d919      	bls.n	801b46c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801b438:	79fa      	ldrb	r2, [r7, #7]
 801b43a:	4613      	mov	r3, r2
 801b43c:	005b      	lsls	r3, r3, #1
 801b43e:	4413      	add	r3, r2
 801b440:	00db      	lsls	r3, r3, #3
 801b442:	4a2e      	ldr	r2, [pc, #184]	@ (801b4fc <etharp_output_to_arp_index+0x124>)
 801b444:	4413      	add	r3, r2
 801b446:	3304      	adds	r3, #4
 801b448:	4619      	mov	r1, r3
 801b44a:	68f8      	ldr	r0, [r7, #12]
 801b44c:	f000 fb4c 	bl	801bae8 <etharp_request>
 801b450:	4603      	mov	r3, r0
 801b452:	2b00      	cmp	r3, #0
 801b454:	d138      	bne.n	801b4c8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801b456:	79fa      	ldrb	r2, [r7, #7]
 801b458:	4928      	ldr	r1, [pc, #160]	@ (801b4fc <etharp_output_to_arp_index+0x124>)
 801b45a:	4613      	mov	r3, r2
 801b45c:	005b      	lsls	r3, r3, #1
 801b45e:	4413      	add	r3, r2
 801b460:	00db      	lsls	r3, r3, #3
 801b462:	440b      	add	r3, r1
 801b464:	3314      	adds	r3, #20
 801b466:	2203      	movs	r2, #3
 801b468:	701a      	strb	r2, [r3, #0]
 801b46a:	e02d      	b.n	801b4c8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801b46c:	79fa      	ldrb	r2, [r7, #7]
 801b46e:	4923      	ldr	r1, [pc, #140]	@ (801b4fc <etharp_output_to_arp_index+0x124>)
 801b470:	4613      	mov	r3, r2
 801b472:	005b      	lsls	r3, r3, #1
 801b474:	4413      	add	r3, r2
 801b476:	00db      	lsls	r3, r3, #3
 801b478:	440b      	add	r3, r1
 801b47a:	3312      	adds	r3, #18
 801b47c:	881b      	ldrh	r3, [r3, #0]
 801b47e:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 801b482:	d321      	bcc.n	801b4c8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801b484:	79fa      	ldrb	r2, [r7, #7]
 801b486:	4613      	mov	r3, r2
 801b488:	005b      	lsls	r3, r3, #1
 801b48a:	4413      	add	r3, r2
 801b48c:	00db      	lsls	r3, r3, #3
 801b48e:	4a1b      	ldr	r2, [pc, #108]	@ (801b4fc <etharp_output_to_arp_index+0x124>)
 801b490:	4413      	add	r3, r2
 801b492:	1d19      	adds	r1, r3, #4
 801b494:	79fa      	ldrb	r2, [r7, #7]
 801b496:	4613      	mov	r3, r2
 801b498:	005b      	lsls	r3, r3, #1
 801b49a:	4413      	add	r3, r2
 801b49c:	00db      	lsls	r3, r3, #3
 801b49e:	3308      	adds	r3, #8
 801b4a0:	4a16      	ldr	r2, [pc, #88]	@ (801b4fc <etharp_output_to_arp_index+0x124>)
 801b4a2:	4413      	add	r3, r2
 801b4a4:	3304      	adds	r3, #4
 801b4a6:	461a      	mov	r2, r3
 801b4a8:	68f8      	ldr	r0, [r7, #12]
 801b4aa:	f000 fafb 	bl	801baa4 <etharp_request_dst>
 801b4ae:	4603      	mov	r3, r0
 801b4b0:	2b00      	cmp	r3, #0
 801b4b2:	d109      	bne.n	801b4c8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801b4b4:	79fa      	ldrb	r2, [r7, #7]
 801b4b6:	4911      	ldr	r1, [pc, #68]	@ (801b4fc <etharp_output_to_arp_index+0x124>)
 801b4b8:	4613      	mov	r3, r2
 801b4ba:	005b      	lsls	r3, r3, #1
 801b4bc:	4413      	add	r3, r2
 801b4be:	00db      	lsls	r3, r3, #3
 801b4c0:	440b      	add	r3, r1
 801b4c2:	3314      	adds	r3, #20
 801b4c4:	2203      	movs	r2, #3
 801b4c6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801b4c8:	68fb      	ldr	r3, [r7, #12]
 801b4ca:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 801b4ce:	79fa      	ldrb	r2, [r7, #7]
 801b4d0:	4613      	mov	r3, r2
 801b4d2:	005b      	lsls	r3, r3, #1
 801b4d4:	4413      	add	r3, r2
 801b4d6:	00db      	lsls	r3, r3, #3
 801b4d8:	3308      	adds	r3, #8
 801b4da:	4a08      	ldr	r2, [pc, #32]	@ (801b4fc <etharp_output_to_arp_index+0x124>)
 801b4dc:	4413      	add	r3, r2
 801b4de:	3304      	adds	r3, #4
 801b4e0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801b4e4:	9200      	str	r2, [sp, #0]
 801b4e6:	460a      	mov	r2, r1
 801b4e8:	68b9      	ldr	r1, [r7, #8]
 801b4ea:	68f8      	ldr	r0, [r7, #12]
 801b4ec:	f001 fece 	bl	801d28c <ethernet_output>
 801b4f0:	4603      	mov	r3, r0
}
 801b4f2:	4618      	mov	r0, r3
 801b4f4:	3710      	adds	r7, #16
 801b4f6:	46bd      	mov	sp, r7
 801b4f8:	bd80      	pop	{r7, pc}
 801b4fa:	bf00      	nop
 801b4fc:	2000cb20 	.word	0x2000cb20
 801b500:	080236a8 	.word	0x080236a8
 801b504:	08023818 	.word	0x08023818
 801b508:	08023720 	.word	0x08023720

0801b50c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801b50c:	b580      	push	{r7, lr}
 801b50e:	b08a      	sub	sp, #40	@ 0x28
 801b510:	af02      	add	r7, sp, #8
 801b512:	60f8      	str	r0, [r7, #12]
 801b514:	60b9      	str	r1, [r7, #8]
 801b516:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801b518:	687b      	ldr	r3, [r7, #4]
 801b51a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801b51c:	68fb      	ldr	r3, [r7, #12]
 801b51e:	2b00      	cmp	r3, #0
 801b520:	d106      	bne.n	801b530 <etharp_output+0x24>
 801b522:	4b73      	ldr	r3, [pc, #460]	@ (801b6f0 <etharp_output+0x1e4>)
 801b524:	f240 321e 	movw	r2, #798	@ 0x31e
 801b528:	4972      	ldr	r1, [pc, #456]	@ (801b6f4 <etharp_output+0x1e8>)
 801b52a:	4873      	ldr	r0, [pc, #460]	@ (801b6f8 <etharp_output+0x1ec>)
 801b52c:	f002 feae 	bl	801e28c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801b530:	68bb      	ldr	r3, [r7, #8]
 801b532:	2b00      	cmp	r3, #0
 801b534:	d106      	bne.n	801b544 <etharp_output+0x38>
 801b536:	4b6e      	ldr	r3, [pc, #440]	@ (801b6f0 <etharp_output+0x1e4>)
 801b538:	f240 321f 	movw	r2, #799	@ 0x31f
 801b53c:	496f      	ldr	r1, [pc, #444]	@ (801b6fc <etharp_output+0x1f0>)
 801b53e:	486e      	ldr	r0, [pc, #440]	@ (801b6f8 <etharp_output+0x1ec>)
 801b540:	f002 fea4 	bl	801e28c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801b544:	687b      	ldr	r3, [r7, #4]
 801b546:	2b00      	cmp	r3, #0
 801b548:	d106      	bne.n	801b558 <etharp_output+0x4c>
 801b54a:	4b69      	ldr	r3, [pc, #420]	@ (801b6f0 <etharp_output+0x1e4>)
 801b54c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 801b550:	496b      	ldr	r1, [pc, #428]	@ (801b700 <etharp_output+0x1f4>)
 801b552:	4869      	ldr	r0, [pc, #420]	@ (801b6f8 <etharp_output+0x1ec>)
 801b554:	f002 fe9a 	bl	801e28c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801b558:	687b      	ldr	r3, [r7, #4]
 801b55a:	681b      	ldr	r3, [r3, #0]
 801b55c:	68f9      	ldr	r1, [r7, #12]
 801b55e:	4618      	mov	r0, r3
 801b560:	f000 fef6 	bl	801c350 <ip4_addr_isbroadcast_u32>
 801b564:	4603      	mov	r3, r0
 801b566:	2b00      	cmp	r3, #0
 801b568:	d002      	beq.n	801b570 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801b56a:	4b66      	ldr	r3, [pc, #408]	@ (801b704 <etharp_output+0x1f8>)
 801b56c:	61fb      	str	r3, [r7, #28]
 801b56e:	e0af      	b.n	801b6d0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801b570:	687b      	ldr	r3, [r7, #4]
 801b572:	681b      	ldr	r3, [r3, #0]
 801b574:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801b578:	2be0      	cmp	r3, #224	@ 0xe0
 801b57a:	d118      	bne.n	801b5ae <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801b57c:	2301      	movs	r3, #1
 801b57e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801b580:	2300      	movs	r3, #0
 801b582:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801b584:	235e      	movs	r3, #94	@ 0x5e
 801b586:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801b588:	687b      	ldr	r3, [r7, #4]
 801b58a:	3301      	adds	r3, #1
 801b58c:	781b      	ldrb	r3, [r3, #0]
 801b58e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801b592:	b2db      	uxtb	r3, r3
 801b594:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801b596:	687b      	ldr	r3, [r7, #4]
 801b598:	3302      	adds	r3, #2
 801b59a:	781b      	ldrb	r3, [r3, #0]
 801b59c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801b59e:	687b      	ldr	r3, [r7, #4]
 801b5a0:	3303      	adds	r3, #3
 801b5a2:	781b      	ldrb	r3, [r3, #0]
 801b5a4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801b5a6:	f107 0310 	add.w	r3, r7, #16
 801b5aa:	61fb      	str	r3, [r7, #28]
 801b5ac:	e090      	b.n	801b6d0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801b5ae:	687b      	ldr	r3, [r7, #4]
 801b5b0:	681a      	ldr	r2, [r3, #0]
 801b5b2:	68fb      	ldr	r3, [r7, #12]
 801b5b4:	3304      	adds	r3, #4
 801b5b6:	681b      	ldr	r3, [r3, #0]
 801b5b8:	405a      	eors	r2, r3
 801b5ba:	68fb      	ldr	r3, [r7, #12]
 801b5bc:	3308      	adds	r3, #8
 801b5be:	681b      	ldr	r3, [r3, #0]
 801b5c0:	4013      	ands	r3, r2
 801b5c2:	2b00      	cmp	r3, #0
 801b5c4:	d012      	beq.n	801b5ec <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801b5c6:	687b      	ldr	r3, [r7, #4]
 801b5c8:	681b      	ldr	r3, [r3, #0]
 801b5ca:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801b5cc:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 801b5d0:	4293      	cmp	r3, r2
 801b5d2:	d00b      	beq.n	801b5ec <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801b5d4:	68fb      	ldr	r3, [r7, #12]
 801b5d6:	330c      	adds	r3, #12
 801b5d8:	681b      	ldr	r3, [r3, #0]
 801b5da:	2b00      	cmp	r3, #0
 801b5dc:	d003      	beq.n	801b5e6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801b5de:	68fb      	ldr	r3, [r7, #12]
 801b5e0:	330c      	adds	r3, #12
 801b5e2:	61bb      	str	r3, [r7, #24]
 801b5e4:	e002      	b.n	801b5ec <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801b5e6:	f06f 0303 	mvn.w	r3, #3
 801b5ea:	e07d      	b.n	801b6e8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801b5ec:	4b46      	ldr	r3, [pc, #280]	@ (801b708 <etharp_output+0x1fc>)
 801b5ee:	781b      	ldrb	r3, [r3, #0]
 801b5f0:	4619      	mov	r1, r3
 801b5f2:	4a46      	ldr	r2, [pc, #280]	@ (801b70c <etharp_output+0x200>)
 801b5f4:	460b      	mov	r3, r1
 801b5f6:	005b      	lsls	r3, r3, #1
 801b5f8:	440b      	add	r3, r1
 801b5fa:	00db      	lsls	r3, r3, #3
 801b5fc:	4413      	add	r3, r2
 801b5fe:	3314      	adds	r3, #20
 801b600:	781b      	ldrb	r3, [r3, #0]
 801b602:	2b01      	cmp	r3, #1
 801b604:	d925      	bls.n	801b652 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801b606:	4b40      	ldr	r3, [pc, #256]	@ (801b708 <etharp_output+0x1fc>)
 801b608:	781b      	ldrb	r3, [r3, #0]
 801b60a:	4619      	mov	r1, r3
 801b60c:	4a3f      	ldr	r2, [pc, #252]	@ (801b70c <etharp_output+0x200>)
 801b60e:	460b      	mov	r3, r1
 801b610:	005b      	lsls	r3, r3, #1
 801b612:	440b      	add	r3, r1
 801b614:	00db      	lsls	r3, r3, #3
 801b616:	4413      	add	r3, r2
 801b618:	3308      	adds	r3, #8
 801b61a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801b61c:	68fa      	ldr	r2, [r7, #12]
 801b61e:	429a      	cmp	r2, r3
 801b620:	d117      	bne.n	801b652 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801b622:	69bb      	ldr	r3, [r7, #24]
 801b624:	681a      	ldr	r2, [r3, #0]
 801b626:	4b38      	ldr	r3, [pc, #224]	@ (801b708 <etharp_output+0x1fc>)
 801b628:	781b      	ldrb	r3, [r3, #0]
 801b62a:	4618      	mov	r0, r3
 801b62c:	4937      	ldr	r1, [pc, #220]	@ (801b70c <etharp_output+0x200>)
 801b62e:	4603      	mov	r3, r0
 801b630:	005b      	lsls	r3, r3, #1
 801b632:	4403      	add	r3, r0
 801b634:	00db      	lsls	r3, r3, #3
 801b636:	440b      	add	r3, r1
 801b638:	3304      	adds	r3, #4
 801b63a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801b63c:	429a      	cmp	r2, r3
 801b63e:	d108      	bne.n	801b652 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801b640:	4b31      	ldr	r3, [pc, #196]	@ (801b708 <etharp_output+0x1fc>)
 801b642:	781b      	ldrb	r3, [r3, #0]
 801b644:	461a      	mov	r2, r3
 801b646:	68b9      	ldr	r1, [r7, #8]
 801b648:	68f8      	ldr	r0, [r7, #12]
 801b64a:	f7ff fec5 	bl	801b3d8 <etharp_output_to_arp_index>
 801b64e:	4603      	mov	r3, r0
 801b650:	e04a      	b.n	801b6e8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801b652:	2300      	movs	r3, #0
 801b654:	75fb      	strb	r3, [r7, #23]
 801b656:	e031      	b.n	801b6bc <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801b658:	7dfa      	ldrb	r2, [r7, #23]
 801b65a:	492c      	ldr	r1, [pc, #176]	@ (801b70c <etharp_output+0x200>)
 801b65c:	4613      	mov	r3, r2
 801b65e:	005b      	lsls	r3, r3, #1
 801b660:	4413      	add	r3, r2
 801b662:	00db      	lsls	r3, r3, #3
 801b664:	440b      	add	r3, r1
 801b666:	3314      	adds	r3, #20
 801b668:	781b      	ldrb	r3, [r3, #0]
 801b66a:	2b01      	cmp	r3, #1
 801b66c:	d923      	bls.n	801b6b6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801b66e:	7dfa      	ldrb	r2, [r7, #23]
 801b670:	4926      	ldr	r1, [pc, #152]	@ (801b70c <etharp_output+0x200>)
 801b672:	4613      	mov	r3, r2
 801b674:	005b      	lsls	r3, r3, #1
 801b676:	4413      	add	r3, r2
 801b678:	00db      	lsls	r3, r3, #3
 801b67a:	440b      	add	r3, r1
 801b67c:	3308      	adds	r3, #8
 801b67e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801b680:	68fa      	ldr	r2, [r7, #12]
 801b682:	429a      	cmp	r2, r3
 801b684:	d117      	bne.n	801b6b6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801b686:	69bb      	ldr	r3, [r7, #24]
 801b688:	6819      	ldr	r1, [r3, #0]
 801b68a:	7dfa      	ldrb	r2, [r7, #23]
 801b68c:	481f      	ldr	r0, [pc, #124]	@ (801b70c <etharp_output+0x200>)
 801b68e:	4613      	mov	r3, r2
 801b690:	005b      	lsls	r3, r3, #1
 801b692:	4413      	add	r3, r2
 801b694:	00db      	lsls	r3, r3, #3
 801b696:	4403      	add	r3, r0
 801b698:	3304      	adds	r3, #4
 801b69a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801b69c:	4299      	cmp	r1, r3
 801b69e:	d10a      	bne.n	801b6b6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801b6a0:	4a19      	ldr	r2, [pc, #100]	@ (801b708 <etharp_output+0x1fc>)
 801b6a2:	7dfb      	ldrb	r3, [r7, #23]
 801b6a4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801b6a6:	7dfb      	ldrb	r3, [r7, #23]
 801b6a8:	461a      	mov	r2, r3
 801b6aa:	68b9      	ldr	r1, [r7, #8]
 801b6ac:	68f8      	ldr	r0, [r7, #12]
 801b6ae:	f7ff fe93 	bl	801b3d8 <etharp_output_to_arp_index>
 801b6b2:	4603      	mov	r3, r0
 801b6b4:	e018      	b.n	801b6e8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801b6b6:	7dfb      	ldrb	r3, [r7, #23]
 801b6b8:	3301      	adds	r3, #1
 801b6ba:	75fb      	strb	r3, [r7, #23]
 801b6bc:	7dfb      	ldrb	r3, [r7, #23]
 801b6be:	2b09      	cmp	r3, #9
 801b6c0:	d9ca      	bls.n	801b658 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801b6c2:	68ba      	ldr	r2, [r7, #8]
 801b6c4:	69b9      	ldr	r1, [r7, #24]
 801b6c6:	68f8      	ldr	r0, [r7, #12]
 801b6c8:	f000 f822 	bl	801b710 <etharp_query>
 801b6cc:	4603      	mov	r3, r0
 801b6ce:	e00b      	b.n	801b6e8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801b6d0:	68fb      	ldr	r3, [r7, #12]
 801b6d2:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801b6d6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801b6da:	9300      	str	r3, [sp, #0]
 801b6dc:	69fb      	ldr	r3, [r7, #28]
 801b6de:	68b9      	ldr	r1, [r7, #8]
 801b6e0:	68f8      	ldr	r0, [r7, #12]
 801b6e2:	f001 fdd3 	bl	801d28c <ethernet_output>
 801b6e6:	4603      	mov	r3, r0
}
 801b6e8:	4618      	mov	r0, r3
 801b6ea:	3720      	adds	r7, #32
 801b6ec:	46bd      	mov	sp, r7
 801b6ee:	bd80      	pop	{r7, pc}
 801b6f0:	080236a8 	.word	0x080236a8
 801b6f4:	080237f8 	.word	0x080237f8
 801b6f8:	08023720 	.word	0x08023720
 801b6fc:	08023848 	.word	0x08023848
 801b700:	080237e8 	.word	0x080237e8
 801b704:	08023ef4 	.word	0x08023ef4
 801b708:	2000cc10 	.word	0x2000cc10
 801b70c:	2000cb20 	.word	0x2000cb20

0801b710 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801b710:	b580      	push	{r7, lr}
 801b712:	b08c      	sub	sp, #48	@ 0x30
 801b714:	af02      	add	r7, sp, #8
 801b716:	60f8      	str	r0, [r7, #12]
 801b718:	60b9      	str	r1, [r7, #8]
 801b71a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801b71c:	68fb      	ldr	r3, [r7, #12]
 801b71e:	3326      	adds	r3, #38	@ 0x26
 801b720:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801b722:	23ff      	movs	r3, #255	@ 0xff
 801b724:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 801b728:	2300      	movs	r3, #0
 801b72a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801b72c:	68bb      	ldr	r3, [r7, #8]
 801b72e:	681b      	ldr	r3, [r3, #0]
 801b730:	68f9      	ldr	r1, [r7, #12]
 801b732:	4618      	mov	r0, r3
 801b734:	f000 fe0c 	bl	801c350 <ip4_addr_isbroadcast_u32>
 801b738:	4603      	mov	r3, r0
 801b73a:	2b00      	cmp	r3, #0
 801b73c:	d10c      	bne.n	801b758 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801b73e:	68bb      	ldr	r3, [r7, #8]
 801b740:	681b      	ldr	r3, [r3, #0]
 801b742:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801b746:	2be0      	cmp	r3, #224	@ 0xe0
 801b748:	d006      	beq.n	801b758 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801b74a:	68bb      	ldr	r3, [r7, #8]
 801b74c:	2b00      	cmp	r3, #0
 801b74e:	d003      	beq.n	801b758 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801b750:	68bb      	ldr	r3, [r7, #8]
 801b752:	681b      	ldr	r3, [r3, #0]
 801b754:	2b00      	cmp	r3, #0
 801b756:	d102      	bne.n	801b75e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801b758:	f06f 030f 	mvn.w	r3, #15
 801b75c:	e101      	b.n	801b962 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801b75e:	68fa      	ldr	r2, [r7, #12]
 801b760:	2101      	movs	r1, #1
 801b762:	68b8      	ldr	r0, [r7, #8]
 801b764:	f7ff fb90 	bl	801ae88 <etharp_find_entry>
 801b768:	4603      	mov	r3, r0
 801b76a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801b76c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801b770:	2b00      	cmp	r3, #0
 801b772:	da02      	bge.n	801b77a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801b774:	8a7b      	ldrh	r3, [r7, #18]
 801b776:	b25b      	sxtb	r3, r3
 801b778:	e0f3      	b.n	801b962 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801b77a:	8a7b      	ldrh	r3, [r7, #18]
 801b77c:	2b7e      	cmp	r3, #126	@ 0x7e
 801b77e:	d906      	bls.n	801b78e <etharp_query+0x7e>
 801b780:	4b7a      	ldr	r3, [pc, #488]	@ (801b96c <etharp_query+0x25c>)
 801b782:	f240 32c1 	movw	r2, #961	@ 0x3c1
 801b786:	497a      	ldr	r1, [pc, #488]	@ (801b970 <etharp_query+0x260>)
 801b788:	487a      	ldr	r0, [pc, #488]	@ (801b974 <etharp_query+0x264>)
 801b78a:	f002 fd7f 	bl	801e28c <iprintf>
  i = (netif_addr_idx_t)i_err;
 801b78e:	8a7b      	ldrh	r3, [r7, #18]
 801b790:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801b792:	7c7a      	ldrb	r2, [r7, #17]
 801b794:	4978      	ldr	r1, [pc, #480]	@ (801b978 <etharp_query+0x268>)
 801b796:	4613      	mov	r3, r2
 801b798:	005b      	lsls	r3, r3, #1
 801b79a:	4413      	add	r3, r2
 801b79c:	00db      	lsls	r3, r3, #3
 801b79e:	440b      	add	r3, r1
 801b7a0:	3314      	adds	r3, #20
 801b7a2:	781b      	ldrb	r3, [r3, #0]
 801b7a4:	2b00      	cmp	r3, #0
 801b7a6:	d115      	bne.n	801b7d4 <etharp_query+0xc4>
    is_new_entry = 1;
 801b7a8:	2301      	movs	r3, #1
 801b7aa:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801b7ac:	7c7a      	ldrb	r2, [r7, #17]
 801b7ae:	4972      	ldr	r1, [pc, #456]	@ (801b978 <etharp_query+0x268>)
 801b7b0:	4613      	mov	r3, r2
 801b7b2:	005b      	lsls	r3, r3, #1
 801b7b4:	4413      	add	r3, r2
 801b7b6:	00db      	lsls	r3, r3, #3
 801b7b8:	440b      	add	r3, r1
 801b7ba:	3314      	adds	r3, #20
 801b7bc:	2201      	movs	r2, #1
 801b7be:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801b7c0:	7c7a      	ldrb	r2, [r7, #17]
 801b7c2:	496d      	ldr	r1, [pc, #436]	@ (801b978 <etharp_query+0x268>)
 801b7c4:	4613      	mov	r3, r2
 801b7c6:	005b      	lsls	r3, r3, #1
 801b7c8:	4413      	add	r3, r2
 801b7ca:	00db      	lsls	r3, r3, #3
 801b7cc:	440b      	add	r3, r1
 801b7ce:	3308      	adds	r3, #8
 801b7d0:	68fa      	ldr	r2, [r7, #12]
 801b7d2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801b7d4:	7c7a      	ldrb	r2, [r7, #17]
 801b7d6:	4968      	ldr	r1, [pc, #416]	@ (801b978 <etharp_query+0x268>)
 801b7d8:	4613      	mov	r3, r2
 801b7da:	005b      	lsls	r3, r3, #1
 801b7dc:	4413      	add	r3, r2
 801b7de:	00db      	lsls	r3, r3, #3
 801b7e0:	440b      	add	r3, r1
 801b7e2:	3314      	adds	r3, #20
 801b7e4:	781b      	ldrb	r3, [r3, #0]
 801b7e6:	2b01      	cmp	r3, #1
 801b7e8:	d011      	beq.n	801b80e <etharp_query+0xfe>
 801b7ea:	7c7a      	ldrb	r2, [r7, #17]
 801b7ec:	4962      	ldr	r1, [pc, #392]	@ (801b978 <etharp_query+0x268>)
 801b7ee:	4613      	mov	r3, r2
 801b7f0:	005b      	lsls	r3, r3, #1
 801b7f2:	4413      	add	r3, r2
 801b7f4:	00db      	lsls	r3, r3, #3
 801b7f6:	440b      	add	r3, r1
 801b7f8:	3314      	adds	r3, #20
 801b7fa:	781b      	ldrb	r3, [r3, #0]
 801b7fc:	2b01      	cmp	r3, #1
 801b7fe:	d806      	bhi.n	801b80e <etharp_query+0xfe>
 801b800:	4b5a      	ldr	r3, [pc, #360]	@ (801b96c <etharp_query+0x25c>)
 801b802:	f240 32cd 	movw	r2, #973	@ 0x3cd
 801b806:	495d      	ldr	r1, [pc, #372]	@ (801b97c <etharp_query+0x26c>)
 801b808:	485a      	ldr	r0, [pc, #360]	@ (801b974 <etharp_query+0x264>)
 801b80a:	f002 fd3f 	bl	801e28c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801b80e:	6a3b      	ldr	r3, [r7, #32]
 801b810:	2b00      	cmp	r3, #0
 801b812:	d102      	bne.n	801b81a <etharp_query+0x10a>
 801b814:	687b      	ldr	r3, [r7, #4]
 801b816:	2b00      	cmp	r3, #0
 801b818:	d10c      	bne.n	801b834 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801b81a:	68b9      	ldr	r1, [r7, #8]
 801b81c:	68f8      	ldr	r0, [r7, #12]
 801b81e:	f000 f963 	bl	801bae8 <etharp_request>
 801b822:	4603      	mov	r3, r0
 801b824:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801b828:	687b      	ldr	r3, [r7, #4]
 801b82a:	2b00      	cmp	r3, #0
 801b82c:	d102      	bne.n	801b834 <etharp_query+0x124>
      return result;
 801b82e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801b832:	e096      	b.n	801b962 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801b834:	687b      	ldr	r3, [r7, #4]
 801b836:	2b00      	cmp	r3, #0
 801b838:	d106      	bne.n	801b848 <etharp_query+0x138>
 801b83a:	4b4c      	ldr	r3, [pc, #304]	@ (801b96c <etharp_query+0x25c>)
 801b83c:	f240 32e1 	movw	r2, #993	@ 0x3e1
 801b840:	494f      	ldr	r1, [pc, #316]	@ (801b980 <etharp_query+0x270>)
 801b842:	484c      	ldr	r0, [pc, #304]	@ (801b974 <etharp_query+0x264>)
 801b844:	f002 fd22 	bl	801e28c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801b848:	7c7a      	ldrb	r2, [r7, #17]
 801b84a:	494b      	ldr	r1, [pc, #300]	@ (801b978 <etharp_query+0x268>)
 801b84c:	4613      	mov	r3, r2
 801b84e:	005b      	lsls	r3, r3, #1
 801b850:	4413      	add	r3, r2
 801b852:	00db      	lsls	r3, r3, #3
 801b854:	440b      	add	r3, r1
 801b856:	3314      	adds	r3, #20
 801b858:	781b      	ldrb	r3, [r3, #0]
 801b85a:	2b01      	cmp	r3, #1
 801b85c:	d917      	bls.n	801b88e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801b85e:	4a49      	ldr	r2, [pc, #292]	@ (801b984 <etharp_query+0x274>)
 801b860:	7c7b      	ldrb	r3, [r7, #17]
 801b862:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801b864:	7c7a      	ldrb	r2, [r7, #17]
 801b866:	4613      	mov	r3, r2
 801b868:	005b      	lsls	r3, r3, #1
 801b86a:	4413      	add	r3, r2
 801b86c:	00db      	lsls	r3, r3, #3
 801b86e:	3308      	adds	r3, #8
 801b870:	4a41      	ldr	r2, [pc, #260]	@ (801b978 <etharp_query+0x268>)
 801b872:	4413      	add	r3, r2
 801b874:	3304      	adds	r3, #4
 801b876:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801b87a:	9200      	str	r2, [sp, #0]
 801b87c:	697a      	ldr	r2, [r7, #20]
 801b87e:	6879      	ldr	r1, [r7, #4]
 801b880:	68f8      	ldr	r0, [r7, #12]
 801b882:	f001 fd03 	bl	801d28c <ethernet_output>
 801b886:	4603      	mov	r3, r0
 801b888:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801b88c:	e067      	b.n	801b95e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801b88e:	7c7a      	ldrb	r2, [r7, #17]
 801b890:	4939      	ldr	r1, [pc, #228]	@ (801b978 <etharp_query+0x268>)
 801b892:	4613      	mov	r3, r2
 801b894:	005b      	lsls	r3, r3, #1
 801b896:	4413      	add	r3, r2
 801b898:	00db      	lsls	r3, r3, #3
 801b89a:	440b      	add	r3, r1
 801b89c:	3314      	adds	r3, #20
 801b89e:	781b      	ldrb	r3, [r3, #0]
 801b8a0:	2b01      	cmp	r3, #1
 801b8a2:	d15c      	bne.n	801b95e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801b8a4:	2300      	movs	r3, #0
 801b8a6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801b8a8:	687b      	ldr	r3, [r7, #4]
 801b8aa:	61fb      	str	r3, [r7, #28]
    while (p) {
 801b8ac:	e01c      	b.n	801b8e8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801b8ae:	69fb      	ldr	r3, [r7, #28]
 801b8b0:	895a      	ldrh	r2, [r3, #10]
 801b8b2:	69fb      	ldr	r3, [r7, #28]
 801b8b4:	891b      	ldrh	r3, [r3, #8]
 801b8b6:	429a      	cmp	r2, r3
 801b8b8:	d10a      	bne.n	801b8d0 <etharp_query+0x1c0>
 801b8ba:	69fb      	ldr	r3, [r7, #28]
 801b8bc:	681b      	ldr	r3, [r3, #0]
 801b8be:	2b00      	cmp	r3, #0
 801b8c0:	d006      	beq.n	801b8d0 <etharp_query+0x1c0>
 801b8c2:	4b2a      	ldr	r3, [pc, #168]	@ (801b96c <etharp_query+0x25c>)
 801b8c4:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 801b8c8:	492f      	ldr	r1, [pc, #188]	@ (801b988 <etharp_query+0x278>)
 801b8ca:	482a      	ldr	r0, [pc, #168]	@ (801b974 <etharp_query+0x264>)
 801b8cc:	f002 fcde 	bl	801e28c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801b8d0:	69fb      	ldr	r3, [r7, #28]
 801b8d2:	7b1b      	ldrb	r3, [r3, #12]
 801b8d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801b8d8:	2b00      	cmp	r3, #0
 801b8da:	d002      	beq.n	801b8e2 <etharp_query+0x1d2>
        copy_needed = 1;
 801b8dc:	2301      	movs	r3, #1
 801b8de:	61bb      	str	r3, [r7, #24]
        break;
 801b8e0:	e005      	b.n	801b8ee <etharp_query+0x1de>
      }
      p = p->next;
 801b8e2:	69fb      	ldr	r3, [r7, #28]
 801b8e4:	681b      	ldr	r3, [r3, #0]
 801b8e6:	61fb      	str	r3, [r7, #28]
    while (p) {
 801b8e8:	69fb      	ldr	r3, [r7, #28]
 801b8ea:	2b00      	cmp	r3, #0
 801b8ec:	d1df      	bne.n	801b8ae <etharp_query+0x19e>
    }
    if (copy_needed) {
 801b8ee:	69bb      	ldr	r3, [r7, #24]
 801b8f0:	2b00      	cmp	r3, #0
 801b8f2:	d007      	beq.n	801b904 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801b8f4:	687a      	ldr	r2, [r7, #4]
 801b8f6:	f44f 7120 	mov.w	r1, #640	@ 0x280
 801b8fa:	200e      	movs	r0, #14
 801b8fc:	f7f8 fe76 	bl	80145ec <pbuf_clone>
 801b900:	61f8      	str	r0, [r7, #28]
 801b902:	e004      	b.n	801b90e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801b904:	687b      	ldr	r3, [r7, #4]
 801b906:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801b908:	69f8      	ldr	r0, [r7, #28]
 801b90a:	f7f8 fcad 	bl	8014268 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801b90e:	69fb      	ldr	r3, [r7, #28]
 801b910:	2b00      	cmp	r3, #0
 801b912:	d021      	beq.n	801b958 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801b914:	7c7a      	ldrb	r2, [r7, #17]
 801b916:	4918      	ldr	r1, [pc, #96]	@ (801b978 <etharp_query+0x268>)
 801b918:	4613      	mov	r3, r2
 801b91a:	005b      	lsls	r3, r3, #1
 801b91c:	4413      	add	r3, r2
 801b91e:	00db      	lsls	r3, r3, #3
 801b920:	440b      	add	r3, r1
 801b922:	681b      	ldr	r3, [r3, #0]
 801b924:	2b00      	cmp	r3, #0
 801b926:	d00a      	beq.n	801b93e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801b928:	7c7a      	ldrb	r2, [r7, #17]
 801b92a:	4913      	ldr	r1, [pc, #76]	@ (801b978 <etharp_query+0x268>)
 801b92c:	4613      	mov	r3, r2
 801b92e:	005b      	lsls	r3, r3, #1
 801b930:	4413      	add	r3, r2
 801b932:	00db      	lsls	r3, r3, #3
 801b934:	440b      	add	r3, r1
 801b936:	681b      	ldr	r3, [r3, #0]
 801b938:	4618      	mov	r0, r3
 801b93a:	f7f8 fbef 	bl	801411c <pbuf_free>
      }
      arp_table[i].q = p;
 801b93e:	7c7a      	ldrb	r2, [r7, #17]
 801b940:	490d      	ldr	r1, [pc, #52]	@ (801b978 <etharp_query+0x268>)
 801b942:	4613      	mov	r3, r2
 801b944:	005b      	lsls	r3, r3, #1
 801b946:	4413      	add	r3, r2
 801b948:	00db      	lsls	r3, r3, #3
 801b94a:	440b      	add	r3, r1
 801b94c:	69fa      	ldr	r2, [r7, #28]
 801b94e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801b950:	2300      	movs	r3, #0
 801b952:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801b956:	e002      	b.n	801b95e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801b958:	23ff      	movs	r3, #255	@ 0xff
 801b95a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 801b95e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 801b962:	4618      	mov	r0, r3
 801b964:	3728      	adds	r7, #40	@ 0x28
 801b966:	46bd      	mov	sp, r7
 801b968:	bd80      	pop	{r7, pc}
 801b96a:	bf00      	nop
 801b96c:	080236a8 	.word	0x080236a8
 801b970:	08023854 	.word	0x08023854
 801b974:	08023720 	.word	0x08023720
 801b978:	2000cb20 	.word	0x2000cb20
 801b97c:	08023864 	.word	0x08023864
 801b980:	08023848 	.word	0x08023848
 801b984:	2000cc10 	.word	0x2000cc10
 801b988:	0802388c 	.word	0x0802388c

0801b98c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801b98c:	b580      	push	{r7, lr}
 801b98e:	b08a      	sub	sp, #40	@ 0x28
 801b990:	af02      	add	r7, sp, #8
 801b992:	60f8      	str	r0, [r7, #12]
 801b994:	60b9      	str	r1, [r7, #8]
 801b996:	607a      	str	r2, [r7, #4]
 801b998:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801b99a:	2300      	movs	r3, #0
 801b99c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801b99e:	68fb      	ldr	r3, [r7, #12]
 801b9a0:	2b00      	cmp	r3, #0
 801b9a2:	d106      	bne.n	801b9b2 <etharp_raw+0x26>
 801b9a4:	4b3a      	ldr	r3, [pc, #232]	@ (801ba90 <etharp_raw+0x104>)
 801b9a6:	f240 4257 	movw	r2, #1111	@ 0x457
 801b9aa:	493a      	ldr	r1, [pc, #232]	@ (801ba94 <etharp_raw+0x108>)
 801b9ac:	483a      	ldr	r0, [pc, #232]	@ (801ba98 <etharp_raw+0x10c>)
 801b9ae:	f002 fc6d 	bl	801e28c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801b9b2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801b9b6:	211c      	movs	r1, #28
 801b9b8:	200e      	movs	r0, #14
 801b9ba:	f7f8 f8cb 	bl	8013b54 <pbuf_alloc>
 801b9be:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801b9c0:	69bb      	ldr	r3, [r7, #24]
 801b9c2:	2b00      	cmp	r3, #0
 801b9c4:	d102      	bne.n	801b9cc <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801b9c6:	f04f 33ff 	mov.w	r3, #4294967295
 801b9ca:	e05d      	b.n	801ba88 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801b9cc:	69bb      	ldr	r3, [r7, #24]
 801b9ce:	895b      	ldrh	r3, [r3, #10]
 801b9d0:	2b1b      	cmp	r3, #27
 801b9d2:	d806      	bhi.n	801b9e2 <etharp_raw+0x56>
 801b9d4:	4b2e      	ldr	r3, [pc, #184]	@ (801ba90 <etharp_raw+0x104>)
 801b9d6:	f240 4262 	movw	r2, #1122	@ 0x462
 801b9da:	4930      	ldr	r1, [pc, #192]	@ (801ba9c <etharp_raw+0x110>)
 801b9dc:	482e      	ldr	r0, [pc, #184]	@ (801ba98 <etharp_raw+0x10c>)
 801b9de:	f002 fc55 	bl	801e28c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801b9e2:	69bb      	ldr	r3, [r7, #24]
 801b9e4:	685b      	ldr	r3, [r3, #4]
 801b9e6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801b9e8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801b9ea:	4618      	mov	r0, r3
 801b9ec:	f7f6 ffd6 	bl	801299c <lwip_htons>
 801b9f0:	4603      	mov	r3, r0
 801b9f2:	461a      	mov	r2, r3
 801b9f4:	697b      	ldr	r3, [r7, #20]
 801b9f6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801b9f8:	68fb      	ldr	r3, [r7, #12]
 801b9fa:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801b9fe:	2b06      	cmp	r3, #6
 801ba00:	d006      	beq.n	801ba10 <etharp_raw+0x84>
 801ba02:	4b23      	ldr	r3, [pc, #140]	@ (801ba90 <etharp_raw+0x104>)
 801ba04:	f240 4269 	movw	r2, #1129	@ 0x469
 801ba08:	4925      	ldr	r1, [pc, #148]	@ (801baa0 <etharp_raw+0x114>)
 801ba0a:	4823      	ldr	r0, [pc, #140]	@ (801ba98 <etharp_raw+0x10c>)
 801ba0c:	f002 fc3e 	bl	801e28c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801ba10:	697b      	ldr	r3, [r7, #20]
 801ba12:	3308      	adds	r3, #8
 801ba14:	2206      	movs	r2, #6
 801ba16:	6839      	ldr	r1, [r7, #0]
 801ba18:	4618      	mov	r0, r3
 801ba1a:	f002 fdea 	bl	801e5f2 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801ba1e:	697b      	ldr	r3, [r7, #20]
 801ba20:	3312      	adds	r3, #18
 801ba22:	2206      	movs	r2, #6
 801ba24:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801ba26:	4618      	mov	r0, r3
 801ba28:	f002 fde3 	bl	801e5f2 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801ba2c:	697b      	ldr	r3, [r7, #20]
 801ba2e:	330e      	adds	r3, #14
 801ba30:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801ba32:	6812      	ldr	r2, [r2, #0]
 801ba34:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801ba36:	697b      	ldr	r3, [r7, #20]
 801ba38:	3318      	adds	r3, #24
 801ba3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801ba3c:	6812      	ldr	r2, [r2, #0]
 801ba3e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801ba40:	697b      	ldr	r3, [r7, #20]
 801ba42:	2200      	movs	r2, #0
 801ba44:	701a      	strb	r2, [r3, #0]
 801ba46:	2200      	movs	r2, #0
 801ba48:	f042 0201 	orr.w	r2, r2, #1
 801ba4c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801ba4e:	697b      	ldr	r3, [r7, #20]
 801ba50:	2200      	movs	r2, #0
 801ba52:	f042 0208 	orr.w	r2, r2, #8
 801ba56:	709a      	strb	r2, [r3, #2]
 801ba58:	2200      	movs	r2, #0
 801ba5a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801ba5c:	697b      	ldr	r3, [r7, #20]
 801ba5e:	2206      	movs	r2, #6
 801ba60:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801ba62:	697b      	ldr	r3, [r7, #20]
 801ba64:	2204      	movs	r2, #4
 801ba66:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801ba68:	f640 0306 	movw	r3, #2054	@ 0x806
 801ba6c:	9300      	str	r3, [sp, #0]
 801ba6e:	687b      	ldr	r3, [r7, #4]
 801ba70:	68ba      	ldr	r2, [r7, #8]
 801ba72:	69b9      	ldr	r1, [r7, #24]
 801ba74:	68f8      	ldr	r0, [r7, #12]
 801ba76:	f001 fc09 	bl	801d28c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801ba7a:	69b8      	ldr	r0, [r7, #24]
 801ba7c:	f7f8 fb4e 	bl	801411c <pbuf_free>
  p = NULL;
 801ba80:	2300      	movs	r3, #0
 801ba82:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801ba84:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801ba88:	4618      	mov	r0, r3
 801ba8a:	3720      	adds	r7, #32
 801ba8c:	46bd      	mov	sp, r7
 801ba8e:	bd80      	pop	{r7, pc}
 801ba90:	080236a8 	.word	0x080236a8
 801ba94:	080237f8 	.word	0x080237f8
 801ba98:	08023720 	.word	0x08023720
 801ba9c:	080238a8 	.word	0x080238a8
 801baa0:	080238dc 	.word	0x080238dc

0801baa4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801baa4:	b580      	push	{r7, lr}
 801baa6:	b088      	sub	sp, #32
 801baa8:	af04      	add	r7, sp, #16
 801baaa:	60f8      	str	r0, [r7, #12]
 801baac:	60b9      	str	r1, [r7, #8]
 801baae:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801bab0:	68fb      	ldr	r3, [r7, #12]
 801bab2:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801bab6:	68fb      	ldr	r3, [r7, #12]
 801bab8:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 801babc:	68fb      	ldr	r3, [r7, #12]
 801babe:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801bac0:	2201      	movs	r2, #1
 801bac2:	9203      	str	r2, [sp, #12]
 801bac4:	68ba      	ldr	r2, [r7, #8]
 801bac6:	9202      	str	r2, [sp, #8]
 801bac8:	4a06      	ldr	r2, [pc, #24]	@ (801bae4 <etharp_request_dst+0x40>)
 801baca:	9201      	str	r2, [sp, #4]
 801bacc:	9300      	str	r3, [sp, #0]
 801bace:	4603      	mov	r3, r0
 801bad0:	687a      	ldr	r2, [r7, #4]
 801bad2:	68f8      	ldr	r0, [r7, #12]
 801bad4:	f7ff ff5a 	bl	801b98c <etharp_raw>
 801bad8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801bada:	4618      	mov	r0, r3
 801badc:	3710      	adds	r7, #16
 801bade:	46bd      	mov	sp, r7
 801bae0:	bd80      	pop	{r7, pc}
 801bae2:	bf00      	nop
 801bae4:	08023efc 	.word	0x08023efc

0801bae8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801bae8:	b580      	push	{r7, lr}
 801baea:	b082      	sub	sp, #8
 801baec:	af00      	add	r7, sp, #0
 801baee:	6078      	str	r0, [r7, #4]
 801baf0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801baf2:	4a05      	ldr	r2, [pc, #20]	@ (801bb08 <etharp_request+0x20>)
 801baf4:	6839      	ldr	r1, [r7, #0]
 801baf6:	6878      	ldr	r0, [r7, #4]
 801baf8:	f7ff ffd4 	bl	801baa4 <etharp_request_dst>
 801bafc:	4603      	mov	r3, r0
}
 801bafe:	4618      	mov	r0, r3
 801bb00:	3708      	adds	r7, #8
 801bb02:	46bd      	mov	sp, r7
 801bb04:	bd80      	pop	{r7, pc}
 801bb06:	bf00      	nop
 801bb08:	08023ef4 	.word	0x08023ef4

0801bb0c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801bb0c:	b580      	push	{r7, lr}
 801bb0e:	b08e      	sub	sp, #56	@ 0x38
 801bb10:	af04      	add	r7, sp, #16
 801bb12:	6078      	str	r0, [r7, #4]
 801bb14:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801bb16:	4b78      	ldr	r3, [pc, #480]	@ (801bcf8 <icmp_input+0x1ec>)
 801bb18:	689b      	ldr	r3, [r3, #8]
 801bb1a:	623b      	str	r3, [r7, #32]
  hlen = IPH_HL_BYTES(iphdr_in);
 801bb1c:	6a3b      	ldr	r3, [r7, #32]
 801bb1e:	781b      	ldrb	r3, [r3, #0]
 801bb20:	f003 030f 	and.w	r3, r3, #15
 801bb24:	b2db      	uxtb	r3, r3
 801bb26:	009b      	lsls	r3, r3, #2
 801bb28:	b2db      	uxtb	r3, r3
 801bb2a:	83fb      	strh	r3, [r7, #30]
  if (hlen < IP_HLEN) {
 801bb2c:	8bfb      	ldrh	r3, [r7, #30]
 801bb2e:	2b13      	cmp	r3, #19
 801bb30:	f240 80cf 	bls.w	801bcd2 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801bb34:	687b      	ldr	r3, [r7, #4]
 801bb36:	895b      	ldrh	r3, [r3, #10]
 801bb38:	2b03      	cmp	r3, #3
 801bb3a:	f240 80cc 	bls.w	801bcd6 <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801bb3e:	687b      	ldr	r3, [r7, #4]
 801bb40:	685b      	ldr	r3, [r3, #4]
 801bb42:	781b      	ldrb	r3, [r3, #0]
 801bb44:	777b      	strb	r3, [r7, #29]
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801bb46:	7f7b      	ldrb	r3, [r7, #29]
 801bb48:	2b00      	cmp	r3, #0
 801bb4a:	f000 80bb 	beq.w	801bcc4 <icmp_input+0x1b8>
 801bb4e:	2b08      	cmp	r3, #8
 801bb50:	f040 80bb 	bne.w	801bcca <icmp_input+0x1be>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801bb54:	4b69      	ldr	r3, [pc, #420]	@ (801bcfc <icmp_input+0x1f0>)
 801bb56:	627b      	str	r3, [r7, #36]	@ 0x24
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801bb58:	4b67      	ldr	r3, [pc, #412]	@ (801bcf8 <icmp_input+0x1ec>)
 801bb5a:	695b      	ldr	r3, [r3, #20]
 801bb5c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801bb60:	2be0      	cmp	r3, #224	@ 0xe0
 801bb62:	d102      	bne.n	801bb6a <icmp_input+0x5e>
#if LWIP_MULTICAST_PING
        /* For multicast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
 801bb64:	683b      	ldr	r3, [r7, #0]
 801bb66:	3304      	adds	r3, #4
 801bb68:	627b      	str	r3, [r7, #36]	@ 0x24
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801bb6a:	4b63      	ldr	r3, [pc, #396]	@ (801bcf8 <icmp_input+0x1ec>)
 801bb6c:	695b      	ldr	r3, [r3, #20]
 801bb6e:	4a62      	ldr	r2, [pc, #392]	@ (801bcf8 <icmp_input+0x1ec>)
 801bb70:	6812      	ldr	r2, [r2, #0]
 801bb72:	4611      	mov	r1, r2
 801bb74:	4618      	mov	r0, r3
 801bb76:	f000 fbeb 	bl	801c350 <ip4_addr_isbroadcast_u32>
 801bb7a:	4603      	mov	r3, r0
 801bb7c:	2b00      	cmp	r3, #0
 801bb7e:	d002      	beq.n	801bb86 <icmp_input+0x7a>
#if LWIP_BROADCAST_PING
        /* For broadcast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
 801bb80:	683b      	ldr	r3, [r7, #0]
 801bb82:	3304      	adds	r3, #4
 801bb84:	627b      	str	r3, [r7, #36]	@ 0x24
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801bb86:	687b      	ldr	r3, [r7, #4]
 801bb88:	891b      	ldrh	r3, [r3, #8]
 801bb8a:	2b07      	cmp	r3, #7
 801bb8c:	f240 80a5 	bls.w	801bcda <icmp_input+0x1ce>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801bb90:	8bfb      	ldrh	r3, [r7, #30]
 801bb92:	330e      	adds	r3, #14
 801bb94:	4619      	mov	r1, r3
 801bb96:	6878      	ldr	r0, [r7, #4]
 801bb98:	f7f8 fa2a 	bl	8013ff0 <pbuf_add_header>
 801bb9c:	4603      	mov	r3, r0
 801bb9e:	2b00      	cmp	r3, #0
 801bba0:	d04b      	beq.n	801bc3a <icmp_input+0x12e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801bba2:	687b      	ldr	r3, [r7, #4]
 801bba4:	891a      	ldrh	r2, [r3, #8]
 801bba6:	8bfb      	ldrh	r3, [r7, #30]
 801bba8:	4413      	add	r3, r2
 801bbaa:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801bbac:	687b      	ldr	r3, [r7, #4]
 801bbae:	891b      	ldrh	r3, [r3, #8]
 801bbb0:	8b7a      	ldrh	r2, [r7, #26]
 801bbb2:	429a      	cmp	r2, r3
 801bbb4:	f0c0 8096 	bcc.w	801bce4 <icmp_input+0x1d8>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801bbb8:	8b7b      	ldrh	r3, [r7, #26]
 801bbba:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801bbbe:	4619      	mov	r1, r3
 801bbc0:	200e      	movs	r0, #14
 801bbc2:	f7f7 ffc7 	bl	8013b54 <pbuf_alloc>
 801bbc6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801bbc8:	697b      	ldr	r3, [r7, #20]
 801bbca:	2b00      	cmp	r3, #0
 801bbcc:	f000 808c 	beq.w	801bce8 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801bbd0:	697b      	ldr	r3, [r7, #20]
 801bbd2:	895b      	ldrh	r3, [r3, #10]
 801bbd4:	461a      	mov	r2, r3
 801bbd6:	8bfb      	ldrh	r3, [r7, #30]
 801bbd8:	3308      	adds	r3, #8
 801bbda:	429a      	cmp	r2, r3
 801bbdc:	d203      	bcs.n	801bbe6 <icmp_input+0xda>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801bbde:	6978      	ldr	r0, [r7, #20]
 801bbe0:	f7f8 fa9c 	bl	801411c <pbuf_free>
          goto icmperr;
 801bbe4:	e081      	b.n	801bcea <icmp_input+0x1de>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801bbe6:	697b      	ldr	r3, [r7, #20]
 801bbe8:	685b      	ldr	r3, [r3, #4]
 801bbea:	8bfa      	ldrh	r2, [r7, #30]
 801bbec:	6a39      	ldr	r1, [r7, #32]
 801bbee:	4618      	mov	r0, r3
 801bbf0:	f002 fcff 	bl	801e5f2 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801bbf4:	8bfb      	ldrh	r3, [r7, #30]
 801bbf6:	4619      	mov	r1, r3
 801bbf8:	6978      	ldr	r0, [r7, #20]
 801bbfa:	f7f8 fa09 	bl	8014010 <pbuf_remove_header>
 801bbfe:	4603      	mov	r3, r0
 801bc00:	2b00      	cmp	r3, #0
 801bc02:	d009      	beq.n	801bc18 <icmp_input+0x10c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801bc04:	4b3e      	ldr	r3, [pc, #248]	@ (801bd00 <icmp_input+0x1f4>)
 801bc06:	22b6      	movs	r2, #182	@ 0xb6
 801bc08:	493e      	ldr	r1, [pc, #248]	@ (801bd04 <icmp_input+0x1f8>)
 801bc0a:	483f      	ldr	r0, [pc, #252]	@ (801bd08 <icmp_input+0x1fc>)
 801bc0c:	f002 fb3e 	bl	801e28c <iprintf>
          pbuf_free(r);
 801bc10:	6978      	ldr	r0, [r7, #20]
 801bc12:	f7f8 fa83 	bl	801411c <pbuf_free>
          goto icmperr;
 801bc16:	e068      	b.n	801bcea <icmp_input+0x1de>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801bc18:	6879      	ldr	r1, [r7, #4]
 801bc1a:	6978      	ldr	r0, [r7, #20]
 801bc1c:	f7f8 fba2 	bl	8014364 <pbuf_copy>
 801bc20:	4603      	mov	r3, r0
 801bc22:	2b00      	cmp	r3, #0
 801bc24:	d003      	beq.n	801bc2e <icmp_input+0x122>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801bc26:	6978      	ldr	r0, [r7, #20]
 801bc28:	f7f8 fa78 	bl	801411c <pbuf_free>
          goto icmperr;
 801bc2c:	e05d      	b.n	801bcea <icmp_input+0x1de>
        }
        /* free the original p */
        pbuf_free(p);
 801bc2e:	6878      	ldr	r0, [r7, #4]
 801bc30:	f7f8 fa74 	bl	801411c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801bc34:	697b      	ldr	r3, [r7, #20]
 801bc36:	607b      	str	r3, [r7, #4]
 801bc38:	e00f      	b.n	801bc5a <icmp_input+0x14e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801bc3a:	8bfb      	ldrh	r3, [r7, #30]
 801bc3c:	330e      	adds	r3, #14
 801bc3e:	4619      	mov	r1, r3
 801bc40:	6878      	ldr	r0, [r7, #4]
 801bc42:	f7f8 f9e5 	bl	8014010 <pbuf_remove_header>
 801bc46:	4603      	mov	r3, r0
 801bc48:	2b00      	cmp	r3, #0
 801bc4a:	d006      	beq.n	801bc5a <icmp_input+0x14e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801bc4c:	4b2c      	ldr	r3, [pc, #176]	@ (801bd00 <icmp_input+0x1f4>)
 801bc4e:	22c7      	movs	r2, #199	@ 0xc7
 801bc50:	492e      	ldr	r1, [pc, #184]	@ (801bd0c <icmp_input+0x200>)
 801bc52:	482d      	ldr	r0, [pc, #180]	@ (801bd08 <icmp_input+0x1fc>)
 801bc54:	f002 fb1a 	bl	801e28c <iprintf>
          goto icmperr;
 801bc58:	e047      	b.n	801bcea <icmp_input+0x1de>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801bc5a:	687b      	ldr	r3, [r7, #4]
 801bc5c:	685b      	ldr	r3, [r3, #4]
 801bc5e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801bc60:	8bfb      	ldrh	r3, [r7, #30]
 801bc62:	4619      	mov	r1, r3
 801bc64:	6878      	ldr	r0, [r7, #4]
 801bc66:	f7f8 f9c3 	bl	8013ff0 <pbuf_add_header>
 801bc6a:	4603      	mov	r3, r0
 801bc6c:	2b00      	cmp	r3, #0
 801bc6e:	d12b      	bne.n	801bcc8 <icmp_input+0x1bc>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801bc70:	687b      	ldr	r3, [r7, #4]
 801bc72:	685b      	ldr	r3, [r3, #4]
 801bc74:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801bc76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bc78:	681a      	ldr	r2, [r3, #0]
 801bc7a:	68fb      	ldr	r3, [r7, #12]
 801bc7c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801bc7e:	4b1e      	ldr	r3, [pc, #120]	@ (801bcf8 <icmp_input+0x1ec>)
 801bc80:	691a      	ldr	r2, [r3, #16]
 801bc82:	68fb      	ldr	r3, [r7, #12]
 801bc84:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801bc86:	693b      	ldr	r3, [r7, #16]
 801bc88:	2200      	movs	r2, #0
 801bc8a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801bc8c:	693b      	ldr	r3, [r7, #16]
 801bc8e:	2200      	movs	r2, #0
 801bc90:	709a      	strb	r2, [r3, #2]
 801bc92:	2200      	movs	r2, #0
 801bc94:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801bc96:	68fb      	ldr	r3, [r7, #12]
 801bc98:	22ff      	movs	r2, #255	@ 0xff
 801bc9a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801bc9c:	68fb      	ldr	r3, [r7, #12]
 801bc9e:	2200      	movs	r2, #0
 801bca0:	729a      	strb	r2, [r3, #10]
 801bca2:	2200      	movs	r2, #0
 801bca4:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801bca6:	683b      	ldr	r3, [r7, #0]
 801bca8:	9302      	str	r3, [sp, #8]
 801bcaa:	2301      	movs	r3, #1
 801bcac:	9301      	str	r3, [sp, #4]
 801bcae:	2300      	movs	r3, #0
 801bcb0:	9300      	str	r3, [sp, #0]
 801bcb2:	23ff      	movs	r3, #255	@ 0xff
 801bcb4:	2200      	movs	r2, #0
 801bcb6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801bcb8:	6878      	ldr	r0, [r7, #4]
 801bcba:	f000 fa71 	bl	801c1a0 <ip4_output_if>
 801bcbe:	4603      	mov	r3, r0
 801bcc0:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801bcc2:	e001      	b.n	801bcc8 <icmp_input+0x1bc>
      break;
 801bcc4:	bf00      	nop
 801bcc6:	e000      	b.n	801bcca <icmp_input+0x1be>
      break;
 801bcc8:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801bcca:	6878      	ldr	r0, [r7, #4]
 801bccc:	f7f8 fa26 	bl	801411c <pbuf_free>
  return;
 801bcd0:	e00f      	b.n	801bcf2 <icmp_input+0x1e6>
    goto lenerr;
 801bcd2:	bf00      	nop
 801bcd4:	e002      	b.n	801bcdc <icmp_input+0x1d0>
    goto lenerr;
 801bcd6:	bf00      	nop
 801bcd8:	e000      	b.n	801bcdc <icmp_input+0x1d0>
        goto lenerr;
 801bcda:	bf00      	nop
lenerr:
  pbuf_free(p);
 801bcdc:	6878      	ldr	r0, [r7, #4]
 801bcde:	f7f8 fa1d 	bl	801411c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801bce2:	e006      	b.n	801bcf2 <icmp_input+0x1e6>
          goto icmperr;
 801bce4:	bf00      	nop
 801bce6:	e000      	b.n	801bcea <icmp_input+0x1de>
          goto icmperr;
 801bce8:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801bcea:	6878      	ldr	r0, [r7, #4]
 801bcec:	f7f8 fa16 	bl	801411c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801bcf0:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801bcf2:	3728      	adds	r7, #40	@ 0x28
 801bcf4:	46bd      	mov	sp, r7
 801bcf6:	bd80      	pop	{r7, pc}
 801bcf8:	2000936c 	.word	0x2000936c
 801bcfc:	20009380 	.word	0x20009380
 801bd00:	08023920 	.word	0x08023920
 801bd04:	08023958 	.word	0x08023958
 801bd08:	08023990 	.word	0x08023990
 801bd0c:	080239b8 	.word	0x080239b8

0801bd10 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801bd10:	b580      	push	{r7, lr}
 801bd12:	b082      	sub	sp, #8
 801bd14:	af00      	add	r7, sp, #0
 801bd16:	6078      	str	r0, [r7, #4]
 801bd18:	460b      	mov	r3, r1
 801bd1a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801bd1c:	78fb      	ldrb	r3, [r7, #3]
 801bd1e:	461a      	mov	r2, r3
 801bd20:	2103      	movs	r1, #3
 801bd22:	6878      	ldr	r0, [r7, #4]
 801bd24:	f000 f814 	bl	801bd50 <icmp_send_response>
}
 801bd28:	bf00      	nop
 801bd2a:	3708      	adds	r7, #8
 801bd2c:	46bd      	mov	sp, r7
 801bd2e:	bd80      	pop	{r7, pc}

0801bd30 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801bd30:	b580      	push	{r7, lr}
 801bd32:	b082      	sub	sp, #8
 801bd34:	af00      	add	r7, sp, #0
 801bd36:	6078      	str	r0, [r7, #4]
 801bd38:	460b      	mov	r3, r1
 801bd3a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801bd3c:	78fb      	ldrb	r3, [r7, #3]
 801bd3e:	461a      	mov	r2, r3
 801bd40:	210b      	movs	r1, #11
 801bd42:	6878      	ldr	r0, [r7, #4]
 801bd44:	f000 f804 	bl	801bd50 <icmp_send_response>
}
 801bd48:	bf00      	nop
 801bd4a:	3708      	adds	r7, #8
 801bd4c:	46bd      	mov	sp, r7
 801bd4e:	bd80      	pop	{r7, pc}

0801bd50 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801bd50:	b580      	push	{r7, lr}
 801bd52:	b08c      	sub	sp, #48	@ 0x30
 801bd54:	af04      	add	r7, sp, #16
 801bd56:	6078      	str	r0, [r7, #4]
 801bd58:	460b      	mov	r3, r1
 801bd5a:	70fb      	strb	r3, [r7, #3]
 801bd5c:	4613      	mov	r3, r2
 801bd5e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801bd60:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801bd64:	2124      	movs	r1, #36	@ 0x24
 801bd66:	2022      	movs	r0, #34	@ 0x22
 801bd68:	f7f7 fef4 	bl	8013b54 <pbuf_alloc>
 801bd6c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801bd6e:	69fb      	ldr	r3, [r7, #28]
 801bd70:	2b00      	cmp	r3, #0
 801bd72:	d04c      	beq.n	801be0e <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801bd74:	69fb      	ldr	r3, [r7, #28]
 801bd76:	895b      	ldrh	r3, [r3, #10]
 801bd78:	2b23      	cmp	r3, #35	@ 0x23
 801bd7a:	d806      	bhi.n	801bd8a <icmp_send_response+0x3a>
 801bd7c:	4b26      	ldr	r3, [pc, #152]	@ (801be18 <icmp_send_response+0xc8>)
 801bd7e:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 801bd82:	4926      	ldr	r1, [pc, #152]	@ (801be1c <icmp_send_response+0xcc>)
 801bd84:	4826      	ldr	r0, [pc, #152]	@ (801be20 <icmp_send_response+0xd0>)
 801bd86:	f002 fa81 	bl	801e28c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801bd8a:	687b      	ldr	r3, [r7, #4]
 801bd8c:	685b      	ldr	r3, [r3, #4]
 801bd8e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801bd90:	69fb      	ldr	r3, [r7, #28]
 801bd92:	685b      	ldr	r3, [r3, #4]
 801bd94:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801bd96:	697b      	ldr	r3, [r7, #20]
 801bd98:	78fa      	ldrb	r2, [r7, #3]
 801bd9a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801bd9c:	697b      	ldr	r3, [r7, #20]
 801bd9e:	78ba      	ldrb	r2, [r7, #2]
 801bda0:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801bda2:	697b      	ldr	r3, [r7, #20]
 801bda4:	2200      	movs	r2, #0
 801bda6:	711a      	strb	r2, [r3, #4]
 801bda8:	2200      	movs	r2, #0
 801bdaa:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801bdac:	697b      	ldr	r3, [r7, #20]
 801bdae:	2200      	movs	r2, #0
 801bdb0:	719a      	strb	r2, [r3, #6]
 801bdb2:	2200      	movs	r2, #0
 801bdb4:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801bdb6:	69fb      	ldr	r3, [r7, #28]
 801bdb8:	685b      	ldr	r3, [r3, #4]
 801bdba:	f103 0008 	add.w	r0, r3, #8
 801bdbe:	687b      	ldr	r3, [r7, #4]
 801bdc0:	685b      	ldr	r3, [r3, #4]
 801bdc2:	221c      	movs	r2, #28
 801bdc4:	4619      	mov	r1, r3
 801bdc6:	f002 fc14 	bl	801e5f2 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801bdca:	69bb      	ldr	r3, [r7, #24]
 801bdcc:	68db      	ldr	r3, [r3, #12]
 801bdce:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801bdd0:	f107 030c 	add.w	r3, r7, #12
 801bdd4:	4618      	mov	r0, r3
 801bdd6:	f000 f825 	bl	801be24 <ip4_route>
 801bdda:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801bddc:	693b      	ldr	r3, [r7, #16]
 801bdde:	2b00      	cmp	r3, #0
 801bde0:	d011      	beq.n	801be06 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801bde2:	697b      	ldr	r3, [r7, #20]
 801bde4:	2200      	movs	r2, #0
 801bde6:	709a      	strb	r2, [r3, #2]
 801bde8:	2200      	movs	r2, #0
 801bdea:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801bdec:	f107 020c 	add.w	r2, r7, #12
 801bdf0:	693b      	ldr	r3, [r7, #16]
 801bdf2:	9302      	str	r3, [sp, #8]
 801bdf4:	2301      	movs	r3, #1
 801bdf6:	9301      	str	r3, [sp, #4]
 801bdf8:	2300      	movs	r3, #0
 801bdfa:	9300      	str	r3, [sp, #0]
 801bdfc:	23ff      	movs	r3, #255	@ 0xff
 801bdfe:	2100      	movs	r1, #0
 801be00:	69f8      	ldr	r0, [r7, #28]
 801be02:	f000 f9cd 	bl	801c1a0 <ip4_output_if>
  }
  pbuf_free(q);
 801be06:	69f8      	ldr	r0, [r7, #28]
 801be08:	f7f8 f988 	bl	801411c <pbuf_free>
 801be0c:	e000      	b.n	801be10 <icmp_send_response+0xc0>
    return;
 801be0e:	bf00      	nop
}
 801be10:	3720      	adds	r7, #32
 801be12:	46bd      	mov	sp, r7
 801be14:	bd80      	pop	{r7, pc}
 801be16:	bf00      	nop
 801be18:	08023920 	.word	0x08023920
 801be1c:	080239ec 	.word	0x080239ec
 801be20:	08023990 	.word	0x08023990

0801be24 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801be24:	b480      	push	{r7}
 801be26:	b085      	sub	sp, #20
 801be28:	af00      	add	r7, sp, #0
 801be2a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801be2c:	4b33      	ldr	r3, [pc, #204]	@ (801befc <ip4_route+0xd8>)
 801be2e:	681b      	ldr	r3, [r3, #0]
 801be30:	60fb      	str	r3, [r7, #12]
 801be32:	e036      	b.n	801bea2 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801be34:	68fb      	ldr	r3, [r7, #12]
 801be36:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801be3a:	f003 0301 	and.w	r3, r3, #1
 801be3e:	b2db      	uxtb	r3, r3
 801be40:	2b00      	cmp	r3, #0
 801be42:	d02b      	beq.n	801be9c <ip4_route+0x78>
 801be44:	68fb      	ldr	r3, [r7, #12]
 801be46:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801be4a:	089b      	lsrs	r3, r3, #2
 801be4c:	f003 0301 	and.w	r3, r3, #1
 801be50:	b2db      	uxtb	r3, r3
 801be52:	2b00      	cmp	r3, #0
 801be54:	d022      	beq.n	801be9c <ip4_route+0x78>
 801be56:	68fb      	ldr	r3, [r7, #12]
 801be58:	3304      	adds	r3, #4
 801be5a:	681b      	ldr	r3, [r3, #0]
 801be5c:	2b00      	cmp	r3, #0
 801be5e:	d01d      	beq.n	801be9c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801be60:	687b      	ldr	r3, [r7, #4]
 801be62:	681a      	ldr	r2, [r3, #0]
 801be64:	68fb      	ldr	r3, [r7, #12]
 801be66:	3304      	adds	r3, #4
 801be68:	681b      	ldr	r3, [r3, #0]
 801be6a:	405a      	eors	r2, r3
 801be6c:	68fb      	ldr	r3, [r7, #12]
 801be6e:	3308      	adds	r3, #8
 801be70:	681b      	ldr	r3, [r3, #0]
 801be72:	4013      	ands	r3, r2
 801be74:	2b00      	cmp	r3, #0
 801be76:	d101      	bne.n	801be7c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801be78:	68fb      	ldr	r3, [r7, #12]
 801be7a:	e038      	b.n	801beee <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801be7c:	68fb      	ldr	r3, [r7, #12]
 801be7e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801be82:	f003 0302 	and.w	r3, r3, #2
 801be86:	2b00      	cmp	r3, #0
 801be88:	d108      	bne.n	801be9c <ip4_route+0x78>
 801be8a:	687b      	ldr	r3, [r7, #4]
 801be8c:	681a      	ldr	r2, [r3, #0]
 801be8e:	68fb      	ldr	r3, [r7, #12]
 801be90:	330c      	adds	r3, #12
 801be92:	681b      	ldr	r3, [r3, #0]
 801be94:	429a      	cmp	r2, r3
 801be96:	d101      	bne.n	801be9c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801be98:	68fb      	ldr	r3, [r7, #12]
 801be9a:	e028      	b.n	801beee <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801be9c:	68fb      	ldr	r3, [r7, #12]
 801be9e:	681b      	ldr	r3, [r3, #0]
 801bea0:	60fb      	str	r3, [r7, #12]
 801bea2:	68fb      	ldr	r3, [r7, #12]
 801bea4:	2b00      	cmp	r3, #0
 801bea6:	d1c5      	bne.n	801be34 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801bea8:	4b15      	ldr	r3, [pc, #84]	@ (801bf00 <ip4_route+0xdc>)
 801beaa:	681b      	ldr	r3, [r3, #0]
 801beac:	2b00      	cmp	r3, #0
 801beae:	d01a      	beq.n	801bee6 <ip4_route+0xc2>
 801beb0:	4b13      	ldr	r3, [pc, #76]	@ (801bf00 <ip4_route+0xdc>)
 801beb2:	681b      	ldr	r3, [r3, #0]
 801beb4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801beb8:	f003 0301 	and.w	r3, r3, #1
 801bebc:	2b00      	cmp	r3, #0
 801bebe:	d012      	beq.n	801bee6 <ip4_route+0xc2>
 801bec0:	4b0f      	ldr	r3, [pc, #60]	@ (801bf00 <ip4_route+0xdc>)
 801bec2:	681b      	ldr	r3, [r3, #0]
 801bec4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801bec8:	f003 0304 	and.w	r3, r3, #4
 801becc:	2b00      	cmp	r3, #0
 801bece:	d00a      	beq.n	801bee6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801bed0:	4b0b      	ldr	r3, [pc, #44]	@ (801bf00 <ip4_route+0xdc>)
 801bed2:	681b      	ldr	r3, [r3, #0]
 801bed4:	3304      	adds	r3, #4
 801bed6:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801bed8:	2b00      	cmp	r3, #0
 801beda:	d004      	beq.n	801bee6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801bedc:	687b      	ldr	r3, [r7, #4]
 801bede:	681b      	ldr	r3, [r3, #0]
 801bee0:	b2db      	uxtb	r3, r3
 801bee2:	2b7f      	cmp	r3, #127	@ 0x7f
 801bee4:	d101      	bne.n	801beea <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801bee6:	2300      	movs	r3, #0
 801bee8:	e001      	b.n	801beee <ip4_route+0xca>
  }

  return netif_default;
 801beea:	4b05      	ldr	r3, [pc, #20]	@ (801bf00 <ip4_route+0xdc>)
 801beec:	681b      	ldr	r3, [r3, #0]
}
 801beee:	4618      	mov	r0, r3
 801bef0:	3714      	adds	r7, #20
 801bef2:	46bd      	mov	sp, r7
 801bef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bef8:	4770      	bx	lr
 801befa:	bf00      	nop
 801befc:	2000cab4 	.word	0x2000cab4
 801bf00:	2000cab8 	.word	0x2000cab8

0801bf04 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801bf04:	b580      	push	{r7, lr}
 801bf06:	b082      	sub	sp, #8
 801bf08:	af00      	add	r7, sp, #0
 801bf0a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801bf0c:	687b      	ldr	r3, [r7, #4]
 801bf0e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801bf12:	f003 0301 	and.w	r3, r3, #1
 801bf16:	b2db      	uxtb	r3, r3
 801bf18:	2b00      	cmp	r3, #0
 801bf1a:	d016      	beq.n	801bf4a <ip4_input_accept+0x46>
 801bf1c:	687b      	ldr	r3, [r7, #4]
 801bf1e:	3304      	adds	r3, #4
 801bf20:	681b      	ldr	r3, [r3, #0]
 801bf22:	2b00      	cmp	r3, #0
 801bf24:	d011      	beq.n	801bf4a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801bf26:	4b0b      	ldr	r3, [pc, #44]	@ (801bf54 <ip4_input_accept+0x50>)
 801bf28:	695a      	ldr	r2, [r3, #20]
 801bf2a:	687b      	ldr	r3, [r7, #4]
 801bf2c:	3304      	adds	r3, #4
 801bf2e:	681b      	ldr	r3, [r3, #0]
 801bf30:	429a      	cmp	r2, r3
 801bf32:	d008      	beq.n	801bf46 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801bf34:	4b07      	ldr	r3, [pc, #28]	@ (801bf54 <ip4_input_accept+0x50>)
 801bf36:	695b      	ldr	r3, [r3, #20]
 801bf38:	6879      	ldr	r1, [r7, #4]
 801bf3a:	4618      	mov	r0, r3
 801bf3c:	f000 fa08 	bl	801c350 <ip4_addr_isbroadcast_u32>
 801bf40:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801bf42:	2b00      	cmp	r3, #0
 801bf44:	d001      	beq.n	801bf4a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801bf46:	2301      	movs	r3, #1
 801bf48:	e000      	b.n	801bf4c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801bf4a:	2300      	movs	r3, #0
}
 801bf4c:	4618      	mov	r0, r3
 801bf4e:	3708      	adds	r7, #8
 801bf50:	46bd      	mov	sp, r7
 801bf52:	bd80      	pop	{r7, pc}
 801bf54:	2000936c 	.word	0x2000936c

0801bf58 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801bf58:	b580      	push	{r7, lr}
 801bf5a:	b086      	sub	sp, #24
 801bf5c:	af00      	add	r7, sp, #0
 801bf5e:	6078      	str	r0, [r7, #4]
 801bf60:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801bf62:	687b      	ldr	r3, [r7, #4]
 801bf64:	685b      	ldr	r3, [r3, #4]
 801bf66:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801bf68:	697b      	ldr	r3, [r7, #20]
 801bf6a:	781b      	ldrb	r3, [r3, #0]
 801bf6c:	091b      	lsrs	r3, r3, #4
 801bf6e:	b2db      	uxtb	r3, r3
 801bf70:	2b04      	cmp	r3, #4
 801bf72:	d004      	beq.n	801bf7e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801bf74:	6878      	ldr	r0, [r7, #4]
 801bf76:	f7f8 f8d1 	bl	801411c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801bf7a:	2300      	movs	r3, #0
 801bf7c:	e107      	b.n	801c18e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801bf7e:	697b      	ldr	r3, [r7, #20]
 801bf80:	781b      	ldrb	r3, [r3, #0]
 801bf82:	f003 030f 	and.w	r3, r3, #15
 801bf86:	b2db      	uxtb	r3, r3
 801bf88:	009b      	lsls	r3, r3, #2
 801bf8a:	b2db      	uxtb	r3, r3
 801bf8c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801bf8e:	697b      	ldr	r3, [r7, #20]
 801bf90:	885b      	ldrh	r3, [r3, #2]
 801bf92:	b29b      	uxth	r3, r3
 801bf94:	4618      	mov	r0, r3
 801bf96:	f7f6 fd01 	bl	801299c <lwip_htons>
 801bf9a:	4603      	mov	r3, r0
 801bf9c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801bf9e:	687b      	ldr	r3, [r7, #4]
 801bfa0:	891b      	ldrh	r3, [r3, #8]
 801bfa2:	89ba      	ldrh	r2, [r7, #12]
 801bfa4:	429a      	cmp	r2, r3
 801bfa6:	d204      	bcs.n	801bfb2 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801bfa8:	89bb      	ldrh	r3, [r7, #12]
 801bfaa:	4619      	mov	r1, r3
 801bfac:	6878      	ldr	r0, [r7, #4]
 801bfae:	f7f7 ff2f 	bl	8013e10 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801bfb2:	687b      	ldr	r3, [r7, #4]
 801bfb4:	895b      	ldrh	r3, [r3, #10]
 801bfb6:	89fa      	ldrh	r2, [r7, #14]
 801bfb8:	429a      	cmp	r2, r3
 801bfba:	d807      	bhi.n	801bfcc <ip4_input+0x74>
 801bfbc:	687b      	ldr	r3, [r7, #4]
 801bfbe:	891b      	ldrh	r3, [r3, #8]
 801bfc0:	89ba      	ldrh	r2, [r7, #12]
 801bfc2:	429a      	cmp	r2, r3
 801bfc4:	d802      	bhi.n	801bfcc <ip4_input+0x74>
 801bfc6:	89fb      	ldrh	r3, [r7, #14]
 801bfc8:	2b13      	cmp	r3, #19
 801bfca:	d804      	bhi.n	801bfd6 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801bfcc:	6878      	ldr	r0, [r7, #4]
 801bfce:	f7f8 f8a5 	bl	801411c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801bfd2:	2300      	movs	r3, #0
 801bfd4:	e0db      	b.n	801c18e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801bfd6:	697b      	ldr	r3, [r7, #20]
 801bfd8:	691b      	ldr	r3, [r3, #16]
 801bfda:	4a6f      	ldr	r2, [pc, #444]	@ (801c198 <ip4_input+0x240>)
 801bfdc:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801bfde:	697b      	ldr	r3, [r7, #20]
 801bfe0:	68db      	ldr	r3, [r3, #12]
 801bfe2:	4a6d      	ldr	r2, [pc, #436]	@ (801c198 <ip4_input+0x240>)
 801bfe4:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801bfe6:	4b6c      	ldr	r3, [pc, #432]	@ (801c198 <ip4_input+0x240>)
 801bfe8:	695b      	ldr	r3, [r3, #20]
 801bfea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801bfee:	2be0      	cmp	r3, #224	@ 0xe0
 801bff0:	d112      	bne.n	801c018 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801bff2:	683b      	ldr	r3, [r7, #0]
 801bff4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801bff8:	f003 0301 	and.w	r3, r3, #1
 801bffc:	b2db      	uxtb	r3, r3
 801bffe:	2b00      	cmp	r3, #0
 801c000:	d007      	beq.n	801c012 <ip4_input+0xba>
 801c002:	683b      	ldr	r3, [r7, #0]
 801c004:	3304      	adds	r3, #4
 801c006:	681b      	ldr	r3, [r3, #0]
 801c008:	2b00      	cmp	r3, #0
 801c00a:	d002      	beq.n	801c012 <ip4_input+0xba>
      netif = inp;
 801c00c:	683b      	ldr	r3, [r7, #0]
 801c00e:	613b      	str	r3, [r7, #16]
 801c010:	e02a      	b.n	801c068 <ip4_input+0x110>
    } else {
      netif = NULL;
 801c012:	2300      	movs	r3, #0
 801c014:	613b      	str	r3, [r7, #16]
 801c016:	e027      	b.n	801c068 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801c018:	6838      	ldr	r0, [r7, #0]
 801c01a:	f7ff ff73 	bl	801bf04 <ip4_input_accept>
 801c01e:	4603      	mov	r3, r0
 801c020:	2b00      	cmp	r3, #0
 801c022:	d002      	beq.n	801c02a <ip4_input+0xd2>
      netif = inp;
 801c024:	683b      	ldr	r3, [r7, #0]
 801c026:	613b      	str	r3, [r7, #16]
 801c028:	e01e      	b.n	801c068 <ip4_input+0x110>
    } else {
      netif = NULL;
 801c02a:	2300      	movs	r3, #0
 801c02c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801c02e:	4b5a      	ldr	r3, [pc, #360]	@ (801c198 <ip4_input+0x240>)
 801c030:	695b      	ldr	r3, [r3, #20]
 801c032:	b2db      	uxtb	r3, r3
 801c034:	2b7f      	cmp	r3, #127	@ 0x7f
 801c036:	d017      	beq.n	801c068 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801c038:	4b58      	ldr	r3, [pc, #352]	@ (801c19c <ip4_input+0x244>)
 801c03a:	681b      	ldr	r3, [r3, #0]
 801c03c:	613b      	str	r3, [r7, #16]
 801c03e:	e00e      	b.n	801c05e <ip4_input+0x106>
          if (netif == inp) {
 801c040:	693a      	ldr	r2, [r7, #16]
 801c042:	683b      	ldr	r3, [r7, #0]
 801c044:	429a      	cmp	r2, r3
 801c046:	d006      	beq.n	801c056 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801c048:	6938      	ldr	r0, [r7, #16]
 801c04a:	f7ff ff5b 	bl	801bf04 <ip4_input_accept>
 801c04e:	4603      	mov	r3, r0
 801c050:	2b00      	cmp	r3, #0
 801c052:	d108      	bne.n	801c066 <ip4_input+0x10e>
 801c054:	e000      	b.n	801c058 <ip4_input+0x100>
            continue;
 801c056:	bf00      	nop
        NETIF_FOREACH(netif) {
 801c058:	693b      	ldr	r3, [r7, #16]
 801c05a:	681b      	ldr	r3, [r3, #0]
 801c05c:	613b      	str	r3, [r7, #16]
 801c05e:	693b      	ldr	r3, [r7, #16]
 801c060:	2b00      	cmp	r3, #0
 801c062:	d1ed      	bne.n	801c040 <ip4_input+0xe8>
 801c064:	e000      	b.n	801c068 <ip4_input+0x110>
            break;
 801c066:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801c068:	4b4b      	ldr	r3, [pc, #300]	@ (801c198 <ip4_input+0x240>)
 801c06a:	691b      	ldr	r3, [r3, #16]
 801c06c:	6839      	ldr	r1, [r7, #0]
 801c06e:	4618      	mov	r0, r3
 801c070:	f000 f96e 	bl	801c350 <ip4_addr_isbroadcast_u32>
 801c074:	4603      	mov	r3, r0
 801c076:	2b00      	cmp	r3, #0
 801c078:	d105      	bne.n	801c086 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801c07a:	4b47      	ldr	r3, [pc, #284]	@ (801c198 <ip4_input+0x240>)
 801c07c:	691b      	ldr	r3, [r3, #16]
 801c07e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801c082:	2be0      	cmp	r3, #224	@ 0xe0
 801c084:	d104      	bne.n	801c090 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801c086:	6878      	ldr	r0, [r7, #4]
 801c088:	f7f8 f848 	bl	801411c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801c08c:	2300      	movs	r3, #0
 801c08e:	e07e      	b.n	801c18e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801c090:	693b      	ldr	r3, [r7, #16]
 801c092:	2b00      	cmp	r3, #0
 801c094:	d104      	bne.n	801c0a0 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801c096:	6878      	ldr	r0, [r7, #4]
 801c098:	f7f8 f840 	bl	801411c <pbuf_free>
    return ERR_OK;
 801c09c:	2300      	movs	r3, #0
 801c09e:	e076      	b.n	801c18e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801c0a0:	697b      	ldr	r3, [r7, #20]
 801c0a2:	88db      	ldrh	r3, [r3, #6]
 801c0a4:	b29b      	uxth	r3, r3
 801c0a6:	461a      	mov	r2, r3
 801c0a8:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 801c0ac:	4013      	ands	r3, r2
 801c0ae:	2b00      	cmp	r3, #0
 801c0b0:	d00b      	beq.n	801c0ca <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801c0b2:	6878      	ldr	r0, [r7, #4]
 801c0b4:	f000 fd22 	bl	801cafc <ip4_reass>
 801c0b8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801c0ba:	687b      	ldr	r3, [r7, #4]
 801c0bc:	2b00      	cmp	r3, #0
 801c0be:	d101      	bne.n	801c0c4 <ip4_input+0x16c>
      return ERR_OK;
 801c0c0:	2300      	movs	r3, #0
 801c0c2:	e064      	b.n	801c18e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801c0c4:	687b      	ldr	r3, [r7, #4]
 801c0c6:	685b      	ldr	r3, [r3, #4]
 801c0c8:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801c0ca:	4a33      	ldr	r2, [pc, #204]	@ (801c198 <ip4_input+0x240>)
 801c0cc:	693b      	ldr	r3, [r7, #16]
 801c0ce:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801c0d0:	4a31      	ldr	r2, [pc, #196]	@ (801c198 <ip4_input+0x240>)
 801c0d2:	683b      	ldr	r3, [r7, #0]
 801c0d4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801c0d6:	4a30      	ldr	r2, [pc, #192]	@ (801c198 <ip4_input+0x240>)
 801c0d8:	697b      	ldr	r3, [r7, #20]
 801c0da:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801c0dc:	697b      	ldr	r3, [r7, #20]
 801c0de:	781b      	ldrb	r3, [r3, #0]
 801c0e0:	f003 030f 	and.w	r3, r3, #15
 801c0e4:	b2db      	uxtb	r3, r3
 801c0e6:	009b      	lsls	r3, r3, #2
 801c0e8:	b2db      	uxtb	r3, r3
 801c0ea:	461a      	mov	r2, r3
 801c0ec:	4b2a      	ldr	r3, [pc, #168]	@ (801c198 <ip4_input+0x240>)
 801c0ee:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801c0f0:	89fb      	ldrh	r3, [r7, #14]
 801c0f2:	4619      	mov	r1, r3
 801c0f4:	6878      	ldr	r0, [r7, #4]
 801c0f6:	f7f7 ff8b 	bl	8014010 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801c0fa:	697b      	ldr	r3, [r7, #20]
 801c0fc:	7a5b      	ldrb	r3, [r3, #9]
 801c0fe:	2b11      	cmp	r3, #17
 801c100:	d006      	beq.n	801c110 <ip4_input+0x1b8>
 801c102:	2b11      	cmp	r3, #17
 801c104:	dc13      	bgt.n	801c12e <ip4_input+0x1d6>
 801c106:	2b01      	cmp	r3, #1
 801c108:	d00c      	beq.n	801c124 <ip4_input+0x1cc>
 801c10a:	2b06      	cmp	r3, #6
 801c10c:	d005      	beq.n	801c11a <ip4_input+0x1c2>
 801c10e:	e00e      	b.n	801c12e <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801c110:	6839      	ldr	r1, [r7, #0]
 801c112:	6878      	ldr	r0, [r7, #4]
 801c114:	f7fe fc9a 	bl	801aa4c <udp_input>
        break;
 801c118:	e026      	b.n	801c168 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801c11a:	6839      	ldr	r1, [r7, #0]
 801c11c:	6878      	ldr	r0, [r7, #4]
 801c11e:	f7fa f891 	bl	8016244 <tcp_input>
        break;
 801c122:	e021      	b.n	801c168 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801c124:	6839      	ldr	r1, [r7, #0]
 801c126:	6878      	ldr	r0, [r7, #4]
 801c128:	f7ff fcf0 	bl	801bb0c <icmp_input>
        break;
 801c12c:	e01c      	b.n	801c168 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801c12e:	4b1a      	ldr	r3, [pc, #104]	@ (801c198 <ip4_input+0x240>)
 801c130:	695b      	ldr	r3, [r3, #20]
 801c132:	6939      	ldr	r1, [r7, #16]
 801c134:	4618      	mov	r0, r3
 801c136:	f000 f90b 	bl	801c350 <ip4_addr_isbroadcast_u32>
 801c13a:	4603      	mov	r3, r0
 801c13c:	2b00      	cmp	r3, #0
 801c13e:	d10f      	bne.n	801c160 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801c140:	4b15      	ldr	r3, [pc, #84]	@ (801c198 <ip4_input+0x240>)
 801c142:	695b      	ldr	r3, [r3, #20]
 801c144:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801c148:	2be0      	cmp	r3, #224	@ 0xe0
 801c14a:	d009      	beq.n	801c160 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801c14c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801c150:	4619      	mov	r1, r3
 801c152:	6878      	ldr	r0, [r7, #4]
 801c154:	f7f7 ffcf 	bl	80140f6 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801c158:	2102      	movs	r1, #2
 801c15a:	6878      	ldr	r0, [r7, #4]
 801c15c:	f7ff fdd8 	bl	801bd10 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801c160:	6878      	ldr	r0, [r7, #4]
 801c162:	f7f7 ffdb 	bl	801411c <pbuf_free>
        break;
 801c166:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801c168:	4b0b      	ldr	r3, [pc, #44]	@ (801c198 <ip4_input+0x240>)
 801c16a:	2200      	movs	r2, #0
 801c16c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801c16e:	4b0a      	ldr	r3, [pc, #40]	@ (801c198 <ip4_input+0x240>)
 801c170:	2200      	movs	r2, #0
 801c172:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801c174:	4b08      	ldr	r3, [pc, #32]	@ (801c198 <ip4_input+0x240>)
 801c176:	2200      	movs	r2, #0
 801c178:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801c17a:	4b07      	ldr	r3, [pc, #28]	@ (801c198 <ip4_input+0x240>)
 801c17c:	2200      	movs	r2, #0
 801c17e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801c180:	4b05      	ldr	r3, [pc, #20]	@ (801c198 <ip4_input+0x240>)
 801c182:	2200      	movs	r2, #0
 801c184:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801c186:	4b04      	ldr	r3, [pc, #16]	@ (801c198 <ip4_input+0x240>)
 801c188:	2200      	movs	r2, #0
 801c18a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801c18c:	2300      	movs	r3, #0
}
 801c18e:	4618      	mov	r0, r3
 801c190:	3718      	adds	r7, #24
 801c192:	46bd      	mov	sp, r7
 801c194:	bd80      	pop	{r7, pc}
 801c196:	bf00      	nop
 801c198:	2000936c 	.word	0x2000936c
 801c19c:	2000cab4 	.word	0x2000cab4

0801c1a0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801c1a0:	b580      	push	{r7, lr}
 801c1a2:	b08a      	sub	sp, #40	@ 0x28
 801c1a4:	af04      	add	r7, sp, #16
 801c1a6:	60f8      	str	r0, [r7, #12]
 801c1a8:	60b9      	str	r1, [r7, #8]
 801c1aa:	607a      	str	r2, [r7, #4]
 801c1ac:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801c1ae:	68bb      	ldr	r3, [r7, #8]
 801c1b0:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801c1b2:	687b      	ldr	r3, [r7, #4]
 801c1b4:	2b00      	cmp	r3, #0
 801c1b6:	d009      	beq.n	801c1cc <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801c1b8:	68bb      	ldr	r3, [r7, #8]
 801c1ba:	2b00      	cmp	r3, #0
 801c1bc:	d003      	beq.n	801c1c6 <ip4_output_if+0x26>
 801c1be:	68bb      	ldr	r3, [r7, #8]
 801c1c0:	681b      	ldr	r3, [r3, #0]
 801c1c2:	2b00      	cmp	r3, #0
 801c1c4:	d102      	bne.n	801c1cc <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801c1c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c1c8:	3304      	adds	r3, #4
 801c1ca:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801c1cc:	78fa      	ldrb	r2, [r7, #3]
 801c1ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c1d0:	9302      	str	r3, [sp, #8]
 801c1d2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801c1d6:	9301      	str	r3, [sp, #4]
 801c1d8:	f897 3020 	ldrb.w	r3, [r7, #32]
 801c1dc:	9300      	str	r3, [sp, #0]
 801c1de:	4613      	mov	r3, r2
 801c1e0:	687a      	ldr	r2, [r7, #4]
 801c1e2:	6979      	ldr	r1, [r7, #20]
 801c1e4:	68f8      	ldr	r0, [r7, #12]
 801c1e6:	f000 f805 	bl	801c1f4 <ip4_output_if_src>
 801c1ea:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801c1ec:	4618      	mov	r0, r3
 801c1ee:	3718      	adds	r7, #24
 801c1f0:	46bd      	mov	sp, r7
 801c1f2:	bd80      	pop	{r7, pc}

0801c1f4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801c1f4:	b580      	push	{r7, lr}
 801c1f6:	b088      	sub	sp, #32
 801c1f8:	af00      	add	r7, sp, #0
 801c1fa:	60f8      	str	r0, [r7, #12]
 801c1fc:	60b9      	str	r1, [r7, #8]
 801c1fe:	607a      	str	r2, [r7, #4]
 801c200:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801c202:	68fb      	ldr	r3, [r7, #12]
 801c204:	7b9b      	ldrb	r3, [r3, #14]
 801c206:	2b01      	cmp	r3, #1
 801c208:	d006      	beq.n	801c218 <ip4_output_if_src+0x24>
 801c20a:	4b4b      	ldr	r3, [pc, #300]	@ (801c338 <ip4_output_if_src+0x144>)
 801c20c:	f44f 7255 	mov.w	r2, #852	@ 0x354
 801c210:	494a      	ldr	r1, [pc, #296]	@ (801c33c <ip4_output_if_src+0x148>)
 801c212:	484b      	ldr	r0, [pc, #300]	@ (801c340 <ip4_output_if_src+0x14c>)
 801c214:	f002 f83a 	bl	801e28c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801c218:	687b      	ldr	r3, [r7, #4]
 801c21a:	2b00      	cmp	r3, #0
 801c21c:	d060      	beq.n	801c2e0 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801c21e:	2314      	movs	r3, #20
 801c220:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801c222:	2114      	movs	r1, #20
 801c224:	68f8      	ldr	r0, [r7, #12]
 801c226:	f7f7 fee3 	bl	8013ff0 <pbuf_add_header>
 801c22a:	4603      	mov	r3, r0
 801c22c:	2b00      	cmp	r3, #0
 801c22e:	d002      	beq.n	801c236 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801c230:	f06f 0301 	mvn.w	r3, #1
 801c234:	e07c      	b.n	801c330 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801c236:	68fb      	ldr	r3, [r7, #12]
 801c238:	685b      	ldr	r3, [r3, #4]
 801c23a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801c23c:	68fb      	ldr	r3, [r7, #12]
 801c23e:	895b      	ldrh	r3, [r3, #10]
 801c240:	2b13      	cmp	r3, #19
 801c242:	d806      	bhi.n	801c252 <ip4_output_if_src+0x5e>
 801c244:	4b3c      	ldr	r3, [pc, #240]	@ (801c338 <ip4_output_if_src+0x144>)
 801c246:	f44f 7262 	mov.w	r2, #904	@ 0x388
 801c24a:	493e      	ldr	r1, [pc, #248]	@ (801c344 <ip4_output_if_src+0x150>)
 801c24c:	483c      	ldr	r0, [pc, #240]	@ (801c340 <ip4_output_if_src+0x14c>)
 801c24e:	f002 f81d 	bl	801e28c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801c252:	69fb      	ldr	r3, [r7, #28]
 801c254:	78fa      	ldrb	r2, [r7, #3]
 801c256:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801c258:	69fb      	ldr	r3, [r7, #28]
 801c25a:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 801c25e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801c260:	687b      	ldr	r3, [r7, #4]
 801c262:	681a      	ldr	r2, [r3, #0]
 801c264:	69fb      	ldr	r3, [r7, #28]
 801c266:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801c268:	8b7b      	ldrh	r3, [r7, #26]
 801c26a:	089b      	lsrs	r3, r3, #2
 801c26c:	b29b      	uxth	r3, r3
 801c26e:	b2db      	uxtb	r3, r3
 801c270:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c274:	b2da      	uxtb	r2, r3
 801c276:	69fb      	ldr	r3, [r7, #28]
 801c278:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801c27a:	69fb      	ldr	r3, [r7, #28]
 801c27c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801c280:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801c282:	68fb      	ldr	r3, [r7, #12]
 801c284:	891b      	ldrh	r3, [r3, #8]
 801c286:	4618      	mov	r0, r3
 801c288:	f7f6 fb88 	bl	801299c <lwip_htons>
 801c28c:	4603      	mov	r3, r0
 801c28e:	461a      	mov	r2, r3
 801c290:	69fb      	ldr	r3, [r7, #28]
 801c292:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801c294:	69fb      	ldr	r3, [r7, #28]
 801c296:	2200      	movs	r2, #0
 801c298:	719a      	strb	r2, [r3, #6]
 801c29a:	2200      	movs	r2, #0
 801c29c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801c29e:	4b2a      	ldr	r3, [pc, #168]	@ (801c348 <ip4_output_if_src+0x154>)
 801c2a0:	881b      	ldrh	r3, [r3, #0]
 801c2a2:	4618      	mov	r0, r3
 801c2a4:	f7f6 fb7a 	bl	801299c <lwip_htons>
 801c2a8:	4603      	mov	r3, r0
 801c2aa:	461a      	mov	r2, r3
 801c2ac:	69fb      	ldr	r3, [r7, #28]
 801c2ae:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801c2b0:	4b25      	ldr	r3, [pc, #148]	@ (801c348 <ip4_output_if_src+0x154>)
 801c2b2:	881b      	ldrh	r3, [r3, #0]
 801c2b4:	3301      	adds	r3, #1
 801c2b6:	b29a      	uxth	r2, r3
 801c2b8:	4b23      	ldr	r3, [pc, #140]	@ (801c348 <ip4_output_if_src+0x154>)
 801c2ba:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801c2bc:	68bb      	ldr	r3, [r7, #8]
 801c2be:	2b00      	cmp	r3, #0
 801c2c0:	d104      	bne.n	801c2cc <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801c2c2:	4b22      	ldr	r3, [pc, #136]	@ (801c34c <ip4_output_if_src+0x158>)
 801c2c4:	681a      	ldr	r2, [r3, #0]
 801c2c6:	69fb      	ldr	r3, [r7, #28]
 801c2c8:	60da      	str	r2, [r3, #12]
 801c2ca:	e003      	b.n	801c2d4 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801c2cc:	68bb      	ldr	r3, [r7, #8]
 801c2ce:	681a      	ldr	r2, [r3, #0]
 801c2d0:	69fb      	ldr	r3, [r7, #28]
 801c2d2:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801c2d4:	69fb      	ldr	r3, [r7, #28]
 801c2d6:	2200      	movs	r2, #0
 801c2d8:	729a      	strb	r2, [r3, #10]
 801c2da:	2200      	movs	r2, #0
 801c2dc:	72da      	strb	r2, [r3, #11]
 801c2de:	e00f      	b.n	801c300 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801c2e0:	68fb      	ldr	r3, [r7, #12]
 801c2e2:	895b      	ldrh	r3, [r3, #10]
 801c2e4:	2b13      	cmp	r3, #19
 801c2e6:	d802      	bhi.n	801c2ee <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801c2e8:	f06f 0301 	mvn.w	r3, #1
 801c2ec:	e020      	b.n	801c330 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801c2ee:	68fb      	ldr	r3, [r7, #12]
 801c2f0:	685b      	ldr	r3, [r3, #4]
 801c2f2:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801c2f4:	69fb      	ldr	r3, [r7, #28]
 801c2f6:	691b      	ldr	r3, [r3, #16]
 801c2f8:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801c2fa:	f107 0314 	add.w	r3, r7, #20
 801c2fe:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801c300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c302:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801c304:	2b00      	cmp	r3, #0
 801c306:	d00c      	beq.n	801c322 <ip4_output_if_src+0x12e>
 801c308:	68fb      	ldr	r3, [r7, #12]
 801c30a:	891a      	ldrh	r2, [r3, #8]
 801c30c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c30e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801c310:	429a      	cmp	r2, r3
 801c312:	d906      	bls.n	801c322 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801c314:	687a      	ldr	r2, [r7, #4]
 801c316:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801c318:	68f8      	ldr	r0, [r7, #12]
 801c31a:	f000 fde3 	bl	801cee4 <ip4_frag>
 801c31e:	4603      	mov	r3, r0
 801c320:	e006      	b.n	801c330 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801c322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c324:	695b      	ldr	r3, [r3, #20]
 801c326:	687a      	ldr	r2, [r7, #4]
 801c328:	68f9      	ldr	r1, [r7, #12]
 801c32a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801c32c:	4798      	blx	r3
 801c32e:	4603      	mov	r3, r0
}
 801c330:	4618      	mov	r0, r3
 801c332:	3720      	adds	r7, #32
 801c334:	46bd      	mov	sp, r7
 801c336:	bd80      	pop	{r7, pc}
 801c338:	08023a18 	.word	0x08023a18
 801c33c:	08023a4c 	.word	0x08023a4c
 801c340:	08023a58 	.word	0x08023a58
 801c344:	08023a80 	.word	0x08023a80
 801c348:	2000cc12 	.word	0x2000cc12
 801c34c:	08023ef0 	.word	0x08023ef0

0801c350 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801c350:	b480      	push	{r7}
 801c352:	b085      	sub	sp, #20
 801c354:	af00      	add	r7, sp, #0
 801c356:	6078      	str	r0, [r7, #4]
 801c358:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801c35a:	687b      	ldr	r3, [r7, #4]
 801c35c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801c35e:	687b      	ldr	r3, [r7, #4]
 801c360:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c364:	d002      	beq.n	801c36c <ip4_addr_isbroadcast_u32+0x1c>
 801c366:	687b      	ldr	r3, [r7, #4]
 801c368:	2b00      	cmp	r3, #0
 801c36a:	d101      	bne.n	801c370 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801c36c:	2301      	movs	r3, #1
 801c36e:	e02a      	b.n	801c3c6 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801c370:	683b      	ldr	r3, [r7, #0]
 801c372:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801c376:	f003 0302 	and.w	r3, r3, #2
 801c37a:	2b00      	cmp	r3, #0
 801c37c:	d101      	bne.n	801c382 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801c37e:	2300      	movs	r3, #0
 801c380:	e021      	b.n	801c3c6 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801c382:	683b      	ldr	r3, [r7, #0]
 801c384:	3304      	adds	r3, #4
 801c386:	681b      	ldr	r3, [r3, #0]
 801c388:	687a      	ldr	r2, [r7, #4]
 801c38a:	429a      	cmp	r2, r3
 801c38c:	d101      	bne.n	801c392 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801c38e:	2300      	movs	r3, #0
 801c390:	e019      	b.n	801c3c6 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801c392:	68fa      	ldr	r2, [r7, #12]
 801c394:	683b      	ldr	r3, [r7, #0]
 801c396:	3304      	adds	r3, #4
 801c398:	681b      	ldr	r3, [r3, #0]
 801c39a:	405a      	eors	r2, r3
 801c39c:	683b      	ldr	r3, [r7, #0]
 801c39e:	3308      	adds	r3, #8
 801c3a0:	681b      	ldr	r3, [r3, #0]
 801c3a2:	4013      	ands	r3, r2
 801c3a4:	2b00      	cmp	r3, #0
 801c3a6:	d10d      	bne.n	801c3c4 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801c3a8:	683b      	ldr	r3, [r7, #0]
 801c3aa:	3308      	adds	r3, #8
 801c3ac:	681b      	ldr	r3, [r3, #0]
 801c3ae:	43da      	mvns	r2, r3
 801c3b0:	687b      	ldr	r3, [r7, #4]
 801c3b2:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801c3b4:	683b      	ldr	r3, [r7, #0]
 801c3b6:	3308      	adds	r3, #8
 801c3b8:	681b      	ldr	r3, [r3, #0]
 801c3ba:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801c3bc:	429a      	cmp	r2, r3
 801c3be:	d101      	bne.n	801c3c4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801c3c0:	2301      	movs	r3, #1
 801c3c2:	e000      	b.n	801c3c6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801c3c4:	2300      	movs	r3, #0
  }
}
 801c3c6:	4618      	mov	r0, r3
 801c3c8:	3714      	adds	r7, #20
 801c3ca:	46bd      	mov	sp, r7
 801c3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c3d0:	4770      	bx	lr
	...

0801c3d4 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 801c3d4:	b580      	push	{r7, lr}
 801c3d6:	b082      	sub	sp, #8
 801c3d8:	af00      	add	r7, sp, #0
 801c3da:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 801c3dc:	2210      	movs	r2, #16
 801c3de:	4904      	ldr	r1, [pc, #16]	@ (801c3f0 <ip4addr_ntoa+0x1c>)
 801c3e0:	6878      	ldr	r0, [r7, #4]
 801c3e2:	f000 f807 	bl	801c3f4 <ip4addr_ntoa_r>
 801c3e6:	4603      	mov	r3, r0
}
 801c3e8:	4618      	mov	r0, r3
 801c3ea:	3708      	adds	r7, #8
 801c3ec:	46bd      	mov	sp, r7
 801c3ee:	bd80      	pop	{r7, pc}
 801c3f0:	2000cc14 	.word	0x2000cc14

0801c3f4 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 801c3f4:	b480      	push	{r7}
 801c3f6:	b08d      	sub	sp, #52	@ 0x34
 801c3f8:	af00      	add	r7, sp, #0
 801c3fa:	60f8      	str	r0, [r7, #12]
 801c3fc:	60b9      	str	r1, [r7, #8]
 801c3fe:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 801c400:	2300      	movs	r3, #0
 801c402:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 801c404:	68fb      	ldr	r3, [r7, #12]
 801c406:	681b      	ldr	r3, [r3, #0]
 801c408:	61bb      	str	r3, [r7, #24]

  rp = buf;
 801c40a:	68bb      	ldr	r3, [r7, #8]
 801c40c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ap = (u8_t *)&s_addr;
 801c40e:	f107 0318 	add.w	r3, r7, #24
 801c412:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 801c414:	2300      	movs	r3, #0
 801c416:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801c41a:	e058      	b.n	801c4ce <ip4addr_ntoa_r+0xda>
    i = 0;
 801c41c:	2300      	movs	r3, #0
 801c41e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    do {
      rem = *ap % (u8_t)10;
 801c422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c424:	781a      	ldrb	r2, [r3, #0]
 801c426:	4b32      	ldr	r3, [pc, #200]	@ (801c4f0 <ip4addr_ntoa_r+0xfc>)
 801c428:	fba3 1302 	umull	r1, r3, r3, r2
 801c42c:	08d9      	lsrs	r1, r3, #3
 801c42e:	460b      	mov	r3, r1
 801c430:	009b      	lsls	r3, r3, #2
 801c432:	440b      	add	r3, r1
 801c434:	005b      	lsls	r3, r3, #1
 801c436:	1ad3      	subs	r3, r2, r3
 801c438:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 801c43a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c43c:	781b      	ldrb	r3, [r3, #0]
 801c43e:	4a2c      	ldr	r2, [pc, #176]	@ (801c4f0 <ip4addr_ntoa_r+0xfc>)
 801c440:	fba2 2303 	umull	r2, r3, r2, r3
 801c444:	08db      	lsrs	r3, r3, #3
 801c446:	b2da      	uxtb	r2, r3
 801c448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c44a:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 801c44c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c450:	1c5a      	adds	r2, r3, #1
 801c452:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 801c456:	4619      	mov	r1, r3
 801c458:	7ffb      	ldrb	r3, [r7, #31]
 801c45a:	3330      	adds	r3, #48	@ 0x30
 801c45c:	b2da      	uxtb	r2, r3
 801c45e:	f101 0330 	add.w	r3, r1, #48	@ 0x30
 801c462:	443b      	add	r3, r7
 801c464:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 801c468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c46a:	781b      	ldrb	r3, [r3, #0]
 801c46c:	2b00      	cmp	r3, #0
 801c46e:	d1d8      	bne.n	801c422 <ip4addr_ntoa_r+0x2e>
    while (i--) {
 801c470:	e011      	b.n	801c496 <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 801c472:	6a3b      	ldr	r3, [r7, #32]
 801c474:	1c5a      	adds	r2, r3, #1
 801c476:	623a      	str	r2, [r7, #32]
 801c478:	687a      	ldr	r2, [r7, #4]
 801c47a:	429a      	cmp	r2, r3
 801c47c:	dc01      	bgt.n	801c482 <ip4addr_ntoa_r+0x8e>
        return NULL;
 801c47e:	2300      	movs	r3, #0
 801c480:	e030      	b.n	801c4e4 <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 801c482:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 801c486:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c488:	1c59      	adds	r1, r3, #1
 801c48a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801c48c:	3230      	adds	r2, #48	@ 0x30
 801c48e:	443a      	add	r2, r7
 801c490:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 801c494:	701a      	strb	r2, [r3, #0]
    while (i--) {
 801c496:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c49a:	1e5a      	subs	r2, r3, #1
 801c49c:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 801c4a0:	2b00      	cmp	r3, #0
 801c4a2:	d1e6      	bne.n	801c472 <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 801c4a4:	6a3b      	ldr	r3, [r7, #32]
 801c4a6:	1c5a      	adds	r2, r3, #1
 801c4a8:	623a      	str	r2, [r7, #32]
 801c4aa:	687a      	ldr	r2, [r7, #4]
 801c4ac:	429a      	cmp	r2, r3
 801c4ae:	dc01      	bgt.n	801c4b4 <ip4addr_ntoa_r+0xc0>
      return NULL;
 801c4b0:	2300      	movs	r3, #0
 801c4b2:	e017      	b.n	801c4e4 <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 801c4b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c4b6:	1c5a      	adds	r2, r3, #1
 801c4b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801c4ba:	222e      	movs	r2, #46	@ 0x2e
 801c4bc:	701a      	strb	r2, [r3, #0]
    ap++;
 801c4be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c4c0:	3301      	adds	r3, #1
 801c4c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 801c4c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c4c8:	3301      	adds	r3, #1
 801c4ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801c4ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c4d2:	2b03      	cmp	r3, #3
 801c4d4:	d9a2      	bls.n	801c41c <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 801c4d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c4d8:	3b01      	subs	r3, #1
 801c4da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801c4dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c4de:	2200      	movs	r2, #0
 801c4e0:	701a      	strb	r2, [r3, #0]
  return buf;
 801c4e2:	68bb      	ldr	r3, [r7, #8]
}
 801c4e4:	4618      	mov	r0, r3
 801c4e6:	3734      	adds	r7, #52	@ 0x34
 801c4e8:	46bd      	mov	sp, r7
 801c4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c4ee:	4770      	bx	lr
 801c4f0:	cccccccd 	.word	0xcccccccd

0801c4f4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801c4f4:	b580      	push	{r7, lr}
 801c4f6:	b084      	sub	sp, #16
 801c4f8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801c4fa:	2300      	movs	r3, #0
 801c4fc:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801c4fe:	4b12      	ldr	r3, [pc, #72]	@ (801c548 <ip_reass_tmr+0x54>)
 801c500:	681b      	ldr	r3, [r3, #0]
 801c502:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801c504:	e018      	b.n	801c538 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801c506:	68fb      	ldr	r3, [r7, #12]
 801c508:	7fdb      	ldrb	r3, [r3, #31]
 801c50a:	2b00      	cmp	r3, #0
 801c50c:	d00b      	beq.n	801c526 <ip_reass_tmr+0x32>
      r->timer--;
 801c50e:	68fb      	ldr	r3, [r7, #12]
 801c510:	7fdb      	ldrb	r3, [r3, #31]
 801c512:	3b01      	subs	r3, #1
 801c514:	b2da      	uxtb	r2, r3
 801c516:	68fb      	ldr	r3, [r7, #12]
 801c518:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801c51a:	68fb      	ldr	r3, [r7, #12]
 801c51c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801c51e:	68fb      	ldr	r3, [r7, #12]
 801c520:	681b      	ldr	r3, [r3, #0]
 801c522:	60fb      	str	r3, [r7, #12]
 801c524:	e008      	b.n	801c538 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801c526:	68fb      	ldr	r3, [r7, #12]
 801c528:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801c52a:	68fb      	ldr	r3, [r7, #12]
 801c52c:	681b      	ldr	r3, [r3, #0]
 801c52e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801c530:	68b9      	ldr	r1, [r7, #8]
 801c532:	6878      	ldr	r0, [r7, #4]
 801c534:	f000 f80a 	bl	801c54c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801c538:	68fb      	ldr	r3, [r7, #12]
 801c53a:	2b00      	cmp	r3, #0
 801c53c:	d1e3      	bne.n	801c506 <ip_reass_tmr+0x12>
    }
  }
}
 801c53e:	bf00      	nop
 801c540:	bf00      	nop
 801c542:	3710      	adds	r7, #16
 801c544:	46bd      	mov	sp, r7
 801c546:	bd80      	pop	{r7, pc}
 801c548:	2000cc24 	.word	0x2000cc24

0801c54c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801c54c:	b580      	push	{r7, lr}
 801c54e:	b088      	sub	sp, #32
 801c550:	af00      	add	r7, sp, #0
 801c552:	6078      	str	r0, [r7, #4]
 801c554:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801c556:	2300      	movs	r3, #0
 801c558:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801c55a:	683a      	ldr	r2, [r7, #0]
 801c55c:	687b      	ldr	r3, [r7, #4]
 801c55e:	429a      	cmp	r2, r3
 801c560:	d105      	bne.n	801c56e <ip_reass_free_complete_datagram+0x22>
 801c562:	4b45      	ldr	r3, [pc, #276]	@ (801c678 <ip_reass_free_complete_datagram+0x12c>)
 801c564:	22ab      	movs	r2, #171	@ 0xab
 801c566:	4945      	ldr	r1, [pc, #276]	@ (801c67c <ip_reass_free_complete_datagram+0x130>)
 801c568:	4845      	ldr	r0, [pc, #276]	@ (801c680 <ip_reass_free_complete_datagram+0x134>)
 801c56a:	f001 fe8f 	bl	801e28c <iprintf>
  if (prev != NULL) {
 801c56e:	683b      	ldr	r3, [r7, #0]
 801c570:	2b00      	cmp	r3, #0
 801c572:	d00a      	beq.n	801c58a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801c574:	683b      	ldr	r3, [r7, #0]
 801c576:	681b      	ldr	r3, [r3, #0]
 801c578:	687a      	ldr	r2, [r7, #4]
 801c57a:	429a      	cmp	r2, r3
 801c57c:	d005      	beq.n	801c58a <ip_reass_free_complete_datagram+0x3e>
 801c57e:	4b3e      	ldr	r3, [pc, #248]	@ (801c678 <ip_reass_free_complete_datagram+0x12c>)
 801c580:	22ad      	movs	r2, #173	@ 0xad
 801c582:	4940      	ldr	r1, [pc, #256]	@ (801c684 <ip_reass_free_complete_datagram+0x138>)
 801c584:	483e      	ldr	r0, [pc, #248]	@ (801c680 <ip_reass_free_complete_datagram+0x134>)
 801c586:	f001 fe81 	bl	801e28c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801c58a:	687b      	ldr	r3, [r7, #4]
 801c58c:	685b      	ldr	r3, [r3, #4]
 801c58e:	685b      	ldr	r3, [r3, #4]
 801c590:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801c592:	697b      	ldr	r3, [r7, #20]
 801c594:	889b      	ldrh	r3, [r3, #4]
 801c596:	b29b      	uxth	r3, r3
 801c598:	2b00      	cmp	r3, #0
 801c59a:	d12a      	bne.n	801c5f2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801c59c:	687b      	ldr	r3, [r7, #4]
 801c59e:	685b      	ldr	r3, [r3, #4]
 801c5a0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801c5a2:	697b      	ldr	r3, [r7, #20]
 801c5a4:	681a      	ldr	r2, [r3, #0]
 801c5a6:	687b      	ldr	r3, [r7, #4]
 801c5a8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801c5aa:	69bb      	ldr	r3, [r7, #24]
 801c5ac:	6858      	ldr	r0, [r3, #4]
 801c5ae:	687b      	ldr	r3, [r7, #4]
 801c5b0:	3308      	adds	r3, #8
 801c5b2:	2214      	movs	r2, #20
 801c5b4:	4619      	mov	r1, r3
 801c5b6:	f002 f81c 	bl	801e5f2 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801c5ba:	2101      	movs	r1, #1
 801c5bc:	69b8      	ldr	r0, [r7, #24]
 801c5be:	f7ff fbb7 	bl	801bd30 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801c5c2:	69b8      	ldr	r0, [r7, #24]
 801c5c4:	f7f7 fe38 	bl	8014238 <pbuf_clen>
 801c5c8:	4603      	mov	r3, r0
 801c5ca:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801c5cc:	8bfa      	ldrh	r2, [r7, #30]
 801c5ce:	8a7b      	ldrh	r3, [r7, #18]
 801c5d0:	4413      	add	r3, r2
 801c5d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801c5d6:	db05      	blt.n	801c5e4 <ip_reass_free_complete_datagram+0x98>
 801c5d8:	4b27      	ldr	r3, [pc, #156]	@ (801c678 <ip_reass_free_complete_datagram+0x12c>)
 801c5da:	22bc      	movs	r2, #188	@ 0xbc
 801c5dc:	492a      	ldr	r1, [pc, #168]	@ (801c688 <ip_reass_free_complete_datagram+0x13c>)
 801c5de:	4828      	ldr	r0, [pc, #160]	@ (801c680 <ip_reass_free_complete_datagram+0x134>)
 801c5e0:	f001 fe54 	bl	801e28c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801c5e4:	8bfa      	ldrh	r2, [r7, #30]
 801c5e6:	8a7b      	ldrh	r3, [r7, #18]
 801c5e8:	4413      	add	r3, r2
 801c5ea:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801c5ec:	69b8      	ldr	r0, [r7, #24]
 801c5ee:	f7f7 fd95 	bl	801411c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801c5f2:	687b      	ldr	r3, [r7, #4]
 801c5f4:	685b      	ldr	r3, [r3, #4]
 801c5f6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801c5f8:	e01f      	b.n	801c63a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801c5fa:	69bb      	ldr	r3, [r7, #24]
 801c5fc:	685b      	ldr	r3, [r3, #4]
 801c5fe:	617b      	str	r3, [r7, #20]
    pcur = p;
 801c600:	69bb      	ldr	r3, [r7, #24]
 801c602:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801c604:	697b      	ldr	r3, [r7, #20]
 801c606:	681b      	ldr	r3, [r3, #0]
 801c608:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801c60a:	68f8      	ldr	r0, [r7, #12]
 801c60c:	f7f7 fe14 	bl	8014238 <pbuf_clen>
 801c610:	4603      	mov	r3, r0
 801c612:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801c614:	8bfa      	ldrh	r2, [r7, #30]
 801c616:	8a7b      	ldrh	r3, [r7, #18]
 801c618:	4413      	add	r3, r2
 801c61a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801c61e:	db05      	blt.n	801c62c <ip_reass_free_complete_datagram+0xe0>
 801c620:	4b15      	ldr	r3, [pc, #84]	@ (801c678 <ip_reass_free_complete_datagram+0x12c>)
 801c622:	22cc      	movs	r2, #204	@ 0xcc
 801c624:	4918      	ldr	r1, [pc, #96]	@ (801c688 <ip_reass_free_complete_datagram+0x13c>)
 801c626:	4816      	ldr	r0, [pc, #88]	@ (801c680 <ip_reass_free_complete_datagram+0x134>)
 801c628:	f001 fe30 	bl	801e28c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801c62c:	8bfa      	ldrh	r2, [r7, #30]
 801c62e:	8a7b      	ldrh	r3, [r7, #18]
 801c630:	4413      	add	r3, r2
 801c632:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801c634:	68f8      	ldr	r0, [r7, #12]
 801c636:	f7f7 fd71 	bl	801411c <pbuf_free>
  while (p != NULL) {
 801c63a:	69bb      	ldr	r3, [r7, #24]
 801c63c:	2b00      	cmp	r3, #0
 801c63e:	d1dc      	bne.n	801c5fa <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801c640:	6839      	ldr	r1, [r7, #0]
 801c642:	6878      	ldr	r0, [r7, #4]
 801c644:	f000 f8c2 	bl	801c7cc <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801c648:	4b10      	ldr	r3, [pc, #64]	@ (801c68c <ip_reass_free_complete_datagram+0x140>)
 801c64a:	881b      	ldrh	r3, [r3, #0]
 801c64c:	8bfa      	ldrh	r2, [r7, #30]
 801c64e:	429a      	cmp	r2, r3
 801c650:	d905      	bls.n	801c65e <ip_reass_free_complete_datagram+0x112>
 801c652:	4b09      	ldr	r3, [pc, #36]	@ (801c678 <ip_reass_free_complete_datagram+0x12c>)
 801c654:	22d2      	movs	r2, #210	@ 0xd2
 801c656:	490e      	ldr	r1, [pc, #56]	@ (801c690 <ip_reass_free_complete_datagram+0x144>)
 801c658:	4809      	ldr	r0, [pc, #36]	@ (801c680 <ip_reass_free_complete_datagram+0x134>)
 801c65a:	f001 fe17 	bl	801e28c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801c65e:	4b0b      	ldr	r3, [pc, #44]	@ (801c68c <ip_reass_free_complete_datagram+0x140>)
 801c660:	881a      	ldrh	r2, [r3, #0]
 801c662:	8bfb      	ldrh	r3, [r7, #30]
 801c664:	1ad3      	subs	r3, r2, r3
 801c666:	b29a      	uxth	r2, r3
 801c668:	4b08      	ldr	r3, [pc, #32]	@ (801c68c <ip_reass_free_complete_datagram+0x140>)
 801c66a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801c66c:	8bfb      	ldrh	r3, [r7, #30]
}
 801c66e:	4618      	mov	r0, r3
 801c670:	3720      	adds	r7, #32
 801c672:	46bd      	mov	sp, r7
 801c674:	bd80      	pop	{r7, pc}
 801c676:	bf00      	nop
 801c678:	08023ab0 	.word	0x08023ab0
 801c67c:	08023aec 	.word	0x08023aec
 801c680:	08023af8 	.word	0x08023af8
 801c684:	08023b20 	.word	0x08023b20
 801c688:	08023b34 	.word	0x08023b34
 801c68c:	2000cc28 	.word	0x2000cc28
 801c690:	08023b54 	.word	0x08023b54

0801c694 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801c694:	b580      	push	{r7, lr}
 801c696:	b08a      	sub	sp, #40	@ 0x28
 801c698:	af00      	add	r7, sp, #0
 801c69a:	6078      	str	r0, [r7, #4]
 801c69c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801c69e:	2300      	movs	r3, #0
 801c6a0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801c6a2:	2300      	movs	r3, #0
 801c6a4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801c6a6:	2300      	movs	r3, #0
 801c6a8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801c6aa:	2300      	movs	r3, #0
 801c6ac:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801c6ae:	2300      	movs	r3, #0
 801c6b0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801c6b2:	4b28      	ldr	r3, [pc, #160]	@ (801c754 <ip_reass_remove_oldest_datagram+0xc0>)
 801c6b4:	681b      	ldr	r3, [r3, #0]
 801c6b6:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801c6b8:	e030      	b.n	801c71c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801c6ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c6bc:	695a      	ldr	r2, [r3, #20]
 801c6be:	687b      	ldr	r3, [r7, #4]
 801c6c0:	68db      	ldr	r3, [r3, #12]
 801c6c2:	429a      	cmp	r2, r3
 801c6c4:	d10c      	bne.n	801c6e0 <ip_reass_remove_oldest_datagram+0x4c>
 801c6c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c6c8:	699a      	ldr	r2, [r3, #24]
 801c6ca:	687b      	ldr	r3, [r7, #4]
 801c6cc:	691b      	ldr	r3, [r3, #16]
 801c6ce:	429a      	cmp	r2, r3
 801c6d0:	d106      	bne.n	801c6e0 <ip_reass_remove_oldest_datagram+0x4c>
 801c6d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c6d4:	899a      	ldrh	r2, [r3, #12]
 801c6d6:	687b      	ldr	r3, [r7, #4]
 801c6d8:	889b      	ldrh	r3, [r3, #4]
 801c6da:	b29b      	uxth	r3, r3
 801c6dc:	429a      	cmp	r2, r3
 801c6de:	d014      	beq.n	801c70a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801c6e0:	693b      	ldr	r3, [r7, #16]
 801c6e2:	3301      	adds	r3, #1
 801c6e4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801c6e6:	6a3b      	ldr	r3, [r7, #32]
 801c6e8:	2b00      	cmp	r3, #0
 801c6ea:	d104      	bne.n	801c6f6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801c6ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c6ee:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801c6f0:	69fb      	ldr	r3, [r7, #28]
 801c6f2:	61bb      	str	r3, [r7, #24]
 801c6f4:	e009      	b.n	801c70a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801c6f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c6f8:	7fda      	ldrb	r2, [r3, #31]
 801c6fa:	6a3b      	ldr	r3, [r7, #32]
 801c6fc:	7fdb      	ldrb	r3, [r3, #31]
 801c6fe:	429a      	cmp	r2, r3
 801c700:	d803      	bhi.n	801c70a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801c702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c704:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801c706:	69fb      	ldr	r3, [r7, #28]
 801c708:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801c70a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c70c:	681b      	ldr	r3, [r3, #0]
 801c70e:	2b00      	cmp	r3, #0
 801c710:	d001      	beq.n	801c716 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801c712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c714:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801c716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c718:	681b      	ldr	r3, [r3, #0]
 801c71a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801c71c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c71e:	2b00      	cmp	r3, #0
 801c720:	d1cb      	bne.n	801c6ba <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801c722:	6a3b      	ldr	r3, [r7, #32]
 801c724:	2b00      	cmp	r3, #0
 801c726:	d008      	beq.n	801c73a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801c728:	69b9      	ldr	r1, [r7, #24]
 801c72a:	6a38      	ldr	r0, [r7, #32]
 801c72c:	f7ff ff0e 	bl	801c54c <ip_reass_free_complete_datagram>
 801c730:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801c732:	697a      	ldr	r2, [r7, #20]
 801c734:	68fb      	ldr	r3, [r7, #12]
 801c736:	4413      	add	r3, r2
 801c738:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801c73a:	697a      	ldr	r2, [r7, #20]
 801c73c:	683b      	ldr	r3, [r7, #0]
 801c73e:	429a      	cmp	r2, r3
 801c740:	da02      	bge.n	801c748 <ip_reass_remove_oldest_datagram+0xb4>
 801c742:	693b      	ldr	r3, [r7, #16]
 801c744:	2b01      	cmp	r3, #1
 801c746:	dcac      	bgt.n	801c6a2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801c748:	697b      	ldr	r3, [r7, #20]
}
 801c74a:	4618      	mov	r0, r3
 801c74c:	3728      	adds	r7, #40	@ 0x28
 801c74e:	46bd      	mov	sp, r7
 801c750:	bd80      	pop	{r7, pc}
 801c752:	bf00      	nop
 801c754:	2000cc24 	.word	0x2000cc24

0801c758 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801c758:	b580      	push	{r7, lr}
 801c75a:	b084      	sub	sp, #16
 801c75c:	af00      	add	r7, sp, #0
 801c75e:	6078      	str	r0, [r7, #4]
 801c760:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801c762:	2004      	movs	r0, #4
 801c764:	f7f6 fdf2 	bl	801334c <memp_malloc>
 801c768:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801c76a:	68fb      	ldr	r3, [r7, #12]
 801c76c:	2b00      	cmp	r3, #0
 801c76e:	d110      	bne.n	801c792 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801c770:	6839      	ldr	r1, [r7, #0]
 801c772:	6878      	ldr	r0, [r7, #4]
 801c774:	f7ff ff8e 	bl	801c694 <ip_reass_remove_oldest_datagram>
 801c778:	4602      	mov	r2, r0
 801c77a:	683b      	ldr	r3, [r7, #0]
 801c77c:	4293      	cmp	r3, r2
 801c77e:	dc03      	bgt.n	801c788 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801c780:	2004      	movs	r0, #4
 801c782:	f7f6 fde3 	bl	801334c <memp_malloc>
 801c786:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801c788:	68fb      	ldr	r3, [r7, #12]
 801c78a:	2b00      	cmp	r3, #0
 801c78c:	d101      	bne.n	801c792 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801c78e:	2300      	movs	r3, #0
 801c790:	e016      	b.n	801c7c0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801c792:	2220      	movs	r2, #32
 801c794:	2100      	movs	r1, #0
 801c796:	68f8      	ldr	r0, [r7, #12]
 801c798:	f001 fe2d 	bl	801e3f6 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801c79c:	68fb      	ldr	r3, [r7, #12]
 801c79e:	220f      	movs	r2, #15
 801c7a0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801c7a2:	4b09      	ldr	r3, [pc, #36]	@ (801c7c8 <ip_reass_enqueue_new_datagram+0x70>)
 801c7a4:	681a      	ldr	r2, [r3, #0]
 801c7a6:	68fb      	ldr	r3, [r7, #12]
 801c7a8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801c7aa:	4a07      	ldr	r2, [pc, #28]	@ (801c7c8 <ip_reass_enqueue_new_datagram+0x70>)
 801c7ac:	68fb      	ldr	r3, [r7, #12]
 801c7ae:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801c7b0:	68fb      	ldr	r3, [r7, #12]
 801c7b2:	3308      	adds	r3, #8
 801c7b4:	2214      	movs	r2, #20
 801c7b6:	6879      	ldr	r1, [r7, #4]
 801c7b8:	4618      	mov	r0, r3
 801c7ba:	f001 ff1a 	bl	801e5f2 <memcpy>
  return ipr;
 801c7be:	68fb      	ldr	r3, [r7, #12]
}
 801c7c0:	4618      	mov	r0, r3
 801c7c2:	3710      	adds	r7, #16
 801c7c4:	46bd      	mov	sp, r7
 801c7c6:	bd80      	pop	{r7, pc}
 801c7c8:	2000cc24 	.word	0x2000cc24

0801c7cc <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801c7cc:	b580      	push	{r7, lr}
 801c7ce:	b082      	sub	sp, #8
 801c7d0:	af00      	add	r7, sp, #0
 801c7d2:	6078      	str	r0, [r7, #4]
 801c7d4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801c7d6:	4b10      	ldr	r3, [pc, #64]	@ (801c818 <ip_reass_dequeue_datagram+0x4c>)
 801c7d8:	681b      	ldr	r3, [r3, #0]
 801c7da:	687a      	ldr	r2, [r7, #4]
 801c7dc:	429a      	cmp	r2, r3
 801c7de:	d104      	bne.n	801c7ea <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801c7e0:	687b      	ldr	r3, [r7, #4]
 801c7e2:	681b      	ldr	r3, [r3, #0]
 801c7e4:	4a0c      	ldr	r2, [pc, #48]	@ (801c818 <ip_reass_dequeue_datagram+0x4c>)
 801c7e6:	6013      	str	r3, [r2, #0]
 801c7e8:	e00d      	b.n	801c806 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801c7ea:	683b      	ldr	r3, [r7, #0]
 801c7ec:	2b00      	cmp	r3, #0
 801c7ee:	d106      	bne.n	801c7fe <ip_reass_dequeue_datagram+0x32>
 801c7f0:	4b0a      	ldr	r3, [pc, #40]	@ (801c81c <ip_reass_dequeue_datagram+0x50>)
 801c7f2:	f240 1245 	movw	r2, #325	@ 0x145
 801c7f6:	490a      	ldr	r1, [pc, #40]	@ (801c820 <ip_reass_dequeue_datagram+0x54>)
 801c7f8:	480a      	ldr	r0, [pc, #40]	@ (801c824 <ip_reass_dequeue_datagram+0x58>)
 801c7fa:	f001 fd47 	bl	801e28c <iprintf>
    prev->next = ipr->next;
 801c7fe:	687b      	ldr	r3, [r7, #4]
 801c800:	681a      	ldr	r2, [r3, #0]
 801c802:	683b      	ldr	r3, [r7, #0]
 801c804:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801c806:	6879      	ldr	r1, [r7, #4]
 801c808:	2004      	movs	r0, #4
 801c80a:	f7f6 fe15 	bl	8013438 <memp_free>
}
 801c80e:	bf00      	nop
 801c810:	3708      	adds	r7, #8
 801c812:	46bd      	mov	sp, r7
 801c814:	bd80      	pop	{r7, pc}
 801c816:	bf00      	nop
 801c818:	2000cc24 	.word	0x2000cc24
 801c81c:	08023ab0 	.word	0x08023ab0
 801c820:	08023b78 	.word	0x08023b78
 801c824:	08023af8 	.word	0x08023af8

0801c828 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801c828:	b580      	push	{r7, lr}
 801c82a:	b08c      	sub	sp, #48	@ 0x30
 801c82c:	af00      	add	r7, sp, #0
 801c82e:	60f8      	str	r0, [r7, #12]
 801c830:	60b9      	str	r1, [r7, #8]
 801c832:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801c834:	2300      	movs	r3, #0
 801c836:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801c838:	2301      	movs	r3, #1
 801c83a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801c83c:	68bb      	ldr	r3, [r7, #8]
 801c83e:	685b      	ldr	r3, [r3, #4]
 801c840:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801c842:	69fb      	ldr	r3, [r7, #28]
 801c844:	885b      	ldrh	r3, [r3, #2]
 801c846:	b29b      	uxth	r3, r3
 801c848:	4618      	mov	r0, r3
 801c84a:	f7f6 f8a7 	bl	801299c <lwip_htons>
 801c84e:	4603      	mov	r3, r0
 801c850:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801c852:	69fb      	ldr	r3, [r7, #28]
 801c854:	781b      	ldrb	r3, [r3, #0]
 801c856:	f003 030f 	and.w	r3, r3, #15
 801c85a:	b2db      	uxtb	r3, r3
 801c85c:	009b      	lsls	r3, r3, #2
 801c85e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801c860:	7e7b      	ldrb	r3, [r7, #25]
 801c862:	b29b      	uxth	r3, r3
 801c864:	8b7a      	ldrh	r2, [r7, #26]
 801c866:	429a      	cmp	r2, r3
 801c868:	d202      	bcs.n	801c870 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c86a:	f04f 33ff 	mov.w	r3, #4294967295
 801c86e:	e135      	b.n	801cadc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801c870:	7e7b      	ldrb	r3, [r7, #25]
 801c872:	b29b      	uxth	r3, r3
 801c874:	8b7a      	ldrh	r2, [r7, #26]
 801c876:	1ad3      	subs	r3, r2, r3
 801c878:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801c87a:	69fb      	ldr	r3, [r7, #28]
 801c87c:	88db      	ldrh	r3, [r3, #6]
 801c87e:	b29b      	uxth	r3, r3
 801c880:	4618      	mov	r0, r3
 801c882:	f7f6 f88b 	bl	801299c <lwip_htons>
 801c886:	4603      	mov	r3, r0
 801c888:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c88c:	b29b      	uxth	r3, r3
 801c88e:	00db      	lsls	r3, r3, #3
 801c890:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801c892:	68bb      	ldr	r3, [r7, #8]
 801c894:	685b      	ldr	r3, [r3, #4]
 801c896:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 801c898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c89a:	2200      	movs	r2, #0
 801c89c:	701a      	strb	r2, [r3, #0]
 801c89e:	2200      	movs	r2, #0
 801c8a0:	705a      	strb	r2, [r3, #1]
 801c8a2:	2200      	movs	r2, #0
 801c8a4:	709a      	strb	r2, [r3, #2]
 801c8a6:	2200      	movs	r2, #0
 801c8a8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801c8aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c8ac:	8afa      	ldrh	r2, [r7, #22]
 801c8ae:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801c8b0:	8afa      	ldrh	r2, [r7, #22]
 801c8b2:	8b7b      	ldrh	r3, [r7, #26]
 801c8b4:	4413      	add	r3, r2
 801c8b6:	b29a      	uxth	r2, r3
 801c8b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c8ba:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801c8bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c8be:	88db      	ldrh	r3, [r3, #6]
 801c8c0:	b29b      	uxth	r3, r3
 801c8c2:	8afa      	ldrh	r2, [r7, #22]
 801c8c4:	429a      	cmp	r2, r3
 801c8c6:	d902      	bls.n	801c8ce <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c8c8:	f04f 33ff 	mov.w	r3, #4294967295
 801c8cc:	e106      	b.n	801cadc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801c8ce:	68fb      	ldr	r3, [r7, #12]
 801c8d0:	685b      	ldr	r3, [r3, #4]
 801c8d2:	627b      	str	r3, [r7, #36]	@ 0x24
 801c8d4:	e068      	b.n	801c9a8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801c8d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c8d8:	685b      	ldr	r3, [r3, #4]
 801c8da:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801c8dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c8de:	889b      	ldrh	r3, [r3, #4]
 801c8e0:	b29a      	uxth	r2, r3
 801c8e2:	693b      	ldr	r3, [r7, #16]
 801c8e4:	889b      	ldrh	r3, [r3, #4]
 801c8e6:	b29b      	uxth	r3, r3
 801c8e8:	429a      	cmp	r2, r3
 801c8ea:	d235      	bcs.n	801c958 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801c8ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c8ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c8f0:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801c8f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c8f4:	2b00      	cmp	r3, #0
 801c8f6:	d020      	beq.n	801c93a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801c8f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c8fa:	889b      	ldrh	r3, [r3, #4]
 801c8fc:	b29a      	uxth	r2, r3
 801c8fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c900:	88db      	ldrh	r3, [r3, #6]
 801c902:	b29b      	uxth	r3, r3
 801c904:	429a      	cmp	r2, r3
 801c906:	d307      	bcc.n	801c918 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801c908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c90a:	88db      	ldrh	r3, [r3, #6]
 801c90c:	b29a      	uxth	r2, r3
 801c90e:	693b      	ldr	r3, [r7, #16]
 801c910:	889b      	ldrh	r3, [r3, #4]
 801c912:	b29b      	uxth	r3, r3
 801c914:	429a      	cmp	r2, r3
 801c916:	d902      	bls.n	801c91e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c918:	f04f 33ff 	mov.w	r3, #4294967295
 801c91c:	e0de      	b.n	801cadc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801c91e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c920:	68ba      	ldr	r2, [r7, #8]
 801c922:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801c924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c926:	88db      	ldrh	r3, [r3, #6]
 801c928:	b29a      	uxth	r2, r3
 801c92a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c92c:	889b      	ldrh	r3, [r3, #4]
 801c92e:	b29b      	uxth	r3, r3
 801c930:	429a      	cmp	r2, r3
 801c932:	d03d      	beq.n	801c9b0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801c934:	2300      	movs	r3, #0
 801c936:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801c938:	e03a      	b.n	801c9b0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801c93a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c93c:	88db      	ldrh	r3, [r3, #6]
 801c93e:	b29a      	uxth	r2, r3
 801c940:	693b      	ldr	r3, [r7, #16]
 801c942:	889b      	ldrh	r3, [r3, #4]
 801c944:	b29b      	uxth	r3, r3
 801c946:	429a      	cmp	r2, r3
 801c948:	d902      	bls.n	801c950 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c94a:	f04f 33ff 	mov.w	r3, #4294967295
 801c94e:	e0c5      	b.n	801cadc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801c950:	68fb      	ldr	r3, [r7, #12]
 801c952:	68ba      	ldr	r2, [r7, #8]
 801c954:	605a      	str	r2, [r3, #4]
      break;
 801c956:	e02b      	b.n	801c9b0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801c958:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c95a:	889b      	ldrh	r3, [r3, #4]
 801c95c:	b29a      	uxth	r2, r3
 801c95e:	693b      	ldr	r3, [r7, #16]
 801c960:	889b      	ldrh	r3, [r3, #4]
 801c962:	b29b      	uxth	r3, r3
 801c964:	429a      	cmp	r2, r3
 801c966:	d102      	bne.n	801c96e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c968:	f04f 33ff 	mov.w	r3, #4294967295
 801c96c:	e0b6      	b.n	801cadc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801c96e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c970:	889b      	ldrh	r3, [r3, #4]
 801c972:	b29a      	uxth	r2, r3
 801c974:	693b      	ldr	r3, [r7, #16]
 801c976:	88db      	ldrh	r3, [r3, #6]
 801c978:	b29b      	uxth	r3, r3
 801c97a:	429a      	cmp	r2, r3
 801c97c:	d202      	bcs.n	801c984 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c97e:	f04f 33ff 	mov.w	r3, #4294967295
 801c982:	e0ab      	b.n	801cadc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801c984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c986:	2b00      	cmp	r3, #0
 801c988:	d009      	beq.n	801c99e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801c98a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c98c:	88db      	ldrh	r3, [r3, #6]
 801c98e:	b29a      	uxth	r2, r3
 801c990:	693b      	ldr	r3, [r7, #16]
 801c992:	889b      	ldrh	r3, [r3, #4]
 801c994:	b29b      	uxth	r3, r3
 801c996:	429a      	cmp	r2, r3
 801c998:	d001      	beq.n	801c99e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801c99a:	2300      	movs	r3, #0
 801c99c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801c99e:	693b      	ldr	r3, [r7, #16]
 801c9a0:	681b      	ldr	r3, [r3, #0]
 801c9a2:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 801c9a4:	693b      	ldr	r3, [r7, #16]
 801c9a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 801c9a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c9aa:	2b00      	cmp	r3, #0
 801c9ac:	d193      	bne.n	801c8d6 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801c9ae:	e000      	b.n	801c9b2 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801c9b0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801c9b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c9b4:	2b00      	cmp	r3, #0
 801c9b6:	d12d      	bne.n	801ca14 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801c9b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c9ba:	2b00      	cmp	r3, #0
 801c9bc:	d01c      	beq.n	801c9f8 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801c9be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c9c0:	88db      	ldrh	r3, [r3, #6]
 801c9c2:	b29a      	uxth	r2, r3
 801c9c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c9c6:	889b      	ldrh	r3, [r3, #4]
 801c9c8:	b29b      	uxth	r3, r3
 801c9ca:	429a      	cmp	r2, r3
 801c9cc:	d906      	bls.n	801c9dc <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801c9ce:	4b45      	ldr	r3, [pc, #276]	@ (801cae4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801c9d0:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 801c9d4:	4944      	ldr	r1, [pc, #272]	@ (801cae8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801c9d6:	4845      	ldr	r0, [pc, #276]	@ (801caec <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801c9d8:	f001 fc58 	bl	801e28c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801c9dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c9de:	68ba      	ldr	r2, [r7, #8]
 801c9e0:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801c9e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c9e4:	88db      	ldrh	r3, [r3, #6]
 801c9e6:	b29a      	uxth	r2, r3
 801c9e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c9ea:	889b      	ldrh	r3, [r3, #4]
 801c9ec:	b29b      	uxth	r3, r3
 801c9ee:	429a      	cmp	r2, r3
 801c9f0:	d010      	beq.n	801ca14 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801c9f2:	2300      	movs	r3, #0
 801c9f4:	623b      	str	r3, [r7, #32]
 801c9f6:	e00d      	b.n	801ca14 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801c9f8:	68fb      	ldr	r3, [r7, #12]
 801c9fa:	685b      	ldr	r3, [r3, #4]
 801c9fc:	2b00      	cmp	r3, #0
 801c9fe:	d006      	beq.n	801ca0e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801ca00:	4b38      	ldr	r3, [pc, #224]	@ (801cae4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801ca02:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 801ca06:	493a      	ldr	r1, [pc, #232]	@ (801caf0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801ca08:	4838      	ldr	r0, [pc, #224]	@ (801caec <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801ca0a:	f001 fc3f 	bl	801e28c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801ca0e:	68fb      	ldr	r3, [r7, #12]
 801ca10:	68ba      	ldr	r2, [r7, #8]
 801ca12:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801ca14:	687b      	ldr	r3, [r7, #4]
 801ca16:	2b00      	cmp	r3, #0
 801ca18:	d105      	bne.n	801ca26 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801ca1a:	68fb      	ldr	r3, [r7, #12]
 801ca1c:	7f9b      	ldrb	r3, [r3, #30]
 801ca1e:	f003 0301 	and.w	r3, r3, #1
 801ca22:	2b00      	cmp	r3, #0
 801ca24:	d059      	beq.n	801cada <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801ca26:	6a3b      	ldr	r3, [r7, #32]
 801ca28:	2b00      	cmp	r3, #0
 801ca2a:	d04f      	beq.n	801cacc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801ca2c:	68fb      	ldr	r3, [r7, #12]
 801ca2e:	685b      	ldr	r3, [r3, #4]
 801ca30:	2b00      	cmp	r3, #0
 801ca32:	d006      	beq.n	801ca42 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801ca34:	68fb      	ldr	r3, [r7, #12]
 801ca36:	685b      	ldr	r3, [r3, #4]
 801ca38:	685b      	ldr	r3, [r3, #4]
 801ca3a:	889b      	ldrh	r3, [r3, #4]
 801ca3c:	b29b      	uxth	r3, r3
 801ca3e:	2b00      	cmp	r3, #0
 801ca40:	d002      	beq.n	801ca48 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801ca42:	2300      	movs	r3, #0
 801ca44:	623b      	str	r3, [r7, #32]
 801ca46:	e041      	b.n	801cacc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801ca48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ca4a:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 801ca4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ca4e:	681b      	ldr	r3, [r3, #0]
 801ca50:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801ca52:	e012      	b.n	801ca7a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801ca54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ca56:	685b      	ldr	r3, [r3, #4]
 801ca58:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 801ca5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ca5c:	88db      	ldrh	r3, [r3, #6]
 801ca5e:	b29a      	uxth	r2, r3
 801ca60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ca62:	889b      	ldrh	r3, [r3, #4]
 801ca64:	b29b      	uxth	r3, r3
 801ca66:	429a      	cmp	r2, r3
 801ca68:	d002      	beq.n	801ca70 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801ca6a:	2300      	movs	r3, #0
 801ca6c:	623b      	str	r3, [r7, #32]
            break;
 801ca6e:	e007      	b.n	801ca80 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801ca70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ca72:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 801ca74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ca76:	681b      	ldr	r3, [r3, #0]
 801ca78:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801ca7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ca7c:	2b00      	cmp	r3, #0
 801ca7e:	d1e9      	bne.n	801ca54 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801ca80:	6a3b      	ldr	r3, [r7, #32]
 801ca82:	2b00      	cmp	r3, #0
 801ca84:	d022      	beq.n	801cacc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801ca86:	68fb      	ldr	r3, [r7, #12]
 801ca88:	685b      	ldr	r3, [r3, #4]
 801ca8a:	2b00      	cmp	r3, #0
 801ca8c:	d106      	bne.n	801ca9c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801ca8e:	4b15      	ldr	r3, [pc, #84]	@ (801cae4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801ca90:	f240 12df 	movw	r2, #479	@ 0x1df
 801ca94:	4917      	ldr	r1, [pc, #92]	@ (801caf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801ca96:	4815      	ldr	r0, [pc, #84]	@ (801caec <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801ca98:	f001 fbf8 	bl	801e28c <iprintf>
          LWIP_ASSERT("sanity check",
 801ca9c:	68fb      	ldr	r3, [r7, #12]
 801ca9e:	685b      	ldr	r3, [r3, #4]
 801caa0:	685b      	ldr	r3, [r3, #4]
 801caa2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801caa4:	429a      	cmp	r2, r3
 801caa6:	d106      	bne.n	801cab6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801caa8:	4b0e      	ldr	r3, [pc, #56]	@ (801cae4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801caaa:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 801caae:	4911      	ldr	r1, [pc, #68]	@ (801caf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801cab0:	480e      	ldr	r0, [pc, #56]	@ (801caec <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801cab2:	f001 fbeb 	bl	801e28c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801cab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cab8:	681b      	ldr	r3, [r3, #0]
 801caba:	2b00      	cmp	r3, #0
 801cabc:	d006      	beq.n	801cacc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801cabe:	4b09      	ldr	r3, [pc, #36]	@ (801cae4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801cac0:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 801cac4:	490c      	ldr	r1, [pc, #48]	@ (801caf8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801cac6:	4809      	ldr	r0, [pc, #36]	@ (801caec <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801cac8:	f001 fbe0 	bl	801e28c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801cacc:	6a3b      	ldr	r3, [r7, #32]
 801cace:	2b00      	cmp	r3, #0
 801cad0:	bf14      	ite	ne
 801cad2:	2301      	movne	r3, #1
 801cad4:	2300      	moveq	r3, #0
 801cad6:	b2db      	uxtb	r3, r3
 801cad8:	e000      	b.n	801cadc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801cada:	2300      	movs	r3, #0
}
 801cadc:	4618      	mov	r0, r3
 801cade:	3730      	adds	r7, #48	@ 0x30
 801cae0:	46bd      	mov	sp, r7
 801cae2:	bd80      	pop	{r7, pc}
 801cae4:	08023ab0 	.word	0x08023ab0
 801cae8:	08023b94 	.word	0x08023b94
 801caec:	08023af8 	.word	0x08023af8
 801caf0:	08023bb4 	.word	0x08023bb4
 801caf4:	08023bec 	.word	0x08023bec
 801caf8:	08023bfc 	.word	0x08023bfc

0801cafc <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801cafc:	b580      	push	{r7, lr}
 801cafe:	b08e      	sub	sp, #56	@ 0x38
 801cb00:	af00      	add	r7, sp, #0
 801cb02:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801cb04:	687b      	ldr	r3, [r7, #4]
 801cb06:	685b      	ldr	r3, [r3, #4]
 801cb08:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801cb0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cb0c:	781b      	ldrb	r3, [r3, #0]
 801cb0e:	f003 030f 	and.w	r3, r3, #15
 801cb12:	b2db      	uxtb	r3, r3
 801cb14:	009b      	lsls	r3, r3, #2
 801cb16:	b2db      	uxtb	r3, r3
 801cb18:	2b14      	cmp	r3, #20
 801cb1a:	f040 8171 	bne.w	801ce00 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801cb1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cb20:	88db      	ldrh	r3, [r3, #6]
 801cb22:	b29b      	uxth	r3, r3
 801cb24:	4618      	mov	r0, r3
 801cb26:	f7f5 ff39 	bl	801299c <lwip_htons>
 801cb2a:	4603      	mov	r3, r0
 801cb2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801cb30:	b29b      	uxth	r3, r3
 801cb32:	00db      	lsls	r3, r3, #3
 801cb34:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801cb36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cb38:	885b      	ldrh	r3, [r3, #2]
 801cb3a:	b29b      	uxth	r3, r3
 801cb3c:	4618      	mov	r0, r3
 801cb3e:	f7f5 ff2d 	bl	801299c <lwip_htons>
 801cb42:	4603      	mov	r3, r0
 801cb44:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801cb46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cb48:	781b      	ldrb	r3, [r3, #0]
 801cb4a:	f003 030f 	and.w	r3, r3, #15
 801cb4e:	b2db      	uxtb	r3, r3
 801cb50:	009b      	lsls	r3, r3, #2
 801cb52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 801cb56:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801cb5a:	b29b      	uxth	r3, r3
 801cb5c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801cb5e:	429a      	cmp	r2, r3
 801cb60:	f0c0 8150 	bcc.w	801ce04 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801cb64:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801cb68:	b29b      	uxth	r3, r3
 801cb6a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801cb6c:	1ad3      	subs	r3, r2, r3
 801cb6e:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801cb70:	6878      	ldr	r0, [r7, #4]
 801cb72:	f7f7 fb61 	bl	8014238 <pbuf_clen>
 801cb76:	4603      	mov	r3, r0
 801cb78:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801cb7a:	4b8c      	ldr	r3, [pc, #560]	@ (801cdac <ip4_reass+0x2b0>)
 801cb7c:	881b      	ldrh	r3, [r3, #0]
 801cb7e:	461a      	mov	r2, r3
 801cb80:	8c3b      	ldrh	r3, [r7, #32]
 801cb82:	4413      	add	r3, r2
 801cb84:	2b0a      	cmp	r3, #10
 801cb86:	dd10      	ble.n	801cbaa <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801cb88:	8c3b      	ldrh	r3, [r7, #32]
 801cb8a:	4619      	mov	r1, r3
 801cb8c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801cb8e:	f7ff fd81 	bl	801c694 <ip_reass_remove_oldest_datagram>
 801cb92:	4603      	mov	r3, r0
 801cb94:	2b00      	cmp	r3, #0
 801cb96:	f000 8137 	beq.w	801ce08 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801cb9a:	4b84      	ldr	r3, [pc, #528]	@ (801cdac <ip4_reass+0x2b0>)
 801cb9c:	881b      	ldrh	r3, [r3, #0]
 801cb9e:	461a      	mov	r2, r3
 801cba0:	8c3b      	ldrh	r3, [r7, #32]
 801cba2:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801cba4:	2b0a      	cmp	r3, #10
 801cba6:	f300 812f 	bgt.w	801ce08 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801cbaa:	4b81      	ldr	r3, [pc, #516]	@ (801cdb0 <ip4_reass+0x2b4>)
 801cbac:	681b      	ldr	r3, [r3, #0]
 801cbae:	633b      	str	r3, [r7, #48]	@ 0x30
 801cbb0:	e015      	b.n	801cbde <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801cbb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cbb4:	695a      	ldr	r2, [r3, #20]
 801cbb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cbb8:	68db      	ldr	r3, [r3, #12]
 801cbba:	429a      	cmp	r2, r3
 801cbbc:	d10c      	bne.n	801cbd8 <ip4_reass+0xdc>
 801cbbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cbc0:	699a      	ldr	r2, [r3, #24]
 801cbc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cbc4:	691b      	ldr	r3, [r3, #16]
 801cbc6:	429a      	cmp	r2, r3
 801cbc8:	d106      	bne.n	801cbd8 <ip4_reass+0xdc>
 801cbca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cbcc:	899a      	ldrh	r2, [r3, #12]
 801cbce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cbd0:	889b      	ldrh	r3, [r3, #4]
 801cbd2:	b29b      	uxth	r3, r3
 801cbd4:	429a      	cmp	r2, r3
 801cbd6:	d006      	beq.n	801cbe6 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801cbd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cbda:	681b      	ldr	r3, [r3, #0]
 801cbdc:	633b      	str	r3, [r7, #48]	@ 0x30
 801cbde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cbe0:	2b00      	cmp	r3, #0
 801cbe2:	d1e6      	bne.n	801cbb2 <ip4_reass+0xb6>
 801cbe4:	e000      	b.n	801cbe8 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801cbe6:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801cbe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cbea:	2b00      	cmp	r3, #0
 801cbec:	d109      	bne.n	801cc02 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801cbee:	8c3b      	ldrh	r3, [r7, #32]
 801cbf0:	4619      	mov	r1, r3
 801cbf2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801cbf4:	f7ff fdb0 	bl	801c758 <ip_reass_enqueue_new_datagram>
 801cbf8:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801cbfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cbfc:	2b00      	cmp	r3, #0
 801cbfe:	d11c      	bne.n	801cc3a <ip4_reass+0x13e>
      goto nullreturn;
 801cc00:	e105      	b.n	801ce0e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801cc02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cc04:	88db      	ldrh	r3, [r3, #6]
 801cc06:	b29b      	uxth	r3, r3
 801cc08:	4618      	mov	r0, r3
 801cc0a:	f7f5 fec7 	bl	801299c <lwip_htons>
 801cc0e:	4603      	mov	r3, r0
 801cc10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801cc14:	2b00      	cmp	r3, #0
 801cc16:	d110      	bne.n	801cc3a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801cc18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cc1a:	89db      	ldrh	r3, [r3, #14]
 801cc1c:	4618      	mov	r0, r3
 801cc1e:	f7f5 febd 	bl	801299c <lwip_htons>
 801cc22:	4603      	mov	r3, r0
 801cc24:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801cc28:	2b00      	cmp	r3, #0
 801cc2a:	d006      	beq.n	801cc3a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801cc2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cc2e:	3308      	adds	r3, #8
 801cc30:	2214      	movs	r2, #20
 801cc32:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801cc34:	4618      	mov	r0, r3
 801cc36:	f001 fcdc 	bl	801e5f2 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801cc3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cc3c:	88db      	ldrh	r3, [r3, #6]
 801cc3e:	b29b      	uxth	r3, r3
 801cc40:	f003 0320 	and.w	r3, r3, #32
 801cc44:	2b00      	cmp	r3, #0
 801cc46:	bf0c      	ite	eq
 801cc48:	2301      	moveq	r3, #1
 801cc4a:	2300      	movne	r3, #0
 801cc4c:	b2db      	uxtb	r3, r3
 801cc4e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801cc50:	69fb      	ldr	r3, [r7, #28]
 801cc52:	2b00      	cmp	r3, #0
 801cc54:	d00e      	beq.n	801cc74 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801cc56:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801cc58:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cc5a:	4413      	add	r3, r2
 801cc5c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801cc5e:	8b7a      	ldrh	r2, [r7, #26]
 801cc60:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801cc62:	429a      	cmp	r2, r3
 801cc64:	f0c0 80a0 	bcc.w	801cda8 <ip4_reass+0x2ac>
 801cc68:	8b7b      	ldrh	r3, [r7, #26]
 801cc6a:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801cc6e:	4293      	cmp	r3, r2
 801cc70:	f200 809a 	bhi.w	801cda8 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801cc74:	69fa      	ldr	r2, [r7, #28]
 801cc76:	6879      	ldr	r1, [r7, #4]
 801cc78:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801cc7a:	f7ff fdd5 	bl	801c828 <ip_reass_chain_frag_into_datagram_and_validate>
 801cc7e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801cc80:	697b      	ldr	r3, [r7, #20]
 801cc82:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cc86:	f000 809b 	beq.w	801cdc0 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801cc8a:	4b48      	ldr	r3, [pc, #288]	@ (801cdac <ip4_reass+0x2b0>)
 801cc8c:	881a      	ldrh	r2, [r3, #0]
 801cc8e:	8c3b      	ldrh	r3, [r7, #32]
 801cc90:	4413      	add	r3, r2
 801cc92:	b29a      	uxth	r2, r3
 801cc94:	4b45      	ldr	r3, [pc, #276]	@ (801cdac <ip4_reass+0x2b0>)
 801cc96:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801cc98:	69fb      	ldr	r3, [r7, #28]
 801cc9a:	2b00      	cmp	r3, #0
 801cc9c:	d00d      	beq.n	801ccba <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801cc9e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801cca0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cca2:	4413      	add	r3, r2
 801cca4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801cca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cca8:	8a7a      	ldrh	r2, [r7, #18]
 801ccaa:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801ccac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ccae:	7f9b      	ldrb	r3, [r3, #30]
 801ccb0:	f043 0301 	orr.w	r3, r3, #1
 801ccb4:	b2da      	uxtb	r2, r3
 801ccb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ccb8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801ccba:	697b      	ldr	r3, [r7, #20]
 801ccbc:	2b01      	cmp	r3, #1
 801ccbe:	d171      	bne.n	801cda4 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801ccc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ccc2:	8b9b      	ldrh	r3, [r3, #28]
 801ccc4:	3314      	adds	r3, #20
 801ccc6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801ccc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ccca:	685b      	ldr	r3, [r3, #4]
 801cccc:	685b      	ldr	r3, [r3, #4]
 801ccce:	681b      	ldr	r3, [r3, #0]
 801ccd0:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801ccd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ccd4:	685b      	ldr	r3, [r3, #4]
 801ccd6:	685b      	ldr	r3, [r3, #4]
 801ccd8:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801ccda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ccdc:	3308      	adds	r3, #8
 801ccde:	2214      	movs	r2, #20
 801cce0:	4619      	mov	r1, r3
 801cce2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801cce4:	f001 fc85 	bl	801e5f2 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801cce8:	8a3b      	ldrh	r3, [r7, #16]
 801ccea:	4618      	mov	r0, r3
 801ccec:	f7f5 fe56 	bl	801299c <lwip_htons>
 801ccf0:	4603      	mov	r3, r0
 801ccf2:	461a      	mov	r2, r3
 801ccf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ccf6:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801ccf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ccfa:	2200      	movs	r2, #0
 801ccfc:	719a      	strb	r2, [r3, #6]
 801ccfe:	2200      	movs	r2, #0
 801cd00:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801cd02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cd04:	2200      	movs	r2, #0
 801cd06:	729a      	strb	r2, [r3, #10]
 801cd08:	2200      	movs	r2, #0
 801cd0a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801cd0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cd0e:	685b      	ldr	r3, [r3, #4]
 801cd10:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801cd12:	e00d      	b.n	801cd30 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801cd14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801cd16:	685b      	ldr	r3, [r3, #4]
 801cd18:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801cd1a:	2114      	movs	r1, #20
 801cd1c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801cd1e:	f7f7 f977 	bl	8014010 <pbuf_remove_header>
      pbuf_cat(p, r);
 801cd22:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801cd24:	6878      	ldr	r0, [r7, #4]
 801cd26:	f7f7 fac7 	bl	80142b8 <pbuf_cat>
      r = iprh->next_pbuf;
 801cd2a:	68fb      	ldr	r3, [r7, #12]
 801cd2c:	681b      	ldr	r3, [r3, #0]
 801cd2e:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 801cd30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801cd32:	2b00      	cmp	r3, #0
 801cd34:	d1ee      	bne.n	801cd14 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801cd36:	4b1e      	ldr	r3, [pc, #120]	@ (801cdb0 <ip4_reass+0x2b4>)
 801cd38:	681b      	ldr	r3, [r3, #0]
 801cd3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801cd3c:	429a      	cmp	r2, r3
 801cd3e:	d102      	bne.n	801cd46 <ip4_reass+0x24a>
      ipr_prev = NULL;
 801cd40:	2300      	movs	r3, #0
 801cd42:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801cd44:	e010      	b.n	801cd68 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801cd46:	4b1a      	ldr	r3, [pc, #104]	@ (801cdb0 <ip4_reass+0x2b4>)
 801cd48:	681b      	ldr	r3, [r3, #0]
 801cd4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801cd4c:	e007      	b.n	801cd5e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801cd4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cd50:	681b      	ldr	r3, [r3, #0]
 801cd52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801cd54:	429a      	cmp	r2, r3
 801cd56:	d006      	beq.n	801cd66 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801cd58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cd5a:	681b      	ldr	r3, [r3, #0]
 801cd5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801cd5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cd60:	2b00      	cmp	r3, #0
 801cd62:	d1f4      	bne.n	801cd4e <ip4_reass+0x252>
 801cd64:	e000      	b.n	801cd68 <ip4_reass+0x26c>
          break;
 801cd66:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801cd68:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801cd6a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801cd6c:	f7ff fd2e 	bl	801c7cc <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801cd70:	6878      	ldr	r0, [r7, #4]
 801cd72:	f7f7 fa61 	bl	8014238 <pbuf_clen>
 801cd76:	4603      	mov	r3, r0
 801cd78:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801cd7a:	4b0c      	ldr	r3, [pc, #48]	@ (801cdac <ip4_reass+0x2b0>)
 801cd7c:	881b      	ldrh	r3, [r3, #0]
 801cd7e:	8c3a      	ldrh	r2, [r7, #32]
 801cd80:	429a      	cmp	r2, r3
 801cd82:	d906      	bls.n	801cd92 <ip4_reass+0x296>
 801cd84:	4b0b      	ldr	r3, [pc, #44]	@ (801cdb4 <ip4_reass+0x2b8>)
 801cd86:	f240 229b 	movw	r2, #667	@ 0x29b
 801cd8a:	490b      	ldr	r1, [pc, #44]	@ (801cdb8 <ip4_reass+0x2bc>)
 801cd8c:	480b      	ldr	r0, [pc, #44]	@ (801cdbc <ip4_reass+0x2c0>)
 801cd8e:	f001 fa7d 	bl	801e28c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801cd92:	4b06      	ldr	r3, [pc, #24]	@ (801cdac <ip4_reass+0x2b0>)
 801cd94:	881a      	ldrh	r2, [r3, #0]
 801cd96:	8c3b      	ldrh	r3, [r7, #32]
 801cd98:	1ad3      	subs	r3, r2, r3
 801cd9a:	b29a      	uxth	r2, r3
 801cd9c:	4b03      	ldr	r3, [pc, #12]	@ (801cdac <ip4_reass+0x2b0>)
 801cd9e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801cda0:	687b      	ldr	r3, [r7, #4]
 801cda2:	e038      	b.n	801ce16 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801cda4:	2300      	movs	r3, #0
 801cda6:	e036      	b.n	801ce16 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801cda8:	bf00      	nop
 801cdaa:	e00a      	b.n	801cdc2 <ip4_reass+0x2c6>
 801cdac:	2000cc28 	.word	0x2000cc28
 801cdb0:	2000cc24 	.word	0x2000cc24
 801cdb4:	08023ab0 	.word	0x08023ab0
 801cdb8:	08023c20 	.word	0x08023c20
 801cdbc:	08023af8 	.word	0x08023af8
    goto nullreturn_ipr;
 801cdc0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801cdc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cdc4:	2b00      	cmp	r3, #0
 801cdc6:	d106      	bne.n	801cdd6 <ip4_reass+0x2da>
 801cdc8:	4b15      	ldr	r3, [pc, #84]	@ (801ce20 <ip4_reass+0x324>)
 801cdca:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 801cdce:	4915      	ldr	r1, [pc, #84]	@ (801ce24 <ip4_reass+0x328>)
 801cdd0:	4815      	ldr	r0, [pc, #84]	@ (801ce28 <ip4_reass+0x32c>)
 801cdd2:	f001 fa5b 	bl	801e28c <iprintf>
  if (ipr->p == NULL) {
 801cdd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cdd8:	685b      	ldr	r3, [r3, #4]
 801cdda:	2b00      	cmp	r3, #0
 801cddc:	d116      	bne.n	801ce0c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801cdde:	4b13      	ldr	r3, [pc, #76]	@ (801ce2c <ip4_reass+0x330>)
 801cde0:	681b      	ldr	r3, [r3, #0]
 801cde2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801cde4:	429a      	cmp	r2, r3
 801cde6:	d006      	beq.n	801cdf6 <ip4_reass+0x2fa>
 801cde8:	4b0d      	ldr	r3, [pc, #52]	@ (801ce20 <ip4_reass+0x324>)
 801cdea:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801cdee:	4910      	ldr	r1, [pc, #64]	@ (801ce30 <ip4_reass+0x334>)
 801cdf0:	480d      	ldr	r0, [pc, #52]	@ (801ce28 <ip4_reass+0x32c>)
 801cdf2:	f001 fa4b 	bl	801e28c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801cdf6:	2100      	movs	r1, #0
 801cdf8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801cdfa:	f7ff fce7 	bl	801c7cc <ip_reass_dequeue_datagram>
 801cdfe:	e006      	b.n	801ce0e <ip4_reass+0x312>
    goto nullreturn;
 801ce00:	bf00      	nop
 801ce02:	e004      	b.n	801ce0e <ip4_reass+0x312>
    goto nullreturn;
 801ce04:	bf00      	nop
 801ce06:	e002      	b.n	801ce0e <ip4_reass+0x312>
      goto nullreturn;
 801ce08:	bf00      	nop
 801ce0a:	e000      	b.n	801ce0e <ip4_reass+0x312>
  }

nullreturn:
 801ce0c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801ce0e:	6878      	ldr	r0, [r7, #4]
 801ce10:	f7f7 f984 	bl	801411c <pbuf_free>
  return NULL;
 801ce14:	2300      	movs	r3, #0
}
 801ce16:	4618      	mov	r0, r3
 801ce18:	3738      	adds	r7, #56	@ 0x38
 801ce1a:	46bd      	mov	sp, r7
 801ce1c:	bd80      	pop	{r7, pc}
 801ce1e:	bf00      	nop
 801ce20:	08023ab0 	.word	0x08023ab0
 801ce24:	08023c3c 	.word	0x08023c3c
 801ce28:	08023af8 	.word	0x08023af8
 801ce2c:	2000cc24 	.word	0x2000cc24
 801ce30:	08023c48 	.word	0x08023c48

0801ce34 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801ce34:	b580      	push	{r7, lr}
 801ce36:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801ce38:	2005      	movs	r0, #5
 801ce3a:	f7f6 fa87 	bl	801334c <memp_malloc>
 801ce3e:	4603      	mov	r3, r0
}
 801ce40:	4618      	mov	r0, r3
 801ce42:	bd80      	pop	{r7, pc}

0801ce44 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801ce44:	b580      	push	{r7, lr}
 801ce46:	b082      	sub	sp, #8
 801ce48:	af00      	add	r7, sp, #0
 801ce4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801ce4c:	687b      	ldr	r3, [r7, #4]
 801ce4e:	2b00      	cmp	r3, #0
 801ce50:	d106      	bne.n	801ce60 <ip_frag_free_pbuf_custom_ref+0x1c>
 801ce52:	4b07      	ldr	r3, [pc, #28]	@ (801ce70 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801ce54:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 801ce58:	4906      	ldr	r1, [pc, #24]	@ (801ce74 <ip_frag_free_pbuf_custom_ref+0x30>)
 801ce5a:	4807      	ldr	r0, [pc, #28]	@ (801ce78 <ip_frag_free_pbuf_custom_ref+0x34>)
 801ce5c:	f001 fa16 	bl	801e28c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801ce60:	6879      	ldr	r1, [r7, #4]
 801ce62:	2005      	movs	r0, #5
 801ce64:	f7f6 fae8 	bl	8013438 <memp_free>
}
 801ce68:	bf00      	nop
 801ce6a:	3708      	adds	r7, #8
 801ce6c:	46bd      	mov	sp, r7
 801ce6e:	bd80      	pop	{r7, pc}
 801ce70:	08023ab0 	.word	0x08023ab0
 801ce74:	08023c68 	.word	0x08023c68
 801ce78:	08023af8 	.word	0x08023af8

0801ce7c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801ce7c:	b580      	push	{r7, lr}
 801ce7e:	b084      	sub	sp, #16
 801ce80:	af00      	add	r7, sp, #0
 801ce82:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801ce84:	687b      	ldr	r3, [r7, #4]
 801ce86:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801ce88:	68fb      	ldr	r3, [r7, #12]
 801ce8a:	2b00      	cmp	r3, #0
 801ce8c:	d106      	bne.n	801ce9c <ipfrag_free_pbuf_custom+0x20>
 801ce8e:	4b11      	ldr	r3, [pc, #68]	@ (801ced4 <ipfrag_free_pbuf_custom+0x58>)
 801ce90:	f240 22ce 	movw	r2, #718	@ 0x2ce
 801ce94:	4910      	ldr	r1, [pc, #64]	@ (801ced8 <ipfrag_free_pbuf_custom+0x5c>)
 801ce96:	4811      	ldr	r0, [pc, #68]	@ (801cedc <ipfrag_free_pbuf_custom+0x60>)
 801ce98:	f001 f9f8 	bl	801e28c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801ce9c:	68fa      	ldr	r2, [r7, #12]
 801ce9e:	687b      	ldr	r3, [r7, #4]
 801cea0:	429a      	cmp	r2, r3
 801cea2:	d006      	beq.n	801ceb2 <ipfrag_free_pbuf_custom+0x36>
 801cea4:	4b0b      	ldr	r3, [pc, #44]	@ (801ced4 <ipfrag_free_pbuf_custom+0x58>)
 801cea6:	f240 22cf 	movw	r2, #719	@ 0x2cf
 801ceaa:	490d      	ldr	r1, [pc, #52]	@ (801cee0 <ipfrag_free_pbuf_custom+0x64>)
 801ceac:	480b      	ldr	r0, [pc, #44]	@ (801cedc <ipfrag_free_pbuf_custom+0x60>)
 801ceae:	f001 f9ed 	bl	801e28c <iprintf>
  if (pcr->original != NULL) {
 801ceb2:	68fb      	ldr	r3, [r7, #12]
 801ceb4:	695b      	ldr	r3, [r3, #20]
 801ceb6:	2b00      	cmp	r3, #0
 801ceb8:	d004      	beq.n	801cec4 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801ceba:	68fb      	ldr	r3, [r7, #12]
 801cebc:	695b      	ldr	r3, [r3, #20]
 801cebe:	4618      	mov	r0, r3
 801cec0:	f7f7 f92c 	bl	801411c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801cec4:	68f8      	ldr	r0, [r7, #12]
 801cec6:	f7ff ffbd 	bl	801ce44 <ip_frag_free_pbuf_custom_ref>
}
 801ceca:	bf00      	nop
 801cecc:	3710      	adds	r7, #16
 801cece:	46bd      	mov	sp, r7
 801ced0:	bd80      	pop	{r7, pc}
 801ced2:	bf00      	nop
 801ced4:	08023ab0 	.word	0x08023ab0
 801ced8:	08023c74 	.word	0x08023c74
 801cedc:	08023af8 	.word	0x08023af8
 801cee0:	08023c80 	.word	0x08023c80

0801cee4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801cee4:	b580      	push	{r7, lr}
 801cee6:	b094      	sub	sp, #80	@ 0x50
 801cee8:	af02      	add	r7, sp, #8
 801ceea:	60f8      	str	r0, [r7, #12]
 801ceec:	60b9      	str	r1, [r7, #8]
 801ceee:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801cef0:	2300      	movs	r3, #0
 801cef2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801cef6:	68bb      	ldr	r3, [r7, #8]
 801cef8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801cefa:	3b14      	subs	r3, #20
 801cefc:	2b00      	cmp	r3, #0
 801cefe:	da00      	bge.n	801cf02 <ip4_frag+0x1e>
 801cf00:	3307      	adds	r3, #7
 801cf02:	10db      	asrs	r3, r3, #3
 801cf04:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801cf06:	2314      	movs	r3, #20
 801cf08:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801cf0a:	68fb      	ldr	r3, [r7, #12]
 801cf0c:	685b      	ldr	r3, [r3, #4]
 801cf0e:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 801cf10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801cf12:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801cf14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cf16:	781b      	ldrb	r3, [r3, #0]
 801cf18:	f003 030f 	and.w	r3, r3, #15
 801cf1c:	b2db      	uxtb	r3, r3
 801cf1e:	009b      	lsls	r3, r3, #2
 801cf20:	b2db      	uxtb	r3, r3
 801cf22:	2b14      	cmp	r3, #20
 801cf24:	d002      	beq.n	801cf2c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801cf26:	f06f 0305 	mvn.w	r3, #5
 801cf2a:	e110      	b.n	801d14e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801cf2c:	68fb      	ldr	r3, [r7, #12]
 801cf2e:	895b      	ldrh	r3, [r3, #10]
 801cf30:	2b13      	cmp	r3, #19
 801cf32:	d809      	bhi.n	801cf48 <ip4_frag+0x64>
 801cf34:	4b88      	ldr	r3, [pc, #544]	@ (801d158 <ip4_frag+0x274>)
 801cf36:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 801cf3a:	4988      	ldr	r1, [pc, #544]	@ (801d15c <ip4_frag+0x278>)
 801cf3c:	4888      	ldr	r0, [pc, #544]	@ (801d160 <ip4_frag+0x27c>)
 801cf3e:	f001 f9a5 	bl	801e28c <iprintf>
 801cf42:	f06f 0305 	mvn.w	r3, #5
 801cf46:	e102      	b.n	801d14e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801cf48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cf4a:	88db      	ldrh	r3, [r3, #6]
 801cf4c:	b29b      	uxth	r3, r3
 801cf4e:	4618      	mov	r0, r3
 801cf50:	f7f5 fd24 	bl	801299c <lwip_htons>
 801cf54:	4603      	mov	r3, r0
 801cf56:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 801cf58:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801cf5a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801cf5e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801cf62:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801cf64:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801cf68:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801cf6a:	68fb      	ldr	r3, [r7, #12]
 801cf6c:	891b      	ldrh	r3, [r3, #8]
 801cf6e:	3b14      	subs	r3, #20
 801cf70:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 801cf74:	e0e1      	b.n	801d13a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801cf76:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801cf78:	00db      	lsls	r3, r3, #3
 801cf7a:	b29b      	uxth	r3, r3
 801cf7c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801cf80:	4293      	cmp	r3, r2
 801cf82:	bf28      	it	cs
 801cf84:	4613      	movcs	r3, r2
 801cf86:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801cf88:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801cf8c:	2114      	movs	r1, #20
 801cf8e:	200e      	movs	r0, #14
 801cf90:	f7f6 fde0 	bl	8013b54 <pbuf_alloc>
 801cf94:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 801cf96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cf98:	2b00      	cmp	r3, #0
 801cf9a:	f000 80d5 	beq.w	801d148 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801cf9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cfa0:	895b      	ldrh	r3, [r3, #10]
 801cfa2:	2b13      	cmp	r3, #19
 801cfa4:	d806      	bhi.n	801cfb4 <ip4_frag+0xd0>
 801cfa6:	4b6c      	ldr	r3, [pc, #432]	@ (801d158 <ip4_frag+0x274>)
 801cfa8:	f44f 7249 	mov.w	r2, #804	@ 0x324
 801cfac:	496d      	ldr	r1, [pc, #436]	@ (801d164 <ip4_frag+0x280>)
 801cfae:	486c      	ldr	r0, [pc, #432]	@ (801d160 <ip4_frag+0x27c>)
 801cfb0:	f001 f96c 	bl	801e28c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801cfb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cfb6:	685b      	ldr	r3, [r3, #4]
 801cfb8:	2214      	movs	r2, #20
 801cfba:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801cfbc:	4618      	mov	r0, r3
 801cfbe:	f001 fb18 	bl	801e5f2 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801cfc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cfc4:	685b      	ldr	r3, [r3, #4]
 801cfc6:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 801cfc8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801cfca:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 801cfce:	e064      	b.n	801d09a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801cfd0:	68fb      	ldr	r3, [r7, #12]
 801cfd2:	895a      	ldrh	r2, [r3, #10]
 801cfd4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801cfd6:	1ad3      	subs	r3, r2, r3
 801cfd8:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801cfda:	68fb      	ldr	r3, [r7, #12]
 801cfdc:	895b      	ldrh	r3, [r3, #10]
 801cfde:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801cfe0:	429a      	cmp	r2, r3
 801cfe2:	d906      	bls.n	801cff2 <ip4_frag+0x10e>
 801cfe4:	4b5c      	ldr	r3, [pc, #368]	@ (801d158 <ip4_frag+0x274>)
 801cfe6:	f240 322d 	movw	r2, #813	@ 0x32d
 801cfea:	495f      	ldr	r1, [pc, #380]	@ (801d168 <ip4_frag+0x284>)
 801cfec:	485c      	ldr	r0, [pc, #368]	@ (801d160 <ip4_frag+0x27c>)
 801cfee:	f001 f94d 	bl	801e28c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801cff2:	8bfa      	ldrh	r2, [r7, #30]
 801cff4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801cff8:	4293      	cmp	r3, r2
 801cffa:	bf28      	it	cs
 801cffc:	4613      	movcs	r3, r2
 801cffe:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801d002:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801d006:	2b00      	cmp	r3, #0
 801d008:	d105      	bne.n	801d016 <ip4_frag+0x132>
        poff = 0;
 801d00a:	2300      	movs	r3, #0
 801d00c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801d00e:	68fb      	ldr	r3, [r7, #12]
 801d010:	681b      	ldr	r3, [r3, #0]
 801d012:	60fb      	str	r3, [r7, #12]
        continue;
 801d014:	e041      	b.n	801d09a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801d016:	f7ff ff0d 	bl	801ce34 <ip_frag_alloc_pbuf_custom_ref>
 801d01a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801d01c:	69bb      	ldr	r3, [r7, #24]
 801d01e:	2b00      	cmp	r3, #0
 801d020:	d103      	bne.n	801d02a <ip4_frag+0x146>
        pbuf_free(rambuf);
 801d022:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801d024:	f7f7 f87a 	bl	801411c <pbuf_free>
        goto memerr;
 801d028:	e08f      	b.n	801d14a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801d02a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801d02c:	68fb      	ldr	r3, [r7, #12]
 801d02e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801d030:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801d032:	4413      	add	r3, r2
 801d034:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 801d038:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801d03c:	9201      	str	r2, [sp, #4]
 801d03e:	9300      	str	r3, [sp, #0]
 801d040:	4603      	mov	r3, r0
 801d042:	2241      	movs	r2, #65	@ 0x41
 801d044:	2000      	movs	r0, #0
 801d046:	f7f6 feaf 	bl	8013da8 <pbuf_alloced_custom>
 801d04a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801d04c:	697b      	ldr	r3, [r7, #20]
 801d04e:	2b00      	cmp	r3, #0
 801d050:	d106      	bne.n	801d060 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801d052:	69b8      	ldr	r0, [r7, #24]
 801d054:	f7ff fef6 	bl	801ce44 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801d058:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801d05a:	f7f7 f85f 	bl	801411c <pbuf_free>
        goto memerr;
 801d05e:	e074      	b.n	801d14a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801d060:	68f8      	ldr	r0, [r7, #12]
 801d062:	f7f7 f901 	bl	8014268 <pbuf_ref>
      pcr->original = p;
 801d066:	69bb      	ldr	r3, [r7, #24]
 801d068:	68fa      	ldr	r2, [r7, #12]
 801d06a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801d06c:	69bb      	ldr	r3, [r7, #24]
 801d06e:	4a3f      	ldr	r2, [pc, #252]	@ (801d16c <ip4_frag+0x288>)
 801d070:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801d072:	6979      	ldr	r1, [r7, #20]
 801d074:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801d076:	f7f7 f91f 	bl	80142b8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801d07a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801d07e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801d082:	1ad3      	subs	r3, r2, r3
 801d084:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 801d088:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801d08c:	2b00      	cmp	r3, #0
 801d08e:	d004      	beq.n	801d09a <ip4_frag+0x1b6>
        poff = 0;
 801d090:	2300      	movs	r3, #0
 801d092:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801d094:	68fb      	ldr	r3, [r7, #12]
 801d096:	681b      	ldr	r3, [r3, #0]
 801d098:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801d09a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801d09e:	2b00      	cmp	r3, #0
 801d0a0:	d196      	bne.n	801cfd0 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801d0a2:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801d0a4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801d0a8:	4413      	add	r3, r2
 801d0aa:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801d0ac:	68bb      	ldr	r3, [r7, #8]
 801d0ae:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801d0b0:	f1a3 0213 	sub.w	r2, r3, #19
 801d0b4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801d0b8:	429a      	cmp	r2, r3
 801d0ba:	bfcc      	ite	gt
 801d0bc:	2301      	movgt	r3, #1
 801d0be:	2300      	movle	r3, #0
 801d0c0:	b2db      	uxtb	r3, r3
 801d0c2:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801d0c4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801d0c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d0cc:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 801d0ce:	6a3b      	ldr	r3, [r7, #32]
 801d0d0:	2b00      	cmp	r3, #0
 801d0d2:	d002      	beq.n	801d0da <ip4_frag+0x1f6>
 801d0d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d0d6:	2b00      	cmp	r3, #0
 801d0d8:	d003      	beq.n	801d0e2 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801d0da:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801d0dc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801d0e0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801d0e2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801d0e4:	4618      	mov	r0, r3
 801d0e6:	f7f5 fc59 	bl	801299c <lwip_htons>
 801d0ea:	4603      	mov	r3, r0
 801d0ec:	461a      	mov	r2, r3
 801d0ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d0f0:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801d0f2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801d0f4:	3314      	adds	r3, #20
 801d0f6:	b29b      	uxth	r3, r3
 801d0f8:	4618      	mov	r0, r3
 801d0fa:	f7f5 fc4f 	bl	801299c <lwip_htons>
 801d0fe:	4603      	mov	r3, r0
 801d100:	461a      	mov	r2, r3
 801d102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d104:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801d106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d108:	2200      	movs	r2, #0
 801d10a:	729a      	strb	r2, [r3, #10]
 801d10c:	2200      	movs	r2, #0
 801d10e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801d110:	68bb      	ldr	r3, [r7, #8]
 801d112:	695b      	ldr	r3, [r3, #20]
 801d114:	687a      	ldr	r2, [r7, #4]
 801d116:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801d118:	68b8      	ldr	r0, [r7, #8]
 801d11a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801d11c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801d11e:	f7f6 fffd 	bl	801411c <pbuf_free>
    left = (u16_t)(left - fragsize);
 801d122:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801d126:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801d128:	1ad3      	subs	r3, r2, r3
 801d12a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 801d12e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801d132:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801d134:	4413      	add	r3, r2
 801d136:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 801d13a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801d13e:	2b00      	cmp	r3, #0
 801d140:	f47f af19 	bne.w	801cf76 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801d144:	2300      	movs	r3, #0
 801d146:	e002      	b.n	801d14e <ip4_frag+0x26a>
      goto memerr;
 801d148:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801d14a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801d14e:	4618      	mov	r0, r3
 801d150:	3748      	adds	r7, #72	@ 0x48
 801d152:	46bd      	mov	sp, r7
 801d154:	bd80      	pop	{r7, pc}
 801d156:	bf00      	nop
 801d158:	08023ab0 	.word	0x08023ab0
 801d15c:	08023c8c 	.word	0x08023c8c
 801d160:	08023af8 	.word	0x08023af8
 801d164:	08023ca8 	.word	0x08023ca8
 801d168:	08023cc8 	.word	0x08023cc8
 801d16c:	0801ce7d 	.word	0x0801ce7d

0801d170 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801d170:	b580      	push	{r7, lr}
 801d172:	b086      	sub	sp, #24
 801d174:	af00      	add	r7, sp, #0
 801d176:	6078      	str	r0, [r7, #4]
 801d178:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801d17a:	230e      	movs	r3, #14
 801d17c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801d17e:	687b      	ldr	r3, [r7, #4]
 801d180:	895b      	ldrh	r3, [r3, #10]
 801d182:	2b0e      	cmp	r3, #14
 801d184:	d96e      	bls.n	801d264 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801d186:	687b      	ldr	r3, [r7, #4]
 801d188:	7bdb      	ldrb	r3, [r3, #15]
 801d18a:	2b00      	cmp	r3, #0
 801d18c:	d106      	bne.n	801d19c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801d18e:	683b      	ldr	r3, [r7, #0]
 801d190:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801d194:	3301      	adds	r3, #1
 801d196:	b2da      	uxtb	r2, r3
 801d198:	687b      	ldr	r3, [r7, #4]
 801d19a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801d19c:	687b      	ldr	r3, [r7, #4]
 801d19e:	685b      	ldr	r3, [r3, #4]
 801d1a0:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801d1a2:	693b      	ldr	r3, [r7, #16]
 801d1a4:	7b1a      	ldrb	r2, [r3, #12]
 801d1a6:	7b5b      	ldrb	r3, [r3, #13]
 801d1a8:	021b      	lsls	r3, r3, #8
 801d1aa:	4313      	orrs	r3, r2
 801d1ac:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801d1ae:	693b      	ldr	r3, [r7, #16]
 801d1b0:	781b      	ldrb	r3, [r3, #0]
 801d1b2:	f003 0301 	and.w	r3, r3, #1
 801d1b6:	2b00      	cmp	r3, #0
 801d1b8:	d023      	beq.n	801d202 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801d1ba:	693b      	ldr	r3, [r7, #16]
 801d1bc:	781b      	ldrb	r3, [r3, #0]
 801d1be:	2b01      	cmp	r3, #1
 801d1c0:	d10f      	bne.n	801d1e2 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801d1c2:	693b      	ldr	r3, [r7, #16]
 801d1c4:	785b      	ldrb	r3, [r3, #1]
 801d1c6:	2b00      	cmp	r3, #0
 801d1c8:	d11b      	bne.n	801d202 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801d1ca:	693b      	ldr	r3, [r7, #16]
 801d1cc:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801d1ce:	2b5e      	cmp	r3, #94	@ 0x5e
 801d1d0:	d117      	bne.n	801d202 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801d1d2:	687b      	ldr	r3, [r7, #4]
 801d1d4:	7b5b      	ldrb	r3, [r3, #13]
 801d1d6:	f043 0310 	orr.w	r3, r3, #16
 801d1da:	b2da      	uxtb	r2, r3
 801d1dc:	687b      	ldr	r3, [r7, #4]
 801d1de:	735a      	strb	r2, [r3, #13]
 801d1e0:	e00f      	b.n	801d202 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801d1e2:	693b      	ldr	r3, [r7, #16]
 801d1e4:	2206      	movs	r2, #6
 801d1e6:	4928      	ldr	r1, [pc, #160]	@ (801d288 <ethernet_input+0x118>)
 801d1e8:	4618      	mov	r0, r3
 801d1ea:	f001 f8da 	bl	801e3a2 <memcmp>
 801d1ee:	4603      	mov	r3, r0
 801d1f0:	2b00      	cmp	r3, #0
 801d1f2:	d106      	bne.n	801d202 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801d1f4:	687b      	ldr	r3, [r7, #4]
 801d1f6:	7b5b      	ldrb	r3, [r3, #13]
 801d1f8:	f043 0308 	orr.w	r3, r3, #8
 801d1fc:	b2da      	uxtb	r2, r3
 801d1fe:	687b      	ldr	r3, [r7, #4]
 801d200:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801d202:	89fb      	ldrh	r3, [r7, #14]
 801d204:	2b08      	cmp	r3, #8
 801d206:	d003      	beq.n	801d210 <ethernet_input+0xa0>
 801d208:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 801d20c:	d014      	beq.n	801d238 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801d20e:	e032      	b.n	801d276 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801d210:	683b      	ldr	r3, [r7, #0]
 801d212:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801d216:	f003 0308 	and.w	r3, r3, #8
 801d21a:	2b00      	cmp	r3, #0
 801d21c:	d024      	beq.n	801d268 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801d21e:	8afb      	ldrh	r3, [r7, #22]
 801d220:	4619      	mov	r1, r3
 801d222:	6878      	ldr	r0, [r7, #4]
 801d224:	f7f6 fef4 	bl	8014010 <pbuf_remove_header>
 801d228:	4603      	mov	r3, r0
 801d22a:	2b00      	cmp	r3, #0
 801d22c:	d11e      	bne.n	801d26c <ethernet_input+0xfc>
        ip4_input(p, netif);
 801d22e:	6839      	ldr	r1, [r7, #0]
 801d230:	6878      	ldr	r0, [r7, #4]
 801d232:	f7fe fe91 	bl	801bf58 <ip4_input>
      break;
 801d236:	e013      	b.n	801d260 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801d238:	683b      	ldr	r3, [r7, #0]
 801d23a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801d23e:	f003 0308 	and.w	r3, r3, #8
 801d242:	2b00      	cmp	r3, #0
 801d244:	d014      	beq.n	801d270 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801d246:	8afb      	ldrh	r3, [r7, #22]
 801d248:	4619      	mov	r1, r3
 801d24a:	6878      	ldr	r0, [r7, #4]
 801d24c:	f7f6 fee0 	bl	8014010 <pbuf_remove_header>
 801d250:	4603      	mov	r3, r0
 801d252:	2b00      	cmp	r3, #0
 801d254:	d10e      	bne.n	801d274 <ethernet_input+0x104>
        etharp_input(p, netif);
 801d256:	6839      	ldr	r1, [r7, #0]
 801d258:	6878      	ldr	r0, [r7, #4]
 801d25a:	f7fe f833 	bl	801b2c4 <etharp_input>
      break;
 801d25e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801d260:	2300      	movs	r3, #0
 801d262:	e00c      	b.n	801d27e <ethernet_input+0x10e>
    goto free_and_return;
 801d264:	bf00      	nop
 801d266:	e006      	b.n	801d276 <ethernet_input+0x106>
        goto free_and_return;
 801d268:	bf00      	nop
 801d26a:	e004      	b.n	801d276 <ethernet_input+0x106>
        goto free_and_return;
 801d26c:	bf00      	nop
 801d26e:	e002      	b.n	801d276 <ethernet_input+0x106>
        goto free_and_return;
 801d270:	bf00      	nop
 801d272:	e000      	b.n	801d276 <ethernet_input+0x106>
        goto free_and_return;
 801d274:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801d276:	6878      	ldr	r0, [r7, #4]
 801d278:	f7f6 ff50 	bl	801411c <pbuf_free>
  return ERR_OK;
 801d27c:	2300      	movs	r3, #0
}
 801d27e:	4618      	mov	r0, r3
 801d280:	3718      	adds	r7, #24
 801d282:	46bd      	mov	sp, r7
 801d284:	bd80      	pop	{r7, pc}
 801d286:	bf00      	nop
 801d288:	08023ef4 	.word	0x08023ef4

0801d28c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801d28c:	b580      	push	{r7, lr}
 801d28e:	b086      	sub	sp, #24
 801d290:	af00      	add	r7, sp, #0
 801d292:	60f8      	str	r0, [r7, #12]
 801d294:	60b9      	str	r1, [r7, #8]
 801d296:	607a      	str	r2, [r7, #4]
 801d298:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801d29a:	8c3b      	ldrh	r3, [r7, #32]
 801d29c:	4618      	mov	r0, r3
 801d29e:	f7f5 fb7d 	bl	801299c <lwip_htons>
 801d2a2:	4603      	mov	r3, r0
 801d2a4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801d2a6:	210e      	movs	r1, #14
 801d2a8:	68b8      	ldr	r0, [r7, #8]
 801d2aa:	f7f6 fea1 	bl	8013ff0 <pbuf_add_header>
 801d2ae:	4603      	mov	r3, r0
 801d2b0:	2b00      	cmp	r3, #0
 801d2b2:	d125      	bne.n	801d300 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801d2b4:	68bb      	ldr	r3, [r7, #8]
 801d2b6:	685b      	ldr	r3, [r3, #4]
 801d2b8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801d2ba:	693b      	ldr	r3, [r7, #16]
 801d2bc:	8afa      	ldrh	r2, [r7, #22]
 801d2be:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801d2c0:	693b      	ldr	r3, [r7, #16]
 801d2c2:	2206      	movs	r2, #6
 801d2c4:	6839      	ldr	r1, [r7, #0]
 801d2c6:	4618      	mov	r0, r3
 801d2c8:	f001 f993 	bl	801e5f2 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801d2cc:	693b      	ldr	r3, [r7, #16]
 801d2ce:	3306      	adds	r3, #6
 801d2d0:	2206      	movs	r2, #6
 801d2d2:	6879      	ldr	r1, [r7, #4]
 801d2d4:	4618      	mov	r0, r3
 801d2d6:	f001 f98c 	bl	801e5f2 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801d2da:	68fb      	ldr	r3, [r7, #12]
 801d2dc:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801d2e0:	2b06      	cmp	r3, #6
 801d2e2:	d006      	beq.n	801d2f2 <ethernet_output+0x66>
 801d2e4:	4b0a      	ldr	r3, [pc, #40]	@ (801d310 <ethernet_output+0x84>)
 801d2e6:	f44f 7299 	mov.w	r2, #306	@ 0x132
 801d2ea:	490a      	ldr	r1, [pc, #40]	@ (801d314 <ethernet_output+0x88>)
 801d2ec:	480a      	ldr	r0, [pc, #40]	@ (801d318 <ethernet_output+0x8c>)
 801d2ee:	f000 ffcd 	bl	801e28c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801d2f2:	68fb      	ldr	r3, [r7, #12]
 801d2f4:	699b      	ldr	r3, [r3, #24]
 801d2f6:	68b9      	ldr	r1, [r7, #8]
 801d2f8:	68f8      	ldr	r0, [r7, #12]
 801d2fa:	4798      	blx	r3
 801d2fc:	4603      	mov	r3, r0
 801d2fe:	e002      	b.n	801d306 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801d300:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801d302:	f06f 0301 	mvn.w	r3, #1
}
 801d306:	4618      	mov	r0, r3
 801d308:	3718      	adds	r7, #24
 801d30a:	46bd      	mov	sp, r7
 801d30c:	bd80      	pop	{r7, pc}
 801d30e:	bf00      	nop
 801d310:	08023cd8 	.word	0x08023cd8
 801d314:	08023d10 	.word	0x08023d10
 801d318:	08023d44 	.word	0x08023d44

0801d31c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801d31c:	b580      	push	{r7, lr}
 801d31e:	b086      	sub	sp, #24
 801d320:	af00      	add	r7, sp, #0
 801d322:	6078      	str	r0, [r7, #4]
 801d324:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801d326:	683b      	ldr	r3, [r7, #0]
 801d328:	60bb      	str	r3, [r7, #8]
 801d32a:	2304      	movs	r3, #4
 801d32c:	60fb      	str	r3, [r7, #12]
 801d32e:	2300      	movs	r3, #0
 801d330:	613b      	str	r3, [r7, #16]
 801d332:	2300      	movs	r3, #0
 801d334:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801d336:	f107 0308 	add.w	r3, r7, #8
 801d33a:	2100      	movs	r1, #0
 801d33c:	4618      	mov	r0, r3
 801d33e:	f7f2 fc13 	bl	800fb68 <osMessageCreate>
 801d342:	4602      	mov	r2, r0
 801d344:	687b      	ldr	r3, [r7, #4]
 801d346:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801d348:	687b      	ldr	r3, [r7, #4]
 801d34a:	681b      	ldr	r3, [r3, #0]
 801d34c:	2b00      	cmp	r3, #0
 801d34e:	d102      	bne.n	801d356 <sys_mbox_new+0x3a>
    return ERR_MEM;
 801d350:	f04f 33ff 	mov.w	r3, #4294967295
 801d354:	e000      	b.n	801d358 <sys_mbox_new+0x3c>

  return ERR_OK;
 801d356:	2300      	movs	r3, #0
}
 801d358:	4618      	mov	r0, r3
 801d35a:	3718      	adds	r7, #24
 801d35c:	46bd      	mov	sp, r7
 801d35e:	bd80      	pop	{r7, pc}

0801d360 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801d360:	b580      	push	{r7, lr}
 801d362:	b084      	sub	sp, #16
 801d364:	af00      	add	r7, sp, #0
 801d366:	6078      	str	r0, [r7, #4]
 801d368:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801d36a:	687b      	ldr	r3, [r7, #4]
 801d36c:	681b      	ldr	r3, [r3, #0]
 801d36e:	6839      	ldr	r1, [r7, #0]
 801d370:	2200      	movs	r2, #0
 801d372:	4618      	mov	r0, r3
 801d374:	f7f2 fc20 	bl	800fbb8 <osMessagePut>
 801d378:	4603      	mov	r3, r0
 801d37a:	2b00      	cmp	r3, #0
 801d37c:	d102      	bne.n	801d384 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801d37e:	2300      	movs	r3, #0
 801d380:	73fb      	strb	r3, [r7, #15]
 801d382:	e001      	b.n	801d388 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801d384:	23ff      	movs	r3, #255	@ 0xff
 801d386:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801d388:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801d38c:	4618      	mov	r0, r3
 801d38e:	3710      	adds	r7, #16
 801d390:	46bd      	mov	sp, r7
 801d392:	bd80      	pop	{r7, pc}

0801d394 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801d394:	b580      	push	{r7, lr}
 801d396:	b08c      	sub	sp, #48	@ 0x30
 801d398:	af00      	add	r7, sp, #0
 801d39a:	61f8      	str	r0, [r7, #28]
 801d39c:	61b9      	str	r1, [r7, #24]
 801d39e:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 801d3a0:	f7f2 fa20 	bl	800f7e4 <osKernelSysTick>
 801d3a4:	62f8      	str	r0, [r7, #44]	@ 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801d3a6:	697b      	ldr	r3, [r7, #20]
 801d3a8:	2b00      	cmp	r3, #0
 801d3aa:	d017      	beq.n	801d3dc <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 801d3ac:	69fb      	ldr	r3, [r7, #28]
 801d3ae:	6819      	ldr	r1, [r3, #0]
 801d3b0:	f107 0320 	add.w	r3, r7, #32
 801d3b4:	697a      	ldr	r2, [r7, #20]
 801d3b6:	4618      	mov	r0, r3
 801d3b8:	f7f2 fc3e 	bl	800fc38 <osMessageGet>

    if(event.status == osEventMessage)
 801d3bc:	6a3b      	ldr	r3, [r7, #32]
 801d3be:	2b10      	cmp	r3, #16
 801d3c0:	d109      	bne.n	801d3d6 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801d3c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d3c4:	461a      	mov	r2, r3
 801d3c6:	69bb      	ldr	r3, [r7, #24]
 801d3c8:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801d3ca:	f7f2 fa0b 	bl	800f7e4 <osKernelSysTick>
 801d3ce:	4602      	mov	r2, r0
 801d3d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d3d2:	1ad3      	subs	r3, r2, r3
 801d3d4:	e019      	b.n	801d40a <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801d3d6:	f04f 33ff 	mov.w	r3, #4294967295
 801d3da:	e016      	b.n	801d40a <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801d3dc:	69fb      	ldr	r3, [r7, #28]
 801d3de:	6819      	ldr	r1, [r3, #0]
 801d3e0:	463b      	mov	r3, r7
 801d3e2:	f04f 32ff 	mov.w	r2, #4294967295
 801d3e6:	4618      	mov	r0, r3
 801d3e8:	f7f2 fc26 	bl	800fc38 <osMessageGet>
 801d3ec:	f107 0320 	add.w	r3, r7, #32
 801d3f0:	463a      	mov	r2, r7
 801d3f2:	ca07      	ldmia	r2, {r0, r1, r2}
 801d3f4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801d3f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d3fa:	461a      	mov	r2, r3
 801d3fc:	69bb      	ldr	r3, [r7, #24]
 801d3fe:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801d400:	f7f2 f9f0 	bl	800f7e4 <osKernelSysTick>
 801d404:	4602      	mov	r2, r0
 801d406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d408:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801d40a:	4618      	mov	r0, r3
 801d40c:	3730      	adds	r7, #48	@ 0x30
 801d40e:	46bd      	mov	sp, r7
 801d410:	bd80      	pop	{r7, pc}

0801d412 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801d412:	b480      	push	{r7}
 801d414:	b083      	sub	sp, #12
 801d416:	af00      	add	r7, sp, #0
 801d418:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801d41a:	687b      	ldr	r3, [r7, #4]
 801d41c:	681b      	ldr	r3, [r3, #0]
 801d41e:	2b00      	cmp	r3, #0
 801d420:	d101      	bne.n	801d426 <sys_mbox_valid+0x14>
    return 0;
 801d422:	2300      	movs	r3, #0
 801d424:	e000      	b.n	801d428 <sys_mbox_valid+0x16>
  else
    return 1;
 801d426:	2301      	movs	r3, #1
}
 801d428:	4618      	mov	r0, r3
 801d42a:	370c      	adds	r7, #12
 801d42c:	46bd      	mov	sp, r7
 801d42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d432:	4770      	bx	lr

0801d434 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801d434:	b580      	push	{r7, lr}
 801d436:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801d438:	4803      	ldr	r0, [pc, #12]	@ (801d448 <sys_init+0x14>)
 801d43a:	f7f2 fa43 	bl	800f8c4 <osMutexCreate>
 801d43e:	4603      	mov	r3, r0
 801d440:	4a02      	ldr	r2, [pc, #8]	@ (801d44c <sys_init+0x18>)
 801d442:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801d444:	bf00      	nop
 801d446:	bd80      	pop	{r7, pc}
 801d448:	08023f04 	.word	0x08023f04
 801d44c:	2000cc2c 	.word	0x2000cc2c

0801d450 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801d450:	b580      	push	{r7, lr}
 801d452:	b084      	sub	sp, #16
 801d454:	af00      	add	r7, sp, #0
 801d456:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801d458:	2300      	movs	r3, #0
 801d45a:	60bb      	str	r3, [r7, #8]
 801d45c:	2300      	movs	r3, #0
 801d45e:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 801d460:	f107 0308 	add.w	r3, r7, #8
 801d464:	4618      	mov	r0, r3
 801d466:	f7f2 fa2d 	bl	800f8c4 <osMutexCreate>
 801d46a:	4602      	mov	r2, r0
 801d46c:	687b      	ldr	r3, [r7, #4]
 801d46e:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 801d470:	687b      	ldr	r3, [r7, #4]
 801d472:	681b      	ldr	r3, [r3, #0]
 801d474:	2b00      	cmp	r3, #0
 801d476:	d102      	bne.n	801d47e <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801d478:	f04f 33ff 	mov.w	r3, #4294967295
 801d47c:	e000      	b.n	801d480 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801d47e:	2300      	movs	r3, #0
}
 801d480:	4618      	mov	r0, r3
 801d482:	3710      	adds	r7, #16
 801d484:	46bd      	mov	sp, r7
 801d486:	bd80      	pop	{r7, pc}

0801d488 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801d488:	b580      	push	{r7, lr}
 801d48a:	b082      	sub	sp, #8
 801d48c:	af00      	add	r7, sp, #0
 801d48e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801d490:	687b      	ldr	r3, [r7, #4]
 801d492:	681b      	ldr	r3, [r3, #0]
 801d494:	f04f 31ff 	mov.w	r1, #4294967295
 801d498:	4618      	mov	r0, r3
 801d49a:	f7f2 fa2b 	bl	800f8f4 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801d49e:	bf00      	nop
 801d4a0:	3708      	adds	r7, #8
 801d4a2:	46bd      	mov	sp, r7
 801d4a4:	bd80      	pop	{r7, pc}

0801d4a6 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801d4a6:	b580      	push	{r7, lr}
 801d4a8:	b082      	sub	sp, #8
 801d4aa:	af00      	add	r7, sp, #0
 801d4ac:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801d4ae:	687b      	ldr	r3, [r7, #4]
 801d4b0:	681b      	ldr	r3, [r3, #0]
 801d4b2:	4618      	mov	r0, r3
 801d4b4:	f7f2 fa6c 	bl	800f990 <osMutexRelease>
}
 801d4b8:	bf00      	nop
 801d4ba:	3708      	adds	r7, #8
 801d4bc:	46bd      	mov	sp, r7
 801d4be:	bd80      	pop	{r7, pc}

0801d4c0 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801d4c0:	b580      	push	{r7, lr}
 801d4c2:	b08c      	sub	sp, #48	@ 0x30
 801d4c4:	af00      	add	r7, sp, #0
 801d4c6:	60f8      	str	r0, [r7, #12]
 801d4c8:	60b9      	str	r1, [r7, #8]
 801d4ca:	607a      	str	r2, [r7, #4]
 801d4cc:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801d4ce:	f107 0314 	add.w	r3, r7, #20
 801d4d2:	2200      	movs	r2, #0
 801d4d4:	601a      	str	r2, [r3, #0]
 801d4d6:	605a      	str	r2, [r3, #4]
 801d4d8:	609a      	str	r2, [r3, #8]
 801d4da:	60da      	str	r2, [r3, #12]
 801d4dc:	611a      	str	r2, [r3, #16]
 801d4de:	615a      	str	r2, [r3, #20]
 801d4e0:	619a      	str	r2, [r3, #24]
 801d4e2:	68fb      	ldr	r3, [r7, #12]
 801d4e4:	617b      	str	r3, [r7, #20]
 801d4e6:	68bb      	ldr	r3, [r7, #8]
 801d4e8:	61bb      	str	r3, [r7, #24]
 801d4ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d4ec:	b21b      	sxth	r3, r3
 801d4ee:	83bb      	strh	r3, [r7, #28]
 801d4f0:	683b      	ldr	r3, [r7, #0]
 801d4f2:	627b      	str	r3, [r7, #36]	@ 0x24
  return osThreadCreate(&os_thread_def, arg);
 801d4f4:	f107 0314 	add.w	r3, r7, #20
 801d4f8:	6879      	ldr	r1, [r7, #4]
 801d4fa:	4618      	mov	r0, r3
 801d4fc:	f7f2 f982 	bl	800f804 <osThreadCreate>
 801d500:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801d502:	4618      	mov	r0, r3
 801d504:	3730      	adds	r7, #48	@ 0x30
 801d506:	46bd      	mov	sp, r7
 801d508:	bd80      	pop	{r7, pc}
	...

0801d50c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801d50c:	b580      	push	{r7, lr}
 801d50e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801d510:	4b04      	ldr	r3, [pc, #16]	@ (801d524 <sys_arch_protect+0x18>)
 801d512:	681b      	ldr	r3, [r3, #0]
 801d514:	f04f 31ff 	mov.w	r1, #4294967295
 801d518:	4618      	mov	r0, r3
 801d51a:	f7f2 f9eb 	bl	800f8f4 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801d51e:	2301      	movs	r3, #1
}
 801d520:	4618      	mov	r0, r3
 801d522:	bd80      	pop	{r7, pc}
 801d524:	2000cc2c 	.word	0x2000cc2c

0801d528 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801d528:	b580      	push	{r7, lr}
 801d52a:	b082      	sub	sp, #8
 801d52c:	af00      	add	r7, sp, #0
 801d52e:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801d530:	4b04      	ldr	r3, [pc, #16]	@ (801d544 <sys_arch_unprotect+0x1c>)
 801d532:	681b      	ldr	r3, [r3, #0]
 801d534:	4618      	mov	r0, r3
 801d536:	f7f2 fa2b 	bl	800f990 <osMutexRelease>
}
 801d53a:	bf00      	nop
 801d53c:	3708      	adds	r7, #8
 801d53e:	46bd      	mov	sp, r7
 801d540:	bd80      	pop	{r7, pc}
 801d542:	bf00      	nop
 801d544:	2000cc2c 	.word	0x2000cc2c

0801d548 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801d548:	b580      	push	{r7, lr}
 801d54a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801d54c:	2200      	movs	r2, #0
 801d54e:	4912      	ldr	r1, [pc, #72]	@ (801d598 <MX_USB_DEVICE_Init+0x50>)
 801d550:	4812      	ldr	r0, [pc, #72]	@ (801d59c <MX_USB_DEVICE_Init+0x54>)
 801d552:	f7f0 fdf7 	bl	800e144 <USBD_Init>
 801d556:	4603      	mov	r3, r0
 801d558:	2b00      	cmp	r3, #0
 801d55a:	d001      	beq.n	801d560 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801d55c:	f7e4 fdec 	bl	8002138 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801d560:	490f      	ldr	r1, [pc, #60]	@ (801d5a0 <MX_USB_DEVICE_Init+0x58>)
 801d562:	480e      	ldr	r0, [pc, #56]	@ (801d59c <MX_USB_DEVICE_Init+0x54>)
 801d564:	f7f0 fe1e 	bl	800e1a4 <USBD_RegisterClass>
 801d568:	4603      	mov	r3, r0
 801d56a:	2b00      	cmp	r3, #0
 801d56c:	d001      	beq.n	801d572 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801d56e:	f7e4 fde3 	bl	8002138 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801d572:	490c      	ldr	r1, [pc, #48]	@ (801d5a4 <MX_USB_DEVICE_Init+0x5c>)
 801d574:	4809      	ldr	r0, [pc, #36]	@ (801d59c <MX_USB_DEVICE_Init+0x54>)
 801d576:	f7f0 fd15 	bl	800dfa4 <USBD_CDC_RegisterInterface>
 801d57a:	4603      	mov	r3, r0
 801d57c:	2b00      	cmp	r3, #0
 801d57e:	d001      	beq.n	801d584 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801d580:	f7e4 fdda 	bl	8002138 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801d584:	4805      	ldr	r0, [pc, #20]	@ (801d59c <MX_USB_DEVICE_Init+0x54>)
 801d586:	f7f0 fe43 	bl	800e210 <USBD_Start>
 801d58a:	4603      	mov	r3, r0
 801d58c:	2b00      	cmp	r3, #0
 801d58e:	d001      	beq.n	801d594 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801d590:	f7e4 fdd2 	bl	8002138 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801d594:	bf00      	nop
 801d596:	bd80      	pop	{r7, pc}
 801d598:	200000c4 	.word	0x200000c4
 801d59c:	2000cc30 	.word	0x2000cc30
 801d5a0:	20000020 	.word	0x20000020
 801d5a4:	200000b0 	.word	0x200000b0

0801d5a8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801d5a8:	b580      	push	{r7, lr}
 801d5aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801d5ac:	2200      	movs	r2, #0
 801d5ae:	4905      	ldr	r1, [pc, #20]	@ (801d5c4 <CDC_Init_FS+0x1c>)
 801d5b0:	4805      	ldr	r0, [pc, #20]	@ (801d5c8 <CDC_Init_FS+0x20>)
 801d5b2:	f7f0 fd11 	bl	800dfd8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801d5b6:	4905      	ldr	r1, [pc, #20]	@ (801d5cc <CDC_Init_FS+0x24>)
 801d5b8:	4803      	ldr	r0, [pc, #12]	@ (801d5c8 <CDC_Init_FS+0x20>)
 801d5ba:	f7f0 fd2f 	bl	800e01c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801d5be:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801d5c0:	4618      	mov	r0, r3
 801d5c2:	bd80      	pop	{r7, pc}
 801d5c4:	2000d70c 	.word	0x2000d70c
 801d5c8:	2000cc30 	.word	0x2000cc30
 801d5cc:	2000cf0c 	.word	0x2000cf0c

0801d5d0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801d5d0:	b480      	push	{r7}
 801d5d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801d5d4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801d5d6:	4618      	mov	r0, r3
 801d5d8:	46bd      	mov	sp, r7
 801d5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d5de:	4770      	bx	lr

0801d5e0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801d5e0:	b480      	push	{r7}
 801d5e2:	b083      	sub	sp, #12
 801d5e4:	af00      	add	r7, sp, #0
 801d5e6:	4603      	mov	r3, r0
 801d5e8:	6039      	str	r1, [r7, #0]
 801d5ea:	71fb      	strb	r3, [r7, #7]
 801d5ec:	4613      	mov	r3, r2
 801d5ee:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801d5f0:	79fb      	ldrb	r3, [r7, #7]
 801d5f2:	2b23      	cmp	r3, #35	@ 0x23
 801d5f4:	d84a      	bhi.n	801d68c <CDC_Control_FS+0xac>
 801d5f6:	a201      	add	r2, pc, #4	@ (adr r2, 801d5fc <CDC_Control_FS+0x1c>)
 801d5f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d5fc:	0801d68d 	.word	0x0801d68d
 801d600:	0801d68d 	.word	0x0801d68d
 801d604:	0801d68d 	.word	0x0801d68d
 801d608:	0801d68d 	.word	0x0801d68d
 801d60c:	0801d68d 	.word	0x0801d68d
 801d610:	0801d68d 	.word	0x0801d68d
 801d614:	0801d68d 	.word	0x0801d68d
 801d618:	0801d68d 	.word	0x0801d68d
 801d61c:	0801d68d 	.word	0x0801d68d
 801d620:	0801d68d 	.word	0x0801d68d
 801d624:	0801d68d 	.word	0x0801d68d
 801d628:	0801d68d 	.word	0x0801d68d
 801d62c:	0801d68d 	.word	0x0801d68d
 801d630:	0801d68d 	.word	0x0801d68d
 801d634:	0801d68d 	.word	0x0801d68d
 801d638:	0801d68d 	.word	0x0801d68d
 801d63c:	0801d68d 	.word	0x0801d68d
 801d640:	0801d68d 	.word	0x0801d68d
 801d644:	0801d68d 	.word	0x0801d68d
 801d648:	0801d68d 	.word	0x0801d68d
 801d64c:	0801d68d 	.word	0x0801d68d
 801d650:	0801d68d 	.word	0x0801d68d
 801d654:	0801d68d 	.word	0x0801d68d
 801d658:	0801d68d 	.word	0x0801d68d
 801d65c:	0801d68d 	.word	0x0801d68d
 801d660:	0801d68d 	.word	0x0801d68d
 801d664:	0801d68d 	.word	0x0801d68d
 801d668:	0801d68d 	.word	0x0801d68d
 801d66c:	0801d68d 	.word	0x0801d68d
 801d670:	0801d68d 	.word	0x0801d68d
 801d674:	0801d68d 	.word	0x0801d68d
 801d678:	0801d68d 	.word	0x0801d68d
 801d67c:	0801d68d 	.word	0x0801d68d
 801d680:	0801d68d 	.word	0x0801d68d
 801d684:	0801d68d 	.word	0x0801d68d
 801d688:	0801d68d 	.word	0x0801d68d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801d68c:	bf00      	nop
  }

  return (USBD_OK);
 801d68e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801d690:	4618      	mov	r0, r3
 801d692:	370c      	adds	r7, #12
 801d694:	46bd      	mov	sp, r7
 801d696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d69a:	4770      	bx	lr

0801d69c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801d69c:	b580      	push	{r7, lr}
 801d69e:	b082      	sub	sp, #8
 801d6a0:	af00      	add	r7, sp, #0
 801d6a2:	6078      	str	r0, [r7, #4]
 801d6a4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801d6a6:	6879      	ldr	r1, [r7, #4]
 801d6a8:	4805      	ldr	r0, [pc, #20]	@ (801d6c0 <CDC_Receive_FS+0x24>)
 801d6aa:	f7f0 fcb7 	bl	800e01c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801d6ae:	4804      	ldr	r0, [pc, #16]	@ (801d6c0 <CDC_Receive_FS+0x24>)
 801d6b0:	f7f0 fd12 	bl	800e0d8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801d6b4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801d6b6:	4618      	mov	r0, r3
 801d6b8:	3708      	adds	r7, #8
 801d6ba:	46bd      	mov	sp, r7
 801d6bc:	bd80      	pop	{r7, pc}
 801d6be:	bf00      	nop
 801d6c0:	2000cc30 	.word	0x2000cc30

0801d6c4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801d6c4:	b580      	push	{r7, lr}
 801d6c6:	b084      	sub	sp, #16
 801d6c8:	af00      	add	r7, sp, #0
 801d6ca:	6078      	str	r0, [r7, #4]
 801d6cc:	460b      	mov	r3, r1
 801d6ce:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801d6d0:	2300      	movs	r3, #0
 801d6d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801d6d4:	4b0d      	ldr	r3, [pc, #52]	@ (801d70c <CDC_Transmit_FS+0x48>)
 801d6d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801d6da:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801d6dc:	68bb      	ldr	r3, [r7, #8]
 801d6de:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 801d6e2:	2b00      	cmp	r3, #0
 801d6e4:	d001      	beq.n	801d6ea <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801d6e6:	2301      	movs	r3, #1
 801d6e8:	e00b      	b.n	801d702 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801d6ea:	887b      	ldrh	r3, [r7, #2]
 801d6ec:	461a      	mov	r2, r3
 801d6ee:	6879      	ldr	r1, [r7, #4]
 801d6f0:	4806      	ldr	r0, [pc, #24]	@ (801d70c <CDC_Transmit_FS+0x48>)
 801d6f2:	f7f0 fc71 	bl	800dfd8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801d6f6:	4805      	ldr	r0, [pc, #20]	@ (801d70c <CDC_Transmit_FS+0x48>)
 801d6f8:	f7f0 fcae 	bl	800e058 <USBD_CDC_TransmitPacket>
 801d6fc:	4603      	mov	r3, r0
 801d6fe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 801d700:	7bfb      	ldrb	r3, [r7, #15]
}
 801d702:	4618      	mov	r0, r3
 801d704:	3710      	adds	r7, #16
 801d706:	46bd      	mov	sp, r7
 801d708:	bd80      	pop	{r7, pc}
 801d70a:	bf00      	nop
 801d70c:	2000cc30 	.word	0x2000cc30

0801d710 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801d710:	b480      	push	{r7}
 801d712:	b087      	sub	sp, #28
 801d714:	af00      	add	r7, sp, #0
 801d716:	60f8      	str	r0, [r7, #12]
 801d718:	60b9      	str	r1, [r7, #8]
 801d71a:	4613      	mov	r3, r2
 801d71c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801d71e:	2300      	movs	r3, #0
 801d720:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801d722:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801d726:	4618      	mov	r0, r3
 801d728:	371c      	adds	r7, #28
 801d72a:	46bd      	mov	sp, r7
 801d72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d730:	4770      	bx	lr
	...

0801d734 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d734:	b480      	push	{r7}
 801d736:	b083      	sub	sp, #12
 801d738:	af00      	add	r7, sp, #0
 801d73a:	4603      	mov	r3, r0
 801d73c:	6039      	str	r1, [r7, #0]
 801d73e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801d740:	683b      	ldr	r3, [r7, #0]
 801d742:	2212      	movs	r2, #18
 801d744:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801d746:	4b03      	ldr	r3, [pc, #12]	@ (801d754 <USBD_FS_DeviceDescriptor+0x20>)
}
 801d748:	4618      	mov	r0, r3
 801d74a:	370c      	adds	r7, #12
 801d74c:	46bd      	mov	sp, r7
 801d74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d752:	4770      	bx	lr
 801d754:	200000e0 	.word	0x200000e0

0801d758 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d758:	b480      	push	{r7}
 801d75a:	b083      	sub	sp, #12
 801d75c:	af00      	add	r7, sp, #0
 801d75e:	4603      	mov	r3, r0
 801d760:	6039      	str	r1, [r7, #0]
 801d762:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801d764:	683b      	ldr	r3, [r7, #0]
 801d766:	2204      	movs	r2, #4
 801d768:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801d76a:	4b03      	ldr	r3, [pc, #12]	@ (801d778 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801d76c:	4618      	mov	r0, r3
 801d76e:	370c      	adds	r7, #12
 801d770:	46bd      	mov	sp, r7
 801d772:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d776:	4770      	bx	lr
 801d778:	200000f4 	.word	0x200000f4

0801d77c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d77c:	b580      	push	{r7, lr}
 801d77e:	b082      	sub	sp, #8
 801d780:	af00      	add	r7, sp, #0
 801d782:	4603      	mov	r3, r0
 801d784:	6039      	str	r1, [r7, #0]
 801d786:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801d788:	79fb      	ldrb	r3, [r7, #7]
 801d78a:	2b00      	cmp	r3, #0
 801d78c:	d105      	bne.n	801d79a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801d78e:	683a      	ldr	r2, [r7, #0]
 801d790:	4907      	ldr	r1, [pc, #28]	@ (801d7b0 <USBD_FS_ProductStrDescriptor+0x34>)
 801d792:	4808      	ldr	r0, [pc, #32]	@ (801d7b4 <USBD_FS_ProductStrDescriptor+0x38>)
 801d794:	f7f1 ff02 	bl	800f59c <USBD_GetString>
 801d798:	e004      	b.n	801d7a4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801d79a:	683a      	ldr	r2, [r7, #0]
 801d79c:	4904      	ldr	r1, [pc, #16]	@ (801d7b0 <USBD_FS_ProductStrDescriptor+0x34>)
 801d79e:	4805      	ldr	r0, [pc, #20]	@ (801d7b4 <USBD_FS_ProductStrDescriptor+0x38>)
 801d7a0:	f7f1 fefc 	bl	800f59c <USBD_GetString>
  }
  return USBD_StrDesc;
 801d7a4:	4b02      	ldr	r3, [pc, #8]	@ (801d7b0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801d7a6:	4618      	mov	r0, r3
 801d7a8:	3708      	adds	r7, #8
 801d7aa:	46bd      	mov	sp, r7
 801d7ac:	bd80      	pop	{r7, pc}
 801d7ae:	bf00      	nop
 801d7b0:	2000df0c 	.word	0x2000df0c
 801d7b4:	08023d6c 	.word	0x08023d6c

0801d7b8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d7b8:	b580      	push	{r7, lr}
 801d7ba:	b082      	sub	sp, #8
 801d7bc:	af00      	add	r7, sp, #0
 801d7be:	4603      	mov	r3, r0
 801d7c0:	6039      	str	r1, [r7, #0]
 801d7c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801d7c4:	683a      	ldr	r2, [r7, #0]
 801d7c6:	4904      	ldr	r1, [pc, #16]	@ (801d7d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801d7c8:	4804      	ldr	r0, [pc, #16]	@ (801d7dc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801d7ca:	f7f1 fee7 	bl	800f59c <USBD_GetString>
  return USBD_StrDesc;
 801d7ce:	4b02      	ldr	r3, [pc, #8]	@ (801d7d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801d7d0:	4618      	mov	r0, r3
 801d7d2:	3708      	adds	r7, #8
 801d7d4:	46bd      	mov	sp, r7
 801d7d6:	bd80      	pop	{r7, pc}
 801d7d8:	2000df0c 	.word	0x2000df0c
 801d7dc:	08023d84 	.word	0x08023d84

0801d7e0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d7e0:	b580      	push	{r7, lr}
 801d7e2:	b082      	sub	sp, #8
 801d7e4:	af00      	add	r7, sp, #0
 801d7e6:	4603      	mov	r3, r0
 801d7e8:	6039      	str	r1, [r7, #0]
 801d7ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801d7ec:	683b      	ldr	r3, [r7, #0]
 801d7ee:	221a      	movs	r2, #26
 801d7f0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801d7f2:	f000 f843 	bl	801d87c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801d7f6:	4b02      	ldr	r3, [pc, #8]	@ (801d800 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801d7f8:	4618      	mov	r0, r3
 801d7fa:	3708      	adds	r7, #8
 801d7fc:	46bd      	mov	sp, r7
 801d7fe:	bd80      	pop	{r7, pc}
 801d800:	200000f8 	.word	0x200000f8

0801d804 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d804:	b580      	push	{r7, lr}
 801d806:	b082      	sub	sp, #8
 801d808:	af00      	add	r7, sp, #0
 801d80a:	4603      	mov	r3, r0
 801d80c:	6039      	str	r1, [r7, #0]
 801d80e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801d810:	79fb      	ldrb	r3, [r7, #7]
 801d812:	2b00      	cmp	r3, #0
 801d814:	d105      	bne.n	801d822 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801d816:	683a      	ldr	r2, [r7, #0]
 801d818:	4907      	ldr	r1, [pc, #28]	@ (801d838 <USBD_FS_ConfigStrDescriptor+0x34>)
 801d81a:	4808      	ldr	r0, [pc, #32]	@ (801d83c <USBD_FS_ConfigStrDescriptor+0x38>)
 801d81c:	f7f1 febe 	bl	800f59c <USBD_GetString>
 801d820:	e004      	b.n	801d82c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801d822:	683a      	ldr	r2, [r7, #0]
 801d824:	4904      	ldr	r1, [pc, #16]	@ (801d838 <USBD_FS_ConfigStrDescriptor+0x34>)
 801d826:	4805      	ldr	r0, [pc, #20]	@ (801d83c <USBD_FS_ConfigStrDescriptor+0x38>)
 801d828:	f7f1 feb8 	bl	800f59c <USBD_GetString>
  }
  return USBD_StrDesc;
 801d82c:	4b02      	ldr	r3, [pc, #8]	@ (801d838 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801d82e:	4618      	mov	r0, r3
 801d830:	3708      	adds	r7, #8
 801d832:	46bd      	mov	sp, r7
 801d834:	bd80      	pop	{r7, pc}
 801d836:	bf00      	nop
 801d838:	2000df0c 	.word	0x2000df0c
 801d83c:	08023d98 	.word	0x08023d98

0801d840 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d840:	b580      	push	{r7, lr}
 801d842:	b082      	sub	sp, #8
 801d844:	af00      	add	r7, sp, #0
 801d846:	4603      	mov	r3, r0
 801d848:	6039      	str	r1, [r7, #0]
 801d84a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801d84c:	79fb      	ldrb	r3, [r7, #7]
 801d84e:	2b00      	cmp	r3, #0
 801d850:	d105      	bne.n	801d85e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801d852:	683a      	ldr	r2, [r7, #0]
 801d854:	4907      	ldr	r1, [pc, #28]	@ (801d874 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801d856:	4808      	ldr	r0, [pc, #32]	@ (801d878 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801d858:	f7f1 fea0 	bl	800f59c <USBD_GetString>
 801d85c:	e004      	b.n	801d868 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801d85e:	683a      	ldr	r2, [r7, #0]
 801d860:	4904      	ldr	r1, [pc, #16]	@ (801d874 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801d862:	4805      	ldr	r0, [pc, #20]	@ (801d878 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801d864:	f7f1 fe9a 	bl	800f59c <USBD_GetString>
  }
  return USBD_StrDesc;
 801d868:	4b02      	ldr	r3, [pc, #8]	@ (801d874 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801d86a:	4618      	mov	r0, r3
 801d86c:	3708      	adds	r7, #8
 801d86e:	46bd      	mov	sp, r7
 801d870:	bd80      	pop	{r7, pc}
 801d872:	bf00      	nop
 801d874:	2000df0c 	.word	0x2000df0c
 801d878:	08023da4 	.word	0x08023da4

0801d87c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801d87c:	b580      	push	{r7, lr}
 801d87e:	b084      	sub	sp, #16
 801d880:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801d882:	4b0f      	ldr	r3, [pc, #60]	@ (801d8c0 <Get_SerialNum+0x44>)
 801d884:	681b      	ldr	r3, [r3, #0]
 801d886:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801d888:	4b0e      	ldr	r3, [pc, #56]	@ (801d8c4 <Get_SerialNum+0x48>)
 801d88a:	681b      	ldr	r3, [r3, #0]
 801d88c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801d88e:	4b0e      	ldr	r3, [pc, #56]	@ (801d8c8 <Get_SerialNum+0x4c>)
 801d890:	681b      	ldr	r3, [r3, #0]
 801d892:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801d894:	68fa      	ldr	r2, [r7, #12]
 801d896:	687b      	ldr	r3, [r7, #4]
 801d898:	4413      	add	r3, r2
 801d89a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801d89c:	68fb      	ldr	r3, [r7, #12]
 801d89e:	2b00      	cmp	r3, #0
 801d8a0:	d009      	beq.n	801d8b6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801d8a2:	2208      	movs	r2, #8
 801d8a4:	4909      	ldr	r1, [pc, #36]	@ (801d8cc <Get_SerialNum+0x50>)
 801d8a6:	68f8      	ldr	r0, [r7, #12]
 801d8a8:	f000 f814 	bl	801d8d4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801d8ac:	2204      	movs	r2, #4
 801d8ae:	4908      	ldr	r1, [pc, #32]	@ (801d8d0 <Get_SerialNum+0x54>)
 801d8b0:	68b8      	ldr	r0, [r7, #8]
 801d8b2:	f000 f80f 	bl	801d8d4 <IntToUnicode>
  }
}
 801d8b6:	bf00      	nop
 801d8b8:	3710      	adds	r7, #16
 801d8ba:	46bd      	mov	sp, r7
 801d8bc:	bd80      	pop	{r7, pc}
 801d8be:	bf00      	nop
 801d8c0:	1fff7a10 	.word	0x1fff7a10
 801d8c4:	1fff7a14 	.word	0x1fff7a14
 801d8c8:	1fff7a18 	.word	0x1fff7a18
 801d8cc:	200000fa 	.word	0x200000fa
 801d8d0:	2000010a 	.word	0x2000010a

0801d8d4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801d8d4:	b480      	push	{r7}
 801d8d6:	b087      	sub	sp, #28
 801d8d8:	af00      	add	r7, sp, #0
 801d8da:	60f8      	str	r0, [r7, #12]
 801d8dc:	60b9      	str	r1, [r7, #8]
 801d8de:	4613      	mov	r3, r2
 801d8e0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801d8e2:	2300      	movs	r3, #0
 801d8e4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801d8e6:	2300      	movs	r3, #0
 801d8e8:	75fb      	strb	r3, [r7, #23]
 801d8ea:	e027      	b.n	801d93c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801d8ec:	68fb      	ldr	r3, [r7, #12]
 801d8ee:	0f1b      	lsrs	r3, r3, #28
 801d8f0:	2b09      	cmp	r3, #9
 801d8f2:	d80b      	bhi.n	801d90c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801d8f4:	68fb      	ldr	r3, [r7, #12]
 801d8f6:	0f1b      	lsrs	r3, r3, #28
 801d8f8:	b2da      	uxtb	r2, r3
 801d8fa:	7dfb      	ldrb	r3, [r7, #23]
 801d8fc:	005b      	lsls	r3, r3, #1
 801d8fe:	4619      	mov	r1, r3
 801d900:	68bb      	ldr	r3, [r7, #8]
 801d902:	440b      	add	r3, r1
 801d904:	3230      	adds	r2, #48	@ 0x30
 801d906:	b2d2      	uxtb	r2, r2
 801d908:	701a      	strb	r2, [r3, #0]
 801d90a:	e00a      	b.n	801d922 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801d90c:	68fb      	ldr	r3, [r7, #12]
 801d90e:	0f1b      	lsrs	r3, r3, #28
 801d910:	b2da      	uxtb	r2, r3
 801d912:	7dfb      	ldrb	r3, [r7, #23]
 801d914:	005b      	lsls	r3, r3, #1
 801d916:	4619      	mov	r1, r3
 801d918:	68bb      	ldr	r3, [r7, #8]
 801d91a:	440b      	add	r3, r1
 801d91c:	3237      	adds	r2, #55	@ 0x37
 801d91e:	b2d2      	uxtb	r2, r2
 801d920:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801d922:	68fb      	ldr	r3, [r7, #12]
 801d924:	011b      	lsls	r3, r3, #4
 801d926:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801d928:	7dfb      	ldrb	r3, [r7, #23]
 801d92a:	005b      	lsls	r3, r3, #1
 801d92c:	3301      	adds	r3, #1
 801d92e:	68ba      	ldr	r2, [r7, #8]
 801d930:	4413      	add	r3, r2
 801d932:	2200      	movs	r2, #0
 801d934:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801d936:	7dfb      	ldrb	r3, [r7, #23]
 801d938:	3301      	adds	r3, #1
 801d93a:	75fb      	strb	r3, [r7, #23]
 801d93c:	7dfa      	ldrb	r2, [r7, #23]
 801d93e:	79fb      	ldrb	r3, [r7, #7]
 801d940:	429a      	cmp	r2, r3
 801d942:	d3d3      	bcc.n	801d8ec <IntToUnicode+0x18>
  }
}
 801d944:	bf00      	nop
 801d946:	bf00      	nop
 801d948:	371c      	adds	r7, #28
 801d94a:	46bd      	mov	sp, r7
 801d94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d950:	4770      	bx	lr
	...

0801d954 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801d954:	b580      	push	{r7, lr}
 801d956:	b08a      	sub	sp, #40	@ 0x28
 801d958:	af00      	add	r7, sp, #0
 801d95a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801d95c:	f107 0314 	add.w	r3, r7, #20
 801d960:	2200      	movs	r2, #0
 801d962:	601a      	str	r2, [r3, #0]
 801d964:	605a      	str	r2, [r3, #4]
 801d966:	609a      	str	r2, [r3, #8]
 801d968:	60da      	str	r2, [r3, #12]
 801d96a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 801d96c:	687b      	ldr	r3, [r7, #4]
 801d96e:	681b      	ldr	r3, [r3, #0]
 801d970:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801d974:	d13a      	bne.n	801d9ec <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801d976:	2300      	movs	r3, #0
 801d978:	613b      	str	r3, [r7, #16]
 801d97a:	4b1e      	ldr	r3, [pc, #120]	@ (801d9f4 <HAL_PCD_MspInit+0xa0>)
 801d97c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d97e:	4a1d      	ldr	r2, [pc, #116]	@ (801d9f4 <HAL_PCD_MspInit+0xa0>)
 801d980:	f043 0301 	orr.w	r3, r3, #1
 801d984:	6313      	str	r3, [r2, #48]	@ 0x30
 801d986:	4b1b      	ldr	r3, [pc, #108]	@ (801d9f4 <HAL_PCD_MspInit+0xa0>)
 801d988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d98a:	f003 0301 	and.w	r3, r3, #1
 801d98e:	613b      	str	r3, [r7, #16]
 801d990:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801d992:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 801d996:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801d998:	2302      	movs	r3, #2
 801d99a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d99c:	2300      	movs	r3, #0
 801d99e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801d9a0:	2303      	movs	r3, #3
 801d9a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801d9a4:	230a      	movs	r3, #10
 801d9a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801d9a8:	f107 0314 	add.w	r3, r7, #20
 801d9ac:	4619      	mov	r1, r3
 801d9ae:	4812      	ldr	r0, [pc, #72]	@ (801d9f8 <HAL_PCD_MspInit+0xa4>)
 801d9b0:	f7e9 f90a 	bl	8006bc8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801d9b4:	4b0f      	ldr	r3, [pc, #60]	@ (801d9f4 <HAL_PCD_MspInit+0xa0>)
 801d9b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d9b8:	4a0e      	ldr	r2, [pc, #56]	@ (801d9f4 <HAL_PCD_MspInit+0xa0>)
 801d9ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801d9be:	6353      	str	r3, [r2, #52]	@ 0x34
 801d9c0:	2300      	movs	r3, #0
 801d9c2:	60fb      	str	r3, [r7, #12]
 801d9c4:	4b0b      	ldr	r3, [pc, #44]	@ (801d9f4 <HAL_PCD_MspInit+0xa0>)
 801d9c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801d9c8:	4a0a      	ldr	r2, [pc, #40]	@ (801d9f4 <HAL_PCD_MspInit+0xa0>)
 801d9ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 801d9ce:	6453      	str	r3, [r2, #68]	@ 0x44
 801d9d0:	4b08      	ldr	r3, [pc, #32]	@ (801d9f4 <HAL_PCD_MspInit+0xa0>)
 801d9d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801d9d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801d9d8:	60fb      	str	r3, [r7, #12]
 801d9da:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 801d9dc:	2200      	movs	r2, #0
 801d9de:	2106      	movs	r1, #6
 801d9e0:	2043      	movs	r0, #67	@ 0x43
 801d9e2:	f7e7 fa91 	bl	8004f08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801d9e6:	2043      	movs	r0, #67	@ 0x43
 801d9e8:	f7e7 faaa 	bl	8004f40 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801d9ec:	bf00      	nop
 801d9ee:	3728      	adds	r7, #40	@ 0x28
 801d9f0:	46bd      	mov	sp, r7
 801d9f2:	bd80      	pop	{r7, pc}
 801d9f4:	40023800 	.word	0x40023800
 801d9f8:	40020000 	.word	0x40020000

0801d9fc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d9fc:	b580      	push	{r7, lr}
 801d9fe:	b082      	sub	sp, #8
 801da00:	af00      	add	r7, sp, #0
 801da02:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801da04:	687b      	ldr	r3, [r7, #4]
 801da06:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 801da0a:	687b      	ldr	r3, [r7, #4]
 801da0c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 801da10:	4619      	mov	r1, r3
 801da12:	4610      	mov	r0, r2
 801da14:	f7f0 fc49 	bl	800e2aa <USBD_LL_SetupStage>
}
 801da18:	bf00      	nop
 801da1a:	3708      	adds	r7, #8
 801da1c:	46bd      	mov	sp, r7
 801da1e:	bd80      	pop	{r7, pc}

0801da20 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801da20:	b580      	push	{r7, lr}
 801da22:	b082      	sub	sp, #8
 801da24:	af00      	add	r7, sp, #0
 801da26:	6078      	str	r0, [r7, #4]
 801da28:	460b      	mov	r3, r1
 801da2a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801da2c:	687b      	ldr	r3, [r7, #4]
 801da2e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801da32:	78fa      	ldrb	r2, [r7, #3]
 801da34:	6879      	ldr	r1, [r7, #4]
 801da36:	4613      	mov	r3, r2
 801da38:	00db      	lsls	r3, r3, #3
 801da3a:	4413      	add	r3, r2
 801da3c:	009b      	lsls	r3, r3, #2
 801da3e:	440b      	add	r3, r1
 801da40:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801da44:	681a      	ldr	r2, [r3, #0]
 801da46:	78fb      	ldrb	r3, [r7, #3]
 801da48:	4619      	mov	r1, r3
 801da4a:	f7f0 fc83 	bl	800e354 <USBD_LL_DataOutStage>
}
 801da4e:	bf00      	nop
 801da50:	3708      	adds	r7, #8
 801da52:	46bd      	mov	sp, r7
 801da54:	bd80      	pop	{r7, pc}

0801da56 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801da56:	b580      	push	{r7, lr}
 801da58:	b082      	sub	sp, #8
 801da5a:	af00      	add	r7, sp, #0
 801da5c:	6078      	str	r0, [r7, #4]
 801da5e:	460b      	mov	r3, r1
 801da60:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801da62:	687b      	ldr	r3, [r7, #4]
 801da64:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801da68:	78fa      	ldrb	r2, [r7, #3]
 801da6a:	6879      	ldr	r1, [r7, #4]
 801da6c:	4613      	mov	r3, r2
 801da6e:	00db      	lsls	r3, r3, #3
 801da70:	4413      	add	r3, r2
 801da72:	009b      	lsls	r3, r3, #2
 801da74:	440b      	add	r3, r1
 801da76:	3320      	adds	r3, #32
 801da78:	681a      	ldr	r2, [r3, #0]
 801da7a:	78fb      	ldrb	r3, [r7, #3]
 801da7c:	4619      	mov	r1, r3
 801da7e:	f7f0 fd25 	bl	800e4cc <USBD_LL_DataInStage>
}
 801da82:	bf00      	nop
 801da84:	3708      	adds	r7, #8
 801da86:	46bd      	mov	sp, r7
 801da88:	bd80      	pop	{r7, pc}

0801da8a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801da8a:	b580      	push	{r7, lr}
 801da8c:	b082      	sub	sp, #8
 801da8e:	af00      	add	r7, sp, #0
 801da90:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801da92:	687b      	ldr	r3, [r7, #4]
 801da94:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801da98:	4618      	mov	r0, r3
 801da9a:	f7f0 fe69 	bl	800e770 <USBD_LL_SOF>
}
 801da9e:	bf00      	nop
 801daa0:	3708      	adds	r7, #8
 801daa2:	46bd      	mov	sp, r7
 801daa4:	bd80      	pop	{r7, pc}

0801daa6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801daa6:	b580      	push	{r7, lr}
 801daa8:	b084      	sub	sp, #16
 801daaa:	af00      	add	r7, sp, #0
 801daac:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801daae:	2301      	movs	r3, #1
 801dab0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801dab2:	687b      	ldr	r3, [r7, #4]
 801dab4:	79db      	ldrb	r3, [r3, #7]
 801dab6:	2b00      	cmp	r3, #0
 801dab8:	d102      	bne.n	801dac0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801daba:	2300      	movs	r3, #0
 801dabc:	73fb      	strb	r3, [r7, #15]
 801dabe:	e008      	b.n	801dad2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801dac0:	687b      	ldr	r3, [r7, #4]
 801dac2:	79db      	ldrb	r3, [r3, #7]
 801dac4:	2b02      	cmp	r3, #2
 801dac6:	d102      	bne.n	801dace <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801dac8:	2301      	movs	r3, #1
 801daca:	73fb      	strb	r3, [r7, #15]
 801dacc:	e001      	b.n	801dad2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801dace:	f7e4 fb33 	bl	8002138 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801dad2:	687b      	ldr	r3, [r7, #4]
 801dad4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801dad8:	7bfa      	ldrb	r2, [r7, #15]
 801dada:	4611      	mov	r1, r2
 801dadc:	4618      	mov	r0, r3
 801dade:	f7f0 fe03 	bl	800e6e8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801dae2:	687b      	ldr	r3, [r7, #4]
 801dae4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801dae8:	4618      	mov	r0, r3
 801daea:	f7f0 fdaa 	bl	800e642 <USBD_LL_Reset>
}
 801daee:	bf00      	nop
 801daf0:	3710      	adds	r7, #16
 801daf2:	46bd      	mov	sp, r7
 801daf4:	bd80      	pop	{r7, pc}
	...

0801daf8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801daf8:	b580      	push	{r7, lr}
 801dafa:	b082      	sub	sp, #8
 801dafc:	af00      	add	r7, sp, #0
 801dafe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801db00:	687b      	ldr	r3, [r7, #4]
 801db02:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801db06:	4618      	mov	r0, r3
 801db08:	f7f0 fdfe 	bl	800e708 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801db0c:	687b      	ldr	r3, [r7, #4]
 801db0e:	681b      	ldr	r3, [r3, #0]
 801db10:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801db14:	681b      	ldr	r3, [r3, #0]
 801db16:	687a      	ldr	r2, [r7, #4]
 801db18:	6812      	ldr	r2, [r2, #0]
 801db1a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801db1e:	f043 0301 	orr.w	r3, r3, #1
 801db22:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801db24:	687b      	ldr	r3, [r7, #4]
 801db26:	7adb      	ldrb	r3, [r3, #11]
 801db28:	2b00      	cmp	r3, #0
 801db2a:	d005      	beq.n	801db38 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801db2c:	4b04      	ldr	r3, [pc, #16]	@ (801db40 <HAL_PCD_SuspendCallback+0x48>)
 801db2e:	691b      	ldr	r3, [r3, #16]
 801db30:	4a03      	ldr	r2, [pc, #12]	@ (801db40 <HAL_PCD_SuspendCallback+0x48>)
 801db32:	f043 0306 	orr.w	r3, r3, #6
 801db36:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801db38:	bf00      	nop
 801db3a:	3708      	adds	r7, #8
 801db3c:	46bd      	mov	sp, r7
 801db3e:	bd80      	pop	{r7, pc}
 801db40:	e000ed00 	.word	0xe000ed00

0801db44 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801db44:	b580      	push	{r7, lr}
 801db46:	b082      	sub	sp, #8
 801db48:	af00      	add	r7, sp, #0
 801db4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801db4c:	687b      	ldr	r3, [r7, #4]
 801db4e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801db52:	4618      	mov	r0, r3
 801db54:	f7f0 fdf4 	bl	800e740 <USBD_LL_Resume>
}
 801db58:	bf00      	nop
 801db5a:	3708      	adds	r7, #8
 801db5c:	46bd      	mov	sp, r7
 801db5e:	bd80      	pop	{r7, pc}

0801db60 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801db60:	b580      	push	{r7, lr}
 801db62:	b082      	sub	sp, #8
 801db64:	af00      	add	r7, sp, #0
 801db66:	6078      	str	r0, [r7, #4]
 801db68:	460b      	mov	r3, r1
 801db6a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801db6c:	687b      	ldr	r3, [r7, #4]
 801db6e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801db72:	78fa      	ldrb	r2, [r7, #3]
 801db74:	4611      	mov	r1, r2
 801db76:	4618      	mov	r0, r3
 801db78:	f7f0 fe4c 	bl	800e814 <USBD_LL_IsoOUTIncomplete>
}
 801db7c:	bf00      	nop
 801db7e:	3708      	adds	r7, #8
 801db80:	46bd      	mov	sp, r7
 801db82:	bd80      	pop	{r7, pc}

0801db84 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801db84:	b580      	push	{r7, lr}
 801db86:	b082      	sub	sp, #8
 801db88:	af00      	add	r7, sp, #0
 801db8a:	6078      	str	r0, [r7, #4]
 801db8c:	460b      	mov	r3, r1
 801db8e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801db90:	687b      	ldr	r3, [r7, #4]
 801db92:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801db96:	78fa      	ldrb	r2, [r7, #3]
 801db98:	4611      	mov	r1, r2
 801db9a:	4618      	mov	r0, r3
 801db9c:	f7f0 fe08 	bl	800e7b0 <USBD_LL_IsoINIncomplete>
}
 801dba0:	bf00      	nop
 801dba2:	3708      	adds	r7, #8
 801dba4:	46bd      	mov	sp, r7
 801dba6:	bd80      	pop	{r7, pc}

0801dba8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801dba8:	b580      	push	{r7, lr}
 801dbaa:	b082      	sub	sp, #8
 801dbac:	af00      	add	r7, sp, #0
 801dbae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801dbb0:	687b      	ldr	r3, [r7, #4]
 801dbb2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801dbb6:	4618      	mov	r0, r3
 801dbb8:	f7f0 fe5e 	bl	800e878 <USBD_LL_DevConnected>
}
 801dbbc:	bf00      	nop
 801dbbe:	3708      	adds	r7, #8
 801dbc0:	46bd      	mov	sp, r7
 801dbc2:	bd80      	pop	{r7, pc}

0801dbc4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801dbc4:	b580      	push	{r7, lr}
 801dbc6:	b082      	sub	sp, #8
 801dbc8:	af00      	add	r7, sp, #0
 801dbca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801dbcc:	687b      	ldr	r3, [r7, #4]
 801dbce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801dbd2:	4618      	mov	r0, r3
 801dbd4:	f7f0 fe5b 	bl	800e88e <USBD_LL_DevDisconnected>
}
 801dbd8:	bf00      	nop
 801dbda:	3708      	adds	r7, #8
 801dbdc:	46bd      	mov	sp, r7
 801dbde:	bd80      	pop	{r7, pc}

0801dbe0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801dbe0:	b580      	push	{r7, lr}
 801dbe2:	b082      	sub	sp, #8
 801dbe4:	af00      	add	r7, sp, #0
 801dbe6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801dbe8:	687b      	ldr	r3, [r7, #4]
 801dbea:	781b      	ldrb	r3, [r3, #0]
 801dbec:	2b00      	cmp	r3, #0
 801dbee:	d13c      	bne.n	801dc6a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801dbf0:	4a20      	ldr	r2, [pc, #128]	@ (801dc74 <USBD_LL_Init+0x94>)
 801dbf2:	687b      	ldr	r3, [r7, #4]
 801dbf4:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 801dbf8:	687b      	ldr	r3, [r7, #4]
 801dbfa:	4a1e      	ldr	r2, [pc, #120]	@ (801dc74 <USBD_LL_Init+0x94>)
 801dbfc:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801dc00:	4b1c      	ldr	r3, [pc, #112]	@ (801dc74 <USBD_LL_Init+0x94>)
 801dc02:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 801dc06:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 801dc08:	4b1a      	ldr	r3, [pc, #104]	@ (801dc74 <USBD_LL_Init+0x94>)
 801dc0a:	2204      	movs	r2, #4
 801dc0c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801dc0e:	4b19      	ldr	r3, [pc, #100]	@ (801dc74 <USBD_LL_Init+0x94>)
 801dc10:	2202      	movs	r2, #2
 801dc12:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801dc14:	4b17      	ldr	r3, [pc, #92]	@ (801dc74 <USBD_LL_Init+0x94>)
 801dc16:	2200      	movs	r2, #0
 801dc18:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801dc1a:	4b16      	ldr	r3, [pc, #88]	@ (801dc74 <USBD_LL_Init+0x94>)
 801dc1c:	2202      	movs	r2, #2
 801dc1e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801dc20:	4b14      	ldr	r3, [pc, #80]	@ (801dc74 <USBD_LL_Init+0x94>)
 801dc22:	2200      	movs	r2, #0
 801dc24:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801dc26:	4b13      	ldr	r3, [pc, #76]	@ (801dc74 <USBD_LL_Init+0x94>)
 801dc28:	2200      	movs	r2, #0
 801dc2a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801dc2c:	4b11      	ldr	r3, [pc, #68]	@ (801dc74 <USBD_LL_Init+0x94>)
 801dc2e:	2200      	movs	r2, #0
 801dc30:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801dc32:	4b10      	ldr	r3, [pc, #64]	@ (801dc74 <USBD_LL_Init+0x94>)
 801dc34:	2200      	movs	r2, #0
 801dc36:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801dc38:	4b0e      	ldr	r3, [pc, #56]	@ (801dc74 <USBD_LL_Init+0x94>)
 801dc3a:	2200      	movs	r2, #0
 801dc3c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801dc3e:	480d      	ldr	r0, [pc, #52]	@ (801dc74 <USBD_LL_Init+0x94>)
 801dc40:	f7e9 f977 	bl	8006f32 <HAL_PCD_Init>
 801dc44:	4603      	mov	r3, r0
 801dc46:	2b00      	cmp	r3, #0
 801dc48:	d001      	beq.n	801dc4e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801dc4a:	f7e4 fa75 	bl	8002138 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801dc4e:	2180      	movs	r1, #128	@ 0x80
 801dc50:	4808      	ldr	r0, [pc, #32]	@ (801dc74 <USBD_LL_Init+0x94>)
 801dc52:	f7ea fba4 	bl	800839e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801dc56:	2240      	movs	r2, #64	@ 0x40
 801dc58:	2100      	movs	r1, #0
 801dc5a:	4806      	ldr	r0, [pc, #24]	@ (801dc74 <USBD_LL_Init+0x94>)
 801dc5c:	f7ea fb58 	bl	8008310 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801dc60:	2280      	movs	r2, #128	@ 0x80
 801dc62:	2101      	movs	r1, #1
 801dc64:	4803      	ldr	r0, [pc, #12]	@ (801dc74 <USBD_LL_Init+0x94>)
 801dc66:	f7ea fb53 	bl	8008310 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801dc6a:	2300      	movs	r3, #0
}
 801dc6c:	4618      	mov	r0, r3
 801dc6e:	3708      	adds	r7, #8
 801dc70:	46bd      	mov	sp, r7
 801dc72:	bd80      	pop	{r7, pc}
 801dc74:	2000e10c 	.word	0x2000e10c

0801dc78 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801dc78:	b580      	push	{r7, lr}
 801dc7a:	b084      	sub	sp, #16
 801dc7c:	af00      	add	r7, sp, #0
 801dc7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801dc80:	2300      	movs	r3, #0
 801dc82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801dc84:	2300      	movs	r3, #0
 801dc86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801dc88:	687b      	ldr	r3, [r7, #4]
 801dc8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801dc8e:	4618      	mov	r0, r3
 801dc90:	f7e9 fa5e 	bl	8007150 <HAL_PCD_Start>
 801dc94:	4603      	mov	r3, r0
 801dc96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801dc98:	7bfb      	ldrb	r3, [r7, #15]
 801dc9a:	4618      	mov	r0, r3
 801dc9c:	f000 f942 	bl	801df24 <USBD_Get_USB_Status>
 801dca0:	4603      	mov	r3, r0
 801dca2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801dca4:	7bbb      	ldrb	r3, [r7, #14]
}
 801dca6:	4618      	mov	r0, r3
 801dca8:	3710      	adds	r7, #16
 801dcaa:	46bd      	mov	sp, r7
 801dcac:	bd80      	pop	{r7, pc}

0801dcae <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801dcae:	b580      	push	{r7, lr}
 801dcb0:	b084      	sub	sp, #16
 801dcb2:	af00      	add	r7, sp, #0
 801dcb4:	6078      	str	r0, [r7, #4]
 801dcb6:	4608      	mov	r0, r1
 801dcb8:	4611      	mov	r1, r2
 801dcba:	461a      	mov	r2, r3
 801dcbc:	4603      	mov	r3, r0
 801dcbe:	70fb      	strb	r3, [r7, #3]
 801dcc0:	460b      	mov	r3, r1
 801dcc2:	70bb      	strb	r3, [r7, #2]
 801dcc4:	4613      	mov	r3, r2
 801dcc6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801dcc8:	2300      	movs	r3, #0
 801dcca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801dccc:	2300      	movs	r3, #0
 801dcce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801dcd0:	687b      	ldr	r3, [r7, #4]
 801dcd2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801dcd6:	78bb      	ldrb	r3, [r7, #2]
 801dcd8:	883a      	ldrh	r2, [r7, #0]
 801dcda:	78f9      	ldrb	r1, [r7, #3]
 801dcdc:	f7e9 ff32 	bl	8007b44 <HAL_PCD_EP_Open>
 801dce0:	4603      	mov	r3, r0
 801dce2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801dce4:	7bfb      	ldrb	r3, [r7, #15]
 801dce6:	4618      	mov	r0, r3
 801dce8:	f000 f91c 	bl	801df24 <USBD_Get_USB_Status>
 801dcec:	4603      	mov	r3, r0
 801dcee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801dcf0:	7bbb      	ldrb	r3, [r7, #14]
}
 801dcf2:	4618      	mov	r0, r3
 801dcf4:	3710      	adds	r7, #16
 801dcf6:	46bd      	mov	sp, r7
 801dcf8:	bd80      	pop	{r7, pc}

0801dcfa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801dcfa:	b580      	push	{r7, lr}
 801dcfc:	b084      	sub	sp, #16
 801dcfe:	af00      	add	r7, sp, #0
 801dd00:	6078      	str	r0, [r7, #4]
 801dd02:	460b      	mov	r3, r1
 801dd04:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801dd06:	2300      	movs	r3, #0
 801dd08:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801dd0a:	2300      	movs	r3, #0
 801dd0c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801dd0e:	687b      	ldr	r3, [r7, #4]
 801dd10:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801dd14:	78fa      	ldrb	r2, [r7, #3]
 801dd16:	4611      	mov	r1, r2
 801dd18:	4618      	mov	r0, r3
 801dd1a:	f7e9 ff7d 	bl	8007c18 <HAL_PCD_EP_Close>
 801dd1e:	4603      	mov	r3, r0
 801dd20:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801dd22:	7bfb      	ldrb	r3, [r7, #15]
 801dd24:	4618      	mov	r0, r3
 801dd26:	f000 f8fd 	bl	801df24 <USBD_Get_USB_Status>
 801dd2a:	4603      	mov	r3, r0
 801dd2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801dd2e:	7bbb      	ldrb	r3, [r7, #14]
}
 801dd30:	4618      	mov	r0, r3
 801dd32:	3710      	adds	r7, #16
 801dd34:	46bd      	mov	sp, r7
 801dd36:	bd80      	pop	{r7, pc}

0801dd38 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801dd38:	b580      	push	{r7, lr}
 801dd3a:	b084      	sub	sp, #16
 801dd3c:	af00      	add	r7, sp, #0
 801dd3e:	6078      	str	r0, [r7, #4]
 801dd40:	460b      	mov	r3, r1
 801dd42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801dd44:	2300      	movs	r3, #0
 801dd46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801dd48:	2300      	movs	r3, #0
 801dd4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801dd4c:	687b      	ldr	r3, [r7, #4]
 801dd4e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801dd52:	78fa      	ldrb	r2, [r7, #3]
 801dd54:	4611      	mov	r1, r2
 801dd56:	4618      	mov	r0, r3
 801dd58:	f7ea f835 	bl	8007dc6 <HAL_PCD_EP_SetStall>
 801dd5c:	4603      	mov	r3, r0
 801dd5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801dd60:	7bfb      	ldrb	r3, [r7, #15]
 801dd62:	4618      	mov	r0, r3
 801dd64:	f000 f8de 	bl	801df24 <USBD_Get_USB_Status>
 801dd68:	4603      	mov	r3, r0
 801dd6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801dd6c:	7bbb      	ldrb	r3, [r7, #14]
}
 801dd6e:	4618      	mov	r0, r3
 801dd70:	3710      	adds	r7, #16
 801dd72:	46bd      	mov	sp, r7
 801dd74:	bd80      	pop	{r7, pc}

0801dd76 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801dd76:	b580      	push	{r7, lr}
 801dd78:	b084      	sub	sp, #16
 801dd7a:	af00      	add	r7, sp, #0
 801dd7c:	6078      	str	r0, [r7, #4]
 801dd7e:	460b      	mov	r3, r1
 801dd80:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801dd82:	2300      	movs	r3, #0
 801dd84:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801dd86:	2300      	movs	r3, #0
 801dd88:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801dd8a:	687b      	ldr	r3, [r7, #4]
 801dd8c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801dd90:	78fa      	ldrb	r2, [r7, #3]
 801dd92:	4611      	mov	r1, r2
 801dd94:	4618      	mov	r0, r3
 801dd96:	f7ea f879 	bl	8007e8c <HAL_PCD_EP_ClrStall>
 801dd9a:	4603      	mov	r3, r0
 801dd9c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801dd9e:	7bfb      	ldrb	r3, [r7, #15]
 801dda0:	4618      	mov	r0, r3
 801dda2:	f000 f8bf 	bl	801df24 <USBD_Get_USB_Status>
 801dda6:	4603      	mov	r3, r0
 801dda8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ddaa:	7bbb      	ldrb	r3, [r7, #14]
}
 801ddac:	4618      	mov	r0, r3
 801ddae:	3710      	adds	r7, #16
 801ddb0:	46bd      	mov	sp, r7
 801ddb2:	bd80      	pop	{r7, pc}

0801ddb4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ddb4:	b480      	push	{r7}
 801ddb6:	b085      	sub	sp, #20
 801ddb8:	af00      	add	r7, sp, #0
 801ddba:	6078      	str	r0, [r7, #4]
 801ddbc:	460b      	mov	r3, r1
 801ddbe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801ddc0:	687b      	ldr	r3, [r7, #4]
 801ddc2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801ddc6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801ddc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801ddcc:	2b00      	cmp	r3, #0
 801ddce:	da0b      	bge.n	801dde8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801ddd0:	78fb      	ldrb	r3, [r7, #3]
 801ddd2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801ddd6:	68f9      	ldr	r1, [r7, #12]
 801ddd8:	4613      	mov	r3, r2
 801ddda:	00db      	lsls	r3, r3, #3
 801dddc:	4413      	add	r3, r2
 801ddde:	009b      	lsls	r3, r3, #2
 801dde0:	440b      	add	r3, r1
 801dde2:	3316      	adds	r3, #22
 801dde4:	781b      	ldrb	r3, [r3, #0]
 801dde6:	e00b      	b.n	801de00 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801dde8:	78fb      	ldrb	r3, [r7, #3]
 801ddea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801ddee:	68f9      	ldr	r1, [r7, #12]
 801ddf0:	4613      	mov	r3, r2
 801ddf2:	00db      	lsls	r3, r3, #3
 801ddf4:	4413      	add	r3, r2
 801ddf6:	009b      	lsls	r3, r3, #2
 801ddf8:	440b      	add	r3, r1
 801ddfa:	f203 2356 	addw	r3, r3, #598	@ 0x256
 801ddfe:	781b      	ldrb	r3, [r3, #0]
  }
}
 801de00:	4618      	mov	r0, r3
 801de02:	3714      	adds	r7, #20
 801de04:	46bd      	mov	sp, r7
 801de06:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de0a:	4770      	bx	lr

0801de0c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801de0c:	b580      	push	{r7, lr}
 801de0e:	b084      	sub	sp, #16
 801de10:	af00      	add	r7, sp, #0
 801de12:	6078      	str	r0, [r7, #4]
 801de14:	460b      	mov	r3, r1
 801de16:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801de18:	2300      	movs	r3, #0
 801de1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801de1c:	2300      	movs	r3, #0
 801de1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801de20:	687b      	ldr	r3, [r7, #4]
 801de22:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801de26:	78fa      	ldrb	r2, [r7, #3]
 801de28:	4611      	mov	r1, r2
 801de2a:	4618      	mov	r0, r3
 801de2c:	f7e9 fe66 	bl	8007afc <HAL_PCD_SetAddress>
 801de30:	4603      	mov	r3, r0
 801de32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801de34:	7bfb      	ldrb	r3, [r7, #15]
 801de36:	4618      	mov	r0, r3
 801de38:	f000 f874 	bl	801df24 <USBD_Get_USB_Status>
 801de3c:	4603      	mov	r3, r0
 801de3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801de40:	7bbb      	ldrb	r3, [r7, #14]
}
 801de42:	4618      	mov	r0, r3
 801de44:	3710      	adds	r7, #16
 801de46:	46bd      	mov	sp, r7
 801de48:	bd80      	pop	{r7, pc}

0801de4a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801de4a:	b580      	push	{r7, lr}
 801de4c:	b086      	sub	sp, #24
 801de4e:	af00      	add	r7, sp, #0
 801de50:	60f8      	str	r0, [r7, #12]
 801de52:	607a      	str	r2, [r7, #4]
 801de54:	603b      	str	r3, [r7, #0]
 801de56:	460b      	mov	r3, r1
 801de58:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801de5a:	2300      	movs	r3, #0
 801de5c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801de5e:	2300      	movs	r3, #0
 801de60:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801de62:	68fb      	ldr	r3, [r7, #12]
 801de64:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801de68:	7af9      	ldrb	r1, [r7, #11]
 801de6a:	683b      	ldr	r3, [r7, #0]
 801de6c:	687a      	ldr	r2, [r7, #4]
 801de6e:	f7e9 ff70 	bl	8007d52 <HAL_PCD_EP_Transmit>
 801de72:	4603      	mov	r3, r0
 801de74:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801de76:	7dfb      	ldrb	r3, [r7, #23]
 801de78:	4618      	mov	r0, r3
 801de7a:	f000 f853 	bl	801df24 <USBD_Get_USB_Status>
 801de7e:	4603      	mov	r3, r0
 801de80:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801de82:	7dbb      	ldrb	r3, [r7, #22]
}
 801de84:	4618      	mov	r0, r3
 801de86:	3718      	adds	r7, #24
 801de88:	46bd      	mov	sp, r7
 801de8a:	bd80      	pop	{r7, pc}

0801de8c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801de8c:	b580      	push	{r7, lr}
 801de8e:	b086      	sub	sp, #24
 801de90:	af00      	add	r7, sp, #0
 801de92:	60f8      	str	r0, [r7, #12]
 801de94:	607a      	str	r2, [r7, #4]
 801de96:	603b      	str	r3, [r7, #0]
 801de98:	460b      	mov	r3, r1
 801de9a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801de9c:	2300      	movs	r3, #0
 801de9e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801dea0:	2300      	movs	r3, #0
 801dea2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801dea4:	68fb      	ldr	r3, [r7, #12]
 801dea6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801deaa:	7af9      	ldrb	r1, [r7, #11]
 801deac:	683b      	ldr	r3, [r7, #0]
 801deae:	687a      	ldr	r2, [r7, #4]
 801deb0:	f7e9 fefc 	bl	8007cac <HAL_PCD_EP_Receive>
 801deb4:	4603      	mov	r3, r0
 801deb6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801deb8:	7dfb      	ldrb	r3, [r7, #23]
 801deba:	4618      	mov	r0, r3
 801debc:	f000 f832 	bl	801df24 <USBD_Get_USB_Status>
 801dec0:	4603      	mov	r3, r0
 801dec2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801dec4:	7dbb      	ldrb	r3, [r7, #22]
}
 801dec6:	4618      	mov	r0, r3
 801dec8:	3718      	adds	r7, #24
 801deca:	46bd      	mov	sp, r7
 801decc:	bd80      	pop	{r7, pc}

0801dece <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801dece:	b580      	push	{r7, lr}
 801ded0:	b082      	sub	sp, #8
 801ded2:	af00      	add	r7, sp, #0
 801ded4:	6078      	str	r0, [r7, #4]
 801ded6:	460b      	mov	r3, r1
 801ded8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801deda:	687b      	ldr	r3, [r7, #4]
 801dedc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801dee0:	78fa      	ldrb	r2, [r7, #3]
 801dee2:	4611      	mov	r1, r2
 801dee4:	4618      	mov	r0, r3
 801dee6:	f7e9 ff1c 	bl	8007d22 <HAL_PCD_EP_GetRxCount>
 801deea:	4603      	mov	r3, r0
}
 801deec:	4618      	mov	r0, r3
 801deee:	3708      	adds	r7, #8
 801def0:	46bd      	mov	sp, r7
 801def2:	bd80      	pop	{r7, pc}

0801def4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801def4:	b480      	push	{r7}
 801def6:	b083      	sub	sp, #12
 801def8:	af00      	add	r7, sp, #0
 801defa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801defc:	4b03      	ldr	r3, [pc, #12]	@ (801df0c <USBD_static_malloc+0x18>)
}
 801defe:	4618      	mov	r0, r3
 801df00:	370c      	adds	r7, #12
 801df02:	46bd      	mov	sp, r7
 801df04:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df08:	4770      	bx	lr
 801df0a:	bf00      	nop
 801df0c:	2000e5f0 	.word	0x2000e5f0

0801df10 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801df10:	b480      	push	{r7}
 801df12:	b083      	sub	sp, #12
 801df14:	af00      	add	r7, sp, #0
 801df16:	6078      	str	r0, [r7, #4]

}
 801df18:	bf00      	nop
 801df1a:	370c      	adds	r7, #12
 801df1c:	46bd      	mov	sp, r7
 801df1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df22:	4770      	bx	lr

0801df24 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801df24:	b480      	push	{r7}
 801df26:	b085      	sub	sp, #20
 801df28:	af00      	add	r7, sp, #0
 801df2a:	4603      	mov	r3, r0
 801df2c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801df2e:	2300      	movs	r3, #0
 801df30:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801df32:	79fb      	ldrb	r3, [r7, #7]
 801df34:	2b03      	cmp	r3, #3
 801df36:	d817      	bhi.n	801df68 <USBD_Get_USB_Status+0x44>
 801df38:	a201      	add	r2, pc, #4	@ (adr r2, 801df40 <USBD_Get_USB_Status+0x1c>)
 801df3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801df3e:	bf00      	nop
 801df40:	0801df51 	.word	0x0801df51
 801df44:	0801df57 	.word	0x0801df57
 801df48:	0801df5d 	.word	0x0801df5d
 801df4c:	0801df63 	.word	0x0801df63
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801df50:	2300      	movs	r3, #0
 801df52:	73fb      	strb	r3, [r7, #15]
    break;
 801df54:	e00b      	b.n	801df6e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801df56:	2303      	movs	r3, #3
 801df58:	73fb      	strb	r3, [r7, #15]
    break;
 801df5a:	e008      	b.n	801df6e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801df5c:	2301      	movs	r3, #1
 801df5e:	73fb      	strb	r3, [r7, #15]
    break;
 801df60:	e005      	b.n	801df6e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801df62:	2303      	movs	r3, #3
 801df64:	73fb      	strb	r3, [r7, #15]
    break;
 801df66:	e002      	b.n	801df6e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801df68:	2303      	movs	r3, #3
 801df6a:	73fb      	strb	r3, [r7, #15]
    break;
 801df6c:	bf00      	nop
  }
  return usb_status;
 801df6e:	7bfb      	ldrb	r3, [r7, #15]
}
 801df70:	4618      	mov	r0, r3
 801df72:	3714      	adds	r7, #20
 801df74:	46bd      	mov	sp, r7
 801df76:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df7a:	4770      	bx	lr

0801df7c <atoi>:
 801df7c:	220a      	movs	r2, #10
 801df7e:	2100      	movs	r1, #0
 801df80:	f000 b8b8 	b.w	801e0f4 <strtol>

0801df84 <rand>:
 801df84:	4b16      	ldr	r3, [pc, #88]	@ (801dfe0 <rand+0x5c>)
 801df86:	b510      	push	{r4, lr}
 801df88:	681c      	ldr	r4, [r3, #0]
 801df8a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801df8c:	b9b3      	cbnz	r3, 801dfbc <rand+0x38>
 801df8e:	2018      	movs	r0, #24
 801df90:	f000 fba6 	bl	801e6e0 <malloc>
 801df94:	4602      	mov	r2, r0
 801df96:	6320      	str	r0, [r4, #48]	@ 0x30
 801df98:	b920      	cbnz	r0, 801dfa4 <rand+0x20>
 801df9a:	4b12      	ldr	r3, [pc, #72]	@ (801dfe4 <rand+0x60>)
 801df9c:	4812      	ldr	r0, [pc, #72]	@ (801dfe8 <rand+0x64>)
 801df9e:	2152      	movs	r1, #82	@ 0x52
 801dfa0:	f000 fb36 	bl	801e610 <__assert_func>
 801dfa4:	4911      	ldr	r1, [pc, #68]	@ (801dfec <rand+0x68>)
 801dfa6:	4b12      	ldr	r3, [pc, #72]	@ (801dff0 <rand+0x6c>)
 801dfa8:	e9c0 1300 	strd	r1, r3, [r0]
 801dfac:	4b11      	ldr	r3, [pc, #68]	@ (801dff4 <rand+0x70>)
 801dfae:	6083      	str	r3, [r0, #8]
 801dfb0:	230b      	movs	r3, #11
 801dfb2:	8183      	strh	r3, [r0, #12]
 801dfb4:	2100      	movs	r1, #0
 801dfb6:	2001      	movs	r0, #1
 801dfb8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801dfbc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801dfbe:	480e      	ldr	r0, [pc, #56]	@ (801dff8 <rand+0x74>)
 801dfc0:	690b      	ldr	r3, [r1, #16]
 801dfc2:	694c      	ldr	r4, [r1, #20]
 801dfc4:	4a0d      	ldr	r2, [pc, #52]	@ (801dffc <rand+0x78>)
 801dfc6:	4358      	muls	r0, r3
 801dfc8:	fb02 0004 	mla	r0, r2, r4, r0
 801dfcc:	fba3 3202 	umull	r3, r2, r3, r2
 801dfd0:	3301      	adds	r3, #1
 801dfd2:	eb40 0002 	adc.w	r0, r0, r2
 801dfd6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801dfda:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801dfde:	bd10      	pop	{r4, pc}
 801dfe0:	20000120 	.word	0x20000120
 801dfe4:	08023f0c 	.word	0x08023f0c
 801dfe8:	08023f23 	.word	0x08023f23
 801dfec:	abcd330e 	.word	0xabcd330e
 801dff0:	e66d1234 	.word	0xe66d1234
 801dff4:	0005deec 	.word	0x0005deec
 801dff8:	5851f42d 	.word	0x5851f42d
 801dffc:	4c957f2d 	.word	0x4c957f2d

0801e000 <_strtol_l.isra.0>:
 801e000:	2b24      	cmp	r3, #36	@ 0x24
 801e002:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e006:	4686      	mov	lr, r0
 801e008:	4690      	mov	r8, r2
 801e00a:	d801      	bhi.n	801e010 <_strtol_l.isra.0+0x10>
 801e00c:	2b01      	cmp	r3, #1
 801e00e:	d106      	bne.n	801e01e <_strtol_l.isra.0+0x1e>
 801e010:	f000 faba 	bl	801e588 <__errno>
 801e014:	2316      	movs	r3, #22
 801e016:	6003      	str	r3, [r0, #0]
 801e018:	2000      	movs	r0, #0
 801e01a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e01e:	4834      	ldr	r0, [pc, #208]	@ (801e0f0 <_strtol_l.isra.0+0xf0>)
 801e020:	460d      	mov	r5, r1
 801e022:	462a      	mov	r2, r5
 801e024:	f815 4b01 	ldrb.w	r4, [r5], #1
 801e028:	5d06      	ldrb	r6, [r0, r4]
 801e02a:	f016 0608 	ands.w	r6, r6, #8
 801e02e:	d1f8      	bne.n	801e022 <_strtol_l.isra.0+0x22>
 801e030:	2c2d      	cmp	r4, #45	@ 0x2d
 801e032:	d110      	bne.n	801e056 <_strtol_l.isra.0+0x56>
 801e034:	782c      	ldrb	r4, [r5, #0]
 801e036:	2601      	movs	r6, #1
 801e038:	1c95      	adds	r5, r2, #2
 801e03a:	f033 0210 	bics.w	r2, r3, #16
 801e03e:	d115      	bne.n	801e06c <_strtol_l.isra.0+0x6c>
 801e040:	2c30      	cmp	r4, #48	@ 0x30
 801e042:	d10d      	bne.n	801e060 <_strtol_l.isra.0+0x60>
 801e044:	782a      	ldrb	r2, [r5, #0]
 801e046:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801e04a:	2a58      	cmp	r2, #88	@ 0x58
 801e04c:	d108      	bne.n	801e060 <_strtol_l.isra.0+0x60>
 801e04e:	786c      	ldrb	r4, [r5, #1]
 801e050:	3502      	adds	r5, #2
 801e052:	2310      	movs	r3, #16
 801e054:	e00a      	b.n	801e06c <_strtol_l.isra.0+0x6c>
 801e056:	2c2b      	cmp	r4, #43	@ 0x2b
 801e058:	bf04      	itt	eq
 801e05a:	782c      	ldrbeq	r4, [r5, #0]
 801e05c:	1c95      	addeq	r5, r2, #2
 801e05e:	e7ec      	b.n	801e03a <_strtol_l.isra.0+0x3a>
 801e060:	2b00      	cmp	r3, #0
 801e062:	d1f6      	bne.n	801e052 <_strtol_l.isra.0+0x52>
 801e064:	2c30      	cmp	r4, #48	@ 0x30
 801e066:	bf14      	ite	ne
 801e068:	230a      	movne	r3, #10
 801e06a:	2308      	moveq	r3, #8
 801e06c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801e070:	f10c 3cff 	add.w	ip, ip, #4294967295
 801e074:	2200      	movs	r2, #0
 801e076:	fbbc f9f3 	udiv	r9, ip, r3
 801e07a:	4610      	mov	r0, r2
 801e07c:	fb03 ca19 	mls	sl, r3, r9, ip
 801e080:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801e084:	2f09      	cmp	r7, #9
 801e086:	d80f      	bhi.n	801e0a8 <_strtol_l.isra.0+0xa8>
 801e088:	463c      	mov	r4, r7
 801e08a:	42a3      	cmp	r3, r4
 801e08c:	dd1b      	ble.n	801e0c6 <_strtol_l.isra.0+0xc6>
 801e08e:	1c57      	adds	r7, r2, #1
 801e090:	d007      	beq.n	801e0a2 <_strtol_l.isra.0+0xa2>
 801e092:	4581      	cmp	r9, r0
 801e094:	d314      	bcc.n	801e0c0 <_strtol_l.isra.0+0xc0>
 801e096:	d101      	bne.n	801e09c <_strtol_l.isra.0+0x9c>
 801e098:	45a2      	cmp	sl, r4
 801e09a:	db11      	blt.n	801e0c0 <_strtol_l.isra.0+0xc0>
 801e09c:	fb00 4003 	mla	r0, r0, r3, r4
 801e0a0:	2201      	movs	r2, #1
 801e0a2:	f815 4b01 	ldrb.w	r4, [r5], #1
 801e0a6:	e7eb      	b.n	801e080 <_strtol_l.isra.0+0x80>
 801e0a8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801e0ac:	2f19      	cmp	r7, #25
 801e0ae:	d801      	bhi.n	801e0b4 <_strtol_l.isra.0+0xb4>
 801e0b0:	3c37      	subs	r4, #55	@ 0x37
 801e0b2:	e7ea      	b.n	801e08a <_strtol_l.isra.0+0x8a>
 801e0b4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801e0b8:	2f19      	cmp	r7, #25
 801e0ba:	d804      	bhi.n	801e0c6 <_strtol_l.isra.0+0xc6>
 801e0bc:	3c57      	subs	r4, #87	@ 0x57
 801e0be:	e7e4      	b.n	801e08a <_strtol_l.isra.0+0x8a>
 801e0c0:	f04f 32ff 	mov.w	r2, #4294967295
 801e0c4:	e7ed      	b.n	801e0a2 <_strtol_l.isra.0+0xa2>
 801e0c6:	1c53      	adds	r3, r2, #1
 801e0c8:	d108      	bne.n	801e0dc <_strtol_l.isra.0+0xdc>
 801e0ca:	2322      	movs	r3, #34	@ 0x22
 801e0cc:	f8ce 3000 	str.w	r3, [lr]
 801e0d0:	4660      	mov	r0, ip
 801e0d2:	f1b8 0f00 	cmp.w	r8, #0
 801e0d6:	d0a0      	beq.n	801e01a <_strtol_l.isra.0+0x1a>
 801e0d8:	1e69      	subs	r1, r5, #1
 801e0da:	e006      	b.n	801e0ea <_strtol_l.isra.0+0xea>
 801e0dc:	b106      	cbz	r6, 801e0e0 <_strtol_l.isra.0+0xe0>
 801e0de:	4240      	negs	r0, r0
 801e0e0:	f1b8 0f00 	cmp.w	r8, #0
 801e0e4:	d099      	beq.n	801e01a <_strtol_l.isra.0+0x1a>
 801e0e6:	2a00      	cmp	r2, #0
 801e0e8:	d1f6      	bne.n	801e0d8 <_strtol_l.isra.0+0xd8>
 801e0ea:	f8c8 1000 	str.w	r1, [r8]
 801e0ee:	e794      	b.n	801e01a <_strtol_l.isra.0+0x1a>
 801e0f0:	08023feb 	.word	0x08023feb

0801e0f4 <strtol>:
 801e0f4:	4613      	mov	r3, r2
 801e0f6:	460a      	mov	r2, r1
 801e0f8:	4601      	mov	r1, r0
 801e0fa:	4802      	ldr	r0, [pc, #8]	@ (801e104 <strtol+0x10>)
 801e0fc:	6800      	ldr	r0, [r0, #0]
 801e0fe:	f7ff bf7f 	b.w	801e000 <_strtol_l.isra.0>
 801e102:	bf00      	nop
 801e104:	20000120 	.word	0x20000120

0801e108 <std>:
 801e108:	2300      	movs	r3, #0
 801e10a:	b510      	push	{r4, lr}
 801e10c:	4604      	mov	r4, r0
 801e10e:	e9c0 3300 	strd	r3, r3, [r0]
 801e112:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801e116:	6083      	str	r3, [r0, #8]
 801e118:	8181      	strh	r1, [r0, #12]
 801e11a:	6643      	str	r3, [r0, #100]	@ 0x64
 801e11c:	81c2      	strh	r2, [r0, #14]
 801e11e:	6183      	str	r3, [r0, #24]
 801e120:	4619      	mov	r1, r3
 801e122:	2208      	movs	r2, #8
 801e124:	305c      	adds	r0, #92	@ 0x5c
 801e126:	f000 f966 	bl	801e3f6 <memset>
 801e12a:	4b0d      	ldr	r3, [pc, #52]	@ (801e160 <std+0x58>)
 801e12c:	6263      	str	r3, [r4, #36]	@ 0x24
 801e12e:	4b0d      	ldr	r3, [pc, #52]	@ (801e164 <std+0x5c>)
 801e130:	62a3      	str	r3, [r4, #40]	@ 0x28
 801e132:	4b0d      	ldr	r3, [pc, #52]	@ (801e168 <std+0x60>)
 801e134:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801e136:	4b0d      	ldr	r3, [pc, #52]	@ (801e16c <std+0x64>)
 801e138:	6323      	str	r3, [r4, #48]	@ 0x30
 801e13a:	4b0d      	ldr	r3, [pc, #52]	@ (801e170 <std+0x68>)
 801e13c:	6224      	str	r4, [r4, #32]
 801e13e:	429c      	cmp	r4, r3
 801e140:	d006      	beq.n	801e150 <std+0x48>
 801e142:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801e146:	4294      	cmp	r4, r2
 801e148:	d002      	beq.n	801e150 <std+0x48>
 801e14a:	33d0      	adds	r3, #208	@ 0xd0
 801e14c:	429c      	cmp	r4, r3
 801e14e:	d105      	bne.n	801e15c <std+0x54>
 801e150:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801e154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e158:	f000 ba40 	b.w	801e5dc <__retarget_lock_init_recursive>
 801e15c:	bd10      	pop	{r4, pc}
 801e15e:	bf00      	nop
 801e160:	0801e31d 	.word	0x0801e31d
 801e164:	0801e33f 	.word	0x0801e33f
 801e168:	0801e377 	.word	0x0801e377
 801e16c:	0801e39b 	.word	0x0801e39b
 801e170:	2000e810 	.word	0x2000e810

0801e174 <stdio_exit_handler>:
 801e174:	4a02      	ldr	r2, [pc, #8]	@ (801e180 <stdio_exit_handler+0xc>)
 801e176:	4903      	ldr	r1, [pc, #12]	@ (801e184 <stdio_exit_handler+0x10>)
 801e178:	4803      	ldr	r0, [pc, #12]	@ (801e188 <stdio_exit_handler+0x14>)
 801e17a:	f000 b869 	b.w	801e250 <_fwalk_sglue>
 801e17e:	bf00      	nop
 801e180:	20000114 	.word	0x20000114
 801e184:	0801f1a1 	.word	0x0801f1a1
 801e188:	20000124 	.word	0x20000124

0801e18c <cleanup_stdio>:
 801e18c:	6841      	ldr	r1, [r0, #4]
 801e18e:	4b0c      	ldr	r3, [pc, #48]	@ (801e1c0 <cleanup_stdio+0x34>)
 801e190:	4299      	cmp	r1, r3
 801e192:	b510      	push	{r4, lr}
 801e194:	4604      	mov	r4, r0
 801e196:	d001      	beq.n	801e19c <cleanup_stdio+0x10>
 801e198:	f001 f802 	bl	801f1a0 <_fflush_r>
 801e19c:	68a1      	ldr	r1, [r4, #8]
 801e19e:	4b09      	ldr	r3, [pc, #36]	@ (801e1c4 <cleanup_stdio+0x38>)
 801e1a0:	4299      	cmp	r1, r3
 801e1a2:	d002      	beq.n	801e1aa <cleanup_stdio+0x1e>
 801e1a4:	4620      	mov	r0, r4
 801e1a6:	f000 fffb 	bl	801f1a0 <_fflush_r>
 801e1aa:	68e1      	ldr	r1, [r4, #12]
 801e1ac:	4b06      	ldr	r3, [pc, #24]	@ (801e1c8 <cleanup_stdio+0x3c>)
 801e1ae:	4299      	cmp	r1, r3
 801e1b0:	d004      	beq.n	801e1bc <cleanup_stdio+0x30>
 801e1b2:	4620      	mov	r0, r4
 801e1b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e1b8:	f000 bff2 	b.w	801f1a0 <_fflush_r>
 801e1bc:	bd10      	pop	{r4, pc}
 801e1be:	bf00      	nop
 801e1c0:	2000e810 	.word	0x2000e810
 801e1c4:	2000e878 	.word	0x2000e878
 801e1c8:	2000e8e0 	.word	0x2000e8e0

0801e1cc <global_stdio_init.part.0>:
 801e1cc:	b510      	push	{r4, lr}
 801e1ce:	4b0b      	ldr	r3, [pc, #44]	@ (801e1fc <global_stdio_init.part.0+0x30>)
 801e1d0:	4c0b      	ldr	r4, [pc, #44]	@ (801e200 <global_stdio_init.part.0+0x34>)
 801e1d2:	4a0c      	ldr	r2, [pc, #48]	@ (801e204 <global_stdio_init.part.0+0x38>)
 801e1d4:	601a      	str	r2, [r3, #0]
 801e1d6:	4620      	mov	r0, r4
 801e1d8:	2200      	movs	r2, #0
 801e1da:	2104      	movs	r1, #4
 801e1dc:	f7ff ff94 	bl	801e108 <std>
 801e1e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801e1e4:	2201      	movs	r2, #1
 801e1e6:	2109      	movs	r1, #9
 801e1e8:	f7ff ff8e 	bl	801e108 <std>
 801e1ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801e1f0:	2202      	movs	r2, #2
 801e1f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e1f6:	2112      	movs	r1, #18
 801e1f8:	f7ff bf86 	b.w	801e108 <std>
 801e1fc:	2000e948 	.word	0x2000e948
 801e200:	2000e810 	.word	0x2000e810
 801e204:	0801e175 	.word	0x0801e175

0801e208 <__sfp_lock_acquire>:
 801e208:	4801      	ldr	r0, [pc, #4]	@ (801e210 <__sfp_lock_acquire+0x8>)
 801e20a:	f000 b9e8 	b.w	801e5de <__retarget_lock_acquire_recursive>
 801e20e:	bf00      	nop
 801e210:	2000e951 	.word	0x2000e951

0801e214 <__sfp_lock_release>:
 801e214:	4801      	ldr	r0, [pc, #4]	@ (801e21c <__sfp_lock_release+0x8>)
 801e216:	f000 b9e3 	b.w	801e5e0 <__retarget_lock_release_recursive>
 801e21a:	bf00      	nop
 801e21c:	2000e951 	.word	0x2000e951

0801e220 <__sinit>:
 801e220:	b510      	push	{r4, lr}
 801e222:	4604      	mov	r4, r0
 801e224:	f7ff fff0 	bl	801e208 <__sfp_lock_acquire>
 801e228:	6a23      	ldr	r3, [r4, #32]
 801e22a:	b11b      	cbz	r3, 801e234 <__sinit+0x14>
 801e22c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e230:	f7ff bff0 	b.w	801e214 <__sfp_lock_release>
 801e234:	4b04      	ldr	r3, [pc, #16]	@ (801e248 <__sinit+0x28>)
 801e236:	6223      	str	r3, [r4, #32]
 801e238:	4b04      	ldr	r3, [pc, #16]	@ (801e24c <__sinit+0x2c>)
 801e23a:	681b      	ldr	r3, [r3, #0]
 801e23c:	2b00      	cmp	r3, #0
 801e23e:	d1f5      	bne.n	801e22c <__sinit+0xc>
 801e240:	f7ff ffc4 	bl	801e1cc <global_stdio_init.part.0>
 801e244:	e7f2      	b.n	801e22c <__sinit+0xc>
 801e246:	bf00      	nop
 801e248:	0801e18d 	.word	0x0801e18d
 801e24c:	2000e948 	.word	0x2000e948

0801e250 <_fwalk_sglue>:
 801e250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e254:	4607      	mov	r7, r0
 801e256:	4688      	mov	r8, r1
 801e258:	4614      	mov	r4, r2
 801e25a:	2600      	movs	r6, #0
 801e25c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801e260:	f1b9 0901 	subs.w	r9, r9, #1
 801e264:	d505      	bpl.n	801e272 <_fwalk_sglue+0x22>
 801e266:	6824      	ldr	r4, [r4, #0]
 801e268:	2c00      	cmp	r4, #0
 801e26a:	d1f7      	bne.n	801e25c <_fwalk_sglue+0xc>
 801e26c:	4630      	mov	r0, r6
 801e26e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e272:	89ab      	ldrh	r3, [r5, #12]
 801e274:	2b01      	cmp	r3, #1
 801e276:	d907      	bls.n	801e288 <_fwalk_sglue+0x38>
 801e278:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801e27c:	3301      	adds	r3, #1
 801e27e:	d003      	beq.n	801e288 <_fwalk_sglue+0x38>
 801e280:	4629      	mov	r1, r5
 801e282:	4638      	mov	r0, r7
 801e284:	47c0      	blx	r8
 801e286:	4306      	orrs	r6, r0
 801e288:	3568      	adds	r5, #104	@ 0x68
 801e28a:	e7e9      	b.n	801e260 <_fwalk_sglue+0x10>

0801e28c <iprintf>:
 801e28c:	b40f      	push	{r0, r1, r2, r3}
 801e28e:	b507      	push	{r0, r1, r2, lr}
 801e290:	4906      	ldr	r1, [pc, #24]	@ (801e2ac <iprintf+0x20>)
 801e292:	ab04      	add	r3, sp, #16
 801e294:	6808      	ldr	r0, [r1, #0]
 801e296:	f853 2b04 	ldr.w	r2, [r3], #4
 801e29a:	6881      	ldr	r1, [r0, #8]
 801e29c:	9301      	str	r3, [sp, #4]
 801e29e:	f000 fc57 	bl	801eb50 <_vfiprintf_r>
 801e2a2:	b003      	add	sp, #12
 801e2a4:	f85d eb04 	ldr.w	lr, [sp], #4
 801e2a8:	b004      	add	sp, #16
 801e2aa:	4770      	bx	lr
 801e2ac:	20000120 	.word	0x20000120

0801e2b0 <sniprintf>:
 801e2b0:	b40c      	push	{r2, r3}
 801e2b2:	b530      	push	{r4, r5, lr}
 801e2b4:	4b18      	ldr	r3, [pc, #96]	@ (801e318 <sniprintf+0x68>)
 801e2b6:	1e0c      	subs	r4, r1, #0
 801e2b8:	681d      	ldr	r5, [r3, #0]
 801e2ba:	b09d      	sub	sp, #116	@ 0x74
 801e2bc:	da08      	bge.n	801e2d0 <sniprintf+0x20>
 801e2be:	238b      	movs	r3, #139	@ 0x8b
 801e2c0:	602b      	str	r3, [r5, #0]
 801e2c2:	f04f 30ff 	mov.w	r0, #4294967295
 801e2c6:	b01d      	add	sp, #116	@ 0x74
 801e2c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801e2cc:	b002      	add	sp, #8
 801e2ce:	4770      	bx	lr
 801e2d0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801e2d4:	f8ad 3014 	strh.w	r3, [sp, #20]
 801e2d8:	f04f 0300 	mov.w	r3, #0
 801e2dc:	931b      	str	r3, [sp, #108]	@ 0x6c
 801e2de:	bf14      	ite	ne
 801e2e0:	f104 33ff 	addne.w	r3, r4, #4294967295
 801e2e4:	4623      	moveq	r3, r4
 801e2e6:	9304      	str	r3, [sp, #16]
 801e2e8:	9307      	str	r3, [sp, #28]
 801e2ea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801e2ee:	9002      	str	r0, [sp, #8]
 801e2f0:	9006      	str	r0, [sp, #24]
 801e2f2:	f8ad 3016 	strh.w	r3, [sp, #22]
 801e2f6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801e2f8:	ab21      	add	r3, sp, #132	@ 0x84
 801e2fa:	a902      	add	r1, sp, #8
 801e2fc:	4628      	mov	r0, r5
 801e2fe:	9301      	str	r3, [sp, #4]
 801e300:	f000 fb00 	bl	801e904 <_svfiprintf_r>
 801e304:	1c43      	adds	r3, r0, #1
 801e306:	bfbc      	itt	lt
 801e308:	238b      	movlt	r3, #139	@ 0x8b
 801e30a:	602b      	strlt	r3, [r5, #0]
 801e30c:	2c00      	cmp	r4, #0
 801e30e:	d0da      	beq.n	801e2c6 <sniprintf+0x16>
 801e310:	9b02      	ldr	r3, [sp, #8]
 801e312:	2200      	movs	r2, #0
 801e314:	701a      	strb	r2, [r3, #0]
 801e316:	e7d6      	b.n	801e2c6 <sniprintf+0x16>
 801e318:	20000120 	.word	0x20000120

0801e31c <__sread>:
 801e31c:	b510      	push	{r4, lr}
 801e31e:	460c      	mov	r4, r1
 801e320:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e324:	f000 f90c 	bl	801e540 <_read_r>
 801e328:	2800      	cmp	r0, #0
 801e32a:	bfab      	itete	ge
 801e32c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801e32e:	89a3      	ldrhlt	r3, [r4, #12]
 801e330:	181b      	addge	r3, r3, r0
 801e332:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801e336:	bfac      	ite	ge
 801e338:	6563      	strge	r3, [r4, #84]	@ 0x54
 801e33a:	81a3      	strhlt	r3, [r4, #12]
 801e33c:	bd10      	pop	{r4, pc}

0801e33e <__swrite>:
 801e33e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e342:	461f      	mov	r7, r3
 801e344:	898b      	ldrh	r3, [r1, #12]
 801e346:	05db      	lsls	r3, r3, #23
 801e348:	4605      	mov	r5, r0
 801e34a:	460c      	mov	r4, r1
 801e34c:	4616      	mov	r6, r2
 801e34e:	d505      	bpl.n	801e35c <__swrite+0x1e>
 801e350:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e354:	2302      	movs	r3, #2
 801e356:	2200      	movs	r2, #0
 801e358:	f000 f8e0 	bl	801e51c <_lseek_r>
 801e35c:	89a3      	ldrh	r3, [r4, #12]
 801e35e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e362:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801e366:	81a3      	strh	r3, [r4, #12]
 801e368:	4632      	mov	r2, r6
 801e36a:	463b      	mov	r3, r7
 801e36c:	4628      	mov	r0, r5
 801e36e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e372:	f000 b8f7 	b.w	801e564 <_write_r>

0801e376 <__sseek>:
 801e376:	b510      	push	{r4, lr}
 801e378:	460c      	mov	r4, r1
 801e37a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e37e:	f000 f8cd 	bl	801e51c <_lseek_r>
 801e382:	1c43      	adds	r3, r0, #1
 801e384:	89a3      	ldrh	r3, [r4, #12]
 801e386:	bf15      	itete	ne
 801e388:	6560      	strne	r0, [r4, #84]	@ 0x54
 801e38a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801e38e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801e392:	81a3      	strheq	r3, [r4, #12]
 801e394:	bf18      	it	ne
 801e396:	81a3      	strhne	r3, [r4, #12]
 801e398:	bd10      	pop	{r4, pc}

0801e39a <__sclose>:
 801e39a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e39e:	f000 b84f 	b.w	801e440 <_close_r>

0801e3a2 <memcmp>:
 801e3a2:	b510      	push	{r4, lr}
 801e3a4:	3901      	subs	r1, #1
 801e3a6:	4402      	add	r2, r0
 801e3a8:	4290      	cmp	r0, r2
 801e3aa:	d101      	bne.n	801e3b0 <memcmp+0xe>
 801e3ac:	2000      	movs	r0, #0
 801e3ae:	e005      	b.n	801e3bc <memcmp+0x1a>
 801e3b0:	7803      	ldrb	r3, [r0, #0]
 801e3b2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801e3b6:	42a3      	cmp	r3, r4
 801e3b8:	d001      	beq.n	801e3be <memcmp+0x1c>
 801e3ba:	1b18      	subs	r0, r3, r4
 801e3bc:	bd10      	pop	{r4, pc}
 801e3be:	3001      	adds	r0, #1
 801e3c0:	e7f2      	b.n	801e3a8 <memcmp+0x6>

0801e3c2 <memmove>:
 801e3c2:	4288      	cmp	r0, r1
 801e3c4:	b510      	push	{r4, lr}
 801e3c6:	eb01 0402 	add.w	r4, r1, r2
 801e3ca:	d902      	bls.n	801e3d2 <memmove+0x10>
 801e3cc:	4284      	cmp	r4, r0
 801e3ce:	4623      	mov	r3, r4
 801e3d0:	d807      	bhi.n	801e3e2 <memmove+0x20>
 801e3d2:	1e43      	subs	r3, r0, #1
 801e3d4:	42a1      	cmp	r1, r4
 801e3d6:	d008      	beq.n	801e3ea <memmove+0x28>
 801e3d8:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e3dc:	f803 2f01 	strb.w	r2, [r3, #1]!
 801e3e0:	e7f8      	b.n	801e3d4 <memmove+0x12>
 801e3e2:	4402      	add	r2, r0
 801e3e4:	4601      	mov	r1, r0
 801e3e6:	428a      	cmp	r2, r1
 801e3e8:	d100      	bne.n	801e3ec <memmove+0x2a>
 801e3ea:	bd10      	pop	{r4, pc}
 801e3ec:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801e3f0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801e3f4:	e7f7      	b.n	801e3e6 <memmove+0x24>

0801e3f6 <memset>:
 801e3f6:	4402      	add	r2, r0
 801e3f8:	4603      	mov	r3, r0
 801e3fa:	4293      	cmp	r3, r2
 801e3fc:	d100      	bne.n	801e400 <memset+0xa>
 801e3fe:	4770      	bx	lr
 801e400:	f803 1b01 	strb.w	r1, [r3], #1
 801e404:	e7f9      	b.n	801e3fa <memset+0x4>

0801e406 <strcat>:
 801e406:	b510      	push	{r4, lr}
 801e408:	4602      	mov	r2, r0
 801e40a:	7814      	ldrb	r4, [r2, #0]
 801e40c:	4613      	mov	r3, r2
 801e40e:	3201      	adds	r2, #1
 801e410:	2c00      	cmp	r4, #0
 801e412:	d1fa      	bne.n	801e40a <strcat+0x4>
 801e414:	3b01      	subs	r3, #1
 801e416:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e41a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801e41e:	2a00      	cmp	r2, #0
 801e420:	d1f9      	bne.n	801e416 <strcat+0x10>
 801e422:	bd10      	pop	{r4, pc}

0801e424 <strchr>:
 801e424:	b2c9      	uxtb	r1, r1
 801e426:	4603      	mov	r3, r0
 801e428:	4618      	mov	r0, r3
 801e42a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e42e:	b112      	cbz	r2, 801e436 <strchr+0x12>
 801e430:	428a      	cmp	r2, r1
 801e432:	d1f9      	bne.n	801e428 <strchr+0x4>
 801e434:	4770      	bx	lr
 801e436:	2900      	cmp	r1, #0
 801e438:	bf18      	it	ne
 801e43a:	2000      	movne	r0, #0
 801e43c:	4770      	bx	lr
	...

0801e440 <_close_r>:
 801e440:	b538      	push	{r3, r4, r5, lr}
 801e442:	4d06      	ldr	r5, [pc, #24]	@ (801e45c <_close_r+0x1c>)
 801e444:	2300      	movs	r3, #0
 801e446:	4604      	mov	r4, r0
 801e448:	4608      	mov	r0, r1
 801e44a:	602b      	str	r3, [r5, #0]
 801e44c:	f7e5 ffb8 	bl	80043c0 <_close>
 801e450:	1c43      	adds	r3, r0, #1
 801e452:	d102      	bne.n	801e45a <_close_r+0x1a>
 801e454:	682b      	ldr	r3, [r5, #0]
 801e456:	b103      	cbz	r3, 801e45a <_close_r+0x1a>
 801e458:	6023      	str	r3, [r4, #0]
 801e45a:	bd38      	pop	{r3, r4, r5, pc}
 801e45c:	2000e94c 	.word	0x2000e94c

0801e460 <_reclaim_reent>:
 801e460:	4b2d      	ldr	r3, [pc, #180]	@ (801e518 <_reclaim_reent+0xb8>)
 801e462:	681b      	ldr	r3, [r3, #0]
 801e464:	4283      	cmp	r3, r0
 801e466:	b570      	push	{r4, r5, r6, lr}
 801e468:	4604      	mov	r4, r0
 801e46a:	d053      	beq.n	801e514 <_reclaim_reent+0xb4>
 801e46c:	69c3      	ldr	r3, [r0, #28]
 801e46e:	b31b      	cbz	r3, 801e4b8 <_reclaim_reent+0x58>
 801e470:	68db      	ldr	r3, [r3, #12]
 801e472:	b163      	cbz	r3, 801e48e <_reclaim_reent+0x2e>
 801e474:	2500      	movs	r5, #0
 801e476:	69e3      	ldr	r3, [r4, #28]
 801e478:	68db      	ldr	r3, [r3, #12]
 801e47a:	5959      	ldr	r1, [r3, r5]
 801e47c:	b9b1      	cbnz	r1, 801e4ac <_reclaim_reent+0x4c>
 801e47e:	3504      	adds	r5, #4
 801e480:	2d80      	cmp	r5, #128	@ 0x80
 801e482:	d1f8      	bne.n	801e476 <_reclaim_reent+0x16>
 801e484:	69e3      	ldr	r3, [r4, #28]
 801e486:	4620      	mov	r0, r4
 801e488:	68d9      	ldr	r1, [r3, #12]
 801e48a:	f000 f8df 	bl	801e64c <_free_r>
 801e48e:	69e3      	ldr	r3, [r4, #28]
 801e490:	6819      	ldr	r1, [r3, #0]
 801e492:	b111      	cbz	r1, 801e49a <_reclaim_reent+0x3a>
 801e494:	4620      	mov	r0, r4
 801e496:	f000 f8d9 	bl	801e64c <_free_r>
 801e49a:	69e3      	ldr	r3, [r4, #28]
 801e49c:	689d      	ldr	r5, [r3, #8]
 801e49e:	b15d      	cbz	r5, 801e4b8 <_reclaim_reent+0x58>
 801e4a0:	4629      	mov	r1, r5
 801e4a2:	4620      	mov	r0, r4
 801e4a4:	682d      	ldr	r5, [r5, #0]
 801e4a6:	f000 f8d1 	bl	801e64c <_free_r>
 801e4aa:	e7f8      	b.n	801e49e <_reclaim_reent+0x3e>
 801e4ac:	680e      	ldr	r6, [r1, #0]
 801e4ae:	4620      	mov	r0, r4
 801e4b0:	f000 f8cc 	bl	801e64c <_free_r>
 801e4b4:	4631      	mov	r1, r6
 801e4b6:	e7e1      	b.n	801e47c <_reclaim_reent+0x1c>
 801e4b8:	6961      	ldr	r1, [r4, #20]
 801e4ba:	b111      	cbz	r1, 801e4c2 <_reclaim_reent+0x62>
 801e4bc:	4620      	mov	r0, r4
 801e4be:	f000 f8c5 	bl	801e64c <_free_r>
 801e4c2:	69e1      	ldr	r1, [r4, #28]
 801e4c4:	b111      	cbz	r1, 801e4cc <_reclaim_reent+0x6c>
 801e4c6:	4620      	mov	r0, r4
 801e4c8:	f000 f8c0 	bl	801e64c <_free_r>
 801e4cc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801e4ce:	b111      	cbz	r1, 801e4d6 <_reclaim_reent+0x76>
 801e4d0:	4620      	mov	r0, r4
 801e4d2:	f000 f8bb 	bl	801e64c <_free_r>
 801e4d6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801e4d8:	b111      	cbz	r1, 801e4e0 <_reclaim_reent+0x80>
 801e4da:	4620      	mov	r0, r4
 801e4dc:	f000 f8b6 	bl	801e64c <_free_r>
 801e4e0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801e4e2:	b111      	cbz	r1, 801e4ea <_reclaim_reent+0x8a>
 801e4e4:	4620      	mov	r0, r4
 801e4e6:	f000 f8b1 	bl	801e64c <_free_r>
 801e4ea:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801e4ec:	b111      	cbz	r1, 801e4f4 <_reclaim_reent+0x94>
 801e4ee:	4620      	mov	r0, r4
 801e4f0:	f000 f8ac 	bl	801e64c <_free_r>
 801e4f4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801e4f6:	b111      	cbz	r1, 801e4fe <_reclaim_reent+0x9e>
 801e4f8:	4620      	mov	r0, r4
 801e4fa:	f000 f8a7 	bl	801e64c <_free_r>
 801e4fe:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801e500:	b111      	cbz	r1, 801e508 <_reclaim_reent+0xa8>
 801e502:	4620      	mov	r0, r4
 801e504:	f000 f8a2 	bl	801e64c <_free_r>
 801e508:	6a23      	ldr	r3, [r4, #32]
 801e50a:	b11b      	cbz	r3, 801e514 <_reclaim_reent+0xb4>
 801e50c:	4620      	mov	r0, r4
 801e50e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e512:	4718      	bx	r3
 801e514:	bd70      	pop	{r4, r5, r6, pc}
 801e516:	bf00      	nop
 801e518:	20000120 	.word	0x20000120

0801e51c <_lseek_r>:
 801e51c:	b538      	push	{r3, r4, r5, lr}
 801e51e:	4d07      	ldr	r5, [pc, #28]	@ (801e53c <_lseek_r+0x20>)
 801e520:	4604      	mov	r4, r0
 801e522:	4608      	mov	r0, r1
 801e524:	4611      	mov	r1, r2
 801e526:	2200      	movs	r2, #0
 801e528:	602a      	str	r2, [r5, #0]
 801e52a:	461a      	mov	r2, r3
 801e52c:	f7e5 ff6f 	bl	800440e <_lseek>
 801e530:	1c43      	adds	r3, r0, #1
 801e532:	d102      	bne.n	801e53a <_lseek_r+0x1e>
 801e534:	682b      	ldr	r3, [r5, #0]
 801e536:	b103      	cbz	r3, 801e53a <_lseek_r+0x1e>
 801e538:	6023      	str	r3, [r4, #0]
 801e53a:	bd38      	pop	{r3, r4, r5, pc}
 801e53c:	2000e94c 	.word	0x2000e94c

0801e540 <_read_r>:
 801e540:	b538      	push	{r3, r4, r5, lr}
 801e542:	4d07      	ldr	r5, [pc, #28]	@ (801e560 <_read_r+0x20>)
 801e544:	4604      	mov	r4, r0
 801e546:	4608      	mov	r0, r1
 801e548:	4611      	mov	r1, r2
 801e54a:	2200      	movs	r2, #0
 801e54c:	602a      	str	r2, [r5, #0]
 801e54e:	461a      	mov	r2, r3
 801e550:	f7e5 fefd 	bl	800434e <_read>
 801e554:	1c43      	adds	r3, r0, #1
 801e556:	d102      	bne.n	801e55e <_read_r+0x1e>
 801e558:	682b      	ldr	r3, [r5, #0]
 801e55a:	b103      	cbz	r3, 801e55e <_read_r+0x1e>
 801e55c:	6023      	str	r3, [r4, #0]
 801e55e:	bd38      	pop	{r3, r4, r5, pc}
 801e560:	2000e94c 	.word	0x2000e94c

0801e564 <_write_r>:
 801e564:	b538      	push	{r3, r4, r5, lr}
 801e566:	4d07      	ldr	r5, [pc, #28]	@ (801e584 <_write_r+0x20>)
 801e568:	4604      	mov	r4, r0
 801e56a:	4608      	mov	r0, r1
 801e56c:	4611      	mov	r1, r2
 801e56e:	2200      	movs	r2, #0
 801e570:	602a      	str	r2, [r5, #0]
 801e572:	461a      	mov	r2, r3
 801e574:	f7e5 ff08 	bl	8004388 <_write>
 801e578:	1c43      	adds	r3, r0, #1
 801e57a:	d102      	bne.n	801e582 <_write_r+0x1e>
 801e57c:	682b      	ldr	r3, [r5, #0]
 801e57e:	b103      	cbz	r3, 801e582 <_write_r+0x1e>
 801e580:	6023      	str	r3, [r4, #0]
 801e582:	bd38      	pop	{r3, r4, r5, pc}
 801e584:	2000e94c 	.word	0x2000e94c

0801e588 <__errno>:
 801e588:	4b01      	ldr	r3, [pc, #4]	@ (801e590 <__errno+0x8>)
 801e58a:	6818      	ldr	r0, [r3, #0]
 801e58c:	4770      	bx	lr
 801e58e:	bf00      	nop
 801e590:	20000120 	.word	0x20000120

0801e594 <__libc_init_array>:
 801e594:	b570      	push	{r4, r5, r6, lr}
 801e596:	4d0d      	ldr	r5, [pc, #52]	@ (801e5cc <__libc_init_array+0x38>)
 801e598:	4c0d      	ldr	r4, [pc, #52]	@ (801e5d0 <__libc_init_array+0x3c>)
 801e59a:	1b64      	subs	r4, r4, r5
 801e59c:	10a4      	asrs	r4, r4, #2
 801e59e:	2600      	movs	r6, #0
 801e5a0:	42a6      	cmp	r6, r4
 801e5a2:	d109      	bne.n	801e5b8 <__libc_init_array+0x24>
 801e5a4:	4d0b      	ldr	r5, [pc, #44]	@ (801e5d4 <__libc_init_array+0x40>)
 801e5a6:	4c0c      	ldr	r4, [pc, #48]	@ (801e5d8 <__libc_init_array+0x44>)
 801e5a8:	f000 ffde 	bl	801f568 <_init>
 801e5ac:	1b64      	subs	r4, r4, r5
 801e5ae:	10a4      	asrs	r4, r4, #2
 801e5b0:	2600      	movs	r6, #0
 801e5b2:	42a6      	cmp	r6, r4
 801e5b4:	d105      	bne.n	801e5c2 <__libc_init_array+0x2e>
 801e5b6:	bd70      	pop	{r4, r5, r6, pc}
 801e5b8:	f855 3b04 	ldr.w	r3, [r5], #4
 801e5bc:	4798      	blx	r3
 801e5be:	3601      	adds	r6, #1
 801e5c0:	e7ee      	b.n	801e5a0 <__libc_init_array+0xc>
 801e5c2:	f855 3b04 	ldr.w	r3, [r5], #4
 801e5c6:	4798      	blx	r3
 801e5c8:	3601      	adds	r6, #1
 801e5ca:	e7f2      	b.n	801e5b2 <__libc_init_array+0x1e>
 801e5cc:	080240f4 	.word	0x080240f4
 801e5d0:	080240f4 	.word	0x080240f4
 801e5d4:	080240f4 	.word	0x080240f4
 801e5d8:	080240f8 	.word	0x080240f8

0801e5dc <__retarget_lock_init_recursive>:
 801e5dc:	4770      	bx	lr

0801e5de <__retarget_lock_acquire_recursive>:
 801e5de:	4770      	bx	lr

0801e5e0 <__retarget_lock_release_recursive>:
 801e5e0:	4770      	bx	lr

0801e5e2 <strcpy>:
 801e5e2:	4603      	mov	r3, r0
 801e5e4:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e5e8:	f803 2b01 	strb.w	r2, [r3], #1
 801e5ec:	2a00      	cmp	r2, #0
 801e5ee:	d1f9      	bne.n	801e5e4 <strcpy+0x2>
 801e5f0:	4770      	bx	lr

0801e5f2 <memcpy>:
 801e5f2:	440a      	add	r2, r1
 801e5f4:	4291      	cmp	r1, r2
 801e5f6:	f100 33ff 	add.w	r3, r0, #4294967295
 801e5fa:	d100      	bne.n	801e5fe <memcpy+0xc>
 801e5fc:	4770      	bx	lr
 801e5fe:	b510      	push	{r4, lr}
 801e600:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e604:	f803 4f01 	strb.w	r4, [r3, #1]!
 801e608:	4291      	cmp	r1, r2
 801e60a:	d1f9      	bne.n	801e600 <memcpy+0xe>
 801e60c:	bd10      	pop	{r4, pc}
	...

0801e610 <__assert_func>:
 801e610:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e612:	4614      	mov	r4, r2
 801e614:	461a      	mov	r2, r3
 801e616:	4b09      	ldr	r3, [pc, #36]	@ (801e63c <__assert_func+0x2c>)
 801e618:	681b      	ldr	r3, [r3, #0]
 801e61a:	4605      	mov	r5, r0
 801e61c:	68d8      	ldr	r0, [r3, #12]
 801e61e:	b14c      	cbz	r4, 801e634 <__assert_func+0x24>
 801e620:	4b07      	ldr	r3, [pc, #28]	@ (801e640 <__assert_func+0x30>)
 801e622:	9100      	str	r1, [sp, #0]
 801e624:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801e628:	4906      	ldr	r1, [pc, #24]	@ (801e644 <__assert_func+0x34>)
 801e62a:	462b      	mov	r3, r5
 801e62c:	f000 fde0 	bl	801f1f0 <fiprintf>
 801e630:	f000 fe94 	bl	801f35c <abort>
 801e634:	4b04      	ldr	r3, [pc, #16]	@ (801e648 <__assert_func+0x38>)
 801e636:	461c      	mov	r4, r3
 801e638:	e7f3      	b.n	801e622 <__assert_func+0x12>
 801e63a:	bf00      	nop
 801e63c:	20000120 	.word	0x20000120
 801e640:	08023f7b 	.word	0x08023f7b
 801e644:	08023f88 	.word	0x08023f88
 801e648:	08023fb6 	.word	0x08023fb6

0801e64c <_free_r>:
 801e64c:	b538      	push	{r3, r4, r5, lr}
 801e64e:	4605      	mov	r5, r0
 801e650:	2900      	cmp	r1, #0
 801e652:	d041      	beq.n	801e6d8 <_free_r+0x8c>
 801e654:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e658:	1f0c      	subs	r4, r1, #4
 801e65a:	2b00      	cmp	r3, #0
 801e65c:	bfb8      	it	lt
 801e65e:	18e4      	addlt	r4, r4, r3
 801e660:	f000 f8e8 	bl	801e834 <__malloc_lock>
 801e664:	4a1d      	ldr	r2, [pc, #116]	@ (801e6dc <_free_r+0x90>)
 801e666:	6813      	ldr	r3, [r2, #0]
 801e668:	b933      	cbnz	r3, 801e678 <_free_r+0x2c>
 801e66a:	6063      	str	r3, [r4, #4]
 801e66c:	6014      	str	r4, [r2, #0]
 801e66e:	4628      	mov	r0, r5
 801e670:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e674:	f000 b8e4 	b.w	801e840 <__malloc_unlock>
 801e678:	42a3      	cmp	r3, r4
 801e67a:	d908      	bls.n	801e68e <_free_r+0x42>
 801e67c:	6820      	ldr	r0, [r4, #0]
 801e67e:	1821      	adds	r1, r4, r0
 801e680:	428b      	cmp	r3, r1
 801e682:	bf01      	itttt	eq
 801e684:	6819      	ldreq	r1, [r3, #0]
 801e686:	685b      	ldreq	r3, [r3, #4]
 801e688:	1809      	addeq	r1, r1, r0
 801e68a:	6021      	streq	r1, [r4, #0]
 801e68c:	e7ed      	b.n	801e66a <_free_r+0x1e>
 801e68e:	461a      	mov	r2, r3
 801e690:	685b      	ldr	r3, [r3, #4]
 801e692:	b10b      	cbz	r3, 801e698 <_free_r+0x4c>
 801e694:	42a3      	cmp	r3, r4
 801e696:	d9fa      	bls.n	801e68e <_free_r+0x42>
 801e698:	6811      	ldr	r1, [r2, #0]
 801e69a:	1850      	adds	r0, r2, r1
 801e69c:	42a0      	cmp	r0, r4
 801e69e:	d10b      	bne.n	801e6b8 <_free_r+0x6c>
 801e6a0:	6820      	ldr	r0, [r4, #0]
 801e6a2:	4401      	add	r1, r0
 801e6a4:	1850      	adds	r0, r2, r1
 801e6a6:	4283      	cmp	r3, r0
 801e6a8:	6011      	str	r1, [r2, #0]
 801e6aa:	d1e0      	bne.n	801e66e <_free_r+0x22>
 801e6ac:	6818      	ldr	r0, [r3, #0]
 801e6ae:	685b      	ldr	r3, [r3, #4]
 801e6b0:	6053      	str	r3, [r2, #4]
 801e6b2:	4408      	add	r0, r1
 801e6b4:	6010      	str	r0, [r2, #0]
 801e6b6:	e7da      	b.n	801e66e <_free_r+0x22>
 801e6b8:	d902      	bls.n	801e6c0 <_free_r+0x74>
 801e6ba:	230c      	movs	r3, #12
 801e6bc:	602b      	str	r3, [r5, #0]
 801e6be:	e7d6      	b.n	801e66e <_free_r+0x22>
 801e6c0:	6820      	ldr	r0, [r4, #0]
 801e6c2:	1821      	adds	r1, r4, r0
 801e6c4:	428b      	cmp	r3, r1
 801e6c6:	bf04      	itt	eq
 801e6c8:	6819      	ldreq	r1, [r3, #0]
 801e6ca:	685b      	ldreq	r3, [r3, #4]
 801e6cc:	6063      	str	r3, [r4, #4]
 801e6ce:	bf04      	itt	eq
 801e6d0:	1809      	addeq	r1, r1, r0
 801e6d2:	6021      	streq	r1, [r4, #0]
 801e6d4:	6054      	str	r4, [r2, #4]
 801e6d6:	e7ca      	b.n	801e66e <_free_r+0x22>
 801e6d8:	bd38      	pop	{r3, r4, r5, pc}
 801e6da:	bf00      	nop
 801e6dc:	2000e958 	.word	0x2000e958

0801e6e0 <malloc>:
 801e6e0:	4b02      	ldr	r3, [pc, #8]	@ (801e6ec <malloc+0xc>)
 801e6e2:	4601      	mov	r1, r0
 801e6e4:	6818      	ldr	r0, [r3, #0]
 801e6e6:	f000 b825 	b.w	801e734 <_malloc_r>
 801e6ea:	bf00      	nop
 801e6ec:	20000120 	.word	0x20000120

0801e6f0 <sbrk_aligned>:
 801e6f0:	b570      	push	{r4, r5, r6, lr}
 801e6f2:	4e0f      	ldr	r6, [pc, #60]	@ (801e730 <sbrk_aligned+0x40>)
 801e6f4:	460c      	mov	r4, r1
 801e6f6:	6831      	ldr	r1, [r6, #0]
 801e6f8:	4605      	mov	r5, r0
 801e6fa:	b911      	cbnz	r1, 801e702 <sbrk_aligned+0x12>
 801e6fc:	f000 fe1e 	bl	801f33c <_sbrk_r>
 801e700:	6030      	str	r0, [r6, #0]
 801e702:	4621      	mov	r1, r4
 801e704:	4628      	mov	r0, r5
 801e706:	f000 fe19 	bl	801f33c <_sbrk_r>
 801e70a:	1c43      	adds	r3, r0, #1
 801e70c:	d103      	bne.n	801e716 <sbrk_aligned+0x26>
 801e70e:	f04f 34ff 	mov.w	r4, #4294967295
 801e712:	4620      	mov	r0, r4
 801e714:	bd70      	pop	{r4, r5, r6, pc}
 801e716:	1cc4      	adds	r4, r0, #3
 801e718:	f024 0403 	bic.w	r4, r4, #3
 801e71c:	42a0      	cmp	r0, r4
 801e71e:	d0f8      	beq.n	801e712 <sbrk_aligned+0x22>
 801e720:	1a21      	subs	r1, r4, r0
 801e722:	4628      	mov	r0, r5
 801e724:	f000 fe0a 	bl	801f33c <_sbrk_r>
 801e728:	3001      	adds	r0, #1
 801e72a:	d1f2      	bne.n	801e712 <sbrk_aligned+0x22>
 801e72c:	e7ef      	b.n	801e70e <sbrk_aligned+0x1e>
 801e72e:	bf00      	nop
 801e730:	2000e954 	.word	0x2000e954

0801e734 <_malloc_r>:
 801e734:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e738:	1ccd      	adds	r5, r1, #3
 801e73a:	f025 0503 	bic.w	r5, r5, #3
 801e73e:	3508      	adds	r5, #8
 801e740:	2d0c      	cmp	r5, #12
 801e742:	bf38      	it	cc
 801e744:	250c      	movcc	r5, #12
 801e746:	2d00      	cmp	r5, #0
 801e748:	4606      	mov	r6, r0
 801e74a:	db01      	blt.n	801e750 <_malloc_r+0x1c>
 801e74c:	42a9      	cmp	r1, r5
 801e74e:	d904      	bls.n	801e75a <_malloc_r+0x26>
 801e750:	230c      	movs	r3, #12
 801e752:	6033      	str	r3, [r6, #0]
 801e754:	2000      	movs	r0, #0
 801e756:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e75a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801e830 <_malloc_r+0xfc>
 801e75e:	f000 f869 	bl	801e834 <__malloc_lock>
 801e762:	f8d8 3000 	ldr.w	r3, [r8]
 801e766:	461c      	mov	r4, r3
 801e768:	bb44      	cbnz	r4, 801e7bc <_malloc_r+0x88>
 801e76a:	4629      	mov	r1, r5
 801e76c:	4630      	mov	r0, r6
 801e76e:	f7ff ffbf 	bl	801e6f0 <sbrk_aligned>
 801e772:	1c43      	adds	r3, r0, #1
 801e774:	4604      	mov	r4, r0
 801e776:	d158      	bne.n	801e82a <_malloc_r+0xf6>
 801e778:	f8d8 4000 	ldr.w	r4, [r8]
 801e77c:	4627      	mov	r7, r4
 801e77e:	2f00      	cmp	r7, #0
 801e780:	d143      	bne.n	801e80a <_malloc_r+0xd6>
 801e782:	2c00      	cmp	r4, #0
 801e784:	d04b      	beq.n	801e81e <_malloc_r+0xea>
 801e786:	6823      	ldr	r3, [r4, #0]
 801e788:	4639      	mov	r1, r7
 801e78a:	4630      	mov	r0, r6
 801e78c:	eb04 0903 	add.w	r9, r4, r3
 801e790:	f000 fdd4 	bl	801f33c <_sbrk_r>
 801e794:	4581      	cmp	r9, r0
 801e796:	d142      	bne.n	801e81e <_malloc_r+0xea>
 801e798:	6821      	ldr	r1, [r4, #0]
 801e79a:	1a6d      	subs	r5, r5, r1
 801e79c:	4629      	mov	r1, r5
 801e79e:	4630      	mov	r0, r6
 801e7a0:	f7ff ffa6 	bl	801e6f0 <sbrk_aligned>
 801e7a4:	3001      	adds	r0, #1
 801e7a6:	d03a      	beq.n	801e81e <_malloc_r+0xea>
 801e7a8:	6823      	ldr	r3, [r4, #0]
 801e7aa:	442b      	add	r3, r5
 801e7ac:	6023      	str	r3, [r4, #0]
 801e7ae:	f8d8 3000 	ldr.w	r3, [r8]
 801e7b2:	685a      	ldr	r2, [r3, #4]
 801e7b4:	bb62      	cbnz	r2, 801e810 <_malloc_r+0xdc>
 801e7b6:	f8c8 7000 	str.w	r7, [r8]
 801e7ba:	e00f      	b.n	801e7dc <_malloc_r+0xa8>
 801e7bc:	6822      	ldr	r2, [r4, #0]
 801e7be:	1b52      	subs	r2, r2, r5
 801e7c0:	d420      	bmi.n	801e804 <_malloc_r+0xd0>
 801e7c2:	2a0b      	cmp	r2, #11
 801e7c4:	d917      	bls.n	801e7f6 <_malloc_r+0xc2>
 801e7c6:	1961      	adds	r1, r4, r5
 801e7c8:	42a3      	cmp	r3, r4
 801e7ca:	6025      	str	r5, [r4, #0]
 801e7cc:	bf18      	it	ne
 801e7ce:	6059      	strne	r1, [r3, #4]
 801e7d0:	6863      	ldr	r3, [r4, #4]
 801e7d2:	bf08      	it	eq
 801e7d4:	f8c8 1000 	streq.w	r1, [r8]
 801e7d8:	5162      	str	r2, [r4, r5]
 801e7da:	604b      	str	r3, [r1, #4]
 801e7dc:	4630      	mov	r0, r6
 801e7de:	f000 f82f 	bl	801e840 <__malloc_unlock>
 801e7e2:	f104 000b 	add.w	r0, r4, #11
 801e7e6:	1d23      	adds	r3, r4, #4
 801e7e8:	f020 0007 	bic.w	r0, r0, #7
 801e7ec:	1ac2      	subs	r2, r0, r3
 801e7ee:	bf1c      	itt	ne
 801e7f0:	1a1b      	subne	r3, r3, r0
 801e7f2:	50a3      	strne	r3, [r4, r2]
 801e7f4:	e7af      	b.n	801e756 <_malloc_r+0x22>
 801e7f6:	6862      	ldr	r2, [r4, #4]
 801e7f8:	42a3      	cmp	r3, r4
 801e7fa:	bf0c      	ite	eq
 801e7fc:	f8c8 2000 	streq.w	r2, [r8]
 801e800:	605a      	strne	r2, [r3, #4]
 801e802:	e7eb      	b.n	801e7dc <_malloc_r+0xa8>
 801e804:	4623      	mov	r3, r4
 801e806:	6864      	ldr	r4, [r4, #4]
 801e808:	e7ae      	b.n	801e768 <_malloc_r+0x34>
 801e80a:	463c      	mov	r4, r7
 801e80c:	687f      	ldr	r7, [r7, #4]
 801e80e:	e7b6      	b.n	801e77e <_malloc_r+0x4a>
 801e810:	461a      	mov	r2, r3
 801e812:	685b      	ldr	r3, [r3, #4]
 801e814:	42a3      	cmp	r3, r4
 801e816:	d1fb      	bne.n	801e810 <_malloc_r+0xdc>
 801e818:	2300      	movs	r3, #0
 801e81a:	6053      	str	r3, [r2, #4]
 801e81c:	e7de      	b.n	801e7dc <_malloc_r+0xa8>
 801e81e:	230c      	movs	r3, #12
 801e820:	6033      	str	r3, [r6, #0]
 801e822:	4630      	mov	r0, r6
 801e824:	f000 f80c 	bl	801e840 <__malloc_unlock>
 801e828:	e794      	b.n	801e754 <_malloc_r+0x20>
 801e82a:	6005      	str	r5, [r0, #0]
 801e82c:	e7d6      	b.n	801e7dc <_malloc_r+0xa8>
 801e82e:	bf00      	nop
 801e830:	2000e958 	.word	0x2000e958

0801e834 <__malloc_lock>:
 801e834:	4801      	ldr	r0, [pc, #4]	@ (801e83c <__malloc_lock+0x8>)
 801e836:	f7ff bed2 	b.w	801e5de <__retarget_lock_acquire_recursive>
 801e83a:	bf00      	nop
 801e83c:	2000e950 	.word	0x2000e950

0801e840 <__malloc_unlock>:
 801e840:	4801      	ldr	r0, [pc, #4]	@ (801e848 <__malloc_unlock+0x8>)
 801e842:	f7ff becd 	b.w	801e5e0 <__retarget_lock_release_recursive>
 801e846:	bf00      	nop
 801e848:	2000e950 	.word	0x2000e950

0801e84c <__ssputs_r>:
 801e84c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e850:	688e      	ldr	r6, [r1, #8]
 801e852:	461f      	mov	r7, r3
 801e854:	42be      	cmp	r6, r7
 801e856:	680b      	ldr	r3, [r1, #0]
 801e858:	4682      	mov	sl, r0
 801e85a:	460c      	mov	r4, r1
 801e85c:	4690      	mov	r8, r2
 801e85e:	d82d      	bhi.n	801e8bc <__ssputs_r+0x70>
 801e860:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801e864:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801e868:	d026      	beq.n	801e8b8 <__ssputs_r+0x6c>
 801e86a:	6965      	ldr	r5, [r4, #20]
 801e86c:	6909      	ldr	r1, [r1, #16]
 801e86e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e872:	eba3 0901 	sub.w	r9, r3, r1
 801e876:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801e87a:	1c7b      	adds	r3, r7, #1
 801e87c:	444b      	add	r3, r9
 801e87e:	106d      	asrs	r5, r5, #1
 801e880:	429d      	cmp	r5, r3
 801e882:	bf38      	it	cc
 801e884:	461d      	movcc	r5, r3
 801e886:	0553      	lsls	r3, r2, #21
 801e888:	d527      	bpl.n	801e8da <__ssputs_r+0x8e>
 801e88a:	4629      	mov	r1, r5
 801e88c:	f7ff ff52 	bl	801e734 <_malloc_r>
 801e890:	4606      	mov	r6, r0
 801e892:	b360      	cbz	r0, 801e8ee <__ssputs_r+0xa2>
 801e894:	6921      	ldr	r1, [r4, #16]
 801e896:	464a      	mov	r2, r9
 801e898:	f7ff feab 	bl	801e5f2 <memcpy>
 801e89c:	89a3      	ldrh	r3, [r4, #12]
 801e89e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801e8a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801e8a6:	81a3      	strh	r3, [r4, #12]
 801e8a8:	6126      	str	r6, [r4, #16]
 801e8aa:	6165      	str	r5, [r4, #20]
 801e8ac:	444e      	add	r6, r9
 801e8ae:	eba5 0509 	sub.w	r5, r5, r9
 801e8b2:	6026      	str	r6, [r4, #0]
 801e8b4:	60a5      	str	r5, [r4, #8]
 801e8b6:	463e      	mov	r6, r7
 801e8b8:	42be      	cmp	r6, r7
 801e8ba:	d900      	bls.n	801e8be <__ssputs_r+0x72>
 801e8bc:	463e      	mov	r6, r7
 801e8be:	6820      	ldr	r0, [r4, #0]
 801e8c0:	4632      	mov	r2, r6
 801e8c2:	4641      	mov	r1, r8
 801e8c4:	f7ff fd7d 	bl	801e3c2 <memmove>
 801e8c8:	68a3      	ldr	r3, [r4, #8]
 801e8ca:	1b9b      	subs	r3, r3, r6
 801e8cc:	60a3      	str	r3, [r4, #8]
 801e8ce:	6823      	ldr	r3, [r4, #0]
 801e8d0:	4433      	add	r3, r6
 801e8d2:	6023      	str	r3, [r4, #0]
 801e8d4:	2000      	movs	r0, #0
 801e8d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e8da:	462a      	mov	r2, r5
 801e8dc:	f000 fd45 	bl	801f36a <_realloc_r>
 801e8e0:	4606      	mov	r6, r0
 801e8e2:	2800      	cmp	r0, #0
 801e8e4:	d1e0      	bne.n	801e8a8 <__ssputs_r+0x5c>
 801e8e6:	6921      	ldr	r1, [r4, #16]
 801e8e8:	4650      	mov	r0, sl
 801e8ea:	f7ff feaf 	bl	801e64c <_free_r>
 801e8ee:	230c      	movs	r3, #12
 801e8f0:	f8ca 3000 	str.w	r3, [sl]
 801e8f4:	89a3      	ldrh	r3, [r4, #12]
 801e8f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e8fa:	81a3      	strh	r3, [r4, #12]
 801e8fc:	f04f 30ff 	mov.w	r0, #4294967295
 801e900:	e7e9      	b.n	801e8d6 <__ssputs_r+0x8a>
	...

0801e904 <_svfiprintf_r>:
 801e904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e908:	4698      	mov	r8, r3
 801e90a:	898b      	ldrh	r3, [r1, #12]
 801e90c:	061b      	lsls	r3, r3, #24
 801e90e:	b09d      	sub	sp, #116	@ 0x74
 801e910:	4607      	mov	r7, r0
 801e912:	460d      	mov	r5, r1
 801e914:	4614      	mov	r4, r2
 801e916:	d510      	bpl.n	801e93a <_svfiprintf_r+0x36>
 801e918:	690b      	ldr	r3, [r1, #16]
 801e91a:	b973      	cbnz	r3, 801e93a <_svfiprintf_r+0x36>
 801e91c:	2140      	movs	r1, #64	@ 0x40
 801e91e:	f7ff ff09 	bl	801e734 <_malloc_r>
 801e922:	6028      	str	r0, [r5, #0]
 801e924:	6128      	str	r0, [r5, #16]
 801e926:	b930      	cbnz	r0, 801e936 <_svfiprintf_r+0x32>
 801e928:	230c      	movs	r3, #12
 801e92a:	603b      	str	r3, [r7, #0]
 801e92c:	f04f 30ff 	mov.w	r0, #4294967295
 801e930:	b01d      	add	sp, #116	@ 0x74
 801e932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e936:	2340      	movs	r3, #64	@ 0x40
 801e938:	616b      	str	r3, [r5, #20]
 801e93a:	2300      	movs	r3, #0
 801e93c:	9309      	str	r3, [sp, #36]	@ 0x24
 801e93e:	2320      	movs	r3, #32
 801e940:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801e944:	f8cd 800c 	str.w	r8, [sp, #12]
 801e948:	2330      	movs	r3, #48	@ 0x30
 801e94a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801eae8 <_svfiprintf_r+0x1e4>
 801e94e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801e952:	f04f 0901 	mov.w	r9, #1
 801e956:	4623      	mov	r3, r4
 801e958:	469a      	mov	sl, r3
 801e95a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e95e:	b10a      	cbz	r2, 801e964 <_svfiprintf_r+0x60>
 801e960:	2a25      	cmp	r2, #37	@ 0x25
 801e962:	d1f9      	bne.n	801e958 <_svfiprintf_r+0x54>
 801e964:	ebba 0b04 	subs.w	fp, sl, r4
 801e968:	d00b      	beq.n	801e982 <_svfiprintf_r+0x7e>
 801e96a:	465b      	mov	r3, fp
 801e96c:	4622      	mov	r2, r4
 801e96e:	4629      	mov	r1, r5
 801e970:	4638      	mov	r0, r7
 801e972:	f7ff ff6b 	bl	801e84c <__ssputs_r>
 801e976:	3001      	adds	r0, #1
 801e978:	f000 80a7 	beq.w	801eaca <_svfiprintf_r+0x1c6>
 801e97c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e97e:	445a      	add	r2, fp
 801e980:	9209      	str	r2, [sp, #36]	@ 0x24
 801e982:	f89a 3000 	ldrb.w	r3, [sl]
 801e986:	2b00      	cmp	r3, #0
 801e988:	f000 809f 	beq.w	801eaca <_svfiprintf_r+0x1c6>
 801e98c:	2300      	movs	r3, #0
 801e98e:	f04f 32ff 	mov.w	r2, #4294967295
 801e992:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e996:	f10a 0a01 	add.w	sl, sl, #1
 801e99a:	9304      	str	r3, [sp, #16]
 801e99c:	9307      	str	r3, [sp, #28]
 801e99e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801e9a2:	931a      	str	r3, [sp, #104]	@ 0x68
 801e9a4:	4654      	mov	r4, sl
 801e9a6:	2205      	movs	r2, #5
 801e9a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e9ac:	484e      	ldr	r0, [pc, #312]	@ (801eae8 <_svfiprintf_r+0x1e4>)
 801e9ae:	f7e1 fc17 	bl	80001e0 <memchr>
 801e9b2:	9a04      	ldr	r2, [sp, #16]
 801e9b4:	b9d8      	cbnz	r0, 801e9ee <_svfiprintf_r+0xea>
 801e9b6:	06d0      	lsls	r0, r2, #27
 801e9b8:	bf44      	itt	mi
 801e9ba:	2320      	movmi	r3, #32
 801e9bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e9c0:	0711      	lsls	r1, r2, #28
 801e9c2:	bf44      	itt	mi
 801e9c4:	232b      	movmi	r3, #43	@ 0x2b
 801e9c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e9ca:	f89a 3000 	ldrb.w	r3, [sl]
 801e9ce:	2b2a      	cmp	r3, #42	@ 0x2a
 801e9d0:	d015      	beq.n	801e9fe <_svfiprintf_r+0xfa>
 801e9d2:	9a07      	ldr	r2, [sp, #28]
 801e9d4:	4654      	mov	r4, sl
 801e9d6:	2000      	movs	r0, #0
 801e9d8:	f04f 0c0a 	mov.w	ip, #10
 801e9dc:	4621      	mov	r1, r4
 801e9de:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e9e2:	3b30      	subs	r3, #48	@ 0x30
 801e9e4:	2b09      	cmp	r3, #9
 801e9e6:	d94b      	bls.n	801ea80 <_svfiprintf_r+0x17c>
 801e9e8:	b1b0      	cbz	r0, 801ea18 <_svfiprintf_r+0x114>
 801e9ea:	9207      	str	r2, [sp, #28]
 801e9ec:	e014      	b.n	801ea18 <_svfiprintf_r+0x114>
 801e9ee:	eba0 0308 	sub.w	r3, r0, r8
 801e9f2:	fa09 f303 	lsl.w	r3, r9, r3
 801e9f6:	4313      	orrs	r3, r2
 801e9f8:	9304      	str	r3, [sp, #16]
 801e9fa:	46a2      	mov	sl, r4
 801e9fc:	e7d2      	b.n	801e9a4 <_svfiprintf_r+0xa0>
 801e9fe:	9b03      	ldr	r3, [sp, #12]
 801ea00:	1d19      	adds	r1, r3, #4
 801ea02:	681b      	ldr	r3, [r3, #0]
 801ea04:	9103      	str	r1, [sp, #12]
 801ea06:	2b00      	cmp	r3, #0
 801ea08:	bfbb      	ittet	lt
 801ea0a:	425b      	neglt	r3, r3
 801ea0c:	f042 0202 	orrlt.w	r2, r2, #2
 801ea10:	9307      	strge	r3, [sp, #28]
 801ea12:	9307      	strlt	r3, [sp, #28]
 801ea14:	bfb8      	it	lt
 801ea16:	9204      	strlt	r2, [sp, #16]
 801ea18:	7823      	ldrb	r3, [r4, #0]
 801ea1a:	2b2e      	cmp	r3, #46	@ 0x2e
 801ea1c:	d10a      	bne.n	801ea34 <_svfiprintf_r+0x130>
 801ea1e:	7863      	ldrb	r3, [r4, #1]
 801ea20:	2b2a      	cmp	r3, #42	@ 0x2a
 801ea22:	d132      	bne.n	801ea8a <_svfiprintf_r+0x186>
 801ea24:	9b03      	ldr	r3, [sp, #12]
 801ea26:	1d1a      	adds	r2, r3, #4
 801ea28:	681b      	ldr	r3, [r3, #0]
 801ea2a:	9203      	str	r2, [sp, #12]
 801ea2c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801ea30:	3402      	adds	r4, #2
 801ea32:	9305      	str	r3, [sp, #20]
 801ea34:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801eaf8 <_svfiprintf_r+0x1f4>
 801ea38:	7821      	ldrb	r1, [r4, #0]
 801ea3a:	2203      	movs	r2, #3
 801ea3c:	4650      	mov	r0, sl
 801ea3e:	f7e1 fbcf 	bl	80001e0 <memchr>
 801ea42:	b138      	cbz	r0, 801ea54 <_svfiprintf_r+0x150>
 801ea44:	9b04      	ldr	r3, [sp, #16]
 801ea46:	eba0 000a 	sub.w	r0, r0, sl
 801ea4a:	2240      	movs	r2, #64	@ 0x40
 801ea4c:	4082      	lsls	r2, r0
 801ea4e:	4313      	orrs	r3, r2
 801ea50:	3401      	adds	r4, #1
 801ea52:	9304      	str	r3, [sp, #16]
 801ea54:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ea58:	4824      	ldr	r0, [pc, #144]	@ (801eaec <_svfiprintf_r+0x1e8>)
 801ea5a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801ea5e:	2206      	movs	r2, #6
 801ea60:	f7e1 fbbe 	bl	80001e0 <memchr>
 801ea64:	2800      	cmp	r0, #0
 801ea66:	d036      	beq.n	801ead6 <_svfiprintf_r+0x1d2>
 801ea68:	4b21      	ldr	r3, [pc, #132]	@ (801eaf0 <_svfiprintf_r+0x1ec>)
 801ea6a:	bb1b      	cbnz	r3, 801eab4 <_svfiprintf_r+0x1b0>
 801ea6c:	9b03      	ldr	r3, [sp, #12]
 801ea6e:	3307      	adds	r3, #7
 801ea70:	f023 0307 	bic.w	r3, r3, #7
 801ea74:	3308      	adds	r3, #8
 801ea76:	9303      	str	r3, [sp, #12]
 801ea78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ea7a:	4433      	add	r3, r6
 801ea7c:	9309      	str	r3, [sp, #36]	@ 0x24
 801ea7e:	e76a      	b.n	801e956 <_svfiprintf_r+0x52>
 801ea80:	fb0c 3202 	mla	r2, ip, r2, r3
 801ea84:	460c      	mov	r4, r1
 801ea86:	2001      	movs	r0, #1
 801ea88:	e7a8      	b.n	801e9dc <_svfiprintf_r+0xd8>
 801ea8a:	2300      	movs	r3, #0
 801ea8c:	3401      	adds	r4, #1
 801ea8e:	9305      	str	r3, [sp, #20]
 801ea90:	4619      	mov	r1, r3
 801ea92:	f04f 0c0a 	mov.w	ip, #10
 801ea96:	4620      	mov	r0, r4
 801ea98:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ea9c:	3a30      	subs	r2, #48	@ 0x30
 801ea9e:	2a09      	cmp	r2, #9
 801eaa0:	d903      	bls.n	801eaaa <_svfiprintf_r+0x1a6>
 801eaa2:	2b00      	cmp	r3, #0
 801eaa4:	d0c6      	beq.n	801ea34 <_svfiprintf_r+0x130>
 801eaa6:	9105      	str	r1, [sp, #20]
 801eaa8:	e7c4      	b.n	801ea34 <_svfiprintf_r+0x130>
 801eaaa:	fb0c 2101 	mla	r1, ip, r1, r2
 801eaae:	4604      	mov	r4, r0
 801eab0:	2301      	movs	r3, #1
 801eab2:	e7f0      	b.n	801ea96 <_svfiprintf_r+0x192>
 801eab4:	ab03      	add	r3, sp, #12
 801eab6:	9300      	str	r3, [sp, #0]
 801eab8:	462a      	mov	r2, r5
 801eaba:	4b0e      	ldr	r3, [pc, #56]	@ (801eaf4 <_svfiprintf_r+0x1f0>)
 801eabc:	a904      	add	r1, sp, #16
 801eabe:	4638      	mov	r0, r7
 801eac0:	f3af 8000 	nop.w
 801eac4:	1c42      	adds	r2, r0, #1
 801eac6:	4606      	mov	r6, r0
 801eac8:	d1d6      	bne.n	801ea78 <_svfiprintf_r+0x174>
 801eaca:	89ab      	ldrh	r3, [r5, #12]
 801eacc:	065b      	lsls	r3, r3, #25
 801eace:	f53f af2d 	bmi.w	801e92c <_svfiprintf_r+0x28>
 801ead2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ead4:	e72c      	b.n	801e930 <_svfiprintf_r+0x2c>
 801ead6:	ab03      	add	r3, sp, #12
 801ead8:	9300      	str	r3, [sp, #0]
 801eada:	462a      	mov	r2, r5
 801eadc:	4b05      	ldr	r3, [pc, #20]	@ (801eaf4 <_svfiprintf_r+0x1f0>)
 801eade:	a904      	add	r1, sp, #16
 801eae0:	4638      	mov	r0, r7
 801eae2:	f000 f9bb 	bl	801ee5c <_printf_i>
 801eae6:	e7ed      	b.n	801eac4 <_svfiprintf_r+0x1c0>
 801eae8:	08023fb7 	.word	0x08023fb7
 801eaec:	08023fc1 	.word	0x08023fc1
 801eaf0:	00000000 	.word	0x00000000
 801eaf4:	0801e84d 	.word	0x0801e84d
 801eaf8:	08023fbd 	.word	0x08023fbd

0801eafc <__sfputc_r>:
 801eafc:	6893      	ldr	r3, [r2, #8]
 801eafe:	3b01      	subs	r3, #1
 801eb00:	2b00      	cmp	r3, #0
 801eb02:	b410      	push	{r4}
 801eb04:	6093      	str	r3, [r2, #8]
 801eb06:	da08      	bge.n	801eb1a <__sfputc_r+0x1e>
 801eb08:	6994      	ldr	r4, [r2, #24]
 801eb0a:	42a3      	cmp	r3, r4
 801eb0c:	db01      	blt.n	801eb12 <__sfputc_r+0x16>
 801eb0e:	290a      	cmp	r1, #10
 801eb10:	d103      	bne.n	801eb1a <__sfputc_r+0x1e>
 801eb12:	f85d 4b04 	ldr.w	r4, [sp], #4
 801eb16:	f000 bb7d 	b.w	801f214 <__swbuf_r>
 801eb1a:	6813      	ldr	r3, [r2, #0]
 801eb1c:	1c58      	adds	r0, r3, #1
 801eb1e:	6010      	str	r0, [r2, #0]
 801eb20:	7019      	strb	r1, [r3, #0]
 801eb22:	4608      	mov	r0, r1
 801eb24:	f85d 4b04 	ldr.w	r4, [sp], #4
 801eb28:	4770      	bx	lr

0801eb2a <__sfputs_r>:
 801eb2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eb2c:	4606      	mov	r6, r0
 801eb2e:	460f      	mov	r7, r1
 801eb30:	4614      	mov	r4, r2
 801eb32:	18d5      	adds	r5, r2, r3
 801eb34:	42ac      	cmp	r4, r5
 801eb36:	d101      	bne.n	801eb3c <__sfputs_r+0x12>
 801eb38:	2000      	movs	r0, #0
 801eb3a:	e007      	b.n	801eb4c <__sfputs_r+0x22>
 801eb3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801eb40:	463a      	mov	r2, r7
 801eb42:	4630      	mov	r0, r6
 801eb44:	f7ff ffda 	bl	801eafc <__sfputc_r>
 801eb48:	1c43      	adds	r3, r0, #1
 801eb4a:	d1f3      	bne.n	801eb34 <__sfputs_r+0xa>
 801eb4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801eb50 <_vfiprintf_r>:
 801eb50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eb54:	460d      	mov	r5, r1
 801eb56:	b09d      	sub	sp, #116	@ 0x74
 801eb58:	4614      	mov	r4, r2
 801eb5a:	4698      	mov	r8, r3
 801eb5c:	4606      	mov	r6, r0
 801eb5e:	b118      	cbz	r0, 801eb68 <_vfiprintf_r+0x18>
 801eb60:	6a03      	ldr	r3, [r0, #32]
 801eb62:	b90b      	cbnz	r3, 801eb68 <_vfiprintf_r+0x18>
 801eb64:	f7ff fb5c 	bl	801e220 <__sinit>
 801eb68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801eb6a:	07d9      	lsls	r1, r3, #31
 801eb6c:	d405      	bmi.n	801eb7a <_vfiprintf_r+0x2a>
 801eb6e:	89ab      	ldrh	r3, [r5, #12]
 801eb70:	059a      	lsls	r2, r3, #22
 801eb72:	d402      	bmi.n	801eb7a <_vfiprintf_r+0x2a>
 801eb74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801eb76:	f7ff fd32 	bl	801e5de <__retarget_lock_acquire_recursive>
 801eb7a:	89ab      	ldrh	r3, [r5, #12]
 801eb7c:	071b      	lsls	r3, r3, #28
 801eb7e:	d501      	bpl.n	801eb84 <_vfiprintf_r+0x34>
 801eb80:	692b      	ldr	r3, [r5, #16]
 801eb82:	b99b      	cbnz	r3, 801ebac <_vfiprintf_r+0x5c>
 801eb84:	4629      	mov	r1, r5
 801eb86:	4630      	mov	r0, r6
 801eb88:	f000 fb82 	bl	801f290 <__swsetup_r>
 801eb8c:	b170      	cbz	r0, 801ebac <_vfiprintf_r+0x5c>
 801eb8e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801eb90:	07dc      	lsls	r4, r3, #31
 801eb92:	d504      	bpl.n	801eb9e <_vfiprintf_r+0x4e>
 801eb94:	f04f 30ff 	mov.w	r0, #4294967295
 801eb98:	b01d      	add	sp, #116	@ 0x74
 801eb9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eb9e:	89ab      	ldrh	r3, [r5, #12]
 801eba0:	0598      	lsls	r0, r3, #22
 801eba2:	d4f7      	bmi.n	801eb94 <_vfiprintf_r+0x44>
 801eba4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801eba6:	f7ff fd1b 	bl	801e5e0 <__retarget_lock_release_recursive>
 801ebaa:	e7f3      	b.n	801eb94 <_vfiprintf_r+0x44>
 801ebac:	2300      	movs	r3, #0
 801ebae:	9309      	str	r3, [sp, #36]	@ 0x24
 801ebb0:	2320      	movs	r3, #32
 801ebb2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801ebb6:	f8cd 800c 	str.w	r8, [sp, #12]
 801ebba:	2330      	movs	r3, #48	@ 0x30
 801ebbc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801ed6c <_vfiprintf_r+0x21c>
 801ebc0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801ebc4:	f04f 0901 	mov.w	r9, #1
 801ebc8:	4623      	mov	r3, r4
 801ebca:	469a      	mov	sl, r3
 801ebcc:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ebd0:	b10a      	cbz	r2, 801ebd6 <_vfiprintf_r+0x86>
 801ebd2:	2a25      	cmp	r2, #37	@ 0x25
 801ebd4:	d1f9      	bne.n	801ebca <_vfiprintf_r+0x7a>
 801ebd6:	ebba 0b04 	subs.w	fp, sl, r4
 801ebda:	d00b      	beq.n	801ebf4 <_vfiprintf_r+0xa4>
 801ebdc:	465b      	mov	r3, fp
 801ebde:	4622      	mov	r2, r4
 801ebe0:	4629      	mov	r1, r5
 801ebe2:	4630      	mov	r0, r6
 801ebe4:	f7ff ffa1 	bl	801eb2a <__sfputs_r>
 801ebe8:	3001      	adds	r0, #1
 801ebea:	f000 80a7 	beq.w	801ed3c <_vfiprintf_r+0x1ec>
 801ebee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ebf0:	445a      	add	r2, fp
 801ebf2:	9209      	str	r2, [sp, #36]	@ 0x24
 801ebf4:	f89a 3000 	ldrb.w	r3, [sl]
 801ebf8:	2b00      	cmp	r3, #0
 801ebfa:	f000 809f 	beq.w	801ed3c <_vfiprintf_r+0x1ec>
 801ebfe:	2300      	movs	r3, #0
 801ec00:	f04f 32ff 	mov.w	r2, #4294967295
 801ec04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ec08:	f10a 0a01 	add.w	sl, sl, #1
 801ec0c:	9304      	str	r3, [sp, #16]
 801ec0e:	9307      	str	r3, [sp, #28]
 801ec10:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801ec14:	931a      	str	r3, [sp, #104]	@ 0x68
 801ec16:	4654      	mov	r4, sl
 801ec18:	2205      	movs	r2, #5
 801ec1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ec1e:	4853      	ldr	r0, [pc, #332]	@ (801ed6c <_vfiprintf_r+0x21c>)
 801ec20:	f7e1 fade 	bl	80001e0 <memchr>
 801ec24:	9a04      	ldr	r2, [sp, #16]
 801ec26:	b9d8      	cbnz	r0, 801ec60 <_vfiprintf_r+0x110>
 801ec28:	06d1      	lsls	r1, r2, #27
 801ec2a:	bf44      	itt	mi
 801ec2c:	2320      	movmi	r3, #32
 801ec2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ec32:	0713      	lsls	r3, r2, #28
 801ec34:	bf44      	itt	mi
 801ec36:	232b      	movmi	r3, #43	@ 0x2b
 801ec38:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ec3c:	f89a 3000 	ldrb.w	r3, [sl]
 801ec40:	2b2a      	cmp	r3, #42	@ 0x2a
 801ec42:	d015      	beq.n	801ec70 <_vfiprintf_r+0x120>
 801ec44:	9a07      	ldr	r2, [sp, #28]
 801ec46:	4654      	mov	r4, sl
 801ec48:	2000      	movs	r0, #0
 801ec4a:	f04f 0c0a 	mov.w	ip, #10
 801ec4e:	4621      	mov	r1, r4
 801ec50:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ec54:	3b30      	subs	r3, #48	@ 0x30
 801ec56:	2b09      	cmp	r3, #9
 801ec58:	d94b      	bls.n	801ecf2 <_vfiprintf_r+0x1a2>
 801ec5a:	b1b0      	cbz	r0, 801ec8a <_vfiprintf_r+0x13a>
 801ec5c:	9207      	str	r2, [sp, #28]
 801ec5e:	e014      	b.n	801ec8a <_vfiprintf_r+0x13a>
 801ec60:	eba0 0308 	sub.w	r3, r0, r8
 801ec64:	fa09 f303 	lsl.w	r3, r9, r3
 801ec68:	4313      	orrs	r3, r2
 801ec6a:	9304      	str	r3, [sp, #16]
 801ec6c:	46a2      	mov	sl, r4
 801ec6e:	e7d2      	b.n	801ec16 <_vfiprintf_r+0xc6>
 801ec70:	9b03      	ldr	r3, [sp, #12]
 801ec72:	1d19      	adds	r1, r3, #4
 801ec74:	681b      	ldr	r3, [r3, #0]
 801ec76:	9103      	str	r1, [sp, #12]
 801ec78:	2b00      	cmp	r3, #0
 801ec7a:	bfbb      	ittet	lt
 801ec7c:	425b      	neglt	r3, r3
 801ec7e:	f042 0202 	orrlt.w	r2, r2, #2
 801ec82:	9307      	strge	r3, [sp, #28]
 801ec84:	9307      	strlt	r3, [sp, #28]
 801ec86:	bfb8      	it	lt
 801ec88:	9204      	strlt	r2, [sp, #16]
 801ec8a:	7823      	ldrb	r3, [r4, #0]
 801ec8c:	2b2e      	cmp	r3, #46	@ 0x2e
 801ec8e:	d10a      	bne.n	801eca6 <_vfiprintf_r+0x156>
 801ec90:	7863      	ldrb	r3, [r4, #1]
 801ec92:	2b2a      	cmp	r3, #42	@ 0x2a
 801ec94:	d132      	bne.n	801ecfc <_vfiprintf_r+0x1ac>
 801ec96:	9b03      	ldr	r3, [sp, #12]
 801ec98:	1d1a      	adds	r2, r3, #4
 801ec9a:	681b      	ldr	r3, [r3, #0]
 801ec9c:	9203      	str	r2, [sp, #12]
 801ec9e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801eca2:	3402      	adds	r4, #2
 801eca4:	9305      	str	r3, [sp, #20]
 801eca6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801ed7c <_vfiprintf_r+0x22c>
 801ecaa:	7821      	ldrb	r1, [r4, #0]
 801ecac:	2203      	movs	r2, #3
 801ecae:	4650      	mov	r0, sl
 801ecb0:	f7e1 fa96 	bl	80001e0 <memchr>
 801ecb4:	b138      	cbz	r0, 801ecc6 <_vfiprintf_r+0x176>
 801ecb6:	9b04      	ldr	r3, [sp, #16]
 801ecb8:	eba0 000a 	sub.w	r0, r0, sl
 801ecbc:	2240      	movs	r2, #64	@ 0x40
 801ecbe:	4082      	lsls	r2, r0
 801ecc0:	4313      	orrs	r3, r2
 801ecc2:	3401      	adds	r4, #1
 801ecc4:	9304      	str	r3, [sp, #16]
 801ecc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ecca:	4829      	ldr	r0, [pc, #164]	@ (801ed70 <_vfiprintf_r+0x220>)
 801eccc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801ecd0:	2206      	movs	r2, #6
 801ecd2:	f7e1 fa85 	bl	80001e0 <memchr>
 801ecd6:	2800      	cmp	r0, #0
 801ecd8:	d03f      	beq.n	801ed5a <_vfiprintf_r+0x20a>
 801ecda:	4b26      	ldr	r3, [pc, #152]	@ (801ed74 <_vfiprintf_r+0x224>)
 801ecdc:	bb1b      	cbnz	r3, 801ed26 <_vfiprintf_r+0x1d6>
 801ecde:	9b03      	ldr	r3, [sp, #12]
 801ece0:	3307      	adds	r3, #7
 801ece2:	f023 0307 	bic.w	r3, r3, #7
 801ece6:	3308      	adds	r3, #8
 801ece8:	9303      	str	r3, [sp, #12]
 801ecea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ecec:	443b      	add	r3, r7
 801ecee:	9309      	str	r3, [sp, #36]	@ 0x24
 801ecf0:	e76a      	b.n	801ebc8 <_vfiprintf_r+0x78>
 801ecf2:	fb0c 3202 	mla	r2, ip, r2, r3
 801ecf6:	460c      	mov	r4, r1
 801ecf8:	2001      	movs	r0, #1
 801ecfa:	e7a8      	b.n	801ec4e <_vfiprintf_r+0xfe>
 801ecfc:	2300      	movs	r3, #0
 801ecfe:	3401      	adds	r4, #1
 801ed00:	9305      	str	r3, [sp, #20]
 801ed02:	4619      	mov	r1, r3
 801ed04:	f04f 0c0a 	mov.w	ip, #10
 801ed08:	4620      	mov	r0, r4
 801ed0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ed0e:	3a30      	subs	r2, #48	@ 0x30
 801ed10:	2a09      	cmp	r2, #9
 801ed12:	d903      	bls.n	801ed1c <_vfiprintf_r+0x1cc>
 801ed14:	2b00      	cmp	r3, #0
 801ed16:	d0c6      	beq.n	801eca6 <_vfiprintf_r+0x156>
 801ed18:	9105      	str	r1, [sp, #20]
 801ed1a:	e7c4      	b.n	801eca6 <_vfiprintf_r+0x156>
 801ed1c:	fb0c 2101 	mla	r1, ip, r1, r2
 801ed20:	4604      	mov	r4, r0
 801ed22:	2301      	movs	r3, #1
 801ed24:	e7f0      	b.n	801ed08 <_vfiprintf_r+0x1b8>
 801ed26:	ab03      	add	r3, sp, #12
 801ed28:	9300      	str	r3, [sp, #0]
 801ed2a:	462a      	mov	r2, r5
 801ed2c:	4b12      	ldr	r3, [pc, #72]	@ (801ed78 <_vfiprintf_r+0x228>)
 801ed2e:	a904      	add	r1, sp, #16
 801ed30:	4630      	mov	r0, r6
 801ed32:	f3af 8000 	nop.w
 801ed36:	4607      	mov	r7, r0
 801ed38:	1c78      	adds	r0, r7, #1
 801ed3a:	d1d6      	bne.n	801ecea <_vfiprintf_r+0x19a>
 801ed3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801ed3e:	07d9      	lsls	r1, r3, #31
 801ed40:	d405      	bmi.n	801ed4e <_vfiprintf_r+0x1fe>
 801ed42:	89ab      	ldrh	r3, [r5, #12]
 801ed44:	059a      	lsls	r2, r3, #22
 801ed46:	d402      	bmi.n	801ed4e <_vfiprintf_r+0x1fe>
 801ed48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801ed4a:	f7ff fc49 	bl	801e5e0 <__retarget_lock_release_recursive>
 801ed4e:	89ab      	ldrh	r3, [r5, #12]
 801ed50:	065b      	lsls	r3, r3, #25
 801ed52:	f53f af1f 	bmi.w	801eb94 <_vfiprintf_r+0x44>
 801ed56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ed58:	e71e      	b.n	801eb98 <_vfiprintf_r+0x48>
 801ed5a:	ab03      	add	r3, sp, #12
 801ed5c:	9300      	str	r3, [sp, #0]
 801ed5e:	462a      	mov	r2, r5
 801ed60:	4b05      	ldr	r3, [pc, #20]	@ (801ed78 <_vfiprintf_r+0x228>)
 801ed62:	a904      	add	r1, sp, #16
 801ed64:	4630      	mov	r0, r6
 801ed66:	f000 f879 	bl	801ee5c <_printf_i>
 801ed6a:	e7e4      	b.n	801ed36 <_vfiprintf_r+0x1e6>
 801ed6c:	08023fb7 	.word	0x08023fb7
 801ed70:	08023fc1 	.word	0x08023fc1
 801ed74:	00000000 	.word	0x00000000
 801ed78:	0801eb2b 	.word	0x0801eb2b
 801ed7c:	08023fbd 	.word	0x08023fbd

0801ed80 <_printf_common>:
 801ed80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ed84:	4616      	mov	r6, r2
 801ed86:	4698      	mov	r8, r3
 801ed88:	688a      	ldr	r2, [r1, #8]
 801ed8a:	690b      	ldr	r3, [r1, #16]
 801ed8c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801ed90:	4293      	cmp	r3, r2
 801ed92:	bfb8      	it	lt
 801ed94:	4613      	movlt	r3, r2
 801ed96:	6033      	str	r3, [r6, #0]
 801ed98:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801ed9c:	4607      	mov	r7, r0
 801ed9e:	460c      	mov	r4, r1
 801eda0:	b10a      	cbz	r2, 801eda6 <_printf_common+0x26>
 801eda2:	3301      	adds	r3, #1
 801eda4:	6033      	str	r3, [r6, #0]
 801eda6:	6823      	ldr	r3, [r4, #0]
 801eda8:	0699      	lsls	r1, r3, #26
 801edaa:	bf42      	ittt	mi
 801edac:	6833      	ldrmi	r3, [r6, #0]
 801edae:	3302      	addmi	r3, #2
 801edb0:	6033      	strmi	r3, [r6, #0]
 801edb2:	6825      	ldr	r5, [r4, #0]
 801edb4:	f015 0506 	ands.w	r5, r5, #6
 801edb8:	d106      	bne.n	801edc8 <_printf_common+0x48>
 801edba:	f104 0a19 	add.w	sl, r4, #25
 801edbe:	68e3      	ldr	r3, [r4, #12]
 801edc0:	6832      	ldr	r2, [r6, #0]
 801edc2:	1a9b      	subs	r3, r3, r2
 801edc4:	42ab      	cmp	r3, r5
 801edc6:	dc26      	bgt.n	801ee16 <_printf_common+0x96>
 801edc8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801edcc:	6822      	ldr	r2, [r4, #0]
 801edce:	3b00      	subs	r3, #0
 801edd0:	bf18      	it	ne
 801edd2:	2301      	movne	r3, #1
 801edd4:	0692      	lsls	r2, r2, #26
 801edd6:	d42b      	bmi.n	801ee30 <_printf_common+0xb0>
 801edd8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801eddc:	4641      	mov	r1, r8
 801edde:	4638      	mov	r0, r7
 801ede0:	47c8      	blx	r9
 801ede2:	3001      	adds	r0, #1
 801ede4:	d01e      	beq.n	801ee24 <_printf_common+0xa4>
 801ede6:	6823      	ldr	r3, [r4, #0]
 801ede8:	6922      	ldr	r2, [r4, #16]
 801edea:	f003 0306 	and.w	r3, r3, #6
 801edee:	2b04      	cmp	r3, #4
 801edf0:	bf02      	ittt	eq
 801edf2:	68e5      	ldreq	r5, [r4, #12]
 801edf4:	6833      	ldreq	r3, [r6, #0]
 801edf6:	1aed      	subeq	r5, r5, r3
 801edf8:	68a3      	ldr	r3, [r4, #8]
 801edfa:	bf0c      	ite	eq
 801edfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801ee00:	2500      	movne	r5, #0
 801ee02:	4293      	cmp	r3, r2
 801ee04:	bfc4      	itt	gt
 801ee06:	1a9b      	subgt	r3, r3, r2
 801ee08:	18ed      	addgt	r5, r5, r3
 801ee0a:	2600      	movs	r6, #0
 801ee0c:	341a      	adds	r4, #26
 801ee0e:	42b5      	cmp	r5, r6
 801ee10:	d11a      	bne.n	801ee48 <_printf_common+0xc8>
 801ee12:	2000      	movs	r0, #0
 801ee14:	e008      	b.n	801ee28 <_printf_common+0xa8>
 801ee16:	2301      	movs	r3, #1
 801ee18:	4652      	mov	r2, sl
 801ee1a:	4641      	mov	r1, r8
 801ee1c:	4638      	mov	r0, r7
 801ee1e:	47c8      	blx	r9
 801ee20:	3001      	adds	r0, #1
 801ee22:	d103      	bne.n	801ee2c <_printf_common+0xac>
 801ee24:	f04f 30ff 	mov.w	r0, #4294967295
 801ee28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ee2c:	3501      	adds	r5, #1
 801ee2e:	e7c6      	b.n	801edbe <_printf_common+0x3e>
 801ee30:	18e1      	adds	r1, r4, r3
 801ee32:	1c5a      	adds	r2, r3, #1
 801ee34:	2030      	movs	r0, #48	@ 0x30
 801ee36:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801ee3a:	4422      	add	r2, r4
 801ee3c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801ee40:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801ee44:	3302      	adds	r3, #2
 801ee46:	e7c7      	b.n	801edd8 <_printf_common+0x58>
 801ee48:	2301      	movs	r3, #1
 801ee4a:	4622      	mov	r2, r4
 801ee4c:	4641      	mov	r1, r8
 801ee4e:	4638      	mov	r0, r7
 801ee50:	47c8      	blx	r9
 801ee52:	3001      	adds	r0, #1
 801ee54:	d0e6      	beq.n	801ee24 <_printf_common+0xa4>
 801ee56:	3601      	adds	r6, #1
 801ee58:	e7d9      	b.n	801ee0e <_printf_common+0x8e>
	...

0801ee5c <_printf_i>:
 801ee5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801ee60:	7e0f      	ldrb	r7, [r1, #24]
 801ee62:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801ee64:	2f78      	cmp	r7, #120	@ 0x78
 801ee66:	4691      	mov	r9, r2
 801ee68:	4680      	mov	r8, r0
 801ee6a:	460c      	mov	r4, r1
 801ee6c:	469a      	mov	sl, r3
 801ee6e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801ee72:	d807      	bhi.n	801ee84 <_printf_i+0x28>
 801ee74:	2f62      	cmp	r7, #98	@ 0x62
 801ee76:	d80a      	bhi.n	801ee8e <_printf_i+0x32>
 801ee78:	2f00      	cmp	r7, #0
 801ee7a:	f000 80d1 	beq.w	801f020 <_printf_i+0x1c4>
 801ee7e:	2f58      	cmp	r7, #88	@ 0x58
 801ee80:	f000 80b8 	beq.w	801eff4 <_printf_i+0x198>
 801ee84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801ee88:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801ee8c:	e03a      	b.n	801ef04 <_printf_i+0xa8>
 801ee8e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801ee92:	2b15      	cmp	r3, #21
 801ee94:	d8f6      	bhi.n	801ee84 <_printf_i+0x28>
 801ee96:	a101      	add	r1, pc, #4	@ (adr r1, 801ee9c <_printf_i+0x40>)
 801ee98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801ee9c:	0801eef5 	.word	0x0801eef5
 801eea0:	0801ef09 	.word	0x0801ef09
 801eea4:	0801ee85 	.word	0x0801ee85
 801eea8:	0801ee85 	.word	0x0801ee85
 801eeac:	0801ee85 	.word	0x0801ee85
 801eeb0:	0801ee85 	.word	0x0801ee85
 801eeb4:	0801ef09 	.word	0x0801ef09
 801eeb8:	0801ee85 	.word	0x0801ee85
 801eebc:	0801ee85 	.word	0x0801ee85
 801eec0:	0801ee85 	.word	0x0801ee85
 801eec4:	0801ee85 	.word	0x0801ee85
 801eec8:	0801f007 	.word	0x0801f007
 801eecc:	0801ef33 	.word	0x0801ef33
 801eed0:	0801efc1 	.word	0x0801efc1
 801eed4:	0801ee85 	.word	0x0801ee85
 801eed8:	0801ee85 	.word	0x0801ee85
 801eedc:	0801f029 	.word	0x0801f029
 801eee0:	0801ee85 	.word	0x0801ee85
 801eee4:	0801ef33 	.word	0x0801ef33
 801eee8:	0801ee85 	.word	0x0801ee85
 801eeec:	0801ee85 	.word	0x0801ee85
 801eef0:	0801efc9 	.word	0x0801efc9
 801eef4:	6833      	ldr	r3, [r6, #0]
 801eef6:	1d1a      	adds	r2, r3, #4
 801eef8:	681b      	ldr	r3, [r3, #0]
 801eefa:	6032      	str	r2, [r6, #0]
 801eefc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801ef00:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801ef04:	2301      	movs	r3, #1
 801ef06:	e09c      	b.n	801f042 <_printf_i+0x1e6>
 801ef08:	6833      	ldr	r3, [r6, #0]
 801ef0a:	6820      	ldr	r0, [r4, #0]
 801ef0c:	1d19      	adds	r1, r3, #4
 801ef0e:	6031      	str	r1, [r6, #0]
 801ef10:	0606      	lsls	r6, r0, #24
 801ef12:	d501      	bpl.n	801ef18 <_printf_i+0xbc>
 801ef14:	681d      	ldr	r5, [r3, #0]
 801ef16:	e003      	b.n	801ef20 <_printf_i+0xc4>
 801ef18:	0645      	lsls	r5, r0, #25
 801ef1a:	d5fb      	bpl.n	801ef14 <_printf_i+0xb8>
 801ef1c:	f9b3 5000 	ldrsh.w	r5, [r3]
 801ef20:	2d00      	cmp	r5, #0
 801ef22:	da03      	bge.n	801ef2c <_printf_i+0xd0>
 801ef24:	232d      	movs	r3, #45	@ 0x2d
 801ef26:	426d      	negs	r5, r5
 801ef28:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801ef2c:	4858      	ldr	r0, [pc, #352]	@ (801f090 <_printf_i+0x234>)
 801ef2e:	230a      	movs	r3, #10
 801ef30:	e011      	b.n	801ef56 <_printf_i+0xfa>
 801ef32:	6821      	ldr	r1, [r4, #0]
 801ef34:	6833      	ldr	r3, [r6, #0]
 801ef36:	0608      	lsls	r0, r1, #24
 801ef38:	f853 5b04 	ldr.w	r5, [r3], #4
 801ef3c:	d402      	bmi.n	801ef44 <_printf_i+0xe8>
 801ef3e:	0649      	lsls	r1, r1, #25
 801ef40:	bf48      	it	mi
 801ef42:	b2ad      	uxthmi	r5, r5
 801ef44:	2f6f      	cmp	r7, #111	@ 0x6f
 801ef46:	4852      	ldr	r0, [pc, #328]	@ (801f090 <_printf_i+0x234>)
 801ef48:	6033      	str	r3, [r6, #0]
 801ef4a:	bf14      	ite	ne
 801ef4c:	230a      	movne	r3, #10
 801ef4e:	2308      	moveq	r3, #8
 801ef50:	2100      	movs	r1, #0
 801ef52:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801ef56:	6866      	ldr	r6, [r4, #4]
 801ef58:	60a6      	str	r6, [r4, #8]
 801ef5a:	2e00      	cmp	r6, #0
 801ef5c:	db05      	blt.n	801ef6a <_printf_i+0x10e>
 801ef5e:	6821      	ldr	r1, [r4, #0]
 801ef60:	432e      	orrs	r6, r5
 801ef62:	f021 0104 	bic.w	r1, r1, #4
 801ef66:	6021      	str	r1, [r4, #0]
 801ef68:	d04b      	beq.n	801f002 <_printf_i+0x1a6>
 801ef6a:	4616      	mov	r6, r2
 801ef6c:	fbb5 f1f3 	udiv	r1, r5, r3
 801ef70:	fb03 5711 	mls	r7, r3, r1, r5
 801ef74:	5dc7      	ldrb	r7, [r0, r7]
 801ef76:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801ef7a:	462f      	mov	r7, r5
 801ef7c:	42bb      	cmp	r3, r7
 801ef7e:	460d      	mov	r5, r1
 801ef80:	d9f4      	bls.n	801ef6c <_printf_i+0x110>
 801ef82:	2b08      	cmp	r3, #8
 801ef84:	d10b      	bne.n	801ef9e <_printf_i+0x142>
 801ef86:	6823      	ldr	r3, [r4, #0]
 801ef88:	07df      	lsls	r7, r3, #31
 801ef8a:	d508      	bpl.n	801ef9e <_printf_i+0x142>
 801ef8c:	6923      	ldr	r3, [r4, #16]
 801ef8e:	6861      	ldr	r1, [r4, #4]
 801ef90:	4299      	cmp	r1, r3
 801ef92:	bfde      	ittt	le
 801ef94:	2330      	movle	r3, #48	@ 0x30
 801ef96:	f806 3c01 	strble.w	r3, [r6, #-1]
 801ef9a:	f106 36ff 	addle.w	r6, r6, #4294967295
 801ef9e:	1b92      	subs	r2, r2, r6
 801efa0:	6122      	str	r2, [r4, #16]
 801efa2:	f8cd a000 	str.w	sl, [sp]
 801efa6:	464b      	mov	r3, r9
 801efa8:	aa03      	add	r2, sp, #12
 801efaa:	4621      	mov	r1, r4
 801efac:	4640      	mov	r0, r8
 801efae:	f7ff fee7 	bl	801ed80 <_printf_common>
 801efb2:	3001      	adds	r0, #1
 801efb4:	d14a      	bne.n	801f04c <_printf_i+0x1f0>
 801efb6:	f04f 30ff 	mov.w	r0, #4294967295
 801efba:	b004      	add	sp, #16
 801efbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801efc0:	6823      	ldr	r3, [r4, #0]
 801efc2:	f043 0320 	orr.w	r3, r3, #32
 801efc6:	6023      	str	r3, [r4, #0]
 801efc8:	4832      	ldr	r0, [pc, #200]	@ (801f094 <_printf_i+0x238>)
 801efca:	2778      	movs	r7, #120	@ 0x78
 801efcc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801efd0:	6823      	ldr	r3, [r4, #0]
 801efd2:	6831      	ldr	r1, [r6, #0]
 801efd4:	061f      	lsls	r7, r3, #24
 801efd6:	f851 5b04 	ldr.w	r5, [r1], #4
 801efda:	d402      	bmi.n	801efe2 <_printf_i+0x186>
 801efdc:	065f      	lsls	r7, r3, #25
 801efde:	bf48      	it	mi
 801efe0:	b2ad      	uxthmi	r5, r5
 801efe2:	6031      	str	r1, [r6, #0]
 801efe4:	07d9      	lsls	r1, r3, #31
 801efe6:	bf44      	itt	mi
 801efe8:	f043 0320 	orrmi.w	r3, r3, #32
 801efec:	6023      	strmi	r3, [r4, #0]
 801efee:	b11d      	cbz	r5, 801eff8 <_printf_i+0x19c>
 801eff0:	2310      	movs	r3, #16
 801eff2:	e7ad      	b.n	801ef50 <_printf_i+0xf4>
 801eff4:	4826      	ldr	r0, [pc, #152]	@ (801f090 <_printf_i+0x234>)
 801eff6:	e7e9      	b.n	801efcc <_printf_i+0x170>
 801eff8:	6823      	ldr	r3, [r4, #0]
 801effa:	f023 0320 	bic.w	r3, r3, #32
 801effe:	6023      	str	r3, [r4, #0]
 801f000:	e7f6      	b.n	801eff0 <_printf_i+0x194>
 801f002:	4616      	mov	r6, r2
 801f004:	e7bd      	b.n	801ef82 <_printf_i+0x126>
 801f006:	6833      	ldr	r3, [r6, #0]
 801f008:	6825      	ldr	r5, [r4, #0]
 801f00a:	6961      	ldr	r1, [r4, #20]
 801f00c:	1d18      	adds	r0, r3, #4
 801f00e:	6030      	str	r0, [r6, #0]
 801f010:	062e      	lsls	r6, r5, #24
 801f012:	681b      	ldr	r3, [r3, #0]
 801f014:	d501      	bpl.n	801f01a <_printf_i+0x1be>
 801f016:	6019      	str	r1, [r3, #0]
 801f018:	e002      	b.n	801f020 <_printf_i+0x1c4>
 801f01a:	0668      	lsls	r0, r5, #25
 801f01c:	d5fb      	bpl.n	801f016 <_printf_i+0x1ba>
 801f01e:	8019      	strh	r1, [r3, #0]
 801f020:	2300      	movs	r3, #0
 801f022:	6123      	str	r3, [r4, #16]
 801f024:	4616      	mov	r6, r2
 801f026:	e7bc      	b.n	801efa2 <_printf_i+0x146>
 801f028:	6833      	ldr	r3, [r6, #0]
 801f02a:	1d1a      	adds	r2, r3, #4
 801f02c:	6032      	str	r2, [r6, #0]
 801f02e:	681e      	ldr	r6, [r3, #0]
 801f030:	6862      	ldr	r2, [r4, #4]
 801f032:	2100      	movs	r1, #0
 801f034:	4630      	mov	r0, r6
 801f036:	f7e1 f8d3 	bl	80001e0 <memchr>
 801f03a:	b108      	cbz	r0, 801f040 <_printf_i+0x1e4>
 801f03c:	1b80      	subs	r0, r0, r6
 801f03e:	6060      	str	r0, [r4, #4]
 801f040:	6863      	ldr	r3, [r4, #4]
 801f042:	6123      	str	r3, [r4, #16]
 801f044:	2300      	movs	r3, #0
 801f046:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801f04a:	e7aa      	b.n	801efa2 <_printf_i+0x146>
 801f04c:	6923      	ldr	r3, [r4, #16]
 801f04e:	4632      	mov	r2, r6
 801f050:	4649      	mov	r1, r9
 801f052:	4640      	mov	r0, r8
 801f054:	47d0      	blx	sl
 801f056:	3001      	adds	r0, #1
 801f058:	d0ad      	beq.n	801efb6 <_printf_i+0x15a>
 801f05a:	6823      	ldr	r3, [r4, #0]
 801f05c:	079b      	lsls	r3, r3, #30
 801f05e:	d413      	bmi.n	801f088 <_printf_i+0x22c>
 801f060:	68e0      	ldr	r0, [r4, #12]
 801f062:	9b03      	ldr	r3, [sp, #12]
 801f064:	4298      	cmp	r0, r3
 801f066:	bfb8      	it	lt
 801f068:	4618      	movlt	r0, r3
 801f06a:	e7a6      	b.n	801efba <_printf_i+0x15e>
 801f06c:	2301      	movs	r3, #1
 801f06e:	4632      	mov	r2, r6
 801f070:	4649      	mov	r1, r9
 801f072:	4640      	mov	r0, r8
 801f074:	47d0      	blx	sl
 801f076:	3001      	adds	r0, #1
 801f078:	d09d      	beq.n	801efb6 <_printf_i+0x15a>
 801f07a:	3501      	adds	r5, #1
 801f07c:	68e3      	ldr	r3, [r4, #12]
 801f07e:	9903      	ldr	r1, [sp, #12]
 801f080:	1a5b      	subs	r3, r3, r1
 801f082:	42ab      	cmp	r3, r5
 801f084:	dcf2      	bgt.n	801f06c <_printf_i+0x210>
 801f086:	e7eb      	b.n	801f060 <_printf_i+0x204>
 801f088:	2500      	movs	r5, #0
 801f08a:	f104 0619 	add.w	r6, r4, #25
 801f08e:	e7f5      	b.n	801f07c <_printf_i+0x220>
 801f090:	08023fc8 	.word	0x08023fc8
 801f094:	08023fd9 	.word	0x08023fd9

0801f098 <__sflush_r>:
 801f098:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801f09c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f0a0:	0716      	lsls	r6, r2, #28
 801f0a2:	4605      	mov	r5, r0
 801f0a4:	460c      	mov	r4, r1
 801f0a6:	d454      	bmi.n	801f152 <__sflush_r+0xba>
 801f0a8:	684b      	ldr	r3, [r1, #4]
 801f0aa:	2b00      	cmp	r3, #0
 801f0ac:	dc02      	bgt.n	801f0b4 <__sflush_r+0x1c>
 801f0ae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801f0b0:	2b00      	cmp	r3, #0
 801f0b2:	dd48      	ble.n	801f146 <__sflush_r+0xae>
 801f0b4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801f0b6:	2e00      	cmp	r6, #0
 801f0b8:	d045      	beq.n	801f146 <__sflush_r+0xae>
 801f0ba:	2300      	movs	r3, #0
 801f0bc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801f0c0:	682f      	ldr	r7, [r5, #0]
 801f0c2:	6a21      	ldr	r1, [r4, #32]
 801f0c4:	602b      	str	r3, [r5, #0]
 801f0c6:	d030      	beq.n	801f12a <__sflush_r+0x92>
 801f0c8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801f0ca:	89a3      	ldrh	r3, [r4, #12]
 801f0cc:	0759      	lsls	r1, r3, #29
 801f0ce:	d505      	bpl.n	801f0dc <__sflush_r+0x44>
 801f0d0:	6863      	ldr	r3, [r4, #4]
 801f0d2:	1ad2      	subs	r2, r2, r3
 801f0d4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801f0d6:	b10b      	cbz	r3, 801f0dc <__sflush_r+0x44>
 801f0d8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801f0da:	1ad2      	subs	r2, r2, r3
 801f0dc:	2300      	movs	r3, #0
 801f0de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801f0e0:	6a21      	ldr	r1, [r4, #32]
 801f0e2:	4628      	mov	r0, r5
 801f0e4:	47b0      	blx	r6
 801f0e6:	1c43      	adds	r3, r0, #1
 801f0e8:	89a3      	ldrh	r3, [r4, #12]
 801f0ea:	d106      	bne.n	801f0fa <__sflush_r+0x62>
 801f0ec:	6829      	ldr	r1, [r5, #0]
 801f0ee:	291d      	cmp	r1, #29
 801f0f0:	d82b      	bhi.n	801f14a <__sflush_r+0xb2>
 801f0f2:	4a2a      	ldr	r2, [pc, #168]	@ (801f19c <__sflush_r+0x104>)
 801f0f4:	40ca      	lsrs	r2, r1
 801f0f6:	07d6      	lsls	r6, r2, #31
 801f0f8:	d527      	bpl.n	801f14a <__sflush_r+0xb2>
 801f0fa:	2200      	movs	r2, #0
 801f0fc:	6062      	str	r2, [r4, #4]
 801f0fe:	04d9      	lsls	r1, r3, #19
 801f100:	6922      	ldr	r2, [r4, #16]
 801f102:	6022      	str	r2, [r4, #0]
 801f104:	d504      	bpl.n	801f110 <__sflush_r+0x78>
 801f106:	1c42      	adds	r2, r0, #1
 801f108:	d101      	bne.n	801f10e <__sflush_r+0x76>
 801f10a:	682b      	ldr	r3, [r5, #0]
 801f10c:	b903      	cbnz	r3, 801f110 <__sflush_r+0x78>
 801f10e:	6560      	str	r0, [r4, #84]	@ 0x54
 801f110:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801f112:	602f      	str	r7, [r5, #0]
 801f114:	b1b9      	cbz	r1, 801f146 <__sflush_r+0xae>
 801f116:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801f11a:	4299      	cmp	r1, r3
 801f11c:	d002      	beq.n	801f124 <__sflush_r+0x8c>
 801f11e:	4628      	mov	r0, r5
 801f120:	f7ff fa94 	bl	801e64c <_free_r>
 801f124:	2300      	movs	r3, #0
 801f126:	6363      	str	r3, [r4, #52]	@ 0x34
 801f128:	e00d      	b.n	801f146 <__sflush_r+0xae>
 801f12a:	2301      	movs	r3, #1
 801f12c:	4628      	mov	r0, r5
 801f12e:	47b0      	blx	r6
 801f130:	4602      	mov	r2, r0
 801f132:	1c50      	adds	r0, r2, #1
 801f134:	d1c9      	bne.n	801f0ca <__sflush_r+0x32>
 801f136:	682b      	ldr	r3, [r5, #0]
 801f138:	2b00      	cmp	r3, #0
 801f13a:	d0c6      	beq.n	801f0ca <__sflush_r+0x32>
 801f13c:	2b1d      	cmp	r3, #29
 801f13e:	d001      	beq.n	801f144 <__sflush_r+0xac>
 801f140:	2b16      	cmp	r3, #22
 801f142:	d11e      	bne.n	801f182 <__sflush_r+0xea>
 801f144:	602f      	str	r7, [r5, #0]
 801f146:	2000      	movs	r0, #0
 801f148:	e022      	b.n	801f190 <__sflush_r+0xf8>
 801f14a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801f14e:	b21b      	sxth	r3, r3
 801f150:	e01b      	b.n	801f18a <__sflush_r+0xf2>
 801f152:	690f      	ldr	r7, [r1, #16]
 801f154:	2f00      	cmp	r7, #0
 801f156:	d0f6      	beq.n	801f146 <__sflush_r+0xae>
 801f158:	0793      	lsls	r3, r2, #30
 801f15a:	680e      	ldr	r6, [r1, #0]
 801f15c:	bf08      	it	eq
 801f15e:	694b      	ldreq	r3, [r1, #20]
 801f160:	600f      	str	r7, [r1, #0]
 801f162:	bf18      	it	ne
 801f164:	2300      	movne	r3, #0
 801f166:	eba6 0807 	sub.w	r8, r6, r7
 801f16a:	608b      	str	r3, [r1, #8]
 801f16c:	f1b8 0f00 	cmp.w	r8, #0
 801f170:	dde9      	ble.n	801f146 <__sflush_r+0xae>
 801f172:	6a21      	ldr	r1, [r4, #32]
 801f174:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801f176:	4643      	mov	r3, r8
 801f178:	463a      	mov	r2, r7
 801f17a:	4628      	mov	r0, r5
 801f17c:	47b0      	blx	r6
 801f17e:	2800      	cmp	r0, #0
 801f180:	dc08      	bgt.n	801f194 <__sflush_r+0xfc>
 801f182:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f186:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801f18a:	81a3      	strh	r3, [r4, #12]
 801f18c:	f04f 30ff 	mov.w	r0, #4294967295
 801f190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f194:	4407      	add	r7, r0
 801f196:	eba8 0800 	sub.w	r8, r8, r0
 801f19a:	e7e7      	b.n	801f16c <__sflush_r+0xd4>
 801f19c:	20400001 	.word	0x20400001

0801f1a0 <_fflush_r>:
 801f1a0:	b538      	push	{r3, r4, r5, lr}
 801f1a2:	690b      	ldr	r3, [r1, #16]
 801f1a4:	4605      	mov	r5, r0
 801f1a6:	460c      	mov	r4, r1
 801f1a8:	b913      	cbnz	r3, 801f1b0 <_fflush_r+0x10>
 801f1aa:	2500      	movs	r5, #0
 801f1ac:	4628      	mov	r0, r5
 801f1ae:	bd38      	pop	{r3, r4, r5, pc}
 801f1b0:	b118      	cbz	r0, 801f1ba <_fflush_r+0x1a>
 801f1b2:	6a03      	ldr	r3, [r0, #32]
 801f1b4:	b90b      	cbnz	r3, 801f1ba <_fflush_r+0x1a>
 801f1b6:	f7ff f833 	bl	801e220 <__sinit>
 801f1ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f1be:	2b00      	cmp	r3, #0
 801f1c0:	d0f3      	beq.n	801f1aa <_fflush_r+0xa>
 801f1c2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801f1c4:	07d0      	lsls	r0, r2, #31
 801f1c6:	d404      	bmi.n	801f1d2 <_fflush_r+0x32>
 801f1c8:	0599      	lsls	r1, r3, #22
 801f1ca:	d402      	bmi.n	801f1d2 <_fflush_r+0x32>
 801f1cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801f1ce:	f7ff fa06 	bl	801e5de <__retarget_lock_acquire_recursive>
 801f1d2:	4628      	mov	r0, r5
 801f1d4:	4621      	mov	r1, r4
 801f1d6:	f7ff ff5f 	bl	801f098 <__sflush_r>
 801f1da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801f1dc:	07da      	lsls	r2, r3, #31
 801f1de:	4605      	mov	r5, r0
 801f1e0:	d4e4      	bmi.n	801f1ac <_fflush_r+0xc>
 801f1e2:	89a3      	ldrh	r3, [r4, #12]
 801f1e4:	059b      	lsls	r3, r3, #22
 801f1e6:	d4e1      	bmi.n	801f1ac <_fflush_r+0xc>
 801f1e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801f1ea:	f7ff f9f9 	bl	801e5e0 <__retarget_lock_release_recursive>
 801f1ee:	e7dd      	b.n	801f1ac <_fflush_r+0xc>

0801f1f0 <fiprintf>:
 801f1f0:	b40e      	push	{r1, r2, r3}
 801f1f2:	b503      	push	{r0, r1, lr}
 801f1f4:	4601      	mov	r1, r0
 801f1f6:	ab03      	add	r3, sp, #12
 801f1f8:	4805      	ldr	r0, [pc, #20]	@ (801f210 <fiprintf+0x20>)
 801f1fa:	f853 2b04 	ldr.w	r2, [r3], #4
 801f1fe:	6800      	ldr	r0, [r0, #0]
 801f200:	9301      	str	r3, [sp, #4]
 801f202:	f7ff fca5 	bl	801eb50 <_vfiprintf_r>
 801f206:	b002      	add	sp, #8
 801f208:	f85d eb04 	ldr.w	lr, [sp], #4
 801f20c:	b003      	add	sp, #12
 801f20e:	4770      	bx	lr
 801f210:	20000120 	.word	0x20000120

0801f214 <__swbuf_r>:
 801f214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f216:	460e      	mov	r6, r1
 801f218:	4614      	mov	r4, r2
 801f21a:	4605      	mov	r5, r0
 801f21c:	b118      	cbz	r0, 801f226 <__swbuf_r+0x12>
 801f21e:	6a03      	ldr	r3, [r0, #32]
 801f220:	b90b      	cbnz	r3, 801f226 <__swbuf_r+0x12>
 801f222:	f7fe fffd 	bl	801e220 <__sinit>
 801f226:	69a3      	ldr	r3, [r4, #24]
 801f228:	60a3      	str	r3, [r4, #8]
 801f22a:	89a3      	ldrh	r3, [r4, #12]
 801f22c:	071a      	lsls	r2, r3, #28
 801f22e:	d501      	bpl.n	801f234 <__swbuf_r+0x20>
 801f230:	6923      	ldr	r3, [r4, #16]
 801f232:	b943      	cbnz	r3, 801f246 <__swbuf_r+0x32>
 801f234:	4621      	mov	r1, r4
 801f236:	4628      	mov	r0, r5
 801f238:	f000 f82a 	bl	801f290 <__swsetup_r>
 801f23c:	b118      	cbz	r0, 801f246 <__swbuf_r+0x32>
 801f23e:	f04f 37ff 	mov.w	r7, #4294967295
 801f242:	4638      	mov	r0, r7
 801f244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f246:	6823      	ldr	r3, [r4, #0]
 801f248:	6922      	ldr	r2, [r4, #16]
 801f24a:	1a98      	subs	r0, r3, r2
 801f24c:	6963      	ldr	r3, [r4, #20]
 801f24e:	b2f6      	uxtb	r6, r6
 801f250:	4283      	cmp	r3, r0
 801f252:	4637      	mov	r7, r6
 801f254:	dc05      	bgt.n	801f262 <__swbuf_r+0x4e>
 801f256:	4621      	mov	r1, r4
 801f258:	4628      	mov	r0, r5
 801f25a:	f7ff ffa1 	bl	801f1a0 <_fflush_r>
 801f25e:	2800      	cmp	r0, #0
 801f260:	d1ed      	bne.n	801f23e <__swbuf_r+0x2a>
 801f262:	68a3      	ldr	r3, [r4, #8]
 801f264:	3b01      	subs	r3, #1
 801f266:	60a3      	str	r3, [r4, #8]
 801f268:	6823      	ldr	r3, [r4, #0]
 801f26a:	1c5a      	adds	r2, r3, #1
 801f26c:	6022      	str	r2, [r4, #0]
 801f26e:	701e      	strb	r6, [r3, #0]
 801f270:	6962      	ldr	r2, [r4, #20]
 801f272:	1c43      	adds	r3, r0, #1
 801f274:	429a      	cmp	r2, r3
 801f276:	d004      	beq.n	801f282 <__swbuf_r+0x6e>
 801f278:	89a3      	ldrh	r3, [r4, #12]
 801f27a:	07db      	lsls	r3, r3, #31
 801f27c:	d5e1      	bpl.n	801f242 <__swbuf_r+0x2e>
 801f27e:	2e0a      	cmp	r6, #10
 801f280:	d1df      	bne.n	801f242 <__swbuf_r+0x2e>
 801f282:	4621      	mov	r1, r4
 801f284:	4628      	mov	r0, r5
 801f286:	f7ff ff8b 	bl	801f1a0 <_fflush_r>
 801f28a:	2800      	cmp	r0, #0
 801f28c:	d0d9      	beq.n	801f242 <__swbuf_r+0x2e>
 801f28e:	e7d6      	b.n	801f23e <__swbuf_r+0x2a>

0801f290 <__swsetup_r>:
 801f290:	b538      	push	{r3, r4, r5, lr}
 801f292:	4b29      	ldr	r3, [pc, #164]	@ (801f338 <__swsetup_r+0xa8>)
 801f294:	4605      	mov	r5, r0
 801f296:	6818      	ldr	r0, [r3, #0]
 801f298:	460c      	mov	r4, r1
 801f29a:	b118      	cbz	r0, 801f2a4 <__swsetup_r+0x14>
 801f29c:	6a03      	ldr	r3, [r0, #32]
 801f29e:	b90b      	cbnz	r3, 801f2a4 <__swsetup_r+0x14>
 801f2a0:	f7fe ffbe 	bl	801e220 <__sinit>
 801f2a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f2a8:	0719      	lsls	r1, r3, #28
 801f2aa:	d422      	bmi.n	801f2f2 <__swsetup_r+0x62>
 801f2ac:	06da      	lsls	r2, r3, #27
 801f2ae:	d407      	bmi.n	801f2c0 <__swsetup_r+0x30>
 801f2b0:	2209      	movs	r2, #9
 801f2b2:	602a      	str	r2, [r5, #0]
 801f2b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801f2b8:	81a3      	strh	r3, [r4, #12]
 801f2ba:	f04f 30ff 	mov.w	r0, #4294967295
 801f2be:	e033      	b.n	801f328 <__swsetup_r+0x98>
 801f2c0:	0758      	lsls	r0, r3, #29
 801f2c2:	d512      	bpl.n	801f2ea <__swsetup_r+0x5a>
 801f2c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801f2c6:	b141      	cbz	r1, 801f2da <__swsetup_r+0x4a>
 801f2c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801f2cc:	4299      	cmp	r1, r3
 801f2ce:	d002      	beq.n	801f2d6 <__swsetup_r+0x46>
 801f2d0:	4628      	mov	r0, r5
 801f2d2:	f7ff f9bb 	bl	801e64c <_free_r>
 801f2d6:	2300      	movs	r3, #0
 801f2d8:	6363      	str	r3, [r4, #52]	@ 0x34
 801f2da:	89a3      	ldrh	r3, [r4, #12]
 801f2dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801f2e0:	81a3      	strh	r3, [r4, #12]
 801f2e2:	2300      	movs	r3, #0
 801f2e4:	6063      	str	r3, [r4, #4]
 801f2e6:	6923      	ldr	r3, [r4, #16]
 801f2e8:	6023      	str	r3, [r4, #0]
 801f2ea:	89a3      	ldrh	r3, [r4, #12]
 801f2ec:	f043 0308 	orr.w	r3, r3, #8
 801f2f0:	81a3      	strh	r3, [r4, #12]
 801f2f2:	6923      	ldr	r3, [r4, #16]
 801f2f4:	b94b      	cbnz	r3, 801f30a <__swsetup_r+0x7a>
 801f2f6:	89a3      	ldrh	r3, [r4, #12]
 801f2f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801f2fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801f300:	d003      	beq.n	801f30a <__swsetup_r+0x7a>
 801f302:	4621      	mov	r1, r4
 801f304:	4628      	mov	r0, r5
 801f306:	f000 f884 	bl	801f412 <__smakebuf_r>
 801f30a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f30e:	f013 0201 	ands.w	r2, r3, #1
 801f312:	d00a      	beq.n	801f32a <__swsetup_r+0x9a>
 801f314:	2200      	movs	r2, #0
 801f316:	60a2      	str	r2, [r4, #8]
 801f318:	6962      	ldr	r2, [r4, #20]
 801f31a:	4252      	negs	r2, r2
 801f31c:	61a2      	str	r2, [r4, #24]
 801f31e:	6922      	ldr	r2, [r4, #16]
 801f320:	b942      	cbnz	r2, 801f334 <__swsetup_r+0xa4>
 801f322:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801f326:	d1c5      	bne.n	801f2b4 <__swsetup_r+0x24>
 801f328:	bd38      	pop	{r3, r4, r5, pc}
 801f32a:	0799      	lsls	r1, r3, #30
 801f32c:	bf58      	it	pl
 801f32e:	6962      	ldrpl	r2, [r4, #20]
 801f330:	60a2      	str	r2, [r4, #8]
 801f332:	e7f4      	b.n	801f31e <__swsetup_r+0x8e>
 801f334:	2000      	movs	r0, #0
 801f336:	e7f7      	b.n	801f328 <__swsetup_r+0x98>
 801f338:	20000120 	.word	0x20000120

0801f33c <_sbrk_r>:
 801f33c:	b538      	push	{r3, r4, r5, lr}
 801f33e:	4d06      	ldr	r5, [pc, #24]	@ (801f358 <_sbrk_r+0x1c>)
 801f340:	2300      	movs	r3, #0
 801f342:	4604      	mov	r4, r0
 801f344:	4608      	mov	r0, r1
 801f346:	602b      	str	r3, [r5, #0]
 801f348:	f7e5 f86e 	bl	8004428 <_sbrk>
 801f34c:	1c43      	adds	r3, r0, #1
 801f34e:	d102      	bne.n	801f356 <_sbrk_r+0x1a>
 801f350:	682b      	ldr	r3, [r5, #0]
 801f352:	b103      	cbz	r3, 801f356 <_sbrk_r+0x1a>
 801f354:	6023      	str	r3, [r4, #0]
 801f356:	bd38      	pop	{r3, r4, r5, pc}
 801f358:	2000e94c 	.word	0x2000e94c

0801f35c <abort>:
 801f35c:	b508      	push	{r3, lr}
 801f35e:	2006      	movs	r0, #6
 801f360:	f000 f8bc 	bl	801f4dc <raise>
 801f364:	2001      	movs	r0, #1
 801f366:	f7e4 ffe7 	bl	8004338 <_exit>

0801f36a <_realloc_r>:
 801f36a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f36e:	4607      	mov	r7, r0
 801f370:	4614      	mov	r4, r2
 801f372:	460d      	mov	r5, r1
 801f374:	b921      	cbnz	r1, 801f380 <_realloc_r+0x16>
 801f376:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f37a:	4611      	mov	r1, r2
 801f37c:	f7ff b9da 	b.w	801e734 <_malloc_r>
 801f380:	b92a      	cbnz	r2, 801f38e <_realloc_r+0x24>
 801f382:	f7ff f963 	bl	801e64c <_free_r>
 801f386:	4625      	mov	r5, r4
 801f388:	4628      	mov	r0, r5
 801f38a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f38e:	f000 f8e3 	bl	801f558 <_malloc_usable_size_r>
 801f392:	4284      	cmp	r4, r0
 801f394:	4606      	mov	r6, r0
 801f396:	d802      	bhi.n	801f39e <_realloc_r+0x34>
 801f398:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801f39c:	d8f4      	bhi.n	801f388 <_realloc_r+0x1e>
 801f39e:	4621      	mov	r1, r4
 801f3a0:	4638      	mov	r0, r7
 801f3a2:	f7ff f9c7 	bl	801e734 <_malloc_r>
 801f3a6:	4680      	mov	r8, r0
 801f3a8:	b908      	cbnz	r0, 801f3ae <_realloc_r+0x44>
 801f3aa:	4645      	mov	r5, r8
 801f3ac:	e7ec      	b.n	801f388 <_realloc_r+0x1e>
 801f3ae:	42b4      	cmp	r4, r6
 801f3b0:	4622      	mov	r2, r4
 801f3b2:	4629      	mov	r1, r5
 801f3b4:	bf28      	it	cs
 801f3b6:	4632      	movcs	r2, r6
 801f3b8:	f7ff f91b 	bl	801e5f2 <memcpy>
 801f3bc:	4629      	mov	r1, r5
 801f3be:	4638      	mov	r0, r7
 801f3c0:	f7ff f944 	bl	801e64c <_free_r>
 801f3c4:	e7f1      	b.n	801f3aa <_realloc_r+0x40>

0801f3c6 <__swhatbuf_r>:
 801f3c6:	b570      	push	{r4, r5, r6, lr}
 801f3c8:	460c      	mov	r4, r1
 801f3ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f3ce:	2900      	cmp	r1, #0
 801f3d0:	b096      	sub	sp, #88	@ 0x58
 801f3d2:	4615      	mov	r5, r2
 801f3d4:	461e      	mov	r6, r3
 801f3d6:	da0d      	bge.n	801f3f4 <__swhatbuf_r+0x2e>
 801f3d8:	89a3      	ldrh	r3, [r4, #12]
 801f3da:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801f3de:	f04f 0100 	mov.w	r1, #0
 801f3e2:	bf14      	ite	ne
 801f3e4:	2340      	movne	r3, #64	@ 0x40
 801f3e6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801f3ea:	2000      	movs	r0, #0
 801f3ec:	6031      	str	r1, [r6, #0]
 801f3ee:	602b      	str	r3, [r5, #0]
 801f3f0:	b016      	add	sp, #88	@ 0x58
 801f3f2:	bd70      	pop	{r4, r5, r6, pc}
 801f3f4:	466a      	mov	r2, sp
 801f3f6:	f000 f879 	bl	801f4ec <_fstat_r>
 801f3fa:	2800      	cmp	r0, #0
 801f3fc:	dbec      	blt.n	801f3d8 <__swhatbuf_r+0x12>
 801f3fe:	9901      	ldr	r1, [sp, #4]
 801f400:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801f404:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801f408:	4259      	negs	r1, r3
 801f40a:	4159      	adcs	r1, r3
 801f40c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801f410:	e7eb      	b.n	801f3ea <__swhatbuf_r+0x24>

0801f412 <__smakebuf_r>:
 801f412:	898b      	ldrh	r3, [r1, #12]
 801f414:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f416:	079d      	lsls	r5, r3, #30
 801f418:	4606      	mov	r6, r0
 801f41a:	460c      	mov	r4, r1
 801f41c:	d507      	bpl.n	801f42e <__smakebuf_r+0x1c>
 801f41e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801f422:	6023      	str	r3, [r4, #0]
 801f424:	6123      	str	r3, [r4, #16]
 801f426:	2301      	movs	r3, #1
 801f428:	6163      	str	r3, [r4, #20]
 801f42a:	b003      	add	sp, #12
 801f42c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f42e:	ab01      	add	r3, sp, #4
 801f430:	466a      	mov	r2, sp
 801f432:	f7ff ffc8 	bl	801f3c6 <__swhatbuf_r>
 801f436:	9f00      	ldr	r7, [sp, #0]
 801f438:	4605      	mov	r5, r0
 801f43a:	4639      	mov	r1, r7
 801f43c:	4630      	mov	r0, r6
 801f43e:	f7ff f979 	bl	801e734 <_malloc_r>
 801f442:	b948      	cbnz	r0, 801f458 <__smakebuf_r+0x46>
 801f444:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f448:	059a      	lsls	r2, r3, #22
 801f44a:	d4ee      	bmi.n	801f42a <__smakebuf_r+0x18>
 801f44c:	f023 0303 	bic.w	r3, r3, #3
 801f450:	f043 0302 	orr.w	r3, r3, #2
 801f454:	81a3      	strh	r3, [r4, #12]
 801f456:	e7e2      	b.n	801f41e <__smakebuf_r+0xc>
 801f458:	89a3      	ldrh	r3, [r4, #12]
 801f45a:	6020      	str	r0, [r4, #0]
 801f45c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801f460:	81a3      	strh	r3, [r4, #12]
 801f462:	9b01      	ldr	r3, [sp, #4]
 801f464:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801f468:	b15b      	cbz	r3, 801f482 <__smakebuf_r+0x70>
 801f46a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f46e:	4630      	mov	r0, r6
 801f470:	f000 f84e 	bl	801f510 <_isatty_r>
 801f474:	b128      	cbz	r0, 801f482 <__smakebuf_r+0x70>
 801f476:	89a3      	ldrh	r3, [r4, #12]
 801f478:	f023 0303 	bic.w	r3, r3, #3
 801f47c:	f043 0301 	orr.w	r3, r3, #1
 801f480:	81a3      	strh	r3, [r4, #12]
 801f482:	89a3      	ldrh	r3, [r4, #12]
 801f484:	431d      	orrs	r5, r3
 801f486:	81a5      	strh	r5, [r4, #12]
 801f488:	e7cf      	b.n	801f42a <__smakebuf_r+0x18>

0801f48a <_raise_r>:
 801f48a:	291f      	cmp	r1, #31
 801f48c:	b538      	push	{r3, r4, r5, lr}
 801f48e:	4605      	mov	r5, r0
 801f490:	460c      	mov	r4, r1
 801f492:	d904      	bls.n	801f49e <_raise_r+0x14>
 801f494:	2316      	movs	r3, #22
 801f496:	6003      	str	r3, [r0, #0]
 801f498:	f04f 30ff 	mov.w	r0, #4294967295
 801f49c:	bd38      	pop	{r3, r4, r5, pc}
 801f49e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801f4a0:	b112      	cbz	r2, 801f4a8 <_raise_r+0x1e>
 801f4a2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801f4a6:	b94b      	cbnz	r3, 801f4bc <_raise_r+0x32>
 801f4a8:	4628      	mov	r0, r5
 801f4aa:	f000 f853 	bl	801f554 <_getpid_r>
 801f4ae:	4622      	mov	r2, r4
 801f4b0:	4601      	mov	r1, r0
 801f4b2:	4628      	mov	r0, r5
 801f4b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f4b8:	f000 b83a 	b.w	801f530 <_kill_r>
 801f4bc:	2b01      	cmp	r3, #1
 801f4be:	d00a      	beq.n	801f4d6 <_raise_r+0x4c>
 801f4c0:	1c59      	adds	r1, r3, #1
 801f4c2:	d103      	bne.n	801f4cc <_raise_r+0x42>
 801f4c4:	2316      	movs	r3, #22
 801f4c6:	6003      	str	r3, [r0, #0]
 801f4c8:	2001      	movs	r0, #1
 801f4ca:	e7e7      	b.n	801f49c <_raise_r+0x12>
 801f4cc:	2100      	movs	r1, #0
 801f4ce:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801f4d2:	4620      	mov	r0, r4
 801f4d4:	4798      	blx	r3
 801f4d6:	2000      	movs	r0, #0
 801f4d8:	e7e0      	b.n	801f49c <_raise_r+0x12>
	...

0801f4dc <raise>:
 801f4dc:	4b02      	ldr	r3, [pc, #8]	@ (801f4e8 <raise+0xc>)
 801f4de:	4601      	mov	r1, r0
 801f4e0:	6818      	ldr	r0, [r3, #0]
 801f4e2:	f7ff bfd2 	b.w	801f48a <_raise_r>
 801f4e6:	bf00      	nop
 801f4e8:	20000120 	.word	0x20000120

0801f4ec <_fstat_r>:
 801f4ec:	b538      	push	{r3, r4, r5, lr}
 801f4ee:	4d07      	ldr	r5, [pc, #28]	@ (801f50c <_fstat_r+0x20>)
 801f4f0:	2300      	movs	r3, #0
 801f4f2:	4604      	mov	r4, r0
 801f4f4:	4608      	mov	r0, r1
 801f4f6:	4611      	mov	r1, r2
 801f4f8:	602b      	str	r3, [r5, #0]
 801f4fa:	f7e4 ff6d 	bl	80043d8 <_fstat>
 801f4fe:	1c43      	adds	r3, r0, #1
 801f500:	d102      	bne.n	801f508 <_fstat_r+0x1c>
 801f502:	682b      	ldr	r3, [r5, #0]
 801f504:	b103      	cbz	r3, 801f508 <_fstat_r+0x1c>
 801f506:	6023      	str	r3, [r4, #0]
 801f508:	bd38      	pop	{r3, r4, r5, pc}
 801f50a:	bf00      	nop
 801f50c:	2000e94c 	.word	0x2000e94c

0801f510 <_isatty_r>:
 801f510:	b538      	push	{r3, r4, r5, lr}
 801f512:	4d06      	ldr	r5, [pc, #24]	@ (801f52c <_isatty_r+0x1c>)
 801f514:	2300      	movs	r3, #0
 801f516:	4604      	mov	r4, r0
 801f518:	4608      	mov	r0, r1
 801f51a:	602b      	str	r3, [r5, #0]
 801f51c:	f7e4 ff6c 	bl	80043f8 <_isatty>
 801f520:	1c43      	adds	r3, r0, #1
 801f522:	d102      	bne.n	801f52a <_isatty_r+0x1a>
 801f524:	682b      	ldr	r3, [r5, #0]
 801f526:	b103      	cbz	r3, 801f52a <_isatty_r+0x1a>
 801f528:	6023      	str	r3, [r4, #0]
 801f52a:	bd38      	pop	{r3, r4, r5, pc}
 801f52c:	2000e94c 	.word	0x2000e94c

0801f530 <_kill_r>:
 801f530:	b538      	push	{r3, r4, r5, lr}
 801f532:	4d07      	ldr	r5, [pc, #28]	@ (801f550 <_kill_r+0x20>)
 801f534:	2300      	movs	r3, #0
 801f536:	4604      	mov	r4, r0
 801f538:	4608      	mov	r0, r1
 801f53a:	4611      	mov	r1, r2
 801f53c:	602b      	str	r3, [r5, #0]
 801f53e:	f7e4 fee9 	bl	8004314 <_kill>
 801f542:	1c43      	adds	r3, r0, #1
 801f544:	d102      	bne.n	801f54c <_kill_r+0x1c>
 801f546:	682b      	ldr	r3, [r5, #0]
 801f548:	b103      	cbz	r3, 801f54c <_kill_r+0x1c>
 801f54a:	6023      	str	r3, [r4, #0]
 801f54c:	bd38      	pop	{r3, r4, r5, pc}
 801f54e:	bf00      	nop
 801f550:	2000e94c 	.word	0x2000e94c

0801f554 <_getpid_r>:
 801f554:	f7e4 bed6 	b.w	8004304 <_getpid>

0801f558 <_malloc_usable_size_r>:
 801f558:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f55c:	1f18      	subs	r0, r3, #4
 801f55e:	2b00      	cmp	r3, #0
 801f560:	bfbc      	itt	lt
 801f562:	580b      	ldrlt	r3, [r1, r0]
 801f564:	18c0      	addlt	r0, r0, r3
 801f566:	4770      	bx	lr

0801f568 <_init>:
 801f568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f56a:	bf00      	nop
 801f56c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f56e:	bc08      	pop	{r3}
 801f570:	469e      	mov	lr, r3
 801f572:	4770      	bx	lr

0801f574 <_fini>:
 801f574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f576:	bf00      	nop
 801f578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f57a:	bc08      	pop	{r3}
 801f57c:	469e      	mov	lr, r3
 801f57e:	4770      	bx	lr
